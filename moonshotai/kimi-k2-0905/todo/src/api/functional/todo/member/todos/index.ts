import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoTodo } from "../../../../structures/ITodoTodo";
import { IPageITodoTodo } from "../../../../structures/IPageITodoTodo";

/**
 * Create a new todo item.
 *
 * Creates a new todo item owned by the authenticated member with the specified
 * properties. The todo title is required while all other fields are optional.
 * The system automatically generates a unique identifier and timestamps for
 * creation and modification. The new todo appears immediately in the user's
 * list with completion status set to incomplete by default.
 *
 * This operation requires a valid member authentication token to identify the
 * todo owner. The system validates input constraints including title length
 * (1-200 characters), description length if provided (up to 1000 characters),
 * and ensures due dates are in the future when specified. Priority levels are
 * validated against the accepted values (Low, Medium, High) with a default of
 * Medium when not provided.
 *
 * The response includes the complete todo item with all system-generated fields
 * populated, allowing immediate use of the new todo in subsequent operations.
 *
 * @param props.connection
 * @param props.body Creation data for the new todo item
 * @path /todo/member/todos
 * @accessor api.functional.todo.member.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for the new todo item */
    body: ITodoTodo.ITodoCreate;
  };
  export type Body = ITodoTodo.ITodoCreate;
  export type Response = ITodoTodo;

  export const METADATA = {
    method: "POST",
    path: "/todo/member/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todo/member/todos";
  export const random = (): ITodoTodo => typia.random<ITodoTodo>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and filter member's todo items with pagination and sorting.
 *
 * Retrieve a filtered and paginated list of todo items from the authenticated
 * member's personal collection. This operation supports comprehensive search
 * capabilities including text-based title searching using PostgreSQL GIN
 * trigram indexes, filtering by completion status (active/completed), priority
 * level (Low/Medium/High), and sorting by creation date, priority, or
 * completion status.
 *
 * The operation provides efficient pagination support for managing large todo
 * lists, with configurable page sizes and cursor-based pagination to maintain
 * consistent performance. Search results are returned as summary data optimized
 * for list display, showing essential information like title, completion
 * status, priority, and key timestamps without exposing sensitive details.
 *
 * Security considerations include mandatory member authentication to ensure
 * users can only access their personal todo items. The operation implements
 * rate limiting to prevent abuse while maintaining responsive performance for
 * legitimate usage. The response format is optimized for mobile applications
 * with minimal payload sizes while preserving all necessary data for complete
 * functionality.
 *
 * The todo_todos table from the Prisma schema defines the data structure with
 * fields including title (up to 500 characters), completion status, priority
 * levels, creation and modification timestamps, and completion timestamps. The
 * operation leverages indexed queries for optimal performance across the
 * member_id and completed status fields.
 *
 * @param props.connection
 * @param props.body Search and filtering parameters for todo items including
 *   pagination, filters, and sorting options
 * @path /todo/member/todos
 * @accessor api.functional.todo.member.todos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filtering parameters for todo items including pagination,
     * filters, and sorting options
     */
    body: ITodoTodo.IRequest;
  };
  export type Body = ITodoTodo.IRequest;
  export type Response = IPageITodoTodo.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todo/member/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todo/member/todos";
  export const random = (): IPageITodoTodo.ISummary =>
    typia.random<IPageITodoTodo.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific todo item.
 *
 * Fetch complete details for a specific todo item identified by its unique
 * UUID. This operation returns all properties of the todo item including the
 * primary title, completion status, priority level, creation timestamp, last
 * modification timestamp, and completion timestamp when applicable.
 *
 * The operation enforces strict access control by verifying that the requested
 * todo item belongs to the authenticated member user. Unauthorized access
 * attempts are rejected with appropriate error responses, maintaining user
 * privacy and data security. The detailed response includes all fields
 * necessary for comprehensive todo management including full text content,
 * status information, and temporal tracking data.
 *
 * Performance is optimized through database indexing on the primary key and
 * member_id fields as defined in the Prisma schema. The operation supports
 * efficient retrieval even for users with large todo collections while
 * maintaining sub-second response times under normal conditions.
 *
 * The response format provides complete todo information suitable for detailed
 * view interfaces, editing forms, and comprehensive task analysis. All
 * timestamps are returned in standardized formats supporting cross-device
 * compatibility and mobile application requirements.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo item to retrieve
 * @path /todo/member/todos/:todoId
 * @accessor api.functional.todo.member.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the todo item to retrieve */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoTodo;

  export const METADATA = {
    method: "GET",
    path: "/todo/member/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todo/member/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoTodo => typia.random<ITodoTodo>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing todo item.
 *
 * Updates the specified todo item with new property values. The authenticated
 * member must own the todo item to perform updates. All fields can be modified
 * including the title, completion status, description, due date, and priority
 * level. The system automatically records modification timestamps and
 * completion time when marking a todo as complete.
 *
 * The operation validates that the requesting member owns the specified todo
 * item through the owner relationship defined in the schema. Unauthorized
 * access attempts result in permission-denied responses. Input validation rules
 * include title length requirements (1-200 characters), description length
 * limits if provided (up to 1000 characters), and proper formatting for due
 * dates and priority values.
 *
 * When toggling completion status, the system automatically manages the
 * completed_at timestamp - setting it when marking complete and clearing it
 * when reverting to incomplete. The response includes the fully updated todo
 * item reflecting all changes made during the update operation.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo item to update
 * @param props.body Updated data for the todo item
 * @path /todo/member/todos/:todoId
 * @accessor api.functional.todo.member.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the todo item to update */
    todoId: string & tags.Format<"uuid">;

    /** Updated data for the todo item */
    body: ITodoTodo.ITodoUpdate;
  };
  export type Body = ITodoTodo.ITodoUpdate;
  export type Response = ITodoTodo;

  export const METADATA = {
    method: "PUT",
    path: "/todo/member/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todo/member/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoTodo => typia.random<ITodoTodo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific todo item.
 *
 * This operation permanently removes a todo item from the system. The todo item
 * is identified by its unique UUID in the path parameter. Only the owner
 * (member) of the todo item can delete it, ensuring data privacy and ownership
 * rights.
 *
 * The system validates that the authenticated user owns the todo item before
 * allowing deletion. This prevents unauthorized access to personal todo data
 * and maintains user separation of concerns. Upon successful deletion, the todo
 * item is completely removed from the database and cannot be recovered.
 *
 * Error handling includes validation for non-existent todo items, ownership
 * verification, and system-level deletion failures. Users receive appropriate
 * feedback for any issues that prevent successful deletion.
 *
 * @param props.connection
 * @param props.todoId The unique identifier of the todo item to delete
 * @path /todo/member/todos/:todoId
 * @accessor api.functional.todo.member.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the todo item to delete */
    todoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todo/member/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todo/member/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
