import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoMember } from "../../../../structures/ITodoMember";
import { IPageITodoMember } from "../../../../structures/IPageITodoMember";

/**
 * Search and retrieve paginated list of members.
 *
 * This operation provides search and retrieval capabilities for members within
 * the system. It supports advanced filtering based on account status, creation
 * date ranges, and activity patterns. The results are paginated to handle large
 * member populations efficiently.
 *
 * The operation includes search functionality using full-text search on member
 * identifiers, allowing members to find specific member accounts if they have
 * the necessary permissions. It supports sorting by various parameters
 * including creation date, last login, and email address to facilitate member
 * discovery.
 *
 * Pagination ensures the system can handle large numbers of members
 * efficiently, with configurable page sizes for optimal performance. The
 * response includes both the current page of members and metadata about the
 * total results, current pagination position, and available sorting options.
 *
 * Security measures ensure that sensitive member data is appropriately handled
 * and only authorized users can access member lists based on their role and
 * permissions. The system maintains member privacy by only exposing necessary
 * information for legitimate purposes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for member
 *   filtering
 * @path /todo/member/members
 * @accessor api.functional.todo.member.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for member filtering */
    body: ITodoMember.IRequest;
  };
  export type Body = ITodoMember.IRequest;
  export type Response = IPageITodoMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todo/member/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todo/member/members";
  export const random = (): IPageITodoMember.ISummary =>
    typia.random<IPageITodoMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed member profile information.
 *
 * Retrieves comprehensive profile data for an authenticated member user,
 * including account details, session status, and activity history. This
 * operation accesses the todo_member table to fetch user-specific information
 * such as email, role, login attempts, and session tokens. The response
 * includes authentication state, account creation timestamp, and
 * security-related information like lockout status.
 *
 * The operation ensures that only authenticated members can access their own
 * profile data through JWT token validation and session verification. It
 * supports the user account management functionality by providing necessary
 * profile information for display in dashboards and account settings pages.
 *
 * Security considerations include proper session validation to prevent
 * unauthorized access to member profiles. The operation integrates with the
 * todo_sessions table to verify current authentication tokens and determine
 * valid login states for proper account access control.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member user
 * @path /todo/member/members/:memberId
 * @accessor api.functional.todo.member.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the member user */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoMember;

  export const METADATA = {
    method: "GET",
    path: "/todo/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todo/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ITodoMember => typia.random<ITodoMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update member profile information.
 *
 * Updates member profile data for authenticated users, allowing modification of
 * display information, role assignments, and session management settings. This
 * operation accesses the todo_member table to perform authorized updates while
 * maintaining account security through proper validation and change tracking.
 *
 * The implementation handles member self-service profile updates with
 * appropriate validation rules for email format, role permissions, and session
 * token management. It supports essential account maintenance functionality
 * while preventing unauthorized changes to security-sensitive fields like
 * password hashes. The operation includes proper timestamp updates for audit
 * trails and provides feedback about successful modification operations.
 *
 * Business logic includes validation of update permissions based on member
 * authentication state, ensuring users can only modify their own profiles
 * unless they have elevated privileges. The operation integrates with JWT
 * authentication systems to verify session validity and prevent unauthorized
 * profile modifications while supporting normal account management workflows
 * for individual members.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member user to update
 * @param props.body Updated member profile information including editable
 *   fields
 * @path /todo/member/members/:memberId
 * @accessor api.functional.todo.member.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the member user to update */
    memberId: string & tags.Format<"uuid">;

    /** Updated member profile information including editable fields */
    body: ITodoMember.IUpdate;
  };
  export type Body = ITodoMember.IUpdate;
  export type Response = ITodoMember;

  export const METADATA = {
    method: "PUT",
    path: "/todo/member/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todo/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ITodoMember => typia.random<ITodoMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete member account and all personal data permanently.
 *
 * Delete a member user account along with all associated todo items. The
 * operation removes the member record from the todo_member table and through
 * cascade deletion removes all related todos. This is a hard delete operation
 * with permanent data loss – all data will be completely removed from the
 * database without recovery possibility.
 *
 * The system validates the member can only delete their own account. Users must
 * pass their own memberId to confirm account deletion permission. The operation
 * completes within 2 seconds and provides immediate confirmation of successful
 * permanent deletion.
 *
 * This endpoint is designed for user account management where members need
 * complete account removal and permanent data cleanup from the system.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member account to delete
 * @path /todo/member/members/:memberId
 * @accessor api.functional.todo.member.members.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the member account to delete */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todo/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todo/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
