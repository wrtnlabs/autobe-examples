import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMemberLogin } from "../../../structures/IMemberLogin";
import { ITodoMember } from "../../../structures/ITodoMember";
import { IMemberCreate } from "../../../structures/IMemberCreate";
import { ITokenRefresh } from "../../../structures/ITokenRefresh";

/**
 * Authenticate member users and generate JWT tokens for accessing protected
 * todo management functionality.
 *
 * This authentication operation enables member users to log into the Todo List
 * application using their registered email and password credentials. The system
 * validates user credentials against stored password hashes using secure
 * cryptographic methods, generates authenticated JWT tokens with appropriate
 * expiration times, and establishes a valid user session for accessing
 * protected todo management functionality. The login process implements
 * security measures including account lockout after excessive failed attempts,
 * session token rotation for enhanced security, and comprehensive logging for
 * security monitoring. Upon successful authentication, users gain full access
 * to their personal todo collections, can create new todo items, modify
 * existing tasks, and utilize all member-specific features including priority
 * levels, due dates, and advanced filtering capabilities. The authentication
 * tokens are designed with appropriate expiration times balancing security with
 * user convenience, supporting persistent login sessions while implementing
 * proper token refresh mechanisms to maintain security throughout extended
 * usage periods.
 *
 * @param props.connection
 * @param props.body Member login credentials including email and password for
 *   authentication
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Member login credentials including email and password for
     * authentication
     */
    body: IMemberLogin.IRequest;
  };
  export type Body = IMemberLogin.IRequest;
  export type Response = ITodoMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): ITodoMember.IAuthorized =>
    typia.random<ITodoMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Register new member users and provide immediate JWT authentication access.
 *
 * This registration operation enables new users to create member accounts in
 * the Todo List application with minimal registration requirements focused on
 * essential credentials. The system captures user's email address and password,
 * validates email format uniqueness and password quality requirements, creates
 * a new member record with secure password hashing, generates initial JWT
 * authentication tokens with appropriate expiration times, and establishes a
 * complete authentication session for immediate access to member-only
 * functionality. The registration process is designed for maximum simplicity to
 * encourage adoption while maintaining security standards through proper
 * password validation, email confirmation, and secure token generation. After
 * successful registration, users gain full access to their personal todo
 * management capabilities including creating unlimited todo items, organizing
 * tasks with priority levels, setting due dates, and utilizing advanced
 * filtering and search functionality. The operation creates the necessary
 * session infrastructure to support persistent login access while implementing
 * proper account security measures including failed login attempt tracking and
 * session management.
 *
 * @param props.connection
 * @param props.body Member registration data including email, password, and
 *   optional user information for account creation
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Member registration data including email, password, and optional user
     * information for account creation
     */
    body: IMemberCreate.IRequest;
  };
  export type Body = IMemberCreate.IRequest;
  export type Response = ITodoMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): ITodoMember.IAuthorized =>
    typia.random<ITodoMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Extend member authentication sessions by refreshing expired JWT tokens.
 *
 * This token refresh operation allows authenticated member users to extend
 * their login sessions by exchanging valid refresh tokens for new access
 * tokens. The system validates the refresh token's authenticity, checks
 * expiration status to ensure it's still valid, generates new secure access
 * tokens with updated expiration times, and maintains the user's authentication
 * session without interruption. The refresh mechanism implements security best
 * practices by keeping refresh tokens separate from access tokens, supporting
 * secure token rotation for enhanced security, and providing proper error
 * handling for invalid or expired tokens. The operation ensures users can
 * maintain continuous authenticated access to their todo management features
 * without frequent re-authentication interruptions, implements token lifecycle
 * management to balance security with convenience, and supports mobile and
 * desktop usage patterns where consistent authentication state is essential for
 * seamless user experience during extended todo management sessions.
 *
 * @param props.connection
 * @param props.body JWT refresh token for requesting new access tokens and
 *   extending authenticated sessions
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * JWT refresh token for requesting new access tokens and extending
     * authenticated sessions
     */
    body: ITokenRefresh.IRequest;
  };
  export type Body = ITokenRefresh.IRequest;
  export type Response = ITodoMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): ITodoMember.IAuthorized =>
    typia.random<ITodoMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
