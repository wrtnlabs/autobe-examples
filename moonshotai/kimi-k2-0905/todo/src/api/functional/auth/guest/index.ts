import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ITodoGuest } from "../../../structures/ITodoGuest";

/**
 * Guest registration endpoint for creating temporary browsing sessions.
 *
 * Guest registration endpoint that creates temporary guest accounts for viewing
 * demonstration todos and exploring application functionality. This operation
 * generates a unique session identifier for tracking guest browsing activity
 * and creates session metadata for managing demonstration content access. Guest
 * users can only view sample todos and have read-only access to understand the
 * application's core features before registering as members.
 *
 * The guest registration process requires no personal information - only
 * automatic session tracking for demonstration purposes. Guests can browse
 * existing public todos to understand how the application works without
 * creating an account or providing contact details. This provides frictionless
 * exploration of the todo management features while maintaining clear
 * separation between demonstration content and personal user todos.
 *
 * Guest sessions are tracked for basic activity monitoring and demonstration
 * content delivery. The system automatically generates session identifiers and
 * timestamps for managing the guest browsing experience. All guest activities
 * are limited to read-only access of demonstration content - no todo creation,
 * modification, or personal data collection occurs during guest usage.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(connection: IConnection): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Response = ITodoGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): ITodoGuest.IAuthorized =>
    typia.random<ITodoGuest.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Guest session refresh for extending demonstration access.
 *
 * Guest session refresh endpoint that extends temporary browsing sessions for
 * continued access to demonstration todos. This operation validates the current
 * guest session identifier and renews session timestamps to maintain continuity
 * in the guest browsing experience. Guest users can continue exploring the
 * application functionality without interruption while their demonstration
 * session remains active.
 *
 * The session refresh mechanism ensures that guest users maintain continuous
 * access to view sample todos and understand application features without being
 * unexpectedly logged out. The operation updates the guest's last activity
 * timestamp and extends their browsing session for reasonable time periods.
 * This provides a smooth exploration experience while the system tracks session
 * activity for demonstration content management.
 *
 * Guest session refresh supports the discovery phase where users evaluate the
 * todo application before deciding to register as members. The system maintains
 * session consistency and prevents unauthorized extension of guest privileges
 * beyond the intended demonstration scope. All session renewals remain within
 * the bounds of read-only access to public demonstration content.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Response = ITodoGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): ITodoGuest.IAuthorized =>
    typia.random<ITodoGuest.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
