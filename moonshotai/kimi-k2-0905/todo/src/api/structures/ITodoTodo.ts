import { tags } from "typia";

import { IETodoPriority } from "./IETodoPriority";

/**
 * Complete todo entity containing all properties for detailed task management.
 *
 * Represents a single todo item with full lifecycle information including
 * ownership, status tracking, and chronological data for comprehensive user
 * interface display.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoTodo = {
  /** Unique todo identifier for system reference */
  id: string & tags.Format<"uuid">;

  /** Owning member identifier linking todo to user account */
  member_id: string & tags.Format<"uuid">;

  /** Todo title describing the task content */
  title: string;

  /** Completion status indicating task completion state */
  completed: boolean;

  /** Priority level for task organization and sorting */
  priority: IETodoPriority;

  /** ISO 8601 creation timestamp automatically set by system */
  created_at: string & tags.Format<"date-time">;

  /** ISO 8601 last modification timestamp automatically updated */
  updated_at: string & tags.Format<"date-time">;

  /** ISO 8601 completion timestamp set when todo is marked complete */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoTodo {
  /**
   * Todo search and filtering request parameters for retrieving paginated
   * todo lists.
   *
   * Supports comprehensive filtering by status, priority, search terms, and
   * provides sorting options for organized result presentation.
   */
  export type IRequest = {
    /** Page number for pagination (starts from 1) */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of items per page (default: 100, max: 100) */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Text search string to filter todos by title content */
    search?: string | undefined;

    /**
     * Filter by completion status (true for completed, false for
     * incomplete)
     */
    completed?: boolean | null | undefined;

    /** Filter by priority level (Low/Medium/High) */
    priority?: IETodoPriority | null | undefined;

    /** Field to sort results by for consistent ordering */
    sort_by?: "created_at" | "priority" | "completed" | "title" | undefined;
  };

  /**
   * Todo update data allowing modification of any individual property.
   *
   * Supports partial updates where only provided fields are modified,
   * enabling efficient incremental changes while preserving existing values.
   */
  export type ITodoUpdate = {
    /** Optional updated todo title text */
    title?: (string & tags.MinLength<1> & tags.MaxLength<200>) | undefined;

    /** Optional completion status update */
    completed?: boolean | undefined;

    /** Optional priority level update */
    priority?: IETodoPriority | null | undefined;
  };

  /**
   * Todo creation data with required title and optional priority.
   *
   * Defines the minimum data required to create a new todo item in the
   * member's personal collection while supporting optional organizational
   * features.
   */
  export type ITodoCreate = {
    /** Required todo title text describing the task */
    title: string & tags.MinLength<1> & tags.MaxLength<200>;

    /**
     * Optional priority level for task organization (defaults to Medium if
     * not specified)
     */
    priority?: IETodoPriority | null | undefined;
  };

  /**
   * Simplified todo summary optimized for list display and pagination.
   *
   * Provides essential todo information for efficient list rendering while
   * maintaining complete data integrity for user interface presentation.
   */
  export type ISummary = {
    /** Unique todo identifier for list reference */
    id: string & tags.Format<"uuid">;

    /** Todo title text for task identification */
    title: string;

    /** Completion status for status filtering and display */
    completed: boolean;

    /** Priority level for organization and sorting */
    priority: IETodoPriority;

    /** ISO 8601 creation timestamp for chronological ordering */
    created_at: string & tags.Format<"date-time">;

    /** ISO 8601 last modification timestamp */
    updated_at: string & tags.Format<"date-time">;
  };
}
