import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberLogin } from "../../../providers/postAuthMemberLogin";
import { postAuthMemberJoin } from "../../../providers/postAuthMemberJoin";
import { postAuthMemberRefresh } from "../../../providers/postAuthMemberRefresh";

import { ITodoMember } from "../../../api/structures/ITodoMember";
import { IMemberLogin } from "../../../api/structures/IMemberLogin";
import { IMemberCreate } from "../../../api/structures/IMemberCreate";
import { ITokenRefresh } from "../../../api/structures/ITokenRefresh";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Authenticate member users and generate JWT tokens for accessing protected
   * todo management functionality.
   *
   * This authentication operation enables member users to log into the Todo
   * List application using their registered email and password credentials. The
   * system validates user credentials against stored password hashes using
   * secure cryptographic methods, generates authenticated JWT tokens with
   * appropriate expiration times, and establishes a valid user session for
   * accessing protected todo management functionality. The login process
   * implements security measures including account lockout after excessive
   * failed attempts, session token rotation for enhanced security, and
   * comprehensive logging for security monitoring. Upon successful
   * authentication, users gain full access to their personal todo collections,
   * can create new todo items, modify existing tasks, and utilize all
   * member-specific features including priority levels, due dates, and advanced
   * filtering capabilities. The authentication tokens are designed with
   * appropriate expiration times balancing security with user convenience,
   * supporting persistent login sessions while implementing proper token
   * refresh mechanisms to maintain security throughout extended usage periods.
   *
   * @param connection
   * @param body Member login credentials including email and password for
   *   authentication
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IMemberLogin.IRequest,
  ): Promise<ITodoMember.IAuthorized> {
    try {
      return await postAuthMemberLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Register new member users and provide immediate JWT authentication access.
   *
   * This registration operation enables new users to create member accounts in
   * the Todo List application with minimal registration requirements focused on
   * essential credentials. The system captures user's email address and
   * password, validates email format uniqueness and password quality
   * requirements, creates a new member record with secure password hashing,
   * generates initial JWT authentication tokens with appropriate expiration
   * times, and establishes a complete authentication session for immediate
   * access to member-only functionality. The registration process is designed
   * for maximum simplicity to encourage adoption while maintaining security
   * standards through proper password validation, email confirmation, and
   * secure token generation. After successful registration, users gain full
   * access to their personal todo management capabilities including creating
   * unlimited todo items, organizing tasks with priority levels, setting due
   * dates, and utilizing advanced filtering and search functionality. The
   * operation creates the necessary session infrastructure to support
   * persistent login access while implementing proper account security measures
   * including failed login attempt tracking and session management.
   *
   * @param connection
   * @param body Member registration data including email, password, and
   *   optional user information for account creation
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IMemberCreate.IRequest,
  ): Promise<ITodoMember.IAuthorized> {
    try {
      return await postAuthMemberJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Extend member authentication sessions by refreshing expired JWT tokens.
   *
   * This token refresh operation allows authenticated member users to extend
   * their login sessions by exchanging valid refresh tokens for new access
   * tokens. The system validates the refresh token's authenticity, checks
   * expiration status to ensure it's still valid, generates new secure access
   * tokens with updated expiration times, and maintains the user's
   * authentication session without interruption. The refresh mechanism
   * implements security best practices by keeping refresh tokens separate from
   * access tokens, supporting secure token rotation for enhanced security, and
   * providing proper error handling for invalid or expired tokens. The
   * operation ensures users can maintain continuous authenticated access to
   * their todo management features without frequent re-authentication
   * interruptions, implements token lifecycle management to balance security
   * with convenience, and supports mobile and desktop usage patterns where
   * consistent authentication state is essential for seamless user experience
   * during extended todo management sessions.
   *
   * @param connection
   * @param body JWT refresh token for requesting new access tokens and
   *   extending authenticated sessions
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITokenRefresh.IRequest,
  ): Promise<ITodoMember.IAuthorized> {
    try {
      return await postAuthMemberRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
