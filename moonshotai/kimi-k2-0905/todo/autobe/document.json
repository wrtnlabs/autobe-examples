{"operations":[{"specification":"Guest user registration endpoint that allows unauthenticated users to create a temporary guest account and session. This operation generates a session identifier and establishes guest browsing capabilities without collecting personal information. The guest account is used for viewing demonstration todos and understanding application functionality before deciding to register as a member.","authorizationType":"join","description":"Guest registration endpoint that creates temporary guest accounts for viewing demonstration todos and exploring application functionality. This operation generates a unique session identifier for tracking guest browsing activity and creates session metadata for managing demonstration content access. Guest users can only view sample todos and have read-only access to understand the application's core features before registering as members.\n\nThe guest registration process requires no personal information - only automatic session tracking for demonstration purposes. Guests can browse existing public todos to understand how the application works without creating an account or providing contact details. This provides frictionless exploration of the todo management features while maintaining clear separation between demonstration content and personal user todos.\n\nGuest sessions are tracked for basic activity monitoring and demonstration content delivery. The system automatically generates session identifiers and timestamps for managing the guest browsing experience. All guest activities are limited to read-only access of demonstration content - no todo creation, modification, or personal data collection occurs during guest usage.","summary":"Guest registration endpoint for creating temporary browsing sessions","parameters":[],"requestBody":null,"responseBody":{"description":"Guest registration success response with session details","typeName":"ITodoGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post","accessor":["auth","guest","join"]},{"specification":"Guest session refresh endpoint that renews the guest browsing session and extends temporary access to demonstration todos. This operation validates the current guest session and issues a fresh session token with updated timestamps for continued browsing of public demonstration content without requiring re-registration.","authorizationType":"refresh","description":"Guest session refresh endpoint that extends temporary browsing sessions for continued access to demonstration todos. This operation validates the current guest session identifier and renews session timestamps to maintain continuity in the guest browsing experience. Guest users can continue exploring the application functionality without interruption while their demonstration session remains active.\n\nThe session refresh mechanism ensures that guest users maintain continuous access to view sample todos and understand application features without being unexpectedly logged out. The operation updates the guest's last activity timestamp and extends their browsing session for reasonable time periods. This provides a smooth exploration experience while the system tracks session activity for demonstration content management.\n\nGuest session refresh supports the discovery phase where users evaluate the todo application before deciding to register as members. The system maintains session consistency and prevents unauthorized extension of guest privileges beyond the intended demonstration scope. All session renewals remain within the bounds of read-only access to public demonstration content.","summary":"Guest session refresh for extending demonstration access","parameters":[],"requestBody":null,"responseBody":{"description":"Guest session refreshed successfully with updated timestamps","typeName":"ITodoGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post","accessor":["auth","guest","refresh"]},{"authorizationRole":null,"authorizationType":"login","description":"This authentication operation enables member users to log into the Todo List application using their registered email and password credentials. The system validates user credentials against stored password hashes using secure cryptographic methods, generates authenticated JWT tokens with appropriate expiration times, and establishes a valid user session for accessing protected todo management functionality. The login process implements security measures including account lockout after excessive failed attempts, session token rotation for enhanced security, and comprehensive logging for security monitoring. Upon successful authentication, users gain full access to their personal todo collections, can create new todo items, modify existing tasks, and utilize all member-specific features including priority levels, due dates, and advanced filtering capabilities. The authentication tokens are designed with appropriate expiration times balancing security with user convenience, supporting persistent login sessions while implementing proper token refresh mechanisms to maintain security throughout extended usage periods.","method":"post","name":"login","parameters":[],"path":"/auth/member/login","prerequisites":[],"requestBody":{"description":"Member login credentials including email and password for authentication","typeName":"IMemberLogin.IRequest"},"responseBody":{"description":"JWT authentication tokens including access token and refresh token with expiration details","typeName":"ITodoMember.IAuthorized"},"specification":"Create a comprehensive JWT-based authentication system for member users that handles user login authentication with email and password verification, generates secure access and refresh tokens, manages session lifecycle with proper token expiration, and provides secure authentication flow with password hashing and session management capabilities","summary":"Authenticate member users and generate JWT tokens for accessing protected todo management functionality","accessor":["auth","member","login"]},{"authorizationRole":null,"authorizationType":"join","description":"This registration operation enables new users to create member accounts in the Todo List application with minimal registration requirements focused on essential credentials. The system captures user's email address and password, validates email format uniqueness and password quality requirements, creates a new member record with secure password hashing, generates initial JWT authentication tokens with appropriate expiration times, and establishes a complete authentication session for immediate access to member-only functionality. The registration process is designed for maximum simplicity to encourage adoption while maintaining security standards through proper password validation, email confirmation, and secure token generation. After successful registration, users gain full access to their personal todo management capabilities including creating unlimited todo items, organizing tasks with priority levels, setting due dates, and utilizing advanced filtering and search functionality. The operation creates the necessary session infrastructure to support persistent login access while implementing proper account security measures including failed login attempt tracking and session management.","method":"post","name":"join","parameters":[],"path":"/auth/member/join","prerequisites":[],"requestBody":{"description":"Member registration data including email, password, and optional user information for account creation","typeName":"IMemberCreate.IRequest"},"responseBody":{"description":"JWT authentication tokens for newly created member account with access and refresh tokens for immediate functionality","typeName":"ITodoMember.IAuthorized"},"specification":"Create an authentication system for member user registration that handles new account creation with email and password validation, generates initial JWT tokens for immediate account access, implements secure password hashing for storage security, and provides seamless onboarding into the Todo List application's member features","summary":"Register new member users and provide immediate JWT authentication access","accessor":["auth","member","join"]},{"authorizationRole":null,"authorizationType":"refresh","description":"This token refresh operation allows authenticated member users to extend their login sessions by exchanging valid refresh tokens for new access tokens. The system validates the refresh token's authenticity, checks expiration status to ensure it's still valid, generates new secure access tokens with updated expiration times, and maintains the user's authentication session without interruption. The refresh mechanism implements security best practices by keeping refresh tokens separate from access tokens, supporting secure token rotation for enhanced security, and providing proper error handling for invalid or expired tokens. The operation ensures users can maintain continuous authenticated access to their todo management features without frequent re-authentication interruptions, implements token lifecycle management to balance security with convenience, and supports mobile and desktop usage patterns where consistent authentication state is essential for seamless user experience during extended todo management sessions.","method":"post","name":"refresh","parameters":[],"path":"/auth/member/refresh","prerequisites":[],"requestBody":{"description":"JWT refresh token for requesting new access tokens and extending authenticated sessions","typeName":"ITokenRefresh.IRequest"},"responseBody":{"description":"JWT authentication tokens with new expiration times for continued authenticated access","typeName":"ITodoMember.IAuthorized"},"specification":"Implement a token refresh mechanism for extending authenticated sessions by validating refresh tokens and generating new access tokens, maintaining secure authentication continuity without requiring users to re-authenticate frequently while implementing proper token lifecycle management","summary":"Extend member authentication sessions by refreshing expired JWT tokens","accessor":["auth","member","refresh"]},{"specification":"This operation provides comprehensive search and filtering capabilities for todo items in a member user's personal collection. It supports complex filtering by completion status, priority level, and text search within titles. The operation handles pagination for efficient retrieval of large todo lists and maintains user privacy by ensuring users can only access their own todo items. Based on the Prisma schema, it operates on the todo_todos table which includes core fields like title, completed status, priority, timestamps, and relationships to member users.","authorizationType":null,"authorizationRole":"member","authorizationRoles":["member"],"prerequisites":[],"path":"/todo/member/todos","method":"patch","description":"Retrieve a filtered and paginated list of todo items from the authenticated member's personal collection. This operation supports comprehensive search capabilities including text-based title searching using PostgreSQL GIN trigram indexes, filtering by completion status (active/completed), priority level (Low/Medium/High), and sorting by creation date, priority, or completion status.\n\nThe operation provides efficient pagination support for managing large todo lists, with configurable page sizes and cursor-based pagination to maintain consistent performance. Search results are returned as summary data optimized for list display, showing essential information like title, completion status, priority, and key timestamps without exposing sensitive details.\n\nSecurity considerations include mandatory member authentication to ensure users can only access their personal todo items. The operation implements rate limiting to prevent abuse while maintaining responsive performance for legitimate usage. The response format is optimized for mobile applications with minimal payload sizes while preserving all necessary data for complete functionality.\n\nThe todo_todos table from the Prisma schema defines the data structure with fields including title (up to 500 characters), completion status, priority levels, creation and modification timestamps, and completion timestamps. The operation leverages indexed queries for optimal performance across the member_id and completed status fields.","summary":"Search and filter member's todo items with pagination and sorting","requestBody":{"description":"Search and filtering parameters for todo items including pagination, filters, and sorting options","typeName":"ITodoTodo.IRequest"},"responseBody":{"description":"Paginated list of todo summary items matching the search criteria with metadata","typeName":"IPageITodoTodo.ISummary"},"name":"index","parameters":[],"accessor":["todo","member","todos","index"]},{"specification":"This operation retrieves detailed information about a specific todo item by its unique identifier. It provides complete access to all todo properties including title, completion status, priority level, timestamps, and any additional metadata. The operation enforces strict ownership verification to ensure users can only view their own todo items, preventing unauthorized access to private task information. Based on the Prisma schema, it queries the todo_todos table using the primary key and member_id relationship.","authorizationType":null,"authorizationRole":"member","authorizationRoles":["member"],"prerequisites":[{"endpoint":{"path":"/todo/member/todos","method":"post"},"description":"Todo item must be created before it can be retrieved by the member user"}],"path":"/todo/member/todos/{todoId}","method":"get","description":"Fetch complete details for a specific todo item identified by its unique UUID. This operation returns all properties of the todo item including the primary title, completion status, priority level, creation timestamp, last modification timestamp, and completion timestamp when applicable.\n\nThe operation enforces strict access control by verifying that the requested todo item belongs to the authenticated member user. Unauthorized access attempts are rejected with appropriate error responses, maintaining user privacy and data security. The detailed response includes all fields necessary for comprehensive todo management including full text content, status information, and temporal tracking data.\n\nPerformance is optimized through database indexing on the primary key and member_id fields as defined in the Prisma schema. The operation supports efficient retrieval even for users with large todo collections while maintaining sub-second response times under normal conditions.\n\nThe response format provides complete todo information suitable for detailed view interfaces, editing forms, and comprehensive task analysis. All timestamps are returned in standardized formats supporting cross-device compatibility and mobile application requirements.","summary":"Retrieve detailed information for a specific todo item","requestBody":null,"responseBody":{"description":"Complete todo item details including all properties and timestamps","typeName":"ITodoTodo"},"name":"at","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to retrieve","schema":{"type":"string","format":"uuid"}}],"accessor":["todo","member","todos","at"]},{"authorizationRoles":["member"],"description":"Creates a new todo item owned by the authenticated member with the specified properties. The todo title is required while all other fields are optional. The system automatically generates a unique identifier and timestamps for creation and modification. The new todo appears immediately in the user's list with completion status set to incomplete by default.\n\nThis operation requires a valid member authentication token to identify the todo owner. The system validates input constraints including title length (1-200 characters), description length if provided (up to 1000 characters), and ensures due dates are in the future when specified. Priority levels are validated against the accepted values (Low, Medium, High) with a default of Medium when not provided.\n\nThe response includes the complete todo item with all system-generated fields populated, allowing immediate use of the new todo in subsequent operations.","method":"post","name":"create","parameters":[],"path":"/todo/member/todos","requestBody":{"description":"Creation data for the new todo item","typeName":"ITodoTodo.ITodoCreate"},"responseBody":{"description":"The newly created todo item with all system fields populated","typeName":"ITodoTodo"},"specification":"This operation creates a new todo item in the authenticated member's personal collection. The operation accepts the required title and optional properties (description, due_date, priority) to create a fully-featured todo item. The system automatically assigns a UUID identifier, sets creation and update timestamps, and defaults the completion status to false. The created todo is immediately owned by the authenticated member user.","summary":"Create a new todo item","authorizationRole":"member","authorizationType":null,"prerequisites":[],"accessor":["todo","member","todos","create"]},{"authorizationRoles":["member"],"description":"Updates the specified todo item with new property values. The authenticated member must own the todo item to perform updates. All fields can be modified including the title, completion status, description, due date, and priority level. The system automatically records modification timestamps and completion time when marking a todo as complete.\n\nThe operation validates that the requesting member owns the specified todo item through the owner relationship defined in the schema. Unauthorized access attempts result in permission-denied responses. Input validation rules include title length requirements (1-200 characters), description length limits if provided (up to 1000 characters), and proper formatting for due dates and priority values.\n\nWhen toggling completion status, the system automatically manages the completed_at timestamp - setting it when marking complete and clearing it when reverting to incomplete. The response includes the fully updated todo item reflecting all changes made during the update operation.","method":"put","name":"update","parameters":[{"description":"Unique identifier of the todo item to update","name":"todoId","schema":{"format":"uuid","type":"string"}}],"path":"/todo/member/todos/{todoId}","requestBody":{"description":"Updated data for the todo item","typeName":"ITodoTodo.ITodoUpdate"},"responseBody":{"description":"The fully updated todo item with current state","typeName":"ITodoTodo"},"specification":"This operation updates an existing todo item owned by the authenticated member. Users can modify any field including title, completion status, description, due_date, and priority. The operation validates ownership permissions and prevents unauthorized modification of other members' todos. The system automatically updates the last modified timestamp and completion timestamp when status changes.","summary":"Update an existing todo item","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todo/member/todos","method":"post"},"description":"Todo item must be created before it can be updated"}],"accessor":["todo","member","todos","update"]},{"specification":"This operation deletes a todo item from the system. It operates on the todo_todos table from the Prisma schema and removes the specified todo item permanently. The deletion cascades based on the foreign key relationships defined in the schema. This operation requires authentication as the member must own the todo item being deleted.","authorizationType":null,"authorizationRole":"member","description":"This operation permanently removes a todo item from the system. The todo item is identified by its unique UUID in the path parameter. Only the owner (member) of the todo item can delete it, ensuring data privacy and ownership rights.\n\nThe system validates that the authenticated user owns the todo item before allowing deletion. This prevents unauthorized access to personal todo data and maintains user separation of concerns. Upon successful deletion, the todo item is completely removed from the database and cannot be recovered.\n\nError handling includes validation for non-existent todo items, ownership verification, and system-level deletion failures. Users receive appropriate feedback for any issues that prevent successful deletion.","path":"/todo/member/todos/{todoId}","parameters":[{"description":"The unique identifier of the todo item to delete","schema":{"format":"uuid","type":"string"},"name":"todoId"}],"method":"delete","summary":"Delete a specific todo item","requestBody":null,"responseBody":null,"name":"erase","prerequisites":[],"accessor":["todo","member","todos","erase"]},{"authorizationRoles":["member"],"description":"This operation provides search and retrieval capabilities for members within the system. It supports advanced filtering based on account status, creation date ranges, and activity patterns. The results are paginated to handle large member populations efficiently.\n\nThe operation includes search functionality using full-text search on member identifiers, allowing members to find specific member accounts if they have the necessary permissions. It supports sorting by various parameters including creation date, last login, and email address to facilitate member discovery.\n\nPagination ensures the system can handle large numbers of members efficiently, with configurable page sizes for optimal performance. The response includes both the current page of members and metadata about the total results, current pagination position, and available sorting options.\n\nSecurity measures ensure that sensitive member data is appropriately handled and only authorized users can access member lists based on their role and permissions. The system maintains member privacy by only exposing necessary information for legitimate purposes.","method":"patch","name":"index","parameters":[],"path":"/todo/member/members","requestBody":{"description":"Search criteria and pagination parameters for member filtering","typeName":"ITodoMember.IRequest"},"responseBody":{"description":"Paginated list of member summaries with search results and pagination metadata","typeName":"IPageITodoMember.ISummary"},"specification":"This operation retrieves a paginated list of members from the system. It operates on the todo_member table and provides search, filtering, and pagination capabilities. This operation supports both self-service member management and broader member discovery functions within the constraints of the authorization system.","summary":"Search and retrieve paginated list of members","authorizationRole":"member","authorizationType":null,"prerequisites":[],"accessor":["todo","member","members","index"]},{"authorizationRole":"member","authorizationRoles":["member"],"authorizationType":null,"description":"Retrieves comprehensive profile data for an authenticated member user, including account details, session status, and activity history. This operation accesses the todo_member table to fetch user-specific information such as email, role, login attempts, and session tokens. The response includes authentication state, account creation timestamp, and security-related information like lockout status.\n\nThe operation ensures that only authenticated members can access their own profile data through JWT token validation and session verification. It supports the user account management functionality by providing necessary profile information for display in dashboards and account settings pages.\n\nSecurity considerations include proper session validation to prevent unauthorized access to member profiles. The operation integrates with the todo_sessions table to verify current authentication tokens and determine valid login states for proper account access control.","method":"get","name":"at","parameters":[{"description":"Unique identifier of the member user","name":"memberId","schema":{"format":"uuid","type":"string"}}],"path":"/todo/member/members/{memberId}","prerequisites":[],"requestBody":null,"responseBody":{"description":"Detailed member profile information including authentication status and account activity","typeName":"ITodoMember"},"specification":"This operation retrieves a member's detailed profile information by their unique identifier. It operates on the todo_member table from the Prisma schema and returns comprehensive user data including authentication status, session information, and account activity details. The operation supports member access to their own profile data and is essential for user dashboard functionality and account management features.","summary":"Retrieve detailed member profile information","accessor":["todo","member","members","at"]},{"authorizationRole":"member","authorizationRoles":["member"],"authorizationType":null,"description":"Updates member profile data for authenticated users, allowing modification of display information, role assignments, and session management settings. This operation accesses the todo_member table to perform authorized updates while maintaining account security through proper validation and change tracking.\n\nThe implementation handles member self-service profile updates with appropriate validation rules for email format, role permissions, and session token management. It supports essential account maintenance functionality while preventing unauthorized changes to security-sensitive fields like password hashes. The operation includes proper timestamp updates for audit trails and provides feedback about successful modification operations.\n\nBusiness logic includes validation of update permissions based on member authentication state, ensuring users can only modify their own profiles unless they have elevated privileges. The operation integrates with JWT authentication systems to verify session validity and prevent unauthorized profile modifications while supporting normal account management workflows for individual members.","method":"put","name":"update","parameters":[{"description":"Unique identifier of the member user to update","name":"memberId","schema":{"format":"uuid","type":"string"}}],"path":"/todo/member/members/{memberId}","prerequisites":[],"requestBody":{"description":"Updated member profile information including editable fields","typeName":"ITodoMember.IUpdate"},"responseBody":{"description":"Updated member profile with confirmation of changes applied","typeName":"ITodoMember"},"specification":"This operation updates an existing member's profile information including editable fields like email, role, and session tokens. It operates on the todo_member table and supports member self-service account management. The operation validates input data, maintains data integrity, and updates timestamps while preserving security-sensitive information like password hashes through appropriate update restrictions.","summary":"Update member profile information","accessor":["todo","member","members","update"]},{"authorizationRole":"member","authorizationRoles":["member"],"authorizationType":null,"description":"Delete a member user account along with all associated todo items. The operation removes the member record from the todo_member table and through cascade deletion removes all related todos. This is a hard delete operation with permanent data loss – all data will be completely removed from the database without recovery possibility.\n\nThe system validates the member can only delete their own account. Users must pass their own memberId to confirm account deletion permission. The operation completes within 2 seconds and provides immediate confirmation of successful permanent deletion.\n\nThis endpoint is designed for user account management where members need complete account removal and permanent data cleanup from the system.","interest":"This operation provides member account deletion capability allowing users to permanently remove their account and personal data. It supports user account management needs while maintaining database integrity through cascade operations that clean up all related user information.","method":"delete","name":"erase","parameters":[{"description":"Unique identifier of the member account to delete","name":"memberId","schema":{"format":"uuid","type":"string"}}],"path":"/todo/member/members/{memberId}","prerequisites":[],"requestBody":null,"responseBody":null,"specification":"This operation deletes a member user account from the todo_member table. It removes the member record along with all related data including todo items through cascade delete operations. This is a hard delete operation that permanently removes all data associated with the member account including their todos and session data from the Prisma schema todo_member, todo_todos, and todo_sessions tables through foreign key cascade relationships.","summary":"Delete member account and all personal data permanently","accessor":["todo","member","members","erase"]}],"components":{"authorization":[{"description":"Unauthenticated users who can only view public todos and register for an account","kind":"guest","name":"guest"},{"description":"Authenticated users who can create, edit, delete, and manage their own personal todo lists","kind":"member","name":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IMemberLogin.IRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member email address for authentication"},"password":{"type":"string","description":"Member plain text password for authentication verification"}},"required":["email","password"],"description":"Member login request containing authentication credentials.\n\nProvides the necessary authentication information for member users to access their personal todo management functionality.","x-autobe-prisma-schema":"todo_member"},"ITodoGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique guest session identifier"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"session_identifier":{"type":"string","description":"Guest session identifier for demonstration content access"}},"required":["id","token","session_identifier"],"description":"Guest user authorization response with session tokens.\n\nRepresents successful guest registration or session refresh, providing authentication tokens for accessing demonstration content."},"ITodoMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier for account reference"},"email":{"type":"string","format":"email","description":"Member email address for account identification"},"role":{"$ref":"#/components/schemas/IETodoRole","description":"Member role determining access permissions"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the member's most recent successful login"}},"required":["id","email","role","token"],"description":"Member user authorization response with authentication tokens and account details.\n\nRepresents successful member login, registration, or token refresh, providing complete authentication and account information.","x-autobe-prisma-schema":"todo_member"},"IMemberCreate.IRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member email address for account creation and authentication"},"password":{"type":"string","minLength":8,"description":"Member password for authentication (minimum 8 characters with complexity requirements)"}},"required":["email","password"],"description":"Member registration request data for creating new user accounts.\n\nProvides the essential information required for member account creation while validating password security requirements for secure authentication.","x-autobe-prisma-schema":"todo_member"},"ITokenRefresh.IRequest":{"type":"object","properties":{"refresh":{"type":"string","description":"JWT refresh token for requesting new authentication tokens"}},"required":["refresh"],"description":"Token refresh request containing the refresh token for extending authentication sessions.\n\nUsed to obtain new access tokens and refresh tokens when the current access token has expired."},"ITodoTodo.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (starts from 1)"},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of items per page (default: 100, max: 100)"},"search":{"type":"string","description":"Text search string to filter todos by title content"},"completed":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by completion status (true for completed, false for incomplete)"},"priority":{"oneOf":[{"$ref":"#/components/schemas/IETodoPriority"},{"type":"null"}],"description":"Filter by priority level (Low/Medium/High)"},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by for consistent ordering"},{"const":"priority","description":"Field to sort results by for consistent ordering"},{"const":"completed","description":"Field to sort results by for consistent ordering"},{"const":"title","description":"Field to sort results by for consistent ordering"}],"description":"Field to sort results by for consistent ordering"}},"required":[],"description":"Todo search and filtering request parameters for retrieving paginated todo lists.\n\nSupports comprehensive filtering by status, priority, search terms, and provides sorting options for organized result presentation.","x-autobe-prisma-schema":"todo_todos"},"ITodoMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated member results"},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of members per page (default: 100, max: 100)"},"search":{"type":"string","description":"Optional search text to filter members by email or identifier"}},"required":[],"description":"Member search and filtering request parameters for paginated member listing.\n\nSupports basic member discovery with email-based search and standard pagination controls for efficient user management.","x-autobe-prisma-schema":"todo_member"},"ITodoMember.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Optional updated email address for account identification"},"role":{"oneOf":[{"$ref":"#/components/schemas/IETodoRole"},{"type":"null"}],"description":"Optional role update for permission changes"}},"required":[],"description":"Member profile update data supporting partial field modification.\n\nAllows selective updates to member profile fields while preserving existing values for unspecified properties, enabling efficient incremental profile management.","x-autobe-prisma-schema":"todo_member"},"ITodoTodo.ITodoUpdate":{"type":"object","x-autobe-prisma-schema":"todo_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":200,"description":"Optional updated todo title text"},"completed":{"type":"boolean","description":"Optional completion status update"},"priority":{"oneOf":[{"$ref":"#/components/schemas/IETodoPriority"},{"type":"null"}],"description":"Optional priority level update"}},"required":[],"description":"Todo update data allowing modification of any individual property.\n\nSupports partial updates where only provided fields are modified, enabling efficient incremental changes while preserving existing values."},"ITodoTodo.ITodoCreate":{"type":"object","x-autobe-prisma-schema":"todo_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":200,"description":"Required todo title text describing the task"},"priority":{"oneOf":[{"$ref":"#/components/schemas/IETodoPriority"},{"type":"null"}],"description":"Optional priority level for task organization (defaults to Medium if not specified)"}},"required":["title"],"description":"Todo creation data with required title and optional priority.\n\nDefines the minimum data required to create a new todo item in the member's personal collection while supporting optional organizational features."},"ITodoTodo.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_todos","properties":{"id":{"type":"string","format":"uuid","description":"Unique todo identifier for list reference"},"title":{"type":"string","description":"Todo title text for task identification"},"completed":{"type":"boolean","description":"Completion status for status filtering and display"},"priority":{"$ref":"#/components/schemas/IETodoPriority","description":"Priority level for organization and sorting"},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 creation timestamp for chronological ordering"},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 last modification timestamp"}},"required":["id","title","completed","priority","created_at","updated_at"],"description":"Simplified todo summary optimized for list display and pagination.\n\nProvides essential todo information for efficient list rendering while maintaining complete data integrity for user interface presentation."},"ITodoMember":{"description":"Complete member user profile containing authentication details, activity history, and security information. Represents a full todo_member record with all associated data for comprehensive user account management.\n\nThis profile contains complete member information including authentication tokens, security settings, and account activity. It enables administrators and the member themselves to view comprehensive account status while maintaining appropriate privacy boundaries for sensitive information.","type":"object","x-autobe-prisma-schema":"todo_member","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier from todo_member.id"},"email":{"type":"string","format":"email","description":"Member email address for authentication and communication"},"role":{"type":"string","description":"User role designation for access control (member/admin)"},"last_login_at":{"type":"string","format":"date-time","description":"Timestamp of most recent successful login activity"},"login_attempts":{"type":"integer","description":"Count of consecutive failed login attempts for security monitoring"},"locked_until":{"type":"string","format":"date-time","description":"Account lockout end timestamp after excessive failed attempts"},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp as immutable registration record"},"updated_at":{"type":"string","format":"date-time","description":"Most recent account modification timestamp for audit trails"}},"required":["id","email","role","created_at","updated_at"]},"ITodoMember.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_member","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier for list reference"},"email":{"type":"string","format":"email","description":"Member email address for identification in member lists"},"role":{"$ref":"#/components/schemas/IETodoRole","description":"Member role indicating access level and permissions"},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 account creation timestamp for member sorting"},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO 8601 last login timestamp for activity tracking"}},"required":["id","email","role","created_at"],"description":"Simplified member summary optimized for paginated member lists.\n\nProvides essential member information for user discovery and account management interfaces while maintaining privacy by excluding sensitive authentication data."},"ITodoTodo":{"type":"object","x-autobe-prisma-schema":"todo_todos","properties":{"id":{"type":"string","format":"uuid","description":"Unique todo identifier for system reference"},"member_id":{"type":"string","format":"uuid","description":"Owning member identifier linking todo to user account"},"title":{"type":"string","description":"Todo title describing the task content"},"completed":{"type":"boolean","description":"Completion status indicating task completion state"},"priority":{"$ref":"#/components/schemas/IETodoPriority","description":"Priority level for task organization and sorting"},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 creation timestamp automatically set by system"},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 last modification timestamp automatically updated"},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO 8601 completion timestamp set when todo is marked complete"}},"required":["id","member_id","title","completed","priority","created_at","updated_at"],"description":"Complete todo entity containing all properties for detailed task management.\n\nRepresents a single todo item with full lifecycle information including ownership, status tracking, and chronological data for comprehensive user interface display."},"IETodoPriority":{"oneOf":[{"const":"Low","description":"Todo priority levels for task organization and sorting.\n\nDefines the three supported priority levels that can be assigned to todo items for organization and filtering purposes.","x-autobe-prisma-schema":"todo_todos"},{"const":"Medium","description":"Todo priority levels for task organization and sorting.\n\nDefines the three supported priority levels that can be assigned to todo items for organization and filtering purposes.","x-autobe-prisma-schema":"todo_todos"},{"const":"High","description":"Todo priority levels for task organization and sorting.\n\nDefines the three supported priority levels that can be assigned to todo items for organization and filtering purposes.","x-autobe-prisma-schema":"todo_todos"}],"description":"Todo priority levels for task organization and sorting.\n\nDefines the three supported priority levels that can be assigned to todo items for organization and filtering purposes.","x-autobe-prisma-schema":"todo_todos"},"IETodoRole":{"oneOf":[{"const":"member","description":"User role types for access control in the todo application.\n\nDefines the available user roles that determine permissions and access levels within the system.","x-autobe-prisma-schema":"todo_member"},{"const":"admin","description":"User role types for access control in the todo application.\n\nDefines the available user roles that determine permissions and access levels within the system.","x-autobe-prisma-schema":"todo_member"}],"description":"User role types for access control in the todo application.\n\nDefines the available user roles that determine permissions and access levels within the system.","x-autobe-prisma-schema":"todo_member"}}}}