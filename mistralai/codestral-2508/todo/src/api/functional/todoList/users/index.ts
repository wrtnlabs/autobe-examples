import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../structures/ITodoListUser";

/**
 * Create a new user account in the Todo list application. This operation
 * handles user registration by collecting essential information such as email
 * address and password. The system validates the provided information against
 * system requirements before creating the account. Upon successful
 * registration, the user is added to the todo_list_users table in the Prisma
 * schema, where their credentials and personal information are stored. This
 * operation is essential for enabling users to access the Todo list application
 * and manage their tasks.
 *
 * @param props.connection
 * @param props.body User registration information including email address and
 *   password
 * @path /todoList/users
 * @accessor api.functional.todoList.users.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** User registration information including email address and password */
    body: ITodoListUser.ICreate;
  };
  export type Body = ITodoListUser.ICreate;
  export type Response = ITodoListUser;

  export const METADATA = {
    method: "POST",
    path: "/todoList/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/users";
  export const random = (): ITodoListUser => typia.random<ITodoListUser>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a user in the Todo list application by verifying their
 * credentials. This operation checks the provided email address and password
 * against the stored information in the todo_list_users table. Upon successful
 * authentication, the operation generates an access token for the user to
 * access protected resources. This operation is essential for enabling users to
 * securely access their Todo list and manage their tasks.
 *
 * @param props.connection
 * @param props.body User login credentials including email address and password
 * @path /todoList/users/login
 * @accessor api.functional.todoList.users.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  return true === connection.simulate
    ? login.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...login.METADATA,
          path: login.path(),
          status: null,
        },
        props.body,
      );
}
export namespace login {
  export type Props = {
    /** User login credentials including email address and password */
    body: ITodoListUser.ILogin;
  };
  export type Body = ITodoListUser.ILogin;
  export type Response = ITodoListUser.IAccessToken;

  export const METADATA = {
    method: "POST",
    path: "/todoList/users/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/users/login";
  export const random = (): ITodoListUser.IAccessToken =>
    typia.random<ITodoListUser.IAccessToken>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
