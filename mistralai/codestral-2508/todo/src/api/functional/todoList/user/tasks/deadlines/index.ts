import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTask } from "../../../../../structures/ITodoListTask";

/**
 * Create a new deadline for a specific task.
 *
 * This operation allows users to create a new deadline for a specific task in
 * the todo list application. The deadline is specified as a DateTime value and
 * is associated with the task identified by the taskId parameter. The operation
 * updates the deadline field in the todo_list_tasks table in the database.
 *
 * The operation requires the user to be authenticated and have the appropriate
 * permissions to create a deadline for the specified task. The taskId parameter
 * must be a valid UUID that corresponds to an existing task in the database.
 *
 * The request body for this operation should include the deadline value in ISO
 * 8601 format. The response body will include the updated task information,
 * including the newly set deadline.
 *
 * This operation is part of the task management functionality in the todo list
 * application and is used to set deadlines for tasks. It is typically used in
 * conjunction with the task creation and task updating operations.
 *
 * @param props.connection
 * @param props.taskId The unique identifier of the task for which the deadline
 *   is being created.
 * @param props.body The deadline information for the task.
 * @path /todoList/user/tasks/:taskId/deadlines
 * @accessor api.functional.todoList.user.tasks.deadlines.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique identifier of the task for which the deadline is being
     * created.
     */
    taskId: string & tags.Format<"uuid">;

    /** The deadline information for the task. */
    body: ITodoListTask.IDeadline;
  };
  export type Body = ITodoListTask.IDeadline;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/tasks/:taskId/deadlines",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}/deadlines`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the deadline for a specific task.
 *
 * This operation allows users to update the deadline for a specific task in the
 * todo list application. The deadline is specified as a DateTime value and is
 * associated with the task identified by the taskId parameter. The operation
 * updates the deadline field in the todo_list_tasks table in the database.
 *
 * The operation requires the user to be authenticated and have the appropriate
 * permissions to update the deadline for the specified task. The taskId
 * parameter must be a valid UUID that corresponds to an existing task in the
 * database.
 *
 * The request body for this operation should include the new deadline value in
 * ISO 8601 format. The response body will include the updated task information,
 * including the newly set deadline.
 *
 * This operation is part of the task management functionality in the todo list
 * application and is used to modify deadlines for tasks. It is typically used
 * in conjunction with the task creation and task updating operations.
 *
 * @param props.connection
 * @param props.taskId The unique identifier of the task for which the deadline
 *   is being updated.
 * @param props.body The new deadline information for the task.
 * @path /todoList/user/tasks/:taskId/deadlines
 * @accessor api.functional.todoList.user.tasks.deadlines.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the task for which the deadline is being
     * updated.
     */
    taskId: string & tags.Format<"uuid">;

    /** The new deadline information for the task. */
    body: ITodoListTask.IDeadline;
  };
  export type Body = ITodoListTask.IDeadline;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/tasks/:taskId/deadlines",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}/deadlines`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
