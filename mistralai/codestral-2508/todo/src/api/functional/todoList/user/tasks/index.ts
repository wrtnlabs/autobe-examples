import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTask } from "../../../../structures/ITodoListTask";
import { IPageITodoListTask } from "../../../../structures/IPageITodoListTask";
export * as priorities from "./priorities/index";
export * as deadlines from "./deadlines/index";

/**
 * Create a new task in the todo list application. This operation allows users
 * to add new tasks with a title, description, and optional deadline. The task
 * will be associated with the authenticated user and the appropriate timestamps
 * will be set for creation and updates.
 *
 * The operation validates the input data to ensure that the title and
 * description are provided and that the deadline, if provided, is in a valid
 * format. The operation also ensures that the task is associated with the
 * authenticated user and that the appropriate timestamps are set.
 *
 * This operation integrates with the todo_list_tasks table as defined in the
 * Prisma schema, incorporating all available task fields and relationships. The
 * response includes the details of the newly created task, including the task
 * ID, title, description, deadline, and timestamps.
 *
 * @param props.connection
 * @param props.body Task creation information including title, description, and
 *   optional deadline
 * @path /todoList/user/tasks
 * @accessor api.functional.todoList.user.tasks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Task creation information including title, description, and optional
     * deadline
     */
    body: ITodoListTask.ICreate;
  };
  export type Body = ITodoListTask.ICreate;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/tasks";
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of tasks.
 *
 * Retrieve a filtered and paginated list of tasks from the system. This
 * operation provides advanced search capabilities for finding tasks based on
 * multiple criteria including partial title matching, description keywords,
 * priority level filtering, and deadline ranges. The operation supports
 * comprehensive pagination with configurable page sizes and sorting options.
 * Tasks can be sorted by title, priority, deadline, or creation date in
 * ascending or descending order. Security considerations include rate limiting
 * for search operations and appropriate filtering of sensitive task information
 * based on the requesting user's authorization level. Only users with
 * appropriate permissions can access detailed task information, while basic
 * task lists may be available to authenticated users. This operation integrates
 * with the todo_list_tasks table as defined in the Prisma schema, incorporating
 * all available task fields and relationships. The response includes task
 * summary information optimized for list displays, with options to include
 * additional details based on authorization level.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for task
 *   filtering
 * @path /todoList/user/tasks
 * @accessor api.functional.todoList.user.tasks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for task filtering */
    body: ITodoListTask.IRequest;
  };
  export type Body = ITodoListTask.IRequest;
  export type Response = IPageITodoListTask.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/user/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/tasks";
  export const random = (): IPageITodoListTask.ISummary =>
    typia.random<IPageITodoListTask.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the details of a specific task in the todo list application. This
 * operation allows users to view the details of a task by providing the task
 * ID. The operation ensures that the task belongs to the authenticated user and
 * returns the task details including title, description, deadline, and
 * timestamps.
 *
 * The operation validates the task ID to ensure that it is in a valid format
 * and that the task exists in the database. The operation also ensures that the
 * task belongs to the authenticated user before returning the task details.
 *
 * This operation integrates with the todo_list_tasks table as defined in the
 * Prisma schema, incorporating all available task fields and relationships. The
 * response includes the details of the specified task, including the task ID,
 * title, description, deadline, and timestamps.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to retrieve
 * @path /todoList/user/tasks/:taskId
 * @accessor api.functional.todoList.user.tasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the task to retrieve */
    taskId: string;
  };
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task in the todo list application. This operation allows
 * users to modify task details such as title, description, priority, and
 * deadline. The task ID is specified in the path parameter, and the request
 * body contains the updated task information.
 *
 * The operation is associated with the todo_list_tasks table in the Prisma
 * schema. The user must be authenticated to perform this operation. The request
 * body includes fields for title, description, priority, and deadline. The
 * response body returns the updated task information.
 *
 * This operation is used to modify existing tasks in the todo list application.
 * It is typically used after retrieving task details using the GET
 * /tasks/{taskId} operation. The updated task information is returned in the
 * response body.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to be updated
 * @param props.body Updated task information
 * @path /todoList/user/tasks/:taskId
 * @accessor api.functional.todoList.user.tasks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the task to be updated */
    taskId: string & tags.Format<"uuid">;

    /** Updated task information */
    body: ITodoListTask.IUpdate;
  };
  export type Body = ITodoListTask.IUpdate;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/tasks/:taskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing task from the todo list application. This operation allows
 * users to remove tasks from their list. The task ID is specified in the path
 * parameter.
 *
 * The operation is associated with the todo_list_tasks table in the Prisma
 * schema. The user must be authenticated to perform this operation. The
 * response body is empty, indicating successful deletion.
 *
 * This operation is used to remove tasks from the todo list application. It is
 * typically used after retrieving task details using the GET /tasks/{taskId}
 * operation. The task is permanently deleted from the database.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to be deleted
 * @path /todoList/user/tasks/:taskId
 * @accessor api.functional.todoList.user.tasks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the task to be deleted */
    taskId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/user/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
