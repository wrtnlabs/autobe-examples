import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTaskPriority } from "../../../../../structures/ITodoListTaskPriority";

/**
 * Create a new task priority for a specific task in the todo list application.
 * This operation allows users to assign a priority level to a task, which can
 * be one of the following: Low, Medium, or High. The priority level helps users
 * to categorize and manage their tasks based on their importance. This
 * operation is associated with the todo_list_tasks table through the
 * todo_list_task_id field, which links the priority to a specific task. The
 * operation ensures that the priority level is set correctly and that the task
 * exists in the system. This operation is typically used after a task has been
 * created and before it is viewed or updated.
 *
 * @param props.connection
 * @param props.taskId The unique identifier of the task to which the priority
 *   will be assigned
 * @param props.body The priority level to be assigned to the task
 * @path /todoList/user/tasks/:taskId/priorities
 * @accessor api.functional.todoList.user.tasks.priorities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique identifier of the task to which the priority will be
     * assigned
     */
    taskId: string & tags.Format<"uuid">;

    /** The priority level to be assigned to the task */
    body: ITodoListTaskPriority.ICreate;
  };
  export type Body = ITodoListTaskPriority.ICreate;
  export type Response = ITodoListTaskPriority;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/tasks/:taskId/priorities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}/priorities`;
  export const random = (): ITodoListTaskPriority =>
    typia.random<ITodoListTaskPriority>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the priority level of an existing task in the todo list application.
 * This operation allows users to change the priority level of a task, which can
 * be one of the following: Low, Medium, or High. The priority level helps users
 * to categorize and manage their tasks based on their importance. This
 * operation is associated with the todo_list_tasks table through the
 * todo_list_task_id field, which links the priority to a specific task. The
 * operation ensures that the priority level is updated correctly and that the
 * task exists in the system. This operation is typically used after a task has
 * been created and before it is viewed or updated.
 *
 * @param props.connection
 * @param props.taskId The unique identifier of the task whose priority will be
 *   updated
 * @param props.body The new priority level to be assigned to the task
 * @path /todoList/user/tasks/:taskId/priorities
 * @accessor api.functional.todoList.user.tasks.priorities.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the task whose priority will be updated */
    taskId: string & tags.Format<"uuid">;

    /** The new priority level to be assigned to the task */
    body: ITodoListTaskPriority.IUpdate;
  };
  export type Body = ITodoListTaskPriority.IUpdate;
  export type Response = ITodoListTaskPriority;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/tasks/:taskId/priorities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/tasks/${encodeURIComponent(props.taskId ?? "null")}/priorities`;
  export const random = (): ITodoListTaskPriority =>
    typia.random<ITodoListTaskPriority>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
