import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * Log out the current user from the system.
 *
 * This operation allows a user to log out of the system. When executed, it will
 * invalidate the user's current session and clear any authentication tokens
 * associated with the user. This ensures that the user is no longer
 * authenticated and will need to log in again to access protected resources.
 * The operation is associated with the todo_list_users table in the Prisma
 * schema, which stores user information including authentication tokens.
 *
 * @param props.connection
 * @path /todoList/user/users/logout
 * @accessor api.functional.todoList.user.users.logout
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function logout(connection: IConnection): Promise<void> {
  return true === connection.simulate
    ? logout.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...logout.METADATA,
          path: logout.path(),
          status: null,
        },
      );
}
export namespace logout {
  export const METADATA = {
    method: "POST",
    path: "/todoList/user/users/logout",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/users/logout";
  export const random = (): void => typia.random<void>();
  export const simulate = (_connection: IConnection): void => {
    return random();
  };
}
