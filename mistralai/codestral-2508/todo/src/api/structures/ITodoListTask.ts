import { tags } from "typia";

/**
 * Represents tasks in the todo list application. Each task has a title,
 * description, priority, and deadline. Tasks are associated with users through
 * the todo_list_users table.
 *
 * This type corresponds to the todo_list_tasks table in the Prisma schema. It
 * includes all fields from the table, including the primary key, foreign key to
 * the user, task details, and timestamps for creation and updates.
 *
 * The task title and description are required fields that must be provided when
 * creating a task. The deadline is optional and can be set when needed. The
 * timestamps are automatically managed by the system and should not be modified
 * directly.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTask = {
  /**
   * Primary Key.
   *
   * Unique identifier for the task in the system.
   */
  id: string & tags.Format<"uuid">;

  /** The user who created this task. {@link todo_list_users.id}. */
  todo_list_user_id: string & tags.Format<"uuid">;

  /** The title of the task. */
  title: string;

  /** The description of the task. */
  description: string;

  /** The deadline for the task. */
  deadline?: (string & tags.Format<"date-time">) | undefined;

  /** The timestamp when the task was created. */
  created_at: string & tags.Format<"date-time">;

  /** The timestamp when the task was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListTask {
  /**
   * Request parameters for filtering, sorting, and paginating task lists.
   *
   * This type defines the parameters that can be used to customize the
   * retrieval of task lists.
   *
   * The properties include:
   *
   * - `page`: The page number for pagination, with a minimum value of 1.
   * - `limit`: The number of items to display per page, with a minimum value of
   *   1 and a maximum value of 100.
   * - `search`: A search term to filter tasks by title or description.
   * - `priority`: The priority level to filter tasks by, which can be one of
   *   the following: Low, Medium, or High.
   * - `deadline`: The deadline to filter tasks by, which will include tasks
   *   with deadlines on or after the specified date.
   *
   * This type is used in the request body for operations that retrieve
   * paginated lists of tasks, allowing users to customize the results based
   * on their needs.
   */
  export type IRequest = {
    /** Page number for pagination. Defaults to 1 if not specified. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of items per page. Defaults to 20 if not specified. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Search term to filter tasks by title or description. */
    search?: string | undefined;

    /** Priority level to filter tasks by. */
    priority?: "Low" | "Medium" | "High" | undefined;

    /**
     * Deadline to filter tasks by. Tasks with deadlines on or after this
     * date will be included.
     */
    deadline?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Request body for creating a new task in the todo list application.
   *
   * This type defines the properties required to create a new task. The
   * properties include:
   *
   * - `title`: The title of the task, which is a required field with a minimum
   *   length of 1 and a maximum length of 100 characters.
   * - `description`: The description of the task, which is a required field
   *   with a minimum length of 1 and a maximum length of 500 characters.
   * - `deadline`: The deadline for the task, which is an optional field and
   *   must be in ISO 8601 format if provided.
   * - `priority`: The priority level of the task, which is an optional field
   *   and can be one of the following: Low, Medium, or High.
   *
   * This type is used in the request body for the task creation operation,
   * allowing users to specify the details of the new task they want to
   * create.
   */
  export type ICreate = {
    /**
     * The title of the task. This is a required field and must be between 1
     * and 100 characters long.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<100>;

    /**
     * The description of the task. This is a required field and must be
     * between 1 and 500 characters long.
     */
    description: string & tags.MinLength<1> & tags.MaxLength<500>;

    /**
     * The deadline for the task. This is an optional field and must be in
     * ISO 8601 format if provided.
     */
    deadline?: (string & tags.Format<"date-time">) | undefined;

    /**
     * The priority level of the task. This is an optional field and can be
     * one of the following: Low, Medium, or High.
     */
    priority?: "Low" | "Medium" | "High" | undefined;
  };

  /**
   * Represents the data needed to update an existing task in the todo list
   * application.
   *
   * This type corresponds to the todo_list_tasks table in the Prisma schema.
   * It includes fields that can be modified when updating a task: title,
   * description, and deadline.
   *
   * All fields in this type are optional, allowing partial updates where only
   * specific fields need to be changed. The deadline field is optional and
   * can be set or cleared as needed.
   *
   * This type is used for PATCH operations on tasks, where clients can
   * provide only the fields they want to update. The system will only modify
   * the specified fields while leaving others unchanged.
   */
  export type IUpdate = {
    /** The title of the task. */
    title?: string | undefined;

    /** The description of the task. */
    description?: string | undefined;

    /** The deadline for the task. */
    deadline?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Represents tasks in the todo list application. Each task has a title,
   * description, priority, and deadline. Tasks are associated with users
   * through the todo_list_users table.
   *
   * This model includes fields for the task title, description, deadline,
   * timestamps for creation and updates, and a relationship to the associated
   * user. The deadline field is used to set reminders and notifications for
   * tasks. The model is associated with the todo_list_users table through the
   * todo_list_user_id field, which links the task to a specific user. The
   * model is used to store and retrieve task information for users in the
   * todo list application. The model is part of the Tasks namespace and is
   * generated by the AutoBE tool.
   */
  export type IDeadline = {
    /**
     * The deadline for the task.
     *
     * This field specifies the date and time by which the task should be
     * completed. The deadline is stored as a DateTime value in the database
     * and is associated with a specific task through the todo_list_task_id
     * field. The deadline is used to set reminders and notifications for
     * tasks in the todo list application. The deadline is an essential
     * field for task management and helps users to track the progress of
     * their tasks.
     */
    deadline: string & tags.Format<"date-time">;
  };

  /**
   * Represents a summary of a task in the todo list application.
   *
   * The ITodoListTask.ISummary type provides a concise overview of a task,
   * including its title, description, deadline, and timestamps. This type is
   * used in list views and summaries to display essential task information
   * without overwhelming users with detailed information.
   *
   * The summary includes the task's ID, title, description, deadline, and
   * timestamps for creation and last update. This information is crucial for
   * users to quickly understand the task's purpose, status, and urgency.
   *
   * The summary type is used in various API endpoints to provide a list of
   * tasks, such as in GET /tasks to retrieve a paginated list of tasks or in
   * PATCH /tasks to search and retrieve a filtered list of tasks. It is also
   * used in task management operations to display task summaries in user
   * interfaces.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier for the task. This field is automatically generated
     * when a new task is created and serves as the primary key in the
     * database.
     *
     * This ID is crucial for task identification and retrieval operations.
     * It is used in various API endpoints to reference specific tasks, such
     * as in GET /tasks/{taskId} to retrieve task details or in DELETE
     * /tasks/{taskId} to delete a specific task.
     *
     * The ID is a UUID (Universally Unique Identifier) to ensure global
     * uniqueness across different systems and databases.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The title of the task.
     *
     * The title provides a concise summary of the task's purpose or
     * objective. It is a required field when creating a new task and is
     * used in task lists and summaries to quickly identify tasks.
     *
     * The title should be descriptive enough to give users an idea of what
     * the task entails without needing to view the full description. It is
     * also used in search and filtering operations to help users find
     * specific tasks.
     */
    title: string;

    /**
     * The description of the task.
     *
     * The description provides detailed information about what needs to be
     * done for the task. It is a required field when creating a new task
     * and is used to provide additional context or instructions for
     * completing the task.
     *
     * The description can include details such as steps to follow,
     * resources needed, or any other relevant information that might help
     * in completing the task. It is also used in task lists and summaries
     * to provide a more detailed view of the task.
     */
    description: string;

    /**
     * The deadline for the task.
     *
     * The deadline specifies the date and time by which the task should be
     * completed. It is an optional field when creating a new task and can
     * be used to set reminders or track overdue tasks.
     *
     * The deadline is stored in the database as a DateTime field, which
     * allows for precise scheduling and comparison operations. It is also
     * used in search and filtering operations to help users find tasks
     * based on their deadlines.
     */
    deadline?: (string & tags.Format<"date-time">) | undefined;

    /**
     * The timestamp when the task was created.
     *
     * The created_at field records the exact date and time when the task
     * was created. It is automatically set by the system when a new task is
     * added to the database and is used to track when tasks were initially
     * created.
     *
     * This field is useful for auditing purposes and for understanding the
     * timeline of task creation and updates. It is also used in search and
     * filtering operations to help users find tasks based on their creation
     * dates.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The timestamp when the task was last updated.
     *
     * The updated_at field records the exact date and time when the task
     * was last modified. It is automatically updated by the system whenever
     * the task is updated and is used to track the most recent changes to
     * the task.
     *
     * This field is useful for auditing purposes and for understanding the
     * timeline of task updates. It is also used in search and filtering
     * operations to help users find tasks based on their last update
     * dates.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
