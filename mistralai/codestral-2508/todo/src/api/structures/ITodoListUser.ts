import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * User information for authentication and authorization. This table stores
 * essential user details required for system access and role management.
 *
 * The ITodoListUser type represents a user in the Todo list application. It
 * contains essential information such as the user's unique identifier, email
 * address, and password hash. The timestamps for account creation and updates
 * are also included to track the lifecycle of the user account. This type is
 * used throughout the application for authentication, authorization, and user
 * management purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListUser = {
  /**
   * Primary Key.
   *
   * Unique identifier for the user account. This UUID is automatically
   * assigned when the user registers and serves as the primary key in the
   * todo_list_users table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's email address for login and notifications.
   *
   * This field stores the user's email address, which is used for account
   * verification, login, and notifications. The email must be unique across
   * all user accounts to ensure each user has a distinct identity within the
   * system.
   */
  email: string & tags.Format<"email">;

  /**
   * Hashed password for secure authentication.
   *
   * This field contains the hashed version of the user's password. The actual
   * password is never stored in plain text for security reasons. The password
   * is hashed using a secure hashing algorithm before being stored in this
   * field. This ensures that even if the database is compromised, the actual
   * passwords remain secure.
   */
  password_hash: string;

  /**
   * Timestamp when the user account was created.
   *
   * This field records the exact date and time when the user account was
   * created. It is automatically set by the system when the user registers
   * and cannot be modified afterward. This timestamp helps track when each
   * user joined the system and can be useful for analytics and auditing
   * purposes.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user account was last updated.
   *
   * This field records the date and time of the most recent update to the
   * user account. It is automatically updated by the system whenever any
   * changes are made to the account information. This timestamp is crucial
   * for maintaining data consistency and tracking changes over time.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user account was soft-deleted.
   *
   * This field is used to implement soft deletion for user accounts. When an
   * account is marked for deletion, this field is set to the current date and
   * time, indicating that the account is no longer active. Soft-deleted
   * accounts can be restored if needed, and this field helps track when the
   * account was deactivated. If the field is null, it means the account is
   * active and not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListUser {
  /**
   * User registration information for creating a new account in the Todo list
   * application.
   *
   * This type represents the data required to register a new user. It
   * includes essential fields for account creation and authentication.
   *
   * The `email` field is required for user identification and communication.
   * The `password` field is required for secure authentication and must be
   * hashed before storage.
   *
   * This type is used in the user registration process and corresponds to the
   * `todo_list_users` table in the Prisma schema. The `email` and
   * `password_hash` fields in this type map directly to columns in the
   * `todo_list_users` table.
   */
  export type ICreate = {
    /**
     * User's email address for login and notifications.
     *
     * This field is required for user registration and serves as the
     * primary identifier for the user account. The email address must be
     * unique across the system to prevent duplicate accounts.
     *
     * The email format must comply with standard email address conventions,
     * including the presence of an @ symbol and a valid domain name.
     *
     * This field is directly mapped to the `email` column in the
     * `todo_list_users` table in the Prisma schema.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password for user authentication.
     *
     * This field is required for user registration and will be used to
     * create the hashed password that will be stored in the database.
     *
     * The password must meet minimum security requirements, which typically
     * include a minimum length and complexity.
     *
     * This field is not stored directly in the database. Instead, a secure
     * hash of the password is generated and stored in the `password_hash`
     * column of the `todo_list_users` table in the Prisma schema.
     *
     * The plain text password is only used during the registration process
     * and should be discarded immediately after hashing.
     */
    password: string;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations such
   * as login, join, or token refresh.
   *
   * The `id` field identifies the authenticated user and is used for
   * authorization purposes. The `token` field contains the JWT token that
   * must be included in subsequent authenticated requests.
   *
   * This type ensures that the client receives all necessary information to
   * maintain an authenticated session with the server.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated user.
     *
     * This field contains the UUID of the user who has successfully
     * authenticated. It serves as a reference to the user's account in the
     * system and is used for authorization purposes.
     *
     * The value of this field is derived from the `id` column in the
     * `todo_list_users` table of the Prisma schema.
     */
    id: string & tags.Format<"uuid">;

    /**
     * User's email address for login and notifications.
     *
     * This field stores the user's email address, which is used for account
     * verification, login, and notifications. The email must be unique
     * across all user accounts to ensure each user has a distinct identity
     * within the system.
     */
    email: string & tags.Format<"email">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * User login information.
   *
   * This type represents the information required for a user to log in to the
   * Todo list application. It includes the user's email address and password,
   * which are used to authenticate the user and grant access to their
   * account.
   *
   * The email address must be properly formatted and unique to ensure secure
   * and reliable communication with the user. The password must meet the
   * minimum security requirements to ensure the protection of the user's
   * account.
   *
   * This type is used in the login operation to authenticate the user and
   * generate an access token for accessing protected resources.
   */
  export type ILogin = {
    /**
     * User's email address for login and notifications.
     *
     * This field is used to identify the user during the login process and
     * for sending notifications. The email address must be unique and
     * properly formatted to ensure secure and reliable communication with
     * the user.
     */
    email: string & tags.Format<"email">;

    /**
     * User's password for authentication.
     *
     * This field is used to verify the user's identity during the login
     * process. The password must meet the minimum security requirements and
     * should be securely stored in the database.
     */
    password: string;
  };

  /**
   * Refresh token information.
   *
   * This type represents the information required to refresh an access token
   * for a user in the Todo list application. It includes the refresh token,
   * which is used to generate a new access token when the current access
   * token has expired.
   *
   * The refresh token must be valid and associated with the user's account to
   * ensure secure and reliable access to protected resources. This type is
   * used in the refresh operation to generate a new access token for the
   * user.
   */
  export type IRefresh = {
    /**
     * Refresh token for generating a new access token.
     *
     * This field is used to generate a new access token when the current
     * access token has expired. The refresh token must be valid and
     * associated with the user's account to ensure secure and reliable
     * access to protected resources.
     */
    refreshToken: string;
  };

  /**
   * Access token for authenticated user.
   *
   * The ITodoListUser.IAccessToken type represents the access token issued to
   * an authenticated user. This token is used to authorize access to
   * protected resources in the Todo list application. It contains the JWT
   * (JSON Web Token) that includes claims about the user, such as their
   * unique identifier and roles, which are used to verify the user's
   * permissions and access rights.
   */
  export type IAccessToken = {
    /**
     * Access token for authenticated user.
     *
     * This field contains the JWT (JSON Web Token) that is issued upon
     * successful authentication. The token is used to authorize subsequent
     * requests to protected resources. It includes claims about the user,
     * such as their unique identifier and roles, which are used to verify
     * the user's permissions and access rights.
     */
    token: string;
  };
}
