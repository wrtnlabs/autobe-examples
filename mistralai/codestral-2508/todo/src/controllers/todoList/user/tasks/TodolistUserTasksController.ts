import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListUserTasks } from "../../../../providers/postTodoListUserTasks";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patchTodoListUserTasks } from "../../../../providers/patchTodoListUserTasks";
import { getTodoListUserTasksTaskId } from "../../../../providers/getTodoListUserTasksTaskId";
import { putTodoListUserTasksTaskId } from "../../../../providers/putTodoListUserTasksTaskId";
import { deleteTodoListUserTasksTaskId } from "../../../../providers/deleteTodoListUserTasksTaskId";

import { ITodoListTask } from "../../../../api/structures/ITodoListTask";
import { IPageITodoListTask } from "../../../../api/structures/IPageITodoListTask";

@Controller("/todoList/user/tasks")
export class TodolistUserTasksController {
  /**
   * Create a new task in the todo list application. This operation allows users
   * to add new tasks with a title, description, and optional deadline. The task
   * will be associated with the authenticated user and the appropriate
   * timestamps will be set for creation and updates.
   *
   * The operation validates the input data to ensure that the title and
   * description are provided and that the deadline, if provided, is in a valid
   * format. The operation also ensures that the task is associated with the
   * authenticated user and that the appropriate timestamps are set.
   *
   * This operation integrates with the todo_list_tasks table as defined in the
   * Prisma schema, incorporating all available task fields and relationships.
   * The response includes the details of the newly created task, including the
   * task ID, title, description, deadline, and timestamps.
   *
   * @param connection
   * @param body Task creation information including title, description, and
   *   optional deadline
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTask.ICreate,
  ): Promise<ITodoListTask> {
    try {
      return await postTodoListUserTasks({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of tasks.
   *
   * Retrieve a filtered and paginated list of tasks from the system. This
   * operation provides advanced search capabilities for finding tasks based on
   * multiple criteria including partial title matching, description keywords,
   * priority level filtering, and deadline ranges. The operation supports
   * comprehensive pagination with configurable page sizes and sorting options.
   * Tasks can be sorted by title, priority, deadline, or creation date in
   * ascending or descending order. Security considerations include rate
   * limiting for search operations and appropriate filtering of sensitive task
   * information based on the requesting user's authorization level. Only users
   * with appropriate permissions can access detailed task information, while
   * basic task lists may be available to authenticated users. This operation
   * integrates with the todo_list_tasks table as defined in the Prisma schema,
   * incorporating all available task fields and relationships. The response
   * includes task summary information optimized for list displays, with options
   * to include additional details based on authorization level.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for task filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTask.IRequest,
  ): Promise<IPageITodoListTask.ISummary> {
    try {
      return await patchTodoListUserTasks({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the details of a specific task in the todo list application. This
   * operation allows users to view the details of a task by providing the task
   * ID. The operation ensures that the task belongs to the authenticated user
   * and returns the task details including title, description, deadline, and
   * timestamps.
   *
   * The operation validates the task ID to ensure that it is in a valid format
   * and that the task exists in the database. The operation also ensures that
   * the task belongs to the authenticated user before returning the task
   * details.
   *
   * This operation integrates with the todo_list_tasks table as defined in the
   * Prisma schema, incorporating all available task fields and relationships.
   * The response includes the details of the specified task, including the task
   * ID, title, description, deadline, and timestamps.
   *
   * @param connection
   * @param taskId Unique identifier of the task to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string,
  ): Promise<ITodoListTask> {
    try {
      return await getTodoListUserTasksTaskId({
        user,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing task in the todo list application. This operation allows
   * users to modify task details such as title, description, priority, and
   * deadline. The task ID is specified in the path parameter, and the request
   * body contains the updated task information.
   *
   * The operation is associated with the todo_list_tasks table in the Prisma
   * schema. The user must be authenticated to perform this operation. The
   * request body includes fields for title, description, priority, and
   * deadline. The response body returns the updated task information.
   *
   * This operation is used to modify existing tasks in the todo list
   * application. It is typically used after retrieving task details using the
   * GET /tasks/{taskId} operation. The updated task information is returned in
   * the response body.
   *
   * @param connection
   * @param taskId Unique identifier of the task to be updated
   * @param body Updated task information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":taskId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTask.IUpdate,
  ): Promise<ITodoListTask> {
    try {
      return await putTodoListUserTasksTaskId({
        user,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing task from the todo list application. This operation
   * allows users to remove tasks from their list. The task ID is specified in
   * the path parameter.
   *
   * The operation is associated with the todo_list_tasks table in the Prisma
   * schema. The user must be authenticated to perform this operation. The
   * response body is empty, indicating successful deletion.
   *
   * This operation is used to remove tasks from the todo list application. It
   * is typically used after retrieving task details using the GET
   * /tasks/{taskId} operation. The task is permanently deleted from the
   * database.
   *
   * @param connection
   * @param taskId Unique identifier of the task to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":taskId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListUserTasksTaskId({
        user,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
