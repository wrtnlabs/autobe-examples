import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListUserTasksTaskIdPriorities } from "../../../../../providers/postTodoListUserTasksTaskIdPriorities";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { putTodoListUserTasksTaskIdPriorities } from "../../../../../providers/putTodoListUserTasksTaskIdPriorities";

import { ITodoListTaskPriority } from "../../../../../api/structures/ITodoListTaskPriority";

@Controller("/todoList/user/tasks/:taskId/priorities")
export class TodolistUserTasksPrioritiesController {
  /**
   * Create a new task priority for a specific task in the todo list
   * application. This operation allows users to assign a priority level to a
   * task, which can be one of the following: Low, Medium, or High. The priority
   * level helps users to categorize and manage their tasks based on their
   * importance. This operation is associated with the todo_list_tasks table
   * through the todo_list_task_id field, which links the priority to a specific
   * task. The operation ensures that the priority level is set correctly and
   * that the task exists in the system. This operation is typically used after
   * a task has been created and before it is viewed or updated.
   *
   * @param connection
   * @param taskId The unique identifier of the task to which the priority will
   *   be assigned
   * @param body The priority level to be assigned to the task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTaskPriority.ICreate,
  ): Promise<ITodoListTaskPriority> {
    try {
      return await postTodoListUserTasksTaskIdPriorities({
        user,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the priority level of an existing task in the todo list application.
   * This operation allows users to change the priority level of a task, which
   * can be one of the following: Low, Medium, or High. The priority level helps
   * users to categorize and manage their tasks based on their importance. This
   * operation is associated with the todo_list_tasks table through the
   * todo_list_task_id field, which links the priority to a specific task. The
   * operation ensures that the priority level is updated correctly and that the
   * task exists in the system. This operation is typically used after a task
   * has been created and before it is viewed or updated.
   *
   * @param connection
   * @param taskId The unique identifier of the task whose priority will be
   *   updated
   * @param body The new priority level to be assigned to the task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTaskPriority.IUpdate,
  ): Promise<ITodoListTaskPriority> {
    try {
      return await putTodoListUserTasksTaskIdPriorities({
        user,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
