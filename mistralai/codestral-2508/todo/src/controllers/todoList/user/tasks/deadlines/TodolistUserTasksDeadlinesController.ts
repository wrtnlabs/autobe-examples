import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListUserTasksTaskIdDeadlines } from "../../../../../providers/postTodoListUserTasksTaskIdDeadlines";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { putTodoListUserTasksTaskIdDeadlines } from "../../../../../providers/putTodoListUserTasksTaskIdDeadlines";

import { ITodoListTask } from "../../../../../api/structures/ITodoListTask";

@Controller("/todoList/user/tasks/:taskId/deadlines")
export class TodolistUserTasksDeadlinesController {
  /**
   * Create a new deadline for a specific task.
   *
   * This operation allows users to create a new deadline for a specific task in
   * the todo list application. The deadline is specified as a DateTime value
   * and is associated with the task identified by the taskId parameter. The
   * operation updates the deadline field in the todo_list_tasks table in the
   * database.
   *
   * The operation requires the user to be authenticated and have the
   * appropriate permissions to create a deadline for the specified task. The
   * taskId parameter must be a valid UUID that corresponds to an existing task
   * in the database.
   *
   * The request body for this operation should include the deadline value in
   * ISO 8601 format. The response body will include the updated task
   * information, including the newly set deadline.
   *
   * This operation is part of the task management functionality in the todo
   * list application and is used to set deadlines for tasks. It is typically
   * used in conjunction with the task creation and task updating operations.
   *
   * @param connection
   * @param taskId The unique identifier of the task for which the deadline is
   *   being created.
   * @param body The deadline information for the task.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTask.IDeadline,
  ): Promise<ITodoListTask> {
    try {
      return await postTodoListUserTasksTaskIdDeadlines({
        user,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the deadline for a specific task.
   *
   * This operation allows users to update the deadline for a specific task in
   * the todo list application. The deadline is specified as a DateTime value
   * and is associated with the task identified by the taskId parameter. The
   * operation updates the deadline field in the todo_list_tasks table in the
   * database.
   *
   * The operation requires the user to be authenticated and have the
   * appropriate permissions to update the deadline for the specified task. The
   * taskId parameter must be a valid UUID that corresponds to an existing task
   * in the database.
   *
   * The request body for this operation should include the new deadline value
   * in ISO 8601 format. The response body will include the updated task
   * information, including the newly set deadline.
   *
   * This operation is part of the task management functionality in the todo
   * list application and is used to modify deadlines for tasks. It is typically
   * used in conjunction with the task creation and task updating operations.
   *
   * @param connection
   * @param taskId The unique identifier of the task for which the deadline is
   *   being updated.
   * @param body The new deadline information for the task.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTask.IDeadline,
  ): Promise<ITodoListTask> {
    try {
      return await putTodoListUserTasksTaskIdDeadlines({
        user,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
