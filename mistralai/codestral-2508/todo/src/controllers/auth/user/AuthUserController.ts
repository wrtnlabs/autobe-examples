import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthUserJoin } from "../../../providers/postAuthUserJoin";
import { postAuthUserLogin } from "../../../providers/postAuthUserLogin";
import { postAuthUserRefresh } from "../../../providers/postAuthUserRefresh";

import { ITodoListUser } from "../../../api/structures/ITodoListUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * Register a new user for the Todo list application.
   *
   * This API operation allows users to register for the Todo list application.
   * It creates a new user account with the provided email and password. The
   * user must verify their email address before they can log in. The email must
   * be unique and the password must meet the minimum security requirements.
   *
   * @param connection
   * @param body User registration information.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITodoListUser.ICreate,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Log in to the Todo list application.
   *
   * This API operation allows users to log in to the Todo list application. It
   * validates the provided email and password and returns a JWT token if the
   * credentials are valid. The user must be able to log in from multiple
   * devices and stay logged in for a certain period of time.
   *
   * @param connection
   * @param body User login information.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITodoListUser.ILogin,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh the JWT token for the Todo list application.
   *
   * This API operation allows users to refresh their JWT token for the Todo
   * list application. It validates the provided refresh token and returns a new
   * JWT token if the refresh token is valid.
   *
   * @param connection
   * @param body Refresh token information.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITodoListUser.IRefresh,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
