{"operations":[{"specification":"This API operation allows users to register for the Todo list application. It creates a new user account with the provided email and password. The user must verify their email address before they can log in. The email must be unique and the password must meet the minimum security requirements.","authorizationType":"join","description":"This API operation allows users to register for the Todo list application. It creates a new user account with the provided email and password. The user must verify their email address before they can log in. The email must be unique and the password must meet the minimum security requirements.","summary":"Register a new user for the Todo list application.","parameters":[],"requestBody":{"description":"User registration information.","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"User registration result.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"This API operation allows users to log in to the Todo list application. It validates the provided email and password and returns a JWT token if the credentials are valid. The user must be able to log in from multiple devices and stay logged in for a certain period of time.","authorizationType":"login","description":"This API operation allows users to log in to the Todo list application. It validates the provided email and password and returns a JWT token if the credentials are valid. The user must be able to log in from multiple devices and stay logged in for a certain period of time.","summary":"Log in to the Todo list application.","parameters":[],"requestBody":{"description":"User login information.","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"User login result.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"This API operation allows users to refresh their JWT token for the Todo list application. It validates the provided refresh token and returns a new JWT token if the refresh token is valid.","authorizationType":"refresh","description":"This API operation allows users to refresh their JWT token for the Todo list application. It validates the provided refresh token and returns a new JWT token if the refresh token is valid.","summary":"Refresh the JWT token for the Todo list application.","parameters":[],"requestBody":{"description":"Refresh token information.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Refresh token result.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation creates a new user account in the Todo list application. It handles user registration by collecting essential information and validating it against system requirements. The operation interacts with the todo_list_users table in the Prisma schema to store user credentials and personal information.","description":"Create a new user account in the Todo list application. This operation handles user registration by collecting essential information such as email address and password. The system validates the provided information against system requirements before creating the account. Upon successful registration, the user is added to the todo_list_users table in the Prisma schema, where their credentials and personal information are stored. This operation is essential for enabling users to access the Todo list application and manage their tasks.","summary":"Create a new user account in the Todo list application","parameters":[],"requestBody":{"description":"User registration information including email address and password","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"Confirmation of successful user registration","typeName":"ITodoListUser"},"name":"create","authorizationRoles":[],"path":"/todoList/users","method":"post","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation authenticates a user in the Todo list application by verifying their credentials. It checks the provided email address and password against the stored information in the todo_list_users table. Upon successful authentication, the operation generates an access token for the user to access protected resources.","description":"Authenticate a user in the Todo list application by verifying their credentials. This operation checks the provided email address and password against the stored information in the todo_list_users table. Upon successful authentication, the operation generates an access token for the user to access protected resources. This operation is essential for enabling users to securely access their Todo list and manage their tasks.","summary":"Authenticate a user in the Todo list application","parameters":[],"requestBody":{"description":"User login credentials including email address and password","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Access token for authenticated user","typeName":"ITodoListUser.IAccessToken"},"name":"login","authorizationRoles":[],"path":"/todoList/users/login","method":"post","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/users","method":"post"},"description":"User must be created before login"}]},{"specification":"This operation logs out the current user from the system. It invalidates the user's current session and clears any authentication tokens. This operation is associated with the todo_list_users table in the Prisma schema.","description":"This operation allows a user to log out of the system. When executed, it will invalidate the user's current session and clear any authentication tokens associated with the user. This ensures that the user is no longer authenticated and will need to log in again to access protected resources. The operation is associated with the todo_list_users table in the Prisma schema, which stores user information including authentication tokens.","summary":"Log out the current user from the system","parameters":[],"requestBody":null,"responseBody":null,"name":"logout","authorizationRoles":["user"],"path":"/todoList/user/users/logout","method":"post","authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of tasks with advanced filtering, searching, and sorting capabilities. It operates on the todo_list_tasks table from the Prisma schema and supports complex queries to find tasks based on various criteria including title, description, priority, and deadline.","description":"Retrieve a filtered and paginated list of tasks from the system. This operation provides advanced search capabilities for finding tasks based on multiple criteria including partial title matching, description keywords, priority level filtering, and deadline ranges. The operation supports comprehensive pagination with configurable page sizes and sorting options. Tasks can be sorted by title, priority, deadline, or creation date in ascending or descending order. Security considerations include rate limiting for search operations and appropriate filtering of sensitive task information based on the requesting user's authorization level. Only users with appropriate permissions can access detailed task information, while basic task lists may be available to authenticated users. This operation integrates with the todo_list_tasks table as defined in the Prisma schema, incorporating all available task fields and relationships. The response includes task summary information optimized for list displays, with options to include additional details based on authorization level.","summary":"Search and retrieve a filtered, paginated list of tasks","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for task filtering","typeName":"ITodoListTask.IRequest"},"responseBody":{"description":"Paginated list of task summary information matching search criteria","typeName":"IPageITodoListTask.ISummary"},"name":"index","authorizationRoles":["user"],"path":"/todoList/user/tasks","method":"patch","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must exist before it can be retrieved"}]},{"specification":"This operation creates a new task in the todo list application. It operates on the todo_list_tasks table from the Prisma schema and allows users to add new tasks with a title, description, and optional deadline. The operation ensures that the task is associated with the authenticated user and sets the appropriate timestamps for creation and updates.","path":"/todoList/user/tasks","method":"post","summary":"Create a new task in the todo list application","description":"Create a new task in the todo list application. This operation allows users to add new tasks with a title, description, and optional deadline. The task will be associated with the authenticated user and the appropriate timestamps will be set for creation and updates.\n\nThe operation validates the input data to ensure that the title and description are provided and that the deadline, if provided, is in a valid format. The operation also ensures that the task is associated with the authenticated user and that the appropriate timestamps are set.\n\nThis operation integrates with the todo_list_tasks table as defined in the Prisma schema, incorporating all available task fields and relationships. The response includes the details of the newly created task, including the task ID, title, description, deadline, and timestamps.","parameters":[],"requestBody":{"description":"Task creation information including title, description, and optional deadline","typeName":"ITodoListTask.ICreate"},"responseBody":{"description":"Details of the newly created task including task ID, title, description, deadline, and timestamps","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"create","authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a specific task in the todo list application. It operates on the todo_list_tasks table from the Prisma schema and allows users to view the details of a task by providing the task ID. The operation ensures that the task belongs to the authenticated user and returns the task details including title, description, deadline, and timestamps.","path":"/todoList/user/tasks/{taskId}","method":"get","summary":"Retrieve the details of a specific task in the todo list application","description":"Retrieve the details of a specific task in the todo list application. This operation allows users to view the details of a task by providing the task ID. The operation ensures that the task belongs to the authenticated user and returns the task details including title, description, deadline, and timestamps.\n\nThe operation validates the task ID to ensure that it is in a valid format and that the task exists in the database. The operation also ensures that the task belongs to the authenticated user before returning the task details.\n\nThis operation integrates with the todo_list_tasks table as defined in the Prisma schema, incorporating all available task fields and relationships. The response includes the details of the specified task, including the task ID, title, description, deadline, and timestamps.","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Details of the specified task including task ID, title, description, deadline, and timestamps","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"at","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must be created before it can be retrieved"}]},{"specification":"This operation updates an existing task in the todo list application. It allows users to modify task details such as title, description, priority, and deadline. The operation is associated with the todo_list_tasks table in the Prisma schema and requires the user to be authenticated.","path":"/todoList/user/tasks/{taskId}","method":"put","description":"Update an existing task in the todo list application. This operation allows users to modify task details such as title, description, priority, and deadline. The task ID is specified in the path parameter, and the request body contains the updated task information.\n\nThe operation is associated with the todo_list_tasks table in the Prisma schema. The user must be authenticated to perform this operation. The request body includes fields for title, description, priority, and deadline. The response body returns the updated task information.\n\nThis operation is used to modify existing tasks in the todo list application. It is typically used after retrieving task details using the GET /tasks/{taskId} operation. The updated task information is returned in the response body.","summary":"Update an existing task in the todo list application","parameters":[{"name":"taskId","description":"Unique identifier of the task to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated task information","typeName":"ITodoListTask.IUpdate"},"responseBody":{"description":"Updated task information","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"update","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must exist before it can be updated"}]},{"specification":"This operation deletes an existing task from the todo list application. It allows users to remove tasks from their list. The operation is associated with the todo_list_tasks table in the Prisma schema and requires the user to be authenticated.","path":"/todoList/user/tasks/{taskId}","method":"delete","description":"Delete an existing task from the todo list application. This operation allows users to remove tasks from their list. The task ID is specified in the path parameter.\n\nThe operation is associated with the todo_list_tasks table in the Prisma schema. The user must be authenticated to perform this operation. The response body is empty, indicating successful deletion.\n\nThis operation is used to remove tasks from the todo list application. It is typically used after retrieving task details using the GET /tasks/{taskId} operation. The task is permanently deleted from the database.","summary":"Delete an existing task from the todo list application","parameters":[{"name":"taskId","description":"Unique identifier of the task to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must exist before it can be deleted"}]},{"specification":"This operation creates a new task priority for a specific task. It operates on the todo_list_task_priorities table in the Prisma schema and establishes the priority level for a task. The priority level can be one of the following: Low, Medium, or High. This operation is associated with the todo_list_tasks table through the todo_list_task_id field.","description":"Create a new task priority for a specific task in the todo list application. This operation allows users to assign a priority level to a task, which can be one of the following: Low, Medium, or High. The priority level helps users to categorize and manage their tasks based on their importance. This operation is associated with the todo_list_tasks table through the todo_list_task_id field, which links the priority to a specific task. The operation ensures that the priority level is set correctly and that the task exists in the system. This operation is typically used after a task has been created and before it is viewed or updated.","summary":"Create a new task priority for a specific task","parameters":[{"name":"taskId","description":"The unique identifier of the task to which the priority will be assigned","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The priority level to be assigned to the task","typeName":"ITodoListTaskPriority.ICreate"},"responseBody":{"description":"The newly created task priority with all its details","typeName":"ITodoListTaskPriority"},"name":"create","authorizationRoles":["user"],"path":"/todoList/user/tasks/{taskId}/priorities","method":"post","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must exist before assigning a priority to it"}]},{"specification":"This operation updates the priority level of an existing task. It operates on the todo_list_task_priorities table in the Prisma schema and modifies the priority level of a task. The priority level can be one of the following: Low, Medium, or High. This operation is associated with the todo_list_tasks table through the todo_list_task_id field.","description":"Update the priority level of an existing task in the todo list application. This operation allows users to change the priority level of a task, which can be one of the following: Low, Medium, or High. The priority level helps users to categorize and manage their tasks based on their importance. This operation is associated with the todo_list_tasks table through the todo_list_task_id field, which links the priority to a specific task. The operation ensures that the priority level is updated correctly and that the task exists in the system. This operation is typically used after a task has been created and before it is viewed or updated.","summary":"Update the priority level of an existing task","parameters":[{"name":"taskId","description":"The unique identifier of the task whose priority will be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new priority level to be assigned to the task","typeName":"ITodoListTaskPriority.IUpdate"},"responseBody":{"description":"The updated task priority with all its details","typeName":"ITodoListTaskPriority"},"name":"update","authorizationRoles":["user"],"path":"/todoList/user/tasks/{taskId}/priorities","method":"put","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks/{taskId}/priorities","method":"post"},"description":"Task priority must be created before it can be updated"},{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must be created before its priority can be updated"}]},{"specification":"This operation creates a new deadline for a specific task in the todo list application. It operates on the todo_list_tasks table from the Prisma schema and allows users to set a deadline for their tasks. The deadline is stored as a DateTime field in the database.","path":"/todoList/user/tasks/{taskId}/deadlines","method":"post","summary":"Create a new deadline for a specific task","description":"This operation allows users to create a new deadline for a specific task in the todo list application. The deadline is specified as a DateTime value and is associated with the task identified by the taskId parameter. The operation updates the deadline field in the todo_list_tasks table in the database.\n\nThe operation requires the user to be authenticated and have the appropriate permissions to create a deadline for the specified task. The taskId parameter must be a valid UUID that corresponds to an existing task in the database.\n\nThe request body for this operation should include the deadline value in ISO 8601 format. The response body will include the updated task information, including the newly set deadline.\n\nThis operation is part of the task management functionality in the todo list application and is used to set deadlines for tasks. It is typically used in conjunction with the task creation and task updating operations.","parameters":[{"name":"taskId","description":"The unique identifier of the task for which the deadline is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The deadline information for the task.","typeName":"ITodoListTask.IDeadline"},"responseBody":{"description":"The updated task information, including the newly set deadline.","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"create","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must exist before setting a deadline"}]},{"specification":"This operation updates the deadline for a specific task in the todo list application. It operates on the todo_list_tasks table from the Prisma schema and allows users to modify the deadline for their tasks. The deadline is stored as a DateTime field in the database.","path":"/todoList/user/tasks/{taskId}/deadlines","method":"put","summary":"Update the deadline for a specific task","description":"This operation allows users to update the deadline for a specific task in the todo list application. The deadline is specified as a DateTime value and is associated with the task identified by the taskId parameter. The operation updates the deadline field in the todo_list_tasks table in the database.\n\nThe operation requires the user to be authenticated and have the appropriate permissions to update the deadline for the specified task. The taskId parameter must be a valid UUID that corresponds to an existing task in the database.\n\nThe request body for this operation should include the new deadline value in ISO 8601 format. The response body will include the updated task information, including the newly set deadline.\n\nThis operation is part of the task management functionality in the todo list application and is used to modify deadlines for tasks. It is typically used in conjunction with the task creation and task updating operations.","parameters":[{"name":"taskId","description":"The unique identifier of the task for which the deadline is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new deadline information for the task.","typeName":"ITodoListTask.IDeadline"},"responseBody":{"description":"The updated task information, including the newly set deadline.","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"update","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/tasks","method":"post"},"description":"Task must exist before updating its deadline"}]}],"components":{"authorization":[{"name":"user","description":"A user who can create, read, update, and delete tasks in the Todo list application.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTask.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTask.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.ICreate":{"type":"object","x-autobe-prisma-schema":"todo_list_users","properties":{"email":{"type":"string","format":"email","description":"User's email address for login and notifications.\n\nThis field is required for user registration and serves as the primary\nidentifier for the user account. The email address must be unique\nacross the system to prevent duplicate accounts.\n\nThe email format must comply with standard email address conventions,\nincluding the presence of an @ symbol and a valid domain name.\n\nThis field is directly mapped to the `email` column in the `todo_list_users`\ntable in the Prisma schema."},"password":{"type":"string","description":"Plain text password for user authentication.\n\nThis field is required for user registration and will be used to create\nthe hashed password that will be stored in the database.\n\nThe password must meet minimum security requirements, which typically\ninclude a minimum length and complexity.\n\nThis field is not stored directly in the database. Instead, a secure\nhash of the password is generated and stored in the `password_hash`\ncolumn of the `todo_list_users` table in the Prisma schema.\n\nThe plain text password is only used during the registration process\nand should be discarded immediately after hashing."}},"required":["email","password"],"description":"User registration information for creating a new account in the Todo list application.\n\nThis type represents the data required to register a new user. It includes\nessential fields for account creation and authentication.\n\nThe `email` field is required for user identification and communication.\nThe `password` field is required for secure authentication and must be\nhashed before storage.\n\nThis type is used in the user registration process and corresponds to\nthe `todo_list_users` table in the Prisma schema. The `email` and\n`password_hash` fields in this type map directly to columns in the\n`todo_list_users` table."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user.\n\nThis field contains the UUID of the user who has successfully\nauthenticated. It serves as a reference to the user's account in the\nsystem and is used for authorization purposes.\n\nThe value of this field is derived from the `id` column in the\n`todo_list_users` table of the Prisma schema."},"email":{"type":"string","format":"email","description":"User's email address for login and notifications.\n\nThis field stores the user's email address, which is used for account\nverification, login, and notifications. The email must be unique across\nall user accounts to ensure each user has a distinct identity within the\nsystem."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations\nsuch as login, join, or token refresh.\n\nThe `id` field identifies the authenticated user and is used for\nauthorization purposes. The `token` field contains the JWT token that\nmust be included in subsequent authenticated requests.\n\nThis type ensures that the client receives all necessary information\nto maintain an authenticated session with the server."},"ITodoListUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for login and notifications.\n\nThis field is used to identify the user during the login process and for sending notifications. The email address must be unique and properly formatted to ensure secure and reliable communication with the user."},"password":{"type":"string","description":"User's password for authentication.\n\nThis field is used to verify the user's identity during the login process. The password must meet the minimum security requirements and should be securely stored in the database."}},"required":["email","password"],"description":"User login information.\n\nThis type represents the information required for a user to log in to the Todo list application. It includes the user's email address and password, which are used to authenticate the user and grant access to their account.\n\nThe email address must be properly formatted and unique to ensure secure and reliable communication with the user. The password must meet the minimum security requirements to ensure the protection of the user's account.\n\nThis type is used in the login operation to authenticate the user and generate an access token for accessing protected resources."},"ITodoListUser.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token for generating a new access token.\n\nThis field is used to generate a new access token when the current access token has expired. The refresh token must be valid and associated with the user's account to ensure secure and reliable access to protected resources."}},"required":["refreshToken"],"description":"Refresh token information.\n\nThis type represents the information required to refresh an access token for a user in the Todo list application. It includes the refresh token, which is used to generate a new access token when the current access token has expired.\n\nThe refresh token must be valid and associated with the user's account to ensure secure and reliable access to protected resources. This type is used in the refresh operation to generate a new access token for the user."},"ITodoListUser":{"type":"object","x-autobe-prisma-schema":"todo_list_users","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the user account. This UUID is automatically\nassigned when the user registers and serves as the primary key in the\ntodo_list_users table."},"email":{"type":"string","format":"email","description":"User's email address for login and notifications.\n\nThis field stores the user's email address, which is used for account\nverification, login, and notifications. The email must be unique across\nall user accounts to ensure each user has a distinct identity within the\nsystem."},"password_hash":{"type":"string","description":"Hashed password for secure authentication.\n\nThis field contains the hashed version of the user's password. The actual\npassword is never stored in plain text for security reasons. The password\nis hashed using a secure hashing algorithm before being stored in this\nfield. This ensures that even if the database is compromised, the actual\npasswords remain secure."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nThis field records the exact date and time when the user account was\ncreated. It is automatically set by the system when the user registers and\ncannot be modified afterward. This timestamp helps track when each user\njoined the system and can be useful for analytics and auditing purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated.\n\nThis field records the date and time of the most recent update to the user\naccount. It is automatically updated by the system whenever any changes\nare made to the account information. This timestamp is crucial for\nmaintaining data consistency and tracking changes over time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user account was soft-deleted.\n\nThis field is used to implement soft deletion for user accounts. When an\naccount is marked for deletion, this field is set to the current date and\ntime, indicating that the account is no longer active. Soft-deleted\naccounts can be restored if needed, and this field helps track when the\naccount was deactivated. If the field is null, it means the account is\nactive and not deleted."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"User information for authentication and authorization. This table stores essential user details required for system access and role management.\n\nThe ITodoListUser type represents a user in the Todo list application. It contains essential information such as the user's unique identifier, email address, and password hash. The timestamps for account creation and updates are also included to track the lifecycle of the user account. This type is used throughout the application for authentication, authorization, and user management purposes."},"ITodoListUser.IAccessToken":{"type":"object","properties":{"token":{"type":"string","description":"Access token for authenticated user.\n\nThis field contains the JWT (JSON Web Token) that is issued upon successful authentication. The token is used to authorize subsequent requests to protected resources. It includes claims about the user, such as their unique identifier and roles, which are used to verify the user's permissions and access rights."}},"required":["token"],"description":"Access token for authenticated user.\n\nThe ITodoListUser.IAccessToken type represents the access token issued to an authenticated user. This token is used to authorize access to protected resources in the Todo list application. It contains the JWT (JSON Web Token) that includes claims about the user, such as their unique identifier and roles, which are used to verify the user's permissions and access rights."},"ITodoListTask.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Defaults to 1 if not specified."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of items per page. Defaults to 20 if not specified."},"search":{"type":"string","description":"Search term to filter tasks by title or description."},"priority":{"oneOf":[{"const":"Low","description":"Priority level to filter tasks by."},{"const":"Medium","description":"Priority level to filter tasks by."},{"const":"High","description":"Priority level to filter tasks by."}],"description":"Priority level to filter tasks by."},"deadline":{"type":"string","format":"date-time","description":"Deadline to filter tasks by. Tasks with deadlines on or after this date will be included."}},"required":[],"description":"Request parameters for filtering, sorting, and paginating task lists.\n\nThis type defines the parameters that can be used to customize the retrieval of task lists.\n\nThe properties include:\n\n- `page`: The page number for pagination, with a minimum value of 1.\n- `limit`: The number of items to display per page, with a minimum value of 1 and a maximum value of 100.\n- `search`: A search term to filter tasks by title or description.\n- `priority`: The priority level to filter tasks by, which can be one of the following: Low, Medium, or High.\n- `deadline`: The deadline to filter tasks by, which will include tasks with deadlines on or after the specified date.\n\nThis type is used in the request body for operations that retrieve paginated lists of tasks, allowing users to customize the results based on their needs."},"ITodoListTask.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":100,"description":"The title of the task. This is a required field and must be between 1 and 100 characters long."},"description":{"type":"string","minLength":1,"maxLength":500,"description":"The description of the task. This is a required field and must be between 1 and 500 characters long."},"deadline":{"type":"string","format":"date-time","description":"The deadline for the task. This is an optional field and must be in ISO 8601 format if provided."},"priority":{"oneOf":[{"const":"Low","description":"The priority level of the task. This is an optional field and can be one of the following: Low, Medium, or High."},{"const":"Medium","description":"The priority level of the task. This is an optional field and can be one of the following: Low, Medium, or High."},{"const":"High","description":"The priority level of the task. This is an optional field and can be one of the following: Low, Medium, or High."}],"description":"The priority level of the task. This is an optional field and can be one of the following: Low, Medium, or High."}},"required":["title","description"],"description":"Request body for creating a new task in the todo list application.\n\nThis type defines the properties required to create a new task. The properties include:\n\n- `title`: The title of the task, which is a required field with a minimum length of 1 and a maximum length of 100 characters.\n- `description`: The description of the task, which is a required field with a minimum length of 1 and a maximum length of 500 characters.\n- `deadline`: The deadline for the task, which is an optional field and must be in ISO 8601 format if provided.\n- `priority`: The priority level of the task, which is an optional field and can be one of the following: Low, Medium, or High.\n\nThis type is used in the request body for the task creation operation, allowing users to specify the details of the new task they want to create."},"ITodoListTask":{"type":"object","x-autobe-prisma-schema":"todo_list_tasks","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the task in the system."},"todo_list_user_id":{"type":"string","format":"uuid","description":"The user who created this task. {@link todo_list_users.id}."},"title":{"type":"string","description":"The title of the task."},"description":{"type":"string","description":"The description of the task."},"deadline":{"type":"string","format":"date-time","description":"The deadline for the task."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the task was created."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the task was last updated."}},"required":["id","todo_list_user_id","title","description","created_at","updated_at"],"description":"Represents tasks in the todo list application. Each task has a title,\ndescription, priority, and deadline. Tasks are associated with users\nthrough the todo_list_users table.\n\nThis type corresponds to the todo_list_tasks table in the Prisma schema.\nIt includes all fields from the table, including the primary key, foreign\nkey to the user, task details, and timestamps for creation and updates.\n\nThe task title and description are required fields that must be provided\nwhen creating a task. The deadline is optional and can be set when needed.\nThe timestamps are automatically managed by the system and should not be\nmodified directly."},"ITodoListTask.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_list_tasks","properties":{"title":{"type":"string","description":"The title of the task."},"description":{"type":"string","description":"The description of the task."},"deadline":{"type":"string","format":"date-time","description":"The deadline for the task."}},"required":[],"description":"Represents the data needed to update an existing task in the todo list\napplication.\n\nThis type corresponds to the todo_list_tasks table in the Prisma schema.\nIt includes fields that can be modified when updating a task: title,\ndescription, and deadline.\n\nAll fields in this type are optional, allowing partial updates where only\nspecific fields need to be changed. The deadline field is optional and\ncan be set or cleared as needed.\n\nThis type is used for PATCH operations on tasks, where clients can provide\nonly the fields they want to update. The system will only modify the\nspecified fields while leaving others unchanged."},"ITodoListTaskPriority":{"type":"object","x-autobe-prisma-schema":"todo_list_task_priorities","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nThis field uniquely identifies each task priority record in the system. It is a UUID (Universally Unique Identifier) that ensures global uniqueness across the database."},"todo_list_task_id":{"type":"string","format":"uuid","description":"The task associated with this priority. {@link todo_list_tasks.id}.\n\nThis field establishes a relationship between the task priority and the specific task it belongs to. It references the primary key of the todo_list_tasks table, ensuring that each priority is correctly linked to its corresponding task."},"priority_level":{"type":"string","description":"The priority level of the task (Low, Medium, High).\n\nThis field indicates the importance or urgency of the task. It can take one of three values: 'Low', 'Medium', or 'High', which help users categorize and manage their tasks based on their importance."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the priority was created.\n\nThis field records the exact moment when the task priority was initially assigned to the task. It is automatically set by the system when the record is created."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the priority was last updated.\n\nThis field records the most recent time when the task priority was modified. It is automatically updated by the system whenever changes are made to the priority level."}},"required":["id","todo_list_task_id","priority_level","created_at","updated_at"],"description":"Represents the priority levels for tasks in the todo list application.\n\nThis entity stores information about the priority levels assigned to tasks, allowing users to categorize and manage their tasks based on their importance. Each priority record is associated with a specific task and includes details about the priority level and timestamps for creation and updates.\n\nThe priority_level field helps users to quickly identify which tasks are more urgent or important, enabling better task management and organization. The created_at and updated_at fields provide a complete audit trail of when priority levels were assigned and modified, which can be useful for tracking changes over time."},"ITodoListTaskPriority.ICreate":{"type":"object","x-autobe-prisma-schema":"todo_list_task_priorities","properties":{"todo_list_task_id":{"type":"string","format":"uuid","description":"The task associated with this priority. {@link todo_list_tasks.id}.\n\nThis field establishes a relationship between the task priority and the specific task it belongs to. It references the primary key of the todo_list_tasks table, ensuring that each priority is correctly linked to its corresponding task."},"priority_level":{"type":"string","description":"The priority level of the task (Low, Medium, High).\n\nThis field indicates the importance or urgency of the task. It can take one of three values: 'Low', 'Medium', or 'High', which help users categorize and manage their tasks based on their importance."}},"required":["todo_list_task_id","priority_level"],"description":"Represents the creation of a new task priority in the todo list application.\n\nThis type defines the data required to create a new task priority record. It includes the task ID and the priority level, which are necessary to establish the relationship between the priority and the task, and to indicate the importance or urgency of the task.\n\nThe todo_list_task_id field references the primary key of the todo_list_tasks table, ensuring that the priority is correctly linked to its corresponding task. The priority_level field can take one of three values: 'Low', 'Medium', or 'High', which help users categorize and manage their tasks based on their importance.\n\nThis type is used when creating a new task priority, allowing users to assign a priority level to a task and establish the relationship between the priority and the task."},"ITodoListTaskPriority.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_list_task_priorities","properties":{"priority_level":{"type":"string","description":"The priority level of the task (Low, Medium, High).\n\nThis field determines the importance of the task and helps users to categorize and manage their tasks based on their importance. The priority level can be one of the following: Low, Medium, or High. The priority level is stored as a string in the database and is associated with a specific task through the todo_list_task_id field. The priority level is used to sort and filter tasks in the todo list application. The priority level is an essential field for task management and helps users to prioritize their tasks effectively."}},"required":["priority_level"],"description":"Represents the priority levels for tasks in the todo list application.\n\nEach priority has a name and a description. This model is associated with the todo_list_tasks table through the todo_list_task_id field, which links the priority to a specific task. The priority level is used to categorize and manage tasks based on their importance. The model includes fields for the priority level, timestamps for creation and updates, and a relationship to the associated task.\n\nThe priority level is an essential field for task management and helps users to prioritize their tasks effectively. The model is used to store and retrieve priority information for tasks in the todo list application. The model is part of the Tasks namespace and is generated by the AutoBE tool."},"ITodoListTask.IDeadline":{"type":"object","x-autobe-prisma-schema":"todo_list_tasks","properties":{"deadline":{"type":"string","format":"date-time","description":"The deadline for the task.\n\nThis field specifies the date and time by which the task should be completed. The deadline is stored as a DateTime value in the database and is associated with a specific task through the todo_list_task_id field. The deadline is used to set reminders and notifications for tasks in the todo list application. The deadline is an essential field for task management and helps users to track the progress of their tasks."}},"required":["deadline"],"description":"Represents tasks in the todo list application. Each task has a title, description, priority, and deadline. Tasks are associated with users through the todo_list_users table.\n\nThis model includes fields for the task title, description, deadline, timestamps for creation and updates, and a relationship to the associated user. The deadline field is used to set reminders and notifications for tasks. The model is associated with the todo_list_users table through the todo_list_user_id field, which links the task to a specific user. The model is used to store and retrieve task information for users in the todo list application. The model is part of the Tasks namespace and is generated by the AutoBE tool."},"ITodoListTask.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the task. This field is automatically generated\nwhen a new task is created and serves as the primary key in the database.\n\nThis ID is crucial for task identification and retrieval operations. It is\nused in various API endpoints to reference specific tasks, such as in\nGET /tasks/{taskId} to retrieve task details or in DELETE /tasks/{taskId}\nto delete a specific task.\n\nThe ID is a UUID (Universally Unique Identifier) to ensure global\nuniqueness across different systems and databases."},"title":{"type":"string","description":"The title of the task.\n\nThe title provides a concise summary of the task's purpose or objective.\nIt is a required field when creating a new task and is used in task\nlists and summaries to quickly identify tasks.\n\nThe title should be descriptive enough to give users an idea of what\nthe task entails without needing to view the full description. It is\nalso used in search and filtering operations to help users find specific\ntasks."},"description":{"type":"string","description":"The description of the task.\n\nThe description provides detailed information about what needs to be done\nfor the task. It is a required field when creating a new task and is used\nto provide additional context or instructions for completing the task.\n\nThe description can include details such as steps to follow, resources\nneeded, or any other relevant information that might help in completing\nthe task. It is also used in task lists and summaries to provide a more\ndetailed view of the task."},"deadline":{"type":"string","format":"date-time","description":"The deadline for the task.\n\nThe deadline specifies the date and time by which the task should be\ncompleted. It is an optional field when creating a new task and can be\nused to set reminders or track overdue tasks.\n\nThe deadline is stored in the database as a DateTime field, which allows\nfor precise scheduling and comparison operations. It is also used in\nsearch and filtering operations to help users find tasks based on their\ndeadlines."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the task was created.\n\nThe created_at field records the exact date and time when the task was\ncreated. It is automatically set by the system when a new task is added to\nthe database and is used to track when tasks were initially created.\n\nThis field is useful for auditing purposes and for understanding the\ntimeline of task creation and updates. It is also used in search and\nfiltering operations to help users find tasks based on their creation\ndates."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the task was last updated.\n\nThe updated_at field records the exact date and time when the task was\nlast modified. It is automatically updated by the system whenever the\ntask is updated and is used to track the most recent changes to the\ntask.\n\nThis field is useful for auditing purposes and for understanding the\ntimeline of task updates. It is also used in search and filtering\noperations to help users find tasks based on their last update dates."}},"required":["id","title","description","created_at","updated_at"],"description":"Represents a summary of a task in the todo list application.\n\nThe ITodoListTask.ISummary type provides a concise overview of a task,\nincluding its title, description, deadline, and timestamps. This type is used\nin list views and summaries to display essential task information\nwithout overwhelming users with detailed information.\n\nThe summary includes the task's ID, title, description, deadline, and\ntimestamps for creation and last update. This information is crucial for\nusers to quickly understand the task's purpose, status, and urgency.\n\nThe summary type is used in various API endpoints to provide a list of\ntasks, such as in GET /tasks to retrieve a paginated list of tasks or in\nPATCH /tasks to search and retrieve a filtered list of tasks. It is also\nused in task management operations to display task summaries in user\ninterfaces."}}}}