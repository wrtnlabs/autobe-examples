{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"reddit_community_configurations","description":"Central system configuration table storing platform-wide settings and parameters. This table contains all configurable aspects of the Reddit-like community platform including feature flags, limits, and global behavior settings. The configurations are referenced by multiple domains but maintain system-level independence.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"config_key","type":"string","nullable":false,"description":"Unique configuration key identifier used for system references."},{"name":"config_value","type":"string","nullable":false,"description":"Configuration value stored as string for flexibility."},{"name":"config_type","type":"string","nullable":false,"description":"Data type of the configuration value (boolean, integer, string, json)."},{"name":"description","type":"string","nullable":true,"description":"Human-readable description explaining the configuration purpose."},{"name":"category","type":"string","nullable":false,"description":"Configuration category grouping similar settings (authentication, content, performance)."},{"name":"is_active","type":"boolean","nullable":false,"description":"Whether this configuration is currently active and being used."},{"name":"version","type":"int","nullable":false,"description":"Configuration version for tracking changes and updates."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when this configuration was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when this configuration was last updated."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp when this configuration was soft deleted."}],"uniqueIndexes":[{"fieldNames":["config_key"],"unique":true}],"plainIndexes":[{"fieldNames":["category","is_active"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"reddit_community_channels","description":"Community channel management table defining communication channels and their configurations. Each channel represents a distinct communication pathway within the community platform, supporting different types of content and interaction patterns.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"channel_name","type":"string","nullable":false,"description":"Unique name identifier for the communication channel."},{"name":"display_name","type":"string","nullable":false,"description":"Human-readable display name for the channel."},{"name":"channel_type","type":"string","nullable":false,"description":"Type of channel (discussion, announcement, support, general)."},{"name":"description","type":"string","nullable":true,"description":"Description explaining the channel's purpose and guidelines."},{"name":"is_public","type":"boolean","nullable":false,"description":"Whether the channel is publicly accessible or requires permissions."},{"name":"max_members","type":"int","nullable":true,"description":"Maximum number of members allowed in this channel."},{"name":"content_rules","type":"string","nullable":true,"description":"JSON string containing channel-specific content rules and restrictions."},{"name":"moderation_settings","type":"string","nullable":true,"description":"JSON string containing moderation configuration for this channel."},{"name":"is_active","type":"boolean","nullable":false,"description":"Whether this channel is currently active and accepting content."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when this channel was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when this channel was last updated."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp when this channel was soft deleted."}],"uniqueIndexes":[{"fieldNames":["channel_name"],"unique":true}],"plainIndexes":[{"fieldNames":["channel_type","is_active"]},{"fieldNames":["created_at"]},{"fieldNames":["is_public","is_active"]}],"ginIndexes":[{"fieldName":"display_name"}]},{"name":"reddit_community_performance_metrics","description":"System performance metrics tracking table capturing platform performance indicators. This table stores historical performance data for monitoring system health, identifying bottlenecks, and capacity planning. The metrics support operational decision-making and performance optimization.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"metric_name","type":"string","nullable":false,"description":"Name of the performance metric being tracked."},{"name":"metric_value","type":"double","nullable":false,"description":"Numeric value of the performance metric."},{"name":"metric_unit","type":"string","nullable":false,"description":"Unit of measurement for the metric value (ms, req/s, MB, etc.)."},{"name":"metric_category","type":"string","nullable":false,"description":"Category grouping related metrics (database, api, network, system)."},{"name":"component","type":"string","nullable":false,"description":"System component being measured (authentication, posts, comments, voting)."},{"name":"measurement_interval","type":"string","nullable":false,"description":"Time interval for which this metric was measured (minute, hour, day)."},{"name":"threshold_min","type":"double","nullable":true,"description":"Minimum acceptable value for this metric."},{"name":"threshold_max","type":"double","nullable":true,"description":"Maximum acceptable value for this metric."},{"name":"is_breached","type":"boolean","nullable":false,"description":"Whether this metric has breached defined thresholds."},{"name":"server_instance","type":"string","nullable":true,"description":"Identifier for the server instance where this metric was collected."},{"name":"collected_at","type":"datetime","nullable":false,"description":"Timestamp when this performance metric was collected."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when this metric record was created."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["metric_category","collected_at"]},{"fieldNames":["component","collected_at"]},{"fieldNames":["collected_at"]},{"fieldNames":["is_breached"]}],"ginIndexes":[]},{"name":"reddit_community_audit_logs","description":"Comprehensive audit trail table capturing all significant system activities and changes. This table provides complete visibility into platform operations for security monitoring, compliance reporting, and troubleshooting. Audit logs maintain immutable records of system state changes.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"action_type","type":"string","nullable":false,"description":"Type of action performed (create, update, delete, login, access)."},{"name":"resource_type","type":"string","nullable":false,"description":"Type of resource being acted upon (user, post, comment, community, config)."},{"name":"resource_id","type":"uuid","nullable":true,"description":"ID of the specific resource affected by this action."},{"name":"user_id","type":"uuid","nullable":true,"description":"ID of the user who performed this action if applicable."},{"name":"user_ip","type":"string","nullable":true,"description":"IP address from which the action was performed."},{"name":"user_agent","type":"string","nullable":true,"description":"User agent string of the client used for this action."},{"name":"previous_values","type":"string","nullable":true,"description":"JSON string containing previous state values before the change."},{"name":"new_values","type":"string","nullable":true,"description":"JSON string containing new state values after the change."},{"name":"description","type":"string","nullable":false,"description":"Human-readable description of the action performed."},{"name":"severity","type":"string","nullable":false,"description":"Severity level of this audit event (info, warning, error, critical)."},{"name":"is_successful","type":"boolean","nullable":false,"description":"Whether the action was completed successfully."},{"name":"error_message","type":"string","nullable":true,"description":"Error message if the action failed."},{"name":"session_id","type":"uuid","nullable":true,"description":"ID of the session during which this action was performed."},{"name":"occurred_at","type":"datetime","nullable":false,"description":"Timestamp when this audit event occurred."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when this audit log record was created."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["action_type","occurred_at"]},{"fieldNames":["resource_type","occurred_at"]},{"fieldNames":["user_id","occurred_at"]},{"fieldNames":["occurred_at"]},{"fieldNames":["severity"]}],"ginIndexes":[{"fieldName":"description"}]}]},{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"reddit_community_guests","description":"Guest user accounts for unauthenticated platform access. Guests have limited capabilities and can browse public content without registration. These accounts serve as temporary identities for users exploring the platform before committing to full registration.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"session_token","type":"uuid","description":"Unique session identifier for guest tracking.","nullable":false},{"name":"ip_address","type":"string","description":"IP address for geographic and security tracking.","nullable":false},{"name":"user_agent","type":"string","description":"Browser and device information for session management.","nullable":true},{"name":"last_active_at","type":"datetime","description":"Timestamp of last guest activity for session cleanup.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when guest session was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when guest session was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when guest session was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["session_token"],"unique":true}],"plainIndexes":[{"fieldNames":["last_active_at"]},{"fieldNames":["ip_address"]}],"ginIndexes":[]},{"name":"reddit_community_members","description":"Registered member accounts with full platform access. Members can create content, participate in communities, vote, and engage in discussions. This table represents the core user base of the platform with complete authentication and profile management.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"username","type":"string","description":"Unique username for member identification. Must be 3-20 characters with alphanumeric and underscores only.","nullable":false},{"name":"email","type":"string","description":"Verified email address for communication and account recovery.","nullable":false},{"name":"password_hash","type":"string","description":"Hashed password for secure authentication using bcrypt.","nullable":false},{"name":"display_name","type":"string","description":"Optional display name different from username for user preference.","nullable":true},{"name":"profile_picture_url","type":"uri","description":"URL to profile picture for user identity.","nullable":true},{"name":"bio","type":"string","description":"User biography or description up to 500 characters.","nullable":true},{"name":"account_status","type":"string","description":"Current account status: active, suspended, pending_verification, or deactivated.","nullable":false},{"name":"karma","type":"int","description":"Total karma points accumulated from post and comment interactions.","nullable":false},{"name":"email_verified_at","type":"datetime","description":"Timestamp when email address was verified.","nullable":true},{"name":"last_login_at","type":"datetime","description":"Timestamp of last successful login.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when member account was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when member account was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when member account was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["username"],"unique":true},{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["account_status"]},{"fieldNames":["karma"]},{"fieldNames":["last_login_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"display_name"}]},{"name":"reddit_community_moderators","description":"Community moderator accounts with elevated permissions for content management. Moderators are responsible for enforcing community guidelines, managing reported content, and maintaining community quality standards.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Reference to the base member account. {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":true,"nullable":false}],"plainFields":[{"name":"moderator_level","type":"string","description":"Moderator permission level: junior, senior, or lead moderator.","nullable":false},{"name":"communities_moderated_count","type":"int","description":"Number of communities currently moderated by this user.","nullable":false},{"name":"moderation_experience","type":"int","description":"Total days of moderation experience across all communities.","nullable":false},{"name":"special_permissions","type":"string","description":"JSON string containing special moderation permissions and capabilities.","nullable":true},{"name":"last_moderation_training_at","type":"datetime","description":"Timestamp of last moderation training or certification.","nullable":true},{"name":"moderator_since","type":"datetime","description":"Timestamp when user first became a moderator.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when moderator record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when moderator record was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when moderator record was soft deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["moderator_level"]},{"fieldNames":["moderator_since"]},{"fieldNames":["last_moderation_training_at"]}],"ginIndexes":[]},{"name":"reddit_community_admins","description":"Platform administrator accounts with system-wide management capabilities. Administrators have ultimate authority over platform operations, user management, and system configuration.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Reference to the base member account. {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":true,"nullable":false}],"plainFields":[{"name":"admin_level","type":"string","description":"Administrator permission level: support, content, system, or super_admin.","nullable":false},{"name":"access_scope","type":"string","description":"JSON string defining system areas the admin can access and manage.","nullable":false},{"name":"security_clearance","type":"string","description":"Security clearance level for sensitive operations and data access.","nullable":false},{"name":"two_factor_enabled","type":"boolean","description":"Whether two-factor authentication is required for admin access.","nullable":false},{"name":"last_security_review_at","type":"datetime","description":"Timestamp of last security review and access audit.","nullable":true},{"name":"admin_since","type":"datetime","description":"Timestamp when user first became an administrator.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when admin record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when admin record was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when admin record was soft deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["admin_level"]},{"fieldNames":["admin_since"]},{"fieldNames":["last_security_review_at"]}],"ginIndexes":[]},{"name":"reddit_community_sessions","description":"User authentication sessions for tracking active logins and security. Each session represents an authenticated user connection with device information, location data, and security context for comprehensive access management.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Reference to the member account for this session. {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"session_token","type":"uuid","description":"Unique JWT session token for authentication.","nullable":false},{"name":"refresh_token","type":"uuid","description":"Refresh token for session renewal without re-authentication.","nullable":false},{"name":"ip_address","type":"string","description":"IP address for geographic and security tracking.","nullable":false},{"name":"user_agent","type":"string","description":"Browser and device information for session context.","nullable":false},{"name":"device_type","type":"string","description":"Type of device: mobile, tablet, desktop, or unknown.","nullable":false},{"name":"location_data","type":"string","description":"Geographic location information derived from IP address.","nullable":true},{"name":"expires_at","type":"datetime","description":"Timestamp when session token expires.","nullable":false},{"name":"refresh_expires_at","type":"datetime","description":"Timestamp when refresh token expires.","nullable":false},{"name":"last_activity_at","type":"datetime","description":"Timestamp of last activity within this session.","nullable":false},{"name":"is_active","type":"boolean","description":"Whether the session is currently active and valid.","nullable":false},{"name":"security_flags","type":"string","description":"JSON string containing security flags and risk assessments.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when session was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when session was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["session_token"],"unique":true},{"fieldNames":["refresh_token"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_member_id"]},{"fieldNames":["expires_at"]},{"fieldNames":["last_activity_at"]},{"fieldNames":["is_active"]},{"fieldNames":["device_type"]}],"ginIndexes":[]},{"name":"reddit_community_authentication_logs","description":"Comprehensive authentication event logging for security auditing and anomaly detection. Each log entry records authentication attempts, successes, failures, and security-related events across all user roles.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Reference to the member account involved in authentication event. {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":true}],"plainFields":[{"name":"event_type","type":"string","description":"Type of authentication event: login, logout, failed_login, password_change, etc.","nullable":false},{"name":"event_timestamp","type":"datetime","description":"Precise timestamp when the authentication event occurred.","nullable":false},{"name":"ip_address","type":"string","description":"IP address from which the authentication attempt originated.","nullable":false},{"name":"user_agent","type":"string","description":"Browser and device information for the authentication attempt.","nullable":true},{"name":"success","type":"boolean","description":"Whether the authentication event was successful.","nullable":false},{"name":"failure_reason","type":"string","description":"Reason for authentication failure, if applicable.","nullable":true},{"name":"security_risk_level","type":"string","description":"Assessed security risk level: low, medium, high, or critical.","nullable":false},{"name":"additional_context","type":"string","description":"JSON string containing additional context and metadata for the event.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when log entry was created.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["event_type"]},{"fieldNames":["event_timestamp"]},{"fieldNames":["success"]},{"fieldNames":["security_risk_level"]},{"fieldNames":["ip_address"]}],"ginIndexes":[]}]},{"filename":"schema-03-communities.prisma","namespace":"Communities","models":[{"name":"reddit_community_communities","description":"Core community entity representing user-created communities on the platform. Each community has unique name, access type (public/restricted/private), and moderation settings. Communities serve as containers for posts and discussions, with customizable rules and member management capabilities. {@link reddit_community_memberships.id} {@link reddit_community_settings.id} {@link reddit_community_moderator_assignments.id}","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_category_id","type":"uuid","description":"Associated community category for organization and discovery. {@link reddit_community_categories.id}.","relation":{"name":"category","targetModel":"reddit_community_categories"},"unique":false,"nullable":true}],"plainFields":[{"name":"name","type":"string","description":"Unique community name used for identification and URL generation. Must be 3-21 characters, alphanumeric with underscores.","nullable":false},{"name":"display_title","type":"string","description":"Human-readable community title displayed to users. Max 50 characters.","nullable":false},{"name":"description","type":"string","description":"Community description explaining purpose and guidelines. Optional, max 500 characters.","nullable":true},{"name":"access_type","type":"string","description":"Community access level: public (anyone can join), restricted (approval required), or private (invite only).","nullable":false},{"name":"member_count","type":"int","description":"Current number of active community members. Updated automatically.","nullable":false},{"name":"post_count","type":"int","description":"Total number of posts published in this community. Tracked for activity metrics.","nullable":false},{"name":"status","type":"string","description":"Community status: active, suspended, archived, or deleted.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the community was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last community information update.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when community was soft-deleted, null if active.","nullable":true}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["access_type","status"]},{"fieldNames":["reddit_community_category_id","member_count"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"display_title"},{"fieldName":"description"}]},{"name":"reddit_community_memberships","description":"Tracks user membership in communities, including join dates, status, and permissions. Supports public, restricted, and private community access models with appropriate approval workflows. {@link reddit_community_communities.id} {@link reddit_community_members.id}","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"Community that the user is member of. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"reddit_community_member_id","type":"uuid","description":"User who is member of the community. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"membership_status","type":"string","description":"Membership status: pending, approved, suspended, or banned.","nullable":false},{"name":"joined_at","type":"datetime","description":"Timestamp when user joined or was approved for membership.","nullable":false},{"name":"left_at","type":"datetime","description":"Timestamp when user left community, null if still active member.","nullable":true},{"name":"permissions","type":"string","description":"Member-specific permissions within the community.","nullable":true},{"name":"last_visited_at","type":"datetime","description":"Timestamp of last community visit by this member.","nullable":true},{"name":"contribution_count","type":"int","description":"Number of posts and comments contributed to this community.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when membership record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last membership status update.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_community_id","reddit_community_member_id"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_member_id","membership_status"]},{"fieldNames":["reddit_community_community_id","joined_at"]},{"fieldNames":["last_visited_at"]}],"ginIndexes":[]},{"name":"reddit_community_moderator_assignments","description":"Tracks moderator assignments and permissions within communities. Each assignment specifies moderator authority level, scope, and assignment details for community governance. {@link reddit_community_communities.id} {@link reddit_community_members.id}","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"Community where user serves as moderator. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"reddit_community_member_id","type":"uuid","description":"User assigned as community moderator. {@link reddit_community_members.id}.","relation":{"name":"moderator","targetModel":"reddit_community_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"role_level","type":"string","description":"Moderator role level: primary, secondary, or junior with different permissions.","nullable":false},{"name":"assigned_at","type":"datetime","description":"Timestamp when moderator assignment was made.","nullable":false},{"name":"permissions","type":"string","description":"Specific moderation permissions granted to this moderator.","nullable":false},{"name":"status","type":"string","description":"Assignment status: active, suspended, or removed.","nullable":false},{"name":"last_active_at","type":"datetime","description":"Timestamp of last moderation activity by this user.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when moderator assignment was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last assignment update.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_community_id","reddit_community_member_id"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_member_id","status"]},{"fieldNames":["reddit_community_community_id","role_level"]},{"fieldNames":["assigned_at"]}],"ginIndexes":[]},{"name":"reddit_community_settings","description":"Community-specific configuration and settings that define posting rules, content guidelines, and moderation policies. Each community has one settings record that controls its operational parameters. {@link reddit_community_communities.id}","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"Community that these settings belong to. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":true,"nullable":false}],"plainFields":[{"name":"posting_rules","type":"string","description":"Community-specific posting guidelines and content restrictions.","nullable":true},{"name":"moderation_policy","type":"string","description":"Detailed moderation policy and enforcement procedures.","nullable":true},{"name":"content_flags","type":"string","description":"Types of content that require moderation or are prohibited.","nullable":true},{"name":"automated_filters","type":"string","description":"Automated content filtering rules and thresholds.","nullable":true},{"name":"member_requirements","type":"string","description":"Requirements for community membership approval.","nullable":true},{"name":"theme_settings","type":"string","description":"Community appearance and theme customization options.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when settings were created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last settings modification.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"posting_rules"},{"fieldName":"moderation_policy"},{"fieldName":"content_flags"}]},{"name":"reddit_community_categories","description":"Community categorization system for organizing communities by topic, interest, or theme. Supports hierarchical category structures and community discovery through category-based browsing. Used for content organization and user navigation.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"parent_id","type":"uuid","description":"Parent category for hierarchical organization, null for top-level categories. {@link reddit_community_categories.id}.","relation":{"name":"parent","targetModel":"reddit_community_categories","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"name","type":"string","description":"Unique category name used for identification and display.","nullable":false},{"name":"description","type":"string","description":"Category description explaining purpose and scope.","nullable":true},{"name":"community_count","type":"int","description":"Number of communities currently assigned to this category.","nullable":false},{"name":"display_order","type":"int","description":"Sort order for category display in listings and navigation.","nullable":false},{"name":"status","type":"string","description":"Category status: active, archived, or hidden.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when category was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last category update.","nullable":false}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["parent_id","display_order"]},{"fieldNames":["status","community_count"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"description"}]}]},{"filename":"schema-04-content.prisma","namespace":"Content","models":[{"name":"reddit_community_posts","description":"Core entity representing community posts that serve as the foundation for all content types. Contains basic post information, community context, and user attribution. This table maintains the lifecycle of posts across the platform, supporting various content formats through specialized subsidiary tables.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Community where this post is published. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"author_id","type":"uuid","description":"Member who created this post. {@link reddit_community_members.id}.","relation":{"name":"author","targetModel":"reddit_community_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Post title that appears in community feeds and search results.","nullable":false},{"name":"content_type","type":"string","description":"Type of content contained in this post (text, link, image).","nullable":false},{"name":"status","type":"string","description":"Current publication status of the post (draft, published, archived, removed).","nullable":false},{"name":"is_nsfw","type":"boolean","description":"Indicates if this post contains Not Safe For Work content.","nullable":false},{"name":"is_spoiler","type":"boolean","description":"Indicates if this post contains spoiler content requiring warnings.","nullable":false},{"name":"is_pinned","type":"boolean","description":"Indicates if this post is pinned to the top of its community.","nullable":false},{"name":"is_locked","type":"boolean","description":"Indicates if comments are disabled for this post.","nullable":false},{"name":"flair_text","type":"string","description":"Custom flair text displayed alongside the post title.","nullable":true},{"name":"flair_css","type":"string","description":"CSS class for styling the post flair.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when this post was initially created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this post was last modified.","nullable":false},{"name":"published_at","type":"datetime","description":"Timestamp when this post was published to the community.","nullable":true},{"name":"deleted_at","type":"datetime","description":"Timestamp when this post was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["community_id","title"],"unique":true}],"plainIndexes":[{"fieldNames":["author_id","created_at"]},{"fieldNames":["community_id","created_at"]},{"fieldNames":["content_type","created_at"]},{"fieldNames":["status","published_at"]},{"fieldNames":["is_pinned","community_id"]}],"ginIndexes":[{"fieldName":"title"}]},{"name":"reddit_community_text_posts","description":"Specialized content entity for text-based posts containing the actual textual content body. This table supports rich text formatting, character limits, and content moderation features specific to text content.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Parent post that this text content belongs to. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":true,"nullable":false}],"plainFields":[{"name":"content","type":"string","description":"Main text content of the post with markdown formatting support.","nullable":false},{"name":"content_preview","type":"string","description":"Short preview text for feed displays without loading full content.","nullable":true},{"name":"word_count","type":"int","description":"Total number of words in the content for analytics and display optimization.","nullable":false},{"name":"character_count","type":"int","description":"Total character count including whitespace for validation purposes.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this text content was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this text content was last modified.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["created_at"]},{"fieldNames":["word_count"]}],"ginIndexes":[{"fieldName":"content"}]},{"name":"reddit_community_link_posts","description":"Specialized content entity for link-based posts containing URL references and metadata. This table supports link validation, preview generation, and external content referencing features.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Parent post that this link content belongs to. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":true,"nullable":false}],"plainFields":[{"name":"url","type":"uri","description":"Full URL of the external content being linked.","nullable":false},{"name":"domain","type":"string","description":"Extracted domain name for categorization and filtering.","nullable":false},{"name":"title","type":"string","description":"Title extracted from the linked content for preview display.","nullable":true},{"name":"description","type":"string","description":"Description extracted from the linked content metadata.","nullable":true},{"name":"thumbnail_url","type":"uri","description":"URL of the thumbnail image for the linked content.","nullable":true},{"name":"favicon_url","type":"uri","description":"URL of the favicon for the linked domain.","nullable":true},{"name":"is_verified","type":"boolean","description":"Indicates if the link has passed security verification checks.","nullable":false},{"name":"click_count","type":"int","description":"Number of times this link has been clicked by users.","nullable":false},{"name":"last_verified_at","type":"datetime","description":"Timestamp when the link was last verified for safety and validity.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when this link content was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this link content was last updated.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["domain","created_at"]},{"fieldNames":["is_verified","created_at"]},{"fieldNames":["click_count"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"description"}]},{"name":"reddit_community_image_posts","description":"Specialized content entity for image-based posts containing image files and metadata. This table supports multiple image formats, optimization, and responsive display features.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Parent post that this image content belongs to. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":true,"nullable":false}],"plainFields":[{"name":"image_url","type":"uri","description":"Primary URL for the high-resolution image file.","nullable":false},{"name":"thumbnail_url","type":"uri","description":"URL for the optimized thumbnail version of the image.","nullable":false},{"name":"alt_text","type":"string","description":"Alternative text description for accessibility and SEO purposes.","nullable":true},{"name":"caption","type":"string","description":"Optional caption text displayed below the image.","nullable":true},{"name":"image_width","type":"int","description":"Width of the original image in pixels.","nullable":false},{"name":"image_height","type":"int","description":"Height of the original image in pixels.","nullable":false},{"name":"file_size","type":"int","description":"Size of the image file in bytes for optimization tracking.","nullable":false},{"name":"file_format","type":"string","description":"Format of the image file (JPEG, PNG, GIF, WebP).","nullable":false},{"name":"aspect_ratio","type":"double","description":"Calculated aspect ratio for responsive display optimization.","nullable":false},{"name":"is_processed","type":"boolean","description":"Indicates if the image has been optimized and processed for delivery.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this image content was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this image content was last updated.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["file_format","created_at"]},{"fieldNames":["aspect_ratio"]},{"fieldNames":["is_processed"]}],"ginIndexes":[{"fieldName":"alt_text"},{"fieldName":"caption"}]},{"name":"reddit_community_content_metadata","description":"Supporting entity that stores additional metadata and analytics for community posts. This table enables content personalization, recommendation algorithms, and platform analytics without denormalizing the main post tables.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Post that this metadata belongs to. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":true,"nullable":false}],"plainFields":[{"name":"view_count","type":"int","description":"Total number of times this post has been viewed by users.","nullable":false},{"name":"share_count","type":"int","description":"Number of times this post has been shared externally.","nullable":false},{"name":"save_count","type":"int","description":"Number of times users have saved this post for later reference.","nullable":false},{"name":"avg_time_spent","type":"double","description":"Average time users spend viewing this post in seconds.","nullable":false},{"name":"bounce_rate","type":"double","description":"Percentage of users who view but don't engage with the post.","nullable":false},{"name":"engagement_score","type":"double","description":"Calculated score based on various engagement metrics.","nullable":false},{"name":"trending_score","type":"double","description":"Real-time score used for trending content algorithms.","nullable":false},{"name":"quality_score","type":"double","description":"Quality assessment score based on user feedback and moderation.","nullable":false},{"name":"last_analytics_update","type":"datetime","description":"Timestamp when analytics metrics were last calculated.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this metadata record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this metadata was last updated.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["engagement_score","last_analytics_update"]},{"fieldNames":["trending_score","last_analytics_update"]},{"fieldNames":["quality_score"]},{"fieldNames":["view_count"]}],"ginIndexes":[]},{"name":"reddit_community_post_revisions","description":"Historical snapshot entity that tracks all revisions and edits made to community posts. This table provides audit trails, content versioning, and moderation transparency for post modifications.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Original post that this revision belongs to. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":false},{"name":"editor_id","type":"uuid","description":"Member who created this revision. {@link reddit_community_members.id}.","relation":{"name":"editor","targetModel":"reddit_community_members"},"unique":false,"nullable":false}],"plainFields":[{"name":"revision_number","type":"int","description":"Sequential revision number for version tracking.","nullable":false},{"name":"title","type":"string","description":"Post title at the time of this revision.","nullable":false},{"name":"content_snapshot","type":"string","description":"Complete content snapshot for text posts at revision time.","nullable":true},{"name":"metadata_snapshot","type":"string","description":"JSON snapshot of post metadata and settings at revision time.","nullable":false},{"name":"change_description","type":"string","description":"User-provided description of what was changed in this revision.","nullable":true},{"name":"is_rollback","type":"boolean","description":"Indicates if this revision represents a rollback to previous version.","nullable":false},{"name":"moderator_notes","type":"string","description":"Optional notes from moderators about the revision context.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when this revision was created.","nullable":false}],"uniqueIndexes":[{"fieldNames":["post_id","revision_number"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","created_at"]},{"fieldNames":["editor_id","created_at"]},{"fieldNames":["is_rollback"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"change_description"}]}]},{"filename":"schema-05-engagement.prisma","namespace":"Engagement","models":[{"name":"reddit_community_votes","description":"Tracks user voting activity on posts and comments within the community platform. Each vote record captures the voting user, target content, vote type (upvote/downvote), and timestamp. The system maintains vote integrity through user-content uniqueness constraints and supports real-time vote counting for content ranking algorithms.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who cast the vote. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Target post that received the vote. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Target comment that received the vote. {@link reddit_community_comments.id}.","relation":{"name":"comment","targetModel":"reddit_community_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"vote_type","type":"string","description":"Type of vote cast - either 'upvote' or 'downvote'.","nullable":false},{"name":"vote_weight","type":"double","description":"Weight of the vote based on user karma and account factors.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the vote was cast.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the vote was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the vote was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_id","post_id"],"unique":true},{"fieldNames":["user_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","created_at"]},{"fieldNames":["comment_id","created_at"]},{"fieldNames":["user_id","created_at"]},{"fieldNames":["vote_type","created_at"]}],"ginIndexes":[]},{"name":"reddit_community_comments","description":"Stores user comments within community discussions. Supports unlimited nesting through parent-child relationships and integrates with voting and karma systems. Each comment maintains its position in the thread hierarchy and supports rich text formatting through Markdown.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who authored the comment. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Post that the comment belongs to. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":false},{"name":"parent_comment_id","type":"uuid","description":"Parent comment for nested replies. {@link reddit_community_comments.id}.","relation":{"name":"parent","targetModel":"reddit_community_comments","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"content","type":"string","description":"Comment text content with Markdown formatting support.","nullable":false},{"name":"depth","type":"int","description":"Nesting depth of the comment in the thread hierarchy.","nullable":false},{"name":"is_edited","type":"boolean","description":"Indicates if the comment has been edited after creation.","nullable":false},{"name":"is_deleted","type":"boolean","description":"Indicates if the comment has been soft deleted.","nullable":false},{"name":"score","type":"int","description":"Current vote score calculated from upvotes minus downvotes.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the comment was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the comment was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the comment was soft deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id","created_at"]},{"fieldNames":["parent_comment_id","depth"]},{"fieldNames":["user_id","created_at"]},{"fieldNames":["depth","created_at"]},{"fieldNames":["score","created_at"]}],"ginIndexes":[{"fieldName":"content"}]},{"name":"reddit_community_comment_threads","description":"Optimizes comment organization and retrieval by maintaining thread structures for efficient nested comment display. This subsidiary table supports rapid comment tree traversal and parent-child relationship management without recursive database queries.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"root_comment_id","type":"uuid","description":"Top-level comment that starts the thread. {@link reddit_community_comments.id}.","relation":{"name":"rootComment","targetModel":"reddit_community_comments","mappingName":"reddit_community_comment_threads_of_root_comment_id"},"unique":false,"nullable":false},{"name":"comment_id","type":"uuid","description":"Comment belonging to this thread. {@link reddit_community_comments.id}.","relation":{"name":"comment","targetModel":"reddit_community_comments","mappingName":"reddit_community_comment_threads_of_comment_id"},"unique":true,"nullable":false},{"name":"post_id","type":"uuid","description":"Post that contains this comment thread. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":false}],"plainFields":[{"name":"thread_path","type":"string","description":"Materialized path representing the comment's position in the thread.","nullable":false},{"name":"descendant_count","type":"int","description":"Number of descendant comments in this thread branch.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the thread entry was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the thread entry was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","thread_path"]},{"fieldNames":["root_comment_id","descendant_count"]},{"fieldNames":["thread_path"]}],"ginIndexes":[]},{"name":"reddit_community_karma_records","description":"Tracks karma changes for users based on voting activity and content interactions. Each record represents a karma transaction with source context, amount, and timestamp. Used for user reputation calculation and voting weight adjustments.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User whose karma is being updated. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members","mappingName":"reddit_community_karma_records_of_user_id"},"unique":false,"nullable":false},{"name":"source_post_id","type":"uuid","description":"Post that generated the karma change. {@link reddit_community_posts.id}.","relation":{"name":"sourcePost","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"source_comment_id","type":"uuid","description":"Comment that generated the karma change. {@link reddit_community_comments.id}.","relation":{"name":"sourceComment","targetModel":"reddit_community_comments"},"unique":false,"nullable":true},{"name":"voting_user_id","type":"uuid","description":"User who cast the vote that generated karma. {@link reddit_community_members.id}.","relation":{"name":"votingUser","targetModel":"reddit_community_members","mappingName":"reddit_community_karma_records_of_voting_user_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"karma_change","type":"int","description":"Amount of karma gained or lost in this transaction.","nullable":false},{"name":"karma_type","type":"string","description":"Type of karma transaction - 'post', 'comment', or 'award'.","nullable":false},{"name":"transaction_reason","type":"string","description":"Detailed reason for the karma change.","nullable":false},{"name":"current_total","type":"int","description":"User's total karma after this transaction.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the karma transaction occurred.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id","created_at"]},{"fieldNames":["karma_type","created_at"]},{"fieldNames":["source_post_id","created_at"]},{"fieldNames":["source_comment_id","created_at"]}],"ginIndexes":[]},{"name":"reddit_community_user_reactions","description":"Captures diverse user reactions beyond simple voting, including awards, emoji reactions, and other engagement types. Supports rich interaction patterns and community-specific reaction systems.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who performed the reaction. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"target_post_id","type":"uuid","description":"Post that received the reaction. {@link reddit_community_posts.id}.","relation":{"name":"targetPost","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"target_comment_id","type":"uuid","description":"Comment that received the reaction. {@link reddit_community_comments.id}.","relation":{"name":"targetComment","targetModel":"reddit_community_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"reaction_type","type":"string","description":"Type of reaction performed - 'award', 'emoji', 'like', etc.","nullable":false},{"name":"reaction_value","type":"string","description":"Specific value of the reaction (emoji character, award type).","nullable":false},{"name":"reaction_cost","type":"int","description":"Cost in karma or virtual currency for premium reactions.","nullable":true},{"name":"is_visible","type":"boolean","description":"Indicates if the reaction is publicly visible.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the reaction was performed.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the reaction was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the reaction was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_id","target_post_id","reaction_type"],"unique":true},{"fieldNames":["user_id","target_comment_id","reaction_type"],"unique":true}],"plainIndexes":[{"fieldNames":["target_post_id","created_at"]},{"fieldNames":["target_comment_id","created_at"]},{"fieldNames":["user_id","created_at"]},{"fieldNames":["reaction_type","created_at"]}],"ginIndexes":[]},{"name":"reddit_community_saved_content","description":"Enables users to save posts and comments for later reference. Each saved item maintains user context, saving timestamp, and organizational metadata for personal content management.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who saved the content. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Post that was saved. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Comment that was saved. {@link reddit_community_comments.id}.","relation":{"name":"comment","targetModel":"reddit_community_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"category","type":"string","description":"User-defined category for organizing saved content.","nullable":true},{"name":"notes","type":"string","description":"User notes attached to the saved content item.","nullable":true},{"name":"is_archived","type":"boolean","description":"Indicates if the saved item has been archived.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the content was saved.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the saved item was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the saved item was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_id","post_id"],"unique":true},{"fieldNames":["user_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id","created_at"]},{"fieldNames":["category","created_at"]},{"fieldNames":["post_id","created_at"]},{"fieldNames":["comment_id","created_at"]}],"ginIndexes":[{"fieldName":"notes"}]}]},{"filename":"schema-06-discovery.prisma","namespace":"Discovery","models":[{"name":"reddit_community_feeds","description":"Personalized content feeds for users, combining subscribed communities, trending content, and algorithmic recommendations. Each feed represents a user's customized content stream that adapts based on engagement patterns and preferences.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"User who owns this personalized feed. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"preferred_community_id","type":"uuid","description":"Primary community for feed content focus. {@link reddit_community_communities.id}.","relation":{"name":"preferredCommunity","targetModel":"reddit_community_communities"},"unique":false,"nullable":true}],"plainFields":[{"name":"feed_name","type":"string","description":"User-defined name for the feed (e.g., 'Tech News', 'Personal Favorites').","nullable":false},{"name":"content_types","type":"string","description":"Comma-separated list of preferred content types (text, link, image, video).","nullable":true},{"name":"sorting_algorithm","type":"string","description":"Preferred sorting method (hot, new, top, controversial, rising).","nullable":false},{"name":"refresh_frequency","type":"int","description":"How often the feed refreshes in minutes (5, 15, 30, 60, 1440).","nullable":false},{"name":"is_active","type":"boolean","description":"Whether this feed is currently active and visible to the user.","nullable":false},{"name":"last_refreshed_at","type":"datetime","description":"Timestamp when this feed was last refreshed with new content.","nullable":true},{"name":"created_at","type":"datetime","description":"When this feed configuration was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this feed configuration was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when this feed was soft-deleted by the user.","nullable":true}],"uniqueIndexes":[{"fieldNames":["reddit_community_member_id","feed_name"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_member_id","is_active"]},{"fieldNames":["sorting_algorithm","last_refreshed_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"content_types"},{"fieldName":"feed_name"}]},{"name":"reddit_community_sorting_algorithms","description":"Configuration and metadata for content sorting algorithms used across the platform. Defines how content is ranked and displayed in different contexts (hot, new, top, controversial).","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"algorithm_name","type":"string","description":"Unique identifier for the sorting algorithm (hot, new, top, controversial, rising).","nullable":false},{"name":"display_name","type":"string","description":"User-friendly name displayed in the interface (Hot, New, Top, Controversial).","nullable":false},{"name":"description","type":"string","description":"Detailed explanation of how this algorithm works and what it prioritizes.","nullable":false},{"name":"parameters","type":"string","description":"JSON configuration for algorithm-specific parameters and weights.","nullable":false},{"name":"is_default","type":"boolean","description":"Whether this algorithm should be used as the default for new users.","nullable":false},{"name":"is_active","type":"boolean","description":"Whether this algorithm is currently available for use.","nullable":false},{"name":"time_decay_factor","type":"double","description":"How quickly content ages out of relevance (higher values mean faster decay).","nullable":false},{"name":"engagement_weight","type":"double","description":"Weight given to engagement metrics (votes, comments, shares).","nullable":false},{"name":"relevance_weight","type":"double","description":"Weight given to relevance based on user preferences and behavior.","nullable":false},{"name":"created_at","type":"datetime","description":"When this algorithm configuration was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this algorithm configuration was last modified.","nullable":false}],"uniqueIndexes":[{"fieldNames":["algorithm_name"],"unique":true}],"plainIndexes":[{"fieldNames":["is_active","is_default"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"display_name"},{"fieldName":"description"}]},{"name":"reddit_community_user_preferences","description":"User-specific preferences for content discovery, feed customization, and personalization settings. Controls how content is filtered, sorted, and recommended to individual users.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"User who owns these preferences. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":true,"nullable":false}],"plainFields":[{"name":"preferred_content_age","type":"string","description":"Preferred content age range (hour, day, week, month, year, all).","nullable":false},{"name":"safe_search_enabled","type":"boolean","description":"Whether to filter out potentially sensitive or NSFW content.","nullable":false},{"name":"auto_play_media","type":"boolean","description":"Whether to automatically play media content in feeds.","nullable":false},{"name":"compact_view_enabled","type":"boolean","description":"Whether to use compact view instead of card view for content.","nullable":false},{"name":"show_nsfw_content","type":"boolean","description":"Whether to show Not Safe For Work content when safe search is off.","nullable":false},{"name":"email_digest_frequency","type":"string","description":"Frequency of email digests (never, daily, weekly, monthly).","nullable":false},{"name":"recommendation_strength","type":"int","description":"How aggressively to recommend content (1-5 scale).","nullable":false},{"name":"dark_mode_enabled","type":"boolean","description":"Whether to use dark mode for the interface.","nullable":false},{"name":"language_preference","type":"string","description":"Preferred language for content and interface.","nullable":false},{"name":"timezone","type":"string","description":"User's timezone for content timing and notifications.","nullable":false},{"name":"created_at","type":"datetime","description":"When these preferences were first set.","nullable":false},{"name":"updated_at","type":"datetime","description":"When these preferences were last modified.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_member_id"],"unique":true}],"plainIndexes":[{"fieldNames":["safe_search_enabled","show_nsfw_content"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"language_preference"}]},{"name":"reddit_community_trending_topics","description":"Historical record of trending topics and content across the platform. Captures popularity spikes and engagement patterns for analytics and recommendation systems.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"Community where this topic is trending. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":true},{"name":"related_post_id","type":"uuid","description":"Primary post driving this trending topic. {@link reddit_community_posts.id}.","relation":{"name":"relatedPost","targetModel":"reddit_community_posts"},"unique":false,"nullable":true}],"plainFields":[{"name":"topic_keywords","type":"string","description":"Comma-separated keywords that represent the trending topic.","nullable":false},{"name":"trending_score","type":"double","description":"Numerical score representing the topic's current popularity.","nullable":false},{"name":"engagement_velocity","type":"double","description":"Rate of engagement growth (posts, comments, votes per hour).","nullable":false},{"name":"peak_engagement","type":"int","description":"Maximum number of concurrent engagements during the trend.","nullable":false},{"name":"duration_hours","type":"int","description":"How long the topic has been trending in hours.","nullable":false},{"name":"trend_category","type":"string","description":"Category of trend (viral, breaking, seasonal, evergreen).","nullable":false},{"name":"is_active","type":"boolean","description":"Whether this topic is currently trending.","nullable":false},{"name":"started_trending_at","type":"datetime","description":"When this topic first started trending.","nullable":false},{"name":"last_updated_at","type":"datetime","description":"When the trending metrics were last calculated.","nullable":false},{"name":"created_at","type":"datetime","description":"When this trending record was created.","nullable":false}],"uniqueIndexes":[{"fieldNames":["topic_keywords","started_trending_at"],"unique":true}],"plainIndexes":[{"fieldNames":["trending_score","is_active"]},{"fieldNames":["engagement_velocity","last_updated_at"]},{"fieldNames":["trend_category","started_trending_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"topic_keywords"}]},{"name":"reddit_community_recommendations","description":"Content and community recommendations generated for users based on behavior, preferences, and similarity algorithms. Supports personalized discovery of new content and communities.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"User who receives this recommendation. {@link reddit_community_members.id}.","relation":{"name":"user","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"recommended_community_id","type":"uuid","description":"Community being recommended. {@link reddit_community_communities.id}.","relation":{"name":"recommendedCommunity","targetModel":"reddit_community_communities"},"unique":false,"nullable":true},{"name":"recommended_post_id","type":"uuid","description":"Post being recommended. {@link reddit_community_posts.id}.","relation":{"name":"recommendedPost","targetModel":"reddit_community_posts"},"unique":false,"nullable":true}],"plainFields":[{"name":"recommendation_type","type":"string","description":"Type of recommendation (community, post, user, topic).","nullable":false},{"name":"confidence_score","type":"double","description":"Algorithm's confidence in this recommendation (0.0-1.0).","nullable":false},{"name":"reasoning","type":"string","description":"Explanation of why this recommendation was generated.","nullable":true},{"name":"is_dismissed","type":"boolean","description":"Whether the user has dismissed this recommendation.","nullable":false},{"name":"is_accepted","type":"boolean","description":"Whether the user has accepted/followed this recommendation.","nullable":false},{"name":"dismissed_at","type":"datetime","description":"When the user dismissed this recommendation.","nullable":true},{"name":"accepted_at","type":"datetime","description":"When the user accepted this recommendation.","nullable":true},{"name":"expires_at","type":"datetime","description":"When this recommendation expires and should be removed.","nullable":true},{"name":"created_at","type":"datetime","description":"When this recommendation was generated.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this recommendation was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_member_id","recommended_community_id","recommended_post_id","created_at"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_member_id","is_dismissed","is_accepted"]},{"fieldNames":["recommendation_type","confidence_score"]},{"fieldNames":["expires_at","created_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"reasoning"}]},{"name":"reddit_community_search_index","description":"Search index for efficient content discovery and full-text search capabilities. Contains processed and indexed content for fast retrieval and relevance ranking.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_post_id","type":"uuid","description":"Post being indexed for search. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":true,"nullable":false},{"name":"reddit_community_community_id","type":"uuid","description":"Community context for the indexed content. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"indexed_title","type":"string","description":"Processed and normalized title text for search indexing.","nullable":false},{"name":"indexed_content","type":"string","description":"Processed and normalized content text for search indexing.","nullable":true},{"name":"indexed_comments","type":"string","description":"Aggregated and processed comment text for search relevance.","nullable":true},{"name":"search_tokens","type":"string","description":"Tokenized keywords and phrases extracted from the content.","nullable":false},{"name":"relevance_score","type":"double","description":"Calculated relevance score for search ranking.","nullable":false},{"name":"language","type":"string","description":"Language of the indexed content for proper stemming.","nullable":false},{"name":"is_indexed","type":"boolean","description":"Whether this content has been fully processed and indexed.","nullable":false},{"name":"last_indexed_at","type":"datetime","description":"When this content was last indexed or updated.","nullable":false},{"name":"created_at","type":"datetime","description":"When this index entry was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this index entry was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_post_id"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_community_id","relevance_score"]},{"fieldNames":["language","is_indexed"]},{"fieldNames":["last_indexed_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"indexed_title"},{"fieldName":"indexed_content"},{"fieldName":"search_tokens"}]}]},{"filename":"schema-07-moderation.prisma","namespace":"Moderation","models":[{"name":"reddit_community_reports","description":"User-generated content reports for moderation review. Users can report inappropriate content, spam, or guideline violations. Each report triggers a moderation workflow that may result in content removal, user warnings, or other actions. Reports are categorized by severity and type to prioritize moderator attention.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reporter_user_id","type":"uuid","description":"User who submitted the report. {@link reddit_community_members.id}.","relation":{"name":"reporter","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"reported_content_id","type":"uuid","description":"Content being reported (post or comment). {@link reddit_community_posts.id} or {@link reddit_community_comments.id}.","relation":{"name":"reportedContent","targetModel":"reddit_community_posts"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where the content was reported. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"moderator_id","type":"uuid","description":"Moderator assigned to handle the report. {@link reddit_community_moderators.id}.","relation":{"name":"assignedModerator","targetModel":"reddit_community_moderators"},"unique":false,"nullable":true}],"plainFields":[{"name":"report_type","type":"string","description":"Category of the reported violation (spam, harassment, illegal, etc.).","nullable":false},{"name":"severity_level","type":"string","description":"Severity assessment of the reported content.","nullable":false},{"name":"description","type":"string","description":"Detailed explanation provided by the reporter.","nullable":true},{"name":"status","type":"string","description":"Current status of the report (pending, under_review, resolved, dismissed).","nullable":false},{"name":"evidence_urls","type":"string","description":"JSON array of evidence URLs provided by the reporter.","nullable":true},{"name":"priority_score","type":"int","description":"Calculated priority score based on severity and reporter credibility.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the report was submitted.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the report was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the report was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["reporter_user_id","reported_content_id"],"unique":true}],"plainIndexes":[{"fieldNames":["status","priority_score"]},{"fieldNames":["community_id","created_at"]},{"fieldNames":["report_type","severity_level"]}],"ginIndexes":[{"fieldName":"description"}]},{"name":"reddit_community_moderation_actions","description":"Records of moderation actions taken by community moderators. Tracks all moderator interventions including content removal, user warnings, temporary bans, and guideline enforcement. Provides audit trail for moderator accountability and transparency.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"moderator_id","type":"uuid","description":"Moderator who performed the action. {@link reddit_community_moderators.id}.","relation":{"name":"moderator","targetModel":"reddit_community_moderators"},"unique":false,"nullable":false},{"name":"target_user_id","type":"uuid","description":"User who was affected by the moderation action. {@link reddit_community_members.id}.","relation":{"name":"targetUser","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where the action was taken. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"related_content_id","type":"uuid","description":"Content that triggered the moderation action. {@link reddit_community_posts.id} or {@link reddit_community_comments.id}.","relation":{"name":"relatedContent","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"report_id","type":"uuid","description":"Report that led to this moderation action. {@link reddit_community_reports.id}.","relation":{"name":"report","targetModel":"reddit_community_reports"},"unique":false,"nullable":true}],"plainFields":[{"name":"action_type","type":"string","description":"Type of moderation action (remove_content, warn_user, temporary_ban, permanent_ban, etc.).","nullable":false},{"name":"reason","type":"string","description":"Detailed explanation for the moderation action.","nullable":false},{"name":"duration_minutes","type":"int","description":"Duration of temporary actions in minutes (null for permanent actions).","nullable":true},{"name":"severity_level","type":"string","description":"Severity classification of the moderation action.","nullable":false},{"name":"status","type":"string","description":"Current status of the action (active, expired, revoked, appealed).","nullable":false},{"name":"automated","type":"boolean","description":"Whether the action was performed automatically by system.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the moderation action was taken.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the action was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the action record was soft deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["moderator_id","created_at"]},{"fieldNames":["target_user_id","action_type"]},{"fieldNames":["community_id","action_type","created_at"]},{"fieldNames":["status","created_at"]}],"ginIndexes":[{"fieldName":"reason"}]},{"name":"reddit_community_content_flags","description":"Automated content flagging system that identifies potential guideline violations using pattern detection and machine learning. Flags are reviewed by moderators and may result in moderation actions. Reduces manual moderation workload by automatically identifying problematic content.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"content_id","type":"uuid","description":"Content that was flagged by the automated system. {@link reddit_community_posts.id} or {@link reddit_community_comments.id}.","relation":{"name":"content","targetModel":"reddit_community_posts"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where the content was posted. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"moderator_review_id","type":"uuid","description":"Moderator who reviewed the automated flag. {@link reddit_community_moderators.id}.","relation":{"name":"reviewingModerator","targetModel":"reddit_community_moderators"},"unique":false,"nullable":true}],"plainFields":[{"name":"flag_type","type":"string","description":"Type of automated flag (spam_detection, hate_speech, inappropriate_content, etc.).","nullable":false},{"name":"confidence_score","type":"double","description":"Machine learning confidence score for the flag (0.0 to 1.0).","nullable":false},{"name":"triggered_patterns","type":"string","description":"JSON array of patterns that triggered the flag.","nullable":false},{"name":"status","type":"string","description":"Current status of the flag (pending, reviewed, action_taken, dismissed).","nullable":false},{"name":"review_notes","type":"string","description":"Notes from moderator review of the automated flag.","nullable":true},{"name":"false_positive","type":"boolean","description":"Whether the flag was a false positive (used for ML training).","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the content was automatically flagged.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the flag was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the flag record was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["content_id","flag_type"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id","status"]},{"fieldNames":["confidence_score","created_at"]},{"fieldNames":["flag_type","created_at"]}],"ginIndexes":[{"fieldName":"triggered_patterns"}]},{"name":"reddit_community_guidelines","description":"Community-specific rules and guidelines that define acceptable behavior and content standards. Guidelines can be customized per community and support versioning for tracking changes over time. Moderators use these guidelines to make consistent enforcement decisions.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Community that owns these guidelines. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"created_by_moderator_id","type":"uuid","description":"Moderator who created or last updated the guidelines. {@link reddit_community_moderators.id}.","relation":{"name":"createdBy","targetModel":"reddit_community_moderators"},"unique":false,"nullable":false}],"plainFields":[{"name":"guideline_version","type":"string","description":"Version identifier for tracking guideline changes.","nullable":false},{"name":"title","type":"string","description":"Title of the guideline category or section.","nullable":false},{"name":"description","type":"string","description":"Detailed description of the guideline rule.","nullable":false},{"name":"category","type":"string","description":"Category of the guideline (content, behavior, spam, etc.).","nullable":false},{"name":"severity_level","type":"string","description":"Severity level for violations of this guideline.","nullable":false},{"name":"enforcement_action","type":"string","description":"Recommended enforcement action for violations.","nullable":false},{"name":"active","type":"boolean","description":"Whether this guideline version is currently active.","nullable":false},{"name":"requires_acknowledgment","type":"boolean","description":"Whether users must acknowledge this guideline.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the guideline was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the guideline was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the guideline was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["community_id","guideline_version","category"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id","active"]},{"fieldNames":["category","severity_level"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"description"},{"fieldName":"title"}]},{"name":"reddit_community_ban_records","description":"Historical record of user bans within communities. Tracks both temporary and permanent bans, including ban duration, reasons, and appeal status. Provides comprehensive audit trail for user moderation history and supports ban escalation policies.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"banned_user_id","type":"uuid","description":"User who was banned from the community. {@link reddit_community_members.id}.","relation":{"name":"bannedUser","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"moderator_id","type":"uuid","description":"Moderator who issued the ban. {@link reddit_community_moderators.id}.","relation":{"name":"issuingModerator","targetModel":"reddit_community_moderators"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community from which the user was banned. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"appeal_id","type":"uuid","description":"Appeal associated with this ban record. {@link reddit_community_appeals.id}.","relation":{"name":"appeal","targetModel":"reddit_community_appeals"},"unique":false,"nullable":true}],"plainFields":[{"name":"ban_type","type":"string","description":"Type of ban (temporary, permanent, shadow_ban).","nullable":false},{"name":"reason","type":"string","description":"Detailed reason for the ban as provided by the moderator.","nullable":false},{"name":"duration_days","type":"int","description":"Duration of the ban in days (null for permanent bans).","nullable":true},{"name":"status","type":"string","description":"Current status of the ban (active, expired, lifted, appealed).","nullable":false},{"name":"previous_ban_count","type":"int","description":"Number of previous bans for this user in this community.","nullable":false},{"name":"escalation_level","type":"string","description":"Escalation level based on previous violations.","nullable":false},{"name":"ban_started_at","type":"datetime","description":"Timestamp when the ban period began.","nullable":false},{"name":"ban_ended_at","type":"datetime","description":"Timestamp when the ban period ended or will end.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the ban record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the ban record was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the ban record was soft deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["banned_user_id","community_id","ban_started_at"]},{"fieldNames":["community_id","status"]},{"fieldNames":["ban_type","created_at"]},{"fieldNames":["ban_started_at","ban_ended_at"]}],"ginIndexes":[{"fieldName":"reason"}]},{"name":"reddit_community_appeals","description":"User appeal system for contesting moderation actions. Allows users to request review of content removal, warnings, or bans. Appeals are reviewed by moderators or administrators and can result in action reversals or modifications. Provides due process and transparency in moderation.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"appealing_user_id","type":"uuid","description":"User who is submitting the appeal. {@link reddit_community_members.id}.","relation":{"name":"appealingUser","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"moderation_action_id","type":"uuid","description":"Moderation action being appealed. {@link reddit_community_moderation_actions.id}.","relation":{"name":"moderationAction","targetModel":"reddit_community_moderation_actions"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where the appeal is being submitted. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false},{"name":"reviewing_moderator_id","type":"uuid","description":"Moderator assigned to review the appeal. {@link reddit_community_moderators.id}.","relation":{"name":"reviewingModerator","targetModel":"reddit_community_moderators"},"unique":false,"nullable":true}],"plainFields":[{"name":"appeal_type","type":"string","description":"Type of appeal (content_removal, user_warning, ban_appeal, etc.).","nullable":false},{"name":"appeal_reason","type":"string","description":"User's explanation for why the moderation action should be reviewed.","nullable":false},{"name":"status","type":"string","description":"Current status of the appeal (submitted, under_review, approved, denied).","nullable":false},{"name":"resolution_reason","type":"string","description":"Explanation provided by moderator for the appeal decision.","nullable":true},{"name":"priority_level","type":"string","description":"Priority level for appeal review based on severity and impact.","nullable":false},{"name":"submitted_at","type":"datetime","description":"Timestamp when the appeal was submitted.","nullable":false},{"name":"reviewed_at","type":"datetime","description":"Timestamp when the appeal was reviewed by a moderator.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the appeal record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the appeal record was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the appeal record was soft deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["appealing_user_id","moderation_action_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id","status"]},{"fieldNames":["appeal_type","submitted_at"]},{"fieldNames":["priority_level","submitted_at"]}],"ginIndexes":[{"fieldName":"appeal_reason"},{"fieldName":"resolution_reason"}]}]},{"filename":"schema-08-analytics.prisma","namespace":"Analytics","models":[{"name":"reddit_community_user_activities","description":"Tracks detailed user activity patterns across all platform interactions. Captures individual user actions including posting, voting, commenting, and browsing behavior for comprehensive engagement analysis. This table serves as the foundation for user behavior analytics and personalization engines. {@link reddit_community_members.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"The user whose activity is being tracked. {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"reddit_community_post_id","type":"uuid","description":"The post involved in the activity, if applicable. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"reddit_community_comment_id","type":"uuid","description":"The comment involved in the activity, if applicable. {@link reddit_community_comments.id}.","relation":{"name":"comment","targetModel":"reddit_community_comments"},"unique":false,"nullable":true},{"name":"reddit_community_community_id","type":"uuid","description":"The community where the activity occurred. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":true}],"plainFields":[{"name":"activity_type","type":"string","description":"Type of user activity being tracked (view, vote, comment, post, etc.).","nullable":false},{"name":"session_id","type":"string","description":"Unique identifier for the user session during this activity.","nullable":false},{"name":"device_type","type":"string","description":"Type of device used for the activity (desktop, mobile, tablet).","nullable":false},{"name":"interaction_duration","type":"int","description":"Duration of the interaction in seconds.","nullable":true},{"name":"content_consumed","type":"int","description":"Amount of content consumed during the activity.","nullable":true},{"name":"engagement_score","type":"double","description":"Calculated engagement score for this activity.","nullable":true},{"name":"activity_timestamp","type":"datetime","description":"Exact timestamp when the activity occurred.","nullable":false},{"name":"created_at","type":"datetime","description":"When this activity record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this activity record was last updated.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["reddit_community_member_id","activity_timestamp"]},{"fieldNames":["activity_type","activity_timestamp"]},{"fieldNames":["reddit_community_community_id","activity_timestamp"]}],"ginIndexes":[{"fieldName":"activity_type"}]},{"name":"reddit_community_engagement_metrics","description":"Aggregated engagement metrics for communities, posts, and users. Provides summarized view of user interactions, voting patterns, and content performance for trend analysis and community health monitoring. {@link reddit_community_communities.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"The community these metrics belong to. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":true},{"name":"reddit_community_post_id","type":"uuid","description":"The post these metrics belong to, if specific to a post. {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"reddit_community_member_id","type":"uuid","description":"The user these metrics belong to, if specific to a user. {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":true}],"plainFields":[{"name":"metric_period","type":"string","description":"Time period for these metrics (hourly, daily, weekly, monthly).","nullable":false},{"name":"period_start","type":"datetime","description":"Start timestamp of the metric period.","nullable":false},{"name":"period_end","type":"datetime","description":"End timestamp of the metric period.","nullable":false},{"name":"total_posts","type":"int","description":"Total number of posts created during the period.","nullable":false},{"name":"total_comments","type":"int","description":"Total number of comments created during the period.","nullable":false},{"name":"total_votes","type":"int","description":"Total number of votes cast during the period.","nullable":false},{"name":"active_users","type":"int","description":"Number of unique active users during the period.","nullable":false},{"name":"engagement_rate","type":"double","description":"Overall engagement rate as percentage.","nullable":false},{"name":"avg_session_duration","type":"double","description":"Average session duration in minutes.","nullable":false},{"name":"bounce_rate","type":"double","description":"Percentage of users who left after single interaction.","nullable":false},{"name":"created_at","type":"datetime","description":"When this metric record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this metric record was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_community_id","metric_period","period_start"],"unique":true}],"plainIndexes":[{"fieldNames":["period_start","period_end"]},{"fieldNames":["metric_period","period_start"]}],"ginIndexes":[{"fieldName":"metric_period"}]},{"name":"reddit_community_performance_logs","description":"System performance and user experience metrics tracking. Captures platform response times, error rates, and infrastructure performance for monitoring and optimization purposes. Supports capacity planning and performance troubleshooting.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"log_timestamp","type":"datetime","description":"Timestamp when the performance metric was recorded.","nullable":false},{"name":"metric_type","type":"string","description":"Type of performance metric being measured.","nullable":false},{"name":"endpoint","type":"string","description":"API endpoint or service being measured.","nullable":true},{"name":"response_time","type":"double","description":"Response time in milliseconds.","nullable":false},{"name":"error_rate","type":"double","description":"Error rate as percentage for this metric.","nullable":false},{"name":"concurrent_users","type":"int","description":"Number of concurrent users at measurement time.","nullable":false},{"name":"cpu_utilization","type":"double","description":"CPU utilization percentage.","nullable":false},{"name":"memory_usage","type":"double","description":"Memory usage in megabytes.","nullable":false},{"name":"database_query_time","type":"double","description":"Average database query time in milliseconds.","nullable":false},{"name":"cache_hit_rate","type":"double","description":"Cache hit rate percentage.","nullable":false},{"name":"throughput","type":"int","description":"Requests per second throughput.","nullable":false},{"name":"uptime_percentage","type":"double","description":"System uptime percentage for the period.","nullable":false},{"name":"created_at","type":"datetime","description":"When this performance log was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this performance log was last updated.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["log_timestamp","metric_type"]},{"fieldNames":["endpoint","log_timestamp"]}],"ginIndexes":[{"fieldName":"metric_type"},{"fieldName":"endpoint"}]},{"name":"reddit_community_business_metrics","description":"Business intelligence and revenue tracking metrics. Captures platform growth, monetization performance, user acquisition costs, and business health indicators for strategic decision making. {@link reddit_community_communities.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"The community these business metrics belong to. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":true}],"plainFields":[{"name":"metric_date","type":"datetime","description":"Date for which these business metrics are calculated.","nullable":false},{"name":"reporting_period","type":"string","description":"Reporting period (daily, weekly, monthly, quarterly).","nullable":false},{"name":"revenue_total","type":"double","description":"Total revenue generated during the period.","nullable":false},{"name":"revenue_advertising","type":"double","description":"Revenue from advertising sources.","nullable":false},{"name":"revenue_subscriptions","type":"double","description":"Revenue from premium subscriptions.","nullable":false},{"name":"new_users","type":"int","description":"Number of new users acquired during the period.","nullable":false},{"name":"user_acquisition_cost","type":"double","description":"Average cost per user acquisition.","nullable":false},{"name":"user_retention_rate","type":"double","description":"User retention rate as percentage.","nullable":false},{"name":"avg_revenue_per_user","type":"double","description":"Average revenue per active user.","nullable":false},{"name":"churn_rate","type":"double","description":"User churn rate percentage.","nullable":false},{"name":"total_communities","type":"int","description":"Total number of communities on platform.","nullable":false},{"name":"active_communities","type":"int","description":"Number of communities with active content.","nullable":false},{"name":"content_growth_rate","type":"double","description":"Percentage growth in content volume.","nullable":false},{"name":"engagement_growth","type":"double","description":"Percentage growth in user engagement.","nullable":false},{"name":"created_at","type":"datetime","description":"When this business metric was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this business metric was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["metric_date","reporting_period","reddit_community_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["metric_date","reporting_period"]},{"fieldNames":["reporting_period","metric_date"]}],"ginIndexes":[{"fieldName":"reporting_period"}]},{"name":"reddit_community_audience_analytics","description":"Demographic and behavioral audience analysis data. Provides insights into user demographics, geographic distribution, device usage patterns, and audience segmentation for targeted content and marketing strategies. {@link reddit_community_communities.id}.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_community_id","type":"uuid","description":"The community this audience analysis belongs to. {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":true}],"plainFields":[{"name":"analysis_period","type":"string","description":"Time period for this audience analysis.","nullable":false},{"name":"period_start","type":"datetime","description":"Start of the analysis period.","nullable":false},{"name":"period_end","type":"datetime","description":"End of the analysis period.","nullable":false},{"name":"total_audience","type":"int","description":"Total audience size during the period.","nullable":false},{"name":"age_distribution","type":"string","description":"JSON string representing age group distribution.","nullable":false},{"name":"gender_distribution","type":"string","description":"JSON string representing gender distribution.","nullable":false},{"name":"geographic_distribution","type":"string","description":"JSON string representing geographic distribution by country/region.","nullable":false},{"name":"device_usage","type":"string","description":"JSON string representing device usage distribution.","nullable":false},{"name":"content_preferences","type":"string","description":"JSON string representing content type preferences.","nullable":false},{"name":"activity_patterns","type":"string","description":"JSON string representing user activity time patterns.","nullable":false},{"name":"segmentation_data","type":"string","description":"JSON string representing audience segmentation results.","nullable":false},{"name":"avg_session_frequency","type":"double","description":"Average number of sessions per user.","nullable":false},{"name":"content_consumption_rate","type":"double","description":"Average content consumption per user.","nullable":false},{"name":"created_at","type":"datetime","description":"When this audience analysis was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this audience analysis was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["reddit_community_community_id","analysis_period","period_start"],"unique":true}],"plainIndexes":[{"fieldNames":["period_start","period_end"]},{"fieldNames":["analysis_period","period_start"]}],"ginIndexes":[{"fieldName":"analysis_period"}]}]}]}