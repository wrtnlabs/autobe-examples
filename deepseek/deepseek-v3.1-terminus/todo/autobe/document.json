{"operations":[{"specification":"This API operation handles user registration in the minimal todo application. It creates a new user account and returns authentication tokens that allow access to todo management functionality. The operation validates user input, creates a secure user account with hashed password, and generates JWT tokens for immediate access to the system.","authorizationType":"join","description":"This endpoint allows new users to register for the minimal todo application. The registration process creates a user account with secure password storage and immediately provides authentication tokens for accessing todo functionality.\n\nWhen a user submits registration data, the system validates the email format and password strength requirements. Upon successful validation, a new user account is created with a securely hashed password using bcrypt with appropriate salt rounds. The system then generates both access and refresh JWT tokens with proper expiration policies.\n\nThe registration process follows secure authentication practices including password hashing, token generation, and immediate session establishment. After successful registration, users can immediately begin creating and managing their todo items without additional authentication steps.\n\nThis operation integrates with the security requirements specified in the system context document, ensuring proper data protection and authentication flow. The generated tokens follow JWT standards with appropriate claims for user identification and authorization.","summary":"Register a new user account and generate authentication tokens for todo access.","parameters":[],"requestBody":{"description":"User registration data including email and password for account creation","typeName":"IMinimalTodoUser.ICreate"},"responseBody":{"description":"Authentication tokens and user information for immediate application access","typeName":"IMinimalTodoUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"This API operation handles user authentication for existing users of the minimal todo application. It validates user credentials and returns JWT tokens for accessing todo management functionality. The operation verifies email and password combinations against stored user data.","authorizationType":"login","description":"This endpoint allows existing users to authenticate and access the minimal todo application. The login process validates user credentials against stored account information and generates new authentication tokens for session management.\n\nWhen a user submits login credentials, the system verifies the email exists in the user database and compares the provided password with the stored hashed password using bcrypt verification. Upon successful authentication, the system generates new access and refresh JWT tokens with updated expiration timestamps.\n\nThe authentication process includes security measures such as rate limiting to prevent brute force attacks and proper error handling to avoid revealing whether an email exists in the system. Successful login provides immediate access to all todo management functionality with the appropriate authorization tokens.\n\nThis operation follows the authentication flow requirements specified in the user scenarios document, ensuring secure credential validation and token management. The system maintains session integrity through proper token expiration and refresh mechanisms.","summary":"Authenticate an existing user and generate new authentication tokens.","parameters":[],"requestBody":{"description":"User login credentials including email and password for authentication","typeName":"IMinimalTodoUser.ILogin"},"responseBody":{"description":"Authentication tokens for accessing todo management functionality","typeName":"IMinimalTodoUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"This API operation handles token refresh for authenticated users. It validates existing refresh tokens and generates new access tokens to maintain user sessions without requiring re-authentication.","authorizationType":"refresh","description":"This endpoint allows authenticated users to refresh their access tokens using a valid refresh token. The refresh process extends user sessions without requiring full re-authentication, maintaining continuous access to todo management functionality.\n\nWhen a user submits a valid refresh token, the system verifies the token's signature and expiration status. If the refresh token is valid and has not been revoked, the system generates a new access token with updated expiration while maintaining the same user authorization claims. The refresh token itself may also be renewed depending on the security policy implementation.\n\nThe token refresh mechanism follows security best practices by validating token integrity, checking for revocation status, and maintaining proper session continuity. This operation helps prevent unnecessary login interruptions while maintaining secure access control through regular token rotation.\n\nThis refresh functionality supports the authentication system requirements specified in the security documentation, ensuring users can maintain extended sessions for todo management while preserving security through token expiration policies.","summary":"Refresh authentication tokens to maintain user session without re-login.","parameters":[],"requestBody":{"description":"Refresh token for generating new access tokens","typeName":"IMinimalTodoUser.IRefresh"},"responseBody":{"description":"New authentication tokens with updated expiration timestamps","typeName":"IMinimalTodoUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of todo items from the minimal_todo_todos table with advanced filtering and searching capabilities. It supports complex queries to find todos based on various criteria including content, completion status, creation date ranges, and search terms using PostgreSQL trigram indexing.","path":"/minimalTodo/todos","method":"patch","summary":"Search and retrieve a filtered, paginated list of todo items","description":"This API operation provides comprehensive search and filtering capabilities for todo items stored in the minimal_todo_todos table. The operation supports complex queries including partial text matching using PostgreSQL trigram indexing, completion status filtering, date range searches, and advanced pagination with sorting options.\n\nSecurity considerations include rate limiting for search operations and appropriate data filtering based on authorization levels. The operation integrates with the minimal_todo_todos table as defined in the Prisma schema, incorporating all available todo fields including content, completion status, creation timestamps, and soft deletion tracking.\n\nThe search functionality leverages PostgreSQL's trigram indexing for efficient text searching within todo content, allowing users to find todos based on partial matches and similarity. The operation returns paginated results with metadata to support efficient client-side data management and navigation.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for todo filtering","typeName":"IMinimalTodoTodo.IRequest"},"responseBody":{"description":"Paginated list of todo summary information matching search criteria","typeName":"IPageIMinimalTodoTodo.ISummary"},"authorizationRoles":["user"],"name":"index","authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a single todo item by its unique identifier from the minimal_todo_todos table. It returns detailed information about the specified todo including content, completion status, creation and update timestamps, and deletion status.","path":"/minimalTodo/todos/{todoId}","method":"get","summary":"Retrieve detailed information for a specific todo item","description":"This API operation fetches comprehensive information for a single todo item identified by its unique UUID. The operation accesses the minimal_todo_todos table and returns all available fields for the specified todo, including the text content, completion status, creation timestamp, last update timestamp, and soft deletion status.\n\nThe operation validates the provided todoId parameter to ensure it corresponds to an existing, non-deleted todo item. If the todo is found and active, complete details are returned. If the todo has been soft-deleted (deleted_at is not null), appropriate handling is implemented based on business requirements.\n\nSecurity considerations include proper authorization checks to ensure users can only access their own todo items. The operation provides detailed error handling for various scenarios including invalid UUID formats, non-existent todos, and access permission violations.","parameters":[{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed todo information including content, status, and timestamps","typeName":"IMinimalTodoTodo"},"authorizationRoles":["user"],"name":"at","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/minimalTodo/todos","method":"post"},"description":"Todo item must be created before it can be retrieved by its ID"}]},{"specification":"This operation creates a new todo item in the minimal todo application. It operates on the minimal_todo_todos table from the Prisma schema and validates the input according to business rules. The operation accepts todo content and automatically assigns default values for completion status, timestamps, and generates a unique identifier for the new todo item.","path":"/minimalTodo/todos","method":"post","summary":"Create a new todo item in the minimal todo application","description":"Create a new todo item with the provided text content. This operation validates the input according to business rules, ensuring the todo text meets the required length constraints (1-500 characters). The system automatically generates a unique identifier, sets the initial completion status to false (incomplete), and records creation and update timestamps.\n\nSecurity considerations are minimal since this is a single-user application focused on simplicity. All operations are permitted to the current browser user without authentication requirements. The operation follows the minimalist philosophy by providing only essential functionality without complex validation or advanced features.\n\nThis operation integrates with the minimal_todo_todos table as defined in the Prisma schema, incorporating all available todo fields including content, completion status, and timestamp tracking. The soft delete capability (deleted_at field) is supported but not utilized during creation since todos are created as active records by default.","parameters":[],"requestBody":{"description":"Data required to create a new todo item","typeName":"IMinimalTodoTodo.ICreate"},"responseBody":{"description":"The newly created todo item with system-assigned properties","typeName":"IMinimalTodoTodo"},"authorizationRoles":[],"name":"create","authorizationType":null,"authorizationRole":null,"prerequisites":[]},{"specification":"This operation updates an existing todo item in the minimal todo application. It operates on the minimal_todo_todos table from the Prisma schema and allows modification of todo content and completion status. The operation validates the todo ID existence and updates the modification timestamp automatically.","path":"/minimalTodo/todos/{todoId}","method":"put","summary":"Update an existing todo item in the minimal todo application","description":"Update an existing todo item identified by the provided todo ID. This operation allows modification of the todo content and completion status while maintaining data integrity. The system validates that the specified todo ID exists and applies the updates accordingly. The updated_at timestamp is automatically set to the current time to track the modification.\n\nSecurity considerations follow the single-user application model where all operations are permitted without authentication. The operation handles both content updates and status changes, supporting the core todo management functionality required by the minimal application philosophy.\n\nThis operation integrates with the minimal_todo_todos table as defined in the Prisma schema, updating the content and completed fields while maintaining the relational integrity. The soft delete mechanism (deleted_at field) is respected, preventing updates to already deleted todos unless explicitly handled by the business logic.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data containing the updates to apply to the todo item","typeName":"IMinimalTodoTodo.IUpdate"},"responseBody":{"description":"The updated todo item reflecting the applied changes","typeName":"IMinimalTodoTodo"},"authorizationRoles":[],"name":"update","authorizationType":null,"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/minimalTodo/todos","method":"post"},"description":"Todo item must be created before it can be updated"}]},{"specification":"This operation performs a soft deletion of a todo item in the minimal todo application. It operates on the minimal_todo_todos table by setting the deleted_at timestamp instead of permanently removing the record. The operation supports the confirmation-based deletion workflow required by business rules.","path":"/minimalTodo/todos/{todoId}","method":"delete","summary":"Soft delete a todo item by marking it as deleted","description":"Perform a soft deletion of a todo item by setting the deleted_at timestamp to the current time. This operation preserves the todo record for potential recovery or audit purposes while excluding it from normal queries and operations. The system validates that the todo exists and has not already been deleted before applying the soft deletion.\n\nThe operation follows the confirmation-based deletion workflow required by business rules, ensuring that todos are not accidentally removed. Soft-deleted todos can be identified by the non-null deleted_at timestamp and are automatically excluded from search results and list operations by default.\n\nSecurity considerations include the single-user application model where deletion operations are permitted without authentication. The operation integrates with the minimal_todo_todos table as defined in the Prisma schema, properly utilizing the deleted_at field for soft deletion functionality as designed in the database structure.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":[],"name":"erase","authorizationType":null,"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/minimalTodo/todos","method":"post"},"description":"Todo item must be created before it can be deleted"}]}],"components":{"authorization":[{"name":"user","description":"Standard user who can create, view, update, and delete their own todo items. Has access to basic todo management functionality.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIMinimalTodoTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMinimalTodoTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IMinimalTodoUser.ICreate":{"type":"object","x-autobe-prisma-schema":"User","properties":{"email":{"type":"string","format":"email","description":"Email address for the new user account."},"password":{"type":"string","minLength":8,"description":"Plain text password for account authentication."}},"required":["email","password"],"description":"Data required to create a new user account during registration.\n\nThis interface defines the input parameters for user registration. The\nsystem accepts a valid email address and a plain text password which is\nthen securely hashed before storage.\n\nPassword validation occurs at the application level to ensure security\nrequirements are met before account creation proceeds."},"IMinimalTodoUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing user identity and JWT tokens.\n\nThis response is returned after successful authentication operations such\nas login, registration, or token refresh. It provides the authenticated\nuser's identity and the tokens required for accessing protected API endpoints.\n\nThe token property contains both access and refresh tokens with their\nrespective expiration information for complete session management."},"IMinimalTodoUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address for authentication."},"password":{"type":"string","description":"Account password for authentication."}},"required":["email","password"],"description":"Credentials required for user authentication during login.\n\nThis interface defines the login parameters that users provide to access\ntheir accounts. The system validates these credentials against stored\naccount information to establish authenticated sessions.\n\nSecurity measures include rate limiting and secure credential validation\nto prevent unauthorized access attempts."},"IMinimalTodoUser.IRefresh":{"type":"object","properties":{"refresh":{"type":"string","description":"Valid refresh token for obtaining new access token."}},"required":["refresh"],"description":"Refresh token data for obtaining new authentication tokens.\n\nThis interface contains the refresh token required to obtain a new access\ntoken when the current one expires. The system validates the refresh token\nand issues new tokens if validation succeeds.\n\nRefresh tokens have their own expiration period and can be used to maintain\ncontinuous access without requiring full re-authentication."},"IMinimalTodoTodo.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"null"},{"type":"integer","minimum":1}],"description":"Page number for paginated results."},"limit":{"oneOf":[{"type":"null"},{"type":"integer","minimum":1,"maximum":100}],"description":"Number of todos per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term for filtering todo content."},"completed":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by completion status."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"const":"content"},{"type":"null"}],"description":"Field to sort results by."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order for results."}},"required":[],"description":"Search and filter parameters for todo list operations.\n\nThis interface defines the query parameters used to search, filter, and\npaginate todo items. Clients can use these parameters to find specific\ntodos based on content matching, completion status, and other criteria.\n\nThe search parameter supports text matching within todo content using\nthe database's full-text search capabilities for efficient filtering."},"IMinimalTodoTodo.ISummary":{"type":"object","x-autobe-prisma-schema":"minimal_todo_todos","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the todo item."},"content":{"type":"string","maxLength":100,"description":"Truncated text content for list display."},"completed":{"type":"boolean","description":"Completion status of the todo item."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo was created."}},"required":["id","content","completed","created_at"],"description":"Simplified todo representation for list views and summary displays.\n\nThis interface provides a condensed version of todo items optimized for\nlisting and browsing operations. It includes only the essential information\nneeded for quick todo identification and status checking.\n\nThe content field is truncated to improve performance in list views while\nstill providing meaningful todo context for users browsing their tasks."},"IMinimalTodoTodo":{"type":"object","x-autobe-prisma-schema":"minimal_todo_todos","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the todo item."},"content":{"type":"string","maxLength":500,"description":"Text content of the todo item."},"completed":{"type":"boolean","description":"Completion status of the todo item."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the todo was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the todo was soft deleted (null if active)."}},"required":["id","content","completed","created_at","updated_at","deleted_at"],"description":"Todo entity representing individual todo items in the minimal todo application.\n\nThis interface defines the complete structure of a todo item including its\ncontent, completion status, and timestamp tracking. Todos support soft\ndeletion through the deleted_at field which allows for recovery or audit\npurposes while excluding deleted items from normal operations.\n\nThe todo entity follows the business requirements for minimal todo management\nwith straightforward text content, binary completion status, and comprehensive\ntimestamp tracking for creation, modification, and deletion activities."},"IMinimalTodoTodo.ICreate":{"type":"object","x-autobe-prisma-schema":"minimal_todo_todos","properties":{"content":{"type":"string","minLength":1,"maxLength":500,"description":"Text content for the new todo item."}},"required":["content"],"description":"Data required to create a new todo item in the application.\n\nThis interface defines the input parameters for todo creation. The system\naccepts todo text content which must meet the business rule requirements\nfor minimum and maximum length validation.\n\nAll other todo properties (id, completed status, timestamps) are\nautomatically generated by the system during the creation process."},"IMinimalTodoTodo.IUpdate":{"type":"object","x-autobe-prisma-schema":"minimal_todo_todos","properties":{"content":{"oneOf":[{"type":"string","minLength":1,"maxLength":500},{"type":"null"}],"description":"Updated text content for the todo item."},"completed":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Updated completion status for the todo item."}},"required":[],"description":"Data that can be updated for an existing todo item.\n\nThis interface defines the fields that can be modified during todo updates.\nAll fields are optional to support partial updates where only specific\nproperties need to be changed.\n\nThe system validates updated content against the same length constraints\napplied during todo creation to maintain data consistency."}}}}