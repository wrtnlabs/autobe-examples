import { tags } from "typia";

/**
 * Todo entity representing individual todo items in the minimal todo
 * application.
 *
 * This interface defines the complete structure of a todo item including its
 * content, completion status, and timestamp tracking. Todos support soft
 * deletion through the deleted_at field which allows for recovery or audit
 * purposes while excluding deleted items from normal operations.
 *
 * The todo entity follows the business requirements for minimal todo management
 * with straightforward text content, binary completion status, and
 * comprehensive timestamp tracking for creation, modification, and deletion
 * activities.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IMinimalTodoTodo = {
  /** Unique identifier for the todo item. */
  id: string & tags.Format<"uuid">;

  /** Text content of the todo item. */
  content: string & tags.MaxLength<500>;

  /** Completion status of the todo item. */
  completed: boolean;

  /** Timestamp when the todo was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the todo was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the todo was soft deleted (null if active). */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IMinimalTodoTodo {
  /**
   * Search and filter parameters for todo list operations.
   *
   * This interface defines the query parameters used to search, filter, and
   * paginate todo items. Clients can use these parameters to find specific
   * todos based on content matching, completion status, and other criteria.
   *
   * The search parameter supports text matching within todo content using the
   * database's full-text search capabilities for efficient filtering.
   */
  export type IRequest = {
    /** Page number for paginated results. */
    page?: null | (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of todos per page. */
    limit?:
      | null
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Search term for filtering todo content. */
    search?: string | null | undefined;

    /** Filter by completion status. */
    completed?: boolean | null | undefined;

    /** Field to sort results by. */
    sort_by?: "created_at" | "updated_at" | "content" | null | undefined;

    /** Sort order for results. */
    order?: "asc" | "desc" | null | undefined;
  };

  /**
   * Simplified todo representation for list views and summary displays.
   *
   * This interface provides a condensed version of todo items optimized for
   * listing and browsing operations. It includes only the essential
   * information needed for quick todo identification and status checking.
   *
   * The content field is truncated to improve performance in list views while
   * still providing meaningful todo context for users browsing their tasks.
   */
  export type ISummary = {
    /** Unique identifier for the todo item. */
    id: string & tags.Format<"uuid">;

    /** Truncated text content for list display. */
    content: string & tags.MaxLength<100>;

    /** Completion status of the todo item. */
    completed: boolean;

    /** Timestamp when the todo was created. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Data required to create a new todo item in the application.
   *
   * This interface defines the input parameters for todo creation. The system
   * accepts todo text content which must meet the business rule requirements
   * for minimum and maximum length validation.
   *
   * All other todo properties (id, completed status, timestamps) are
   * automatically generated by the system during the creation process.
   */
  export type ICreate = {
    /** Text content for the new todo item. */
    content: string & tags.MinLength<1> & tags.MaxLength<500>;
  };

  /**
   * Data that can be updated for an existing todo item.
   *
   * This interface defines the fields that can be modified during todo
   * updates. All fields are optional to support partial updates where only
   * specific properties need to be changed.
   *
   * The system validates updated content against the same length constraints
   * applied during todo creation to maintain data consistency.
   */
  export type IUpdate = {
    /** Updated text content for the todo item. */
    content?:
      | (string & tags.MinLength<1> & tags.MaxLength<500>)
      | null
      | undefined;

    /** Updated completion status for the todo item. */
    completed?: boolean | null | undefined;
  };
}
