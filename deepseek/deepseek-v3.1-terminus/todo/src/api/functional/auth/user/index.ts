import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMinimalTodoUser } from "../../../structures/IMinimalTodoUser";

/**
 * Register a new user account and generate authentication tokens for todo
 * access.
 *
 * This endpoint allows new users to register for the minimal todo application.
 * The registration process creates a user account with secure password storage
 * and immediately provides authentication tokens for accessing todo
 * functionality.
 *
 * When a user submits registration data, the system validates the email format
 * and password strength requirements. Upon successful validation, a new user
 * account is created with a securely hashed password using bcrypt with
 * appropriate salt rounds. The system then generates both access and refresh
 * JWT tokens with proper expiration policies.
 *
 * The registration process follows secure authentication practices including
 * password hashing, token generation, and immediate session establishment.
 * After successful registration, users can immediately begin creating and
 * managing their todo items without additional authentication steps.
 *
 * This operation integrates with the security requirements specified in the
 * system context document, ensuring proper data protection and authentication
 * flow. The generated tokens follow JWT standards with appropriate claims for
 * user identification and authorization.
 *
 * @param props.connection
 * @param props.body User registration data including email and password for
 *   account creation
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @accessor api.functional.auth.user.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * User registration data including email and password for account
     * creation
     */
    body: IMinimalTodoUser.ICreate;
  };
  export type Body = IMinimalTodoUser.ICreate;
  export type Response = IMinimalTodoUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): IMinimalTodoUser.IAuthorized =>
    typia.random<IMinimalTodoUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an existing user and generate new authentication tokens.
 *
 * This endpoint allows existing users to authenticate and access the minimal
 * todo application. The login process validates user credentials against stored
 * account information and generates new authentication tokens for session
 * management.
 *
 * When a user submits login credentials, the system verifies the email exists
 * in the user database and compares the provided password with the stored
 * hashed password using bcrypt verification. Upon successful authentication,
 * the system generates new access and refresh JWT tokens with updated
 * expiration timestamps.
 *
 * The authentication process includes security measures such as rate limiting
 * to prevent brute force attacks and proper error handling to avoid revealing
 * whether an email exists in the system. Successful login provides immediate
 * access to all todo management functionality with the appropriate
 * authorization tokens.
 *
 * This operation follows the authentication flow requirements specified in the
 * user scenarios document, ensuring secure credential validation and token
 * management. The system maintains session integrity through proper token
 * expiration and refresh mechanisms.
 *
 * @param props.connection
 * @param props.body User login credentials including email and password for
 *   authentication
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @accessor api.functional.auth.user.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * User login credentials including email and password for
     * authentication
     */
    body: IMinimalTodoUser.ILogin;
  };
  export type Body = IMinimalTodoUser.ILogin;
  export type Response = IMinimalTodoUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): IMinimalTodoUser.IAuthorized =>
    typia.random<IMinimalTodoUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh authentication tokens to maintain user session without re-login.
 *
 * This endpoint allows authenticated users to refresh their access tokens using
 * a valid refresh token. The refresh process extends user sessions without
 * requiring full re-authentication, maintaining continuous access to todo
 * management functionality.
 *
 * When a user submits a valid refresh token, the system verifies the token's
 * signature and expiration status. If the refresh token is valid and has not
 * been revoked, the system generates a new access token with updated expiration
 * while maintaining the same user authorization claims. The refresh token
 * itself may also be renewed depending on the security policy implementation.
 *
 * The token refresh mechanism follows security best practices by validating
 * token integrity, checking for revocation status, and maintaining proper
 * session continuity. This operation helps prevent unnecessary login
 * interruptions while maintaining secure access control through regular token
 * rotation.
 *
 * This refresh functionality supports the authentication system requirements
 * specified in the security documentation, ensuring users can maintain extended
 * sessions for todo management while preserving security through token
 * expiration policies.
 *
 * @param props.connection
 * @param props.body Refresh token for generating new access tokens
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @accessor api.functional.auth.user.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token for generating new access tokens */
    body: IMinimalTodoUser.IRefresh;
  };
  export type Body = IMinimalTodoUser.IRefresh;
  export type Response = IMinimalTodoUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): IMinimalTodoUser.IAuthorized =>
    typia.random<IMinimalTodoUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
