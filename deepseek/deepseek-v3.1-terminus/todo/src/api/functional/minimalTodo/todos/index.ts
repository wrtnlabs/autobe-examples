import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMinimalTodoTodo } from "../../../structures/IMinimalTodoTodo";
import { IPageIMinimalTodoTodo } from "../../../structures/IPageIMinimalTodoTodo";

/**
 * Create a new todo item in the minimal todo application.
 *
 * Create a new todo item with the provided text content. This operation
 * validates the input according to business rules, ensuring the todo text meets
 * the required length constraints (1-500 characters). The system automatically
 * generates a unique identifier, sets the initial completion status to false
 * (incomplete), and records creation and update timestamps.
 *
 * Security considerations are minimal since this is a single-user application
 * focused on simplicity. All operations are permitted to the current browser
 * user without authentication requirements. The operation follows the
 * minimalist philosophy by providing only essential functionality without
 * complex validation or advanced features.
 *
 * This operation integrates with the minimal_todo_todos table as defined in the
 * Prisma schema, incorporating all available todo fields including content,
 * completion status, and timestamp tracking. The soft delete capability
 * (deleted_at field) is supported but not utilized during creation since todos
 * are created as active records by default.
 *
 * @param props.connection
 * @param props.body Data required to create a new todo item
 * @path /minimalTodo/todos
 * @accessor api.functional.minimalTodo.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new todo item */
    body: IMinimalTodoTodo.ICreate;
  };
  export type Body = IMinimalTodoTodo.ICreate;
  export type Response = IMinimalTodoTodo;

  export const METADATA = {
    method: "POST",
    path: "/minimalTodo/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/minimalTodo/todos";
  export const random = (): IMinimalTodoTodo =>
    typia.random<IMinimalTodoTodo>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of todo items.
 *
 * This API operation provides comprehensive search and filtering capabilities
 * for todo items stored in the minimal_todo_todos table. The operation supports
 * complex queries including partial text matching using PostgreSQL trigram
 * indexing, completion status filtering, date range searches, and advanced
 * pagination with sorting options.
 *
 * Security considerations include rate limiting for search operations and
 * appropriate data filtering based on authorization levels. The operation
 * integrates with the minimal_todo_todos table as defined in the Prisma schema,
 * incorporating all available todo fields including content, completion status,
 * creation timestamps, and soft deletion tracking.
 *
 * The search functionality leverages PostgreSQL's trigram indexing for
 * efficient text searching within todo content, allowing users to find todos
 * based on partial matches and similarity. The operation returns paginated
 * results with metadata to support efficient client-side data management and
 * navigation.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for todo
 *   filtering
 * @path /minimalTodo/todos
 * @accessor api.functional.minimalTodo.todos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for todo filtering */
    body: IMinimalTodoTodo.IRequest;
  };
  export type Body = IMinimalTodoTodo.IRequest;
  export type Response = IPageIMinimalTodoTodo.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/minimalTodo/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/minimalTodo/todos";
  export const random = (): IPageIMinimalTodoTodo.ISummary =>
    typia.random<IPageIMinimalTodoTodo.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific todo item.
 *
 * This API operation fetches comprehensive information for a single todo item
 * identified by its unique UUID. The operation accesses the minimal_todo_todos
 * table and returns all available fields for the specified todo, including the
 * text content, completion status, creation timestamp, last update timestamp,
 * and soft deletion status.
 *
 * The operation validates the provided todoId parameter to ensure it
 * corresponds to an existing, non-deleted todo item. If the todo is found and
 * active, complete details are returned. If the todo has been soft-deleted
 * (deleted_at is not null), appropriate handling is implemented based on
 * business requirements.
 *
 * Security considerations include proper authorization checks to ensure users
 * can only access their own todo items. The operation provides detailed error
 * handling for various scenarios including invalid UUID formats, non-existent
 * todos, and access permission violations.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the target todo item
 * @path /minimalTodo/todos/:todoId
 * @accessor api.functional.minimalTodo.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = IMinimalTodoTodo;

  export const METADATA = {
    method: "GET",
    path: "/minimalTodo/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/minimalTodo/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): IMinimalTodoTodo =>
    typia.random<IMinimalTodoTodo>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing todo item in the minimal todo application.
 *
 * Update an existing todo item identified by the provided todo ID. This
 * operation allows modification of the todo content and completion status while
 * maintaining data integrity. The system validates that the specified todo ID
 * exists and applies the updates accordingly. The updated_at timestamp is
 * automatically set to the current time to track the modification.
 *
 * Security considerations follow the single-user application model where all
 * operations are permitted without authentication. The operation handles both
 * content updates and status changes, supporting the core todo management
 * functionality required by the minimal application philosophy.
 *
 * This operation integrates with the minimal_todo_todos table as defined in the
 * Prisma schema, updating the content and completed fields while maintaining
 * the relational integrity. The soft delete mechanism (deleted_at field) is
 * respected, preventing updates to already deleted todos unless explicitly
 * handled by the business logic.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo item to update
 * @param props.body Data containing the updates to apply to the todo item
 * @path /minimalTodo/todos/:todoId
 * @accessor api.functional.minimalTodo.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the todo item to update */
    todoId: string & tags.Format<"uuid">;

    /** Data containing the updates to apply to the todo item */
    body: IMinimalTodoTodo.IUpdate;
  };
  export type Body = IMinimalTodoTodo.IUpdate;
  export type Response = IMinimalTodoTodo;

  export const METADATA = {
    method: "PUT",
    path: "/minimalTodo/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/minimalTodo/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): IMinimalTodoTodo =>
    typia.random<IMinimalTodoTodo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a todo item by marking it as deleted.
 *
 * Perform a soft deletion of a todo item by setting the deleted_at timestamp to
 * the current time. This operation preserves the todo record for potential
 * recovery or audit purposes while excluding it from normal queries and
 * operations. The system validates that the todo exists and has not already
 * been deleted before applying the soft deletion.
 *
 * The operation follows the confirmation-based deletion workflow required by
 * business rules, ensuring that todos are not accidentally removed.
 * Soft-deleted todos can be identified by the non-null deleted_at timestamp and
 * are automatically excluded from search results and list operations by
 * default.
 *
 * Security considerations include the single-user application model where
 * deletion operations are permitted without authentication. The operation
 * integrates with the minimal_todo_todos table as defined in the Prisma schema,
 * properly utilizing the deleted_at field for soft deletion functionality as
 * designed in the database structure.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo item to soft delete
 * @path /minimalTodo/todos/:todoId
 * @accessor api.functional.minimalTodo.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the todo item to soft delete */
    todoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/minimalTodo/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/minimalTodo/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
