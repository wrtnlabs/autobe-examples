import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthUserJoin } from "../../../providers/postAuthUserJoin";
import { postAuthUserLogin } from "../../../providers/postAuthUserLogin";
import { postAuthUserRefresh } from "../../../providers/postAuthUserRefresh";

import { IMinimalTodoUser } from "../../../api/structures/IMinimalTodoUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * Register a new user account and generate authentication tokens for todo
   * access.
   *
   * This endpoint allows new users to register for the minimal todo
   * application. The registration process creates a user account with secure
   * password storage and immediately provides authentication tokens for
   * accessing todo functionality.
   *
   * When a user submits registration data, the system validates the email
   * format and password strength requirements. Upon successful validation, a
   * new user account is created with a securely hashed password using bcrypt
   * with appropriate salt rounds. The system then generates both access and
   * refresh JWT tokens with proper expiration policies.
   *
   * The registration process follows secure authentication practices including
   * password hashing, token generation, and immediate session establishment.
   * After successful registration, users can immediately begin creating and
   * managing their todo items without additional authentication steps.
   *
   * This operation integrates with the security requirements specified in the
   * system context document, ensuring proper data protection and authentication
   * flow. The generated tokens follow JWT standards with appropriate claims for
   * user identification and authorization.
   *
   * @param connection
   * @param body User registration data including email and password for account
   *   creation
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IMinimalTodoUser.ICreate,
  ): Promise<IMinimalTodoUser.IAuthorized> {
    try {
      return await postAuthUserJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an existing user and generate new authentication tokens.
   *
   * This endpoint allows existing users to authenticate and access the minimal
   * todo application. The login process validates user credentials against
   * stored account information and generates new authentication tokens for
   * session management.
   *
   * When a user submits login credentials, the system verifies the email exists
   * in the user database and compares the provided password with the stored
   * hashed password using bcrypt verification. Upon successful authentication,
   * the system generates new access and refresh JWT tokens with updated
   * expiration timestamps.
   *
   * The authentication process includes security measures such as rate limiting
   * to prevent brute force attacks and proper error handling to avoid revealing
   * whether an email exists in the system. Successful login provides immediate
   * access to all todo management functionality with the appropriate
   * authorization tokens.
   *
   * This operation follows the authentication flow requirements specified in
   * the user scenarios document, ensuring secure credential validation and
   * token management. The system maintains session integrity through proper
   * token expiration and refresh mechanisms.
   *
   * @param connection
   * @param body User login credentials including email and password for
   *   authentication
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IMinimalTodoUser.ILogin,
  ): Promise<IMinimalTodoUser.IAuthorized> {
    try {
      return await postAuthUserLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh authentication tokens to maintain user session without re-login.
   *
   * This endpoint allows authenticated users to refresh their access tokens
   * using a valid refresh token. The refresh process extends user sessions
   * without requiring full re-authentication, maintaining continuous access to
   * todo management functionality.
   *
   * When a user submits a valid refresh token, the system verifies the token's
   * signature and expiration status. If the refresh token is valid and has not
   * been revoked, the system generates a new access token with updated
   * expiration while maintaining the same user authorization claims. The
   * refresh token itself may also be renewed depending on the security policy
   * implementation.
   *
   * The token refresh mechanism follows security best practices by validating
   * token integrity, checking for revocation status, and maintaining proper
   * session continuity. This operation helps prevent unnecessary login
   * interruptions while maintaining secure access control through regular token
   * rotation.
   *
   * This refresh functionality supports the authentication system requirements
   * specified in the security documentation, ensuring users can maintain
   * extended sessions for todo management while preserving security through
   * token expiration policies.
   *
   * @param connection
   * @param body Refresh token for generating new access tokens
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IMinimalTodoUser.IRefresh,
  ): Promise<IMinimalTodoUser.IAuthorized> {
    try {
      return await postAuthUserRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
