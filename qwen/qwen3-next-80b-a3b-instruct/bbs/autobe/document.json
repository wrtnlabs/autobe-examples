{"operations":[{"path":"/auth/guest/join","method":"post","name":"join","authorizationType":"join","authorizationRole":null,"specification":"Creates a temporary guest session for anonymous users who wish to interact with the system. This operation generates a unique guest identifier, assigns a persistent session ID, and returns authentication credentials for temporary access without requiring registration. The operation is designed for public access and is the only entry point for non-authenticated users.","summary":"Creates temporary guest session with system-generated identifier for anonymous access.","description":"This operation enables anonymous visitors to interact with the economic/political discussion board by creating a temporary guest session. When a guest accesses the system, this endpoint generates a new entry in the economic_board_guest table with a unique UUID, a system-generated session_id for persistence, and an optional ip_hash derived from the visitor's IP address for security monitoring.\n\nThe operation maps directly to the economic_board_guest model, which contains the necessary fields: id (UUID), created_at (timestamp), session_id (unique string), ip_hash (optional cryptographic hash), and last_active (timestamp). No additional fields from other models are referenced since guest sessions do not require email, passwords, or any permanent identity.\n\nThis operation is critical for the platform's design philosophy of anonymous participation. Guests can view content and are tracked for moderation purposes only through their session_id and ip_hash, maintaining privacy while allowing abuse detection. The guest session exists solely to provide temporary access to public content, with all interaction capabilities still restricted to registered members and admins.\n\nThe operation is stateless in nature but generates a persistent server-side record that can be maintained for up to 30 days based on inactivity thresholds defined in business rules. This alignment with the economic_board_guest schema ensures full compatibility with the system's architecture.\n\nThis operation is required for all unauthenticated users and serves as the foundational entry point for the platform's anonymous interaction model, complementing the authentication flows for members and admins.","parameters":[],"requestBody":null,"responseBody":{"typeName":"IEconomicBoardGuest.IAuthorized","description":"Response contains authentication token and guest session details for temporary access."},"prerequisites":[]},{"path":"/auth/guest/refresh","method":"post","name":"refresh","authorizationType":"refresh","authorizationRole":null,"specification":"Renews the temporary session token for anonymous guest users. When a guest's session expires or needs refreshing, this operation validates the existing session identifier and issues a new token with an extended expiration time, maintaining the guest's identity while updating security credentials without requiring re-registration.","summary":"Refreshes temporary authentication token for guest sessions to extend access duration.","description":"This operation enables guest users to renew their temporary access without re-registration. When guests interact with the system, they receive a temporary JWT with a limited lifespan. When this expires, this endpoint validates their existing session against the economic_board_guest table and issues a new token with an updated expiration while preserving the same session_id and guest context.\n\nThe refresh operation is tied to the economic_board_guest entity, checking the existing session_id and last_active fields to validate the guest's identity. It then updates the last_active timestamp as part of the refresh process, which satisfies the business rule requiring session heartbeat for inactivity tracking.\n\nBecause guest sessions are managed entirely through the economic_board_guest model and do not use password_hash, auth_jwt_id, or any authentication fields from economic_board_member or economic_board_admin, this operation uses only the fields present in the guest table: session_id for identification and created_at for session origin determination.\n\nThis operation maintains the system's privacy by avoiding any email or user-specific authentication mechanisms while extending session duration as permitted by the business policy. It is the only mechanism for guests to obtain prolonged access without becoming registered members.\n\nThe response uses the consistent IAuthorized pattern for authentication responses, specifically IEconomicBoardGuest.IAuthorized to distinguish guest tokens from member and admin tokens, despite the guest role having no traditional authentication strength.","parameters":[],"requestBody":null,"responseBody":{"typeName":"IEconomicBoardGuest.IAuthorized","description":"Response contains refreshed authentication token and updated guest session details."},"prerequisites":[]},{"specification":"This operation handles user registration for member accounts on the economic discussion board. Upon successful registration, the system creates a record in the economic_board_member table using the provided email and password_hash fields. A new UUID is generated for the member's ID, and the auth_jwt_id is initialized. The created_at timestamp records the registration time, while verified_at remains null until email verification is completed. The is_active flag defaults to true, enabling immediate access. This registration flow enables authenticated members to create posts subject to moderation, as specified in the business rules.","authorizationType":"join","description":"This API endpoint facilitates member account registration on the economic discussion board. When a new user submits their email and password, the system creates a record in the economic_board_member table using the provided email and password_hash fields. A new UUID is generated for the member's ID, and the auth_jwt_id is initialized to a null state until the first successful login. The created_at timestamp records the registration time, while verified_at remains null until email verification is completed. The is_active flag defaults to true, submitting the account as immediately active. Following successful registration, the system generates a new JWT access token and a refresh token stored in an httpOnly cookie to maintain the session.\n\nThe implementation strictly relies on the schema's defined fields: email for authentication identity, password_hash for credential storage, created_at for audit trails, and auth_jwt_id as the session identifier. No other fields (e.g., phone, profile, or preferences) are supported as they do not exist in the schema.\n\nThis registration operation is foundational for member functionality, enabling the creation of posts (pending moderation) and replies on the discussion board, as defined in the business rules. Upon successful registration, the system enforces email verification before strong authentication rights are fully granted. The behavior aligns with the user role definition of member and must be paired with the login and refresh operations to complete the authentication lifecycle.\n\nSecurity considerations center around the protection of password_hash using industry-standard bcrypt hashing. The system never stores plain text passwords and generates unique, cryptographically secure UUIDs for each new member. The auth_jwt_id will be updated upon first login to ensure session integrity.\n\nThis operation is dependent on the downstream email verification system to complete the registration lifecycle, as indicated in the business rules. For successful authentication, this operation must be followed by the login operation to establish a valid session.","summary":"Register a new member account using email and password, creating a record in economic_board_member table.","parameters":[],"path":"/auth/member/join","method":"post","name":"join","authorizationRole":"member","prerequisites":[],"requestBody":{"description":"Registration data for a new member account.","typeName":"IEconomicBoardMember.ICreate"},"responseBody":{"description":"Authentication tokens and member identifier after successful registration.","typeName":"IEconomicBoardMember.IAuthorized"}},{"specification":"This operation authenticates a member user by validating their email and password_hash against the economic_board_member table. Upon successful authentication, the system returns a JWT access token and refresh token. The last_login field in the member record is updated with the current timestamp to maintain accurate login history. The auth_jwt_id is set to the UUID of the issued access token to bind the session to the member record.","authorizationType":"login","description":"This API endpoint authenticates a member user by validating their email and password_hash against the economic_board_member table. The operation queries the database for a member record with the provided email and compares the hashed password using bcrypt. Upon successful authentication, the system generates a new JWT access token with a 30-minute expiration and a refresh token stored in an httpOnly cookie with a 30-day expiration. The auth_jwt_id in the member record is updated to the UUID of the issued access token, creating a direct binding between the session and the user account. The last_login field is updated with the current timestamp to maintain an auditable login history.\n\nThis operation strictly uses schema-defined fields: email for identity lookup, password_hash for credential verification, auth_jwt_id to track the active session, and last_login to maintain session history. No other fields (e.g., credentials, device info, or multi-factor fields) are involved, as they are absent from the schema.\n\nThis login operation enables member access to create and edit posts, as per business rules, and must follow successful registration. The system enforces strict session management: the refresh token is required to obtain new access tokens after expiration, ensuring continuous access. The operation concludes with the issuance of the IAuthorized response containing both token types and member identifiers.\n\nSecurity protocols emphasize the use of secure, encrypted JWT tokens, httpOnly cookies for refresh tokens, and secure password hashing. All communication occurs over HTTPS to prevent credential interception.","summary":"Authenticate member user credentials and issue access and refresh tokens.","parameters":[],"path":"/auth/member/login","method":"post","name":"login","authorizationRole":"member","prerequisites":[],"requestBody":{"description":"Login credentials for a member account.","typeName":"IEconomicBoardMember.IRequest"},"responseBody":{"description":"Authentication tokens and member identifier after successful login.","typeName":"IEconomicBoardMember.IAuthorized"}},{"specification":"This operation refreshes a member's access token using a valid refresh token stored in an httpOnly cookie. If the refresh token is valid and not expired, the system issues a new access token and might regenerate the refresh token for enhanced security. The auth_jwt_id in the economic_board_member table is updated to the new access token's UUID.","authorizationType":"refresh","description":"This API endpoint renews a member's access token by validating the refresh token stored in an httpOnly cookie. The system retrieves the authentication context from the cookie, verifies its signature and expiration, and confirms it matches the auth_jwt_id in the economic_board_member record. Upon validation, a new JWT access token with a 30-minute expiration is generated, and the auth_jwt_id in the member record is updated to the new token's UUID. The refresh token may be rotated with a new 30-day expiration to prevent replay attacks. The last_login timestamp is optionally updated to reflect session activity.\n\nThis refresh flow strictly depends on the schema's auth_jwt_id and last_login fields. No additional fields (e.g., device id, token binding) exist in the schema to support alternative refresh mechanisms. The implementation does not involve any other entity tables or properties.\n\nThe operation ensures continuous session validity without requiring re-authentication, aligning with the 30-minute access token lifespan and 30-day refresh lifecycle defined in the business rules. The logic is entirely contained within the economic_board_member table. This operation must follow a successful login to operate, as no refresh occurs without an initial authentication event.\n\nSecurity measures ensure that refresh tokens are encrypted, stored in httpOnly cookies to prevent XSS, and are single-use or rotate to mitigate token theft. This system maintains session integrity entirely within the parameterized schema structure.","summary":"Refresh an expired access token using a valid refresh token.","parameters":[],"path":"/auth/member/refresh","method":"post","name":"refresh","authorizationRole":"member","prerequisites":[],"requestBody":null,"responseBody":{"description":"New JWT access token after successful refresh.","typeName":"IEconomicBoardMember.IAuthorized"}},{"specification":"Authentication operation for admin users to register a new admin account. This operation creates a new admin record in the economic_board_admin table with email, password_hash, and initial authentication token setup. The system does not provide self-registration; admin accounts are pre-configured by system owners, but this API allows secure registration of new admins when authorized.","authorizationType":"join","description":"This API operation registers a new system administrator account for the economic/political discussion board.\n\nThe operation creates a record in the economic_board_admin table with the provided email and securely hashed password. It generates a new auth_jwt_id for session management and sets created_at and last_login timestamps to the current time. The is_active flag is initialized to true to enable immediate login.\n\nSince admin accounts are pre-configured by system owners, this endpoint is intended for initial setup or authorized administrative onboarding. It must not be exposed to public users.\n\nThe operation validates that the email is not already registered in the economic_board_admin table. Multiple admins can exist, each with unique email addresses. A password must be provided and is never stored in plain text.\n\nAfter successful creation, an initial JWT access token and refresh token are generated and returned to the client for future authentication.\n\nThis endpoint should be called only by system administrators or during initial deployment, not by regular users or guests.","summary":"Register a new admin account in the economic_board_admin table with email and password.","parameters":[],"requestBody":{"description":"Input data required to create a new admin account.","typeName":"IEconomicBoardAdmin.IJoin"},"responseBody":{"description":"Authentication response containing access and refresh tokens for the newly registered admin.","typeName":"IEconomicBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"Authentication operation for admin users to log in using email and password. This operation validates the credentials against the economic_board_admin table and issues a new JWT access token if valid.","authorizationType":"login","description":"This API operation authenticates an admin user by verifying their email and password against the economic_board_admin table.\n\nThe system compares the provided password against the stored password_hash using a secure hashing algorithm. If validation succeeds, the last_login timestamp is updated to the current time, and a new JWT access token is generated with the admin's role and user identifier.\n\nThe operation enforces that only accounts with is_active = true can login. Suspended accounts cannot authenticate.\n\nThe authentication token includes the admin's role and UUID, allowing downstream services to enforce role-based access control. The refresh token is returned in an httpOnly cookie for secure storage.\n\nMultiple concurrent sessions for the same admin are supported, with each session having its own auth_jwt_id. The auth_jwt_id in the economic_board_admin table is updated to the new token's UUID.\n\nThis endpoint should be used for all admin authentication attempts, including initial login and session resumption after token expiration.","summary":"Authenticate an admin user by email and password, returning JWT access and refresh tokens.","parameters":[],"requestBody":{"description":"Credentials required for admin authentication.","typeName":"IEconomicBoardAdmin.ILogin"},"responseBody":{"description":"Authentication response containing access and refresh tokens for the authenticated admin.","typeName":"IEconomicBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"Authentication operation for admin users to refresh their access token using a valid refresh token. This ensures session continuity without requiring re-authentication.","authorizationType":"refresh","description":"This API operation allows an admin user to obtain a new access token using a valid refresh token.\n\nThe refresh token must be stored in an httpOnly cookie and cannot be accessed by client-side JavaScript. The server verifies the token's validity, expiration, and association with an active admin account.\n\nUpon successful validation, a new JWT access token is issued, and the refresh token may be rotated for enhanced security (fresh token generation). The last_login timestamp in the economic_board_admin table is updated to maintain login history.\n\nThis mechanism allows long-lived sessions while minimizing exposure of access tokens. The refresh token's expiration is set to 30 days from the first authentication, after which a full re-login is required.\n\nThe system enforces strict token validation and invalidates all previous tokens when a refresh occurs. An admin can have only one active session with a valid refresh token at a time.","summary":"Refresh admin's access token using a valid refresh token, extending the session.","parameters":[],"requestBody":{"description":"Refresh token provided to renew access credentials.","typeName":"IEconomicBoardAdmin.IRefresh"},"responseBody":{"description":"Authentication response containing a renewed access token and optionally a new refresh token.","typeName":"IEconomicBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"Admin operation to approve a pending post, making it visible to all users. The operation updates the economic_board_posts table status from 'pending' to 'published'.","authorizationType":null,"description":"This API operation allows an admin to approve a post that is currently in 'pending' status, transitioning it to 'published' and making it visible to all users.\n\nThe operation requires the admin to be properly authenticated via JWT. The post must exist and have a status of 'pending' in the economic_board_posts table. The admin's ID is recorded in the admin_id field for audit purposes.\n\nBefore the update, the system validates that the requested post_id corresponds to a legitimate post and that the admin has sufficient permissions. The subject, content, and creation timestamp are preserved unchanged.\n\nOnce approved, the post appears in all topic feeds and search results. A system notification can be triggered to notify the original author that their post is now public.\n\nThis operation must be used in conjunction with post rejection or deletion to complete the moderation workflow. Only an authenticated admin can perform this action.","summary":"Approve a pending post and transition its status to 'published' in the economic_board_posts table.","parameters":[{"name":"postId","description":"Unique identifier of the post to be approved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful approval and updated post details.","typeName":"IEconomicBoardPosts"},"authorizationRole":"admin","name":"approve","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created before a post can reference it, ensuring valid topic categorization for moderation actions"}],"path":"/admin/posts/{postId}/approve","method":"patch"},{"specification":"Admin operation to reject a pending post, removing it from public view and providing a reason. Updates economic_board_posts status to 'rejected'.","authorizationType":null,"description":"This API operation allows an admin to reject a post that is currently in 'pending' status, preventing it from becoming public.\n\nThe operation requires an admin to be authenticated and provides a mandatory reason for rejection (e.g., 'inappropriate content', 'off-topic', 'duplicate'). This reason is stored in the moderation_reason field of the economic_board_posts table.\n\nThe post status is updated from 'pending' to 'rejected'. The original content, timestamp, and author information are preserved for audit purposes but are no longer visible to any user.\n\nThe reject operation triggers a notification to the original author of the post, informing them of the rejection and the reason provided by the admin.\n\nRejection is a soft action; the post remains in the database for moderation logs and compliance. An admin's rejection decision can be overridden only by a higher-privilege admin or system owner.\n\nThis operation respects the business rule that rejected posts must always have a reason provided, ensuring accountability in moderation decisions.","summary":"Reject a pending post with a reason, changing its status to 'rejected' in economic_board_posts.","parameters":[{"name":"postId","description":"Unique identifier of the post to be rejected.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reason for rejecting the post, required for audit and notification purposes.","typeName":"IEconomicBoardPosts.IReject"},"responseBody":{"description":"Confirmation of rejection and updated post details including the rejection reason.","typeName":"IEconomicBoardPosts"},"authorizationRole":"admin","name":"reject","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created before a post can reference it, ensuring valid topic categorization for moderation actions"}],"path":"/admin/posts/{postId}/reject","method":"patch"},{"specification":"Admin operation to permanently delete a post, removing it from the database entirely. Uses hard delete since no soft delete column exists in the economic_board_posts table.","authorizationType":null,"description":"This API operation allows an admin to permanently delete a post from the database using a hard delete.\n\nSince the economic_board_posts table has no soft delete column (e.g., deleted_at), deletion is permanent and irreversible. The operation removes both the post record and all associated replies from the database.\n\nThe admin must be authenticated, and the specified post_id must exist. The deletion cannot be undone, and no trace of the post is retained in the main table.\n\nThe system logs all deletions in an internal audit table including the admin's ID, timestamp, and requested post_id, but this audit log is separate from the economic_board_posts table and not accessible through normal API endpoints.\n\nThe deletion triggers no notification to the original author, per the business rule that admin deletions are handled confidentially.\n\nThe operation ensures that once a post is deleted, it cannot be recovered, maintaining data integrity for moderation purposes.","summary":"Permanently delete a post using hard delete, as economic_board_posts lacks a soft_delete_column.","parameters":[{"name":"postId","description":"Unique identifier of the post to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation that the post and its replies have been permanently deleted.","typeName":"IEconomicBoardPosts.IDelete"},"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created before any post can be associated with it, as post deletion requires topic context for audit and moderation integrity."},{"endpoint":{"path":"/economicBoard/member/posts","method":"post"},"description":"Post must exist before it can be deleted; a valid post ID requires prior creation through post submission."}],"path":"/admin/posts/{postId}","method":"delete"},{"specification":"This operation retrieves a paginated list of economic board topics with full details including status and description. It operates on the economic_board_topics table from the Prisma schema and supports filtering by active/inactive status using search parameters. The operation is designed to provide comprehensive topic information for navigation and administration purposes.","path":"/economicBoard/admin/topics","method":"patch","summary":"Search and retrieve filtered, paginated list of economic board topics","description":"Retrieve a paginated list of economic board topics with detailed information for system navigation and administrative purposes. This operation queries the economic_board_topics table from the Prisma schema and supports filtering by the is_active status field to show either active or inactive topics.\n\nThe operation implements pagination with configurable page size and offset parameters to handle potentially large collections of topic categories. Results are organized by creation date descending to prioritize newer topics, but can be sorted by name or other metadata fields.\n\nFor system administrators, this operation provides critical visibility into topic availability, allowing them to identify inactive topics that may be candidates for deprecation. The description field provides additional context about each topic's scope and purpose.\n\nSecurity considerations include restricting topic modification to admin users while allowing read access to all authenticated users. Rate limiting is applied to prevent brute-force enumeration of topic categories. The response includes only non-sensitive metadata, avoiding exposure of internal identifiers or system configuration details.\n\nThis operation integrates directly with the economic_board_topics entity as defined in the Prisma schema, incorporating all available fields including id, name, created_at, updated_at, is_active, and description. The implementation ensures compatibility with the system's predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", and \"Fiscal Policy\".","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for topic filtering","typeName":"IEconomicBoardTopic.IRequest"},"responseBody":{"description":"Paginated list of topic information including status and description","typeName":"IPageIEconomicBoardTopic"},"authorizationType":null,"authorizationRole":"admin","name":"search","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic search and retrieval requires at least one topic to exist in the system; the operation returns paginated results based on existing topics, so a topic must be created first to have data to retrieve."}]},{"specification":"This operation retrieves detailed information about a specific economic board topic by its unique identifier. It operates on the economic_board_topics table from the Prisma schema and returns comprehensive metadata about the selected topic including its creation date, activity status, and description.","path":"/economicBoard/admin/topics/{topicId}","method":"get","summary":"Retrieve detailed information about a specific economic board topic","description":"Retrieve comprehensive details about a specific economic board topic identified by its UUID. This operation targets the economic_board_topics table from the Prisma schema and returns the full record for the requested topic, including the topic name, creation timestamp, last updated timestamp, activity status, and description.\n\nThe operation validates that the topicId parameter corresponds to an existing record in the economic_board_topics table. If the topic does not exist, the system returns a 404 Not Found response. The operation does not require any request body since the topic is uniquely identified by its path parameter.\n\nThis endpoint supports both public access for general users and privileged access for administrators. The response includes all topic metadata available in the schema, including the is_active flag, which allows users to determine whether the topic is currently available for new post creation.\n\nSecurity is maintained by ensuring no sensitive information is exposed in the response. The topic description is included to provide context about the scope and purpose of each category, helping users understand appropriate posting topics.\n\nThe operation integrates directly with the economic_board_topics entity as defined in the Prisma schema, returning exactly the fields: id, name, created_at, updated_at, is_active, and description. This ensures alignment with the system's requirement to support exactly seven predefined topic categories with immutable names.","parameters":[{"name":"topicId","description":"Unique identifier of the economic board topic to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific economic board topic","typeName":"IEconomicBoardTopic"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"This operation creates a new economic/political discussion topic category. The system maintains exactly seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\". This endpoint allows admin users to create new topic entries in the economic_board_topics table, with automatic assignment of immutable timestamps and activation status based on system policy.","path":"/economicBoard/admin/topics","method":"post","summary":"Create a new economic topic category","description":"This operation creates a new topic category for organizing economic and political discussions on the platform. All topics must be registered in the economic_board_topics table, which maintains a controlled vocabulary of exactly seven predefined categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThe system requires that topic names be exact, case-sensitive matches to these predefined values. When a new topic is created, the system automatically assigns the current UTC timestamp to created_at and updated_at fields, and sets is_active to true by default. A description can optionally be provided to clarify the scope of the topic.\n\nAdministrative privileges are required to execute this operation, as it affects the core content organization structure of the system. Creating custom topics outside the predefined set is prohibited by system policy, so this endpoint validates against the allowed values before persistence.\n\nSince topic names are immutable once created, this endpoint does not support renaming or updating existing topics. To modify a topic's description or activation status, a separate endpoint would be required. The system does not allow soft deletion of topics; instead, topics are deactivated through the is_active field to preserve historical post integrity.","parameters":[],"requestBody":{"description":"Specification of new topic category to be created, including name and optional description.","typeName":"IEconomicBoardTopic.ICreate"},"responseBody":{"description":"The newly created topic object with system-assigned identifiers and timestamps.","typeName":"IEconomicBoardTopic"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing economic topic category's metadata. It allows an admin to modify the description field or activation status (is_active) of a topic in the economic_board_topics table. Topic names themselves are immutable as per system policy, and cannot be changed through this endpoint.","path":"/economicBoard/admin/topics/{topicId}","method":"put","summary":"Update economic topic metadata","description":"This operation enables administrative modification of non-identity properties of a topic category in the economic_board_topics table. The system permits updates to the description field to clarify topic scope, and the is_active field to temporarily disable a topic from new post creation without deleting historical references.\n\nThe topic id, which is the primary key and immutable, is specified in the URL path as {topicId}. Update requests cannot modify the topic name, created_at timestamp, or any other identity fields—attempted changes to these fields are ignored by the system.\n\nAdministrative privileges are required for this operation, as it controls the content taxonomy of the platform. When is_active is set to false, the topic remains visible in historical posts but is hidden from topic selection dropdowns for new submissions. This design preserves data integrity while allowing system-level control over content discoverability.\n\nThe system records the modification timestamp in updated_at, reflecting when the metadata change occurred. This operation does not affect posts already associated with the topic, ensuring that historical content remains accurately categorized despite administrative changes to topic metadata.","parameters":[{"name":"topicId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the topic category to be updated."}],"requestBody":{"description":"Partial update specification for topic metadata fields (description and/or is_active).","typeName":"IEconomicBoardTopic.IUpdate"},"responseBody":{"description":"The updated topic object with modified description and/or is_active status.","typeName":"IEconomicBoardTopic"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a topic category from the economic/political discussion board. The topic must not have any published or pending posts associated with it, as per business rules that prevent deletion of active topics. This is an administrative-only operation that removes the topic from the system entirely, not just marking it as inactive. The economic_board_topics table in the Prisma schema is the direct target of this operation, which has fields: id (UUID), name, created_at, updated_at, is_active, and description. Only admin users can perform this action, and it must be performed through a hard delete operation since there is no soft_delete_column in the schema.","path":"/economicBoard/admin/topics/{topicId}","method":"delete","summary":"Permanently delete a topic category","description":"This operation permanently removes a topic category from the economic/political discussion board system entirely. Unlike merely deactivating a topic, this action eliminates the topic from the system's catalog of available categories. This is a hard delete operation, as there is no soft_delete_column defined in the economic_board_topics Prisma schema, meaning the topic record will be completely removed from the database with no possibility of recovery.\n\nThis operation is strictly reserved for administrators who have been granted explicit moderation privileges. The business rules require that a topic must not have any associated posts (neither published nor pending) before it can be deleted. This ensures historical integrity and prevents orphaning of existing content. Prior to deletion, the system will validate that no economic_board_posts records reference the given topicId.\n\nThe operation does not require any request body since the target topic is fully identified by the topicId path parameter. Upon successful deletion, the system returns a 204 No Content response. If the topic has existing posts, a 409 Conflict response will be returned with an error message indicating that the topic is in use. If the topic does not exist, a 404 Not Found response will be returned.","parameters":[{"name":"topicId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the topic category to be deleted. Must correspond to an existing economic_board_topics id."}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of guest users who have interacted with the economic/political discussion board. The economic_board_guest table in the Prisma schema is the target, containing fields: id (UUID), created_at, session_id, ip_hash, and last_active. Since guests are anonymous and their data is stored for moderation purposes only, this list is restricted to admin users for compliance and privacy validation. The operation supports sorting by creation timestamp and filtering by last activity date range.","path":"/economicBoard/admin/guests","method":"patch","summary":"Search and retrieve paginated guest user interactions","description":"This operation enables administrators to search, filter, and retrieve a paginated list of guest users who have interacted with the economic/political discussion board. Guests are anonymous visitors who create posts or replies without authentication, tracked in the economic_board_guest table. This table contains fields: id (UUID), created_at (timestamp of first interaction), session_id (persistent anonymous identifier), ip_hash (cryptographic hash of IP address for abuse detection), and last_active (timestamp of most recent interaction).\n\nThis is implemented as a PATCH request because it accepts complex search criteria rather than simple path parameters. The request body will define parameters such as date ranges for user activity, pagination limits, sorting preferences, and search filters for session_id or ip_hash patterns. The system will only return guest records that have been active recently, respecting user privacy guidelines and preventing bulk data harvesting.\n\nThe response includes a paginated collection (IPageIEconomicBoardGuest) containing guest summary information, including id, created_at, last_active, and an obfuscated view of the session_id. Admins may use this list to investigate potential abuse patterns, repeated sessions from the same IP, or suspicious activity. Guest data is not accessible to regular members or guests themselves, ensuring compliance with the platform's no-PII policy.","parameters":[],"requestBody":{"description":"Search criteria, sorting preferences, and pagination parameters for filtering guest interactions.","typeName":"IEconomicBoardGuest.IRequest"},"responseBody":{"description":"Paginated list of guest user interactions matching the search criteria, with obfuscated identifiers and summary metadata.","typeName":"IPageIEconomicBoardGuest"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific guest's interaction history from the economic/discussion board system. It accesses the economic_board_guest entity in the Prisma schema and returns detailed information about the guest's session, including their session ID, IP address hash (if available), and last active timestamp. The operation is designed to support moderation and security analysis while preserving user anonymity.","path":"/economicBoard/guests/{guestId}","method":"get","summary":"Retrieve a specific guest's interaction history","description":"This operation retrieves detailed information about a specific guest's interaction with the economic/discussion board system. The guest is identified by a unique UUID identifier (guestId) that corresponds to a record in the economic_board_guest table from the Prisma schema.\n\nThe returned data includes the guest's session_id, which is used for persistent state tracking across interactions, and the ip_hash, a cryptographic hash of the guest's IP address used for abuse detection and moderation purposes without storing personally identifiable information. The last_active timestamp indicates when the guest last performed any action on the system, which helps determine session validity and activity patterns.\n\nSecurity considerations are paramount in this operation. Guests are anonymous users who have not registered or authenticated, so no personal identifying information is exposed. The IP_hash is stored as a cryptographic hash to protect user privacy while still enabling moderation against abusive behavior.\n\nThis operation is critical for moderation workflows, as administrators may need to investigate suspicious activity patterns across multiple guest interactions. It also supports system analytics on anonymous user engagement metrics.\n\nThe operation references the economic_board_guest model from the Prisma schema, which includes all fields defined in the database: id, created_at, session_id, ip_hash, and last_active. No additional fields are included that do not exist in the schema, maintaining strict alignment with the data model.\n\nError handling includes returning a 404 Not Found response if the guestId does not correspond to an existing record. All responses are formatted in JSON with standard HTTP status codes.","parameters":[{"name":"guestId","description":"Unique identifier of the guest whose interaction history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the guest's interaction history including session and activity data","typeName":"IEconomicBoardGuest"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Guest record must be associated with a valid economic topic category which requires pre-existing topic creation before any moderation or analytics actions can be performed."}]},{"specification":"This operation searches and retrieves a paginated, filtered list of all registered members of the economic/discussion board system. It operates on the economic_board_member entity in the Prisma schema and supports comprehensive filtering by user status, registration date ranges, and other metadata, with full pagination, sorting, and field selection.","path":"/economicBoard/admin/members","method":"patch","summary":"Search and retrieve a filtered, paginated list of members","description":"This operation enables advanced searching and filtering of registered members in the economic/discussion board system. It uses the PATCH HTTP method to handle complex search criteria that would be inappropriate for a GET request due to length or complexity.\n\nThe operation queries the economic_board_member table from the Prisma schema, returning a list of members filtered by criteria provided in the request body. Support includes searching by user status (is_active), registration date ranges (created_at), last login dates (last_login), and email patterns. Results are fully paginated with configurable page size, sorting by any field in ascending or descending order, and precise offset control.\n\nSecurity considerations require no authentication for this endpoint since it is designed for administrative oversight, though in practice should be restricted to admin roles in implementation. The response only returns public-level member data as defined in the economic_board_member schema: id, email, created_at, verified_at, last_login, is_active, and auth_jwt_id. Password hashes and sensitive data are never included.\n\nThis operation implements full compliance with the Prisma schema definition and includes only properties that exist in the database model. There is no assumption of soft delete fields (deleted_at) or other non-existent columns. The economic_board_member model is strictly adhered to with all references validated against the schema.\n\nThe response returns a paginated structure containing a data array with member summary objects and pagination metadata including total count, current page, page size, and total pages. This follows the standardized pattern for list operations across the API.\n\nThis is a system information operation designed for administrative dashboard functions and cannot be used by regular members or guests.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for member filtering","typeName":"IEconomicBoardMember.IRequest"},"responseBody":{"description":"Paginated list of member summary information matching search criteria","typeName":"IPageIEconomicBoardMember"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific member's details from the economic discussion board system. It operates on the economic_board_member table from the Prisma schema. The operation requires authentication as the member themselves or an admin, and returns the member's profile information including email, creation date, last login, and account status.","path":"/economicBoard/member/members/{memberId}","method":"get","summary":"Retrieve detailed information for a specific economic discussion board member","description":"This operation retrieves the complete profile information of a specific member from the economic discussion board system. The operation queries the economic_board_member table to obtain details including email address, account creation timestamp, last login date, and active status.\n\nThe operation supports authentication through JWT token validation. Members can only retrieve their own information, while admins may retrieve any member's information. The system enforces strict access control to protect user privacy.\n\nThe response does not include sensitive data like password_hash or auth_jwt_id, adhering to security best practices. For security purposes, the email address is returned in full but system-level identifiers like auth_jwt_id remain protected.\n\nError handling ensures that unauthorized access attempts return HTTP 403 Forbidden, while attempts to retrieve non-existent members return HTTP 404 Not Found. This operation is essential for member profile management and administrative oversight of the discussion board community.","parameters":[{"name":"memberId","description":"Unique UUID identifier of the target economic board member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete profile information of the requested economic board member, excluding sensitive authentication details","typeName":"IEconomicBoardMember"},"authorizationRoles":["member","admin"],"name":"at","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must exist to validate member activity patterns related to economic topics"},{"endpoint":{"path":"/economicBoard/member/posts","method":"post"},"description":"Member must have created at least one post to be considered active in the system"}]},{"specification":"This operation retrieves a specific member's details from the economic discussion board system. It operates on the economic_board_member table from the Prisma schema. The operation requires authentication as the member themselves or an admin, and returns the member's profile information including email, creation date, last login, and account status.","path":"/economicBoard/admin/members/{memberId}","method":"get","summary":"Retrieve detailed information for a specific economic discussion board member","description":"This operation retrieves the complete profile information of a specific member from the economic discussion board system. The operation queries the economic_board_member table to obtain details including email address, account creation timestamp, last login date, and active status.\n\nThe operation supports authentication through JWT token validation. Members can only retrieve their own information, while admins may retrieve any member's information. The system enforces strict access control to protect user privacy.\n\nThe response does not include sensitive data like password_hash or auth_jwt_id, adhering to security best practices. For security purposes, the email address is returned in full but system-level identifiers like auth_jwt_id remain protected.\n\nError handling ensures that unauthorized access attempts return HTTP 403 Forbidden, while attempts to retrieve non-existent members return HTTP 404 Not Found. This operation is essential for member profile management and administrative oversight of the discussion board community.","parameters":[{"name":"memberId","description":"Unique UUID identifier of the target economic board member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete profile information of the requested economic board member, excluding sensitive authentication details","typeName":"IEconomicBoardMember"},"authorizationRoles":["member","admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Member record must exist in the system before it can be retrieved by ID. This prerequisite validates that the memberID exists in the economic_board_member table, ensuring the GET request has a valid target."}]},{"specification":"This operation retrieves a paginated list of all economic discussion board administrators with filtering and searching capabilities. It operates on the economic_board_admin table from the Prisma schema. The operation supports complex queries to find admins based on various criteria including email, last login date, and account status.","path":"/economicBoard/admin/admins","method":"patch","summary":"Search and retrieve a filtered, paginated list of economic discussion board administrators","description":"This operation retrieves a filtered and paginated list of economic discussion board administrators from the system. It provides advanced search capabilities for finding administrators based on multiple criteria including partial email matching, last login date ranges, and account status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Administrators can sort by creation date, last login, email, or other relevant fields in ascending or descending order.\n\nSecurity considerations include rate limiting for search operations and appropriate filtering of sensitive administrator information. This operation is restricted to admin users only, ensuring that only privileged users can view the complete list of administrative accounts.\n\nThis operation integrates with the economic_board_admin table as defined in the Prisma schema, incorporating all available administrator fields and relationships. The response includes administrator summary information optimized for list displays, with options to include additional details based on authorization level.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for administrator filtering","typeName":"IEconomicBoardAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrator summary information matching search criteria","typeName":"IPageIEconomicBoardAdmin.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the logged-in member's own profile information from the economic discussion board system. It operates on the economic_board_member table from the Prisma schema. The operation requires member authentication and returns public profile fields such as email, creation date, last login, and account status. Sensitive fields like password_hash and auth_jwt_id are excluded. The path uses '/me' to enforce ownership rather than ID-based access.","path":"/economicBoard/member/me","method":"get","summary":"Retrieve own member profile","description":"This operation retrieves the complete profile information of the currently authenticated member from the economic discussion board system. The operation queries the economic_board_member table to obtain details including email address, account creation timestamp, last login date, and active status. The user must be authenticated as the member whose profile is being retrieved. This endpoint uses the '/me' convention, which enforces that the user can only retrieve their own profile, not others'.\n\nThe response does not include sensitive data like password_hash or auth_jwt_id, ensuring adherences to security best practices. For privacy, the email address is returned in its full form, but system tokens and identifiers are omitted.\n\nError handling ensures that unauthorized access attempts return HTTP 403 Forbidden. This operation is essential for the member's self-service profile management experience.","parameters":[],"requestBody":null,"responseBody":{"description":"Complete profile information of the authenticated member, excluding sensitive authentication details","typeName":"IEconomicBoardMember"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[]},{"specification":"This operation retrieves a specific admin user by their unique identifier from the economicBoard system. It operates on the economic_board_admin table in the Prisma schema, which stores privileged moderators with administrative permissions for content moderation. The operation requires an adminId path parameter to identify the specific administrator record and returns detailed information about the admin account including email, creation date, login history, and active status.","path":"/economicBoard/admin/admins/{adminId}","method":"get","summary":"Retrieve details of a specific admin user by ID","description":"This API operation fetches detailed information about a specific admin user from the economicBoard system. Admin users have elevated permissions to approve, reject, or delete posts and require secure access verification.\n\nThe operation retrieves data from the economic_board_admin table in the Prisma schema, which contains the admin's email address, password hash for authentication, timestamps of account creation and last login, an active status flag, and an authentication JWT ID for session management. All fields are essential for authentication and authorization processes.\n\nSecurity considerations include ensuring only authenticated users with appropriate permissions can access this endpoint. The adminId parameter must be a valid UUID that corresponds to an existing admin record in the database. The response should not include sensitive information like password_hash in production environments, although the schema includes this field for system integrity.\n\nThis operation is critical for administrative dashboards that require verification of admin identities and status. It must work in conjunction with authentication middleware that validates JWT tokens and verifies the requesting user has admin privileges. This ensures only authorized administrators can view other admin accounts, preventing privilege escalation attacks.\n\nThe data returned by this endpoint may be used in conjunction with admin action logs to audit moderation activities and investigate potential system misuse or security breaches.","parameters":[{"name":"adminId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The unique identifier of the admin user to retrieve, matching the UUID format used in the economic_board_admin table."}],"requestBody":null,"responseBody":{"description":"Detailed information about the admin user including authentication metadata and account status","typeName":"IEconomicBoardAdmin"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Admin account must be created and registered in the system before it can be accessed via ID"}]},{"specification":"This operation performs a complex search and filtering of economic/political forum posts, supporting advanced queries with pagination, topic filtering, and chronological sorting. It operates on the economic_board_posts table in the Prisma schema and allows users to retrieve posts filtered by status, topic, and other criteria while supporting pagination for performance optimization.","path":"/economicBoard/posts","method":"patch","summary":"Search and retrieve filtered, paginated list of posts","description":"This API endpoint enables users to search and retrieve a paginated list of economic and political forum posts using advanced filtering criteria. Unlike a simple GET request, this PATCH endpoint accepts a detailed request body that specifies search parameters, topic filters, sorting preferences, and pagination limits.\n\nThe operation queries the economic_board_posts table which contains posts with status indicators ('pending', 'published', 'rejected', 'deleted'), associated topic IDs from economic_board_topics, timestamps for creation and editing, content summaries, and processing metadata. This design supports efficient filtering of content based on moderation status, publication date, topic affiliation, and user context.\n\nFor performance optimization, results are returned paginated using a standard IPageIEconomicBoardPost response structure with a data array and pagination metadata. The sorting defaults to chronological order (newest first) as per user experience requirements, but supports custom sorting parameters. Topic filtering enables users to view posts related to specific economic topics like Inflation, Tax Policy, or Elections as defined by the system.\n\nSecurity considerations include limiting exposure to sensitive information - user flags and moderator identifiers are normalized in the response. This operation is designed to handle high-volume queries from client applications without database strain. It complements other operations like at (for single posts) and create (for posting new content), forming a complete content discovery system.\n\nThe request body must include a properly structured IEconomicBoardPost.IRequest object with valid filter parameters. Any invalid or malformed request parameters will result in a 400 Bad Request response with clear error messages indicating validation failures.","parameters":[],"requestBody":{"description":"Search and filter parameters for economic board posts including pagination, topic filtering, and sorting options","typeName":"IEconomicBoardPost.IRequest"},"responseBody":{"description":"Paginated results of forum posts matching search criteria with pagination metadata","typeName":"IPageIEconomicBoardPost"},"authorizationRoles":[],"name":"search","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new economic/political discussion post in the system. The post must be associated with one of the seven predefined topics: 'Inflation', 'Tax Policy', 'Elections', 'Global Trade', 'Monetary Policy', 'Labor Markets', or 'Fiscal Policy'. The system automatically assigns 'pending' status to the post and requires admin approval before becoming publicly visible. The system enforces content length restrictions: subject must be 5-120 characters, content must be 10-5,000 characters. Authorship is authenticated via JWT and is consistently anonymized using a system-generated author_hash, ensuring user privacy as required by platform design.","path":"/economicBoard/member/posts","method":"post","summary":"Create a new economic/political discussion post","description":"This operation allows authenticated members to submit a new economic or political discussion post. The system automatically assigns this post to 'pending' moderation status, ensuring it remains invisible to all users until approved by an administrator, following the platform's civil discourse principles.\n\nWhen a member submits a new post, the system requires a specific topic from the seven predefined categories: 'Inflation', 'Tax Policy', 'Elections', 'Global Trade', 'Monetary Policy', 'Labor Markets', or 'Fiscal Policy'. The post must include a subject between 5 and 120 characters and content between 10 and 5,000 characters. The system automatically assigns the current UTC timestamp as the creation date and sets the moderation status to 'pending'.\n\nThe request body includes the topic identifier and content, with authentication handled through a JWT token. The system uses the authenticated member's internal identifier to create a system-generated author_hash that ensures anonymization of the author in all public-facing outputs, with no access to personal identifiers by the public. No admin_id or moderation_reason fields are populated during submission - these are exclusively managed during subsequent admin moderation actions.\n\nPosts that fail validation (empty content, wrong topic format, exceeding character limits) are rejected immediately with appropriate error messages. The post is preserved in the database with complete metadata for audit purposes, but direct manipulation of moderation status is performed through separate, admin-only operations.\n\nAll responses are consistent with the anonymous posting model of the platform - no identifying information about the author is exposed to other users, and all public statistics reflect anonymous contributions only.","parameters":[],"requestBody":{"description":"Creation data for a new discussion post including topic reference and content","typeName":"IEconomicBoardPost.ICreate"},"responseBody":{"description":"Confirmation of post creation with system-assigned identifiers and status","typeName":"IEconomicBoardPost"},"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created and active before a post can be associated with it, as every post requires a valid topic ID from the predefined set"}]},{"specification":"This operation creates a new economic/political discussion post in the system. The post must be associated with one of the seven predefined topics: 'Inflation', 'Tax Policy', 'Elections', 'Global Trade', 'Monetary Policy', 'Labor Markets', or 'Fiscal Policy'. The post is initially created with 'pending' status and requires admin approval before becoming publicly visible. The system enforces content length restrictions: subject must be 5-120 characters, content must be 10-5,000 characters. Authorship is attributed to the authenticated member via JWT token, with system-generated anonymization for guest access patterns.","path":"/economicBoard/admin/posts","method":"post","summary":"Create a new economic/political discussion post","description":"This operation allows authenticated members to submit a new economic or political discussion post. The post is created in 'pending' status and remains invisible to all users until approved by an administrator, following the platform's content moderation workflow.\n\nWhen a member submits a new post, the system requires a specific topic from the seven predefined categories: 'Inflation', 'Tax Policy', 'Elections', 'Global Trade', 'Monetary Policy', 'Labor Markets', or 'Fiscal Policy'. The post must include a subject between 5 and 120 characters and content between 10 and 5,000 characters. The system automatically assigns the current UTC timestamp as the creation date and sets the status to 'pending' regardless of the user's authentication level.\n\nThe request body includes the topic identifier and content, with authentication handled through a JWT token that identifies the member creating the post. The system notes the member's ID in the database and ensures all posts are properly attributed for moderation purposes. After submission, the system renders a success message to the member indicating that moderation is required before public visibility.\n\nPosts that fail validation (empty content, wrong topic format, exceeding character limits) are rejected immediately with appropriate error messages. The post history is preserved in the database with timestamps, and all modifications are logged through the admin_id and moderation_reason fields for audit purposes. This ensures accountability and compliance with the platform's civil discourse principles.","parameters":[],"requestBody":{"description":"Creation data for a new discussion post including topic reference and content","typeName":"IEconomicBoardPost.ICreate"},"responseBody":{"description":"Confirmation of post creation with system-assigned identifiers and status","typeName":"IEconomicBoardPost"},"authorizationRoles":["member","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created before it can be referenced in a post. The post requires a valid economic_board_topics_id that must correspond to an existing topic in the economic_board_topics table."}]},{"specification":"This operation retrieves a specific economic/political discussion post by its unique identifier. The system checks the post's moderation status and only returns publicly visible content. Posts with 'pending', 'rejected', or 'deleted' status are not returned as successful responses, returning 404 instead. The response includes the full subject, content, topic reference, timestamps, editing status, moderation details, and reply count. All data is generated from the economic_board_posts table and its related topics, ensuring schema-compliance and data integrity.","path":"/economicBoard/posts/{postId}","method":"get","summary":"Retrieve a specific economic/political discussion post by ID","description":"This operation retrieves a single economic or political discussion post identified by its unique UUID. The system validates the requested post ID and then checks its moderation status against the system's privacy and moderation rules.\n\nPosts with status 'published' are returned with complete content including the subject, full text, creation and update timestamps, topic reference, editing status, moderation reason (if applicable), and reply count. If the post has a non-'published' status (pending, rejected, or deleted), the system returns a 404 Not Found response to maintain the integrity of the moderation workflow and prevent exposure of unapproved content.\n\nThe post data structure mirrors exactly the fields defined in the economic_board_posts Prisma schema: id, economic_board_topics_id, created_at, updated_at, status, subject, content, reply_count, edited, edited_at, author_hash, admin_id, and moderation_reason. The topic field is referenced via the topic relationship to economic_board_topics table, ensuring that topic names are correctly resolved from the predefined fixed list.\n\nPost authors are displayed anonymously as requested by the platform's design — no member names or guest identifiers are exposed in this response. The system honors the business rule that all authors appear as 'Anonymous' to users, with personal identifiers (including author_hash) only accessible to administrators for moderation purposes and never exposed to public views.\n\nThis operation supports public access to approved content while strictly enforcing privacy rules around moderated content, aligning with the platform's mission of civil discourse without public exposure of unverified contributions.","parameters":[{"name":"postId","description":"Unique identifier of the discussion post to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the published discussion post including content, metadata, and topic association","typeName":"IEconomicBoardPost"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created before a post referencing it can be retrieved, as the post requires a valid economic_board_topics_id to exist in the system"}]},{"specification":"This operation updates an existing economic board post. It accepts a post ID and the updated content, subject, and moderation details. The system validates that the post exists and is in 'published' or 'rejected' status (not 'deleted'). The post's updated_at timestamp is set to current time, and edited flag is set to true. The operation is restricted to members who created the post or administrators. Admins can update any post's moderation status regardless of who created it, but members can only update their own posts within 24 hours of creation, as specified in business rules.","path":"/economicBoard/member/posts/{postId}","method":"put","summary":"Update an existing economic board post","description":"This operation allows authorized users to modify the content or subject of an existing economic board post.\n\nThe post must be in either 'published' or 'rejected' status to be eligible for modification. Posts with 'deleted' status cannot be updated, and attempts to update them will result in a 404 Not Found response, as the record is permanently removed from active system state.\n\nFor members, updates are only permitted within 24 hours of the post's original creation timestamp. If the 24-hour window has expired, the update request will be denied with a 403 Forbidden response, regardless of the content changes being requested. This restriction enforces the system's business rule of limiting post editing to a brief period after submission.\n\nAdministrators have broader permissions and can update any post's content, subject, or moderation status at any time. When an admin updates a post's status (e.g., from 'rejected' to 'published'), the system records the admin ID and any moderation_reason provided in the request. The moderation_reason field can be used to document the rationale for status changes.\n\nThe system automatically sets the updated_at timestamp to the current UTC time and sets the edited flag to true when content or subject fields are modified. If the original poster's user ID is provided in the JWT token, the system performs ownership verification against the author_hash or member association before allowing the update.\n\nThis operation is critical for maintaining content integrity while respecting both user edit windows and administrative authority. It supports the platform's core principle of structured, time-limited editing balanced with authoritative moderation.","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target economic board post to update. Must match an existing record in the economic_board_posts table. The system validates that the post exists and is not in 'deleted' status before allowing modification."}],"requestBody":{"description":"Update details for the economic board post including content, subject, and optional moderation state changes.","typeName":"IEconomicBoardPost.IUpdate"},"responseBody":{"description":"The updated economic board post details including new content, subject, timestamps, and moderation status.","typeName":"IEconomicBoardPost"},"authorizationRoles":["member","admin"],"name":"update","authorizationRole":"member","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing economic board post. It accepts a post ID and the updated content, subject, and moderation details. The system validates that the post exists and is in 'published' or 'rejected' status (not 'deleted'). The post's updated_at timestamp is set to current time, and edited flag is set to true. The operation is restricted to members who created the post or administrators. Admins can update any post's moderation status regardless of who created it, but members can only update their own posts within 24 hours of creation, as specified in business rules.","path":"/economicBoard/admin/posts/{postId}","method":"put","summary":"Update an existing economic board post","description":"This operation allows authorized users to modify the content or subject of an existing economic board post.\n\nThe post must be in either 'published' or 'rejected' status to be eligible for modification. Posts with 'deleted' status cannot be updated, and attempts to update them will result in a 404 Not Found response, as the record is permanently removed from active system state.\n\nFor members, updates are only permitted within 24 hours of the post's original creation timestamp. If the 24-hour window has expired, the update request will be denied with a 403 Forbidden response, regardless of the content changes being requested. This restriction enforces the system's business rule of limiting post editing to a brief period after submission.\n\nAdministrators have broader permissions and can update any post's content, subject, or moderation status at any time. When an admin updates a post's status (e.g., from 'rejected' to 'published'), the system records the admin ID and any moderation_reason provided in the request. The moderation_reason field can be used to document the rationale for status changes.\n\nThe system automatically sets the updated_at timestamp to the current UTC time and sets the edited flag to true when content or subject fields are modified. If the original poster's user ID is provided in the JWT token, the system performs ownership verification against the author_hash or member association before allowing the update.\n\nThis operation is critical for maintaining content integrity while respecting both user edit windows and administrative authority. It supports the platform's core principle of structured, time-limited editing balanced with authoritative moderation.","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target economic board post to update. Must match an existing record in the economic_board_posts table. The system validates that the post exists and is not in 'deleted' status before allowing modification."}],"requestBody":{"description":"Update details for the economic board post including content, subject, and optional moderation state changes.","typeName":"IEconomicBoardPost.IUpdate"},"responseBody":{"description":"The updated economic board post details including new content, subject, timestamps, and moderation status.","typeName":"IEconomicBoardPost"},"authorizationRoles":["member","admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes an economic board post with immediate effect. The system removes the post from all public views and search results. This is a hard delete operation since the economic_board_posts table does not contain any soft delete columns such as 'deleted_at' or 'is_deleted'. The deletion is logged internally using schema fields: admin_id, moderation_reason, and the delete timestamp. This operation is restricted to admins only, as per business rules, and cannot be performed by members or guests.","path":"/economicBoard/admin/posts/{postId}","method":"delete","summary":"Permanently delete an economic board post","description":"This operation permanently removes an economic board post from the system with no possibility of recovery.\n\nThe system performs a hard delete, as the economic_board_posts table does not contain any soft delete fields (such as deleted_at or is_deleted). This aligns with the requirements specified in the business rules, which state that when an admin deletes a post, the content is removed permanently and cannot be restored under any circumstances.\n\nThe deletion is only permitted when performed by an admin user. Members and guests cannot trigger deletion of any posts, even those they created. Successful deletion requires a valid admin JWT token containing the 'admin' role.\n\nUpon successful deletion, the system:\n\n1. Completely removes all data from the economic_board_posts record\n2. Removes all associated replies from the economic_board_replies table using cascading delete\n3. Records the deletion event internally using the admin_id field (the ID of the admin who performed the deletion)\n4. Stores any provided moderation_reason to document why the post was deleted\n5. Sets the updated_at field to the deletion timestamp\n6. Changes the status field from its current value to 'deleted'\n\nThe deleted record is no longer accessible through any public endpoint, including search and topic filtering. Any attempts to retrieve the post by ID will return a 404 Not Found response.\n\nFor audit purposes, the system retains the deleted record's metadata in its logical form (including admin_id and moderation_reason), but this data is not exposed through any API endpoint and is treated as an internal operational log.\n\nThis implementation strictly adheres to the business rule that admin deletions are final and irreversible. The absence of soft delete columns in the schema dictates this hard delete behavior, ensuring data integrity and simplifying the system's data retention model while still maintaining sufficient audit trails for moderation transparency.","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target economic board post to delete. Must match an existing record in the economic_board_posts table. The system ensures that only admins can perform this operation, and the deletion is permanent and irreversible."}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must be created before a post can be associated with it, and posts can only be deleted if they reference existing topics from the predefined set"}]},{"specification":"This operation retrieves a specific reply to a post in the economic discussion board. It operates on the economic_board_replies table from the Prisma schema and returns detailed information about a single reply identified by its unique ID. The operation requires the post ID and reply ID as path parameters to locate the specific reply within the hierarchical discussion structure. This endpoint supports direct navigation to individual replies for detailed viewing.","path":"/economicBoard/posts/{postId}/replies/{replyId}","method":"get","summary":"Retrieve a specific reply to a post by unique identifier","description":"This operation retrieves a specific reply to an economic/political discussion post. The reply must be identified by both the parent post's unique identifier and the reply's unique identifier. This ensures the reply is properly contextualized within the discussion thread hierarchy.\n\nThe operation returns complete details about the reply including its content, creation timestamp, and update timestamp. The reply content is constrained to 5-1,000 characters as per business rules and includes no moderation status since replies are automatically published without requiring admin approval.\n\nSecurity considerations ensure that only authenticated users or guests can access published replies, and that replies cannot be accessed if their parent post has been deleted or rejected. The reply's guest identifier is not exposed in the response for privacy purposes, as anonymous posting is permitted on the platform.\n\nThis operation integrates with the economic_board_replies table as defined in the Prisma schema, incorporating all available reply fields. The response includes only the essential information needed for display in a discussion thread, with timestamps in ISO 8601 format for consistency with system requirements.","parameters":[{"name":"postId","in":"path","description":"Unique identifier of the parent post to which the reply belongs","schema":{"type":"string","format":"uuid"}},{"name":"replyId","in":"path","description":"Unique identifier of the specific reply to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific reply to a post","typeName":"IEconomicBoardReplies"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/economicBoard/admin/topics","method":"post"},"description":"Topic must exist before a post can be created and referenced, as all posts must be associated with one of the seven predefined topics"},{"endpoint":{"path":"/economicBoard/member/posts","method":"post"},"description":"Parent post must exist and be created before a reply can be retrieved, as replies are always linked to existing posts"}]},{"specification":"This operation searches for replies to a specific post in the economic discussion board. It operates on the economic_board_replies table from the Prisma schema and supports complex filtering, sorting, and pagination of replies associated with a given post. This endpoint enables users to retrieve collections of replies in a structured format with advanced querying capabilities.","path":"/economicBoard/posts/{postId}/replies","method":"patch","summary":"Search and retrieve a paginated list of replies to a post","description":"This operation retrieves a filtered and paginated list of replies associated with a specific economic/political discussion post. The post is identified by its unique identifier in the path parameter, ensuring all replies are contextually grouped under the correct parent post.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Replies can be sorted by creation timestamp in ascending or descending order to facilitate chronological discussion viewing. Search capabilities allow filtering replies by content keywords, enabling users to find specific responses within lengthy threads.\n\nSecurity considerations ensure that only published replies are returned, excluding any replies to deleted or rejected posts. The response includes only essential reply information optimized for display in a discussion thread, with timestamps in ISO 8601 format for consistency with system requirements.\n\nThis operation integrates with the economic_board_replies table as defined in the Prisma schema, incorporating all available reply fields. The response includes the reply content, creation timestamp, update timestamp, and associated guest identifier, with the guest details masked for anonymous posting compliance.","parameters":[{"name":"postId","in":"path","description":"Unique identifier of the parent post for which replies are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering replies","typeName":"IEconomicBoardReplies.IRequest"},"responseBody":{"description":"Paginated list of reply information matching search criteria","typeName":"IPageIEconomicBoardReplies"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[]},{"specification":"This operation creates a new reply to a specific post in the economic/political discussion board. It accepts a reply content string and associates it with the target post identified by postId. The reply is automatically published without moderation and linked to the anonymous guest who submitted it. This operation is used when a member responds to a post in the discussion thread.","authorizationType":null,"description":"This operation allows a member to create a new reply to a specific post in the economic/political discussion board. The reply content must be between 5 and 1,000 characters as per business rules. When a reply is submitted, the system automatically assigns it the current timestamp and links it to the parent post identified by the postId path parameter. Replies are automatically published immediately without requiring admin approval, unlike posts which undergo moderation.\n\nThe operation requires the user to be authenticated as a member (with a valid JWT token) to submit a reply. Guests are prohibited from posting replies, and attempts by guest users will result in a 403 Forbidden response. The reply's author is tracked through the guest's session, which is linked to the economic_board_guest table in the database.\n\nThe reply is stored in the economic_board_replies table, with a foreign key relationship to the economic_board_posts table via the economic_board_post_id field. The reply has no direct relation to a specific member account but is tied to the guest session that initiated the post. This preserves anonymity while maintaining a connection to the user's interaction context.\n\nThis operation interacts directly with the economic_board_posts table to increment the reply_count field after a successful reply submission. It also updates the updated_at timestamp on the parent post to reflect recent activity.\n\nError conditions include: reply content below 5 characters (rejected), content exceeding 1000 characters (truncated or rejected), missing postId parameter, or attempting to reply to a non-existent post (404 response). The system responds with appropriate HTTP status codes and contextual messages for each error scenario.","summary":"Create a new reply to a specific post","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target post to which the reply is being submitted. This must correspond to an existing economic_board_posts record."}],"requestBody":{"description":"Content of the reply to be submitted to the target post. Must be between 5 and 1,000 characters.","typeName":"IEconomicBoardReply.ICreate"},"responseBody":{"description":"The created reply with its system-generated identifier and creation timestamp.","typeName":"IEconomicBoardReply"},"authorizationRole":"member","name":"create","path":"/economicBoard/member/posts/{postId}/replies","method":"post","prerequisites":[]},{"specification":"This operation updates an existing reply to a specific post in the economic/political discussion board. It allows members to edit their own replies within a 24-hour window after submission. The edit operation updates the reply content and timestamp without changing the original submission date, and it marks the reply as edited. This operation supports revision history while preserving the chronological context of the discussion.","authorizationType":null,"description":"This operation allows a member to update their previously submitted reply to a specific post within the 24-hour editing window. The edit is permissible only when the reply's creation timestamp is within the last 86,400 seconds (24 hours). The operation updates the reply content, sets the updated_at timestamp to the current time, and marks the edited flag as true in the economic_board_replies table.\n\nThe system enforces strict ownership validation to ensure that only the user who originally submitted the reply can edit it. This is determined by matching the reply's associated guest session (economic_board_guest_id) with the authenticated member's session (in the JWT token). Attempts by other users to edit a reply will result in a 403 Forbidden response.\n\nThe updated reply content must still conform to the character limits of 5 to 1,000 characters. Content below 5 characters will be rejected with a validation error, and content exceeding 1,000 characters will either be truncated or rejected depending on system configuration.\n\nAfter a successful edit, the system appends a visual \"[Edited]\" marker to the reply in the user interface and retains the original creation timestamp while updating the updated_at field. This preserves the conversation's chronological integrity while allowing for corrections.\n\nThis operation directly interacts with the economic_board_replies table, modifying only the content, updated_at, and edited fields. It does not affect the parent post or any other replies. Edits are immediately visible to all users and do not require re-approval.\n\nError conditions include: edit attempt after 24 hours (returning 403 Forbidden with message \"Edits are only permitted within 24 hours of posting\"), attempting to edit a non-existent reply, editing a reply belonging to another user, or providing invalid content length. The system responds with appropriate HTTP status codes and clear error messages for each scenario.","summary":"Update an existing reply","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target post that the reply belongs to. This must correspond to an existing economic_board_posts record."},{"name":"replyId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the specific reply to be updated. This must correspond to an existing economic_board_replies record."}],"requestBody":{"description":"Updated content of the reply to replace the existing content. Must be between 5 and 1,000 characters.","typeName":"IEconomicBoardReply.IUpdate"},"responseBody":{"description":"The updated reply with its modified content, updated_at timestamp, and edited flag set to true.","typeName":"IEconomicBoardReply"},"authorizationRole":"member","name":"update","path":"/economicBoard/member/posts/{postId}/replies/{replyId}","method":"put","prerequisites":[{"endpoint":{"path":"/economicBoard/member/posts/{postId}/replies","method":"post"},"description":"Reply must be created before it can be updated. The system needs the reply to exist in the economic_board_replies table with a valid id and associated postId."}]},{"specification":"This operation permanently deletes a specific reply to a posted message within the economic/political discussion board system. The operation targets the economic_board_replies table in the Prisma schema. This is a hard delete operation as there is no soft-delete column (such as deleted_at) in the economic_board_replies schema. Once deleted, the reply is permanently removed from the database with no possibility of recovery. This action also decrements the reply_count on the parent economic_board_posts record. The deletion is irreversible and must be performed only by authorized personnel.","path":"/economicBoard/admin/posts/{postId}/replies/{replyId}","method":"delete","summary":"Permanently delete a specific reply to a post","description":"This operation permanently removes a specific reply to a post from the system. This is a hard delete operation, meaning the reply data is completely removed from the database with no possibility of recovery. The economic_board_replies table schema lacks any soft-delete columns (such as deleted_at or is_deleted), so removal is final and irreversible.\n\nThe deletion is subject to system authorization rules: only administrators are permitted to initiate this deletion. The system maintains no mechanism for users to delete replies they have posted. This design ensures that once a reply (which is automatically published without moderation) appears on the forum, it becomes part of the permanent public record unless removed by an administrator for policy violations.\n\nWhen a reply is deleted, the system automatically decrements the reply_count field in the corresponding parent economic_board_posts record to maintain data integrity. The deletion process removes all associated metadata including the original content, timestamps, and references to the guest author.\n\nThis operation is designed for administrative moderation only and cannot be initiated by guests or registered members. It represents the ultimate enforcement mechanism for removing content that violates community standards after publication. There is no notification sent to the author whose reply is deleted, maintaining the principle of anonymous participation.\n\nThe system does not archive or log the deleted content for later recovery; complete removal is the intended behavior to prevent abuse and preserve system integrity.","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent post to which the reply belongs"},{"name":"replyId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the reply to be deleted"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/economicBoard/member/posts/{postId}/replies","method":"post"},"description":"Reply must be created before it can be deleted. The system needs the reply to exist in the economic_board_replies table with a valid id and associated postId."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users who can view all posts and read topic categories, but cannot create, edit, or delete content.","kind":"guest"},{"name":"member","description":"Authenticated users who can create new posts, reply to existing posts, and edit their own posts within 24 hours. Posts by members are subject to moderation before becoming public.","kind":"member"},{"name":"admin","description":"System administrators who can moderate all content, delete inappropriate posts, approve pending posts, and manage topic categories.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIEconomicBoardTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconomicBoardTopic"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconomicBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconomicBoardGuest"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconomicBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconomicBoardMember"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconomicBoardAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconomicBoardAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconomicBoardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconomicBoardPost"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconomicBoardReplies":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconomicBoardReplies"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IEconomicBoardGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated guest session.\n\nThis UUID is assigned by the system when a guest first accesses the platform. It serves as a persistent identifier for tracking guest interactions without requiring registration.\n\nThis identifier is linked to the session_id in the economic_board_guest table and remains stable across multiple visits within the session lifespan (up to 30 days)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token for guest session.\n\nThis response is returned after successful guest session creation or refresh operations. It provides the necessary authentication credentials for temporary anonymous access to the platform without requiring registration.\n\nThe identifier represents the guest's unique session and is used to maintain state across interactions. The JWT token enables stateless authentication while maintaining the platform's commitment to user privacy."},"IEconomicBoardMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address used for registration and verification.\n\nThis email serves as the member's primary identifier for authentication and communication.\n\nThe system enforces uniqueness constraints on this field, preventing multiple accounts from registering with the same email.\n\nThe email address must be valid and properly formatted to pass system validation, ensuring future communication channels (such as verification emails) can be delivered successfully.\n\nThis field is required for member registration and must be provided with every new member creation request."},"password_hash":{"type":"string","description":"Hashed password for authentication using bcrypt algorithm.\n\nThis field stores the cryptographic hash of the user's password, never storing the plain-text version.\n\nThe hashing is performed server-side using industry-standard bcrypt with a salt, ensuring the original password cannot be derived from this value.\n\nThe input password is transformed into a 60-character string that includes salt and hash components, making it suitable for direct comparison during login.\n\nThis field is mandatory for member registration and must be provided with every new member creation request. The system prohibits direct submission of plain-text passwords for security reasons."}},"required":["email","password_hash"],"description":"Registration data for creating a new member account.\n\nThis schema defines the required input structure for registering a new member on the economic/political discussion board.\n\nIt contains only the essential fields needed for account creation: a unique email address and a cryptographically hashed password. The system automatically generates other fields such as the member's UUID (id), creation timestamp (created_at), and initial authentication token identifier (auth_jwt_id), which are set by the system and never provided by the client.\n\nThis model follows the principle of least privilege for registration, requiring only the information necessary to establish identity and authenticate future logins. Sensitive system-managed fields like id, created_at, and last_login are excluded, ensuring they are set exclusively by the system upon account creation.\n\nRegistration does not require email verification at this stage - verification is handled asynchronously in a separate workflow, with the verified_at field being populated later."},"IEconomicBoardMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member.\n\nThis value corresponds to the id field in the economic_board_member table and is used to uniquely identify the member across the system. It is generated as a UUID upon account creation and is immutable.\n\nThis property is essential for all subsequent operations that require member identification, such as posting, editing, and accessing personal information. It enables the system to link authentication tokens to specific member accounts while maintaining anonymity in public-facing interactions."},"email":{"type":"string","format":"email","description":"Unique email address used for account registration and verification. Must be validated before full privileges are granted.\n\nThis field contains the email address provided by the user during registration. The email address is stored verbatim and is used as the primary identifier for authentication and communication (e.g., verification emails).\n\nThis field must be unique across all members and is validated for proper email format. The email address is not considered personally identifiable information (PII) for the purpose of user anonymity since the platform does not expose it publicly.\n\nThe registration workflow requires email verification before the verified_at field is populated, aligning with the business rule for account security."},"password_hash":{"type":"string","description":"Hashed password for authentication. Never stores plain text passwords.\n\nThis field contains a cryptographic hash of the member's password, generated using a secure hashing algorithm (such as bcrypt). The system never stores plain text passwords, ensuring security compliance.\n\nThe hash is computed when a new member registers or changes their password, and it is compared against during the login process to authenticate the user. The hash value itself is not reversible, protecting user credentials even if the database is compromised.\n\nThis field is critical for the authentication process and must be handled with the highest security standards, as it is the core of the member's account security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was registered.\n\nThis immutable timestamp records the exact date and time (in ISO 8601 format) when the member registered their account. It serves as an audit trail and is used in business logic such as determining account age for policy application.\n\nThis field is set once at registration and is never modified, ensuring the integrity of the registration history."},"verified_at":{"type":"string","format":"date-time","description":"Timestamp when email verification was completed. Null until verified.\n\nThis field is initially null and is only populated when the member completes the email verification process by clicking the verification link sent to their email address.\n\nThe presence of a value in this field indicates that the member's email address is confirmed, allowing the account to be considered fully active. Until verified, the member has limited privileges, and in some cases may not be able to create posts without an admin intervention, depending on system policy.\n\nThis field is critical for the platform's security model that requires email verification to prevent spam and ensure accountability."},"last_login":{"type":"string","format":"date-time","description":"The most recent successful login timestamp.\n\nThis field is updated every time the member successfully authenticates with their email and password. It provides a record of recent activity and enables features like session timeout and auto-logout based on inactivity.\n\nThis field is modified by the login and refresh operations and is used to maintain the global access control policy. It is distinct from the created_at timestamp, as it reflects the most recent authentication rather than the initial registration."},"is_active":{"type":"boolean","description":"Flag indicating whether the member account is active. If false, account is suspended and cannot post or log in.\n\nThis boolean flag controls the operational state of the member's account. When true, the member can log in, create posts, and interact with the platform. When false, the account is suspended and all authentication attempts will be denied.\n\nSuspension may occur due to violations of community guidelines, system errors, or administrative actions. This field enables the platform to enforce moderation policies while preserving account integrity.\n\nThe default value is true upon account creation, and it can only be changed by an administrator through system controls."},"auth_jwt_id":{"type":"string","format":"uuid","description":"UUID of the current active JWT token for session management.\n\nThis field stores the unique identifier (UUID) of the current active JWT access token used to maintain the member's session. When a member logs in, a new JWT is generated and its UUID is stored here, binding the session to the member record.\n\nThis field enables the system to track and manage the current session for each member. When a user logs in from a new device, the old session's JWT ID is replaced with the new one, effectively invalidating previous sessions for that member.\n\nThis field is pivotal for the platform's stateless authentication model, allowing efficient session validation without server-side session storage."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","last_login","is_active","auth_jwt_id","token"],"description":"Authorization response containing JWT token and member identification.\n\nThis type is returned after successful authentication operations such as login, join, or token refresh. It combines the member's unique identifier with a JWT access token to establish a secure, authenticated session.\n\nThe response is designed to be minimal yet complete, containing only the essential information required for session management. The member's id is included to identify the authenticated entity, while the token property provides the means for subsequent authenticated requests.\n\nThis structure enables complete JWT token lifecycle management: the access token is used for authorization, and the refresh token (stored securely in a cookie) is used to renew access when it expires. The system does not expose sensitive fields like password_hash or auth_jwt_id in this response for security reasons, in accordance with the Prisma schema and business rules.\n\nAuthentication context is provided by the JWT and not by client submission of identity fields, ensuring security compliance and preventing impersonation."},"IEconomicBoardMember.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nThis parameter specifies which page of results to return when listing members. It must be a positive integer starting from 1. The system uses this value to calculate the offset for database queries.\n\nWhen not provided, the system defaults to page 1. This allows for backward compatibility and ensures that clients can retrieve the first page of results without specifying pagination parameters. The page number operates in conjunction with the limit parameter to determine which subset of members is returned.\n\nThis field is part of a comprehensive search and filtering system that allows administrators to navigate through potentially large collections of member records while maintaining performance through pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of members to return per page.\n\nThis parameter controls pagination by specifying how many member records are included in each response page. The minimum allowed value is 1, and the maximum is 100 to ensure performance and prevent excessive response sizes.\n\nThe limit parameter enables clients to optimize data transfer and processing by retrieving smaller, manageable data chunks. When not provided, the system defaults to a reasonable limit (typically 25). This design ensures efficient loading of data in web interfaces while complying with system-wide performance constraints.\n\nThis parameter works in tandem with the page parameter to implement complete pagination functionality, allowing for efficient navigation through large result sets without requiring clients to fetch all data at once."},"search":{"type":"string","minLength":1,"maxLength":100,"description":"Search term for filtering members by email address.\n\nThis parameter enables keyword-based searching of member records by their email address. The search is case-insensitive and matches any part of the email address.\n\nThe search term must be between 1 and 100 characters to prevent overly broad or malicious queries while maintaining usability. The system performs efficient indexing on the email field to deliver fast search results even with large member databases.\n\nUsers can enter partial emails (e.g., 'john' to find 'john@example.com') or entire email addresses to locate specific members. This functionality supports administrative tasks such as account verification, user investigation, and relationship management.\n\nThe implementation ensures privacy by returning only the subset of members whose email addresses match the search criteria, with no exposure of sensitive information beyond what is visible in the Member record."},"isActive":{"type":"boolean","description":"Filter members by account active status.\n\nThis parameter allows filtering members based on their active status (true) or inactive/suspended status (false). When set to true, only members with is_active = true are returned. When set to false, only members with is_active = false are returned.\n\nThis property is useful for administrators conducting audits, investigating account issues, or managing membership. It enables straightforward filtering of members by their operational status without requiring separate queries for active and inactive users.\n\nWhen not provided, the system returns members with both active and inactive status, providing a complete view of all members in the system."},"sortBy":{"oneOf":[{"const":"email","description":"Field to sort the member list by.\n\nThis parameter determines the field used to sort the returned member records. Valid values are 'email' (alphabetical order), 'created_at' (registration date), or 'last_login' (most recent login).\n\nThe system defaults to sorting by 'created_at' (registration date descending) when not specified, which provides a chronological view of membership growth. This sorting option supports administrative workflows that require evaluating member acquisition trends.\n\nThis property enables flexible ordering of result sets to meet various administrative needs while ensuring consistent, predictable behavior across the system."},{"const":"created_at","description":"Field to sort the member list by.\n\nThis parameter determines the field used to sort the returned member records. Valid values are 'email' (alphabetical order), 'created_at' (registration date), or 'last_login' (most recent login).\n\nThe system defaults to sorting by 'created_at' (registration date descending) when not specified, which provides a chronological view of membership growth. This sorting option supports administrative workflows that require evaluating member acquisition trends.\n\nThis property enables flexible ordering of result sets to meet various administrative needs while ensuring consistent, predictable behavior across the system."},{"const":"last_login","description":"Field to sort the member list by.\n\nThis parameter determines the field used to sort the returned member records. Valid values are 'email' (alphabetical order), 'created_at' (registration date), or 'last_login' (most recent login).\n\nThe system defaults to sorting by 'created_at' (registration date descending) when not specified, which provides a chronological view of membership growth. This sorting option supports administrative workflows that require evaluating member acquisition trends.\n\nThis property enables flexible ordering of result sets to meet various administrative needs while ensuring consistent, predictable behavior across the system."}],"description":"Field to sort the member list by.\n\nThis parameter determines the field used to sort the returned member records. Valid values are 'email' (alphabetical order), 'created_at' (registration date), or 'last_login' (most recent login).\n\nThe system defaults to sorting by 'created_at' (registration date descending) when not specified, which provides a chronological view of membership growth. This sorting option supports administrative workflows that require evaluating member acquisition trends.\n\nThis property enables flexible ordering of result sets to meet various administrative needs while ensuring consistent, predictable behavior across the system."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction.\n\nThis parameter specifies whether the sort should be ascending ('asc') or descending ('desc'). It works in conjunction with the sortBy parameter to control the ordering of the member list.\n\n'asc' returns records from oldest to newest based on the sortBy field, while 'desc' returns records from newest to oldest. The default value is 'desc' for all fields to prioritize recent records first, which is most useful in administrative contexts.\n\nThis flexible sorting mechanism allows administrators to analyze member data in multiple perspectives, whether tracking historical growth patterns ('asc') or identifying recent activity ('desc')."},{"const":"desc","description":"Sort order direction.\n\nThis parameter specifies whether the sort should be ascending ('asc') or descending ('desc'). It works in conjunction with the sortBy parameter to control the ordering of the member list.\n\n'asc' returns records from oldest to newest based on the sortBy field, while 'desc' returns records from newest to oldest. The default value is 'desc' for all fields to prioritize recent records first, which is most useful in administrative contexts.\n\nThis flexible sorting mechanism allows administrators to analyze member data in multiple perspectives, whether tracking historical growth patterns ('asc') or identifying recent activity ('desc')."}],"description":"Sort order direction.\n\nThis parameter specifies whether the sort should be ascending ('asc') or descending ('desc'). It works in conjunction with the sortBy parameter to control the ordering of the member list.\n\n'asc' returns records from oldest to newest based on the sortBy field, while 'desc' returns records from newest to oldest. The default value is 'desc' for all fields to prioritize recent records first, which is most useful in administrative contexts.\n\nThis flexible sorting mechanism allows administrators to analyze member data in multiple perspectives, whether tracking historical growth patterns ('asc') or identifying recent activity ('desc')."}},"required":[],"description":"Request parameters for searching and filtering member records with pagination, sorting, and search capabilities.\n\nThis schema defines the complete set of parameters available for querying up the collection of economic_board_member records. It enables sophisticated filtering and sorting operations that support administrative dashboard functionality.\n\nThe parameters in this schema work together to provide a comprehensive search interface for member management:\n- page and limit implement standard pagination\n- search enables keyword search by email\n- isActive filters by account status\n- sortBy and order control sorting behavior\n\nAll parameters are optional to support flexible query building. This design follows the established pattern of the Economic/Political Discussion Board API, where search operations use PATCH requests with complex request bodies rather than GET with URL parameters, allowing for more complex queries than URL encoding can support.\n\nThe system strictly enforces the constraints defined here (minimum/maximum values, allowed values for enums) to ensure data integrity, performance, and security. Unauthorized or malformed requests will result in appropriate error responses.\n\nThis request model ensures efficient data retrieval by leveraging database indexing on email, created_at, and last_login fields, while maintaining alignment with the Prisma schema structure that defines actual database columns."},"IEconomicBoardAdmin.IJoin":{"type":"object","properties":{"email":{"type":"string","description":"Email address for the new admin account. Must be unique and pre-authorized by the system owner.\n\nThis field corresponds to the email attribute in the economic_board_admin table. Only specific, pre-approved email addresses can be used to register new admin accounts. This ensures that only authorized individuals can gain administrative privileges.\n\nThe system does not permit public registration of admin accounts - this endpoint is strictly for initial setup or when an existing admin has been authorized to onboard new admins."},"password":{"type":"string","description":"Plain text password for the new admin account.\n\nThe system will hash this value using bcrypt before storing it as password_hash in the economic_board_admin table. This ensures secure storage of passwords, never storing plain text values in the database.\n\nPassword requirements: minimum 12 characters, must include uppercase, lowercase, numbers and special characters, per system security policy. Passwords cannot be shared or transferred between accounts."}},"required":["email","password"],"description":"Input data required to create a new admin account.\n\nThis schema defines the request body structure for registering a new system administrator account.\n\nThe operation creates a new record in the economic_board_admin table, initializing:\n- email: The provided email address for admin identification\n- password_hash: The bcrypt-hashed version of the provided password\n- created_at: Current UTC timestamp\n- last_login: Initially set to created_at value\n- is_active: true (enabled for immediate login)\n- auth_jwt_id: null (to be set upon first successful login)\n\nThis endpoint is restricted to operational setup and ecosystem onboarding procedures. Public registration for admin accounts is strictly prohibited to maintain system security boundaries.\n\nThe password provided here is always sent in plain text and is never stored as-is. The system handles all password hashing internally to ensure compliance with modern security standards."},"IEconomicBoardAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin.\n\nThis UUID corresponds to the id field in the economic_board_admin table and uniquely identifies the admin account within the system. It is used for audit trails, permission checks, and session management."},"email":{"type":"string","description":"Email address of the admin. Must match a pre-approved list defined in system configuration.\n\nThis field contains the email address that was registered for the admin account during system provisioning.\n\nIt serves as the primary credential for authentication and remains fixed throughout the admin account's lifecycle.\n\nThe email must be one of the addresses pre-approved by the system owner and cannot be changed after creation.","examples":{"v0":"admin@economicboard.gov"}},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was provisioned by the system owner.\n\nThis field records the exact moment when the admin account was created and added to the system.\n\nFormat: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis timestamp is immutable and establishes the account's history in the system, which is useful for audit trails and determining account age.","examples":{"v0":"2025-01-15T08:30:00Z"}},"last_login":{"type":"string","format":"date-time","description":"The most recent successful admin login timestamp.\n\nThis field is updated each time the admin successfully authenticates with the system.\n\nFormat: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).\n\nMonitoring this timestamp helps identify inactive admin accounts, which may require security review, and provides insight into administrative activity patterns.\n\nThis field is also used in filtering and sorting administrative accounts through search functionality.","examples":{"v0":"2025-10-07T14:22:15Z"}},"is_active":{"type":"boolean","description":"Flag indicating whether the admin account is active. If false, login and moderation access are denied.\n\nThis boolean field determines whether the admin account can currently login and perform moderation actions.\n\nWhen set to false, the account is suspended, preventing any login attempts and administrative operations.\n\nThis field is useful for temporarily deactivating accounts without permanently deleting them, which preserves audit history and allows for easy reactivation if needed.\n\nThe default value is true when the account is created.","examples":{"v0":true,"v1":false}},"auth_jwt_id":{"type":"string","format":"uuid","description":"UUID of the current active JWT token for admin session management.\n\nThis field contains a reference to the currently active access token used for session authentication.\n\nWhen an admin logs in, a new JWT access token is generated, and its UUID is stored here to bind the session to the admin account.\n\nSubsequent requests use the JWT token for authentication, and the system validates that the token's UUID matches the value stored in auth_jwt_id.\n\nIf multiple sessions exist for the same user, each session will have a unique JWT UUID, but only the most recent one is tracked in this field.","examples":{"v0":"123e4567-e89b-12d3-a456-426614174001"}},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","created_at","last_login","is_active","auth_jwt_id","token"],"description":"Authorization response containing JWT token for admin.\n\nThis response is returned after successful authentication operations such as admin login, join, or token refresh.\n\nThe structure contains two essential components:\n\n1. id: The unique UUID identifier of the authenticated admin, matching the identity stored in economic_board_admin table.\n2. token: The JWT token that authenticates all subsequent requests, structured according to the standard IAuthorizationToken schema.\n\nThe token enables secure, stateless authentication for the admin throughout the session duration. All protected endpoints validate this token against the admin's auth_jwt_id in the database.\n\nThis response format ensures complete JWT token lifecycle management and compliance with standard authentication patterns across the API."},"IEconomicBoardAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the admin for authentication. Must match a pre-approved list defined in system configuration."},"password":{"type":"string","description":"Plain text password for authentication. The system will hash this value before storage and comparison. Never send hashed passwords from clients."}},"required":["email","password"],"description":"Login credentials for admin authentication.\n\nThis schema defines the request body structure for the admin login endpoint. It includes the email and plain text password fields required for authenticating an admin user in the system.\n\nThe email MUST be an exact match to a pre-approved admin email in the system configuration. The password is received as plain text and will be hashed server-side using industry-standard bcrypt before comparison with the stored password_hash in the economic_board_admin table.\n\nNever send hashed_password or password_hash from the client - only plain text passwords are accepted. This ensures proper password handling security practices.\n\nThis structure aligns directly with the economic_board_admin schema, validating against the email and password_hash fields, while maintaining security by never exposing hashed credentials to the client."},"IEconomicBoardAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token that was stored in an httpOnly cookie during the initial admin login.\n\nThis refresh token is required to obtain a new access token when the current one expires. It is cryptographically signed and contains no sensitive information, but must be transmitted securely in a secure, httpOnly cookie for protection against XSS attacks.\n\nThe refresh token's validity is checked against the stored auth_jwt_id in the economic_board_admin table. Its expiration is typically 30 days from initial issuance, after which a full re-login is required."}},"required":["refresh_token"],"description":"Refresh token for admin access credential renewal.\n\nThis schema defines the request body structure for the admin refresh token endpoint. It contains the refresh token that was issued during the initial admin login and stored in an httpOnly cookie on the client.\n\nThe system validates this refresh token against the admin's auth_jwt_id and expiration time. If valid, a new access token is generated and the auth_jwt_id in the economic_board_admin table is updated to this new token's UUID.\n\nThe refresh token is never stored client-side in localStorage or similar insecure storage. This structure is minimal by design - it contains only the refresh token, nothing else.\n\nThe refresh operation implements token rotation for enhanced security: a new refresh token may be generated on successful refresh, invalidating the previous one to prevent replay attacks."},"IEconomicBoardPosts":{"type":"object","x-autobe-prisma-schema":"economic_board_posts","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for each economic board post.\n\nThis UUID is automatically generated by the system upon post creation and serves as the unique identifier for referencing the post in all interactions.\n\nIt is used in API endpoints to retrieve, update, or delete specific posts and is essential for maintaining referential integrity across related entities such as replies and moderation logs."},"economic_board_topics_id":{"type":"string","format":"uuid","description":"Topic that this post belongs to. {@link economic_board_topics.id}.\n\nThis field references the predefined topic category from the economic_board_topics table.\n\nThe topic must be one of the seven system-defined categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", or \"Fiscal Policy\".\n\nThis field establishes the categorization of the post and is mandatory for all submissions. It ensures content is organized within predefined discussion domains and cannot be set to custom or undefined values.\n\nThe foreign key relationship cascades on delete, meaning if a topic is permanently deleted, all associated posts are also deleted."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was submitted.\n\nThis field records the exact UTC moment when the post was created and submitted to the system.\n\nIt is automatically set by the system and cannot be modified by users or administrators. This timestamp is used for chronological display of posts, moderation timelines, and as a reference for edit windows (24-hour limit).\n\nThe format follows ISO 8601 with timezone offset to ensure global consistency and accurate time tracking regardless of user location."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last edited.\n\nThis field is automatically updated whenever the post's content or subject is modified by the original author within the 24-hour edit window.\n\nIt reflects the last time the post content was changed and is used to determine the most recent state of the post for display purposes.\n\nThis field is initialized to the same value as created_at upon submission and updated only upon successful edits. If the post has never been edited, this field will be equal to created_at."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field controls the visibility and lifecycle of the post within the system:\n\n- 'pending': The post has been submitted but remains invisible to all users awaiting admin approval.\n- 'published': The post has been approved by an admin and is visible to all users.\n- 'rejected': The post was reviewed by an admin but deemed non-compliant with community guidelines and is not visible to users.\n- 'deleted': The post was permanently removed by an admin through a hard delete operation.\n\nThis field is the core mechanism for content moderation and ensures that all user-submitted content is vetted before public exposure.\n\nThe value is immutable after a post transitions from 'pending' to one of the other states (after approval/rejection) or when permanently deleted."},{"const":"published","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field controls the visibility and lifecycle of the post within the system:\n\n- 'pending': The post has been submitted but remains invisible to all users awaiting admin approval.\n- 'published': The post has been approved by an admin and is visible to all users.\n- 'rejected': The post was reviewed by an admin but deemed non-compliant with community guidelines and is not visible to users.\n- 'deleted': The post was permanently removed by an admin through a hard delete operation.\n\nThis field is the core mechanism for content moderation and ensures that all user-submitted content is vetted before public exposure.\n\nThe value is immutable after a post transitions from 'pending' to one of the other states (after approval/rejection) or when permanently deleted."},{"const":"rejected","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field controls the visibility and lifecycle of the post within the system:\n\n- 'pending': The post has been submitted but remains invisible to all users awaiting admin approval.\n- 'published': The post has been approved by an admin and is visible to all users.\n- 'rejected': The post was reviewed by an admin but deemed non-compliant with community guidelines and is not visible to users.\n- 'deleted': The post was permanently removed by an admin through a hard delete operation.\n\nThis field is the core mechanism for content moderation and ensures that all user-submitted content is vetted before public exposure.\n\nThe value is immutable after a post transitions from 'pending' to one of the other states (after approval/rejection) or when permanently deleted."},{"const":"deleted","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field controls the visibility and lifecycle of the post within the system:\n\n- 'pending': The post has been submitted but remains invisible to all users awaiting admin approval.\n- 'published': The post has been approved by an admin and is visible to all users.\n- 'rejected': The post was reviewed by an admin but deemed non-compliant with community guidelines and is not visible to users.\n- 'deleted': The post was permanently removed by an admin through a hard delete operation.\n\nThis field is the core mechanism for content moderation and ensures that all user-submitted content is vetted before public exposure.\n\nThe value is immutable after a post transitions from 'pending' to one of the other states (after approval/rejection) or when permanently deleted."}],"description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field controls the visibility and lifecycle of the post within the system:\n\n- 'pending': The post has been submitted but remains invisible to all users awaiting admin approval.\n- 'published': The post has been approved by an admin and is visible to all users.\n- 'rejected': The post was reviewed by an admin but deemed non-compliant with community guidelines and is not visible to users.\n- 'deleted': The post was permanently removed by an admin through a hard delete operation.\n\nThis field is the core mechanism for content moderation and ensures that all user-submitted content is vetted before public exposure.\n\nThe value is immutable after a post transitions from 'pending' to one of the other states (after approval/rejection) or when permanently deleted."},"subject":{"type":"string","maxLength":120,"minLength":5,"description":"Brief title or subject line of the post (max 120 characters).\n\nThis field provides a concise summary of the post's core topic or argument, serving as the title of the discussion thread.\n\nIt must be between 5 and 120 characters to ensure it is descriptive enough to convey context while remaining concise for display in lists and search results.\n\nThe subject is used as the primary clickable link to the full post and appears in topic-overviews, search results, and email notifications.\n\nIt cannot be left empty or contain only whitespace, and is subject to character limits to prevent abuse through excessively long titles."},"content":{"type":"string","maxLength":5000,"minLength":10,"description":"Full text content of the post (max 5,000 characters).\n\nThis field contains the complete body of the discussion contribution, including analysis, commentary, facts, or questions related to the chosen topic.\n\nIt must be at least 10 characters long to ensure substantive input and prevent spam or filler content. Maximum length is 5,000 characters to preserve readability and system performance.\n\nContent is stored exactly as submitted (including markdown or plain text formatting) but is rendered for display according to system conventions.\n\nThis field is never directly modified by administrators; edits can only be made by the original author within the 24-hour window, and if it appears abusive, the post is rejected or deleted rather than edited."},"reply_count":{"type":"integer","minimum":0,"description":"Number of direct replies to this post.\n\nThis field is automatically incremented each time a valid reply is successfully created under this post and decremented when a reply is permanently deleted.\n\nIt provides a quick indicator of engagement for each post and is used to display counts in topic lists and search results.\n\nThe count is always accurate in real time and reflects only top-level replies, not nested replies or replies to replies.\n\nIt is initialized to 0 upon post creation and updated asynchronously as replies are added or removed. This field is derived from the economic_board_replies table and not stored manually."},"edited":{"type":"boolean","description":"Whether this post has been edited after initial submission.\n\nThis is a boolean flag that is set to true when the post's subject or content is successfully modified within the 24-hour edit window after creation.\n\nIf the post has never been edited, this field remains false.\n\nIt does not change when the post's status is updated by an admin (e.g., from pending to published) because those are moderation actions, not user edits.\n\nIt is used in the frontend to display an \"[Edited]\" marker alongside the post to inform users that its content was modified after publication.\n\nThe flag is controlled entirely by the system based on successful edit operations and cannot be manually set by users or admins."},"edited_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of last edit. Null if never edited.\n\nThis field stores the exact UTC timestamp when the post was last modified by the original author within the 24-hour editing window.\n\nIt is initialized to null upon post creation. When the author successfully edits their post, this field is updated to the current timestamp.\n\nIf the post has never been edited, this field remains null.\n\nThis timestamp is used in the user interface to indicate when the edit occurred and to support audit trails.\n\nThis field is used in conjunction with the edited field to determine whether an edit marker should be displayed and when the edit occurred."},{"type":"null"}],"description":"Timestamp of last edit. Null if never edited.\n\nThis field stores the exact UTC timestamp when the post was last modified by the original author within the 24-hour editing window.\n\nIt is initialized to null upon post creation. When the author successfully edits their post, this field is updated to the current timestamp.\n\nIf the post has never been edited, this field remains null.\n\nThis timestamp is used in the user interface to indicate when the edit occurred and to support audit trails.\n\nThis field is used in conjunction with the edited field to determine whether an edit marker should be displayed and when the edit occurred."},"author_hash":{"oneOf":[{"type":"string","description":"System-generated anonymous identifier derived from IP and timestamp for guest posts.\n\nThis field contains a cryptographic hash (e.g., SHA-256) of the guest’s IP address and submission timestamp, creating a pseudo-anonymous identifier for guest-submitted posts.\n\nIt is used by admins for moderation and abuse detection purposes without exposing personally identifiable information.\n\nFor authenticated members, this field is null because the identity is linked to the member record and not the hash.\n\nThe hash is generated automatically by the system upon post creation for guest users and cannot be manually set or modified.\n\nIt ensures accountability for anonymous contributors while preserving user privacy by not storing actual IP addresses or personal data."},{"type":"null"}],"description":"System-generated anonymous identifier derived from IP and timestamp for guest posts.\n\nThis field contains a cryptographic hash (e.g., SHA-256) of the guest’s IP address and submission timestamp, creating a pseudo-anonymous identifier for guest-submitted posts.\n\nIt is used by admins for moderation and abuse detection purposes without exposing personally identifiable information.\n\nFor authenticated members, this field is null because the identity is linked to the member record and not the hash.\n\nThe hash is generated automatically by the system upon post creation for guest users and cannot be manually set or modified.\n\nIt ensures accountability for anonymous contributors while preserving user privacy by not storing actual IP addresses or personal data."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of admin who last modified status (approve/reject/delete).\n\nThis field stores the UUID of the administrator who performed the last moderation action on this post (approve, reject, or delete).\n\nIt records accountability for moderation decisions and is used in internal logs and audit trails.\n\nIt is set to null when the post is created by a user and only updated when an admin performs an action on the post.\n\nIt is not the same as the author of the post; it is specifically the ID of the admin who changed the status, not the person who wrote the content.\n\nThis field is populated automatically by the system during admin moderation operations and should not be set by users or external systems."},{"type":"null"}],"description":"ID of admin who last modified status (approve/reject/delete).\n\nThis field stores the UUID of the administrator who performed the last moderation action on this post (approve, reject, or delete).\n\nIt records accountability for moderation decisions and is used in internal logs and audit trails.\n\nIt is set to null when the post is created by a user and only updated when an admin performs an action on the post.\n\nIt is not the same as the author of the post; it is specifically the ID of the admin who changed the status, not the person who wrote the content.\n\nThis field is populated automatically by the system during admin moderation operations and should not be set by users or external systems."},"moderation_reason":{"oneOf":[{"type":"string","description":"Reason provided by admin for rejection or deletion. Null if not rejected/deleted.\n\nThis field contains the explanatory text provided by administrators when rejecting or deleting a post (e.g., \"Contains hate speech\", \"Off-topic\", \"Duplicate\").\n\nIt is required when rejecting a post, as per business rules, to ensure transparency and accountability in moderation.\n\nThis field is populated during the reject or delete operations and is intended for audit purposes and for potential notifications to the original author.\n\nWhen a post is approved or published, or when no moderation action has been taken, this field remains null.\n\nIt may be NULL for deletions if the admin chooses not to specify a reason, but should ideally be populated even for deletions to maintain data integrity for moderation oversight."},{"type":"null"}],"description":"Reason provided by admin for rejection or deletion. Null if not rejected/deleted.\n\nThis field contains the explanatory text provided by administrators when rejecting or deleting a post (e.g., \"Contains hate speech\", \"Off-topic\", \"Duplicate\").\n\nIt is required when rejecting a post, as per business rules, to ensure transparency and accountability in moderation.\n\nThis field is populated during the reject or delete operations and is intended for audit purposes and for potential notifications to the original author.\n\nWhen a post is approved or published, or when no moderation action has been taken, this field remains null.\n\nIt may be NULL for deletions if the admin chooses not to specify a reason, but should ideally be populated even for deletions to maintain data integrity for moderation oversight."}},"required":["id","economic_board_topics_id","created_at","updated_at","status","subject","content","reply_count","edited","author_hash"],"description":"Core economic and political discussion posts, each associated with a topic and subject to moderation lifecycle.\n\nRepresents a single discussion entry on the economic/political forum, including its content, topic classification, moderation status, and related metadata.\n\nThis model captures the complete lifecycle of a post—from submission by an anonymous guest or registered member, through the mandatory approval process by an admin, to final states of published, rejected, or permanently deleted.\n\nThe post contains exactly two text fields: subject (limited to 120 characters) and content (limited to 5,000 characters) ensuring concise, focused contributions.\n\nIt strictly enforces the pre-defined topic model and does not allow custom categories, aligning with the political community's design principles of controlled, theme-based discourse.\n\nOwnership is preserved via author_hash for guests and relationship to member for registered users, while all moderation actions are logged via admin_id and moderation_reason.\n\nThis schema is designed for auditability, performance, and civil discourse: no voting, no likes, no followers, no persistent user profiles.\n\nIt forms the central entity in the forum’s architecture, with all other entities (guests, replies, admins) relating directly to it."},"IEconomicBoardPosts.IReject":{"type":"object","properties":{"moderation_reason":{"type":"string","minLength":1,"maxLength":500,"description":"Reason for rejecting the post, required for audit and notification purposes.\n\nThis field captures the specific justification provided by an administrator for why a pending post was rejected.\n\nIt must be at least one character long and no longer than 500 characters to balance sufficient explanatory power with system usability and display constraints.\n\nThis reason is stored in the economic_board_posts table and is used for:\n\n- Internal audit logs to track moderation decisions\n- Forwarding feedback to the original author to guide future contributions\n- Ensuring accountability and consistency in application of community standards\n\nCommon acceptable reasons include:\n- \"Contains hate speech or targeted harassment\"\n- \"Promotes illegal activity or scams\"\n- \"Off-topic: Does not discuss economic or political themes\"\n- \"Duplicated content: Already posted within 24 hours\"\n- \"Incoherent or gibberish content\"\n- \"Spam: Contains only links or repetitive phrases\"\n\nThe reason should be factual, specific, and avoid personal attacks. Ambiguous or non-specific reasons (e.g., \"idk\", \"bad content\") are discouraged for quality control.\n\nThis field is mandatory whenever the post status is changed from 'pending' to 'rejected'. It is ignored if the status change is 'approved' or 'deleted'."}},"required":["moderation_reason"],"description":"Request payload schema for rejecting a pending post.\n\nThis object defines the required information that must be submitted by an administrator to officially reject a post with status 'pending'.\n\nIt contains a single required property: moderation_reason, which is a mandatory textual explanation of why the post does not comply with forum guidelines.\n\nThis schema ensures that all rejections are accompanied by descriptive, traceable feedback. It enforces the community's requirement for transparency in moderation and prevents arbitrary or unexplained removals.\n\nThis request body is only used during the PATCH /admin/posts/{postId}/reject operation.\n\nThe system validates that: \n- The reason is not empty or whitespace-only\n- The reason does not contain prohibited content (e.g., threats)\n- The reason exceeds minimum character count to avoid terse or dismissive notes\n\nThe provided reason will be stored in the moderated_posts table and may be sent in an email notification to the original post author if the post was submitted by a registered member."},"IEconomicBoardPosts.IDelete":{"type":"object","properties":{"reason":{"type":"string","minLength":1,"maxLength":500,"description":"Reason for permanent deletion of the post.\n\nThis field is optional but recommended for audit and moderation transparency. It documents why the admin chose to permanently delete the post.\n\nCommon reasons include: 'Violates neutrality', 'Contains personal attacks', 'Off-topic', 'Duplicate', 'Illegal content', 'Spam'.\n\nThe reason must be clearly stated and truthful. This field serves as an audit trail to ensure accountability in moderation actions.\n\nThis field is only used for audit purposes after deletion and does not affect the execution of the delete operation itself.\n\nThe reason is stored in the moderation_reason field of the economic_board_posts table and is accessible through internal audit logs, but is not returned in the API response to maintain the finality of the action."}},"required":[],"description":"Request body for permanently deleting an economic board post.\n\nThis schema defines optional additional information that may be provided when an admin permanently deletes a post.\n\nThe deletion operation itself does not require a reason, as the system will perform the hard delete regardless. However, the reason helps maintain a clear audit trail of moderation actions.\n\nThe provided reason may be logged internally for compliance purposes but is not returned in responses to users to maintain the finality of administrative decisions.\n\nThis schema follows the business rule that admin deletions are permanent and irreversible, with no possibility of recovery."},"IEconomicBoardTopic.IRequest":{"type":"object","description":"Search and filter parameters for economic board topics.\n\nThis type defines the parameters used to search and filter topic categories in the economic/political discussion board. It supports pagination, sorting, and status filtering for retrieving topic collections.\n\nThe properties in this schema align directly with the filtering and pagination needs of the /economicBoard/admin/topics PATCH endpoint. It allows administrators to manage topic categories efficiently without requiring exact matches for every field.\n\nThis is specifically designed for administrative dashboard use cases where comprehensive management of topic categories is required.","properties":{"name":{"type":"string","description":"Topic name to search for.\n\nAllows searching for topics by partial match against their name.\n\nThis is useful for finding specific topics when the exact name isn't remembered or for discovering topics that contain specific keywords.\n\nThe search should be case-insensitive and support substring matching. For example, searching for 'infl' would find the 'Inflation' topic.\n\nThe predefined topic names are: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field allows administrators to quickly locate topics for review or modification."},"is_active":{"type":"boolean","description":"Filter topics by active status.\n\nThis boolean field allows filtering to show only active topics (true), inactive topics (false), or both (when omitted).\n\nThis is essential for identifying topics that are available for new post creation versus topics that have been deprecated for inactivity.\n\nThe default behavior when not specified is to include both active and inactive topics in the results."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of results to return, with page 1 being the first page of results.\n\nThis property works in conjunction with limit to implement pagination for the topic search results.\n\nThe page number must be a positive integer starting from 1. Page numbers less than 1 are invalid and will cause an error response.\n\nThis pagination strategy enables efficient retrieval of large sets of topic categories without overwhelming the client or server with a single large response.","examples":{"v0":1,"v1":2,"v2":3}},"limit":{"type":"integer","minimum":1,"maximum":100,"default":25,"description":"Number of results per page for pagination.\n\nSpecifies how many topic records to return per page. The value must be between 1 and 100 (inclusive), with a default of 25.\n\nThis limitation prevents performance degradation caused by extremely large result sets, while providing sufficient flexibility for different use cases.\n\nSmall limits (1-10) can be useful when reviewing specific topics, while larger limits (50-100) reduce the number of API calls needed to view comprehensive result sets.\n\nWhen limit exceeds 100, the system will enforce the maximum value of 100.","examples":{"v0":10,"v1":25,"v2":50,"v3":100}},"sort":{"oneOf":[{"const":"name","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned topic records. Valid values are: 'name', 'created_at', or 'updated_at'.\n\nSorting by 'name' arranges topics alphabetically by their name.\n\nSorting by 'created_at' orders topics by when they were first added to the system.\n\nSorting by 'updated_at' (default) orders topics by when they were last modified.\n\nThis allows administrators to organize the topic list based on different criteria depending on their specific needs, such as reviewing new additions, finding recently changed topics, or alphabetizing the list."},{"const":"created_at","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned topic records. Valid values are: 'name', 'created_at', or 'updated_at'.\n\nSorting by 'name' arranges topics alphabetically by their name.\n\nSorting by 'created_at' orders topics by when they were first added to the system.\n\nSorting by 'updated_at' (default) orders topics by when they were last modified.\n\nThis allows administrators to organize the topic list based on different criteria depending on their specific needs, such as reviewing new additions, finding recently changed topics, or alphabetizing the list."},{"const":"updated_at","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned topic records. Valid values are: 'name', 'created_at', or 'updated_at'.\n\nSorting by 'name' arranges topics alphabetically by their name.\n\nSorting by 'created_at' orders topics by when they were first added to the system.\n\nSorting by 'updated_at' (default) orders topics by when they were last modified.\n\nThis allows administrators to organize the topic list based on different criteria depending on their specific needs, such as reviewing new additions, finding recently changed topics, or alphabetizing the list."}],"description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned topic records. Valid values are: 'name', 'created_at', or 'updated_at'.\n\nSorting by 'name' arranges topics alphabetically by their name.\n\nSorting by 'created_at' orders topics by when they were first added to the system.\n\nSorting by 'updated_at' (default) orders topics by when they were last modified.\n\nThis allows administrators to organize the topic list based on different criteria depending on their specific needs, such as reviewing new additions, finding recently changed topics, or alphabetizing the list."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (A-Z, oldest first).\n\nDescending order (default) arranges from largest to smallest (Z-A, newest first).\n\nThis provides flexibility in how results are presented, allowing administrators to quickly identify either the earliest or most recent topic modifications."},{"const":"desc","description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (A-Z, oldest first).\n\nDescending order (default) arranges from largest to smallest (Z-A, newest first).\n\nThis provides flexibility in how results are presented, allowing administrators to quickly identify either the earliest or most recent topic modifications."}],"description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (A-Z, oldest first).\n\nDescending order (default) arranges from largest to smallest (Z-A, newest first).\n\nThis provides flexibility in how results are presented, allowing administrators to quickly identify either the earliest or most recent topic modifications."}},"required":[]},"IEconomicBoardTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the economic board topic.\n\nThis UUID is generated by the system when a topic is created and serves as the primary key for identifying the topic in the database."},"name":{"type":"string","description":"The exact name of the topic category. Must be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field is required and must exactly match one of the seven predefined topic names. Topic names are case-sensitive and cannot be arbitrary. This field is also unique across all topics to prevent duplicates.\n\nMaatch against the underlying Prisma schema model 'economic_board_topics'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this topic category was initially registered in the system. Immutable after creation.\n\nThis field records the exact time when the topic was created in the system as a UTC timestamp in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). This field is automatically populated by the system on creation and cannot be modified afterward.\n\nMatch against the underlying Prisma schema model 'economic_board_topics'."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last modification to this topic's metadata. Always equal to created_at since topic names are immutable after creation.\n\nThis field tracks the last time any metadata (such as description or is_active status) was changed for the topic. Since the topic name itself is immutable, this field only changes if non-name properties are updated. It reflects the most recent authoritative edit to the topic.\n\nMatch against the underlying Prisma schema model 'economic_board_topics'."},"is_active":{"type":"boolean","description":"Indicates whether this topic is currently available for new post creation. Topics may be deactivated if unused for 90+ days but historical posts retain their original topic reference.\n\nWhen this flag is true, the topic appears in available topic lists for posting. When false, the topic is deactivated for new submissions but still preserves its association with all previously existing posts. This allows system administrators to temporarily disable topics without breaking historical data integrity.\n\nMatch against the underlying Prisma schema model 'economic_board_topics'."},"description":{"oneOf":[{"type":"string","description":"Optional human-readable description explaining the scope and purpose of this topic category.\n\nThis field provides additional context about what types of discussions belong in this topic. It may include examples, guidelines, or the thematic focus of the category. If not provided, this field will be null, indicating no additional description is available.\n\nMatch against the underlying Prisma schema model 'economic_board_topics'."},{"type":"null"}],"description":"Optional human-readable description explaining the scope and purpose of this topic category.\n\nThis field provides additional context about what types of discussions belong in this topic. It may include examples, guidelines, or the thematic focus of the category. If not provided, this field will be null, indicating no additional description is available.\n\nMatch against the underlying Prisma schema model 'economic_board_topics'."}},"required":["id","name","created_at","updated_at","is_active"],"x-autobe-prisma-schema":"economic_board_topics","description":"System-defined topic categories for the economic/political discussion board.\n\nThis model represents the fixed, immutable topic categories that govern content organization and filtering across the platform. All posts must reference exactly one of these predefined topics.\n\nThe topic system is designed to be limited and controlled to maintain focus and prevent fragmentation of the discussion space. There are exactly seven predefined values that constitute the complete topic universe: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThese topics serve as the foundational taxonomy for organizing economic and political discourse. The system enforces strict adherence to these predefined values to ensure consistency and avoid the creation of uncontrolled or chaotic subtopics.\n\nTopic descriptors provide additional context for users to understand the appropriate scope of each category, but the core topic names themselves are strictly parameterized and immutable once created. This ensures long-term stability in categorization and prevents drift or depletion of topic integrity over time.\n\nAll relationship references to this entity (such as from economic_board_posts) are maintained through the id field, and this entity is referenced in all post creation flows. This ensures every discussion on the board is properly categorized and searchable within the defined thematic boundaries."},"IEconomicBoardTopic.ICreate":{"type":"object","properties":{"name":{"oneOf":[{"const":"Inflation","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},{"const":"Tax Policy","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},{"const":"Elections","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},{"const":"Global Trade","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},{"const":"Monetary Policy","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},{"const":"Labor Markets","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},{"const":"Fiscal Policy","description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."}],"description":"The exact name of the topic category.\n\nMust be one of the seven predefined system values: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nThis field must match exactly one of these predefined values, with capitalization preserved. Custom topic names are not permitted.\n\nThis validation ensures consistency in topic categorization and prevents the proliferation of unstandardized categories that could fragment the discussion board.\n\nNote: This API operation only allows creation of topics that match these seven predefined values. This is a system-wide constraint designed to maintain the focused nature of the platform's organization structure."},"description":{"type":"string","minLength":1,"maxLength":500,"description":"Optional human-readable description explaining the scope and purpose of this topic category.\n\nThis field provides additional context about the topic for users and administrators. It can explain the focus of the category, what kind of posts are appropriate, or its relationship to other topics.\n\nThe description should be concise but informative, limited to 500 characters to ensure readability in topic lists and filters.\n\nThis field is optional, and topics can be created without a description."}},"required":["name"],"description":"Request body for creating a new topic category in the economic/political discussion board.\n\nThis schema defines the structure of the data submitted when an admin creates a new topic category.\n\nSince the system has exactly seven predefined topic categories, this endpoint is designed to ensure that only those canonical topics are supported, preventing the creation of custom topics that would fragment community discussions.\n\nThis schema follows the business rule that only seven predefined topics are allowed: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", and \"Fiscal Policy\". This ensures consistency in content organization.\n\nAll fields in this schema correspond directly to fields in the economic_board_topics table.","x-autobe-prisma-schema":"economic_board_topics"},"IEconomicBoardTopic.IUpdate":{"type":"object","properties":{"description":{"type":"string","minLength":1,"maxLength":500,"description":"Updated human-readable description explaining the scope and purpose of this topic category.\n\nThis field provides additional context about the topic for users and administrators. It can explain the focus of the category, what kind of posts are appropriate, or its relationship to other topics.\n\nThe description should be concise but informative, limited to 500 characters to ensure readability in topic lists and filters.\n\nThis field is optional. If omitted, the description remains unchanged."},"is_active":{"type":"boolean","description":"New active status for the topic.\n\nThis field allows the modification of the topic's availability for new post creation. When set to true, the topic will appear as an option for new post submissions. When set to false, the topic will be deactivated for new posts but will remain associated with historical posts.\n\nThis setting helps maintain the relevance of the discussion board by deactivating topics that have been unused for extended periods while preserving historical integrity."}},"required":[],"description":"Update request body for an existing economic board topic category.\n\nThis schema defines the structure of data used to modify an existing topic category. Only the description and is_active fields can be updated.\n\nThis schema follows the business rule that topic names are immutable and cannot be changed after creation, as doing so would break historical post associations.\n\nThe updated_at field is automatically managed by the system when any update is made.","x-autobe-prisma-schema":"economic_board_topics"},"IEconomicBoardGuest.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"The page number to retrieve. Pages are 1-indexed.\n\nThis parameter supports pagination of guest interaction records. The default value is 1. Pages are limited to prevent excessive resource usage and protect user privacy.","minimum":1,"maximum":1000},"limit":{"type":"integer","description":"The number of guest records to return per page.\n\nThis parameter controls the size of each page in the paginated result. The value must be between 1 and 100 to prevent excessive data retrieval. The default limit is 25 records per page.\n\nThis limits exposure of guest data while allowing administrators to efficiently review interaction patterns.","minimum":1,"maximum":100},"created_after":{"type":"string","format":"date-time","description":"Filter guests created after this timestamp.\n\nUse ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to filter guests who interacted with the system after a specific date and time.\n\nThis allows administrators to review recent guest activity patterns without retrieving all historical data. The system will return guests with created_at values greater than this timestamp."},"created_before":{"type":"string","format":"date-time","description":"Filter guests created before this timestamp.\n\nUse ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to filter guests who interacted with the system before a specific date and time.\n\nThis enables administrators to focus on a specific time period for analysis or audit purposes. The system will return guests with created_at values less than this timestamp."},"last_active_after":{"type":"string","format":"date-time","description":"Filter guests whose last activity was after this timestamp.\n\nUse ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to find guests who have been active recently.\n\nThis helps identify active anonymous users for monitoring and security analysis."},"last_active_before":{"type":"string","format":"date-time","description":"Filter guests whose last activity was before this timestamp.\n\nUse ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to find guests who have not been active recently.\n\nThis enables administrators to identify inactive guest sessions that may be candidates for cleanup or analysis."},"session_id_like":{"type":"string","description":"Filter guests by partial match of session_id.\n\nThis parameter supports substring matching of the session_id field. It can be used to find all guests associated with a specific session pattern for troubleshooting or security investigation.\n\nThe search is case-sensitive and matches any part of the session_id string."},"ip_hash_like":{"type":"string","description":"Filter guests by partial match of ip_hash.\n\nThis parameter supports substring matching of the ip_hash field. It can be used to identify potential abuse patterns from the same IP address, as the ip_hash is derived from the guest's IP address for moderation purposes.\n\nThe search is case-sensitive and matches any part of the ip_hash string."},"sort_by":{"oneOf":[{"const":"created_at","description":"The field to sort the results by.\n\nThis parameter allows administrators to sort the guest list by different criteria. The available options are:\n- created_at: Sort by the time when the guest first interacted with the system\n- last_active: Sort by the time when the guest last performed any action on the system\n- session_id: Sort by the system-generated session identifier\n\nThe default sort order is created_at descending (newest first)."},{"const":"last_active","description":"The field to sort the results by.\n\nThis parameter allows administrators to sort the guest list by different criteria. The available options are:\n- created_at: Sort by the time when the guest first interacted with the system\n- last_active: Sort by the time when the guest last performed any action on the system\n- session_id: Sort by the system-generated session identifier\n\nThe default sort order is created_at descending (newest first)."},{"const":"session_id","description":"The field to sort the results by.\n\nThis parameter allows administrators to sort the guest list by different criteria. The available options are:\n- created_at: Sort by the time when the guest first interacted with the system\n- last_active: Sort by the time when the guest last performed any action on the system\n- session_id: Sort by the system-generated session identifier\n\nThe default sort order is created_at descending (newest first)."}],"description":"The field to sort the results by.\n\nThis parameter allows administrators to sort the guest list by different criteria. The available options are:\n- created_at: Sort by the time when the guest first interacted with the system\n- last_active: Sort by the time when the guest last performed any action on the system\n- session_id: Sort by the system-generated session identifier\n\nThe default sort order is created_at descending (newest first)."},"sort_order":{"oneOf":[{"const":"asc","description":"The sort order for the results.\n\nThis parameter controls the direction of the sort. Valid values are:\n- asc: Ascending order (oldest to newest)\n- desc: Descending order (newest to oldest)\n\nThe default sort order is desc (descending)."},{"const":"desc","description":"The sort order for the results.\n\nThis parameter controls the direction of the sort. Valid values are:\n- asc: Ascending order (oldest to newest)\n- desc: Descending order (newest to oldest)\n\nThe default sort order is desc (descending)."}],"description":"The sort order for the results.\n\nThis parameter controls the direction of the sort. Valid values are:\n- asc: Ascending order (oldest to newest)\n- desc: Descending order (newest to oldest)\n\nThe default sort order is desc (descending)."}},"required":[],"description":"Search criteria and pagination parameters for filtering guest interactions.\n\nThis schema defines the search and filter parameters that can be used to retrieve paginated lists of guest interactions from the economic_board_guest table. The operation supports complex queries to find guests based on various criteria including creation date ranges, last activity date ranges, session_id patterns, and ip_hash patterns.\n\nThe schema supports comprehensive pagination with configurable page size and offset controls. Administrators can sort the results by different fields and specify the sort direction.\n\nDue to privacy considerations, the search results do not include personally identifiable information. The guest records are returned with obfuscated identifiers and summary metadata only. The ip_hash field is stored as a cryptographic hash of the IP address and cannot be reversed to reveal the original IP address.\n\nThis request body enables administrators to investigate potential abuse patterns, repeated sessions from the same IP, or suspicious activity while respecting user privacy guidelines and preventing bulk data harvesting."},"IEconomicBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the guest user session.\n\nThis UUID is generated by the system when the guest first interacts with the platform. It serves as the primary identifier for tracking anonymous user interactions within the economic_board_guest table."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest first accessed the system or interacted with it.\n\nThis is recorded in ISO 8601 format (UTC) and provides a permanent record of when the guest session was initiated. It is immutable and cannot be modified after creation, serving as an audit trail for the guest's initial interaction.\n\nThis field is critical for identifying the origin of a guest session and aligns with the business rule for tracking anonymous user activity."},"session_id":{"type":"string","description":"Unique session identifier generated by the system to persist guest state across interactions.\n\nThis identifier allows the system to maintain state for anonymous users during their session without requiring authentication. The session_id is unique across all guests and ensures that interactions can be associated with the correct anonymous session.\n\nThis field is used in all API operations that involve guest actions and is essential for maintaining session continuity and moderation tracking."},"ip_hash":{"type":"string","description":"Cryptographic hash of the guest's IP address for moderation and abuse detection. No personal identifying information is stored.\n\nThis field contains a hash value computed from the guest's IP address at the time of session creation. It enables the system to detect patterns of abusive behavior without storing raw IP addresses, preserving user privacy as required by the platform's no-PII policy.\n\nThe hash is computed using a secure one-way algorithm and is used in moderation workflows to identify repeat offenders while maintaining anonymity."},"last_active":{"type":"string","format":"date-time","description":"The last timestamp when the guest performed any action on the system.\n\nThis field is updated with the current UTC timestamp whenever the guest performs any action, such as viewing content or submitting content. It is used to determine session validity and to detect inactive sessions that may be eligible for cleanup based on the 30-day inactivity threshold defined in business rules.\n\nThis field is crucial for implementing the session management policy that preserves guest state for up to 30 days."}},"required":["id","created_at","session_id","last_active"],"description":"Represents an anonymous visitor to the economic discussion board. This model tracks guest interactions for moderation and system behavior without requiring authentication.\n\nThis schema is derived from the economic_board_guest Prisma model and provides a complete representation of guest user data. It includes every field defined in the Prisma schema to ensure API compatibility and data integrity.\n\nThe model tracks anonymous users who view content and interact with the platform without registering. Each guest is assigned a unique session_id and ip_hash for identification and abuse detection purposes while maintaining privacy. The created_at and last_active timestamps provide a complete activity history.\n\nNo password, email, or authentication fields are included as guests do not authenticate. All user interactions are tracked anonymously using the session_id. This aligns with the business requirement for anonymous participation while enabling system moderation capabilities."},"IEconomicBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the authenticated member account.\n\nThis UUID is generated by the system when a member registers. It serves as the primary identifier for the member's account and is used for all operations that require member identification, including authentication, post creation, and profile management.\n\nThis field is immutable and cannot be changed after account creation, ensuring persistent identification of the member across sessions."},"email":{"type":"string","format":"email","description":"Unique email address used for account registration and verification. Must be validated before full privileges are granted.\n\nThis field contains the email address provided by the user during registration. The email address is stored verbatim and is used as the primary identifier for authentication and communication (e.g., verification emails).\n\nThis field must be unique across all members and is validated for proper email format. The email address is not considered personally identifiable information (PII) for the purpose of user anonymity since the platform does not expose it publicly.\n\nThe registration workflow requires email verification before the verified_at field is populated, aligning with the business rule for account security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was registered.\n\nThis immutable timestamp records the exact date and time (in ISO 8601 format) when the member registered their account. It serves as an audit trail and is used in business logic such as determining account age for policy application.\n\nThis field is set once at registration and is never modified, ensuring the integrity of the registration history."},"verified_at":{"type":"string","format":"date-time","description":"Timestamp when email verification was completed. Null until verified.\n\nThis field is initially null and is only populated when the member completes the email verification process by clicking the verification link sent to their email address.\n\nThe presence of a value in this field indicates that the member's email address is confirmed, allowing the account to be considered fully active. Until verified, the member has limited privileges, and in some cases may not be able to create posts without an admin intervention, depending on system policy.\n\nThis field is critical for the platform's security model that requires email verification to prevent spam and ensure accountability."},"last_login":{"type":"string","format":"date-time","description":"The most recent successful login timestamp.\n\nThis field is updated every time the member successfully authenticates with their email and password. It provides a record of recent activity and enables features like session timeout and auto-logout based on inactivity.\n\nThis field is modified by the login and refresh operations and is used to maintain the global access control policy. It is distinct from the created_at timestamp, as it reflects the most recent authentication rather than the initial registration."},"is_active":{"type":"boolean","description":"Flag indicating whether the member account is active. If false, account is suspended and cannot post or log in.\n\nThis boolean flag controls the operational state of the member's account. When true, the member can log in, create posts, and interact with the platform. When false, the account is suspended and all authentication attempts will be denied.\n\nSuspension may occur due to violations of community guidelines, system errors, or administrative actions. This field enables the platform to enforce moderation policies while preserving account integrity.\n\nThe default value is true upon account creation, and it can only be changed by an administrator through system controls."},"auth_jwt_id":{"type":"string","format":"uuid","description":"UUID of the current active JWT token for session management.\n\nThis field stores the unique identifier (UUID) of the current active JWT access token used to maintain the member's session. When a member logs in, a new JWT is generated and its UUID is stored here, binding the session to the member record.\n\nThis field enables the system to track and manage the current session for each member. When a user logs in from a new device, the old session's JWT ID is replaced with the new one, effectively invalidating previous sessions for that member.\n\nThis field is pivotal for the platform's stateless authentication model, allowing efficient session validation without server-side session storage."}},"required":["id","email","created_at","last_login","is_active","auth_jwt_id"],"description":"Represents an authenticated user who can create posts and replies. Each member has a persistent identity tracked across sessions via secure JWT authentication.\n\nThis schema is derived from the economic_board_member Prisma model and provides a complete representation of member account data. It includes every field defined in the Prisma schema to ensure API compatibility and data integrity.\n\nThe model represents users who have registered with the platform using a verified email address and password. These users can create posts (subject to moderation) and reply to posts, giving them full interaction capabilities on the discussion board.\n\nThe schema includes all necessary authentication fields: email for identity, password_hash for security, auth_jwt_id for session management, and flags for account status. The timestamps (created_at, verified_at, last_login) provide full lifecycle tracking.\n\nThis schema excludes any public-facing personal information like name or profile, aligning with the platform's focus on anonymous participation while enabling authentication. The schema ensures that all information returned through the API is consistent with the database model and business rules.","x-autobe-prisma-schema":"economic_board_member"},"IEconomicBoardAdmin.IRequest":{"type":"object","description":"Search criteria and pagination parameters for administrator filtering.\n\nThis type defines the parameters used to search and filter administrators in the economicBoard system. It supports complex queries based on email patterns, last login date ranges, and account status, with full pagination and sorting capabilities.\n\nThe properties in this schema align directly with the filtering and pagination needs of the /economicBoard/admin/admins PATCH endpoint. It allows administrators to search for other admins efficiently without requiring exact matches for every field.\n\nThis is specifically designed for administrative dashboard use cases where comprehensive filtering of admin accounts is required for security and operational auditing purposes.","properties":{"email":{"type":"string","description":"Partial email match to filter administrators by their email address.\n\nThis field allows searching for admin accounts using partial email matches, which is useful for discovering accounts when the full email address is unknown.\n\nThe search should be case-insensitive and support substring matching. For example, searching for 'company' would return accounts with emails like 'john@company.com' or 'admin@company.org'.\n\nThis enables administrators to find accounts based on organizational domain patterns or partial names without requiring exact email matches.","minLength":1},"lastLoginFrom":{"type":"string","format":"date-time","description":"Start date for filtering admins by last login timestamp.\n\nThis property defines the earliest possible last_login timestamp to include in search results. Only administrators with a last_login timestamp on or after this date will be returned.\n\nFormat: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis allows administrators to identify inactive accounts, audit recent administrative activity, or find administrators who have not logged in for an extended period for security review.\n\nWhen used with lastLoginTo, it creates a date range filter for administrative login history.","examples":{"v0":"2025-09-01T00:00:00Z"}},"lastLoginTo":{"type":"string","format":"date-time","description":"End date for filtering admins by last login timestamp.\n\nThis property defines the latest possible last_login timestamp to include in search results. Only administrators with a last_login timestamp on or before this date will be returned.\n\nFormat: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis enables analysis of administrative activity patterns within specific time periods, such as identifying who logged in during a particular week or month.\n\nWhen used with lastLoginFrom, it creates a date range filter for administrative login history.","examples":{"v0":"2025-10-07T23:59:59Z"}},"is_active":{"type":"boolean","description":"Filter administrators by account active status.\n\nThis boolean field allows filtering to show only active admin accounts (true) or inactive admin accounts (false).\n\nThis is essential for identifying and managing suspended or decommissioned administrative accounts while maintaining a complete audit trail of all administrator accounts regardless of current status.\n\nThe default behavior when not specified is to include both active and inactive accounts in the results.","examples":{"v0":true,"v1":false}},"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of results to return, with page 1 being the first page of results.\n\nThis property works in conjunction with limit to implement pagination for the admin search results.\n\nThe page number must be a positive integer starting from 1. Page numbers less than 1 are invalid and will cause an error response.\n\nThis pagination strategy enables efficient retrieval of large sets of administrative accounts without overwhelming the client or server with a single large response.","examples":{"v0":1,"v1":2,"v2":3}},"limit":{"type":"integer","minimum":1,"maximum":100,"default":25,"description":"Number of results per page for pagination.\n\nSpecifies how many admin records to return per page. The value must be between 1 and 100 (inclusive), with a default of 25.\n\nThis limitation prevents performance degradation caused by extremely large result sets, while providing sufficient flexibility for different use cases.\n\nSmall limits (1-10) can be useful when reviewing specific accounts, while larger limits (50-100) reduce the number of API calls needed to view comprehensive result sets.\n\nWhen limit exceeds 100, the system will enforce the maximum value of 100.","examples":{"v0":10,"v1":25,"v2":50,"v3":100}},"sort":{"oneOf":[{"const":"email","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned admin records. Valid values are: 'email', 'created_at', or 'last_login'.\n\nSorting by 'email' arranges admins alphabetically by their email address.\n\nSorting by 'created_at' orders admins by when their account was provisioned (oldest first).\n\nSorting by 'last_login' (default) orders admins by their most recent login time (most recent first)\n\nThis allows administrators to organize the results based on different criteria depending on their specific needs, such as reviewing new accounts, recent activity, or alphabetical contact lists.","examples":["email","created_at","last_login"]},{"const":"created_at","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned admin records. Valid values are: 'email', 'created_at', or 'last_login'.\n\nSorting by 'email' arranges admins alphabetically by their email address.\n\nSorting by 'created_at' orders admins by when their account was provisioned (oldest first).\n\nSorting by 'last_login' (default) orders admins by their most recent login time (most recent first)\n\nThis allows administrators to organize the results based on different criteria depending on their specific needs, such as reviewing new accounts, recent activity, or alphabetical contact lists.","examples":["email","created_at","last_login"]},{"const":"last_login","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned admin records. Valid values are: 'email', 'created_at', or 'last_login'.\n\nSorting by 'email' arranges admins alphabetically by their email address.\n\nSorting by 'created_at' orders admins by when their account was provisioned (oldest first).\n\nSorting by 'last_login' (default) orders admins by their most recent login time (most recent first)\n\nThis allows administrators to organize the results based on different criteria depending on their specific needs, such as reviewing new accounts, recent activity, or alphabetical contact lists.","examples":["email","created_at","last_login"]}],"description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned admin records. Valid values are: 'email', 'created_at', or 'last_login'.\n\nSorting by 'email' arranges admins alphabetically by their email address.\n\nSorting by 'created_at' orders admins by when their account was provisioned (oldest first).\n\nSorting by 'last_login' (default) orders admins by their most recent login time (most recent first)\n\nThis allows administrators to organize the results based on different criteria depending on their specific needs, such as reviewing new accounts, recent activity, or alphabetical contact lists.","examples":{"v0":"email","v1":"created_at","v2":"last_login"}},"order":{"oneOf":[{"const":"asc","description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (A-Z, oldest to newest).\n\nDescending order (default) arranges from largest to smallest (Z-A, newest to oldest).\n\nThis provides flexibility in how results are presented, allowing administrators to quickly identify either the earliest or most recent activities depending on their operational needs."},{"const":"desc","description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (A-Z, oldest to newest).\n\nDescending order (default) arranges from largest to smallest (Z-A, newest to oldest).\n\nThis provides flexibility in how results are presented, allowing administrators to quickly identify either the earliest or most recent activities depending on their operational needs."}],"description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (A-Z, oldest to newest).\n\nDescending order (default) arranges from largest to smallest (Z-A, newest to oldest).\n\nThis provides flexibility in how results are presented, allowing administrators to quickly identify either the earliest or most recent activities depending on their operational needs."}},"required":[]},"IEconomicBoardAdmin":{"type":"object","description":"Detailed information about an admin user including authentication metadata and account status.\n\nThis schema represents the complete profile information for an administrative account on the economic/political discussion board.\n\nIt includes all fields defined in the economic_board_admin Prisma schema, providing a comprehensive view of the administrative user account. This type is used in responses that require detailed administrative information, such as retrieving a specific admin by ID or listing administrators.\n\nFor security purposes, sensitive information like password_hash is included in the schema definition to maintain complete alignment with the database model but is never exposed in responses to non-admin users.\n\nThis type should only be returned when the requesting user has appropriate administrative privileges and the system has confirmed the security context permits full access to this information.","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nThis UUID uniquely identifies the admin account in the system and is used as the primary key for lookups in the economic_board_admin table.\n\nThe id is automatically generated by the system when the admin account is provisioned and is immutable throughout the admin's lifecycle.\n\nThis identifier is used in various API endpoints as a path parameter to reference specific admin accounts.","examples":{"v0":"123e4567-e89b-12d3-a456-426614174000"}},"email":{"type":"string","description":"Email address of the admin. Must match a pre-approved list defined in system configuration.\n\nThis field contains the email address that was registered for the admin account during system provisioning.\n\nIt serves as the primary credential for authentication and remains fixed throughout the admin account's lifecycle.\n\nThe email must be one of the addresses pre-approved by the system owner and cannot be changed after creation.","examples":{"v0":"admin@economicboard.gov"}},"password_hash":{"type":"string","description":"Hashed password for admin authentication. Never stores plain text passwords.\n\nThis field contains the bcrypt-hashed version of the admin's password, which is used for authentication during login operations.\n\nThe system never stores or transmits plain text passwords. The hashed value is computed when an admin account is created or when the password is changed.\n\nFor security, this field should only be accessible to internal system components and should never be exposed in API responses to clients.","examples":{"v0":"$2b$12$X9s4k6s8Ij3aBZSsagT5qQ1gDd9Y49i1K15Qz7de39cJ2q2BjSx6C"}},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was provisioned by the system owner.\n\nThis field records the exact moment when the admin account was created and added to the system.\n\nFormat: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis timestamp is immutable and establishes the account's history in the system, which is useful for audit trails and determining account age.","examples":{"v0":"2025-01-15T08:30:00Z"}},"last_login":{"type":"string","format":"date-time","description":"The most recent successful admin login timestamp.\n\nThis field is updated each time the admin successfully authenticates with the system.\n\nFormat: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).\n\nMonitoring this timestamp helps identify inactive admin accounts, which may require security review, and provides insight into administrative activity patterns.\n\nThis field is also used in filtering and sorting administrative accounts through search functionality.","examples":{"v0":"2025-10-07T14:22:15Z"}},"is_active":{"type":"boolean","description":"Flag indicating whether the admin account is active. If false, login and moderation access are denied.\n\nThis boolean field determines whether the admin account can currently login and perform moderation actions.\n\nWhen set to false, the account is suspended, preventing any login attempts and administrative operations.\n\nThis field is useful for temporarily deactivating accounts without permanently deleting them, which preserves audit history and allows for easy reactivation if needed.\n\nThe default value is true when the account is created.","examples":{"v0":true,"v1":false}},"auth_jwt_id":{"type":"string","format":"uuid","description":"UUID of the current active JWT token for admin session management.\n\nThis field contains a reference to the currently active access token used for session authentication.\n\nWhen an admin logs in, a new JWT access token is generated, and its UUID is stored here to bind the session to the admin account.\n\nSubsequent requests use the JWT token for authentication, and the system validates that the token's UUID matches the value stored in auth_jwt_id.\n\nIf multiple sessions exist for the same user, each session will have a unique JWT UUID, but only the most recent one is tracked in this field.","examples":{"v0":"123e4567-e89b-12d3-a456-426614174001"}}},"required":["id","email","password_hash","created_at","last_login","is_active","auth_jwt_id"]},"IEconomicBoardPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nThe page number indicates which chunk of results to retrieve. The first page is page 1.\n\nThis parameter allows users to navigate through large sets of results without loading everything at once.\n\nThe system enforces a reasonable maximum page size to prevent excessive memory usage and resource consumption.\n\nThis field aligns with the pagination patterns used throughout the system and ensures consistent behavior across all paginated endpoints."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of items per page.\n\nThis parameter controls the size of each page in the pagination system. It determines how many posts will be returned in a single response.\n\nThe minimum value is 1, and the maximum value is 100 to ensure performance and prevent overwhelming the client with too much data at once.\n\nThe default value when this parameter is not specified is 20, balancing between efficient loading and user experience.\n\nThis limit is enforced at the system level to maintain consistent performance across all client devices and network conditions."},"search":{"type":"string","minLength":1,"maxLength":100,"description":"Text search query for filtering posts.\n\nThis field allows users to search for posts containing specific keywords in either the subject or content.\n\nThe search is case-insensitive and can match partial words or phrases.\n\nThe length is limited to 100 characters to prevent performance issues from overly broad searches and to maintain efficient database query execution.\n\nThis enables users to quickly find relevant discussions without needing to browse through all available posts manually."},"topic":{"oneOf":[{"const":"Inflation","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"Tax Policy","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"Elections","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"Global Trade","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"Monetary Policy","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"Labor Markets","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"Fiscal Policy","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},{"const":"General Discussion","description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."}],"description":"Topic category filter for posts.\n\nThis parameter allows users to filter posts by topic category, showing only posts from a specific economic or political topic.\n\nThe value must exactly match one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", \"Fiscal Policy\".\n\nIf not provided, posts from all topics are returned.\n\nThe \"General Discussion\" category is treated as a default topic for posts that were submitted without a specific topic selection.\n\nAll values are case-sensitive to ensure precise filtering and prevent ambiguity in topic matching."},"sortBy":{"oneOf":[{"const":"created_at","description":"Field to sort posts by.\n\nThis parameter determines the sorting criteria for the returned posts.\n\nAllowed values are:\n- \"created_at\": Sort by the original post creation timestamp (oldest first)\n- \"updated_at\": Sort by the last time the post was updated (oldest first)\n- \"reply_count\": Sort by the number of replies the post has received (fewest first)\n\nWhen not specified, the default sort is by \"created_at\" descending (newest first)."},{"const":"updated_at","description":"Field to sort posts by.\n\nThis parameter determines the sorting criteria for the returned posts.\n\nAllowed values are:\n- \"created_at\": Sort by the original post creation timestamp (oldest first)\n- \"updated_at\": Sort by the last time the post was updated (oldest first)\n- \"reply_count\": Sort by the number of replies the post has received (fewest first)\n\nWhen not specified, the default sort is by \"created_at\" descending (newest first)."},{"const":"reply_count","description":"Field to sort posts by.\n\nThis parameter determines the sorting criteria for the returned posts.\n\nAllowed values are:\n- \"created_at\": Sort by the original post creation timestamp (oldest first)\n- \"updated_at\": Sort by the last time the post was updated (oldest first)\n- \"reply_count\": Sort by the number of replies the post has received (fewest first)\n\nWhen not specified, the default sort is by \"created_at\" descending (newest first)."}],"description":"Field to sort posts by.\n\nThis parameter determines the sorting criteria for the returned posts.\n\nAllowed values are:\n- \"created_at\": Sort by the original post creation timestamp (oldest first)\n- \"updated_at\": Sort by the last time the post was updated (oldest first)\n- \"reply_count\": Sort by the number of replies the post has received (fewest first)\n\nWhen not specified, the default sort is by \"created_at\" descending (newest first)."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction.\n\nThis parameter controls whether the results are sorted in ascending or descending order based on the \"sortBy\" field.\n\nAllowed values are:\n- \"asc\": Ascending order (oldest/smallest first)\n- \"desc\": Descending order (newest/largest first)\n\nWhen not specified, the default order is \"desc\" for all sort fields, ensuring that the most recent or most discussed posts appear first."},{"const":"desc","description":"Sort order direction.\n\nThis parameter controls whether the results are sorted in ascending or descending order based on the \"sortBy\" field.\n\nAllowed values are:\n- \"asc\": Ascending order (oldest/smallest first)\n- \"desc\": Descending order (newest/largest first)\n\nWhen not specified, the default order is \"desc\" for all sort fields, ensuring that the most recent or most discussed posts appear first."}],"description":"Sort order direction.\n\nThis parameter controls whether the results are sorted in ascending or descending order based on the \"sortBy\" field.\n\nAllowed values are:\n- \"asc\": Ascending order (oldest/smallest first)\n- \"desc\": Descending order (newest/largest first)\n\nWhen not specified, the default order is \"desc\" for all sort fields, ensuring that the most recent or most discussed posts appear first."},"status":{"oneOf":[{"const":"published","description":"Moderation status filter for posts.\n\nThis parameter allows filtering posts based on their moderation status.\n\nAllowed values are:\n- \"published\": Only show posts that have been approved and are publicly visible\n- \"pending\": Only show posts awaiting moderation\n- \"rejected\": Only show posts that have been rejected by an admin\n- \"deleted\": Only show posts that have been permanently deleted\n\nThis field enables users to manage their own posts by filtering for specific statuses, and allows administrators to manage moderation workflows.\n\nOnly \"published\" posts are visible to guests and non-admin users. Admins can view the full range of statuses."},{"const":"pending","description":"Moderation status filter for posts.\n\nThis parameter allows filtering posts based on their moderation status.\n\nAllowed values are:\n- \"published\": Only show posts that have been approved and are publicly visible\n- \"pending\": Only show posts awaiting moderation\n- \"rejected\": Only show posts that have been rejected by an admin\n- \"deleted\": Only show posts that have been permanently deleted\n\nThis field enables users to manage their own posts by filtering for specific statuses, and allows administrators to manage moderation workflows.\n\nOnly \"published\" posts are visible to guests and non-admin users. Admins can view the full range of statuses."},{"const":"rejected","description":"Moderation status filter for posts.\n\nThis parameter allows filtering posts based on their moderation status.\n\nAllowed values are:\n- \"published\": Only show posts that have been approved and are publicly visible\n- \"pending\": Only show posts awaiting moderation\n- \"rejected\": Only show posts that have been rejected by an admin\n- \"deleted\": Only show posts that have been permanently deleted\n\nThis field enables users to manage their own posts by filtering for specific statuses, and allows administrators to manage moderation workflows.\n\nOnly \"published\" posts are visible to guests and non-admin users. Admins can view the full range of statuses."},{"const":"deleted","description":"Moderation status filter for posts.\n\nThis parameter allows filtering posts based on their moderation status.\n\nAllowed values are:\n- \"published\": Only show posts that have been approved and are publicly visible\n- \"pending\": Only show posts awaiting moderation\n- \"rejected\": Only show posts that have been rejected by an admin\n- \"deleted\": Only show posts that have been permanently deleted\n\nThis field enables users to manage their own posts by filtering for specific statuses, and allows administrators to manage moderation workflows.\n\nOnly \"published\" posts are visible to guests and non-admin users. Admins can view the full range of statuses."}],"description":"Moderation status filter for posts.\n\nThis parameter allows filtering posts based on their moderation status.\n\nAllowed values are:\n- \"published\": Only show posts that have been approved and are publicly visible\n- \"pending\": Only show posts awaiting moderation\n- \"rejected\": Only show posts that have been rejected by an admin\n- \"deleted\": Only show posts that have been permanently deleted\n\nThis field enables users to manage their own posts by filtering for specific statuses, and allows administrators to manage moderation workflows.\n\nOnly \"published\" posts are visible to guests and non-admin users. Admins can view the full range of statuses."},"createdAfter":{"type":"string","format":"date-time","description":"Filter posts created after this timestamp.\n\nThis field accepts ISO 8601 formatted date-time string (e.g., \"2025-10-05T14:30:00Z\") and returns only posts created after the specified time.\n\nThis is useful for retrieving new posts since a specific date without having to paginate through thousands of historical entries.\n\nThe system will treat this as a lower bound for the created_at field, inclusive."},"createdBefore":{"type":"string","format":"date-time","description":"Filter posts created before this timestamp.\n\nThis field accepts ISO 8601 formatted date-time string (e.g., \"2025-10-05T14:30:00Z\") and returns only posts created before the specified time.\n\nThis is useful for retrieving posts from a specific historical period without having to paginate through all entries.\n\nThe system will treat this as an upper bound for the created_at field, inclusive."}},"required":[],"description":"Search and filter parameters for economic board posts.\n\nThis type represents the request payload for searching and filtering economic and political discussion posts.\n\nIt provides a comprehensive set of parameters to navigate through the posts database using pagination, keyword search, topic filtering, sorting, and temporal constraints.\n\nThe fields are designed to be used together to create precise queries that return exactly the content users are looking for without overwhelming them with irrelevant results.\n\nAll filtering and sorting operations are designed to work efficiently with the economic_board_posts table in the database.\n\nThis request type is used by both guest and member users to browse posts, and by admins for moderation workflows."},"IEconomicBoardPost.ICreate":{"type":"object","properties":{"economic_board_topics_id":{"type":"string","format":"uuid","description":"Unique identifier of the topic category for this post.\n\nThis field links the post to one of the seven predefined topic categories: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", or \"Fiscal Policy\".\n\nThe value must be a UUID that corresponds to an existing record in the economic_board_topics table.\n\nThis field is required because every post must be categorized under one of the system's predefined topics to maintain organization and consistency.\n\nThe system validates that this ID references a topic that is currently active (is_active = true). If the topic is inactive, creation will be rejected."},"subject":{"type":"string","minLength":5,"maxLength":120,"description":"Brief title or subject line of the post.\n\nThis field contains a concise summary of the post's topic or main point.\n\nIt must be between 5 and 120 characters long to ensure it is meaningful but not excessively long for display in list views.\n\nThe subject should capture the essence of the post in a clear, accurate manner to help users quickly understand the topic of discussion.\n\nThis field is required for all posts and serves as the primary identifier in topic lists and search results."},"content":{"type":"string","minLength":10,"maxLength":5000,"description":"Full text content of the post.\n\nThis field contains the complete body of the discussion post, including detailed analysis, arguments, questions, or thoughts on the economic or political topic.\n\nIt must be between 10 and 5,000 characters long to ensure substantial content while preventing overly long posts that might be difficult to read or review.\n\nThe content must be substantive and focused on economic or political analysis, adhering to the platform's civil discourse principles.\n\nThis field cannot be empty or contain only spaces, URLs, emojis, or symbols without meaningful text.\n\nThe system will reject submissions that do not meet these requirements with an appropriate error message."}},"required":["economic_board_topics_id","subject","content"],"description":"Input data required to create a new economic/political discussion post.\n\nThis type represents the request body for creating a new post on the economic/political discussion board.\n\nIt contains only the essential information needed to create a new discussion thread: the associated topic, a subject title, and the full content of the post.\n\nThis schema explicitly excludes any system-managed fields like id, created_at, updated_at, status, author_hash, etc., as these are automatically generated by the system.\n\nThe subject and content fields have strict length limits to ensure quality and maintainability of discussions.\n\nThis schema strictly follows the business rule that requires every post to be categorized under one of the seven predefined topics.\n\nAll fields are required to ensure a complete and meaningful post submission, preventing empty or minimal submissions that do not contribute to meaningful discourse."},"IEconomicBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the economic board post.\n\nThis UUID is generated by the system upon post creation and is used as the primary reference for all post-related operations.\n\nThe identifier ensures unique identification across the entire system and is used to link posts with replies, moderation actions, and topic associations.\n\nAll API operations referencing a specific post will use this identifier in their path parameters."},"economic_board_topics_id":{"type":"string","format":"uuid","description":"Topic that this post belongs to. {@link economic_board_topics.id}.\n\nThis field establishes the relationship between the post and its assigned topic category.\n\nThe value must correspond to an existing record in the economic_board_topics table, which contains exactly seven predefined topics: \"Inflation\", \"Tax Policy\", \"Elections\", \"Global Trade\", \"Monetary Policy\", \"Labor Markets\", and \"Fiscal Policy\".\n\nThis field ensures posts are categorized appropriately and enables topic-based filtering and display in the user interface."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was submitted.\n\nThis field records the exact UTC time when the post was first created and submitted to the system.\n\nThe timestamp follows ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) and is immutable after creation. It serves as the primary chronological reference for sorting and displaying posts in the forum.\n\nThis timestamp is used in conjunction with updated_at to determine if a posted has been edited after submission, as described by the edited field."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last edited.\n\nThis field records the exact UTC time when the post was last modified after its initial submission.\n\nIf the post has never been edited, this field remains unchanged from created_at. When an edit is made within the 24-hour editing window, this field is updated to reflect the modification time.\n\nThis timestamp is used in the user interface to show when the post was last updated and to calculate whether the 24-hour editing window is still active."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field determines the visibility and accessibility of the post to users:\n\n- 'pending': The post has been submitted but requires admin approval before becoming visible to the public\n- 'published': The post has been approved by an admin and is visible to all users\n- 'rejected': The admin has declined to publish the post; it remains hidden from public view\n- 'deleted': The admin has permanently removed the post from the system (hard delete)\n\nFor any request to retrieve a post via the API, only posts with 'published' status are returned as successful responses. All other statuses result in a 404 Not Found response to maintain moderation integrity."},{"const":"published","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field determines the visibility and accessibility of the post to users:\n\n- 'pending': The post has been submitted but requires admin approval before becoming visible to the public\n- 'published': The post has been approved by an admin and is visible to all users\n- 'rejected': The admin has declined to publish the post; it remains hidden from public view\n- 'deleted': The admin has permanently removed the post from the system (hard delete)\n\nFor any request to retrieve a post via the API, only posts with 'published' status are returned as successful responses. All other statuses result in a 404 Not Found response to maintain moderation integrity."},{"const":"rejected","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field determines the visibility and accessibility of the post to users:\n\n- 'pending': The post has been submitted but requires admin approval before becoming visible to the public\n- 'published': The post has been approved by an admin and is visible to all users\n- 'rejected': The admin has declined to publish the post; it remains hidden from public view\n- 'deleted': The admin has permanently removed the post from the system (hard delete)\n\nFor any request to retrieve a post via the API, only posts with 'published' status are returned as successful responses. All other statuses result in a 404 Not Found response to maintain moderation integrity."},{"const":"deleted","description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field determines the visibility and accessibility of the post to users:\n\n- 'pending': The post has been submitted but requires admin approval before becoming visible to the public\n- 'published': The post has been approved by an admin and is visible to all users\n- 'rejected': The admin has declined to publish the post; it remains hidden from public view\n- 'deleted': The admin has permanently removed the post from the system (hard delete)\n\nFor any request to retrieve a post via the API, only posts with 'published' status are returned as successful responses. All other statuses result in a 404 Not Found response to maintain moderation integrity."}],"description":"Moderation status of the post: 'pending', 'published', 'rejected', or 'deleted'.\n\nThis field determines the visibility and accessibility of the post to users:\n\n- 'pending': The post has been submitted but requires admin approval before becoming visible to the public\n- 'published': The post has been approved by an admin and is visible to all users\n- 'rejected': The admin has declined to publish the post; it remains hidden from public view\n- 'deleted': The admin has permanently removed the post from the system (hard delete)\n\nFor any request to retrieve a post via the API, only posts with 'published' status are returned as successful responses. All other statuses result in a 404 Not Found response to maintain moderation integrity."},"subject":{"type":"string","minLength":5,"maxLength":120,"description":"Brief title or subject line of the post (max 120 characters).\n\nThis field contains a concise summary of the post's topic or main point. It serves as the post's title in list views and search results.\n\nThe subject line must be between 5 and 120 characters of meaningful economic or political content. Empty subjects or subjects containing only URLs, emojis, or symbols are rejected by the system.\n\nThis field helps users quickly identify the topic of interest and facilitates search and filtering functionality."},"content":{"type":"string","minLength":10,"maxLength":5000,"description":"Full text content of the post (max 5,000 characters).\n\nThis field contains the complete text of the user's contribution to the Discussion Board.\n\nThe content must be substantive text about an economic or political topic, with a minimum threshold of 10 characters. Posts containing only URLs, emojis, or symbols without meaningful text are rejected.\n\nThe 5,000-character limit ensures content remains focused and readable, discouraging excessively long statements while allowing for detailed economic analysis or policy debate."},"reply_count":{"type":"integer","minimum":0,"description":"Number of direct replies to this post.\n\nThis field contains a count of all approved replies associated with this post in the economic_board_replies table.\n\nThe system automatically increments this counter when a reply is published and decrements it when a reply is permanently deleted.\n\nThis value is displayed in the user interface to indicate the level of engagement a post has generated and helps users identify active discussion threads."},"edited":{"type":"boolean","description":"Whether this post has been edited after initial submission.\n\nThis boolean field indicates whether the post's content or subject has been modified after its initial creation.\n\nThe field is automatically set to true when the member edits their post within the allowed 24-hour editing window. It remains false if the post has never been edited.\n\nThis field is used in the user interface to display an edited marker next to the post, helping users understand if the content they're viewing has been updated since its original submission."},"edited_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of last edit. Null if never edited.\n\nThis field records the exact UTC time when the post was last modified by the author within the 24-hour editing window.\n\nWhen a post is edited, this field is updated to match the updated_at timestamp. If the post has never been edited, this field remains null, which aligns with the edited field being false.\n\nThis field provides a precise record of when edits were made, supporting transparency and accountability in the discussion board."},"author_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"System-generated anonymous identifier derived from IP and timestamp for guest posts.\n\nThis field contains a cryptographic hash of the guest's IP address and the timestamp of creation, providing a persistent anonymous identifier for unauthenticated users.\n\nFor authenticated members, this field remains null since the system uses their member ID for identification instead.\n\nThis field enables moderation and abuse detection without storing personally identifiable information, aligning with the platform's anonymous posting policy."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of admin who last modified status (approve/reject/delete).\n\nThis field tracks the administrator responsible for the last moderation action on a post.\n\nWhen an admin approves, rejects, or deletes a post, their unique identifier from the economic_board_admin table is stored in this field for audit purposes.\n\nThis field remains null until an admin performs a moderation action on the post, and it is never overwritten by subsequent moderation actions to preserve a clear audit trail.\n\nThis field ensures accountability in moderation process while maintaining separation between user-submitted content and administrative actions."},"moderation_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason provided by admin for rejection or deletion. Null if not rejected/deleted.\n\nThis field contains the administrative reason for rejecting or deleting a post, as provided by the admin during moderation.\n\nWhen a post is rejected or deleted, the admin must provide a reason via a predefined set of options (e.g., \"inappropriate content\", \"off-topic\", \"duplicate\") which is then stored here.\n\nThis field remains null if the post status is 'pending' or 'published', as no reason is needed for these states.\n\nThis field supports transparent moderation by providing context for rejected content, while preserving the anonymity of the original author."}},"required":["id","economic_board_topics_id","created_at","updated_at","status","subject","content","reply_count","edited","author_hash"],"description":"Core economic and political discussion posts, each associated with a topic and subject to moderation lifecycle.\n\nThis schema represents the complete data structure of discussion posts in the economic/political forum. All posts are categorized under one of seven predefined topics and undergo a moderation workflow before becoming publicly visible.\n\nThe entity is designed to support anonymous participation while enabling comprehensive moderation. Posts originate from either guest users (anonymously tracked via author_hash) or authenticated members (tracked via their membership).\n\nKey design principles:\n\n- All posts start in 'pending' status for moderation review\n- Only 'published' posts are visible to users; other statuses result in 404 responses\n- Guest submissions are tracked through cryptographic hashing, preserving anonymity\n- Member posts use their established identity for accountability\n- Moderation actions are logged for transparency and compliance\n- The system implements hard delete for admin removals since no soft delete column exists\n- Authorship information is never exposed to users; all posts appear anonymously\n\nThe schema strictly follows the economic_board_posts table in the Prisma schema with no additional or assumed fields. Each property maps directly to a field in the database, ensuring data integrity and implementability.\n\nThis model forms the core of the platform's functionality, serving as the primary unit of content and the central object in all discussion-related operations.","x-autobe-prisma-schema":"economic_board_posts"},"IEconomicBoardPost.IUpdate":{"type":"object","properties":{"subject":{"oneOf":[{"type":"string","minLength":5,"maxLength":120,"pattern":"^\\S(?:.*\\S)?$"},{"type":"null"}],"description":"Brief title or subject line of the post (max 120 characters).\n\nThis field contains a concise summary of the post's topic or main point. It serves as the post's title in list views and search results.\n\nThe subject line must be between 5 and 120 characters of meaningful economic or political content. Empty subjects or subjects containing only URLs, emojis, or symbols are rejected by the system.\n\nThis field is optional in update operations. If provided, it replaces the existing subject. If null or omitted, the subject remains unchanged.\n\nThis field helps users quickly identify the topic of interest and facilitates search and filtering functionality."},"content":{"oneOf":[{"type":"string","minLength":10,"maxLength":5000,"pattern":"^\\S(?:.*\\S)?$"},{"type":"null"}],"description":"Full text content of the post (max 5,000 characters).\n\nThis field contains the complete text of the user's contribution to the Discussion Board.\n\nThe content must be substantive text about an economic or political topic, with a minimum threshold of 10 characters. Posts containing only URLs, emojis, or symbols without meaningful text are rejected.\n\nThe 5,000-character limit ensures content remains focused and readable, discouraging excessively long statements while allowing for detailed economic analysis or policy debate.\n\nThis field is optional in update operations. If provided, it replaces the existing content. If null or omitted, the content remains unchanged."}},"required":[],"description":"Request body for updating an existing economic board post.\n\nThis schema represents the allowable fields that can be modified in an economic board post update operation.\n\nAll properties in this schema are optional (Partial<T> pattern) to support partial updates without requiring clients to submit complete post data.\n\nFor members updating their own posts:\n- Only subject and content fields can be modified\n- Restrictions: Updates must occur within 24 hours of post creation\n- Status cannot be changed\n- admin_id and moderation_reason must be omitted\n\nFor admins updating any post:\n- All fields can be modified\n- Status can be changed to approve, reject, or delete\n- If status is changed to 'rejected' or 'deleted', moderation_reason becomes required\n- Admin_id must be provided when status is modified\n\nThis schema avoids including immutable fields such as id, created_at, and reply_count since these are system-managed.\n\nThe schema is designed to ensure that:\n1. Members cannot alter moderation status\n2. Members cannot change the author identity\n3. Admins must provide justification for rejections/deletions\n4. History is preserved with accurate timestamps\n\nAll updates must be validated against the post's current status and the actor's permissions to ensure compliance with business rules.","x-autobe-prisma-schema":"economic_board_posts"},"IEconomicBoardReplies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for each reply in the economic discussion board system.\n\nThis UUID is generated by the system upon reply creation and serves as the primary means of identifying and referencing individual replies. It is used in API endpoints to retrieve, update, or delete specific replies.\n\nThe identifier is stored in the economic_board_replies table and is referenced by the economic_board_post_id in the same table to maintain the reply-to-post relationship.\n\nNo other identifiers are used for replies in this system, ensuring all operations on replies use this single, consistent identifier."},"economic_board_post_id":{"type":"string","format":"uuid","description":"Reference to the parent economic board post that this reply answers. {@link economic_board_posts.id}.\n\nThis field establishes the hierarchical relationship between a reply and its parent post. It links each reply to exactly one discussion post within the economic_board_posts table.\n\nThis relationship ensures replies are properly organized under their corresponding posts in the discussion thread structure. The foreign key constraint in the database ensures referential integrity - replies cannot exist without their parent post, and if a post is deleted, its replies are automatically removed via cascade deletion.\n\nThe value of this field is determined at reply creation time based on the postId parameter in the API request, which must correspond to an existing post in the economic_board_posts table."},"economic_board_guest_id":{"type":"string","format":"uuid","description":"Reference to the anonymous guest who submitted this reply. {@link economic_board_guest.id}.\n\nThis field links each reply to the economic_board_guest record representing the anonymous user who posted it. This enables the system to track anonymous users while preserving their anonymity, as only the system-generated UUID is stored, not personal information.\n\nThe economic_board_guest_id is set when a reply is submitted, based on the guest's session. When a guest submits a reply, the system retrieves their session_id from the HTTP request and associates it with their existing economic_board_guest record (creating one if needed). This maintains consistency in anonymous user tracking across interactions.\n\nThe guest identifier is never exposed in API responses to uphold the platform's anonymous posting philosophy, and the system uses this field internally for moderation purposes only."},"content":{"type":"string","description":"The text content of the reply. Must be between 5 and 1,000 characters as per business rules.\n\nThis field contains the actual text response from the user to a post or another reply. The content represents the user's contribution to the discussion and must meet minimum and maximum character length requirements to ensure quality and prevent spam. Only text-based input is accepted, excluding HTML, markup, or rich formatting.\n\nThe value is read and validated upon submission, with the system rejecting replies shorter than 5 characters or longer than 1,000 characters. The content is stored exactly as entered by the user (single line or multi-line), preserving the original formatting where applicable.\n\nThe content field is searchable and indexable for moderation and compliance purposes, though it is never exposed directly to users outside the context of the reply display in the discussion thread.","minLength":5,"maxLength":1000},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was submitted in ISO 8601 format (UTC).\n\nThis field records the precise moment when the reply was submitted to the system, in Coordinated Universal Time (UTC) format following ISO 8601 standards (YYYY-MM-DDTHH:mm:ssZ).\n\nThe timestamp is automatically generated by the server at the time of creation and cannot be modified by users or administrative actions. It establishes the chronological order of replies within a discussion thread and is used for displaying replies in sequential order.\n\nIn the economic_board_replies table, this field is designated as DateTime @db.Timestamptz to preserve timezone information precisely, although all timestamps are stored and displayed in UTC for consistency across the system."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was last modified. Initially set to created_at.\n\nThis field tracks the most recent time the reply's content was edited by its original author. When a reply is initially created, updated_at is set equal to created_at. If the reply is edited within the allowed 24-hour window, this field is updated to the current timestamp, reflecting the time of the last modification.\n\nThe updated_at field is never changed by administrative actions (such as moderation or deletion), only by user-initiated edits within the editing window. This field allows the system to display \"[Edited]\" markers on replies that have been modified after their initial submission, while preserving the integrity of the original creation record with created_at."}},"required":["id","economic_board_post_id","economic_board_guest_id","content","created_at","updated_at"],"description":"Represents a reply to an economic/political forum post. Each reply is automatically published without moderation, forms a threaded relationship with a parent post, and has constrained content length for concise responses. Archived for read-performance optimization without user authentication.\n\n@namespace Replies\n@author AutoBE - https://github.com/wrtnlabs/autobe\nThis model represents individual textual responses to economic and political discussion posts on the forum. Unlike the primary posts, replies do not require administrative moderation before becoming visible to users. Once submitted, replies are immediately published and integrated into the discussion thread structure.\n\nReplies have specific technical and business constraints:\n\n- Content is limited to 5-1,000 characters to encourage concise, focused responses\n- Replies are always anonymous and attributed to the guest who submitted them\n- Replies form a hierarchical relationship with parent posts (one-to-many)\n- Replies cannot be edited after 24 hours to maintain conversation history integrity\n- Both creation and update timestamps are preserved for auditability\n\nEach reply link directly to the economic_board_guest entity representing the anonymous poster, and to the economic_board_posts entity representing the parent topic. This ensures traceability for moderation purposes while preserving user anonymity. The reply model is heavily indexed for efficient retrieval of replies to specific posts, supporting the platform's goal of fast discussion thread loading.","x-autobe-prisma-schema":"economic_board_replies"},"IEconomicBoardReplies.IRequest":{"type":"object","description":"Search and filter parameters for economic board replies.\n\nThis type defines the parameters used to search and filter replies to posts in the economic/political discussion board. It supports pagination, sorting, and content search capabilities for retrieving reply collections.\n\nThe properties in this schema align directly with the filtering and pagination needs of the /economicBoard/posts/{postId}/replies PATCH endpoint. It allows users to navigate reply threads efficiently without requiring exact matches for every field.\n\nThis is specifically designed for public-facing thread navigation use cases where comprehensive filtering of replies is required.","properties":{"search":{"type":"string","description":"Text to search for in reply content.\n\nPerforms full-text search across the content field of replies.\n\nThe search should be case-insensitive and support partial word matches. This enables users to find specific responses within lengthy threads based on keywords or phrases.\n\nThe system uses PostgreSQL GIN indexes on the content field for fast text search performance.\n\nFor example, searching for 'tax' would return replies containing the word 'tax', 'taxation', etc."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of results to return, with page 1 being the first page of results.\n\nThis property works in conjunction with limit to implement pagination for the reply search results.\n\nThe page number must be a positive integer starting from 1. Page numbers less than 1 are invalid and will cause an error response.\n\nThis pagination strategy enables efficient retrieval of large sets of replies without overwhelming the client or server with a single large response.","examples":{"v0":1,"v1":2,"v2":3}},"limit":{"type":"integer","minimum":1,"maximum":100,"default":25,"description":"Number of results per page for pagination.\n\nSpecifies how many reply records to return per page. The value must be between 1 and 100 (inclusive), with a default of 25.\n\nThis limitation prevents performance degradation caused by extremely large result sets, while providing sufficient flexibility for different use cases.\n\nSmall limits (1-10) can be useful when reviewing specific replies, while larger limits (50-100) reduce the number of API calls needed to view comprehensive result sets.\n\nWhen limit exceeds 100, the system will enforce the maximum value of 100.","examples":{"v0":10,"v1":25,"v2":50,"v3":100}},"sort":{"oneOf":[{"const":"created_at","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned reply records. Valid values are: 'created_at' (default) or 'updated_at'.\n\nSorting by 'created_at' (default) orders replies chronologically by when they were created (newest first).\n\nSorting by 'updated_at' orders replies by when they were last modified, putting recently edited replies at the top.\n\nThis allows users to organize the reply stream based on chronological order or recency of edits.","examples":["created_at","updated_at"]},{"const":"updated_at","description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned reply records. Valid values are: 'created_at' (default) or 'updated_at'.\n\nSorting by 'created_at' (default) orders replies chronologically by when they were created (newest first).\n\nSorting by 'updated_at' orders replies by when they were last modified, putting recently edited replies at the top.\n\nThis allows users to organize the reply stream based on chronological order or recency of edits.","examples":["created_at","updated_at"]}],"description":"Field name to sort the results by.\n\nSpecifies which field to use for sorting the returned reply records. Valid values are: 'created_at' (default) or 'updated_at'.\n\nSorting by 'created_at' (default) orders replies chronologically by when they were created (newest first).\n\nSorting by 'updated_at' orders replies by when they were last modified, putting recently edited replies at the top.\n\nThis allows users to organize the reply stream based on chronological order or recency of edits.","examples":{"v0":"created_at","v1":"updated_at"}},"order":{"oneOf":[{"const":"asc","description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (oldest first).\n\nDescending order (default) arranges from largest to smallest (newest first).\n\nThis provides flexibility in how results are presented, allowing users to quickly identify either the oldest or newest replies depending on their context."},{"const":"desc","description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (oldest first).\n\nDescending order (default) arranges from largest to smallest (newest first).\n\nThis provides flexibility in how results are presented, allowing users to quickly identify either the oldest or newest replies depending on their context."}],"description":"Sort order direction.\n\nSpecifies whether to sort the results in ascending ('asc') or descending ('desc') order based on the selected sort field.\n\nAscending order arranges from smallest to largest (oldest first).\n\nDescending order (default) arranges from largest to smallest (newest first).\n\nThis provides flexibility in how results are presented, allowing users to quickly identify either the oldest or newest replies depending on their context."}},"required":[]},"IEconomicBoardReply.ICreate":{"type":"object","properties":{"content":{"type":"string","minLength":5,"maxLength":1000,"description":"Content of the reply to be submitted to the target post. Must be between 5 and 1,000 characters as per business rules.\n\nThe reply content must be substantial and relevant to the discussion. It cannot be empty, contain only whitespace characters, or consist solely of punctuation marks or emojis without meaningful text. The character limit ensures replies remain concise while still allowing for thoughtful responses. This restriction prevents spam and encourages quality interaction within the discussion thread.\n\nThe system supports Unicode characters and international text formats. Non-English characters are handled properly in display and storage."}},"required":["content"],"description":"Creation data for a new reply to a specific post in the economic/political discussion board.\n\nThis schema defines the structure of the request body used when creating a new reply to a post. It contains only the essential field needed to create a reply - the content text. Replies are automatically published without moderation and are associated with the parent post identified by the postId path parameter.\n\nThe system enforces strict validation on the content field: it must be between 5 and 1,000 characters in length. This ensures replies are substantive while maintaining readability in discussion threads. The requirement for minimum 5 characters prevents empty or insignificant submissions, while the 1,000-character limit keeps conversations focused and prevents overly long replies that could disrupt the thread structure.\n\nAuthentication is handled via JWT token in the header, which identifies the member submitting the reply. Guests are prohibited from submitting replies, and attempts by guest users will result in a 403 Forbidden response. The reply is tracked in the economic_board_replies table with a foreign key relationship to the post, and the author is associated with the guest session context for anonymized identification.\n\nThis schema follows the principle of minimal data requirements for creation operations, including only the necessary field while relying on the path parameter for context.","x-autobe-prisma-schema":"economic_board_replies"},"IEconomicBoardReply":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the reply.\n\nThis UUID is generated by the system upon creation and serves as the unique identifier for each reply in the economic_board_replies table. It is used to reference the reply in subsequent operations such as retrieving, updating, or deleting the reply. The UUID format ensures global uniqueness across distributed systems and allows for efficient database indexing and querying.\n\nThis field is automatically assigned by the system and is included in responses to provide a stable reference for the reply, enabling client applications to track and manage replies consistently across sessions and requests."},"content":{"type":"string","minLength":5,"maxLength":1000,"description":"The text content of the reply. Must be between 5 and 1,000 characters as per business rules.\n\nThis property maps directly to the 'content' column in the economic_board_replies Prisma schema. The character limit enforces concise responses while allowing sufficient detail for meaningful discussion about economic and political topics. This constraint ensures replies remain focused and readable within the discussion thread structure.\n\nThe content must be substantive and relevant to the parent post topic. It may include analysis, questions, or commentary that contributes to the economic or political discourse without personal attacks, proprietary information, or misleading data. The system validates this constraint during creation and update operations to maintain quality standards for public discourse."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was submitted in ISO 8601 format (UTC).\n\nThis field maps directly to the 'created_at' column in the economic_board_replies Prisma schema, which is marked with @db.Timestamptz. It records the exact moment when the reply was created and submitted to the system. This field is automatically set by the system using the current UTC timestamp and cannot be modified by users or administrators.\n\nThe ISO 8601 format ensures global consistency in date/time representation, enabling accurate interpretation across different time zones and systems.\n\nThe 'created_at' timestamp is critical for maintaining chronological order of replies within a discussion thread and for implementing time-based filtering and sorting preferences in the user interface."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was last modified. Initially set to created_at.\n\nThis field maps directly to the 'updated_at' column in the economic_board_replies Prisma schema, which is marked with @db.Timestamptz. It tracks the last time the reply content was edited. When a reply is first created, this field is set to the same value as created_at. If the reply is edited within the 24-hour edit window, this field is updated to the current UTC timestamp.\n\nThis field serves as an audit trail for content modifications and is essential for maintaining the integrity of the discussion thread when edits occur. It cannot be manually changed by users or administrators, ensuring data authenticity and preventing tampering.\n\nThe 'updated_at' field complements the 'edited' boolean flag by providing precise timing information about when edits occurred."},"edited":{"type":"boolean","description":"Whether this reply has been edited after initial submission.\n\nThis boolean flag maps directly to the 'edited' column in the economic_board_replies Prisma schema. It indicates whether the content of the reply has been modified since its original creation. It is set to false when the reply is first created and is set to true when an edit is made within the allowed 24-hour editing window.\n\nThis field complements the updated_at field by providing a simple indicator of whether the reply content has changed since publication. The platform uses this flag to display an \"[Edited]\" marker next to edited replies, informing other users that the content has been updated since its original submission.\n\nThis transparency promotes accountability and allows readers to assess the context of the conversation accurately."}},"required":["id","content","created_at","updated_at","edited"],"x-autobe-prisma-schema":"economic_board_replies","description":"Detailed information about a specific reply to a post in the economic/political discussion board.\n\nThis schema defines the structure of the response when retrieving information about a specific reply from the economic_board_replies table. It includes all essential metadata about the reply, ensuring complete context for display in discussion threads.\n\nThe response contains the unique identifier for the reply, the content text with character limits enforced, and two timestamps indicating creation and last update times. The edited flag provides additional context about whether the reply has been modified since its original submission.\n\nAll fields are determined by the system based on the economic_board_replies schema in the Prisma database. The schema excludes system-managed reference fields like 'economic_board_guest_id' and 'economic_board_post_id' from the response as these are not to be exposed in client-facing DTOs according to security rules. The system follows the business rules that replies are automatically published without moderation, have no author identifiers exposed publicly, and can be edited only within a 24-hour window.\n\nThis comprehensive response format enables client applications to render replies accurately in discussion threads, with proper attribution, chronological ordering, and edit tracking while maintaining the platform's commitment to anonymous participation and civil discourse."},"IEconomicBoardReply.IUpdate":{"type":"object","properties":{"content":{"type":"string","minLength":5,"maxLength":1000,"description":"Updated content of the reply to replace the existing content. Must be between 5 and 1,000 characters as per business rules.\n\nThis property maps directly to the 'content' column in the economic_board_replies Prisma schema, which is marked with a constraint requiring the text to be between 5 and 1,000 characters. The system validates this constraint during update operations to ensure replies remain concise while allowing sufficient detail for meaningful discussion about economic and political topics.\n\nThe update must maintain the same business rules as the original creation: the content must be substantive and relevant to the parent post topic, avoiding personal attacks, proprietary information, or misleading data. This constraint ensures quality standards for public discourse are maintained during modifications.\n\nNote that the 'updated_at' and 'edited' fields on the server are automatically handled by the system when this field is updated; they are not explicit inputs to this request object."}},"required":["content"],"x-autobe-prisma-schema":"economic_board_replies","description":"Update details for a reply to an economic/political discussion post. This schema defines the structure for modifying existing replies.\n\nThis type is used exclusively in the PUT /economicBoard/member/posts/{postId}/replies/{replyId} operation.\n\nOnly the content field is updatable, as replies have no other mutable properties in the system. The system automatically handles updated_at and edited flags upon successful update.\n\nAll updates must maintain the 5-1,000 character constraint, and are only permitted within 24 hours of the reply's creation, as enforced by the business logic layer. This schema ensures only valid update data is processed by the system."},"IEconomicBoardAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin account.\n\nThis UUID is generated by the system and serves as the primary key for the economic_board_admin table. It is used in all administrative operations to uniquely identify the admin account and is stored in the auth_jwt_id field for session management. This identifier is immutable after account creation and cannot be modified through any API operation."},"email":{"type":"string","format":"email","description":"Email address of the admin account.\n\nThis field uniquely identifies the admin within the system and must match a pre-approved list defined in system configuration. It is used for authentication against the stored password_hash and appears in moderation logs for administrative accountability. While visible in administrative interfaces, this field is not exposed to regular users, maintaining appropriate security boundaries."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was provisioned by the system owner.\n\nThis field records the exact moment of account creation, providing an immutable audit trail for administrative access. The value is set by the system at the time of admin provisioning and cannot be modified by any API operations. It is used to determine administrative account age and is referenced in system compliance reports. The timestamp follows ISO 8601 format with UTC timezone."},"last_login":{"type":"string","format":"date-time","description":"The most recent successful admin login timestamp.\n\nThis field tracks when the admin last authenticated to the system, providing critical security monitoring data. The system automatically updates it upon successful authentication. This timestamp is used to detect inactive accounts and potential security anomalies. It is presented in ISO 8601 format and is a key metric in system health monitoring for the moderation infrastructure."},"is_active":{"type":"boolean","description":"Flag indicating whether the admin account is active.\n\nThis boolean field controls administrative access permissions. When false, the admin account is disabled and cannot authenticate to the system. This provides a mechanism to suspend administrative access in case of compromised credentials, policy violations, or account retirement. The field is set to true during initial provisioning and can be modified by system owners through privileged administrative interfaces, not general API operations."},"auth_jwt_id":{"type":"string","format":"uuid","description":"UUID of the current active JWT token for session management.\n\nThis field directly corresponds to the auth_jwt_id column in the economic_board_admin Prisma model. It is used to bind the admin's current session to their account and is validated during every authenticated request. The JWT token must match this field's value for access to be granted. This is a critical component of authentication and must be included in all admin representations to maintain session integrity and security."}},"required":["id","email","created_at","last_login","is_active","auth_jwt_id"],"description":"Minimal summary representation of an admin account for administrative list views.\n\nThis schema is designed for presentation in administrator dashboard lists and management interfaces where complete details are not required on initial display. It includes essential identifiers and status indicators needed to identify, locate, and assess admin accounts without exposing sensitive authentication data.\n\nThe summary includes auth_jwt_id because it is a required field in the economic_board_admin model and is used for session management in all authentication operations. This represents a security-conscious design pattern appropriate for administrative context.\n\nThis type is exclusively used in response to the GET /economicBoard/admin/admins operation when returning paginated administrative account information. It provides an optimized view that balances information needs with privacy requirements in administrative workflows."}}}}