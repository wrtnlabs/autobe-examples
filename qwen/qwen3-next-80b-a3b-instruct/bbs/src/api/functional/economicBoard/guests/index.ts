import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardGuest } from "../../../structures/IEconomicBoardGuest";

/**
 * Retrieve a specific guest's interaction history.
 *
 * This operation retrieves detailed information about a specific guest's
 * interaction with the economic/discussion board system. The guest is
 * identified by a unique UUID identifier (guestId) that corresponds to a record
 * in the economic_board_guest table from the Prisma schema.
 *
 * The returned data includes the guest's session_id, which is used for
 * persistent state tracking across interactions, and the ip_hash, a
 * cryptographic hash of the guest's IP address used for abuse detection and
 * moderation purposes without storing personally identifiable information. The
 * last_active timestamp indicates when the guest last performed any action on
 * the system, which helps determine session validity and activity patterns.
 *
 * Security considerations are paramount in this operation. Guests are anonymous
 * users who have not registered or authenticated, so no personal identifying
 * information is exposed. The IP_hash is stored as a cryptographic hash to
 * protect user privacy while still enabling moderation against abusive
 * behavior.
 *
 * This operation is critical for moderation workflows, as administrators may
 * need to investigate suspicious activity patterns across multiple guest
 * interactions. It also supports system analytics on anonymous user engagement
 * metrics.
 *
 * The operation references the economic_board_guest model from the Prisma
 * schema, which includes all fields defined in the database: id, created_at,
 * session_id, ip_hash, and last_active. No additional fields are included that
 * do not exist in the schema, maintaining strict alignment with the data
 * model.
 *
 * Error handling includes returning a 404 Not Found response if the guestId
 * does not correspond to an existing record. All responses are formatted in
 * JSON with standard HTTP status codes.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the guest whose interaction history
 *   is being retrieved
 * @path /economicBoard/guests/:guestId
 * @accessor api.functional.economicBoard.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the guest whose interaction history is being
     * retrieved
     */
    guestId: string & tags.Format<"uuid">;
  };
  export type Response = IEconomicBoardGuest;

  export const METADATA = {
    method: "GET",
    path: "/economicBoard/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/economicBoard/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): IEconomicBoardGuest =>
    typia.random<IEconomicBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
