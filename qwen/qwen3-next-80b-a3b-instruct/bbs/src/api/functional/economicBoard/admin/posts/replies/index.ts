import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Permanently delete a specific reply to a post.
 *
 * This operation permanently removes a specific reply to a post from the
 * system. This is a hard delete operation, meaning the reply data is completely
 * removed from the database with no possibility of recovery. The
 * economic_board_replies table schema lacks any soft-delete columns (such as
 * deleted_at or is_deleted), so removal is final and irreversible.
 *
 * The deletion is subject to system authorization rules: only administrators
 * are permitted to initiate this deletion. The system maintains no mechanism
 * for users to delete replies they have posted. This design ensures that once a
 * reply (which is automatically published without moderation) appears on the
 * forum, it becomes part of the permanent public record unless removed by an
 * administrator for policy violations.
 *
 * When a reply is deleted, the system automatically decrements the reply_count
 * field in the corresponding parent economic_board_posts record to maintain
 * data integrity. The deletion process removes all associated metadata
 * including the original content, timestamps, and references to the guest
 * author.
 *
 * This operation is designed for administrative moderation only and cannot be
 * initiated by guests or registered members. It represents the ultimate
 * enforcement mechanism for removing content that violates community standards
 * after publication. There is no notification sent to the author whose reply is
 * deleted, maintaining the principle of anonymous participation.
 *
 * The system does not archive or log the deleted content for later recovery;
 * complete removal is the intended behavior to prevent abuse and preserve
 * system integrity.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post to which the reply
 *   belongs
 * @param props.replyId Unique identifier of the reply to be deleted
 * @path /economicBoard/admin/posts/:postId/replies/:replyId
 * @accessor api.functional.economicBoard.admin.posts.replies.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent post to which the reply belongs */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the reply to be deleted */
    replyId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/economicBoard/admin/posts/:postId/replies/:replyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/economicBoard/admin/posts/${encodeURIComponent(props.postId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("replyId")(() => typia.assert(props.replyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
