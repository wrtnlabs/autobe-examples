import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardGuest } from "../../../../structures/IEconomicBoardGuest";
import { IPageIEconomicBoardGuest } from "../../../../structures/IPageIEconomicBoardGuest";

/**
 * Search and retrieve paginated guest user interactions.
 *
 * This operation enables administrators to search, filter, and retrieve a
 * paginated list of guest users who have interacted with the economic/political
 * discussion board. Guests are anonymous visitors who create posts or replies
 * without authentication, tracked in the economic_board_guest table. This table
 * contains fields: id (UUID), created_at (timestamp of first interaction),
 * session_id (persistent anonymous identifier), ip_hash (cryptographic hash of
 * IP address for abuse detection), and last_active (timestamp of most recent
 * interaction).
 *
 * This is implemented as a PATCH request because it accepts complex search
 * criteria rather than simple path parameters. The request body will define
 * parameters such as date ranges for user activity, pagination limits, sorting
 * preferences, and search filters for session_id or ip_hash patterns. The
 * system will only return guest records that have been active recently,
 * respecting user privacy guidelines and preventing bulk data harvesting.
 *
 * The response includes a paginated collection (IPageIEconomicBoardGuest)
 * containing guest summary information, including id, created_at, last_active,
 * and an obfuscated view of the session_id. Admins may use this list to
 * investigate potential abuse patterns, repeated sessions from the same IP, or
 * suspicious activity. Guest data is not accessible to regular members or
 * guests themselves, ensuring compliance with the platform's no-PII policy.
 *
 * @param props.connection
 * @param props.body Search criteria, sorting preferences, and pagination
 *   parameters for filtering guest interactions.
 * @path /economicBoard/admin/guests
 * @accessor api.functional.economicBoard.admin.guests.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria, sorting preferences, and pagination parameters for
     * filtering guest interactions.
     */
    body: IEconomicBoardGuest.IRequest;
  };
  export type Body = IEconomicBoardGuest.IRequest;
  export type Response = IPageIEconomicBoardGuest;

  export const METADATA = {
    method: "PATCH",
    path: "/economicBoard/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/economicBoard/admin/guests";
  export const random = (): IPageIEconomicBoardGuest =>
    typia.random<IPageIEconomicBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
