import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardAdmin } from "../../../../structures/IEconomicBoardAdmin";
import { IPageIEconomicBoardAdmin } from "../../../../structures/IPageIEconomicBoardAdmin";

/**
 * Search and retrieve a filtered, paginated list of economic discussion board
 * administrators.
 *
 * This operation retrieves a filtered and paginated list of economic discussion
 * board administrators from the system. It provides advanced search
 * capabilities for finding administrators based on multiple criteria including
 * partial email matching, last login date ranges, and account status.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Administrators can sort by creation date, last login,
 * email, or other relevant fields in ascending or descending order.
 *
 * Security considerations include rate limiting for search operations and
 * appropriate filtering of sensitive administrator information. This operation
 * is restricted to admin users only, ensuring that only privileged users can
 * view the complete list of administrative accounts.
 *
 * This operation integrates with the economic_board_admin table as defined in
 * the Prisma schema, incorporating all available administrator fields and
 * relationships. The response includes administrator summary information
 * optimized for list displays, with options to include additional details based
 * on authorization level.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for administrator
 *   filtering
 * @path /economicBoard/admin/admins
 * @accessor api.functional.economicBoard.admin.admins.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for administrator filtering */
    body: IEconomicBoardAdmin.IRequest;
  };
  export type Body = IEconomicBoardAdmin.IRequest;
  export type Response = IPageIEconomicBoardAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/economicBoard/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/economicBoard/admin/admins";
  export const random = (): IPageIEconomicBoardAdmin.ISummary =>
    typia.random<IPageIEconomicBoardAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific admin user by ID.
 *
 * This API operation fetches detailed information about a specific admin user
 * from the economicBoard system. Admin users have elevated permissions to
 * approve, reject, or delete posts and require secure access verification.
 *
 * The operation retrieves data from the economic_board_admin table in the
 * Prisma schema, which contains the admin's email address, password hash for
 * authentication, timestamps of account creation and last login, an active
 * status flag, and an authentication JWT ID for session management. All fields
 * are essential for authentication and authorization processes.
 *
 * Security considerations include ensuring only authenticated users with
 * appropriate permissions can access this endpoint. The adminId parameter must
 * be a valid UUID that corresponds to an existing admin record in the database.
 * The response should not include sensitive information like password_hash in
 * production environments, although the schema includes this field for system
 * integrity.
 *
 * This operation is critical for administrative dashboards that require
 * verification of admin identities and status. It must work in conjunction with
 * authentication middleware that validates JWT tokens and verifies the
 * requesting user has admin privileges. This ensures only authorized
 * administrators can view other admin accounts, preventing privilege escalation
 * attacks.
 *
 * The data returned by this endpoint may be used in conjunction with admin
 * action logs to audit moderation activities and investigate potential system
 * misuse or security breaches.
 *
 * @param props.connection
 * @param props.adminId The unique identifier of the admin user to retrieve,
 *   matching the UUID format used in the economic_board_admin table.
 * @path /economicBoard/admin/admins/:adminId
 * @accessor api.functional.economicBoard.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier of the admin user to retrieve, matching the
     * UUID format used in the economic_board_admin table.
     */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IEconomicBoardAdmin;

  export const METADATA = {
    method: "GET",
    path: "/economicBoard/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/economicBoard/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IEconomicBoardAdmin =>
    typia.random<IEconomicBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
