import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardReplies } from "../../../../structures/IEconomicBoardReplies";
import { IPageIEconomicBoardReplies } from "../../../../structures/IPageIEconomicBoardReplies";

/**
 * Retrieve a specific reply to a post by unique identifier.
 *
 * This operation retrieves a specific reply to an economic/political discussion
 * post. The reply must be identified by both the parent post's unique
 * identifier and the reply's unique identifier. This ensures the reply is
 * properly contextualized within the discussion thread hierarchy.
 *
 * The operation returns complete details about the reply including its content,
 * creation timestamp, and update timestamp. The reply content is constrained to
 * 5-1,000 characters as per business rules and includes no moderation status
 * since replies are automatically published without requiring admin approval.
 *
 * Security considerations ensure that only authenticated users or guests can
 * access published replies, and that replies cannot be accessed if their parent
 * post has been deleted or rejected. The reply's guest identifier is not
 * exposed in the response for privacy purposes, as anonymous posting is
 * permitted on the platform.
 *
 * This operation integrates with the economic_board_replies table as defined in
 * the Prisma schema, incorporating all available reply fields. The response
 * includes only the essential information needed for display in a discussion
 * thread, with timestamps in ISO 8601 format for consistency with system
 * requirements.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post to which the reply
 *   belongs
 * @param props.replyId Unique identifier of the specific reply to retrieve
 * @path /economicBoard/posts/:postId/replies/:replyId
 * @accessor api.functional.economicBoard.posts.replies.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent post to which the reply belongs */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific reply to retrieve */
    replyId: string & tags.Format<"uuid">;
  };
  export type Response = IEconomicBoardReplies;

  export const METADATA = {
    method: "GET",
    path: "/economicBoard/posts/:postId/replies/:replyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/economicBoard/posts/${encodeURIComponent(props.postId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): IEconomicBoardReplies =>
    typia.random<IEconomicBoardReplies>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("replyId")(() => typia.assert(props.replyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of replies to a post.
 *
 * This operation retrieves a filtered and paginated list of replies associated
 * with a specific economic/political discussion post. The post is identified by
 * its unique identifier in the path parameter, ensuring all replies are
 * contextually grouped under the correct parent post.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Replies can be sorted by creation timestamp in ascending
 * or descending order to facilitate chronological discussion viewing. Search
 * capabilities allow filtering replies by content keywords, enabling users to
 * find specific responses within lengthy threads.
 *
 * Security considerations ensure that only published replies are returned,
 * excluding any replies to deleted or rejected posts. The response includes
 * only essential reply information optimized for display in a discussion
 * thread, with timestamps in ISO 8601 format for consistency with system
 * requirements.
 *
 * This operation integrates with the economic_board_replies table as defined in
 * the Prisma schema, incorporating all available reply fields. The response
 * includes the reply content, creation timestamp, update timestamp, and
 * associated guest identifier, with the guest details masked for anonymous
 * posting compliance.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post for which replies
 *   are being retrieved
 * @param props.body Search criteria and pagination parameters for filtering
 *   replies
 * @path /economicBoard/posts/:postId/replies
 * @accessor api.functional.economicBoard.posts.replies.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the parent post for which replies are being
     * retrieved
     */
    postId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for filtering replies */
    body: IEconomicBoardReplies.IRequest;
  };
  export type Body = IEconomicBoardReplies.IRequest;
  export type Response = IPageIEconomicBoardReplies;

  export const METADATA = {
    method: "PATCH",
    path: "/economicBoard/posts/:postId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/economicBoard/posts/${encodeURIComponent(props.postId ?? "null")}/replies`;
  export const random = (): IPageIEconomicBoardReplies =>
    typia.random<IPageIEconomicBoardReplies>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
