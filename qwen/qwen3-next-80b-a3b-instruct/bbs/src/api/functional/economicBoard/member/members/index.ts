import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardMember } from "../../../../structures/IEconomicBoardMember";

/**
 * Retrieve detailed information for a specific economic discussion board
 * member.
 *
 * This operation retrieves the complete profile information of a specific
 * member from the economic discussion board system. The operation queries the
 * economic_board_member table to obtain details including email address,
 * account creation timestamp, last login date, and active status.
 *
 * The operation supports authentication through JWT token validation. Members
 * can only retrieve their own information, while admins may retrieve any
 * member's information. The system enforces strict access control to protect
 * user privacy.
 *
 * The response does not include sensitive data like password_hash or
 * auth_jwt_id, adhering to security best practices. For security purposes, the
 * email address is returned in full but system-level identifiers like
 * auth_jwt_id remain protected.
 *
 * Error handling ensures that unauthorized access attempts return HTTP 403
 * Forbidden, while attempts to retrieve non-existent members return HTTP 404
 * Not Found. This operation is essential for member profile management and
 * administrative oversight of the discussion board community.
 *
 * @param props.connection
 * @param props.memberId Unique UUID identifier of the target economic board
 *   member
 * @path /economicBoard/member/members/:memberId
 * @accessor api.functional.economicBoard.member.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID identifier of the target economic board member */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = IEconomicBoardMember;

  export const METADATA = {
    method: "GET",
    path: "/economicBoard/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/economicBoard/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IEconomicBoardMember =>
    typia.random<IEconomicBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
