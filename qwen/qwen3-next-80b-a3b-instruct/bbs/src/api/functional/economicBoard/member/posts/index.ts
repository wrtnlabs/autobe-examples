import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardPost } from "../../../../structures/IEconomicBoardPost";
export * as replies from "./replies/index";

/**
 * Create a new economic/political discussion post.
 *
 * This operation allows authenticated members to submit a new economic or
 * political discussion post. The system automatically assigns this post to
 * 'pending' moderation status, ensuring it remains invisible to all users until
 * approved by an administrator, following the platform's civil discourse
 * principles.
 *
 * When a member submits a new post, the system requires a specific topic from
 * the seven predefined categories: 'Inflation', 'Tax Policy', 'Elections',
 * 'Global Trade', 'Monetary Policy', 'Labor Markets', or 'Fiscal Policy'. The
 * post must include a subject between 5 and 120 characters and content between
 * 10 and 5,000 characters. The system automatically assigns the current UTC
 * timestamp as the creation date and sets the moderation status to 'pending'.
 *
 * The request body includes the topic identifier and content, with
 * authentication handled through a JWT token. The system uses the authenticated
 * member's internal identifier to create a system-generated author_hash that
 * ensures anonymization of the author in all public-facing outputs, with no
 * access to personal identifiers by the public. No admin_id or
 * moderation_reason fields are populated during submission - these are
 * exclusively managed during subsequent admin moderation actions.
 *
 * Posts that fail validation (empty content, wrong topic format, exceeding
 * character limits) are rejected immediately with appropriate error messages.
 * The post is preserved in the database with complete metadata for audit
 * purposes, but direct manipulation of moderation status is performed through
 * separate, admin-only operations.
 *
 * All responses are consistent with the anonymous posting model of the platform
 * - no identifying information about the author is exposed to other users, and
 * all public statistics reflect anonymous contributions only.
 *
 * @param props.connection
 * @param props.body Creation data for a new discussion post including topic
 *   reference and content
 * @path /economicBoard/member/posts
 * @accessor api.functional.economicBoard.member.posts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation data for a new discussion post including topic reference and
     * content
     */
    body: IEconomicBoardPost.ICreate;
  };
  export type Body = IEconomicBoardPost.ICreate;
  export type Response = IEconomicBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/economicBoard/member/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/economicBoard/member/posts";
  export const random = (): IEconomicBoardPost =>
    typia.random<IEconomicBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing economic board post.
 *
 * This operation allows authorized users to modify the content or subject of an
 * existing economic board post.
 *
 * The post must be in either 'published' or 'rejected' status to be eligible
 * for modification. Posts with 'deleted' status cannot be updated, and attempts
 * to update them will result in a 404 Not Found response, as the record is
 * permanently removed from active system state.
 *
 * For members, updates are only permitted within 24 hours of the post's
 * original creation timestamp. If the 24-hour window has expired, the update
 * request will be denied with a 403 Forbidden response, regardless of the
 * content changes being requested. This restriction enforces the system's
 * business rule of limiting post editing to a brief period after submission.
 *
 * Administrators have broader permissions and can update any post's content,
 * subject, or moderation status at any time. When an admin updates a post's
 * status (e.g., from 'rejected' to 'published'), the system records the admin
 * ID and any moderation_reason provided in the request. The moderation_reason
 * field can be used to document the rationale for status changes.
 *
 * The system automatically sets the updated_at timestamp to the current UTC
 * time and sets the edited flag to true when content or subject fields are
 * modified. If the original poster's user ID is provided in the JWT token, the
 * system performs ownership verification against the author_hash or member
 * association before allowing the update.
 *
 * This operation is critical for maintaining content integrity while respecting
 * both user edit windows and administrative authority. It supports the
 * platform's core principle of structured, time-limited editing balanced with
 * authoritative moderation.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target economic board post to
 *   update. Must match an existing record in the economic_board_posts table.
 *   The system validates that the post exists and is not in 'deleted' status
 *   before allowing modification.
 * @param props.body Update details for the economic board post including
 *   content, subject, and optional moderation state changes.
 * @path /economicBoard/member/posts/:postId
 * @accessor api.functional.economicBoard.member.posts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the target economic board post to update. Must
     * match an existing record in the economic_board_posts table. The
     * system validates that the post exists and is not in 'deleted' status
     * before allowing modification.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Update details for the economic board post including content,
     * subject, and optional moderation state changes.
     */
    body: IEconomicBoardPost.IUpdate;
  };
  export type Body = IEconomicBoardPost.IUpdate;
  export type Response = IEconomicBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/economicBoard/member/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/economicBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IEconomicBoardPost =>
    typia.random<IEconomicBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
