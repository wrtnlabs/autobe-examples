import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardReply } from "../../../../../structures/IEconomicBoardReply";

/**
 * Create a new reply to a specific post.
 *
 * This operation allows a member to create a new reply to a specific post in
 * the economic/political discussion board. The reply content must be between 5
 * and 1,000 characters as per business rules. When a reply is submitted, the
 * system automatically assigns it the current timestamp and links it to the
 * parent post identified by the postId path parameter. Replies are
 * automatically published immediately without requiring admin approval, unlike
 * posts which undergo moderation.
 *
 * The operation requires the user to be authenticated as a member (with a valid
 * JWT token) to submit a reply. Guests are prohibited from posting replies, and
 * attempts by guest users will result in a 403 Forbidden response. The reply's
 * author is tracked through the guest's session, which is linked to the
 * economic_board_guest table in the database.
 *
 * The reply is stored in the economic_board_replies table, with a foreign key
 * relationship to the economic_board_posts table via the economic_board_post_id
 * field. The reply has no direct relation to a specific member account but is
 * tied to the guest session that initiated the post. This preserves anonymity
 * while maintaining a connection to the user's interaction context.
 *
 * This operation interacts directly with the economic_board_posts table to
 * increment the reply_count field after a successful reply submission. It also
 * updates the updated_at timestamp on the parent post to reflect recent
 * activity.
 *
 * Error conditions include: reply content below 5 characters (rejected),
 * content exceeding 1000 characters (truncated or rejected), missing postId
 * parameter, or attempting to reply to a non-existent post (404 response). The
 * system responds with appropriate HTTP status codes and contextual messages
 * for each error scenario.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post to which the reply
 *   is being submitted. This must correspond to an existing
 *   economic_board_posts record.
 * @param props.body Content of the reply to be submitted to the target post.
 *   Must be between 5 and 1,000 characters.
 * @path /economicBoard/member/posts/:postId/replies
 * @accessor api.functional.economicBoard.member.posts.replies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target post to which the reply is being
     * submitted. This must correspond to an existing economic_board_posts
     * record.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Content of the reply to be submitted to the target post. Must be
     * between 5 and 1,000 characters.
     */
    body: IEconomicBoardReply.ICreate;
  };
  export type Body = IEconomicBoardReply.ICreate;
  export type Response = IEconomicBoardReply;

  export const METADATA = {
    method: "POST",
    path: "/economicBoard/member/posts/:postId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/economicBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/replies`;
  export const random = (): IEconomicBoardReply =>
    typia.random<IEconomicBoardReply>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing reply.
 *
 * This operation allows a member to update their previously submitted reply to
 * a specific post within the 24-hour editing window. The edit is permissible
 * only when the reply's creation timestamp is within the last 86,400 seconds
 * (24 hours). The operation updates the reply content, sets the updated_at
 * timestamp to the current time, and marks the edited flag as true in the
 * economic_board_replies table.
 *
 * The system enforces strict ownership validation to ensure that only the user
 * who originally submitted the reply can edit it. This is determined by
 * matching the reply's associated guest session (economic_board_guest_id) with
 * the authenticated member's session (in the JWT token). Attempts by other
 * users to edit a reply will result in a 403 Forbidden response.
 *
 * The updated reply content must still conform to the character limits of 5 to
 * 1,000 characters. Content below 5 characters will be rejected with a
 * validation error, and content exceeding 1,000 characters will either be
 * truncated or rejected depending on system configuration.
 *
 * After a successful edit, the system appends a visual "[Edited]" marker to the
 * reply in the user interface and retains the original creation timestamp while
 * updating the updated_at field. This preserves the conversation's
 * chronological integrity while allowing for corrections.
 *
 * This operation directly interacts with the economic_board_replies table,
 * modifying only the content, updated_at, and edited fields. It does not affect
 * the parent post or any other replies. Edits are immediately visible to all
 * users and do not require re-approval.
 *
 * Error conditions include: edit attempt after 24 hours (returning 403
 * Forbidden with message "Edits are only permitted within 24 hours of
 * posting"), attempting to edit a non-existent reply, editing a reply belonging
 * to another user, or providing invalid content length. The system responds
 * with appropriate HTTP status codes and clear error messages for each
 * scenario.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post that the reply
 *   belongs to. This must correspond to an existing economic_board_posts
 *   record.
 * @param props.replyId Unique identifier of the specific reply to be updated.
 *   This must correspond to an existing economic_board_replies record.
 * @param props.body Updated content of the reply to replace the existing
 *   content. Must be between 5 and 1,000 characters.
 * @path /economicBoard/member/posts/:postId/replies/:replyId
 * @accessor api.functional.economicBoard.member.posts.replies.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the target post that the reply belongs to. This
     * must correspond to an existing economic_board_posts record.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the specific reply to be updated. This must
     * correspond to an existing economic_board_replies record.
     */
    replyId: string & tags.Format<"uuid">;

    /**
     * Updated content of the reply to replace the existing content. Must be
     * between 5 and 1,000 characters.
     */
    body: IEconomicBoardReply.IUpdate;
  };
  export type Body = IEconomicBoardReply.IUpdate;
  export type Response = IEconomicBoardReply;

  export const METADATA = {
    method: "PUT",
    path: "/economicBoard/member/posts/:postId/replies/:replyId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/economicBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): IEconomicBoardReply =>
    typia.random<IEconomicBoardReply>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("replyId")(() => typia.assert(props.replyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
