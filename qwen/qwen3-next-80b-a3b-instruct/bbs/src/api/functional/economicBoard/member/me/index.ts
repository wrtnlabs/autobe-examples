import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IEconomicBoardMember } from "../../../../structures/IEconomicBoardMember";

/**
 * Retrieve own member profile.
 *
 * This operation retrieves the complete profile information of the currently
 * authenticated member from the economic discussion board system. The operation
 * queries the economic_board_member table to obtain details including email
 * address, account creation timestamp, last login date, and active status. The
 * user must be authenticated as the member whose profile is being retrieved.
 * This endpoint uses the '/me' convention, which enforces that the user can
 * only retrieve their own profile, not others'.
 *
 * The response does not include sensitive data like password_hash or
 * auth_jwt_id, ensuring adherences to security best practices. For privacy, the
 * email address is returned in its full form, but system tokens and identifiers
 * are omitted.
 *
 * Error handling ensures that unauthorized access attempts return HTTP 403
 * Forbidden. This operation is essential for the member's self-service profile
 * management experience.
 *
 * @param props.connection
 * @path /economicBoard/member/me
 * @accessor api.functional.economicBoard.member.me.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(connection: IConnection): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(),
          status: null,
        },
      );
}
export namespace at {
  export type Response = IEconomicBoardMember;

  export const METADATA = {
    method: "GET",
    path: "/economicBoard/member/me",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/economicBoard/member/me";
  export const random = (): IEconomicBoardMember =>
    typia.random<IEconomicBoardMember>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
