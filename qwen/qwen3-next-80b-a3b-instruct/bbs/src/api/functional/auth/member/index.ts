import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconomicBoardMember } from "../../../structures/IEconomicBoardMember";

/**
 * Register a new member account using email and password, creating a record in
 * economic_board_member table.
 *
 * This API endpoint facilitates member account registration on the economic
 * discussion board. When a new user submits their email and password, the
 * system creates a record in the economic_board_member table using the provided
 * email and password_hash fields. A new UUID is generated for the member's ID,
 * and the auth_jwt_id is initialized to a null state until the first successful
 * login. The created_at timestamp records the registration time, while
 * verified_at remains null until email verification is completed. The is_active
 * flag defaults to true, submitting the account as immediately active.
 * Following successful registration, the system generates a new JWT access
 * token and a refresh token stored in an httpOnly cookie to maintain the
 * session.
 *
 * The implementation strictly relies on the schema's defined fields: email for
 * authentication identity, password_hash for credential storage, created_at for
 * audit trails, and auth_jwt_id as the session identifier. No other fields
 * (e.g., phone, profile, or preferences) are supported as they do not exist in
 * the schema.
 *
 * This registration operation is foundational for member functionality,
 * enabling the creation of posts (pending moderation) and replies on the
 * discussion board, as defined in the business rules. Upon successful
 * registration, the system enforces email verification before strong
 * authentication rights are fully granted. The behavior aligns with the user
 * role definition of member and must be paired with the login and refresh
 * operations to complete the authentication lifecycle.
 *
 * Security considerations center around the protection of password_hash using
 * industry-standard bcrypt hashing. The system never stores plain text
 * passwords and generates unique, cryptographically secure UUIDs for each new
 * member. The auth_jwt_id will be updated upon first login to ensure session
 * integrity.
 *
 * This operation is dependent on the downstream email verification system to
 * complete the registration lifecycle, as indicated in the business rules. For
 * successful authentication, this operation must be followed by the login
 * operation to establish a valid session.
 *
 * @param props.connection
 * @param props.body Registration data for a new member account.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration data for a new member account. */
    body: IEconomicBoardMember.ICreate;
  };
  export type Body = IEconomicBoardMember.ICreate;
  export type Response = IEconomicBoardMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): IEconomicBoardMember.IAuthorized =>
    typia.random<IEconomicBoardMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate member user credentials and issue access and refresh tokens.
 *
 * This API endpoint authenticates a member user by validating their email and
 * password_hash against the economic_board_member table. The operation queries
 * the database for a member record with the provided email and compares the
 * hashed password using bcrypt. Upon successful authentication, the system
 * generates a new JWT access token with a 30-minute expiration and a refresh
 * token stored in an httpOnly cookie with a 30-day expiration. The auth_jwt_id
 * in the member record is updated to the UUID of the issued access token,
 * creating a direct binding between the session and the user account. The
 * last_login field is updated with the current timestamp to maintain an
 * auditable login history.
 *
 * This operation strictly uses schema-defined fields: email for identity
 * lookup, password_hash for credential verification, auth_jwt_id to track the
 * active session, and last_login to maintain session history. No other fields
 * (e.g., credentials, device info, or multi-factor fields) are involved, as
 * they are absent from the schema.
 *
 * This login operation enables member access to create and edit posts, as per
 * business rules, and must follow successful registration. The system enforces
 * strict session management: the refresh token is required to obtain new access
 * tokens after expiration, ensuring continuous access. The operation concludes
 * with the issuance of the IAuthorized response containing both token types and
 * member identifiers.
 *
 * Security protocols emphasize the use of secure, encrypted JWT tokens,
 * httpOnly cookies for refresh tokens, and secure password hashing. All
 * communication occurs over HTTPS to prevent credential interception.
 *
 * @param props.connection
 * @param props.body Login credentials for a member account.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for a member account. */
    body: IEconomicBoardMember.IRequest;
  };
  export type Body = IEconomicBoardMember.IRequest;
  export type Response = IEconomicBoardMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): IEconomicBoardMember.IAuthorized =>
    typia.random<IEconomicBoardMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh an expired access token using a valid refresh token.
 *
 * This API endpoint renews a member's access token by validating the refresh
 * token stored in an httpOnly cookie. The system retrieves the authentication
 * context from the cookie, verifies its signature and expiration, and confirms
 * it matches the auth_jwt_id in the economic_board_member record. Upon
 * validation, a new JWT access token with a 30-minute expiration is generated,
 * and the auth_jwt_id in the member record is updated to the new token's UUID.
 * The refresh token may be rotated with a new 30-day expiration to prevent
 * replay attacks. The last_login timestamp is optionally updated to reflect
 * session activity.
 *
 * This refresh flow strictly depends on the schema's auth_jwt_id and last_login
 * fields. No additional fields (e.g., device id, token binding) exist in the
 * schema to support alternative refresh mechanisms. The implementation does not
 * involve any other entity tables or properties.
 *
 * The operation ensures continuous session validity without requiring
 * re-authentication, aligning with the 30-minute access token lifespan and
 * 30-day refresh lifecycle defined in the business rules. The logic is entirely
 * contained within the economic_board_member table. This operation must follow
 * a successful login to operate, as no refresh occurs without an initial
 * authentication event.
 *
 * Security measures ensure that refresh tokens are encrypted, stored in
 * httpOnly cookies to prevent XSS, and are single-use or rotate to mitigate
 * token theft. This system maintains session integrity entirely within the
 * parameterized schema structure.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Response = IEconomicBoardMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): IEconomicBoardMember.IAuthorized =>
    typia.random<IEconomicBoardMember.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
