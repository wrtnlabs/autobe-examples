import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Detailed information about an admin user including authentication metadata
 * and account status.
 *
 * This schema represents the complete profile information for an administrative
 * account on the economic/political discussion board.
 *
 * It includes all fields defined in the economic_board_admin Prisma schema,
 * providing a comprehensive view of the administrative user account. This type
 * is used in responses that require detailed administrative information, such
 * as retrieving a specific admin by ID or listing administrators.
 *
 * For security purposes, sensitive information like password_hash is included
 * in the schema definition to maintain complete alignment with the database
 * model but is never exposed in responses to non-admin users.
 *
 * This type should only be returned when the requesting user has appropriate
 * administrative privileges and the system has confirmed the security context
 * permits full access to this information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconomicBoardAdmin = {
  /**
   * Primary Key.
   *
   * This UUID uniquely identifies the admin account in the system and is used
   * as the primary key for lookups in the economic_board_admin table.
   *
   * The id is automatically generated by the system when the admin account is
   * provisioned and is immutable throughout the admin's lifecycle.
   *
   * This identifier is used in various API endpoints as a path parameter to
   * reference specific admin accounts.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Email address of the admin. Must match a pre-approved list defined in
   * system configuration.
   *
   * This field contains the email address that was registered for the admin
   * account during system provisioning.
   *
   * It serves as the primary credential for authentication and remains fixed
   * throughout the admin account's lifecycle.
   *
   * The email must be one of the addresses pre-approved by the system owner
   * and cannot be changed after creation.
   */
  email: string;

  /**
   * Hashed password for admin authentication. Never stores plain text
   * passwords.
   *
   * This field contains the bcrypt-hashed version of the admin's password,
   * which is used for authentication during login operations.
   *
   * The system never stores or transmits plain text passwords. The hashed
   * value is computed when an admin account is created or when the password
   * is changed.
   *
   * For security, this field should only be accessible to internal system
   * components and should never be exposed in API responses to clients.
   */
  password_hash: string;

  /**
   * Timestamp when the admin account was provisioned by the system owner.
   *
   * This field records the exact moment when the admin account was created
   * and added to the system.
   *
   * Format: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).
   *
   * This timestamp is immutable and establishes the account's history in the
   * system, which is useful for audit trails and determining account age.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The most recent successful admin login timestamp.
   *
   * This field is updated each time the admin successfully authenticates with
   * the system.
   *
   * Format: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).
   *
   * Monitoring this timestamp helps identify inactive admin accounts, which
   * may require security review, and provides insight into administrative
   * activity patterns.
   *
   * This field is also used in filtering and sorting administrative accounts
   * through search functionality.
   */
  last_login: string & tags.Format<"date-time">;

  /**
   * Flag indicating whether the admin account is active. If false, login and
   * moderation access are denied.
   *
   * This boolean field determines whether the admin account can currently
   * login and perform moderation actions.
   *
   * When set to false, the account is suspended, preventing any login
   * attempts and administrative operations.
   *
   * This field is useful for temporarily deactivating accounts without
   * permanently deleting them, which preserves audit history and allows for
   * easy reactivation if needed.
   *
   * The default value is true when the account is created.
   */
  is_active: boolean;

  /**
   * UUID of the current active JWT token for admin session management.
   *
   * This field contains a reference to the currently active access token used
   * for session authentication.
   *
   * When an admin logs in, a new JWT access token is generated, and its UUID
   * is stored here to bind the session to the admin account.
   *
   * Subsequent requests use the JWT token for authentication, and the system
   * validates that the token's UUID matches the value stored in auth_jwt_id.
   *
   * If multiple sessions exist for the same user, each session will have a
   * unique JWT UUID, but only the most recent one is tracked in this field.
   */
  auth_jwt_id: string & tags.Format<"uuid">;
};
export namespace IEconomicBoardAdmin {
  /**
   * Input data required to create a new admin account.
   *
   * This schema defines the request body structure for registering a new
   * system administrator account.
   *
   * The operation creates a new record in the economic_board_admin table,
   * initializing:
   *
   * - Email: The provided email address for admin identification
   * - Password_hash: The bcrypt-hashed version of the provided password
   * - Created_at: Current UTC timestamp
   * - Last_login: Initially set to created_at value
   * - Is_active: true (enabled for immediate login)
   * - Auth_jwt_id: null (to be set upon first successful login)
   *
   * This endpoint is restricted to operational setup and ecosystem onboarding
   * procedures. Public registration for admin accounts is strictly prohibited
   * to maintain system security boundaries.
   *
   * The password provided here is always sent in plain text and is never
   * stored as-is. The system handles all password hashing internally to
   * ensure compliance with modern security standards.
   */
  export type IJoin = {
    /**
     * Email address for the new admin account. Must be unique and
     * pre-authorized by the system owner.
     *
     * This field corresponds to the email attribute in the
     * economic_board_admin table. Only specific, pre-approved email
     * addresses can be used to register new admin accounts. This ensures
     * that only authorized individuals can gain administrative privileges.
     *
     * The system does not permit public registration of admin accounts -
     * this endpoint is strictly for initial setup or when an existing admin
     * has been authorized to onboard new admins.
     */
    email: string;

    /**
     * Plain text password for the new admin account.
     *
     * The system will hash this value using bcrypt before storing it as
     * password_hash in the economic_board_admin table. This ensures secure
     * storage of passwords, never storing plain text values in the
     * database.
     *
     * Password requirements: minimum 12 characters, must include uppercase,
     * lowercase, numbers and special characters, per system security
     * policy. Passwords cannot be shared or transferred between accounts.
     */
    password: string;
  };

  /**
   * Authorization response containing JWT token for admin.
   *
   * This response is returned after successful authentication operations such
   * as admin login, join, or token refresh.
   *
   * The structure contains two essential components:
   *
   * 1. Id: The unique UUID identifier of the authenticated admin, matching the
   *    identity stored in economic_board_admin table.
   * 2. Token: The JWT token that authenticates all subsequent requests,
   *    structured according to the standard IAuthorizationToken schema.
   *
   * The token enables secure, stateless authentication for the admin
   * throughout the session duration. All protected endpoints validate this
   * token against the admin's auth_jwt_id in the database.
   *
   * This response format ensures complete JWT token lifecycle management and
   * compliance with standard authentication patterns across the API.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated admin.
     *
     * This UUID corresponds to the id field in the economic_board_admin
     * table and uniquely identifies the admin account within the system. It
     * is used for audit trails, permission checks, and session management.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address of the admin. Must match a pre-approved list defined in
     * system configuration.
     *
     * This field contains the email address that was registered for the
     * admin account during system provisioning.
     *
     * It serves as the primary credential for authentication and remains
     * fixed throughout the admin account's lifecycle.
     *
     * The email must be one of the addresses pre-approved by the system
     * owner and cannot be changed after creation.
     */
    email: string;

    /**
     * Timestamp when the admin account was provisioned by the system owner.
     *
     * This field records the exact moment when the admin account was
     * created and added to the system.
     *
     * Format: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).
     *
     * This timestamp is immutable and establishes the account's history in
     * the system, which is useful for audit trails and determining account
     * age.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The most recent successful admin login timestamp.
     *
     * This field is updated each time the admin successfully authenticates
     * with the system.
     *
     * Format: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).
     *
     * Monitoring this timestamp helps identify inactive admin accounts,
     * which may require security review, and provides insight into
     * administrative activity patterns.
     *
     * This field is also used in filtering and sorting administrative
     * accounts through search functionality.
     */
    last_login: string & tags.Format<"date-time">;

    /**
     * Flag indicating whether the admin account is active. If false, login
     * and moderation access are denied.
     *
     * This boolean field determines whether the admin account can currently
     * login and perform moderation actions.
     *
     * When set to false, the account is suspended, preventing any login
     * attempts and administrative operations.
     *
     * This field is useful for temporarily deactivating accounts without
     * permanently deleting them, which preserves audit history and allows
     * for easy reactivation if needed.
     *
     * The default value is true when the account is created.
     */
    is_active: boolean;

    /**
     * UUID of the current active JWT token for admin session management.
     *
     * This field contains a reference to the currently active access token
     * used for session authentication.
     *
     * When an admin logs in, a new JWT access token is generated, and its
     * UUID is stored here to bind the session to the admin account.
     *
     * Subsequent requests use the JWT token for authentication, and the
     * system validates that the token's UUID matches the value stored in
     * auth_jwt_id.
     *
     * If multiple sessions exist for the same user, each session will have
     * a unique JWT UUID, but only the most recent one is tracked in this
     * field.
     */
    auth_jwt_id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login credentials for admin authentication.
   *
   * This schema defines the request body structure for the admin login
   * endpoint. It includes the email and plain text password fields required
   * for authenticating an admin user in the system.
   *
   * The email MUST be an exact match to a pre-approved admin email in the
   * system configuration. The password is received as plain text and will be
   * hashed server-side using industry-standard bcrypt before comparison with
   * the stored password_hash in the economic_board_admin table.
   *
   * Never send hashed_password or password_hash from the client - only plain
   * text passwords are accepted. This ensures proper password handling
   * security practices.
   *
   * This structure aligns directly with the economic_board_admin schema,
   * validating against the email and password_hash fields, while maintaining
   * security by never exposing hashed credentials to the client.
   */
  export type ILogin = {
    /**
     * Email address of the admin for authentication. Must match a
     * pre-approved list defined in system configuration.
     */
    email: string;

    /**
     * Plain text password for authentication. The system will hash this
     * value before storage and comparison. Never send hashed passwords from
     * clients.
     */
    password: string;
  };

  /**
   * Refresh token for admin access credential renewal.
   *
   * This schema defines the request body structure for the admin refresh
   * token endpoint. It contains the refresh token that was issued during the
   * initial admin login and stored in an httpOnly cookie on the client.
   *
   * The system validates this refresh token against the admin's auth_jwt_id
   * and expiration time. If valid, a new access token is generated and the
   * auth_jwt_id in the economic_board_admin table is updated to this new
   * token's UUID.
   *
   * The refresh token is never stored client-side in localStorage or similar
   * insecure storage. This structure is minimal by design - it contains only
   * the refresh token, nothing else.
   *
   * The refresh operation implements token rotation for enhanced security: a
   * new refresh token may be generated on successful refresh, invalidating
   * the previous one to prevent replay attacks.
   */
  export type IRefresh = {
    /**
     * The refresh token that was stored in an httpOnly cookie during the
     * initial admin login.
     *
     * This refresh token is required to obtain a new access token when the
     * current one expires. It is cryptographically signed and contains no
     * sensitive information, but must be transmitted securely in a secure,
     * httpOnly cookie for protection against XSS attacks.
     *
     * The refresh token's validity is checked against the stored
     * auth_jwt_id in the economic_board_admin table. Its expiration is
     * typically 30 days from initial issuance, after which a full re-login
     * is required.
     */
    refresh_token: string;
  };

  /**
   * Search criteria and pagination parameters for administrator filtering.
   *
   * This type defines the parameters used to search and filter administrators
   * in the economicBoard system. It supports complex queries based on email
   * patterns, last login date ranges, and account status, with full
   * pagination and sorting capabilities.
   *
   * The properties in this schema align directly with the filtering and
   * pagination needs of the /economicBoard/admin/admins PATCH endpoint. It
   * allows administrators to search for other admins efficiently without
   * requiring exact matches for every field.
   *
   * This is specifically designed for administrative dashboard use cases
   * where comprehensive filtering of admin accounts is required for security
   * and operational auditing purposes.
   */
  export type IRequest = {
    /**
     * Partial email match to filter administrators by their email address.
     *
     * This field allows searching for admin accounts using partial email
     * matches, which is useful for discovering accounts when the full email
     * address is unknown.
     *
     * The search should be case-insensitive and support substring matching.
     * For example, searching for 'company' would return accounts with
     * emails like 'john@company.com' or 'admin@company.org'.
     *
     * This enables administrators to find accounts based on organizational
     * domain patterns or partial names without requiring exact email
     * matches.
     */
    email?: (string & tags.MinLength<1>) | undefined;

    /**
     * Start date for filtering admins by last login timestamp.
     *
     * This property defines the earliest possible last_login timestamp to
     * include in search results. Only administrators with a last_login
     * timestamp on or after this date will be returned.
     *
     * Format: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).
     *
     * This allows administrators to identify inactive accounts, audit
     * recent administrative activity, or find administrators who have not
     * logged in for an extended period for security review.
     *
     * When used with lastLoginTo, it creates a date range filter for
     * administrative login history.
     */
    lastLoginFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End date for filtering admins by last login timestamp.
     *
     * This property defines the latest possible last_login timestamp to
     * include in search results. Only administrators with a last_login
     * timestamp on or before this date will be returned.
     *
     * Format: ISO 8601 date-time format (YYYY-MM-DDTHH:mm:ssZ).
     *
     * This enables analysis of administrative activity patterns within
     * specific time periods, such as identifying who logged in during a
     * particular week or month.
     *
     * When used with lastLoginFrom, it creates a date range filter for
     * administrative login history.
     */
    lastLoginTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter administrators by account active status.
     *
     * This boolean field allows filtering to show only active admin
     * accounts (true) or inactive admin accounts (false).
     *
     * This is essential for identifying and managing suspended or
     * decommissioned administrative accounts while maintaining a complete
     * audit trail of all administrator accounts regardless of current
     * status.
     *
     * The default behavior when not specified is to include both active and
     * inactive accounts in the results.
     */
    is_active?: boolean | undefined;

    /**
     * Page number for pagination.
     *
     * Specifies which page of results to return, with page 1 being the
     * first page of results.
     *
     * This property works in conjunction with limit to implement pagination
     * for the admin search results.
     *
     * The page number must be a positive integer starting from 1. Page
     * numbers less than 1 are invalid and will cause an error response.
     *
     * This pagination strategy enables efficient retrieval of large sets of
     * administrative accounts without overwhelming the client or server
     * with a single large response.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of results per page for pagination.
     *
     * Specifies how many admin records to return per page. The value must
     * be between 1 and 100 (inclusive), with a default of 25.
     *
     * This limitation prevents performance degradation caused by extremely
     * large result sets, while providing sufficient flexibility for
     * different use cases.
     *
     * Small limits (1-10) can be useful when reviewing specific accounts,
     * while larger limits (50-100) reduce the number of API calls needed to
     * view comprehensive result sets.
     *
     * When limit exceeds 100, the system will enforce the maximum value of
     * 100.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<25> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Field name to sort the results by.
     *
     * Specifies which field to use for sorting the returned admin records.
     * Valid values are: 'email', 'created_at', or 'last_login'.
     *
     * Sorting by 'email' arranges admins alphabetically by their email
     * address.
     *
     * Sorting by 'created_at' orders admins by when their account was
     * provisioned (oldest first).
     *
     * Sorting by 'last_login' (default) orders admins by their most recent
     * login time (most recent first)
     *
     * This allows administrators to organize the results based on different
     * criteria depending on their specific needs, such as reviewing new
     * accounts, recent activity, or alphabetical contact lists.
     */
    sort?: "email" | "created_at" | "last_login" | undefined;

    /**
     * Sort order direction.
     *
     * Specifies whether to sort the results in ascending ('asc') or
     * descending ('desc') order based on the selected sort field.
     *
     * Ascending order arranges from smallest to largest (A-Z, oldest to
     * newest).
     *
     * Descending order (default) arranges from largest to smallest (Z-A,
     * newest to oldest).
     *
     * This provides flexibility in how results are presented, allowing
     * administrators to quickly identify either the earliest or most recent
     * activities depending on their operational needs.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Minimal summary representation of an admin account for administrative
   * list views.
   *
   * This schema is designed for presentation in administrator dashboard lists
   * and management interfaces where complete details are not required on
   * initial display. It includes essential identifiers and status indicators
   * needed to identify, locate, and assess admin accounts without exposing
   * sensitive authentication data.
   *
   * The summary includes auth_jwt_id because it is a required field in the
   * economic_board_admin model and is used for session management in all
   * authentication operations. This represents a security-conscious design
   * pattern appropriate for administrative context.
   *
   * This type is exclusively used in response to the GET
   * /economicBoard/admin/admins operation when returning paginated
   * administrative account information. It provides an optimized view that
   * balances information needs with privacy requirements in administrative
   * workflows.
   */
  export type ISummary = {
    /**
     * Unique identifier of the admin account.
     *
     * This UUID is generated by the system and serves as the primary key
     * for the economic_board_admin table. It is used in all administrative
     * operations to uniquely identify the admin account and is stored in
     * the auth_jwt_id field for session management. This identifier is
     * immutable after account creation and cannot be modified through any
     * API operation.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address of the admin account.
     *
     * This field uniquely identifies the admin within the system and must
     * match a pre-approved list defined in system configuration. It is used
     * for authentication against the stored password_hash and appears in
     * moderation logs for administrative accountability. While visible in
     * administrative interfaces, this field is not exposed to regular
     * users, maintaining appropriate security boundaries.
     */
    email: string & tags.Format<"email">;

    /**
     * Timestamp when the admin account was provisioned by the system owner.
     *
     * This field records the exact moment of account creation, providing an
     * immutable audit trail for administrative access. The value is set by
     * the system at the time of admin provisioning and cannot be modified
     * by any API operations. It is used to determine administrative account
     * age and is referenced in system compliance reports. The timestamp
     * follows ISO 8601 format with UTC timezone.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The most recent successful admin login timestamp.
     *
     * This field tracks when the admin last authenticated to the system,
     * providing critical security monitoring data. The system automatically
     * updates it upon successful authentication. This timestamp is used to
     * detect inactive accounts and potential security anomalies. It is
     * presented in ISO 8601 format and is a key metric in system health
     * monitoring for the moderation infrastructure.
     */
    last_login: string & tags.Format<"date-time">;

    /**
     * Flag indicating whether the admin account is active.
     *
     * This boolean field controls administrative access permissions. When
     * false, the admin account is disabled and cannot authenticate to the
     * system. This provides a mechanism to suspend administrative access in
     * case of compromised credentials, policy violations, or account
     * retirement. The field is set to true during initial provisioning and
     * can be modified by system owners through privileged administrative
     * interfaces, not general API operations.
     */
    is_active: boolean;

    /**
     * UUID of the current active JWT token for session management.
     *
     * This field directly corresponds to the auth_jwt_id column in the
     * economic_board_admin Prisma model. It is used to bind the admin's
     * current session to their account and is validated during every
     * authenticated request. The JWT token must match this field's value
     * for access to be granted. This is a critical component of
     * authentication and must be included in all admin representations to
     * maintain session integrity and security.
     */
    auth_jwt_id: string & tags.Format<"uuid">;
  };
}
