import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents an authenticated user who can create posts and replies. Each
 * member has a persistent identity tracked across sessions via secure JWT
 * authentication.
 *
 * This schema is derived from the economic_board_member Prisma model and
 * provides a complete representation of member account data. It includes every
 * field defined in the Prisma schema to ensure API compatibility and data
 * integrity.
 *
 * The model represents users who have registered with the platform using a
 * verified email address and password. These users can create posts (subject to
 * moderation) and reply to posts, giving them full interaction capabilities on
 * the discussion board.
 *
 * The schema includes all necessary authentication fields: email for identity,
 * password_hash for security, auth_jwt_id for session management, and flags for
 * account status. The timestamps (created_at, verified_at, last_login) provide
 * full lifecycle tracking.
 *
 * This schema excludes any public-facing personal information like name or
 * profile, aligning with the platform's focus on anonymous participation while
 * enabling authentication. The schema ensures that all information returned
 * through the API is consistent with the database model and business rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconomicBoardMember = {
  /**
   * Primary Key.
   *
   * Unique identifier for the authenticated member account.
   *
   * This UUID is generated by the system when a member registers. It serves
   * as the primary identifier for the member's account and is used for all
   * operations that require member identification, including authentication,
   * post creation, and profile management.
   *
   * This field is immutable and cannot be changed after account creation,
   * ensuring persistent identification of the member across sessions.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address used for account registration and verification. Must
   * be validated before full privileges are granted.
   *
   * This field contains the email address provided by the user during
   * registration. The email address is stored verbatim and is used as the
   * primary identifier for authentication and communication (e.g.,
   * verification emails).
   *
   * This field must be unique across all members and is validated for proper
   * email format. The email address is not considered personally identifiable
   * information (PII) for the purpose of user anonymity since the platform
   * does not expose it publicly.
   *
   * The registration workflow requires email verification before the
   * verified_at field is populated, aligning with the business rule for
   * account security.
   */
  email: string & tags.Format<"email">;

  /**
   * Timestamp when the member account was registered.
   *
   * This immutable timestamp records the exact date and time (in ISO 8601
   * format) when the member registered their account. It serves as an audit
   * trail and is used in business logic such as determining account age for
   * policy application.
   *
   * This field is set once at registration and is never modified, ensuring
   * the integrity of the registration history.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when email verification was completed. Null until verified.
   *
   * This field is initially null and is only populated when the member
   * completes the email verification process by clicking the verification
   * link sent to their email address.
   *
   * The presence of a value in this field indicates that the member's email
   * address is confirmed, allowing the account to be considered fully active.
   * Until verified, the member has limited privileges, and in some cases may
   * not be able to create posts without an admin intervention, depending on
   * system policy.
   *
   * This field is critical for the platform's security model that requires
   * email verification to prevent spam and ensure accountability.
   */
  verified_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * The most recent successful login timestamp.
   *
   * This field is updated every time the member successfully authenticates
   * with their email and password. It provides a record of recent activity
   * and enables features like session timeout and auto-logout based on
   * inactivity.
   *
   * This field is modified by the login and refresh operations and is used to
   * maintain the global access control policy. It is distinct from the
   * created_at timestamp, as it reflects the most recent authentication
   * rather than the initial registration.
   */
  last_login: string & tags.Format<"date-time">;

  /**
   * Flag indicating whether the member account is active. If false, account
   * is suspended and cannot post or log in.
   *
   * This boolean flag controls the operational state of the member's account.
   * When true, the member can log in, create posts, and interact with the
   * platform. When false, the account is suspended and all authentication
   * attempts will be denied.
   *
   * Suspension may occur due to violations of community guidelines, system
   * errors, or administrative actions. This field enables the platform to
   * enforce moderation policies while preserving account integrity.
   *
   * The default value is true upon account creation, and it can only be
   * changed by an administrator through system controls.
   */
  is_active: boolean;

  /**
   * UUID of the current active JWT token for session management.
   *
   * This field stores the unique identifier (UUID) of the current active JWT
   * access token used to maintain the member's session. When a member logs
   * in, a new JWT is generated and its UUID is stored here, binding the
   * session to the member record.
   *
   * This field enables the system to track and manage the current session for
   * each member. When a user logs in from a new device, the old session's JWT
   * ID is replaced with the new one, effectively invalidating previous
   * sessions for that member.
   *
   * This field is pivotal for the platform's stateless authentication model,
   * allowing efficient session validation without server-side session
   * storage.
   */
  auth_jwt_id: string & tags.Format<"uuid">;
};
export namespace IEconomicBoardMember {
  /**
   * Registration data for creating a new member account.
   *
   * This schema defines the required input structure for registering a new
   * member on the economic/political discussion board.
   *
   * It contains only the essential fields needed for account creation: a
   * unique email address and a cryptographically hashed password. The system
   * automatically generates other fields such as the member's UUID (id),
   * creation timestamp (created_at), and initial authentication token
   * identifier (auth_jwt_id), which are set by the system and never provided
   * by the client.
   *
   * This model follows the principle of least privilege for registration,
   * requiring only the information necessary to establish identity and
   * authenticate future logins. Sensitive system-managed fields like id,
   * created_at, and last_login are excluded, ensuring they are set
   * exclusively by the system upon account creation.
   *
   * Registration does not require email verification at this stage -
   * verification is handled asynchronously in a separate workflow, with the
   * verified_at field being populated later.
   */
  export type ICreate = {
    /**
     * Unique email address used for registration and verification.
     *
     * This email serves as the member's primary identifier for
     * authentication and communication.
     *
     * The system enforces uniqueness constraints on this field, preventing
     * multiple accounts from registering with the same email.
     *
     * The email address must be valid and properly formatted to pass system
     * validation, ensuring future communication channels (such as
     * verification emails) can be delivered successfully.
     *
     * This field is required for member registration and must be provided
     * with every new member creation request.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for authentication using bcrypt algorithm.
     *
     * This field stores the cryptographic hash of the user's password,
     * never storing the plain-text version.
     *
     * The hashing is performed server-side using industry-standard bcrypt
     * with a salt, ensuring the original password cannot be derived from
     * this value.
     *
     * The input password is transformed into a 60-character string that
     * includes salt and hash components, making it suitable for direct
     * comparison during login.
     *
     * This field is mandatory for member registration and must be provided
     * with every new member creation request. The system prohibits direct
     * submission of plain-text passwords for security reasons.
     */
    password_hash: string;
  };

  /**
   * Authorization response containing JWT token and member identification.
   *
   * This type is returned after successful authentication operations such as
   * login, join, or token refresh. It combines the member's unique identifier
   * with a JWT access token to establish a secure, authenticated session.
   *
   * The response is designed to be minimal yet complete, containing only the
   * essential information required for session management. The member's id is
   * included to identify the authenticated entity, while the token property
   * provides the means for subsequent authenticated requests.
   *
   * This structure enables complete JWT token lifecycle management: the
   * access token is used for authorization, and the refresh token (stored
   * securely in a cookie) is used to renew access when it expires. The system
   * does not expose sensitive fields like password_hash or auth_jwt_id in
   * this response for security reasons, in accordance with the Prisma schema
   * and business rules.
   *
   * Authentication context is provided by the JWT and not by client
   * submission of identity fields, ensuring security compliance and
   * preventing impersonation.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member.
     *
     * This value corresponds to the id field in the economic_board_member
     * table and is used to uniquely identify the member across the system.
     * It is generated as a UUID upon account creation and is immutable.
     *
     * This property is essential for all subsequent operations that require
     * member identification, such as posting, editing, and accessing
     * personal information. It enables the system to link authentication
     * tokens to specific member accounts while maintaining anonymity in
     * public-facing interactions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address used for account registration and verification.
     * Must be validated before full privileges are granted.
     *
     * This field contains the email address provided by the user during
     * registration. The email address is stored verbatim and is used as the
     * primary identifier for authentication and communication (e.g.,
     * verification emails).
     *
     * This field must be unique across all members and is validated for
     * proper email format. The email address is not considered personally
     * identifiable information (PII) for the purpose of user anonymity
     * since the platform does not expose it publicly.
     *
     * The registration workflow requires email verification before the
     * verified_at field is populated, aligning with the business rule for
     * account security.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for authentication. Never stores plain text
     * passwords.
     *
     * This field contains a cryptographic hash of the member's password,
     * generated using a secure hashing algorithm (such as bcrypt). The
     * system never stores plain text passwords, ensuring security
     * compliance.
     *
     * The hash is computed when a new member registers or changes their
     * password, and it is compared against during the login process to
     * authenticate the user. The hash value itself is not reversible,
     * protecting user credentials even if the database is compromised.
     *
     * This field is critical for the authentication process and must be
     * handled with the highest security standards, as it is the core of the
     * member's account security.
     */
    password_hash: string;

    /**
     * Timestamp when the member account was registered.
     *
     * This immutable timestamp records the exact date and time (in ISO 8601
     * format) when the member registered their account. It serves as an
     * audit trail and is used in business logic such as determining account
     * age for policy application.
     *
     * This field is set once at registration and is never modified,
     * ensuring the integrity of the registration history.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when email verification was completed. Null until verified.
     *
     * This field is initially null and is only populated when the member
     * completes the email verification process by clicking the verification
     * link sent to their email address.
     *
     * The presence of a value in this field indicates that the member's
     * email address is confirmed, allowing the account to be considered
     * fully active. Until verified, the member has limited privileges, and
     * in some cases may not be able to create posts without an admin
     * intervention, depending on system policy.
     *
     * This field is critical for the platform's security model that
     * requires email verification to prevent spam and ensure
     * accountability.
     */
    verified_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * The most recent successful login timestamp.
     *
     * This field is updated every time the member successfully
     * authenticates with their email and password. It provides a record of
     * recent activity and enables features like session timeout and
     * auto-logout based on inactivity.
     *
     * This field is modified by the login and refresh operations and is
     * used to maintain the global access control policy. It is distinct
     * from the created_at timestamp, as it reflects the most recent
     * authentication rather than the initial registration.
     */
    last_login: string & tags.Format<"date-time">;

    /**
     * Flag indicating whether the member account is active. If false,
     * account is suspended and cannot post or log in.
     *
     * This boolean flag controls the operational state of the member's
     * account. When true, the member can log in, create posts, and interact
     * with the platform. When false, the account is suspended and all
     * authentication attempts will be denied.
     *
     * Suspension may occur due to violations of community guidelines,
     * system errors, or administrative actions. This field enables the
     * platform to enforce moderation policies while preserving account
     * integrity.
     *
     * The default value is true upon account creation, and it can only be
     * changed by an administrator through system controls.
     */
    is_active: boolean;

    /**
     * UUID of the current active JWT token for session management.
     *
     * This field stores the unique identifier (UUID) of the current active
     * JWT access token used to maintain the member's session. When a member
     * logs in, a new JWT is generated and its UUID is stored here, binding
     * the session to the member record.
     *
     * This field enables the system to track and manage the current session
     * for each member. When a user logs in from a new device, the old
     * session's JWT ID is replaced with the new one, effectively
     * invalidating previous sessions for that member.
     *
     * This field is pivotal for the platform's stateless authentication
     * model, allowing efficient session validation without server-side
     * session storage.
     */
    auth_jwt_id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request parameters for searching and filtering member records with
   * pagination, sorting, and search capabilities.
   *
   * This schema defines the complete set of parameters available for querying
   * up the collection of economic_board_member records. It enables
   * sophisticated filtering and sorting operations that support
   * administrative dashboard functionality.
   *
   * The parameters in this schema work together to provide a comprehensive
   * search interface for member management:
   *
   * - Page and limit implement standard pagination
   * - Search enables keyword search by email
   * - IsActive filters by account status
   * - SortBy and order control sorting behavior
   *
   * All parameters are optional to support flexible query building. This
   * design follows the established pattern of the Economic/Political
   * Discussion Board API, where search operations use PATCH requests with
   * complex request bodies rather than GET with URL parameters, allowing for
   * more complex queries than URL encoding can support.
   *
   * The system strictly enforces the constraints defined here
   * (minimum/maximum values, allowed values for enums) to ensure data
   * integrity, performance, and security. Unauthorized or malformed requests
   * will result in appropriate error responses.
   *
   * This request model ensures efficient data retrieval by leveraging
   * database indexing on email, created_at, and last_login fields, while
   * maintaining alignment with the Prisma schema structure that defines
   * actual database columns.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * This parameter specifies which page of results to return when listing
     * members. It must be a positive integer starting from 1. The system
     * uses this value to calculate the offset for database queries.
     *
     * When not provided, the system defaults to page 1. This allows for
     * backward compatibility and ensures that clients can retrieve the
     * first page of results without specifying pagination parameters. The
     * page number operates in conjunction with the limit parameter to
     * determine which subset of members is returned.
     *
     * This field is part of a comprehensive search and filtering system
     * that allows administrators to navigate through potentially large
     * collections of member records while maintaining performance through
     * pagination.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of members to return per page.
     *
     * This parameter controls pagination by specifying how many member
     * records are included in each response page. The minimum allowed value
     * is 1, and the maximum is 100 to ensure performance and prevent
     * excessive response sizes.
     *
     * The limit parameter enables clients to optimize data transfer and
     * processing by retrieving smaller, manageable data chunks. When not
     * provided, the system defaults to a reasonable limit (typically 25).
     * This design ensures efficient loading of data in web interfaces while
     * complying with system-wide performance constraints.
     *
     * This parameter works in tandem with the page parameter to implement
     * complete pagination functionality, allowing for efficient navigation
     * through large result sets without requiring clients to fetch all data
     * at once.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Search term for filtering members by email address.
     *
     * This parameter enables keyword-based searching of member records by
     * their email address. The search is case-insensitive and matches any
     * part of the email address.
     *
     * The search term must be between 1 and 100 characters to prevent
     * overly broad or malicious queries while maintaining usability. The
     * system performs efficient indexing on the email field to deliver fast
     * search results even with large member databases.
     *
     * Users can enter partial emails (e.g., 'john' to find
     * 'john@example.com') or entire email addresses to locate specific
     * members. This functionality supports administrative tasks such as
     * account verification, user investigation, and relationship
     * management.
     *
     * The implementation ensures privacy by returning only the subset of
     * members whose email addresses match the search criteria, with no
     * exposure of sensitive information beyond what is visible in the
     * Member record.
     */
    search?: (string & tags.MinLength<1> & tags.MaxLength<100>) | undefined;

    /**
     * Filter members by account active status.
     *
     * This parameter allows filtering members based on their active status
     * (true) or inactive/suspended status (false). When set to true, only
     * members with is_active = true are returned. When set to false, only
     * members with is_active = false are returned.
     *
     * This property is useful for administrators conducting audits,
     * investigating account issues, or managing membership. It enables
     * straightforward filtering of members by their operational status
     * without requiring separate queries for active and inactive users.
     *
     * When not provided, the system returns members with both active and
     * inactive status, providing a complete view of all members in the
     * system.
     */
    isActive?: boolean | undefined;

    /**
     * Field to sort the member list by.
     *
     * This parameter determines the field used to sort the returned member
     * records. Valid values are 'email' (alphabetical order), 'created_at'
     * (registration date), or 'last_login' (most recent login).
     *
     * The system defaults to sorting by 'created_at' (registration date
     * descending) when not specified, which provides a chronological view
     * of membership growth. This sorting option supports administrative
     * workflows that require evaluating member acquisition trends.
     *
     * This property enables flexible ordering of result sets to meet
     * various administrative needs while ensuring consistent, predictable
     * behavior across the system.
     */
    sortBy?: "email" | "created_at" | "last_login" | undefined;

    /**
     * Sort order direction.
     *
     * This parameter specifies whether the sort should be ascending ('asc')
     * or descending ('desc'). It works in conjunction with the sortBy
     * parameter to control the ordering of the member list.
     *
     * 'asc' returns records from oldest to newest based on the sortBy
     * field, while 'desc' returns records from newest to oldest. The
     * default value is 'desc' for all fields to prioritize recent records
     * first, which is most useful in administrative contexts.
     *
     * This flexible sorting mechanism allows administrators to analyze
     * member data in multiple perspectives, whether tracking historical
     * growth patterns ('asc') or identifying recent activity ('desc').
     */
    order?: "asc" | "desc" | undefined;
  };
}
