import { tags } from "typia";

/**
 * Core economic and political discussion posts, each associated with a topic
 * and subject to moderation lifecycle.
 *
 * Represents a single discussion entry on the economic/political forum,
 * including its content, topic classification, moderation status, and related
 * metadata.
 *
 * This model captures the complete lifecycle of a post—from submission by an
 * anonymous guest or registered member, through the mandatory approval process
 * by an admin, to final states of published, rejected, or permanently deleted.
 *
 * The post contains exactly two text fields: subject (limited to 120
 * characters) and content (limited to 5,000 characters) ensuring concise,
 * focused contributions.
 *
 * It strictly enforces the pre-defined topic model and does not allow custom
 * categories, aligning with the political community's design principles of
 * controlled, theme-based discourse.
 *
 * Ownership is preserved via author_hash for guests and relationship to member
 * for registered users, while all moderation actions are logged via admin_id
 * and moderation_reason.
 *
 * This schema is designed for auditability, performance, and civil discourse:
 * no voting, no likes, no followers, no persistent user profiles.
 *
 * It forms the central entity in the forum’s architecture, with all other
 * entities (guests, replies, admins) relating directly to it.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconomicBoardPosts = {
  /**
   * Primary Key.
   *
   * Unique identifier for each economic board post.
   *
   * This UUID is automatically generated by the system upon post creation and
   * serves as the unique identifier for referencing the post in all
   * interactions.
   *
   * It is used in API endpoints to retrieve, update, or delete specific posts
   * and is essential for maintaining referential integrity across related
   * entities such as replies and moderation logs.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Topic that this post belongs to. {@link economic_board_topics.id}.
   *
   * This field references the predefined topic category from the
   * economic_board_topics table.
   *
   * The topic must be one of the seven system-defined categories:
   * "Inflation", "Tax Policy", "Elections", "Global Trade", "Monetary
   * Policy", "Labor Markets", or "Fiscal Policy".
   *
   * This field establishes the categorization of the post and is mandatory
   * for all submissions. It ensures content is organized within predefined
   * discussion domains and cannot be set to custom or undefined values.
   *
   * The foreign key relationship cascades on delete, meaning if a topic is
   * permanently deleted, all associated posts are also deleted.
   */
  economic_board_topics_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the post was submitted.
   *
   * This field records the exact UTC moment when the post was created and
   * submitted to the system.
   *
   * It is automatically set by the system and cannot be modified by users or
   * administrators. This timestamp is used for chronological display of
   * posts, moderation timelines, and as a reference for edit windows (24-hour
   * limit).
   *
   * The format follows ISO 8601 with timezone offset to ensure global
   * consistency and accurate time tracking regardless of user location.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the post was last edited.
   *
   * This field is automatically updated whenever the post's content or
   * subject is modified by the original author within the 24-hour edit
   * window.
   *
   * It reflects the last time the post content was changed and is used to
   * determine the most recent state of the post for display purposes.
   *
   * This field is initialized to the same value as created_at upon submission
   * and updated only upon successful edits. If the post has never been
   * edited, this field will be equal to created_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Moderation status of the post: 'pending', 'published', 'rejected', or
   * 'deleted'.
   *
   * This field controls the visibility and lifecycle of the post within the
   * system:
   *
   * - 'pending': The post has been submitted but remains invisible to all users
   *   awaiting admin approval.
   * - 'published': The post has been approved by an admin and is visible to all
   *   users.
   * - 'rejected': The post was reviewed by an admin but deemed non-compliant
   *   with community guidelines and is not visible to users.
   * - 'deleted': The post was permanently removed by an admin through a hard
   *   delete operation.
   *
   * This field is the core mechanism for content moderation and ensures that
   * all user-submitted content is vetted before public exposure.
   *
   * The value is immutable after a post transitions from 'pending' to one of
   * the other states (after approval/rejection) or when permanently deleted.
   */
  status: "pending" | "published" | "rejected" | "deleted";

  /**
   * Brief title or subject line of the post (max 120 characters).
   *
   * This field provides a concise summary of the post's core topic or
   * argument, serving as the title of the discussion thread.
   *
   * It must be between 5 and 120 characters to ensure it is descriptive
   * enough to convey context while remaining concise for display in lists and
   * search results.
   *
   * The subject is used as the primary clickable link to the full post and
   * appears in topic-overviews, search results, and email notifications.
   *
   * It cannot be left empty or contain only whitespace, and is subject to
   * character limits to prevent abuse through excessively long titles.
   */
  subject: string & tags.MinLength<5> & tags.MaxLength<120>;

  /**
   * Full text content of the post (max 5,000 characters).
   *
   * This field contains the complete body of the discussion contribution,
   * including analysis, commentary, facts, or questions related to the chosen
   * topic.
   *
   * It must be at least 10 characters long to ensure substantive input and
   * prevent spam or filler content. Maximum length is 5,000 characters to
   * preserve readability and system performance.
   *
   * Content is stored exactly as submitted (including markdown or plain text
   * formatting) but is rendered for display according to system conventions.
   *
   * This field is never directly modified by administrators; edits can only
   * be made by the original author within the 24-hour window, and if it
   * appears abusive, the post is rejected or deleted rather than edited.
   */
  content: string & tags.MinLength<10> & tags.MaxLength<5000>;

  /**
   * Number of direct replies to this post.
   *
   * This field is automatically incremented each time a valid reply is
   * successfully created under this post and decremented when a reply is
   * permanently deleted.
   *
   * It provides a quick indicator of engagement for each post and is used to
   * display counts in topic lists and search results.
   *
   * The count is always accurate in real time and reflects only top-level
   * replies, not nested replies or replies to replies.
   *
   * It is initialized to 0 upon post creation and updated asynchronously as
   * replies are added or removed. This field is derived from the
   * economic_board_replies table and not stored manually.
   */
  reply_count: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Whether this post has been edited after initial submission.
   *
   * This is a boolean flag that is set to true when the post's subject or
   * content is successfully modified within the 24-hour edit window after
   * creation.
   *
   * If the post has never been edited, this field remains false.
   *
   * It does not change when the post's status is updated by an admin (e.g.,
   * from pending to published) because those are moderation actions, not user
   * edits.
   *
   * It is used in the frontend to display an "[Edited]" marker alongside the
   * post to inform users that its content was modified after publication.
   *
   * The flag is controlled entirely by the system based on successful edit
   * operations and cannot be manually set by users or admins.
   */
  edited: boolean;

  /**
   * Timestamp of last edit. Null if never edited.
   *
   * This field stores the exact UTC timestamp when the post was last modified
   * by the original author within the 24-hour editing window.
   *
   * It is initialized to null upon post creation. When the author
   * successfully edits their post, this field is updated to the current
   * timestamp.
   *
   * If the post has never been edited, this field remains null.
   *
   * This timestamp is used in the user interface to indicate when the edit
   * occurred and to support audit trails.
   *
   * This field is used in conjunction with the edited field to determine
   * whether an edit marker should be displayed and when the edit occurred.
   */
  edited_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * System-generated anonymous identifier derived from IP and timestamp for
   * guest posts.
   *
   * This field contains a cryptographic hash (e.g., SHA-256) of the guest’s
   * IP address and submission timestamp, creating a pseudo-anonymous
   * identifier for guest-submitted posts.
   *
   * It is used by admins for moderation and abuse detection purposes without
   * exposing personally identifiable information.
   *
   * For authenticated members, this field is null because the identity is
   * linked to the member record and not the hash.
   *
   * The hash is generated automatically by the system upon post creation for
   * guest users and cannot be manually set or modified.
   *
   * It ensures accountability for anonymous contributors while preserving
   * user privacy by not storing actual IP addresses or personal data.
   */
  author_hash: string | null;

  /**
   * ID of admin who last modified status (approve/reject/delete).
   *
   * This field stores the UUID of the administrator who performed the last
   * moderation action on this post (approve, reject, or delete).
   *
   * It records accountability for moderation decisions and is used in
   * internal logs and audit trails.
   *
   * It is set to null when the post is created by a user and only updated
   * when an admin performs an action on the post.
   *
   * It is not the same as the author of the post; it is specifically the ID
   * of the admin who changed the status, not the person who wrote the
   * content.
   *
   * This field is populated automatically by the system during admin
   * moderation operations and should not be set by users or external
   * systems.
   */
  admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reason provided by admin for rejection or deletion. Null if not
   * rejected/deleted.
   *
   * This field contains the explanatory text provided by administrators when
   * rejecting or deleting a post (e.g., "Contains hate speech", "Off-topic",
   * "Duplicate").
   *
   * It is required when rejecting a post, as per business rules, to ensure
   * transparency and accountability in moderation.
   *
   * This field is populated during the reject or delete operations and is
   * intended for audit purposes and for potential notifications to the
   * original author.
   *
   * When a post is approved or published, or when no moderation action has
   * been taken, this field remains null.
   *
   * It may be NULL for deletions if the admin chooses not to specify a
   * reason, but should ideally be populated even for deletions to maintain
   * data integrity for moderation oversight.
   */
  moderation_reason?: string | null | undefined;
};
export namespace IEconomicBoardPosts {
  /**
   * Request payload schema for rejecting a pending post.
   *
   * This object defines the required information that must be submitted by an
   * administrator to officially reject a post with status 'pending'.
   *
   * It contains a single required property: moderation_reason, which is a
   * mandatory textual explanation of why the post does not comply with forum
   * guidelines.
   *
   * This schema ensures that all rejections are accompanied by descriptive,
   * traceable feedback. It enforces the community's requirement for
   * transparency in moderation and prevents arbitrary or unexplained
   * removals.
   *
   * This request body is only used during the PATCH
   * /admin/posts/{postId}/reject operation.
   *
   * The system validates that:
   *
   * - The reason is not empty or whitespace-only
   * - The reason does not contain prohibited content (e.g., threats)
   * - The reason exceeds minimum character count to avoid terse or dismissive
   *   notes
   *
   * The provided reason will be stored in the moderated_posts table and may
   * be sent in an email notification to the original post author if the post
   * was submitted by a registered member.
   */
  export type IReject = {
    /**
     * Reason for rejecting the post, required for audit and notification
     * purposes.
     *
     * This field captures the specific justification provided by an
     * administrator for why a pending post was rejected.
     *
     * It must be at least one character long and no longer than 500
     * characters to balance sufficient explanatory power with system
     * usability and display constraints.
     *
     * This reason is stored in the economic_board_posts table and is used
     * for:
     *
     * - Internal audit logs to track moderation decisions
     * - Forwarding feedback to the original author to guide future
     *   contributions
     * - Ensuring accountability and consistency in application of community
     *   standards
     *
     * Common acceptable reasons include:
     *
     * - "Contains hate speech or targeted harassment"
     * - "Promotes illegal activity or scams"
     * - "Off-topic: Does not discuss economic or political themes"
     * - "Duplicated content: Already posted within 24 hours"
     * - "Incoherent or gibberish content"
     * - "Spam: Contains only links or repetitive phrases"
     *
     * The reason should be factual, specific, and avoid personal attacks.
     * Ambiguous or non-specific reasons (e.g., "idk", "bad content") are
     * discouraged for quality control.
     *
     * This field is mandatory whenever the post status is changed from
     * 'pending' to 'rejected'. It is ignored if the status change is
     * 'approved' or 'deleted'.
     */
    moderation_reason: string & tags.MinLength<1> & tags.MaxLength<500>;
  };

  /**
   * Request body for permanently deleting an economic board post.
   *
   * This schema defines optional additional information that may be provided
   * when an admin permanently deletes a post.
   *
   * The deletion operation itself does not require a reason, as the system
   * will perform the hard delete regardless. However, the reason helps
   * maintain a clear audit trail of moderation actions.
   *
   * The provided reason may be logged internally for compliance purposes but
   * is not returned in responses to users to maintain the finality of
   * administrative decisions.
   *
   * This schema follows the business rule that admin deletions are permanent
   * and irreversible, with no possibility of recovery.
   */
  export type IDelete = {
    /**
     * Reason for permanent deletion of the post.
     *
     * This field is optional but recommended for audit and moderation
     * transparency. It documents why the admin chose to permanently delete
     * the post.
     *
     * Common reasons include: 'Violates neutrality', 'Contains personal
     * attacks', 'Off-topic', 'Duplicate', 'Illegal content', 'Spam'.
     *
     * The reason must be clearly stated and truthful. This field serves as
     * an audit trail to ensure accountability in moderation actions.
     *
     * This field is only used for audit purposes after deletion and does
     * not affect the execution of the delete operation itself.
     *
     * The reason is stored in the moderation_reason field of the
     * economic_board_posts table and is accessible through internal audit
     * logs, but is not returned in the API response to maintain the
     * finality of the action.
     */
    reason?: (string & tags.MinLength<1> & tags.MaxLength<500>) | undefined;
  };
}
