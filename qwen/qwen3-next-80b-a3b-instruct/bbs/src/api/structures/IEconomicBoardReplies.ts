import { tags } from "typia";

/**
 * Represents a reply to an economic/political forum post. Each reply is
 * automatically published without moderation, forms a threaded relationship
 * with a parent post, and has constrained content length for concise responses.
 * Archived for read-performance optimization without user authentication.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe This model represents
 *   individual textual responses to economic and political discussion posts on
 *   the forum. Unlike the primary posts, replies do not require administrative
 *   moderation before becoming visible to users. Once submitted, replies are
 *   immediately published and integrated into the discussion thread structure.
 *
 *   Replies have specific technical and business constraints:
 *
 *   - Content is limited to 5-1,000 characters to encourage concise, focused
 *       responses
 *   - Replies are always anonymous and attributed to the guest who submitted them
 *   - Replies form a hierarchical relationship with parent posts (one-to-many)
 *   - Replies cannot be edited after 24 hours to maintain conversation history
 *       integrity
 *   - Both creation and update timestamps are preserved for auditability
 *
 *   Each reply link directly to the economic_board_guest entity representing the
 *   anonymous poster, and to the economic_board_posts entity representing the
 *   parent topic. This ensures traceability for moderation purposes while
 *   preserving user anonymity. The reply model is heavily indexed for efficient
 *   retrieval of replies to specific posts, supporting the platform's goal of
 *   fast discussion thread loading.
 * @namespace Replies
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconomicBoardReplies = {
  /**
   * Primary Key.
   *
   * Unique identifier for each reply in the economic discussion board system.
   *
   * This UUID is generated by the system upon reply creation and serves as
   * the primary means of identifying and referencing individual replies. It
   * is used in API endpoints to retrieve, update, or delete specific
   * replies.
   *
   * The identifier is stored in the economic_board_replies table and is
   * referenced by the economic_board_post_id in the same table to maintain
   * the reply-to-post relationship.
   *
   * No other identifiers are used for replies in this system, ensuring all
   * operations on replies use this single, consistent identifier.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent economic board post that this reply answers.
   * {@link economic_board_posts.id}.
   *
   * This field establishes the hierarchical relationship between a reply and
   * its parent post. It links each reply to exactly one discussion post
   * within the economic_board_posts table.
   *
   * This relationship ensures replies are properly organized under their
   * corresponding posts in the discussion thread structure. The foreign key
   * constraint in the database ensures referential integrity - replies cannot
   * exist without their parent post, and if a post is deleted, its replies
   * are automatically removed via cascade deletion.
   *
   * The value of this field is determined at reply creation time based on the
   * postId parameter in the API request, which must correspond to an existing
   * post in the economic_board_posts table.
   */
  economic_board_post_id: string & tags.Format<"uuid">;

  /**
   * Reference to the anonymous guest who submitted this reply.
   * {@link economic_board_guest.id}.
   *
   * This field links each reply to the economic_board_guest record
   * representing the anonymous user who posted it. This enables the system to
   * track anonymous users while preserving their anonymity, as only the
   * system-generated UUID is stored, not personal information.
   *
   * The economic_board_guest_id is set when a reply is submitted, based on
   * the guest's session. When a guest submits a reply, the system retrieves
   * their session_id from the HTTP request and associates it with their
   * existing economic_board_guest record (creating one if needed). This
   * maintains consistency in anonymous user tracking across interactions.
   *
   * The guest identifier is never exposed in API responses to uphold the
   * platform's anonymous posting philosophy, and the system uses this field
   * internally for moderation purposes only.
   */
  economic_board_guest_id: string & tags.Format<"uuid">;

  /**
   * The text content of the reply. Must be between 5 and 1,000 characters as
   * per business rules.
   *
   * This field contains the actual text response from the user to a post or
   * another reply. The content represents the user's contribution to the
   * discussion and must meet minimum and maximum character length
   * requirements to ensure quality and prevent spam. Only text-based input is
   * accepted, excluding HTML, markup, or rich formatting.
   *
   * The value is read and validated upon submission, with the system
   * rejecting replies shorter than 5 characters or longer than 1,000
   * characters. The content is stored exactly as entered by the user (single
   * line or multi-line), preserving the original formatting where
   * applicable.
   *
   * The content field is searchable and indexable for moderation and
   * compliance purposes, though it is never exposed directly to users outside
   * the context of the reply display in the discussion thread.
   */
  content: string & tags.MinLength<5> & tags.MaxLength<1000>;

  /**
   * Timestamp when the reply was submitted in ISO 8601 format (UTC).
   *
   * This field records the precise moment when the reply was submitted to the
   * system, in Coordinated Universal Time (UTC) format following ISO 8601
   * standards (YYYY-MM-DDTHH:mm:ssZ).
   *
   * The timestamp is automatically generated by the server at the time of
   * creation and cannot be modified by users or administrative actions. It
   * establishes the chronological order of replies within a discussion thread
   * and is used for displaying replies in sequential order.
   *
   * In the economic_board_replies table, this field is designated as DateTime
   * @db.Timestamptz to preserve timezone information precisely, although all
   * timestamps are stored and displayed in UTC for consistency across the
   * system.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the reply was last modified. Initially set to created_at.
   *
   * This field tracks the most recent time the reply's content was edited by
   * its original author. When a reply is initially created, updated_at is set
   * equal to created_at. If the reply is edited within the allowed 24-hour
   * window, this field is updated to the current timestamp, reflecting the
   * time of the last modification.
   *
   * The updated_at field is never changed by administrative actions (such as
   * moderation or deletion), only by user-initiated edits within the editing
   * window. This field allows the system to display "[Edited]" markers on
   * replies that have been modified after their initial submission, while
   * preserving the integrity of the original creation record with
   * created_at.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEconomicBoardReplies {
  /**
   * Search and filter parameters for economic board replies.
   *
   * This type defines the parameters used to search and filter replies to
   * posts in the economic/political discussion board. It supports pagination,
   * sorting, and content search capabilities for retrieving reply
   * collections.
   *
   * The properties in this schema align directly with the filtering and
   * pagination needs of the /economicBoard/posts/{postId}/replies PATCH
   * endpoint. It allows users to navigate reply threads efficiently without
   * requiring exact matches for every field.
   *
   * This is specifically designed for public-facing thread navigation use
   * cases where comprehensive filtering of replies is required.
   */
  export type IRequest = {
    /**
     * Text to search for in reply content.
     *
     * Performs full-text search across the content field of replies.
     *
     * The search should be case-insensitive and support partial word
     * matches. This enables users to find specific responses within lengthy
     * threads based on keywords or phrases.
     *
     * The system uses PostgreSQL GIN indexes on the content field for fast
     * text search performance.
     *
     * For example, searching for 'tax' would return replies containing the
     * word 'tax', 'taxation', etc.
     */
    search?: string | undefined;

    /**
     * Page number for pagination.
     *
     * Specifies which page of results to return, with page 1 being the
     * first page of results.
     *
     * This property works in conjunction with limit to implement pagination
     * for the reply search results.
     *
     * The page number must be a positive integer starting from 1. Page
     * numbers less than 1 are invalid and will cause an error response.
     *
     * This pagination strategy enables efficient retrieval of large sets of
     * replies without overwhelming the client or server with a single large
     * response.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of results per page for pagination.
     *
     * Specifies how many reply records to return per page. The value must
     * be between 1 and 100 (inclusive), with a default of 25.
     *
     * This limitation prevents performance degradation caused by extremely
     * large result sets, while providing sufficient flexibility for
     * different use cases.
     *
     * Small limits (1-10) can be useful when reviewing specific replies,
     * while larger limits (50-100) reduce the number of API calls needed to
     * view comprehensive result sets.
     *
     * When limit exceeds 100, the system will enforce the maximum value of
     * 100.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<25> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Field name to sort the results by.
     *
     * Specifies which field to use for sorting the returned reply records.
     * Valid values are: 'created_at' (default) or 'updated_at'.
     *
     * Sorting by 'created_at' (default) orders replies chronologically by
     * when they were created (newest first).
     *
     * Sorting by 'updated_at' orders replies by when they were last
     * modified, putting recently edited replies at the top.
     *
     * This allows users to organize the reply stream based on chronological
     * order or recency of edits.
     */
    sort?: "created_at" | "updated_at" | undefined;

    /**
     * Sort order direction.
     *
     * Specifies whether to sort the results in ascending ('asc') or
     * descending ('desc') order based on the selected sort field.
     *
     * Ascending order arranges from smallest to largest (oldest first).
     *
     * Descending order (default) arranges from largest to smallest (newest
     * first).
     *
     * This provides flexibility in how results are presented, allowing
     * users to quickly identify either the oldest or newest replies
     * depending on their context.
     */
    order?: "asc" | "desc" | undefined;
  };
}
