import { tags } from "typia";

/**
 * Core economic and political discussion posts, each associated with a topic
 * and subject to moderation lifecycle.
 *
 * This schema represents the complete data structure of discussion posts in the
 * economic/political forum. All posts are categorized under one of seven
 * predefined topics and undergo a moderation workflow before becoming publicly
 * visible.
 *
 * The entity is designed to support anonymous participation while enabling
 * comprehensive moderation. Posts originate from either guest users
 * (anonymously tracked via author_hash) or authenticated members (tracked via
 * their membership).
 *
 * Key design principles:
 *
 * - All posts start in 'pending' status for moderation review
 * - Only 'published' posts are visible to users; other statuses result in 404
 *   responses
 * - Guest submissions are tracked through cryptographic hashing, preserving
 *   anonymity
 * - Member posts use their established identity for accountability
 * - Moderation actions are logged for transparency and compliance
 * - The system implements hard delete for admin removals since no soft delete
 *   column exists
 * - Authorship information is never exposed to users; all posts appear
 *   anonymously
 *
 * The schema strictly follows the economic_board_posts table in the Prisma
 * schema with no additional or assumed fields. Each property maps directly to a
 * field in the database, ensuring data integrity and implementability.
 *
 * This model forms the core of the platform's functionality, serving as the
 * primary unit of content and the central object in all discussion-related
 * operations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconomicBoardPost = {
  /**
   * Primary Key.
   *
   * Unique identifier for the economic board post.
   *
   * This UUID is generated by the system upon post creation and is used as
   * the primary reference for all post-related operations.
   *
   * The identifier ensures unique identification across the entire system and
   * is used to link posts with replies, moderation actions, and topic
   * associations.
   *
   * All API operations referencing a specific post will use this identifier
   * in their path parameters.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Topic that this post belongs to. {@link economic_board_topics.id}.
   *
   * This field establishes the relationship between the post and its assigned
   * topic category.
   *
   * The value must correspond to an existing record in the
   * economic_board_topics table, which contains exactly seven predefined
   * topics: "Inflation", "Tax Policy", "Elections", "Global Trade", "Monetary
   * Policy", "Labor Markets", and "Fiscal Policy".
   *
   * This field ensures posts are categorized appropriately and enables
   * topic-based filtering and display in the user interface.
   */
  economic_board_topics_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the post was submitted.
   *
   * This field records the exact UTC time when the post was first created and
   * submitted to the system.
   *
   * The timestamp follows ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) and is
   * immutable after creation. It serves as the primary chronological
   * reference for sorting and displaying posts in the forum.
   *
   * This timestamp is used in conjunction with updated_at to determine if a
   * posted has been edited after submission, as described by the edited
   * field.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the post was last edited.
   *
   * This field records the exact UTC time when the post was last modified
   * after its initial submission.
   *
   * If the post has never been edited, this field remains unchanged from
   * created_at. When an edit is made within the 24-hour editing window, this
   * field is updated to reflect the modification time.
   *
   * This timestamp is used in the user interface to show when the post was
   * last updated and to calculate whether the 24-hour editing window is still
   * active.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Moderation status of the post: 'pending', 'published', 'rejected', or
   * 'deleted'.
   *
   * This field determines the visibility and accessibility of the post to
   * users:
   *
   * - 'pending': The post has been submitted but requires admin approval before
   *   becoming visible to the public
   * - 'published': The post has been approved by an admin and is visible to all
   *   users
   * - 'rejected': The admin has declined to publish the post; it remains hidden
   *   from public view
   * - 'deleted': The admin has permanently removed the post from the system
   *   (hard delete)
   *
   * For any request to retrieve a post via the API, only posts with
   * 'published' status are returned as successful responses. All other
   * statuses result in a 404 Not Found response to maintain moderation
   * integrity.
   */
  status: "pending" | "published" | "rejected" | "deleted";

  /**
   * Brief title or subject line of the post (max 120 characters).
   *
   * This field contains a concise summary of the post's topic or main point.
   * It serves as the post's title in list views and search results.
   *
   * The subject line must be between 5 and 120 characters of meaningful
   * economic or political content. Empty subjects or subjects containing only
   * URLs, emojis, or symbols are rejected by the system.
   *
   * This field helps users quickly identify the topic of interest and
   * facilitates search and filtering functionality.
   */
  subject: string & tags.MinLength<5> & tags.MaxLength<120>;

  /**
   * Full text content of the post (max 5,000 characters).
   *
   * This field contains the complete text of the user's contribution to the
   * Discussion Board.
   *
   * The content must be substantive text about an economic or political
   * topic, with a minimum threshold of 10 characters. Posts containing only
   * URLs, emojis, or symbols without meaningful text are rejected.
   *
   * The 5,000-character limit ensures content remains focused and readable,
   * discouraging excessively long statements while allowing for detailed
   * economic analysis or policy debate.
   */
  content: string & tags.MinLength<10> & tags.MaxLength<5000>;

  /**
   * Number of direct replies to this post.
   *
   * This field contains a count of all approved replies associated with this
   * post in the economic_board_replies table.
   *
   * The system automatically increments this counter when a reply is
   * published and decrements it when a reply is permanently deleted.
   *
   * This value is displayed in the user interface to indicate the level of
   * engagement a post has generated and helps users identify active
   * discussion threads.
   */
  reply_count: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Whether this post has been edited after initial submission.
   *
   * This boolean field indicates whether the post's content or subject has
   * been modified after its initial creation.
   *
   * The field is automatically set to true when the member edits their post
   * within the allowed 24-hour editing window. It remains false if the post
   * has never been edited.
   *
   * This field is used in the user interface to display an edited marker next
   * to the post, helping users understand if the content they're viewing has
   * been updated since its original submission.
   */
  edited: boolean;

  /**
   * Timestamp of last edit. Null if never edited.
   *
   * This field records the exact UTC time when the post was last modified by
   * the author within the 24-hour editing window.
   *
   * When a post is edited, this field is updated to match the updated_at
   * timestamp. If the post has never been edited, this field remains null,
   * which aligns with the edited field being false.
   *
   * This field provides a precise record of when edits were made, supporting
   * transparency and accountability in the discussion board.
   */
  edited_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * System-generated anonymous identifier derived from IP and timestamp for
   * guest posts.
   *
   * This field contains a cryptographic hash of the guest's IP address and
   * the timestamp of creation, providing a persistent anonymous identifier
   * for unauthenticated users.
   *
   * For authenticated members, this field remains null since the system uses
   * their member ID for identification instead.
   *
   * This field enables moderation and abuse detection without storing
   * personally identifiable information, aligning with the platform's
   * anonymous posting policy.
   */
  author_hash: string | null;

  /**
   * ID of admin who last modified status (approve/reject/delete).
   *
   * This field tracks the administrator responsible for the last moderation
   * action on a post.
   *
   * When an admin approves, rejects, or deletes a post, their unique
   * identifier from the economic_board_admin table is stored in this field
   * for audit purposes.
   *
   * This field remains null until an admin performs a moderation action on
   * the post, and it is never overwritten by subsequent moderation actions to
   * preserve a clear audit trail.
   *
   * This field ensures accountability in moderation process while maintaining
   * separation between user-submitted content and administrative actions.
   */
  admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reason provided by admin for rejection or deletion. Null if not
   * rejected/deleted.
   *
   * This field contains the administrative reason for rejecting or deleting a
   * post, as provided by the admin during moderation.
   *
   * When a post is rejected or deleted, the admin must provide a reason via a
   * predefined set of options (e.g., "inappropriate content", "off-topic",
   * "duplicate") which is then stored here.
   *
   * This field remains null if the post status is 'pending' or 'published',
   * as no reason is needed for these states.
   *
   * This field supports transparent moderation by providing context for
   * rejected content, while preserving the anonymity of the original author.
   */
  moderation_reason?: string | null | undefined;
};
export namespace IEconomicBoardPost {
  /**
   * Search and filter parameters for economic board posts.
   *
   * This type represents the request payload for searching and filtering
   * economic and political discussion posts.
   *
   * It provides a comprehensive set of parameters to navigate through the
   * posts database using pagination, keyword search, topic filtering,
   * sorting, and temporal constraints.
   *
   * The fields are designed to be used together to create precise queries
   * that return exactly the content users are looking for without
   * overwhelming them with irrelevant results.
   *
   * All filtering and sorting operations are designed to work efficiently
   * with the economic_board_posts table in the database.
   *
   * This request type is used by both guest and member users to browse posts,
   * and by admins for moderation workflows.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * The page number indicates which chunk of results to retrieve. The
     * first page is page 1.
     *
     * This parameter allows users to navigate through large sets of results
     * without loading everything at once.
     *
     * The system enforces a reasonable maximum page size to prevent
     * excessive memory usage and resource consumption.
     *
     * This field aligns with the pagination patterns used throughout the
     * system and ensures consistent behavior across all paginated
     * endpoints.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of items per page.
     *
     * This parameter controls the size of each page in the pagination
     * system. It determines how many posts will be returned in a single
     * response.
     *
     * The minimum value is 1, and the maximum value is 100 to ensure
     * performance and prevent overwhelming the client with too much data at
     * once.
     *
     * The default value when this parameter is not specified is 20,
     * balancing between efficient loading and user experience.
     *
     * This limit is enforced at the system level to maintain consistent
     * performance across all client devices and network conditions.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Text search query for filtering posts.
     *
     * This field allows users to search for posts containing specific
     * keywords in either the subject or content.
     *
     * The search is case-insensitive and can match partial words or
     * phrases.
     *
     * The length is limited to 100 characters to prevent performance issues
     * from overly broad searches and to maintain efficient database query
     * execution.
     *
     * This enables users to quickly find relevant discussions without
     * needing to browse through all available posts manually.
     */
    search?: (string & tags.MinLength<1> & tags.MaxLength<100>) | undefined;

    /**
     * Topic category filter for posts.
     *
     * This parameter allows users to filter posts by topic category,
     * showing only posts from a specific economic or political topic.
     *
     * The value must exactly match one of the seven predefined topic
     * categories: "Inflation", "Tax Policy", "Elections", "Global Trade",
     * "Monetary Policy", "Labor Markets", "Fiscal Policy".
     *
     * If not provided, posts from all topics are returned.
     *
     * The "General Discussion" category is treated as a default topic for
     * posts that were submitted without a specific topic selection.
     *
     * All values are case-sensitive to ensure precise filtering and prevent
     * ambiguity in topic matching.
     */
    topic?:
      | "Inflation"
      | "Tax Policy"
      | "Elections"
      | "Global Trade"
      | "Monetary Policy"
      | "Labor Markets"
      | "Fiscal Policy"
      | "General Discussion"
      | undefined;

    /**
     * Field to sort posts by.
     *
     * This parameter determines the sorting criteria for the returned
     * posts.
     *
     * Allowed values are:
     *
     * - "created_at": Sort by the original post creation timestamp (oldest
     *   first)
     * - "updated_at": Sort by the last time the post was updated (oldest
     *   first)
     * - "reply_count": Sort by the number of replies the post has received
     *   (fewest first)
     *
     * When not specified, the default sort is by "created_at" descending
     * (newest first).
     */
    sortBy?: "created_at" | "updated_at" | "reply_count" | undefined;

    /**
     * Sort order direction.
     *
     * This parameter controls whether the results are sorted in ascending
     * or descending order based on the "sortBy" field.
     *
     * Allowed values are:
     *
     * - "asc": Ascending order (oldest/smallest first)
     * - "desc": Descending order (newest/largest first)
     *
     * When not specified, the default order is "desc" for all sort fields,
     * ensuring that the most recent or most discussed posts appear first.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Moderation status filter for posts.
     *
     * This parameter allows filtering posts based on their moderation
     * status.
     *
     * Allowed values are:
     *
     * - "published": Only show posts that have been approved and are publicly
     *   visible
     * - "pending": Only show posts awaiting moderation
     * - "rejected": Only show posts that have been rejected by an admin
     * - "deleted": Only show posts that have been permanently deleted
     *
     * This field enables users to manage their own posts by filtering for
     * specific statuses, and allows administrators to manage moderation
     * workflows.
     *
     * Only "published" posts are visible to guests and non-admin users.
     * Admins can view the full range of statuses.
     */
    status?: "published" | "pending" | "rejected" | "deleted" | undefined;

    /**
     * Filter posts created after this timestamp.
     *
     * This field accepts ISO 8601 formatted date-time string (e.g.,
     * "2025-10-05T14:30:00Z") and returns only posts created after the
     * specified time.
     *
     * This is useful for retrieving new posts since a specific date without
     * having to paginate through thousands of historical entries.
     *
     * The system will treat this as a lower bound for the created_at field,
     * inclusive.
     */
    createdAfter?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter posts created before this timestamp.
     *
     * This field accepts ISO 8601 formatted date-time string (e.g.,
     * "2025-10-05T14:30:00Z") and returns only posts created before the
     * specified time.
     *
     * This is useful for retrieving posts from a specific historical period
     * without having to paginate through all entries.
     *
     * The system will treat this as an upper bound for the created_at
     * field, inclusive.
     */
    createdBefore?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Input data required to create a new economic/political discussion post.
   *
   * This type represents the request body for creating a new post on the
   * economic/political discussion board.
   *
   * It contains only the essential information needed to create a new
   * discussion thread: the associated topic, a subject title, and the full
   * content of the post.
   *
   * This schema explicitly excludes any system-managed fields like id,
   * created_at, updated_at, status, author_hash, etc., as these are
   * automatically generated by the system.
   *
   * The subject and content fields have strict length limits to ensure
   * quality and maintainability of discussions.
   *
   * This schema strictly follows the business rule that requires every post
   * to be categorized under one of the seven predefined topics.
   *
   * All fields are required to ensure a complete and meaningful post
   * submission, preventing empty or minimal submissions that do not
   * contribute to meaningful discourse.
   */
  export type ICreate = {
    /**
     * Unique identifier of the topic category for this post.
     *
     * This field links the post to one of the seven predefined topic
     * categories: "Inflation", "Tax Policy", "Elections", "Global Trade",
     * "Monetary Policy", "Labor Markets", or "Fiscal Policy".
     *
     * The value must be a UUID that corresponds to an existing record in
     * the economic_board_topics table.
     *
     * This field is required because every post must be categorized under
     * one of the system's predefined topics to maintain organization and
     * consistency.
     *
     * The system validates that this ID references a topic that is
     * currently active (is_active = true). If the topic is inactive,
     * creation will be rejected.
     */
    economic_board_topics_id: string & tags.Format<"uuid">;

    /**
     * Brief title or subject line of the post.
     *
     * This field contains a concise summary of the post's topic or main
     * point.
     *
     * It must be between 5 and 120 characters long to ensure it is
     * meaningful but not excessively long for display in list views.
     *
     * The subject should capture the essence of the post in a clear,
     * accurate manner to help users quickly understand the topic of
     * discussion.
     *
     * This field is required for all posts and serves as the primary
     * identifier in topic lists and search results.
     */
    subject: string & tags.MinLength<5> & tags.MaxLength<120>;

    /**
     * Full text content of the post.
     *
     * This field contains the complete body of the discussion post,
     * including detailed analysis, arguments, questions, or thoughts on the
     * economic or political topic.
     *
     * It must be between 10 and 5,000 characters long to ensure substantial
     * content while preventing overly long posts that might be difficult to
     * read or review.
     *
     * The content must be substantive and focused on economic or political
     * analysis, adhering to the platform's civil discourse principles.
     *
     * This field cannot be empty or contain only spaces, URLs, emojis, or
     * symbols without meaningful text.
     *
     * The system will reject submissions that do not meet these
     * requirements with an appropriate error message.
     */
    content: string & tags.MinLength<10> & tags.MaxLength<5000>;
  };

  /**
   * Request body for updating an existing economic board post.
   *
   * This schema represents the allowable fields that can be modified in an
   * economic board post update operation.
   *
   * All properties in this schema are optional (Partial<T> pattern) to
   * support partial updates without requiring clients to submit complete post
   * data.
   *
   * For members updating their own posts:
   *
   * - Only subject and content fields can be modified
   * - Restrictions: Updates must occur within 24 hours of post creation
   * - Status cannot be changed
   * - Admin_id and moderation_reason must be omitted
   *
   * For admins updating any post:
   *
   * - All fields can be modified
   * - Status can be changed to approve, reject, or delete
   * - If status is changed to 'rejected' or 'deleted', moderation_reason
   *   becomes required
   * - Admin_id must be provided when status is modified
   *
   * This schema avoids including immutable fields such as id, created_at, and
   * reply_count since these are system-managed.
   *
   * The schema is designed to ensure that:
   *
   * 1. Members cannot alter moderation status
   * 2. Members cannot change the author identity
   * 3. Admins must provide justification for rejections/deletions
   * 4. History is preserved with accurate timestamps
   *
   * All updates must be validated against the post's current status and the
   * actor's permissions to ensure compliance with business rules.
   */
  export type IUpdate = {
    /**
     * Brief title or subject line of the post (max 120 characters).
     *
     * This field contains a concise summary of the post's topic or main
     * point. It serves as the post's title in list views and search
     * results.
     *
     * The subject line must be between 5 and 120 characters of meaningful
     * economic or political content. Empty subjects or subjects containing
     * only URLs, emojis, or symbols are rejected by the system.
     *
     * This field is optional in update operations. If provided, it replaces
     * the existing subject. If null or omitted, the subject remains
     * unchanged.
     *
     * This field helps users quickly identify the topic of interest and
     * facilitates search and filtering functionality.
     */
    subject?:
      | (string &
          tags.MinLength<5> &
          tags.MaxLength<120> &
          tags.Pattern<"^\\S(?:.*\\S)?$">)
      | null
      | undefined;

    /**
     * Full text content of the post (max 5,000 characters).
     *
     * This field contains the complete text of the user's contribution to
     * the Discussion Board.
     *
     * The content must be substantive text about an economic or political
     * topic, with a minimum threshold of 10 characters. Posts containing
     * only URLs, emojis, or symbols without meaningful text are rejected.
     *
     * The 5,000-character limit ensures content remains focused and
     * readable, discouraging excessively long statements while allowing for
     * detailed economic analysis or policy debate.
     *
     * This field is optional in update operations. If provided, it replaces
     * the existing content. If null or omitted, the content remains
     * unchanged.
     */
    content?:
      | (string &
          tags.MinLength<10> &
          tags.MaxLength<5000> &
          tags.Pattern<"^\\S(?:.*\\S)?$">)
      | null
      | undefined;
  };
}
