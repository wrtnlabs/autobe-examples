import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents an anonymous visitor to the economic discussion board. This model
 * tracks guest interactions for moderation and system behavior without
 * requiring authentication.
 *
 * This schema is derived from the economic_board_guest Prisma model and
 * provides a complete representation of guest user data. It includes every
 * field defined in the Prisma schema to ensure API compatibility and data
 * integrity.
 *
 * The model tracks anonymous users who view content and interact with the
 * platform without registering. Each guest is assigned a unique session_id and
 * ip_hash for identification and abuse detection purposes while maintaining
 * privacy. The created_at and last_active timestamps provide a complete
 * activity history.
 *
 * No password, email, or authentication fields are included as guests do not
 * authenticate. All user interactions are tracked anonymously using the
 * session_id. This aligns with the business requirement for anonymous
 * participation while enabling system moderation capabilities.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconomicBoardGuest = {
  /**
   * Primary Key.
   *
   * Unique identifier for the guest user session.
   *
   * This UUID is generated by the system when the guest first interacts with
   * the platform. It serves as the primary identifier for tracking anonymous
   * user interactions within the economic_board_guest table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the guest first accessed the system or interacted with it.
   *
   * This is recorded in ISO 8601 format (UTC) and provides a permanent record
   * of when the guest session was initiated. It is immutable and cannot be
   * modified after creation, serving as an audit trail for the guest's
   * initial interaction.
   *
   * This field is critical for identifying the origin of a guest session and
   * aligns with the business rule for tracking anonymous user activity.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Unique session identifier generated by the system to persist guest state
   * across interactions.
   *
   * This identifier allows the system to maintain state for anonymous users
   * during their session without requiring authentication. The session_id is
   * unique across all guests and ensures that interactions can be associated
   * with the correct anonymous session.
   *
   * This field is used in all API operations that involve guest actions and
   * is essential for maintaining session continuity and moderation tracking.
   */
  session_id: string;

  /**
   * Cryptographic hash of the guest's IP address for moderation and abuse
   * detection. No personal identifying information is stored.
   *
   * This field contains a hash value computed from the guest's IP address at
   * the time of session creation. It enables the system to detect patterns of
   * abusive behavior without storing raw IP addresses, preserving user
   * privacy as required by the platform's no-PII policy.
   *
   * The hash is computed using a secure one-way algorithm and is used in
   * moderation workflows to identify repeat offenders while maintaining
   * anonymity.
   */
  ip_hash?: string | undefined;

  /**
   * The last timestamp when the guest performed any action on the system.
   *
   * This field is updated with the current UTC timestamp whenever the guest
   * performs any action, such as viewing content or submitting content. It is
   * used to determine session validity and to detect inactive sessions that
   * may be eligible for cleanup based on the 30-day inactivity threshold
   * defined in business rules.
   *
   * This field is crucial for implementing the session management policy that
   * preserves guest state for up to 30 days.
   */
  last_active: string & tags.Format<"date-time">;
};
export namespace IEconomicBoardGuest {
  /**
   * Authorization response containing JWT token for guest session.
   *
   * This response is returned after successful guest session creation or
   * refresh operations. It provides the necessary authentication credentials
   * for temporary anonymous access to the platform without requiring
   * registration.
   *
   * The identifier represents the guest's unique session and is used to
   * maintain state across interactions. The JWT token enables stateless
   * authentication while maintaining the platform's commitment to user
   * privacy.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated guest session.
     *
     * This UUID is assigned by the system when a guest first accesses the
     * platform. It serves as a persistent identifier for tracking guest
     * interactions without requiring registration.
     *
     * This identifier is linked to the session_id in the
     * economic_board_guest table and remains stable across multiple visits
     * within the session lifespan (up to 30 days).
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Search criteria and pagination parameters for filtering guest
   * interactions.
   *
   * This schema defines the search and filter parameters that can be used to
   * retrieve paginated lists of guest interactions from the
   * economic_board_guest table. The operation supports complex queries to
   * find guests based on various criteria including creation date ranges,
   * last activity date ranges, session_id patterns, and ip_hash patterns.
   *
   * The schema supports comprehensive pagination with configurable page size
   * and offset controls. Administrators can sort the results by different
   * fields and specify the sort direction.
   *
   * Due to privacy considerations, the search results do not include
   * personally identifiable information. The guest records are returned with
   * obfuscated identifiers and summary metadata only. The ip_hash field is
   * stored as a cryptographic hash of the IP address and cannot be reversed
   * to reveal the original IP address.
   *
   * This request body enables administrators to investigate potential abuse
   * patterns, repeated sessions from the same IP, or suspicious activity
   * while respecting user privacy guidelines and preventing bulk data
   * harvesting.
   */
  export type IRequest = {
    /**
     * The page number to retrieve. Pages are 1-indexed.
     *
     * This parameter supports pagination of guest interaction records. The
     * default value is 1. Pages are limited to prevent excessive resource
     * usage and protect user privacy.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>)
      | undefined;

    /**
     * The number of guest records to return per page.
     *
     * This parameter controls the size of each page in the paginated
     * result. The value must be between 1 and 100 to prevent excessive data
     * retrieval. The default limit is 25 records per page.
     *
     * This limits exposure of guest data while allowing administrators to
     * efficiently review interaction patterns.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Filter guests created after this timestamp.
     *
     * Use ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to filter guests who
     * interacted with the system after a specific date and time.
     *
     * This allows administrators to review recent guest activity patterns
     * without retrieving all historical data. The system will return guests
     * with created_at values greater than this timestamp.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter guests created before this timestamp.
     *
     * Use ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to filter guests who
     * interacted with the system before a specific date and time.
     *
     * This enables administrators to focus on a specific time period for
     * analysis or audit purposes. The system will return guests with
     * created_at values less than this timestamp.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter guests whose last activity was after this timestamp.
     *
     * Use ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to find guests who have
     * been active recently.
     *
     * This helps identify active anonymous users for monitoring and
     * security analysis.
     */
    last_active_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter guests whose last activity was before this timestamp.
     *
     * Use ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ) to find guests who have
     * not been active recently.
     *
     * This enables administrators to identify inactive guest sessions that
     * may be candidates for cleanup or analysis.
     */
    last_active_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter guests by partial match of session_id.
     *
     * This parameter supports substring matching of the session_id field.
     * It can be used to find all guests associated with a specific session
     * pattern for troubleshooting or security investigation.
     *
     * The search is case-sensitive and matches any part of the session_id
     * string.
     */
    session_id_like?: string | undefined;

    /**
     * Filter guests by partial match of ip_hash.
     *
     * This parameter supports substring matching of the ip_hash field. It
     * can be used to identify potential abuse patterns from the same IP
     * address, as the ip_hash is derived from the guest's IP address for
     * moderation purposes.
     *
     * The search is case-sensitive and matches any part of the ip_hash
     * string.
     */
    ip_hash_like?: string | undefined;

    /**
     * The field to sort the results by.
     *
     * This parameter allows administrators to sort the guest list by
     * different criteria. The available options are:
     *
     * - Created_at: Sort by the time when the guest first interacted with the
     *   system
     * - Last_active: Sort by the time when the guest last performed any
     *   action on the system
     * - Session_id: Sort by the system-generated session identifier
     *
     * The default sort order is created_at descending (newest first).
     */
    sort_by?: "created_at" | "last_active" | "session_id" | undefined;

    /**
     * The sort order for the results.
     *
     * This parameter controls the direction of the sort. Valid values are:
     *
     * - Asc: Ascending order (oldest to newest)
     * - Desc: Descending order (newest to oldest)
     *
     * The default sort order is desc (descending).
     */
    sort_order?: "asc" | "desc" | undefined;
  };
}
