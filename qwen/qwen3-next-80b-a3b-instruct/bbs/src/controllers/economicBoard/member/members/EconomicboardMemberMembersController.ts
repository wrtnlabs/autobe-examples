import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconomicBoardMemberMembersMemberId } from "../../../../providers/getEconomicBoardMemberMembersMemberId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IEconomicBoardMember } from "../../../../api/structures/IEconomicBoardMember";

@Controller("/economicBoard/member/members/:memberId")
export class EconomicboardMemberMembersController {
  /**
   * Retrieve detailed information for a specific economic discussion board
   * member.
   *
   * This operation retrieves the complete profile information of a specific
   * member from the economic discussion board system. The operation queries the
   * economic_board_member table to obtain details including email address,
   * account creation timestamp, last login date, and active status.
   *
   * The operation supports authentication through JWT token validation. Members
   * can only retrieve their own information, while admins may retrieve any
   * member's information. The system enforces strict access control to protect
   * user privacy.
   *
   * The response does not include sensitive data like password_hash or
   * auth_jwt_id, adhering to security best practices. For security purposes,
   * the email address is returned in full but system-level identifiers like
   * auth_jwt_id remain protected.
   *
   * Error handling ensures that unauthorized access attempts return HTTP 403
   * Forbidden, while attempts to retrieve non-existent members return HTTP 404
   * Not Found. This operation is essential for member profile management and
   * administrative oversight of the discussion board community.
   *
   * @param connection
   * @param memberId Unique UUID identifier of the target economic board member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<IEconomicBoardMember> {
    try {
      return await getEconomicBoardMemberMembersMemberId({
        member,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
