import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchEconomicBoardAdminGuests } from "../../../../providers/patchEconomicBoardAdminGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IPageIEconomicBoardGuest } from "../../../../api/structures/IPageIEconomicBoardGuest";
import { IEconomicBoardGuest } from "../../../../api/structures/IEconomicBoardGuest";

@Controller("/economicBoard/admin/guests")
export class EconomicboardAdminGuestsController {
  /**
   * Search and retrieve paginated guest user interactions.
   *
   * This operation enables administrators to search, filter, and retrieve a
   * paginated list of guest users who have interacted with the
   * economic/political discussion board. Guests are anonymous visitors who
   * create posts or replies without authentication, tracked in the
   * economic_board_guest table. This table contains fields: id (UUID),
   * created_at (timestamp of first interaction), session_id (persistent
   * anonymous identifier), ip_hash (cryptographic hash of IP address for abuse
   * detection), and last_active (timestamp of most recent interaction).
   *
   * This is implemented as a PATCH request because it accepts complex search
   * criteria rather than simple path parameters. The request body will define
   * parameters such as date ranges for user activity, pagination limits,
   * sorting preferences, and search filters for session_id or ip_hash patterns.
   * The system will only return guest records that have been active recently,
   * respecting user privacy guidelines and preventing bulk data harvesting.
   *
   * The response includes a paginated collection (IPageIEconomicBoardGuest)
   * containing guest summary information, including id, created_at,
   * last_active, and an obfuscated view of the session_id. Admins may use this
   * list to investigate potential abuse patterns, repeated sessions from the
   * same IP, or suspicious activity. Guest data is not accessible to regular
   * members or guests themselves, ensuring compliance with the platform's
   * no-PII policy.
   *
   * @param connection
   * @param body Search criteria, sorting preferences, and pagination parameters
   *   for filtering guest interactions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconomicBoardGuest.IRequest,
  ): Promise<IPageIEconomicBoardGuest> {
    try {
      return await patchEconomicBoardAdminGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
