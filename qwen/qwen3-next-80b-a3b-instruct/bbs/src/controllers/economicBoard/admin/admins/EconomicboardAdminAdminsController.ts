import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconomicBoardAdminAdmins } from "../../../../providers/patchEconomicBoardAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getEconomicBoardAdminAdminsAdminId } from "../../../../providers/getEconomicBoardAdminAdminsAdminId";

import { IPageIEconomicBoardAdmin } from "../../../../api/structures/IPageIEconomicBoardAdmin";
import { IEconomicBoardAdmin } from "../../../../api/structures/IEconomicBoardAdmin";

@Controller("/economicBoard/admin/admins")
export class EconomicboardAdminAdminsController {
  /**
   * Search and retrieve a filtered, paginated list of economic discussion board
   * administrators.
   *
   * This operation retrieves a filtered and paginated list of economic
   * discussion board administrators from the system. It provides advanced
   * search capabilities for finding administrators based on multiple criteria
   * including partial email matching, last login date ranges, and account
   * status.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and sorting options. Administrators can sort by creation date, last
   * login, email, or other relevant fields in ascending or descending order.
   *
   * Security considerations include rate limiting for search operations and
   * appropriate filtering of sensitive administrator information. This
   * operation is restricted to admin users only, ensuring that only privileged
   * users can view the complete list of administrative accounts.
   *
   * This operation integrates with the economic_board_admin table as defined in
   * the Prisma schema, incorporating all available administrator fields and
   * relationships. The response includes administrator summary information
   * optimized for list displays, with options to include additional details
   * based on authorization level.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for administrator
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconomicBoardAdmin.IRequest,
  ): Promise<IPageIEconomicBoardAdmin.ISummary> {
    try {
      return await patchEconomicBoardAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific admin user by ID.
   *
   * This API operation fetches detailed information about a specific admin user
   * from the economicBoard system. Admin users have elevated permissions to
   * approve, reject, or delete posts and require secure access verification.
   *
   * The operation retrieves data from the economic_board_admin table in the
   * Prisma schema, which contains the admin's email address, password hash for
   * authentication, timestamps of account creation and last login, an active
   * status flag, and an authentication JWT ID for session management. All
   * fields are essential for authentication and authorization processes.
   *
   * Security considerations include ensuring only authenticated users with
   * appropriate permissions can access this endpoint. The adminId parameter
   * must be a valid UUID that corresponds to an existing admin record in the
   * database. The response should not include sensitive information like
   * password_hash in production environments, although the schema includes this
   * field for system integrity.
   *
   * This operation is critical for administrative dashboards that require
   * verification of admin identities and status. It must work in conjunction
   * with authentication middleware that validates JWT tokens and verifies the
   * requesting user has admin privileges. This ensures only authorized
   * administrators can view other admin accounts, preventing privilege
   * escalation attacks.
   *
   * The data returned by this endpoint may be used in conjunction with admin
   * action logs to audit moderation activities and investigate potential system
   * misuse or security breaches.
   *
   * @param connection
   * @param adminId The unique identifier of the admin user to retrieve,
   *   matching the UUID format used in the economic_board_admin table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<IEconomicBoardAdmin> {
    try {
      return await getEconomicBoardAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
