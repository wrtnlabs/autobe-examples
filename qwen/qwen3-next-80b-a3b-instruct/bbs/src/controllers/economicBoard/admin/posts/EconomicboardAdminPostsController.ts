import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconomicBoardAdminPosts } from "../../../../providers/postEconomicBoardAdminPosts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putEconomicBoardAdminPostsPostId } from "../../../../providers/putEconomicBoardAdminPostsPostId";
import { deleteEconomicBoardAdminPostsPostId } from "../../../../providers/deleteEconomicBoardAdminPostsPostId";

import { IEconomicBoardPost } from "../../../../api/structures/IEconomicBoardPost";

@Controller("/economicBoard/admin/posts")
export class EconomicboardAdminPostsController {
  /**
   * Create a new economic/political discussion post.
   *
   * This operation allows authenticated members to submit a new economic or
   * political discussion post. The post is created in 'pending' status and
   * remains invisible to all users until approved by an administrator,
   * following the platform's content moderation workflow.
   *
   * When a member submits a new post, the system requires a specific topic from
   * the seven predefined categories: 'Inflation', 'Tax Policy', 'Elections',
   * 'Global Trade', 'Monetary Policy', 'Labor Markets', or 'Fiscal Policy'. The
   * post must include a subject between 5 and 120 characters and content
   * between 10 and 5,000 characters. The system automatically assigns the
   * current UTC timestamp as the creation date and sets the status to 'pending'
   * regardless of the user's authentication level.
   *
   * The request body includes the topic identifier and content, with
   * authentication handled through a JWT token that identifies the member
   * creating the post. The system notes the member's ID in the database and
   * ensures all posts are properly attributed for moderation purposes. After
   * submission, the system renders a success message to the member indicating
   * that moderation is required before public visibility.
   *
   * Posts that fail validation (empty content, wrong topic format, exceeding
   * character limits) are rejected immediately with appropriate error messages.
   * The post history is preserved in the database with timestamps, and all
   * modifications are logged through the admin_id and moderation_reason fields
   * for audit purposes. This ensures accountability and compliance with the
   * platform's civil discourse principles.
   *
   * @param connection
   * @param body Creation data for a new discussion post including topic
   *   reference and content
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconomicBoardPost.ICreate,
  ): Promise<IEconomicBoardPost> {
    try {
      return await postEconomicBoardAdminPosts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing economic board post.
   *
   * This operation allows authorized users to modify the content or subject of
   * an existing economic board post.
   *
   * The post must be in either 'published' or 'rejected' status to be eligible
   * for modification. Posts with 'deleted' status cannot be updated, and
   * attempts to update them will result in a 404 Not Found response, as the
   * record is permanently removed from active system state.
   *
   * For members, updates are only permitted within 24 hours of the post's
   * original creation timestamp. If the 24-hour window has expired, the update
   * request will be denied with a 403 Forbidden response, regardless of the
   * content changes being requested. This restriction enforces the system's
   * business rule of limiting post editing to a brief period after submission.
   *
   * Administrators have broader permissions and can update any post's content,
   * subject, or moderation status at any time. When an admin updates a post's
   * status (e.g., from 'rejected' to 'published'), the system records the admin
   * ID and any moderation_reason provided in the request. The moderation_reason
   * field can be used to document the rationale for status changes.
   *
   * The system automatically sets the updated_at timestamp to the current UTC
   * time and sets the edited flag to true when content or subject fields are
   * modified. If the original poster's user ID is provided in the JWT token,
   * the system performs ownership verification against the author_hash or
   * member association before allowing the update.
   *
   * This operation is critical for maintaining content integrity while
   * respecting both user edit windows and administrative authority. It supports
   * the platform's core principle of structured, time-limited editing balanced
   * with authoritative moderation.
   *
   * @param connection
   * @param postId Unique identifier of the target economic board post to
   *   update. Must match an existing record in the economic_board_posts table.
   *   The system validates that the post exists and is not in 'deleted' status
   *   before allowing modification.
   * @param body Update details for the economic board post including content,
   *   subject, and optional moderation state changes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconomicBoardPost.IUpdate,
  ): Promise<IEconomicBoardPost> {
    try {
      return await putEconomicBoardAdminPostsPostId({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an economic board post.
   *
   * This operation permanently removes an economic board post from the system
   * with no possibility of recovery.
   *
   * The system performs a hard delete, as the economic_board_posts table does
   * not contain any soft delete fields (such as deleted_at or is_deleted). This
   * aligns with the requirements specified in the business rules, which state
   * that when an admin deletes a post, the content is removed permanently and
   * cannot be restored under any circumstances.
   *
   * The deletion is only permitted when performed by an admin user. Members and
   * guests cannot trigger deletion of any posts, even those they created.
   * Successful deletion requires a valid admin JWT token containing the 'admin'
   * role.
   *
   * Upon successful deletion, the system:
   *
   * 1. Completely removes all data from the economic_board_posts record
   * 2. Removes all associated replies from the economic_board_replies table using
   *    cascading delete
   * 3. Records the deletion event internally using the admin_id field (the ID of
   *    the admin who performed the deletion)
   * 4. Stores any provided moderation_reason to document why the post was deleted
   * 5. Sets the updated_at field to the deletion timestamp
   * 6. Changes the status field from its current value to 'deleted'
   *
   * The deleted record is no longer accessible through any public endpoint,
   * including search and topic filtering. Any attempts to retrieve the post by
   * ID will return a 404 Not Found response.
   *
   * For audit purposes, the system retains the deleted record's metadata in its
   * logical form (including admin_id and moderation_reason), but this data is
   * not exposed through any API endpoint and is treated as an internal
   * operational log.
   *
   * This implementation strictly adheres to the business rule that admin
   * deletions are final and irreversible. The absence of soft delete columns in
   * the schema dictates this hard delete behavior, ensuring data integrity and
   * simplifying the system's data retention model while still maintaining
   * sufficient audit trails for moderation transparency.
   *
   * @param connection
   * @param postId Unique identifier of the target economic board post to
   *   delete. Must match an existing record in the economic_board_posts table.
   *   The system ensures that only admins can perform this operation, and the
   *   deletion is permanent and irreversible.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconomicBoardAdminPostsPostId({
        admin,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
