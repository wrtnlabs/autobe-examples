import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconomicBoardAdminMembers } from "../../../../providers/patchEconomicBoardAdminMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getEconomicBoardAdminMembersMemberId } from "../../../../providers/getEconomicBoardAdminMembersMemberId";

import { IPageIEconomicBoardMember } from "../../../../api/structures/IPageIEconomicBoardMember";
import { IEconomicBoardMember } from "../../../../api/structures/IEconomicBoardMember";

@Controller("/economicBoard/admin/members")
export class EconomicboardAdminMembersController {
  /**
   * Search and retrieve a filtered, paginated list of members.
   *
   * This operation enables advanced searching and filtering of registered
   * members in the economic/discussion board system. It uses the PATCH HTTP
   * method to handle complex search criteria that would be inappropriate for a
   * GET request due to length or complexity.
   *
   * The operation queries the economic_board_member table from the Prisma
   * schema, returning a list of members filtered by criteria provided in the
   * request body. Support includes searching by user status (is_active),
   * registration date ranges (created_at), last login dates (last_login), and
   * email patterns. Results are fully paginated with configurable page size,
   * sorting by any field in ascending or descending order, and precise offset
   * control.
   *
   * Security considerations require no authentication for this endpoint since
   * it is designed for administrative oversight, though in practice should be
   * restricted to admin roles in implementation. The response only returns
   * public-level member data as defined in the economic_board_member schema:
   * id, email, created_at, verified_at, last_login, is_active, and auth_jwt_id.
   * Password hashes and sensitive data are never included.
   *
   * This operation implements full compliance with the Prisma schema definition
   * and includes only properties that exist in the database model. There is no
   * assumption of soft delete fields (deleted_at) or other non-existent
   * columns. The economic_board_member model is strictly adhered to with all
   * references validated against the schema.
   *
   * The response returns a paginated structure containing a data array with
   * member summary objects and pagination metadata including total count,
   * current page, page size, and total pages. This follows the standardized
   * pattern for list operations across the API.
   *
   * This is a system information operation designed for administrative
   * dashboard functions and cannot be used by regular members or guests.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for member filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconomicBoardMember.IRequest,
  ): Promise<IPageIEconomicBoardMember> {
    try {
      return await patchEconomicBoardAdminMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific economic discussion board
   * member.
   *
   * This operation retrieves the complete profile information of a specific
   * member from the economic discussion board system. The operation queries the
   * economic_board_member table to obtain details including email address,
   * account creation timestamp, last login date, and active status.
   *
   * The operation supports authentication through JWT token validation. Members
   * can only retrieve their own information, while admins may retrieve any
   * member's information. The system enforces strict access control to protect
   * user privacy.
   *
   * The response does not include sensitive data like password_hash or
   * auth_jwt_id, adhering to security best practices. For security purposes,
   * the email address is returned in full but system-level identifiers like
   * auth_jwt_id remain protected.
   *
   * Error handling ensures that unauthorized access attempts return HTTP 403
   * Forbidden, while attempts to retrieve non-existent members return HTTP 404
   * Not Found. This operation is essential for member profile management and
   * administrative oversight of the discussion board community.
   *
   * @param connection
   * @param memberId Unique UUID identifier of the target economic board member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<IEconomicBoardMember> {
    try {
      return await getEconomicBoardAdminMembersMemberId({
        admin,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
