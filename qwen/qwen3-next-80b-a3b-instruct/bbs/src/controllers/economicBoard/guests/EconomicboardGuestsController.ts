import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconomicBoardGuestsGuestId } from "../../../providers/getEconomicBoardGuestsGuestId";

import { IEconomicBoardGuest } from "../../../api/structures/IEconomicBoardGuest";

@Controller("/economicBoard/guests/:guestId")
export class EconomicboardGuestsController {
  /**
   * Retrieve a specific guest's interaction history.
   *
   * This operation retrieves detailed information about a specific guest's
   * interaction with the economic/discussion board system. The guest is
   * identified by a unique UUID identifier (guestId) that corresponds to a
   * record in the economic_board_guest table from the Prisma schema.
   *
   * The returned data includes the guest's session_id, which is used for
   * persistent state tracking across interactions, and the ip_hash, a
   * cryptographic hash of the guest's IP address used for abuse detection and
   * moderation purposes without storing personally identifiable information.
   * The last_active timestamp indicates when the guest last performed any
   * action on the system, which helps determine session validity and activity
   * patterns.
   *
   * Security considerations are paramount in this operation. Guests are
   * anonymous users who have not registered or authenticated, so no personal
   * identifying information is exposed. The IP_hash is stored as a
   * cryptographic hash to protect user privacy while still enabling moderation
   * against abusive behavior.
   *
   * This operation is critical for moderation workflows, as administrators may
   * need to investigate suspicious activity patterns across multiple guest
   * interactions. It also supports system analytics on anonymous user
   * engagement metrics.
   *
   * The operation references the economic_board_guest model from the Prisma
   * schema, which includes all fields defined in the database: id, created_at,
   * session_id, ip_hash, and last_active. No additional fields are included
   * that do not exist in the schema, maintaining strict alignment with the data
   * model.
   *
   * Error handling includes returning a 404 Not Found response if the guestId
   * does not correspond to an existing record. All responses are formatted in
   * JSON with standard HTTP status codes.
   *
   * @param connection
   * @param guestId Unique identifier of the guest whose interaction history is
   *   being retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<IEconomicBoardGuest> {
    try {
      return await getEconomicBoardGuestsGuestId({
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
