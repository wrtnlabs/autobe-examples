import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchAdminPostsPostIdApprove } from "../../../providers/patchAdminPostsPostIdApprove";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { patchAdminPostsPostIdReject } from "../../../providers/patchAdminPostsPostIdReject";
import { deleteAdminPostsPostId } from "../../../providers/deleteAdminPostsPostId";

import { IEconomicBoardPosts } from "../../../api/structures/IEconomicBoardPosts";

@Controller("/admin/posts/:postId")
export class AdminPostsController {
  /**
   * Approve a pending post and transition its status to 'published' in the
   * economic_board_posts table.
   *
   * This API operation allows an admin to approve a post that is currently in
   * 'pending' status, transitioning it to 'published' and making it visible to
   * all users.
   *
   * The operation requires the admin to be properly authenticated via JWT. The
   * post must exist and have a status of 'pending' in the economic_board_posts
   * table. The admin's ID is recorded in the admin_id field for audit
   * purposes.
   *
   * Before the update, the system validates that the requested post_id
   * corresponds to a legitimate post and that the admin has sufficient
   * permissions. The subject, content, and creation timestamp are preserved
   * unchanged.
   *
   * Once approved, the post appears in all topic feeds and search results. A
   * system notification can be triggered to notify the original author that
   * their post is now public.
   *
   * This operation must be used in conjunction with post rejection or deletion
   * to complete the moderation workflow. Only an authenticated admin can
   * perform this action.
   *
   * @param connection
   * @param postId Unique identifier of the post to be approved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch("approve")
  public async approve(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IEconomicBoardPosts> {
    try {
      return await patchAdminPostsPostIdApprove({
        admin,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Reject a pending post with a reason, changing its status to 'rejected' in
   * economic_board_posts.
   *
   * This API operation allows an admin to reject a post that is currently in
   * 'pending' status, preventing it from becoming public.
   *
   * The operation requires an admin to be authenticated and provides a
   * mandatory reason for rejection (e.g., 'inappropriate content', 'off-topic',
   * 'duplicate'). This reason is stored in the moderation_reason field of the
   * economic_board_posts table.
   *
   * The post status is updated from 'pending' to 'rejected'. The original
   * content, timestamp, and author information are preserved for audit purposes
   * but are no longer visible to any user.
   *
   * The reject operation triggers a notification to the original author of the
   * post, informing them of the rejection and the reason provided by the
   * admin.
   *
   * Rejection is a soft action; the post remains in the database for moderation
   * logs and compliance. An admin's rejection decision can be overridden only
   * by a higher-privilege admin or system owner.
   *
   * This operation respects the business rule that rejected posts must always
   * have a reason provided, ensuring accountability in moderation decisions.
   *
   * @param connection
   * @param postId Unique identifier of the post to be rejected.
   * @param body Reason for rejecting the post, required for audit and
   *   notification purposes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch("reject")
  public async reject(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconomicBoardPosts.IReject,
  ): Promise<IEconomicBoardPosts> {
    try {
      return await patchAdminPostsPostIdReject({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a post using hard delete, as economic_board_posts lacks
   * a soft_delete_column.
   *
   * This API operation allows an admin to permanently delete a post from the
   * database using a hard delete.
   *
   * Since the economic_board_posts table has no soft delete column (e.g.,
   * deleted_at), deletion is permanent and irreversible. The operation removes
   * both the post record and all associated replies from the database.
   *
   * The admin must be authenticated, and the specified post_id must exist. The
   * deletion cannot be undone, and no trace of the post is retained in the main
   * table.
   *
   * The system logs all deletions in an internal audit table including the
   * admin's ID, timestamp, and requested post_id, but this audit log is
   * separate from the economic_board_posts table and not accessible through
   * normal API endpoints.
   *
   * The deletion triggers no notification to the original author, per the
   * business rule that admin deletions are handled confidentially.
   *
   * The operation ensures that once a post is deleted, it cannot be recovered,
   * maintaining data integrity for moderation purposes.
   *
   * @param connection
   * @param postId Unique identifier of the post to be permanently deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IEconomicBoardPosts.IDelete> {
    try {
      return await deleteAdminPostsPostId({
        admin,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
