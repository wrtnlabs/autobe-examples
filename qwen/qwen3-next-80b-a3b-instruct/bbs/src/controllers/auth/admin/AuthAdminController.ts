import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { IEconomicBoardAdmin } from "../../../api/structures/IEconomicBoardAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new admin account in the economic_board_admin table with email
   * and password.
   *
   * This API operation registers a new system administrator account for the
   * economic/political discussion board.
   *
   * The operation creates a record in the economic_board_admin table with the
   * provided email and securely hashed password. It generates a new auth_jwt_id
   * for session management and sets created_at and last_login timestamps to the
   * current time. The is_active flag is initialized to true to enable immediate
   * login.
   *
   * Since admin accounts are pre-configured by system owners, this endpoint is
   * intended for initial setup or authorized administrative onboarding. It must
   * not be exposed to public users.
   *
   * The operation validates that the email is not already registered in the
   * economic_board_admin table. Multiple admins can exist, each with unique
   * email addresses. A password must be provided and is never stored in plain
   * text.
   *
   * After successful creation, an initial JWT access token and refresh token
   * are generated and returned to the client for future authentication.
   *
   * This endpoint should be called only by system administrators or during
   * initial deployment, not by regular users or guests.
   *
   * @param connection
   * @param body Input data required to create a new admin account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IEconomicBoardAdmin.IJoin,
  ): Promise<IEconomicBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an admin user by email and password, returning JWT access and
   * refresh tokens.
   *
   * This API operation authenticates an admin user by verifying their email and
   * password against the economic_board_admin table.
   *
   * The system compares the provided password against the stored password_hash
   * using a secure hashing algorithm. If validation succeeds, the last_login
   * timestamp is updated to the current time, and a new JWT access token is
   * generated with the admin's role and user identifier.
   *
   * The operation enforces that only accounts with is_active = true can login.
   * Suspended accounts cannot authenticate.
   *
   * The authentication token includes the admin's role and UUID, allowing
   * downstream services to enforce role-based access control. The refresh token
   * is returned in an httpOnly cookie for secure storage.
   *
   * Multiple concurrent sessions for the same admin are supported, with each
   * session having its own auth_jwt_id. The auth_jwt_id in the
   * economic_board_admin table is updated to the new token's UUID.
   *
   * This endpoint should be used for all admin authentication attempts,
   * including initial login and session resumption after token expiration.
   *
   * @param connection
   * @param body Credentials required for admin authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IEconomicBoardAdmin.ILogin,
  ): Promise<IEconomicBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh admin's access token using a valid refresh token, extending the
   * session.
   *
   * This API operation allows an admin user to obtain a new access token using
   * a valid refresh token.
   *
   * The refresh token must be stored in an httpOnly cookie and cannot be
   * accessed by client-side JavaScript. The server verifies the token's
   * validity, expiration, and association with an active admin account.
   *
   * Upon successful validation, a new JWT access token is issued, and the
   * refresh token may be rotated for enhanced security (fresh token
   * generation). The last_login timestamp in the economic_board_admin table is
   * updated to maintain login history.
   *
   * This mechanism allows long-lived sessions while minimizing exposure of
   * access tokens. The refresh token's expiration is set to 30 days from the
   * first authentication, after which a full re-login is required.
   *
   * The system enforces strict token validation and invalidates all previous
   * tokens when a refresh occurs. An admin can have only one active session
   * with a valid refresh token at a time.
   *
   * @param connection
   * @param body Refresh token provided to renew access credentials.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IEconomicBoardAdmin.IRefresh,
  ): Promise<IEconomicBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
