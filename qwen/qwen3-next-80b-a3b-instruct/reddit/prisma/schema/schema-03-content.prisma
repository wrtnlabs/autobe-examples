/// Core content entity representing user posts in communities. Stores the
/// main content data including text, link, or image types, with metadata for
/// ranking algorithms and lifecycle tracking. Relationships with post
/// images, links, comments, votes, and snapshots ensure comprehensive
/// content management.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_posts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The community this post belongs to. {@link
  /// community_platform_communities.id}.
  community_platform_community_id String
  
  /// The user who created this post. {@link community_platform_member.id}.
  author_id String
  
  /// The title of the post, limited to 300 characters. Must be present for all
  /// post types.
  title String
  
  /// The main body text of the post, limited to 10,000 characters. Used for
  /// text posts.
  content String?
  
  /// The type of post: 'text', 'link', or 'image'. Determines which additional
  /// fields are relevant.
  post_type String
  
  /// The total vote score calculated as upvotes minus downvotes for ranking
  /// purposes.
  vote_count Int
  
  /// The total number of direct comments on this post.
  comment_count Int
  
  /// The moderation status: 'published', 'unreviewed', 'removed', or
  /// 'archived'. Determines visibility.
  status String
  
  /// The timestamp when the post was submitted.
  created_at DateTime
  
  /// The timestamp when the post was last modified (e.g., edit, promotion).
  updated_at DateTime
  
  /// The timestamp when the post was soft-deleted. Null if still active.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  community community_platform_communities @relation(fields: [community_platform_community_id], references: [id], onDelete: Cascade)
  author community_platform_member @relation(fields: [author_id], references: [id], onDelete: Cascade)
  
  community_platform_post_images community_platform_post_images?
  community_platform_post_links community_platform_post_links?
  community_platform_comments community_platform_comments[]
  community_platform_post_snapshots community_platform_post_snapshots[]
  community_platform_reports community_platform_reports[]
  community_platform_vote_logs community_platform_vote_logs[]
  community_platform_post_votes community_platform_post_votes[]
  community_platform_audit_logs community_platform_audit_logs[]
  community_platform_notifications community_platform_notifications[]
  community_platform_image_hosting community_platform_image_hosting[]
  community_platform_perspective_api_results community_platform_perspective_api_results[]
  community_platform_email_delivery_logs community_platform_email_delivery_logs[]
  
  @@unique([community_platform_community_id, id])
  @@index([community_platform_community_id, created_at], map: "community_platform_posts_community_platform_community__4df12ea5")
  @@index([author_id, created_at])
  @@index([status, created_at])
  @@index([vote_count, created_at])
}

/// Entity to store image metadata for posts. Associates uploaded image files
/// with their parent posts, preserving file information for display and CDN
/// serving. Normalized to avoid duplication of image data across posts.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_images {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The post this image is associated with. {@link
  /// community_platform_posts.id}.
  community_platform_post_id String
  
  /// The CDN URL where the image is hosted. Generated by external service
  /// (e.g., Cloudinary).
  image_url String
  
  /// The original filename as uploaded by the user.
  file_name String
  
  /// The size of the image file in bytes.
  file_size Int
  
  /// The MIME type of the image file (e.g., 'image/jpeg').
  file_type String
  
  /// The width of the image in pixels.
  width Int?
  
  /// The height of the image in pixels.
  height Int?
  
  /// The timestamp when the image was uploaded and associated with the post.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  
  @@unique([community_platform_post_id])
  @@index([created_at])
  @@index([file_size])
}

/// Entity to store link metadata for posts. Holds URL and metadata for
/// link-type posts, enabling link validation, preview generation, and
/// domain-based filtering. Normalized to allow multiple links per post if
/// needed in future.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_links {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The post this link is associated with. {@link
  /// community_platform_posts.id}.
  community_platform_post_id String
  
  /// The full URL of the linked resource. Must be a valid HTTP/HTTPS URL.
  url String
  
  /// The extracted domain name of the URL for categorization and filtering.
  domain String
  
  /// The title of the linked page, extracted from its HTML <title> tag.
  title String?
  
  /// A short description of the linked page, extracted from its meta
  /// description tag.
  description String?
  
  /// Indicates whether the URL responds with a 2xx status code during
  /// validation.
  is_valid Boolean
  
  /// The timestamp when the link was last validated for accessibility.
  last_checked DateTime?
  
  /// The timestamp when the link was submitted and associated with the post.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  
  @@unique([community_platform_post_id])
  @@index([domain])
  @@index([last_checked])
  @@index([is_valid])
}

/// Entity representing user comments on posts and other comments. Supports
/// nested replies up to 8 levels, forming comment threads. Each comment is
/// linked to its post and parent comment (if nested), enabling hierarchical
/// display and evaluation.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_comments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The post this comment belongs to. {@link community_platform_posts.id}.
  community_platform_post_id String
  
  /// The user who created this comment. {@link community_platform_member.id}.
  author_id String
  
  /// The parent comment this is a reply to. {@link
  /// community_platform_comments.id}. Null for top-level comments.
  parent_comment_id String?
  
  /// Reference to the post's snapshot at time of comment. {@link
  /// community_platform_post_snapshots.id}.
  parent_post_snapshot_id String?
  
  /// The text content of the comment, limited to 2,000 characters.
  content String
  
  /// The total vote score calculated as upvotes minus downvotes for ranking
  /// purposes.
  vote_count Int
  
  /// The nesting depth of this comment, with 1 being top-level and 8 being
  /// maximum allowed.
  depth_level Int
  
  /// The moderation status: 'published', 'unreviewed', 'removed', or
  /// 'archived'. Determines visibility.
  status String
  
  /// The timestamp when the comment was submitted.
  created_at DateTime
  
  /// The timestamp when the comment was last modified (e.g., edit).
  updated_at DateTime
  
  /// The timestamp when the comment was soft-deleted. Null if still active.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  author community_platform_member @relation(fields: [author_id], references: [id], onDelete: Cascade)
  parent community_platform_comments? @relation("recursive", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  postSnapshot community_platform_post_snapshots? @relation(fields: [parent_post_snapshot_id], references: [id], onDelete: Cascade)
  
  recursive community_platform_comments[] @relation("recursive")
  community_platform_comment_snapshots community_platform_comment_snapshots[]
  community_platform_reports community_platform_reports[]
  community_platform_vote_logs community_platform_vote_logs[]
  community_platform_comment_votes community_platform_comment_votes[]
  community_platform_audit_logs community_platform_audit_logs[]
  community_platform_notifications community_platform_notifications[]
  community_platform_perspective_api_results community_platform_perspective_api_results[]
  community_platform_email_delivery_logs community_platform_email_delivery_logs[]
  
  @@index([parent_post_snapshot_id])
  
  @@unique([community_platform_post_id, id])
  @@index([community_platform_post_id, created_at], map: "community_platform_comments_community_platform_post_id_520bb25f")
  @@index([author_id, created_at])
  @@index([parent_comment_id])
  @@index([depth_level])
  @@index([status, created_at])
  @@index([vote_count, created_at])
}

/// Historical snapshot of a post's state at any point in time. Captures the
/// full data of a post at the moment of significant change (edit, report,
/// moderation) to preserve audit trail. All fields are denormalized copies
/// of the original post, ensuring complete historical accuracy, with
/// additional snapshot metadata.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The original post this snapshot is based on. {@link
  /// community_platform_posts.id}.
  community_platform_post_id String
  
  /// The moderator who triggered this snapshot (if any). {@link
  /// community_platform_moderator.id}.
  moderator_id String?
  
  /// The author of the post at the time of this snapshot. {@link
  /// community_platform_member.id}.
  author_id String
  
  /// The title of the post at the time of this snapshot.
  title String
  
  /// The main body text of the post at the time of this snapshot.
  content String?
  
  /// The type of post at the time of this snapshot: 'text', 'link', or 'image'.
  post_type String
  
  /// The vote score of the post at the time of this snapshot.
  vote_count Int
  
  /// The number of comments on the post at the time of this snapshot.
  comment_count Int
  
  /// The moderation status of the post at the time of this snapshot.
  status String
  
  /// The timestamp when this snapshot was created.
  created_at DateTime
  
  /// The timestamp when the original post was last modified before this
  /// snapshot.
  updated_at DateTime
  
  /// The reason for creating this snapshot: 'edit', 'report', 'moderation',
  /// 'system', or 'publish'.
  snapshot_reason String
  
  /// The IP address of the user who triggered this snapshot (if applicable).
  ip_address String?
  
  /// The user agent string of the client that triggered this snapshot.
  user_agent String?
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  moderator community_platform_moderator? @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  author community_platform_member @relation(fields: [author_id], references: [id], onDelete: Cascade)
  
  community_platform_comments community_platform_comments[]
  
  @@index([moderator_id])
  
  @@index([community_platform_post_id, created_at], map: "community_platform_post_snapshots_community_platform_p_fff76d8e")
  @@index([author_id, created_at])
  @@index([snapshot_reason])
}

/// Historical snapshot of a comment's state at any point in time. Captures
/// the full data of a comment at the moment of significant change (edit,
/// report, moderation) to preserve audit trail. All fields are denormalized
/// copies of the original comment, ensuring complete historical accuracy,
/// with additional snapshot metadata.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_comment_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The original comment this snapshot is based on. {@link
  /// community_platform_comments.id}.
  community_platform_comment_id String
  
  /// The moderator who triggered this snapshot (if any). {@link
  /// community_platform_moderator.id}.
  moderator_id String?
  
  /// The author of the comment at the time of this snapshot. {@link
  /// community_platform_member.id}.
  author_id String
  
  /// The text content of the comment at the time of this snapshot.
  content String
  
  /// The vote score of the comment at the time of this snapshot.
  vote_count Int
  
  /// The nesting depth of this comment at the time of this snapshot.
  depth_level Int
  
  /// The moderation status of the comment at the time of this snapshot.
  status String
  
  /// The timestamp when this snapshot was created.
  created_at DateTime
  
  /// The timestamp when the original comment was last modified before this
  /// snapshot.
  updated_at DateTime
  
  /// The reason for creating this snapshot: 'edit', 'report', 'moderation',
  /// 'system', or 'publish'.
  snapshot_reason String
  
  /// The IP address of the user who triggered this snapshot (if applicable).
  ip_address String?
  
  /// The user agent string of the client that triggered this snapshot.
  user_agent String?
  
  //----
  // RELATIONS
  //----
  comment community_platform_comments @relation(fields: [community_platform_comment_id], references: [id], onDelete: Cascade)
  moderator community_platform_moderator? @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  author community_platform_member @relation(fields: [author_id], references: [id], onDelete: Cascade)
  
  @@index([moderator_id])
  
  @@index([community_platform_comment_id, created_at], map: "community_platform_comment_snapshots_community_platfor_a4c0672a")
  @@index([author_id, created_at])
  @@index([snapshot_reason])
}

/// Primary entity representing user-submitted reports on content. Tracks the
/// lifecycle of content moderation requests with anonymized reporter
/// identity and status tracking. Reports are linked to either a post or
/// comment through foreign keys. This table serves as the central hub for
/// the moderation workflow, connecting reporters with content and subsequent
/// actions. It is referenced by the subsidiary tables
/// community_platform_report_actions and community_platform_report_comments.
/// This is a primary stance table because users directly create reports,
/// they have independent statuses (pending, dismissed, removed), and the
/// system must provide reporting, filtering, and resolution workflows for
/// these reports across the entire platform.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_reports {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The post or comment being reported. Used to identify the target of the
  /// report. {@link community_platform_posts.id} or {@link
  /// community_platform_comments.id}
  reported_content_id String?
  
  /// The specific comment being reported, if the report targets a comment
  /// rather than a post. Used when report targets a comment. {@link
  /// community_platform_comments.id}
  reported_comment_id String?
  
  /// The user who submitted this report. The reporter's identity is anonymized
  /// from the content author but stored for audit. {@link
  /// community_platform_member.id}
  reporter_id String
  
  /// Discriminator indicating whether the report targets a 'post' or
  /// 'comment'. Required to disambiguate the foreign key relationship. Values:
  /// 'post', 'comment'.
  target_type String
  
  /// Current status of the report. Values: 'pending', 'dismissed', 'removed',
  /// 'escalated'. This field controls moderation workflow progression.
  status String
  
  /// The category of reason selected by the reporter. Values: 'spam',
  /// 'harassment', 'inappropriate', 'other'. This provides initial
  /// categorization for moderator triage.
  report_reason String
  
  /// Optional additional context provided by the reporter about why they are
  /// reporting the content. Limited to 500 characters.
  report_notes String?
  
  /// Timestamp when the report was initially submitted by the user. Used for
  /// audit trail and prioritization.
  created_at DateTime
  
  /// Timestamp of the last status update to this report. Used for tracking
  /// resolution time and Moderation workflow progression.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  reportedContent community_platform_posts? @relation(fields: [reported_content_id], references: [id], onDelete: Cascade)
  reportedComment community_platform_comments? @relation(fields: [reported_comment_id], references: [id], onDelete: Cascade)
  reporter community_platform_member @relation(fields: [reporter_id], references: [id], onDelete: Cascade)
  targetType community_platform_report_categories @relation(fields: [target_type], references: [id], onDelete: Cascade)
  
  community_platform_report_actions community_platform_report_actions[]
  community_platform_report_comments community_platform_report_comments[]
  community_platform_audit_logs community_platform_audit_logs[]
  community_platform_notifications community_platform_notifications[]
  
  @@index([status])
  @@index([reported_content_id])
  @@index([reported_comment_id])
  @@index([reporter_id])
  @@index([created_at])
  @@index([target_type])
}

/// A specialized log table that records every vote change event for audit
/// and debugging purposes. This complements the primary vote tables by
/// capturing full history including retractions and flips.
///
/// @namespace Content
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_vote_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// The user who performed the voting action. {@link
  /// community_platform_user_profiles.id}.
  community_platform_user_id String
  
  /// The post affected by the vote action. {@link
  /// community_platform_posts.id}. Nullable if action was on a comment.
  community_platform_post_id String?
  
  /// The comment affected by the vote action. {@link
  /// community_platform_comments.id}. Nullable if action was on a post.
  community_platform_comment_id String?
  
  /// Discriminator indicating whether the vote action targets a 'post' or
  /// 'comment'. Required to disambiguate the foreign key relationship. Values:
  /// 'post', 'comment'.
  target_type String
  
  /// Type of vote action: 'upvote', 'downvote', 'flip_to_upvote',
  /// 'flip_to_downvote', 'retract'.
  action String
  
  /// The previous vote type before the action (if applicable). 'upvote',
  /// 'downvote', or null for first vote.
  prev_vote_type String?
  
  /// The resulting vote type after the action: 'upvote' or 'downvote'.
  new_vote_type String
  
  /// Timestamp when the logging event occurred.
  logged_at DateTime
  
  /// IP address of the client that performed the action (for abuse detection).
  ip_address String?
  
  /// User agent string of the client device.
  user_agent String?
  
  /// JSON string containing additional context about the event, e.g.,
  /// in-browser timing, fencing meta, etc.
  meta_data String?
  
  //----
  // RELATIONS
  //----
  user community_platform_user_profiles @relation(fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  post community_platform_posts? @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  comment community_platform_comments? @relation(fields: [community_platform_comment_id], references: [id], onDelete: Cascade)
  targetType community_platform_report_categories @relation(fields: [target_type], references: [id], onDelete: Cascade)
  
  @@index([community_platform_user_id, logged_at], map: "community_platform_vote_logs_community_platform_user_i_6d01ae9b")
  @@index([community_platform_post_id, logged_at], map: "community_platform_vote_logs_community_platform_post_i_c9b4a457")
  @@index([community_platform_comment_id, logged_at], map: "community_platform_vote_logs_community_platform_commen_f95ec189")
  @@index([action, logged_at])
  @@index([ip_address, logged_at])
  @@index([logged_at])
  @@index([target_type])
}