import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberPostsPostIdComments } from "../../../../../providers/postCommunityPlatformMemberPostsPostIdComments";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberPostsPostIdCommentsCommentId } from "../../../../../providers/putCommunityPlatformMemberPostsPostIdCommentsCommentId";
import { deleteCommunityPlatformMemberPostsPostIdCommentsCommentId } from "../../../../../providers/deleteCommunityPlatformMemberPostsPostIdCommentsCommentId";

import { ICommunityPlatformComment } from "../../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/member/posts/:postId/comments")
export class CommunityplatformMemberPostsCommentsController {
  /**
   * Create a new comment on a specific post.
   *
   * This operation allows an authenticated member to create a new comment in
   * response to a specific post within the communityPlatform system. Comments
   * are associated with both the target post and the authenticated user who
   * created them. The system implements strict content validation, restricting
   * comment text to a maximum of 2,000 characters as defined in the Prisma
   * schema's community_platform_comments table.
   *
   * Security is enforced through the member authentication mechanism; only
   * authenticated users can create comments. The operation automatically
   * assigns the current user's ID as the comment's author_id and derives the
   * community from the target post. The comment's depth_level is calculated
   * based on whether the comment is a direct reply to the post (depth_level =
   *
   * 1. Or a reply to another comment (depth_level = parent.depth_level + 1), with
   *    a hard limit of 8 levels defined in the
   *    community_platform_platform_settings.max_comment_depth configuration.
   *
   * The moderation status of the new comment is determined by the target
   * community's comment_review_mode setting. If the community requires
   * moderation, the comment is created with status 'unreviewed' and becomes
   * visible only after a moderator approves it. If no review is required, the
   * comment is immediately published with status 'published'. This ensures both
   * efficient user experience and robust content moderation controls.
   *
   * The system records this action in the community_platform_audit_logs table
   * with the actor_user_id set to the authenticated member and the
   * target_post_id referencing the associated post, providing a full audit
   * trail for platform governance.
   *
   * @param connection
   * @param postId Unique identifier of the target post to which the comment is
   *   being added. This must correspond to an existing post in the
   *   community_platform_posts table.
   * @param body The content of the new comment to be created, limited to 2,000
   *   characters as defined in the Prisma schema. This is the text body of the
   *   comment with no HTML or markdown formatting permitted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await postCommunityPlatformMemberPostsPostIdComments({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing comment.
   *
   * This operation allows an authenticated member to modify an existing comment
   * they previously created on a specific post. The update is strictly governed
   * by the edit window defined in the
   * community_platform_platform_settings.comment_edit_window_minutes field,
   * which is set to 10 minutes. This constraint ensures content stability while
   * allowing for minor corrections immediately after posting.
   *
   * The operation verifies that the authenticated user is the original author
   * of the comment by comparing the user_id in the authentication token with
   * the author_id in the target comment record from the
   * community_platform_comments table. If the user is not the author, the
   * operation fails with an access denial. If the comment was created more than
   * 10 minutes ago, the operation fails with an 'EDIT_WINDOW_EXPIRED' error
   * code as defined in the business rules.
   *
   * When a successful update occurs, the system first creates a snapshot of the
   * original comment state in the community_platform_comment_snapshots table,
   * capturing the comment's content, depth_level, vote_count, and status at the
   * moment before modification. This ensures complete auditability for
   * moderation and compliance purposes. The system then updates the original
   * comment record with the new content and sets the updated_at timestamp to
   * the current system time.
   *
   * The operation does not permit changing the parent_post_id or any other
   * relationship fields, maintaining data integrity. The comment's moderation
   * status (published/unreviewed/removed) also remains unchanged during an
   * edit, preserving the community's moderation decisions. All edit operations
   * are logged in the community_platform_audit_logs table with the
   * actor_user_id set to the authenticated member and the target_comment_id
   * pointing to the edited comment.
   *
   * @param connection
   * @param postId Unique identifier of the target post containing the comment
   *   to be updated. This must correspond to an existing post in the
   *   community_platform_posts table.
   * @param commentId Unique identifier of the target comment to be updated.
   *   This must correspond to an existing comment in the
   *   community_platform_comments table that is associated with the specified
   *   post.
   * @param body The updated content of the comment, limited to 2,000 characters
   *   as defined in the Prisma schema. This replaces the existing comment
   *   content. Must contain only plain text with no HTML or markdown
   *   formatting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IUpdate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await putCommunityPlatformMemberPostsPostIdCommentsCommentId({
        member,
        postId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific comment and its nested replies.
   *
   * This operation permanently removes a specified comment from the system,
   * along with all of its nested replies. Unlike systems with soft deletion
   * capabilities, the communityPlatform schema lacks a deleted_at column and
   * implements only hard deletion. This means the comment is permanently
   * removed from the database with no possibility of recovery, and all
   * associated votes, audit logs, and notification records are also purged.
   *
   * Security considerations require that only the original author of the
   * comment or a system administrator may initiate this deletion. The system
   * implements a check to ensure the authenticated user matches the comment's
   * author_id field. If the user is not the author and is not an administrator,
   * the operation will fail with a permission denied error regardless of
   * authentication status.
   *
   * This operation affects the comment_count field of the parent post
   * (community_platform_posts), which will be decremented by 1. The karma score
   * for the comment's author will be recalculated to remove any upvotes or
   * downvotes received on this comment. Additionally, any references to this
   * comment in the community_platform_notification_queue will be removed and
   * the associated notification will be marked as deleted.
   *
   * This operation must not trigger a moderation action or report update, as
   * deletion is not considered a moderation action but a user-initiated
   * removal. The deletion is instantaneous and does not require review. This
   * behavior aligns with the business requirements specified in section 8.8 of
   * the functional requirements document, which states that users may delete
   * their own comments at any time.
   *
   * Related API operations that might be used together include retrieving the
   * comment details before deletion (GET /posts/{postId}/comments/{commentId})
   * to confirm content, and retrieving the parent post to verify context before
   * deletion.
   *
   * @param connection
   * @param postId Unique identifier of the post containing the comment.
   * @param commentId Unique identifier of the comment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberPostsPostIdCommentsCommentId({
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
