import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postCommunityPlatformMemberCommunities } from "../../../../providers/postCommunityPlatformMemberCommunities";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/member/communities")
export class CommunityplatformMemberCommunitiesController {
  /**
   * Create a new community on the platform. When a member submits a new
   * community name, the system validates that the name is unique and adheres to
   * the following rules: Community names must be between 3 and 50 characters
   * long, contain only alphanumeric characters and hyphens, and must not start
   * or end with a hyphen. The system also checks that the name is not a
   * reserved keyword (e.g., "admin", "moderator"). If validation passes, the
   * system creates a new community record in the community_platform_communities
   * table with is_public set to true, nsfw set to false, and default values for
   * moderation settings (post_review_mode and comment_review_mode). The system
   * automatically assigns the authenticated user as the primary moderator by
   * creating a record in the community_platform_moderator table linking the
   * member to the new community. A corresponding
   * community_platform_community_settings record is created with default
   * formatting options and a timestamp for creation. The community is
   * immediately activated in the platform and appears in public listings.
   * Security considerations include ensuring only authenticated members can
   * create communities and preventing role escalation through community
   * creation. Related API operations include GET /communities to list public
   * communities and PUT /communities/{communityId} to update community settings
   * after creation.
   *
   * @param connection
   * @param body Request body containing the details for creating a new
   *   community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.ICreate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await postCommunityPlatformMemberCommunities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
