import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteCommunityPlatformAdminCommunitiesCommunityId } from "../../../../providers/deleteCommunityPlatformAdminCommunitiesCommunityId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/communityPlatform/admin/communities/:communityId")
export class CommunityplatformAdminCommunitiesController {
  /**
   * Permanently delete a community by its unique identifier.
   *
   * This operation permanently deletes a community from the platform. The
   * community is removed from the system entirely, including all associated
   * posts, comments, subscriptions, settings, and audit records.
   *
   * This is a hard delete operation that cannot be undone, as there is no
   * soft_delete_column defined in the community_platform_communities schema.
   * The deletion affects the entire community hierarchy: all
   * community_platform_posts records with the matching
   * community_platform_community_id are deleted, all
   * community_platform_subscriptions linking users to this community are
   * removed, all community_platform_community_settings for this community are
   * removed, and all community_platform_audit_logs related to this community
   * are preserved for audit purposes but the community itself is removed.
   *
   * Security considerations require that only users with admin privileges can
   * execute this operation, as deleting a community is a high-impact
   * administrative action. The caller must have admin role, and this operation
   * will be enforced through the authorizationRoles field. The operation
   * returns a 204 status code on success with no content response body.
   *
   * Business logic: This operation must trigger cascading deletion of all
   * children records in the database relationships, which is handled at the
   * database level with ON DELETE CASCADE constraints on the related tables.
   * This prevents orphaned records across the system.
   *
   * Related operations: This should only be called after confirming with the
   * community moderators and when no further relevance exists for the topic. It
   * should not be used for suspending communities; for suspension, use the
   * community status update to inactive instead.
   *
   * @param connection
   * @param communityId The UUID identifier of the community to be permanently
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminCommunitiesCommunityId({
        admin,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
