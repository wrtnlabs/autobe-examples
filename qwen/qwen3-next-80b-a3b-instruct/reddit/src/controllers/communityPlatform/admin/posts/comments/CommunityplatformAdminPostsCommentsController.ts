import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteCommunityPlatformAdminPostsPostIdCommentsCommentId } from "../../../../../providers/deleteCommunityPlatformAdminPostsPostIdCommentsCommentId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

@Controller("/communityPlatform/admin/posts/:postId/comments/:commentId")
export class CommunityplatformAdminPostsCommentsController {
  /**
   * Permanently delete a specific comment and its nested replies.
   *
   * This operation permanently removes a specified comment from the system,
   * along with all of its nested replies. Unlike systems with soft deletion
   * capabilities, the communityPlatform schema lacks a deleted_at column and
   * implements only hard deletion. This means the comment is permanently
   * removed from the database with no possibility of recovery, and all
   * associated votes, audit logs, and notification records are also purged.
   *
   * Security considerations require that only the original author of the
   * comment or a system administrator may initiate this deletion. The system
   * implements a check to ensure the authenticated user matches the comment's
   * author_id field. If the user is not the author and is not an administrator,
   * the operation will fail with a permission denied error regardless of
   * authentication status.
   *
   * This operation affects the comment_count field of the parent post
   * (community_platform_posts), which will be decremented by 1. The karma score
   * for the comment's author will be recalculated to remove any upvotes or
   * downvotes received on this comment. Additionally, any references to this
   * comment in the community_platform_notification_queue will be removed and
   * the associated notification will be marked as deleted.
   *
   * This operation must not trigger a moderation action or report update, as
   * deletion is not considered a moderation action but a user-initiated
   * removal. The deletion is instantaneous and does not require review. This
   * behavior aligns with the business requirements specified in section 8.8 of
   * the functional requirements document, which states that users may delete
   * their own comments at any time.
   *
   * Related API operations that might be used together include retrieving the
   * comment details before deletion (GET /posts/{postId}/comments/{commentId})
   * to confirm content, and retrieving the parent post to verify context before
   * deletion.
   *
   * @param connection
   * @param postId Unique identifier of the post containing the comment.
   * @param commentId Unique identifier of the comment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminPostsPostIdCommentsCommentId({
        admin,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
