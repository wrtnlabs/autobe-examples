import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformModeratorReportsReportId } from "../../../../providers/getCommunityPlatformModeratorReportsReportId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchCommunityPlatformModeratorReports } from "../../../../providers/patchCommunityPlatformModeratorReports";

import { ICommunityPlatformReport } from "../../../../api/structures/ICommunityPlatformReport";
import { IPageICommunityPlatformReport } from "../../../../api/structures/IPageICommunityPlatformReport";

@Controller("/communityPlatform/moderator/reports")
export class CommunityplatformModeratorReportsController {
  /**
   * Retrieve a specific content report by ID.
   *
   * This operation fetches detailed information about a specific content report
   * identified by its unique reportId. The response includes the report's
   * status (pending, dismissed, removed, escalated), the reason category
   * selected by the reporter, optional additional context provided by the
   * reporter, and timestamps for when the report was created and last updated.
   *
   * For security and privacy compliance, the reporter's identity is anonymized
   * from the content author and appears only as a user ID in the response, not
   * as a username or email. This protects reporters from potential retaliation
   * while still allowing administrators to audit report origins.
   *
   * A successful response returns the complete report record as defined in the
   * Prisma schema's community_platform_reports table. This includes the
   * reported content ID (post or comment), the reporter ID, the report reason
   * (mapped to the community_platform_report_categories table), and the current
   * status.
   *
   * This operation requires authentication as a member, moderator, or admin.
   * Regular members can view reports they themselves submitted, while
   * moderators and admins can view any report on their assigned communities or
   * the platform respectively.
   *
   * @param connection
   * @param reportId The unique identifier of the report to retrieve. Must be a
   *   valid UUID conforming to RFC 4122.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformReport> {
    try {
      return await getCommunityPlatformModeratorReportsReportId({
        moderator,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and filter content reports with advanced criteria.
   *
   * This operation provides a comprehensive search interface across all
   * reported content on the platform. Unlike a simple GET, it accepts a complex
   * request body containing search filters, pagination parameters, and sorting
   * options to efficiently query reports without overloading the API.
   *
   * The request body allows filtering by reporter user ID, target type ('post'
   * or 'comment'), status ('pending', 'dismissed', 'removed', 'escalated'),
   * report reason (mapped to community_platform_report_categories), and date
   * ranges for created_at/updated_at. Sorting can be performed by creation
   * date, update date, popularity of the target post, or number of moderator
   * actions taken.
   *
   * Pagination is handled with a limit and offset system, with a default limit
   * of 25 reports per page and a maximum limit of 100. Results are sorted by
   * creation date (newest first) by default but can be reordered based on other
   * criteria specified in the request.
   *
   * The response returns a paginated list of reports with only the essential
   * data: report ID, target type, target ID, reporter ID, status, report
   * reason, creation timestamp, and update timestamp. This minimizes response
   * size. For full detail, clients should use the GET /reports/{reportId}
   * endpoint with individual report IDs.
   *
   * Access to this endpoint is restricted to moderators and administrators.
   * Regular members cannot perform cross-report searches for privacy and
   * security reasons, though they can only view reports they themselves
   * submitted via the /reports/{reportId} endpoint.
   *
   * @param connection
   * @param body Search filter criteria, pagination parameters, and sorting
   *   options for querying reports.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformReport.IRequest,
  ): Promise<IPageICommunityPlatformReport> {
    try {
      return await patchCommunityPlatformModeratorReports({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
