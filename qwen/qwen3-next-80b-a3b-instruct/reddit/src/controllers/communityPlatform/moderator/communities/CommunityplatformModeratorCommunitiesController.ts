import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformModeratorCommunitiesCommunityId } from "../../../../providers/putCommunityPlatformModeratorCommunitiesCommunityId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { ICommunityPlatformCommunitySettings } from "../../../../api/structures/ICommunityPlatformCommunitySettings";

@Controller("/communityPlatform/moderator/communities/:communityId")
export class CommunityplatformModeratorCommunitiesController {
  /**
   * Update a community's settings.
   *
   * Update the configuration settings for an existing community. This operation
   * allows a community moderator or platform administrator to modify the
   * community's display title, description, banner and icon URLs, rules, and
   * moderation preferences. The operation requires the authenticated user to
   * have moderator privileges for this specific community, enforced through the
   * community_platform_moderator table. The system validates that the request
   * comes from a valid moderator or admin and that the community exists and has
   * not been deleted. The operation updates the
   * community_platform_community_settings record linked to the community
   * through community_platform_community_id, adjusting fields such as title,
   * banner_url, icon_url, rules, moderator_invite_only, and allow_self_post. It
   * also updates the updated_at timestamp. The base community infrastructure
   * (name, created_at) remains immutable. Security considerations include
   * ensuring only authorized moderators can change settings and preventing
   * unauthorized access through the community view. Related API operations
   * include GET /communities/{communityId} to retrieve the current settings and
   * POST /communities to create a new community.
   *
   * @param connection
   * @param communityId The unique identifier of the community to update.
   * @param body Request body containing the updated settings for the community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunitySettings.IUpdate,
  ): Promise<ICommunityPlatformCommunitySettings> {
    try {
      return await putCommunityPlatformModeratorCommunitiesCommunityId({
        moderator,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
