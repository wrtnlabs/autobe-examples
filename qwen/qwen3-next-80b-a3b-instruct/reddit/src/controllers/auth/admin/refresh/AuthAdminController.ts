import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminRefresh } from "../../../../providers/postAuthAdminRefresh";

import { ICommunityPlatformAdmin } from "../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/auth/admin/refresh")
export class AuthAdminController {
  /**
   * Refresh the access token for an admin user's authenticated session.
   *
   * This API operation refreshes the access token for an admin user by
   * validating the stored refresh token. The refresh token must be provided in
   * an HTTP-only, Secure, SameSite=Strict cookie and is validated against the
   * stored refresh_token_hash in the community_platform_user_sessions table.
   * The system verifies that the session is active (is_active = true) and that
   * the session_expiry is in the future (greater than current server time).
   *
   * The refresh token uses the same cryptographic key as the access token to
   * generate and validate the JWT signature. A new, short-lived (15-minute)
   * access token is generated and returned in the Authorization header as a
   * bearer token, while the refresh token remains unchanged. The updated_at
   * timestamp in the community_platform_user_sessions table is updated to
   * reflect the token refresh event, maintaining session continuity without
   * changing the underlying session state.
   *
   * This operation does not reset the session expiry or re-authenticate the
   * user's credentials. It occurs server-side using the stored
   * refresh_token_hash values without requiring user input beyond the existing
   * session cookie. This leverages the existing
   * community_platform_user_sessions schema fields: refresh_token_hash for
   * validation, session_expiry to check validity, is_active to confirm session
   * status, and updated_at to record refresh events.
   *
   * The operation follows the security best practice of token rotation to
   * reduce the risk of compromise. The refresh token remains valid for 7 days
   * from initial login, after which the user must re-authenticate through the
   * login endpoint.
   *
   * @param connection
   * @param body Refresh request with no additional data required (refresh token
   *   is included in HTTP-only cookie).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refresh(
    @TypedBody()
    body: ICommunityPlatformAdmin.IRefresh,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
