import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postAdminMembersMemberIdCommunitiesCommunityIdModerator } from "../../../../../providers/postAdminMembersMemberIdCommunitiesCommunityIdModerator";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { deleteAdminMembersMemberIdCommunitiesCommunityIdModerator } from "../../../../../providers/deleteAdminMembersMemberIdCommunitiesCommunityIdModerator";

import { ICommunityPlatformAdmin } from "../../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/admin/members/:memberId/communities/:communityId/moderator")
export class AdminMembersCommunitiesModeratorController {
  /**
   * Assign moderator role to a member within a specific community.
   *
   * This API operation enables a system administrator to assign moderator
   * privileges to a member within a specific community. The root admin
   * authenticates and calls this endpoint to grant moderation rights to another
   * user. The system validates that the requester has admin privileges via the
   * community_platform_admin table, the target user exists as an active member
   * in the community_platform_member table (deleted_at is null), and the target
   * community exists in the community_platform_communities table and is not
   * suspended.
   *
   * The operation creates a new record in the community_platform_moderator
   * table with the member_id from the target user and the community_id from the
   * target community, setting created_at to the current timestamp. The
   * operation ensures no duplicate moderator assignments exist by validating
   * against the unique constraint [member_id, community_id]. No new tokens are
   * issued as this is a resource modification rather than an authentication
   * operation.
   *
   * For audit purposes, the operation logs the action in the
   * community_platform_audit_logs table with actor_user_id as the admin
   * performing the action, target_user_id as the member being assigned,
   * target_community_id as the community, and action_description set to 'Admin
   * assigned moderator role'. The description references the key
   * community_platform_admin, community_platform_member,
   * community_platform_communities, and community_platform_moderator tables and
   * their fields to ensure compliance with schema constraints.
   *
   * The operation may fail with specific error codes if the requester is
   * unauthorized, user does not exist, community does not exist, or the
   * assignment duplicate. These failure conditions ensure data integrity
   * according to schema constraints.
   *
   * @param connection
   * @param memberId The UUID of the member to be assigned as moderator.
   * @param communityId The UUID of the community for which the member is
   *   assigned as moderator.
   * @param body No additional payload required - moderator assignment is
   *   determined by path parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async assignModerator(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IEmpty,
  ): Promise<ICommunityPlatformAdmin.IModeratorAssignment> {
    try {
      return await postAdminMembersMemberIdCommunitiesCommunityIdModerator({
        admin,
        memberId,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke moderator role from a member within a specific community.
   *
   * This API operation enables a system administrator to remove moderator
   * privileges from a member within a specified community. The admin
   * authenticates with valid credentials and sends a request to delete the
   * relationship between the member and community from the
   * community_platform_moderator table.
   *
   * The system first confirms the requester has admin privileges using the
   * community_platform_admin table. Then it verifies that a moderator record
   * exists in community_platform_moderator for the given member_id and
   * community_id pair. If the record exists, it is deleted. Concurrently, the
   * system logs this change in the community_platform_audit_logs table with
   * actor_user_id as the revoking admin, target_user_id as the removed
   * moderator, target_community_id as the affected community, and
   * action_description set to 'Admin revoked moderator role'.
   *
   * The operation ensures data integrity through schema enforcement, including
   * foreign key constraints from community_platform_moderator to
   * community_platform_member and community_platform_communities. This
   * operation completes successfully only if the target relationship exists; if
   * the moderator record does not exist, the system returns a 404. The request
   * does not affect the target user's basic member status or community
   * subscriptions.
   *
   * The description references community_platform_admin,
   * community_platform_moderator, and community_platform_audit_logs tables to
   * ensure all referenced fields and relationships are properly verified
   * according to the schema.
   *
   * @param connection
   * @param memberId The UUID of the member whose moderator privileges are to be
   *   revoked.
   * @param communityId The UUID of the community from which the member's
   *   moderator privileges are to be revoked.
   * @param body No additional payload required - moderator revocation is
   *   determined by path parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async revokeModerator(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IEmpty,
  ): Promise<ICommunityPlatformAdmin.IModeratorRevocation> {
    try {
      return await deleteAdminMembersMemberIdCommunitiesCommunityIdModerator({
        admin,
        memberId,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
