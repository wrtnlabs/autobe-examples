import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postAdminUsersUserIdUnban } from "../../../../providers/postAdminUsersUserIdUnban";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ICommunityPlatformAdmin } from "../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/admin/users/:userId/unban")
export class AdminUsersUnbanController {
  /**
   * Restore a previously banned user's access to the entire communityPlatform
   * system.
   *
   * This API operation permits a system administrator to unban a previously
   * banned user account. The process begins with authentication validation to
   * confirm the requester has admin privileges in the community_platform_admin
   * table. The target user is identified by member_id, which is checked in the
   * community_platform_member table to verify that the deleted_at field is not
   * null, confirming the user is indeed banned.
   *
   * The system then updates the community_platform_member record by setting the
   * deleted_at field to null. This restores the user's account status, allowing
   * the user to log in again using their existing credentials, and reinstates
   * all previous site access rights including karma scoring and subscription
   * preferences. The system also updates all previously invalidated sessions by
   * setting is_active to true in the community_platform_user_sessions table for
   * the user's previous sessions.
   *
   * This action is logged in the community_platform_audit_logs table with
   * actor_user_id as the unbanning admin, target_user_id as the restored user,
   * and action_description set to 'Admin unbanned user'. The previous
   * moderation actions and content history remain preserved in the database,
   * ensuring full auditability and transparency.
   *
   * The description references the community_platform_member,
   * community_platform_user_sessions, and community_platform_audit_logs schemas
   * to confirm that the operation properly utilizes the deleted_at field for
   * state management and maintains data integrity through foreign key
   * constraints and audit trails.
   *
   * @param connection
   * @param userId The UUID of the user to be unbanned from the entire system.
   * @param body An optional reason for the unban, which will be included in the
   *   audit log and notification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async unbanUser(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IUnbanReason,
  ): Promise<ICommunityPlatformAdmin.IUserUnbanStatus> {
    try {
      return await postAdminUsersUserIdUnban({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
