import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postAdminUsersUserIdEmailVerify } from "../../../../../providers/postAdminUsersUserIdEmailVerify";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { ICommunityPlatformAdmin } from "../../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/admin/users/:userId/email/verify")
export class AdminUsersEmailVerifyController {
  /**
   * Force email verification for any user account to grant posting privileges
   * immediately.
   *
   * This API operation grants a system administrator the ability to forcibly
   * verify any user's email address, overriding the standard email verification
   * workflow. The admin authenticates and submits a request with the target
   * user's member_id from the community_platform_member table.
   *
   * The system validates that the requester has admin privileges in the
   * community_platform_admin table and that the target user exists in
   * community_platform_member. If the user's is_verified field is already true,
   * the operation does nothing and returns a success status. If is_verified is
   * false, the system updates the community_platform_member table by setting
   * is_verified to true and updates the updated_at timestamp to the current
   * time.
   *
   * The system also deletes any unexpired email verification records in the
   * community_platform_email_verifications table associated with this user, as
   * they are no longer needed. The change is logged in
   * community_platform_audit_logs table with actor_user_id as the admin,
   * target_user_id as the user, and action_description set to 'Admin forced
   * email verification for user'.
   *
   * This operation is crucial for administrative management, allowing
   * trust-based access for users who have valid external identity verification,
   * or for resolving technical issues with email delivery. It directly
   * interacts with the community_platform_member.is_verified field and modifies
   * the state according to the business requirement that admin overrides can
   * bypass standard verification.
   *
   * The description references the community_platform_admin,
   * community_platform_member, and community_platform_email_verifications
   * tables to ensure schema compliance and auditable changes.
   *
   * @param connection
   * @param userId The UUID of the user whose email verification should be
   *   forced.
   * @param body An optional note explaining the reason for forcing
   *   verification, included in the audit log.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async forceVerifyEmail(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IForceVerifyNote,
  ): Promise<ICommunityPlatformAdmin.IEmailVerified> {
    try {
      return await postAdminUsersUserIdEmailVerify({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
