import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postAdminUsersUserIdBan } from "../../../../providers/postAdminUsersUserIdBan";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ICommunityPlatformAdmin } from "../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/admin/users/:userId/ban")
export class AdminUsersBanController {
  /**
   * Permanently ban a user from the entire communityPlatform system.
   *
   * This API operation authorizes a system administrator to perform a
   * system-wide ban on any user account. When invoked, the system validates
   * that the requester has admin privileges in the community_platform_admin
   * table. The target user is identified by their member_id, which is verified
   * in the community_platform_member table to ensure existence and confirm the
   * account is active (deleted_at is null).
   *
   * The operation then updates the community_platform_member record for the
   * target user by setting the deleted_at field to the current timestamp,
   * effectively soft-deleting the account. This immediately revokes all
   * permissions, removes access to the platform, and prevents authentication.
   * The system also invalidates all active sessions for this user by setting
   * is_active to false in all entries in the community_platform_user_sessions
   * table.
   *
   * The operation logs this action in the community_platform_audit_logs table
   * with actor_user_id as the banning admin, target_user_id as the banned user,
   * and action_description set to 'Admin banned user'. Simultaneously, a
   * notification is sent to the banned user via the
   * community_platform_notifications table if email notification is enabled.
   *
   * The description references key schema fields: deleted_at for account
   * deactivation, user_sessions for session invalidation, and audit_logs for
   * compliance tracking. The ban is irreversible without database intervention,
   * ensuring disciplinary actions are permanent. User data is preserved in the
   * system for compliance purposes, but becomes inaccessible to the user.
   *
   * @param connection
   * @param userId The UUID of the user to be banned from the entire system.
   * @param body An optional reason for the ban, which will be included in the
   *   audit log and notification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async banUser(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IBanReason,
  ): Promise<ICommunityPlatformAdmin.IUserBanStatus> {
    try {
      return await postAdminUsersUserIdBan({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
