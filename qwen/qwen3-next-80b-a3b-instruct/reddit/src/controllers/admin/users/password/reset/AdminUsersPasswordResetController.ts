import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postAdminUsersUserIdPasswordReset } from "../../../../../providers/postAdminUsersUserIdPasswordReset";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { ICommunityPlatformAdmin } from "../../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/admin/users/:userId/password/reset")
export class AdminUsersPasswordResetController {
  /**
   * Trigger a password reset for any user account via admin-initiated request.
   *
   * This API operation provides authorized system administrators with the
   * capability to force a password reset for any user account on the
   * communityPlatform system. The admin authenticates and submits a request
   * with the target user's member_id from the community_platform_member table.
   *
   * The system generates a cryptographically secure, time-limited (15-minute)
   * reset token, which is stored in the community_platform_password_resets
   * table with the token_hash, expires_at, requested_at timestamps, and
   * associated with the target member_id. The plain token is sent to the user's
   * registered email via the SendGrid integration.
   *
   * The operation logs the action immediately in the
   * community_platform_audit_logs table with actor_user_id as the admin
   * initiator, target_user_id as the user whose password is being reset, and
   * action_description set to 'Admin initiated password reset for user'. This
   * ensures full accountability for all password reset requests.
   *
   * The operation differs from standard user-initiated password
   * resynchronization (which requires identity verification) by bypassing all
   * identity verification requirements due to the admin's elevated privileges.
   * The target user is notified via email, but cannot initiate the reset
   * themselves. The actual password is not changed until the user clicks the
   * reset link.
   *
   * All actions reference specific community_platform_member,
   * community_platform_password_resets, and community_platform_audit_logs table
   * fields to ensure strict compliance with the schema and to prevent
   * unauthorized operations.
   *
   * @param connection
   * @param userId The UUID of the user whose password needs to be reset.
   * @param body An optional note explaining the reason for the password reset,
   *   included in the audit log.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resetPassword(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IResetPasswordNote,
  ): Promise<ICommunityPlatformAdmin.IPasswordResetInitiated> {
    try {
      return await postAdminUsersUserIdPasswordReset({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
