import { tags } from "typia";

/**
 * Complete comment entity returned by the system for a single comment detail
 * view.
 *
 * This object represents a single comment as stored in the
 * community_platform_comments table of the Prisma schema. It is used in the GET
 * /communityPlatform/posts/{postId}/comments/{commentId} endpoint to return
 * full comment information.
 *
 * All fields are present and required (except where optional, as noted). This
 * response includes all meta-data required for display including sentiment,
 * hierarchy, and moderation status.
 *
 * This entity directly maps to the Prisma schema definition and does not
 * include any inferred or additional properties.
 *
 * The comment's relationship to its parent post is established via
 * community_platform_post_id, and its nesting level is established via
 * depth_level and parent_comment_id. The content field is the only
 * user-modifiable field after creation, subject to a 10-minute update window.
 *
 * No fields that do not exist in the Prisma schema are included.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformComment = {
  /**
   * Primary Key.
   *
   * The unique identifier for the comment, generated by the system upon
   * creation. This UUID is used to reference the comment in URLs and API
   * operations.
   *
   * This field is auto-generated when the comment is created and cannot be
   * modified by users. It is used in all operations that target a specific
   * comment (GET, PUT, DELETE).
   *
   * This property directly maps to the 'id' column in the
   * community_platform_comments table in the Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The post this comment belongs to. {@link community_platform_posts.id}.
   *
   * This foreign key links the comment to its parent post. It must reference
   * an existing, valid post ID in the community_platform_posts table.
   *
   * This field is required and auto-populated during comment creation based
   * on the target post in the API request. It cannot be changed after
   * creation.
   *
   * This property directly maps to the 'community_platform_post_id' column in
   * the community_platform_comments table in the Prisma schema.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * The user who created this comment. {@link community_platform_member.id}.
   *
   * This foreign key links the comment to its author. It must reference an
   * existing, valid member ID in the community_platform_member table.
   *
   * This field is required and auto-populated during comment creation based
   * on the authenticated user's session. It cannot be changed after
   * creation.
   *
   * This property directly maps to the 'author_id' column in the
   * community_platform_comments table in the Prisma schema.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * The parent comment this is a reply to.
   * {@link community_platform_comments.id}. Null for top-level comments.
   *
   * This field indicates whether this comment is a reply to another comment,
   * enabling nested comment threads. When null, this comment is a top-level
   * response to the post. When set, this comment is a reply to another
   * comment, visible in comment threading.
   *
   * This field enforces the 8-level maximum depth limit as defined in the
   * community_platform_platform_settings, with each reply incrementing
   * depth_level by 1.
   *
   * This property directly maps to the 'parent_comment_id' column in the
   * community_platform_comments table in the Prisma schema.
   */
  parent_comment_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Reference to the post's snapshot at time of comment.
   * {@link community_platform_post_snapshots.id}.
   *
   * This optional field stores a reference to the state of the post at the
   * moment the comment was created, capturing the title, content, and status
   * of the post at creation time for audit purposes.
   *
   * This field ensures that even if the post is later edited or deleted, the
   * context of the comment remains consistent.
   *
   * This property directly maps to the 'parent_post_snapshot_id' column in
   * the community_platform_comments table in the Prisma schema.
   */
  parent_post_snapshot_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The text content of the comment, limited to 2,000 characters.
   *
   * This field contains the actual text of the comment. It must be between 1
   * and 2,000 characters and cannot be empty or contain only whitespace.
   *
   * The system validates this field on submission and truncates it if it
   * exceeds 2,000 characters. This field is indexed for full-text search.
   *
   * This property directly maps to the 'content' column in the
   * community_platform_comments table in the Prisma schema.
   */
  content: string & tags.MinLength<1> & tags.MaxLength<2000>;

  /**
   * The total vote score calculated as upvotes minus downvotes for ranking
   * purposes.
   *
   * This field represents the net score of the comment based on all upvotes
   * and downvotes received. It is automatically calculated and updated by the
   * system every time a user votes.
   *
   * This field must be kept in sync with community_platform_comment_votes
   * records. It can never be updated directly by users - only by the system's
   * vote management logic.
   *
   * This property directly maps to the 'vote_count' column in the
   * community_platform_comments table in the Prisma schema.
   */
  vote_count: number & tags.Type<"int32">;

  /**
   * The nesting depth of this comment, with 1 being top-level and 8 being
   * maximum allowed.
   *
   * This field indicates how deeply nested the comment is in the reply
   * thread. Top-level comments have depth_level = 1, replies to top-level
   * comments have depth_level = 2, and so on.
   *
   * This field is auto-calculated by the system based on the
   * parent_comment_id value (depth_level = parent.depth_level + 1). The
   * maximum depth is 8 as defined in
   * community_platform_platform_settings.max_comment_depth.
   *
   * This property directly maps to the 'depth_level' column in the
   * community_platform_comments table in the Prisma schema.
   */
  depth_level: number & tags.Type<"int32">;

  /**
   * The moderation status: 'published', 'unreviewed', 'removed', or
   * 'archived'. Determines visibility.
   *
   * This field controls whether the comment is visible to users. Comments
   * with status 'published' are visible to everyone. 'unreviewed' comments
   * are visible only to moderators and the author until approved. 'removed'
   * comments are hidden from all users except moderators. 'archived' comments
   * are hidden from public view but preserved for audit.
   *
   * Status transitions follow strict rules: only moderators or admins can
   * change status from 'unreviewed' to 'published' or 'removed'. Authors can
   * only delete comments (which sets status to 'removed').
   *
   * This property directly maps to the 'status' column in the
   * community_platform_comments table in the Prisma schema.
   */
  status: "published" | "unreviewed" | "removed" | "archived";

  /**
   * The timestamp when the comment was submitted.
   *
   * This field records the exact datetime when the comment was first created
   * in the system. It is set by the server and cannot be modified by users or
   * APIs.
   *
   * This timestamp is used for sorting comments in chronological order and
   * calculating time-based metrics like comment age.
   *
   * This property directly maps to the 'created_at' column in the
   * community_platform_comments table in the Prisma schema.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp when the comment was last modified (e.g., edit).
   *
   * This field records the last time the comment was edited by its author. It
   * is updated only when the content is modified within the 10-minute edit
   * window.
   *
   * After the edit window expires, this field is no longer updated even if
   * the comment is deleted or has its status changed by a moderator. This
   * ensures that edits are separately tracked from moderation actions.
   *
   * This property directly maps to the 'updated_at' column in the
   * community_platform_comments table in the Prisma schema.
   */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * The timestamp when the comment was soft-deleted. Null if still active.
   *
   * This field is used only in systems with soft deletion. However, in
   * communityPlatform, comments are subject to hard deletion as there is no
   * soft delete requirement in the schema.
   *
   * Therefore, this field is present in the schema purely for potential
   * future use or database consistency, but is always null in practice.
   * Deletion of comments is implemented as hard deletion.
   *
   * This property directly maps to the 'deleted_at' column in the
   * community_platform_comments table in the Prisma schema.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ICommunityPlatformComment {
  /**
   * Request parameters for searching and filtering comments.
   *
   * This object defines the criteria for retrieving a paginated, filtered
   * list of comments.
   *
   * The parameters allow for comprehensive querying based on pagination
   * limits, sorting preferences, and status filters to support the comment
   * thread loading experience.
   *
   * For advanced use cases, depth-level filtering enables users to control
   * the complexity of nested comment threads they wish to view, aligning with
   * platform constraints on maximum nesting depth.
   *
   * The properties map directly to database fields in the
   * community_platform_comments table, ensuring strict schema compliance with
   * the Prisma model.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Must be a positive integer starting from
     * 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of comments to return per page. Must be between 1 and 50.
     * Defaults to 20.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<50>)
      | undefined;

    /**
     * Sorting criteria for the comments. Must be either 'created_at' for
     * newest first or 'vote_count' for most popular first. Defaults to
     * 'created_at'.
     */
    sort?: "created_at" | "vote_count" | undefined;

    /**
     * Sorting order. Must be 'asc' for ascending or 'desc' for descending.
     * Defaults to 'desc'.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Filter comments by their moderation status. Options are 'published',
     * 'unreviewed', 'removed', or 'archived'. If omitted, only 'published'
     * comments are returned.
     */
    status?: "published" | "unreviewed" | "removed" | "archived" | undefined;

    /**
     * Minimum depth level for comments. Filters to show only comments at
     * this depth or deeper. Range is 1 to 8, as defined by platform
     * settings.
     */
    minDepth?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<8>)
      | undefined;

    /**
     * Maximum depth level for comments. Filters to show only comments at
     * this depth or shallower. Range is 1 to 8, as defined by platform
     * settings.
     */
    maxDepth?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<8>)
      | undefined;
  };

  /**
   * Request payload for creating a new comment.
   *
   * This schema represents the input data required to create a new comment on
   * a post.
   *
   * The only necessary property is 'content', which must contain the text of
   * the comment following the business rule of being between 1 and 2,000
   * characters.
   *
   * This design follows the Prisma schema definition of the
   * community_platform_comments table, which only requires the content field
   * as mandatory input for comment creation.
   *
   * No other fields are accepted in this request because:
   *
   * - Author_id is automatically inferred from the authenticated user
   * - Created_at and updated_at are system-generated timestamps
   * - Parent_comment_id and parent_post_snapshot_id are populated based on
   *   context within the API service
   * - Depth_level is calculated automatically based on the reply hierarchy
   * - Status is determined by the community's comment_review_mode setting
   * - Vote_count is initialized to zero
   *
   * The schema enforces the business requirement that comment content must be
   * non-empty and have a maximum length of 2,000 characters.
   *
   * All other properties are handled server-side based on validated context
   * and constraints from the database schema, ensuring complete alignment
   * with the Prisma model definition.
   */
  export type ICreate = {
    /**
     * The text content of the comment, limited to 2,000 characters.
     *
     * This field contains the user's message that will be posted as a
     * comment on a post.
     *
     * The content must be non-empty (at least 1 character) and must not
     * exceed 2,000 characters to ensure performance and readability.
     *
     * Text formatting is restricted to plain text with no HTML or markdown
     * to maintain consistency and security.
     *
     * This field corresponds directly to the 'content' column in the
     * community_platform_comments database table.
     *
     * Validation rules from the business requirements mandate this
     * character limit to prevent excessive resource usage and ensure
     * predictable rendering in comment threads.
     */
    content: string & tags.MinLength<1> & tags.MaxLength<2000>;
  };

  /**
   * Request payload for updating an existing comment.
   *
   * This schema defines the structure of the request body for updating a
   * comment in the communityPlatform system. It includes the updated content
   * field that replaces the existing comment content.
   *
   * According to the business rules and Prisma schema, this update operation
   * is subject to strict constraints: the comment content must be limited to
   * 2,000 characters, and the update can only occur within a 10-minute edit
   * window after the comment's creation. The operation requires
   * authentication to verify the user is the original author of the comment.
   *
   * The platform implements a hard update - the original comment is replaced
   * entirely, and the previous version is preserved in an audit trail via the
   * community_platform_comment_snapshots table. The status and moderation
   * state of the comment remain unchanged during an edit operation.
   *
   * This update payload is used exclusively with the PUT
   * /communityPlatform/member/posts/{postId}/comments/{commentId} endpoint
   * and cannot be used for other operations. The comment's author and post
   * relationships are determined by the path parameters, not by the request
   * payload.
   *
   * This schema must be carefully implemented to comply with the schema
   * constraints of the community_platform_comments table, especially
   * regarding content length limits and timing restrictions.
   */
  export type IUpdate = {
    /**
     * The updated content of the comment, limited to 2,000 characters as
     * defined in the Prisma schema. This replaces the existing comment
     * content. Must contain only plain text with no HTML or markdown
     * formatting.
     *
     * This property corresponds to the content field in the
     * community_platform_comments table in the Prisma schema, which stores
     * the text of a comment.
     *
     * The comment content must be between 1 and 2,000 characters as per the
     * business rules and schema definition. Any content exceeding 2,000
     * characters must be truncated as per the platform's truncation rules.
     *
     * The edit operation is only allowed within a 10-minute window after
     * comment creation, as defined in the
     * community_platform_platform_settings.comment_edit_window_minutes
     * field. This constraint ensures content stability while allowing for
     * minor corrections immediately after posting.
     *
     * The content field must not contain any HTML or markdown formatting,
     * maintaining a plain text format that is consistent with the
     * platform's security and simplicity requirements. This restriction
     * prevents potential XSS attacks and ensures consistent rendering
     * across different clients.
     *
     * The content field is required for update operations - a comment
     * cannot be updated without specifying new content to replace the
     * existing content. The system will validate that the content field is
     * present and meets the character requirements before processing the
     * update.
     *
     * During an edit operation, the system creates a snapshot of the
     * original comment state in the community_platform_comment_snapshots
     * table to preserve audit history. This snapshot captures the comment's
     * content before modification, ensuring complete traceability for
     * moderation and compliance purposes.
     */
    content: string & tags.MaxLength<2000>;
  };

  /**
   * A summarized view of a comment for display in listings and feed views.
   *
   * This type provides a lean, optimized representation of a comment designed
   * for performance in list and stream displays. It omits detailed content,
   * editing history, and personal metadata, while preserving core information
   * for user engagement.
   *
   * The schema includes minimal fields to reduce payload size: a truncated
   * content preview, vote count, author username, and time of creation — each
   * directly mapped from the community_platform_comments table.
   *
   * This type corresponds to a client's requirement to display many comments
   * at once without overloading network resources or frontend rendering
   * engines.
   *
   * Fields like avatar_url, full content, and nested replies are excluded to
   * improve load speed and simplify rendering.
   *
   * Any additional metadata such as link previews, image previews, or karma
   * points are derived from the core replacement fields.
   *
   * The summary does not include moderator notes, deletion status details, or
   * audit information — those are reserved for the detailed comment type.
   *
   * This type serves as the item type in paginated collections via
   * IPageICommunityPlatformComment.ISummary.
   *
   * Behavioral rules:
   *
   * - The content field is truncated to 500 characters for quick scanning
   * - The author_username is shown instead of email for privacy
   * - Only published comments are returned
   * - Every field must have a value, no nulls allowed for required fields
   * - If the comment has been removed, it is excluded entirely
   *
   * Design philosophy: This schema emphasizes speed, clarity, and usability
   * for all device types — mobile, tablet, and desktop.
   */
  export type ISummary = {
    /**
     * Unique identifier of the comment.
     *
     * This UUID serves as the primary key for the comment in the database,
     * ensuring unique identification across the system.
     *
     * The comment ID is exposed in API responses to allow clients to
     * reference specific comments when performing operations like replies,
     * votes, or reports.
     *
     * This field is system-generated upon comment creation and is immutable
     * throughout the comment's lifecycle.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Preview of the comment content, truncated for display in lists.
     *
     * This field contains the first 500 characters of the comment's full
     * content, providing a summary view for comment listings and feeds.
     *
     * The truncation is performed server-side before sending the response
     * to minimize payload size while still conveying the essence of the
     * comment.
     *
     * If the original comment exceeds 500 characters, an ellipsis ("...")
     * is appended to indicate that content has been truncated.
     *
     * This field complements the full-content field in the detailed
     * ICommunityPlatformComment type by providing an optimized view for
     * list rendering and performance.
     *
     * The content is plain text without HTML or markdown since rich
     * formatting is not supported in summaries.
     *
     * This field is directly derived from the content field in the
     * community_platform_comments table.
     */
    content: string & tags.MaxLength<500>;

    /**
     * Total net vote count for the comment, calculated as upvotes minus
     * downvotes.
     *
     * This field represents the weighted satisfaction of the community with
     * the comment, where upvotes contribute +1 and downvotes contribute
     * -1;
     *
     * The calculation is aggregated server-side in real-time to ensure
     * accurate, current values.
     *
     * This field is displayed prominently in comment listings to indicate
     * community feedback.
     *
     * Values are never negative due to the business rule that karma cannot
     * be negative, but this field can show negative values if the comment
     * has more downvotes than upvotes.
     *
     * This field is populated from the vote_count column in the
     * community_platform_comments table.
     */
    vote_count: number & tags.Type<"int32">;

    /**
     * Timestamp indicating when the comment was originally created.
     *
     * This field is automatically set to the current server time
     * (Asia/Seoul timezone) when the comment is first persisted to the
     * database.
     *
     * This timestamp is used for sorting comments by age in chronological
     * order and for calculating comment longevity in ranking algorithms.
     *
     * The field is immutable and does not change even if the comment is
     * edited later.
     *
     * This field corresponds to the created_at column in the
     * community_platform_comments table.
     *
     * The format follows ISO 8601 standard with timezone information to
     * ensure global consistency.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Unique identifier of the user who authored the comment.
     *
     * This field references the community_platform_member table's id field
     * to identify the comment's creator.
     *
     * In summary responses, the author's username is not included for
     * privacy reasons, but this ID is used internally to retrieve
     * additional information if needed.
     *
     * This field acts as a foreign key relationship with the user table and
     * is populated at comment creation.
     *
     * This field is system-generated and cannot be modified after creation.
     *
     * The field is required for every comment in the system regardless of
     * visibility or deletion status.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Display username of the comment's author.
     *
     * This field provides a human-readable identifier for the comment's
     * creator by fetching the display username from the
     * community_platform_member table's username field.
     *
     * The username is displayed in comment listings to denote who made the
     * comment, following a community culture where authorship is
     * recognized.
     *
     * This is not the email address or private identifier but the
     * public-facing username chosen by the member during registration.
     *
     * This field complements author_id by providing a memorable, readable
     * name while preserving privacy of email addresses.
     *
     * The username field is derived from the corresponding
     * community_platform_member record based on the author_id foreign key.
     */
    author_username: string;

    /**
     * Nesting level of the comment in the thread hierarchy.
     *
     * This field indicates the comment's depth within the recursive comment
     * tree, where 1 represents a top-level comment and higher numbers
     * represent replies to replies.
     *
     * The depth is calculated server-side based on the parent_comment_id
     * reference; top-level comments have depth_level = 1;
     *
     * Deeper comments have depth_level = parent.depth_level + 1, up to a
     * maximum of 8 levels defined in
     * community_platform_platform_settings.max_comment_depth.
     *
     * This field is essential for determining visual indentation in the
     * frontend and controlling comment display logic.
     *
     * It allows clients to render comment threads correctly, collapsing or
     * expanding nested reply levels as needed.
     *
     * This field is derived from the depth_level column in the
     * community_platform_comments table.
     */
    depth_level: number & tags.Type<"int32">;

    /**
     * Moderation status of the comment, controlling its visibility and
     * accessibility.
     *
     * Valid values are:
     *
     * - 'published': The comment is visible to all users
     * - 'unreviewed': The comment is awaiting moderator approval
     * - 'removed': The comment has been censored or deleted by a moderator
     * - 'archived': The comment has been retired and is no longer visible or
     *   editable
     *
     * This field directly maps to the status column in the
     * community_platform_comments table.
     *
     * The accessibility of a comment depends on this status and the
     * viewer's permissions.
     *
     * Public users can only see 'published' comments, while moderators may
     * view some 'unreviewed' comments depending on their role.
     *
     * This status field is central to enforcing community guidelines and
     * moderation policies.
     */
    status: "published" | "unreviewed" | "removed" | "archived";

    /**
     * Indicates whether the comment is a reply to another comment (rather
     * than a top-level comment).
     *
     * This field is derived from the parent_comment_id field in the
     * community_platform_comments table: it is true if parent_comment_id is
     * not null, false if it is null.
     *
     * This field helps frontend clients determine whether to display the
     * comment with a reply indentation style and whether to prompt for
     * improved context when replying.
     *
     * It also influences backend query behavior, such as whether to show
     * reply counters or additional iconography.
     *
     * The field is calculated server-side and not stored in the database,
     * but returned as a convenience for frontend rendering.
     *
     * This field is always boolean, with no null values allowed.
     */
    is_reply: boolean;

    /**
     * The unique identifier of the post this comment belongs to.
     *
     * This field references the community_platform_posts table's id field
     * to establish the relationship between comments and their parent
     * posts.
     *
     * The topic_id ensures that comments are correctly associated with
     * their context and allows queries to fetch all comments under a
     * specific post.
     *
     * This field is immutable and established at comment creation time
     * based on the postId provided in the request.
     *
     * The topic_id is required for every comment and is a foreign key
     * constraint in the database schema.
     *
     * While the comment can be viewed independently, its relationship with
     * the post is fundamental to its purpose and display context.
     */
    topic_id: string & tags.Format<"uuid">;

    /**
     * User's karma contribution from this comment, representing the net
     * upvotes minus downvotes received.
     *
     * This field calculates the individual karma impact of this comment on
     * the author's total karma score, based on all votes received.
     *
     * Karma is calculated as Upvotes - Downvotes and is capped at a max of
     * 1,000,000 as per business rules.
     *
     * The value is negative if the comment received more downvotes than
     * upvotes, but the author's total karma is never displayed as
     * negative.
     *
     * This field is derived from the vote_count for this comment and used
     * in analytics and reputation systems.
     *
     * It is not a standalone calculation but a component derived directly
     * from the comment's vote_count in the database.
     */
    karma_point: number & tags.Type<"int32">;

    /**
     * List of URLs discovered in the comment content for rich link preview
     * rendering.
     *
     * This array provides a machine-readable list of web links embedded
     * within the comment's text.
     *
     * Clients may use these URIs to fetch and display website metadata such
     * as titles and images, enhancing the readability of commented links.
     *
     * This feature is optional and does not affect comment visibility or
     * moderation — it is purely an enhancement for user experience on
     * supporting clients.
     *
     * These links are extracted server-side using content analysis and are
     * distinct from the post links field which handles explicit link
     * posts.
     */
    preview_links?: (string & tags.Format<"uri">)[] | undefined;

    /**
     * List of image URLs embedded in the comment text for visual rendering
     * in summaries.
     *
     * This array provides direct URLs to images referenced within the
     * comment, allowing clients to fetch and display visual content without
     * requiring additional API calls.
     *
     * These images are extracted from the comment content using URL
     * detection patterns, with validation of format (JPEG, PNG, WebP,
     * GIF).
     *
     * The resulting preview_images array is used by frontend interfaces to
     * render inline image thumbnails or placeholders without loading the
     * full post data.
     *
     * Only direct image URLs are included — placeholder text, image
     * attachments, or moderated content are not included in this list.
     */
    preview_images?: (string & tags.Format<"uri">)[] | undefined;
  };
}
