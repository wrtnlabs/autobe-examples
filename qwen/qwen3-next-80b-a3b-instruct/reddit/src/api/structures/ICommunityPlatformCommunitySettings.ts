import { tags } from "typia";

/**
 * Configuration settings that customize the behavior and appearance of each
 * community. These settings are specific to each community and govern
 * moderation, visibility, and user experience. This is a subsidiary entity as
 * it is always governed by and accessed through its parent community entity.
 *
 * The community_platform_community_settings table stores optional configuration
 * overrides for community display and behavior that extend beyond the core
 * community attributes. It enables customization of community presentation
 * through visual elements (title, banner, icon) and operational flexibility
 * through moderation control (moderator_invite_only, allow_self_post). The
 * description field provides space for detailed community guidelines separate
 * from the basic description shown in listings.
 *
 * This entity is tightly coupled with community_platform_communities through
 * the foreign key community_platform_community_id and exists in a strict
 * one-to-one relationship. Settings are only populated when explicitly
 * configured by a moderator or admin, with NULL values indicating default
 * behavior. The created_at and updated_at timestamps ensure full auditability
 * of configuration changes.
 *
 * External integrations are referenced through the URL fields (banner_url,
 * icon_url), which point to resources hosted by external services like
 * Cloudinary. This design maintains separation of concerns by keeping media
 * assets outside the database while maintaining direct associations. The
 * platform_settings table (community_platform_platform_settings) provides
 * global defaults that apply when these community-specific settings are not
 * defined.
 *
 * Security considerations include ensuring only authorized moderators can
 * modify these settings through properly authenticated API endpoints. The
 * schema's foreign key constraints guarantee data integrity between communities
 * and their settings, preventing orphaned records.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunitySettings = {
  /**
   * Primary Key.
   *
   * The unique identifier for the community settings record.
   */
  id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The community this setting belongs to.
   * {@link community_platform_communities.id}.
   *
   * This field establishes a foreign key relationship to the parent community
   * entity. Every community has exactly one settings record, and this
   * relationship is enforced as a one-to-one association.
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /**
   * Custom display title for the community, which may differ from the public
   * 'name'. Used for branding.
   *
   * This field is optional and allows community moderators to set a more
   * descriptive or branded name for display purposes. If not set, the public
   * 'name' field from the community_platform_communities table will be used.
   */
  title?: string | undefined;

  /**
   * URL to the community's banner image, displayed prominently on the
   * community page.
   *
   * This field is optional and stores a URL pointing to an image hosted on an
   * external service like Cloudinary. The maximum length of 80,000 characters
   * allows for very long URLs, accommodating complex CDN paths.
   */
  banner_url?:
    | (string & tags.MaxLength<80000> & tags.Format<"uri">)
    | undefined;

  /**
   * URL to the community's icon/logo, used as visual identifier in lists.
   *
   * This optional field provides a small image that serves as the community's
   * icon in directory listings and navigation menus. Like banner_url, this
   * points to an externally hosted image.
   */
  icon_url?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;

  /**
   * Detailed rules and guidelines for the community, more comprehensive than
   * the basic description.
   *
   * This field contains additional community-specific rules and expectations
   * that are not covered in the basic description. It is often displayed in a
   * dedicated 'Rules' section on the community page and is limited to ensure
   * readability and performance.
   */
  rules?: string | undefined;

  /**
   * Flag indicating whether only admins can invite new moderators. If false,
   * existing moderators can invite others.
   *
   * This boolean setting defines the governance model of the community. When
   * true, only platform admins can invite new moderators. When false,
   * existing moderators can invite and promote new moderators within the
   * community, enabling decentralized moderation.
   */
  moderator_invite_only?: boolean | undefined;

  /**
   * Flag indicating whether new members can immediately create posts upon
   * joining, or if a waiting period is required.
   *
   * When enabled, new subscribers can immediately create and publish posts in
   * the community. When disabled, new members must wait until the community
   * formality is complete, typically to prevent spam and ensure members
   * understand community norms before contributing.
   */
  allow_self_post?: boolean | undefined;

  /**
   * Timestamp indicating when these settings were initially configured.
   *
   * This field is set automatically by the system when the settings record is
   * first created and represents the precise moment the community's
   * configuration was established.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when these settings were last updated.
   *
   * This field is updated automatically by the system whenever any setting
   * has been modified, providing a clear audit trail of configuration changes
   * over time.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunitySettings {
  /**
   * Request body schema for updating a community's settings.
   *
   * This object defines the data structure required to update custom
   * configuration settings for an existing community. It includes optional
   * fields for display customization, moderation policies, and community
   * guidelines.
   *
   * This schema is specifically designed for the PUT
   * /communities/{communityId} endpoint and is used by community moderators
   * or platform administrators to customize the community's appearance and
   * behavior.
   *
   * The schema is a partial update object - all fields are optional and null
   * values are permitted, allowing clients to update only specific settings
   * without affecting others. Each field updates the corresponding column in
   * the community_platform_community_settings table.
   *
   * This object does NOT contain fields for modifying the core community
   * structure (name, is_public, etc.) as these are handled by different
   * endpoints and require different permissions.
   *
   * Related to:
   *
   * - ICommunityPlatformCommunitySettings: The full settings entity returned
   *   after update
   * - Community_platform_community_settings: The underlying database table
   */
  export type IUpdate = {
    /**
     * Custom display title for the community, which may differ from the
     * public 'name'. Used for branding.
     *
     * This field corresponds to the 'title' column in the
     * community_platform_community_settings table. It allows community
     * moderators to set a preferred display name that may be more
     * human-readable or better branded than the technical name.
     *
     * This is an optional field. When not provided, the system uses the
     * community's public 'name' field as the display title.
     *
     * The title can contain alphanumeric characters, spaces, and common
     * punctuation. The length is capped at 100 characters to prevent
     * excessive display content.
     *
     * Example:
     *
     * - If community name is 'tech-news', the title might be 'Tech News -
     *   Breaking Stories and Analysis'
     * - If left empty, the community name 'tech-news' will be displayed
     *   instead
     */
    title?:
      | (string &
          tags.MinLength<0> &
          tags.MaxLength<100> &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_community_settings";
          }>)
      | undefined;

    /**
     * URL to the community's banner image, displayed prominently on the
     * community page.
     *
     * This field corresponds to the 'banner_url' column in the
     * community_platform_community_settings table. It allows community
     * moderators to upload and set a custom banner image that visually
     * represents the community's theme.
     *
     * This is an optional field. If not provided, the system uses a default
     * banner based on the community's category.
     *
     * The URL must be a valid HTTP or HTTPS link. The system validates the
     * URL format but does not verify the image's existence at the URL. The
     * image is hosted externally (Cloudinary or S3) and the URL is stored
     * as a reference.
     *
     * The maximum length is set to 80,000 characters to accommodate long
     * URLs from external hosting services.
     *
     * Example: "https://cdn.example.com/banners/technology-banner.jpg"
     */
    banner_url?:
      | (string &
          tags.MinLength<0> &
          tags.MaxLength<80000> &
          tags.Pattern<"^https?://"> &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_community_settings";
          }>)
      | undefined;

    /**
     * URL to the community's icon/logo, used as visual identifier in lists.
     *
     * This field corresponds to the 'icon_url' column in the
     * community_platform_community_settings table. It allows community
     * moderators to set a small icon or logo that identifies the community
     * in listings, feeds, and search results.
     *
     * This is an optional field. If not provided, the system uses a default
     * icon based on the community's category.
     *
     * The URL must be a valid HTTP or HTTPS link. The system validates the
     * URL format but does not verify the image's existence at the URL. The
     * image is hosted externally (Cloudinary or S3) and the URL is stored
     * as a reference.
     *
     * The maximum length is set to 80,000 characters to accommodate long
     * URLs from external hosting services.
     *
     * Example: "https://cdn.example.com/icons/technology-icon.png"
     */
    icon_url?:
      | (string &
          tags.MinLength<0> &
          tags.MaxLength<80000> &
          tags.Pattern<"^https?://"> &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_community_settings";
          }>)
      | undefined;

    /**
     * Detailed rules and guidelines for the community, more comprehensive
     * than the basic description.
     *
     * This field corresponds to the 'rules' column in the
     * community_platform_community_settings table. It contains more
     * detailed community guidelines, rules, and expectations for members.
     *
     * This is an optional field. When provided, this text is displayed on
     * the community's rules page and helps enforce community standards.
     *
     * The field can contain up to 4,000 characters of plain text describing
     * community norms, posting expectations, behavioral guidelines, and
     * consequences for violations.
     *
     * Examples:
     *
     * - "No self-promotion or spam. Links must be relevant to the topic and
     *   not self-serving."
     * - "Be respectful in all discussions. Personal attacks and harassment
     *   will result in suspension."
     * - "Original content only. No reposts without attribution."
     *
     * This field is separate from the basic 'description' to provide space
     * for comprehensive guidelines without cluttering the community
     * summary.
     */
    rules?:
      | (string &
          tags.MinLength<0> &
          tags.MaxLength<4000> &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_community_settings";
          }>)
      | undefined;

    /**
     * Flag indicating whether only admins can invite new moderators. If
     * false, existing moderators can invite others.
     *
     * This field corresponds to the 'moderator_invite_only' column in the
     * community_platform_community_settings table. It controls the
     * hierarchy and permission structure for community moderation.
     *
     * When set to true, only platform administrators have the ability to
     * assign new moderators. When set to false (default), existing
     * moderators can invite other trusted members to join their moderation
     * team.
     *
     * This setting is important for community governance and helps prevent
     * unauthorized access to moderation tools. It balances community
     * autonomy with platform oversight.
     *
     * When true, it enforces a more centralized control model. When false,
     * it allows more decentralized community management.
     *
     * Example: If a community has a strong culture of trust among its
     * active members, the moderator may set this to false to empower their
     * team.
     */
    moderator_invite_only?:
      | (boolean &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_community_settings";
          }>)
      | undefined;

    /**
     * Flag indicating whether new members can immediately create posts upon
     * joining, or if a waiting period is required.
     *
     * This field corresponds to the 'allow_self_post' column in the
     * community_platform_community_settings table. It controls the
     * onboarding experience for new members joining the community.
     *
     * When set to true (default), new members can immediately create posts
     * upon joining the community. When set to false, new members must wait
     * for a period before posting, which helps prevent spam and ensures
     * members have reviewed community norms first.
     *
     * This feature is commonly used in highly moderated communities where
     * the quality of contributions is prioritized over volume. It can help
     * reduce spam and improve overall discourse quality by forcing new
     * members to engage with content before creating their own.
     *
     * Example: In academic or professional communities, moderators may set
     * this to false to ensure new members understand the content standards
     * before contributing.
     */
    allow_self_post?:
      | (boolean &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_community_settings";
          }>)
      | undefined;
  };
}
