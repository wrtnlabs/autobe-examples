import { tags } from "typia";

/**
 * Complete report object as stored in the system, including metadata about the
 * reported content, the reporter, and its status.
 *
 * This schema defines the structure of a content report entity as it exists in
 * the database (community_platform_reports table). It represents a complete
 * record of a user-submitted report, including identifying information for both
 * the reported content and the reporter, the reason for the report, and its
 * processing status.
 *
 * The report captures:
 *
 * - Exactly which content (post or comment) was reported via reported_content_id
 *   or reported_comment_id
 * - Who made the report via reporter_id
 * - What category of violation was chosen via report_reason
 * - The current state of the report's lifecycle via status
 * - When the report was submitted and last updated
 *
 * This structure ensures all necessary information for moderation decisions,
 * audit purposes, and user notifications is retained. The schema strictly
 * adheres to the Prisma schema (community_platform_reports) and includes no
 * inferred or unsupported fields.
 *
 * The response excludes the reporter's personal identifying information (email,
 * username) at the API level to protect reporter anonymity as required by
 * privacy regulations. Only the internal ID (reporter_id) is exposed, which is
 * meaningless without database access.
 *
 * The ‘target_type’ discriminator field is essential to interpret which of the
 * two foreign key fields (reported_content_id or reported_comment_id) is
 * active. The system does not allow both or neither to be populated, ensuring
 * data integrity.
 *
 * This type forms the foundational data object for all report-related
 * operations: viewing, filtering, and acting on reports.
 *
 * All fields are either required or formally nullable with precise semantics as
 * documented. Dates are in consistent ISO 8601 format to ensure
 * interoperability across clients and platforms.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformReport = {
  /**
   * Unique identifier of the report, conforming to RFC 4122.
   *
   * This field corresponds to the `id` primary key field in the
   * community_platform_reports table.
   *
   * The report ID is generated by the database upon creation and is not
   * modifiable thereafter. It serves as the primary mechanism to uniquely
   * identify and reference each report in the system for all subsequent
   * operations, including viewing, updating, and deleting reports.
   *
   * This UUID is used in all API endpoints that reference reports, such as
   * GET /reports/{reportId}, PUT /reports/{reportId}/actions, and DELETE
   * /reports/{reportId}.
   *
   * The generation of this ID is handled by the database with UUID type,
   * ensuring global uniqueness across all server instances and database
   * replicas. This supports the stateless nature of the API, as clients can
   * use this ID to reference specific reports without needing to maintain
   * session state.
   *
   * The field is required in all responses containing report data to enable
   * clients to perform follow-up operations on the reported content.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the post being reported.
   *
   * This is a foreign key reference to the `id` field in the
   * community_platform_posts table. One of either reported_content_id or
   * reported_comment_id must be provided to identify the target of the
   * report, but not both.
   *
   * This field indicates that the report is targeting a post. It connects the
   * report to the specific post entity that is being flagged, enabling
   * moderators to locate, review, and take action on the content.
   *
   * The reported_content_id is stored as a string UUID in the database and is
   * not null when reporting a post. System logic enforces that exactly one of
   * reported_content_id or reported_comment_id must be provided with each
   * report, ensuring there is always one clear target for moderation.
   *
   * The integrity of this relationship is maintained through database foreign
   * key constraints from the community_platform_reports table to the
   * community_platform_posts table, ensuring that a report cannot be created
   * against a non-existent post.
   *
   * The field is included in all report responses and is used to link the
   * report to its content context, allowing for audit tracking across the
   * entire content lifecycle.
   */
  reported_content_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The unique identifier of the comment being reported.
   *
   * This is a foreign key reference to the `id` field in the
   * community_platform_comments table. One of either reported_content_id or
   * reported_comment_id must be provided to identify the target of the
   * report, but not both.
   *
   * This field indicates that the report is targeting a comment. It connects
   * the report to the specific comment entity that is being flagged, enabling
   * moderators to locate, review, and take action on the content.
   *
   * The reported_comment_id is stored as a string UUID in the database and is
   * not null when reporting a comment. System logic enforces that exactly one
   * of reported_content_id or reported_comment_id must be provided with each
   * report, ensuring there is always one clear target for moderation.
   *
   * The integrity of this relationship is maintained through database foreign
   * key constraints from the community_platform_reports table to the
   * community_platform_comments table, ensuring that a report cannot be
   * created against a non-existent comment.
   *
   * The field is included in all report responses and is used to link the
   * report to its content context, allowing for audit tracking across the
   * entire comment thread lifecycle.
   */
  reported_comment_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The ID of the user who submitted the report.
   *
   * This is a foreign key reference to the `id` field in the
   * community_platform_member table. This field records the identity of the
   * person who reported the content for audit purposes, but does not expose
   * this identity to the content author for privacy and protection against
   * retaliation.
   *
   * The reporter_id is required in every report and cannot be null, as every
   * report must have an originating user. This enables system administrators
   * to track reporting patterns, identify potential abuse of the reporting
   * system, and implement rate limiting per user as defined in
   * community_platform_platform_settings.max_reports_per_day.
   *
   * While the reporter_id is stored and accessible to administrators and
   * moderators, it is not included in public responses to the content author.
   * This anonymization protects reporters while still allowing for
   * accountability and investigation of misuse.
   *
   * This relationship ties the report to a verified member account, ensuring
   * that anonymous guests cannot submit reports. The reporter's identity is
   * preserved in database audit logs and can be referenced for compliance or
   * investigation purposes.
   */
  reporter_id: string & tags.Format<"uuid">;

  /**
   * Discriminator indicating whether the report targets a 'post' or
   * 'comment'.
   *
   * This field must be one of the literal strings 'post' or 'comment'. It is
   * used to disambiguate which child entity (post or comment) is being
   * targeted by the report when paired with the foreign key fields
   * reported_content_id or reported_comment_id.
   *
   * The discriminator is required for every report submission, and the value
   * is automatically derived from the presence of reported_content_id or
   * reported_comment_id in the input. For example:
   *
   * - If reported_content_id is provided, target_type is set to 'post'
   * - If reported_comment_id is provided, target_type is set to 'comment'
   *
   * The target_type field is persisted in the community_platform_reports
   * table and is referenced by the system when retrieving report details or
   * applying moderation actions. It ensures that the correct data type is
   * acted upon without requiring the system to infer from the foreign key
   * fields, improving clarity and robustness in code.
   *
   * This field supports the design principle that a report can only target
   * one type of content at a time, maintaining single responsibility in the
   * reporting workflow.
   */
  target_type: string;

  /**
   * Current status of the report, determining its position in the moderation
   * workflow.
   *
   * This field must be one of the following enumerated values: 'pending',
   * 'dismissed', 'removed', or 'escalated'.
   *
   * The status field governs the lifecycle of a report:
   *
   * - 'pending': Report has been submitted and is awaiting review by a
   *   moderator.
   * - 'dismissed': Moderator has reviewed the report and determined no action
   *   is necessary.
   * - 'removed': Moderator has taken action to remove the reported content, so
   *   it is no longer visible to users.
   * - 'escalated': Report has been flagged by moderators or automated systems
   *   as requiring attention from system administrators.
   *
   * The status value is updated by moderators or administrators using the PUT
   * /reports/{reportId}/actions endpoint. It is immutable from client-side
   * requests to prevent bypassing moderation.
   *
   * The field directly maps to the status column in the
   * community_platform_reports table and influences the visibility and
   * handling of the reported content. The status must be validated against
   * allowed values in the system to maintain data integrity.
   */
  status: string;

  /**
   * The category of reason selected by the reporter for the issue reported.
   *
   * This field must correspond to one of the valid values in the
   * community_platform_report_categories.name field, such as: 'spam',
   * 'harassment', 'inappropriate', or 'other'.
   *
   * The report_reason is selected from predefined options presented to the
   * user during the report submission flow. This categorization helps
   * moderators triage and prioritize reports based on severity.
   *
   * The system validates that the report_reason provided matches exactly one
   * existing record in the community_platform_report_categories table. This
   * ensures consistency and enables future filtering and analytics based on
   * reason categories.
   *
   * This field does not accept free-form text; any additional context from
   * the reporter is stored separately in the report_notes field. The
   * report_reason serves as machine-readable categorization for automation
   * and reporting purposes.
   *
   * The report_reason is required and cannot be null when submitting a
   * report, ensuring every report has at least a basic classification.
   */
  report_reason: string;

  /**
   * Optional additional context provided by the reporter about why they are
   * reporting the content.
   *
   * This field can contain up to 500 characters of free-form text, allowing
   * reporters to provide specific details or evidence that may assist
   * moderators in their review. Examples include referencing specific posts
   * in the comment thread, describing the context of harassment, or providing
   * links to additional violated content.
   *
   * The field is optional and may be null if the reporter submits a report
   * without additional context.
   *
   * This field maps to the report_notes column in the
   * community_platform_reports table and is displayed only to moderators and
   * administrators, never to the content author or other users. It serves as
   * a private augmentation to the report_reason field for detailed case
   * analysis.
   *
   * The system enforces a 500-character limit to prevent long-form
   * submissions from overwhelming moderation workflows or causing string
   * overflow in the database. This respects the field's design as a
   * short-note adjunct to the structured reason field.
   */
  report_notes?: string | undefined;

  /**
   * Timestamp indicating when the report was initially submitted by the user.
   *
   * This value is automatically generated by the system at the time of report
   * creation and is immutable. It is stored in the created_at column of the
   * community_platform_reports table and is provided in ISO 8601 date-time
   * format.
   *
   * This field is used for audit trail purposes, allowing moderators to
   * determine the order in which reports were submitted and to assess report
   * timing for patterns such as coordinated abuse or burst activity.
   *
   * The timestamp is recorded in UTC and reflects the system's current time
   * when the report is created. The system guarantees that this field cannot
   * be spoofed by the client and is strictly handled server-side based on the
   * system clock.
   *
   * This field is required in all report responses to enable proper sorting,
   * pagination, and historical analysis of reports, and is used to calculate
   * metrics like average response time for report resolution.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last status update to this report.
   *
   * This value is automatically updated by the system whenever the report's
   * status is changed by a moderator or administrator. It is stored in the
   * updated_at column of the community_platform_reports table and is provided
   * in ISO 8601 date-time format.
   *
   * This field reflects when the report last transitioned in its workflow —
   * for instance, from 'pending' to 'removed' or 'dismissed'. It does not
   * change if only the report_notes field is updated, as that is not
   * considered a status change. The field is used to monitor the time between
   * report submission and resolution.
   *
   * The system ensures that updated_at is derived from server time to prevent
   * client-side manipulation. This field is required in all report responses
   * and plays a critical role in reporting KPIs such as report resolution
   * time. In combination with created_at, it helps determine how long a
   * report has been pending and whether it requires escalation.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformReport {
  /**
   * Request parameters for searching and filtering content reports. This
   * schema is used when the system needs to query a list of reports with
   * criteria-based filtering and pagination.
   *
   * This object represents the search/query parameters for the reports search
   * functionality, enabling advanced discovery and triage of reported content
   * by moderators and administrators.
   *
   * The schema reflects the business requirements for report management,
   * particularly the need for comprehensive filtering by reporter, target
   * type, status, and reason category, along with pagination and sorting
   * capabilities.
   *
   * Each property corresponds directly to fields in the
   * community_platform_reports table of the Prisma schema or to
   * pagination/sorting parameters defined in the platform's performance
   * requirements.
   *
   * This request object is designed to be used in combination with the PATCH
   * /reports endpoint to retrieve customized slices of the complete report
   * dataset.
   */
  export type IRequest = {
    /**
     * The unique identifier of the user who submitted the report. This
     * field allows filtering reports by their originator. It corresponds to
     * the reporter_id field in the community_platform_reports table from
     * the Prisma schema. When provided, only reports submitted by this
     * specific user will be included in results.
     *
     * This property is optional and when omitted, reports from all
     * reporters will be returned.
     *
     * The UUID format ensures consistency with the platform's data model
     * and provides unique identification for users.
     */
    reporterId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * The type of content being reported. This field allows filtering
     * reports by target type between 'post' and 'comment'. It corresponds
     * to the target_type field in the community_platform_reports table from
     * the Prisma schema.
     *
     * When specified, only reports related to the designated type will be
     * included in results. This enables moderators to quickly filter
     * between the two main content types on the platform.
     *
     * According to the schema, this field is a discriminator that must be
     * one of the predefined values ('post' or 'comment') to properly
     * identify the report's target content type.
     */
    targetType?: "post" | "comment" | undefined;

    /**
     * The current moderation status of the report. This field allows
     * filtering reports by their processing state. It corresponds to the
     * status field in the community_platform_reports table from the Prisma
     * schema.
     *
     * The allowed values are:
     *
     * - 'pending': The report has been submitted but not yet reviewed
     * - 'dismissed': A moderator has reviewed the report and determined no
     *   action is needed
     * - 'removed': The reported content has been removed by a moderator
     * - 'escalated': The report has been escalated for administrative review
     *
     * This property is optional and when omitted, reports with any status
     * will be returned.
     */
    status?: "pending" | "dismissed" | "removed" | "escalated" | undefined;

    /**
     * The category of violation reported by the user. This field allows
     * filtering reports by the reason category selected during submission.
     * It maps to the report_reason field in the community_platform_reports
     * table and corresponds to the name values in the
     * community_platform_report_categories table.
     *
     * This property is optional. When provided, it should match the exact
     * name used in the report categories table (e.g., 'spam', 'harassment',
     * 'inappropriate', 'other'). This ensures accurate filtering based on
     * the predefined report reason types defined in the system.
     */
    reportReason?: string | undefined;

    /**
     * The page number for pagination. This parameter controls which page of
     * results to return.
     *
     * The minimum value is 1, representing the first page. Subsequent pages
     * increment from this value.
     *
     * When omitted, this parameter defaults to 1, returning the first page
     * of results.
     *
     * This field aligns with the pagination requirements in the platform's
     * performance specifications, which limit results to 25 reports per
     * page for optimal response times.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * The number of reports to return per page. This parameter controls the
     * size of each pagination chunk.
     *
     * The minimum value is 1, ensuring at least one report is returned. The
     * maximum value is 100 to prevent performance degradation and excessive
     * response sizes, aligning with the platform's performance
     * requirements.
     *
     * When omitted, the default value is 25, which aligns with the standard
     * pagination size specified in the moderator interface requirements.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * The field by which to sort the results. This parameter determines the
     * ordering of reports in the response.
     *
     * The available sorting options are:
     *
     * - 'created_at': Sorts reports by their creation timestamp, newest first
     * - 'updated_at': Sorts reports by their last update timestamp, newest
     *   first
     * - 'target_popularity': Sorts reports by the popularity (vote count) of
     *   the reported content
     * - 'moderator_actions': Sorts reports by the number of moderator actions
     *   taken on them
     *
     * When omitted, results are sorted by created_at (newest first) as the
     * default behavior.
     */
    sortBy?:
      | "created_at"
      | "updated_at"
      | "target_popularity"
      | "moderator_actions"
      | undefined;

    /**
     * The sort order direction. This parameter determines whether results
     * are sorted in ascending or descending order based on the sortBy
     * field.
     *
     * The available values are:
     *
     * - 'asc': Ascending order (oldest to newest)
     * - 'desc': Descending order (newest to oldest)
     *
     * When omitted, the default value is 'desc', which presents the most
     * recent reports first, aligning with moderator workflow expectations.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * The start date for filtering reports by creation time. Only reports
     * created on or after this timestamp will be included in results.
     *
     * This field allows moderation workflows to focus on recent reports
     * during active review periods. The format must follow the ISO 8601
     * date-time standard (UTC) for consistency across the system.
     *
     * This property is optional and when omitted, reports from the
     * beginning of time will be considered.
     */
    startDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * The end date for filtering reports by creation time. Only reports
     * created on or before this timestamp will be included in results.
     *
     * This field allows moderation workflows to focus on reports from
     * specific time periods, such as daily or weekly review cycles. The
     * format must follow the ISO 8601 date-time standard (UTC) for
     * consistency across the system.
     *
     * This property is optional and when omitted, reports up to the current
     * time will be considered.
     */
    endDate?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Request payload for creating a new content report on the platform. This
   * schema defines the data structure for submitting reports on posts or
   * comments in the communityPlatform system.
   *
   * This object is used in the POST /reports endpoint to initiate the
   * reporting workflow. It captures essential information needed to process
   * user-submitted reports, including identification of the reported content,
   * reporting reason, and optional additional context.
   *
   * The schema is designed based on the community_platform_reports table
   * structure from the Prisma schema, which provides the data model for
   * storing reports. It specifically references the required fields:
   * reported_content_id, reported_comment_id, reporter_id (auto-populated
   * from authentication), target_type (determined from which ID field is
   * provided), status (set to 'pending' by default), report_reason,
   * report_notes, created_at, and updated_at.
   *
   * Key constraints:
   *
   * - Either reportedContentId or reportedCommentId must be provided (never
   *   both)
   * - ReportReason is mandatory and must be one of the predefined enum values
   *   from the report categories
   * - ReportNotes is optional and has a 500-character limit
   * - The reporter's identity is derived from the authentication system, not
   *   included in this payload
   *
   * The schema ensures complete compliance with the Prisma data model while
   * supporting the business requirements for reporting content on the
   * platform. It enables users to report violations accurately while
   * maintaining appropriate validation and data integrity.
   */
  export type ICreate = {
    /**
     * The unique identifier of the post being reported. This field is
     * mandatory when reporting a post.
     *
     * This property corresponds to the reported_content_id field in the
     * community_platform_reports table from the Prisma schema. It links the
     * report to the specific post content that has been flagged.
     *
     * Exactly one of reportedContentId or reportedCommentId must be
     * provided, but not both. This field is used to establish the
     * relationship between the report and the target content, ensuring the
     * system can locate and process the reported item.
     *
     * When submitting a report on a post, this field must be provided with
     * a valid UUID that references an existing post in the
     * community_platform_posts table.
     */
    reportedContentId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * The unique identifier of the comment being reported. This field is
     * mandatory when reporting a comment.
     *
     * This property corresponds to the reported_comment_id field in the
     * community_platform_reports table from the Prisma schema. It links the
     * report to the specific comment content that has been flagged.
     *
     * Exactly one of reportedContentId or reportedCommentId must be
     * provided, but not both. This field is used to establish the
     * relationship between the report and the target content, ensuring the
     * system can locate and process the reported item.
     *
     * When submitting a report on a comment, this field must be provided
     * with a valid UUID that references an existing comment in the
     * community_platform_comments table.
     */
    reportedCommentId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * The category of violation reported by the user, as defined in the
     * community_platform_report_categories table.
     *
     * This property corresponds to the report_reason field in the
     * community_platform_reports table from the Prisma schema. It must be
     * one of the predefined values from the report categories: 'spam',
     * 'harassment', 'inappropriate', or 'other'.
     *
     * This field is mandatory and cannot be omitted. It is used to
     * categorize the report for triage and moderation purposes, and its
     * value is validated against the allowed enum set defined in the
     * schema.
     *
     * The predefined categories map directly to the 'name' field values in
     * the community_platform_report_categories table, ensuring consistency
     * across the system.
     */
    reportReason: "spam" | "harassment" | "inappropriate" | "other";

    /**
     * Additional context provided by the reporter about why they are
     * reporting the content. This field is optional and allows users to
     * provide detailed explanations for their report.
     *
     * This property corresponds to the report_notes field in the
     * community_platform_reports table from the Prisma schema. It can
     * contain up to 500 characters of additional context to help moderators
     * understand the nature of the violation.
     *
     * The length restriction ensures that additional context remains
     * concise and manageable for moderators to review quickly.
     *
     * When omitted, this field will be null in the database, indicating no
     * additional context was provided by the reporter.
     *
     * The description mentions the limit of 500 characters as specified in
     * the Prisma schema, which aligns with the business requirement for
     * maintaining sufficient context without allowing overly verbose
     * submissions.
     */
    reportNotes?: (string & tags.MaxLength<500>) | undefined;
  };
}
