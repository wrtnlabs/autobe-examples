import { tags } from "typia";

/**
 * Represents a user's subscription to a specific community on the platform.
 *
 * This entity establishes the many-to-many relationship between users and
 * communities, allowing members to follow communities of interest and receive
 * their content in personalized feeds.
 *
 * Each subscription record links a member_id to a community_id, creating a
 * direct association that governs content visibility and feed prioritization.
 *
 * The subscription model supports both active and inactive states through the
 * use of a soft delete pattern (deleted_at) and a status flag (active),
 * enabling users to temporarily deactivate subscriptions without losing their
 * subscription history.
 *
 * The system enforces a maximum of 1,000 subscriptions per user as defined in
 * community_platform_platform_settings, preventing excessive resource
 * consumption and maintaining performance.
 *
 * This entity integrates with other core tables: community_platform_member for
 * user context, community_platform_communities for community context, and
 * community_platform_posts for content delivery.
 *
 * The data from this table is used to power the "My Subscribed Communities"
 * feature, determine content ranking in home feeds, and calculate user
 * engagement metrics for platform analytics.
 *
 * The design ensures efficient querying for both "all subscriptions by user"
 * and "all users by community" patterns, utilizing appropriate database indexes
 * on member_id, community_id, and deleted_at.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSubscription = {
  /**
   * Primary Key.
   *
   * Unique identifier of the subscription record in the database.
   *
   * This field is generated automatically by the system upon subscription
   * creation and is used as the primary key for the
   * community_platform_subscriptions table.
   *
   * The UUID format ensures global uniqueness and prevents collisions across
   * distributed systems.
   *
   * This identifier is used in API endpoints to reference the specific
   * subscription record for operations like retrieval, status update, or
   * deletion.
   *
   * All subscription-related interactions in the system must reference this
   * unique ID for accurate record targeting.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the subscribing member.
   *
   * This field links the subscription record to the community_platform_member
   * table, identifying which user has subscribed to the community.
   *
   * This relationship is enforced through a foreign key constraint to
   * maintain referential integrity.
   *
   * The member_id cannot be null and must correspond to a valid, active
   * member account.
   *
   * This field enables the system to track user-specific subscription history
   * and enforce subscription limits per user.
   *
   * Access control rules ensure that users can only view and modify their own
   * subscriptions by validating the member_id against the authenticated
   * user.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Reference to the subscribed community.
   *
   * This field links the subscription record to the
   * community_platform_communities table, identifying which community the
   * user has subscribed to.
   *
   * This relationship is enforced through a foreign key constraint to
   * maintain referential integrity.
   *
   * The community_id cannot be null and must correspond to a valid, active
   * community.
   *
   * This field enables the system to determine which community's content
   * should be prioritized in the user's feed.
   *
   * It also allows efficient querying of all users subscribed to a specific
   * community, which is critical for content distribution and community
   * metrics.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the subscription was created.
   *
   * This field records the exact moment when the user successfully subscribed
   * to the community.
   *
   * The timestamp is set by the server at the time of subscription creation
   * and is immutable.
   *
   * This field is used for sorting subscriptions by recency and for
   * calculating user engagement metrics.
   *
   * The data type is stored as a timezone-aware timestamp (Timestamptz) in
   * the database to ensure consistency across time zones, with all timestamps
   * normalized to UTC for storage and comparison.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the subscription was last updated.
   *
   * This field records the most recent modification to the subscription
   * record, such as when the status is changed from active to inactive.
   *
   * The timestamp is automatically updated by the system whenever the
   * subscription state changes.
   *
   * This field enables tracking of when subscriptions were reactivated or
   * deactivated, providing insight into user engagement patterns.
   *
   * The data type is stored as a timezone-aware timestamp (Timestamptz) in
   * the database to ensure consistency across time zones, with all timestamps
   * normalized to UTC for storage and comparison.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp.
   *
   * When this field contains a timestamp, it indicates that the subscription
   * was deactivated or cancelled by the user.
   *
   * When null, the subscription is considered active and the user can receive
   * content from the community.
   *
   * This field implements a soft delete pattern to preserve subscription
   * history for metrics and audit purposes, rather than permanently removing
   * the record.
   *
   * The system excludes subscriptions with a non-null deleted_at value from
   * active feed queries, effectively un-subscribing the user without losing
   * historical data.
   *
   * This design allows users to re-subscribe to a community and restore their
   * previous subscription state if desired.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Current status of the subscription.
   *
   * When true, the subscription is active and the user can receive content
   * from the community in their feed.
   *
   * When false, the subscription is deactivated - the user will not receive
   * new content from this community, but the subscription record remains in
   * the database.
   *
   * This field is a performance optimization to enable efficient filtering of
   * active subscriptions without needing to check the deleted_at field for
   * every query.
   *
   * The active flag can be toggled independently of the deleted_at field: a
   * subscription can have a non-null deleted_at but still have active: true
   * (a state that should not occur), or deleted_at: null and active: false (a
   * standard inactive state).
   *
   * The system ensures data consistency by setting active: false when
   * deleted_at is set and vice versa.
   */
  active: boolean;

  /**
   * JSON string containing additional context about the subscription.
   *
   * This optional field stores structured metadata about the subscription in
   * JSON format, such as the source of the subscription (e.g., "referal",
   * "promotion", "auto_follow"), or any system-generated flags.
   *
   * This field is extensible and can be used by the platform to track
   * subscription-specific behavior without requiring schema changes.
   *
   * Examples of potential values: {"source": "recommended"},
   * {"auto_followed": true}, {"earned_by_karma": 1000}.
   *
   * This field is not currently used by the core system but is reserved for
   * future extensibility and analytics purposes.
   */
  metadata?: string | null | undefined;
};
export namespace ICommunityPlatformSubscription {
  /**
   * Request parameters for searching and filtering a user's list of
   * subscriptions.
   *
   * This schema defines the optional parameters that can be provided to
   * filter and sort the response from the GET
   * /communityPlatform/member/subscriptions endpoint.
   *
   * The request is designed to be flexible, allowing users to customize their
   * subscription list view based on various criteria. All parameters are
   * optional, and if not provided, the system will return all subscriptions
   * in the default order.
   *
   * The status parameter allows filtering subscriptions based on their
   * active/inactive state, which is particularly useful for reviewing
   * subscription history.
   *
   * The sortBy and sortOrder parameters enable users to arrange subscriptions
   * in meaningful ways, such as by creation date or community name.
   *
   * The page and limit parameters provide pagination control, allowing
   * clients to efficiently load large lists of subscriptions without
   * performance degradation.
   *
   * The search parameter enables full-text search across community names and
   * descriptions, helping users quickly find specific communities within
   * their subscription list.
   *
   * This request structure aligns with the user journey steps 6.5 and 8.1 of
   * the requirements documentation, supporting the "My Subscribed
   * Communities" panel functionality.
   *
   * The system must properly validate all parameters against their schemas
   * before processing the request. Invalid parameters should result in
   * appropriate error responses.
   */
  export type IRequest = {
    /**
     * Filter subscriptions by their active status to retrieve only active
     * or inactive subscriptions.
     *
     * This property is used to filter the list of subscriptions based on
     * whether they are currently active (true) or inactive (false). This
     * corresponds to the active field in the
     * community_platform_subscriptions table.
     *
     * When set to "active", the operation returns only subscriptions where
     * active: true (deleted_at is null), filtering out any previously
     * unsubscribed or soft-deleted subscriptions. When set to "inactive",
     * the operation returns subscriptions where active: false (deleted_at
     * is not null), showing subscriptions that have been removed by the
     * user.
     *
     * This filtering capability is essential for user interfaces that
     * display different views for active subscriptions versus past
     * subscriptions. It allows users to focus on current communities they
     * are subscribed to or review their history of previous subscriptions.
     *
     * When this property is not provided, the default behavior should be to
     * return only active subscriptions, as this is the most common use
     * case.
     *
     * This filter directly maps to the active boolean field in the
     * community_platform_subscriptions table, and the system should use
     * this property to apply WHERE conditions in the SQL query for optimal
     * performance.
     *
     * The field must exactly match one of the allowed values: "active" or
     * "inactive". Any other value will result in a validation error.
     */
    status?: "active" | "inactive" | undefined;

    /** Define the field to sort the subscription list by. */
    sortBy?: "created_at" | "community_name" | undefined;

    /**
     * Define the sort order for the subscription list, either ascending
     * (asc) or descending (desc).
     *
     * This parameter controls the ordering of subscriptions in the returned
     * list. When set to "asc", the results will be ordered from oldest to
     * newest. When set to "desc", the results will be ordered from newest
     * to oldest.
     *
     * This parameter works in conjunction with the sortBy parameter to
     * determine the final ordering of results. For example, if sortBy is
     * "created_at" and sortOrder is "desc", the most recently created
     * subscriptions will appear first in the response.
     *
     * The default value should be "desc" to show recent subscriptions
     * first, which is the most intuitive experience for users.
     *
     * The valid values are "asc" (ascending) and "desc" (descending). Any
     * other value will result in a validation error. This parameter is
     * optional and can be omitted to use the default order.
     */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * The page number to retrieve from the subscription list.
     *
     * This parameter specifies which page of results should be returned in
     * the paginated response. Page numbering starts at 1 (not 0), and each
     * page contains a fixed number of items based on the limit parameter.
     *
     * This parameter is essential for implementing infinite scrolling or
     * pagination in the user interface, allowing clients to load
     * subscription lists in manageable chunks rather than retrieving all
     * subscriptions at once.
     *
     * If the specified page number exceeds the total number of available
     * pages, the system should return an empty data array. Negative page
     * numbers or zero are invalid and should return a validation error.
     *
     * The default page value is 1, meaning the first page of results is
     * returned when this parameter is not provided.
     *
     * Note that this parameter works in combination with the limit
     * parameter to define the pagination mechanism: page * limit determines
     * the offset of results.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * The number of subscriptions to include per page.
     *
     * This parameter controls how many subscription records are returned in
     * each response page. It determines the pagination size and impacts
     * both network performance and user experience.
     *
     * The maximum value for limit is 100 to prevent excessive data transfer
     * and maintain response time efficiency. The default value is 50, which
     * provides a good balance between reducing pagination frequency and
     * minimizing payload size.
     *
     * If a client requests a limit greater than 100, the system should use
     * 100 as the effective limit.
     *
     * If a client requests a limit less than 1, the system should use 1 as
     * the effective limit.
     *
     * Minimizing the limit value increases the number of requests required
     * to retrieve all subscriptions but reduces network payload size per
     * request. Maximizing the limit reduces the number of requests but
     * increases the data transfer per request.
     *
     * The value should be chosen based on mobile and desktop performance
     * considerations and the typical screen size for displaying
     * subscription data.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<50> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Text to search for in community names or descriptions.
     *
     * This parameter enables full-text search across community names and
     * descriptions to help users find relevant communities among their
     * subscriptions.
     *
     * The search term should be matched against the community name from the
     * community_platform_communities table and the community description
     * field. The search should be case-insensitive and support partial
     * matches.
     *
     * This filtering capability is particularly useful for users with large
     * numbers of subscriptions (up to 1,000) who need to quickly locate
     * specific communities.
     *
     * If the search term is longer than 100 characters, it should be
     * truncated to 100 characters before processing.
     *
     * The system should implement efficient text search using database
     * indexes on the community name and description fields to maintain
     * performance even with large datasets.
     */
    search?: (string & tags.MinLength<1> & tags.MaxLength<100>) | undefined;
  };

  /**
   * Request payload for creating a new community subscription.
   *
   * This schema defines the minimal data required to initiate a subscription
   * to a community.
   *
   * Only the community_id field is required, as all other necessary data
   * (user ID, timestamps, status flags) is determined by the system based on
   * the authenticated user's session and predefined defaults.
   *
   * The subscription is created as active by default, with created_at and
   * updated_at set to the current time and deleted_at set to null.
   *
   * This type is used exclusively for POST requests to create new
   * subscriptions and must not include any fields that are system-generated
   * (such as id, member_id, or timestamps).
   *
   * The system validates that the user has not exceeded their subscription
   * limit of 1,000 communities before allowing creation.
   *
   * This schema ensures a clean separation between client-provided data and
   * system-managed data, preventing potential tampering with subscription
   * state.
   */
  export type ICreate = {
    /**
     * Reference to the community to subscribe to.
     *
     * This field must reference an existing and active community in the
     * community_platform_communities table.
     *
     * The community_id identifies the specific community the user wishes to
     * follow and is a required field for subscription creation.
     *
     * The system validates that the community exists and is not suspended
     * or deleted before allowing the subscription.
     *
     * This field cannot be null and must correspond to a valid UUID format.
     *
     * The association is one-way: the user subscribes to the community, but
     * the community does not have direct knowledge of its subscribers
     * beyond the subscription record.
     */
    community_id: string & tags.Format<"uuid">;
  };

  /**
   * Update request payload for a community subscription.
   *
   * This object represents the data required to update an existing community
   * subscription for an authenticated user. The system allows only one field
   * to be modified: the active status of the subscription.
   *
   * This corresponds to the community_platform_subscriptions table in the
   * Prisma schema, which manages the many-to-many relationship between users
   * and communities. The table contains fields including member_id,
   * community_platform_communities_id, created_at, updated_at, deleted_at,
   * and active.
   *
   * The implementation requires that only the `active` flag can be modified.
   * When the subscription is created, the `active` flag is set to true and
   * `deleted_at` is null. This object allows a user to toggle the
   * subscription between active and inactive states.
   *
   * All other fields from the community_platform_subscriptions table (such as
   * member_id, community_platform_communities_id, created_at, updated_at, and
   * deleted_at) are immutable after creation and cannot be modified by this
   * update object. The `updated_at` timestamp is automatically managed by the
   * database and will be updated when this request is processed.
   *
   * This operation is different from the DELETE endpoint, which completely
   * removes the subscription record from the database. This update operation
   * preserves the subscription history and allows for future re-subscription
   * without requiring a new invitation or approval.
   *
   * The field is named 'active' to align with the Prisma schema's field name
   * directly, following the naming convention that properties in DTOs should
   * mirror their underlying database entities when possible. No additional
   * validation is needed beyond confirming the boolean type and presence of
   * the field.
   *
   * The object is also linked to other entities through its relationship
   * context:
   *
   * - The subscription is associated with a community_platform_member (user)
   *   via the member_id foreign key
   * - The subscription is associated with a community_platform_communities
   *   (community) via the community_platform_communities_id foreign key
   *
   * Changes to the active flag may trigger notifications to the user and
   * update the community's member_count in the community_platform_communities
   * table as a side effect.
   */
  export type IUpdate = {
    /**
     * The new subscription status to set. True enables the subscription,
     * false deactivates it without deleting the record.
     *
     * This corresponds to the `active` boolean field in the
     * community_platform_subscriptions table.
     *
     * This flag controls whether the subscription is active and visible in
     * the user's feed. When set to false, the user will no longer receive
     * content from the community in personalized feeds. The subscription
     * record remains in the database with its `deleted_at` field unchanged,
     * preserving the subscription history for potential re-subscription.
     *
     * The `active` field is updated using the PUT
     * /member/subscriptions/{subscriptionId} endpoint. This operation does
     * not delete the record from the database, unlike the DELETE endpoint
     * which performs a hard deletion.
     *
     * The business rules specify that users can subscribe to a maximum of
     * 1,000 communities. Setting `active` to false for a subscription
     * reduces the number of active subscriptions for the user, but does not
     * affect the maximum limit.
     *
     * The system validates that only the authenticated user can change
     * their own subscription status.
     *
     * The `active` field is required in the request body, since it is the
     * only field allowed to be updated. It is directly mapped to the
     * database field in the community_platform_subscriptions table.
     */
    active: boolean;
  };
}
