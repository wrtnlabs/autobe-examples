import { tags } from "typia";

/**
 * Detailed information about a community on the communityPlatform.
 *
 * This schema represents the full object model for a community as defined in
 * the community_platform_communities table in the Prisma schema.
 *
 * It includes the community's identifier, name, description, creation
 * timestamp, privacy settings, moderation preferences, and activity metrics.
 *
 * The object is used for displaying community details on the community page and
 * is the source for any page that requires full community context.
 *
 * All fields in this schema correspond exactly to columns in the database table
 * and must not add any computed, derived, or inferred properties.
 *
 * The response form of this schema is used for the GET
 * /communityPlatform/communities/{communityId} endpoint.
 *
 * This type has no relationship to ICommunityPlatformCommunity.ISummary; this
 * is the detailed entity, while the summary type is a reduced subset optimized
 * for list views.
 *
 * The schema includes all fields from the Prisma schema: id, name, description,
 * created_at, is_public, nsfw, post_review_mode, comment_review_mode,
 * member_count, post_count.
 *
 * No other fields from any other table are included; the
 * community_platform_community_settings table is referenced separately and is
 * not part of this schema. This ensures responsitiveness of high-volume
 * endpoints.
 *
 * The presence of x-autobe-prisma-schema identifies this as a direct table
 * mapping, requiring audit that every property must exist in the referenced
 * Prisma entity.
 *
 * The description emphasizes the structure and constraints defined specifically
 * by the Prisma database schema, with no deviations allowed.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunity = {
  /**
   * Unique identifier for the community.
   *
   * This field corresponds to the id column in the
   * community_platform_communities table, which is a UUID primary key.
   *
   * It is used for all individual community reference endpoints (e.g., GET
   * /communities/{id}), analytics, and caching.
   *
   * The value is auto-generated by the database on community creation and is
   * immutable.
   *
   * This field is required for all community-related operations and is always
   * present in responses.
   *
   * No other entity in the system shares this id, ensuring uniqueness and
   * consistency in data referencing.
   *
   * According to the Prisma schema, this is the primary key and the only
   * mandatory field referenced across all relationships to
   * community_platform_communities.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique, case-insensitive name identifier for the community (e.g.,
   * 'technology', 'gaming').
   *
   * This field corresponds to the name column in the
   * community_platform_communities table, which is stored as a
   * case-insensitive unique string.
   *
   * It must contain only alphanumeric characters and hyphens, following the
   * naming convention specified in business rules.
   *
   * It is used as the URL slug for community access (e.g., r/{name}) and for
   * programmatic reference in client applications.
   *
   * The name is unique across the entire platform, enforced by the unique
   * index on the name column in the database schema.
   *
   * This field cannot be changed after creation, as per business rules that
   * protect community identity.
   *
   * The business rules specify that community names must be 3 to 50
   * characters long, with no leading or trailing hyphens, and must not be
   * reserved keywords.
   *
   * This field must be represented exactly as stored in the database without
   * modification.
   */
  name: string &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * A brief description of the community's purpose and rules, displayed to
   * users.
   *
   * This field corresponds to the description column in the
   * community_platform_communities table, which is optional (nullable).
   *
   * The description provides users with context about the community's focus
   * and guidelines before they join.
   *
   * Length is not strictly limited by the database schema, but display
   * applications should truncate after 200 characters for UI consistency, as
   * defined in the business rules.
   *
   * Truncation is purely a client-side concern; the full description is
   * always returned by the API.
   *
   * This field is descriptive rather than operational and is not used in any
   * search indexing or filtering logic directly within the database.
   *
   * The description is stored as plain text with no formatting allowed in the
   * database; any rich text is rendered client-side.
   *
   * If the community has no description, this field returns null, indicating
   * absence of content rather than an empty string.
   *
   * The field corresponds exactly to the Prisma schema definition and must
   * not be determined from any other source.
   */
  description?:
    | (string &
        tags.JsonSchemaPlugin<{
          "x-autobe-prisma-schema": "community_platform_communities";
        }>)
    | null
    | undefined;

  /**
   * Timestamp indicating when the community was created.
   *
   * This field corresponds to the created_at column in the
   * community_platform_communities table, which is a timestamptz (timestamp
   * with timezone) field.
   *
   * The value is set by the database at the moment of creation and is
   * immutable.
   *
   * This timestamp is used for chronological sorting of communities and for
   * calculating community age as part of the ranking algorithms.
   *
   * It is presented in ISO 8601 format with timezone information, as required
   * by the OpenAPI format definition for date-time fields.
   *
   * The server operates in Asia/Seoul timezone (UTC+9), but all timestamps
   * are stored and transmitted in UTC to ensure consistency.
   *
   * This field directly corresponds to the database column and must not be
   * inferred or calculated from any other source.
   *
   * It is critical for the "new" sort algorithm and for reporting on new
   * community growth trends as specified in the performance requirements.
   */
  createdAt: string &
    tags.Format<"date-time"> &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * Flag indicating whether the community is publicly visible and joinable.
   *
   * This field corresponds to the is_public column in the
   * community_platform_communities table.
   *
   * If true, the community is visible in public lists and any user can join
   * without approval.
   *
   * If false, the community is private and users can only join by invitation
   * or subscription.
   *
   * This flag is used in access control to determine whether the community
   * can be seen by guests (non-authenticated users) or requires
   * authentication.
   *
   * The field directly corresponds to the database column and must not be
   * derived from user subscription status alone.
   *
   * Public communities are indexed for discoverability and can be found via
   * search with isPublic=true.
   *
   * This flag is set at community creation and can be changed later by
   * moderators/owners.
   *
   * The desire for visual clarity in the user interface requires this field
   * to be present in every community object returned by the API.
   *
   * This field does not affect permission to view content if the user is a
   * subscriber, but only affects visibility of the community listing itself.
   */
  isPublic: boolean &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * Flag indicating whether the community contains Not Safe For Work content.
   *
   * This field corresponds to the nsfw column in the
   * community_platform_communities table.
   *
   * If true, the community contains content that may be inappropriate for
   * work or public view.
   *
   * The flag triggers mandatory user settings to view such content and
   * displays warnings when users enter the community.
   *
   * This implementation complies with child protection and exposure policies
   * defined in the compliance requirements.
   *
   * This flag must be checked against user settings before content is
   * displayed to ensure legal compliance.
   *
   * It is use to implement the NSFW filtering system as outlined in the
   * security and compliance documents.
   *
   * The value is set by administrators or moderators with approval and is
   * immutable for the lifetime of the community once set.
   *
   * This field corresponds exactly to the database schema field and must not
   * be determined from any other source such as content analysis.
   *
   * The field is used in search filtering, and user profile preferences for
   * content filtering.
   */
  nsfw: boolean &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * Flag indicating whether all new posts in this community require moderator
   * approval before being published.
   *
   * This field corresponds to the post_review_mode column in the
   * community_platform_communities table.
   *
   * If true, any new post submitted to this community must be manually
   * approved by a moderator before it becomes visible to other users.
   *
   * This feature enables community governance by allowing moderators to
   * maintain quality control, which is important for communities with
   * sensitive topics.
   *
   * When this flag is false, posts are published immediately upon submission.
   *
   * This field interacts with the status field in community_platform_posts:
   * if post_review_mode is true, a new post is created with status
   * 'unreviewed'; if false, status is 'published'.
   *
   * It is not a field that can be assigned or modified from outside the
   * community settings.
   *
   * The field is set during community creation and can be changed by
   * moderators (with admin override).
   *
   * The implementation follows the business rules for moderation workflows
   * and must be stored and returned exactly as defined in the Prisma schema.
   */
  postReviewMode: boolean &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * Flag indicating whether all new comments in this community require
   * moderator approval before being published.
   *
   * This field corresponds to the comment_review_mode column in the
   * community_platform_communities table.
   *
   * If true, any comment submitted to this community must be manually
   * approved by a moderator before being visible to other users.
   *
   * This feature allows greater control over discussion quality and prevents
   * spam or harassment from appearing immediately.
   *
   * If false, comments are published immediately after submission.
   *
   * This field influences the status field in community_platform_comments:
   * when true, new comments have status 'unreviewed'; when false, status is
   * 'published'.
   *
   * The value is inherited from community-specific configuration and can be
   * adjusted by moderators.
   *
   * It does not affect the user's ability to comment, only the visibility of
   * the comment before moderation.
   *
   * This field directly maps to the database schema and must be returned in
   * its exact value without integrity checks or modification.
   */
  commentReviewMode: boolean &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * The current number of users subscribed to this community.
   *
   * This field corresponds to the member_count column in the
   * community_platform_communities table, which is an integer field.
   *
   * It is maintained by the system using triggers or background jobs that
   * update the count on subscription/unsubscription events
   * (community_platform_subscriptions table).
   *
   * The count is used to rank communities in the "top" and "hot" lists and
   * influences the visibility of communities through algorithmic
   * prioritization.
   *
   * This field reflects active subscriptions, not total registered users; it
   * is not affected by user bans or deletions, but only by subscription
   * status.
   *
   * It is capped by the platform-wide limit of max_community_members defined
   * in community_platform_platform_settings.
   *
   * The value is derived from the database and cannot be modified directly by
   * any request or operation.
   *
   * It is used both in UI display and in API ranking logic, and must be
   * accurate to avoid publishing false information.
   *
   * The implementation ensures that the count is always >= 0 and is updated
   * in real time for performance-sensitive endpoints via caching or
   * materialized views.
   */
  memberCount: number &
    tags.Type<"int32"> &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;

  /**
   * The total number of posts created in this community.
   *
   * This field corresponds to the post_count column in the
   * community_platform_communities table.
   *
   * It is maintained by the system using triggers or background jobs that
   * increment the count on each published post (community_platform_posts) and
   * decrement on deletion.
   *
   * This metric is used as a key metric to determine a community's activity
   * level and helps determine its place in top lists.
   *
   * The value reflects only accepted posts that are in 'published' status;
   * posts in 'unreviewed' or 'removed' status do not contribute to the
   * count.
   *
   * It is calculated from the query COUNT(*) FROM community_platform_posts
   * WHERE community_platform_community_id = ? AND status = 'published'
   *
   * The field is derived from the database and must not be inferred,
   * calculated, or modified by clients or intermediate services.
   *
   * The field is used in ranking logic, organic discovery, and policy
   * enforcement.
   *
   * This number is bounded by the system's performance constraints and must
   * be kept in real time for popular communities.
   */
  postCount: number &
    tags.Type<"int32"> &
    tags.JsonSchemaPlugin<{
      "x-autobe-prisma-schema": "community_platform_communities";
    }>;
};
export namespace ICommunityPlatformCommunity {
  /**
   * Search criteria and pagination parameters for community discovery.
   *
   * This request body is used by the /communityPlatform/communities endpoint
   * to retrieve a filtered, sorted, and paginated list of communities based
   * on user preferences.
   *
   * It supports advanced search capabilities including full-text search,
   * filtering by public/private and NSFW status, and sorting by member count,
   * post count, or creation date.
   *
   * The implementation leverages database indexes on name, is_public, nsfw,
   * member_count, and post_count for performance.
   *
   * The operation is public-facing and does not require authentication for
   * basic features, but modifies filtering behavior based on user session:
   * authenticated users see both public and their subscribed private
   * communities when isPublic is null, while guests see only public
   * communities.
   *
   * This request structure is consumed by the community search API endpoint
   * to support the "community discovery" user journey.
   *
   * The request body directly maps to the fields in the
   * community_platform_communities table: name (searched), is_public
   * (isPublic), nsfw (isNsfw), member_count (sortBy=memberCount), post_count
   * (sortBy=postCount), and created_at (sortBy=createdAt).
   *
   * The page and limit parameters control pagination, which is required for
   * the performance requirement to load results under 2 seconds for the first
   * 50 posts.
   *
   * All fields must be used exactly as defined to ensure compatibility with
   * the underlying database schema and indexes. No additional fields can be
   * generated.
   */
  export type IRequest = {
    /**
     * Full-text search term to match against community names and
     * descriptions.
     *
     * This field enables users to find communities by keyword matching
     * across both the name and description fields.
     *
     * Because the Prisma schema includes trigram indexing on name and
     * description with gin_trgm_ops, this field leverages the database's
     * full-text search capabilities for efficient fuzzy matching.
     *
     * The search term can be partial and does not need to match exactly.
     *
     * Example: "gaming" will match "r/gaming" and "gaming community" in
     * descriptions.
     *
     * This is used for community discovery and should support the "hot" and
     * "top" list scalings defined in the business rules by allowing search
     * across all communities rather than limiting to subscriptions only.
     *
     * The implementation uses the GIN index on these fields to support fast
     * search performance, as required by the performance requirement of
     * under 2 seconds for 50 results.
     *
     * This field corresponds directly to the name and description columns
     * of community_platform_communities table and must not include any
     * other fields as they are not part of the schema.
     */
    search?: string | undefined;

    /**
     * Filter communities by public visibility status.
     *
     * When true, returns only public communities (is_public = true). When
     * false, returns only private communities (is_public = false). When
     * null, returns all communities regardless of visibility.
     *
     * This corresponds to the is_public boolean field in the
     * community_platform_communities table.
     *
     * For anonymous users, this parameter will be forced to true to enforce
     * privacy, as private communities must be subscribed to be viewed. For
     * authenticated users, the parameter can be null to return both public
     * and private (subscribed) communities.
     *
     * The filter interacts with the community_platform_subscriptions table:
     * if the user is authenticated and the isPublic parameter is null, the
     * system will return public communities plus any private communities
     * from the user's subscriptions.
     *
     * This design enforces the platform's privacy model as required by the
     * business rules and security requirements.
     */
    isPublic?: boolean | undefined;

    /**
     * Filter communities by NSFW (Not Safe For Work) content status.
     *
     * When true, returns only NSFW communities (nsfw = true). When false,
     * returns only non-NSFW communities (nsfw = false). When null, returns
     * all communities without NSFW filtering.
     *
     * This corresponds to the nsfw boolean field in the
     * community_platform_communities table.
     *
     * When the parameter is true, only users with explicit NSFW content
     * viewing enabled in their client settings will see the results, as
     * required by business security requirements for content filtering.
     *
     * This field allows users to discover communities based on content
     * classification without having to view the community directly first.
     *
     * This restriction is applied server-side and is independent of the
     * user's subscription status or authentication.
     */
    isNsfw?: boolean | undefined;

    /**
     * Field to sort the resulting list of communities by.
     *
     * Valid values are: 'memberCount', 'postCount', 'createdAt'.
     *
     * This controls the ordering of the returned communities in the
     * paginated list.
     *
     * - 'memberCount': Sorts communities by the number of subscribers, from
     *   highest to lowest.
     * - 'postCount': Sorts communities by the number of posts, from highest
     *   to lowest.
     * - 'createdAt': Sorts communities chronologically by creation date, with
     *   newest first.
     *
     * These sort options correspond directly to the member_count and
     * post_count integer fields and created_at timestamp field in the
     * community_platform_communities table.
     *
     * The sort parameters drive the community discovery experience and are
     * designed to match the "top" and "hot" ranking algorithms in the
     * business rules. Sorting by memberCount and postCount contribute to
     * the long-tail content distribution metric (KDE) by promoting
     * established communities.
     *
     * The order is always descending (highest to lowest, newest to oldest),
     * as defined by the post sorting algorithm guidelines.
     *
     * Default value: 'memberCount'.
     */
    sortBy?: "memberCount" | "postCount" | "createdAt" | undefined;

    /**
     * The page number to retrieve, starting from 1.
     *
     * This parameter controls pagination and enables clients to navigate
     * through large result sets.
     *
     * Combined with the limit parameter, it determines the offset for
     * database querying.
     *
     * The implementation uses offset-limit pagination, referencing the
     * performance requirement of under 2 seconds for 50 results, and
     * supports infinite scrolling.
     *
     * The page value is enforced to be at least 1, and any value less than
     * 1 will be treated as 1.
     *
     * This corresponds to the standard IPage<T> container type pattern.
     *
     * Example: page=2 and limit=50 retrieves records 51-100.
     *
     * This request structure is required for the full-text community search
     * endpoint.
     */
    page: number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>;

    /**
     * The number of communities to return per page.
     *
     * This parameter restricts the result size to prevent excessive payload
     * sizes and maintain performance.
     *
     * The limit must be between 1 and 100, as defined by the maximum
     * allowed items per page.
     *
     * This enforces the post sorting performance requirement of under 2
     * seconds for 50 results.
     *
     * The default value is 50, matching the standard client-side loading
     * pattern of 50 items per screen.
     *
     * This corresponds to the limit field in the
     * IPage<ICommunityPlatformCommunity.ISummary> container type.
     *
     * Example: limit=10 returns only the first 10 matches in the current
     * page.
     *
     * Increasing the limit beyond 50 may impact the service performance if
     * the database indexes are not optimized for larger result sets.
     */
    limit: number &
      tags.Type<"int32"> &
      tags.Default<50> &
      tags.Minimum<1> &
      tags.Maximum<100>;
  };

  /**
   * Request body schema for creating a new community.
   *
   * This object defines the data structure required to create a new community
   * on the platform. It includes the mandatory community name and an optional
   * description field.
   *
   * The schema enforces business rules around community naming conventions
   * and provides structured data for the system to validate before creating a
   * new community record.
   *
   * Upon successful creation, the system generates a unique UUID for the
   * community (id field) and sets default values for other fields like
   * is_public, nsfw, post_review_mode, and comment_review_mode as defined in
   * the community_platform_communities table.
   *
   * This schema directly maps to the community_platform_communities table in
   * the Prisma schema, with only the name and description fields being
   * specified by the user.
   *
   * Related to:
   *
   * - ICommunityPlatformCommunity: The full community entity returned after
   *   creation
   * - ICommunityPlatformCommunity.ISummary: A minimal representation for lists
   * - Community_platform_communities: The underlying database table
   */
  export type ICreate = {
    /**
     * The unique, case-insensitive name identifier for the community (e.g.,
     * 'technology', 'gaming'). Must be unique across the platform and
     * follow naming conventions (alphanumeric and hyphens only).
     *
     * This field corresponds to the 'name' column in the
     * community_platform_communities table. The name is used as the primary
     * identifier for community discovery and must be unique system-wide.
     *
     * Business rule constraints:
     *
     * - Must be at least 3 characters long
     * - Must contain only alphanumeric characters and hyphens
     * - Must not start or end with a hyphen
     * - Must not be a reserved keyword (e.g., 'admin', 'moderator')
     * - Must be unique across all existing communities
     *
     * This is a required field for community creation. The system validates
     * this field against the unique constraint in the database to prevent
     * duplicate community names. The field is indexed for efficient search
     * performance.
     *
     * Examples:
     *
     * - Valid: 'technology', 'gaming', 'nature-photography'
     * - Invalid: 'Tech', 'gaming!', 'my community', '-community'
     */
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<50> &
      tags.Pattern<"^[a-zA-Z0-9-]+$"> &
      tags.JsonSchemaPlugin<{
        "x-autobe-prisma-schema": "community_platform_communities";
      }>;

    /**
     * A brief description of the community's purpose and rules, displayed
     * to users.
     *
     * This field corresponds to the 'description' column in the
     * community_platform_communities table. It provides a concise overview
     * of what the community is about and its specific rules or guidelines.
     *
     * This is an optional field that can be left empty during creation.
     * Users can add or modify the description later through the community
     * settings update endpoint.
     *
     * When populated, this description helps potential subscribers
     * understand the community's focus and culture. The description
     * supports plain text only with no HTML formatting.
     *
     * Example: "A community for discussing the latest in technology trends
     * and innovations."
     */
    description?:
      | (string &
          tags.MinLength<0> &
          tags.MaxLength<1000> &
          tags.JsonSchemaPlugin<{
            "x-autobe-prisma-schema": "community_platform_communities";
          }>)
      | undefined;
  };

  /**
   * A summary representation of a community for list views and discovery.
   *
   * This schema is designed to provide minimal, optimized data for displaying
   * communities in search results, home feeds, and community lists. It
   * includes only the fields essential for user identification and
   * decision-making when choosing which communities to explore.
   *
   * The summary excludes detailed information such as community rules,
   * avatar, banner, or moderator lists to minimize payload size and improve
   * performance during large-scale listing operations.
   *
   * This type directly maps to the community_platform_communities table in
   * the Prisma schema, and every property corresponds to an actual field in
   * that table. No additional properties are included that would require new
   * database columns.
   *
   * Use this type when paginating over hundreds of communities or showing
   * community summaries in a feed.
   *
   * For full details about a community, use the ICommunityPlatformCommunity
   * type.
   *
   * Business logic ensures that for private communities (is_public=false),
   * the member_count is not disclosed to unauthenticated users or
   * non-subscribers. The full set of data is only returned when the user is
   * authenticated and subscribed to the community.
   */
  export type ISummary = {
    /**
     * Unique identifier of the community.
     *
     * This UUID is the primary key and uniquely identifies each community
     * on the platform. It is generated by the system upon creation and
     * remains immutable throughout the community's lifecycle.
     *
     * The id is used in all API endpoints to reference the specific
     * community for operations such as retrieval, updates, and moderation
     * actions.
     *
     * Strictly follows the Prisma schema definition where the id field is a
     * String with @id and @db.Uuid annotations.
     *
     * No additional fields can be inferred or added as they would require
     * database schema changes.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The unique, case-insensitive name identifier for the community.
     *
     * This serves as the community's public handle and is used in URLs
     * (e.g., /r/communityname). It must be unique across the platform and
     * follow naming conventions (alphanumeric and hyphens only).
     *
     * This field corresponds to the 'name' column in the
     * community_platform_communities table and has a unique constraint in
     * the database.
     *
     * The name should be kept concise, descriptive, and relevant to the
     * community's topic. It cannot contain spaces or special characters
     * except hyphens, and must be between 3 and 20 characters long as per
     * business rules.
     *
     * Changes to the name are not permitted after creation, and any attempt
     * to modify this field will be rejected. This ensures permanent, stable
     * URLs and avoids confusion in community discovery.
     */
    name: string;

    /**
     * A brief description of the community's purpose and rules.
     *
     * This field provides a concise summary of the community's focus and
     * guidelines. It is visible to all users on the community listing and
     * detail pages.
     *
     * It is optional and may be null if no description has been provided by
     * the creator. When present, it is limited to 400 characters for
     * display purposes.
     *
     * This field maps directly to the 'description' column in the
     * community_platform_communities table and has no constraints beyond
     * length limits defined in business rules.
     *
     * The description' is intended for discoverability and onboarding, not
     * for detailed rules, which are stored in the separate
     * community_platform_community_settings.rules field.
     */
    description?: string | null | undefined;

    /**
     * Flag indicating whether the community is publicly visible and
     * joinable.
     *
     * When true, the community appears in public listings, search results,
     * and feeds to all users. When false, it is a private or restricted
     * community that can only be accessed by invited or subscribed
     * members.
     *
     * This field corresponds to the 'is_public' column in the
     * community_platform_communities table.
     *
     * All communities are created as public by default. The creator or
     * admin can change this setting later based on moderation needs.
     * Private communities require subscription for access and are hidden
     * from public views.
     *
     * For authenticated users, both public and subscribed private
     * communities are included in personalized feeds, but unauthenticated
     * guests can only view public communities.
     */
    is_public: boolean;

    /**
     * Flag indicating whether the community contains Not Safe For Work
     * content.
     *
     * When true, the community contains adult, explicit, or sensitive
     * material that may not be appropriate for all users. When false, all
     * content is considered safe for general viewing.
     *
     * This field corresponds to the 'nsfw' column in the
     * community_platform_communities table.
     *
     * Users must explicitly enable NSFW content viewing for their account
     * to see content from these communities. This flag does not restrict
     * access to members—those who are subscribed to the community can view
     * its content regardless of their NSFW settings. The flag primarily
     * controls content filtering in feeds and listings for
     * non-subscribers.
     */
    nsfw: boolean;

    /**
     * The current number of users subscribed to this community.
     *
     * This count represents active subscriptions maintained in the
     * community_platform_subscriptions table where deleted_at is null and
     * active is true.
     *
     * It is updated automatically on subscription and unsubscription and
     * serves as a key metric for community popularity and activity.
     *
     * This field corresponds exactly to the 'member_count' column in the
     * community_platform_communities table and is denormalized for
     * performance optimization to avoid expensive real-time calculation
     * during feed rendering.
     *
     * The count is capped at the system limit defined in
     * community_platform_platform_settings.max_community_members (default
     * 1,000) to prevent performance degradation in large communities.
     */
    member_count: number & tags.Type<"int32">;

    /**
     * The total number of posts created in this community.
     *
     * This count includes all published posts that have not been removed or
     * archived and is updated automatically upon each post creation or
     * deletion.
     *
     * It serves as a measure of community activity and helps users gauge
     * the level of engagement within a community.
     *
     * This field corresponds to the 'post_count' column in the
     * community_platform_communities table and is denormalized for
     * efficient display in listing views.
     *
     * This count does not include posts with 'unreviewed', 'removed', or
     * 'archived' status; only 'published' posts are counted.
     */
    post_count: number & tags.Type<"int32">;
  };
}
