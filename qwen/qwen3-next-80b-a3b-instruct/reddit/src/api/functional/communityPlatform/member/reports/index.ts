import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformReport } from "../../../../structures/ICommunityPlatformReport";

/**
 * Retrieve a specific content report by ID.
 *
 * This operation fetches detailed information about a specific content report
 * identified by its unique reportId. The response includes the report's status
 * (pending, dismissed, removed, escalated), the reason category selected by the
 * reporter, optional additional context provided by the reporter, and
 * timestamps for when the report was created and last updated.
 *
 * For security and privacy compliance, the reporter's identity is anonymized
 * from the content author and appears only as a user ID in the response, not as
 * a username or email. This protects reporters from potential retaliation while
 * still allowing administrators to audit report origins.
 *
 * A successful response returns the complete report record as defined in the
 * Prisma schema's community_platform_reports table. This includes the reported
 * content ID (post or comment), the reporter ID, the report reason (mapped to
 * the community_platform_report_categories table), and the current status.
 *
 * This operation requires authentication as a member, moderator, or admin.
 * Regular members can view reports they themselves submitted, while moderators
 * and admins can view any report on their assigned communities or the platform
 * respectively.
 *
 * @param props.connection
 * @param props.reportId The unique identifier of the report to retrieve. Must
 *   be a valid UUID conforming to RFC 4122.
 * @path /communityPlatform/member/reports/:reportId
 * @accessor api.functional.communityPlatform.member.reports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier of the report to retrieve. Must be a valid UUID
     * conforming to RFC 4122.
     */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformReport;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): ICommunityPlatformReport =>
    typia.random<ICommunityPlatformReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Submit a report on a post or comment.
 *
 * This operation enables authenticated members to formally report content they
 * believe violates community guidelines. The report must specify the category
 * of the violation using the `report_reason` field, which must be one of the
 * pre-defined values from community_platform_report_categories: "spam",
 * "harassment", "inappropriate", or "other". This field maps directly to the
 * `name` field in the report categories table.
 *
 * The system infers the target type from which ID is provided:
 *
 * - If `reported_content_id` is provided, the target is a post
 * - If `reported_comment_id` is provided, the target is a comment
 * - Exactly one of these fields MUST be provided; submitting both or neither is
 *   invalid
 *
 * The reporter's identity is recorded anonymously to the content author but
 * retained for audit purposes as required by GDPR and platform compliance
 * policies. The report is immediately queued for moderator review.
 *
 * The post or comment being reported must exist and be publicly visible. If the
 * content has already been removed or deleted, the submission is rejected with
 * an appropriate error. The report may include optional notes (up to 500
 * characters) to provide additional context to moderators, which are stored in
 * `report_notes`.
 *
 * All reports are logged in the community_platform_reports table and trigger
 * events for analytics and audit logging. The operation supports rate limiting
 * per user (max 10 reports per day) as specified in platform settings. If the
 * user exceeds this limit, the operation returns a 429 Too Many Requests
 * error.
 *
 * Successful report submission returns a 201 Created status with the report
 * objectâ€™s ID and status. The operation does not return the full post or
 * comment content, preserving privacy and reducing payload size. Content
 * visibility is immediately affected if automated moderation systems classify
 * it as high-risk (high toxicity_score or spam_score from Perspective API), but
 * this decision is in the background and does not alter the API response to the
 * reporter.
 *
 * Related Operations: This operation is preceded by viewing a post or comment
 * (GET /posts/{postId} or GET /comments/{commentId}) and is followed by
 * moderator actions via GET /reports/{reportId} and PUT
 * /reports/{reportId}/actions. This operation must be initiated before any
 * moderation actions can occur.
 *
 * @param props.connection
 * @param props.body Payload containing the details of the content report,
 *   including the target content ID, report category, and optional additional
 *   context.
 * @path /communityPlatform/member/reports
 * @accessor api.functional.communityPlatform.member.reports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload containing the details of the content report, including the
     * target content ID, report category, and optional additional context.
     */
    body: ICommunityPlatformReport.ICreate;
  };
  export type Body = ICommunityPlatformReport.ICreate;
  export type Response = ICommunityPlatformReport;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/reports";
  export const random = (): ICommunityPlatformReport =>
    typia.random<ICommunityPlatformReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
