import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";

/**
 * Create a new community on the platform. When a member submits a new community
 * name, the system validates that the name is unique and adheres to the
 * following rules: Community names must be between 3 and 50 characters long,
 * contain only alphanumeric characters and hyphens, and must not start or end
 * with a hyphen. The system also checks that the name is not a reserved keyword
 * (e.g., "admin", "moderator"). If validation passes, the system creates a new
 * community record in the community_platform_communities table with is_public
 * set to true, nsfw set to false, and default values for moderation settings
 * (post_review_mode and comment_review_mode). The system automatically assigns
 * the authenticated user as the primary moderator by creating a record in the
 * community_platform_moderator table linking the member to the new community. A
 * corresponding community_platform_community_settings record is created with
 * default formatting options and a timestamp for creation. The community is
 * immediately activated in the platform and appears in public listings.
 * Security considerations include ensuring only authenticated members can
 * create communities and preventing role escalation through community creation.
 * Related API operations include GET /communities to list public communities
 * and PUT /communities/{communityId} to update community settings after
 * creation.
 *
 * @param props.connection
 * @param props.body Request body containing the details for creating a new
 *   community.
 * @path /communityPlatform/member/communities
 * @accessor api.functional.communityPlatform.member.communities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Request body containing the details for creating a new community. */
    body: ICommunityPlatformCommunity.ICreate;
  };
  export type Body = ICommunityPlatformCommunity.ICreate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/communities";
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
