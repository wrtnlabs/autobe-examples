import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunitySettings } from "../../../../structures/ICommunityPlatformCommunitySettings";

/**
 * Update a community's settings.
 *
 * Update the configuration settings for an existing community. This operation
 * allows a community moderator or platform administrator to modify the
 * community's display title, description, banner and icon URLs, rules, and
 * moderation preferences. The operation requires the authenticated user to have
 * moderator privileges for this specific community, enforced through the
 * community_platform_moderator table. The system validates that the request
 * comes from a valid moderator or admin and that the community exists and has
 * not been deleted. The operation updates the
 * community_platform_community_settings record linked to the community through
 * community_platform_community_id, adjusting fields such as title, banner_url,
 * icon_url, rules, moderator_invite_only, and allow_self_post. It also updates
 * the updated_at timestamp. The base community infrastructure (name,
 * created_at) remains immutable. Security considerations include ensuring only
 * authorized moderators can change settings and preventing unauthorized access
 * through the community view. Related API operations include GET
 * /communities/{communityId} to retrieve the current settings and POST
 * /communities to create a new community.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the community to update.
 * @param props.body Request body containing the updated settings for the
 *   community.
 * @path /communityPlatform/moderator/communities/:communityId
 * @accessor api.functional.communityPlatform.moderator.communities.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the community to update. */
    communityId: string & tags.Format<"uuid">;

    /** Request body containing the updated settings for the community. */
    body: ICommunityPlatformCommunitySettings.IUpdate;
  };
  export type Body = ICommunityPlatformCommunitySettings.IUpdate;
  export type Response = ICommunityPlatformCommunitySettings;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/moderator/communities/:communityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunitySettings =>
    typia.random<ICommunityPlatformCommunitySettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
