import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformReport } from "../../../../structures/ICommunityPlatformReport";
import { IPageICommunityPlatformReport } from "../../../../structures/IPageICommunityPlatformReport";

/**
 * Retrieve a specific content report by ID.
 *
 * This operation fetches detailed information about a specific content report
 * identified by its unique reportId. The response includes the report's status
 * (pending, dismissed, removed, escalated), the reason category selected by the
 * reporter, optional additional context provided by the reporter, and
 * timestamps for when the report was created and last updated.
 *
 * For security and privacy compliance, the reporter's identity is anonymized
 * from the content author and appears only as a user ID in the response, not as
 * a username or email. This protects reporters from potential retaliation while
 * still allowing administrators to audit report origins.
 *
 * A successful response returns the complete report record as defined in the
 * Prisma schema's community_platform_reports table. This includes the reported
 * content ID (post or comment), the reporter ID, the report reason (mapped to
 * the community_platform_report_categories table), and the current status.
 *
 * This operation requires authentication as a member, moderator, or admin.
 * Regular members can view reports they themselves submitted, while moderators
 * and admins can view any report on their assigned communities or the platform
 * respectively.
 *
 * @param props.connection
 * @param props.reportId The unique identifier of the report to retrieve. Must
 *   be a valid UUID conforming to RFC 4122.
 * @path /communityPlatform/moderator/reports/:reportId
 * @accessor api.functional.communityPlatform.moderator.reports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier of the report to retrieve. Must be a valid UUID
     * conforming to RFC 4122.
     */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformReport;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/moderator/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/moderator/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): ICommunityPlatformReport =>
    typia.random<ICommunityPlatformReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and filter content reports with advanced criteria.
 *
 * This operation provides a comprehensive search interface across all reported
 * content on the platform. Unlike a simple GET, it accepts a complex request
 * body containing search filters, pagination parameters, and sorting options to
 * efficiently query reports without overloading the API.
 *
 * The request body allows filtering by reporter user ID, target type ('post' or
 * 'comment'), status ('pending', 'dismissed', 'removed', 'escalated'), report
 * reason (mapped to community_platform_report_categories), and date ranges for
 * created_at/updated_at. Sorting can be performed by creation date, update
 * date, popularity of the target post, or number of moderator actions taken.
 *
 * Pagination is handled with a limit and offset system, with a default limit of
 * 25 reports per page and a maximum limit of 100. Results are sorted by
 * creation date (newest first) by default but can be reordered based on other
 * criteria specified in the request.
 *
 * The response returns a paginated list of reports with only the essential
 * data: report ID, target type, target ID, reporter ID, status, report reason,
 * creation timestamp, and update timestamp. This minimizes response size. For
 * full detail, clients should use the GET /reports/{reportId} endpoint with
 * individual report IDs.
 *
 * Access to this endpoint is restricted to moderators and administrators.
 * Regular members cannot perform cross-report searches for privacy and security
 * reasons, though they can only view reports they themselves submitted via the
 * /reports/{reportId} endpoint.
 *
 * @param props.connection
 * @param props.body Search filter criteria, pagination parameters, and sorting
 *   options for querying reports.
 * @path /communityPlatform/moderator/reports
 * @accessor api.functional.communityPlatform.moderator.reports.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search filter criteria, pagination parameters, and sorting options
     * for querying reports.
     */
    body: ICommunityPlatformReport.IRequest;
  };
  export type Body = ICommunityPlatformReport.IRequest;
  export type Response = IPageICommunityPlatformReport;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/moderator/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/moderator/reports";
  export const random = (): IPageICommunityPlatformReport =>
    typia.random<IPageICommunityPlatformReport>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
