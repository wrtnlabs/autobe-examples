import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Permanently delete a specific comment and its nested replies.
 *
 * This operation permanently removes a specified comment from the system, along
 * with all of its nested replies. Unlike systems with soft deletion
 * capabilities, the communityPlatform schema lacks a deleted_at column and
 * implements only hard deletion. This means the comment is permanently removed
 * from the database with no possibility of recovery, and all associated votes,
 * audit logs, and notification records are also purged.
 *
 * Security considerations require that only the original author of the comment
 * or a system administrator may initiate this deletion. The system implements a
 * check to ensure the authenticated user matches the comment's author_id field.
 * If the user is not the author and is not an administrator, the operation will
 * fail with a permission denied error regardless of authentication status.
 *
 * This operation affects the comment_count field of the parent post
 * (community_platform_posts), which will be decremented by 1. The karma score
 * for the comment's author will be recalculated to remove any upvotes or
 * downvotes received on this comment. Additionally, any references to this
 * comment in the community_platform_notification_queue will be removed and the
 * associated notification will be marked as deleted.
 *
 * This operation must not trigger a moderation action or report update, as
 * deletion is not considered a moderation action but a user-initiated removal.
 * The deletion is instantaneous and does not require review. This behavior
 * aligns with the business requirements specified in section 8.8 of the
 * functional requirements document, which states that users may delete their
 * own comments at any time.
 *
 * Related API operations that might be used together include retrieving the
 * comment details before deletion (GET /posts/{postId}/comments/{commentId}) to
 * confirm content, and retrieving the parent post to verify context before
 * deletion.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post containing the comment.
 * @param props.commentId Unique identifier of the comment to be deleted.
 * @path /communityPlatform/admin/posts/:postId/comments/:commentId
 * @accessor api.functional.communityPlatform.admin.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the post containing the comment. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
