import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../structures/IPageICommunityPlatformCommunity";

/**
 * Search and retrieve a filtered, sorted, and paginated list of communities.
 *
 * Retrieve a paginated, filtered, and sorted list of public and user-subscribed
 * communities based on advanced criteria. This operation supports comprehensive
 * search capabilities for discovering communities by name or description
 * keywords, filtering by visibility (public/private), NSFW status, and sorting
 * by member count, post count, or creation date. The operation queries the
 * community_platform_communities table, using its indexed fields for optimal
 * performance. For unauthorized users, only public communities (is_public =
 * true) are returned. For authenticated users, both public and subscribed
 * private communities are included based on community_platform_subscriptions
 * join. This matches the performance requirements of under 2 seconds for 50
 * results and supports infinite scrolling. The operation also respects the
 * platform's max_community_members limit in results to prevent excessively
 * large response sizes. Authorization roles are empty as this is a
 * public-facing discovery endpoint, though internal business logic filters
 * results based on session state.
 *
 * This endpoint is crucial for user onboarding and engagement, allowing new
 * users to find communities matching their interests and existing users to
 * discover new content. It supports the "hot" and "top" list scalings defined
 * in the business rules by allowing clients to sort by member_count and
 * post_count. The trigram indexing on name and description enables efficient
 * fuzzy matching for search queries.
 *
 * The operation returns community summary data including only essential fields
 * to minimize payload size. It excludes sensitive fields like the description
 * (unless specifically requested) and does not include relationships to
 * moderators or settings to prevent unintended data leakage. The response uses
 * IPageICommunityPlatformCommunity.ISummary to ensure consistent output format
 * across all list endpoints.
 *
 * Related operations:
 *
 * - GET /communities/{communityId} retrieves detailed information about a
 *   specific community, which might be reached after selecting from this list.
 * - PATCH /communities/{communityId}/subscribe allows users to add a community to
 *   their subscription list after discovering it via this search.
 * - PATCH /users/{userId}/subscriptions retrieves a user's subscribed communities
 *   list, which may be merged with this search for personalized feeds.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for community
 *   filtering
 * @path /communityPlatform/communities
 * @accessor api.functional.communityPlatform.communities.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for community filtering */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific community.
 *
 * Fetch the complete details of a single community identified by its unique
 * UUID. This operation reads from the community_platform_communities table,
 * which is the core entity representing each community on the platform. It
 * retrieves the community's name, description, creation timestamp, is_public
 * flag (determining visibility), nsfw flag (controlling explicit content
 * filters), post_review_mode and comment_review_mode settings (determining
 * moderation requirements), member_count, and post_count.
 *
 * For optimal performance and data consistency, this operation also performs a
 * left join with the community_platform_community_settings table to retrieve
 * optional customizations such as the display title, banner_url, icon_url, and
 * rules. These settings are nullable and only included if available, ensuring
 * backward compatibility with communities that have not been customized.
 *
 * Authorization is enforced based on the community's is_public flag and the
 * user's authentication state and subscription status:
 *
 * - Public communities (is_public = true): Accessible to all users, including
 *   guests
 * - Private communities (is_public = false): Only accessible to authenticated
 *   users who are subscribed to the community via
 *   community_platform_subscriptions
 * - Non-subscribed users attempting to access a private community are denied
 *   access
 *
 * This design protects user privacy while still permitting organic community
 * discovery. The returned payload includes all immediately relevant metadata
 * for display on a community detail page, including statistics like
 * member_count and post_count to give users context about the community's size
 * and activity.
 *
 * The operation does not return relationships to posts, comments, or moderators
 * to prevent N+1 query problems and maintain response performance under 2
 * seconds. Related operations like GET /communities/{communityId}/posts or GET
 * /communities/{communityId}/moderators can be called separately if needed.
 *
 * Provisioned response schema ICommunityPlatformCommunity ensures data type
 * consistency and alignment with the Prisma schema, and no fields are omitted
 * or inferred â€” all field usage strictly follows the existing database
 * structure.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the target community in
 *   UUID format
 * @path /communityPlatform/communities/:communityId
 * @accessor api.functional.communityPlatform.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the target community in UUID format */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
