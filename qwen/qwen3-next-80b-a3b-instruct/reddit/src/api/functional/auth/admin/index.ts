import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdmin } from "../../../structures/ICommunityPlatformAdmin";

/**
 * Refresh the access token for an admin user's authenticated session.
 *
 * This API operation refreshes the access token for an admin user by validating
 * the stored refresh token. The refresh token must be provided in an HTTP-only,
 * Secure, SameSite=Strict cookie and is validated against the stored
 * refresh_token_hash in the community_platform_user_sessions table. The system
 * verifies that the session is active (is_active = true) and that the
 * session_expiry is in the future (greater than current server time).
 *
 * The refresh token uses the same cryptographic key as the access token to
 * generate and validate the JWT signature. A new, short-lived (15-minute)
 * access token is generated and returned in the Authorization header as a
 * bearer token, while the refresh token remains unchanged. The updated_at
 * timestamp in the community_platform_user_sessions table is updated to reflect
 * the token refresh event, maintaining session continuity without changing the
 * underlying session state.
 *
 * This operation does not reset the session expiry or re-authenticate the
 * user's credentials. It occurs server-side using the stored refresh_token_hash
 * values without requiring user input beyond the existing session cookie. This
 * leverages the existing community_platform_user_sessions schema fields:
 * refresh_token_hash for validation, session_expiry to check validity,
 * is_active to confirm session status, and updated_at to record refresh
 * events.
 *
 * The operation follows the security best practice of token rotation to reduce
 * the risk of compromise. The refresh token remains valid for 7 days from
 * initial login, after which the user must re-authenticate through the login
 * endpoint.
 *
 * @param props.connection
 * @param props.body Refresh request with no additional data required (refresh
 *   token is included in HTTP-only cookie).
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh request with no additional data required (refresh token is
     * included in HTTP-only cookie).
     */
    body: ICommunityPlatformAdmin.IRefresh;
  };
  export type Body = ICommunityPlatformAdmin.IRefresh;
  export type Response = ICommunityPlatformAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): ICommunityPlatformAdmin.IAuthorized =>
    typia.random<ICommunityPlatformAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
