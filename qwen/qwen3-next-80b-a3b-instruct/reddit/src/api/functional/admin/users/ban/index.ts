import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdmin } from "../../../../structures/ICommunityPlatformAdmin";

/**
 * Permanently ban a user from the entire communityPlatform system.
 *
 * This API operation authorizes a system administrator to perform a system-wide
 * ban on any user account. When invoked, the system validates that the
 * requester has admin privileges in the community_platform_admin table. The
 * target user is identified by their member_id, which is verified in the
 * community_platform_member table to ensure existence and confirm the account
 * is active (deleted_at is null).
 *
 * The operation then updates the community_platform_member record for the
 * target user by setting the deleted_at field to the current timestamp,
 * effectively soft-deleting the account. This immediately revokes all
 * permissions, removes access to the platform, and prevents authentication. The
 * system also invalidates all active sessions for this user by setting
 * is_active to false in all entries in the community_platform_user_sessions
 * table.
 *
 * The operation logs this action in the community_platform_audit_logs table
 * with actor_user_id as the banning admin, target_user_id as the banned user,
 * and action_description set to 'Admin banned user'. Simultaneously, a
 * notification is sent to the banned user via the
 * community_platform_notifications table if email notification is enabled.
 *
 * The description references key schema fields: deleted_at for account
 * deactivation, user_sessions for session invalidation, and audit_logs for
 * compliance tracking. The ban is irreversible without database intervention,
 * ensuring disciplinary actions are permanent. User data is preserved in the
 * system for compliance purposes, but becomes inaccessible to the user.
 *
 * @param props.connection
 * @param props.userId The UUID of the user to be banned from the entire system.
 * @param props.body An optional reason for the ban, which will be included in
 *   the audit log and notification.
 * @path /admin/users/:userId/ban
 * @accessor api.functional.admin.users.ban.banUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function banUser(
  connection: IConnection,
  props: banUser.Props,
): Promise<banUser.Response> {
  return true === connection.simulate
    ? banUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...banUser.METADATA,
          path: banUser.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace banUser {
  export type Props = {
    /** The UUID of the user to be banned from the entire system. */
    userId: string & tags.Format<"uuid">;

    /**
     * An optional reason for the ban, which will be included in the audit
     * log and notification.
     */
    body: ICommunityPlatformAdmin.IBanReason;
  };
  export type Body = ICommunityPlatformAdmin.IBanReason;
  export type Response = ICommunityPlatformAdmin.IUserBanStatus;

  export const METADATA = {
    method: "POST",
    path: "/admin/users/:userId/ban",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/admin/users/${encodeURIComponent(props.userId ?? "null")}/ban`;
  export const random = (): ICommunityPlatformAdmin.IUserBanStatus =>
    typia.random<ICommunityPlatformAdmin.IUserBanStatus>();
  export const simulate = (
    connection: IConnection,
    props: banUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: banUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
