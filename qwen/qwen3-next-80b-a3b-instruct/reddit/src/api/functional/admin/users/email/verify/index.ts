import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdmin } from "../../../../../structures/ICommunityPlatformAdmin";

/**
 * Force email verification for any user account to grant posting privileges
 * immediately.
 *
 * This API operation grants a system administrator the ability to forcibly
 * verify any user's email address, overriding the standard email verification
 * workflow. The admin authenticates and submits a request with the target
 * user's member_id from the community_platform_member table.
 *
 * The system validates that the requester has admin privileges in the
 * community_platform_admin table and that the target user exists in
 * community_platform_member. If the user's is_verified field is already true,
 * the operation does nothing and returns a success status. If is_verified is
 * false, the system updates the community_platform_member table by setting
 * is_verified to true and updates the updated_at timestamp to the current
 * time.
 *
 * The system also deletes any unexpired email verification records in the
 * community_platform_email_verifications table associated with this user, as
 * they are no longer needed. The change is logged in
 * community_platform_audit_logs table with actor_user_id as the admin,
 * target_user_id as the user, and action_description set to 'Admin forced email
 * verification for user'.
 *
 * This operation is crucial for administrative management, allowing trust-based
 * access for users who have valid external identity verification, or for
 * resolving technical issues with email delivery. It directly interacts with
 * the community_platform_member.is_verified field and modifies the state
 * according to the business requirement that admin overrides can bypass
 * standard verification.
 *
 * The description references the community_platform_admin,
 * community_platform_member, and community_platform_email_verifications tables
 * to ensure schema compliance and auditable changes.
 *
 * @param props.connection
 * @param props.userId The UUID of the user whose email verification should be
 *   forced.
 * @param props.body An optional note explaining the reason for forcing
 *   verification, included in the audit log.
 * @path /admin/users/:userId/email/verify
 * @accessor api.functional.admin.users.email.verify.forceVerifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function forceVerifyEmail(
  connection: IConnection,
  props: forceVerifyEmail.Props,
): Promise<forceVerifyEmail.Response> {
  return true === connection.simulate
    ? forceVerifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...forceVerifyEmail.METADATA,
          path: forceVerifyEmail.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace forceVerifyEmail {
  export type Props = {
    /** The UUID of the user whose email verification should be forced. */
    userId: string & tags.Format<"uuid">;

    /**
     * An optional note explaining the reason for forcing verification,
     * included in the audit log.
     */
    body: ICommunityPlatformAdmin.IForceVerifyNote;
  };
  export type Body = ICommunityPlatformAdmin.IForceVerifyNote;
  export type Response = ICommunityPlatformAdmin.IEmailVerified;

  export const METADATA = {
    method: "POST",
    path: "/admin/users/:userId/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/admin/users/${encodeURIComponent(props.userId ?? "null")}/email/verify`;
  export const random = (): ICommunityPlatformAdmin.IEmailVerified =>
    typia.random<ICommunityPlatformAdmin.IEmailVerified>();
  export const simulate = (
    connection: IConnection,
    props: forceVerifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: forceVerifyEmail.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
