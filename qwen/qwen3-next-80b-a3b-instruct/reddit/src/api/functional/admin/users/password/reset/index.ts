import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdmin } from "../../../../../structures/ICommunityPlatformAdmin";

/**
 * Trigger a password reset for any user account via admin-initiated request.
 *
 * This API operation provides authorized system administrators with the
 * capability to force a password reset for any user account on the
 * communityPlatform system. The admin authenticates and submits a request with
 * the target user's member_id from the community_platform_member table.
 *
 * The system generates a cryptographically secure, time-limited (15-minute)
 * reset token, which is stored in the community_platform_password_resets table
 * with the token_hash, expires_at, requested_at timestamps, and associated with
 * the target member_id. The plain token is sent to the user's registered email
 * via the SendGrid integration.
 *
 * The operation logs the action immediately in the
 * community_platform_audit_logs table with actor_user_id as the admin
 * initiator, target_user_id as the user whose password is being reset, and
 * action_description set to 'Admin initiated password reset for user'. This
 * ensures full accountability for all password reset requests.
 *
 * The operation differs from standard user-initiated password resynchronization
 * (which requires identity verification) by bypassing all identity verification
 * requirements due to the admin's elevated privileges. The target user is
 * notified via email, but cannot initiate the reset themselves. The actual
 * password is not changed until the user clicks the reset link.
 *
 * All actions reference specific community_platform_member,
 * community_platform_password_resets, and community_platform_audit_logs table
 * fields to ensure strict compliance with the schema and to prevent
 * unauthorized operations.
 *
 * @param props.connection
 * @param props.userId The UUID of the user whose password needs to be reset.
 * @param props.body An optional note explaining the reason for the password
 *   reset, included in the audit log.
 * @path /admin/users/:userId/password/reset
 * @accessor api.functional.admin.users.password.reset.resetPassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /** The UUID of the user whose password needs to be reset. */
    userId: string & tags.Format<"uuid">;

    /**
     * An optional note explaining the reason for the password reset,
     * included in the audit log.
     */
    body: ICommunityPlatformAdmin.IResetPasswordNote;
  };
  export type Body = ICommunityPlatformAdmin.IResetPasswordNote;
  export type Response = ICommunityPlatformAdmin.IPasswordResetInitiated;

  export const METADATA = {
    method: "POST",
    path: "/admin/users/:userId/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/admin/users/${encodeURIComponent(props.userId ?? "null")}/password/reset`;
  export const random = (): ICommunityPlatformAdmin.IPasswordResetInitiated =>
    typia.random<ICommunityPlatformAdmin.IPasswordResetInitiated>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
