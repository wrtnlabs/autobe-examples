import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdmin } from "../../../../structures/ICommunityPlatformAdmin";

/**
 * Restore a previously banned user's access to the entire communityPlatform
 * system.
 *
 * This API operation permits a system administrator to unban a previously
 * banned user account. The process begins with authentication validation to
 * confirm the requester has admin privileges in the community_platform_admin
 * table. The target user is identified by member_id, which is checked in the
 * community_platform_member table to verify that the deleted_at field is not
 * null, confirming the user is indeed banned.
 *
 * The system then updates the community_platform_member record by setting the
 * deleted_at field to null. This restores the user's account status, allowing
 * the user to log in again using their existing credentials, and reinstates all
 * previous site access rights including karma scoring and subscription
 * preferences. The system also updates all previously invalidated sessions by
 * setting is_active to true in the community_platform_user_sessions table for
 * the user's previous sessions.
 *
 * This action is logged in the community_platform_audit_logs table with
 * actor_user_id as the unbanning admin, target_user_id as the restored user,
 * and action_description set to 'Admin unbanned user'. The previous moderation
 * actions and content history remain preserved in the database, ensuring full
 * auditability and transparency.
 *
 * The description references the community_platform_member,
 * community_platform_user_sessions, and community_platform_audit_logs schemas
 * to confirm that the operation properly utilizes the deleted_at field for
 * state management and maintains data integrity through foreign key constraints
 * and audit trails.
 *
 * @param props.connection
 * @param props.userId The UUID of the user to be unbanned from the entire
 *   system.
 * @param props.body An optional reason for the unban, which will be included in
 *   the audit log and notification.
 * @path /admin/users/:userId/unban
 * @accessor api.functional.admin.users.unban.unbanUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function unbanUser(
  connection: IConnection,
  props: unbanUser.Props,
): Promise<unbanUser.Response> {
  return true === connection.simulate
    ? unbanUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...unbanUser.METADATA,
          path: unbanUser.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace unbanUser {
  export type Props = {
    /** The UUID of the user to be unbanned from the entire system. */
    userId: string & tags.Format<"uuid">;

    /**
     * An optional reason for the unban, which will be included in the audit
     * log and notification.
     */
    body: ICommunityPlatformAdmin.IUnbanReason;
  };
  export type Body = ICommunityPlatformAdmin.IUnbanReason;
  export type Response = ICommunityPlatformAdmin.IUserUnbanStatus;

  export const METADATA = {
    method: "POST",
    path: "/admin/users/:userId/unban",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/admin/users/${encodeURIComponent(props.userId ?? "null")}/unban`;
  export const random = (): ICommunityPlatformAdmin.IUserUnbanStatus =>
    typia.random<ICommunityPlatformAdmin.IUserUnbanStatus>();
  export const simulate = (
    connection: IConnection,
    props: unbanUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: unbanUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
