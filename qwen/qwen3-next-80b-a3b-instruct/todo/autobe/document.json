{"operations":[{"specification":"Authentication operation for user registration. Creates a new user account with a system-generated ID. This operation is public and does not require prior authentication, as the system is designed as a single-user application with no authentication mechanism. The operation returns a JWT token that contains the user's ID in the payload for client-side recognition. The operation corresponds to the todo_list_user entity in the Prisma schema, which contains id, created_at, and updated_at fields, but does not include username, email, or password fields.","authorizationType":"join","description":"This API operation handles user registration for the Todo List application. The system operates as a single-user personal application where no authentication is required, but a persistent identity mechanism is needed to maintain task data between sessions. When a user first accesses the application, this operation creates a new todo_list_user record with a system-generated UUID and timestamps. The user's identity is maintained through a JWT token issued upon successful registration, which contains the user ID in its payload. The operation uses the todo_list_user table from the Prisma schema, which defines fields for id (UUID), created_at, and updated_at, but does not include any authentication fields such as email, password, or username, as these are not part of the application design. The registration process is designed to be transparent to the user, occurring automatically when the application is first loaded, with no user-facing registration form or interaction required.\n\nThe system implements an implicit identity model where the user's identity is tied to their browser device, with no external login or credential collection. The todo_list_user table maintains the single user record, and the registration operation ensures this record exists and is properly initialized. Since the schema has no password or credential fields, the application does not implement any credential validation or secure storage mechanisms.\n\nThe JWT token returned includes the user ID in the payload and is stored in browser localStorage to maintain session state. This allows the application to restore the user context upon subsequent visits without prompting for authentication. The operation does not create, modify, or validate any user credentials as none are defined in the schema.\n\nThe implementation aligns with the business requirements that specify a single-user system with no authentication mechanism, using the todo_list_user table to maintain a persistent identifier for the user. No password reset, email verification, or account management operations are supported or needed, as these features are explicitly excluded from the system design.","summary":"Creates a new user account for the Todo List application to establish a persistent device-bound identity without requiring user credentials.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a JWT token that contains the user's ID in the payload for client-side identity recognition in the single-user Todo List application. The token is issued upon successful user registration and allows the application to maintain session state across browser sessions without requiring user authentication.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"Authentication operation for user login. This operation validates the existing todo_list_user identity by returning a new JWT token after confirming the user's browser/device identity. Though the system is single-user with no credentials, this operation maintains session state by renewing the authentication token. The operation corresponds to the todo_list_user entity in the Prisma schema, which has id, created_at, and updated_at fields but no authentication credentials.","authorizationType":"login","description":"This API operation handles user authentication for the Todo List application, serving as a token renewal mechanism rather than traditional credential-based login. Although the application is designed as a single-user system without password, email, or username authentication, this operation provides session management by issuing a new JWT token when the user opens the application. The operation confirms the existence of a todo_list_user record in the database using the user's device/browser identifier, which is persisted in localStorage. The todo_list_user schema only contains id, created_at, and updated_at fields, with no password, email, or authentication-related columns, which aligns with the business requirement of having no authentication mechanism.\n\nIntegration with the Prisma schema requires no credential validation, as the system relies on the existence of a user record rather than any security credentials. The login operation does not validate passwords or collect user input, since the schema does not contain fields like password_hash, email_verified, or authenticator_secret. Instead, it simply ensures the user's identity record exists and issues a JWT token containing the user ID from the existing todo_list_user record.\n\nThis operation exists to maintain consistent API patterns and to provide the client with a current authentication token. All authentication logic happens on the client side in localStorage; this backend operation simply responds with a new token when requested. The operation has no requirement for external input, and all validation occurs by verifying the existence of the user's device-bound record in the database.\n\nThe implementation follows the business model where identity is device-bound and session management is automated. No authentication flows involving passwords, email verification, or security questions are supported, as the schema lacks fields for these features. This operation ensures that even though there's no user authentication in the traditional sense, the application maintains consistent API contracts for client-side authentication logic.","summary":"Issues a new JWT token to maintain the device-bound user session for the Todo List application without requiring user credentials.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a JWT token that contains the user's ID in the payload for client-side identity recognition in the single-user Todo List application. The token is issued when the user opens the application to maintain session state across browser sessions without requiring authentication.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"Authentication operation for token refresh. This operation extends the validity of the user's session by issuing a new JWT token using a valid refresh token. The refresh mechanism is implemented as a client-side persistence mechanism tied to the todo_list_user in the Prisma schema, which has only id, created_at, and updated_at fields but no refresh token storage capability. The operation uses the user's stored client-side token to validate identity.","authorizationType":"refresh","description":"This API operation handles token refresh for the Todo List application's authentication system. The system operates as a single-user personal application with no traditional authentication mechanismâ€”no passwords, emails, or credentials are collected or stored. The refresh functionality is implemented as a client-side session persistence mechanism, where the user's browser maintains a refresh token in localStorage. This operation receives this refresh token from the client, validates its association with a todo_list_user record in the database, and issues a new access token.\n\nThe Prisma schema for todo_list_user contains only id, created_at, and updated_at fields, with no column for storing refresh tokens, refresh token expiration, or any authentication-related data. Therefore, the refresh operation cannot validate refresh tokens against database-stored values as in traditional authentication systems. Instead, it treats the refresh token received from the client as a linked identifier for the user's session, trusting the client's persistence of the token as proof of identity. The implementation relies on the fact that the user has a todo_list_user record (created during join/login) and matches this record with the user ID embedded in the refresh token.\n\nThe operation works by extracting the user ID from the refresh token that the client presents, verifying that a todo_list_user with that ID exists in the database, and then issuing a new access token. Since there are no refresh token storage columns in the schema, the system assumes that the client's refresh token has not been tampered with and that the user's identity is correctly maintained through the browser's localStorage. The refresh operation does not check expiration dates, token usage counts, or other security measures because these features are unsupported by the Prisma schema and are outside the scope of the minimal application design.\n\nThe implementation follows the business requirement of a single-user, no-authentication system while maintaining API consistency for client-side authentication logic. As the schema lacks any authentication-specific fields, the refresh mechanism is a formality that provides the application with consistent token renewal patterns without any actual credential validation.","summary":"Refreshes the user's access token by validating the client-provided refresh token against an existing todo_list_user identity.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a JWT token that contains the user's ID in the payload for client-side identity recognition in the single-user Todo List application. The token is issued after validation of the client-provided refresh token, enabling continued usage of the application without requiring re-authentication.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation creates a new todo list task for the user. The task is associated with the todo_list_user entity from the Prisma schema and includes a title and completion status. The system automatically generates a UUID for the task ID and sets the creation timestamp. This operation is used when a user adds a new item to their personal checklist.","path":"/todoList/tasks","method":"post","summary":"Create a new todo list task","description":"This operation creates a new task in the user's personal todo list. When a user enters text in the task input field and submits it, the system creates a new todo_list_task record associated with their user account.\n\nThe operation requires only the task title as input, which must be a string between 1 and 500 characters. The system automatically assigns a unique UUID identifier, sets the completion status to false (incomplete), and records the creation timestamp using the server's current time.\n\nSecurity considerations are minimal since this is a single-user application with no authentication required. The system assumes the person accessing the application is the legitimate owner of the task list. The new task is immediately persisted in the database and will be available across browser sessions through local storage persistence.\n\nThis operation is the primary way users add new items to their task list and is critical for the core functionality of the application.","parameters":[],"requestBody":{"description":"Creation data for a new todo list task","typeName":"ITodoListTask.ICreate"},"responseBody":{"description":"The created todo list task with complete details including generated ID and timestamps","typeName":"ITodoListTask"},"authorizationType":null,"authorizationRole":null,"name":"create","prerequisites":[]},{"specification":"This operation retrieves all todo list tasks for the user. It operates on the todo_list_task entity from the Prisma schema and returns the complete set of tasks associated with the user account. This operation supports filtering by completion status and ordering by creation date.","path":"/todoList/tasks","method":"get","summary":"Retrieve all todo list tasks","description":"This operation retrieves the complete set of tasks from the user's personal todo list. When the application loads or refreshes, the system queries the todo_list_task table to fetch all records associated with the current user session.\n\nThe operation returns all tasks, regardless of their completion status, ordered by creation time (newest first). Each task includes its unique identifier, title, completion boolean status, and creation timestamp. Since this is a single-user application with no authentication, the system retrieves tasks based on the existing local storage context rather than user credentials.\n\nThe response includes all tasks in the user's list to satisfy the 'view all tasks' requirement in the functional specifications. This operation is called during application initialization and any time the user needs to refresh their task list.\n\nNo pagination is required as the application is designed for personal use with minimal task volumes. Error handling is minimal since a zero-task result is a valid state when the user has no tasks.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of todo list tasks with all details for display in the user interface","typeName":"ITodoListTaskArray"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[]},{"specification":"This operation toggles the completion status of a specific todo list task. It accepts a task ID in the path and updates the task's 'completed' boolean field from true to false or false to true in the todo_list_task table of the Prisma schema. The operation does not delete or modify any other fields, including title, created_at, or updated_at. This is a direct state toggle operation for a user-owned task.","path":"/todoList/tasks/{taskId}/complete","method":"patch","summary":"Toggle the completion status of a todo list task","description":"This operation toggles the completion status of a specific todo list task by updating its 'completed' boolean field. When a user interacts with the checkbox in the UI, this endpoint is called to flip the state of the task. This is a direct, atomic toggle operation that affects only the 'completed' field.\n\nThe operation requires the exact task ID to identify which task to update. The task ID must correspond to an existing record in the todo_list_task table with a matching todo_list_user_id that owns the task. The update is performed atomically and does not affect any other fields in the task record, including title, created_at, or updated_at (which will still be updated by the system to reflect the modification).\n\nThe task's completion state can be toggled repeatedly without restriction. This functionality enables users to mark tasks as incomplete after they've been completed if circumstances change. The operation is designed to be used with the single-user identity model where all tasks belong to one implicit user bound to the browser session.\n\nSecurity is enforced at the application level: only tasks belonging to the currently active user session can be modified, enforced by the client-side implementation which only sends task IDs from tasks loaded into the user's local context. The backend will validate the task exists before updating the 'completed' field.\n\nRelated operations: GET /tasks to list current tasks and view their status before toggling; PATCH /tasks to search for tasks by title; DELETE /tasks to permanently remove a task if it's no longer needed.","parameters":[{"name":"taskId","description":"Unique identifier of the task to toggle completion status for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The updated task record with new completion status","typeName":"ITodoListTask"},"authorizationType":null,"authorizationRole":null,"name":"toggleCompletion","prerequisites":[{"endpoint":{"path":"/todoList/tasks","method":"post"},"description":"Task must be created before its completion status can be toggled"}]},{"specification":"This operation permanently deletes a specific todo list task. It accepts a task ID in the path and removes the corresponding record from the todo_list_task table in the Prisma schema. Since the schema does not include any soft-delete fields like 'deleted_at', this is a hard delete operation that permanently removes the task from the database. The operation returns no response body as no confirmation data is required.","path":"/todoList/tasks/{taskId}","method":"delete","summary":"Permanently delete a todo list task","description":"This operation performs a hard delete of a specific todo list task by permanently removing its record from the todo_list_task table in the database. The operation takes a task ID as a path parameter to identify the specific task to be deleted and does not require a request body.\n\nThe Prisma schema does not include any soft-delete fields such as 'deleted_at', 'is_deleted', or similar status flags, therefore this operation implements permanent deletion. Once a task is deleted, it cannot be recovered through the API and no archive or backup mechanism exists. This aligns with the minimalistic design of the personal todo list application where users are expected to manage their tasks explicitly.\n\nThe operation is idempotent: if a user attempts to delete a task that has already been deleted (or never existed), the system will return a 204 No Content response without error. This prevents cascading failures due to race conditions or UI state mismatches.\n\nOnly tasks that belong to the current user session can be deleted. The client-side application only sends delete requests for tasks that it has loaded from or created in the user's context, ensuring users cannot delete tasks that do not belong to them. No authentication or authorization token is used at the API layer as the user model is device-bound.\n\nRelated operations: GET /tasks to view all active tasks before deletion; PATCH /tasks/{taskId}/complete to mark a task as completed instead of deleting it; POST /tasks to create new tasks in the list.","parameters":[{"name":"taskId","description":"Unique identifier of the task to delete permanently","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/todoList/tasks","method":"post"},"description":"Task must be created before it can be permanently deleted"}]}],"components":{"authorization":[{"name":"user","description":"The single individual who creates, manages, and views their personal todo tasks. This role has full permission to interact with all task operations but cannot access system settings or manage other users.","kind":"member"}],"schemas":{"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user.\n\nThis field corresponds to the id column in the todo_list_user Prisma model, which serves as the primary key for the single user account managed by the system.\n\nThe system uses this identifier to establish a persistent device-bound identity without requiring any external authentication mechanism.\n\nDespite the system having no email, password, or username fields in the database, the JWT token includes this user ID to allow the client to tie operations back to the correct task set.\n\nThis field is mandatory in all authorization response types and matches the exact identifier used in the todo_list_user table."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"x-autobe-prisma-schema":{"type":"string","const":"todo_list_user","description":"Related Prisma schema.\n\nThis field links the OpenAPI schema to the corresponding Prisma model for automated validation.\n\nThe value \"todo_list_user\" exactly matches the model name in the Prisma schema.\n\nWhen present, this field enables validation that all properties in this schema exist in the referenced Prisma model.\n\nThis facilitates automatic code generation and ensures interface consistency with the database structure.\n\nThis field is optional and appears on all variant schemas that directly correspond to a Prisma model (ITodoListUser.IAuthorized)."}},"required":["id","token"],"description":"Authorization response containing JWT token information for the Todo List application. Return type for join, login, and refresh operations.\n\nThis schema defines the standard structure returned by authentication operations (POST /auth/user/join, POST /auth/user/login, POST /auth/user/refresh).\n\nFollowing the standard pattern for authentication responses, this schema contains two properties:\n- id: unique identifier of the authenticated user\n- token: JWT token object with access and refresh tokens\n\nThe id field references the todo_list_user entity in the Prisma schema through the x-autobe-prisma-schema field, establishing a clear link between the authorization response and the database entity.\n\nSince this is a single-user system with no authentication credentials, the id field serves as the sole identifier for the user's task data, and the token object provides session management through JWT.\n\nThe adherence to the I{RoleName}.IAuthorized naming convention is maintained, as this represents the authorized representation of the user (IUser â†’ ITodoListUser: \"User\" is the role).\n\nThe token property references the default IAuthorizationToken type provided by the system, ensuring consistency across all authentication responses.\n\nThe description provides complete business context about the authentication model, explaining why this structure is appropriate for a device-bound, single-user application without traditional credentials."},"ITodoListTask.ICreate":{"type":"object","properties":{"title":{"type":"string","maxLength":500,"minLength":1,"description":"The text content of the task. Limited to 500 characters.\n\nThis field contains the actual task description entered by the user.\n\nIn the Prisma schema, this is stored as a String column with no default value.\n\nThe client must provide this during task creation, and it can be viewed and modified in the UI.\n\nFor the task creation request, this field is required.\n\nClient-side input validation prevents submission of empty or whitespace-only strings, which the backend enforces with minLength: 1 and maxLength: 500 constraints.\n\nTask titles can contain any Unicode characters, emojis, and special symbols without modification or truncation."},"x-autobe-prisma-schema":{"type":"string","const":"todo_list_task","description":"Related Prisma schema.\n\nThis field links the OpenAPI schema to the corresponding Prisma model for automated validation.\n\nThe value \"todo_list_task\" exactly matches the model name in the Prisma schema.\n\nWhen present, this field enables validation that all properties in this schema exist in the referenced Prisma model.\n\nThis facilitates automatic code generation and ensures interface consistency with the database structure.\n\nThis field is optional and appears on all variant schemas that directly correspond to a Prisma model (ITodoListTask, ITodoListTask.ICreate, ITodoListTask.IUpdate, ITodoListTask.ISummary)."}},"required":["title"],"description":"Request body for creating a new todo list task.\n\nThis schema defines the data required to create a new task in the system, corresponding to a POST request to /todoList/tasks.\n\nThis is a minimal schema containing only the single required field: title.\n\nAll other fields are excluded from this request structure because they are server-managed:\n- id: auto-generated by system\n- todo_list_user_id: inferred from authentication context\n- completed: default value false is set by server\n- created_at: automatically set by server\n- updated_at: automatically set by server on creation\n\nThe schema inherits constraints from the base entity: title has minLength: 1 and maxLength: 500.\n\nThe x-autobe-prisma-schema field is included as this request map directly to the todo_list_task model, even though it only includes a subset of its properties.\n\nFollowing the variant naming convention, this schema is named ITodoListTask.ICreate, indicating it is the create variant of the ITodoListTask entity.\n\nAll fields are required unless explicitly stated otherwise, following the principle that the server will accept only necessary data and generate all other values autonomously."},"ITodoListTask":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for each todo list task.\n\nThis field maps directly to the id column in the todo_list_task Prisma model.\n\nThe system generates this UUID upon task creation and it is immutable. All operations (toggle completion, delete) reference this identifier.\n\nNo user input is required for this field as it is auto-generated by the system.\n\nThis field is always included in responses but never accepted in request bodies (create/update)."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Belongs to the user who owns this task. {@link todo_list_user.id}.\n\nThis field establishes the ownership relationship between the task and its single-user owner.\n\nThe value is automatically set to the authenticated user's ID from the session context and cannot be specified by the client.\n\nThis field is always included in responses and is implicitly referenced in create operations but never exposed as a request parameter.\n\nPrimary key reference to the todo_list_user entity in the Prisma schema."},"title":{"type":"string","maxLength":500,"minLength":1,"description":"The text content of the task. Limited to 500 characters.\n\nThis field contains the actual task description entered by the user.\n\nIn the Prisma schema, this is stored as a String column with no default value.\n\nThe client must provide this during task creation, and it can be viewed and modified in the UI.\n\nFor the task creation request, this field is required.\n\nClient-side input validation prevents submission of empty or whitespace-only strings, which the backend enforces with minLength: 1 and maxLength: 500 constraints.\n\nTask titles can contain any Unicode characters, emojis, and special symbols without modification or truncation."},"completed":{"type":"boolean","description":"Whether the task has been marked as completed. Default value is false.\n\nThis field tracks the completion state of the todo list item.\n\nIn the Prisma schema, this is a Boolean column with a default value of false.\n\nThe client toggles this field from true to false or false to true when interacting with the task checkbox in the UI.\n\nThe backend sets the default value to false upon creation and updates it atomically on toggle requests.\n\nThis field is included in both request and response bodies for toggle and create operations.\n\nThis field is never nullable, as tasks are always created with a definite completion status."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the task was created.\n\nThis field records when the task was first added to the system.\n\nOpposite to the todo_list_user entity, todo_list_task has both created_at and updated_at timestamps in the Prisma schema.\n\nThe server sets this value automatically upon creation using the current server time.\n\nThis field is read-only and is never accepted in request bodies, as task creation time is immutable.\n\nThis field appears in all response data and is used for sorting tasks in chronological order (newest first)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the task was last updated.\n\nThis field reflects the most recent time the task was modified.\n\nThe todo_list_task entity in the Prisma schema includes the updated_at timestamp, so it is valid to include.\n\nThe server updates this field automatically whenever the task is toggled (completed status changed) or edited.\n\nThis field is read-only and never accepted in request bodies, as updates are controlled by the system.\n\nThis field appears in all response data and helps determine the most recently modified tasks."},"x-autobe-prisma-schema":{"type":"string","const":"todo_list_task","description":"Related Prisma schema.\n\nThis field links the OpenAPI schema to the corresponding Prisma model for automated validation.\n\nThe value \"todo_list_task\" exactly matches the model name in the Prisma schema.\n\nWhen present, this field enables validation that all properties in this schema exist in the referenced Prisma model.\n\nThis facilitates automatic code generation and ensures interface consistency with the database structure.\n\nThis field is optional and appears on all variant schemas that directly correspond to a Prisma model (ITodoListTask, ITodoListTask.ICreate, ITodoListTask.IUpdate, ITodoListTask.ISummary)."}},"required":["id","todo_list_user_id","title","completed","created_at","updated_at"],"description":"Task entity representing individual items in the todo list. Each task belongs to a single user and has a title, completion status, and creation timestamp.\n\nThis schema definition fully represents the todo_list_task entity from the Prisma schema, which defines the structure for storing personal todo list items.\n\nThe task contains six essential properties:\n- id: Unique UUID identifier\n- todo_list_user_id: Reference to the single user owner\n- title: The task description (1-500 characters)\n- completed: Boolean status tracking completion state\n- created_at: Timestamp of task creation\n- updated_at: Timestamp of last modification\n\nThe schema includes appropriate constraints: title has minLength: 1 and maxLength: 500 to match Prisma validation, and both timestamps use the date-time format to match the Prisma Timestamptz type.\n\nThe x-autobe-prisma-schema field explicitly links this schema to the todo_list_task model in the Prisma schema, enabling automated validation that every property matches the database structure.\n\nAll properties are documented with descriptions that reference the Prisma schema comments, ensuring developers understand the business meaning and technical constraints of each field. The descriptions clarify which fields are client-settable, server-generated, read-only, or immutable, providing complete context for implementation."},"ITodoListTaskArray":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTask"},"description":"Array of todo list tasks with all details for display in the user interface.\n\nThis type represents a collection of all todo list tasks belonging to the single user.\n\nEach task in the array follows the ITodoListTask schema definition, containing all properties: id, todo_list_user_id, title, completed, created_at, and updated_at.\n\nThe tasks are ordered by creation time (newest first) with completed tasks moved to the bottom of the list.\n\nThis array type is used as the response body for the GET /todoList/tasks endpoint, providing the complete task list to the client.\n\nThe property name 'ITodoListTaskArray' follows the naming convention for arrays, replacing the special characters [] with 'Array' to maintain schema compatibility and avoid invalid type names.\n\nThe description references the relationship between this response and the todo_list_task table in the Prisma schema, ensuring developers understand this is a direct representation of database records without additional transformation."}}}}