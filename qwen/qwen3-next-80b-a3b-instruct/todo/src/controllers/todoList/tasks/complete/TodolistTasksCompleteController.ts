import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchTodoListTasksTaskIdComplete } from "../../../../providers/patchTodoListTasksTaskIdComplete";

import { ITodoListTask } from "../../../../api/structures/ITodoListTask";

@Controller("/todoList/tasks/:taskId/complete")
export class TodolistTasksCompleteController {
  /**
   * Toggle the completion status of a todo list task.
   *
   * This operation toggles the completion status of a specific todo list task
   * by updating its 'completed' boolean field. When a user interacts with the
   * checkbox in the UI, this endpoint is called to flip the state of the task.
   * This is a direct, atomic toggle operation that affects only the 'completed'
   * field.
   *
   * The operation requires the exact task ID to identify which task to update.
   * The task ID must correspond to an existing record in the todo_list_task
   * table with a matching todo_list_user_id that owns the task. The update is
   * performed atomically and does not affect any other fields in the task
   * record, including title, created_at, or updated_at (which will still be
   * updated by the system to reflect the modification).
   *
   * The task's completion state can be toggled repeatedly without restriction.
   * This functionality enables users to mark tasks as incomplete after they've
   * been completed if circumstances change. The operation is designed to be
   * used with the single-user identity model where all tasks belong to one
   * implicit user bound to the browser session.
   *
   * Security is enforced at the application level: only tasks belonging to the
   * currently active user session can be modified, enforced by the client-side
   * implementation which only sends task IDs from tasks loaded into the user's
   * local context. The backend will validate the task exists before updating
   * the 'completed' field.
   *
   * Related operations: GET /tasks to list current tasks and view their status
   * before toggling; PATCH /tasks to search for tasks by title; DELETE /tasks
   * to permanently remove a task if it's no longer needed.
   *
   * @param connection
   * @param taskId Unique identifier of the task to toggle completion status for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async toggleCompletion(
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTask> {
    try {
      return await patchTodoListTasksTaskIdComplete({
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
