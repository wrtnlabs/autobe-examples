import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTask } from "../../../../structures/ITodoListTask";

/**
 * Toggle the completion status of a todo list task.
 *
 * This operation toggles the completion status of a specific todo list task by
 * updating its 'completed' boolean field. When a user interacts with the
 * checkbox in the UI, this endpoint is called to flip the state of the task.
 * This is a direct, atomic toggle operation that affects only the 'completed'
 * field.
 *
 * The operation requires the exact task ID to identify which task to update.
 * The task ID must correspond to an existing record in the todo_list_task table
 * with a matching todo_list_user_id that owns the task. The update is performed
 * atomically and does not affect any other fields in the task record, including
 * title, created_at, or updated_at (which will still be updated by the system
 * to reflect the modification).
 *
 * The task's completion state can be toggled repeatedly without restriction.
 * This functionality enables users to mark tasks as incomplete after they've
 * been completed if circumstances change. The operation is designed to be used
 * with the single-user identity model where all tasks belong to one implicit
 * user bound to the browser session.
 *
 * Security is enforced at the application level: only tasks belonging to the
 * currently active user session can be modified, enforced by the client-side
 * implementation which only sends task IDs from tasks loaded into the user's
 * local context. The backend will validate the task exists before updating the
 * 'completed' field.
 *
 * Related operations: GET /tasks to list current tasks and view their status
 * before toggling; PATCH /tasks to search for tasks by title; DELETE /tasks to
 * permanently remove a task if it's no longer needed.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to toggle completion status
 *   for
 * @path /todoList/tasks/:taskId/complete
 * @accessor api.functional.todoList.tasks.complete.toggleCompletion
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function toggleCompletion(
  connection: IConnection,
  props: toggleCompletion.Props,
): Promise<toggleCompletion.Response> {
  return true === connection.simulate
    ? toggleCompletion.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...toggleCompletion.METADATA,
          path: toggleCompletion.path(props),
          status: null,
        },
      );
}
export namespace toggleCompletion {
  export type Props = {
    /** Unique identifier of the task to toggle completion status for */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/tasks/:taskId/complete",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/tasks/${encodeURIComponent(props.taskId ?? "null")}/complete`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: toggleCompletion.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: toggleCompletion.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
