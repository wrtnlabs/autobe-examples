[{"id":"0199ebef-7524-74ef-8efb-017e53a71d4f","type":"userMessage","contents":[{"type":"text","text":"I want to create a Reddit-like community platform.\r\n\r\nSince I'm not familiar with programming, please write a requirements analysis report as you see fit.\r\n\r\nHere are the key features I want:\r\n- User registration and login\r\n- Create communities (subreddits)\r\n- Post text, links, or images in communities\r\n- Upvote/downvote posts and comments\r\n- Comment on posts with nested replies\r\n- User karma system\r\n- Sort posts by hot, new, top, controversial\r\n- Subscribe to communities\r\n- User profiles showing their posts and comments\r\n- Report inappropriate content"}],"created_at":"2025-10-16T07:32:42.916Z"},{"type":"analyze","id":"0199ebf1-b8e2-774c-98d8-6252fd430140","instruction":"Focus on building a Reddit-like community platform with core features including user registration and login, community creation, posting (text, links, images), voting (upvote/downvote), nested comments, user karma, post sorting (hot, new, top, controversial), community subscriptions, user profiles, and content reporting. Emphasize community-based content organization and user engagement through voting and commenting.","prefix":"communityBbs","roles":[{"name":"guest","description":"Unauthenticated user who can only view public communities and posts","kind":"guest"},{"name":"member","description":"Authenticated user who can create posts, comment, vote, and manage their profile","kind":"member"},{"name":"communityModerator","description":"User who manages specific communities, moderates content, and enforces rules","kind":"member"},{"name":"admin","description":"Administrator with full system access, user management, and platform-wide moderation capabilities","kind":"admin"}],"files":[{"reason":"Provides an overview of the community platform, its purpose, and core features","filename":"00-toc.md","documentType":"service-overview","outline":["Service Vision & Overview","Core Features","Target Audience","Business Value"],"audience":"backend developers, stakeholders","keyQuestions":["What problem does this service solve?","What are the core features?","Who is the target audience?"],"detailLevel":"comprehensive","relatedDocuments":["01-user-roles.md"],"constraints":["Must establish service context and goals","Must not include technical implementation details","Must focus on business requirements"],"content":"# Reddit-Like Community Platform - Requirements Analysis Report\n\n## Service Vision & Overview\n\nTHE community platform SHALL be a Reddit-inspired content sharing and discussion system that enables users to create specialized communities, share content, engage in discussions, and build reputation through participation. The platform SHALL facilitate knowledge sharing, community building, and content discovery through user-driven curation and voting mechanisms.\n\n### Why This Service Exists\n\nThe platform addresses the growing need for specialized online communities where users can connect around shared interests, expertise, and passions. Unlike general social networks, this platform SHALL focus on topic-specific communities (subreddits) that foster deeper, more meaningful discussions. The service SHALL solve the problem of content fragmentation across multiple platforms by providing a unified space for community formation, content sharing, and discussion.\n\nCompetitors include existing platforms like Reddit, Discord, and various forum software, but this service SHALL differentiate itself through a more intuitive user experience, advanced content discovery algorithms, and robust community management tools that empower moderators to effectively steward their communities.\n\n## Core Features\n\n### User Registration and Authentication\n\nWHEN a user accesses the platform for the first time, THE system SHALL present registration options including email/password signup and social authentication methods.\n\nWHEN a user submits registration information, THE system SHALL validate the data and create a new user account with member privileges.\n\nWHEN a user attempts to log in, THE system SHALL authenticate credentials and establish a user session.\n\n### Community Creation and Management\n\nTHE platform SHALL support the creation of topic-specific communities (subreddits) that operate as independent discussion forums within the larger ecosystem.\n\nWHEN a member creates a new community, THE system SHALL record the community details, assign the creator as moderator, and make the community publicly accessible.\n\nWHILE a community exists, THE system SHALL allow the community moderator to configure community settings, establish rules, and manage membership.\n\n### Content Creation and Sharing\n\nTHE platform SHALL enable users to create posts containing text, links, or images within communities.\n\nWHEN a member creates a post, THE system SHALL validate the content, associate it with the selected community, assign it a unique identifier, and display it in the community feed.\n\nTHE system SHALL support multiple content types including text posts, link sharing, and image uploads with appropriate validation for each type.\n\n### Voting System and Karma\n\nTHE platform SHALL implement a voting system that allows users to upvote or downvote posts and comments.\n\nWHEN a member votes on content, THE system SHALL record the vote, update the content's score, and adjust the author's karma based on established rules.\n\nTHE system SHALL prevent users from voting multiple times on the same content and SHALL allow users to reverse their votes within a reasonable timeframe.\n\n### Comment System with Nested Replies\n\nTHE platform SHALL support threaded discussions through a comment system with nested replies.\n\nWHEN a member comments on a post, THE system SHALL create a top-level comment and display it in the post's comment section.\n\nWHEN a member replies to a comment, THE system SHALL create a nested reply and display it as a child of the parent comment.\n\nTHE system SHALL support multiple levels of nesting to facilitate complex discussions while maintaining readability.\n\n### Post Sorting and Discovery\n\nTHE platform SHALL provide multiple ways to sort and discover content, including hot, new, top, and controversial rankings.\n\nTHE system SHALL calculate a \"hot\" score for posts based on factors including vote count, rate of voting, and time since posting to surface trending content.\n\nTHE system SHALL display posts in chronological order when sorted by \"new\" to show recently created content.\n\nTHE system SHALL rank posts by their total score when sorted by \"top\" to display the most popular content.\n\nTHE system SHALL identify controversial posts based on a high ratio of upvotes to downvotes and display them appropriately.\n\n### Community Subscription System\n\nTHE platform SHALL allow members to subscribe to communities of interest.\n\nWHEN a member subscribes to a community, THE system SHALL add the community to their subscription list and include its content in their personalized feed.\n\nTHE system SHALL display the number of subscribers for each community to indicate community size and popularity.\n\n### User Profiles and Activity Tracking\n\nTHE platform SHALL provide user profiles that display member information, posts, comments, and karma.\n\nWHEN a user views a member's profile, THE system SHALL display their public information, contribution history, and reputation metrics.\n\nTHE system SHALL maintain a record of each member's posts and comments and display them on their profile.\n\n### Content Reporting and Moderation\n\nTHE platform SHALL provide mechanisms for users to report inappropriate content.\n\nWHEN a member reports content, THE system SHALL record the report, notify appropriate moderators, and track the status of the report.\n\nTHE system SHALL provide moderation tools that enable community moderators and administrators to review reported content and take appropriate action.\n\n## Target Audience\n\n### Primary User Personas\n\n1. **Content Creators**: Users who frequently share links, articles, images, and original content on topics they're passionate about\n\n2. **Discussion Participants**: Users who engage in conversations by commenting on posts and responding to others' comments\n\n3. **Community Builders**: Users who create and moderate communities around specific topics or interests\n\n4. **Knowledge Seekers**: Users who browse various communities to discover new information and perspectives\n\n5. **Platform Administrators**: Staff who oversee the entire platform, manage user accounts, and ensure compliance with policies\n\n## Business Value\n\n### User Value Proposition\n\nTHE platform SHALL provide users with:\n\n- A space to connect with others who share their interests\n- Tools to create and moderate specialized communities\n- Mechanisms to curate and discover high-quality content\n- A reputation system that rewards valuable contributions\n- Personalization features that tailor content to individual preferences\n\n### Platform Value Proposition\n\nTHE platform SHALL generate business value through:\n\n- Network effects as more users and communities join the platform\n- Advertising opportunities based on community topics and user interests\n- Premium features and subscriptions for power users and community moderators\n- Data insights from user engagement patterns and content trends\n- Partnerships with content creators and influencers\n\n## Business Model\n\n### Revenue Strategy\n\nThe platform SHALL generate revenue through multiple channels:\n\n1. **Advertising**: Targeted ads displayed in community feeds and on user profiles based on community topics and user interests\n\n2. **Premium Subscriptions**: Optional subscription plans for users that remove ads and provide enhanced features\n\n3. **Business Accounts**: Paid accounts for organizations and content creators with advanced analytics and promotional tools\n\n4. **Verified Communities**: Certification program for official communities with enhanced visibility and features\n\n### Growth Plan\n\nThe platform SHALL follow a three-phase growth strategy:\n\n1. **Foundation Phase**: Seed the platform with initial communities and content to establish critical mass\n\n2. **Growth Phase**: Implement user referral programs and community incentives to drive user acquisition\n\n3. **Expansion Phase**: Expand into new topic areas and geographic markets based on user demand and engagement patterns\n\n### Success Metrics\n\nKey performance indicators for the platform include:\n\n- Monthly Active Users (MAU)\n- Daily Active Users (DAU)\n- DAU/MAU ratio (indicating user engagement)\n- Number of active communities\n- Posts per day\n- Comments per post\n- Average time on site\n- User retention rate\n- Revenue per user (RPU)\n- Customer Acquisition Cost (CAC)\n\n## User Roles Overview\n\n```mermaid\ngraphLR\n  subgraph \"User Roles Hierarchy\"\n    A[\"Guest User\"] --> B[\"Authenticated Member\"]\n    B --> C[\"Community Moderator\"]\n    B --> D[\"Platform Administrator\"]\n  end\n```\n\n### User Role Definitions\n\n1. **Guest**: Unauthenticated users who can view public communities and posts but cannot create content or participate in discussions\n\n2. **Member**: Authenticated users who can create posts, comment, vote, and manage their profile\n\n3. **Community Moderator**: Members with additional privileges to manage specific communities, moderate content, and enforce community rules\n\n4. **Administrator**: Platform staff with full system access, user management capabilities, and platform-wide moderation authority\n\n### Role Progression\n\nMembers SHALL gain reputation and potentially moderator status through consistent, high-quality participation. The system SHALL track user contributions and karma to identify potential moderators for growing communities.\n\n## Key Functional Requirements\n\n### Authentication Requirements\n\nTHE user authentication system SHALL support secure registration, login, password recovery, and session management functions.\n\nWHEN a user registers, THE system SHALL validate email format, verify password strength requirements, and create a new user account with member role.\n\nWHEN a user logs in, THE system SHALL verify credentials, generate secure authentication tokens, and establish user sessions.\n\nIF a user forgets their password, THEN THE system SHALL initiate a secure password reset process using email verification.\n\nWHILE a user is authenticated, THE system SHALL maintain their session state and provide appropriate access to platform features.\n\n### Community Management Requirements\n\nTHE community system SHALL support creation, configuration, and management of topic-specific discussion forums.\n\n\nWHEN a member creates a community, THE system SHALL validate community name uniqueness, create the community record, and assign the creator as moderator.\n\nWHILE a community exists, THE system SHALL enforce community rules, maintain community settings, and track community statistics.\n\nIF a community violates platform policies, THEN THE system SHALL enable administrators to take corrective action including suspension or deletion.\n\n### Content Management Requirements\n\nTHE content system SHALL support creation, display, and organization of user-generated posts and comments.\n\nWHEN a member creates a post, THE system SHALL validate content format, associate it with the selected community, and make it available in the community feed.\n\nWHEN a member creates a comment, THE system SHALL validate comment content, associate it with the parent post or comment, and include it in the discussion thread.\n\nIF content violates community rules or platform policies, THEN THE system SHALL enable moderation actions including hiding, removal, or archiving.\n\n### Voting and Reputation Requirements\n\nTHE reputation system SHALL track user contributions and influence through a karma-based scoring mechanism.\n\nWHEN a user's post or comment receives an upvote, THE system SHALL increment their karma score according to established rules.\n\nWHEN a user's post or comment receives a downvote, THE system SHALL decrement their karma score according to established rules.\n\nTHE system SHALL calculate karma scores differently for posts and comments to reflect the relative value of different contribution types.\n\n### Reporting and Moderation Requirements\n\nTHE content moderation system SHALL enable users to report inappropriate content and provide tools for moderators to address such reports.\n\nWHEN a member reports content, THE system SHALL record the report details, maintain its status, and notify appropriate moderators.\n\nTHE system SHALL provide a moderation queue that enables moderators to efficiently review and take action on reported content.\n\nIF a moderator takes action on reported content, THEN THE system SHALL update the content status and notify the original poster of the outcome.\n\n## Non-Functional Requirements\n\n### Performance Requirements\n\nTHE system SHALL respond to user actions within 2 seconds under normal load conditions.\n\nTHE platform SHALL support at least 10,000 concurrent users with consistent performance.\n\nTHE post feed SHALL load and display initial content within 1 second of request.\n\nTHE search function SHALL return results within 500 milliseconds for common queries.\n\n### Security Requirements\n\nTHE system SHALL protect user data through encryption at rest and in transit.\n\nTHE authentication system SHALL protect against common attacks including brute force attempts, SQL injection, and cross-site scripting.\n\nTHE platform SHALL implement rate limiting to prevent abuse and denial-of-service attacks.\n\nTHE system SHALL protect against vote manipulation and spam through appropriate detection mechanisms.\n\n### Availability Requirements\n\nTHE platform SHALL maintain 99.9% uptime excluding scheduled maintenance windows.\n\nTHE system SHALL provide status updates during outages through a dedicated status page.\n\nTHE platform SHALL implement backup and disaster recovery procedures to minimize data loss.\n\n### Scalability Requirements\n\nTHE system SHALL scale to support increasing user numbers and content volume without degradation of performance.\n\nTHE architecture SHALL support horizontal scaling of components to handle traffic spikes.\n\nTHE database system SHALL support efficient querying of content and user data as the platform grows.\n\n## User Scenarios and Use Cases\n\n### User Registration and Onboarding\n\n1. User visits the platform homepage as a guest\n2. User clicks on \"Sign Up\" button\n3. User enters email address and creates password\n4. System sends verification email\n5. User clicks verification link\n6. System confirms email and completes registration\n7. User is redirected to onboarding flow\n8. User selects interest areas for initial community recommendations\n9. User begins exploring recommended communities\n\n### Creating a New Community\n\n1. Authenticated user navigates to community creation page\n2. User enters community name, description, and category\n3. User selects visibility settings (public, restricted, private)\n4. User establishes initial community rules\n5. System validates community name uniqueness\n6. System creates the community and assigns user as moderator\n7. User is redirected to the new community dashboard\n8. User customizes community appearance and settings\n9. Community appears in directory and accepts new members\n\n### Posting and Discussion Flow\n\n1. User navigates to a community of interest\n2. User clicks \"Create Post\" button\n3. User selects post type (text, link, image)\n4. User enters title and content\n5. User submits post\n6. System validates content and publishes post\n7. Post appears in community feed\n8. Other users view post, upvote/downvote\n9. Users comment on the post\n10. Original poster responds to comments\n11. Discussion thread grows with nested replies\n\n### Content Discovery and Engagement\n\n1. User logs in and views their personalized feed\n2. User sorts posts by \"hot\" to see trending content\n3. User clicks on an interesting post\n4. User reads the post and comments\n5. User upvotes the post if they find it valuable\n6. User posts a comment with their perspective\n7. User replies to another comment in the thread\n8. User subscribes to the community for future updates\n9. User navigates to another community in their subscription list\n10. User explores posts in the new community\n\n### Moderation Workflow\n\n1. User reports inappropriate comment\n2. System records report and sends notification to community moderators\n3. Moderator reviews the reported content\n4. Moderator examines the user's history and context\n5. Moderator takes action (warn user, remove content, suspend user)\n6. System updates content status and notifies original poster\n7. System records moderation action in audit log\n8. User who reported receives status update\n9. Repeated violations trigger automated escalation to administrators\n\n### Administrative Oversight\n\n1. Administrator logs into admin dashboard\n2. Administrator reviews system-wide metrics and alerts\n3. Administrator examines user reports that escalated to platform level\n4. Administrator investigates policy-violating communities\n5. Administrator takes action (suspend community, ban user, adjust policies)\n6. System implements changes and notifies affected parties\n7. Administrator documents actions in audit log\n8. Administrator monitors impact of changes on platform health\n\nFor authentication requirements, please refer to the [Authentication Flow Guide]\nFor user role definitions, please refer to the [User Roles Documentation]\nFor community creation and management, please refer to the [Community Management Specification]\nFor post creation, editing, and deletion, please refer to the [Post Management Requirements]\nFor voting system details, please refer to the [Voting System Requirements]\nFor comment system functionality, please refer to the [Comment System Design]\nFor post sorting algorithms, please refer to the [Post Sorting Requirements]\nFor subscription system details, please refer to the [Subscription System Guide]\nFor user profile requirements, please refer to the [User Profile Documentation]\nFor content reporting procedures, please refer to the [Content Reporting Workflow]\"}}'}]}"},{"reason":"Defines all user roles, their permissions, and authentication requirements","filename":"01-user-roles.md","documentType":"requirement","outline":["Authentication Requirements","User Role Hierarchy","Permission Matrix","JWT Structure"],"audience":"backend developers","keyQuestions":["What are the user roles?","What permissions does each role have?","How is authentication handled?"],"detailLevel":"comprehensive","relatedDocuments":["00-toc.md"],"constraints":["Must define all roles and permissions","Must not include database schema","Must focus on business role definitions"],"content":"# User Roles and Authentication Requirements\n\n## Authentication Requirements\n\n### Core Authentication Functions\nTHE user authentication system SHALL provide secure registration, login, and account verification processes.\n\nWHEN a user registers with email and password, THE system SHALL validate email format, verify password strength (minimum 8 characters with uppercase, lowercase, numeric, and special characters), hash the password using bcrypt, and create a new user account with member role.\n\nWHEN a user registers, THE system SHALL assign the guest role until email verification is complete, then upgrade to member role upon verification.\n\nWHEN a user submits registration information, THE system SHALL send a verification email containing a unique token link valid for 24 hours.\n\nWHEN a user clicks the verification link, THE system SHALL validate the token, verify it has not expired, and upgrade the user's role from guest to member.\n\nIF a user does not verify their email within 24 hours, THEN THE system SHALL allow the user to request a new verification email with appropriate rate limiting.\n\nWHEN a user logs in, THE system SHALL verify credentials against the stored password hash, generate secure authentication tokens, and establish a user session.\n\nWHEN a user logs in with unverified email, THEN THE system SHALL display a prompt requesting verification before allowing access to member-only features.\n\nIF a user enters invalid login credentials, THEN THE system SHALL respond with generic error message to prevent account enumeration attacks.\n\nIF a user fails to authenticate 5 consecutive times within 15 minutes, THEN THE system SHALL temporarily lock the account for 30 minutes to prevent brute force attacks.\n\nWHEN a user requests password reset, THE system SHALL prompt for email or username, verify it exists in the system, and send a reset token to the registered email address.\n\nTHE password reset token SHALL expire after 1 hour of issuance or after single use.\n\nWHEN a user accesses the reset link, THE system SHALL validate the token is valid and not expired, then allow the user to enter a new password.\n\nTHE password reset form SHALL require the new password to meet the same strength requirements as registration.\n\nTHE system SHALL require users to confirm their new password by entering it twice, and SHALL display an error if the passwords do not match.\n\nAFTER successfully changing the password, THE system SHALL invalidate all existing sessions for that user and require re-authentication.\n\nTHE system SHALL maintain user sessions for up to 30 days of inactivity, after which the user SHALL need to re-authenticate.\n\nTHE system SHALL provide a \"Remember Me\" option during login that extends the session duration to 30 days regardless of activity.\n\nTHE system SHALL allow users to terminate all active sessions from account settings, which SHALL be particularly useful if they believe their account has been compromised.\n\n## User Role Hierarchy\n\n### Guest\nTHE guest role applies to unauthenticated users or authenticated users without verified email.\n\nWHEN a user registers but has not verified their email, THE system SHALL assign the guest role until verification is complete.\n\nTHE guest role SHALL grant the following permissions:\n- View public communities and posts\n- Read comments on posts\n- Browse community directories\n- Access platform information and rules\n\nTHE guest role SHALL explicitly deny the following actions:\n- Create posts (text, links, images)\n- Comment on posts\n- Vote on content\n- Subscribe to communities\n- Access personalized feeds\n- Send private messages\n\n### Member\nTHE member role applies to authenticated users who have verified their email address.\n\nWHEN a user completes email verification, THE system SHALL upgrade their role from guest to member.\n\nTHE member role SHALL grant all permissions of the guest role PLUS:\n- Create posts in public communities\n- Create communities\n- Comment on posts with nested replies\n- Upvote and downvote posts and comments\n- Subscribe to public and restricted communities\n- Report inappropriate content\n- Edit own posts and comments within 2 hours\n- Delete own posts and comments\n- Access personalized feed of subscribed communities\n- View user profiles\n- Send private messages\n\nTHE member role SHALL accumulate karma based on upvotes and downvotes received on their content.\n\nTHE system SHALL display the user's accumulated karma on their profile and in author contexts.\n\n### Community Moderator\nThe community moderator role applies to members who have been granted moderation privileges for specific communities they created or were assigned to.\n\nWHEN a user creates a new community, THE system SHALL automatically grant them the community moderator role for that community.\n\nTHE community moderator role SHALL grant all permissions of the member role PLUS:\n- Remove posts and comments in their community that violate rules\n- Add warning labels to posts and comments\n- Ban users from their community temporarily or permanently\n- Set and modify community rules\n- Access community analytics and statistics\n- Manage community settings (name, description, rules, type)\n- Appoint other members as moderators\n- Access reported content queue for their community\n- Take action on reported content\n- Set post flairs and categories\n- Create community announcements\n- Manage membership requests for restricted communities\n\nTHE system SHALL track all moderator actions in an audit log with timestamps and context.\n\nTHE community moderator role SHALL be specific to individual communities, allowing users to be moderators of some communities while remaining regular members in others.\n\n### Admin\nThe admin role applies to platform staff with full system access.\n\nTHE admin role SHALL grant all permissions of members and community moderators across all communities PLUS:\n- Manage all user accounts (view, suspend, ban, restore)\n- Create and manage global platform rules\n- View and manage all reported content across the platform\n- Take action on any content (remove, restore, pin)\n- Assign moderator roles to users\n- Manage system-wide settings and configurations\n- View platform analytics and metrics\n- Create global announcements\n- Manage advertising and monetization settings\n- Manage platform integrations and API access\n- Access to all moderation and administrative tools\n\n## Permission Matrix\n\n| Action | Guest | Member | Community Moderator | Admin |\n|--------|-------|--------|-------------------|-------|\n| View public communities | ✅ | ✅ | ✅ | ✅ |\n| View private communities | ❌ | ❌ | ✅ | ✅ |\n| Create community | ❌ | ✅ | ✅ | ✅ |\n| Post text content | ❌ | ✅ | ✅ | ✅ |\n| Post link content | ❌ | ✅ | ✅ | ✅ |\n| Post image content | ❌ | ✅ | ✅ | ✅ |\n| Upvote posts | ❌ | ✅ | ✅ | ✅ |\n| Downvote posts | ❌ | ✅ | ✅ | ✅ |\n| Upvote comments | ❌ | ✅ | ✅ | ✅ |\n| Downvote comments | ❌ | ✅ | ✅ | ✅ |\n| Comment on posts | ❌ | ✅ | ✅ | ✅ |\n| Create nested replies | ❌ | ✅ | ✅ | ✅ |\n| Edit own posts/comments | ❌ | ✅ | ✅ | ✅ |\n| Delete own posts/comments | ❌ | ✅ | ✅ | ✅ |\n| Subscribe to communities | ❌ | ✅ | ✅ | ✅ |\n| View user profiles | ❌ | ✅ | ✅ | ✅ |\n| Report content | ❌ | ✅ | ✅ | ✅ |\n| View reported content | ❌ | ❌ | ✅ | ✅ |\n| Moderate community posts | ❌ | ❌ | ✅ | ✅ |\n| Moderate community comments | ❌ | ❌ | ✅ | ✅ |\n| Set community rules | ❌ | ❌ | ✅ | ✅ |\n| Manage community settings | ❌ | ❌ | ✅ | ✅ |\n| Appoint community moderators | ❌ | ❌ | ✅ | ✅ |\n| Manage all users | ❌ | ❌ | ❌ | ✅ |\n| Manage global platform rules | ❌ | ❌ | ❌ | ✅ |\n| Manage system settings | ❌ | ❌ | ❌ | ✅ |\n| View platform analytics | ❌ | ❌ | ❌ | ✅ |\n| Manage monetization | ❌ | ❌ | ❌ | ✅ |\n\n## JWT Structure\n\nTHE system SHALL use JWT (JSON Web Tokens) for authentication and authorization.\n\nTHE access token SHALL expire after 30 minutes of inactivity.\n\nTHE refresh token SHALL expire after 7 days of inactivity.\n\nTHE system SHALL store tokens in httpOnly cookies to prevent XSS attacks.\n\nTHE JWT payload SHALL include the following claims:\n- userId: string (UUID v4 format)\n- role: string (one of: \"guest\", \"member\", \"communityModerator\", \"admin\")\n- permissions: array of strings representing user capabilities\n- iat: number (issued at timestamp in Unix format)\n- exp: number (expiration timestamp in Unix format)\n\nTHE system SHALL sign JWT tokens using secure algorithm (HS256 or RS256) with a strong secret key managed securely.\n\nTHE system SHALL validate JWT signature on every request to protected resources.\n\nTHE system SHALL verify token expiration before granting access.\n\nTHE back-end system SHALL provide a refresh endpoint to obtain new access token using valid refresh token.\n\nTHE refresh token SHALL be invalidated after use to prevent replay attacks.\n\nTHE system SHALL implement secure JWT secret key management with regular rotation.\n\n```mermaid\ngraph LR\n  A[\"User Authentication\"] --> B[\"Verify Credentials\"]\n  B --> C{\"Valid Credentials?\"}\n  C -->|\"Yes\"| D[\"Generate JWT Token\"]\n  C -->|\"No\"| E[\"Return Error\"]\n  D --> F[\"Include userId, role, permissions\"]\n  F --> G[\"Set httpOnly Cookie\"]\n  G --> H[\"Return Success\"]\n  E --> I[\"Return 401 Unauthorized\"]\n```\n\n```mermaid\ngraph LR\n  J[\"Request with JWT\"] --> K[\"Verify Signature\"]\n  K --> L{\"Valid Signature?\"}\n  L -->|\"No\"| M[\"Return 401 Unauthorized\"]\n  L -->|\"Yes\"| N[\"Check Expiration\"]\n  N --> O{\"Token Expired?\"}\n  O -->|\"Yes\"| P[\"Request Refresh\"]\n  O -->|\"No\"| Q[\"Extract User Data\"]\n  Q --> R[\"Check Permissions\"]\n  R --> S{\"Authorized?\"}\n  S -->|\"Yes\"| T[\"Process Request\"]\n  S -->|\"No\"| U[\"Return 403 Forbidden\"]\n```\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Details user registration and login functionality with business requirements","filename":"02-authentication-flow.md","documentType":"user-flow","outline":["User Registration Process","Login Process","Password Reset","Session Management"],"audience":"backend developers","keyQuestions":["How does user registration work?","What is the login process?","How are sessions managed?"],"detailLevel":"comprehensive","relatedDocuments":["01-user-roles.md"],"constraints":["Must describe user flows in natural language","Must not include API specifications","Must focus on user journey mapping"],"content":"# User Authentication Requirements: Reddit-like Community Platform\n\n## Service Overview\n\nTHE community platform SHALL provide secure user authentication services that enable users to register, log in, reset passwords, and maintain secure sessions. This system SHALL establish user identity and control access to platform features based on authenticated status and user roles.\n\n### Authentication Context\n\nThe authentication system SHALL serve as the foundation for all user interactions with the platform. THE system SHALL verify user identity before granting access to community creation, content posting, commenting, voting, and other platform features that require user accountability.\n\nAuthentication SHALL be required for:\n- Creating communities (subreddits)\n- Posting content (text, links, images)\n- Commenting on posts with nested replies\n- Voting on posts and comments\n- Subscribing to communities\n- Reporting inappropriate content\n- Managing user profiles and preferences\n\n## User Roles and Authentication\n\n### Role Hierarchy\n\nTHE system SHALL implement a four-tier role structure to govern user permissions and access:\n\n```mermaid\ngraph LR\n  A[\"Guest User\"] --> B[\"Authenticated Member\"]\n  B --> C[\"Community Moderator\"]\n  B --> D[\"Platform Administrator\"]\n```\n\n### Role Definitions\n\n**Guest (Unauthenticated)**:\n- Can browse public communities and posts\n- Can view comments on public posts\n- Cannot create content or interact with platform features requiring accountability\n- Has limited access to personalized features\n\n**Member (Authenticated)**:\n- Has all Guest permissions\n- Can create posts in communities\n- Can comment on posts with nested replies\n- Can upvote and downvote content\n- Can create and manage communities\n- Can subscribe to communities\n- Can report inappropriate content\n- Accumulates karma based on engagement\n- Has user profile displaying activity history\n\n**Community Moderator**:\n- Has all Member permissions\n- Can moderate content within specific communities\n- Can remove posts and comments violating community rules\n- Can ban users from specific communities\n- Can set community rules and guidelines\n- Can manage community settings and appearance\n- Can appoint other moderators\n\n**Administrator**:\n- Has all Moderator permissions\n- Can manage all users and communities\n- Can suspend or ban users from the entire platform\n- Can override community moderation decisions\n- Can manage platform-wide rules and settings\n\n## Authentication Process\n\n### User Registration\n\nTHE registration process SHALL allow prospective users to create accounts with verified email addresses.\n\nWHEN a user accesses the registration interface, THE system SHALL present fields for email address, username, and password.\n\nTHE system SHALL validate that the email address is in proper format (local@domain.tld) according to RFC 5322 standards.\n\nTHE system SHALL validate that the username is 3-20 characters, contains only alphanumeric characters and underscores, and does not already exist in the system.\n\nTHE system SHALL validate that the password meets minimum security requirements of at least 8 characters, including uppercase, lowercase, numeric, and special characters.\n\nWHEN a user submits valid registration information, THE system SHALL create a new user account with \"member\" role and password stored using bcrypt hashing with cost factor 12.\n\nTHE system SHALL generate a unique verification token with 24-hour expiration and send a verification email containing a confirmation link to the provided email address.\n\nWHEN a user accesses the verification link, THE system SHALL verify the token validity, confirm the email address, and upgrade the account from unverified to fully active member status.\n\n### Login Process\n\nTHE login process SHALL verify user credentials and establish secure sessions.\n\nWHEN a user submits login credentials (email/username and password), THE system SHALL verify the account exists and the password matches the stored hash.\n\nTHE system SHALL implement rate limiting of maximum 5 login attempts per 15-minute window from the same IP address to prevent brute force attacks.\n\nWHEN a user fails to log in 5 times within 15 minutes, THE system SHALL temporarily lock the account for 30 minutes and notify the user of the lockout.\n\nWHEN a user provides valid credentials, THE system SHALL generate a JWT access token and refresh token for session management.\n\nTHE system SHALL set tokens in httpOnly cookies to protect against XSS attacks and provide secure authentication.\n\n### Password Reset\n\nTHE password recovery process SHALL allow users to securely reset forgotten passwords.\n\nWHEN a user requests password reset, THE system SHALL prompt for their email address or username.\n\nIF the provided email/username exists in the system, THEN THE system SHALL generate a time-limited password reset token valid for 1 hour and send it to the user's registered email address.\n\nWHEN a user accesses the reset link with a valid token, THE system SHALL present a secure interface to enter a new password.\n\nTHE system SHALL validate that the new password meets the same strength requirements as during registration.\n\nWHEN a user successfully updates their password, THE system SHALL invalidate all existing login sessions and tokens to ensure security.\n\n### Session Management\n\nTHE session system SHALL maintain user authentication state with secure token handling.\n\nTHE system SHALL implement JWT (JSON Web Tokens) for session management with the following specifications:\n- Access token: 30 minutes expiration\n- Refresh token: 7 days expiration\n- Token storage: httpOnly cookies for enhanced security\n\nTHE JWT payload SHALL contain the following claims:\n- userId: unique identifier for the user\n- role: user's current role (member, moderator, admin)\n- permissions: array of actions the user is authorized to perform\n- iat: token issuance timestamp\n- exp: token expiration timestamp\n\nWHEN a user's access token expires, THE system SHALL allow token refresh using a valid refresh token without requiring full re-authentication.\n\nTHE system SHALL allow users to terminate all active sessions from security settings, which IS particularly useful if they believe their account has been compromised.\n\nWHEN a user logs out, THE system SHALL invalidate the current session and remove authentication tokens from the browser.\n\n## Security Requirements\n\nTHE authentication system SHALL implement multiple security measures to protect user accounts and platform integrity.\n\nTHE system SHALL use HTTPS with TLS 1.3 for all authentication-related communications to encrypt data in transit.\n\nTHE system SHALL implement CSRF protection for all state-changing authentication operations to prevent cross-site request forgery.\n\nTHE system SHALL protect against common vulnerabilities including:\n- SQL injection through parameterized queries\n- Cross-site scripting (XSS) through input sanitization\n- Session fixation through random session identifiers\n- Credential stuffing through rate limiting\n\nTHE system SHALL monitor for suspicious activity patterns, including rapid authentication attempts, access from multiple geolocations, and other indicators of compromised accounts.\n\n## Business Rules\n\n### Email Verification\nTHE system SHALL require email verification before granting full member privileges.\n\nWHEN a user registers, THE system SHALL restrict account permissions to guest-level access until email verification is completed.\n\nIF email verification is not completed within 7 days, THEN THE system SHALL send reminder emails on days 3 and 6 after registration.\n\nIF email verification is not completed within 14 days, THEN THE system SHALL automatically deactivate the account, requiring the user to re-register.\n\n### Account Recovery\nTHE system SHALL allow account recovery through verified email address only.\n\nWHEN a user requests password reset for an unverified account, THEN THE system SHALL direct them to re-send the verification email instead.\n\nTHE system SHALL invalidate password reset tokens after single use to prevent replay attacks.\n\n### User Privacy\nTHE system SHALL not expose whether an email address or username is already registered during registration to prevent account enumeration.\n\nWHEN a user attempts to register with an existing email/username, THE system SHALL respond with a generic message such as \"This email address is not available\" without confirming account existence.\n\nTHE system SHALL not reveal the status of other users' accounts through authentication interfaces.\n\n## Functional Requirements\n\n### Core Authentication Functions\n\n- Users can register with email and password\n- Users can log in to access their account\n- Users can log out to end their session\n- System maintains user sessions securely\n- Users can verify their email address\n- Users can reset forgotten passwords\n- Users can change their password\n- Users can revoke access from all devices\n\nThese functions SHALL be implemented with proper validation, security measures, and user feedback mechanisms.\n\n## Permission Matrix\n\n| Action | Guest | Member | Community Moderator | Admin |\n|--------|-------|--------|----------------------|-------|\n| View public communities | ✅ | ✅ | ✅ | ✅ |\n| View private communities | ❌ | ✅ | ✅ | ✅ |\n| Create communities | ❌ | ✅ | ✅ | ✅ |\n| Create posts | ❌ | ✅ | ✅ | ✅ |\n| Create comments | ❌ | ✅ | ✅ | ✅ |\n| Upvote content | ❌ | ✅ | ✅ | ✅ |\n| Downvote content | ❌ | ✅ | ✅ | ✅ |\n| Edit own content | ❌ | ✅ | ✅ | ✅ |\n| Delete own content | ❌ | ✅ | ✅ | ✅ |\n| Subscribe to communities | ❌ | ✅ | ✅ | ✅ |\n| Report content | ❌ | ✅ | ✅ | ✅ |\n| Moderate community content | ❌ | ❌ | ✅ | ✅ |\n| Ban users from community | ❌ | ❌ | ✅ | ✅ |\n| Manage community settings | ❌ | ❌ | ✅ | ✅ |\n| Assign moderators | ❌ | ❌ | ✅ | ✅ |\n| Manage all users | ❌ | ❌ | ❌ | ✅ |\n| View platform analytics | ❌ | ❌ | ❌ | ✅ |\n| Manage monetization | ❌ | ❌ | ❌ | ✅ |\n\n## JWT Structure\n\nTHE authentication system SHALL use JWT tokens with the following structure:\n\n```json\n{\n  \"userId\": \"string (UUID v4)\",\n  \"role\": \"string (member, communityModerator, admin)\",\n  \"permissions\": \"array of strings\",\n  \"iat\": \"number (issued at timestamp)\",\n  \"exp\": \"number (expiration timestamp)\"\n}\n```\n\nThe permission claims SHALL be pre-computed based on the user's role and any community-specific moderator status.\n\n## User Scenarios\n\n### Scenario 1: User Registration and Verification\n\n1. User visits registration page and enters email, username, and password\n2. System verifies input format and checks for existing accounts\n3. System creates account with \"member\" role and sends verification email\n4. User finds email and clicks the verification link\n5. System validates the token and activates the user's full member privileges\n6. User is redirected to platform with authenticated status\n\n```mermaid\ngraph LR\n  A[\"User Registration\"] --> B[\"Enter Email, Username, Password\"]\n  B --> C{Validate Input}\n  C -->|Valid| D[Check Account Availability]\n  C -->|Invalid| E[Show Error Messages]\n  D -->|Available| F[Create Account, Send Verification]\n  D -->|Not Available| G[Show Generic Unavailable Message]\n  F --> H[User Clicks Verification Link]\n  H --> I[Verify Token, Activate Account]\n  I --> J[Authentication Complete]\n  E --> B\n  G --> B\n```\n\n### Scenario 2: Login Process\n\n1. User navigates to login page\n2. User enters email/username and password\n3. System verifies credentials and checks for account lockout\n4. System generates JWT tokens and sets httpOnly cookies\n5. System redirects user to their personalized feed\n6. User begins interacting with the platform\n\n```mermaid\ngraph LR\n  A[\"User Login\"] --> B[\"Enter Email/Username and Password\"]\n  B --> C{Validate Credentials}\n  C -->|Valid| D[Check Account Status]\n  C -->|Invalid| E[Increment Failed Attempts]\n  D -->|Active| F[Generate JWT Tokens]\n  D -->|Locked| G[Show Lockout Message]\n  F --> H[Set httpOnly Cookies]\n  H --> I[Redirect to Dashboard]\n  E --> J{Account Locked?}\n  J -->|Yes| K[Show Lockout Message]\n  J -->|No| L[Show Generic Error]\n  L --> B\n```\n\n### Scenario 3: Password Reset\n\n1. User clicks \"Forgot Password\" on login page\n2. User enters registered email address or username\n3. System verifies account existence and sends reset token\n4. User checks email and clicks the reset link\n5. System verifies token validity and presents password change interface\n6. User enters new password and confirms changes\n7. System updates password and invalidates existing sessions\n8. User logs in with new credentials\n\n```mermaid\ngraph LR\n  A[\"Password Reset Request\"] --> B[\"Enter Email/Username\"]\n  B --> C{Account Exists?}\n  C -->|Yes| D[Send Reset Token via Email]\n  C -->|No| E[Show Confirmation Message]\n  D --> F[User Accesses Reset Link]\n  F --> G{Token Valid?}\n  G -->|Yes| H[Enter New Password]\n  G -->|No| I[Request New Reset]\n  H --> J[Confirm Password Change]\n  J --> K[Update Password, Invalidate Sessions]\n  K --> L[Require Re-authentication]\n```\n\n### Scenario 4: Session Management\n\n1. User accesses platform and is automatically logged in via JWT cookie\n2. After 30 minutes of inactivity, access token expires\n3. System automatically uses refresh token to obtain new access token\n4. User continues interacting with the platform without interruption\n5. User manually logs out, invalidating current session\n6. User visits security settings and terminates all devices\n7. System invalidates all authentication tokens\n\n```mermaid\ngraph LR\n  A[\"Session Access\"] --> B{Access Token Valid?}\n  B -->|Yes| C[Grant Access]\n  B -->|No| D{Refresh Token Valid?}\n  D -->|Yes| E[Issue New Access Token]\n  D -->|No| F[Redirect to Login]\n  C --> G[User Interacts with Platform]\n  G --> H{Manual Logout?}\n  H -->|Yes| I[Invalidate Session]\n  H -->|No| J[Continue]\n  E --> C\n```\n\n### Scenario 5: Secure Account Recovery\n\n1. User attempts to log in but cannot remember password\n2. User requests password reset using registered email\n3. System sends time-limited reset token to the email address\n4. User accesses email on mobile device and clicks reset link\n5. System validates token and allows password update\n6. System confirms change and requires re-login\n7. User logs in with new password successfully\n\n## Error Handling\n\n### Input Validation Errors\n\nWHEN a user submits invalid registration information, THE system SHALL return specific validation error messages indicating which fields failed and their requirements.\n\nWHEN a user's email address is invalid format, THE system SHALL display \"Please enter a valid email address\".\n\nWHEN a user's username is too short, THE system SHALL display \"Username must be at least 3 characters long\".\n\nWHEN a user's password does not meet requirements, THE system SHALL display specific messages for each missing requirement (uppercase, lowercase, number, special character).\n\n### Authentication Errors\n\nWHEN a user's login credentials are incorrect, THE system SHALL return generic error message \"Invalid credentials\" without specifying whether the email/username or password was incorrect to prevent account enumeration.\n\nWHEN a user's account is locked due to excessive failed attempts, THE system SHALL display \"Account temporarily locked. Please try again in 30 minutes.\"\n\nWHEN a password reset token is invalid or expired, THE system SHALL direct users to request a new reset instead of providing specific reasons.\n\nWHEN a JWT token is invalid or expired, THE system SHALL redirect users to re-authenticate without revealing specific token issues.\n\n## Non-Functional Requirements\n\n### Performance\n\nTHE authentication system SHALL process registration, login, and password reset requests within 2 seconds under normal load conditions.\n\nTHE system SHALL support concurrent authentication operations from at least 5,000 users without degradation of performance.\n\nTHE login process SHALL complete and redirect users within 1 second of valid credential submission.\n\n### Security\n\nTHE system SHALL protect all authentication endpoints with rate limiting (max 10 requests per minute per IP) to prevent brute force attacks.\n\nTHE system SHALL never log or store plaintext passwords.\n\nTHE system SHALL encrypt all sensitive user data at rest using AES-256 encryption.\n\nTHE system SHALL implement proper CORS policies to restrict cross-origin authentication requests.\n\nTHE system SHALL log authentication events (successful and failed logins, password changes) for security monitoring.\n\n### Reliability\n\nTHE authentication system SHALL provide 99.9% uptime excluding scheduled maintenance.\n\nTHE system SHALL implement automatic failover to backup authentication servers in case of primary server failure.\n\nTHE system SHALL perform regular backups of user authentication data with recovery point objective of no more than 15 minutes.\n\n### Scalability\n\nTHE authentication system SHALL be designed to scale horizontally by adding additional authentication servers.\n\nTHE database for authentication SHALL support read replicas to distribute query load.\n\nTHE system SHALL implement caching for frequently accessed authentication data to reduce database load.\n\n## Success Metrics\n\n- Registration conversion rate: Percentage of visitors who complete registration\n- Authentication success rate: Percentage of login attempts that succeed\n- Average login time: Time from credential submission to successful authentication\n- Password reset completion rate: Percentage of initiated password resets that are completed\n- Account lockout rate: Number of accounts locked due to failed login attempts\n- Suspicious activity detection rate: Number of potential security incidents identified by the system\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Documents community creation and management features with business rules","filename":"03-community-management.md","documentType":"requirement","outline":["Community Creation","Moderation Rules","Subscription System","Community Settings"],"audience":"backend developers","keyQuestions":["How are communities created?","What moderation capabilities exist?","How does subscription work?"],"detailLevel":"comprehensive","relatedDocuments":["01-user-roles.md"],"constraints":["Must focus on business requirements","Must not include technical implementation","Must describe community workflows"],"content":"# Enhanced Community Management System - Requirements Analysis Report\n\n## 1. Service Vision & Overview\n\nTHE community platform SHALL be a Reddit-inspired content sharing and discussion system that enables users to create specialized communities, share content, engage in discussions, and build reputation through participation. The platform SHALL facilitate knowledge sharing, community building, and content discovery through user-driven curation and voting mechanisms.\n\nTHE platform SHALL differentiate itself through a more intuitive user experience, advanced content discovery algorithms, and robust community management tools that empower moderators to effectively steward their communities.\n\n## 2. Core Functional Requirements\n\n### 2.1 User Authentication & Session Management\n\nTHE authentication system SHALL implement secure registration, login, password recovery, and session management functions.\n\nWHEN a user registers with email and password, THE system SHALL validate email format, verify password strength requirements (minimum 8 characters with uppercase, lowercase, numeric, and special characters), create a new user account with member role, and send verification email to the provided address.\n\nWHEN a user clicks verification link in email, THE system SHALL upgrade account to member status and grant full participation privileges.\n\nWHEN a user attempts to log in, THE system SHALL verify credentials against stored bcrypt hashes (cost factor 12), generate secure JWT tokens, and establish user sessions.\n\nTHE system SHALL implement rate limiting on login attempts (maximum 5 attempts per minute per IP) and temporary account lockout after 3 consecutive failed attempts (15 minute lock).\n\nTHE JWT access token SHALL expire after 30 minutes of inactivity and contain:\n- userId: string (UUID v4)\n- role: string (\"guest\", \"member\", \"communityModerator\", \"admin\")\n- permissions: array of strings\n- iat: number (issued at timestamp)\n- exp: number (expiration timestamp)\n\nTHE refresh token SHALL expire after 7 days and can be used to obtain new access tokens without re-authentication.\n\nWHEN a user requests password reset, THE system SHALL send reset token to verified email address with 1-hour expiration.\n\n### 2.2 Community Creation & Management\n\nTHE community management system SHALL support the creation of topic-specific communities (subreddits) that operate as independent discussion forums within the larger ecosystem.\n\nWHEN a member creates a new community, THE system SHALL validate community name uniqueness within 3-21 character length with only lowercase letters, numbers, and hyphens, record community details, assign the creator as moderator, and make the community publicly accessible.\n\nTHE system SHALL support three community visibility types:\n\n**Public communities**: Accessible to all users with content visible to guests, enabling anyone to join and participate.\n\n**Restricted communities**: Visible to all users but participation requires explicit moderator approval, with content accessible only to approved members.\n\n**Private communities**: Hidden from public listings with access requiring invitation from moderator or existing member, and content visible only to members.\n\nWHEN a community owner attempts to modify community settings, THE system SHALL validate role permissions and apply changes to community records.\n\nWHEN changing community type from public to restricted, THE system SHALL maintain existing member access while requiring moderator approval for new members.\n\nWHEN changing community type from restricted to public, THE system SHALL make all existing content visible to everyone without requiring member approval.\n\nWHEN a user attempts to create a community with a name that is already taken or violates formatting rules, THEN THE system SHALL return specific error messages indicating the conflict and suggest available alternatives.\n\nTHE visual customization system SHALL allow moderators to upload profile icon (maximum 200x200px) and header/banner image (maximum 1200x400px), and select color schemes within platform guidelines.\n\n### 2.3 Content Management & Moderation\n\nTHE content management system SHALL enforce community-specific rules on posting and commenting.\n\nWHEN a user attempts to create a post in a community, THE system SHALL display current community rules and require agreement before submission.\n\nWHEN a moderator creates a post, THE system SHALL provide options to mark posts as announcements with special visual treatment.\n\nTHE system SHALL maintain a record of all moderation actions with timestamps and moderator identification for transparency and accountability.\n\nTHE report escalation system SHALL automatically notify administrators when multiple reports target the same user or community, enabling rapid response to emerging issues.\n\n### 2.4 Content Reporting & Moderation Workflow\n\nTHE content reporting system SHALL allow all authenticated users to report inappropriate content through a streamlined interface.\n\nWHEN a user reports content, THE system SHALL present predefined categories including \"Spam\", \"Harassment\", \"Hate speech\", \"Personal information\", and \"Other\", and require at least 10 characters of explanation for \"Other\" category.\n\nTHE system SHALL record the report with timestamp, user identifier, reason, and explanation in the moderation queue, and maintain the content's visibility status pending moderator review.\n\nWHEN a moderator accesses the moderation queue, THE system SHALL display reported content with full context including author information, vote history, and previous moderation actions.\n\nWHEN a moderator takes action on reported content (approve, remove, mark as spam, warn user), THE system SHALL record the moderator's decision, apply the action to the content, and update the report status.\n\nTHE system SHALL notify content authors of moderation actions within 15 minutes, including the specific rule violation and appeal process information.\n\nTHE system SHALL notify users who reported content of the outcome (action taken, dismissed, or incomplete information) within 24 hours of moderator decision.\n\nTHE appeal process SHALL allow users to request review of moderator decisions through administrator intervention, with escalated cases requiring majority vote from multiple administrators.\n\n### 2.5 Subscription System\n\nTHE subscription system SHALL allow users to follow communities of interest and customize their content experience.\n\nWHEN a user subscribes to a community, THE system SHALL add the community to their subscription list, include its content in their personalized feed, and initiate notification preferences based on user settings.\n\nTHE system SHALL display subscriber counts publicly for each community to indicate community size and popularity.\n\nWHEN a user unsubscribes from a community, THE system SHALL remove the community from their subscription feed and stop notifications while preserving their historical contribution record.\n\nTHE personalized feed generation system SHALL aggregate posts from all subscribed communities and rank them using configurable algorithms (hot, new, top, controversial).\n\n### 2.6 User Profiles & Activity Tracking\n\nTHE user profile system SHALL provide comprehensive member information and activity history.\n\nWHEN a user views a member's profile, THE system SHALL display public information including account creation date, contribution history (posts and comments), and reputation metrics.\n\nTHE contribution history section SHALL present user posts and comments in chronological order with filtering options by content type and sorting preferences (new, top, controversial).\n\nTHE profile customization system SHALL allow members to upload profile pictures (maximum 2MB, JPG/PNG/GIF), create profile bios (maximum 500 characters), and organize profile sections through drag-and-drop interface.\n\nTHE privacy control system SHALL enable members to set profile visibility levels (public, members only, private) and restrict content visibility by community or user group.\n\n### 2.7 Post Sorting Algorithms\n\nTHE content ranking system SHALL implement multiple sorting algorithms for content discovery.\n\nTHE \"hot\" sorting algorithm SHALL calculate content popularity based on vote velocity, using a logarithmic formula that weights recent votes more heavily than older ones, with posts decaying in ranking over 24-48 hours to surface fresh content.\n\nTHE \"new\" sorting algorithm SHALL display posts in strict reverse chronological order by creation timestamp, enabling users to see recently shared content first.\n\nTHE \"top\" sorting algorithm SHALL rank posts by their absolute vote score (upvotes minus downvotes), with configurable timeframes (today, this week, this month, all time) to address different content lifecycles.\n\nTHE \"controversial\" sorting algorithm SHALL use a ratio-based formula that identifies posts with high numbers of both upvotes and downvotes, prioritizing content that generates significant discussion across opinion lines.\n\nTHE sorting algorithm system SHALL allow users to set default preferences for each community and the global feed, with options to override defaults for specific browsing sessions.\n\n## 3. User Roles & Permissions Matrix\n\n| Action | Guest | Member | Community Moderator | Admin |\n|--------|-------|--------|-------------------|-------|\n| View public communities and posts | ✅ | ✅ | ✅ | ✅ |\n| View restricted community content | ❌ | ✅ | ✅ | ✅ |\n| View private community content | ❌ | ❌ | ✅ | ✅ |\n| Create community | ❌ | ✅ | ✅ | ✅ |\n| Join public community | ❌ | ✅ | ✅ | ✅ |\n| Request to join restricted community | ❌ | ✅ | ✅ | ✅ |\n| Create posts (text, link, images) | ❌ | ✅ | ✅ | ✅ |\n| Upvote/downvote posts and comments | ❌ | ✅ | ✅ | ✅ |\n| Comment on posts with nested replies | ❌ | ✅ | ✅ | ✅ |\n| Edit own posts/comments | ❌ | ✅ | ✅ | ✅ |\n| Delete own posts/comments | ❌ | ✅ | ✅ | ✅ |\n| Subscribe to communities | ❌ | ✅ | ✅ | ✅ |\n| Report inappropriate content | ❌ | ✅ | ✅ | ✅ |\n| View user profiles | ✅ | ✅ | ✅ | ✅ |\n| Create user profile | ❌ | ✅ | ✅ | ✅ |\n| Moderate reported content | ❌ | ❌ | ✅ | ✅ |\n| Remove community content | ❌ | ❌ | ✅ | ✅ |\n| Lock post comments | ❌ | ❌ | ✅ | ✅ |\n| Ban users from community | ❌ | ❌ | ✅ | ✅ |\n| Edit community rules/settings | ❌ | ❌ | ✅ | ✅ |\n| Appoint community moderators | ❌ | ❌ | ✅ | ✅ |\n| Suspend community | ❌ | ❌ | ❌ | ✅ |\n| Ban users from platform | ❌ | ❌ | ❌ | ✅ |\n| Manage platform-wide rules | ❌ | ❌ | ❌ | ✅ |\n| Access system analytics | ❌ | ❌ | ❌ | ✅ |\n| Manage advertising features | ❌ | ❌ | ❌ | ✅ |\n| Override moderator decisions | ❌ | ❌ | ❌ | ✅ |\n| View all user subscriptions | ❌ | ❌ | ❌ | ✅ |\n| Manage global platform announcements | ❌ | ❌ | ❌ | ✅ |\n| Access moderation audit logs | ❌ | ❌ | ❌ | ✅ |\n| Manage user verification system | ❌ | ❌ | ❌ | ✅ |\n\n## 4. Authentication & Authorization System\n\n### 4.1 JWT Structure & Token Management\n\nThe authentication system SHALL use JWT (JSON Web Tokens) for session management with the following payload structure:\n\n```json\n{\n  \"userId\": \"string (UUID format)\",\n  \"role\": \"string (guest/member/communityModerator/admin)\",\n  \"permissions\": \"array of strings defining specific permissions\",\n  \"exp\": \"number (UNIX timestamp for expiration)\",\n  \"iat\": \"number (UNIX timestamp for issuance)\",\n  \"emailVerified\": \"boolean\"\n}\n```\n\nTHE access token SHALL be transmitted via httpOnly cookies for enhanced security and SHALL expire after 30 minutes of inactivity.\n\nTHE refresh token SHALL be stored securely in HTTP-only cookies and SHALL expire after 7 days of inactivity.\n\nTHE token refresh system SHALL allow obtaining new access tokens using valid refresh tokens, with refresh token rotation after each use to prevent replay attacks.\n\n### 4.2 Role-Based Access Control\n\nAuthorization SHALL be enforced at both endpoint and resource levels through permission checks in the JWT payload.\n\nWHEN a user attempts to access a protected endpoint, THE system SHALL verify the JWT signature, check token expiration, and validate required permissions before processing the request.\n\nTHE system SHALL implement centralized permission validation middleware that automatically checks user roles and permissions against required access levels for each operation.\n\n## 5. Workflow Diagrams\n\n### 5.1 Community Creation Flow\n\n```mermaid\ngraph LR\n    A[\"User Submits Community Creation\"] --> B{\"Valid Data?\"}\n    B -->|\"Yes\"| C{\"Community Name Available?\"}\n    B -->|\"No\"| D[\"Return Validation Errors\"]\n    C -->|\"Yes\"| E[\"Create Community Record\"]\n    C -->|\"No\"| F[\"Suggest Alternatives\"]\n    E --> G[\"Assign User as Moderator\"]\n    G --> H[\"Redirect to Community Dashboard\"]\n    D --> A\n    F --> A\n```\n\n### 5.2 Authentication Flow\n\n```mermaid\ngraph LR\n    A[\"User Authentication\"] --> B[\"Verify Credentials\"]\n    B --> C{\"Valid Credentials?\"}\n    C -->|\"Yes\"| D[\"Generate JWT Token\"]\n    C -->|\"No\"| E[\"Return Error\"]\n    D --> F[\"Include userId, role, permissions\"]\n    F --> G[\"Set httpOnly Cookie\"]\n    G --> H[\"Return Success\"]\n    E --> I[\"Return 401 Unauthorized\"]\n```\n\n### 5.3 Content Reporting Workflow\n\n```mermaid\ngraph LR\n    A[\"User Submits Report\"] --> B[\"Validate Report Details\"]\n    B --> C{\"Complete?\"}\n    C -->|\"Yes\"| D[\"Add to Moderation Queue\"]\n    C -->|\"No\"| E[\"Request Additional Information\"]\n    D --> F[\"Notify Community Moderators\"]\n    F --> G[\"Moderator Reviews Content\"]\n    G --> H{\"Violation Confirmed?\"}\n    H -->|\"Yes\"| I[\"Take Moderation Action\"]\n    H -->|\"No\"| J[\"Dismiss Report\"]\n    I --> K[\"Notify Content Author\"]\n    J --> L[\"Notify Reporting User\"]\n    K --> L\n```\n\n### 5.4 User Role Hierarchy\n\n```mermaid\ngraphLR\n    A{\"Guest User\"} --> B{\"Member\"}\n    B --> C{\"Community Moderator\"}\n    B --> D{\"Administrator\"}\n```\n\n## 6. Error Scenarios & Handling\n\n### 6.1 Community Creation Errors\n\nWHEN a user attempts to create a community with a duplicate name, THEN THE system SHALL return HTTP 409 Conflict with message \"Community name already exists\" and suggest similar available names.\n\nWHEN a user attempts to create a community with invalid characters or length outside 3-21 character range, THEN THE system SHALL return HTTP 400 Bad Request with specific validation messages listing allowed characters and length requirements.\n\nWHEN a user attempts to create excessive numbers of communities in a short period (more than 5 in 24 hours), THEN THE system SHALL temporarily restrict community creation and require additional verification to prevent spam.\n\n### 6.2 Joining Community Errors\n\nWHEN a user attempts to join a private community without invitation, THEN THE system SHALL return HTTP 403 Forbidden with message \"Private community requires invitation from a member or moderator\".\n\nWHEN a user attempts to join a restricted community, THEN THE system SHALL return HTTP 202 Accepted with message \"Your request has been submitted for moderator approval\".\n\nWHEN a user attempts to rejoin a community from which they were banned, THEN THE system SHALL deny the request and return HTTP 403 Forbidden with message \"You have been banned from this community until [date]\" or \"permanently banned\" as applicable.\n\n### 6.3 Moderation Errors\n\nWHEN a non-moderator attempts to perform moderator actions, THEN THE system SHALL return HTTP 403 Forbidden with message \"Insufficient privileges: moderator status required for this action\".\n\nWHEN a moderator attempts to ban another moderator of equal standing, THEN THE system SHALL require confirmation and may require additional moderator consensus or administrative involvement based on community size and policies.\n\nWHEN a moderator attempts to remove content in a community they don't moderate, THEN THE system SHALL return HTTP 403 Forbidden with message \"Insufficient privileges: cannot moderate content outside assigned communities\".\n\n## 7. Performance Requirements\n\nTHE system SHALL respond to community creation requests within 2 seconds under normal load conditions of up to 1,000 concurrent users.\n\nTHE system SHALL display community content and membership information with initial load times under 1 second, with subsequent navigational loads under 500 milliseconds.\n\nTHE content loading system SHALL implement pagination with 25 posts per page and infinite scroll functionality, loading additional content within 1 second of user scrolling to page bottom.\n\nTHE system SHALL process subscription changes instantly, with the community feed reflecting additions and removals within 500 milliseconds of confirmation.\n\nTHE system SHALL support peak loads of 5,000 concurrent community creation requests during major events or promotions without degradation of service.\n\nTHE search function SHALL return results within 500 milliseconds for common queries and 2 seconds for complex queries across the platform.\n\n## 8. Security & Compliance Requirements\n\nTHE system SHALL protect all user data through encryption both at rest (AES-256) and in transit (TLS 1.3).\n\nTHE authentication system SHALL protect against common attacks including brute force attempts through rate limiting, SQL injection through parameterized queries, and cross-site scripting through input sanitization.\n\nTHE platform SHALL implement comprehensive rate limiting to prevent abuse and denial-of-service attacks, with configurable limits per endpoint and user role.\n\nTHE system SHALL protect against vote manipulation and spam through behavioral analysis and pattern detection mechanisms.\n\nTHE audit logging system SHALL maintain records of all administrative actions, moderator decisions, and security-relevant events for minimum 7 years to meet regulatory requirements.\n\nTHE privacy compliance system SHALL support data subject access requests (DSAR), data portability, and right to be forgotten (erasure) as required by GDPR and other privacy regulations.\n\n## 9. Success Criteria\n\nThis community management system SHALL be considered successful when it:\n\n- Enables users to easily create and organize topic-focused discussion spaces\n- Provides moderators with effective tools to maintain community quality and enforce rules\n- Facilitates user engagement through intuitive subscription and content discovery\n- Maintains platform consistency while allowing community identity and customization\n- Scales effectively to support thousands of active communities\n- Minimizes inappropriate content through effective moderation tools and processes\n- Achieves high user satisfaction rated at 4.5/5.0 or higher in platform surveys\n- Maintains moderator action approval rate of 95% or higher from reporting users\n- Achieves content visibility for appropriate content within 2 seconds of creation\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Specifies post creation, editing, and deletion requirements","filename":"04-post-management.md","documentType":"user-story","outline":["Post Creation","Content Types","Editing and Deletion","Post Visibility"],"audience":"backend developers","keyQuestions":["How are posts created?","What content types are supported?","How can posts be edited or deleted?"],"detailLevel":"comprehensive","relatedDocuments":["01-user-roles.md"],"constraints":["Must describe post workflows","Must not include database design","Must focus on user requirements"],"content":"# Post Management Requirements Specification\n\n## Introduction and Scope\n\nThis document specifies the business requirements for the post management functionality of a Reddit-like community platform. The post management system enables users to create, share, organize, and maintain content within topic-specific communities. This document covers the complete lifecycle of posts from creation through editing, deletion, and moderation.\n\nThe system supports three primary post types: text posts, link posts, and image posts. Each post exists within a community (subreddit) and is subject to community-specific rules and moderation policies. The post management system is a core component of the platform's user engagement strategy, enabling content sharing and discussion that drives community growth and user retention.\n\nThis document focuses exclusively on business requirements and user interactions. Technical implementation details such as database schemas, API specifications, and infrastructure decisions are outside the scope of this document and will be determined by the development team based on these requirements.\n\n## Post Creation Requirements\n\n### Authentication Requirements\n\nTHE system SHALL require user authentication for all post creation activities.\n\nWHEN an unauthenticated user attempts to create a post, THE system SHALL redirect to the authentication flow with a prompt to register or log in.\n\nWHEN an authenticated user accesses a community, THE system SHALL display the post creation interface with appropriate permissions.\n\nTHE system SHALL validate that the user's email address is verified before allowing post creation. IF the user's email is not verified, THEN THE system SHALL display a verification prompt before allowing content creation.\n\n## Community Selection\n\nTHE system SHALL require users to explicitly select a community for each post.\n\nTHE system SHALL validate that the selected community exists, is active, and is accessible to the user before allowing post submission.\n\nTHE system SHALL prevent users from posting to communities they do not have access to:\n- Guests can only post to public communities after authentication\n- Members can post to public communities and communities they have joined\n- Moderators can post to their managed communities\n- Administrators can post to any community\n\nTHE system SHALL display community selection with hierarchical organization by user subscriptions, followed by recently accessed communities and popular suggestions.\n\n## Post Creation Workflow\n\nWHEN a user submits a post, THE system SHALL follow this comprehensive workflow:\n\n```mermaid\ngraph LR\n  A[User Attempts to Create Post] --> B{Is User Authenticated?}\n  B -->|\"No\"| C[Redirect to Authentication Flow]\n  B -->|\"Yes\"| D[Display Post Creation Interface]\n  D --> E[User Selects Post Type]\n  E --> F[User Enters Title and Content]\n  F --> G{Content Valid?}\n  G -->|\"No\"| H[Display Validation Errors]\n  G -->|\"Yes\"| I[Check Community Rules]\n  I --> J{Complies with Rules?}\n  J -->|\"No\"| K[Display Rule Violation Warnings]\n  J -->|\"Yes\"| L[Submit Post]\n  L --> M[System Validates Against Spam Filters]\n  M --> N{Spam Detected?}\n  N -->|\"Yes\"| O[Flag for Moderator Review]\n  N -->|\"No\"| P[Assign Unique Post ID]\n  P --> Q[Record Creation Timestamp]\n  Q --> R[Set Initial Visibility]\n  R --> S[Notify Community Subscribers]\n  S --> T[Display Success Message]\n```\n\n### Post Submission Process\n\nWHEN a user submits a post, THE system SHALL validate all required fields before processing.\n\nTHE system SHALL display specific error messages for each validation failure, clearly indicating which requirements were not met.\n\nTHE system SHALL prevent form submission until all validation requirements are satisfied, providing real-time validation feedback.\n\nWHEN a post is successfully submitted, THE system SHALL assign a unique post identifier (UUID) and record the creation timestamp.\n\nTHE system SHALL associate the post with the author's user profile and karma calculation system.\n\nTHE system SHALL immediately make the post visible according to its visibility rules:\n- Posts in public communities SHALL be immediately visible to all\n- Posts in private communities SHALL only be visible to members\n- Posts in restricted communities SHALL be immediately visible to members\n- Posts in communities with pre-moderation SHALL be flagged as pending\n\nTHE system SHALL confirm successful post creation to the user with a success message and a direct link to the post.\n\nTHE system SHALL increment the community's post count immediately upon successful submission.\n\n## Supported Content Types\n\n### Text Posts\n\nTHE system SHALL support text-only posts (\"self posts\") where the main content is written in a rich text editor.\n\nTHE system SHALL allow text posts to include rich formatting such as:\n- Paragraph text with line breaks\n- Basic formatting (bold, italic, strikethrough)\n- Lists (ordered and unordered)\n- Blockquotes\n- Code blocks\n- Horizontal rules\n- Mentions of other users (@username)\n\nTHE system SHALL support Markdown syntax for text formatting in posts.\n\nTHE system SHALL render Markdown to HTML for display while preserving the original Markdown content for editing.\n\nTHE system SHALL enforce a maximum content length of 40,000 characters for text posts.\n\nTHE system SHALL allow empty content for text posts (title-only posts) but display a conspicuous warning to the user.\n\nTHE system SHALL validate that text content does not contain prohibited words or spam patterns before submission.\n\n### Link Posts\n\nTHE system SHALL support link posts that share external web content.\n\nTHE system SHALL validate that link post URLs are properly formatted with valid protocol (http:// or https://).\n\nTHE system SHALL accept URLs up to 2,000 characters in length.\n\nTHE system SHALL allow users to provide a custom title for link posts, which SHALL override the automatically extracted title.\n\nTHE system SHALL automatically resolve URL redirects to capture the final destination URL for preview generation and spam detection.\n\nTHE system SHALL attempt to extract metadata (title, description, image, favicon) from linked web pages to create rich previews.\n\nTHE system SHALL display link previews with the extracted title, source domain, and representative image when available.\n\nTHE system SHALL support preview generation for major social media platforms, news sites, and video sharing services.\n\nTHE system SHALL allow optional descriptive text to accompany link posts, with the same formatting capabilities as text posts.\n\nTHE system SHALL flag links to known malicious domains and display warnings before submission.\n\nTHE system SHALL display a \"spoiler\" or \"NSFW\" toggle for link posts with appropriate content warnings.\n\n### Image Posts\n\nTHE system SHALL support image uploads as the primary content of posts.\n\nTHE system SHALL accept common image formats including JPG, PNG, GIF, and WEBP.\n\nTHE system SHALL enforce a maximum file size of 25MB per image.\n\nTHE system SHALL allow users to upload multiple images in a single post, creating a gallery format.\n\nTHE system SHALL limit the number of images in a single post to 10.\n\nTHE system SHALL generate optimized thumbnails and multiple display sizes (small, medium, large) for responsive rendering.\n\nTHE system SHALL preserve original image aspect ratios to prevent distortion.\n\nTHE system SHALL display image posts with proper attribution, captions, and sharing controls.\n\nTHE system SHALL validate images for inappropriate content using automated detection before making them publicly visible.\n\nTHE system SHALL support animated GIFs with reasonable size and animation length limits (maximum 30 seconds).\n\nTHE system SHALL allow users to rearrange the order of multiple images in a gallery post before submission.\n\nTHE system SHALL display a \"spoiler\" or \"NSFW\" toggle for image posts with appropriate content warnings.\n\n### Content Type Selection Interface\n\nTHE system SHALL present users with clear, prominent options to select the post type: text, link, or image.\n\nTHE system SHALL dynamically adjust the input interface based on selected post type, showing relevant fields and hiding irrelevant ones.\n\nTHE system SHALL allow users to switch between post types before submission, preserving entered content when compatible (e.g., title text when switching from text to link post).\n\nTHE system SHALL guide users through the appropriate input fields for each content type with contextual help and examples.\n\n## Edit and Delete Functionality\n\n### Post Editing\n\nTHE system SHALL allow post authors to edit their posts after submission.\n\nTHE system SHALL allow edits to post titles, content, links, and image sets.\n\nTHE system SHALL track and display edit history by showing that a post has been edited, including the timestamp of the last edit.\n\nTHE system SHALL prevent editing of posts that have been locked by moderators or administrators to maintain discussion integrity.\n\nTHE system SHALL allow edits to image posts by replacing or rearranging the image set, with the same file type and quantity restrictions as original creation.\n\nTHE system SHALL allow users to convert between compatible post types (e.g., text post to link post) through editing, provided content requirements are met for the target post type.\n\nTHE system SHALL enforce the same validation rules on edited content as on original submission to maintain content standards.\n\nTHE system SHALL allow unlimited edits to posts by the author, with no time restrictions.\n\nWHEN a post is substantially edited (determined by content difference thresholds), THE system SHALL notify active contributors in the comment thread through @mentions.\n\nTHE system SHALL allow moderators and administrators to edit any post for moderation purposes, with an \"edited by moderator\" indicator.\n\nTHE system SHALL allow administrators to edit deleted posts for legal or compliance reasons, with appropriate audit logging.\n\n### Post Deletion\n\nTHE system SHALL allow post authors to delete their own posts.\n\nTHE system SHALL provide a confirmation dialog with clear warnings before permanent deletion to prevent accidental removal.\n\nTHE system SHALL allow users to undelete posts within 24 hours of deletion, fully restoring the post and its associated comments.\n\nTHE system SHALL permanently remove posts after 24 hours of deletion, with no recovery option.\n\nTHE system SHALL hide deleted posts from public view but retain them in the database with metadata for moderation and legal compliance purposes.\n\nTHE system SHALL remove upvote counts and hide the post body for deleted posts, but display a notice that the post was deleted by the author.\n\nTHE system SHALL allow deleted posts to be viewed by the original author in their user profile activity history.\n\nTHE system SHALL allow moderators to permanently delete posts that violate community guidelines, with immediate removal from all views.\n\nTHE system SHALL allow administrators to permanently delete posts for platform-wide violations.\n\nTHE system SHALL differentiate between user-deleted and moderator-deleted posts in the deletion notice.\n\nTHE system SHALL notify post authors when moderators or administrators delete their posts, providing the reason for deletion.\n\nTHE system SHALL decrement the community's post count when a post is deleted by author or moderator.\n\n## Post Visibility and Moderation\n\n### Content Moderation Workflow\n\nTHE system SHALL allow community moderators to configure moderation rules for their communities.\n\nTHE system SHALL support multiple moderation modes:\n- **Post-moderation**: Posts are immediately visible after submission\n- **Pre-moderation**: Posts require moderator approval before visibility\n- **Hybrid moderation**: Certain keywords or user reputations trigger pre-approval requirements\n\nTHE system SHALL automatically apply community-level moderation rules to incoming posts, including automated filters for prohibited topics and spam detection.\n\nTHE system SHALL flag posts that potentially violate community rules for moderator review.\n\nTHE system SHALL allow moderators to take the following actions on posts:\n- Approve (for pre-moderated communities)\n- Remove (take down content)\n- Mark as spam\n- Lock (prevent further comments)\n- Pin (highlight at top of community)\n- Assign post flairs\n\nTHE system SHALL track all moderation actions with timestamps, moderator identification, and reasoning.\n\nTHE system SHALL allow appeal processes for removed posts, with escalation paths to higher-level moderators or administrators.\n\nTHE system SHALL provide automated suggestions for moderation decisions based on post content, user history, and community patterns.\n\n### Post Locking\n\nTHE system SHALL allow moderators and administrators to lock posts to prevent additional comments.\n\nWHEN a post is locked, THE system SHALL display a \"locked\" indicator and disable comment submission.\n\nTHE system SHALL allow editing of locked posts by the author, provided the community allows post editing.\n\nTHE system SHALL not allow deletion of locked posts by the author until the lock is removed by a moderator.\n\nTHE system SHALL allow moderators to unlock posts when appropriate.\n\n### Post Status States\n\nTHE system SHALL support the following post statuses:\n- Draft (not submitted)\n- Pending (awaiting submission or moderator approval)\n - Active (visible and engaging)\n- Removed (taken down by user, moderator, or administrator)\n- Locked (comments disabled)\n- Archived (old posts with limited interaction)\n- Promoted (featured content)\n\nTHE system SHALL transition posts between status states based on user actions, moderator decisions, and automated business rules.\n\nTHE system SHALL display appropriate status indicators for posts in non-active states, including the reason for removal when applicable.\n\n## User Interactions and Permissions\n\n### Cross-Feature Integration\n\nTHE system SHALL integrate post management with the voting system, allowing users to upvote and downvote posts according to the voting business rules.\n\nTHE system SHALL integrate post management with the comment system, allowing users to comment on posts and create nested reply threads.\n\nTHE system SHALL integrate post management with the karma system, awarding author karma points for post engagement.\n\nTHE system SHALL integrate post management with the subscription system, allowing users to subscribe to communities and receive updates on new posts.\n\nTHE system SHALL integrate post management with user profiles, displaying all posts by a user in their profile activity section.\n\nTHE system SHALL integrate post management with the reporting system, allowing users to report inappropriate posts for moderator review.\n\nTHE system SHALL integrate with the notification system to alert users of new comments, replies, and moderation actions on their posts.\n\n### Visibility Rules by Role\n\n| Action | Guest | Member | Community Moderator | Admin |\n|--------|-------|--------|---------------------|-------|\n| View public posts | ✅ | ✅ | ✅ | ✅ |\n| View private community posts | ❌ | ✅ (subscribed) | ✅ | ✅ |\n| Create posts | ❌ | ✅ | ✅ | ✅ |\n| Edit own posts | ❌ | ✅ | ✅ | ✅ |\n| Edit others' posts | ❌ | ❌ | ❌ | ✅ |\n| Delete own posts | ❌ | ✅ | ❌ | ✅ |\n| Delete others' posts | ❌ | ❌ | ❌ | ✅ |\n| Remove any post | ❌ | ❌ | ✅ | ✅ |\n| Lock post comments | ❌ | ❌ | ✅ | ✅ |\n| Mark post as official | ❌ | ❌ | ✅ | ✅ |\n| Bypass rate limits | ❌ | ❌ | ❌ | ✅ |\n| View deleted posts | ❌ | ❌ | ✅ | ✅ |\n| Restore deleted posts | ❌ | ❌ | ❌ | ✅ |\n| View moderation log | ❌ | ❌ | ✅ | ✅ |\n\n### Community Rules Enforcement\n\nTHE system SHALL validate posts against community-specific rules before submission.\n\nTHE system SHALL display community rules to users during post creation to promote compliance and education.\n\nTHE system SHALL warn users about potential rule violations before they submit posts with pre-submission checks.\n\nTHE system SHALL prevent submission of posts that clearly violate community rules (e.g., banned topics, prohibited content types, restricted domains).\n\nTHE system SHALL allow community moderators to define custom rules for their communities with specific content restrictions and requirements.\n\nTHE system SHALL enforce both platform-wide rules and community-specific rules on all posts to maintain quality and safety standards.\n\nTHE system SHALL require moderator approval for posts containing restricted content even if submitted by moderators themselves to prevent abuse.\n\n## Error Handling Scenarios\n\n### Input Validation Errors\n\nWHEN a user submits a post with an invalid title, THE system SHALL display a specific error message indicating the problem (e.g., \"Title must be at least 10 characters long\").\n\nWHEN a user submits a link post with an invalid URL, THE system SHALL display an error message suggesting proper URL format (\"Please enter a valid URL starting with http:// or https://\").\n\nWHEN a user attempts to upload an image of unsupported type, THE system SHALL display an error listing accepted formats (\"Please upload images in JPG, PNG, GIF, or WEBP format\").\n\nWHEN a user attempts to upload an image exceeding size limits, THE system SHALL display the maximum allowed size (\"Image must be smaller than 25MB\").\n\nWHEN a user exceeds the maximum number of images in a post, THE system SHALL display the limit and prevent additional uploads (\"You can upload up to 10 images per post\").\n\n### Permission Errors\n\nWHEN a user attempts to post to a private community they haven't joined, THE system SHALL display a message explaining community access requirements (\"You must join this community before posting\").\n\nWHEN a guest user attempts to create a post, THE system SHALL prompt them to register or log in (\"Please log in to create posts\").\n\nWHEN a user attempts to edit or delete a post they don't own, THE system SHALL display a permission denied message (\"Only post authors and moderators can edit posts\").\n\nWHEN a user without moderation rights attempts to remove a post, THE system SHALL display a permission denied message (\"Insufficient permissions to remove this post\").\n\nWHEN a user exceeds the rate limit for post creation, THE system SHALL display a clear message with the remaining time until the limit resets (\"You have reached the maximum number of posts allowed per hour. Please try again in 30 minutes\").\n\n### System Errors\n\nWHEN a post submission fails due to system error, THE system SHALL preserve the user's input to prevent data loss and allow resubmission after resolving the issue.\n\nWHEN image processing fails, THE system SHALL display an error message and allow the user to retry the upload or remove the problematic image.\n\nWHEN external link metadata extraction fails, THE system SHALL allow post submission with minimal preview or none, but continue attempting preview generation in the background.\n\n| Error Scenario | User Message |\n|----------------|--------------|\n| Authentication required | \"Please log in to create posts\" |\n| Email unverified | \"Please verify your email address before creating posts\" |\n| Invalid title length | \"Title must be between 10 and 300 characters\" |\n| Invalid URL format | \"Please enter a valid URL starting with http:// or https://\" |\n| Unsupported image format | \"Please upload images in JPG, PNG, GIF, or WEBP format\" |\n| Image size too large | \"Image must be smaller than 25MB\" |\n| Excessive images | \"You can upload up to 10 images per post\" |\n| Community access denied | \"You must join this community before posting\" |\n| Edit access denied | \"Only post authors and moderators can edit posts\" |\n| Post removal failed | \"Failed to remove post. Please try again.\" |\n| Rate limit exceeded | \"You have reached the maximum number of posts allowed per hour. Please try again in X minutes\" |\n| Content violation | \"This content violates community rules: [specific rule]\" |\n| Spam detection | \"This post has been flagged for potential spam. It will be reviewed by moderators.\" |\n\n## Post Flairs and Categorization\n\nTHE system SHALL support post flairs that allow community moderators to categorize posts within communities.\n\nTHE system SHALL allow moderators to define custom flairs with text labels and color codes.\n\nTHE system SHALL display post flairs prominently next to post titles in community views.\n\nTHE system SHALL allow post authors to select from predefined flairs during post creation, with final flair assignment at moderator discretion.\n\nTHE system SHALL support flair templates that automatically assign flairs based on post content, keywords, or author reputation.\n\nTHE system SHALL allow users to filter posts by flair within communities to focus on specific content types.\n\nTHE system SHALL include flair information in the post feed API responses for client-side filtering.\n\nTHE system SHALL allow administrators to define global flair categories for platform-wide content organization.\n\n## Post Lifecycle Management\n\nTHE system SHALL support automated post archiving for content that has not received engagement within a configurable timeframe.\n\nTHE system SHALL allow community moderators to manually archive posts that are no longer relevant.\n\nWHEN a post is archived, THE system SHALL:\n- Prevent new comments\n- Display an \"archived\" indicator\n- Move the post to a separate archive section\n- Exclude from certain sorting algorithms like \"hot\"\n\nTHE system SHALL allow moderators to unarchive posts when they become relevant again.\n\nTHE system SHALL implement rate limiting for post creation to prevent spam:\n- Members: 10 posts per hour\n- Moderators: 20 posts per hour\n- Administrators: No limit\n\nWHEN the rate limit is approached, THE system SHALL display a warning to the user.\n\n## Relationship with Other Documents\n\nFor authentication requirements, please refer to the [Authentication Flow Guide](./02-authentication-flow.md).\n\nFor user role definitions and permissions, please refer to the [User Roles Documentation](./01-user-roles.md).\n\nFor voting system details, please refer to the [Voting System Requirements](./05-voting-system.md).\n\nFor comment system functionality, please refer to the [Comment System Design](./06-comment-system.md).\n\nFor community management features, please refer to the [Community Management Specification](./03-community-management.md).\n\nFor user profile requirements, please refer to the [User Profile Documentation](./09-user-roles.md).\n\nFor content reporting procedures, please refer to the [Content Reporting Workflow](./10-content-reporting.md).\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Details voting system for posts and comments with business logic","filename":"05-voting-system.md","documentType":"requirement","outline":["Upvote/Downvote Mechanics","Karma Calculation","Vote Limits","Vote Reversal"],"audience":"backend developers","keyQuestions":["How does voting work?","How is karma calculated?","Are there vote limits?"],"detailLevel":"comprehensive","relatedDocuments":["01-user-roles.md","04-post-management.md"],"constraints":["Must focus on business rules","Must not include technical implementation","Must specify voting logic"],"content":"# Voting System Requirements Analysis\n\n## Document Purpose and Scope\nThis document details the business requirements for the voting system within the community platform. The voting system enables users to express approval or disapproval of content through upvotes and downvotes, calculates user karma based on voting behavior, and supports content ranking algorithms. This document focuses exclusively on business requirements and user interactions, not technical implementation details.\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*\n\n## System Overview\n\n### Core Voting Functionality\nThe voting system allows authenticated users to influence content visibility and contribute to user reputation through structured voting mechanics. Voting serves as the primary engagement metric, driving content ranking while building user credibility through the karma system.\n\n### Karma Calculation Principles\nUser karma represents contribution quality and community standing, calculated from votes received on user-generated content. Higher karma indicates trusted community members, potentially unlocking privileges while maintaining the core principle that every user's vote carries equal weight in content ranking.\n\n### User Engagement Mechanics\nVoting creates a feedback loop where quality content rises to prominence while users build reputation through valuable contributions. The system balances simplicity (one-click voting) with safeguards against abuse (vote limits, anti-gaming measures).\n\n## User Roles and Permissions\n\n### Authentication Requirements\nTHE system SHALL require user authentication for voting or receiving karma.\nTHE system SHALL allow unauthenticated users to view vote counts and overall karma.\nWHEN a guest attempts to vote, THE system SHALL redirect to login without revealing vote manipulation possibilities.\n\n### Member Voting Privileges\nMembers can upvote or downvote posts and comments once per content item.\nMembers can change their vote by selecting the opposite action within any window.\nMembers cannot vote on their own content to prevent self-promotion.\nMembers receive karma based on votes their content receives from others.\n\n### Moderator Capabilities\nCommunity moderators have the same voting capabilities as members.\nCommunity moderators cannot use voting privileges to artificially influence content within communities they moderate.\nCommunity moderators receive karma normally based on content engagement.\n\n### Admin Oversight\nAdministrators have the same voting capabilities as members.\nAdministrators cannot manipulate votes or karma through administrative privileges.\nAdministrators receive karma normally based on content engagement.\nAdministrators can audit voting patterns for abuse detection.\n\n## Functional Requirements (EARS Format)\n\n### Upvote/Downvote Mechanics\nWHEN a member views a post or comment, THE system SHALL display upvote and downvote buttons with current vote counts.\nWHEN a member clicks the upvote button on a post, THE system SHALL increment the post's upvote count by one and reduce the downvote count by one if previously downvoted.\nWHEN a member clicks the downvote button on a comment, THE system SHALL increment the comment's downvote count by one and reduce the upvote count by one if previously upvoted.\nTHE system SHALL prevent members from voting on their own posts or comments.\nTHE system SHALL update vote counts in real-time from the member's perspective immediately after voting.\nTHE system SHALL apply vote weighting of 1 point for upvotes and -1 point for downvotes in all calculations.\n\n### Vote Limits and Restrictions\nTHE system SHALL limit each member to one vote per post or comment.\nTHE system SHALL not impose daily vote limits to encourage active participation.\nTHE system SHALL prevent automated voting patterns through behavior analysis.\nTHE system SHALL require human interaction for each vote action.\nWHERE voting occurs from multiple devices associated with the same account, THE system SHALL treat votes as originating from the same member with all established limitations.\n\n### Vote Reversal Rules\nWHEN a member clicks their previously selected vote button again, THE system SHALL remove their vote (set to neutral) and update counts accordingly.\nWHEN a member changes their vote from downvote to upvote, THE system SHALL decrement the downvote count by one and increment the upvote count by one.\nTHE system SHALL allow vote changes at any time with no time restriction.\nThe system SHALL reflect vote changes in real-time from the voter's perspective.\nThe system SHALL preserve vote timing for abuse detection regardless of subsequent changes.\n\n### Karma Calculation Logic\nWHEN a member's post receives an upvote from another member, THE system SHALL increase the post author's karma by 1 point.\nWHEN a member's post receives a downvote from another member, THE system SHALL decrease the post author's karma by 1 point.\nWHEN a member's comment receives an upvote from another member, THE system SHALL increase the comment author's karma by 1 point.\nWHEN a member's comment receives a downvote from another member, THE system SHALL decrease the comment author's karma by 1 point.\nTHE system SHALL count all votes equally regardless of the voter's own karma level.\nTHE system SHALL calculate karma as the sum of all individual vote impacts on a user's content.\nTHE system SHALL update a member's displayed karma in real-time when they receive votes.\nTHE system SHALL display total karma on user profiles with historical context.\n\n## Business Rules\n\n### Vote Validation\nTHE system SHALL validate that votes originate from authenticated members.\nTHE system SHALL validate that members cannot vote on their own content.\nTHE system SHALL validate that each member can only have one active vote per content item.\nTHE system SHALL record the timestamp of when each vote is cast for analytics and abuse detection.\nTHE system SHALL maintain vote anonymity - users cannot see who voted on their content.\nTHE system SHALL prevent vote brigading through pattern detection of coordinated voting.\nTHE system SHALL treat bots and automated scripts as violations of voting integrity.\n\n### Anti-Gaming Measures\nTHE system SHALL implement server-side vote validation to prevent client manipulation.\nTHE system SHALL monitor for sock puppet accounts created to manipulate voting.\nTHE system SHALL detect and neutralize coordinated voting patterns between accounts.\nTHE system SHALL maintain voting integrity logs for audit purposes.\nIF suspicious voting patterns are detected, THEN THE system SHALL flag content for moderator review without altering votes.\nIF vote manipulation is confirmed, THEN THE system SHALL allow administrators to invalidate fraudulent votes and suspend abusing accounts.\nWHERE accounts are found to be voting rings, THE system SHALL allow administrators to take appropriate disciplinary action.\n\n### Karma Impact\nTHE initial karma for new members SHALL be 0.\nKarma SHALL serve as a visible indicator of community contribution but not as a vote weight multiplier.\nHigh karma members SHALL not have greater influence on content ranking through voting.\nKarma SHALL be publicly visible on user profiles to establish credibility.\nKarma SHALL include both post and comment contributions in the total score.\n\n## Error Handling Scenarios\n\n### Unauthorized Voting\nIF a guest attempts to vote, THEN THE system SHALL redirect to the authentication flow without confirming whether the action would have been permitted.\nIF an authenticated member attempts to vote on their own content, THEN THE system SHALL display a user-friendly message explaining that self-voting is not permitted.\nIF an account has voting privileges suspended, THEN THE system SHALL display a message explaining the restriction without detailing appeal processes.\n\n### Invalid Vote Attempts\nIF a member's vote request fails due to system error, THEN THE system SHALL notify the member that their vote was not recorded and suggest retrying.\nIF a member attempts to cast multiple simultaneous votes through technical manipulation, THEN THE system SHALL process only one vote and maintain system integrity.\nIF network connectivity is lost during voting, THEN THE system SHALL resolve the vote state when connectivity is restored based on server records.\n\n### System Errors\nIF the voting system experiences high load, THEN THE system SHALL maintain vote integrity while potentially delaying UI updates for non-voting users.\nIF database connectivity is temporarily lost, THEN THE system SHALL queue votes for processing when connectivity is restored without losing user actions.\nIF karma calculation fails, THEN THE system SHALL display the last known accurate karma score with a visual indicator that updates are pending.\n\n## Performance Requirements\nTHE system SHALL process vote submissions and return confirmation within 2 seconds under normal load.\nTHE system SHALL handle voting interactions from 10,000 concurrent users during peak traffic periods.\nTHE system SHALL update vote counts for the voting user immediately upon successful submission.\nTHE system SHALL propagate vote count updates to other viewers within 5 seconds of submission.\nTHE system SHALL maintain voting functionality even if non-essential services (analytics, notifications) are temporarily unavailable.\n\n## Diagrams\n\n### Voting Flow\n```mermaid\ngraph LR\n    A[\"User Views Content\"] --> B{\"User Authenticated?\"}\n    B -->|\"No\"| C[\"Show Vote Counts Only\"]\n    B -->|\"Yes\"| D[\"Display Vote Buttons\"]\n    D --> E{\"Click Vote?\"}\n    E -->|\"No\"| F[\"Continue Browsing\"]\n    E -->|\"Yes\"| G{\"Vote on Own Content?\"}\n    G -->|\"Yes\"| H[\"Show Error Message\"]\n    G -->|\"No\"| I[\"Submit Vote\"]\n    I --> J{\"Valid?\"}\n    J -->|\"No\"| K[\"Show Failure Message\"]\n    J -->|\"Yes\"| L[\"Update Vote Counts\"]\n    L --> M[\"Update User Karma\"]\n    M --> N[\"Reflect in User Profile\"]\n```\n\n### Karma Calculation Flow\n```mermaid\ngraph LR\n    A[\"Content Receives Vote\"] --> B{\"Vote Type?\"}\n    B -->|\"Upvote\"| C[\"Increase Author Karma by 1\"]\n    B -->|\"Downvote\"| D[\"Decrease Author Karma by 1\"]\n    C --> E[\"Update Profile Display\"]\n    D --> E\n    E --> F[\"Store in User Record\"]\n    F --> G[\"Persist Across Sessions\"]\n```"},{"reason":"Documents comment system with nested replies and moderation","filename":"06-comment-system.md","documentType":"user-flow","outline":["Comment Creation","Nested Replies","Comment Editing","Reply Depth Limits"],"audience":"backend developers","keyQuestions":["How are comments created?","How do nested replies work?","How are comments moderated?"],"detailLevel":"comprehensive","relatedDocuments":["04-post-management.md"],"constraints":["Must describe user interactions","Must not include API specs","Must focus on comment workflows"],"content":"# Comment System Requirements Analysis\n\n## Introduction and Scope\n\nThis document specifies the requirements for the comment system of a Reddit-like community platform. The comment system enables users to engage with content by adding comments to posts and replying to existing comments in a nested hierarchy. This system supports user interaction, content discussion, and community engagement through a structured commenting interface.\n\nThe scope of this document includes:\n- Comment creation and submission\n- Nested reply functionality with depth limitations\n- Comment editing and deletion\n- Comment moderation capabilities\n- User interactions with comments\n- Integration with voting system for comments\n- Reporting mechanisms for inappropriate comments\n\n## Business Model Context\n\n### Why This Service Exists\n\nThe comment system is a critical component of the community platform's engagement strategy. It enables users to discuss content, share perspectives, and build relationships around shared interests. Comments increase user retention by creating ongoing conversations around posts, which drives repeat visits and platform engagement. The nested reply structure facilitates organized discussions, making it easier for users to follow threads and contribute meaningfully.\n\n### Revenue Strategy\n\nWhile the comment system itself is not directly monetized, it contributes significantly to the overall platform's value by:\n- Increasing user engagement metrics that attract advertisers\n- Creating valuable user-generated content that enhances platform SEO\n- Building community loyalty that reduces churn and increases lifetime value\n- Providing data on user interests and discussions for targeted advertising\n\n### Growth Plan\n\nThe comment system supports the platform's growth by:\n- Encouraging user participation and content creation\n- Facilitating community building around topics of interest\n- Creating network effects where more users attract more discussion\n- Enabling viral content through shareable and engaging discussions\n\n### Success Metrics\n\n- Average comments per post\n- Comment engagement rate (percentage of post viewers who comment)\n- Reply depth (average nesting level of comments)\n- Time spent on post comment threads\n- User retention following commenting activity\n\n## User Roles and Permissions\n\nThe following user roles have been defined for the system, each with specific permissions related to the comment system:\n\n| Action | Guest | Member | Community Moderator | Admin |\n|--------|-------|--------|----------------------|-------|\n| View comments | ✅ | ✅ | ✅ | ✅ |\n| Create comment | ❌ | ✅ | ✅ | ✅ |\n| Create nested reply | ❌ | ✅ | ✅ | ✅ |\n| Edit own comment | ❌ | ✅ | ✅ | ✅ |\n| Delete own comment | ❌ | ✅ | ✅ | ✅ |\n| Edit any comment | ❌ | ❌ | ✅ | ✅ |\n| Delete any comment | ❌ | ❌ | ✅ | ✅ |\n| Report comment | ❌ | ✅ | ✅ | ✅ |\n| Moderate reported comments | ❌ | ❌ | ✅ | ✅ |\n\n### Authentication Requirements\n\nThe system uses JWT (JSON Web Tokens) for authentication and authorization. The token payload contains:\n- userId: String (user identifier)\n- role: String (user role name)\n- permissions: Array of strings (specific permissions for the user)\n\nAccess tokens expire after 30 minutes, while refresh tokens expire after 7 days. Tokens are stored in localStorage for convenience, with the option to use httpOnly cookies for enhanced security.\n\n## Core Comment System Requirements\n\n### Comment Creation and Submission\n\nWHEN a user submits a comment on a post, THE system SHALL validate the comment content and create the comment if validation passes.\n\nWHEN validating comment content, THE system SHALL enforce the following constraints:\n- Content length must be between 1 and 10,000 characters\n- Content must not consist solely of whitespace or empty elements\n- Content must be properly escaped to prevent XSS attacks\n- Content must not contain banned words as defined by community or platform rules\n\nWHEN a member attempts to create a comment, THE system SHALL associate the comment with the user's account and the targeted post.\n\nWHEN a guest attempts to create a comment, THE system SHALL deny the action and prompt the user to register or log in.\n\n### Nested Reply Functionality\n\nTHE system SHALL support nested replies to comments up to a maximum depth of 6 levels.\n\nWHEN a user creates a reply to a comment, THE system SHALL establish a parent-child relationship between the comments in the data model.\n\nWHEN displaying comment threads, THE system SHALL render replies with visual indentation that corresponds to their nesting level, up to the maximum depth.\n\nWHEN a comment reaches the maximum nesting depth (level 6), THE system SHALL disable the reply function for that comment and display a message indicating that the maximum reply depth has been reached.\n\nWHEN a user views a post, THE system SHALL display top-level comments in the order determined by the sorting algorithm (default: best/hot), with replies collapsed by default.\n\n### Comment Editing and Deletion\n\nTHE system SHALL allow users to edit or delete their own comments within 2 hours of creation.\n\nWHEN a user edits a comment, THE system SHALL preserve the original creation timestamp and display an \"edited\" indicator next to the comment.\n\nWHEN a user deletes a comment, THE system SHALL remove the visible content but retain the comment record with a \"deleted\" status to preserve thread integrity.\n\nWHEN a comment is deleted, THE system SHALL display a placeholder indicating the comment was removed, and shall collapse any replies to maintain a coherent thread structure.\n\nCOMMUNITY MODERATORS AND ADMINS SHALL have the ability to edit or delete any comment regardless of time constraints.\n\nWHEN a moderator or admin edits a comment, THE system SHALL preserve the original author information but add a moderator edit indicator.\n\n### Reply Depth Limits\n\nTHE system SHALL enforce a maximum nesting depth of 6 levels for replies to prevent excessively deep and difficult-to-follow threads.\n\nWHEN determining nesting depth, THE system SHALL count from the top-level comment as level 1.\n\nWHEN a reply would exceed the maximum nesting depth, THE system SHALL prevent submission and notify the user that the maximum reply depth has been reached.\n\nWHILE viewing a comment thread, THE system SHALL provide a \"jump to top\" link for deeply nested replies to improve navigation.\n\n### Moderation Capabilities\n\nCOMMUNITY MODERATORS AND ADMINS SHALL have tools to manage comments within their designated communities.\n\nWHEN a comment is reported by a user, THE system SHALL add it to a moderation queue for review by community moderators.\n\nWHEN reviewing a reported comment, THE moderator SHALL have options to: approve, remove, or mark as spam.\n\nTHE system SHALL allow moderators to add explanatory notes when removing comments to guide user behavior.\n\nADMINISTRATORS SHALL have the ability to override moderator decisions and manage comments across all communities.\n\n## User Workflows and Scenarios\n\n### Comment Creation Workflow\n\n```mermaid\ngraph LR\n    A[\"User Views Post\"] --> B{\"Is User Authenticated?\"}\n    B -->|\"No\"| C[\"Show Login Prompt\"]\n    B -->|\"Yes\"| D[\"Display Comment Box\"]\n    D --> E[\"User Enters Comment Content\"]\n    E --> F{\"Content Valid?\"}\n    F -->|\"No\"| G[\"Display Validation Errors\"]\n    F -->|\"Yes\"| H[\"Submit Comment\"]\n    H --> I[\"System Creates Comment Record\"]\n    I --> J[\"Display Comment on Thread\"]\n```\n\n### Nested Reply Workflow\n\n```mermaid\ngraph LR\n    A[\"User Views Comment Thread\"] --> B{\"Select Reply Option\"}\n    B --> C[\"Check Nesting Depth\"]\n    C --> D{\"At Max Depth?\"}\n    D -->|\"Yes\"| E[\"Disable Reply Option\"]\n    D -->|\"No\"| F[\"Display Reply Input Field\"]\n    F --> G[\"User Enters Reply Content\"]\n    G --> H[\"Submit Reply\"]\n    H --> I[\"System Creates Reply with Parent Reference\"]\n    I --> J[\"Display Reply in Thread with Indentation\"]\n```\n\n### Comment Editing Workflow\n\n```mermaid\ngraph LR\n    A[\"User Accesses Own Comment\"] --> B{\"Within 2 Hours?\"}\n    B -->|\"No\"| C[\"Show Read-Only Comment\"]\n    B -->|\"Yes\"| D[\"Display Edit Option\"]\n    D --> E[\"User Edits Content\"]\n    E --> F[\"Submit Updated Comment\"]\n    F --> G[\"System Updates Comment Content\"]\n    G --> H[\"Display Comment with Edited Indicator\"]\n```\n\n### Moderator Comment Removal Workflow\n\n```mermaid\ngraph LR\n    A[\"Moderator Accesses Comment\"] --> B{\"Initiate Moderation\"}\n    B --> C[\"Review Comment Against Guidelines\"]\n    C --> D{\"Decision Required\"}\n    D --> E{\"Approve, Remove, or Spam?\"}\n    E -->|\"Approve\"| F[\"No Action Taken\"]\n    E -->|\"Remove\"| G[\"System Marks Comment as Removed\"]\n    E -->|\"Spam\"| H[\"System Marks Comment as Spam and Applies Penalties\"]\n    G --> I[\"Display Removal Notice\"]\n    H --> J[\"Remove Comment and Notify User\"]\n```\n\n## Key Business Rules\n\n- **Rule 1**: Only authenticated users (members and above) may create comments or replies\n- **Rule 2**: Users may edit or delete their own comments within 2 hours of creation\n- **Rule 3**: Moderators and admins may edit or delete any comment at any time\n- **Rule 4**: Comment threads are limited to a maximum nesting depth of 6 levels\n- **Rule 5**: Deleted comments are replaced with placeholders to maintain thread integrity\n- **Rule 6**: Edited comments display an \"edited\" indicator to maintain transparency\n- **Rule 7**: All comments are subject to community guidelines and may be reported by users\n- **Rule 8**: Reported comments enter a moderation queue for review\n- **Rule 9**: Moderator actions on comments are logged for accountability\n- **Rule 10**: Users receive notification when their comment is removed by moderation\n\n## Error Handling and Edge Cases\n\nIF a user attempts to create a comment while not authenticated, THEN THE system SHALL return an authentication error and redirect to login.\n\nIF a user submits a comment with content exceeding 10,000 characters, THEN THE system SHALL reject the submission and display a character limit message.\n\nIF a user attempts to edit a comment after the 2-hour window has expired, THEN THE system SHALL disable the edit function and display a message indicating the time limit has been reached.\n\nIF multiple users attempt to reply to the same comment simultaneously, THEN THE system SHALL handle concurrent submissions without data loss or corruption.\n\nIF a parent comment is deleted, THEN THE system SHALL collapse and hide its reply chain while preserving the ability to restore if the parent is undeleted.\n\nIF there is a system failure during comment submission, THEN THE system SHALL preserve the user's entered content to allow recovery and resubmission.\n\nIF a moderator removes a comment that has received replies, THEN THE system SHALL collapse the reply thread and display a notice that the parent comment was removed.\n\n## Performance Expectations\n\nWHEN a user submits a comment, THE system SHALL validate and confirm receipt within 2 seconds.\n\nWHEN loading a post with comments, THE system SHALL display the initial comment thread view within 3 seconds, even for posts with hundreds of comments.\n\nWHEN expanding a collapsed reply thread, THE system SHALL render the replies within 1 second.\n\nTHE system SHALL support concurrent commenting activity on popular posts with response times not exceeding 3 seconds under normal load conditions.\n\n## Relationship to Other Documents\n\nThis document integrates with and depends on the following specifications:\n\n- [User Roles and Permissions](./01-user-roles.md): Defines the roles and their capabilities that govern access to comment functionality\n- [Post Management Requirements](./04-post-management.md): Specifies how comments are associated with posts and inherit visibility settings\n- [Voting System Specification](./05-voting-system.md): Details how users can upvote/downvote comments as part of engagement\n- [Content Reporting Workflow](./10-content-reporting.md): Explains the full lifecycle of reported comments from submission to resolution\n\nTogether, these documents provide a complete picture of the commenting ecosystem within the community platform.\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Specifies post sorting algorithms and their business requirements","filename":"07-post-sorting.md","documentType":"requirement","outline":["Hot Sorting Algorithm","New Posts","Top Posts","Controversial Sorting"],"audience":"backend developers","keyQuestions":["How are posts sorted by hot?","What defines new posts?","How is top ranking calculated?"],"detailLevel":"comprehensive","relatedDocuments":["05-voting-system.md"],"constraints":["Must define sorting logic in business terms","Must not include technical algorithms","Must focus on requirements"],"content":"# Post Sorting System Requirements\n\n## Introduction and Scope\n\nThis document specifies the comprehensive business requirements for the post sorting system in the Reddit-like community platform. The sorting system determines how posts are ordered and displayed to users across the platform, enabling content discovery and enhancing user engagement. The system must implement four distinct sorting algorithms: hot, new, top, and controversial, each serving different user needs and content discovery patterns.\n\nThe scope encompasses the business logic and rules for determining post rankings based on engagement metrics, time, and community input. These requirements enable backend developers to implement sorting functionality without ambiguity, ensuring consistent behavior across the platform. This document focuses exclusively on business requirements, not technical implementation details.\n\n## Business Model Context\n\n### Why This Service Exists\n\nThe post sorting system is a core component of the community platform's business model, serving several key functions:\n\n- Surface high-quality, engaging content to users\n- Increase user retention by providing fresh and relevant content\n- Promote community participation by rewarding valuable contributions\n- Support advertising revenue by increasing content discoverability and user engagement\n- Enable effective content moderation through visibility controls\n\nUnlike simple chronological feeds found on many social platforms, sophisticated sorting algorithms create a dynamic content ecosystem where valuable posts receive appropriate visibility regardless of when they were created.\n\n### Growth Plan\n\nThe sorting system supports platform growth by:\n\n- Surfacing new content through the \"new\" sort to ensure fresh posts receive visibility\n- Promoting high-quality content through the \"hot\" and \"top\" sorts to encourage user participation\n- Facilitating discovery of diverse perspectives through the \"controversial\" sort\n- Balancing new and established content to maintain platform activity\n- Preventing content stagnation by ensuring posts don't remain at the top indefinitely\n\n### Success Metrics\n\n- User engagement time: Target increase of 15% through improved content relevance\n- Daily active users: Target 20% of monthly active users daily\n- Content discovery rate: 70% of user sessions include viewing posts beyond top 20\n- Fresh content visibility: 90% of posts receive at least 10 views within 24 hours of posting\n- Return visit rate: 40% of users return within 24 hours\n\n## Detailed Algorithm Specifications\n\n### Hot Sorting Algorithm\n\nTHE hot sorting algorithm SHALL surface posts that are currently generating significant engagement relative to their age.\n\nTHE algorithm SHALL use a formula that considers:\n- Vote velocity (votes per hour)\n- Comment velocity (comments per hour)\n- Current vote score (upvotes minus downvotes)\n- Time since posting\n\nWHEN calculating hot ranking, THE system SHALL exponentially decay the contribution of votes and comments over time to prioritize recent engagement.\n\nTHE system SHALL recalculate hot rankings every 5 minutes to reflect current engagement patterns.\n\nTHE hot algorithm SHALL give greater weight to comments than votes in the calculation, recognizing that comments represent deeper engagement.\n\nFOR posts of similar age, THE system SHALL prioritize posts with higher comment-to-vote ratios to surface discussion-worthy content.\n\nTHE hot sort SHALL apply a floor to prevent newly posted content with zero engagement from appearing in hot rankings.\n\nTHE hot algorithm SHALL adjust relative weights during peak usage times to prevent popular communities from dominating the rankings.\n\n### New Posts Sorting\n\nTHE new posts sorting SHALL display posts in reverse chronological order based solely on creation timestamp.\n\nTHE system SHALL not consider any engagement metrics when sorting by \"new.\"\n\nTHE new sort SHALL include all posts regardless of score or content type.\n\nWHEN a user accesses a community's new posts view, THE system SHALL display posts starting from the most recently created.\n\nTHE system SHALL not remove posts from the new view based on negative score or reporting status unless they have been removed by moderation.\n\nTHE new sort SHALL be the default view for users browsing communities they haven't joined.\n\nTHE system SHALL mark posts as \"new\" for 24 hours from creation time to support the \"new\" filtering option.\n\nTHE new sorting SHALL be available for both community-specific views and the global feed.\n\n### Top Posts Sorting\n\nTHE top posts sorting SHALL rank content based on their overall engagement metrics.\n\nTHE system SHALL calculate top rankings differently based on the selected time frame:\n- All time: Uses total vote score\n- Today: Uses vote score from the past 24 hours\n- This week: Uses vote score from the past 7 days\n- This month: Uses vote score from the past 30 days\n\nWHEN displaying top posts, THE system SHALL allow users to select their preferred time frame.\n\nTHE default time frame for top sorting SHALL be \"all time.\"\n\nTHE top algorithm SHALL not apply time-based decay to votes, preserving the cumulative nature of this ranking.\n\nTHE system SHALL recalculate top rankings once per hour to reduce computational overhead while maintaining reasonable accuracy.\n\nTHE top sort SHALL exclude posts with extremely negative scores to prevent spam or malicious content from appearing.\n\n### Controversial Sorting\n\nTHE controversial sorting SHALL highlight posts that are generating polarized reactions from the community.\n\nTHE system SHALL calculate controversy using the ratio of upvotes to downvotes combined with overall engagement.\n\nTHE controversy score SHALL increase when a post has a balanced ratio of upvotes to downvotes (between 2:1 and 1:2).\n\nTHE system SHALL require a minimum total vote threshold (50 votes) before a post qualifies for controversial ranking.\n\nTHE controversial algorithm SHALL give greater weight to posts with high comment counts in addition to balanced voting.\n\nTHE controversy score SHALL decay over time similar to the hot algorithm, ensuring timely content receives priority.\n\nTHE system SHALL recalculate controversy rankings every 10 minutes to reflect evolving community sentiment.\n\nTHE controversial sort SHALL not include posts from the past hour to ensure sufficient time for balanced voting patterns to emerge.\n\n## Visual Representations\n\n### Hot Sort Algorithm Flow\n```mermaid\ndiagram graphLR\n  A[\"Calculate Vote Velocity\"] --> B[\"Calculate Comment Velocity\"]\n  B --> C[\"Get Current Vote Score\"]\n  C --> D[\"Determine Time Since Posting\"]\n  D --> E{\"Apply Time Decay\"}\n  E -->|\"Yes\"| F[\"Reduce Vote/Comment Weight\"]\n  E -->|\"No\"| G[\"Maintain Full Weight\"]\n  F --> H[\"Calculate Hot Score\"]\n  G --> H\n  H --> I[\"Store in Hot Rankings\"]\n```\n\n### Sorting Method Selection Flow\n```mermaid\ngraph LR\n  A[\"User Requests Post Feed\"] --> B{\"Sorting Preference\"}\n  B -->|\"Hot\"| C[\"Apply Hot Algorithm\"]\n  B -->|\"New\"| D[\"Apply Chronological Sort\"]\n  B -->|\"Top\"| E[\"Apply Score-Based Sort\"]\n  B -->|\"Controversial\"| F[\"Apply Controversial Algorithm\"]\n  C --> G[\"Return Ordered Posts\"]\n  D --> G\n  E --> G\n  F --> G\n```\n\n## Business Rules\n\n1. Only authenticated users may access personalized sorting preferences\n2. Users may set default sorting preferences in their profile\n3. Sorting preferences SHALL persist across sessions and devices\n4. The system SHALL display the current sorting method to users\n5. Users SHALL have the option to temporarily override default sorting\n6. Sorting algorithms SHALL process posts within 2 seconds of request\n7. The system SHALL cache sorting results for 5 minutes to improve performance\n8. Moderators may manually pin posts to appear at the top regardless of sorting\n9. The system SHALL respect user content filters in all sorting methods\n10. Sorting SHALL not consider votes from banned or suspended users\n11. The system SHALL apply shadow-banning rules to sorting when appropriate\n12. Posts from blocked users SHALL be filtered out before sorting\n13. The system SHALL remove posts with copyright takedown notices from all views\n14. Posts awaiting moderation SHALL not appear in any public sorting views\n\n## Error Scenarios and Handling\n\n### Algorithm Calculation Errors\n\nIF the hot algorithm fails to calculate a score, THEN THE system SHALL fall back to chronological sorting within the last 24 hours.\n\nIF the controversial algorithm cannot determine a valid score due to insufficient votes, THEN THE system SHALL exclude the post from controversial rankings.\n\nIF the top sorting algorithm encounters a system error, THEN THE system SHALL display posts in descending order of vote score.\n\nIF a post has an invalid timestamp, THEN THE system SHALL exclude it from all sorting algorithms and flag it for moderation review.\n\n### Data Integration Issues\n\nIF the system cannot access vote data for sorting calculations, THEN THE system SHALL use comment counts as a primary ranking factor.\n\nIF comment data is unavailable, THEN THE system SHALL prioritize posts with higher vote counts.\n\nIF engagement data is corrupted for a post, THEN THE system SHALL use recency as the primary sorting factor.\n\n### Performance Problems\n\nIF the sorting process exceeds 3 seconds, THEN THE system SHALL return the most recent cached results with a freshness indicator.\n\nIF the system experiences high load, THEN THE system SHALL reduce the frequency of ranking recalculations to maintain responsiveness.\n\nWHEN a sorting algorithm causes performance degradation, THEN THE system SHALL automatically reduce its computational complexity until the issue is resolved.\n\n## Performance Requirements\n\nTHE system SHALL process sorting requests and return results within 2 seconds under normal load conditions.\n\nTHE system SHALL support concurrent sorting requests from 10,000 active users during peak traffic periods.\n\nTHE system SHALL recalculate hot rankings every 5 minutes with 95% of posts updated within 6 minutes.\n\nTHE system SHALL recalculate top rankings every hour with 98% of posts updated within 65 minutes.\n\nTHE system SHALL recalculate controversial rankings every 10 minutes with 95% of posts updated within 12 minutes.\n\nTHE system SHALL implement server-side caching of sorting results with a 5-minute expiration for improved performance.\n\nTHE system SHALL provide a lightweight sorting option for low-bandwidth connections.\n\n## Relationship to Other Documents\n\nThis document builds upon requirements in [User Roles and Authentication](./01-user-roles.md) for access control to sorting preferences.\n\nThe voting data used in sorting algorithms is specified in detail in [Voting System Requirements](./05-voting-system.md).\n\nPost creation and modification timestamps referenced in sorting are defined in [Post Management Specifications](./04-post-management.md).\n\nThe display of sorting options in the user interface is covered in [User Profile Documentation](./09-user-profiles.md).\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Documents subscription and notification features for communities","filename":"08-subscription-system.md","documentType":"user-story","outline":["Subscription Mechanics","Notification Preferences","Unsubscribe Process","Feed Generation"],"audience":"backend developers","keyQuestions":["How do subscriptions work?","How are notifications managed?","How is the feed generated?"],"detailLevel":"comprehensive","relatedDocuments":["03-community-management.md"],"constraints":["Must focus on user requirements","Must not include technical implementation","Must describe subscription workflows"],"content":"## Subscription System Requirements Analysis\n\nThis document provides comprehensive business requirements for the subscription system in our Reddit-like community platform. The subscription system enables users to follow specific communities of interest, receive notifications about new content, and maintain a personalized feed of subscribed content.\n\nTHE subscription system SHALL be a core component of the platform, enabling users to curate their content experience by selecting communities aligned with their interests. This functionality directly supports the platform's business model of user engagement and content discovery.\n\n### Business Model Context\n\nThe subscription system supports our core business model by increasing user engagement and retention. By allowing users to follow topics of interest, we create personalized experiences that encourage daily visits and sustained participation. This drives higher ad impressions and creates opportunities for premium features such as advanced notification controls or priority content delivery.\n\nSubscription-based engagement creates network effects where active users attract more contributors, leading to better content and community growth. This virtuous cycle supports our revenue strategy through increased user lifetime value and platform stickiness.\n\n### Business Objectives\n\n- Increase user engagement by providing personalized content streams\n- Drive daily active users through notification mechanisms\n- Enable topic-based community discovery and content organization\n- Provide moderation teams with tools to manage subscriber communications\n- Support platform growth through organic content discovery\n- Enhance content relevance and contribution quality\n- Minimize information overload through selective content filtering\n\n## User Role Structure and Authentication Requirements\n\n### Core Authentication Functions\n\n- Users must authenticate to subscribe to communities\n- Subscription status is tied to user accounts, not devices or sessions\n- Users can view their subscriptions across devices through account sync\n- Users can manage all active sessions from account security settings\n- Guest users (unauthenticated) can browse public communities but cannot subscribe\n- Members can subscribe to communities after email verification\n- Community moderators have additional subscription-related privileges\n- Administrators have full access to subscription systems and analytics\n\n### User Role Hierarchy\n\nTHE system SHALL implement the following user role hierarchy:\n\n- Guest: Unauthenticated users who can only view public communities and posts\n- Member: Authenticated users who have verified their email and can access full platform features\n- Community Moderator: Members with additional privileges to manage specific communities\n- Admin: Platform staff with full system access and oversight capabilities\n\n### Authentication Requirements\n\nWHEN a user attempts to subscribe to a community, THE system SHALL verify authentication status before processing.\n\nWHEN a user is not authenticated, THE system SHALL redirect to the login page and preserve the subscription intent for after authentication.\n\nWHEN a user completes authentication, THE system SHALL resume the intended action (subscription to the community).\n\nWHEN a user attempts to access subscription management features, THE system SHALL verify authentication and appropriate role permissions.\n\n### User Roles and Permissions\n\nTHE system SHALL enforce role-based access control for all subscription-related actions.\n\n| Action | Guest | Member | Community Moderator | Admin |\n|--------|-------|--------|----------------------|-------|\n| View public communities | ✅ | ✅ | ✅ | ✅ |\n| Subscribe to communities | ❌ | ✅ | ✅ | ✅ |\n| Unsubscribe from communities | ❌ | ✅ | ✅ | ✅ |\n| View own subscription list | ❌ | ✅ | ✅ | ✅ |\n| View other users' subscriptions | ✅ | ❌ | ❌ | ✅ |\n| Receive community notifications | ❌ | ✅ | ✅ | ✅ |\n| Manage community notification settings | ❌ | ✅ | ✅ | ✅ |\n| View subscriber analytics | ❌ | ❌ | ✅ | ✅ |\n| Receive subscription analytics reports | ❌ | ❌ | ✅ | | \n| Bulk message subscribers | ❌ | ❌ | ✅ | ✅ |\n| Override subscription settings | ❌ | ❌ | ❌ | ✅ |\n| Suspend community subscriptions | ❌ | ❌ | ❌ | ✅ |\n| View all user subscriptions | ❌ | ❌ | ❌ | ✅ |\n| Manage subscription limits | ❌ | ❌ | ❌ | ✅ |\n\n## Subscription Mechanics\n\n### Core Subscription Requirements\n\nTHE subscription system SHALL allow authenticated users to subscribe to public communities they wish to follow.\n\nTHE subscription system SHALL display the user's subscription count in their profile dashboard.\n\nTHE subscription system SHALL update subscription status in real-time upon user action.\n\nTHE subscription system SHALL prevent users from subscribing to the same community multiple times.\n\nTHE subscription system SHALL maintain a complete history of user subscriptions and unsubscriptions for analytics and recovery purposes.\n\nTHE subscriber analytics SHALL be available to community moderators and administrators for understanding community growth and engagement patterns.\n\n### Subscription Process Flow\n\n```mermaid\ngraph LR\n    A[\"User Views Community\"] --> B{\"Is User Authenticated?\"}\n    B -->|\"Yes\"| C[\"Show Subscribe Button\"]\n    B -->|\"No\"| D[\"Show Login Prompt\"]\n    C --> E[\"User Clicks Subscribe\"]\n    E --> F[\"System Records Subscription\"]\n    F --> G[\"Update UI with Subscribed State\"]\n    G --> H[\"Add Community to User Feed\"]\n```\n\n### Detailed Subscription Requirements\n\nWHEN a user attempts to subscribe to a community, THE system SHALL verify the user is authenticated before processing.\n\nWHEN a user successfully subscribes to a community, THE system SHALL add the community to their subscription list and confirm with visual feedback.\n\nIF the user is not authenticated, THEN THE system SHALL redirect to login flow and preserve subscription intent for after authentication.\n\nIF the community does not exist, THEN THE system SHALL display an error message indicating the community cannot be found.\n\nIF the community is private and the user lacks access, THEN THE system SHALL display an error message explaining access requirements.\n\nIF the user reaches maximum subscription limit, THEN THE system SHALL display the limit and suggest unsubscribing from inactive communities.\n\nIF the subscription action fails due to system error, THEN THE system SHALL preserve user intent and allow retry.\n\n### Subscription Interface Requirements\n\nWHEN viewing a community page, THE system SHALL display a subscribe button that reflects current subscription status.\n\nTHE subscription button SHALL display in \"subscribed\" state when the user is currently subscribed to the community.\n\nTHE subscription button SHALL animate briefly when clicked to provide feedback on action completion.\n\nTHE system SHALL display subscription count next to the subscribe button, which is visible to all users.\n\nWHEN a user subscribes to a community, THE system SHALL update the subscription count globally.\n\nTHE system SHALL provide immediate visual feedback upon subscription action completion.\n\n## Notification Preferences\n\n### Notification Management Requirements\n\nTHE notification system SHALL allow users to customize their notification preferences for each subscribed community.\n\nTHE notification system SHALL provide default notification settings that can be customized per community.\n\nTHE notification system SHALL persist user preference choices across sessions and devices.\n\nTHE notification system SHALL allow users to configure both delivery methods and content types.\n\n### Notification Types and Controls\n\nTHE system SHALL support the following notification types for subscribed communities:\n\n- New posts in subscribed communities\n- Replies to user's subscribed post threads\n- Top posts from subscribed communities\n- Controversial posts from subscribed communities\n- Community announcements (moderator/admin posts)\n- Scheduled digest summaries (daily/weekly)\n- Member milestones (karma thresholds, contribution anniversaries)\n\nTHE user SHALL be able to configure notification settings independently for each subscription.\n\nTHE system SHALL allow global notification preferences that apply to all current and future subscriptions.\n\nTHE system SHALL allow community-specific overrides of global notification preferences.\n\nTHE system SHALL provide opt-in/out controls for each notification type.\n\nTHE system SHALL allow users to set preferred delivery methods for notifications:\n\n- In-platform notifications (notification center)\n- Email alerts\n- Mobile push notifications\n- RSS feed (for external readers)\n\n```mermaid\ngraph TD\n    A[\"User Accesses Notification Settings\"] --> B[\"System Loads Current Preferences\"]\n    B --> C[\"Display Community List with Notification Toggles\"]\n    C --> D[\"User Configures Notification Types\"]\n    D --> E[\"User Sets Delivery Method\"]\n    E --> F[\"User Saves Preferences\"]\n    F --> G[\"System Updates Notification Rules\"]\n    G --> H[\"Confirm Settings Saved\"]\n```\n\n### Notification Preference Requirements\n\nWHEN a user accesses notification settings, THE system SHALL display all subscribed communities with current notification configurations.\n\nWHEN a user updates notification preferences for a community, THE system SHALL apply changes immediately and confirm successful update.\n\nWHEN a user subscribes to a new community, THE system SHALL apply default notification settings which the user can later customize.\n\nIF the user disables all notification types for a community, THEN THE system SHALL treat this as active subscription with silent updates (community remains in feed).\n\nTHE system SHALL allow users to set global notification preferences that apply to all current and future subscriptions.\n\nTHE system SHALL allow community-specific overrides of global notification preferences.\n\nTHE system SHALL display the effective notification setting when global and local settings conflict.\n\nTHE system SHALL allow bulk editing of notification settings across multiple communities.\n\nTHE system SHALL provide \"quiet hours\" settings to suppress notifications during specified time periods.\n\nTHE system SHALL respect \"do not disturb\" settings on user devices when sending push notifications.\n\nTHE system SHALL provide preview functionality to test notification formats and delivery.\n\n## Unsubscribe Process\n\n### Unsubscription Requirements\n\nTHE system SHALL allow users to unsubscribe from communities they no longer wish to follow.\n\nTHE unsubscription process SHALL be equally accessible from community pages and subscription management interfaces.\n\nTHE unsubscription process SHALL be reversible within a limited recovery window.\n\nTHE system SHALL provide a confirmation step before completing unsubscription to prevent accidental removal.\n\n### Unsubscribe Flow\n\n```mermaid\ngraph LR\n    A[\"User Views Subscribed Community\"] --> B[\"Clicks Unsubscribe Button\"]\n    B --> C[\"System Shows Confirmation Dialog\"]\n    C --> D{\"User Confirms?\"}\n    D -->|\"Yes\"| E[\"Remove Community from Subscription List\"]\n    D -->|\"No\"| F[\"Cancel Unsubscribe Process\"]\n    E --> G[\"Update UI with Unsubscribed State\"]\n    G --> H[\"Remove Community from User Feed\"]\n```\n\n### Detailed Unsubscribe Requirements\n\nWHEN a user initiates unsubscription, THE system SHALL display confirmation dialog with community name to prevent accidental actions.\n\nWHEN a user confirms unsubscription, THE system SHALL remove the community from their subscription list and update the feed immediately.\n\nIF a user chooses to cancel unsubscription, THEN THE system SHALL maintain current subscription status and return to previous interface.\n\nTHE system SHALL provide a \"resubscribe\" option for recently unsubscribed communities for a period of 30 days.\n\nTHE system SHALL retain user's post and comment history in the community after unsubscription, but no longer include new content in their feed.\n\nTHE system SHALL not send notifications for new content after successful unsubscription.\n\nTHE system SHALL allow users to bulk unsubscribe from multiple communities.\n\nTHE system SHALL provide a \"smart unsubscribe\" feature that suggests communities with low engagement for removal.\n\nTHE system SHALL record the reason for unsubscription when provided by the user for analytics purposes.\n\nTHE system SHALL provide a \"scheduled unsubscribe\" option to automatically unsubscribe at a future date.\n\n## Feed Generation\n\n### Personalized Feed Requirements\n\nTHE feed system SHALL aggregate posts from all user-subscribed communities into a single unified feed.\n\nTHE feed system SHALL support multiple sorting algorithms (hot, new, top, controversial) as specified in the [Post Sorting System](./07-post-sorting.md).\n\nTHE feed system SHALL load posts incrementally as users scroll to ensure performance and responsiveness.\n\nTHE feed system SHALL prioritize content based on user engagement patterns and preferences.\n\nTHE feed system SHALL provide filtering options to refine content display.\n\n### Feed Generation Process\n\n```mermaid\ngraph LR\n    subgraph \"Feed Generation System\"\n        A[\"Identify User Subscriptions\"] --> B[\"Query Posts from Subscribed Communities\"]\n        B --> C{\"Apply Sorting Algorithm\"}\n        C --> D[\"Hot Posts Algorithm\"]\n        C --> E[\"New Posts Algorithm\"]\n        C --> F[\"Top Posts Algorithm\"]\n        C --> G[\"Controversial Posts Algorithm\"]\n        D --> H[\"Generate Feed Results\"]\n        E --> H\n        F --> H\n        G --> H\n        H --> I[\"Apply User Content Filters\"]\n        I --> J[\"Deliver to User Interface\"]\n    end\n```\n\n### Feed Business Logic\n\nWHEN a user requests their personal feed, THE system SHALL retrieve posts from all currently subscribed communities.\n\nWHEN generating the user feed, THE system SHALL exclude posts from communities the user has unsubscribed from.\n\nWHEN a user switches feed sorting mode, THE system SHALL reapply the selected sorting algorithm across all subscribed communities.\n\nTHE system SHALL apply user-configured content filters (keyword blocking, domain blocking) to all posts in the feed.\n\nTHE system SHALL prioritize posts from communities with higher user engagement when using \"hot\" sorting algorithm.\n\nTHE feed SHALL update in real-time to show new posts from subscribed communities, with appropriate refresh indicators.\n\nTHE system SHALL cache feed content for offline access and synchronize when reconnected.\n\nTHE system SHALL support \"infinite scroll\" behavior with smooth loading of additional content.\n\nTHE system SHALL provide \"mark all as read\" functionality for the feed.\n\nTHE system SHALL display unread post indicators in navigation elements.\n\nTHE system SHALL allow users to save posts from their feed for later reference.\n\nTHE system SHALL provide content recommendation algorithms for non-subscribed communities based on feed engagement.\n\nTHE system SHALL support \"snooze feed\" functionality to temporarily pause feed updates.\n\nTHE system SHALL provide feed statistics showing origin communities of displayed content.\n\n### Feed Customization\n\nTHE system SHALL allow users to customize feed presentation with the following options:\n\n- Card style vs. list view\n- Content density (compact vs. spacious)\n- Image preview sizing\n- Automatic video/audio playback\n- Post content truncation\n- Comment preview levels\n\nTHE system SHALL remember user feed preferences across sessions.\n\nTHE system SHALL allow feed customization to be different between desktop and mobile views.\n\nTHE system SHALL provide theme options specifically for feed presentation.\n\n## Edge Cases and Business Rules\n\n### Subscription Limitations\n\nTHE system SHALL allow users to subscribe to a maximum of 1,000 communities to maintain system performance.\n\nWHEN a user reaches the subscription limit, THE system SHALL display a message suggesting they unsubscribe from inactive communities.\n\nTHE system SHALL allow administrators to adjust the subscription limit based on system capacity.\n\nTHE system SHALL provide warning notifications when users approach 80% of their subscription limit.\n\nWHEN a user attempts to exceed the subscription limit, THE system SHALL prevent the action and display guidance on managing subscriptions.\n\nTHE system SHALL consider the subscription limit on a per-user basis, not shared across devices or sessions.\n\nTHE system SHALL provide metrics in user profiles showing subscription count versus maximum.\n\n### Community Deletion and Status Changes\n\nIF a community is deleted, THEN THE system SHALL automatically unsubscribe all members and remove it from their feed.\n\nIF a community changes from public to private, THEN THE system SHALL automatically unsubscribe users who do not have access.\n\nIF a community is suspended by moderators or administrators, THEN THE system SHALL temporarily disable notifications but retain subscription status.\n\nWHEN a suspended community is reinstated, THE system SHALL resume normal subscription functionality and deliver missed notifications based on user settings.\n\nIF a community is marked as \"inactive\" due to lack of participation, THEN THE system SHALL notify subscribers and suggest unsubscribing.\n\nWHEN a community is transferred to new ownership, THEN THE system SHALL maintain subscription status for all existing subscribers.\n\nIF a community merges with another community, THEN THE system SHALL notify subscribers and ask whether they want to subscribe to the new combined community.\n\nIF a community splits into multiple communities, THEN THE system SHALL allow subscribers to choose which new communities to follow.\n\n### Data Integrity and Sync\n\nTHE system SHALL synchronize subscription data across devices within 5 seconds of change.\n\nTHE system SHALL ensure transactional integrity when recording subscription changes to prevent data inconsistencies.\n\nTHE system SHALL audit all subscription changes for security monitoring and abuse detection.\n\nTHE system SHALL maintain subscription history for at least 2 years for compliance and recovery purposes.\n\nTHE system SHALL detect and resolve conflicts when subscription changes occur simultaneously on multiple devices.\n\nTHE system SHALL provide users with a subscription audit log showing their subscription history.\n\nTHE system SHALL ensure atomicity of subscription operations to prevent partial application of changes.\n\nTHE system SHALL provide reconciliation processes for subscription data after system outages.\n\n## Error Scenarios and Recovery\n\n### Connectivity Issues\n\nIF network connectivity is lost during subscription attempt, THEN THE system SHALL queue the request and retry when connection is restored.\n\nIF persistent connectivity issues prevent subscription sync, THEN THE system SHALL notify the user and provide manual sync option.\n\nWHEN connectivity is restored after an outage, THE system SHALL synchronize all pending subscription changes in the correct order.\n\n### Conflicting Actions\n\nWHEN a user attempts to subscribe and unsubscribe simultaneously through different devices, THE system SHALL prioritize the most recent action and synchronize across devices.\n\nWHEN conflicting subscription actions occur, THE system SHALL log the event for moderation review if it exceeds normal thresholds.\n\nTHE system SHALL detect potential race conditions in subscription operations and implement appropriate locking mechanisms.\n\n### System Errors\n\nIF the subscription system fails to process a request, THEN THE system SHALL return a specific error code and descriptive message.\n\nIF the notification system fails to deliver messages, THEN THE system SHALL queue notifications for later delivery and monitor delivery success rates.\n\nIF the feed generation system fails, THEN THE system SHALL display cached feed content with appropriate status messages.\n\nWHEN recovering from system failures, THE subscription system SHALL preserve the last known consistent state.\n\n## Success Metrics and KPIs\n\n- Average subscriptions per active user\n- Daily active subscribers (users who view feed)\n- Notification open/click rates\n- Subscription retention rate (percentage of users maintaining subscriptions over 90 days)\n- Unsubscribe reasons and rates\n- Feed engagement time (average time spent viewing feed)\n- Conversion rate from guest to registered user (driven by subscription prompts)\n- Percentage of users who customize notification settings\n- Feed refresh frequency per user\n- Subscription management interface usage\n\nTHE analytics system SHALL track these metrics continuously and provide reports to administrators and community moderators.\n\nTHE subscription system SHALL contribute to platform-wide metrics including user retention, engagement, and growth.\n\nAdministrators SHALL use subscription metrics to identify popular content categories and emerging interest areas.\n\nCommunity moderators SHALL use subscriber analytics to understand audience composition and engagement patterns.\n\nTHE system SHALL provide quarterly subscription trend reports to stakeholders.\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Details user profile functionality and content display","filename":"09-user-profiles.md","documentType":"requirement","outline":["Profile Display","User Activity","Karma Display","Profile Customization"],"audience":"backend developers","keyQuestions":["What information is shown on user profiles?","How is user activity displayed?","How are profiles customized?"],"detailLevel":"comprehensive","relatedDocuments":["05-voting-system.md","04-post-management.md"],"constraints":["Must focus on profile requirements","Must not include technical details","Must describe user presentation"],"content":"# User Profile System Requirements\n\n## Profile Overview\n\nThe user profile system SHALL enable authenticated members to showcase their participation in the community platform while maintaining appropriate privacy controls. Profiles SHALL serve as personal dashboards that display user contributions, reputation metrics, and customization options, fostering community engagement and member identity.\n\n## Profile Display Specifications\n\n### Profile Information Structure\nTHE profile display SHALL present the following user information in a consistent, organized format:\n\n- Display name (primary identifier)\n- Profile avatar image\n- Account creation date\n- Total post count\n- Total comment count\n\n### Profile Header Requirements\nTHE profile header SHALL include:\n\n- Profile picture (default or user-uploaded)\n- Display name with unique identifier\n- Account status indicator (verified or unverified)\n- Follow/Unfollow action button for other members\n- Three-dot menu for profile management options\n\nWHEN a user views their own profile, THE system SHALL display an \"Edit Profile\" button in the header.\n\n### User Identity Fields\nTHE system SHALL define the following identity fields:\n\n- **Display Name**: THE user SHALL specify a display name during registration, which SHALL be between 3-20 characters and unique across the platform.\n- **Username**: THE system SHALL generate a unique username that SHALL remain immutable after creation.\n- **Profile Picture**: THE system SHALL provide a default avatar, and members SHALL have the option to upload a custom image (JPG, PNG, GIF; max 2MB).\n\n## User Activity Tracking\n\n### Post History Display\nTHE user profile SHALL display all posts created by the user, organized into the following tabs:\n\n- All Posts (default view)\n- Text Posts only\n- Link Posts only\n- Image Posts only\n\nTHE post history display SHALL include:\n\n- Post title\n- Community name with link\n- Post type indicator\n- Vote score (upvotes minus downvotes)\n- Comment count\n- Timestamp (relative format)\n- Post status (active, edited, removed)\n\nWHEN the user navigates to the posts tab, THE system SHALL load the most recent 20 posts and SHALL display a \"Load More\" option to retrieve additional posts.\n\nTHE system SHALL display the post count in the tab label and update it in real-time as the user creates new posts.\n\nTHE system SHALL show a loading indicator while retrieving posts from the server.\n\n### Comment History Display\nTHE profile SHALL display a comprehensive history of user comments, including:\n\n- Comment preview text (first 150 characters)\n- Parent post title with link\nn- Community name\n- Vote score\n- Timestamp\n- Comment status (active, edited, removed)\n\nTHE comment history SHALL be sorted with the most recent comments first, and SHALL provide infinite scrolling to access older comments.\n\nTHE system SHALL display a loading spinwhile retrieving additional comments during infinite scrolling.\n\nTHE system SHALL cache recently viewed comment history to improve performance on subsequent visits.\n\n### Activity Filtering and Sorting\nTHE system SHALL support the following sorting options for user activity:\n\n- New (most recent first)\n- Top (highest scoring)\n- Controversial (high upvote/downvote ratio)\n\nTHE user SHALL be able to switch between sorting options, and THE system SHALL preserve the user's preferred sorting method across sessions.\n\nWHEN a user changes the sorting method, THE system SHALL immediately reload the content with the new sort order.\n\nTHE sort selection dropdown SHALL display the currently selected sort method as the default option.\n\n## Karma System Integration\n\n### Karma Display Requirements\nTHE user profile SHALL prominently display the member's reputation score with the following specifications:\n\n- Total karma score (sum of post and comment karma)\n- Post karma breakdown\n- Comment karma breakdown\n- Upvote count received\n- Downvote count received\n\nTHE karma metrics SHALL update in real-time as the user receives votes on their content.\n\nTHE profile SHALL display the user's current karma ranking in percentile format (e.g., \"Top 15% of users\").\n\nTHE system SHALL recalculate the percentile ranking daily based on the current user population.\n\n### Karma Calculation Rules\nTHE karma system SHALL follow these business rules:\n\n- User receives +1 karma for each upvote on their posts and comments\n- User receives -1 karma for each downvote on their posts and comments\n- Users DO NOT receive karma for voting on others' content\n- Users MAY have negative total karma\n- The system SHALL track karma by content type but SHALL NOT restrict functionality based on karma score\n\nTHE profile SHALL update karma displays immediately when votes are received, but SHALL only update percentile rankings on page refresh.\n\nTHE system SHALL persist karma data across user sessions and SHALL recover karma state after reauthentication.\n\n## Profile Customization Requirements\n\n### Editable Profile Fields\nWHEN a member accesses profile editing, THE system SHALL allow modification of the following fields:\n\n- Display name (limited to one change per 30 days)\n- Profile bio/description (max 500 characters)\n- Profile banner image (JPG, PNG, GIF; max 5MB)\n- Privacy settings\n- Notification preferences\n\nTHE system SHALL display the remaining time until next display name change is permitted.\n\nTHE system SHALL validate all input fields during profile editing and provide specific error messages for invalid input.\n\nTHE system SHALL allow only one active profile editing session per user at a time.\n\n### Profile Personalization\nTHE system SHALL support personalized profile elements including:\n\n- Profile bio with text formatting (bold, italic, links)\n- Location field\n- Website or portfolio link\n- Social media connections\n- Badge display for achievements\n\nTHE user SHALL be able to organize profile sections via drag-and-drop interface, and THE system SHALL save the preferred layout.\n\nTHE system SHALL preserve the order of profile sections across devices using account sync.\n\nTHE system SHALL display user badges in a dedicated section, sorted by date received.\n\n### Profile Visibility Customization\nTHE member SHALL have control over profile visibility with the following options:\n\n- Public (visible to all users)\n- Members only (visible to authenticated users only)\n- Private (only visible to the user themselves)\n\nWHEN a profile is set to private, THE system SHALL not display any information about the user in community feeds, comment lists, or search results.\n\nTHE system SHALL allow users to set different visibility levels for profile sections (e.g., public posts, private comments).\n\nTHE privacy controls interface SHALL provide a preview of how the profile appears to different user types.\n\n## Privacy and Visibility Rules\n\n### Default Privacy Settings\nTHE system SHALL establish the following default privacy configuration upon account creation:\n\n- Profile visibility: Public\n- Activity history: Public\n- Personal information: Public\n- Badge display: Public\n\nTHE system SHALL document all default settings in the user onboarding tutorial.\n\n### Privacy Control Requirements\nTHE profile privacy system SHALL allow granular control over information visibility:\n\n- Users MAY set individual visibility for posts, comments, and profile information\n- Users MAY restrict content visibility by community or user group\n- Users MAY prevent indexing by search engines\n- Users MAY disable profile viewing history tracking\n\nWHEN a user updates privacy settings, THE system SHALL immediately apply changes to all visible content.\n\nTHE system SHALL allow users to create privacy templates for different scenarios (e.g., professional, personal).\n\nTHE privacy management interface SHALL group related settings into logical sections for usability.\n\n### Anonymous Profile Viewing\nTHE system SHALL support anonymous profile viewing with the following behavior:\n\n- Guest users MAY view public profiles\n- Guest users SHALL NOT see karma details or personal information\n- Guest users SHALL be prompted to register when attempting to interact with profile content\n\nTHE system SHALL detect and limit excessive anonymous profile viewing from single IP addresses.\n\nTHE user profile viewing logs SHALL not record anonymous view events to maintain privacy.\n\n## User Scenarios and Workflows\n\n### Profile Creation Workflow\nTHE new user profile creation process SHALL follow this sequence:\n\n1. User completes registration and authentication\n2. System automatically creates profile with default settings\n3. System prompts user to customize profile during first login\n4. User uploads profile picture and sets display name\n5. System confirms profile activation\n\n```mermaid\ngraph LR\nA[\"Click Username\"] --> B[\"Load Profile Page\"]\nB --> C[\"Display Posts Tab\"]\nC --> D{\"Switch Tab?\"}\nD -->|\"Yes\"| E[\"Load Selected Tab\"]\nD -->|\"No\"| F[\"User Browses Posts\"]\nE --> G[\"Maintain Scroll Position\"]\n```\n\n### Profile Navigation Workflow\nTHE user profile navigation process SHALL function as follows:\n\n1. User clicks on any displayed username\n2. System loads profile page with posts tab active\n3. User may switch to comments tab or other sections\n4. System maintains scroll position when switching between tabs\n5. System preserves sorting preference across visits\n\n```mermaid\ngraph LR\nA[\"Click Username\"] --> B[\"Load Profile Page\"]\nB --> C[\"Display Posts Tab\"]\nC --> D{\"Switch Tab?\"}\nD -->|\"Yes\"| E[\"Load Selected Tab\"]\nD -->|\"No\"| F[\"User Browses Posts\"]\nE --> G[\"Maintain Scroll Position\"]\n```\n\n### Profile Editing Workflow\nTHE profile editing process SHALL follow this workflow:\n\n1. User clicks \"Edit Profile\" on their profile page\n2. System displays editing modal with current values\n3. User makes changes to profile fields\n4. System validates changes before submission\n5. User confirms changes\n6. System saves and displays success message\n\n```mermaid\ngraph LR\nA[\"Click Edit Profile\"] --> B[\"Open Editing Modal\"]\nB --> C[\"User Modifies Fields\"]\n++> D[\"System Validates Input\"]\nD --> E{\"Valid?\"}\nE -->|\"Yes\"| F[\"User Confirms\"]\nE -->|\"No\"| G[\"Display Error\"]\nF --> H[\"System Saves Changes\"]\nH --> I[\"Show Success Message\"]\n```\n\nTHE system SHALL provide real-time validation feedback as users type in profile fields.\n\nTHE system SHALL allow users to cancel profile editing at any point before confirmation.\n\nTHE system SHALL temporarily save draft changes to prevent data loss during editing.\n\n## Performance Requirements\n\n### Profile Load Times\nTHE system SHALL load user profiles with the following performance targets:\n\n- Initial page load: Complete within 2 seconds\n- Tab switching: Complete within 0.5 seconds\n- Sort option changes: Complete within 0.3 seconds\n- Profile editing save: Complete within 1 second\n\nTHE profile loading sequence SHALL prioritize displaying the profile header and first content items before loading additional elements.\n\nTHE system SHALL implement skeleton loading states to improve perceived performance.\n\n### Data Caching Strategy\nTHE system SHALL implement caching for profile data with the following rules:\n\n- Cache profile metadata for 15 minutes\n- Cache post and comment lists for 5 minutes\n- Cache karma totals for 1 minute\n- Cache shall be invalidated when user receives new votes or makes content changes\n\nTHE system SHALL use browser local storage for caching profile data when possible.\n\nTHE mobile application SHALL implement offline profile viewing with cached data.\n\n## Error Handling\n\n### Profile Not Found\nIF the requested profile does not exist or has been deleted, THEN THE system SHALL:\n\n- Display a user-friendly message: \"Profile not found or has been removed\"\n- Provide a link to the home feed\n- Not expose any information suggesting the user previously existed\n\nTHE system SHALL log the event for security monitoring to detect potential enumeration attacks.\n\n### Privacy Violation\nIF an authenticated user attempts to access a profile they do not have permission to view, THEN THE system SHALL:\n\n- Display: \"You do not have permission to view this profile\"\n- Log the access attempt for security monitoring\n- Provide no additional information about the user\n\nTHE system SHALL not allow determination of whether a profile exists by observing response differences.\n\n### Data Loading Errors\nIF profile data fails to load completely, THEN THE system SHALL:\n\n- Display available profile information (header, basic stats)\n- Show error message: \"Some profile content could not be loaded\"\n- Provide a \"Retry\" button to attempt reloading\n- Preserve any user sorting or filtering preferences\n\nTHE system SHALL automatically retry data loading after short delays before presenting the error to the user.\n\n### Profile Update Failures\nIF profile update fails due to validation or system error, THEN THE system SHALL:\n\n- Maintain the editing modal open\n- Highlight fields with validation errors\n- Provide specific error messages for each failed field\n- Preserve user-entered values for re-submission\n\nTHE system SHALL limit profile update attempts to prevent abuse or spam.\n\nTHE system SHALL queue profile updates during temporary connectivity issues and process them when restored.\n\n## Relationship to Other Documents\n\nThis document references and builds upon the following specifications:\n\n- [User Roles and Authentication Requirements](./01-user-roles.md) for role-based access controls\n- [Voting System Requirements](./05-voting-system.md) for karma calculations and display\n- [Post Management Specifications](./04-post-management.md) for post history integration\n- [Comment System Document](./06-comment-system.md) for comment history functionality\n- [Subscription System](./08-subscription-system.md) for follow/unfollow features\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Specifies content reporting system and moderation workflow","filename":"10-content-reporting.md","documentType":"user-flow","outline":["Report Submission","Moderation Queue","Review Process","User Notifications"],"audience":"backend developers","keyQuestions":["How are posts reported?","What happens after reporting?","How are users notified of outcomes?"],"detailLevel":"comprehensive","relatedDocuments":["01-user-roles.md"],"constraints":["Must describe reporting process","Must not include technical implementation","Must focus on moderation workflow"],"content":"# Reddit-like Community Platform Requirements Analysis\n\n## Service Overview\n\nTHE community platform SHALL be a discussion and content-sharing system that enables users to build and participate in communities of interest. The platform SHALL facilitate knowledge exchange, social connection, and content discovery through organized discussion threads, user-generated content, and community-driven moderation. This platform SHALL solve the problem of fragmented online discussions by providing a unified space where users can follow topics of interest through subscriptions and contribute to conversations with posts and comments.\n\n## Business Model\n\n### Why This Service Exists\n\nThis platform addresses the growing need for organized, topic-focused online communities where users can share content, engage in discussions, and build reputation through participation. While existing platforms offer social networking or forum capabilities, this service SHALL create a hybrid model that combines the best features of content aggregation, discussion forums, and social bookmarking to create engaging community experiences.\n\n### Revenue Strategy\n\nThe platform SHALL generate revenue through multiple channels:\n- Targeted advertising in high-traffic communities\n- Premium subscription tier with enhanced features\n- Sponsored community placements and promoted posts\n- Verified community badges for organizations\n\n### Growth Plan\n\nUser acquisition SHALL focus on enabling easy community creation and personalized content discovery. The subscription system SHALL drive user retention by delivering relevant content from followed communities. Growth SHALL be accelerated through referral programs and community-sharing features that encourage users to invite others to interesting discussions.\n\n### Success Metrics\n\n- Daily Active Users (DAU) and Monthly Active Users (MAU)\n- Average number of subscriptions per active user\n- Subscription retention rate (percentage of users maintaining subscriptions over time)\n- Feed engagement time (average time spent viewing personalized content)\n- Notification open and click-through rates\n- Conversion rate from guest to registered user\n- Revenue per user from advertising and premium subscriptions\n\n## User Role Structure and Authentication Requirements\n\n### Core Authentication Functions\n\n- Users can register with email and password\n- Users can log in to access their account\n- Users can log out to end their session\n- System maintains user sessions securely\n- Users can verify their email address\n- Users can reset forgotten passwords\n- Users can change their password\n- Users can revoke access from all devices\n\n### User Role Hierarchy\n\n#### Guest (Unauthenticated User)\n- Can view public communities and posts\n- Can view comments on posts\n- Cannot create content\n- Cannot vote\n- Cannot subscribe to communities\n- Can filter content by popularity metrics\n\n#### Member (Authenticated User)\n- Can create text, link, and image posts in communities\n- Can comment on posts with nested replies\n- Can upvote/downvote posts and comments\n- Can subscribe to communities\n- Can report inappropriate content\n- Can edit own posts and comments within time limits\n- Can manage profile settings\n- Can view karma score (post and comment karma separately)\n- Can filter feed by content type and sorting algorithm\n\n#### Community Moderator\n- Has all Member permissions\n- Can moderate content in assigned communities\n- Can remove posts/comments that violate rules\n- Can ban users from specific communities\n- Can edit community rules and settings\n- Can appoint other moderators\n- Can view reports for their communities\n- Can take action on reported content\n- Can send announcements to subscribers\n- Can access community analytics\n\n#### Administrator\n- Has full system access\n- Can create or remove any community\n- Can assign moderator status to users\n- Can ban users from entire platform\n- Can view and act on all content reports\n- Can manage platform-wide rules and settings\n- Can access system analytics\n- Can manage advertising and premium features\n- Can override any content moderation decision\n- Can suspend communities for policy violations\n\n## Subscription Mechanics\n\n### Core Subscription Requirements\n\nTHE subscription system SHALL allow authenticated users to follow communities of interest and receive content from them in a personalized feed.\n\nWHEN a user navigates to a community page, THE system SHALL display a prominent subscribe button if the user is authenticated and doesn't already follow the community.\n\nWHEN an unauthenticated user attempts to subscribe, THE system SHALL redirect to login flow while preserving the subscription intent.\n\nWHEN a user successfully subscribes to a community, THE system SHALL immediately add that community to their personalized feed.\n\nIF a user attempts to subscribe to a private community without invitation, THEN THE system SHALL display an appropriate message explaining access requirements.\n\nIF a user attempts to subscribe to a suspended community, THEN THE system SHALL block subscription and notify that the community is currently suspended.\n\nTHE system SHALL prevent users from subscribing to the same community multiple times, with duplicate subscription attempts having no effect.\n\nTHE system SHALL allow users to subscribe to communities in any accessible category without restrictions on number or type.\n\n### Subscription Process Flow\n\n```mermaid\ngraph LR\n    A[\"User Views Community\"] --> B{\"Is User Authenticated?\"}\n    B -->|\"Yes\"| C[\"Show Subscribe Button\"]\n    B -->|\"No\"| D[\"Show Login Prompt\"]\n    C --> E[\"User Clicks Subscribe\"]\n    E --> F[\"System Records Subscription\"]\n    F --> G[\"Update UI with Subscribed State\"]\n    G --> H[\"Add Community to User Feed\"]\n```\n\n### Detailed Subscription Requirements\n\nWHEN a user attempts to subscribe to a community, THE system SHALL verify the user is authenticated, the community exists, and the user has appropriate access permissions.\n\nWHEN a user successfully subscribes to a community, THE system SHALL record the subscription with timestamp, update the community's subscriber count, and trigger feed reorganization.\n\nIF the user is not authenticated, THEN THE system SHALL redirect to login flow and preserve subscription intent for after authentication.\n\nIf the community does not exist or has been deleted, THEN THE system SHALL display an error: \"Community not found or has been removed.\"\n\nIf the community is private and the user lacks access, THEN THE system SHALL display: \"This community requires an invitation to join.\"\n\nIf the community is restricted, THEN THE system SHALL allow subscription with appropriate messaging about approval requirements.\n\nWhen a new user subscribes to a community, THE system SHALL trigger a welcome notification if enabled in community settings.\n\nThe subscription system SHALL maintain transactional integrity, ensuring subscription records, feed updates, and counters remain consistent even during system failures.\n\nAfter a successful subscription, THE system SHALL display confirmation messaging: \"You are now following [community name].\"\n\nThe system SHALL update subscription counts in real-time, with changes visible across all user interfaces.\n\n## Notification Preferences\n\n### Notification Management Requirements\n\nTHE notification system SHALL allow users to customize their notification preferences for each subscribed community.\n\nWHEN a user accesses notification settings, THE system SHALL display all subscribed communities with current notification configurations.\n\nWHEN a user updates notification preferences for a community, THE system SHALL apply changes immediately and confirm successful update.\n\nWHEN a user subscribes to a new community, THE system SHALL apply default notification settings which the user can later customize.\n\nIf the user disables all notification types for a community, THEN THE system SHALL treat this as active subscription with silent updates.\n\nTHE system SHALL allow users to set global notification preferences that apply to all current and future subscriptions.\n\nTHE system SHALL allow community-specific overrides of global notification preferences, with specific community settings taking precedence.</n\n### Notification Types and Controls\n\nUsers can control notifications by type:\n- New posts in subscribed communities\n- Replies to user's comment threads\n- Top weekly posts from subscribed communities\n- Community announcements (moderator/admin posts)\n- Digest summaries (daily/weekly with configurable content)\n- Membership milestones (e.g., \"Your community reached 1,000 members!\")\n\nUsers can set delivery methods for notifications:\n- In-app notifications\n- Email\n- Push notifications (mobile)\n- SMS (for critical alerts, opt-in)\n\nThe system SHALL support notification batching to prevent overload, allowing users to receive digest summaries instead of individual alerts.\n\nFor each notification type, users can set time windows when notifications are delivered, supporting time-zone appropriate scheduling.\n\n```mermaid\ngraph TD\n    A[\"User Accesses Notification Settings\"] --> B[\"System Loads Current Preferences\"]\n    B --> C[\"Display Community List with Notification Toggles\"]\n    C --> D[\"User Configures Notification Types\"]\n    D --> E[\"User Sets Delivery Method\"]\n    E --> F[\"User Saves Preferences\"]\n    F --> G[\"System Updates Notification Rules\"]\n    G --> H[\"Confirm Settings Saved\"]\n```\n\n### Default Notification Settings\n\nNew users SHALL receive default notification settings upon registration:\n- Global default: Email digests once per week, in-app notifications enabled\n- Per-community default: Notifications enabled for community announcements and replies to user's posts\n\nThese defaults SHALL be optimized to drive engagement without overwhelming new users.\n\nThe system SHALL suggest notification settings based on user activity patterns and community engagement levels.\n\n### Notification Delivery Requirements\n\nTHE system SHALL deliver notifications according to user preferences with the following reliability requirements:\n\nWHEN a post is published in a subscribed community, THE system SHALL deliver notifications to users with appropriate settings within 5 minutes.\n\nWHEN a user receives a reply to their comment, THE system SHALL deliver notifications within 1 minute.\n\nThe system SHALL implement exponential backoff for failed deliveries, attempting resend after 1, 5, 15, and 60 minutes.\n\nTHE system SHALL track delivery success rates and provide analytics to community moderators about subscriber engagement.\n\nUsers SHALL be able to access a notification history log showing all delivered and attempted notifications.\n\n## Unsubscribe Process\n\n### Unsubscription Requirements\n\nTHE system SHALL allow users to unfollow communities they no longer wish to receive content from.\n\nTHE unsubscription process SHALL be accessible from both community pages and subscription management interfaces.\n\nTHE system SHALL provide a confirmation step before completing unsubscription to prevent accidental removal.\n\nTHE system SHALL allow users to resubscribe to previously followed communities without restrictions.\n\nTHE system SHALL retain user's historical post and comment history in communities after unsubscription.\n\n### Unsubscribe Flow\n\n```mermaid\ngraph LR\n    A[\"User Views Subscribed Community\"] --> B[\"Clicks Unsubscribe Button\"]\n    B --> C[\"System Shows Confirmation Dialog\"]\n    C --> D{\"User Confirms?\"}\n    D -->|\"Yes\"| E[\"Remove Community from Subscription List\"]\n    D -->|\"No\"| F[\"Cancel Unsubscribe Process\"]\n    E --> G[\"Update UI with Unsubscribed State\"]\n    G --> H[\"Remove Community from User Feed\"]\n```\n\n### Unsubscribe Business Rules\n\nWHEN a user initiates unsubscription, THE system SHALL display confirmation dialog with community name to prevent accidental actions.\n\nWHEN a user confirms unsubscription, THE system SHALL remove the community from their subscription list, update the feed immediately, and decrement the community's subscriber count.\n\nIF a user chooses to cancel unsubscription, THEN THE system SHALL maintain current subscription status and return to previous interface.\n\nTHE system SHALL provide a \"resubscribe\" option for recently unsubscribed communities for a period of 30 days in the subscription management interface.\n\nTHE system SHALL retain user's post and comment history in the community after unsubscription, but no longer include new content in their feed.\n\nTHE system SHALL not send notifications for new content after successful unsubscription.\n\nAfter unsubscription, THE system SHALL not display content from that community in the personalized feed.\n\nTHE system SHALL allow users to unsubscribe from multiple communities at once through bulk management tools.\n\n## Feed Generation\n\n### Personalized Feed Requirements\n\nTHE feed system SHALL aggregate posts from all user-subscribed communities into a single personalized content stream.\n\nTHE feed system SHALL support multiple sorting algorithms as specified in the post sorting requirements:\n- Hot: Posts ranked by engagement relative to age\n- New: Posts sorted by creation timestamp, newest first\n- Top: Posts sorted by net vote score\n- Controversial: Posts with high upvote/downvote ratio\n\nTHE feed system SHALL load posts incrementally as users scroll to ensure performance and responsiveness, loading 20 posts at a time.\n\nTHE system SHALL provide visual indicators when new posts are available that haven't been loaded.\n\n### Feed Generation Process\n\n```mermaid\ngraph LR\n    subgraph \"Feed Generation System\"\n        A[\"Identify User Subscriptions\"] --> B[\"Query Posts from Subscribed Communities\"]\n        B --> C{\"Apply Sorting Algorithm\"}\n        C --> D[\"Hot Posts Algorithm\"]\n        C --> E[\"New Posts Algorithm\"]\n        C --> F[\"Top Posts Algorithm\"]\n        C --> G[\"Controversial Posts Algorithm\"]\n        D --> H[\"Generate Feed Results\"]\n        E --> H\n        F --> H\n        G --> H\n        H --> I[\"Apply User Content Filters\"]\n        I --> J[\"Deliver to User Interface\"]\n    end\n```\n\n### Feed Business Logic\n\nWHEN a user requests their personal feed, THE system SHALL retrieve posts from all currently subscribed communities using the selected sorting algorithm.\n\nWHEN generating the user feed, THE system SHALL exclude posts from communities the user has unsubscribed from.\n\nWHEN a user switches feed sorting mode, THE system SHALL reapply the selected sorting algorithm across all subscribed communities.\n\nTHE system SHALL apply user-configured content filters (keyword blocking, domain blocking, NSFW content filtering) to all posts in the feed.\n\nTHE system SHALL prioritize posts from communities with higher user engagement when using \"hot\" sorting algorithm.\n\nTHE feed SHALL update in real-time to show new posts from subscribed communities, with appropriate refresh indicators.\n\nTHE system SHALL cache feed content for offline access and synchronize when reconnected.\n\nThe system SHALL implement infinite scroll with efficient loading to prevent performance degradation as users consume large amounts of content.\n\n### Feed Personalization\n\nTHE system SHALL personalize the feed experience based on user behavior:\n\n- Post visibility: Allow users to collapse post sections or hide specific types of content\n- Feed layout: Support multiple view modes (card view, list view, compact view)\n- Content diversity: Ensure feed includes content from all subscribed communities, not just the most active ones\n- Priority communities: Allow users to designate certain communities as high-priority with content always appearing first\n\nUsers SHALL be able to save posts from their feed for later viewing through a bookmarking system.\n\nThe system SHALL provide feed analytics to users showing their content consumption patterns across different communities and content types.\n\n### Community Migration and Ownership Change\n\nIF a community undergoes ownership change or migration, THEN THE system SHALL maintain subscription continuity for all subscribers.\n\nWHEN a community is transferred to new moderators or merged with another community, THE system SHALL notify subscribers of the change.\n\nSUBSCRIBERS SHALL retain their subscription status through community rebranding, URL changes, or ownership transfers.\n\n## Edge Cases and Business Rules\n\n### Subscription Limitations\n\nTHE system SHALL allow users to subscribe to a maximum of 1,000 communities to maintain system performance and user experience quality.\n\nWHEN a user reaches the subscription limit, THE system SHALL display a message suggesting they unsubscribe from inactive communities.\n\nTHE system SHALL allow administrators to adjust the subscription limit based on system capacity and business requirements.\n\nTHE subscription limit SHALL be evaluated across all communities regardless of type or access level.\n\n### Community Status Changes\n\nIF a community is deleted, THEN THE system SHALL automatically unsubscribe all members and remove it from their feed.\n\nIF a community changes from public to private, THEN THE system SHALL automatically unsubscribe users who do not have access.\n\nIF a community is suspended by moderators or administrators, THEN THE system SHALL temporarily disable notifications but retain subscription status.\n\nWHEN a suspended community is reinstated, THE system SHALL resume normal subscription functionality and deliver missed notifications based on user settings.\n\nIF a community restricted its membership after a user subscribed, THEN THE system SHALL maintain the user's subscription if they were grandfathered in under previous rules.\n\n### Data Integrity and Synchronization\n\nTHE system SHALL synchronize subscription data across devices within 5 seconds of change.\n\nTHE system SHALL ensure transactional integrity when recording subscription changes to prevent data inconsistencies.\n\nTHE system SHALL audit all subscription changes for security monitoring and abuse detection.\n\nThe system SHALL implement conflict resolution for simultaneous subscription changes from multiple devices, favoring the most recent action.\n\nSubscription changes SHALL be reflected in feed content within 10 seconds across all user interfaces.\n\n## Error Scenarios and Recovery\n\n### Connectivity Issues\n\nIF network connectivity is lost during subscription attempt, THEN THE system SHALL queue the request and retry when connection is restored.\n\nIF persistent connectivity issues prevent subscription sync, THEN THE system SHALL notify the user and provide manual sync option.\n\nThe system SHALL maintain local subscription state on user devices to allow continued feed access during temporary connectivity loss.\n\n### Conflicting Actions\n\nWHEN a user attempts to subscribe and unsubscribe simultaneously through different devices, THE system SHALL prioritize the most recent action and synchronize across devices.\n\nWHEN conflicting subscription actions occur, THE system SHALL log the event for moderation review if it exceeds normal thresholds.\n\nTHE system SHALL detect and prevent subscription cycling (rapid subscribe/unsubscribe) that may indicate automated abuse.\n\n### System Errors\n\nIF the subscription system fails to process a request, THEN THE system SHALL return a specific error code and descriptive message.\n\nIF the notification system fails to deliver messages, THEN THE system SHALL queue notifications for later delivery and monitor delivery success rates.\n\nTHE system SHALL implement fallback mechanisms for critical notifications, such as switching from push to email if delivery fails.\n\nIN THE EVENT OF SYSTEM OUTAGE, THE system SHALL queue subscription changes and process them when systems are restored.\n\n## Performance Requirements\n\n### Subscription Operations\n\nTHE system SHALL process subscription and unsubscription requests within 1 second under normal load.\n\nTHE system SHALL support concurrent subscription operations from 5,000 users during peak periods.\n\nTHE system SHALL update subscription counters and feed content in real-time with less than 2 seconds delay.\n\n### Feed Generation\n\nTHE system SHALL generate and deliver personalized feeds within 3 seconds of request.\n\nTHE system SHALL load additional feed pages within 1.5 seconds while scrolling.\n\nWHEN a user has over 100 subscriptions, THE feed generation SHALL not exceed 5 seconds to maintain responsive user experience.\n\n### Notification Delivery\n\nTHE system SHALL deliver 95% of non-critical notifications within 5 minutes of publication.\n\nTHE system SHALL deliver 95% of critical notifications (replies, mentions) within 30 seconds of publication.\n\nTHE notification system SHALL process 1,000,000 notification deliveries per hour during peak usage.\n\n## Integration with Other Systems\n\n### Authentication Integration\n\nTHE subscription system SHALL integrate with the authentication system to verify user identity and permissions.\n\nWHEN a user's authentication token is refreshed, THE system SHALL ensure subscription data is synchronized across all active sessions.\n\nIF a user's account is suspended or banned, THEN THE system SHALL automatically unsubscribe them from all communities and clear their feed.\n\nThe system SHALL include subscription count in user profile data returned by authentication endpoints.\n\n### Content Reporting Integration\n\nTHE system SHALL prioritize reports from subscribers of a community in the content moderation queue.\n\nWHEN a user reports content from a community they subscribe to, THE system SHALL include their subscription status as a credibility signal for moderators.\n\nCommunity subscribers SHALL have the ability to report content with additional context about community norms and rules.\n\nThe reporting interface SHALL suggest relevant community rules when users from that community report content.\n\n### Karma System Integration\n\nTHE subscription system SHALL consider user karma when recommending new communities to follow.\n\nUsers with higher karma in a topic area SHALL receive priority recommendations for related communities.\n\nCommunity discovery algorithms SHALL factor in both user interests and expertise (as indicated by karma) when suggesting subscriptions.\n\n## Success Metrics\n\n- Average number of subscriptions per active user\n- Daily active subscribers (users who view feed)\n- Notification open and click-through rates\n- Subscription retention rate (percentage of users maintaining subscriptions over 90 days)\n- Unsubscribe reasons and rates\n- Feed engagement time (average time spent viewing feed)\n- Conversion rate from guest to registered user (driven by subscription prompts)\n- User satisfaction with feed relevance (survey-based)\n\n## Relationship to Other Documents\n\nThis requirement is connected to the following documents:\n\n- [User Roles and Authentication Requirements](./01-user-roles.md)\n- [Post Management Specifications](./04-post-management.md)\n- [Voting System Requirements](./05-voting-system.md)\n- [Post Sorting Algorithms](./07-post-sorting.md)\n- [User Profile System](./09-user-profiles.md)\n- [Content Reporting Workflow](./10-content-reporting.md)\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"}],"created_at":"2025-10-16T07:32:44.458Z","completed_at":"2025-10-16T07:35:11.330Z","step":0}]