{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"community_platform_roles","description":"System-level user roles that define access control and permissions across the entire platform. Represents the four core role types: Guest (unauthenticated), Member (authenticated user), Moderator (community manager), and Admin (platform administrator). These roles form the foundation of the platform's authorization system and are referenced throughout all domains.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key"},"foreignFields":[],"plainFields":[{"name":"role_name","type":"string","description":"Name of the platform role (Guest, Member, Moderator, Admin). Unique identifier for the role that is referenced in access control decisions throughout the platform.","nullable":false},{"name":"role_description","type":"string","description":"Detailed description of the role's purpose, capabilities, and use case. Explains what actions users in this role can perform and what actions are restricted.","nullable":true},{"name":"display_order","type":"int","description":"Display order for role listings in administrative interfaces. Used to present roles in hierarchical order (Guest=1, Member=2, Moderator=3, Admin=4) for UI presentation.","nullable":false},{"name":"is_active","type":"boolean","description":"Whether this role is currently active and available for assignment to users. Inactive roles cannot be assigned to new users but may be retained on existing accounts for data integrity.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this role definition was created in the system (ISO 8601 UTC format). Used for audit trail and role history tracking.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this role definition was last modified (ISO 8601 UTC format). Updated whenever role description, permissions, or status changes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["role_name"],"unique":true}],"plainIndexes":[{"fieldNames":["is_active"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_role_permissions","description":"Platform-level permissions that define what actions each role can perform across the system. Establishes granular access control by mapping role IDs to specific permissions (create_post, vote, moderate_content, manage_users, etc.). This is the core authorization table that enforces platform-wide security policies and role-based access control.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key"},"foreignFields":[{"name":"community_platform_role_id","type":"uuid","description":"Reference to the platform role this permission applies to. Foreign key to {@link community_platform_roles.id} that establishes which role is granted this specific permission.","relation":{"name":"role","targetModel":"community_platform_roles"},"unique":false,"nullable":false}],"plainFields":[{"name":"permission_key","type":"string","description":"Machine-readable identifier for the permission (e.g., 'create_post', 'vote_on_content', 'moderate_community', 'manage_users'). Used in application code to check if a user has permission for an action.","nullable":false},{"name":"permission_name","type":"string","description":"Human-readable display name for this permission (e.g., 'Create Posts', 'Vote on Content', 'Moderate Communities', 'Manage User Accounts'). Used in administrative interfaces and documentation.","nullable":false},{"name":"permission_description","type":"string","description":"Detailed description of what this permission allows the role to do. Explains the specific actions, scope, and any limitations or conditions for this permission.","nullable":true},{"name":"permission_category","type":"string","description":"Category grouping related permissions (e.g., 'content_creation', 'voting', 'moderation', 'user_management', 'system_administration'). Helps organize permissions in administrative interfaces.","nullable":true},{"name":"is_active","type":"boolean","description":"Whether this permission is currently active and enforced. Inactive permissions cannot be checked but remain in database for audit trail and historical records.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this permission was created or assigned to the role (ISO 8601 UTC format). Used for audit trail and tracking permission assignments.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this permission assignment was last updated (ISO 8601 UTC format). Modified when permission is activated/deactivated or its definition changes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_role_id","permission_key"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_role_id"]},{"fieldNames":["permission_key"]},{"fieldNames":["permission_category"]},{"fieldNames":["is_active"]}],"ginIndexes":[{"fieldName":"permission_description"}]}]},{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"community_platform_users","description":"Core user account records representing authenticated members of the platform. Stores essential authentication credentials, account status, and creation metadata. Each user is the foundation for all platform activities including posting, commenting, voting, and community participation. This is the primary identity entity from which all other user-related records reference.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"User's email address used for account login and communication. Must be in valid RFC 5322 format and unique across the platform. This is the primary authentication identifier.","nullable":false},{"name":"password_hash","type":"string","description":"Bcrypt-hashed password with salt rounds of 10 minimum. Never stores plain text password. Used for authentication during login.","nullable":false},{"name":"username","type":"string","description":"Unique display name for the user (3-32 characters, alphanumeric with underscore/hyphen). Used in @mentions and user profiles. Case-insensitive uniqueness constraint enforced.","nullable":false},{"name":"account_status","type":"string","description":"Current status of the account. Valid values: 'active' (normal state), 'suspended' (temporarily restricted by moderation), 'banned' (permanently restricted), 'deleted' (user-requested deletion). Determines login and posting eligibility.","nullable":false},{"name":"email_verified","type":"boolean","description":"Whether user has completed email verification. Required to be true before accessing full posting/voting features. Users can still view content while email_verified is false.","nullable":false},{"name":"email_verified_at","type":"datetime","description":"Timestamp when user completed email verification (UTC ISO 8601 format). Null if email not yet verified. Used for audit trail and verification tracking.","nullable":true},{"name":"created_at","type":"datetime","description":"Account creation timestamp in UTC ISO 8601 format. Immutable after creation. Used for account age calculations and activity history.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp in UTC ISO 8601 format. Updated whenever any user record is modified. Used for audit trail tracking.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp when user account was marked for deletion. Null if account is active or non-deleted. Enables account recovery within grace period (30 days).","nullable":true},{"name":"last_login_at","type":"datetime","description":"Timestamp of the user's most recent successful login. Null if user has never logged in. Used to track activity and identify stale accounts.","nullable":true},{"name":"failed_login_attempts","type":"int","description":"Counter of consecutive failed login attempts (resets to 0 after successful login). Used for account lockout after 5 failed attempts in 15 minutes.","nullable":false},{"name":"locked_until","type":"datetime","description":"Timestamp when account lockout expires (resets to null when user logs in successfully or lockout period expires). Prevents login attempts during lockout window.","nullable":true}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true},{"fieldNames":["username"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["account_status"]},{"fieldNames":["deleted_at"]}],"ginIndexes":[]},{"name":"community_platform_user_emails","description":"Email address records for users supporting email verification and communication tracking. Stores verification tokens and status for email confirmation workflow. Each user can have multiple email records for managing email changes and verification history.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the user this email belongs to. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"email","type":"string","description":"Email address being verified. Must be in valid RFC 5322 format. Stored for tracking multiple email addresses per user.","nullable":false},{"name":"verified","type":"boolean","description":"Whether this email address has been verified by the user clicking verification link. False until user confirms ownership.","nullable":false},{"name":"verification_token_hash","type":"string","description":"SHA-256 hash of the verification token (never stores raw token). Used to validate verification link clicks. Null after email is verified.","nullable":true},{"name":"verification_token_expires_at","type":"datetime","description":"Timestamp when verification token expires (24 hours after generation). Null if email already verified. Prevents use of expired tokens.","nullable":true},{"name":"verified_at","type":"datetime","description":"Timestamp when email verification was completed (user clicked verification link). Null until verified. Used for audit trail.","nullable":true},{"name":"is_primary","type":"boolean","description":"Whether this is the primary email for the user account. Only one email per user should have is_primary=true. Used for login and communication.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when email record was created in UTC ISO 8601 format. Used for tracking email history.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp in UTC ISO 8601 format. Updated when verification status changes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id"]},{"fieldNames":["verified"]}],"ginIndexes":[]},{"name":"community_platform_user_sessions","description":"User session records tracking active login sessions and authentication tokens. Each session represents one login instance across devices. Used for session management, logout, and detecting concurrent logins. Sessions expire automatically after 30 days of inactivity.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the authenticated user. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"status","type":"string","description":"Current session status. Valid values: 'active' (session is valid and can be used), 'terminated' (user logged out), 'expired' (session timeout after 30 days). Determines whether session can be used.","nullable":false},{"name":"refresh_token_hash","type":"string","description":"SHA-256 hash of the refresh token (never stores raw token). Used to validate refresh token claims and prevent token reuse.","nullable":false},{"name":"ip_address","type":"string","description":"IP address from which session was created. Stored for security audit trail and fraud detection. Used to identify suspicious access patterns.","nullable":true},{"name":"user_agent","type":"string","description":"User-Agent header from the login request. Identifies browser/device used for login. Stored for security tracking and device identification.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when session was created (login occurred) in UTC ISO 8601 format. Used for session age calculation.","nullable":false},{"name":"expires_at","type":"datetime","description":"Timestamp when session will automatically expire (30 days after creation). Sessions are automatically invalidated at this time. Used for session timeout enforcement.","nullable":false},{"name":"last_activity_at","type":"datetime","description":"Timestamp of the last user activity in this session. Updated on each request. Used to detect idle sessions and calculate inactivity duration.","nullable":false},{"name":"terminated_at","type":"datetime","description":"Timestamp when session was explicitly terminated by user logout or admin action. Null while session is active. Enables session termination tracking.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id"]},{"fieldNames":["status"]},{"fieldNames":["expires_at"]}],"ginIndexes":[]},{"name":"community_platform_user_profiles","description":"Extended user profile information including display name, biography, avatar, and preference settings. Each user has one profile record containing personalization data and account preferences. This is the main profile entity that displays on user profile pages and in user info cards throughout the platform.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the user account. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"display_name","type":"string","description":"User's preferred display name (0-50 characters). Can differ from username and may contain spaces/punctuation. Shown on profile and posts. Optional field defaults to username if not set.","nullable":true},{"name":"bio","type":"string","description":"User's biography or about section (0-500 characters). Markdown formatting supported. Displayed on user profile. Optional self-description field.","nullable":true},{"name":"avatar_url","type":"uri","description":"URL to user's profile avatar image. Stored as URI. Null if no avatar uploaded (shows default placeholder). Image should be 200x200 pixels for optimal display.","nullable":true},{"name":"avatar_thumbnail_url","type":"uri","description":"URL to small thumbnail version of avatar (50x50 pixels) for efficient loading in lists and comments. Null if no avatar. Generated automatically from uploaded avatar.","nullable":true},{"name":"website_url","type":"uri","description":"Optional personal/professional website URL. Stored as URI and displayed as clickable link on profile. User-provided, must start with http:// or https://.","nullable":true},{"name":"location","type":"string","description":"User's location as free text (0-100 characters). Optional field for geographic identification. May contain city, region, or country information.","nullable":true},{"name":"profile_visibility","type":"string","description":"Profile visibility setting. Valid values: 'public' (visible to all users), 'members_only' (visible to registered members only), 'private' (visible only to self and admins). Controls who can view profile information.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when profile record was created in UTC ISO 8601 format. Usually same as user creation time.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp in UTC ISO 8601 format. Updated whenever profile information changes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"display_name"},{"fieldName":"bio"}]},{"name":"community_platform_user_karma","description":"User karma tracking and calculation records. Stores cumulative karma scores, breakdown by posts vs comments, and historical karma changes. Karma represents community-assigned reputation reflecting content quality. This is the core reputation metric determining user status and privileges on the platform.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the user earning karma. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"total_karma","type":"int","description":"Total cumulative karma points earned by user (can be negative). Calculated as sum of all post karma and comment karma. Updated in real-time as votes arrive. No upper or lower limit.","nullable":false},{"name":"post_karma","type":"int","description":"Cumulative karma earned from posts only. Calculated as sum of (upvotes - downvotes) on all user's posts. Updated when post votes change.","nullable":false},{"name":"comment_karma","type":"int","description":"Cumulative karma earned from comments only. Calculated as sum of (upvotes - downvotes) on all user's comments. Updated when comment votes change.","nullable":false},{"name":"karma_this_month","type":"int","description":"Karma earned in the current calendar month (rolling monthly total). Reset to zero on first day of each month. Trend metric for activity tracking.","nullable":false},{"name":"karma_this_year","type":"int","description":"Karma earned in the current calendar year (rolling yearly total). Reset to zero on January 1st. Long-term activity metric.","nullable":false},{"name":"karma_last_updated_at","type":"datetime","description":"Timestamp when karma totals were last recalculated in UTC ISO 8601 format. Used to identify when karma calculations should be refreshed.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when karma record was created (same as user creation) in UTC ISO 8601 format.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp in UTC ISO 8601 format. Updated when karma values change.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["total_karma"]},{"fieldNames":["karma_this_month"]}],"ginIndexes":[]},{"name":"community_platform_user_reputation_levels","description":"User reputation level tiers based on karma achievements. Tracks which reputation level badge the user has earned based on cumulative karma. Reputation levels provide recognition and visual status on profiles and posts. This is a denormalized view calculated from karma scores for display efficiency.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the user with this reputation level. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"current_level","type":"string","description":"Current reputation level badge earned by user. Valid values: 'newcomer' (1-99 karma), 'contributor' (100-499), 'active_member' (500-2499), 'community_leader' (2500-9999), 'respected_elder' (10000-49999), 'legend' (50000+). Automatically assigned based on total_karma.","nullable":false},{"name":"level_achieved_at","type":"datetime","description":"Timestamp when user first achieved current reputation level. Used to track when level was reached and for achievement notifications.","nullable":false},{"name":"previous_level","type":"string","description":"Previous reputation level before current. Null if this is first level achieved. Used to detect level progression and send achievement notifications.","nullable":true},{"name":"level_progress_percentage","type":"double","description":"Percentage progress toward next reputation level (0-100). Calculated as (current_karma - level_floor) / (level_ceiling - level_floor) * 100. Used for progress bars on profile.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when reputation level record was created in UTC ISO 8601 format.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp in UTC ISO 8601 format. Updated when karma changes cause level changes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["current_level"]}],"ginIndexes":[]},{"name":"community_platform_user_badges","description":"Achievement badges earned by users for specific accomplishments. Users can earn multiple badges for milestones like first post, high engagement, moderator status, or expert contributions. Badges are displayed on user profiles and posts for recognition. This tracks earned achievements beyond reputation levels.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the user who earned this badge. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"badge_type","type":"string","description":"Type/name of the badge earned. Valid values: 'verified_email', 'first_post', 'commenter', 'post_master', 'discussion_star', 'content_creator', 'decade_member', 'helpful', 'moderator', 'admin'. Identifies which achievement was earned.","nullable":false},{"name":"badge_name","type":"string","description":"Human-readable display name for badge (e.g., 'Verified Contributor', 'Post Master'). Shown to users on profiles and in achievement lists.","nullable":false},{"name":"badge_description","type":"string","description":"Description of what the badge represents and how to earn it (0-200 characters). Displayed in tooltip/hover information.","nullable":true},{"name":"badge_icon_url","type":"uri","description":"URL to badge icon/image. Displayed next to badge name on profiles and posts. Standard size 32x32 pixels.","nullable":true},{"name":"earned_at","type":"datetime","description":"Timestamp when user earned this badge in UTC ISO 8601 format. Used to display achievement date and ordering on profiles.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when badge record was created in UTC ISO 8601 format.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id","badge_type"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id"]},{"fieldNames":["badge_type"]}],"ginIndexes":[]},{"name":"community_platform_user_activity_history","description":"Complete audit trail of user actions on the platform. Records all user activities including posts created, comments posted, votes cast, communities joined, etc. This is a comprehensive activity log for user statistics, timeline generation, and behavior analysis. Used to generate user profile activity feeds and engagement metrics.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Reference to the user performing the activity. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"activity_type","type":"string","description":"Type of activity performed. Valid values: 'post_created', 'comment_posted', 'vote_cast', 'community_subscribed', 'user_followed', 'content_reported', 'account_login', 'password_changed', 'email_changed', 'profile_updated'. Categorizes the activity.","nullable":false},{"name":"content_type","type":"string","description":"Type of content involved in activity (if applicable). Valid values: 'post', 'comment', 'community', 'user', 'vote', null. Null for non-content activities like login. Identifies what was acted upon.","nullable":true},{"name":"content_id","type":"uuid","description":"ID of the content involved in the activity (if applicable). Null for activities not involving specific content. Used to link activity to actual content for context.","nullable":true},{"name":"community_id","type":"uuid","description":"ID of the community context for the activity (if applicable). Null for non-community activities. Used to group activities by community.","nullable":true},{"name":"details","type":"string","description":"Additional JSON details about the activity. Examples: vote type (upvote/downvote), old/new values, action details. Stores structured activity metadata.","nullable":true},{"name":"ip_address","type":"string","description":"IP address from which activity originated. Stored for security audit trail and fraud detection.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when activity occurred in UTC ISO 8601 format. Used for chronological ordering of activity timeline.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id","created_at"]},{"fieldNames":["activity_type"]},{"fieldNames":["community_id"]}],"ginIndexes":[]}]},{"filename":"schema-03-communities.prisma","namespace":"Communities","models":[{"name":"community_platform_communities","description":"Represents individual communities on the platform. Each community is a distinct space where members can create posts, comments, and engage in discussions around a specific topic or theme. Communities have owners (the creator), can be public or private, and contain metadata about their purpose, rules, and settings.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_creator_id","type":"uuid","description":"Reference to the creator/owner of this community. The creator's {@link community_platform_users.id}.","relation":{"name":"creator","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"community_category_id","type":"uuid","description":"Reference to the category this community belongs to. The category's {@link community_platform_community_categories.id}.","relation":{"name":"category","targetModel":"community_platform_community_categories"},"unique":false,"nullable":true}],"plainFields":[{"name":"name","type":"string","description":"Unique community name (slug for URL). 3-32 characters, alphanumeric with hyphens and underscores. Used in URLs like /c/community-name.","nullable":false},{"name":"display_name","type":"string","description":"Human-readable community name displayed to users. Can differ from the slug (name field). Max 60 characters.","nullable":false},{"name":"description","type":"string","description":"Community description explaining its purpose and topic. 10-500 characters. Displayed on community page and in search results.","nullable":false},{"name":"is_public","type":"boolean","description":"Whether the community is public (visible to all, membership automatic) or private (hidden, requires approval to join). Defaults to true.","nullable":false},{"name":"icon_url","type":"uri","description":"URL to community icon/logo image. Optional visual identifier for the community.","nullable":true},{"name":"banner_url","type":"uri","description":"URL to community banner image. Optional header image displayed on community page.","nullable":true},{"name":"subscriber_count","type":"int","description":"Denormalized count of total subscribers to this community. Updated when members subscribe/unsubscribe. Used for sorting and trending calculations.","nullable":false},{"name":"post_count","type":"int","description":"Denormalized count of total posts created in this community. Updated when posts are created/deleted. Used for community statistics.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this community was created. ISO 8601 UTC format.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this community was last updated (settings changed, etc.). ISO 8601 UTC format.","nullable":false}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["community_creator_id","created_at"]},{"fieldNames":["community_category_id"]},{"fieldNames":["created_at"]},{"fieldNames":["is_public"]}],"ginIndexes":[{"fieldName":"display_name"},{"fieldName":"description"}]},{"name":"community_platform_community_settings","description":"Stores configurable settings for each community including post type restrictions, commenting policies, member requirements, and archival settings. Allows moderators to customize how their community operates and what content is allowed.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Reference to the community these settings apply to. The community's {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":true,"nullable":false}],"plainFields":[{"name":"allow_text_posts","type":"boolean","description":"Whether text posts are allowed in this community. Default true.","nullable":false},{"name":"allow_link_posts","type":"boolean","description":"Whether link/URL posts are allowed in this community. Default true.","nullable":false},{"name":"allow_image_posts","type":"boolean","description":"Whether image posts are allowed in this community. Default true.","nullable":false},{"name":"allow_comments","type":"boolean","description":"Whether comments are enabled on posts in this community. Default true.","nullable":false},{"name":"require_post_approval","type":"boolean","description":"Whether new posts must be approved by moderators before appearing. Default false.","nullable":false},{"name":"require_comment_approval","type":"boolean","description":"Whether new comments must be approved by moderators before appearing. Default false.","nullable":false},{"name":"min_karma_to_post","type":"int","description":"Minimum karma required for members to create posts in this community. 0 means no requirement. Default 0.","nullable":false},{"name":"min_account_age_days_to_post","type":"int","description":"Minimum account age in days required to post in this community. 0 means no requirement. Default 0.","nullable":false},{"name":"min_karma_to_comment","type":"int","description":"Minimum karma required for members to comment in this community. 0 means no requirement. Default 0.","nullable":false},{"name":"min_account_age_days_to_comment","type":"int","description":"Minimum account age in days required to comment in this community. 0 means no requirement. Default 0.","nullable":false},{"name":"post_archive_age_days","type":"int","description":"Number of days after which posts become read-only (archived). Posts older than this cannot receive votes or new comments. Default 180 (6 months).","nullable":false},{"name":"spam_filter_sensitivity","type":"string","description":"Spam filter sensitivity level. Values: 'low', 'medium', 'high'. Default 'medium'. Controls automated spam detection.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when these settings were created. ISO 8601 UTC format.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when these settings were last updated. ISO 8601 UTC format.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_id"]}],"ginIndexes":[]},{"name":"community_platform_community_rules","description":"Stores community-specific rules that define content standards and member conduct expectations. Moderators create and manage rules to ensure community standards are followed. Rules are displayed to members when joining and referenced in moderation decisions.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Reference to the community these rules apply to. The community's {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"rule_number","type":"int","description":"Ordinal position of this rule (1, 2, 3, etc.). Used for displaying rules in consistent order.","nullable":false},{"name":"title","type":"string","description":"Short title of the rule (5-50 characters). Example: 'No harassment' or 'Off-topic content prohibited'.","nullable":false},{"name":"description","type":"string","description":"Detailed description of the rule (10-500 characters). Explains what behavior is prohibited and why.","nullable":false},{"name":"enforcement_level","type":"string","description":"Default enforcement approach for this rule. Values: 'warning', 'temporary_removal', 'permanent_removal'. Can be overridden by moderators.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this rule was created. ISO 8601 UTC format.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this rule was last updated. ISO 8601 UTC format.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_id","rule_number"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"description"}]},{"name":"community_platform_community_categories","description":"Predefined categories that communities can be tagged with for organization and discovery. System maintains a fixed list of categories (Technology, Gaming, Sports, etc.) that help users find communities by topic area.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"Category name (e.g., 'Technology', 'Gaming', 'Science'). 3-32 characters, unique across all categories.","nullable":false},{"name":"description","type":"string","description":"Brief description of what communities belong in this category. Max 200 characters.","nullable":false},{"name":"display_order","type":"int","description":"Display order for presenting categories in UI lists. Lower numbers appear first. Used for sorting category dropdowns.","nullable":false},{"name":"icon_url","type":"uri","description":"Optional URL to category icon/image for visual identification.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when this category was created. ISO 8601 UTC format.","nullable":false}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["display_order"]}],"ginIndexes":[]},{"name":"community_platform_moderators","description":"Tracks which users have moderator roles in which communities. Moderators have elevated permissions to manage content, enforce rules, and maintain community standards. Supports hierarchical roles (Moderator, Senior Moderator, Community Owner) with different permission levels.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Reference to the community this moderator manages. The community's {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false},{"name":"user_id","type":"uuid","description":"Reference to the user who is a moderator. The user's {@link community_platform_users.id}.","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"role","type":"string","description":"Moderator role level within this community. Values: 'moderator' (standard), 'senior_moderator' (enhanced), 'community_owner' (full control). Determines permissions.","nullable":false},{"name":"appointed_at","type":"datetime","description":"Timestamp when this user was appointed as moderator in this community. ISO 8601 UTC format.","nullable":false},{"name":"appointed_by_id","type":"uuid","description":"User ID of the moderator who appointed this moderator. Tracks who made the decision for audit purposes.","nullable":true}],"uniqueIndexes":[{"fieldNames":["community_id","user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id"]},{"fieldNames":["user_id"]},{"fieldNames":["role"]}],"ginIndexes":[]},{"name":"community_platform_moderator_permissions","description":"Defines what specific actions moderators with each role level can perform. Maps moderator roles (moderator, senior_moderator, community_owner) to specific permissions they have. Enables fine-grained role-based access control.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"role","type":"string","description":"Moderator role this permission applies to. Values: 'moderator', 'senior_moderator', 'community_owner'. Determines who can perform this action.","nullable":false},{"name":"permission","type":"string","description":"Specific permission name. Examples: 'remove_post', 'warn_user', 'ban_user', 'lock_thread', 'pin_post', 'edit_community_settings', 'assign_moderator'. Controls what actions the role can take.","nullable":false},{"name":"description","type":"string","description":"Human-readable description of what this permission allows. Used for documentation and UI display.","nullable":false}],"uniqueIndexes":[{"fieldNames":["role","permission"],"unique":true}],"plainIndexes":[{"fieldNames":["role"]},{"fieldNames":["permission"]}],"ginIndexes":[]}]},{"filename":"schema-04-subscriptions.prisma","namespace":"Subscriptions","models":[{"name":"community_platform_community_subscriptions","description":"Tracks which users are subscribed to which communities. This is the primary membership record establishing the user-community relationship. When a user subscribes to a community, a record is created here. Users can subscribe to multiple communities and communities can have thousands of subscribers.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"The user who is subscribed. Reference to {@link community_platform_users.id}.","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"The community being subscribed to. Reference to {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"subscription_status","type":"string","description":"Status of the subscription: 'active' (normal member), 'muted' (receives no notifications), 'archived' (hidden from list but can reactivate). Subscription can transition between these states.","nullable":false},{"name":"is_favorite","type":"boolean","description":"Whether the member has marked this community as a favorite for easy access and priority in feeds.","nullable":false},{"name":"subscription_role","type":"string","description":"Member's role in this community: 'member' (regular subscriber), 'moderator' (can moderate), 'owner' (created or owns community). Determines what actions they can perform.","nullable":false},{"name":"created_at","type":"datetime","description":"When the user subscribed to this community. Used for tracking membership tenure and sorting 'oldest members first'.","nullable":false},{"name":"updated_at","type":"datetime","description":"When the subscription record was last modified (status change, role change, etc.).","nullable":false},{"name":"last_activity_at","type":"datetime","description":"When the member last performed action in this community (post, comment, vote, view). Used for engagement tracking and identifying active members.","nullable":true},{"name":"notification_preferences","type":"string","description":"JSON-encoded notification preferences for this community subscription: digest frequency, content types to notify on, quiet hours, etc.","nullable":true}],"uniqueIndexes":[{"fieldNames":["community_platform_user_id","community_platform_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_user_id","created_at"]},{"fieldNames":["community_platform_community_id","created_at"]},{"fieldNames":["community_platform_user_id","subscription_status"]},{"fieldNames":["community_platform_community_id","subscription_status"]},{"fieldNames":["community_platform_user_id","is_favorite"]},{"fieldNames":["community_platform_community_id","subscription_role"]}],"ginIndexes":[]},{"name":"community_platform_community_members","description":"Alternative view of community membership with denormalized member information for efficient querying and analytics. Stores member count tracking and member statistics per community. Complementary to subscriptions table, providing aggregated view of community membership state.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"The member user. Reference to {@link community_platform_users.id}.","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"The community. Reference to {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"member_role","type":"string","description":"Member's role in community: 'member', 'moderator', 'owner'. Denormalized from subscription_role for quick access.","nullable":false},{"name":"member_status","type":"string","description":"Current status of the membership: 'active', 'suspended', 'banned'. Tracks if member can participate.","nullable":false},{"name":"posts_count","type":"int","description":"Total posts created by this member in this community. Denormalized for performance.","nullable":false},{"name":"comments_count","type":"int","description":"Total comments created by this member in this community. Denormalized for analytics.","nullable":false},{"name":"karma_in_community","type":"int","description":"Total karma earned from posts and comments in this community. Community-specific reputation metric.","nullable":false},{"name":"joined_at","type":"datetime","description":"When member joined this community. Used for tenure-based features.","nullable":false},{"name":"last_active_at","type":"datetime","description":"When member was last active in community (post, comment, vote). Tracks engagement.","nullable":true},{"name":"is_banned","type":"boolean","description":"Whether this member is banned from the community. Banned members cannot create content or interact.","nullable":false},{"name":"ban_reason","type":"string","description":"Reason for community ban if applicable. Explains why member was banned.","nullable":true},{"name":"ban_expires_at","type":"datetime","description":"When temporary ban expires. Null for permanent bans. Used for automatic ban lifting.","nullable":true}],"uniqueIndexes":[{"fieldNames":["community_platform_user_id","community_platform_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_community_id","member_status"]},{"fieldNames":["community_platform_community_id","member_role"]},{"fieldNames":["community_platform_community_id","is_banned"]},{"fieldNames":["community_platform_user_id","karma_in_community"]},{"fieldNames":["community_platform_community_id","last_active_at"]}],"ginIndexes":[]},{"name":"community_platform_community_blocks","description":"Tracks users who have blocked other users within specific communities. A blocked user cannot interact with the blocker in that community: cannot message, cannot see content, cannot follow. This represents community-level blocking separate from platform-wide blocking.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_blocker_user_id","type":"uuid","description":"The user doing the blocking. Reference to {@link community_platform_users.id}.","relation":{"name":"blockerUser","targetModel":"community_platform_users","mappingName":"community_platform_community_blocks_of_community_platf_416743f6"},"unique":false,"nullable":false},{"name":"community_platform_blocked_user_id","type":"uuid","description":"The user being blocked. Reference to {@link community_platform_users.id}.","relation":{"name":"blockedUser","targetModel":"community_platform_users","mappingName":"community_platform_community_blocks_of_community_platf_116dadc7"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"The community where the blocking applies. Reference to {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"When the block was initiated. Used for tracking block tenure and patterns.","nullable":false},{"name":"block_reason","type":"string","description":"User-provided reason for blocking (optional). Explains why the user blocked another user.","nullable":true},{"name":"is_active","type":"boolean","description":"Whether this block is currently active. Allows for soft-deletion of blocks.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_blocker_user_id","community_platform_blocked_user_id","community_platform_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_blocker_user_id","community_platform_community_id"]},{"fieldNames":["community_platform_blocked_user_id","community_platform_community_id"]},{"fieldNames":["community_platform_community_id","is_active"]}],"ginIndexes":[]},{"name":"community_platform_join_requests","description":"Tracks requests from users to join private communities. When a user requests membership in a private community, a record is created here pending moderator approval. Moderators review and accept or reject join requests. Used for private community access control and membership management.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"The user requesting to join. Reference to {@link community_platform_users.id}.","relation":{"name":"user","targetModel":"community_platform_users","mappingName":"community_platform_join_requests_of_community_platform_user_id"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"The private community being requested to join. Reference to {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false},{"name":"reviewed_by_user_id","type":"uuid","description":"The moderator who reviewed/approved/rejected this request. Reference to {@link community_platform_users.id}. Null while pending.","relation":{"name":"reviewedByUser","targetModel":"community_platform_users","mappingName":"community_platform_join_requests_of_reviewed_by_user_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"request_status","type":"string","description":"Status of the join request: 'pending' (awaiting review), 'approved' (accepted, user now member), 'rejected' (denied). Tracks the workflow state.","nullable":false},{"name":"request_message","type":"string","description":"Optional message from requester explaining why they want to join. Maximum 500 characters. Helps moderators decide.","nullable":true},{"name":"created_at","type":"datetime","description":"When the join request was submitted. Used for sorting requests by age and enforcing review SLA.","nullable":false},{"name":"reviewed_at","type":"datetime","description":"When the request was reviewed (approved or rejected). Null while pending. Used for tracking review time.","nullable":true},{"name":"moderator_notes","type":"string","description":"Notes from moderator reviewing the request. Explains decision to approve or reject. Visible to requester.","nullable":true},{"name":"rejection_reason","type":"string","description":"Structured reason for rejection (if rejected): 'not_qualified', 'community_full', 'rule_violation', 'other'. Helps user understand decision.","nullable":true},{"name":"expires_at","type":"datetime","description":"When the request expires if not reviewed. Pending requests expire after 30 days. Used for automatic cleanup.","nullable":true}],"uniqueIndexes":[{"fieldNames":["community_platform_user_id","community_platform_community_id","request_status"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_community_id","request_status"]},{"fieldNames":["community_platform_community_id","created_at"]},{"fieldNames":["community_platform_user_id","request_status"]},{"fieldNames":["request_status"]},{"fieldNames":["expires_at"]}],"ginIndexes":[]}]},{"filename":"schema-05-content.prisma","namespace":"Content","models":[{"name":"community_platform_posts","description":"Represents user-created posts within communities. Posts are the primary content type on the platform and can be text, links, or images. Each post belongs to a community and author, tracks engagement metrics (views, votes, comments), and maintains edit history.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"Author of the post. Reference to {@link community_platform_users.id}","relation":{"name":"author","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"Community where the post was created. Reference to {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Post title (3-300 characters). Required for all post types.","nullable":false},{"name":"post_type","type":"string","description":"Type of post: 'text', 'link', or 'image'. Determines which content fields are populated.","nullable":false},{"name":"body_content","type":"string","description":"Post body text (0-40,000 characters). Used for text posts, optional for other types.","nullable":true},{"name":"link_url","type":"uri","description":"External URL for link posts (HTTP/HTTPS only, max 2,000 characters). Populated only for link posts.","nullable":true},{"name":"link_domain","type":"string","description":"Domain extracted from link_url for display and filtering purposes.","nullable":true},{"name":"status","type":"string","description":"Publication status: 'draft', 'published', 'archived', 'removed', or 'deleted'. Controls visibility and functionality.","nullable":false},{"name":"upvote_count","type":"int","description":"Cached count of upvotes received. Updated in real-time as votes arrive.","nullable":false},{"name":"downvote_count","type":"int","description":"Cached count of downvotes received. Updated in real-time as votes arrive.","nullable":false},{"name":"net_score","type":"int","description":"Calculated score: upvote_count - downvote_count. Used for sorting and ranking.","nullable":false},{"name":"comment_count","type":"int","description":"Cached count of root-level comments on this post. Updated when comments are created or deleted.","nullable":false},{"name":"view_count","type":"int","description":"Number of unique user views of this post. Incremented once per user per 24-hour period.","nullable":false},{"name":"is_pinned","type":"boolean","description":"Whether post is pinned by moderators. Pinned posts appear at top of community feed.","nullable":false},{"name":"is_locked","type":"boolean","description":"Whether comments are disabled on this post. Locked posts remain visible but cannot receive new comments.","nullable":false},{"name":"is_removed","type":"boolean","description":"Whether post was removed by moderators for policy violation. Soft delete indicator.","nullable":false},{"name":"removal_reason","type":"string","description":"Reason for removal if is_removed=true. Category of policy violation (spam, harassment, misinformation, etc.).","nullable":true},{"name":"edit_count","type":"int","description":"Number of times this post has been edited by the author. Incremented each time post is modified.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when post was created (UTC). Used for sorting and age-based algorithms.","nullable":false},{"name":"edited_at","type":"datetime","description":"Timestamp of most recent edit. Null if post has never been edited.","nullable":true},{"name":"deleted_at","type":"datetime","description":"Timestamp when post was soft-deleted by author. Null if post is active. Used for soft delete recovery.","nullable":true},{"name":"last_activity_at","type":"datetime","description":"Timestamp of most recent vote or comment on this post. Used for hot algorithm calculations.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_community_id","created_at"]},{"fieldNames":["community_platform_user_id","created_at"]},{"fieldNames":["status","created_at"]},{"fieldNames":["is_pinned","created_at"]},{"fieldNames":["last_activity_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body_content"}]},{"name":"community_platform_post_images","description":"Stores image files associated with image posts. One post can have multiple images (up to 20). Each image record references the parent post and stores file metadata, URLs, and dimensions for responsive delivery.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Post that contains this image. Reference to {@link community_platform_posts.id}","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false}],"plainFields":[{"name":"image_order","type":"int","description":"Display order of image within the post (1-based). Determines sequence in carousel or grid.","nullable":false},{"name":"image_url_full","type":"uri","description":"URL to full-resolution image (original size, up to 8000x8000 pixels).","nullable":false},{"name":"image_url_medium","type":"uri","description":"URL to medium-sized image (800x800 pixels, optimized for post view).","nullable":false},{"name":"image_url_thumbnail","type":"uri","description":"URL to thumbnail image (300x300 pixels, optimized for feed display).","nullable":false},{"name":"image_width","type":"int","description":"Original image width in pixels.","nullable":false},{"name":"image_height","type":"int","description":"Original image height in pixels.","nullable":false},{"name":"image_format","type":"string","description":"Image format (JPEG, PNG, GIF, WebP). All images stored internally as JPEG for optimization.","nullable":false},{"name":"image_size_bytes","type":"int","description":"File size of original image in bytes. Used for bandwidth tracking.","nullable":false},{"name":"caption","type":"string","description":"Optional caption for this specific image (max 500 characters). Supports markdown formatting.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when image was uploaded.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_post_id","image_order"]}],"ginIndexes":[]},{"name":"community_platform_comments","description":"Represents comments and nested replies on posts. Supports hierarchical threading up to 10 levels deep. Each comment tracks engagement (votes, edit history), parent relationships for nesting, and publication status. Comments form the discussion backbone of the platform.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Post that this comment belongs to. Reference to {@link community_platform_posts.id}","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_platform_user_id","type":"uuid","description":"Author of the comment. Reference to {@link community_platform_users.id}","relation":{"name":"author","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"parent_comment_id","type":"uuid","description":"Parent comment if this is a nested reply. Null for root-level comments. Enables threaded discussion structure.","relation":{"name":"parentComment","targetModel":"community_platform_comments","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"content","type":"string","description":"Comment text content (1-10,000 characters). Supports markdown formatting including code blocks.","nullable":false},{"name":"nesting_depth","type":"int","description":"Hierarchy level (1=root comment, 2=reply to root, max=10). Enforced to prevent excessively deep threads.","nullable":false},{"name":"upvote_count","type":"int","description":"Cached count of upvotes received. Updated in real-time.","nullable":false},{"name":"downvote_count","type":"int","description":"Cached count of downvotes received. Updated in real-time.","nullable":false},{"name":"net_score","type":"int","description":"Calculated score: upvote_count - downvote_count. Used for sorting comments.","nullable":false},{"name":"status","type":"string","description":"Publication status: 'published', 'removed', or 'deleted'. Controls visibility.","nullable":false},{"name":"is_removed","type":"boolean","description":"Whether comment was removed by moderators. Soft delete indicator.","nullable":false},{"name":"removal_reason","type":"string","description":"Reason for removal if is_removed=true.","nullable":true},{"name":"is_locked","type":"boolean","description":"Whether replies to this comment are disabled. Locked comments remain visible.","nullable":false},{"name":"is_pinned","type":"boolean","description":"Whether comment is pinned by moderator in its thread.","nullable":false},{"name":"edit_count","type":"int","description":"Number of times comment has been edited.","nullable":false},{"name":"is_moderator_post","type":"boolean","description":"Whether comment author is a moderator of the community. Shown with badge.","nullable":false},{"name":"is_admin_post","type":"boolean","description":"Whether comment author is a platform administrator. Shown with badge.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when comment was created.","nullable":false},{"name":"edited_at","type":"datetime","description":"Timestamp of most recent edit. Null if never edited.","nullable":true},{"name":"deleted_at","type":"datetime","description":"Timestamp when comment was soft-deleted by author. Null if active.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_post_id","created_at"]},{"fieldNames":["community_platform_user_id","created_at"]},{"fieldNames":["parent_comment_id"]},{"fieldNames":["nesting_depth","created_at"]},{"fieldNames":["status"]}],"ginIndexes":[{"fieldName":"content"}]},{"name":"community_platform_post_edits","description":"Records historical edit history of posts for audit trail and change tracking. Each edit entry captures the previous state before modification. Allows reconstruction of edit timeline and detection of suspicious patterns.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Post that was edited. Reference to {@link community_platform_posts.id}","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false}],"plainFields":[{"name":"previous_title","type":"string","description":"Post title before this edit. Captures state for comparison.","nullable":false},{"name":"previous_body_content","type":"string","description":"Post body content before this edit (for text posts only).","nullable":true},{"name":"previous_link_url","type":"uri","description":"Post URL before this edit (for link posts only).","nullable":true},{"name":"edit_number","type":"int","description":"Sequential edit number (1st edit, 2nd edit, etc.). Used to maintain edit order.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this edit occurred.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_post_id","created_at"]}],"ginIndexes":[]},{"name":"community_platform_comment_edits","description":"Records historical edit history of comments for audit trail and change tracking. Each edit entry captures the content state before modification. Enables reconstruction of discussion evolution.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_comment_id","type":"uuid","description":"Comment that was edited. Reference to {@link community_platform_comments.id}","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":false}],"plainFields":[{"name":"previous_content","type":"string","description":"Comment content before this edit.","nullable":false},{"name":"edit_number","type":"int","description":"Sequential edit number (1st edit, 2nd edit, etc.).","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this edit occurred.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_comment_id","created_at"]}],"ginIndexes":[]},{"name":"community_platform_content_views","description":"Tracks individual user views of posts for engagement metrics and view count calculation. Records when users view posts with deduplication (one view per user per 24 hours). Used for calculating view counts and identifying engagement patterns.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Post that was viewed. Reference to {@link community_platform_posts.id}","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_platform_user_id","type":"uuid","description":"User who viewed the post. Reference to {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp when post was viewed. Used for deduplication (one per user per 24 hours).","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_post_id","community_platform_user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_user_id","created_at"]}],"ginIndexes":[]}]},{"filename":"schema-06-engagement.prisma","namespace":"Engagement","models":[{"name":"community_platform_votes","description":"Core voting records tracking all upvotes and downvotes on posts and comments. This is the primary source of truth for community engagement voting. Each record represents one user's vote on one piece of content (post or comment). Users can change their vote (upvote to downvote) or remove their vote entirely. Votes drive karma calculation and content ranking algorithms (hot, top, controversial). The {@link community_platform_users.id} user who votes, the voteable_type and voteable_id identify what content received the vote.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"voter_id","type":"uuid","description":"User who cast this vote. References {@link community_platform_users.id}.","relation":{"name":"voter","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"voteable_type","type":"string","description":"Type of content being voted on: 'post' or 'comment'. Determines whether voteable_id references a post or comment.","nullable":false},{"name":"voteable_id","type":"uuid","description":"ID of the post or comment receiving the vote. Paired with voteable_type to identify exact content.","nullable":false},{"name":"vote_type","type":"int","description":"Vote direction: 1 for upvote, -1 for downvote. Enables sorting by vote direction and calculating net scores.","nullable":false},{"name":"created_at","type":"datetime","description":"When this vote was cast (ISO 8601 UTC). Used for vote velocity calculations in hot algorithm.","nullable":false},{"name":"updated_at","type":"datetime","description":"When this vote was last updated (changed or revoked). Tracks vote change history.","nullable":false}],"uniqueIndexes":[{"fieldNames":["voter_id","voteable_type","voteable_id"],"unique":true}],"plainIndexes":[{"fieldNames":["voteable_type","voteable_id"]},{"fieldNames":["voter_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_vote_history","description":"Complete audit trail of all vote lifecycle events including creation, changes (upvote to downvote conversions), and revocations. Enables tracking of voting patterns, detecting manipulation, and providing complete historical record. Records are append-only (never deleted). Each entry captures the state at a point in time. {@link community_platform_votes.id} is the current vote being tracked, and this history preserves every change to it.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"vote_id","type":"uuid","description":"Reference to the vote being tracked in history. Links to {@link community_platform_votes.id}.","relation":{"name":"vote","targetModel":"community_platform_votes"},"unique":false,"nullable":false}],"plainFields":[{"name":"event_type","type":"string","description":"Type of event: 'created', 'changed', 'revoked'. Indicates what happened to the vote.","nullable":false},{"name":"previous_vote_type","type":"int","description":"Vote type before this event (null for creation, 1/-1 for changes, previous value for revocation). Enables detecting vote manipulation patterns.","nullable":true},{"name":"new_vote_type","type":"int","description":"Vote type after this event (1/-1 for creation/change, null for revocation). Null indicates vote was removed.","nullable":true},{"name":"created_at","type":"datetime","description":"When this history event was recorded (ISO 8601 UTC). Preserves complete timeline of vote changes.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["vote_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_karma_ledger","description":"Immutable transaction log of all karma changes for every user. Each entry records one karma transaction: when user earns/loses karma, from what source, and by how much. This is the authoritative source for calculating user karma balances. Transactions are append-only (never deleted). Enables accurate karma recalculation, identifies karma anomalies, and provides audit trail. {@link community_platform_users.id} identifies the user whose karma changed.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who earned or lost karma. References {@link community_platform_users.id}.","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"transaction_type","type":"string","description":"Source of karma change: 'upvote_received', 'downvote_received', 'post_deleted', 'comment_deleted', 'achievement', 'milestone', 'admin_adjustment'. Indicates why karma changed.","nullable":false},{"name":"amount","type":"int","description":"Amount of karma gained (positive) or lost (negative). Can be positive or negative values.","nullable":false},{"name":"reference_id","type":"uuid","description":"ID of related object (post_id, comment_id, achievement_id, etc.) depending on transaction_type. Enables tracing karma to source event.","nullable":true},{"name":"reference_type","type":"string","description":"Type of referenced object: 'post', 'comment', 'achievement', 'milestone', 'adjustment'. Clarifies what reference_id refers to.","nullable":true},{"name":"created_at","type":"datetime","description":"When this karma transaction occurred (ISO 8601 UTC). Enables sequencing transactions and identifying when karma changes occurred.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id"]},{"fieldNames":["created_at"]},{"fieldNames":["transaction_type"]}],"ginIndexes":[]},{"name":"community_platform_karma_snapshots","description":"Point-in-time snapshots of user karma states, typically captured daily. Preserves user's total karma value at specific moments, enabling historical karma tracking, trend analysis, and reputation level history. Snapshots are read-only after creation. {@link community_platform_users.id} identifies the user whose karma was snapshotted. Enables detection of rapid karma changes and analysis of user activity patterns over time.","material":false,"stance":"snapshot","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User whose karma is being snapshotted. References {@link community_platform_users.id}.","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"total_karma","type":"int","description":"User's total karma at snapshot time. Sum of all karma ledger entries up to snapshot_at timestamp.","nullable":false},{"name":"post_karma","type":"int","description":"Karma earned/lost from posts only. Sum of karma changes from upvotes/downvotes on user's posts.","nullable":false},{"name":"comment_karma","type":"int","description":"Karma earned/lost from comments only. Sum of karma changes from upvotes/downvotes on user's comments.","nullable":false},{"name":"reputation_level","type":"string","description":"User's reputation level at snapshot time based on total_karma: Newcomer (1-99), Contributor (100-499), Active Member (500-2499), Community Leader (2500-9999), Respected Elder (10000-49999), Legend (50000+).","nullable":false},{"name":"snapshot_at","type":"datetime","description":"When this snapshot was taken (ISO 8601 UTC). Typically once daily. Enables tracking karma changes over time and detecting anomalies.","nullable":false},{"name":"created_at","type":"datetime","description":"When snapshot record was created. Same as snapshot_at for regular snapshots.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id","snapshot_at"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id"]},{"fieldNames":["snapshot_at"]}],"ginIndexes":[]},{"name":"community_platform_engagement_metrics","description":"Aggregated engagement statistics calculated daily from source events. Tracks engagement metrics per user, per community, and per post for efficient reporting and analytics. Includes vote statistics, activity levels, growth metrics. Pre-calculated metrics enable fast analytics queries without expensive aggregations. Records are refreshed daily, not updated in-place. Used for trending algorithms, recommendations, and engagement reports. {@link community_platform_users.id} for user metrics, community_id for community metrics, voteable_id for post metrics.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"metric_type","type":"string","description":"Type of metric: 'user_engagement', 'community_engagement', 'post_engagement'. Indicates what entity this metric measures.","nullable":false},{"name":"entity_id","type":"uuid","description":"ID of entity being measured: user_id, community_id, or post_id. Identifies what this metric applies to.","nullable":false},{"name":"posts_created","type":"int","description":"Number of posts created (user) or published (community). For posts, this is always 1 (the post itself).","nullable":false},{"name":"comments_created","type":"int","description":"Number of comments posted. For posts, total comments on the post. For users, total comments by user. For communities, total comments in community.","nullable":false},{"name":"upvotes_received","type":"int","description":"Total upvotes received on all user's posts/comments, or on community's posts, or on this post.","nullable":false},{"name":"downvotes_received","type":"int","description":"Total downvotes received on all user's posts/comments, or on community's posts, or on this post.","nullable":false},{"name":"upvotes_given","type":"int","description":"Number of upvotes user has cast. Only populated for user_engagement type.","nullable":false},{"name":"downvotes_given","type":"int","description":"Number of downvotes user has cast. Only populated for user_engagement type.","nullable":false},{"name":"views_count","type":"int","description":"Number of times post was viewed. Only populated for post_engagement type.","nullable":false},{"name":"engagement_score","type":"double","description":"Calculated engagement metric: (upvotes * 1.0 + comments * 2.0 + views * 0.1) / (age_in_days + 1). Higher score indicates more engagement.","nullable":false},{"name":"period_date","type":"datetime","description":"Date this metric represents (start of day in UTC). Metrics are calculated daily.","nullable":false},{"name":"created_at","type":"datetime","description":"When this metric record was created (ISO 8601 UTC). Typically daily at midnight UTC.","nullable":false}],"uniqueIndexes":[{"fieldNames":["metric_type","entity_id","period_date"],"unique":true}],"plainIndexes":[{"fieldNames":["metric_type"]},{"fieldNames":["entity_id"]},{"fieldNames":["period_date"]},{"fieldNames":["engagement_score"]}],"ginIndexes":[]}]},{"filename":"schema-07-social.prisma","namespace":"Social","models":[{"name":"community_platform_user_follows","description":"User follow relationships enabling social networking and user discovery. Records which users follow other users in an unidirectional manner. Central to building social graphs, follow suggestions, and user recommendations. Users can follow any other member and unfollow at any time. Follow relationships are independent of community subscriptions and represent direct social interest rather than community membership.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"follower_id","type":"uuid","description":"The user who is following. References {@link community_platform_users.id}.","relation":{"name":"follower","targetModel":"community_platform_users","mappingName":"community_platform_user_follows_of_follower_id"},"unique":false,"nullable":false},{"name":"following_id","type":"uuid","description":"The user being followed. References {@link community_platform_users.id}.","relation":{"name":"following","targetModel":"community_platform_users","mappingName":"community_platform_user_follows_of_following_id"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp when the follow relationship was created (ISO 8601 UTC).","nullable":false},{"name":"relationship_status","type":"string","description":"Status of the follow relationship: 'active' (normal follow), 'blocked' (follower is blocked by following user), or 'inactive' (following user account suspended/deleted). Determines if follow is functionally active.","nullable":false}],"uniqueIndexes":[{"fieldNames":["follower_id","following_id"],"unique":true}],"plainIndexes":[{"fieldNames":["follower_id","created_at"]},{"fieldNames":["following_id","created_at"]},{"fieldNames":["relationship_status"]}],"ginIndexes":[]},{"name":"community_platform_user_blocks","description":"User block relationships preventing interactions between users. When a user blocks another user, the blocked user cannot view the blocker's profile, activity, send direct messages, or interact with the blocker's content. Blocks are unidirectional - user A can block user B without affecting user B's ability to follow or interact unless user B separately blocks user A. Critical for user safety, privacy protection, and harassment prevention. Independent of community membership or follow relationships.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"blocker_id","type":"uuid","description":"The user who initiated the block. References {@link community_platform_users.id}.","relation":{"name":"blocker","targetModel":"community_platform_users","mappingName":"community_platform_user_blocks_of_blocker_id"},"unique":false,"nullable":false},{"name":"blocked_id","type":"uuid","description":"The user being blocked. References {@link community_platform_users.id}.","relation":{"name":"blocked","targetModel":"community_platform_users","mappingName":"community_platform_user_blocks_of_blocked_id"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp when the block was created (ISO 8601 UTC).","nullable":false},{"name":"reason","type":"string","description":"Optional reason for the block provided by blocker (max 500 characters). Can be null if no reason specified.","nullable":true},{"name":"is_active","type":"boolean","description":"Whether the block is currently active. When false, indicates block was removed (unblock). Used for soft delete pattern to preserve block history for audit purposes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["blocker_id","blocked_id"],"unique":true}],"plainIndexes":[{"fieldNames":["blocker_id","created_at"]},{"fieldNames":["blocked_id","created_at"]},{"fieldNames":["is_active"]}],"ginIndexes":[]},{"name":"community_platform_mentions","description":"Records of user mentions (@username tags) in posts and comments. When a user mentions another user using @username format in post or comment content, this table tracks the mention relationship. Used for generating mention notifications, tracking mention patterns, and maintaining mention history. Supports the mention system enabling user tagging and user discovery. Each mention is linked to the specific post or comment where it occurred.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"mentioned_user_id","type":"uuid","description":"The user being mentioned with @ symbol. References {@link community_platform_users.id}.","relation":{"name":"mentionedUser","targetModel":"community_platform_users","mappingName":"community_platform_mentions_of_mentioned_user_id"},"unique":false,"nullable":false},{"name":"mentioning_user_id","type":"uuid","description":"The user who created the mention by writing @username. References {@link community_platform_users.id}.","relation":{"name":"mentioningUser","targetModel":"community_platform_users","mappingName":"community_platform_mentions_of_mentioning_user_id"},"unique":false,"nullable":false}],"plainFields":[{"name":"content_id","type":"uuid","description":"UUID of the post or comment containing the mention. References either community_platform_posts.id or community_platform_comments.id depending on content_type.","nullable":false},{"name":"content_type","type":"string","description":"Type of content containing the mention: 'post' (mention in post) or 'comment' (mention in comment). Determines which content table to reference.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the mention was created (ISO 8601 UTC). Used for sorting and filtering mention history.","nullable":false},{"name":"notification_sent","type":"boolean","description":"Whether a notification was sent to the mentioned user for this mention. Tracks notification delivery status and prevents duplicate notifications.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["mentioned_user_id","created_at"]},{"fieldNames":["mentioning_user_id","created_at"]},{"fieldNames":["content_id","content_type"]},{"fieldNames":["notification_sent"]}],"ginIndexes":[]}]},{"filename":"schema-08-notifications.prisma","namespace":"Notifications","models":[{"name":"community_platform_notifications","description":"Core notification records capturing all notification events sent to users. Tracks what notification was sent, why it was sent, who triggered it, and its status. Each record represents a single notification instance delivered to a specific user.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key"},"foreignFields":[{"name":"recipient_id","type":"uuid","description":"User who receives this notification. Foreign key to {@link community_platform_users.id}","relation":{"name":"recipient","targetModel":"community_platform_users","mappingName":"community_platform_notifications_of_recipient_id"},"unique":false,"nullable":false},{"name":"trigger_user_id","type":"uuid","description":"User who triggered this notification (who took the action causing notification). Foreign key to {@link community_platform_users.id}. Nullable for system-generated notifications.","relation":{"name":"triggerUser","targetModel":"community_platform_users","mappingName":"community_platform_notifications_of_trigger_user_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"notification_type","type":"string","description":"Type of notification (reply, mention, follow, moderator_action, milestone, community_post, upvote). Enum values: reply, mention, follow, moderator_action, milestone, community_post, upvote. Classifies the notification for filtering and display.","nullable":false},{"name":"related_content_id","type":"uuid","description":"ID of the content (post, comment, or user) that this notification relates to. Used with related_content_type to identify specific content triggering notification. Nullable for system notifications.","nullable":true},{"name":"related_content_type","type":"string","description":"Type of related content (post, comment, user). Enum values: post, comment, user. Indicates what type of resource related_content_id references. Nullable if no specific content referenced.","nullable":true},{"name":"notification_message","type":"string","description":"Display text for the notification (max 200 characters). Short message summarizing the notification event. Example: 'You received a new reply to your post' or '[User] mentioned you in a comment'","nullable":false},{"name":"notification_data","type":"string","description":"JSON object storing additional context for different notification types. Can include: content preview (first 100 chars), rule violated (for moderator actions), ban duration (for suspensions), moderator note. Stored as JSON string for database compatibility.","nullable":true},{"name":"read_status","type":"boolean","description":"Whether recipient has read this notification. True if read, false if unread. Defaults to false. Updated when user views notification.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when notification was created (ISO 8601 UTC). System-managed, never updated. Used for chronological ordering and pagination.","nullable":false},{"name":"read_at","type":"datetime","description":"Timestamp when notification was marked as read by recipient (ISO 8601 UTC). Nullable if notification not yet read. Set to current timestamp when user views notification.","nullable":true},{"name":"deleted_at","type":"datetime","description":"Timestamp when notification was deleted by user (ISO 8601 UTC). Nullable if notification not deleted. Uses soft delete pattern - notification preserved in database for audit trail but excluded from user-facing queries.","nullable":true},{"name":"is_deleted","type":"boolean","description":"Whether this notification has been soft-deleted by the user. True if deleted, false if active. Used for filtering out deleted notifications from queries. Defaults to false.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["recipient_id","created_at"]},{"fieldNames":["recipient_id","read_status"]},{"fieldNames":["notification_type"]},{"fieldNames":["related_content_id","related_content_type"]},{"fieldNames":["trigger_user_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"notification_message"}]},{"name":"community_platform_notification_preferences","description":"User-specific notification settings controlling what types of notifications are sent and how they are delivered. One preferences record per user managing their complete notification configuration including toggles, delivery methods, quiet hours, and per-community settings.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key"},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who owns these notification preferences. Foreign key to {@link community_platform_users.id}. One preferences record per user with unique constraint.","relation":{"name":"user","targetModel":"community_platform_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"reply_notifications_enabled","type":"boolean","description":"Whether user receives notifications for replies to their posts and comments. Default: true. When disabled, no reply notifications are sent.","nullable":false},{"name":"mention_notifications_enabled","type":"boolean","description":"Whether user receives notifications when mentioned with @username. Default: true. When disabled, mentions do not trigger notifications.","nullable":false},{"name":"follow_notifications_enabled","type":"boolean","description":"Whether user receives notifications when someone follows them. Default: false. When disabled, follow actions are silent.","nullable":false},{"name":"moderator_action_notifications_enabled","type":"boolean","description":"Whether user receives notifications about moderator actions (post removal, warnings, suspensions). Default: true. Critical for user awareness of violations.","nullable":false},{"name":"community_post_notifications_enabled","type":"boolean","description":"Whether user receives notifications for new posts in subscribed communities. Default: false. When enabled, users get notified about new posts they care about.","nullable":false},{"name":"upvote_notifications_enabled","type":"boolean","description":"Whether user receives notifications when their posts/comments receive upvotes. Default: false. Milestone notifications (10, 100, 1000 upvotes) sent separately.","nullable":false},{"name":"milestone_notifications_enabled","type":"boolean","description":"Whether user receives achievement notifications for milestones (1000 karma, 10000 karma, etc.). Default: false. Motivational notifications about achievements.","nullable":false},{"name":"delivery_method","type":"string","description":"Primary delivery method for notifications (in_app, email, web_push). Enum values: in_app (notifications appear in platform inbox), email (sent via email), web_push (browser push notifications). In-app is always available and cannot be disabled.","nullable":false},{"name":"email_delivery_enabled","type":"boolean","description":"Whether email notifications are enabled as delivery method. Default: false. Independent toggle for email delivery.","nullable":false},{"name":"web_push_delivery_enabled","type":"boolean","description":"Whether web push notifications are enabled. Default: false. Requires browser permission. Independent toggle for push delivery.","nullable":false},{"name":"notification_frequency","type":"string","description":"How often notifications are batched for delivery (instant, hourly_digest, daily_digest, none). Enum values: instant (immediate), hourly_digest (batched hourly), daily_digest (batched daily), none (no notifications except critical). Affects when notifications are actually delivered.","nullable":false},{"name":"quiet_hours_enabled","type":"boolean","description":"Whether quiet hours are active. When true, notifications are suppressed during quiet_hours_start to quiet_hours_end times. Default: false. Respects user's requested silent periods.","nullable":false},{"name":"quiet_hours_start","type":"string","description":"Start time for quiet hours in HH:MM 24-hour format (e.g., '22:00' for 10 PM). Notifications not sent after this time. Nullable if quiet hours disabled.","nullable":true},{"name":"quiet_hours_end","type":"string","description":"End time for quiet hours in HH:MM 24-hour format (e.g., '08:00' for 8 AM). Notifications resume after this time. Nullable if quiet hours disabled. Can wrap midnight (e.g., 22:00 to 08:00).","nullable":true},{"name":"timezone","type":"string","description":"User's timezone (e.g., 'America/New_York', 'Europe/London', 'Asia/Tokyo'). Used for calculating quiet hours and digest send times in user's local timezone. Defaults to UTC if not set.","nullable":true},{"name":"upvote_threshold","type":"int","description":"Minimum upvotes required to trigger upvote notification (e.g., 10, 100, 1000). Only notify after threshold reached. Reduces notification spam. Default: 10 for standard thresholds.","nullable":true},{"name":"per_community_settings","type":"string","description":"JSON object storing per-community notification customization. Structure: {community_id: {enabled: boolean, frequency: string}}. Allows disabling notifications for specific communities while keeping them enabled globally. Stored as JSON string.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when preferences record was created (ISO 8601 UTC). Set when user account created or first preferences configured.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when preferences were last updated (ISO 8601 UTC). Updated whenever user changes any notification settings.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]}],"ginIndexes":[]},{"name":"community_platform_notification_delivery_logs","description":"Audit trail of notification delivery attempts tracking when each notification was delivered, how it was delivered, and the status of delivery. Records each delivery attempt for every notification with method and status for debugging failed deliveries and retry logic.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key"},"foreignFields":[{"name":"notification_id","type":"uuid","description":"Notification that was delivered. Foreign key to {@link community_platform_notifications.id}. Multiple delivery log entries can exist for same notification (retries).","relation":{"name":"notification","targetModel":"community_platform_notifications"},"unique":false,"nullable":false}],"plainFields":[{"name":"delivery_method","type":"string","description":"Method used to deliver this notification (in_app, email, web_push). Enum values: in_app (added to notification inbox), email (sent via email service), web_push (sent via push notification service). Shows which channel was used.","nullable":false},{"name":"delivery_status","type":"string","description":"Current status of delivery attempt (pending, delivered, failed, bounced). Enum values: pending (queued, not yet delivered), delivered (successfully delivered), failed (delivery failed, will retry), bounced (email bounced, won't retry). Tracks delivery state.","nullable":false},{"name":"attempt_number","type":"int","description":"Retry attempt number (1 = first attempt, 2 = first retry, etc.). Tracks which attempt this is for the same notification. Used for exponential backoff retry logic.","nullable":false},{"name":"attempted_at","type":"datetime","description":"Timestamp when this delivery attempt was made (ISO 8601 UTC). Used for tracking when retry should occur and for display in audit logs.","nullable":false},{"name":"delivered_at","type":"datetime","description":"Timestamp when notification was successfully delivered (ISO 8601 UTC). Nullable if delivery failed or still pending. Shows confirmation of successful delivery.","nullable":true},{"name":"error_message","type":"string","description":"Error message if delivery failed (max 500 characters). Contains reason for failure (email bounced, service unavailable, invalid token, etc.). Nullable if delivery succeeded.","nullable":true},{"name":"retry_count","type":"int","description":"Number of retry attempts made or planned. Used for exponential backoff (retry 1s, 2s, 4s, etc.). Maximum 3 retries before giving up. Tracks total retry history.","nullable":false},{"name":"next_retry_at","type":"datetime","description":"Scheduled timestamp for next retry attempt (ISO 8601 UTC). Null if no retry planned. Used by background job to determine when to retry.","nullable":true},{"name":"delivery_provider","type":"string","description":"External service used for delivery (e.g., 'sendgrid' for email, 'firebase' for push, 'internal' for in-app). Helps track which provider handled delivery and debug provider-specific issues.","nullable":true},{"name":"provider_response","type":"string","description":"Raw response from delivery provider for debugging (max 1000 characters). Contains provider's status message or error details. Useful for investigating failures with provider.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when delivery log entry was created (ISO 8601 UTC). Records when attempt was logged. Used for audit trail ordering.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["notification_id"]},{"fieldNames":["delivery_status"]},{"fieldNames":["attempted_at"]},{"fieldNames":["delivery_method"]},{"fieldNames":["next_retry_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"error_message"}]}]},{"filename":"schema-09-moderation.prisma","namespace":"Moderation","models":[{"name":"community_platform_reports","description":"Content reporting system for community safety. Users submit reports when they encounter content violating platform policies or community rules. Reports track reporter identity, reported content (post/comment), reason, and moderation status throughout the review workflow.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reporter_id","type":"uuid","description":"User who submitted the report. {@link community_platform_users.id}","relation":{"name":"reporter","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"reported_content_id","type":"uuid","description":"ID of post or comment being reported. Can reference either posts or comments table depending on content_type field.","relation":{"name":"reportedContent","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where reported content exists. {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true}],"plainFields":[{"name":"content_type","type":"string","description":"Type of content being reported: 'post' or 'comment'","nullable":false},{"name":"report_reason","type":"string","description":"Primary reason for reporting: spam, harassment, misinformation, hate_speech, violence, sexual_content, illegal_activity, ip_violation, community_rule, other","nullable":false},{"name":"reporter_details","type":"string","description":"Optional detailed explanation from reporter about why content is being reported (max 1000 characters)","nullable":true},{"name":"report_status","type":"string","description":"Current status of report: submitted, in_review, escalated, action_taken, dismissed, closed. Tracks report lifecycle.","nullable":false},{"name":"severity_level","type":"string","description":"Report severity classification: critical (CSAM, threats), high (hate speech, harassment), medium (spam, violations), low (borderline cases). Determines review priority.","nullable":false},{"name":"moderator_notes","type":"string","description":"Notes from moderator during review process about assessment, decision reasoning, or context considerations","nullable":true},{"name":"appeal_submitted","type":"boolean","description":"Whether an appeal has been submitted for this report decision","nullable":false},{"name":"created_at","type":"datetime","description":"When report was submitted (UTC timestamp)","nullable":false},{"name":"first_review_at","type":"datetime","description":"When moderator first claimed report for review","nullable":true},{"name":"resolved_at","type":"datetime","description":"When report received final resolution (action taken or dismissed)","nullable":true},{"name":"closed_at","type":"datetime","description":"When report was closed with final status","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["reporter_id","created_at"]},{"fieldNames":["reported_content_id","content_type"]},{"fieldNames":["community_id","report_status"]},{"fieldNames":["report_status","created_at"]},{"fieldNames":["severity_level","report_status"]}],"ginIndexes":[{"fieldName":"reporter_details"},{"fieldName":"moderator_notes"}]},{"name":"community_platform_moderation_actions","description":"Records of all moderation actions taken by moderators and administrators. Tracks what action was taken (remove content, warn user, suspend, ban), by whom, when, and the reason. Enables audit trail and appeals process. Actions are reviewed to ensure consistency and prevent abuse.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"report_id","type":"uuid","description":"Report that triggered this action. {@link community_platform_reports.id}","relation":{"name":"report","targetModel":"community_platform_reports"},"unique":false,"nullable":true},{"name":"moderator_id","type":"uuid","description":"User who performed the moderation action. {@link community_platform_users.id}","relation":{"name":"moderator","targetModel":"community_platform_users","mappingName":"community_platform_moderation_actions_of_moderator_id"},"unique":false,"nullable":false},{"name":"affected_user_id","type":"uuid","description":"User affected by moderation action (content creator, warned user, banned user). {@link community_platform_users.id}","relation":{"name":"affectedUser","targetModel":"community_platform_users","mappingName":"community_platform_moderation_actions_of_affected_user_id"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where action was taken. {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true},{"name":"content_id","type":"uuid","description":"ID of post or comment that was actioned (removed, warned, etc.). References post or comment depending on content_type.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":true}],"plainFields":[{"name":"action_type","type":"string","description":"Type of moderation action taken: remove_content, warn_user, suspend_user, ban_user, lock_thread, pin_post, add_warning_label, restore_content","nullable":false},{"name":"content_type","type":"string","description":"Type of content actioned: 'post', 'comment', or 'user' (for account-level actions)","nullable":false},{"name":"action_reason","type":"string","description":"Why action was taken: specific policy or rule violated. Examples: 'spam', 'harassment', 'misinformation', 'hate_speech'","nullable":false},{"name":"action_details","type":"string","description":"Additional context about the action: removal reason for removed content, warning text for warnings, suspension duration in hours for suspensions","nullable":true},{"name":"moderator_notes","type":"string","description":"Internal moderator notes documenting decision reasoning and any mitigating circumstances considered","nullable":true},{"name":"suspension_duration_hours","type":"int","description":"For temporary suspensions: hours until user can post again. NULL for permanent bans or non-suspension actions.","nullable":true},{"name":"action_status","type":"string","description":"Current status of action: active, reversed, expired (for time-limited actions). Tracks whether action is still in effect.","nullable":false},{"name":"created_at","type":"datetime","description":"When moderation action was taken (UTC timestamp)","nullable":false},{"name":"expires_at","type":"datetime","description":"When time-limited action expires (for temporary suspensions). NULL for permanent actions.","nullable":true},{"name":"reversed_at","type":"datetime","description":"When action was reversed or overturned (due to appeal or admin review). NULL if action never reversed.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["report_id"]},{"fieldNames":["moderator_id","created_at"]},{"fieldNames":["affected_user_id","action_type"]},{"fieldNames":["community_id","action_type"]},{"fieldNames":["action_status","created_at"]},{"fieldNames":["content_id","content_type"]}],"ginIndexes":[{"fieldName":"action_details"},{"fieldName":"moderator_notes"}]},{"name":"community_platform_content_removals","description":"Details of removed content (posts and comments). Stores original content that was removed by moderators, reason for removal, removing moderator, and restoration capability. Enables audit trail, appeals process, and content recovery if removal was in error.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"moderation_action_id","type":"uuid","description":"Associated moderation action that caused removal. {@link community_platform_moderation_actions.id}","relation":{"name":"moderationAction","targetModel":"community_platform_moderation_actions"},"unique":true,"nullable":false},{"name":"content_id","type":"uuid","description":"ID of removed post or comment. References either posts or comments table depending on content_type.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community containing removed content. {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true},{"name":"moderator_id","type":"uuid","description":"Moderator who removed the content. {@link community_platform_users.id}","relation":{"name":"moderator","targetModel":"community_platform_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"content_type","type":"string","description":"Type of removed content: 'post' or 'comment'","nullable":false},{"name":"original_content","type":"string","description":"Full original text of removed content (preserved for audit and potential restoration)","nullable":false},{"name":"removal_reason","type":"string","description":"Why content was removed: policy violation category (spam, harassment, misinformation, hate_speech, etc.)","nullable":false},{"name":"removal_notes","type":"string","description":"Detailed explanation from moderator about why removal was necessary and policy cited","nullable":true},{"name":"removal_status","type":"string","description":"Current status: removed (hidden from public), restored (made visible again), or permanently_deleted (hard delete after appeal period)","nullable":false},{"name":"is_appealed","type":"boolean","description":"Whether content author has appealed this removal decision","nullable":false},{"name":"created_at","type":"datetime","description":"When content was removed (UTC timestamp)","nullable":false},{"name":"restored_at","type":"datetime","description":"When content was restored (if appealed and removal was overturned). NULL if never restored.","nullable":true}],"uniqueIndexes":[{"fieldNames":["moderation_action_id"],"unique":true}],"plainIndexes":[{"fieldNames":["content_id","content_type"]},{"fieldNames":["moderator_id","created_at"]},{"fieldNames":["community_id","removal_status"]},{"fieldNames":["removal_status","created_at"]}],"ginIndexes":[{"fieldName":"original_content"},{"fieldName":"removal_notes"}]},{"name":"community_platform_user_warnings","description":"Official warnings issued to users for policy violations. Tracks warnings progressively: accumulation of warnings can lead to temporary restrictions, suspensions, or permanent bans. Warnings age out after 6 months unless new violations occur. Enables progressive discipline and user behavior tracking.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User who received the warning. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users","mappingName":"community_platform_user_warnings_of_user_id"},"unique":false,"nullable":false},{"name":"moderator_id","type":"uuid","description":"Moderator who issued the warning. {@link community_platform_users.id}","relation":{"name":"moderator","targetModel":"community_platform_users","mappingName":"community_platform_user_warnings_of_moderator_id"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Community where violation occurred (for community-specific warnings). NULL for platform-wide warnings. {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true},{"name":"related_content_id","type":"uuid","description":"Post or comment that prompted the warning. References either posts or comments depending on content_type.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":true}],"plainFields":[{"name":"content_type","type":"string","description":"Type of content that prompted warning: 'post', 'comment', or 'user' (for account-level behavior)","nullable":true},{"name":"violation_reason","type":"string","description":"Reason for warning: policy or rule violated. Examples: 'spam', 'harassment', 'misinformation', 'community_rule_violation'","nullable":false},{"name":"warning_text","type":"string","description":"Detailed explanation of what policy was violated and why warning was issued","nullable":false},{"name":"warning_scope","type":"string","description":"Whether warning applies to: 'community' (single community only) or 'platform' (entire platform)","nullable":false},{"name":"is_active","type":"boolean","description":"Whether warning is currently active. Warnings age out after 6 months (set to false) unless additional violations occur.","nullable":false},{"name":"appeal_submitted","type":"boolean","description":"Whether user has submitted an appeal of this warning","nullable":false},{"name":"created_at","type":"datetime","description":"When warning was issued (UTC timestamp)","nullable":false},{"name":"expires_at","type":"datetime","description":"When warning expires (ages out after 6 months). After this date, warning is considered inactive for discipline purposes.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id","created_at"]},{"fieldNames":["moderator_id","created_at"]},{"fieldNames":["user_id","is_active"]},{"fieldNames":["community_id","user_id"]},{"fieldNames":["warning_scope","created_at"]}],"ginIndexes":[{"fieldName":"violation_reason"},{"fieldName":"warning_text"}]},{"name":"community_platform_moderation_appeals","description":"Appeals submitted by users to contest moderation decisions (removed content, warnings, suspensions, bans). Tracks appeal submission, evidence provided, reviewer decision, and outcome. Enables fair review process and reversal of incorrect moderation actions.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"appellant_id","type":"uuid","description":"User appealing the decision. {@link community_platform_users.id}","relation":{"name":"appellant","targetModel":"community_platform_users","mappingName":"community_platform_moderation_appeals_of_appellant_id"},"unique":false,"nullable":false},{"name":"original_action_id","type":"uuid","description":"Moderation action being appealed. {@link community_platform_moderation_actions.id}","relation":{"name":"originalAction","targetModel":"community_platform_moderation_actions"},"unique":false,"nullable":true},{"name":"original_warning_id","type":"uuid","description":"User warning being appealed. {@link community_platform_user_warnings.id}","relation":{"name":"originalWarning","targetModel":"community_platform_user_warnings"},"unique":false,"nullable":true},{"name":"original_removal_id","type":"uuid","description":"Content removal being appealed. {@link community_platform_content_removals.id}","relation":{"name":"originalRemoval","targetModel":"community_platform_content_removals"},"unique":false,"nullable":true},{"name":"appeal_reviewer_id","type":"uuid","description":"Moderator or admin who reviewed the appeal (different from original moderator). {@link community_platform_users.id}","relation":{"name":"reviewedBy","targetModel":"community_platform_users","mappingName":"community_platform_moderation_appeals_of_appeal_reviewer_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"appeal_grounds","type":"string","description":"Reason for appeal: moderator_error, policy_misinterpretation, insufficient_context, new_evidence, unfair_bias, other","nullable":false},{"name":"appeal_explanation","type":"string","description":"Appellant's detailed explanation of why decision should be overturned (max 1000 characters)","nullable":false},{"name":"appeal_evidence","type":"string","description":"New evidence or documentation provided by appellant to support appeal (URLs, context, clarifications)","nullable":true},{"name":"appeal_status","type":"string","description":"Current status of appeal: submitted (awaiting review), under_review, accepted (decision reversed), denied (decision upheld), closed","nullable":false},{"name":"appeal_decision","type":"string","description":"Decision on appeal: accepted (reverse original action), denied (uphold original action), or null if not yet reviewed","nullable":true},{"name":"appeal_decision_reason","type":"string","description":"Explanation from appeal reviewer about why appeal was accepted or denied","nullable":true},{"name":"created_at","type":"datetime","description":"When appeal was submitted (UTC timestamp)","nullable":false},{"name":"reviewed_at","type":"datetime","description":"When appeal was reviewed and decision made. NULL if not yet reviewed.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["appellant_id","created_at"]},{"fieldNames":["appeal_reviewer_id","reviewed_at"]},{"fieldNames":["original_action_id"]},{"fieldNames":["appeal_status","created_at"]},{"fieldNames":["appeal_decision","reviewed_at"]}],"ginIndexes":[{"fieldName":"appeal_explanation"},{"fieldName":"appeal_decision_reason"},{"fieldName":"appeal_evidence"}]},{"name":"community_platform_moderation_audit_log","description":"Complete immutable audit log of all moderation system activities for accountability and transparency. Tracks every action, decision, appeal, status change with timestamps and actor. Enables pattern detection, moderator performance review, and policy enforcement verification. Critical for legal compliance and dispute resolution.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"actor_id","type":"uuid","description":"User who performed the logged action (moderator, admin, or system). {@link community_platform_users.id}","relation":{"name":"actor","targetModel":"community_platform_users"},"unique":false,"nullable":true},{"name":"report_id","type":"uuid","description":"Report involved in this log entry (if applicable). {@link community_platform_reports.id}","relation":{"name":"report","targetModel":"community_platform_reports"},"unique":false,"nullable":true},{"name":"moderation_action_id","type":"uuid","description":"Moderation action involved in this log entry (if applicable). {@link community_platform_moderation_actions.id}","relation":{"name":"moderationAction","targetModel":"community_platform_moderation_actions"},"unique":false,"nullable":true},{"name":"appeal_id","type":"uuid","description":"Appeal involved in this log entry (if applicable). {@link community_platform_moderation_appeals.id}","relation":{"name":"appeal","targetModel":"community_platform_moderation_appeals"},"unique":false,"nullable":true}],"plainFields":[{"name":"event_type","type":"string","description":"Type of moderation event: report_submitted, report_claimed, action_taken, appeal_submitted, appeal_reviewed, content_restored, warning_issued, user_suspended, etc.","nullable":false},{"name":"entity_type","type":"string","description":"Type of entity involved: report, action, warning, appeal, user, content","nullable":false},{"name":"entity_id","type":"uuid","description":"ID of primary entity involved in this event","nullable":false},{"name":"action_description","type":"string","description":"Human-readable description of what happened: 'Report #123 submitted by user', 'Moderator removed post #456', etc.","nullable":false},{"name":"status_before","type":"string","description":"Status of entity before this action (for state changes)","nullable":true},{"name":"status_after","type":"string","description":"Status of entity after this action (for state changes)","nullable":true},{"name":"metadata","type":"string","description":"Additional context stored as JSON: {moderator_id, content_id, reason, duration, etc}","nullable":true},{"name":"ip_address","type":"string","description":"IP address of user performing action (for audit trail security)","nullable":true},{"name":"created_at","type":"datetime","description":"When event was logged (UTC timestamp, immutable)","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["actor_id","created_at"]},{"fieldNames":["report_id","event_type"]},{"fieldNames":["moderation_action_id"]},{"fieldNames":["appeal_id"]},{"fieldNames":["entity_type","entity_id","created_at"]},{"fieldNames":["event_type","created_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"action_description"},{"fieldName":"metadata"}]}]},{"filename":"schema-10-analytics.prisma","namespace":"Analytics","models":[{"name":"community_platform_user_statistics","description":"Aggregated user statistics for dashboard and profile display. Contains denormalized metrics (total posts, comments, karma, followers) calculated from operational data. Updated periodically (hourly or daily) via background jobs to avoid transactional impact. Enables rapid statistics access without expensive aggregations on every profile view.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"Reference to the user whose statistics are tracked. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"total_posts_created","type":"int","description":"Total number of posts created by this user across all communities (lifetime count). Updated when posts are created or deleted.","nullable":false},{"name":"total_comments_posted","type":"int","description":"Total number of comments posted by this user across all posts (lifetime count). Updated when comments are created or deleted.","nullable":false},{"name":"total_karma_points","type":"int","description":"Total cumulative karma score from all posts and comments. Can be negative. Matches sum of upvotes minus downvotes on all user content.","nullable":false},{"name":"followers_count","type":"int","description":"Total number of users following this user. Derived from community_platform_user_follows table where following_user_id = this user.","nullable":false},{"name":"following_count","type":"int","description":"Total number of users this user is following. Derived from community_platform_user_follows table where follower_user_id = this user.","nullable":false},{"name":"communities_subscribed_count","type":"int","description":"Total number of communities this user has subscribed to. Derived from community_platform_community_subscriptions.","nullable":false},{"name":"communities_moderated_count","type":"int","description":"Total number of communities this user is a moderator for. Derived from community_platform_moderators.","nullable":false},{"name":"post_karma","type":"int","description":"Karma earned specifically from posts (sum of net votes on posts). Subset of total_karma_points.","nullable":false},{"name":"comment_karma","type":"int","description":"Karma earned specifically from comments (sum of net votes on comments). Subset of total_karma_points.","nullable":false},{"name":"monthly_posts_count","type":"int","description":"Number of posts created in the last 30 days. Used for activity trending.","nullable":false},{"name":"monthly_comments_count","type":"int","description":"Number of comments posted in the last 30 days. Used for activity trending.","nullable":false},{"name":"monthly_karma_earned","type":"int","description":"Net karma earned in the last 30 days (can be negative). Shows recent engagement quality.","nullable":false},{"name":"weekly_posts_count","type":"int","description":"Number of posts created in the last 7 days. Used for short-term activity assessment.","nullable":false},{"name":"weekly_comments_count","type":"int","description":"Number of comments posted in the last 7 days. Used for short-term activity assessment.","nullable":false},{"name":"average_karma_per_post","type":"double","description":"Average net karma earned per post (total_post_karma / total_posts_created). Indicates post quality. 0 if no posts.","nullable":false},{"name":"average_karma_per_comment","type":"double","description":"Average net karma earned per comment (total_comment_karma / total_comments_posted). Indicates comment quality. 0 if no comments.","nullable":false},{"name":"engagement_rate","type":"double","description":"Percentage of views that result in interactions (votes, comments). Ranges 0-100. Calculated as (interactions / total_views) * 100.","nullable":false},{"name":"last_active_at","type":"datetime","description":"Timestamp of user's most recent activity (post, comment, vote, login). Used for activity status indication.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when statistics record was first created (matches user account creation).","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last statistics update. Updated by background jobs that recalculate metrics (hourly or daily).","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["total_karma_points"]},{"fieldNames":["last_active_at"]},{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]}],"ginIndexes":[]},{"name":"community_platform_activity_timeline","description":"Chronological log of user activities for activity feed and timeline display. Append-only pattern where new records are added but rarely modified or deleted. Tracks user actions (posts, comments, votes, follows, subscriptions) with full context. Optimized for displaying user activity history on profiles and in notification systems.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"User who performed the action. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users","mappingName":"community_platform_activity_timeline_of_community_plat_1638122b"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"Community where action occurred (if applicable). Null if action is not community-specific. {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true},{"name":"related_user_id","type":"uuid","description":"Other user involved in action if applicable (e.g., followed user in follow action, mentioned user in mention action). Null if action only involves self. {@link community_platform_users.id}","relation":{"name":"relatedUser","targetModel":"community_platform_users","mappingName":"community_platform_activity_timeline_of_related_user_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"activity_type","type":"string","description":"Type of activity: 'post_created', 'comment_posted', 'comment_reply', 'post_voted', 'comment_voted', 'user_followed', 'community_subscribed', 'community_moderated', 'post_edited', 'comment_edited'. Used for filtering and categorizing activities.","nullable":false},{"name":"content_id","type":"uuid","description":"ID of the content involved (post or comment ID). Null if activity doesn't involve specific content (e.g., follow action).","nullable":true},{"name":"content_type","type":"string","description":"Type of content: 'post' or 'comment'. Null if activity doesn't involve specific content.","nullable":true},{"name":"activity_data","type":"string","description":"JSON object containing activity-specific metadata: for posts (title, first 100 chars of body), for comments (first 100 chars), for votes (vote_type: 'upvote'/'downvote'), for follows (followed_user_username). Enables rich activity display without additional queries.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when activity occurred (ISO 8601 UTC). Immutable after creation. Used for chronological ordering and historical analysis.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_user_id","created_at"]},{"fieldNames":["community_platform_community_id","created_at"]},{"fieldNames":["activity_type","created_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_engagement_statistics","description":"Aggregated engagement metrics for communities and time periods. Tracks engagement rates, participation patterns, and interaction quality. Used by discovery and recommendation systems to identify trending content and engaging communities. Updated periodically (every hour or daily) from vote and interaction data. Enables efficient trending queries without scanning millions of votes.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_community_id","type":"uuid","description":"Community these engagement statistics apply to. {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"time_period","type":"string","description":"Time period for this aggregation: 'hourly', 'daily', 'weekly', 'monthly', 'all_time'. Used to track trends across different time horizons.","nullable":false},{"name":"period_start_at","type":"datetime","description":"Start timestamp of the time period covered by these statistics (ISO 8601 UTC). For 'all_time', this is community creation timestamp.","nullable":false},{"name":"period_end_at","type":"datetime","description":"End timestamp of the time period covered by these statistics (ISO 8601 UTC). For 'all_time', this is null.","nullable":true},{"name":"total_posts_in_period","type":"int","description":"Total posts created in community during this period. Used for growth trending.","nullable":false},{"name":"total_comments_in_period","type":"int","description":"Total comments posted in community during this period. Used for discussion activity metrics.","nullable":false},{"name":"total_votes_in_period","type":"int","description":"Total votes (upvotes + downvotes) cast on posts and comments in community during period. Measures participation.","nullable":false},{"name":"total_upvotes_in_period","type":"int","description":"Total upvotes in community during period. Indicates approval/positive sentiment.","nullable":false},{"name":"total_downvotes_in_period","type":"int","description":"Total downvotes in community during period. Indicates disapproval/disagreement.","nullable":false},{"name":"unique_posters_count","type":"int","description":"Number of unique users who posted in community during period. Indicates community participation breadth.","nullable":false},{"name":"unique_commenters_count","type":"int","description":"Number of unique users who commented in community during period. Shows discussion participation.","nullable":false},{"name":"unique_voters_count","type":"int","description":"Number of unique users who voted during period. Shows engagement participation.","nullable":false},{"name":"post_engagement_rate","type":"double","description":"Percentage of posts that received engagement (comments or votes): (posts_with_engagement / total_posts) * 100. Ranges 0-100. Indicates post quality and relevance.","nullable":false},{"name":"comment_engagement_rate","type":"double","description":"Percentage of comments that received votes: (voted_comments / total_comments) * 100. Ranges 0-100. Shows comment quality.","nullable":false},{"name":"vote_participation_rate","type":"double","description":"Percentage of community members who voted during period: (unique_voters / total_members) * 100. Ranges 0-100. High rates indicate engaged community.","nullable":false},{"name":"average_replies_per_post","type":"double","description":"Average number of comments per post in period. Shows discussion depth. 0 if no posts.","nullable":false},{"name":"average_upvote_ratio","type":"double","description":"Average upvote to total vote ratio: upvotes / (upvotes + downvotes). Ranges 0-1. Indicates community sentiment positivity.","nullable":false},{"name":"new_subscribers_count","type":"int","description":"Number of new community subscriptions during period. Shows community growth.","nullable":false},{"name":"growth_rate","type":"double","description":"Subscriber growth rate in period: (new_subscribers / total_subscribers_at_period_start) * 100. Used for trending calculation.","nullable":false},{"name":"trending_score","type":"double","description":"Calculated trending score combining growth rate, engagement rate, and post velocity. Higher = more trending. Used for community recommendations.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when statistics record was created. Immutable.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last update. Updated only when new period completes or recalculation needed.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_community_id","time_period","period_start_at"],"unique":true}],"plainIndexes":[{"fieldNames":["time_period","period_end_at"]},{"fieldNames":["trending_score"]},{"fieldNames":["growth_rate"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_platform_content_statistics","description":"Performance metrics for individual posts and comments. Tracks views, engagement, and algorithmic scores (hot, top, controversial). Denormalized from votes and view data for efficient sorting and discovery. Updated as content receives votes or views. Enables ranking without recalculating scores on every query.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"content_id","type":"uuid","description":"ID of the post or comment these statistics apply to. Non-nullable. References either community_platform_posts or community_platform_comments.","nullable":false},{"name":"content_type","type":"string","description":"Type of content: 'post' or 'comment'. Indicates which table content_id references.","nullable":false},{"name":"total_views","type":"int","description":"Total number of times this content has been viewed by unique users. Incremented when content detail page is loaded.","nullable":false},{"name":"views_last_24h","type":"int","description":"Number of views in last 24 hours. Used for trending and velocity calculation.","nullable":false},{"name":"views_last_7d","type":"int","description":"Number of views in last 7 days. Shows content longevity and continued interest.","nullable":false},{"name":"total_upvotes","type":"int","description":"Total upvotes received. Core metric for ranking and recommendation.","nullable":false},{"name":"total_downvotes","type":"int","description":"Total downvotes received. Indicates disapproval or low quality.","nullable":false},{"name":"net_votes","type":"int","description":"Calculated: upvotes - downvotes. Primary ranking metric for top and controversial sorts.","nullable":false},{"name":"upvote_ratio","type":"double","description":"Ratio of upvotes to total votes: upvotes / (upvotes + downvotes). Ranges 0-1. Shows community sentiment.","nullable":false},{"name":"total_comments","type":"int","description":"Total number of comments/replies on this content. Shows discussion activity.","nullable":false},{"name":"comments_last_24h","type":"int","description":"Number of new comments in last 24 hours. Shows ongoing engagement.","nullable":false},{"name":"hot_score","type":"double","description":"Cached hot algorithm score: (net_votes / hours_old^1.8) * engagement_multiplier. Used for ranking in hot sort without recalculation.","nullable":false},{"name":"controversial_score","type":"double","description":"Cached controversial algorithm score: min(upvotes, downvotes) * 2 + abs(upvotes - downvotes). High when votes are polarized.","nullable":false},{"name":"engagement_count","type":"int","description":"Total engagement: upvotes + downvotes + comments. Measures total interaction.","nullable":false},{"name":"engagement_velocity","type":"double","description":"Engagement per hour since creation: engagement_count / hours_since_creation. High velocity indicates trending/viral potential.","nullable":false},{"name":"report_count","type":"int","description":"Number of reports filed on this content. Indicates potential violations or quality issues.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when statistics record was created (typically matches content creation).","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last statistics update. Updated when votes, views, or comments change.","nullable":false}],"uniqueIndexes":[{"fieldNames":["content_id"],"unique":true}],"plainIndexes":[{"fieldNames":["content_type","created_at"]},{"fieldNames":["hot_score"]},{"fieldNames":["net_votes"]},{"fieldNames":["controversial_score"]},{"fieldNames":["engagement_velocity"]},{"fieldNames":["total_views"]},{"fieldNames":["updated_at"]}],"ginIndexes":[]},{"name":"community_platform_user_engagement_events","description":"Detailed event log for analytics and BI system integration. Immutable append-only event records tracking user interactions (posts, votes, comments, follows, subscriptions). Each row represents a single user action. Designed for data warehouse ingestion, historical analysis, and trending detection. Never updated or deleted (except hard delete for GDPR). Enables replaying user activity timeline and computing custom analytics metrics.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"User who performed the engagement action. {@link community_platform_users.id}","relation":{"name":"user","targetModel":"community_platform_users"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"Community where engagement occurred (if applicable). Null for user actions that aren't community-specific (e.g., user follow). {@link community_platform_communities.id}","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":true}],"plainFields":[{"name":"event_type","type":"string","description":"Type of engagement event: 'post_created', 'comment_posted', 'post_upvoted', 'post_downvoted', 'comment_upvoted', 'comment_downvoted', 'user_followed', 'community_subscribed', 'mention_sent', 'report_submitted', 'content_viewed'. Used for filtering and categorizing events.","nullable":false},{"name":"content_id","type":"uuid","description":"ID of content involved (post or comment). Null if event doesn't involve specific content.","nullable":true},{"name":"content_type","type":"string","description":"Type of content: 'post', 'comment', or null if not applicable.","nullable":true},{"name":"related_user_id","type":"uuid","description":"ID of other user involved in event (e.g., followed user in follow event, mentioned user in mention event). Null if only one user involved. {@link community_platform_users.id}","nullable":true},{"name":"event_value","type":"int","description":"Numeric value associated with event if applicable. For votes: 1 (upvote) or -1 (downvote). For views: 1 per view. For karma changes: actual karma delta. 0 or null if not applicable.","nullable":true},{"name":"event_metadata","type":"string","description":"JSON object containing additional context: for posts (title, preview), for votes (vote_type), for follows (followed_username), for reports (report_reason). Enables rich event analysis without additional queries.","nullable":true},{"name":"user_ip_address","type":"string","description":"IP address of user when event occurred. Used for fraud detection and user behavior analysis. Masked for privacy (last octet zero).","nullable":true},{"name":"event_timestamp","type":"datetime","description":"Exact timestamp when engagement event occurred (ISO 8601 UTC). Immutable. Used for precise event ordering and time-series analysis.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when event record was created in database (may be shortly after event_timestamp). Immutable.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_platform_user_id","event_timestamp"]},{"fieldNames":["event_type","event_timestamp"]},{"fieldNames":["community_platform_community_id","event_timestamp"]},{"fieldNames":["event_timestamp"]},{"fieldNames":["content_type","content_id"]}],"ginIndexes":[]}]}]}