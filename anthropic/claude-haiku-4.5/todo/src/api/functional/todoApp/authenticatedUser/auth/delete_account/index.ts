import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAuthenticatedUser } from "../../../../../structures/ITodoAppAuthenticatedUser";

/**
 * Delete authenticated user account and associated todos with 30-day recovery
 * period.
 *
 * Permanently delete the authenticated user's account and all associated todo
 * data from the application. This operation implements soft delete with a
 * 30-day recovery window before permanent data purge.
 *
 * WHEN an authenticated user submits an account deletion request, THE system
 * SHALL verify the user's identity and require explicit confirmation. THE
 * system SHALL mark the user account as deleted by setting the deleted_at
 * timestamp to the current UTC time. The user's email address is released and
 * can be registered by other users immediately, while the account data itself
 * remains in the database for 30 days allowing restoration.
 *
 * During the 30-day recovery period, deleted users cannot log in, and their
 * todos are not visible in normal application operations. However, users can
 * restore their complete account including all todos through a recovery link
 * sent to their registered email address. After 30 days have elapsed, the
 * system SHALL automatically and permanently purge all account data, associated
 * todos, audit logs, and security events related to the deleted account.
 *
 * This operation has critical privacy and compliance implications. The system
 * SHALL create comprehensive audit logs documenting the deletion request, user
 * confirmation, deletion timestamp, and scheduled permanent purge date.
 * Security events are recorded to support regulatory compliance and
 * investigations. Users receive notification emails at deletion time and 25-day
 * warning emails before permanent purge if they haven't recovered their
 * account.
 *
 * The deletion affects multiple related entities: the user account itself, all
 * todos owned by the user, all security events and audit logs associated with
 * the user, and all session tokens. All references are properly cascaded to
 * maintain data integrity. Failed deletion attempts are logged and the user is
 * informed with recovery options.
 *
 * @param props.connection
 * @param props.body Account deletion confirmation with user authentication and
 *   explicit consent
 * @path /todoApp/authenticatedUser/auth/delete-account
 * @accessor api.functional.todoApp.authenticatedUser.auth.delete_account.deleteAccount
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function deleteAccount(
  connection: IConnection,
  props: deleteAccount.Props,
): Promise<deleteAccount.Response> {
  return true === connection.simulate
    ? deleteAccount.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...deleteAccount.METADATA,
          path: deleteAccount.path(),
          status: null,
        },
        props.body,
      );
}
export namespace deleteAccount {
  export type Props = {
    /**
     * Account deletion confirmation with user authentication and explicit
     * consent
     */
    body: ITodoAppAuthenticatedUser.IDeleteRequest;
  };
  export type Body = ITodoAppAuthenticatedUser.IDeleteRequest;
  export type Response = ITodoAppAuthenticatedUser.IDeleteResponse;

  export const METADATA = {
    method: "DELETE",
    path: "/todoApp/authenticatedUser/auth/delete-account",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/authenticatedUser/auth/delete-account";
  export const random = (): ITodoAppAuthenticatedUser.IDeleteResponse =>
    typia.random<ITodoAppAuthenticatedUser.IDeleteResponse>();
  export const simulate = (
    connection: IConnection,
    props: deleteAccount.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: deleteAccount.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
