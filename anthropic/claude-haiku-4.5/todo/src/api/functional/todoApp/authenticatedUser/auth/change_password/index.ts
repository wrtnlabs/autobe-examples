import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAuth } from "../../../../../structures/ITodoAppAuth";

/**
 * Change authenticated user's password with current password verification.
 *
 * This operation allows authenticated users to securely change their account
 * password by providing their current password and a new password. THE system
 * MUST verify that the user is authenticated through valid JWT token before
 * processing this request. If the user is not authenticated, THE system SHALL
 * return HTTP 401 Unauthorized with error code 'AUTH_NOT_AUTHENTICATED'.
 *
 * WHEN the change password request is received, THE system SHALL extract the
 * user's ID from the authenticated session/JWT token and retrieve the
 * corresponding user record from the todo_app_authenticateduser table. THE
 * system SHALL then validate the provided current password by hashing it using
 * the same algorithm and salt as the stored password hash, comparing the
 * computed hash to the stored hash_password field.
 *
 * IF the current password does not match the stored hash, THE system SHALL
 * reject the request with error 'AUTH_CURRENT_PASSWORD_INVALID: Current
 * password is incorrect. Please try again.' and return HTTP 401 status. THE
 * system SHALL NOT reveal whether the user exists or whether the password is
 * correct (generic error message).
 *
 * IF the current password is valid, THE system SHALL validate the new password
 * against security requirements: minimum 8 characters, maximum 128 characters,
 * includes at least one uppercase letter (A-Z), includes at least one lowercase
 * letter (a-z), includes at least one numeric digit (0-9), includes at least
 * one special character (!@#$%^&*). If new password fails validation, THE
 * system SHALL return HTTP 400 Bad Request with specific error message
 * indicating which requirement is not met.
 *
 * THE system SHALL also prevent password reuse by checking the last 5 passwords
 * used by this user. If the new password matches any of the last 5 passwords,
 * THE system SHALL reject with error 'AUTH_PASSWORD_REUSED: Cannot reuse a
 * recently used password. Please choose a different password.' THE system
 * maintains salted hashes of previous passwords for secure comparison.
 *
 * IF the new password passes all validation checks, THE system SHALL generate a
 * new cryptographically secure salt, hash the new password using bcrypt with
 * minimum 10 rounds or Argon2 with equivalent strength, and store the new
 * password hash in the password_hash field. THE system SHALL automatically
 * update the password_changed_at timestamp in the todo_app_authenticateduser
 * table to current UTC time.
 *
 * For security purposes, after successful password change, THE system SHALL
 * invalidate all existing JWT tokens issued to this user to force
 * re-authentication. This prevents compromise scenarios where an attacker with
 * an old token could continue accessing the account after password change. THE
 * system SHALL return HTTP 200 OK with confirmation message indicating the
 * password has been changed successfully and will need to re-authenticate.
 *
 * THE system SHALL log this password change event in the todo_app_audit_logs
 * table with action_type 'UPDATE', entity_type 'USER_ACCOUNT', actor_id set to
 * the user ID, and operation_status 'SUCCESS'. THE system SHALL record the
 * operation in todo_app_security_events table as 'PASSWORD_CHANGE' event with
 * severity_level 'MEDIUM' for security monitoring and compliance purposes.
 *
 * IF password change fails due to database errors, THE system SHALL return HTTP
 * 500 Server Error with generic message 'Unable to change password. Please try
 * again.' and log the error in todo_app_error_logs table for administrator
 * investigation. THE system SHALL NOT proceed with token invalidation if
 * password update fails.
 *
 * @param props.connection
 * @param props.body Current password for verification and new password meeting
 *   security requirements
 * @path /todoApp/authenticatedUser/auth/change-password
 * @accessor api.functional.todoApp.authenticatedUser.auth.change_password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /**
     * Current password for verification and new password meeting security
     * requirements
     */
    body: ITodoAppAuth.IChangePasswordRequest;
  };
  export type Body = ITodoAppAuth.IChangePasswordRequest;
  export type Response = ITodoAppAuth.IChangePasswordResponse;

  export const METADATA = {
    method: "POST",
    path: "/todoApp/authenticatedUser/auth/change-password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/authenticatedUser/auth/change-password";
  export const random = (): ITodoAppAuth.IChangePasswordResponse =>
    typia.random<ITodoAppAuth.IChangePasswordResponse>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
