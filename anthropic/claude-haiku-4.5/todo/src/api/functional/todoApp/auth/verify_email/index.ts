import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAuth } from "../../../../structures/ITodoAppAuth";

/**
 * Verify user email address with verification token to complete account
 * registration.
 *
 * This operation processes email verification for newly registered user
 * accounts. When a user completes registration, THE system SHALL send a
 * verification email containing a unique time-limited token. THE user clicks
 * the verification link containing this token and submits it through this
 * endpoint.
 *
 * WHEN a user submits a valid verification token, THE system SHALL:
 *
 * 1. Validate that the token format is correct and matches expected format (32+
 *    character Base64-encoded string)
 * 2. Check that the token has not expired (24 hours validity from generation)
 * 3. Verify that the token maps to an existing user account awaiting email
 *    verification
 * 4. Confirm the associated email address has not been verified previously
 * 5. Update the user's email_verified field to true in todo_app_authenticateduser
 * 6. Record the verification timestamp in email_verified_at (current UTC time)
 * 7. Invalidate/delete the token from external storage to prevent reuse
 * 8. Return success response enabling user to proceed to login
 *
 * WHEN validation fails, THE system SHALL display appropriate error message:
 *
 * - Invalid token format: "TODOAPP-VAL-009: Verification link is invalid or
 *   malformed. Please check the link and try again."
 * - Token expired: "TODOAPP-AUTH-005: Verification link has expired. Please
 *   request a new verification email from your account settings."
 * - Token does not exist or already used: "TODOAPP-AUTH-006: This verification
 *   link has already been used or is no longer valid. Please log in directly or
 *   request a new verification link."
 * - User account not found: "TODOAPP-AUTH-007: User account not found. Please
 *   register first."
 * - Email already verified: "TODOAPP-AUTH-008: This email has already been
 *   verified. You can log in directly."
 *
 * Email verification tokens are stored in external key-value store
 * (Redis/Memcached) or temporary token table
 * (todo_app_email_verification_tokens) with fields: token_hash, user_id,
 * email_address, token_expires_at. Tokens are cryptographically secure (minimum
 * 256-bit entropy), Base64 URL-safe encoded, and single-use. Upon successful
 * verification, the token is immediately deleted from storage.
 *
 * This email verification step is MANDATORY before users can log in and access
 * their todo list. This protects against invalid email addresses and confirms
 * the user controls the email account used for registration. Upon successful
 * verification, the user can immediately log in with their registered
 * credentials and begin managing their todos.
 *
 * @param props.connection
 * @param props.body Email verification token and related verification
 *   parameters
 * @path /todoApp/auth/verify-email
 * @accessor api.functional.todoApp.auth.verify_email.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification token and related verification parameters */
    body: ITodoAppAuth.IVerifyEmailRequest;
  };
  export type Body = ITodoAppAuth.IVerifyEmailRequest;
  export type Response = ITodoAppAuth.IVerifyEmailResponse;

  export const METADATA = {
    method: "POST",
    path: "/todoApp/auth/verify-email",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/auth/verify-email";
  export const random = (): ITodoAppAuth.IVerifyEmailResponse =>
    typia.random<ITodoAppAuth.IVerifyEmailResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
