import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAuth } from "../../../../structures/ITodoAppAuth";

/**
 * Request password reset token for forgotten password recovery.
 *
 * This operation initiates the password reset process for users who have
 * forgotten their password. When an authenticated or unauthenticated user
 * submits their email address, THE system SHALL verify that an account with
 * that email exists in the todo_app_authenticateduser table. If the account
 * exists, THE system SHALL generate a cryptographically secure, time-limited
 * reset token valid for exactly 24 hours and store it in a secure temporary
 * storage or token table.
 *
 * THE system SHALL send a password reset email to the provided email address
 * containing a secure link that includes the reset token. The email MUST be
 * sent immediately upon successful token generation. THE system SHALL display a
 * confirmation message to the user indicating that if the email address is
 * associated with an account, a password reset link will be sent shortly.
 *
 * For security purposes, THE system SHALL use the same response message whether
 * the email exists or not, preventing user enumeration attacks. This means the
 * system returns success message for both valid and invalid email addresses to
 * prevent attackers from determining which emails are registered.
 *
 * The reset token MUST be cryptographically random, sufficiently long (minimum
 * 32 characters), and stored separately from the user password hash. THE token
 * SHALL be marked with creation time and expiration time (24 hours after
 * creation) to enforce time-limited validity. Once a user uses the token to
 * reset their password, THE system SHALL immediately invalidate the token
 * preventing reuse.
 *
 * If the system cannot send the email due to mail server issues, THE system
 * SHALL retry up to 3 times with exponential backoff (1 second, 2 seconds, 4
 * seconds). If all retry attempts fail, THE system SHALL log the failure for
 * administrator investigation and display message 'Unable to send reset email.
 * Please try again later or contact support.' to the user.
 *
 * This operation is GUEST/UNAUTHENTICATED accessible since users requesting
 * password reset may not have valid sessions. THE operation integrates with the
 * todo_app_authenticateduser table to verify email existence and store reset
 * token state.
 *
 * @param props.connection
 * @param props.body User's email address for password reset request and
 *   verification
 * @path /todoApp/auth/reset-password
 * @accessor api.functional.todoApp.auth.reset_password.resetPassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /** User's email address for password reset request and verification */
    body: ITodoAppAuth.IResetPasswordRequest;
  };
  export type Body = ITodoAppAuth.IResetPasswordRequest;
  export type Response = ITodoAppAuth.IResetPasswordResponse;

  export const METADATA = {
    method: "POST",
    path: "/todoApp/auth/reset-password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/auth/reset-password";
  export const random = (): ITodoAppAuth.IResetPasswordResponse =>
    typia.random<ITodoAppAuth.IResetPasswordResponse>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
