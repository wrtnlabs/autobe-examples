import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Authenticated user profile information returned for account management and
 * display purposes.
 *
 * This schema represents complete user account details as stored in the
 * todo_app_authenticateduser database table. Contains user identification,
 * email, profile information, account status, and lifecycle metadata. Passwords
 * are never included in this response schema.
 *
 * This is the main user profile type used in GET /auth/profile and returned
 * after successful authentication operations. Sensitive fields like password
 * hash and internal status flags are never included.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppAuthenticatedUser = {
  /**
   * Unique identifier for the authenticated user in UUID format.
   * Automatically generated at account creation and immutable. Used to
   * uniquely identify the user and associate their data (todos, security
   * events, audit logs).
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's email address used for authentication and identification. Unique
   * across the system. Must follow RFC 5321 standard format. Used for login
   * credentials and account recovery communications.
   */
  email: string & tags.Format<"email">;

  /**
   * User's first name for profile display and personalization. Optional
   * field. Used in greeting messages and account information display.
   */
  firstName?: string | undefined;

  /**
   * User's last name for profile display and personalization. Optional field.
   * Used in greeting messages and account information display.
   */
  lastName?: string | undefined;

  /**
   * Account status indicating whether account is usable. 'active' allows
   * normal login and operations. 'inactive' prevents login. 'locked'
   * indicates temporary lockout due to failed login attempts (auto-expires
   * after lockout period).
   */
  status: "active" | "inactive" | "locked";

  /**
   * Flag indicating whether the user has verified their email address. False
   * at registration, true after user clicks verification email link. Users
   * cannot log in until email is verified.
   */
  emailVerified: boolean;

  /**
   * ISO 8601 UTC timestamp of the user's most recent successful login. Null
   * if user has never logged in. Updated on each successful authentication.
   */
  lastLoginAt?: (string & tags.Format<"date-time">) | undefined;

  /**
   * ISO 8601 UTC timestamp when the user account was created during
   * registration. Immutable record of account creation time.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * ISO 8601 UTC timestamp of when the user account was last modified
   * (profile updates, password changes, status changes). Updated on any
   * account modification.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace ITodoAppAuthenticatedUser {
  /**
   * Authorization response containing JWT token and authenticated user
   * information.
   *
   * Returned after successful authentication (login, registration completion,
   * token refresh). Contains access token for subsequent authenticated
   * requests, optional refresh token for session extension, and token
   * metadata (type, expiration).
   *
   * Client stores token securely (httpOnly cookie preferred) and includes in
   * Authorization header of all authenticated requests. When access token
   * expires (15 minutes), client uses refresh token to obtain new access
   * token or requires re-authentication.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated user for session tracking and
     * resource association.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * JWT refresh token for obtaining new access tokens without
     * re-authentication. Valid for 7 days. Used to call POST /auth/refresh
     * endpoint when access token approaches expiration. One-time use
     * (rotated on refresh).
     */
    refreshToken?: string | undefined;

    /**
     * Access token expiration time in seconds (900 seconds = 15 minutes).
     * Indicates when the current access token will expire and
     * re-authentication is required.
     */
    expiresIn?: (number & tags.Type<"int32">) | undefined;

    /**
     * Token type indicator. Always 'Bearer' for JWT tokens. Indicates token
     * format for Authorization header usage.
     */
    tokenType?: "Bearer" | undefined;
  };

  /**
   * Request DTO for user registration via POST /todoApp/auth/register
   * endpoint.
   *
   * Clients submit email and password meeting security requirements. Email
   * must be valid format and unique (not already registered). Password must
   * meet minimum complexity: 8+ characters including uppercase, lowercase,
   * digit, and special character. System validates these requirements and
   * rejects invalid input with specific error messages.
   *
   * Upon successful registration, system creates todo_app_authenticateduser
   * record with hashed password (never plaintext), sets status to 'active',
   * email_verified to false, and sends verification email. User cannot log in
   * until email is verified through verification link.
   *
   * This DTO accepts ONLY email and password. System-managed fields (id,
   * status, timestamps, etc.) are never accepted in requests and are
   * automatically assigned.
   */
  export type ICreate = {
    /**
     * User's email address for authentication and identification. Must
     * follow RFC 5321 standard format. Must be unique across all registered
     * accounts. Used as the primary login identifier.
     */
    email: string & tags.Format<"email">;

    /**
     * User's plaintext password for account security. Minimum 8 characters,
     * maximum 128 characters. Must contain at least one uppercase letter,
     * one lowercase letter, one numeric digit, and one special character
     * (!@#$%^&*). System hashes password using bcrypt before storage;
     * plaintext password is never persisted. Client submits plaintext only;
     * server handles secure hashing.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * Request DTO for user authentication via POST /todoApp/auth/login
   * endpoint.
   *
   * Clients submit email and password credentials for authentication. System
   * validates that email exists in database and password matches stored
   * password hash. Generic error message used for both invalid email and
   * invalid password to prevent user enumeration attacks.
   *
   * Upon successful authentication, system generates JWT access token
   * (15-minute expiration) and optionally refresh token (7-day expiration).
   * Failed authentication attempts are tracked for lockout enforcement (5
   * attempts in 15 minutes triggers 15-minute account lockout).
   */
  export type ILogin = {
    /**
     * Registered user's email address used for authentication. Must match
     * an existing account email exactly. Case-insensitive comparison.
     * Required for login.
     */
    email: string & tags.Format<"email">;

    /**
     * User's account password as plaintext for verification. System
     * compares submitted password to stored hash using secure comparison.
     * Plaintext password is never logged or stored; only hash is
     * persisted.
     */
    password: string;
  };

  /**
   * Request body for token refresh operation to obtain new access token
   * without re-authentication.
   *
   * When user's access token approaches or has expired, submit the refresh
   * token to obtain a new short-lived access token (15-minute expiration)
   * maintaining authenticated session without password re-entry.
   *
   * Refresh tokens expire 7 days from issuance. After expiration, user must
   * re-authenticate through login endpoint. Refresh tokens enforce one-time
   * use - after successful refresh, the old token becomes invalid and new
   * replacement token is issued.
   */
  export type IRefresh = {
    /**
     * Valid refresh token for obtaining new access token. Refresh tokens
     * expire after 7 days and support one-time use enforcement to prevent
     * token replay attacks.
     */
    refresh_token: string & tags.MinLength<20>;
  };

  /**
   * Registration confirmation response after successful account creation.
   *
   * Returned after successful registration via POST /todoApp/auth/register.
   * Contains newly created user ID, email, and confirmation message about
   * email verification requirement. User must verify email within 24 hours
   * before gaining login capability. Optionally includes temporary access
   * token if auto-login is implemented.
   */
  export type IRegister = {
    /** Unique identifier of the newly registered user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the newly registered user. */
    email: string & tags.Format<"email">;

    /**
     * JWT access token for the newly registered user (15-minute
     * expiration).
     */
    token?: string | undefined;

    /**
     * Registration confirmation message indicating email verification is
     * required.
     */
    message: string;
  };

  /**
   * Registration confirmation response with user details.
   *
   * Returned after successful account creation and verification email sent.
   */
  export type IRegistered = {
    /** Unique identifier of newly created user account. */
    id: string & tags.Format<"uuid">;

    /** Registered email address. */
    email: string & tags.Format<"email">;

    /** Registration confirmation message. */
    message: string;
  };

  /**
   * Login response containing JWT token and authenticated user information.
   *
   * Returned after successful login via POST /todoApp/auth/login. Contains
   * access token, optional refresh token, and user identification. Client
   * stores tokens and includes access token in Authorization header for
   * authenticated requests.
   */
  export type ILoggedIn = {
    /**
     * Unique identifier of the logged-in user for session and resource
     * tracking.
     */
    id: string & tags.Format<"uuid">;

    /** Email address of the logged-in user. */
    email: string & tags.Format<"email">;

    /** JWT access token for authenticated requests (15-minute expiration). */
    token: string;

    /** JWT refresh token for session extension (7-day expiration). */
    refreshToken?: string | undefined;

    /** Access token expiration in seconds (900 = 15 minutes). */
    expiresIn?: (number & tags.Type<"int32">) | undefined;

    /** Token type: 'Bearer' for JWT format. */
    tokenType?: "Bearer" | undefined;
  };

  /**
   * Request DTO for updating authenticated user profile via PUT
   * /todoApp/authenticatedUser/auth/profile endpoint.
   *
   * Clients submit any combination of fields to update their profile. All
   * fields optional (Partial pattern). System-managed fields (id, status,
   * timestamps, etc.) cannot be modified. Email updates are validated for
   * uniqueness and format. Success response returns complete updated
   * profile.
   */
  export type IUpdate = {
    /**
     * Updated email address (optional). Must follow RFC 5321 format. Must
     * be unique (not already registered by another account). When provided,
     * updates user's email for login and communication purposes.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Updated first name (optional). Used for display and personalization.
     * Can be any UTF-8 text up to reasonable length.
     */
    firstName?: string | undefined;

    /**
     * Updated last name (optional). Used for display and personalization.
     * Can be any UTF-8 text up to reasonable length.
     */
    lastName?: string | undefined;
  };

  /**
   * Request DTO for account deletion via DELETE
   * /todoApp/authenticatedUser/auth/delete-account endpoint.
   *
   * Clients must provide email and password for confirmation before account
   * deletion proceeds. System verifies credentials match authenticated user's
   * account. Upon successful verification, account is soft-deleted with
   * 30-day recovery window before permanent purge. All user data (todos,
   * security events) is also marked for deletion but remains recoverable
   * during 30-day window.
   */
  export type IDeleteRequest = {
    /**
     * User's email address for verification before account deletion. Used
     * to confirm the user intends to delete their account.
     */
    email: string & tags.Format<"email">;

    /**
     * User's current password for verification before deletion. Used to
     * confirm the user has authority to delete the account.
     */
    password: string;
  };

  /**
   * Account deletion response confirming successful deletion initiation with
   * recovery information.
   *
   * Returned after successful account deletion via DELETE
   * /todoApp/authenticatedUser/auth/delete-account. Includes deletion
   * timestamp and recovery deadline (30 days from deletion). During recovery
   * period, user can restore account by clicking recovery link sent to their
   * email address.
   */
  export type IDeleteResponse = {
    /**
     * Account deletion confirmation message indicating account has been
     * marked for deletion with recovery window.
     */
    message: string;

    /** ISO 8601 UTC timestamp when account deletion was initiated. */
    deletedAt: string & tags.Format<"date-time">;

    /**
     * ISO 8601 UTC timestamp when account becomes permanently
     * unrecoverable. User can restore account until this time through
     * recovery email link.
     */
    recoveryDeadline?: (string & tags.Format<"date-time">) | undefined;
  };
}
