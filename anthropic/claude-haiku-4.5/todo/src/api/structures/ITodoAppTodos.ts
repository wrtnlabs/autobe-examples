import { tags } from "typia";

import { ITodoAppTodo } from "./ITodoAppTodo";

/**
 * Array collection of todo items representing a user's complete todo list.
 *
 * This array contains all todo objects belonging to an authenticated user,
 * including both completed and incomplete todos. The array may be empty if the
 * user has no todos.
 *
 * Each element in the array is a complete ITodoAppTodo object with all
 * properties (id, title, description, isCompleted, createdAt, updatedAt).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppTodos = ITodoAppTodo[];
export namespace ITodoAppTodos {
  /**
   * Request DTO for searching, filtering, and paginating todos via PATCH
   * /todoApp/authenticatedUser/todos endpoint.
   *
   * Clients submit this object with any combination of search criteria. All
   * fields are optional. System automatically filters results to only todos
   * belonging to the authenticated user. Deleted todos (deleted_at not null)
   * are excluded from results by default.
   *
   * Search behavior: search term matched against title and description using
   * full-text search. Pagination: results divided into pages of specified
   * size starting from page 1. Sorting: results organized by specified field
   * in specified order, with completed todos generally appearing before
   * incomplete todos (unless sorting by specific field overrides this).
   *
   * Defaults: page=1, limit=20, sortBy=createdAt, sortOrder=desc, no search
   * filter, all completion statuses included. Validation: page must be
   * positive integer, limit between 1-100, sortBy from enum, sortOrder from
   * enum.
   */
  export type ISearchRequest = {
    /**
     * Optional full-text search term to match against todo titles and
     * descriptions. Supports substring matching and fuzzy text search.
     * Case-insensitive. When provided, returns only todos where title or
     * description contains the search term. When omitted, search filter is
     * not applied.
     */
    search?: string | undefined;

    /**
     * Optional filter for completion status. When true, returns only
     * completed todos. When false, returns only incomplete todos. When
     * omitted or null, returns todos regardless of completion status (both
     * completed and incomplete).
     */
    isCompleted?: boolean | undefined;

    /**
     * Field to sort results by. Options: 'createdAt' (creation timestamp),
     * 'updatedAt' (last modification), 'title' (alphabetically),
     * 'isCompleted' (status). Default sorting is createdAt when omitted.
     * Within each group of completed/incomplete todos, results are sorted
     * by this field.
     */
    sortBy?: "createdAt" | "updatedAt" | "title" | "isCompleted" | undefined;

    /**
     * Sort direction: 'asc' for ascending order, 'desc' for descending
     * order (reverse). Default is 'desc' (newest first for timestamps, Z-A
     * for titles) when omitted. Applied to the sortBy field.
     */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination (1-indexed). Default is 1 when omitted.
     * Each page contains the number of items specified by the limit
     * parameter.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of todos to return per page. Default is 20 when
     * omitted. Maximum allowed is 100 items per page to prevent excessive
     * data transfer. For performance, pagination is recommended for lists
     * over 50 items.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };
}
