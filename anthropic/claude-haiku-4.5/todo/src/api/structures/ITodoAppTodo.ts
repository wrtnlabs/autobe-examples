import { tags } from "typia";

/**
 * Primary todo entity representing a single task item in the todo list
 * application.
 *
 * This schema represents a complete todo record as stored in the todo_app_todos
 * database table. Each todo is owned by a specific user and contains essential
 * properties for task management: unique identifier, title/description text,
 * completion status flag, and lifecycle timestamps.
 *
 * Todos are immutable in identity (id cannot change) and creation time
 * (createdAt is permanent). Title, description, and completion status can be
 * modified by the owner, with modification timestamp automatically updated to
 * reflect changes. The isCompleted boolean serves as the primary completion
 * state indicator.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppTodo = {
  /**
   * Unique identifier for the todo item in UUID v4 format. Automatically
   * generated by the system at creation time and immutable throughout the
   * todo's lifecycle. Used to uniquely identify this todo for read, update,
   * and delete operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The main title or short description of the todo task. Required field
   * containing 1-255 characters of user-provided text exactly as entered.
   * Cannot be empty or contain only whitespace. This is the primary
   * user-visible text describing what the todo represents.
   */
  title: string & tags.MinLength<1> & tags.MaxLength<255>;

  /**
   * Optional detailed description or notes about the todo task. May be empty
   * string or null. Maximum 2000 characters when provided. Used for storing
   * additional context, details, or requirements related to the todo.
   */
  description?: (string & tags.MaxLength<2000>) | undefined;

  /**
   * Completion status of the todo. True indicates the todo task has been
   * marked as completed by the user. False indicates the todo is incomplete
   * and still pending. Defaults to false when todo is created. Can be toggled
   * by user at any time.
   */
  isCompleted: boolean;

  /**
   * ISO 8601 UTC timestamp indicating when the todo was created.
   * Automatically set to current server time upon creation and immutable
   * thereafter. Used for tracking when the todo was originally added to the
   * system and for sorting todos in chronological order.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * ISO 8601 UTC timestamp indicating when the todo was last modified.
   * Automatically updated to current server time whenever any property of the
   * todo changes (title, description, or completion status). Initially equals
   * createdAt upon creation.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace ITodoAppTodo {
  /**
   * Request DTO for creating new todos via POST /todoApp/todos endpoint.
   *
   * Clients submit this minimal object containing just the required title
   * field (and optional description). The system automatically generates all
   * other properties: unique UUID identifier, sets isCompleted to false,
   * captures createdAt and updatedAt timestamps to current server time, and
   * associates the todo with the authenticated user.
   *
   * Validation rules: title must be 1-255 characters, non-empty,
   * non-whitespace-only. Description optional with max 2000 characters.
   * System-managed fields (id, isCompleted, createdAt, updatedAt, user
   * association) are never accepted in this request and are automatically
   * assigned.
   */
  export type ICreate = {
    /**
     * Required todo title/description (1-255 characters). Must not be empty
     * or whitespace-only. Stores the user's task description exactly as
     * entered. This is the only required field for todo creation; all other
     * properties are system-generated or optional.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<255>;

    /**
     * Optional detailed description or notes for the todo. Maximum 2000
     * characters when provided. May be omitted or empty string. Used for
     * storing additional context and details about the task beyond the
     * title.
     */
    description?: (string & tags.MaxLength<2000>) | undefined;
  };

  /**
   * Request DTO for updating existing todos via PUT
   * /todoApp/authenticatedUser/todos/{todoId} endpoint.
   *
   * Clients submit this object with any combination of properties to update.
   * All fields are optional (Partial<ITodoAppTodo> pattern), allowing users
   * to update title only, status only, description only, or any combination
   * without specifying other properties. System-managed fields (id,
   * createdAt, updatedAt, user association) cannot be modified and are
   * ignored if provided in requests.
   *
   * Validation rules: If provided, title must be 1-255 characters
   * non-empty/non-whitespace. Description max 2000 characters. isCompleted
   * must be boolean. Omitted fields retain their current values. Successful
   * update automatically sets updatedAt to current timestamp while preserving
   * createdAt.
   */
  export type IUpdate = {
    /**
     * Updated todo title (1-255 characters, optional). When provided, must
     * not be empty or whitespace-only. Updates the todo's title text. When
     * omitted, existing title is preserved. Can be updated independently of
     * other properties.
     */
    title?: (string & tags.MinLength<1> & tags.MaxLength<255>) | undefined;

    /**
     * Updated todo description (optional, max 2000 characters). When
     * provided, replaces the existing description. May be empty string to
     * clear description. When omitted, existing description is preserved.
     * Can be updated independently of other properties.
     */
    description?: (string & tags.MaxLength<2000>) | undefined;

    /**
     * Updated completion status (optional). When provided, sets todo to
     * completed (true) or incomplete (false). When omitted, existing status
     * is preserved. Can be toggled independently of title/description
     * changes. Toggling status updates the updatedAt timestamp.
     */
    isCompleted?: boolean | undefined;
  };

  /**
   * Deletion confirmation response indicating successful removal of a todo
   * from the system.
   *
   * This response is returned after a user successfully deletes a todo item.
   * The response confirms the deletion operation completed successfully and
   * provides the identifier of the deleted todo and deletion timestamp for
   * reference and audit trail purposes.
   *
   * The deletion response includes the soft delete timestamp to document the
   * start of the 30-day recovery window. This response is returned
   * immediately after soft delete (marking deleted_at timestamp) occurs,
   * before the permanent purge window expires.
   */
  export type IDeleteResponse = {
    /**
     * Confirmation message indicating successful deletion. Standard
     * message: 'Todo deleted successfully.' This message provides
     * user-friendly confirmation that the requested todo has been removed
     * from their active todo list.
     *
     * For deleted or non-existent todos, error responses with different
     * messages are returned instead of this success response.
     */
    message: string;

    /**
     * Unique identifier of the deleted todo in UUID format. Preserved in
     * the response for audit trail reference, allowing clients and
     * administrators to track which specific todo was deleted.
     *
     * This identifier can be used for recovery operations within the 30-day
     * recovery window or for audit trail correlation.
     */
    todoId: string & tags.Format<"uuid">;

    /**
     * ISO 8601 UTC timestamp indicating when the todo was marked as
     * deleted. This timestamp is set to the current server time when the
     * soft delete operation is executed.
     *
     * During the 30-day recovery period after this timestamp, the deleted
     * todo can be restored through the recovery interface. After 30 days
     * from this timestamp, the todo is permanently purged with no recovery
     * option.
     */
    deletedAt: string & tags.Format<"date-time">;
  };
}
