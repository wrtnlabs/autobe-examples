{"operations":[{"specification":"Guest user registration endpoint allowing new users to create accounts. This operation is part of the public authentication flow where unregistered users can initiate account creation with email and password. The system validates input credentials, checks for existing accounts, enforces password strength requirements, and creates a new authenticated user account. After successful registration, the user receives a verification email with a link to complete email verification before gaining full access to todo operations. This endpoint is exclusively for guest users (unauthenticated) and becomes unavailable once a user is authenticated.","summary":"Register a new guest user account with email and password credentials","description":"This endpoint allows unregistered guest users to create a new account by providing email and password credentials. The registration process includes comprehensive input validation, password strength enforcement, email uniqueness verification, and account creation in the todo_app_authenticateduser table.\n\nWHEN a guest user submits a registration request with email and password, THE system SHALL validate the email follows RFC 5321 standard format and is not already registered in the database. THE system SHALL validate the password meets minimum 8 characters, includes uppercase letter, lowercase letter, numeric digit, and special character. THE system SHALL create a new todo_app_authenticateduser record with hashed and salted password (minimum 10 bcrypt rounds), setting status to 'active', email_verified to false, and created_at/updated_at to current UTC timestamp.\n\nTHE system SHALL NOT store passwords in plaintext and SHALL use bcrypt or Argon2 for secure hashing. THE system SHALL generate unique verification email with time-limited token (24-hour expiration) and send to registered email address. THE system SHALL return HTTP 201 with newly created user object containing user ID, email, account status, and email verification status.\n\nIF email already exists in database, THE system SHALL return HTTP 409 Conflict with error 'Email already registered'. IF password fails strength validation, THE system SHALL return HTTP 400 Bad Request with specific error message indicating which requirement failed (e.g., 'Password must contain uppercase letter'). IF email format invalid, THE system SHALL return HTTP 400 Bad Request with error 'Invalid email format'. THE system SHALL NOT reveal whether email exists or not during validation to prevent user enumeration.","path":"/auth/guestUser/join","method":"post","name":"join","parameters":[],"requestBody":{"description":"User registration credentials with email and password","typeName":"ITodoAppGuestUser.IJoin"},"responseBody":{"description":"Newly created authenticated user account with verification status","typeName":"ITodoAppAuthenticatedUser.IAuthorized"},"authorizationType":"join","authorizationRole":null,"prerequisites":[],"accessor":["auth","guestUser","join"]},{"specification":"Guest user token refresh endpoint for obtaining new access tokens without requiring re-authentication. This operation allows clients with valid refresh tokens to obtain new short-lived access tokens (15-minute expiration) while maintaining their authenticated session. The refresh token mechanism enables seamless user experience by preventing frequent re-login requirements while maintaining security through short access token lifetimes. This endpoint is available only to users with valid refresh tokens (obtained during login).","summary":"Refresh expired access token using valid refresh token","description":"This endpoint allows authenticated users to refresh their access tokens without submitting email/password credentials. The refresh process accepts a valid refresh token, validates its signature and expiration, and issues a new short-lived access token with 15-minute expiration if validation succeeds.\n\nWHEN a user submits a refresh token request, THE system SHALL extract the refresh token from request (typically from httpOnly cookie or Authorization header). THE system SHALL validate the refresh token signature using the secret key. THE system SHALL verify the refresh token has not expired (comparing exp claim to current time). THE system SHALL verify the refresh token has not been marked as revoked or used.\n\nIF refresh token valid and not expired, THE system SHALL generate new JWT access token containing userId, email, role from original token, iat (current time), exp (30 minutes from iat), and tokenType 'access'. THE system SHALL sign the new access token using HS256 algorithm. THE system SHALL optionally generate new refresh token with 7-day expiration if implementing token rotation. THE system SHALL mark the old refresh token as used (preventing reuse for security). THE system SHALL return HTTP 200 with new access token and optionally new refresh token.\n\nIF refresh token signature invalid, THE system SHALL return HTTP 401 Unauthorized with error code 'AUTH_INVALID_TOKEN' and message 'Invalid refresh token. Please log in again.'. IF refresh token expired, THE system SHALL return HTTP 401 with error code 'AUTH_REFRESH_TOKEN_INVALID' and message 'Refresh token expired. Please log in again.'. IF refresh token already used (revoked), THE system SHALL return HTTP 401 with error code 'AUTH_TOKEN_REVOKED' and message 'Refresh token has already been used. Please log in again.'\n\nTHE system SHALL NOT accept tokens that have been tampered with or have invalid signatures. THE system SHALL log all token refresh attempts (successful and failed) in todo_app_audit_logs with actor_type 'authenticatedUser', action_type 'TOKEN_REFRESH', entity_type 'SESSION', and operation_status reflecting success or failure.","path":"/auth/guestUser/refresh","method":"post","name":"refresh","parameters":[],"requestBody":{"description":"Refresh token for obtaining new access token","typeName":"ITodoAppGuestUser.IRefresh"},"responseBody":{"description":"New access token for continued authenticated session","typeName":"ITodoAppAuthenticatedUser.IAuthorized"},"authorizationType":"refresh","authorizationRole":null,"prerequisites":[],"accessor":["auth","guestUser","refresh"]},{"name":"join","path":"/auth/authenticatedUser/join","method":"post","specification":"User registration endpoint for creating new authenticated user accounts. This operation handles the complete registration workflow: email validation, password strength validation, account creation with securely hashed password, and email verification initiation. New users receive a unique user ID and must verify their email within 24 hours to fully activate their account. Operation references todo_app_authenticateduser table for account persistence.","summary":"Register a new authenticated user account with email and password credentials","description":"WHEN a new user submits registration credentials (email and password), THE system SHALL validate the email format (RFC 5321 standard) and check uniqueness across all accounts. THE system SHALL validate the password meets security requirements: minimum 8 characters, at least one uppercase letter, one lowercase letter, one numeric digit, and one special character. THE system SHALL reject duplicate email addresses with error 'This email is already registered' and reject weak passwords with specific error messages indicating missing requirement.\n\nWHEN all validations pass, THE system SHALL create a new user account in the todo_app_authenticateduser table with: user email address, securely hashed and salted password (using bcrypt with minimum 10 rounds), account status set to 'inactive' until email verification, email_verified flag set to false, account creation timestamp, and unique user ID (UUID).\n\nTHE system SHALL generate a time-limited email verification token (valid 24 hours) and send verification email to registered address. User MUST verify email within 24 hours to fully activate account and be able to log in. THE system SHALL return success response with user ID and message 'Registration successful. Verification email sent to [email]. Please verify your email to complete registration.'\n\nThis operation creates permanent user record in the authenticated user table and initiates the email verification workflow as a prerequisite to account activation. Password is never stored in plaintext, only cryptographically hashed with unique salt.","authorizationType":"join","authorizationRole":null,"parameters":[],"requestBody":{"description":"User registration credentials including email and password meeting security requirements","typeName":"ITodoAppAuthenticatedUser.ICreate"},"responseBody":{"description":"Newly created authenticated user account with ID and verification status","typeName":"ITodoAppAuthenticatedUser.IAuthorized"},"prerequisites":[],"accessor":["auth","authenticatedUser","join"]},{"name":"login","path":"/auth/authenticatedUser/login","method":"post","specification":"User authentication endpoint for logging in existing authenticated user accounts. This operation validates credentials against stored user data, implements account lockout after multiple failed attempts, generates JWT access tokens for authenticated sessions, and returns token to user for subsequent authenticated requests. Operation references todo_app_authenticateduser table for credential verification and todo_app_failed_login_attempts table for tracking failed attempts and lockout enforcement.","summary":"Authenticate an existing user with email and password to receive JWT access token","description":"WHEN an existing user submits email and password credentials at login, THE system SHALL validate the credentials against stored user data in the todo_app_authenticateduser table. THE system SHALL query for user account by email address and verify password matches stored password hash using secure comparison (never plaintext comparison).\n\nIF credentials are valid, THE system SHALL generate a JWT access token containing user claims (userId, email, role, timestamps). THE system SHALL sign token using HMAC-SHA256 algorithm with secure key. THE system SHALL set token expiration to 15 minutes from creation. THE system SHALL return token to user with 30-minute idle session timeout. THE system SHALL record successful login in user account with last_login_at timestamp.\n\nIF credentials are invalid (email not found OR password incorrect), THE system SHALL return generic authentication error 'Invalid email or password. Please try again.' WITHOUT indicating whether email exists or password wrong (prevents user enumeration attacks). THE system SHALL track failed attempt in todo_app_failed_login_attempts table with email, IP address, timestamp, and failure reason.\n\nWHEN failed login attempts reach 5 within 15-minute window, THE system SHALL lock the user account by setting locked_until timestamp to 15 minutes in future. THE system SHALL return error 'Account temporarily locked due to multiple failed login attempts. Please try again in 15 minutes.' Locked accounts cannot authenticate until lockout expires. THE system SHALL send security notification email to account holder about failed login attempts.\n\nTHE system SHALL initialize user session with authenticated user ID, record session creation timestamp, establish session timeout (30 minutes idle, 24 hours absolute), and make authenticated endpoints accessible for this user. THE system SHALL transmit JWT token ONLY over HTTPS/TLS encrypted connection in httpOnly secure cookie.","authorizationType":"login","authorizationRole":null,"parameters":[],"requestBody":{"description":"User login credentials with email address and password for authentication","typeName":"ITodoAppAuthenticatedUser.ILogin"},"responseBody":{"description":"JWT access token and authenticated user information for session establishment","typeName":"ITodoAppAuthenticatedUser.IAuthorized"},"prerequisites":[],"accessor":["auth","authenticatedUser","login"]},{"name":"refresh","path":"/auth/authenticatedUser/refresh","method":"post","specification":"Token refresh endpoint for renewing expired or expiring access tokens without requiring user to log in again. This operation validates refresh token validity (signature, expiration, not previously used), generates new JWT access token with updated expiration, and returns new token to user. Operation maintains session continuity and improves user experience by preventing forced re-authentication. References todo_app_authenticateduser table for user context and token validation.","summary":"Refresh expired access token using valid refresh token to continue authenticated session","description":"WHEN a user submits a refresh token to obtain a new access token (typically when current access token is about to expire or has expired), THE system SHALL validate the refresh token's signature using the same secret key used for generation. THE system SHALL verify refresh token has not exceeded its 7-day expiration time. THE system SHALL confirm the refresh token has not been previously used (one-time use enforcement to prevent token reuse attacks).\n\nIF refresh token is valid and not expired, THE system SHALL extract user ID from token claims and retrieve user account from todo_app_authenticateduser table. THE system SHALL verify user account is in 'active' status (not locked, disabled, or deleted). THE system SHALL generate new JWT access token containing updated user claims (userId, email, role, fresh timestamps) signed with HMAC-SHA256.\n\nTHE new access token SHALL expire 15 minutes from current time. THE system SHALL generate new refresh token (7-day expiration) if token rotation is implemented. THE system SHALL mark the old refresh token as used to prevent reuse. THE system SHALL return both access token and new refresh token to user for continued session.\n\nIF refresh token is expired, invalid, or already used, THE system SHALL return error 'Refresh token invalid or expired. Please log in again.' and HTTP 401 status, requiring user to authenticate again. THE system SHALL NOT issue new tokens for invalid refresh tokens. THE system SHALL log the token refresh attempt for security audit.\n\nTHE system SHALL transmit tokens ONLY over HTTPS/TLS encrypted connection in httpOnly secure cookies. This operation enables seamless session continuation without forcing re-authentication while maintaining security through short-lived access tokens.","authorizationType":"refresh","authorizationRole":null,"parameters":[],"requestBody":{"description":"Refresh token request containing the current refresh token for obtaining new access token","typeName":"ITodoAppAuthenticatedUser.IRefresh"},"responseBody":{"description":"New JWT access token and optionally new refresh token for continued authenticated session","typeName":"ITodoAppAuthenticatedUser.IAuthorized"},"prerequisites":[],"accessor":["auth","authenticatedUser","refresh"]},{"specification":"Administrator login endpoint allowing system operators to authenticate with their email and password credentials. This operation validates administrator credentials against securely stored password hashes, generates JWT access tokens with administrator claims, and establishes authenticated sessions. The login process includes failed login attempt tracking for security purposes, automatic account lockout after 5 failed attempts within 15 minutes, and comprehensive audit logging of authentication events. The operation supports the administrator role (kind: admin) and returns a JWT token containing user identification, role information, and token expiration metadata. Security measures include password hash comparison using bcrypt, rate limiting on failed attempts, and secure session initialization. This endpoint is publicly accessible (no prior authentication required) and is the primary mechanism for administrators to gain system access.","summary":"Administrator login endpoint for system operator authentication with JWT token issuance","path":"/auth/administrator/login","method":"post","name":"login","authorizationType":"login","authorizationRole":null,"parameters":[],"requestBody":{"description":"Administrator login credentials including email address and password","typeName":"IAdministratorLoginRequest"},"responseBody":{"description":"JWT token and administrator session information upon successful authentication","typeName":"ITodoAppAdministrator.IAuthorized"},"prerequisites":[],"description":"Administrator Login Authentication Endpoint\n\nThis endpoint provides secure authentication mechanism for system administrators to access the Todo application with elevated privileges. Administrators submit their email address and password credentials, which are validated against securely stored password hashes using bcrypt algorithm. Upon successful credential validation, the system generates a JWT access token containing administrator identification, role information, and administrative level claims. The token is configured with 15-minute expiration time for security purposes, requiring periodic re-authentication. The token uses HMAC-SHA256 signing algorithm and includes claims: administrator ID, email address, role set to 'administrator', admin level (1-5), issuance timestamp (iat), and expiration timestamp (exp).\n\nSecurity Implementation and Protections:\n- WHEN an administrator submits login credentials, THE system SHALL validate the email address format and check if an administrator account exists with that email\n- IF the email does not exist, THE system SHALL return generic error 'Invalid email or password' without confirming email existence (prevents user enumeration attacks)\n- WHEN an administrator account exists, THE system SHALL retrieve the stored password hash and compare submitted password to stored hash using secure comparison function\n- IF the password does not match, THE system SHALL increment failed_login_attempts counter for that account and return generic error message\n- WHEN failed login attempts reach 5 within 15 minutes, THE system SHALL lock the administrator account and set locked_until timestamp to 15 minutes from current time\n- WHEN an administrator account is locked, THE system SHALL deny login attempts and return error 'Account temporarily locked due to multiple failed login attempts. Please try again in 15 minutes.'\n- IF the password matches, THE system SHALL reset failed_login_attempts to 0, verify that administrator status is 'active' (not 'inactive' or 'suspended'), and verify that email_verified is true\n- IF email not verified, THE system SHALL return error 'Please verify your email address before logging in'\n- IF administrator account not active, THE system SHALL return error 'Administrator account is inactive. Please contact system administrator.'\n- WHEN all validations pass, THE system SHALL generate a new JWT access token with administrator claims\n\nToken Generation Process:\n- THE system SHALL create JWT token with header: {\"alg\": \"HS256\", \"typ\": \"JWT\"}\n- THE system SHALL create payload containing: userId (administrator UUID), email (administrator email), role: 'administrator', isAdmin: true, adminLevel (integer 1-5), iat (current Unix timestamp), exp (current Unix timestamp + 900 seconds for 15 minute expiration), tokenType: 'access'\n- THE system SHALL sign the token using HMAC-SHA256 algorithm with secure secret key stored in environment variables\n- THE system SHALL never include password or sensitive information in token payload\n\nSession and Response Handling:\n- WHEN token generated successfully, THE system SHALL update last_login_at timestamp to current UTC time\n- THE system SHALL initialize administrator session with 30-minute idle timeout and 24-hour absolute timeout\n- THE system SHALL return JWT token to client via httpOnly secure cookie (preferred) or in response body\n- THE system SHALL return HTTP 200 (OK) status code with complete response object containing access token, token type 'Bearer', expires_in (900 seconds), and authenticated administrator information\n- THE system SHALL log successful login event to security event log with event_type 'AUTHENTICATION_SUCCESS', admin email, and timestamp\n- THE system SHALL prevent concurrent session issues by allowing multiple independent sessions from same administrator account on different devices\n\nAudit and Monitoring:\n- THE system SHALL create audit log entry for successful login with action_type 'LOGIN', actor_type 'administrator', operation_status 'SUCCESS'\n- THE system SHALL track administrator login patterns for anomaly detection\n- THE system SHALL update failed_login_attempts and locked_until fields appropriately based on authentication outcome\n- THE system SHALL store IP address and User-Agent from request for security monitoring\n- THE system SHALL implement rate limiting: maximum 100 login attempts per 15 minutes from same IP address to prevent brute force attacks\n\nError Handling and Recovery:\n- IF database connection fails during login, THE system SHALL return error 'TODOAPP-SYS-001: Unable to process login. Please try again later.'\n- IF network timeout occurs, THE system SHALL retry up to 3 times with exponential backoff before returning error\n- IF system is under maintenance, THE system SHALL return error 'TODOAPP-SYS-006: System under maintenance. Please try again in a few moments.'\n- IF token generation fails unexpectedly, THE system SHALL return error 'TODOAPP-SYS-005: Server error. Our team has been notified. Please try again.'\n- THE system SHALL NOT store administrator passwords in logs or error messages\n- THE system SHALL NOT reveal whether email exists in system through error messages\n- THE system SHALL NOT include stack traces or technical details in user-facing error responses\n\nRelated Operations and Integration:\n- After successful login, administrators use the access token in Authorization header for all authenticated requests\n- Token refresh endpoint (POST /auth/administrator/refresh) allows obtaining new access token using refresh token without re-login\n- Logout endpoint (POST /auth/administrator/logout) invalidates current session and token\n- Administrator registration endpoint (POST /auth/administrator/join) creates new administrator accounts\n- This login endpoint integrates with todo_app_administrator table for credential validation and todo_app_failed_login_attempts tracking","accessor":["auth","administrator","login"]},{"specification":"Administrator registration endpoint allowing system operators to create new administrator accounts with email and password credentials. This operation validates input, creates administrator account records, generates verification tokens, and sends email verification links. Upon completion, the endpoint returns confirmation that a verification email has been sent to the provided email address. The registration process initializes administrator status as 'active' but email_verified as false, requiring email confirmation before full account activation. The operation supports the administrator role (kind: admin) for account creation and is publicly accessible (no prior authentication required) to enable system setup and new administrator onboarding. Security measures include password strength validation (minimum 8 characters with uppercase, lowercase, number, special character), email uniqueness validation, rate limiting on registration attempts, and comprehensive audit logging.","summary":"Administrator registration endpoint for creating new system operator accounts with email verification","path":"/auth/administrator/join","method":"post","name":"join","authorizationType":"join","authorizationRole":null,"parameters":[],"requestBody":{"description":"Administrator registration information including email and password for new account creation","typeName":"IAdministratorRegistrationRequest"},"responseBody":{"description":"Registration confirmation message with verification email instruction","typeName":"ITodoAppAdministrator.IAuthorized"},"prerequisites":[],"description":"Administrator Registration and Account Creation Endpoint\n\nThis endpoint enables creation of new administrator accounts through secure registration process. System operators submit email address and password meeting security requirements, and the system creates a new administrator account in pending verification state. The registration process includes comprehensive validation, duplicate prevention, account initialization, verification email generation, and detailed audit logging. Upon successful registration, the administrator receives email verification link required to activate the account before login becomes possible.\n\nRegistration Input Validation:\n- WHEN an administrator registration request is received, THE system SHALL validate that both email and password fields are provided and not empty\n- THE system SHALL validate email address format conforms to RFC 5321 standard (must contain @ symbol and valid domain)\n- IF email format is invalid, THE system SHALL return HTTP 400 (Bad Request) with error code 'TODOAPP-VAL-001' and message 'Please enter a valid email address.'\n- WHEN email format is valid, THE system SHALL check email uniqueness by querying todo_app_administrator table for existing account with same email\n- IF email already exists in system, THE system SHALL return HTTP 409 (Conflict) with error code 'TODOAPP-VAL-008' and message 'This email is already registered. Please log in with your existing account or use a different email address.'\n- THE system SHALL validate password meets security requirements: minimum 8 characters, at least one uppercase letter (A-Z), at least one lowercase letter (a-z), at least one numeric digit (0-9), at least one special character (!@#$%^&*)\n- IF password does not meet requirements, THE system SHALL return HTTP 400 (Bad Request) with specific error message indicating which requirement failed: 'Password must be at least 8 characters long.', 'Password must contain at least one uppercase letter.', 'Password must contain at least one lowercase letter.', 'Password must contain at least one numeric digit.', 'Password must contain at least one special character (!@#$%^&*).'\n- THE system SHALL validate password does not reuse previous 5 passwords if administrator account existed previously\n\nAccount Creation Process:\n- WHEN all validations pass, THE system SHALL generate new UUID for administrator ID\n- THE system SHALL hash the submitted password using bcrypt algorithm with minimum 10 rounds and unique random salt\n- THE system SHALL NEVER store password in plaintext under any circumstances\n- THE system SHALL create new todo_app_administrator record with: id (generated UUID), email (provided email), password_hash (bcrypt hash), first_name (null), last_name (null), admin_level (default 1, minimal privileges), status ('active'), email_verified (false), created_at (current UTC timestamp), updated_at (current UTC timestamp), deleted_at (null)\n- THE system SHALL set failed_login_attempts to 0 and locked_until to null for new account\n\nEmail Verification Process:\n- WHEN administrator account created, THE system SHALL generate time-limited verification token (valid 24 hours)\n- THE system SHALL create verification URL: 'https://[domain]/auth/administrator/verify-email?token=[verification_token]'\n- THE system SHALL send verification email to administrator's email address with: subject 'Verify your email address', body containing verification link and instructions\n- THE system SHALL store verification token temporarily (24-hour expiration)\n- THE system SHALL include in email: administrator first name (if provided, otherwise 'Administrator'), verification link, expiration time (24 hours), instructions for verification\n\nResponse and Session Handling:\n- WHEN account created successfully, THE system SHALL return HTTP 201 (Created) status code\n- THE system SHALL return response with: message 'Registration successful. Verification email sent to [email]. Please verify your email to activate your account.', email (masked slightly for display), resend_email_link (allows requesting another verification email)\n- THE system SHALL NOT return password hash, authentication tokens, or other sensitive information\n- THE system SHALL NOT automatically log in the administrator; email verification is required before access\n\nAudit and Security Logging:\n- THE system SHALL create audit log entry with: action_type 'REGISTER', entity_type 'ADMINISTRATOR', entity_id (new administrator ID), actor_type 'system', operation_status 'SUCCESS', created_at (timestamp)\n- THE system SHALL log security event with: event_type 'ADMINISTRATOR_REGISTRATION', severity_level 'MEDIUM', event_source 'REGISTRATION_ENDPOINT', event_description 'New administrator account registered', user_email (provided email), ip_address (from request), created_at (timestamp)\n- THE system SHALL store IP address and User-Agent from registration request for fraud detection\n- THE system SHALL implement rate limiting: maximum 10 registration attempts per hour from same IP address\n\nEmail Verification Completion:\n- WHEN administrator clicks verification link with valid token, THE system SHALL mark account as email_verified (true), set email_verified_at to current UTC timestamp\n- WHEN email verified, THE system SHALL display confirmation message 'Email verified successfully. Your account is now active. You can now log in with your credentials.'\n- AFTER email verification, administrator can use login endpoint to authenticate and obtain access tokens\n- IF verification token expired (older than 24 hours), THE system SHALL return error 'TODOAPP-AUTH-003: Verification link expired. Please request a new verification email.' with option to resend\n\nError Handling and Edge Cases:\n- IF database error occurs during registration, THE system SHALL return error 'TODOAPP-SYS-001: Unable to create account. Please try again later.'\n- IF email sending fails, THE system SHALL return error 'TODOAPP-SYS-008: Unable to send verification email. Your account was created but please contact support to verify your email.'\n- IF duplicate registration attempt (same email submitted twice rapidly), THE system SHALL detect and prevent duplicate account creation\n- IF system reaches maximum administrator count limit, THE system SHALL return error 'TODOAPP-SYS-010: Maximum administrator accounts reached. Please contact system support.'\n- THE system SHALL NOT reveal whether specific emails exist in system (use generic error messages)\n- THE system SHALL handle special characters in email addresses correctly\n- THE system SHALL NOT accept extremely long passwords (over 128 characters); maximum password length 128 characters\n\nRelated Operations and Workflow:\n- After successful registration and email verification, administrator proceeds to login endpoint (POST /auth/administrator/login) to authenticate\n- Password reset endpoint enables administrators to reset password if forgotten\n- Email verification can be resent through separate endpoint if original email not received\n- This registration endpoint is critical for initial system setup and administrator onboarding","accessor":["auth","administrator","join"]},{"specification":"Administrator token refresh endpoint allowing system operators to obtain new access tokens using valid refresh tokens without requiring re-authentication. This operation validates refresh tokens, verifies token expiration and integrity, and generates new JWT access tokens with refreshed expiration times. The endpoint supports extending administrator sessions while maintaining security through token rotation and time-limited refresh windows. The operation is publicly accessible (no prior authentication required for token submission) but validates token signature to ensure authenticity. Refresh tokens have 7-day expiration period, providing extended session capability while access tokens expire after 15 minutes. This endpoint is essential for maintaining uninterrupted administrator sessions during active system management tasks.","summary":"Administrator token refresh endpoint for obtaining new access tokens with extended session duration","path":"/auth/administrator/refresh","method":"post","name":"refresh","authorizationType":"refresh","authorizationRole":null,"parameters":[],"requestBody":{"description":"Refresh token for obtaining new access token without re-authentication","typeName":"ITokenRefreshRequest"},"responseBody":{"description":"New JWT access token with administrator claims and refreshed expiration","typeName":"ITodoAppAdministrator.IAuthorized"},"prerequisites":[],"description":"Administrator Token Refresh Endpoint\n\nThis endpoint enables system administrators to obtain new access tokens using valid refresh tokens, extending their authenticated sessions without requiring re-login. When an access token approaches expiration (15-minute window), administrators can submit their refresh token to obtain a new access token. The refresh token process includes comprehensive validation: signature verification, expiration checking, token rotation, and security event logging. Refresh tokens themselves expire after 7 days, requiring administrators to log in again if no refresh activity occurs within that window. This endpoint is publicly accessible but validates token authenticity through cryptographic signature verification.\n\nRefresh Token Validation:\n- WHEN an administrator submits a refresh token, THE system SHALL extract the token from request body\n- THE system SHALL validate refresh token has correct format (valid JWT with three Base64-encoded sections)\n- THE system SHALL decode refresh token header and verify algorithm matches expected value (HS256)\n- THE system SHALL verify refresh token signature using the refresh token signing key, ensuring token has not been tampered with\n- IF signature verification fails, THE system SHALL return HTTP 401 (Unauthorized) with error code 'TODOAPP-AUTH-004' and message 'Invalid refresh token. Please log in again.'\n- THE system SHALL decode refresh token payload and extract claims: administratorId, email, role, tokenType ('refresh'), iat (issued at), exp (expiration timestamp)\n- IF token payload is malformed or missing required claims, THE system SHALL return HTTP 401 (Unauthorized) with error code 'TODOAPP-AUTH-005' and message 'Refresh token is invalid. Please log in again.'\n\nToken Expiration Verification:\n- WHEN refresh token claims extracted, THE system SHALL compare token's exp (expiration) claim to current Unix timestamp\n- IF current time >= token.exp, THE system SHALL treat token as expired\n- IF refresh token is expired, THE system SHALL return HTTP 401 (Unauthorized) with error code 'TODOAPP-AUTH-002' and message 'Your refresh token has expired. Please log in again.'\n- THE system SHALL include hint in error message: 'Refresh tokens expire after 7 days of inactivity. Please log in to start a new session.'\n\nAdministrator Account Verification:\n- WHEN refresh token is valid and not expired, THE system SHALL extract administratorId from token claims\n- THE system SHALL query todo_app_administrator table for account with matching ID\n- IF administrator account does not exist, THE system SHALL return HTTP 404 (Not Found) with error code 'TODOAPP-AUTH-006' and message 'Administrator account not found.'\n- WHEN administrator account found, THE system SHALL verify account status is 'active' (not 'inactive' or 'suspended')\n- IF administrator status is not 'active', THE system SHALL return HTTP 403 (Forbidden) with error code 'TODOAPP-AUTH-007' and message 'Administrator account is inactive. Access denied.'\n- THE system SHALL verify email_verified is true for the account\n- IF email not verified, THE system SHALL return HTTP 403 (Forbidden) with error code 'TODOAPP-AUTH-003' and message 'Email verification required before token refresh.'\n\nNew Access Token Generation:\n- WHEN all validation checks pass, THE system SHALL generate new JWT access token with administrator claims\n- THE system SHALL create access token with header: {\"alg\": \"HS256\", \"typ\": \"JWT\"}\n- THE system SHALL create access token payload containing: userId (administrator UUID from refresh token), email (administrator email from refresh token), role: 'administrator', isAdmin: true, adminLevel (from administrator account record), iat (current Unix timestamp), exp (current Unix timestamp + 900 seconds for 15-minute expiration), tokenType: 'access'\n- THE system SHALL sign access token using HMAC-SHA256 with access token signing key\n- THE system SHALL optionally generate new refresh token with 7-day expiration for token rotation security: iat (current timestamp), exp (current timestamp + 604800 seconds), tokenType: 'refresh'\n\nResponse and Session Handling:\n- WHEN tokens generated successfully, THE system SHALL return HTTP 200 (OK) status code\n- THE system SHALL return response object containing: access_token (new JWT access token), token_type: 'Bearer', expires_in (900 seconds), refresh_token (optional new refresh token if rotating), administrator_id, email, admin_level\n- THE system SHALL transmit access token to client via httpOnly secure cookie (preferred) or in response body\n- THE system SHALL NOT include password hash or sensitive account information in response\n- THE system SHALL update administrator's last_login_at to current timestamp even though this is not a full login\n\nAudit and Security Logging:\n- THE system SHALL create security event log entry with: event_type 'TOKEN_REFRESH', severity_level 'LOW', event_source 'TOKEN_REFRESH_ENDPOINT', event_description 'Administrator token refreshed', user_id (administrator ID), user_email (administrator email), ip_address (from request), action_taken 'TOKEN_ISSUED', created_at (timestamp)\n- THE system SHALL create audit log entry with: action_type 'TOKEN_REFRESH', entity_type 'ADMIN_SESSION', entity_id (administrator ID), actor_type 'administrator', actor_id (administrator ID), operation_status 'SUCCESS', created_at (timestamp)\n- THE system SHALL log token refresh attempts (both successful and failed) for monitoring\n- THE system SHALL track refresh token usage for anomaly detection\n\nError Handling and Edge Cases:\n- IF refresh token was previously used for refresh (token rotation implemented), THE system SHALL return error 'TODOAPP-AUTH-008: This refresh token has already been used. Please log in again.' to prevent token reuse attacks\n- IF refresh token signature valid but account data changed since token issued, THE system SHALL generate new token with current account data\n- IF request missing refresh token entirely, THE system SHALL return HTTP 400 (Bad Request) with error code 'TODOAPP-AUTH-001' and message 'Refresh token is required.'\n- IF database connection fails during validation, THE system SHALL return error 'TODOAPP-SYS-001: Unable to process token refresh. Please try again.'\n- IF system time is significantly different from token creation time (clock skew), THE system SHALL attempt time synchronization\n- THE system SHALL implement rate limiting: maximum 100 refresh requests per minute per administrator to prevent token refresh abuse\n- THE system SHALL NOT reveal whether specific tokens exist in system through error messages\n\nSecurity Considerations:\n- THE system SHALL never log complete tokens in any logs; only log token identifiers if necessary\n- THE system SHALL transmit tokens only over HTTPS/TLS encrypted connections\n- THE system SHALL validate token signature with every refresh request using secure comparison functions\n- THE system SHALL use different signing keys for access tokens and refresh tokens\n- THE system SHALL implement token blacklist for revoked refresh tokens if needed\n- THE system SHALL validate user agent consistency if possible to detect token theft\n\nRelated Operations and Workflow:\n- Before token expires (15 minutes), administrator should call this refresh endpoint to maintain session\n- If refresh token expires (7 days without refresh), administrator must use login endpoint to authenticate again\n- Logout endpoint invalidates both access and refresh tokens\n- This endpoint should be called proactively when access token approaches expiration, not reactively after expiration\n- Integration with todo operations: all authenticated todo endpoints require valid, non-expired access token","accessor":["auth","administrator","refresh"]},{"specification":"User registration endpoint for creating new authenticated user accounts. This operation implements the user registration workflow, accepting email and password credentials, validating input according to security requirements, storing securely hashed passwords, and creating a new todo_app_authenticateduser record. The registration process includes email format validation, password strength validation (minimum 8 characters with uppercase, lowercase, digit, and special character), uniqueness verification against existing accounts, and automatic account creation in the 'active' status with email_verified set to false. Users must verify their email address through a confirmation link before gaining full account functionality, though the registration endpoint completes successfully upon account creation. This endpoint implements the foundational authentication workflow that enables users to create personal accounts for accessing the Todo list application.","path":"/todoApp/auth/register","method":"post","summary":"Register a new user account with email and password credentials","description":"Register a new user account by providing email address and password meeting security requirements. THE system SHALL validate email format conforming to RFC 5321 standard and reject invalid email addresses. THE system SHALL validate password contains minimum 8 characters including at least one uppercase letter, one lowercase letter, one numeric digit, and one special character (!@#$%^&*). THE system SHALL check email uniqueness and reject if email already registered. THE system SHALL securely hash password using bcrypt with minimum 10 rounds and unique salt before storage. THE system SHALL create new todo_app_authenticateduser record with email, password_hash, status='active', email_verified=false, created_at and updated_at set to current UTC timestamp, and all other fields initialized appropriately.\n\nUpon successful registration, THE system SHALL return HTTP 201 (Created) status with newly created user details (id, email, created_at) and send verification email to the provided address containing verification link with 24-hour expiration token. THE user must verify email within 24 hours to fully activate account and gain login capability. THE registration endpoint completes successfully regardless of email verification completion.\n\nIF email is already registered, THE system SHALL return HTTP 409 (Conflict) with error message indicating email already exists and suggesting login or using different email. IF password fails validation, THE system SHALL return HTTP 400 (Bad Request) with specific error message indicating which password requirement was not met. IF email format is invalid, THE system SHALL return HTTP 400 (Bad Request) with error message indicating invalid email format.","parameters":[],"requestBody":{"description":"User registration credentials including email and password meeting security requirements","typeName":"ITodoAppAuthenticatedUser.IRegister"},"responseBody":{"description":"Newly created user account with registration confirmation and email verification requirement notice","typeName":"ITodoAppAuthenticatedUser.IRegistered"},"authorizationRoles":[],"name":"register","authorizationRole":null,"authorizationType":null,"prerequisites":[],"accessor":["todoApp","auth","register"]},{"specification":"User authentication endpoint for logging in existing registered users. This operation implements the login workflow, accepting email and password credentials, validating against stored credentials in todo_app_authenticateduser table, and issuing JWT authentication tokens upon successful authentication. The login process includes verification that email exists in database, secure password comparison against stored hash (using bcrypt verification), account status validation (must be 'active'), email verification confirmation (must be email_verified=true), and account lockout checking (locked_until must be null or in past). Upon successful authentication, THE system generates JWT token containing userId, email, role='authenticatedUser', iat (issued at), exp (expiration=15 minutes), and tokenType='access', signs with HMAC-SHA256, and returns to client via httpOnly secure cookie or response body. The token enables subsequent authenticated requests by including in Authorization header as 'Bearer [token]'.\n\nFailed login attempts are tracked through todo_app_failed_login_attempts table with email_address, failure_reason, ip_address, and attempt_number_in_window fields. After 5 failed attempts within 15-minute window, THE system SHALL lock account by setting locked_until to 15 minutes in future, preventing additional login attempts until lockout expires. THE system displays generic error message 'Invalid email or password' for both invalid email and invalid password scenarios to prevent user enumeration attacks. Successful login updates last_login_at timestamp on todo_app_authenticateduser record to current UTC time for activity tracking.\n\nIF email does not exist in database, THE system SHALL return HTTP 401 (Unauthorized) with generic error message 'Invalid email or password'. IF password is incorrect, THE system SHALL return HTTP 401 (Unauthorized) with same generic error message, increment failed_login_attempts counter, and check for lockout threshold. IF account is locked, THE system SHALL return HTTP 429 (Too Many Requests) with error message indicating account locked and suggesting retry after lockout period. IF email not yet verified, THE system SHALL return HTTP 403 (Forbidden) with error message indicating email verification required. IF account status is not 'active', THE system SHALL return HTTP 403 (Forbidden) with error message indicating account disabled or inactive.","path":"/todoApp/auth/login","method":"post","summary":"Authenticate user and issue JWT access token for authenticated requests","description":"Authenticate existing user account by providing email and password credentials matching registered account. THE system SHALL verify email exists in todo_app_authenticateduser table by querying on email field using case-insensitive comparison. THE system SHALL validate password by hashing submitted password using same bcrypt algorithm and salt as stored password_hash, then comparing computed hash to stored hash value. THE system SHALL verify account status equals 'active' preventing login with inactive or locked accounts. THE system SHALL verify email_verified flag is true, requiring email verification before login access. THE system SHALL check locked_until timestamp is null or in past, denying login if account currently locked.\n\nUpon successful authentication after all validations pass, THE system SHALL:\n1. Generate JWT access token containing userId from todo_app_authenticateduser.id, email address, role='authenticatedUser', iat set to current Unix timestamp, exp set to iat + 900 seconds (15 minutes), tokenType='access'\n2. Sign token using HMAC-SHA256 algorithm with secure cryptographic key\n3. Reset failed_login_attempts counter to 0 for the user\n4. Update last_login_at timestamp on user record to current UTC time\n5. Return HTTP 200 (OK) with token and user details\n6. Log successful authentication in todo_app_audit_logs with action_type='LOGIN', operation_status='SUCCESS'\n\nThe issued JWT token SHALL be transmitted to client via httpOnly secure cookie (preferred for security) or in response body for client-side storage. Client SHALL include token in Authorization header of all subsequent requests as 'Bearer [token]' for authentication. Token automatically expires after 15 minutes requiring re-authentication.\n\nFor failed authentication, THE system SHALL track attempt in todo_app_failed_login_attempts with email_address, failure_reason ('INVALID_EMAIL' or 'INVALID_PASSWORD'), ip_address, and attempt_number_in_window calculated as count of failures for this email in last 15 minutes. After 5 failed attempts within 15 minutes, THE system SHALL set locked_until to current time + 15 minutes on todo_app_authenticateduser record and update lockout_status in failed_login_attempts to 'LOCKED'. THE system SHALL return HTTP 401 (Unauthorized) with error message 'Invalid email or password' for both invalid email and invalid password to prevent user enumeration. THE system SHALL return HTTP 429 (Too Many Requests) if account currently locked with message indicating lockout period remaining.\n\nGeneric error message 'Invalid email or password' is used intentionally for both email not found and password mismatch scenarios. This prevents attackers from determining which accounts exist in the system, protecting user privacy and security. THE system logs failure_reason internally ('INVALID_EMAIL' vs 'INVALID_PASSWORD') for administrator analysis and security monitoring, but this distinction is never revealed to the requesting user.","parameters":[],"requestBody":{"description":"User login credentials including email and password for authentication","typeName":"ITodoAppAuthenticatedUser.ILogin"},"responseBody":{"description":"JWT access token and authenticated user information confirming successful login","typeName":"ITodoAppAuthenticatedUser.ILoggedIn"},"authorizationRoles":[],"name":"login","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoApp/auth/register","method":"post"},"description":"User account must be registered and email verified before login is possible"}],"accessor":["todoApp","auth","login"]},{"specification":"This operation refreshes an expired or expiring JWT access token using the refresh token mechanism, allowing the user to obtain a new access token without requiring re-authentication through username and password. The refresh token is validated to ensure it has not expired, has not been used previously (one-time use tokens), and matches the authenticated user's session. Upon successful validation, a new access token is issued with standard 15-minute expiration, and the refresh token is rotated (invalidated and replaced with a new refresh token) to maintain token rotation security. This endpoint is critical for maintaining session continuity while preventing indefinite token validity and enabling detection of token compromise.\n\n**IMPLEMENTATION NOTE**: This operation REQUIRES a token storage table in the database (e.g., `todo_app_jwt_tokens`) to track token state, expiration, revocation status, and enforce one-time use. The current Prisma schema does not include this table. Before implementing, either add the required schema table or simplify the operation to basic token re-issue without rotation enforcement.","path":"/todoApp/auth/refresh","method":"post","summary":"Refresh authentication token to obtain a new access token","description":"Refresh the user's authentication token by submitting a valid refresh token. This operation extends the user's session without requiring re-entry of credentials, improving user experience while maintaining security through token expiration and rotation.\n\nWHEN an authenticated user's access token approaches expiration or has expired, THE user can submit their refresh token to obtain a new access token. THE system SHALL validate the refresh token to ensure it is valid, not expired, and has not been previously used (preventing token replay attacks). THE refresh token must match the user's current session context.\n\nUpon successful refresh token validation, THE system SHALL generate a new access token with standard 15-minute expiration time. THE system SHALL also issue a replacement refresh token (token rotation) to maintain security. THE previous refresh token is invalidated and cannot be reused, detecting any unauthorized token usage attempts.\n\nThe new tokens are returned to the client for use in subsequent authenticated requests. This operation maintains session continuity across token expirations while ensuring strong security through automatic token rotation and one-time use enforcement. The refresh token endpoint is protected and only accepts requests with valid, non-expired refresh tokens.\n\n**SECURITY REQUIREMENT**: Token storage and revocation must be implemented in the database. Without this infrastructure, the promised one-time use enforcement and token rotation cannot be properly enforced.","parameters":[],"requestBody":{"description":"Refresh token request containing the user's current refresh token for validation and token rotation","typeName":"ITodoAppAuth.IRefreshTokenRequest"},"responseBody":{"description":"New access token and refreshed authentication credentials following successful refresh token validation","typeName":"ITodoAppAuth.ITokenResponse"},"authorizationType":null,"authorizationRole":null,"name":"refresh","prerequisites":[],"accessor":["todoApp","auth","refresh"]},{"specification":"This operation terminates the user's authenticated session by invalidating the JWT access token and refresh tokens. Upon logout, all tokens are revoked and removed from the client, preventing further API requests with the invalidated credentials. The server marks the tokens as revoked in security logs for audit trail purposes. Logout is a clean termination of session, ensuring user data is not exposed if the device is accessed by another person. The logout endpoint is protected to prevent unauthorized session termination attempts.\n\n**IMPLEMENTATION NOTE**: This operation can be partially implemented with the current schema (logging logout events to `todo_app_security_events` is fully supported). However, to properly ENFORCE token revocation on the server side, a token storage table is required to mark tokens as invalid. Without this, logout only removes client-side tokens but the server will accept the same token until it naturally expires (15 minutes).","path":"/todoApp/auth/logout","method":"post","summary":"Logout user and invalidate authentication tokens","description":"Terminate the user's current authenticated session by invalidating all JWT tokens (access token and refresh token). This operation removes the user's authentication credentials, preventing further access to protected resources with the invalidated tokens. All tokens are revoked and logged for security audit trail purposes.\n\nWHEN an authenticated user chooses to logout, THE system SHALL invalidate their current access token immediately. THE system SHALL also revoke any associated refresh tokens to prevent token reuse. THE server marks the tokens as revoked in security event logs for forensic and compliance audit trail purposes.\n\nUpon successful logout, THE system SHALL return confirmation to the client, indicating the session has been terminated. THE client application SHALL remove stored tokens from secure storage (httpOnly cookies, local storage, or session storage). THE user is redirected to the login page or public landing page, preventing access to protected resources.\n\nLogout is a clean termination that ensures session isolation and data security, particularly important on shared or public devices where the next user should not have access to the previous user's authenticated session. The logout operation is protected by the current access token requirement, preventing unauthorized session termination by unauthenticated users.\n\n**SECURITY CONSIDERATION**: To properly enforce logout server-side (prevent token reuse after logout), implement token revocation checking in authentication middleware. With current implementation, this requires a token storage table. Without revocation enforcement, logout removes client tokens but server continues accepting the token until natural 15-minute expiration.","parameters":[],"requestBody":null,"responseBody":{"description":"Logout confirmation indicating successful session termination and token revocation","typeName":"ITodoAppAuth.ILogoutResponse"},"authorizationType":null,"authorizationRole":null,"name":"logout","prerequisites":[],"accessor":["todoApp","auth","logout"]},{"specification":"This operation retrieves the complete authenticated user profile information for the currently logged-in user. The endpoint returns comprehensive user account details including email address, profile information, account status, and account metadata. This operation is associated with the todo_app_authenticateduser table from the Prisma schema. The user can only retrieve their own profile information; requesting another user's profile will result in authorization error. The operation supports user account management and profile viewing functionality. This is a read-only operation that does not modify any data. The response includes all publicly accessible user account fields and timestamps for account lifecycle tracking.","path":"/todoApp/authenticatedUser/auth/profile","method":"get","summary":"Retrieve authenticated user profile information","description":"This operation retrieves the complete profile information of the currently authenticated user. The endpoint returns comprehensive user account details associated with the todo_app_authenticateduser table, including email address, first name, last name, account status, email verification status, last login timestamp, account creation timestamp, and account modification timestamp.\n\nThe operation is read-only and does not modify any user data. Only the authenticated user can retrieve their own profile information. WHEN an authenticated user requests their profile, THE system SHALL return all profile fields for that user. WHEN a user attempts to retrieve another user's profile, THE system SHALL deny access with authorization error.\n\nSecurity considerations include authentication verification before profile retrieval. The system SHALL verify that the requesting user has a valid JWT token or authentication session. WHEN a user's session token is expired or invalid, THE system SHALL return HTTP 401 Unauthorized and require re-authentication.\n\nThe operation integrates with the todo_app_authenticateduser table from the Prisma schema, returning only fields relevant to user profile display and management. The response includes account lifecycle information (creation time, last login) and account status information (active/inactive/locked status) that users need for account management decisions.\n\nRelated operations include PUT /auth/profile for updating profile information and DELETE /auth/profile (future enhancement) for account deletion requests. Users may call GET /auth/profile before PUT /auth/profile to retrieve current values for editing, or to verify their current account information is correct.","parameters":[],"requestBody":null,"responseBody":{"description":"Complete authenticated user profile information including account details and lifecycle metadata","typeName":"ITodoAppAuthenticatedUser"},"authorizationRoles":["authenticatedUser"],"name":"at","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[],"accessor":["todoApp","authenticatedUser","auth","profile","at"]},{"specification":"This operation updates the authenticated user's profile information. The endpoint accepts user profile updates for email address, first name, and last name fields. The operation is associated with the todo_app_authenticateduser table from the Prisma schema. The user can only update their own profile information; attempting to update another user's profile will result in authorization error. The operation validates all input data before processing updates and applies changes to persistent storage. Success response returns the updated profile with all current values. This operation supports user account management functionality and enables users to keep their profile information current.","path":"/todoApp/authenticatedUser/auth/profile","method":"put","summary":"Update authenticated user profile information","description":"This operation updates the profile information of the currently authenticated user. The endpoint accepts updates to user account details stored in the todo_app_authenticateduser table, including email address, first name, and last name fields. The operation validates all submitted data before applying updates to ensure data integrity and consistency.\n\nAuthentication and authorization verification is required before processing updates. WHEN an authenticated user submits profile update request, THE system SHALL verify the user's authentication status and authorization to modify their own profile. WHEN a user attempts to update another user's profile, THE system SHALL deny access with HTTP 403 Forbidden authorization error.\n\nThe operation validates email address format and uniqueness before applying updates. WHEN a user updates their email address, THE system SHALL verify the new email follows RFC 5321 standard format. THE system SHALL check that the new email is not already registered to another account. WHEN email validation fails, THE system SHALL return HTTP 400 Bad Request with specific validation error message.\n\nName field validation ensures data quality. WHEN a user submits first name or last name, THE system SHALL validate that field length does not exceed reasonable limits (typically 100 characters). THE system SHALL accept any UTF-8 characters in name fields including international characters and accents.\n\nThe operation updates the modified timestamp (updated_at) to current UTC time upon successful update. The account creation timestamp (created_at) remains immutable. Success response returns HTTP 200 OK with complete updated profile data reflecting all changes. The system automatically logs the profile modification for audit trail compliance.\n\nRelated operations include GET /auth/profile for retrieving current profile before editing, and authentication endpoints for changing password or verifying email separately. Users typically call GET /auth/profile first to retrieve current values, then submit PUT /auth/profile with modified values.","parameters":[],"requestBody":{"description":"User profile update information including email, first name, and last name fields","typeName":"ITodoAppAuthenticatedUser.IUpdate"},"responseBody":{"description":"Updated authenticated user profile information with all current values after modifications","typeName":"ITodoAppAuthenticatedUser"},"authorizationRoles":["authenticatedUser"],"name":"update","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoApp/auth/register","method":"post"},"description":"Authenticated user account must be created before profile can be retrieved or updated"}],"accessor":["todoApp","authenticatedUser","auth","profile","update"]},{"specification":"This operation handles email verification for newly registered user accounts. When a user registers for the Todo application, they receive a verification email containing a time-limited token. This endpoint validates that token and confirms the user's email address, enabling full account activation. The operation is associated with the todo_app_authenticateduser table, updating the email_verified and email_verified_at fields upon successful verification. Email verification tokens are stored externally (in Redis, Memcached, or a separate temporary table) with cryptographically secure random generation. This critical step completes the registration process and allows the user to fully access the application's todo management features.","path":"/todoApp/auth/verify-email","method":"post","summary":"Verify user email address with verification token to complete account registration","description":"This operation processes email verification for newly registered user accounts. When a user completes registration, THE system SHALL send a verification email containing a unique time-limited token. THE user clicks the verification link containing this token and submits it through this endpoint.\n\nWHEN a user submits a valid verification token, THE system SHALL:\n1. Validate that the token format is correct and matches expected format (32+ character Base64-encoded string)\n2. Check that the token has not expired (24 hours validity from generation)\n3. Verify that the token maps to an existing user account awaiting email verification\n4. Confirm the associated email address has not been verified previously\n5. Update the user's email_verified field to true in todo_app_authenticateduser\n6. Record the verification timestamp in email_verified_at (current UTC time)\n7. Invalidate/delete the token from external storage to prevent reuse\n8. Return success response enabling user to proceed to login\n\nWHEN validation fails, THE system SHALL display appropriate error message:\n- Invalid token format: \"TODOAPP-VAL-009: Verification link is invalid or malformed. Please check the link and try again.\"\n- Token expired: \"TODOAPP-AUTH-005: Verification link has expired. Please request a new verification email from your account settings.\"\n- Token does not exist or already used: \"TODOAPP-AUTH-006: This verification link has already been used or is no longer valid. Please log in directly or request a new verification link.\"\n- User account not found: \"TODOAPP-AUTH-007: User account not found. Please register first.\"\n- Email already verified: \"TODOAPP-AUTH-008: This email has already been verified. You can log in directly.\"\n\nEmail verification tokens are stored in external key-value store (Redis/Memcached) or temporary token table (todo_app_email_verification_tokens) with fields: token_hash, user_id, email_address, token_expires_at. Tokens are cryptographically secure (minimum 256-bit entropy), Base64 URL-safe encoded, and single-use. Upon successful verification, the token is immediately deleted from storage.\n\nThis email verification step is MANDATORY before users can log in and access their todo list. This protects against invalid email addresses and confirms the user controls the email account used for registration. Upon successful verification, the user can immediately log in with their registered credentials and begin managing their todos.","parameters":[],"requestBody":{"description":"Email verification token and related verification parameters","typeName":"ITodoAppAuth.IVerifyEmailRequest"},"responseBody":{"description":"Confirmation of successful email verification and account activation status","typeName":"ITodoAppAuth.IVerifyEmailResponse"},"authorizationRoles":[],"name":"verifyEmail","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoApp/auth/register","method":"post"},"description":"User account must be created through registration before email verification token can be generated and sent to the user"}],"accessor":["todoApp","auth","verify_email","verifyEmail"]},{"specification":"This operation initiates the password reset process for users who have forgotten their password or need to reset it for security reasons. When a user requests password reset, they provide their email address. The system validates the email exists in the todo_app_authenticateduser database, generates a time-limited password reset token with cryptographically secure randomization, and sends it via email to the registered address. This endpoint does not directly reset the password; instead, it triggers the password reset workflow by issuing the reset token that the user will use in a subsequent POST /todoApp/auth/reset-password endpoint to actually change their password. This design prevents users from forcibly changing other users' passwords and ensures only email account holders can reset the password. The operation implements constant-time operations to prevent timing-based user enumeration attacks.","path":"/todoApp/auth/request-password-reset","method":"post","summary":"Request password reset token to be sent to registered email address","description":"This operation initiates the password reset workflow for users who have forgotten their password or need to reset it. The operation handles the first step: validating the user's email address and issuing a time-limited password reset token.\n\nWHEN a user submits their email address through this endpoint, THE system SHALL:\n1. Validate that an email address has been provided and is in valid format (RFC 5321)\n2. Use constant-time operations to search the todo_app_authenticateduser table for an account matching the provided email\n3. Generate a cryptographically secure password reset token (minimum 256-bit entropy, 32+ characters, Base64 URL-safe encoded)\n4. Set token expiration to 1 hour (3600 seconds) from generation time\n5. Store the token securely in external key-value store (Redis/Memcached) or temporary token table (todo_app_password_reset_tokens) with fields: token_hash, user_id, email_address, token_expires_at\n6. Compose a password reset email containing: secure reset link with token, token expiration time, warning about unsolicited requests, support contact information\n7. Send email to the registered address from no-reply address with clear branding\n8. Apply rate limiting: maximum 3 password reset requests per email address per 15 minutes; return HTTP 429 if exceeded\n\nWHEN email is not found OR found, THE system SHALL display identical response message: \"If an account exists for this email, you will receive a password reset email shortly. Please check your inbox and spam folder.\"\n\nTHE system SHALL use constant-time operations or introduce random delays (50-500ms) to ensure response time is identical whether the email exists in the system or not, preventing timing-based user enumeration attacks where attackers measure response times to enumerate valid email addresses.\n\nThe password reset email SHALL contain a secure link that directs the user to a password reset page with the token pre-filled. The user then submits their new password through the POST /todoApp/auth/reset-password endpoint to complete the password reset.\n\nThis operation does not directly reset the password; it only validates and initiates the reset workflow. This prevents:\n- Unauthorized password resets through enumeration attacks\n- Account takeover by attackers guessing email addresses\n- Direct password resets without email confirmation\n- Timing-based user enumeration\n\nThe reset token is single-use and expires after 1 hour for security. Multiple reset requests will generate new tokens, invalidating previous tokens. Upon successful password reset through the reset endpoint, the user can log in with their new password and regain access to their todo list.","parameters":[],"requestBody":{"description":"Email address for which password reset is requested","typeName":"ITodoAppAuth.IRequestPasswordResetRequest"},"responseBody":{"description":"Confirmation that password reset email has been sent (generic message to prevent user enumeration)","typeName":"ITodoAppAuth.IRequestPasswordResetResponse"},"authorizationRoles":[],"name":"requestPasswordReset","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoApp/auth/register","method":"post"},"description":"User account must exist in the system before password reset token can be issued for that email address"}],"accessor":["todoApp","auth","request_password_reset","requestPasswordReset"]},{"specification":"This operation enables authenticated users to securely reset their forgotten password by providing their email address. The system verifies the email exists in the database, generates a time-limited password reset token (valid for 24 hours), and sends a password reset email containing a secure link with the token. Upon successful token delivery, users receive confirmation they can use the reset link to create a new password. This operation is part of the authentication and account recovery workflow in the Todo List Application, operating on the todo_app_authenticateduser table from the Prisma schema. The operation implements security best practices by using time-limited tokens, validating email existence, and sending verification through secure email channels.","path":"/todoApp/auth/reset-password","method":"post","summary":"Request password reset token for forgotten password recovery","description":"This operation initiates the password reset process for users who have forgotten their password. When an authenticated or unauthenticated user submits their email address, THE system SHALL verify that an account with that email exists in the todo_app_authenticateduser table. If the account exists, THE system SHALL generate a cryptographically secure, time-limited reset token valid for exactly 24 hours and store it in a secure temporary storage or token table.\n\nTHE system SHALL send a password reset email to the provided email address containing a secure link that includes the reset token. The email MUST be sent immediately upon successful token generation. THE system SHALL display a confirmation message to the user indicating that if the email address is associated with an account, a password reset link will be sent shortly.\n\nFor security purposes, THE system SHALL use the same response message whether the email exists or not, preventing user enumeration attacks. This means the system returns success message for both valid and invalid email addresses to prevent attackers from determining which emails are registered.\n\nThe reset token MUST be cryptographically random, sufficiently long (minimum 32 characters), and stored separately from the user password hash. THE token SHALL be marked with creation time and expiration time (24 hours after creation) to enforce time-limited validity. Once a user uses the token to reset their password, THE system SHALL immediately invalidate the token preventing reuse.\n\nIf the system cannot send the email due to mail server issues, THE system SHALL retry up to 3 times with exponential backoff (1 second, 2 seconds, 4 seconds). If all retry attempts fail, THE system SHALL log the failure for administrator investigation and display message 'Unable to send reset email. Please try again later or contact support.' to the user.\n\nThis operation is GUEST/UNAUTHENTICATED accessible since users requesting password reset may not have valid sessions. THE operation integrates with the todo_app_authenticateduser table to verify email existence and store reset token state.","parameters":[],"requestBody":{"description":"User's email address for password reset request and verification","typeName":"ITodoAppAuth.IResetPasswordRequest"},"responseBody":{"description":"Confirmation that password reset email has been sent (generic message for security)","typeName":"ITodoAppAuth.IResetPasswordResponse"},"authorizationRoles":[],"name":"resetPassword","authorizationRole":null,"authorizationType":null,"prerequisites":[],"accessor":["todoApp","auth","reset_password","resetPassword"]},{"specification":"This operation enables authenticated users to change their current password by providing their existing password and new password. The system verifies the user is authenticated, validates the existing password matches the stored hash, enforces new password strength requirements, hashes and stores the new password, and invalidates all existing JWT tokens for security. This operation applies to the todo_app_authenticateduser table from the Prisma schema. The operation implements comprehensive security measures including password strength validation, secure hashing, and token invalidation to maintain account security and prevent unauthorized access through compromised passwords.","path":"/todoApp/authenticatedUser/auth/change-password","method":"post","summary":"Change authenticated user's password with current password verification","description":"This operation allows authenticated users to securely change their account password by providing their current password and a new password. THE system MUST verify that the user is authenticated through valid JWT token before processing this request. If the user is not authenticated, THE system SHALL return HTTP 401 Unauthorized with error code 'AUTH_NOT_AUTHENTICATED'.\n\nWHEN the change password request is received, THE system SHALL extract the user's ID from the authenticated session/JWT token and retrieve the corresponding user record from the todo_app_authenticateduser table. THE system SHALL then validate the provided current password by hashing it using the same algorithm and salt as the stored password hash, comparing the computed hash to the stored hash_password field.\n\nIF the current password does not match the stored hash, THE system SHALL reject the request with error 'AUTH_CURRENT_PASSWORD_INVALID: Current password is incorrect. Please try again.' and return HTTP 401 status. THE system SHALL NOT reveal whether the user exists or whether the password is correct (generic error message).\n\nIF the current password is valid, THE system SHALL validate the new password against security requirements: minimum 8 characters, maximum 128 characters, includes at least one uppercase letter (A-Z), includes at least one lowercase letter (a-z), includes at least one numeric digit (0-9), includes at least one special character (!@#$%^&*). If new password fails validation, THE system SHALL return HTTP 400 Bad Request with specific error message indicating which requirement is not met.\n\nTHE system SHALL also prevent password reuse by checking the last 5 passwords used by this user. If the new password matches any of the last 5 passwords, THE system SHALL reject with error 'AUTH_PASSWORD_REUSED: Cannot reuse a recently used password. Please choose a different password.' THE system maintains salted hashes of previous passwords for secure comparison.\n\nIF the new password passes all validation checks, THE system SHALL generate a new cryptographically secure salt, hash the new password using bcrypt with minimum 10 rounds or Argon2 with equivalent strength, and store the new password hash in the password_hash field. THE system SHALL automatically update the password_changed_at timestamp in the todo_app_authenticateduser table to current UTC time.\n\nFor security purposes, after successful password change, THE system SHALL invalidate all existing JWT tokens issued to this user to force re-authentication. This prevents compromise scenarios where an attacker with an old token could continue accessing the account after password change. THE system SHALL return HTTP 200 OK with confirmation message indicating the password has been changed successfully and will need to re-authenticate.\n\nTHE system SHALL log this password change event in the todo_app_audit_logs table with action_type 'UPDATE', entity_type 'USER_ACCOUNT', actor_id set to the user ID, and operation_status 'SUCCESS'. THE system SHALL record the operation in todo_app_security_events table as 'PASSWORD_CHANGE' event with severity_level 'MEDIUM' for security monitoring and compliance purposes.\n\nIF password change fails due to database errors, THE system SHALL return HTTP 500 Server Error with generic message 'Unable to change password. Please try again.' and log the error in todo_app_error_logs table for administrator investigation. THE system SHALL NOT proceed with token invalidation if password update fails.","parameters":[],"requestBody":{"description":"Current password for verification and new password meeting security requirements","typeName":"ITodoAppAuth.IChangePasswordRequest"},"responseBody":{"description":"Confirmation that password has been changed successfully and session has been invalidated","typeName":"ITodoAppAuth.IChangePasswordResponse"},"authorizationRoles":["authenticatedUser"],"name":"changePassword","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[],"accessor":["todoApp","authenticatedUser","auth","change_password","changePassword"]},{"specification":"DELETE /auth/delete-account - Account Deletion Operation\n\nThis operation enables authenticated users to permanently delete their todo application account and all associated data. The account deletion implements a soft delete pattern with a 30-day recovery window before permanent removal from the system. During the recovery period, users can restore their account and all associated todos without data loss. After 30 days, the account and all data are permanently purged.\n\nThe operation targets the todo_app_authenticateduser table in the Prisma schema, which stores all user account information including email, password hash, and account metadata. When a user requests account deletion, the system marks the account as deleted by setting the deleted_at timestamp, making it invisible in normal application operations while preserving the data for the recovery window.\n\nThis is a critical operation that affects user data retention and privacy compliance. The implementation must ensure data integrity, provide clear user confirmation, and maintain audit trails for regulatory requirements (GDPR, CCPA). Users must explicitly confirm account deletion through multiple verification steps to prevent accidental data loss.","path":"/todoApp/authenticatedUser/auth/delete-account","method":"delete","summary":"Delete authenticated user account and associated todos with 30-day recovery period","description":"Permanently delete the authenticated user's account and all associated todo data from the application. This operation implements soft delete with a 30-day recovery window before permanent data purge.\n\nWHEN an authenticated user submits an account deletion request, THE system SHALL verify the user's identity and require explicit confirmation. THE system SHALL mark the user account as deleted by setting the deleted_at timestamp to the current UTC time. The user's email address is released and can be registered by other users immediately, while the account data itself remains in the database for 30 days allowing restoration.\n\nDuring the 30-day recovery period, deleted users cannot log in, and their todos are not visible in normal application operations. However, users can restore their complete account including all todos through a recovery link sent to their registered email address. After 30 days have elapsed, the system SHALL automatically and permanently purge all account data, associated todos, audit logs, and security events related to the deleted account.\n\nThis operation has critical privacy and compliance implications. The system SHALL create comprehensive audit logs documenting the deletion request, user confirmation, deletion timestamp, and scheduled permanent purge date. Security events are recorded to support regulatory compliance and investigations. Users receive notification emails at deletion time and 25-day warning emails before permanent purge if they haven't recovered their account.\n\nThe deletion affects multiple related entities: the user account itself, all todos owned by the user, all security events and audit logs associated with the user, and all session tokens. All references are properly cascaded to maintain data integrity. Failed deletion attempts are logged and the user is informed with recovery options.","parameters":[],"requestBody":{"description":"Account deletion confirmation with user authentication and explicit consent","typeName":"ITodoAppAuthenticatedUser.IDeleteRequest"},"responseBody":{"description":"Confirmation of account deletion with recovery information","typeName":"ITodoAppAuthenticatedUser.IDeleteResponse"},"authorizationRoles":["authenticatedUser"],"name":"deleteAccount","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[],"accessor":["todoApp","authenticatedUser","auth","delete_account","deleteAccount"]},{"specification":"PATCH /todos - Search and Retrieve Todos Operation\n\nThis operation provides comprehensive search, filtering, and pagination capabilities for retrieving todos. It operates on the todo_app_todos table from the Prisma schema, returning a paginated list of todos matching the search criteria. The operation supports complex query parameters for filtering by completion status, searching by title/description content, sorting by various fields, and paginating through large result sets.\n\nThe operation is designed as a PATCH request (rather than GET) to support complex request bodies with multiple search parameters, filtering options, and pagination settings. This enables flexible query composition while maintaining REST principles for data retrieval.\n\nThe system retrieves all todos belonging to the authenticated user based on their user context from the authentication token. User isolation is enforced at the database level to prevent cross-user data access. Todos marked as deleted (deleted_at is not null) are excluded from results unless explicitly requested through search filters.\n\nSearch and filtering supports matching against todo titles and descriptions using fuzzy text search and exact matching. Completion status filtering enables viewing only completed todos, only incomplete todos, or all todos. Sorting options include creation date, modification date, completion status, or title alphabetically. Results are paginated with configurable page size and offset parameters.","path":"/todoApp/authenticatedUser/todos","method":"patch","summary":"Search, filter, and retrieve paginated list of user's todos with advanced query options","description":"Retrieve a filtered, sorted, and paginated list of todos belonging to the authenticated user. This operation supports complex search queries, multiple filtering criteria, sorting options, and pagination for efficient data retrieval.\n\nWHEN an authenticated user submits a search request for todos, THE system SHALL retrieve all todos owned by that user from the todo_app_todos table in the Prisma schema. THE system SHALL apply all specified filters, search criteria, and sorting before returning paginated results. THE system SHALL exclude deleted todos (where deleted_at is not null) from results unless the user explicitly requests to see deleted todos.\n\nSearch and Filter Capabilities:\n- WHEN a user provides a search term, THE system SHALL perform full-text search matching against todo titles and descriptions using fuzzy text matching and exact substring matching\n- WHEN a user specifies completion status filter (completed, incomplete, or all), THE system SHALL filter todos accordingly by the is_completed field\n- WHEN a user specifies a date range filter, THE system SHALL filter todos by creation date or modification date within the specified range\n- WHEN a user specifies sort order (creation_date, modification_date, title, completion_status), THE system SHALL organize results in the requested order\n- WHEN a user specifies sort direction (ascending, descending), THE system SHALL apply the specified direction\n\nPagination and Performance:\n- WHEN a user requests paginated results, THE system SHALL return todos in batches of configurable size (default 20 items per page, maximum 100)\n- THE system SHALL calculate total count of matching todos for pagination metadata\n- THE system SHALL return pagination information including current page, total pages, total count, page size\n- FOR large todo collections (100+ items), THE system SHALL load and sort only the requested page to optimize performance\n- THE system SHALL complete todo list retrieval within 500 milliseconds for lists under 500 items, within 1 second for lists up to 1000 items\n\nResponse Organization:\n- COMPLETED todos are returned first, followed by INCOMPLETE todos (when not explicitly sorted differently)\n- Within each completion status group, todos are sorted by creation date with newest first (most recent first)\n- Todos display complete information including ID, title, description, completion status, creation timestamp, modification timestamp\n\nAccess Control and Data Security:\n- WHEN a user requests todos, THE system SHALL return ONLY todos created by that user using their user ID from the authentication token\n- THE system SHALL NOT return todos created by other users under any circumstances\n- IF a user attempts to access another user's todos through manipulation of search parameters, THE system SHALL deny access and return authorization error\n\nError Handling and Edge Cases:\n- IF no todos match the search criteria, THE system SHALL return empty results list rather than an error\n- IF database query fails, THE system SHALL display error and provide retry options\n- IF search term contains special characters, THE system SHALL handle properly without SQL injection vulnerabilities\n- IF pagination parameters are invalid (negative page, invalid size), THE system SHALL default to valid parameters and notify user","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for todo list retrieval","typeName":"ITodoAppTodos.ISearchRequest"},"responseBody":{"description":"Paginated list of todos matching search and filter criteria","typeName":"IPageITodoAppTodos"},"authorizationRoles":["authenticatedUser"],"name":"index","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[],"accessor":["todoApp","authenticatedUser","todos","index"]},{"specification":"This operation enables authenticated users to create new todos in the Todo list application. When a user submits a POST request with a todo title and optional description, the system creates a new todo record in the database, automatically assigns a unique identifier (UUID), sets the initial completion status to incomplete, and records creation and modification timestamps. The created todo is immediately persisted to storage and associated with the authenticated user's account, enabling data isolation where each user can only manage their own todos. This operation validates the title field (1-255 characters, non-empty, non-whitespace) before creation and rejects invalid input with appropriate validation error messages. Response includes the complete created todo object with all properties (id, title, description, is_completed, created_at, updated_at) allowing the client to immediately display the new todo in the user's list without requiring a separate retrieval operation.","path":"/todoApp/todos","method":"post","summary":"Create a new todo with a title and optional description","description":"This operation enables authenticated users to create new todos by submitting a POST request with required title and optional description fields. The system performs comprehensive validation on the title field ensuring it is provided, non-empty, contains no whitespace-only content, and falls within the 1-255 character length requirement. Upon successful validation, the system automatically generates a unique UUID identifier for the todo, sets the initial completion status to false (incomplete), records the current UTC timestamp as both creation and modification time, and associates the todo with the authenticated user.\n\nThe todo is immediately persisted to the database with full ACID compliance ensuring atomicity and consistency. The system implements transaction-based storage ensuring either the complete todo is created with all properties or the operation fails cleanly without partial state. The response returns HTTP 201 (Created) status code along with the complete todo object including all assigned properties.\n\nData validation enforces these business rules: title field is mandatory and cannot be null, empty string, or contain only whitespace characters; title length must be between 1 and 255 characters inclusive; description field is optional with maximum 2000 characters. The system trims leading and trailing whitespace from titles before validation for seamless user experience.\n\nAuthorization is automatically enforced through the authenticated user context - the created todo is always associated with the user making the request using their unique user ID from the authentication token. Users cannot create todos for other users or without user association. The system maintains strict data ownership ensuring each user can only access and manage todos they created.\n\nError scenarios include validation failures (empty title, excessive length), network interruptions during save, and database errors. For transient failures, the system automatically retries up to 3 times with exponential backoff. User input is preserved in temporary storage for retry capability, preventing data loss during error conditions. Failed operations return appropriate HTTP status codes with user-friendly error messages explaining what went wrong and suggested corrective actions.","parameters":[],"requestBody":{"description":"Request payload containing todo creation data with required title and optional description fields","typeName":"ITodoAppTodo.ICreate"},"responseBody":{"description":"Complete created todo object with all assigned properties including unique identifier, title, completion status, and lifecycle timestamps","typeName":"ITodoAppTodo"},"authorizationRole":null,"authorizationType":null,"name":"create","prerequisites":[],"accessor":["todoApp","todos","create"]},{"specification":"This operation enables authenticated users to retrieve a specific todo by its unique identifier. When a user submits a GET request with a valid todo ID as path parameter, the system retrieves the complete todo record from persistent storage and returns it with all properties. The operation implements mandatory authorization checks verifying that the requesting user owns the requested todo before returning data - this ensures strict data isolation where users can only view todos they created. If a user attempts to access a todo they do not own, the system denies access with an authorization error without revealing whether the todo exists, preventing information disclosure attacks. The response includes all todo properties (id, title, description, completion status, creation timestamp, modification timestamp) enabling full display of todo details in the client application.","path":"/todoApp/todos/{todoId}","method":"get","summary":"Retrieve a specific todo by its unique identifier","description":"This operation enables authenticated users to retrieve detailed information about a specific todo they own by providing the todo's unique identifier in the request path. The system receives the todoId parameter, validates it as a valid UUID format, and queries the persistent storage layer to locate the corresponding todo record.\n\nAuthorization verification occurs before data retrieval, implementing strict ownership checks. The system compares the authenticated user's ID (from authentication token) against the requested todo's owner. If the user does not own the todo, the system returns HTTP 403 (Forbidden) error with message 'You do not have permission to access this todo'. Critically, the system returns the same error response whether the todo does not exist or the user lacks ownership, preventing user enumeration attacks where attackers could determine which todos exist in the system by analyzing error responses.\n\nUpon successful authorization verification, the system retrieves the complete todo record including all properties: unique identifier (UUID), title text, optional description, completion status (boolean), creation timestamp in ISO 8601 UTC format, and last modification timestamp. The response returns HTTP 200 (OK) status code with the complete todo object as JSON payload.\n\nData integrity is maintained throughout retrieval - the system returns the exact current state of the todo as stored in the database, reflecting any recent updates from other operations. Timestamps are preserved with millisecond precision for accurate change tracking. The operation is read-only and does not modify any data or state.\n\nError scenarios include invalid UUID format for todoId (returns HTTP 400 Bad Request with validation error), todo not found or unauthorized (returns HTTP 403 Forbidden with generic authorization error), and database retrieval failures (returns HTTP 500 Server Error with recovery guidance). For transient database errors, the system implements automatic retry with exponential backoff, attempting recovery transparently without blocking the user.","parameters":[{"name":"todoId","description":"Unique identifier of the specific todo to retrieve, in UUID format (36 characters with hyphens)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete todo object with all properties including identifier, title, description, completion status, and lifecycle timestamps","typeName":"ITodoAppTodo"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/todoApp/todos","method":"post"},"description":"A todo must be created before it can be retrieved by its ID"}],"accessor":["todoApp","todos","at"]},{"specification":"This operation updates an existing todo by its unique identifier. The system retrieves the todo from persistent storage, validates the authenticated user owns the todo, applies updates to specified properties (title and/or completion status), records the modification timestamp, and persists changes back to the database. The operation supports partial updates where only some properties need to be modified. All updates must pass validation according to business rules defined in the data requirements. The operation is restricted to the authenticated user who owns the todo; attempting to update another user's todo results in authorization error.","path":"/todoApp/authenticatedUser/todos/{todoId}","method":"put","summary":"Update an existing todo by ID","description":"This operation allows an authenticated user to update an existing todo item by providing the todo's unique identifier and the properties to modify. Users can update the todo's title (1-255 characters, non-empty) and/or completion status (incomplete or completed). The system validates that the authenticated user owns the todo before allowing any modifications. All updates are persisted immediately to the database and the modification timestamp is automatically updated to reflect the change. The operation returns the complete updated todo with all current properties including the updated modification timestamp.\n\nThe system verifies user ownership by comparing the authenticated user's ID from their session context to the todo's owner ID stored in the database. If the user does not own the requested todo, the system denies access with HTTP 403 Forbidden error. The system never reveals whether the todo exists or belongs to another user, preventing information disclosure attacks.\n\nValidation rules applied to updated title: minimum 1 character, maximum 255 characters, cannot be empty or whitespace-only. Validation rules applied to completion status: must be either 'incomplete' or 'completed' (case-sensitive), no other values accepted. If validation fails, the operation is rejected and the todo remains in its previous state with no changes applied.\n\nThe creation timestamp of the todo remains immutable and unchanged during updates. Only the modification timestamp is updated to the current UTC time whenever any property changes. This preserves the historical record of when the todo was originally created while tracking when it was last modified.\n\nPartial updates are supported, allowing users to update only the title without changing completion status, or update only the completion status without changing the title. Other properties (ID, creation timestamp, owner) cannot be modified through this operation and are preserved in their current state.","parameters":[{"name":"todoId","in":"path","description":"Unique identifier of the todo to update (UUID format)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload containing the properties to modify","typeName":"ITodoAppTodo.IUpdate"},"responseBody":{"description":"Updated todo with all current properties including modification timestamp","typeName":"ITodoAppTodo"},"authorizationRoles":["authenticatedUser"],"name":"update","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoApp/todos","method":"post"},"description":"Todo must be created before it can be updated"}],"accessor":["todoApp","authenticatedUser","todos","update"]},{"specification":"This operation permanently removes an existing todo from the system by its unique identifier. The system retrieves the todo, verifies the authenticated user owns the todo, marks the todo as deleted (soft delete with 30-day recovery period), and persists the deletion to the database. The deletion is permanent within the application UI but the record is retained in the database for 30 days to support recovery capability. After 30 days, the todo is permanently purged from the system. The operation is restricted to the todo's owner; unauthorized users cannot delete todos they do not own. The operation requires explicit user confirmation through a separate confirmation dialog before proceeding with deletion to prevent accidental data loss.","path":"/todoApp/authenticatedUser/todos/{todoId}","method":"delete","summary":"Delete a todo by ID","description":"This operation allows an authenticated user to permanently delete an existing todo item by providing the todo's unique identifier. When a user initiates deletion, the system first displays a confirmation dialog stating 'Are you sure you want to delete this todo? This action cannot be undone.' to prevent accidental deletion. Only after explicit user confirmation does the system proceed with the deletion operation.\n\nThe system verifies user ownership by comparing the authenticated user's ID from their session context to the todo's owner ID. If the user does not own the requested todo, the system denies the deletion with HTTP 403 Forbidden error, never revealing whether the todo exists or belongs to another user. This prevents unauthorized access and information disclosure.\n\nWhen the user confirms deletion, the system implements soft deletion by setting the todo's 'deleted_at' timestamp to the current UTC time. This marks the todo as deleted while preserving the record in the database for forensic purposes and recovery capability. The deleted todo is immediately removed from the user's normal todo list view but can be recovered through a 'Recently Deleted' section within 30 days of deletion.\n\nWithin the 30-day recovery period, users can view their deleted todos in the 'Recently Deleted' section and restore any todo by clicking an 'Undo Delete' or 'Restore' button. After 30 days, the todo is permanently purged from the system with no recovery option available. This balance provides data safety for accidental deletions while maintaining eventual complete removal.\n\nThe deletion operation is atomic and affects only the specified todo. No other todos or related data are affected by the deletion. The operation is logged in the audit trail for compliance documentation with timestamp, user ID, and deletion status recorded for regulatory requirements.\n\nThe operation returns HTTP 200 OK with success confirmation message 'Todo deleted successfully.' when deletion completes. If the todo does not exist or has already been deleted, the operation returns HTTP 404 Not Found with message 'This todo was not found or has been deleted.' The response does not include the deleted todo's data, only confirmation of successful deletion.","parameters":[{"name":"todoId","in":"path","description":"Unique identifier of the todo to delete (UUID format)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deletion confirmation message indicating successful removal","typeName":"ITodoAppTodo.IDeleteResponse"},"authorizationRoles":["authenticatedUser"],"name":"erase","authorizationRole":"authenticatedUser","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoApp/todos","method":"post"},"description":"Todo must be created before it can be deleted"}],"accessor":["todoApp","authenticatedUser","todos","erase"]}],"components":{"authorization":[{"name":"guestUser","kind":"guest","description":"Unauthenticated users who can only access public information and registration/login endpoints. Cannot access todo operations."},{"name":"authenticatedUser","kind":"member","description":"Authenticated users who can create, read, update, and delete their own todos. Can manage their personal todo list with full CRUD operations. Cannot access other users' data or administrative functions."},{"name":"administrator","kind":"admin","description":"System administrators with elevated permissions. Can manage all system settings, monitor system health, access administrative endpoints, and manage user accounts if needed. Full access to system functions."}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoAppTodos":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppTodos"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoAppGuestUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for guest user registration. Must be unique and follow RFC 5321 format."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Plain-text password for account security. Must meet strength requirements: minimum 8 characters including uppercase, lowercase, digit, and special character."}},"required":["email","password"],"description":"Request body for guest user account registration.\n\nGuestuser registration creates a new authenticated user account from unauthenticated state."},"ITodoAppAuthenticatedUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user for session tracking and resource association."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"refreshToken":{"type":"string","description":"JWT refresh token for obtaining new access tokens without re-authentication. Valid for 7 days. Used to call POST /auth/refresh endpoint when access token approaches expiration. One-time use (rotated on refresh)."},"expiresIn":{"type":"integer","description":"Access token expiration time in seconds (900 seconds = 15 minutes). Indicates when the current access token will expire and re-authentication is required."},"tokenType":{"const":"Bearer","description":"Token type indicator. Always 'Bearer' for JWT tokens. Indicates token format for Authorization header usage."}},"required":["id","token"],"x-autobe-prisma-schema":"todo_app_authenticateduser","description":"Authorization response containing JWT token and authenticated user information.\n\nReturned after successful authentication (login, registration completion, token refresh). Contains access token for subsequent authenticated requests, optional refresh token for session extension, and token metadata (type, expiration).\n\nClient stores token securely (httpOnly cookie preferred) and includes in Authorization header of all authenticated requests. When access token expires (15 minutes), client uses refresh token to obtain new access token or requires re-authentication."},"ITodoAppGuestUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token for obtaining new access token."}},"required":["refresh_token"],"description":"Request body for guest user token refresh.\n\nSubmits refresh token to obtain new access token without re-authentication."},"ITodoAppAuthenticatedUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for authentication and identification. Must follow RFC 5321 standard format. Must be unique across all registered accounts. Used as the primary login identifier."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"User's plaintext password for account security. Minimum 8 characters, maximum 128 characters. Must contain at least one uppercase letter, one lowercase letter, one numeric digit, and one special character (!@#$%^&*). System hashes password using bcrypt before storage; plaintext password is never persisted. Client submits plaintext only; server handles secure hashing."}},"required":["email","password"],"description":"Request DTO for user registration via POST /todoApp/auth/register endpoint.\n\nClients submit email and password meeting security requirements. Email must be valid format and unique (not already registered). Password must meet minimum complexity: 8+ characters including uppercase, lowercase, digit, and special character. System validates these requirements and rejects invalid input with specific error messages.\n\nUpon successful registration, system creates todo_app_authenticateduser record with hashed password (never plaintext), sets status to 'active', email_verified to false, and sends verification email. User cannot log in until email is verified through verification link.\n\nThis DTO accepts ONLY email and password. System-managed fields (id, status, timestamps, etc.) are never accepted in requests and are automatically assigned."},"ITodoAppAuthenticatedUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the authenticated user in UUID format. Automatically generated at account creation and immutable. Used to uniquely identify the user and associate their data (todos, security events, audit logs)."},"email":{"type":"string","format":"email","description":"User's email address used for authentication and identification. Unique across the system. Must follow RFC 5321 standard format. Used for login credentials and account recovery communications."},"firstName":{"type":"string","description":"User's first name for profile display and personalization. Optional field. Used in greeting messages and account information display."},"lastName":{"type":"string","description":"User's last name for profile display and personalization. Optional field. Used in greeting messages and account information display."},"status":{"oneOf":[{"const":"active","description":"Account status indicating whether account is usable. 'active' allows normal login and operations. 'inactive' prevents login. 'locked' indicates temporary lockout due to failed login attempts (auto-expires after lockout period)."},{"const":"inactive","description":"Account status indicating whether account is usable. 'active' allows normal login and operations. 'inactive' prevents login. 'locked' indicates temporary lockout due to failed login attempts (auto-expires after lockout period)."},{"const":"locked","description":"Account status indicating whether account is usable. 'active' allows normal login and operations. 'inactive' prevents login. 'locked' indicates temporary lockout due to failed login attempts (auto-expires after lockout period)."}],"description":"Account status indicating whether account is usable. 'active' allows normal login and operations. 'inactive' prevents login. 'locked' indicates temporary lockout due to failed login attempts (auto-expires after lockout period)."},"emailVerified":{"type":"boolean","description":"Flag indicating whether the user has verified their email address. False at registration, true after user clicks verification email link. Users cannot log in until email is verified."},"lastLoginAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp of the user's most recent successful login. Null if user has never logged in. Updated on each successful authentication."},"createdAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when the user account was created during registration. Immutable record of account creation time."},"updatedAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp of when the user account was last modified (profile updates, password changes, status changes). Updated on any account modification."}},"required":["id","email","status","emailVerified","createdAt","updatedAt"],"x-autobe-prisma-schema":"todo_app_authenticateduser","description":"Authenticated user profile information returned for account management and display purposes.\n\nThis schema represents complete user account details as stored in the todo_app_authenticateduser database table. Contains user identification, email, profile information, account status, and lifecycle metadata. Passwords are never included in this response schema.\n\nThis is the main user profile type used in GET /auth/profile and returned after successful authentication operations. Sensitive fields like password hash and internal status flags are never included."},"ITodoAppAuthenticatedUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered user's email address used for authentication. Must match an existing account email exactly. Case-insensitive comparison. Required for login."},"password":{"type":"string","description":"User's account password as plaintext for verification. System compares submitted password to stored hash using secure comparison. Plaintext password is never logged or stored; only hash is persisted."}},"required":["email","password"],"description":"Request DTO for user authentication via POST /todoApp/auth/login endpoint.\n\nClients submit email and password credentials for authentication. System validates that email exists in database and password matches stored password hash. Generic error message used for both invalid email and invalid password to prevent user enumeration attacks.\n\nUpon successful authentication, system generates JWT access token (15-minute expiration) and optionally refresh token (7-day expiration). Failed authentication attempts are tracked for lockout enforcement (5 attempts in 15 minutes triggers 15-minute account lockout)."},"ITodoAppAuthenticatedUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","minLength":20,"description":"Valid refresh token for obtaining new access token. Refresh tokens expire after 7 days and support one-time use enforcement to prevent token replay attacks."}},"required":["refresh_token"],"description":"Request body for token refresh operation to obtain new access token without re-authentication.\n\nWhen user's access token approaches or has expired, submit the refresh token to obtain a new short-lived access token (15-minute expiration) maintaining authenticated session without password re-entry.\n\nRefresh tokens expire 7 days from issuance. After expiration, user must re-authenticate through login endpoint. Refresh tokens enforce one-time use - after successful refresh, the old token becomes invalid and new replacement token is issued."},"IAdministratorLoginRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator's registered email address for authentication."},"password":{"type":"string","minLength":1,"description":"Administrator's password for authentication verification."}},"required":["email","password"],"description":"Request body for administrator login with credentials.\n\nContains email and password for administrator authentication."},"ITodoAppAdministrator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator."},"email":{"type":"string","format":"email","description":"Email address of the authenticated administrator."},"admin_level":{"type":"integer","minimum":1,"maximum":5,"description":"Administrator privilege level indicating scope of system access."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"token_type":{"type":"string","const":"Bearer","description":"Token type indicator for authorization header."},"expires_in":{"type":"integer","minimum":0,"description":"Access token expiration time in seconds."}},"required":["id","email","admin_level","token","token_type","expires_in"],"description":"Authorization response for administrator login with JWT token and privilege information.\n\nReturned upon successful administrator authentication. Includes admin_level to identify scope of administrative access."},"IAdministratorRegistrationRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for new administrator account registration."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Password meeting security requirements for account security."},"first_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":100},{"type":"null"}],"description":"Administrator's first name. Optional field."},"last_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":100},{"type":"null"}],"description":"Administrator's last name. Optional field."}},"required":["email","password"],"description":"Request body for registering new administrator account.\n\nCreates new administrator account with specified credentials."},"ITokenRefreshRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token for obtaining new access token."}},"required":["refresh_token"],"description":"Request body for token refresh operation.\n\nSubmits refresh token to obtain new access token."},"ITodoAppAuthenticatedUser.IRegister":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the newly registered user."},"email":{"type":"string","format":"email","description":"Email address of the newly registered user."},"token":{"type":"string","description":"JWT access token for the newly registered user (15-minute expiration)."},"message":{"type":"string","description":"Registration confirmation message indicating email verification is required."}},"required":["id","email","message"],"x-autobe-prisma-schema":"todo_app_authenticateduser","description":"Registration confirmation response after successful account creation.\n\nReturned after successful registration via POST /todoApp/auth/register. Contains newly created user ID, email, and confirmation message about email verification requirement. User must verify email within 24 hours before gaining login capability. Optionally includes temporary access token if auto-login is implemented."},"ITodoAppAuthenticatedUser.IRegistered":{"type":"object","description":"Registration confirmation response with user details.\n\nReturned after successful account creation and verification email sent.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of newly created user account."},"email":{"type":"string","format":"email","description":"Registered email address."},"message":{"type":"string","description":"Registration confirmation message."}},"required":["id","email","message"]},"ITodoAppAuthenticatedUser.ILoggedIn":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the logged-in user for session and resource tracking."},"email":{"type":"string","format":"email","description":"Email address of the logged-in user."},"token":{"type":"string","description":"JWT access token for authenticated requests (15-minute expiration)."},"refreshToken":{"type":"string","description":"JWT refresh token for session extension (7-day expiration)."},"expiresIn":{"type":"integer","description":"Access token expiration in seconds (900 = 15 minutes)."},"tokenType":{"const":"Bearer","description":"Token type: 'Bearer' for JWT format."}},"required":["id","email","token"],"x-autobe-prisma-schema":"todo_app_authenticateduser","description":"Login response containing JWT token and authenticated user information.\n\nReturned after successful login via POST /todoApp/auth/login. Contains access token, optional refresh token, and user identification. Client stores tokens and includes access token in Authorization header for authenticated requests."},"ITodoAppAuth.IRefreshTokenRequest":{"type":"object","description":"Token refresh request containing the current refresh token.\n\nSubmitted to obtain new access token without re-authentication.","properties":{"refreshToken":{"type":"string","description":"Refresh token for obtaining new access token.\n\nMust be valid, non-expired refresh token issued during login or previous refresh."}},"required":["refreshToken"]},"ITodoAppAuth.ITokenResponse":{"type":"object","description":"New access token response following successful refresh token validation.\n\nContains JWT access token and optional new refresh token for token rotation.","properties":{"access_token":{"type":"string","description":"New JWT access token for authentication in subsequent requests."},"token_type":{"const":"Bearer","description":"Token type indicating JWT Bearer token format."},"expires_in":{"type":"integer","description":"New token expiration time in seconds."},"refresh_token":{"type":"string","description":"New refresh token for token rotation (optional if rotating tokens)."}},"required":["access_token","token_type","expires_in"]},"ITodoAppAuth.ILogoutResponse":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message indicating successful logout and session termination."}},"required":["message"],"description":"Response confirming successful logout and token invalidation.\n\nSession has been terminated and tokens have been revoked."},"ITodoAppAuthenticatedUser.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Updated email address (optional). Must follow RFC 5321 format. Must be unique (not already registered by another account). When provided, updates user's email for login and communication purposes."},"firstName":{"type":"string","description":"Updated first name (optional). Used for display and personalization. Can be any UTF-8 text up to reasonable length."},"lastName":{"type":"string","description":"Updated last name (optional). Used for display and personalization. Can be any UTF-8 text up to reasonable length."}},"required":[],"x-autobe-prisma-schema":"todo_app_authenticateduser","description":"Request DTO for updating authenticated user profile via PUT /todoApp/authenticatedUser/auth/profile endpoint.\n\nClients submit any combination of fields to update their profile. All fields optional (Partial pattern). System-managed fields (id, status, timestamps, etc.) cannot be modified. Email updates are validated for uniqueness and format. Success response returns complete updated profile."},"ITodoAppAuthenticatedUser.IDeleteRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for verification before account deletion. Used to confirm the user intends to delete their account."},"password":{"type":"string","description":"User's current password for verification before deletion. Used to confirm the user has authority to delete the account."}},"required":["email","password"],"description":"Request DTO for account deletion via DELETE /todoApp/authenticatedUser/auth/delete-account endpoint.\n\nClients must provide email and password for confirmation before account deletion proceeds. System verifies credentials match authenticated user's account. Upon successful verification, account is soft-deleted with 30-day recovery window before permanent purge. All user data (todos, security events) is also marked for deletion but remains recoverable during 30-day window."},"ITodoAppAuthenticatedUser.IDeleteResponse":{"type":"object","properties":{"message":{"type":"string","description":"Account deletion confirmation message indicating account has been marked for deletion with recovery window."},"deletedAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when account deletion was initiated."},"recoveryDeadline":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when account becomes permanently unrecoverable. User can restore account until this time through recovery email link."}},"required":["message","deletedAt"],"description":"Account deletion response confirming successful deletion initiation with recovery information.\n\nReturned after successful account deletion via DELETE /todoApp/authenticatedUser/auth/delete-account. Includes deletion timestamp and recovery deadline (30 days from deletion). During recovery period, user can restore account by clicking recovery link sent to their email address."},"ITodoAppAuth.IVerifyEmailRequest":{"type":"object","properties":{"token":{"type":"string","minLength":32,"description":"Email verification token from verification link. Cryptographically secure token valid for 24 hours."}},"required":["token"],"description":"Request body for email verification during registration completion.\n\nSubmits verification token to confirm email address and activate account."},"ITodoAppAuth.IVerifyEmailResponse":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message indicating email has been verified and account is now active."}},"required":["message"],"description":"Response confirming successful email verification and account activation.\n\nUser can now log in with their credentials."},"ITodoAppAuth.IRequestPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for which password reset is requested."}},"required":["email"],"description":"Request body for password reset request.\n\nInitiates password reset workflow by email address."},"ITodoAppAuth.IRequestPasswordResetResponse":{"type":"object","properties":{"message":{"type":"string","description":"Generic confirmation message. Same for valid and invalid emails to prevent user enumeration."}},"required":["message"],"description":"Response confirming password reset email sent (generic message for security).\n\nDoes not reveal whether email exists in system."},"ITodoAppAuth.IResetPasswordRequest":{"type":"object","properties":{"token":{"type":"string","minLength":32,"description":"Password reset token from reset email link. Valid for 1 hour."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password meeting security requirements."},"new_password_confirm":{"type":"string","minLength":8,"maxLength":128,"description":"Confirmation of new password. Must match new_password exactly."}},"required":["token","new_password","new_password_confirm"],"description":"Request body for resetting password using reset token.\n\nCompletes password reset workflow with new password and token verification."},"ITodoAppAuth.IResetPasswordResponse":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message indicating password has been reset successfully."}},"required":["message"],"description":"Response confirming successful password reset.\n\nUser can now log in with new password."},"ITodoAppAuth.IChangePasswordRequest":{"type":"object","properties":{"current_password":{"type":"string","description":"User's current password for verification before change. System validates this matches stored hash."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password meeting security requirements: minimum 8 characters including uppercase, lowercase, digit, special character."},"new_password_confirm":{"type":"string","minLength":8,"maxLength":128,"description":"Confirmation of new password. Must match new_password field exactly."}},"required":["current_password","new_password","new_password_confirm"],"description":"Request body for authenticated user to change their password.\n\nRequires current password verification and new password confirmation for security."},"ITodoAppAuth.IChangePasswordResponse":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message indicating password has been changed successfully."}},"required":["message"],"description":"Response confirming successful password change.\n\nUser must re-authenticate with new password on next login."},"ITodoAppTodos.ISearchRequest":{"type":"object","properties":{"search":{"type":"string","description":"Optional full-text search term to match against todo titles and descriptions. Supports substring matching and fuzzy text search. Case-insensitive. When provided, returns only todos where title or description contains the search term. When omitted, search filter is not applied."},"isCompleted":{"type":"boolean","description":"Optional filter for completion status. When true, returns only completed todos. When false, returns only incomplete todos. When omitted or null, returns todos regardless of completion status (both completed and incomplete)."},"sortBy":{"oneOf":[{"const":"createdAt","description":"Field to sort results by. Options: 'createdAt' (creation timestamp), 'updatedAt' (last modification), 'title' (alphabetically), 'isCompleted' (status). Default sorting is createdAt when omitted. Within each group of completed/incomplete todos, results are sorted by this field."},{"const":"updatedAt","description":"Field to sort results by. Options: 'createdAt' (creation timestamp), 'updatedAt' (last modification), 'title' (alphabetically), 'isCompleted' (status). Default sorting is createdAt when omitted. Within each group of completed/incomplete todos, results are sorted by this field."},{"const":"title","description":"Field to sort results by. Options: 'createdAt' (creation timestamp), 'updatedAt' (last modification), 'title' (alphabetically), 'isCompleted' (status). Default sorting is createdAt when omitted. Within each group of completed/incomplete todos, results are sorted by this field."},{"const":"isCompleted","description":"Field to sort results by. Options: 'createdAt' (creation timestamp), 'updatedAt' (last modification), 'title' (alphabetically), 'isCompleted' (status). Default sorting is createdAt when omitted. Within each group of completed/incomplete todos, results are sorted by this field."}],"description":"Field to sort results by. Options: 'createdAt' (creation timestamp), 'updatedAt' (last modification), 'title' (alphabetically), 'isCompleted' (status). Default sorting is createdAt when omitted. Within each group of completed/incomplete todos, results are sorted by this field."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending order, 'desc' for descending order (reverse). Default is 'desc' (newest first for timestamps, Z-A for titles) when omitted. Applied to the sortBy field."},{"const":"desc","description":"Sort direction: 'asc' for ascending order, 'desc' for descending order (reverse). Default is 'desc' (newest first for timestamps, Z-A for titles) when omitted. Applied to the sortBy field."}],"description":"Sort direction: 'asc' for ascending order, 'desc' for descending order (reverse). Default is 'desc' (newest first for timestamps, Z-A for titles) when omitted. Applied to the sortBy field."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-indexed). Default is 1 when omitted. Each page contains the number of items specified by the limit parameter."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of todos to return per page. Default is 20 when omitted. Maximum allowed is 100 items per page to prevent excessive data transfer. For performance, pagination is recommended for lists over 50 items."}},"required":[],"description":"Request DTO for searching, filtering, and paginating todos via PATCH /todoApp/authenticatedUser/todos endpoint.\n\nClients submit this object with any combination of search criteria. All fields are optional. System automatically filters results to only todos belonging to the authenticated user. Deleted todos (deleted_at not null) are excluded from results by default.\n\nSearch behavior: search term matched against title and description using full-text search. Pagination: results divided into pages of specified size starting from page 1. Sorting: results organized by specified field in specified order, with completed todos generally appearing before incomplete todos (unless sorting by specific field overrides this).\n\nDefaults: page=1, limit=20, sortBy=createdAt, sortOrder=desc, no search filter, all completion statuses included. Validation: page must be positive integer, limit between 1-100, sortBy from enum, sortOrder from enum."},"ITodoAppTodo.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":255,"description":"Required todo title/description (1-255 characters). Must not be empty or whitespace-only. Stores the user's task description exactly as entered. This is the only required field for todo creation; all other properties are system-generated or optional."},"description":{"type":"string","maxLength":2000,"description":"Optional detailed description or notes for the todo. Maximum 2000 characters when provided. May be omitted or empty string. Used for storing additional context and details about the task beyond the title."}},"required":["title"],"x-autobe-prisma-schema":"todo_app_todos","description":"Request DTO for creating new todos via POST /todoApp/todos endpoint.\n\nClients submit this minimal object containing just the required title field (and optional description). The system automatically generates all other properties: unique UUID identifier, sets isCompleted to false, captures createdAt and updatedAt timestamps to current server time, and associates the todo with the authenticated user.\n\nValidation rules: title must be 1-255 characters, non-empty, non-whitespace-only. Description optional with max 2000 characters. System-managed fields (id, isCompleted, createdAt, updatedAt, user association) are never accepted in this request and are automatically assigned."},"ITodoAppTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the todo item in UUID v4 format. Automatically generated by the system at creation time and immutable throughout the todo's lifecycle. Used to uniquely identify this todo for read, update, and delete operations."},"title":{"type":"string","minLength":1,"maxLength":255,"description":"The main title or short description of the todo task. Required field containing 1-255 characters of user-provided text exactly as entered. Cannot be empty or contain only whitespace. This is the primary user-visible text describing what the todo represents."},"description":{"type":"string","maxLength":2000,"description":"Optional detailed description or notes about the todo task. May be empty string or null. Maximum 2000 characters when provided. Used for storing additional context, details, or requirements related to the todo."},"isCompleted":{"type":"boolean","description":"Completion status of the todo. True indicates the todo task has been marked as completed by the user. False indicates the todo is incomplete and still pending. Defaults to false when todo is created. Can be toggled by user at any time."},"createdAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp indicating when the todo was created. Automatically set to current server time upon creation and immutable thereafter. Used for tracking when the todo was originally added to the system and for sorting todos in chronological order."},"updatedAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp indicating when the todo was last modified. Automatically updated to current server time whenever any property of the todo changes (title, description, or completion status). Initially equals createdAt upon creation."}},"required":["id","title","isCompleted","createdAt","updatedAt"],"x-autobe-prisma-schema":"todo_app_todos","description":"Primary todo entity representing a single task item in the todo list application.\n\nThis schema represents a complete todo record as stored in the todo_app_todos database table. Each todo is owned by a specific user and contains essential properties for task management: unique identifier, title/description text, completion status flag, and lifecycle timestamps.\n\nTodos are immutable in identity (id cannot change) and creation time (createdAt is permanent). Title, description, and completion status can be modified by the owner, with modification timestamp automatically updated to reflect changes. The isCompleted boolean serves as the primary completion state indicator."},"ITodoAppTodo.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":255,"description":"Updated todo title (1-255 characters, optional). When provided, must not be empty or whitespace-only. Updates the todo's title text. When omitted, existing title is preserved. Can be updated independently of other properties."},"description":{"type":"string","maxLength":2000,"description":"Updated todo description (optional, max 2000 characters). When provided, replaces the existing description. May be empty string to clear description. When omitted, existing description is preserved. Can be updated independently of other properties."},"isCompleted":{"type":"boolean","description":"Updated completion status (optional). When provided, sets todo to completed (true) or incomplete (false). When omitted, existing status is preserved. Can be toggled independently of title/description changes. Toggling status updates the updatedAt timestamp."}},"required":[],"x-autobe-prisma-schema":"todo_app_todos","description":"Request DTO for updating existing todos via PUT /todoApp/authenticatedUser/todos/{todoId} endpoint.\n\nClients submit this object with any combination of properties to update. All fields are optional (Partial<ITodoAppTodo> pattern), allowing users to update title only, status only, description only, or any combination without specifying other properties. System-managed fields (id, createdAt, updatedAt, user association) cannot be modified and are ignored if provided in requests.\n\nValidation rules: If provided, title must be 1-255 characters non-empty/non-whitespace. Description max 2000 characters. isCompleted must be boolean. Omitted fields retain their current values. Successful update automatically sets updatedAt to current timestamp while preserving createdAt."},"ITodoAppTodo.IDeleteResponse":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message indicating successful deletion. Standard message: 'Todo deleted successfully.' This message provides user-friendly confirmation that the requested todo has been removed from their active todo list.\n\nFor deleted or non-existent todos, error responses with different messages are returned instead of this success response."},"todoId":{"type":"string","format":"uuid","description":"Unique identifier of the deleted todo in UUID format. Preserved in the response for audit trail reference, allowing clients and administrators to track which specific todo was deleted.\n\nThis identifier can be used for recovery operations within the 30-day recovery window or for audit trail correlation."},"deletedAt":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp indicating when the todo was marked as deleted. This timestamp is set to the current server time when the soft delete operation is executed.\n\nDuring the 30-day recovery period after this timestamp, the deleted todo can be restored through the recovery interface. After 30 days from this timestamp, the todo is permanently purged with no recovery option."}},"required":["message","todoId","deletedAt"],"description":"Deletion confirmation response indicating successful removal of a todo from the system.\n\nThis response is returned after a user successfully deletes a todo item. The response confirms the deletion operation completed successfully and provides the identifier of the deleted todo and deletion timestamp for reference and audit trail purposes.\n\nThe deletion response includes the soft delete timestamp to document the start of the 30-day recovery window. This response is returned immediately after soft delete (marking deleted_at timestamp) occurs, before the permanent purge window expires."},"ITodoAppTodos":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppTodo"},"description":"Array collection of todo items representing a user's complete todo list.\n\nThis array contains all todo objects belonging to an authenticated user, including both completed and incomplete todos. The array may be empty if the user has no todos.\n\nEach element in the array is a complete ITodoAppTodo object with all properties (id, title, description, isCompleted, createdAt, updatedAt)."}}}}