{"operations":[{"specification":"Guest user registration endpoint that creates a temporary guest account and issues initial JWT tokens for anonymous browsing. This operation allows unauthenticated visitors to obtain a guest session with limited permissions, enabling them to browse the platform with a tracked identity while maintaining anonymity. The guest registration does not require email or password credentials, instead generating a unique session identifier for tracking purposes. This endpoint is public and does not require any prior authentication.","authorizationType":"join","description":"Creates a temporary guest account for unauthenticated visitors to the Reddit-like community platform. This endpoint enables anonymous users to obtain a tracked session identity without providing personal credentials like email or password. Guest accounts are designed for visitors who want to browse public communities, view posts and comments, but are not yet ready to commit to full membership.\n\nThe registration process generates a unique session identifier that tracks the guest's activity for analytics purposes, including first visit timestamp, IP address, and user agent information. This data helps the platform understand guest behavior patterns and optimize conversion to full member accounts. The session identifier persists across visits until the guest either registers as a member or the session expires.\n\nUpon successful registration, the system issues JWT authentication tokens (access token with 30-minute expiration and refresh token with 30-day expiration) that enable the guest to make authenticated API requests within their limited permission scope. Guest users can browse public communities, view posts, read comments, and access user profiles, but cannot vote, comment, post, subscribe to communities, or create communities.\n\nThe response contains the complete guest user profile including their unique session identifier, role designation ('guest'), timestamps for first and last visit, and the JWT tokens required for subsequent authenticated requests. Security measures include IP address and user agent tracking for abuse prevention and rate limiting, though guests are not subject to the same strict rate limits as authenticated members for content creation since they cannot create content.\n\nThis endpoint serves as the entry point for anonymous platform exploration and is critical for converting casual visitors into registered members. By providing a low-friction registration mechanism, the platform can track guest behavior, demonstrate value, and encourage eventual conversion to full membership through the member registration endpoint.","summary":"Register a new temporary guest account and issue guest session tokens","parameters":[],"requestBody":{"description":"Guest registration information including optional tracking data for analytics","typeName":"IRedditLikeGuest.ICreate"},"responseBody":{"description":"Created guest account with session details and authentication tokens","typeName":"IRedditLikeGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Guest token refresh endpoint that renews JWT access tokens using a valid refresh token without requiring re-authentication. This operation allows guest users to maintain their session by obtaining new access tokens when their current access token expires (after 30 minutes). The refresh mechanism uses the long-lived refresh token (30-day expiration) to issue new short-lived access tokens, enabling continuous platform browsing without interruption.","authorizationType":"refresh","description":"Refreshes the JWT access token for an existing guest session using a valid refresh token. This endpoint is essential for maintaining continuous guest sessions without requiring the guest to re-register when their access token expires after the standard 30-minute window.\n\nGuest users receive both an access token (short-lived, 30 minutes) and a refresh token (long-lived, 30 days) during initial registration through the join endpoint. The access token is used to authenticate API requests, while the refresh token enables obtaining new access tokens without re-authentication. This token refresh mechanism follows industry-standard JWT security patterns, minimizing the exposure window of access tokens while providing convenient session continuity.\n\nThe refresh process validates that the provided refresh token is authentic, not expired, and belongs to an active guest session. Upon successful validation, the system generates a new access token with a fresh 30-minute expiration and returns it to the client. The refresh token itself typically remains valid and unchanged, though the implementation may optionally issue a new refresh token as part of a token rotation strategy for enhanced security.\n\nIf the refresh token has expired (after 30 days), is invalid, or belongs to a deleted/revoked session, the refresh request fails and the guest must re-register through the join endpoint to obtain new tokens. This expiration mechanism ensures that abandoned guest sessions eventually terminate, preventing indefinite session persistence.\n\nThe response contains the new access token, its expiration timestamp, and optionally a new refresh token if token rotation is implemented. The guest can immediately use the new access token for authenticated requests, maintaining seamless browsing continuity. The system tracks the last activity timestamp on the guest session, updating it during refresh operations to monitor session usage patterns.\n\nThis endpoint requires a valid refresh token but does not require the access token (which may be expired). Rate limiting is applied to prevent abuse of the refresh mechanism, with stricter limits than the join endpoint to detect and prevent token theft or replay attacks.","summary":"Refresh guest session access token using refresh token","parameters":[],"requestBody":{"description":"Refresh token information for obtaining new access token","typeName":"IRedditLikeGuest.IRefresh"},"responseBody":{"description":"New access token and updated session information","typeName":"IRedditLikeGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"Member user registration endpoint creating new authenticated user accounts. This is the primary onboarding flow for new platform users to join the community. The operation creates a new member record in reddit_like_members table with username, email, and hashed password, initializes karma scores to zero, generates JWT access and refresh tokens for immediate authentication, and returns the complete authorization response including user profile data and session tokens.","authorizationType":"join","description":"Registers a new member user account and issues initial JWT authentication tokens for immediate platform access.\n\nThis endpoint handles the complete user registration workflow defined in requirements section 2 (User Registration Requirements). When a guest visitor decides to join the platform, they submit registration credentials (username, email, password) through this endpoint. The system validates all input according to strict requirements: username must be 3-20 characters with only alphanumeric characters, underscores, and hyphens; email must be unique and valid format; password must be minimum 8 characters with uppercase, lowercase, number, and special character.\n\nUpon successful validation, the system creates a new record in reddit_like_members table with securely hashed password (never plain text), generates unique user identifier, sets email_verified to false initially, assigns default member role, and initializes both post_karma and comment_karma to zero as specified in karma system requirements. The registration process also creates related records in reddit_like_auth_credentials for security tracking and reddit_like_user_karma for reputation management.\n\nImmediately after account creation, the system generates JWT tokens per session management requirements: access token with 30-minute expiration and refresh token with 30-day expiration. Both tokens contain user ID, username, and role in the payload. A verification email is sent asynchronously to the provided email address with a unique time-limited verification link expiring in 24 hours per requirements section 2.3.\n\nThe response includes complete user profile information (id, username, email, karma scores, account timestamps) along with both access and refresh tokens, enabling the newly registered user to immediately begin authenticated participation without additional login. This follows the requirement that successful registration automatically logs in the new user as a Member.\n\nSecurity considerations include rate limiting to prevent registration abuse, CAPTCHA verification for suspicious patterns, username and email uniqueness validation with helpful error messages when duplicates detected, and secure password hashing using industry-standard algorithms (bcrypt, Argon2, or PBKDF2). All authentication communications occur over HTTPS per security requirements.","summary":"Register new member account with username, email, and password, creating reddit_like_members record and issuing JWT tokens","parameters":[],"requestBody":{"description":"Member registration credentials including unique username, email address, and secure password meeting complexity requirements","typeName":"IRedditLikeMember.ICreate"},"responseBody":{"description":"Complete authorization response with user profile data, karma scores, and JWT access and refresh tokens for immediate authenticated access","typeName":"IRedditLikeMember.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/member/join","method":"post"},{"specification":"Member user authentication endpoint validating credentials and issuing JWT tokens for existing accounts. This is the primary authentication mechanism for returning users to access their accounts. The operation validates email and password against reddit_like_members table, verifies credentials match securely hashed password, generates new JWT session tokens, creates session record in reddit_like_sessions, and returns authorization response with user data and tokens.","authorizationType":"login","description":"Authenticates existing member users with email and password credentials, issuing JWT tokens for platform access.\n\nThis endpoint implements the login workflow defined in requirements section 3 (Login and Session Management). When a registered member wants to access their account, they submit their email address and password through this endpoint. The system validates these credentials against stored account information in the reddit_like_members table, comparing the submitted password against the securely stored password_hash using cryptographic verification.\n\nThe authentication process follows strict security requirements: passwords are never transmitted or stored in plain text, all authentication occurs over HTTPS, and rate limiting prevents brute-force attacks by allowing maximum 5 failed attempts within 15 minutes before temporarily locking the account for 30 minutes. The reddit_like_auth_credentials table tracks failed login attempts, last failed login timestamp, and account lock status to enforce these security measures.\n\nIf credentials are invalid (email doesn't exist or password doesn't match), the system rejects login with generic error message \"Invalid email or password\" to prevent username enumeration attacks. If the account is temporarily locked due to multiple failed attempts, the system denies access and notifies user of lock duration. If the account has been suspended by administrators (checked in reddit_like_platform_suspensions with is_active=true), the system prevents login and directs user to contact support.\n\nUpon successful credential validation, the system generates new JWT tokens per session management requirements: access token expiring in 30 minutes containing user ID, username, and role; refresh token expiring in 30 days for obtaining new access tokens without re-login. These tokens are stored in a new reddit_like_sessions record along with IP address, user agent, and activity timestamp for security monitoring. The system also updates reddit_like_auth_credentials with successful login timestamp and IP address, resetting failed attempt counter to zero.\n\nThe response returns complete user profile information from reddit_like_members (id, username, email, profile_bio, avatar_url, email_verified status) along with denormalized karma scores (post_karma and comment_karma) and both JWT tokens, enabling the authenticated user to immediately access all member-level features including posting, commenting, voting, and community subscription management.\n\nSecurity logging captures all authentication events including successful logins, failed attempts, and account lock triggers for security monitoring and forensic analysis per requirements section 3.6.","summary":"Authenticate member user with email and password, validating against reddit_like_members table and issuing JWT session tokens","parameters":[],"requestBody":{"description":"Member login credentials containing registered email address and password for authentication validation","typeName":"IRedditLikeMember.ILogin"},"responseBody":{"description":"Complete authorization response with authenticated user profile, karma scores, and fresh JWT access and refresh tokens","typeName":"IRedditLikeMember.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/member/login","method":"post"},{"specification":"Token refresh endpoint for obtaining new access tokens using valid refresh tokens without re-entering credentials. This operation enables seamless session continuation when access tokens expire after 30 minutes. The operation validates refresh token from reddit_like_sessions, verifies token hasn't expired and session isn't revoked (deleted_at is null), generates new access token with fresh 30-minute expiration while maintaining same refresh token, and returns new access token with updated user profile data.","authorizationType":"refresh","description":"Refreshes expired access tokens using valid refresh tokens, issuing new access tokens without requiring credential re-entry.\n\nThis endpoint implements the token refresh mechanism defined in requirements section 3.2 (Session Management Requirements). When a member's access token expires after 30 minutes of validity, they can obtain a new access token by presenting their still-valid refresh token through this endpoint, avoiding the need to re-enter email and password credentials. This creates a seamless user experience for active platform participants.\n\nThe refresh process validates the submitted refresh token against records in reddit_like_sessions table, checking that the token matches an existing session record, the refresh token hasn't expired (refresh_token_expires_at is in the future), and the session hasn't been explicitly revoked (deleted_at is null). If any of these validations fail, the system rejects the refresh request and requires the user to log in again with full credentials.\n\nRefresh tokens expire 30 days after issuance per requirements. This longer validity period compared to access tokens (30 minutes) balances security with user convenience - users remain authenticated for a month without re-login, but their access tokens expire frequently to limit exposure if compromised. When a refresh token has expired, the system returns an authentication error requiring full re-login with email and password.\n\nUpon successful refresh token validation, the system generates a new JWT access token with fresh 30-minute expiration timestamp, containing the user's current ID, username, and role in the payload. The refresh token itself remains unchanged and maintains its original expiration timestamp - only the access token is regenerated. The system updates the reddit_like_sessions record's last_activity_at timestamp to reflect current usage and updates the access_token field with the newly generated token.\n\nThe response includes the new access token along with current user profile information from reddit_like_members, including any updates to username, profile_bio, avatar_url, or email_verified status that may have occurred since the original login. The response also includes current karma scores (post_karma and comment_karma) reflecting all voting activity on the user's content since last token refresh.\n\nSecurity considerations include validating that the session's user account still exists and hasn't been suspended (checking reddit_like_platform_suspensions for active suspensions), ensuring HTTPS-only communication for token transmission, and logging all token refresh events in reddit_like_auth_credentials for security monitoring. If a user changes their password, all existing sessions are invalidated (deleted_at set) per requirements section 2.6, forcing re-authentication and preventing refresh token usage.","summary":"Refresh JWT access token using valid refresh token from reddit_like_sessions, generating new 30-minute access token","parameters":[],"requestBody":{"description":"Refresh token request containing the valid refresh token string from previous authentication","typeName":"IRedditLikeMember.IRefresh"},"responseBody":{"description":"Authorization response with new access token, updated user profile, and current karma scores","typeName":"IRedditLikeMember.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/member/refresh","method":"post"},{"specification":"Password change operation for authenticated members to update their account password. This security-critical operation requires users to verify their current password before setting a new one, preventing unauthorized password changes. The operation validates current password against reddit_like_members.password_hash, validates new password meets complexity requirements (8+ characters with uppercase, lowercase, number, special character), updates password_hash with new securely hashed password, invalidates all existing sessions except current one by setting deleted_at on reddit_like_sessions records, and sends confirmation email notification.","authorizationType":null,"description":"Updates authenticated member's password after validating current password and meeting security requirements.\n\nThis endpoint implements the password change feature defined in requirements section 2.6 (Password Change Requirements). Authenticated members can proactively change their passwords through their account settings for security maintenance. The operation requires three pieces of information: the user's current password for verification, the new desired password, and confirmation of the new password to prevent typos.\n\nThe password change process begins by validating the submitted current password against the stored password_hash in the reddit_like_members table for the authenticated user. This verification step prevents unauthorized password changes if someone gains temporary access to an authenticated session. If the current password is incorrect, the system rejects the change with error message \"Current password is incorrect\" and does not proceed further.\n\nNext, the system validates the new password meets all security requirements defined in registration specifications: minimum 8 characters length, at least one uppercase letter, at least one lowercase letter, at least one number, and at least one special character (@, #, $, %, &, *, etc.). These complexity requirements ensure password strength and resistance to common attack patterns. The system also validates that new password confirmation matches the new password exactly, rejecting with error if they differ.\n\nUpon successful validation, the system updates the password_hash field in reddit_like_members using the same secure hashing algorithm as registration (bcrypt, Argon2, or PBKDF2 with appropriate salt). The old password hash is completely replaced and cannot be recovered. For security, the system immediately invalidates all existing authentication sessions except the current one by setting deleted_at timestamp on all other reddit_like_sessions records belonging to this user. This forces logout on all other devices and prevents compromised sessions from remaining active after password change.\n\nThe system sends an email notification to the account's registered email address confirming the password change occurred. This security notification alerts the user to potentially unauthorized password changes and provides opportunity to take corrective action if the change was not initiated by them. The notification includes timestamp of change and guidance on what to do if change was unauthorized (contact support, secure account).\n\nThe current session remains valid after password change, allowing the user to continue using the platform without immediate re-authentication. However, the access token in the current session should be considered for refresh or re-issuance to reflect the security state change, though this is an implementation decision for the development team.\n\nSecurity logging records the password change event in reddit_like_auth_credentials or audit tables for security monitoring, including timestamp, IP address, and whether the current password validation succeeded or failed (for tracking password change attempt patterns).","summary":"Change authenticated member's password after validating current password, updating reddit_like_members.password_hash and invalidating other sessions","parameters":[],"requestBody":{"description":"Password change request with current password for verification, new password meeting security requirements, and new password confirmation","typeName":"IRedditLikeMember.IChangePassword"},"responseBody":{"description":"Password change confirmation response indicating successful update","typeName":"IRedditLikeMember.IPasswordChanged"},"authorizationRole":"member","name":"changePassword","prerequisites":[],"path":"/auth/member/password/change","method":"put"},{"specification":"Email verification endpoint processing verification tokens sent to users during registration or email change workflows. This operation validates the unique verification token, confirms it hasn't expired (24-hour validity), marks the email as verified in reddit_like_members table, and activates any features requiring verified email status. The operation queries reddit_like_email_verifications table by token, validates expiration timestamp, updates email_verified status, and records verification completion timestamp.","authorizationType":null,"description":"Verifies user email address by validating time-limited verification token from registration or email change workflow.\n\nThis endpoint implements the email verification workflow defined in requirements section 2 (Email Verification and Password Management). When users register new accounts, the system sends a verification email containing a unique, cryptographically secure verification link. This endpoint processes those verification links, confirming email address ownership and activating email-dependent platform features.\n\nThe verification process begins when a user clicks the verification link in their email, which contains a unique verification_token parameter. The system queries reddit_like_email_verifications table to find a record matching the provided token. If no matching record exists, the verification fails with error indicating invalid token. This protects against random token guessing attacks.\n\nNext, the system validates the verification token hasn't expired by comparing current timestamp against the expires_at field in the verification record. Per requirements section 2.1, verification links expire 24 hours after being sent. If the current time exceeds expires_at, the system rejects the verification with error message explaining the link has expired and offers to resend a new verification email. This time limitation prevents indefinite validity of verification links.\n\nFor valid, non-expired tokens, the system checks if the token has already been used by examining the verified_at field. If verified_at is already set (not null), the token was previously used and the system displays a message indicating email is already verified, preventing duplicate processing.\n\nWhen processing a fresh, valid verification token, the system performs the following atomic operations: sets verified_at timestamp in reddit_like_email_verifications to current time, updates email_verified field to true in reddit_like_members table for the associated user (identified by reddit_like_user_id foreign key), and marks the verification as complete. For email change verifications (verification_type='email_change'), the system additionally updates the email field in reddit_like_members to the new email address from the verification record.\n\nThe response confirms successful verification and may redirect the user to a confirmation page or auto-login the user if they weren't already authenticated. Features that require verified email (such as becoming a community moderator or posting in certain restricted communities per requirements section 2.1) become immediately available after verification completes.\n\nIf verification fails, the system provides clear error messaging and recovery options. For expired tokens, a \"Resend verification email\" action generates a new reddit_like_email_verifications record with fresh token and updated expires_at timestamp 24 hours in the future, sending a new email to the user's registered address.","summary":"Verify email address using verification token from reddit_like_email_verifications table, updating reddit_like_members.email_verified status","parameters":[],"requestBody":{"description":"Email verification request containing the unique verification token from the email link","typeName":"IRedditLikeMember.IVerifyEmail"},"responseBody":{"description":"Email verification confirmation response indicating successful email verification","typeName":"IRedditLikeMember.IEmailVerified"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[],"path":"/auth/member/email/verify","method":"post"},{"specification":"Password reset initiation endpoint for users who have forgotten their passwords and need account recovery. This public endpoint accepts email address, validates account exists, generates time-limited reset token, creates record in reddit_like_password_resets table with 1-hour expiration, and sends password reset email with unique reset link. This is step 1 of the password reset workflow.","authorizationType":null,"description":"Initiates password reset workflow by generating and sending time-limited reset token to user's registered email address.\n\nThis endpoint implements the forgot password mechanism defined in requirements section 2.2 (Password Reset Requirements). When users cannot access their accounts because they've forgotten their password, they can initiate account recovery through this publicly accessible endpoint by providing their registered email address. This is the first step in a two-step password reset workflow.\n\nThe password reset initiation process validates the submitted email address exists in reddit_like_members table. If the email is not found, the system still displays a generic success message (\"If that email address is registered, you will receive a password reset link\") to prevent email enumeration attacks where malicious actors could determine which email addresses have accounts on the platform. This security practice protects user privacy.\n\nFor valid email addresses associated with active accounts, the system generates a cryptographically secure random reset token using secure random number generation per security requirements section 10. This unique token serves as a time-limited authorization credential for password reset. The system creates a new record in reddit_like_password_resets table containing the user's ID (reddit_like_user_id foreign key), the submitted email address for validation, the generated reset_token, and an expires_at timestamp set to exactly 1 hour in the future per requirements.\n\nThe system immediately sends a password reset email to the provided address containing a unique reset link with the token embedded as a parameter (e.g., https://platform.com/auth/member/password/reset?token=XXXXX). The email explains the reset process, warns that the link expires in 1 hour, and advises users to ignore the email if they didn't request the reset. The email send operation occurs asynchronously to avoid blocking the API response.\n\nMultiple password reset requests for the same account are allowed - each generates a new token and sends a new email. Previous unused tokens remain valid until their individual expiration times, though only the most recent token is typically used. The used_at field in reddit_like_password_resets remains null for all tokens until one is successfully used to reset the password.\n\nSecurity considerations include rate limiting to prevent email spam abuse (limiting reset requests per email address to reasonable frequency like 3 per hour), logging all reset requests for security monitoring, and ensuring the reset token is sufficiently long and random to prevent guessing attacks (recommended minimum 32 characters of cryptographically random data).\n\nThe response provides generic confirmation without revealing whether the email exists in the system, protecting user privacy while still being helpful to legitimate users. After submitting, users should check their email inbox (and spam folder) for the reset link within 5 minutes.","summary":"Request password reset for member account by email, creating time-limited reset token in reddit_like_password_resets table and sending reset link","parameters":[],"requestBody":{"description":"Password reset request containing the email address of the account to recover","typeName":"IRedditLikeMember.IRequestPasswordReset"},"responseBody":{"description":"Password reset request confirmation response (generic message for security)","typeName":"IRedditLikeMember.IPasswordResetRequested"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/member/password/reset/request","method":"post"},{"specification":"Password reset completion endpoint processing reset tokens and setting new passwords for account recovery. This operation validates reset token from reddit_like_password_resets table, confirms token hasn't expired (1-hour validity) and hasn't been used (used_at is null), validates new password meets complexity requirements, updates reddit_like_members.password_hash with new secure hash, marks token as used by setting used_at timestamp, and invalidates all existing sessions by setting deleted_at on reddit_like_sessions records to force re-authentication.","authorizationType":null,"description":"Completes password reset by validating reset token and updating member account password.\n\nThis endpoint implements the password reset completion workflow defined in requirements section 2.2 (Password Reset Requirements). After a user requests password reset via the initiation endpoint and receives a reset email, they click the link in that email which directs them to a password reset form. Upon submitting their new password, this endpoint processes the reset token and updates their account credentials.\n\nThe password reset validation process begins by querying reddit_like_password_resets table for a record matching the submitted reset_token. If no matching token exists, the system rejects the reset attempt with error \"Invalid or expired reset token.\" This protects against random token guessing and ensures only properly generated tokens can reset passwords.\n\nNext, the system validates the token hasn't expired by comparing current timestamp against the expires_at field. Per requirements, password reset tokens expire exactly 1 hour after generation. If current time exceeds expires_at, the system rejects the reset with error message \"This password reset link has expired. Please request a new password reset.\" The response includes a link or action to initiate a new reset request, providing clear recovery path for users.\n\nThe system also checks the used_at field to ensure the token hasn't already been consumed. Each reset token can only be used once per requirements - if used_at is not null, the token was previously used to reset the password and the system rejects subsequent attempts with error \"This reset token has already been used. Please request a new password reset if needed.\" This prevents token replay attacks.\n\nFor valid, non-expired, unused tokens, the system validates the new password meets all security requirements identical to registration: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. If the new password fails validation, the system returns specific error messages listing which requirements are not met, allowing users to correct their password without consuming the token.\n\nUpon successful validation, the system performs the following atomic operations: updates password_hash in reddit_like_members table for the user identified by reddit_like_user_id foreign key in the reset record, using the same secure hashing algorithm as registration; sets used_at timestamp to current time in reddit_like_password_resets record to mark token as consumed; and sets deleted_at timestamp on ALL records in reddit_like_sessions table belonging to this user, immediately invalidating all existing sessions and forcing re-authentication on all devices per security requirement.\n\nThe system sends a confirmation email to the account's email address (the one in reddit_like_members, not necessarily the one in the reset request) notifying the user their password was successfully changed. This security notification includes timestamp and warns users to contact support if they did not authorize the change. The notification serves as breach detection for unauthorized password resets.\n\nAfter successful password reset, the user must log in again with their new password using the standard login endpoint. The reset process does not automatically authenticate the user - they must use the login endpoint with their email and new password to obtain new JWT tokens and establish a fresh session. This ensures the user confirms possession of the new password and establishes a clean authentication state.\n\nSecurity logging records all password reset completion attempts (successful and failed) for audit trail and security monitoring, including token validation failures, expired token attempts, and successful password updates.","summary":"Complete password reset using token from reddit_like_password_resets, updating reddit_like_members.password_hash and invalidating all sessions","parameters":[],"requestBody":{"description":"Password reset completion request with reset token and new password meeting complexity requirements","typeName":"IRedditLikeMember.IResetPassword"},"responseBody":{"description":"Password reset completion confirmation indicating successful password update and session invalidation","typeName":"IRedditLikeMember.IPasswordResetCompleted"},"authorizationRole":null,"name":"resetPassword","prerequisites":[{"endpoint":{"path":"/auth/member/password/reset/request","method":"post"},"description":"Password reset request must be initiated first to generate a valid reset token that is required for completing the password reset process"}],"path":"/auth/member/password/reset/complete","method":"post"},{"specification":"Email verification resend endpoint for users who didn't receive or lost their original verification email. This operation validates user account exists and email is not yet verified (email_verified is false in reddit_like_members), creates new verification record in reddit_like_email_verifications with fresh token and 24-hour expiration, and sends new verification email with updated link. Supports both authenticated users requesting resend for their own account and unauthenticated users providing email address.","authorizationType":null,"description":"Resends email verification link with fresh token when users didn't receive or lost original verification email.\n\nThis endpoint implements the verification email resend mechanism described in requirements section 2.1 (Post-Registration Behavior) and section 2 (Email Verification and Password Management). Users who registered but haven't verified their email may not receive the initial verification email due to spam filters, email delivery issues, or accidental deletion. This endpoint allows them to request a new verification email with a fresh token and updated expiration timestamp.\n\nThe resend process supports two usage patterns: authenticated users can request resend for their own account (identified from JWT token), or unauthenticated users can request resend by providing their email address. For authenticated requests, the system uses the user ID from the JWT token to identify the account. For unauthenticated requests, the system queries reddit_like_members table by the submitted email address.\n\nBefore generating a new verification token, the system validates the account's current verification status by checking the email_verified field in reddit_like_members. If email_verified is already true, the email has been verified and no new verification is needed. The system responds with message \"This email address is already verified\" and provides option to proceed to login. This prevents unnecessary verification emails for already-verified accounts.\n\nFor unverified accounts (email_verified = false), the system generates a new cryptographically secure verification token using secure random number generation. The system creates a new record in reddit_like_email_verifications table containing: the user's ID (reddit_like_user_id foreign key), the email address being verified (from reddit_like_members.email), the newly generated verification_token (unique across all verification records), verification_type set to 'registration' (or 'email_change' if this is email update verification), expires_at timestamp set to 24 hours from current time per requirements, and verified_at set to null indicating pending verification.\n\nThe system then sends a new verification email to the email address containing the fresh verification link with the new token embedded. The email explains this is a resend of the verification link, includes the 24-hour expiration timeframe, and provides the clickable verification link that will call the email verification endpoint with the token parameter.\n\nPrevious unused verification tokens for the same user remain in reddit_like_email_verifications table but are effectively superseded by the new token. The system doesn't delete old tokens to maintain audit trail, but typically only the most recent token is used for verification. When the user successfully verifies via any valid token, the email_verified status updates and all pending verifications become moot.\n\nSecurity considerations include rate limiting to prevent email spam abuse - the system limits verification email resends to reasonable frequency such as maximum 5 per email address per hour. The system also logs all resend requests for security monitoring to detect abuse patterns. For privacy protection, the system returns generic success message regardless of whether the email exists in the system when processing unauthenticated resend requests, preventing email enumeration.\n\nThe response confirms the verification email has been sent (or will be sent shortly) and instructs the user to check their inbox and spam folder. The confirmation includes the expiration timeframe (24 hours) to set user expectations.","summary":"Resend email verification link by creating new token in reddit_like_email_verifications with fresh 24-hour expiration","parameters":[],"requestBody":{"description":"Verification resend request containing email address for which to generate new verification token","typeName":"IRedditLikeMember.IResendVerification"},"responseBody":{"description":"Verification resend confirmation indicating new verification email has been sent","typeName":"IRedditLikeMember.IVerificationResent"},"authorizationRole":null,"name":"resendVerification","prerequisites":[],"path":"/auth/member/email/verification/resend","method":"post"},{"specification":"Moderator account registration endpoint creating new moderator accounts with initial JWT token issuance. This operation establishes moderator identity in the reddit_like_moderators table with secure password hashing and email verification workflow. Since moderators are community managers with elevated permissions, this endpoint creates the foundational account that will later be assigned to specific communities through the community moderator assignment system. The registration validates unique username and email constraints, initializes email_verified as false pending verification, and generates both access and refresh tokens for immediate authenticated session establishment.","authorizationType":"join","description":"Creates a new moderator account and issues initial JWT authentication tokens for immediate platform access. This endpoint establishes the moderator's identity by inserting a record into the reddit_like_moderators table with securely hashed password credentials, unique username and email validation, and initial email verification status set to false.\n\nThe registration process validates that the provided username meets platform requirements (3-20 characters, alphanumeric with underscores and hyphens) and ensures global uniqueness across the platform. Email addresses must be valid format and unique across all moderator accounts. Passwords are hashed using bcrypt, Argon2, or PBKDF2 before storage, never persisted in plain text.\n\nUpon successful account creation, the system generates a verification email containing a unique time-limited verification link expiring after 24 hours as tracked in reddit_like_email_verifications table. The verification workflow follows the standard email verification pattern defined in the authentication requirements, where users can verify their email by clicking the link or request a new verification email if expired.\n\nThe response includes both an access token (30-minute expiration) and refresh token (30-day expiration) as JWT tokens, enabling immediate authenticated access without requiring a separate login call. The tokens contain the moderator's user ID, username, and role ('moderator') in the payload. A corresponding session record is created in reddit_like_sessions tracking the access token, refresh token, expiration timestamps, IP address, and user agent for security monitoring.\n\nThis operation is publicly accessible (no authentication required) as it represents the entry point for new moderators joining the platform. After registration, moderators have the same participation rights as members plus the ability to be assigned moderation permissions for specific communities through the reddit_like_community_moderators table.","summary":"Register new moderator account and issue JWT tokens","parameters":[],"requestBody":{"description":"Moderator registration information including username, email, and password credentials","typeName":"IRedditLikeModerator.ICreate"},"responseBody":{"description":"Authorized moderator session with JWT access and refresh tokens","typeName":"IRedditLikeModerator.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/moderator/join","method":"post"},{"specification":"Moderator authentication endpoint validating credentials and issuing JWT tokens for session establishment. This operation authenticates existing moderator accounts from the reddit_like_moderators table by verifying email and password credentials, then generates access and refresh tokens for authenticated API access. The login validates credentials against securely stored password hashes and enforces rate limiting (max 5 failed attempts in 15 minutes) tracked in reddit_like_auth_credentials to prevent brute-force attacks, with automatic 30-minute account lock on threshold breach.","authorizationType":"login","description":"Authenticates moderator credentials and issues JWT access and refresh tokens for establishing an authenticated session. This endpoint validates the provided email and password against moderator records in the reddit_like_moderators table, verifying the password hash matches the stored bcrypt/Argon2/PBKDF2 hashed credential.\n\nThe authentication process implements security measures including rate limiting through the reddit_like_auth_credentials table. The system tracks failed login attempts, incrementing the counter on each failure and recording the timestamp in last_failed_login_at. When 5 failed attempts occur within a 15-minute window, the account is temporarily locked by setting account_locked_until to 30 minutes from the current time. Locked accounts display an error message directing users to wait or reset their password.\n\nUpon successful credential validation, the system generates two JWT tokens: an access token with 30-minute expiration containing the moderator's ID, username, and role ('moderator'), and a refresh token with 30-day expiration for obtaining new access tokens without re-authentication. The tokens follow the JWT specification with issue timestamp (iat) and expiration timestamp (exp) claims.\n\nA new session record is created in reddit_like_sessions storing both tokens, their expiration timestamps, the requester's IP address and user agent for security monitoring, and last_activity_at set to the current timestamp. The session enables tracking active moderator sessions and supports security features like session revocation on password changes.\n\nSuccessful login updates reddit_like_auth_credentials by resetting failed_login_attempts to zero, recording last_successful_login_at timestamp, and storing last_login_ip for security monitoring and suspicious activity detection. This operation is publicly accessible as it represents the authentication entry point for returning moderators.\n\nIf credentials are invalid (email not found or password mismatch), the system returns a generic error message 'Invalid email or password' without revealing which credential was incorrect, preventing username enumeration attacks.","summary":"Authenticate moderator and issue JWT session tokens","parameters":[],"requestBody":{"description":"Moderator login credentials with email and password","typeName":"IRedditLikeModerator.ILogin"},"responseBody":{"description":"Authorized moderator session with JWT access and refresh tokens","typeName":"IRedditLikeModerator.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/moderator/login","method":"post"},{"specification":"Token refresh endpoint enabling moderators to obtain new access tokens without re-authentication. This operation validates the provided refresh token from reddit_like_sessions, verifies it hasn't expired (30-day expiration per requirements), and issues a fresh access token with renewed 30-minute expiration. The refresh mechanism supports seamless user experience by maintaining authenticated sessions without requiring repeated credential entry, while the shorter-lived access tokens limit security exposure from token compromise.","authorizationType":"refresh","description":"Refreshes an expired or expiring access token using a valid refresh token, issuing a new access token with renewed 30-minute expiration. This endpoint validates the provided refresh token against records in the reddit_like_sessions table, checking that the token exists, hasn't been revoked (deleted_at is null), and hasn't exceeded its 30-day expiration period tracked in refresh_token_expires_at.\n\nThe refresh process verifies the refresh token's cryptographic signature and payload integrity, extracting the moderator's user ID from the token claims. The system confirms the associated moderator account still exists in reddit_like_moderators, is not soft-deleted (deleted_at is null), and hasn't been suspended from the platform via reddit_like_platform_suspensions.\n\nUpon successful validation, a new JWT access token is generated containing the moderator's ID, username, and role ('moderator') with a fresh expiration timestamp set to 30 minutes from the current time. The new access token is returned to the client while the refresh token remains unchanged and valid for its original 30-day expiration period.\n\nThe corresponding session record in reddit_like_sessions is updated with the new access_token value, updated access_token_expires_at timestamp, and current timestamp in last_activity_at to track session activity. This operation enables continuous authenticated access without the security risks of long-lived access tokens or the user experience friction of frequent re-authentication.\n\nIf the refresh token is expired (current time exceeds refresh_token_expires_at), invalid, or belongs to a deleted session (deleted_at is not null), the system rejects the request requiring the user to log in again with email and password credentials. This operation requires a valid refresh token but does not require an active access token, as its purpose is to renew expired access tokens.","summary":"Refresh moderator access token using valid refresh token","parameters":[],"requestBody":{"description":"Refresh token for obtaining new access token","typeName":"IRedditLikeModerator.IRefresh"},"responseBody":{"description":"Authorized moderator session with refreshed JWT access token","typeName":"IRedditLikeModerator.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/moderator/refresh","method":"post"},{"specification":"Password reset request endpoint initiating the forgot password workflow for moderator accounts. This operation generates a time-limited password reset token and sends it via email to the registered moderator account. The reset token is stored in reddit_like_password_resets with 1-hour expiration per requirements, enabling secure password recovery without requiring current password knowledge. This is a critical account recovery mechanism for moderators who have forgotten their credentials.","authorizationType":null,"description":"Initiates password reset workflow by generating a unique time-limited reset token and sending it to the moderator's registered email address. This endpoint accepts an email address, validates it against reddit_like_moderators records to confirm a moderator account exists with that email, and creates a password reset token entry in reddit_like_password_resets.\n\nThe system generates a cryptographically secure random reset token using secure random number generation, ensuring tokens cannot be predicted or brute-forced. The token is stored with the moderator's user ID, email address, current timestamp as created_at, and expiration timestamp (expires_at) set to 1 hour from creation per requirements section on password reset.\n\nA password reset email is sent to the validated email address containing a unique verification link embedding the reset token. The link directs users to a password reset form where they can enter a new password. The email includes security guidance and warns users to ignore the email if they did not request a password reset.\n\nIf the provided email address does not match any moderator account, the system still returns a success response without revealing whether the email exists (preventing account enumeration attacks). This maintains security while providing a consistent user experience. The reset token can only be used once, tracked via the used_at timestamp which is set when the token is successfully consumed for password reset.\n\nThis operation is publicly accessible as moderators who have forgotten their passwords cannot authenticate to access protected endpoints. Rate limiting is applied per requirements to prevent abuse, restricting password reset requests to prevent email flooding attacks.","summary":"Request password reset link for moderator account","parameters":[],"requestBody":{"description":"Email address for moderator account requiring password reset","typeName":"IRedditLikeModerator.IPasswordResetRequest"},"responseBody":{"description":"Confirmation that password reset email has been sent if account exists","typeName":"IRedditLikeModerator.IPasswordResetResponse"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/moderator/password/reset/request","method":"post"},{"specification":"Password reset completion endpoint validating reset tokens and updating moderator passwords. This operation consumes password reset tokens from reddit_like_password_resets, validates expiration (1-hour limit per requirements), verifies the token hasn't been used (used_at is null), and updates the moderator's password_hash in reddit_like_moderators. Critical security operation that invalidates all existing sessions for the account to prevent unauthorized access with old tokens after password change.","authorizationType":null,"description":"Completes password reset by validating the reset token and updating the moderator's password to a new secure value. This endpoint receives the reset token (from email link) and new password, validates the token against reddit_like_password_resets records, verifies expiration constraints, and updates authentication credentials.\n\nThe validation process checks that the reset token exists in reddit_like_password_resets, matches the provided token exactly, has not expired (current time is before expires_at timestamp set to 1 hour after creation), and has not been previously used (used_at field is null). If any validation fails, the system rejects the request with appropriate error messages: expired tokens display 'This password reset link has expired. Please request a new password reset', and already-used tokens are rejected.\n\nThe new password must meet all platform password requirements: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character (@, #, $, %, &, *, etc.). The system validates password strength before accepting the change, displaying specific validation errors if requirements are not met.\n\nUpon successful validation, the system updates the reddit_like_moderators record by replacing the password_hash with a newly generated secure hash of the new password using bcrypt, Argon2, or PBKDF2. The reddit_like_password_resets record is updated by setting used_at to the current timestamp, preventing token reuse per security requirements.\n\nCritically, all existing sessions in reddit_like_sessions for this moderator account are invalidated by setting their deleted_at timestamps to the current time. This security measure ensures that any potentially compromised sessions using the old password cannot continue accessing the account after password reset. The user must log in again with their new password to establish fresh authenticated sessions.\n\nA confirmation email is sent to the account email address notifying the moderator that their password has been successfully changed, providing security awareness if the password change was unauthorized. This operation is publicly accessible as users resetting passwords cannot authenticate with their forgotten credentials.","summary":"Complete password reset by validating token and updating password","parameters":[],"requestBody":{"description":"Reset token and new password for completing password reset","typeName":"IRedditLikeModerator.IPasswordResetComplete"},"responseBody":{"description":"Confirmation of successful password reset","typeName":"IRedditLikeModerator.IPasswordResetConfirmation"},"authorizationRole":null,"name":"completePasswordReset","prerequisites":[{"endpoint":{"path":"/auth/moderator/password/reset/request","method":"post"},"description":"Password reset token must be generated and sent to moderator's email before it can be used to complete password reset"}],"path":"/auth/moderator/password/reset/complete","method":"post"},{"specification":"Authenticated password change endpoint allowing moderators to update their password while logged in. This operation requires the current password for verification, validates the new password meets strength requirements, updates the password_hash in reddit_like_moderators, and invalidates all other sessions except the current one. Different from password reset which uses email tokens, this operation requires authentication and current password knowledge, serving moderators who remember their credentials but want to change passwords for security reasons.","authorizationType":null,"description":"Enables authenticated moderators to change their password by providing current password verification and new password credentials. This endpoint requires valid moderator authentication via JWT access token and validates the current password before allowing password updates, ensuring only the legitimate account owner can change credentials.\n\nThe operation validates the provided current password by retrieving the moderator record from reddit_like_moderators using the authenticated user ID from the JWT token payload, then comparing the current password against the stored password_hash using the same hashing algorithm (bcrypt/Argon2/PBKDF2). If the current password verification fails, the system rejects the request with error message 'Current password is incorrect' without proceeding to password update.\n\nThe new password must meet all platform password requirements: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. The system validates password strength before accepting the change. A confirmation field ensures the new password was entered correctly by requiring exact match between new password and password confirmation inputs, rejecting mismatches with error 'Password confirmation does not match. Please ensure both passwords are identical.'\n\nUpon successful validation, the reddit_like_moderators record is updated with a new password_hash generated by securely hashing the new password. All existing sessions in reddit_like_sessions for this moderator are invalidated by setting deleted_at to the current timestamp, EXCEPT the current session used for this password change request. This security measure prevents potentially compromised sessions from continuing access after password change while maintaining the user's current authenticated state.\n\nA notification email is sent to the account email address confirming the password change occurred, providing security awareness if the change was unauthorized. The moderator remains logged in with their current session and can continue using the platform without interruption. This operation requires moderator role authentication and operates only on the authenticated user's own account.","summary":"Change moderator password with current password verification","parameters":[],"requestBody":{"description":"Current password verification and new password credentials","typeName":"IRedditLikeModerator.IPasswordChange"},"responseBody":{"description":"Confirmation of successful password change","typeName":"IRedditLikeModerator.IPasswordChangeConfirmation"},"authorizationRole":"moderator","name":"changePassword","prerequisites":[],"path":"/auth/moderator/password/change","method":"put"},{"specification":"Email verification completion endpoint validating verification tokens and marking moderator email addresses as verified. This operation consumes verification tokens from reddit_like_email_verifications generated during registration or email change workflows, validates expiration (24-hour limit per requirements), and updates email_verified status in reddit_like_moderators. Email verification is required for certain platform features and moderator privileges per requirements.","authorizationType":null,"description":"Completes email verification workflow by validating the verification token and marking the moderator's email as verified in the reddit_like_moderators table. This endpoint receives the unique verification token from the email link, validates it against reddit_like_email_verifications records, checks expiration constraints, and updates the moderator's email_verified status to true.\n\nThe validation process checks that the verification token exists in reddit_like_email_verifications, matches the provided token exactly, has not expired (current time is before expires_at timestamp set to 24 hours after creation per requirements), and has not been previously used (verified_at field is null). The system retrieves the associated moderator record via reddit_like_user_id foreign key reference.\n\nIf the token is expired (current time exceeds expires_at), the system rejects the verification with error message 'This verification link has expired. Please request a new verification email' and provides an option to resend verification email. Already-verified tokens (verified_at is not null) are rejected to prevent reuse.\n\nUpon successful validation, the system performs two database updates: (1) sets email_verified to true in the reddit_like_moderators record, granting the moderator full verified account privileges, and (2) sets verified_at to the current timestamp in the reddit_like_email_verifications record, marking the token as consumed and preventing future use.\n\nFor moderators created through registration, email verification is initially set to false, and certain features may require verified status (such as being assigned moderator permissions for communities or posting in certain communities per requirements). The verification type field distinguishes between 'registration' (initial account email verification) and 'email_change' (verifying new email address when moderators update their email).\n\nThis operation is publicly accessible as verification links are sent via email and users may click them before logging in. A confirmation message is displayed upon successful verification, and if the user is authenticated, they may be redirected to continue their previous activity. If verification fails, clear error messages guide users to request a new verification email.","summary":"Verify moderator email address using verification token","parameters":[],"requestBody":{"description":"Email verification token from verification link","typeName":"IRedditLikeModerator.IEmailVerification"},"responseBody":{"description":"Confirmation of successful email verification","typeName":"IRedditLikeModerator.IEmailVerificationConfirmation"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[],"path":"/auth/moderator/email/verify","method":"post"},{"specification":"Authenticated session termination endpoint invalidating JWT tokens and ending moderator sessions. This operation soft-deletes the current session in reddit_like_sessions by setting deleted_at timestamp, preventing further use of the access and refresh tokens. While JWT tokens cannot be truly revoked server-side due to their stateless nature, marking sessions as deleted enables the platform to reject token usage on subsequent requests by checking session validity. This provides moderators explicit control over ending their authenticated sessions for security.","authorizationType":null,"description":"Terminates the moderator's current authenticated session by invalidating their JWT tokens and marking the session as ended. This endpoint requires valid moderator authentication via JWT access token, retrieves the corresponding session record from reddit_like_sessions matching the token, and soft-deletes the session to prevent continued token usage.\n\nThe logout process identifies the current session by matching the provided access token against reddit_like_sessions.access_token field. Once the session is located and ownership verified (reddit_like_user_id matches the authenticated moderator's ID from the JWT payload), the system sets the session's deleted_at timestamp to the current time, effectively invalidating the session.\n\nWhile JWT tokens are stateless and cannot be truly revoked without a token blacklist or similar mechanism, marking the session as deleted enables the platform to reject subsequent requests using those tokens. Authentication middleware checks that the session associated with a token has deleted_at as null before granting access. This soft-delete approach maintains audit trail of all sessions including when they ended.\n\nAfter successful logout, the moderator is redirected to the public homepage or login page per requirements. The client application should clear stored tokens from local storage or cookies to complete the logout process client-side. Attempting to use invalidated tokens results in authentication errors requiring the moderator to log in again.\n\nThis operation requires moderator role authentication and operates on the authenticated user's current session. It does not affect other active sessions the moderator may have on different devices - each session must be explicitly logged out. For security-critical scenarios like password changes, all sessions except the current one are invalidated automatically as specified in the password change operation.","summary":"Logout moderator and invalidate current session tokens","parameters":[],"requestBody":null,"responseBody":{"description":"Confirmation of successful logout","typeName":"IRedditLikeModerator.ILogoutConfirmation"},"authorizationRole":"moderator","name":"logout","prerequisites":[],"path":"/auth/moderator/logout","method":"post"},{"specification":"Administrator registration endpoint enabling new admin account creation with username, email, and password. Issues initial JWT tokens (30-minute access token and 30-day refresh token) for immediate authenticated access. This is the entry point for platform administrators to join the system, creating their account credentials and receiving authentication tokens in a single operation. The operation validates username uniqueness (3-20 characters, alphanumeric with underscores/hyphens), email uniqueness and format, and password strength requirements (minimum 8 characters with uppercase, lowercase, number, and special character). Upon successful registration, the system creates the admin account with email_verified initially false, sends verification email, and returns the admin profile with JWT tokens for immediate platform access.","path":"/auth/admin/join","method":"post","name":"join","authorizationType":"join","authorizationRole":null,"summary":"Register new administrator account and issue authentication tokens","description":"Creates a new administrator account in the reddit_like_admins table with provided username, email, and securely hashed password. This endpoint serves as the registration gateway for platform administrators who will have system-wide elevated permissions to manage all communities, handle user appeals, suspend users globally, and configure platform settings.\n\nThe registration process validates username uniqueness (must be globally unique across all user types, 3-20 characters containing only alphanumeric characters, underscores, and hyphens), email uniqueness and format (valid email address unique across the platform), and password strength requirements (minimum 8 characters with at least one uppercase letter, lowercase letter, number, and special character). The password is securely hashed using bcrypt, Argon2, or PBKDF2 before storage - never stored in plain text.\n\nUpon successful account creation, the system initializes the admin with email_verified set to false, profile_bio and avatar_url as null, super_admin as false (can be elevated later by existing super admins), and sends a verification email containing a unique time-limited verification link that expires after 24 hours. The verification email is sent within 5 minutes of registration as tracked in the reddit_like_email_verifications table.\n\nImmediately after creating the admin account, the system generates and returns JWT authentication tokens to enable immediate platform access without requiring a separate login. The response includes an access token (expires in 30 minutes) and refresh token (expires in 30 days) in the IRedditLikeAdmin.IAuthorized response structure. These tokens contain the admin's user ID, username, role ('admin'), token issue timestamp, and expiration timestamp in the JWT payload, enabling authenticated API requests across the platform.\n\nThis endpoint integrates with the authentication credential tracking system (reddit_like_auth_credentials) to initialize security metadata for the new admin account, including failed login attempt counters set to zero and account lock status initialized as unlocked. The registration also creates the initial session record in reddit_like_sessions with the issued tokens, IP address, user agent, and activity timestamps for security monitoring and session management.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.ICreate","description":"Admin registration information including unique username (3-20 characters, alphanumeric with underscores/hyphens), unique email address, and strong password (minimum 8 characters with uppercase, lowercase, number, and special character)"},"responseBody":{"typeName":"IRedditLikeAdmin.IAuthorized","description":"Newly created admin profile with authentication tokens including access token (30-minute expiration), refresh token (30-day expiration), admin ID, username, email, role designation, email verification status, and account creation timestamp"},"prerequisites":[]},{"specification":"Administrator authentication endpoint validating email and password credentials to issue JWT tokens. This operation authenticates existing admin users by verifying their email and password against stored account information in reddit_like_admins table. Upon successful credential validation, generates and returns access token (30-minute expiration) and refresh token (30-day expiration) following the JWT-based session management pattern. The operation implements security measures including rate limiting (maximum 5 failed attempts within 15 minutes triggers 30-minute account lock), authentication event logging, and session tracking in reddit_like_sessions. After successful login, updates last_successful_login_at and last_login_ip in reddit_like_auth_credentials for security monitoring.","path":"/auth/admin/login","method":"post","name":"login","authorizationType":"login","authorizationRole":null,"summary":"Authenticate administrator and issue JWT tokens","description":"Validates administrator credentials (email and password) against the reddit_like_admins table and issues JWT authentication tokens upon successful verification. This endpoint serves as the primary authentication mechanism for platform administrators who need to access system-wide management capabilities, moderation tools, user appeals, and platform configuration.\n\nThe authentication process validates the provided email address against registered admin accounts, verifies the submitted password matches the stored securely hashed password (using bcrypt, Argon2, or PBKDF2), and checks the account's authentication credential status in reddit_like_auth_credentials. If the email does not match any admin account or the password is incorrect, the system rejects the login attempt and displays the generic error message 'Invalid email or password' to prevent account enumeration attacks.\n\nSecurity measures integrated into the login workflow include rate limiting to prevent brute-force attacks (maximum 5 failed login attempts within 15 minutes before temporarily locking the account for 30 minutes as tracked in reddit_like_auth_credentials), failed attempt counting with timestamps in last_failed_login_at, and temporary account locking via account_locked_until field. If an account is locked due to excessive failed attempts, the system denies login and displays the message 'Your account has been temporarily locked due to multiple failed login attempts. Please try again in 30 minutes or reset your password.'\n\nUpon successful credential validation, the system generates two JWT tokens: an access token with 30-minute expiration containing user ID, username, role ('admin'), token issue timestamp, and expiration timestamp in the payload; and a refresh token with 30-day expiration for obtaining new access tokens without re-entering credentials. Both tokens are returned in the IRedditLikeAdmin.IAuthorized response structure. The system also creates a session record in reddit_like_sessions capturing the access token, refresh token, IP address, user agent, and activity timestamps for security monitoring.\n\nThe login operation updates security metadata in reddit_like_auth_credentials by recording the successful login timestamp in last_successful_login_at, capturing the login IP address in last_login_ip, and resetting the failed_login_attempts counter to zero. All authentication events (successful logins, failed attempts, account locks) are logged in the reddit_like_moderation_logs table for security monitoring, audit trails, and suspicious activity detection per platform security requirements.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.ILogin","description":"Administrator login credentials containing email address and password for authentication validation"},"responseBody":{"typeName":"IRedditLikeAdmin.IAuthorized","description":"Authenticated admin profile with JWT tokens including access token (30-minute expiration), refresh token (30-day expiration), admin ID, username, email, role, super_admin status, and authentication timestamps"},"prerequisites":[]},{"specification":"Token refresh endpoint allowing administrators to obtain new access tokens using valid refresh tokens without re-entering credentials. This operation validates the provided refresh token from reddit_like_sessions table, verifies it has not expired (refresh tokens expire 30 days after issue), confirms the session has not been revoked (deleted_at is null), and issues a fresh access token with renewed 30-minute expiration while maintaining the same refresh token. The operation ensures continuous authenticated access for admins without repeated credential entry, following the JWT session management pattern. Updates the session's last_activity_at timestamp for activity tracking.","path":"/auth/admin/refresh","method":"post","name":"refresh","authorizationType":"refresh","authorizationRole":null,"summary":"Refresh administrator access token using refresh token","description":"Validates the administrator's refresh token and issues a new access token with fresh 30-minute expiration, enabling continued authenticated access without requiring credential re-entry. This endpoint implements the token refresh workflow that allows administrators to maintain long-term sessions while using short-lived access tokens for enhanced security.\n\nThe refresh operation validates the provided refresh token against active sessions in the reddit_like_sessions table, confirming the refresh token exists, has not expired (refresh_token_expires_at is in the future), and the session has not been revoked (deleted_at is null). The system also verifies the associated admin account exists in reddit_like_admins, is not deleted (deleted_at is null), and is not suspended in reddit_like_platform_suspensions.\n\nIf the refresh token is invalid, expired, or associated with a deleted/revoked session, the system rejects the refresh request and returns an authentication error requiring the administrator to log in again with their email and password credentials. If the refresh token has expired beyond the 30-day lifetime, the system displays the message 'Your session has expired. Please log in again' and requires full re-authentication.\n\nUpon successful refresh token validation, the system generates a new JWT access token with fresh 30-minute expiration containing the admin's user ID, username, role ('admin'), super_admin status, token issue timestamp, and new expiration timestamp in the payload. The refresh token itself remains unchanged and continues to be valid until its original 30-day expiration. Both the new access token and the existing refresh token are returned in the IRedditLikeAdmin.IAuthorized response structure.\n\nThe refresh operation updates the session record in reddit_like_sessions by replacing the access_token field with the newly generated token, updating access_token_expires_at to the new expiration time (30 minutes from refresh time), recording the current timestamp in last_activity_at for session activity tracking, and updating the updated_at timestamp. This maintains an audit trail of token refresh activity for security monitoring and enables detection of suspicious refresh patterns that might indicate compromised tokens.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.IRefresh","description":"Refresh token from previous authentication (login or join) used to obtain new access token without credential re-entry"},"responseBody":{"typeName":"IRedditLikeAdmin.IAuthorized","description":"Updated authentication tokens including new access token (fresh 30-minute expiration), existing refresh token (maintains original 30-day expiration), and current admin profile information"},"prerequisites":[]},{"specification":"Administrator password reset request endpoint enabling admins who forgot their password to receive a password reset email with time-limited reset link. This operation validates the provided email address exists in reddit_like_admins table, generates a unique cryptographically secure reset token, creates a record in reddit_like_password_resets with 1-hour expiration, and sends the password reset email containing the unique reset link within 5 minutes. The reset token expires after 1 hour per authentication requirements and can only be used once (tracked via used_at timestamp). This is the first step in the forgot password workflow, followed by the user clicking the reset link and submitting a new password.","path":"/auth/admin/password/reset/request","method":"post","name":"requestPasswordReset","authorizationType":null,"authorizationRole":null,"summary":"Request password reset email for admin account","description":"Initiates the password reset workflow for administrators who have forgotten their password by generating a time-limited password reset token and sending a reset email to the registered email address. This endpoint implements the 'Forgot Password' mechanism accessible from the login page, enabling account recovery without requiring the current password.\n\nThe operation validates the provided email address exists in the reddit_like_admins table as a registered administrator account. If the email address is found, the system generates a unique cryptographically secure reset token using secure random number generation, creates a password reset record in reddit_like_password_resets with the admin's user ID, email address, reset token, and expiration timestamp set to 1 hour from creation time per authentication requirements. The reset token is a one-time use token tracked via the used_at field.\n\nWithin 5 minutes of receiving a valid password reset request, the system sends a password reset email to the registered email address containing a unique password reset link with the embedded reset token. The email explains the reset process, includes the clickable reset link, warns that the link expires in 1 hour, and provides instructions for requesting a new reset link if needed. If the provided email address does not match any admin account, the system still displays a success message to prevent account enumeration attacks, but does not send an email.\n\nThe password reset record in reddit_like_password_resets includes the reddit_like_user_id linking to the reddit_like_users table (which consolidates all user types including admins), the email address for validation, the unique reset_token, expires_at timestamp (1 hour from creation), used_at initially set to null (marks token as unused), and created_at timestamp. The reset token can only be used once - after successful password reset, the used_at field is updated to prevent token reuse.\n\nThis operation is the first step in the two-step password reset workflow. After receiving the email, the administrator clicks the reset link (which contains the token), navigates to the password reset form, enters their new password meeting all validation requirements (minimum 8 characters with uppercase, lowercase, number, and special character), and submits the new password along with the token to complete the reset process. If the reset link expires before use, the system displays an error message and offers to resend a new reset link.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.IPasswordResetRequest","description":"Email address of the admin account requesting password reset. System validates this email exists in admin accounts before sending reset link."},"responseBody":{"typeName":"IRedditLikeAdmin.IPasswordResetRequestResponse","description":"Confirmation response indicating password reset email has been sent if the email exists. Response is identical whether email exists or not to prevent account enumeration."},"prerequisites":[]},{"specification":"Administrator password reset completion endpoint validating the reset token and updating the account password. This operation receives the reset token (from email link) and new password, validates the token exists in reddit_like_password_resets, confirms it has not expired (within 1-hour window), verifies it has not been used (used_at is null), validates the new password meets strength requirements, updates the password_hash in reddit_like_admins, marks the token as used, invalidates all existing sessions for security, and sends confirmation email. This is the second step in the forgot password workflow, completing the password reset process initiated by the reset request.","path":"/auth/admin/password/reset/complete","method":"post","name":"completePasswordReset","authorizationType":null,"authorizationRole":null,"summary":"Complete password reset with token and new password","description":"Completes the password reset workflow by validating the reset token and updating the administrator's password to the new provided password. This endpoint is accessed when an administrator clicks the password reset link from their email and submits their new password, finalizing the account recovery process.\n\nThe operation validates the provided reset token against active password reset records in reddit_like_password_resets table, confirming the token exists, has not expired (expires_at is in the future and within the 1-hour validity window per authentication requirements), has not been previously used (used_at is null), and matches an existing admin account in reddit_like_admins through the reddit_like_user_id foreign key relationship.\n\nIf the reset token is expired (current time exceeds expires_at), the system rejects the reset request and displays the error message 'This password reset link has expired. Please request a new password reset.' and offers to resend a new reset link. If the reset token has already been used (used_at is not null), the system rejects the request to prevent token reuse and displays an error indicating the link is no longer valid.\n\nThe new password undergoes complete validation against the same requirements as registration: minimum length of 8 characters, contains at least one uppercase letter, one lowercase letter, one number, and one special character (@, #, $, %, &, *, etc.). If the new password fails any validation requirement, the system rejects the reset and displays specific error messages listing which requirements are not met. The system also validates that the new password confirmation (if provided) matches the new password exactly.\n\nUpon successful validation, the system updates the admin account's password_hash field in reddit_like_admins with the securely hashed new password (using bcrypt, Argon2, or PBKDF2), marks the reset token as used by setting used_at to the current timestamp in reddit_like_password_resets, and invalidates all existing active sessions for that admin account by setting deleted_at on all related reddit_like_sessions records to force re-authentication on all devices for security.\n\nAfter successful password reset completion, the system sends a confirmation email to the admin's registered email address notifying them that their password was changed, includes the timestamp of the change, and advises them to contact support if they did not initiate this change. The system then displays a confirmation message 'Your password has been successfully reset. Please log in with your new password.' and redirects or prompts the administrator to log in using the new credentials through the login endpoint.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.IPasswordResetComplete","description":"Password reset completion data including the unique reset token (from email link), new password meeting strength requirements, and new password confirmation for validation"},"responseBody":{"typeName":"IRedditLikeAdmin.IPasswordResetCompleteResponse","description":"Confirmation response indicating password reset was successful and prompting admin to log in with new credentials"},"prerequisites":[{"endpoint":{"path":"/auth/admin/password/reset/request","method":"post"},"description":"Password reset request must be initiated first to generate a valid reset token before the password can be reset"}]},{"specification":"Administrator password change endpoint for authenticated admins to update their password from account settings. This operation requires the current password for verification (validates against stored password_hash), accepts the new password meeting all strength requirements, and validates new password confirmation matches. Upon successful validation, updates password_hash in reddit_like_admins, invalidates all existing sessions except the current session by setting deleted_at on other reddit_like_sessions records, sends notification email confirming the password change, and logs the security event in reddit_like_moderation_logs. This differs from password reset as it requires authentication and current password knowledge.","path":"/auth/admin/password/change","method":"put","name":"changePassword","authorizationType":null,"authorizationRole":"admin","summary":"Change administrator password from account settings","description":"Enables authenticated administrators to change their password from account settings by providing their current password for verification and submitting a new password. This endpoint implements the password change feature accessible from the admin's account settings page, requiring the admin to be currently authenticated and to know their existing password.\n\nThe operation first validates the administrator's authentication status by verifying their JWT access token is valid and not expired, confirming they have admin role permissions. The system then validates the provided current password against the stored password_hash in reddit_like_admins table for the authenticated admin. If the current password is incorrect, the system rejects the password change request and displays the error message 'Current password is incorrect' to prevent unauthorized password changes.\n\nThe new password undergoes complete validation against platform password requirements: minimum length of 8 characters, contains at least one uppercase letter, one lowercase letter, one number, and one special character (@, #, $, %, &, *, etc.). The system also validates that the new password confirmation field matches the new password exactly. If the confirmation does not match, the system displays the error message 'Password confirmation does not match. Please ensure both passwords are identical.'\n\nUpon successful validation of both the current password and new password requirements, the system updates the admin's password_hash field in reddit_like_admins with the securely hashed new password using bcrypt, Argon2, or PBKDF2. For security, the system then invalidates all existing active sessions for this admin account except the current session by setting deleted_at timestamps on all other reddit_like_sessions records where reddit_like_user_id matches and deleted_at is null, forcing re-authentication on other devices to prevent unauthorized access with old credentials.\n\nAfter successful password change, the system sends a notification email to the admin's registered email address in the email field confirming the password change occurred, includes the timestamp of the change, and advises contacting support if the change was not initiated by them. The password change event is also logged in reddit_like_moderation_logs with log_type 'password_change', actor_admin_id identifying the admin who changed their password, action_description explaining the security event, and created_at timestamp for security audit trails and compliance.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.IPasswordChange","description":"Password change request containing current password for verification, new password meeting strength requirements, and new password confirmation"},"responseBody":{"typeName":"IRedditLikeAdmin.IPasswordChangeResponse","description":"Confirmation response indicating password change was successful and other sessions have been invalidated"},"prerequisites":[]},{"specification":"Email verification completion endpoint processing the unique verification token sent to the administrator's email address. This operation validates the verification token from reddit_like_email_verifications table, confirms it has not expired (24-hour expiration window), verifies the verification_type is 'registration' or 'email_change', marks the email as verified by setting verified_at timestamp, and updates email_verified to true in reddit_like_admins. For email_change verification types, also updates the email field in reddit_like_admins to the new verified email address. This endpoint is accessed when admins click the verification link from the registration or email change verification email.","path":"/auth/admin/email/verify","method":"post","name":"verifyEmail","authorizationType":null,"authorizationRole":null,"summary":"Verify administrator email address using verification token","description":"Processes the email verification token sent to the administrator's email address, marking the email as verified in the system upon successful validation. This endpoint is accessed when administrators click the verification link from their registration email or email change verification email, completing the email verification workflow.\n\nThe operation validates the provided verification_token against active verification records in reddit_like_email_verifications table, confirming the token exists, matches a pending verification (verified_at is null), has not expired (expires_at is in the future and within the 24-hour validity window per authentication requirements), and is associated with an admin account through the reddit_like_user_id foreign key linking to reddit_like_users table.\n\nIf the verification token is expired (current time exceeds expires_at), the system displays the error message 'This email verification link has expired. Please request a new verification email.' and offers the administrator the option to resend a new verification email by generating a fresh verification token with a new 24-hour expiration window. If the token does not exist or is invalid, the system displays an appropriate error message indicating the verification link is not valid.\n\nThe system distinguishes between two verification types based on the verification_type field: 'registration' for initial account email verification during signup, and 'email_change' for verifying a new email address when administrators update their email in account settings. The verification workflow handles both types appropriately.\n\nFor registration verification (verification_type = 'registration'), upon successful token validation, the system marks the email as verified by setting verified_at to the current timestamp in reddit_like_email_verifications, updates email_verified to true in the reddit_like_users table for the associated admin account, and displays a confirmation message 'Your email has been successfully verified. Your account is now fully activated.' The admin is then redirected to their dashboard or home page.\n\nFor email change verification (verification_type = 'email_change'), upon successful token validation, the system marks the verification as complete by setting verified_at in reddit_like_email_verifications, updates the email field in reddit_like_users to the newly verified email address (stored in the email field of the verification record), updates email_verified to true, and sends a confirmation notification to both the old and new email addresses informing the admin of the email change for security awareness.\n\nAll email verification events are logged in reddit_like_moderation_logs for security monitoring, with log_type 'email_verification', actor identification fields populated appropriately, action_description explaining the verification event, and created_at timestamp for audit trails.","parameters":[],"requestBody":{"typeName":"IRedditLikeAdmin.IEmailVerification","description":"Email verification token from the verification link sent to admin's email address (expires after 24 hours)"},"responseBody":{"typeName":"IRedditLikeAdmin.IEmailVerificationResponse","description":"Confirmation response indicating email verification was successful and account is now fully activated"},"prerequisites":[]},{"specification":"Email verification resend endpoint for authenticated administrators to request a new verification email when the original verification link has expired or was not received. This operation validates the admin is authenticated, checks if email is already verified (email_verified in reddit_like_admins), generates a new verification token in reddit_like_email_verifications with fresh 24-hour expiration, invalidates any previous pending verification tokens for the same admin, and sends a new verification email containing the updated verification link. This enables admins to complete email verification if they missed the initial email or the link expired.","path":"/auth/admin/email/verify/resend","method":"post","name":"resendVerificationEmail","authorizationType":null,"authorizationRole":"admin","summary":"Resend email verification link to administrator","description":"Generates and sends a new email verification link to the authenticated administrator's registered email address when the original verification link has expired or was not received. This endpoint enables administrators to retry email verification if they did not complete verification within the original 24-hour window or if the verification email was lost or missed.\n\nThe operation validates the administrator's authentication status by verifying their JWT access token is valid, confirms they have admin role permissions, and retrieves their account information from reddit_like_admins table through the reddit_like_users relationship. The system then checks the current email verification status in the email_verified field - if the email is already verified (email_verified is true), the system displays a message 'Your email address is already verified' and does not send a new verification email.\n\nFor administrators with unverified emails (email_verified is false), the system generates a new cryptographically secure verification token using secure random number generation and creates a fresh verification record in reddit_like_email_verifications. The new record includes the reddit_like_user_id linking to the admin's account, the current email address from the email field, the newly generated unique verification_token, verification_type set to 'registration' (or 'email_change' if this is for a pending email change), expires_at timestamp set to 24 hours from the current time per authentication requirements, verified_at initially null, and created_at timestamp.\n\nBefore creating the new verification record, the system invalidates any previous pending verification tokens for the same administrator by either deleting old verification records with the same reddit_like_user_id where verified_at is null, or by allowing them to remain but ensuring the new token supersedes them. This prevents accumulation of unused verification tokens and ensures only the most recent token is valid.\n\nThe system sends a new verification email to the administrator's registered email address (retrieved from the email field in reddit_like_users) containing a unique verification link with the newly generated token embedded, explanation that this is a new verification link replacing any previous links, instructions to click the link within 24 hours to verify the email, and information about requesting another new link if needed. The email is sent within 5 minutes of the resend request.\n\nUpon successful verification email sending, the system displays a confirmation message 'A new verification email has been sent to your email address. Please check your inbox and click the verification link within 24 hours.' The operation returns a response indicating the email was sent successfully, though it does not expose whether the email address actually exists in the system for security reasons.","parameters":[],"requestBody":null,"responseBody":{"typeName":"IRedditLikeAdmin.IResendVerificationResponse","description":"Confirmation response indicating a new verification email has been sent to the admin's registered email address"},"prerequisites":[]},{"specification":"Administrator logout endpoint for authenticated admins to explicitly end their current session by invalidating tokens. This operation validates the admin is authenticated via JWT access token, identifies the current session record in reddit_like_sessions, marks the session as revoked by setting deleted_at to current timestamp (soft delete), clears tokens from the client application, logs the logout event in reddit_like_moderation_logs, and redirects to public homepage or login page. This ensures secure session termination and prevents token reuse after logout.","path":"/auth/admin/logout","method":"post","name":"logout","authorizationType":null,"authorizationRole":"admin","summary":"Log out administrator and invalidate current session","description":"Terminates the administrator's current authenticated session by invalidating JWT tokens and marking the session as revoked in the database. This endpoint implements the logout mechanism accessible from all authenticated pages, enabling administrators to explicitly end their session for security when leaving a device or ending their work session.\n\nThe operation validates the administrator's authentication status by verifying their JWT access token is valid and not expired, confirming they have admin role permissions. The system identifies the current active session by matching the provided access token or refresh token against records in reddit_like_sessions table where the token matches and deleted_at is null (active session).\n\nUpon identifying the current session, the system performs soft deletion by setting the deleted_at field to the current timestamp, which marks the session as revoked and prevents the associated access token and refresh token from being used for future authenticated requests. This soft delete approach preserves session history in reddit_like_sessions for security audit trails, activity analytics, and investigating suspicious authentication patterns while immediately terminating the session's validity.\n\nThe logout operation does not affect other active sessions the administrator may have on different devices or browsers - only the current session making the logout request is invalidated. If the administrator is logged in on multiple devices, those other sessions remain valid until they expire naturally, are explicitly logged out, or are invalidated by security events like password changes.\n\nThe system logs the logout event in reddit_like_moderation_logs with log_type 'admin_logout', actor_admin_id identifying the admin who logged out, action_description explaining the session termination, metadata containing session information (IP address, user agent from the session record), and created_at timestamp. This creates an audit trail of all admin authentication events for security monitoring and compliance.\n\nAfter successfully invalidating the session, the system returns a response indicating logout was successful and instructs the client application to clear all stored authentication tokens (access token and refresh token) from local storage, cookies, or session storage. The response may include a redirect URL to the public homepage or login page. The client application must clear the tokens to complete the logout process and prevent accidental authenticated requests with invalidated tokens.","parameters":[],"requestBody":null,"responseBody":{"typeName":"IRedditLikeAdmin.ILogoutResponse","description":"Confirmation response indicating logout was successful and session has been invalidated"},"prerequisites":[]},{"specification":"This operation validates an existing JWT access token to verify that the user's session is still valid and has not expired. It operates on the reddit_like_sessions table from the Prisma schema and checks the access_token_expires_at timestamp against the current time. This endpoint is critical for maintaining secure session state and ensuring users remain authenticated throughout their platform interaction. The operation checks token validity, session expiration, and returns current user information if the token is valid, or appropriate error responses if the token is expired, invalid, or the session has been revoked.","path":"/redditLike/auth/session/validate","method":"post","summary":"Validate JWT access token and verify active session status","description":"This operation validates an existing JWT access token to determine whether the user's session remains valid and active. When a client application needs to verify that the current user is still authenticated, this endpoint checks the provided access token against the reddit_like_sessions table in the database.\n\nThe validation process performs several critical checks. First, it verifies that the access token exists in the database and corresponds to an active session record. Second, it checks that the access_token_expires_at timestamp has not passed, ensuring the token is still within its 30-minute validity window as defined in the authentication requirements. Third, it verifies that the session has not been explicitly revoked through soft deletion (deleted_at is null), which occurs when users log out or change their passwords.\n\nSecurity considerations include protecting against token reuse after logout, preventing access with expired credentials, and ensuring session integrity. The operation validates that the associated user account exists and is in good standing, checking that the reddit_like_users record is not soft-deleted and that the user is not under platform suspension.\n\nThis operation integrates with the User Roles and Authentication system defined in the requirements, implementing the JWT-based session management specified in sections on login and session management. It provides the foundation for maintaining authenticated state across API requests and supports the token refresh workflow when access tokens expire.\n\nRelated API operations include the initial login endpoint that creates sessions and generates tokens, the token refresh endpoint that issues new access tokens using refresh tokens, and the logout endpoint that explicitly revokes sessions. This validation endpoint is typically called by client applications on startup, page refresh, or before performing authenticated actions to ensure the user's session remains valid.\n\nExpected behavior includes returning current user information (user ID, username, role) when the token is valid, returning authentication errors when the token is expired or invalid, and properly handling edge cases such as deleted user accounts or revoked sessions.","parameters":[],"requestBody":{"description":"JWT access token to validate and session verification parameters","typeName":"IRedditLikeAuthSession.IValidate"},"responseBody":{"description":"Validation result with user information if token is valid, or error details if invalid","typeName":"IRedditLikeAuthSession.IValidationResult"},"authorizationRole":null,"authorizationType":null,"name":"validate","prerequisites":[]},{"specification":"This operation performs member logout by explicitly revoking the current session and invalidating JWT tokens. It operates on the reddit_like_sessions table from the Prisma schema by soft-deleting the session record (setting deleted_at timestamp). This endpoint implements the logout workflow specified in the authentication requirements, ensuring that when users log out, their access and refresh tokens can no longer be used to authenticate requests. The operation clears the user's authentication state and provides a clean logout experience.","path":"/redditLike/member/auth/member/logout","method":"post","summary":"Log out authenticated member by revoking current session and invalidating tokens","description":"This operation performs the logout workflow for authenticated members by explicitly revoking their current active session. When a member initiates logout, this endpoint invalidates both the access token and refresh token associated with their session, preventing any further authenticated requests using those credentials.\n\nThe logout process operates on the reddit_like_sessions table by soft-deleting the session record, setting the deleted_at timestamp to mark the session as revoked. This approach follows the platform's soft-delete pattern and maintains an audit trail of session lifecycle events including when users logged out. The soft deletion ensures that historical session data is preserved for security monitoring and analytics while preventing the tokens from being used for future authentication.\n\nSecurity considerations include ensuring that logout invalidates sessions completely, preventing token reuse after logout, and protecting against session hijacking by requiring the current valid session to perform logout. The operation validates that the requesting user owns the session being logged out, preventing users from terminating other users' sessions.\n\nThis operation integrates with the User Roles and Authentication system defined in the requirements document section on logout requirements. It implements the specified behavior that when a user initiates logout, the system invalidates the current session by clearing tokens from the client application and provides appropriate redirection after logout completion.\n\nRelated API operations include the login endpoint that creates sessions and issues tokens, the session validation endpoint that verifies token validity, and the token refresh endpoint that extends sessions. After successful logout, users must log in again with their email and password credentials to obtain new access and refresh tokens.\n\nExpected behavior includes immediate session invalidation upon successful logout, clearing authentication state from the client application, providing confirmation that logout completed successfully, and properly handling edge cases such as already-expired sessions or invalid logout requests. The operation ensures that all existing sessions for the user are invalidated as specified in the password change requirements, though the primary use case is revoking the current session during normal logout flow.","parameters":[],"requestBody":{"description":"Current session information and logout confirmation parameters","typeName":"IRedditLikeAuthMember.ILogout"},"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"logout","prerequisites":[]},{"specification":"This operation handles guest user logout, terminating the guest session and clearing any session tracking data. The operation operates on the reddit_like_users table where role='guest' and manages the associated session_identifier for anonymous user tracking. Guest sessions are used for analytics and potential conversion tracking per the Prisma schema documentation. When a guest logs out, the system clears the session tracking data to end the anonymous session, allowing the user to start fresh or transition to authenticated registration.","path":"/redditLike/auth/guest/logout","method":"post","summary":"Terminate guest user session and clear session tracking data","description":"This operation performs logout for guest users (unauthenticated visitors) by terminating their current session and clearing associated tracking data. Guest sessions are tracked in the reddit_like_users table with role='guest' and a unique session_identifier used for analytics and conversion tracking.\n\nWhen a guest user initiates logout, the system clears the session_identifier, ip_address, user_agent, and related tracking fields from the guest user record. This effectively ends the anonymous session and removes any personalization or tracking associated with that guest session.\n\nSecurity considerations include ensuring the session termination is complete and that any client-side session data is properly cleared. The operation is available to all users regardless of authentication status, as guests may have active sessions that need to be terminated.\n\nThis operation integrates with the authentication system defined in the User Roles and Authentication requirements. It provides a clean exit path for guest users who wish to clear their browsing data or start a fresh session. After logout, the guest user can continue browsing as a new guest session or proceed to register for a member account.\n\nThe operation does not require request body parameters as the guest session is identified through session tokens or cookies provided by the client. The system identifies the guest user context from the authentication state and terminates the appropriate session.","parameters":[],"requestBody":null,"responseBody":null,"authorizationRoles":[],"name":"logout","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new community (subreddit) in the platform, establishing a dedicated space for users to gather around shared interests. The operation inserts a new record into the reddit_like_communities table with the authenticated member as the creator_id. Per requirements section 3.2.3, community creation requires authentication and members can create up to 3 communities per day. The creator is automatically assigned as the primary moderator with full permissions. Communities are created with configurable privacy settings, posting permissions, and content type restrictions. The community name must be globally unique (case-insensitive) between 3-25 characters using only alphanumeric characters and underscores.","path":"/redditLike/member/communities","method":"post","summary":"Create a new community with the authenticated member as primary moderator","description":"This operation enables authenticated members to create new communities (analogous to subreddits) where users can gather around shared interests and topics. Communities serve as the foundational organizational structure of the platform, with each community having its own rules, moderators, and subscriber base.\n\nWhen a member creates a community, they provide required information including a unique community identifier (code), display name, and description explaining the community's purpose. The creator can optionally configure additional settings such as privacy type (public or private), posting permissions (who can create posts), allowed post types (text, link, image), category classification, and visual branding (icon and banner images).\n\nThe system validates that the community code is globally unique (case-insensitive) and meets format requirements (3-25 characters, alphanumeric and underscores only). The description must be between 10-500 characters and clearly explain the community's purpose. Per business requirements, members are limited to creating 3 communities per day to prevent abuse.\n\nUpon successful creation, the system automatically assigns the creator as the primary moderator with irrevocable full permissions for managing the community. The new community is initialized with default settings (public, anyone subscribed can post, all post types allowed) unless custom values are provided. The subscriber count starts at zero.\n\nSecurity considerations include enforcing the daily creation limit, validating community names against a blacklist of prohibited terms, and preventing names that impersonate platform entities. The operation integrates with the community management system defined in the requirements and establishes the foundation for community-specific content, subscriptions, and moderation workflows.\n\nThis operation is essential for platform growth as it enables distributed community creation by members, allowing the platform to scale organically through user-driven community formation around diverse interests and topics.","parameters":[],"requestBody":{"description":"Community creation data including unique identifier, name, description, privacy settings, posting permissions, allowed post types, category, and optional branding","typeName":"IRedditLikeCommunity.ICreate"},"responseBody":{"description":"The newly created community with all configured settings, creator information, and initial state","typeName":"IRedditLikeCommunity"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of communities from the Reddit-like platform. It operates on the reddit_like_communities table from the Prisma schema and supports advanced searching, filtering by category, privacy type, and activity status, as well as sorting by various criteria including subscriber count, creation date, and community name. This is a complex query operation that returns multiple communities matching the search criteria.","path":"/redditLike/communities","method":"patch","summary":"Search and retrieve filtered, paginated list of communities","description":"Retrieve a comprehensive filtered and paginated list of communities from the Reddit-like platform. This operation provides advanced search capabilities for discovering communities based on multiple criteria including name matching, description keywords, category filters, privacy settings, and activity status.\n\nThe operation supports comprehensive pagination with configurable page sizes and multiple sorting options. Users can sort communities by subscriber count, creation date, community name, or activity level in ascending or descending order. This enables efficient community discovery for both new users exploring the platform and existing users finding new communities to join.\n\nSecurity considerations include appropriate filtering of private communities based on the requesting user's authorization level. Guest users and members can discover public communities freely, while private communities are hidden from general search unless the user has been granted access. The operation enforces community privacy settings defined in the reddit_like_communities table.\n\nThis operation integrates with the Community table as defined in the Prisma schema (reddit_like_communities), incorporating all available community fields and relationships including creator information, subscriber counts, category tags, and privacy settings. The response includes community summary information optimized for list displays in browse and search interfaces.\n\nThe search functionality supports partial matching on community names and descriptions using PostgreSQL trigram indexes (gin_trgm_ops) for efficient full-text search performance. Filter options include primary category selection, privacy type filtering (public/private), archived status filtering, and minimum subscriber count thresholds. Time range filters allow discovering recently created communities or filtering by creation date ranges.\n\nThis operation is essential for the community discovery workflow described in requirements section 3.1-3.4, enabling users to browse communities by category, search for specific topics, find trending communities, and discover new communities based on their interests. The operation powers the community directory interface and search functionality that helps users navigate the platform's organizational structure.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, and pagination configuration for community discovery","typeName":"IRedditLikeCommunity.IRequest"},"responseBody":{"description":"Paginated list of community summary information matching search criteria","typeName":"IPageIRedditLikeCommunity.ISummary"},"authorizationType":null,"authorizationRole":null,"prerequisites":[],"name":"index"},{"specification":"This operation retrieves detailed information about a specific community identified by its unique ID. It operates on the reddit_like_communities table and returns comprehensive community data including metadata, settings, rules, moderator information, and statistics. This is a single-resource retrieval operation that provides all information needed to display a community page.","path":"/redditLike/communities/{communityId}","method":"get","summary":"Retrieve detailed information about a specific community by ID","description":"Retrieve complete detailed information about a specific community on the Reddit-like platform. This operation provides comprehensive community data necessary for rendering the community page, including all community metadata, configuration settings, rules, moderator information, and engagement statistics.\n\nThe operation returns the community's core identification and branding information including the unique community code (used in URLs), display name, description, icon URL, and banner URL. Visual branding elements enable community identity and recognition throughout the platform. The description field contains the 10-500 character explanation of the community's purpose and topic as defined during community creation.\n\nCommunity configuration settings are included in the response, such as privacy type (public or private), posting permissions (anyone_subscribed, approved_only, or moderators_only), and content type restrictions (whether text posts, link posts, and image posts are allowed). These settings control who can participate in the community and what types of content can be shared, as specified in the community management requirements.\n\nThe response includes categorization and discovery metadata such as the primary category assignment (Technology, Gaming, Sports, Entertainment, Education, Science, Arts, News, Lifestyle, Business, Other) and up to three secondary tags for improved discoverability. These fields power community search and recommendation features as described in requirements section 7.2.\n\nEngagement statistics are provided including the total subscriber count (denormalized for performance) and archived status flag. The subscriber count reflects the community's size and popularity, while the archived flag indicates whether the community is still accepting new content or has been archived due to inactivity per requirements section 9.3.\n\nSecurity considerations include enforcing privacy settings based on the requesting user's authorization. Public communities return full information to all users including guests. Private communities require the user to be an approved member or moderator before revealing detailed information. Guest users and non-members attempting to access private communities receive limited information with a prompt to request access.\n\nThis operation integrates with the reddit_like_communities table from the Prisma schema, utilizing the creator relationship to include creator information, and accessing related community rules through the reddit_like_community_rules relationship. The operation serves as the foundation for displaying community pages where users view posts, subscribe, and understand community standards.\n\nThe response includes temporal metadata such as creation timestamp (when the community was founded) and last update timestamp (when community settings were modified), enabling users to understand community age and activity recency. The soft deletion timestamp (deleted_at) is checked to prevent access to communities in the 30-day deletion cooldown period.","parameters":[{"name":"communityId","description":"Unique identifier of the target community to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed community information including metadata, settings, rules, and statistics","typeName":"IRedditLikeCommunity"},"authorizationType":null,"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before it can be retrieved by ID"}],"name":"at"},{"specification":"This operation updates the configuration and settings of an existing community. It operates on the reddit_like_communities table from the Prisma schema, allowing moderators to modify community metadata including description, visual branding (icon and banner), posting permissions, content type restrictions, categorization, and privacy settings. The operation is restricted to moderators of the specific community and platform administrators who have override capabilities. The community code (name) remains immutable after creation to maintain URL stability and prevent confusion. This endpoint enables community moderators to evolve their community's appearance, rules, and access controls as the community grows and needs change.","path":"/redditLike/moderator/communities/{communityId}","method":"put","summary":"Update community settings and configuration for the specified community","description":"Updates the configuration and settings of an existing community identified by communityId. This operation allows community moderators and platform administrators to modify various aspects of their community including the description, visual branding elements (icon and banner images), posting permission rules, allowed content types, category classifications, and privacy settings.\n\nThe operation references the reddit_like_communities table from the Prisma schema. Moderators can update fields including description (10-500 characters), icon_url, banner_url, privacy_type (public or private), posting_permission (anyone_subscribed, approved_only, moderators_only), content type toggles (allow_text_posts, allow_link_posts, allow_image_posts), primary_category, and secondary_tags.\n\nSecurity considerations include verification that the requesting user is either a moderator of the specified community with manage_settings permission or a platform administrator. Community moderators can only modify communities they have been assigned to moderate, while administrators have system-wide override capabilities. The community code field is immutable and cannot be changed through this endpoint to maintain URL stability. Granular permission checking (manage_settings permission) is handled in the provider function implementation layer.\n\nValidation rules include enforcing description length requirements (10-500 characters), validating privacy_type and posting_permission values against allowed enums, ensuring primary_category matches predefined categories, and limiting secondary_tags to 3 comma-separated values. Image URLs for icon and banner must be valid and point to accessible resources.\n\nThis operation integrates with the community management system defined in the requirements document section 3 (Community Settings and Configuration). When privacy settings are changed from public to private or vice versa, the system must handle existing subscribers appropriately. When posting permissions are modified, the changes take effect immediately for all subsequent post attempts.\n\nRelated operations include GET /communities/{communityId} for retrieving current community settings before modification, which should be called as a prerequisite to verify community existence and obtain current state. The POST /communities endpoint handles initial community creation.","parameters":[{"name":"communityId","description":"Unique identifier of the community to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated community configuration including description, privacy settings, posting permissions, and visual branding","typeName":"IRedditLikeCommunity.IUpdate"},"responseBody":{"description":"Updated community information with all current settings and metadata","typeName":"IRedditLikeCommunity"},"authorizationRole":"moderator","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before it can be updated"}]},{"specification":"This operation handles community deletion initiated by the primary moderator (community creator) or platform administrators. It operates on the reddit_like_communities table from the Prisma schema, implementing a soft-delete pattern with a 30-day cooldown period before permanent archival. The operation marks the community as deleted using the deleted_at timestamp field, removes it from public directories, unsubscribes all members, and archives all posts and comments while preserving data for potential recovery. This endpoint enforces strict authorization - only the primary moderator who created the community or platform administrators can delete communities. Regular moderators without primary status cannot delete communities.","path":"/redditLike/moderator/communities/{communityId}","method":"delete","summary":"Soft delete the specified community with 30-day recovery period","description":"Soft deletes an existing community from the platform by setting the deleted_at timestamp field in the reddit_like_communities table. This operation is restricted to the primary moderator (community creator) who originally founded the community or platform administrators who have system-wide override capabilities. Regular moderators who were added to the community after creation cannot delete communities per the business requirements.\n\nThe operation implements the soft-delete pattern using the deleted_at timestamp field defined in the reddit_like_communities Prisma schema. When a community is deleted, the system sets the deleted_at field to the current timestamp, effectively marking the community as removed while preserving all data for potential recovery during the 30-day cooldown period specified in the requirements.\n\nUpon successful deletion, the system performs several coordinated actions: removes the community from all public directories and search results, unsubscribes all members from the community (affecting their personalized feeds), archives all posts and comments within the community (marking them as inaccessible but preserved), and prevents any new posts or comments from being created. The community page displays a 'This community has been deleted' message to anyone attempting to access it.\n\nSecurity considerations include strict verification that the requesting user is either the primary moderator (identified by checking is_primary=true in reddit_like_community_moderators table for the authenticated moderator) or a platform administrator. The operation must validate the community exists and is not already deleted before proceeding. This primary moderator verification happens in the provider function implementation layer. Administrators may delete communities that violate platform-wide policies regardless of moderator status.\n\nThe soft deletion follows a 30-day cooldown period before permanent archival per requirements section 9.2. During this cooldown, the primary moderator or administrators can restore the community through a separate restoration endpoint. After 30 days, the system permanently archives all community data. This cooldown mechanism protects against accidental deletions and provides recovery options.\n\nValidation rules include confirming the community exists, verifying it is not already in deleted status (deleted_at is null), and ensuring the requesting user has appropriate authorization (primary moderator or administrator). The operation returns no response body upon successful deletion, following standard RESTful DELETE semantics.\n\nThis operation integrates with the community management requirements specified in section 9 (Community Deletion and Archival). Related operations include POST /communities for community creation and PATCH /communities/{communityId}/restore for recovering deleted communities during the cooldown period. The GET /communities/{communityId} endpoint should be called as a prerequisite to verify community existence before deletion.","parameters":[{"name":"communityId","description":"Unique identifier of the community to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before it can be deleted"}]},{"specification":"This operation retrieves the complete list of community-specific rules for a given community. It operates on the reddit_like_community_rules table from the Prisma schema, returning all rules associated with the specified community ID. Rules help guide user behavior and set community standards, with each community supporting up to 15 custom rules. The operation provides essential information for users before posting content and for moderators managing community guidelines.","path":"/redditLike/communities/{communityId}/rules","method":"get","summary":"Retrieve all rules for a specific community","description":"Retrieve the complete list of community-specific rules for a given community by its unique identifier. This operation returns all rules defined by community moderators to guide user behavior and maintain community standards within that specific community.\n\nThis endpoint provides essential information for users before they create posts or comments in the community, helping them understand community expectations and avoid rule violations. The rules are displayed on the community page, in the post creation interface, and can be referenced during content moderation workflows.\n\nThe operation fetches rules from the reddit_like_community_rules table, which stores up to 15 custom rules per community. Each rule includes a title (3-100 characters), optional description (up to 500 characters), rule type (required, prohibited, or etiquette), and display order for proper presentation.\n\nRules are ordered by their display_order field to ensure consistent presentation as configured by moderators. The response includes all rule metadata to enable proper display in the user interface, including rule types that help categorize rules as mandatory requirements, prohibitions, or etiquette guidelines.\n\nThis is a public read-only operation accessible to all users including guests, as community rules must be visible to anyone considering participation in the community. No authentication is required to view community rules, supporting transparency and informed participation.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose rules are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated collection of community rules ordered by display order","typeName":"IPageIRedditLikeCommunityRule"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation creates a new community-specific rule within a given community. It operates on the reddit_like_community_rules table from the Prisma schema, allowing community moderators to define custom guidelines that help maintain community standards and guide user behavior. The operation validates that the requesting user has moderator permissions for the specified community and enforces the maximum limit of 15 rules per community.","path":"/redditLike/moderator/communities/{communityId}/rules","method":"post","summary":"Create a new rule for a specific community","description":"Create a new community-specific rule within the specified community. This operation allows community moderators to define custom guidelines that help maintain community standards, guide user behavior, and establish clear expectations for participation.\n\nCommunity rules are essential for setting behavioral expectations and moderating content effectively. Each community can have up to 15 custom rules as defined in the business requirements (document 03-community-management.md, section 6.1). Rules include a title, optional description, type classification, and display order.\n\nThe operation validates that the requesting user has moderator permissions for the target community as defined in the reddit_like_community_moderators table. Only users with 'manage_settings' permission or primary moderators can create new rules for their communities. Administrators can create rules for any community.\n\nRule creation involves inserting a new record into the reddit_like_community_rules table with the provided title (3-100 characters), optional description (up to 500 characters), rule type (required, prohibited, or etiquette), and display order (1-15) to control presentation sequence. The system validates that adding this rule does not exceed the 15-rule maximum limit per community.\n\nOnce created, rules become immediately visible to all community members on the community page and during the post creation workflow, helping users understand expectations before contributing content. Rules also serve as reference points during content moderation when moderators remove posts or comments for rule violations.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the rule is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Community rule creation data including title, description, type, and display order","typeName":"IRedditLikeCommunityRule.ICreate"},"responseBody":{"description":"The newly created community rule with all metadata","typeName":"IRedditLikeCommunityRule"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before rules can be created for it"}]},{"specification":"This operation retrieves a specific community rule by its unique identifier within a given community. It operates on the reddit_like_community_rules table from the Prisma schema and returns detailed information about a single rule including its title, description, type, and display order. This endpoint serves users who need to view full rule details, moderators reviewing community rules, and systems displaying rule enforcement information during content moderation workflows.","path":"/redditLike/communities/{communityId}/rules/{ruleId}","method":"get","summary":"Retrieve detailed information about a specific community rule","description":"Retrieve comprehensive details about a single community rule identified by its unique identifier within a specific community. This operation provides access to the complete rule definition including the title, detailed description, rule type classification, and display ordering information.\n\nThis endpoint serves multiple stakeholders and use cases. General users access rule details to understand community standards before posting content or when they receive moderation notices citing specific rules. Moderators retrieve rule information when reviewing reported content to verify violations against community standards. The platform displays rule details in moderation interfaces, post creation workflows, and community information pages.\n\nThe operation integrates with the community management system defined in the Community Management Requirements document. Rules are community-specific entities created and managed by community moderators, with each community supporting up to 15 custom rules as specified in requirement R-CAT-006. Rules are categorized by type (required, prohibited, etiquette) and displayed in order determined by the display_order field.\n\nSecurity considerations include verifying that the requested rule belongs to the specified community to prevent unauthorized cross-community rule access. The endpoint returns public rule information visible to all users regardless of authentication status, supporting the platform's transparency principle that community rules must be visible to users before they post content.\n\nRelated operations include listing all rules for a community (GET /communities/{communityId}/rules), creating new rules (POST /communities/{communityId}/rules), and updating rule definitions (PUT /communities/{communityId}/rules/{ruleId}). This operation is frequently used in conjunction with post creation workflows where users review rules before submitting content, and moderation workflows where moderators reference specific rules when taking actions.","parameters":[{"name":"communityId","description":"Unique identifier of the community containing the rule","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Unique identifier of the specific rule to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the community rule including title, description, type, and display order","typeName":"IRedditLikeCommunityRule"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before retrieving its rules"},{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/rules","method":"post"},"description":"Rule must be created before it can be retrieved"}]},{"specification":"This operation updates an existing community rule identified by its unique identifier within a specific community. It operates on the reddit_like_community_rules table from the Prisma schema and allows moderators to modify rule definitions including title, description, type classification, and display ordering. This endpoint enforces moderator-only access and validates that the rule belongs to the specified community before allowing modifications.","path":"/redditLike/moderator/communities/{communityId}/rules/{ruleId}","method":"put","summary":"Update an existing community rule definition","description":"Modify the definition of an existing community rule by providing updated values for the rule's title, description, type classification, and display order. This operation enables community moderators to refine, clarify, or reorganize their community's rules as community needs evolve over time.\n\nThis endpoint is restricted to moderators of the specific community as defined in the Community Management Requirements document section 6.1, which specifies that only moderators with appropriate permissions can create and update community rules. The operation validates that the authenticated user has moderator status for the target community and that the specified rule exists within that community before allowing modifications.\n\nThe rule update workflow supports several use cases. Moderators refine rule wording to improve clarity based on user confusion or moderation experiences. They adjust rule descriptions to provide more detailed guidance and examples. They reorganize rules by changing display_order values to prioritize more important or frequently violated rules. They reclassify rules between types (required, prohibited, etiquette) as community culture evolves.\n\nValidation requirements mirror those for rule creation as specified in the Community Management document. Rule titles must be 3-100 characters in length. Rule descriptions are optional but limited to 500 characters when provided. The rule_type field must contain valid values (required, prohibited, or etiquette). The display_order must be a positive integer between 1 and 15, corresponding to the maximum of 15 rules per community specified in requirement R-CAT-006.\n\nThe operation integrates with the content moderation system defined in the Content Moderation and Reporting Requirements document. When moderators update rules, existing content violations and moderation actions remain associated with the original rule definitions to maintain moderation history integrity. Updated rules apply to future content submissions and moderation decisions.\n\nRelated operations include retrieving rule details (GET /communities/{communityId}/rules/{ruleId}), listing all community rules (GET /communities/{communityId}/rules), creating new rules (POST /communities/{communityId}/rules), and deleting rules (DELETE /communities/{communityId}/rules/{ruleId}). This operation is often used alongside community settings management and moderation queue workflows.","parameters":[{"name":"communityId","description":"Unique identifier of the community containing the rule to update","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Unique identifier of the specific rule to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated rule information including title, description, type, and display order","typeName":"IRedditLikeCommunityRule.IUpdate"},"responseBody":{"description":"Updated community rule with modified values reflecting the changes","typeName":"IRedditLikeCommunityRule"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before updating its rules"},{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/rules","method":"post"},"description":"Rule must be created before it can be updated"}]},{"specification":"This operation permanently removes a specific rule from a community. It operates on the reddit_like_community_rules table from the Prisma schema and is restricted to community moderators with 'manage_settings' permission who want to delete outdated, redundant, or no longer needed community rules. The operation requires both the community identifier and the specific rule identifier to ensure precise deletion. This is a destructive action that cannot be undone, so it should be used carefully by moderators managing their community guidelines.","path":"/redditLike/moderator/communities/{communityId}/rules/{ruleId}","method":"delete","summary":"Permanently delete a specific community rule","description":"This operation permanently removes a specific rule from a community's rule set. Community moderators use this endpoint to delete rules that are no longer relevant, redundant, or need to be replaced with updated guidelines. The operation targets the reddit_like_community_rules table in the Prisma schema and requires both the community ID and the specific rule ID to identify which rule should be removed.\n\nThe deletion is permanent and immediately removes the rule from display on the community page, post creation interfaces, and moderation tools. Once deleted, the rule will no longer be available for moderators to cite when removing content or banning users. The display order of remaining rules will be preserved, though moderators may want to reorder rules after deletion if gaps in numbering are created.\n\nSecurity considerations include verifying that the requesting user is a moderator of the specified community with 'manage_settings' permission as defined in the reddit_like_community_moderators table. The operation validates that both the community and rule exist and that the rule belongs to the specified community before proceeding with deletion. Only moderators assigned to the community can delete its rules, preventing unauthorized rule manipulation.\n\nThis operation integrates with the community management system by updating the community's rule configuration. After deletion, the community will have one fewer rule in its rule set (maximum 15 rules per community as per requirements). Users creating posts in the community will no longer see the deleted rule in the rule acknowledgment interface, and moderators will no longer be able to select this rule when taking moderation actions.\n\nExpected behavior includes immediate removal from all community interfaces, validation that the rule exists and belongs to the specified community, and proper authorization checks ensuring only community moderators can delete rules. Error scenarios include attempting to delete non-existent rules, attempting to delete rules from communities where the user lacks moderator permissions, and attempting to delete rules that belong to different communities than specified.","parameters":[{"name":"communityId","description":"Unique identifier of the community containing the rule to delete","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Unique identifier of the specific rule to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/rules","method":"post"},"description":"Rule must be created before it can be deleted"}]},{"specification":"This operation allows authenticated members to subscribe to a community, adding it to their list of followed communities and enabling posts from this community to appear in their personalized home feed. It operates on the reddit_like_community_subscriptions junction table from the Prisma schema, creating a new subscription record linking the member to the community. The operation also increments the community's subscriber_count field in the reddit_like_communities table. This is a core engagement feature that enables users to customize their content discovery experience by selecting which communities they want to follow.","path":"/redditLike/member/communities/{communityId}/subscribe","method":"post","summary":"Subscribe authenticated member to a specific community","description":"This operation creates a new subscription relationship between an authenticated member and a community, enabling the member to receive posts from this community in their personalized home feed. The endpoint targets the reddit_like_community_subscriptions table in the Prisma schema, creating a many-to-many relationship record that links the current user's member ID with the specified community ID.\n\nWhen a member subscribes to a community, several system updates occur immediately: the subscription record is created with the current timestamp, the community's subscriber_count is incremented by 1 in the reddit_like_communities table, and posts from this community begin appearing in the user's personalized feed within 60 seconds. The subscription enables the member to see community content when using any feed sorting method (hot, new, top, controversial) and provides the foundation for personalized content discovery as defined in the User Profiles and Feeds requirements.\n\nSecurity and authorization considerations include verifying that the requesting user is an authenticated member (not a guest), checking that the community exists and is accessible, and validating that the user is not already subscribed to prevent duplicate subscriptions. For public communities, any authenticated member can subscribe immediately. For private communities as defined in the Community Management requirements, the operation behavior differs: users must request access rather than subscribing directly, though this endpoint may still be used with appropriate approval workflow integration.\n\nThe operation integrates with multiple platform systems: it affects feed composition by adding a new content source to the user's home feed, updates community metrics by incrementing the subscriber count, and may trigger community recommendation algorithm updates if the platform tracks subscription patterns for personalized suggestions. The subscription relationship persists until the user explicitly unsubscribes, and there is no limit on the number of communities a user can subscribe to as per the requirements specification.\n\nExpected behavior includes immediate visual feedback updating the subscribe button state to 'Subscribed' or 'Unsubscribe', real-time or near-real-time subscriber count updates visible to all users viewing the community page, and immediate inclusion of community posts in the subscriber's feed. Error scenarios include attempting to subscribe while unauthenticated (requires member role), attempting to subscribe to non-existent communities, attempting to subscribe to private communities without approval, and attempting to create duplicate subscriptions when already subscribed.","parameters":[{"name":"communityId","description":"Unique identifier of the community to subscribe to","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription confirmation with community details and updated subscriber count","typeName":"IRedditLikeCommunitySubscription"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before a member can subscribe to it"}]},{"specification":"This operation removes an existing subscription relationship between an authenticated member and a specific community. It operates on the reddit_like_community_subscriptions table, removing the junction record that associates the member with the community. When a member unsubscribes, the community's subscriber_count in reddit_like_communities must be decremented by 1, and posts from that community must be immediately excluded from the member's personalized home feed. This operation is idempotent - attempting to unsubscribe from a community the member is not subscribed to should be handled gracefully without errors.","path":"/redditLike/member/communities/{communityId}/unsubscribe","method":"post","summary":"Unsubscribe authenticated member from a specific community","description":"Removes the subscription relationship between the currently authenticated member and the specified community, as defined in the Community Management Requirements section 4.3. This operation decrements the community's subscriber count and immediately updates the member's personalized feed to exclude posts from this community.\n\nWhen a member unsubscribes from a community, the system performs several coordinated actions: First, it removes the corresponding record from the reddit_like_community_subscriptions table. Second, it decrements the subscriber_count field in the reddit_like_communities table by 1 to maintain accurate subscription metrics. Third, it updates the member's personalized home feed composition to stop including posts from the unsubscribed community, as specified in the User Profiles and Feeds Requirements.\n\nThe operation validates that the member is currently subscribed to the specified community before processing the unsubscription. If the member is not subscribed, the system handles this gracefully as an idempotent operation, returning success without making changes. The visual feedback requirement from section 4.3 states that the system must provide immediate visual confirmation within 200 milliseconds of the unsubscription action.\n\nThis operation integrates with the subscription management system defined in section 4 of the Community Management Requirements. Per section 4.2, the unsubscription can be initiated from multiple access points including the community page, the user's subscription management page, or the sidebar of the home feed. The operation enforces authentication requirements - only authenticated members can unsubscribe from communities.\n\nThe subscriber count denormalization in the reddit_like_communities table is updated synchronously to ensure consistency. The feed composition changes are applied immediately, with the requirement that posts from the unsubscribed community stop appearing in the member's feed within 60 seconds as specified in the subscription workflow requirements.","parameters":[{"name":"communityId","description":"Unique identifier of the community from which the member wishes to unsubscribe","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"unsubscribe","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities/{communityId}/subscribe","method":"post"},"description":"User must be subscribed to the community before they can unsubscribe from it"}]},{"specification":"This operation retrieves the complete list of members currently subscribed to a specific community. It queries the reddit_like_community_subscriptions table filtering by community_id to find all active subscription records. The operation returns summary information about each subscribed member including their username, karma scores, and subscription timestamp. This supports community analytics, member discovery, and understanding community composition. The operation respects community privacy settings - private communities should only show subscribers to approved members or moderators.","path":"/redditLike/communities/{communityId}/subscriptions","method":"get","summary":"Retrieve paginated list of members subscribed to a specific community","description":"Fetches the complete subscriber list for a specified community, returning member summary information ordered by subscription date. This operation provides visibility into community membership composition and supports analytics about community growth and member demographics.\n\nThe operation queries the reddit_like_community_subscriptions junction table to identify all active subscriptions for the specified community. For each subscription record, the system joins with the reddit_like_users table to retrieve member profile information including username, total karma (calculated from post_karma and comment_karma fields in the unified user table), account creation date, and the timestamp when they subscribed to this specific community.\n\nAccess control is enforced based on community privacy settings defined in section 8 of the Community Management Requirements. For public communities, this information is accessible to all users including guests. For private communities, only approved members of that community and community moderators can view the subscriber list. The system validates the requesting user's access rights before returning subscription data.\n\nThe response includes member summary information optimized for list displays rather than complete member profiles. Each subscriber entry contains their username (for identification and navigation to profile), total karma score (as a trust and reputation indicator), account age (to distinguish veteran members from new joiners), and subscription timestamp (showing when they joined the community). This data enables communities to understand their member base demographics and growth patterns.\n\nPagination is implemented to handle communities with large subscriber counts efficiently. The system returns subscribers in reverse chronological order by default (most recent subscribers first), allowing communities to see their newest members. Alternative sorting options may include alphabetical by username or by member karma score to identify high-reputation community members.\n\nThe operation integrates with the subscription tracking system defined in section 4.4 of the Community Management Requirements. The subscriber count displayed on the community page is denormalized in the reddit_like_communities table for performance, while this endpoint provides the detailed member-level subscription data by querying the normalized reddit_like_community_subscriptions junction table.\n\nPerformance considerations ensure that even communities with hundreds of thousands of subscribers can return the first page of results within 2 seconds. The system uses efficient database indexing on the (community_id, subscribed_at) compound index to enable fast retrieval and sorting of subscription records.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose subscriber list is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of member summaries representing users subscribed to the community","typeName":"IPageIRedditLikeMember.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before its subscriber list can be retrieved"}]},{"specification":"This operation retrieves a paginated list of all moderators assigned to a specific community, including their permission levels and assignment details. It operates on the reddit_like_community_moderators table from the Prisma schema and provides information about who manages the community, when they were assigned, what permissions they have, and whether they are the primary moderator (community creator). This supports community transparency by allowing users to see who moderates communities they participate in, and provides moderators a way to view the current moderation team structure.","path":"/redditLike/communities/{communityId}/moderators","method":"get","summary":"Retrieve list of moderators assigned to a specific community","description":"Retrieve a comprehensive list of all moderators currently assigned to manage a specific community. This operation returns detailed information about each moderator including their username, assigned permissions, assignment timestamp, and whether they are the primary moderator (community creator).\n\nThis endpoint serves multiple use cases: allowing community members to understand who manages their community for transparency and accountability, enabling moderators to view the current moderation team structure, and helping administrators audit community governance. The response includes permission details showing which specific moderation capabilities each moderator has been granted (such as manage_posts, manage_comments, manage_users, manage_settings, manage_moderators, and access_reports).\n\nThe operation leverages the reddit_like_community_moderators junction table which tracks the many-to-many relationship between moderators and communities. Each moderator assignment includes granular permission settings, with primary moderators (community creators) having irrevocable full permissions. The assignment timestamp enables seniority-based permission rules where moderators can only remove moderators added after them.\n\nThis is a public read operation that does not require authentication, supporting the platform's transparency principles. Community members, potential subscribers, and visitors can review the moderation team to understand community governance before participating.","parameters":[{"name":"communityId","description":"Unique identifier of the target community whose moderators are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of moderator assignments with detailed permission and assignment information","typeName":"IPageIRedditLikeCommunityModerator"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation allows community moderators with the 'manage_moderators' permission to invite and assign new moderators to their community. It operates on the reddit_like_community_moderators junction table, creating new moderator assignment records that grant elevated community management permissions to selected users. The operation validates that the inviting moderator has appropriate permissions, that the invited user exists and is not already a moderator, and that the community has not exceeded the maximum of 25 moderators per requirements. This implements the moderator invitation workflow defined in the Community Management requirements section 5.2.","path":"/redditLike/moderator/communities/{communityId}/moderators","method":"post","summary":"Assign a new moderator to a community with specified permissions","description":"Assign a new moderator to manage a specific community by creating a moderator assignment record with customizable permission grants. This operation enables existing community moderators with 'manage_moderators' permission to expand their moderation team by inviting additional moderators from the member base.\n\nThe operation implements the moderator invitation workflow defined in the Community Management requirements document section 5.2. When a moderator invites a new moderator, the system verifies the invited user is a registered member, ensures they are not already a moderator of this community, and validates that the community has not reached the maximum limit of 25 moderators. The inviting moderator can customize which specific permissions to grant, choosing from manage_posts, manage_comments, manage_users, manage_settings, manage_moderators, and access_reports.\n\nThis operation references the reddit_like_community_moderators table which tracks the many-to-many relationship between moderators and communities. Each assignment record includes the moderator being assigned, the community they are managing, who assigned them (for seniority tracking), the timestamp of assignment (for seniority-based removal rules), whether they are the primary moderator (always false for invited moderators), and the JSON or comma-separated list of granted permissions.\n\nThe default permission set for newly invited moderators includes 'manage_posts', 'manage_comments', and 'access_reports' as specified in the requirements, though the inviting moderator can customize this set during the invitation. Primary moderators (community creators) automatically receive all permissions and have irrevocable status, but this operation is for inviting additional moderators, not creating communities.\n\nAuthorization for this operation requires the requesting user to be an authenticated moderator with 'manage_moderators' permission in the target community, or a platform administrator who can manage moderators in any community. The operation validates these permissions before allowing moderator assignment to maintain proper community governance hierarchy.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the new moderator is being assigned","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment information including the user to be assigned and their permission set","typeName":"IRedditLikeCommunityModerator.ICreate"},"responseBody":{"description":"Created moderator assignment record with assigned permissions and metadata","typeName":"IRedditLikeCommunityModerator"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderators can be assigned to it"}]},{"specification":"This operation allows community moderators with the 'manage_moderators' permission to invite and assign new moderators to their community. It operates on the reddit_like_community_moderators junction table, creating new moderator assignment records that grant elevated community management permissions to selected users. The operation validates that the inviting moderator has appropriate permissions, that the invited user exists and is not already a moderator, and that the community has not exceeded the maximum of 25 moderators per requirements. This implements the moderator invitation workflow defined in the Community Management requirements section 5.2.","path":"/redditLike/admin/communities/{communityId}/moderators","method":"post","summary":"Assign a new moderator to a community with specified permissions","description":"Assign a new moderator to manage a specific community by creating a moderator assignment record with customizable permission grants. This operation enables existing community moderators with 'manage_moderators' permission to expand their moderation team by inviting additional moderators from the member base.\n\nThe operation implements the moderator invitation workflow defined in the Community Management requirements document section 5.2. When a moderator invites a new moderator, the system verifies the invited user is a registered member, ensures they are not already a moderator of this community, and validates that the community has not reached the maximum limit of 25 moderators. The inviting moderator can customize which specific permissions to grant, choosing from manage_posts, manage_comments, manage_users, manage_settings, manage_moderators, and access_reports.\n\nThis operation references the reddit_like_community_moderators table which tracks the many-to-many relationship between moderators and communities. Each assignment record includes the moderator being assigned, the community they are managing, who assigned them (for seniority tracking), the timestamp of assignment (for seniority-based removal rules), whether they are the primary moderator (always false for invited moderators), and the JSON or comma-separated list of granted permissions.\n\nThe default permission set for newly invited moderators includes 'manage_posts', 'manage_comments', and 'access_reports' as specified in the requirements, though the inviting moderator can customize this set during the invitation. Primary moderators (community creators) automatically receive all permissions and have irrevocable status, but this operation is for inviting additional moderators, not creating communities.\n\nAuthorization for this operation requires the requesting user to be an authenticated moderator with 'manage_moderators' permission in the target community, or a platform administrator who can manage moderators in any community. The operation validates these permissions before allowing moderator assignment to maintain proper community governance hierarchy.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the new moderator is being assigned","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment information including the user to be assigned and their permission set","typeName":"IRedditLikeCommunityModerator.ICreate"},"responseBody":{"description":"Created moderator assignment record with assigned permissions and metadata","typeName":"IRedditLikeCommunityModerator"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderators can be assigned to it"}]},{"specification":"This operation allows community moderators with the 'manage_moderators' permission and platform administrators to invite and assign new moderators to communities. It operates on the reddit_like_community_moderators junction table, creating new moderator assignment records that grant elevated community management permissions to selected users. The operation validates that the inviting moderator has appropriate permissions, that the invited user exists and is not already a moderator, and that the community has not exceeded the maximum of 25 moderators per requirements. This implements the moderator invitation workflow defined in the Community Management requirements section 5.2.","path":"/redditLike/communities/{communityId}/moderators","method":"post","summary":"Assign a new moderator to a community with specified permissions","description":"Assign a new moderator to manage a specific community by creating a moderator assignment record with customizable permission grants. This operation enables existing community moderators with 'manage_moderators' permission or platform administrators to expand the moderation team by inviting additional moderators from the member base.\n\nThe operation implements the moderator invitation workflow defined in the Community Management requirements document section 5.2. When a moderator or administrator invites a new moderator, the system verifies the invited user is a registered member, ensures they are not already a moderator of this community, and validates that the community has not reached the maximum limit of 25 moderators. The inviting moderator can customize which specific permissions to grant, choosing from manage_posts, manage_comments, manage_users, manage_settings, manage_moderators, and access_reports.\n\nThis operation references the reddit_like_community_moderators table which tracks the many-to-many relationship between moderators and communities. Each assignment record includes the moderator being assigned, the community they are managing, who assigned them (for seniority tracking), the timestamp of assignment (for seniority-based removal rules), whether they are the primary moderator (always false for invited moderators), and the JSON or comma-separated list of granted permissions.\n\nThe default permission set for newly invited moderators includes 'manage_posts', 'manage_comments', and 'access_reports' as specified in the requirements, though the inviting moderator or administrator can customize this set during the invitation. Primary moderators (community creators) automatically receive all permissions and have irrevocable status, but this operation is for inviting additional moderators, not creating communities.\n\nAuthorization for this operation requires the requesting user to be either an authenticated moderator with 'manage_moderators' permission in the target community, or a platform administrator who can manage moderators in any community. The operation validates these permissions before allowing moderator assignment to maintain proper community governance hierarchy. Both moderators and administrators use the same endpoint, with role-based business logic applied in the implementation.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the new moderator is being assigned","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment information including the user to be assigned and their permission set","typeName":"IRedditLikeCommunityModerator.ICreate"},"responseBody":{"description":"Created moderator assignment record with assigned permissions and metadata","typeName":"IRedditLikeCommunityModerator"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderators can be assigned to it"}]},{"specification":"This operation retrieves detailed information about a specific moderator assigned to a community. It operates on the reddit_like_community_moderators table which tracks the many-to-many relationship between moderators and communities. The operation requires both the community ID and the moderator assignment ID to identify the specific moderator assignment record. This endpoint is essential for viewing moderator details including their assigned permissions, assignment date, primary moderator status, and who assigned them to the community. The data retrieved helps in understanding the moderator hierarchy within a community and enables management of moderator permissions.","path":"/redditLike/moderator/communities/{communityId}/moderators/{moderatorId}","method":"get","summary":"Retrieve detailed information about a specific moderator assignment in a community","description":"This operation retrieves comprehensive information about a specific moderator assignment within a community. The endpoint accesses the reddit_like_community_moderators junction table which manages the many-to-many relationship between communities and their assigned moderators.\n\nThe response includes critical moderator assignment details such as the moderator's unique identifier, the timestamp when they were assigned to the community (assigned_at), whether they hold primary moderator status indicated by the is_primary boolean field (community creator with irrevocable permissions), and their granted permission set stored in the permissions field (manage_posts, manage_comments, manage_users, manage_settings, manage_moderators, access_reports).\n\nThis operation is essential for community management workflows, enabling moderators and administrators to review the moderator team composition, understand permission distributions, and verify moderator credentials. The information helps in making informed decisions about moderator role changes, permission adjustments, or moderator removals based on seniority tracked via the assigned_at timestamp field from the Prisma schema.\n\nSecurity considerations include restricting access to this endpoint to authenticated users with appropriate permissions - typically current community moderators who need to view the moderator team, or administrators who oversee all communities. The endpoint enforces community-specific scope, ensuring moderators can only view moderator details for communities they manage.\n\nThe endpoint integrates with the user roles and authentication system defined in the requirements, enforcing role-based access control. It also connects to the community management workflows, supporting the moderator assignment and hierarchy features specified in the community management requirements document.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose moderator assignment information is being retrieved","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Unique identifier of the specific moderator assignment record in the reddit_like_community_moderators table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator assignment information including permissions, assignment timestamp, primary moderator status, and assignment history","typeName":"IRedditLikeCommunityModerator"},"authorizationRole":"moderator","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/moderators","method":"post"},"description":"Moderator assignment must be created before it can be retrieved. This ensures the moderator record exists in the reddit_like_community_moderators table with the specified moderatorId."}]},{"specification":"This operation updates the moderator assignment details for a specific moderator within a community. It operates on the reddit_like_community_moderators table, allowing modification of moderator permissions stored in the permissions field. The operation requires both the community ID and moderator assignment ID to identify the specific record to update. This endpoint enables community management workflows where primary moderators or moderators with 'manage_moderators' permission can adjust the permission sets granted to other moderators, ensuring appropriate access control within the community moderation team. Note that certain fields are immutable including community_id, moderator_id, is_primary, assigned_at, and assigned_by_moderator_id as these establish the foundational moderator relationship.","path":"/redditLike/moderator/communities/{communityId}/moderators/{moderatorId}","method":"put","summary":"Update moderator assignment permissions and details for a specific moderator in a community","description":"This operation updates the moderator assignment record for a specific moderator within a community, enabling management of moderator permissions and assignment attributes. The endpoint modifies records in the reddit_like_community_moderators junction table which tracks community moderator assignments with fields including community_id, moderator_id, assigned_by_moderator_id, assigned_at, is_primary, and permissions.\n\nThe primary use case is adjusting the permissions field which stores the granted permissions for a moderator within a community. Per the community management requirements section 5.3, moderators can have granular permissions including manage_posts, manage_comments, manage_users, manage_settings, manage_moderators, and access_reports. This endpoint allows the primary moderator or moderators with 'manage_moderators' permission to customize which permissions each moderator possesses by updating the permissions string field.\n\nAuthorization for this operation is carefully controlled per requirements section 5.3. Only the primary moderator (where is_primary=true) can modify permissions for any moderator, or moderators with the 'manage_moderators' permission can adjust permissions for moderators who were assigned after them based on the assigned_at timestamp (seniority-based permission model). The endpoint enforces these business rules by validating the requesting user's moderator status and permission set before allowing updates.\n\nThe update operation cannot modify certain immutable fields as defined in the Prisma schema including the community_id, moderator_id, is_primary flag, assigned_at timestamp, or assigned_by_moderator_id references. These fields establish the foundational moderator relationship and must remain stable for referential integrity. Only the permissions string can be modified through this endpoint to adjust the moderator's granted capabilities.\n\nSecurity considerations include verifying the requesting user is a moderator of the specified community, has appropriate permission levels to modify other moderators per the seniority rules, and is not attempting to escalate their own permissions or modify the primary moderator's irrevocable permissions. The operation logs all permission changes for audit trail purposes in the moderation logging system.\n\nThis endpoint integrates with the community management system defined in requirements document 03-community-management.md, supporting the moderator hierarchy and permission management features specified in sections 5.3 and 5.4. It enables the distributed moderation model where communities manage their own moderator teams within platform guidelines.","parameters":[{"name":"communityId","description":"Unique identifier of the community containing the moderator assignment to update","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Unique identifier of the specific moderator assignment record in the reddit_like_community_moderators table to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderator assignment data including modified permissions string and any other editable attributes","typeName":"IRedditLikeCommunityModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment information reflecting the modified permissions and attributes with all current field values","typeName":"IRedditLikeCommunityModerator"},"authorizationRole":"moderator","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/moderators","method":"post"},"description":"Moderator assignment must be created before its permissions can be updated. This ensures the moderator record exists in the reddit_like_community_moderators table before attempting to modify its permissions field."}]},{"specification":"This operation removes a moderator from a specific community. It operates on the reddit_like_community_moderators junction table which tracks moderator assignments to communities. The operation enforces seniority-based removal rules where only the primary moderator (community creator) can remove any moderator, and moderators with 'manage_moderators' permission can only remove moderators who were assigned after them. This ensures proper community governance and prevents unauthorized moderator removals.","path":"/redditLike/moderator/communities/{communityId}/moderators/{moderatorId}","method":"delete","summary":"Remove a moderator from a community","description":"Removes a moderator assignment from a specific community, immediately revoking all their moderator permissions for that community. This operation implements the community governance model where moderators can be removed by authorized users based on seniority and permission hierarchies.\n\nThe operation enforces strict authorization rules defined in the community management requirements. Only the primary moderator (community creator) has irrevocable permissions and can remove any other moderator from the community. Additionally, moderators with 'manage_moderators' permission can remove moderators who were assigned after them, implementing a seniority-based removal system.\n\nWhen a moderator is removed, the system immediately revokes all their moderator permissions for the specified community. The removed moderator receives a notification informing them of the removal. However, their status as a regular community member is retained - they remain subscribed to the community unless they choose to unsubscribe manually. This ensures that moderator removal doesn't forcibly disconnect users from communities they care about.\n\nThis operation is permanent and cannot be undone directly. If a moderator is removed by mistake, they must be re-invited through the standard moderator invitation workflow. The removal is logged in the moderation system for audit trail purposes.\n\nThe operation validates that the requesting user has appropriate permissions to remove the specified moderator from the community. It also verifies that the community exists and that the target moderator is currently assigned to that community before processing the removal.","parameters":[{"name":"communityId","description":"Unique identifier of the community from which the moderator will be removed","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Unique identifier of the moderator to be removed from the community","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/moderators","method":"post"},"description":"Moderator assignment must exist before it can be removed from the community"},{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderators can be assigned or removed from it"}]},{"specification":"This operation retrieves the complete list of communities that a specific user has subscribed to. It operates on the reddit_like_community_subscriptions junction table which maintains the many-to-many relationship between members and communities. The operation respects user privacy settings defined in reddit_like_users.show_subscriptions_publicly field, returning subscription data only when appropriate based on the requesting user's relationship to the profile owner.","path":"/redditLike/users/{userId}/subscriptions","method":"get","summary":"Retrieve a user's subscribed communities list","description":"Retrieves the complete list of communities that the specified user has subscribed to, providing insight into their interests and community affiliations. This operation supports the user profile subscription management feature defined in the requirements, enabling users to view and manage their community subscriptions.\n\nThe operation respects user privacy settings as defined in the reddit_like_users table. When a user has set show_subscriptions_publicly to false, their subscription list is only visible to themselves. When viewing their own profile, authenticated users always see their complete subscription list with management options. When viewing another user's profile, the subscription list is only displayed if that user has chosen to make their subscriptions public.\n\nThe returned subscription list includes essential community information for each subscribed community: community identifier, community name, community icon, subscriber count, and the timestamp when the user subscribed. This data enables users to quickly navigate to their favorite communities and understand their subscription history.\n\nFor users viewing their own subscriptions, the response includes additional management capabilities through the UI, such as quick unsubscribe actions and subscription organization features. The subscription list is ordered by subscription date with most recently subscribed communities appearing first, though this can be customized through query parameters.\n\nThis operation integrates with the community management system and user profile features, ensuring that subscription data accurately reflects the current state of user-community relationships. The subscription count displayed for each community is maintained in real-time as users subscribe and unsubscribe.","parameters":[{"name":"userId","description":"Unique identifier of the user whose community subscriptions will be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated collection of subscription records containing community summary information and subscription metadata","typeName":"IPageIRedditLikeCommunitySubscription.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"getByUserid","prerequisites":[{"endpoint":{"path":"/redditLike/users/{userId}/subscriptions","method":"post"},"description":"User must have subscribed to at least one community before their subscription list can be retrieved"}]},{"specification":"This operation creates a new post in a specified community. Posts are the primary content type in the Reddit-like platform and can be one of three types: text posts (written discussions), link posts (sharing URLs), or image posts (sharing visual content). The operation operates on the reddit_like_posts table along with type-specific content tables (reddit_like_post_text_content, reddit_like_post_link_content, or reddit_like_post_image_content) based on the post type discriminator. Only authenticated members, moderators, and administrators can create posts, with posting permissions subject to community-specific settings and user ban status.","path":"/redditLike/member/posts","method":"post","summary":"Create a new post in a community","description":"Create a new post within a specified community on the Reddit-like platform. This operation enables authenticated members to share content with communities through three distinct post types: text posts for written discussions and questions, link posts for sharing external web content, and image posts for uploading and sharing visual media.\n\nThe operation integrates with the reddit_like_posts table as the main post entity, along with type-specific content tables based on the post type discriminator. When creating a text post, the system stores the body content in reddit_like_post_text_content with support for markdown formatting up to 40,000 characters. For link posts, the system validates the URL, stores it in reddit_like_post_link_content, and attempts to extract Open Graph metadata including preview title, description, and thumbnail image. Image posts require file upload with validation of format (JPEG, PNG, GIF, WebP), size (maximum 20MB), and automatic generation of multiple image versions (original, medium 640px, thumbnail 150x150) stored in reddit_like_post_image_content.\n\nSecurity considerations include verifying the user is authenticated as a member, moderator, or administrator per the reddit_like_users role field. The system must validate the user is not banned from the target community by checking reddit_like_community_bans for active bans where banned_member_id matches the authenticated user and community_id matches the target community. Community-specific posting permissions from reddit_like_communities.posting_permission must be enforced, restricting posting based on subscription status or moderator approval. Content validation prevents XSS attacks through sanitization, validates URLs against malicious site databases, and enforces anti-spam rate limiting (maximum 10 posts per hour, 5 posts per day for accounts less than 24 hours old).\n\nThe operation initializes new posts with vote_score of 0, created_at timestamp, and associates the post with the authenticated user's ID (reddit_like_member_id) and selected community ID (reddit_like_community_id). All post titles must be 3-300 characters with leading/trailing whitespace trimmed. The type-specific content undergoes additional validation: text body limited to 40,000 characters with markdown support, URLs validated for HTTP/HTTPS protocol and maximum 2,000 characters, and images validated for format, size, dimensions, and integrity.\n\nRelated API operations include PATCH /posts for searching and retrieving posts with filtering, GET /posts/{postId} for viewing individual post details, PUT /posts/{postId} for editing post content within allowed time windows, and DELETE /posts/{postId} for soft-deleting posts. Community subscription status affects posting permissions and is validated through reddit_like_community_subscriptions. The created post immediately becomes available for voting through the reddit_like_post_votes table and commenting through the reddit_like_comments table, contributing to the author's post karma tracked in reddit_like_user_karma.","parameters":[],"requestBody":{"description":"Post creation data including community selection, post type, title, and type-specific content","typeName":"IRedditLikePost.ICreate"},"responseBody":{"description":"The newly created post with complete details including generated ID, timestamps, and type-specific content","typeName":"IRedditLikePost"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before posts can be added to it"}]},{"specification":"This operation creates a new post in a specified community. Posts are the primary content type in the Reddit-like platform and can be one of three types: text posts (written discussions), link posts (sharing URLs), or image posts (sharing visual content). The operation operates on the reddit_like_posts table along with type-specific content tables (reddit_like_post_text_content, reddit_like_post_link_content, or reddit_like_post_image_content) based on the post type discriminator. Only authenticated members, moderators, and administrators can create posts, with posting permissions subject to community-specific settings and user ban status.","path":"/redditLike/moderator/posts","method":"post","summary":"Create a new post in a community","description":"Create a new post within a specified community on the Reddit-like platform. This operation enables authenticated members to share content with communities through three distinct post types: text posts for written discussions and questions, link posts for sharing external web content, and image posts for uploading and sharing visual media.\n\nThe operation integrates with the reddit_like_posts table as the main post entity, along with type-specific content tables based on the post type discriminator. When creating a text post, the system stores the body content in reddit_like_post_text_content with support for markdown formatting up to 40,000 characters. For link posts, the system validates the URL, stores it in reddit_like_post_link_content, and attempts to extract Open Graph metadata including preview title, description, and thumbnail image. Image posts require file upload with validation of format (JPEG, PNG, GIF, WebP), size (maximum 20MB), and automatic generation of multiple image versions (original, medium 640px, thumbnail 150x150) stored in reddit_like_post_image_content.\n\nSecurity considerations include verifying the user is authenticated as a member, moderator, or administrator per the reddit_like_users role field. The system must validate the user is not banned from the target community by checking reddit_like_community_bans for active bans where banned_member_id matches the authenticated user and community_id matches the target community. Community-specific posting permissions from reddit_like_communities.posting_permission must be enforced, restricting posting based on subscription status or moderator approval. Content validation prevents XSS attacks through sanitization, validates URLs against malicious site databases, and enforces anti-spam rate limiting (maximum 10 posts per hour, 5 posts per day for accounts less than 24 hours old).\n\nThe operation initializes new posts with vote_score of 0, created_at timestamp, and associates the post with the authenticated user's ID (reddit_like_member_id) and selected community ID (reddit_like_community_id). All post titles must be 3-300 characters with leading/trailing whitespace trimmed. The type-specific content undergoes additional validation: text body limited to 40,000 characters with markdown support, URLs validated for HTTP/HTTPS protocol and maximum 2,000 characters, and images validated for format, size, dimensions, and integrity.\n\nRelated API operations include PATCH /posts for searching and retrieving posts with filtering, GET /posts/{postId} for viewing individual post details, PUT /posts/{postId} for editing post content within allowed time windows, and DELETE /posts/{postId} for soft-deleting posts. Community subscription status affects posting permissions and is validated through reddit_like_community_subscriptions. The created post immediately becomes available for voting through the reddit_like_post_votes table and commenting through the reddit_like_comments table, contributing to the author's post karma tracked in reddit_like_user_karma.","parameters":[],"requestBody":{"description":"Post creation data including community selection, post type, title, and type-specific content","typeName":"IRedditLikePost.ICreate"},"responseBody":{"description":"The newly created post with complete details including generated ID, timestamps, and type-specific content","typeName":"IRedditLikePost"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before posts can be added to it"}]},{"specification":"This operation creates a new post in a specified community. Posts are the primary content type in the Reddit-like platform and can be one of three types: text posts (written discussions), link posts (sharing URLs), or image posts (sharing visual content). The operation operates on the reddit_like_posts table along with type-specific content tables (reddit_like_post_text_content, reddit_like_post_link_content, or reddit_like_post_image_content) based on the post type discriminator. Only authenticated members, moderators, and administrators can create posts, with posting permissions subject to community-specific settings and user ban status.","path":"/redditLike/admin/posts","method":"post","summary":"Create a new post in a community","description":"Create a new post within a specified community on the Reddit-like platform. This operation enables authenticated members to share content with communities through three distinct post types: text posts for written discussions and questions, link posts for sharing external web content, and image posts for uploading and sharing visual media.\n\nThe operation integrates with the reddit_like_posts table as the main post entity, along with type-specific content tables based on the post type discriminator. When creating a text post, the system stores the body content in reddit_like_post_text_content with support for markdown formatting up to 40,000 characters. For link posts, the system validates the URL, stores it in reddit_like_post_link_content, and attempts to extract Open Graph metadata including preview title, description, and thumbnail image. Image posts require file upload with validation of format (JPEG, PNG, GIF, WebP), size (maximum 20MB), and automatic generation of multiple image versions (original, medium 640px, thumbnail 150x150) stored in reddit_like_post_image_content.\n\nSecurity considerations include verifying the user is authenticated as a member, moderator, or administrator per the reddit_like_users role field. The system must validate the user is not banned from the target community by checking reddit_like_community_bans for active bans where banned_member_id matches the authenticated user and community_id matches the target community. Community-specific posting permissions from reddit_like_communities.posting_permission must be enforced, restricting posting based on subscription status or moderator approval. Content validation prevents XSS attacks through sanitization, validates URLs against malicious site databases, and enforces anti-spam rate limiting (maximum 10 posts per hour, 5 posts per day for accounts less than 24 hours old).\n\nThe operation initializes new posts with vote_score of 0, created_at timestamp, and associates the post with the authenticated user's ID (reddit_like_member_id) and selected community ID (reddit_like_community_id). All post titles must be 3-300 characters with leading/trailing whitespace trimmed. The type-specific content undergoes additional validation: text body limited to 40,000 characters with markdown support, URLs validated for HTTP/HTTPS protocol and maximum 2,000 characters, and images validated for format, size, dimensions, and integrity.\n\nRelated API operations include PATCH /posts for searching and retrieving posts with filtering, GET /posts/{postId} for viewing individual post details, PUT /posts/{postId} for editing post content within allowed time windows, and DELETE /posts/{postId} for soft-deleting posts. Community subscription status affects posting permissions and is validated through reddit_like_community_subscriptions. The created post immediately becomes available for voting through the reddit_like_post_votes table and commenting through the reddit_like_comments table, contributing to the author's post karma tracked in reddit_like_user_karma.","parameters":[],"requestBody":{"description":"Post creation data including community selection, post type, title, and type-specific content","typeName":"IRedditLikePost.ICreate"},"responseBody":{"description":"The newly created post with complete details including generated ID, timestamps, and type-specific content","typeName":"IRedditLikePost"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before posts can be created in it. The community_id in the post creation request references a community that must be created first."}]},{"specification":"This operation retrieves a filtered and paginated list of posts across communities or within a specific community with advanced search, filtering, and sorting capabilities. It operates on the reddit_like_posts table along with the mv_reddit_like_post_metrics materialized view for efficient vote score and comment count retrieval, and joins with type-specific content tables based on post type. The operation supports complex queries including text search on post titles, community filtering, post type filtering, date range filtering, vote score range filtering, and sorting by multiple algorithms (hot, new, top, controversial). This operation is accessible to all users including guests, with no authentication required for viewing public community content.","path":"/redditLike/posts","method":"patch","summary":"Search and retrieve a filtered, paginated list of posts","description":"Retrieve a filtered and paginated list of posts from the Reddit-like community platform with comprehensive search, filtering, sorting, and pagination capabilities. This operation provides the primary content discovery mechanism for users browsing posts across multiple communities or within specific communities, supporting all four core sorting algorithms defined in the platform requirements.\n\nThe operation queries the reddit_like_posts table as the primary data source, joining with type-specific content tables (reddit_like_post_text_content, reddit_like_post_link_content, reddit_like_post_image_content) to include type-discriminated content details. For performance optimization, the operation leverages the mv_reddit_like_post_metrics materialized view to retrieve pre-calculated vote_score and comment_count without expensive real-time aggregation from reddit_like_post_votes and reddit_like_comments tables. The operation joins with reddit_like_communities to include community metadata and with reddit_like_members to include post author information including username and karma scores.\n\nFiltering capabilities include community_id filtering to restrict results to specific communities, post type filtering (text, link, image) via the type discriminator field, date range filtering on created_at timestamps to find posts within specific time periods, vote score range filtering using the materialized view metrics, and full-text search on post titles using the PostgreSQL trigram index for fuzzy matching. The operation supports excluding soft-deleted posts by filtering where deleted_at is null, and optionally filtering posts from communities where the authenticated user is banned by checking reddit_like_community_bans.\n\nSorting algorithm support implements the four core content discovery methods specified in requirements document 08-content-sorting-algorithms.md. The 'hot' sorting calculates trending scores based on vote velocity, post age, and engagement momentum with time decay factors, surfacing content gaining traction in the last 24 hours. The 'new' sorting orders posts by created_at timestamp in strict reverse chronological order, giving every post equal initial visibility. The 'top' sorting ranks posts by net vote score from mv_reddit_like_post_metrics with support for time range filters (hour, day, week, month, year, all-time), enabling discovery of highest-quality content within specific periods. The 'controversial' sorting identifies polarizing content by calculating controversy scores based on vote balance (posts near 50/50 upvote/downvote ratio) and total vote volume, requiring minimum engagement thresholds to surface genuinely divisive discussions.\n\nPagination support includes configurable page size with recommended default of 25-50 posts per page, offset-based or cursor-based pagination for consistent browsing, and total count of matching posts for pagination controls. The operation maintains query performance through strategic indexing on reddit_like_posts(reddit_like_community_id, created_at), reddit_like_posts(type, created_at), and the title trigram index for search queries. Response time targets maintain under 2 seconds for initial page load under normal load conditions per performance requirements.\n\nSecurity considerations include public access allowing guests to view posts from public communities without authentication, optional authentication to personalize results based on user subscriptions and preferences, and automatic filtering of posts from private communities (reddit_like_communities.privacy_type='private') unless the authenticated user is an approved member. The operation respects community privacy settings and ban status, excluding content the requesting user should not access.\n\nRelated operations include POST /posts for creating new posts, GET /posts/{postId} for retrieving individual post details with full content and comment threads, PUT /posts/{postId} for editing post content, DELETE /posts/{postId} for removing posts, and GET /communities/{communityId}/posts for community-specific post listing. The search operation integrates with the voting system (reddit_like_post_votes), karma system (reddit_like_user_karma), and community subscription system (reddit_like_community_subscriptions) to provide comprehensive post discovery and content curation.","parameters":[],"requestBody":{"description":"Search criteria including filters, sorting preferences, pagination settings, and optional text search query","typeName":"IRedditLikePost.IRequest"},"responseBody":{"description":"Paginated list of posts matching search criteria with summary information optimized for feed display","typeName":"IPageIRedditLikePost.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before posts can be filtered by community_id. The community_id filter parameter references communities that must be created first."}]},{"specification":"This operation retrieves detailed information about a specific post identified by its unique post ID. It operates on the reddit_like_posts table along with its type-specific content tables (reddit_like_post_text_content, reddit_like_post_link_content, reddit_like_post_image_content). The operation fetches the post's title, type, author information, community association, creation timestamp, edit status, and type-specific content (body text for text posts, URL and metadata for link posts, or image URLs and metadata for image posts). This is the primary endpoint for displaying full post details to users, supporting the 'at' operation pattern for single resource retrieval by identifier.","path":"/redditLike/posts/{postId}","method":"get","summary":"Retrieve detailed information about a specific post by its unique identifier","description":"Retrieve comprehensive information about a single post identified by the postId path parameter. This operation returns complete post details including title, content, author information, community association, timestamps, vote scores, and comment counts.\n\nThis endpoint serves as the primary method for displaying full post details when users click on a post from feeds or community listings. The response includes type-specific content based on the post's type discriminator: for text posts, the operation returns the markdown body content from reddit_like_post_text_content; for link posts, it returns the URL, domain, and extracted metadata from reddit_like_post_link_content; for image posts, it returns image URLs for all resolutions (original, medium, thumbnail) along with dimensions and optional caption from reddit_like_post_image_content.\n\nThe operation integrates with the voting system by returning current vote scores calculated from reddit_like_post_votes, and displays total comment count aggregated from reddit_like_comments. These engagement metrics may be sourced from the mv_reddit_like_post_metrics materialized view for optimized performance.\n\nSecurity considerations include handling deleted posts (where deleted_at is non-null) by returning appropriate error responses or limited metadata, and applying community privacy settings for posts in private communities. The operation enforces no authentication requirements, allowing guests to view posts in public communities, while private community posts require membership verification.\n\nThis operation relates to the post creation workflow documented in the Content Creation requirements, supporting the complete user journey from post discovery through detailed viewing. Users typically access this endpoint after viewing post summaries in sorted feeds (hot, new, top, controversial sorting algorithms) or from user profile post histories.","parameters":[{"name":"postId","description":"Unique identifier of the target post to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post information including type-specific content, author details, community context, and engagement metrics","typeName":"IRedditLikePost"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation updates an existing post's editable content fields for the authenticated post author. It operates on the reddit_like_posts table and type-specific content tables based on post type. Per business requirements, only post authors can edit their own posts, with specific field editability constraints: title can only be edited within 5 minutes of creation, body text can be edited anytime for text posts, and captions can be edited anytime for image posts. Link URLs and image files are immutable after creation. The operation enforces these time-based and type-based editing rules, updates the updated_at timestamp, and sets the edited flag to maintain edit transparency.","path":"/redditLike/member/posts/{postId}","method":"put","summary":"Update editable content fields of an existing post by its author","description":"Update the editable content of a post identified by postId. This operation allows post authors to modify specific fields of their posts according to business rules defined in the Content Creation requirements section 6 (Post Editing Capabilities).\n\nThe editing permissions and field mutability follow strict business rules: post authors can edit their own posts only, with no editing rights for other users including moderators and administrators (moderators can only remove posts, not edit them). The title field can be edited only within 5 minutes of the post's creation timestamp; after this grace period, titles become immutable to maintain URL and reference stability. For text posts, the body content from reddit_like_post_text_content can be edited at any time without restrictions. For image posts, the caption field from reddit_like_post_image_content can be edited at any time. Link posts have the most restrictive editing rules: the URL field in reddit_like_post_link_content is completely immutable after creation, preventing link substitution attacks.\n\nWhen an edit is successfully processed, the operation updates the updated_at timestamp to the current time, records the edit event, and may set an edited flag or indicator that displays to users viewing the post. The edit history tracking requirements specify that edits within the first 3 minutes are considered a grace period and may not display edit indicators, while edits after this window clearly show 'edited' status with timestamp.\n\nSecurity and validation considerations include verifying the authenticated user is the post author by comparing the JWT token user ID with the post's reddit_like_member_id field, validating edited content against the same rules as post creation (title length 3-300 characters, body length up to 40,000 characters, caption up to 10,000 characters), sanitizing all user input to prevent XSS attacks, and preserving markdown formatting in text content. The operation performs time-based validation by checking the difference between current time and created_at to enforce the 5-minute title editing window.\n\nThe operation integrates with the karma system by preserving all vote scores when content is edited, ensuring edits do not reset engagement metrics. Comments on the post remain associated and visible regardless of post edits. The edit does not affect the post's community association, type discriminator, or author attribution, which are all immutable fields.\n\nThis operation supports the user experience requirement that allows content creators to fix typos, clarify information, or improve their contributions while maintaining content integrity through immutable core fields and transparent edit tracking.","parameters":[{"name":"postId","description":"Unique identifier of the target post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated content fields for the post, following editability rules based on post type and time constraints","typeName":"IRedditLikePost.IUpdate"},"responseBody":{"description":"Updated post information reflecting the applied changes with updated timestamp and edit indicators","typeName":"IRedditLikePost"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before it can be updated by the member"}]},{"specification":"This operation removes a post from the database by its unique identifier. The operation is accessible to the post author (member who created it), community moderators of the community where the post exists, and platform administrators. This implements the post deletion functionality specified in the Content Creation and Posts Requirements document section 7 (Post Deletion Requirements). When executed, the post is removed from public view while the database record is preserved for audit purposes and referential integrity.","path":"/redditLike/member/posts/{postId}","method":"delete","summary":"Remove a post by ID from the reddit_like_posts table","description":"Remove a specific post identified by its unique post ID. When a post is deleted, the post is removed from public view while preserving the database record for audit purposes and referential integrity. The content becomes hidden from users but the record remains in the database with all metadata intact.\n\nThis operation is available to three user roles with different authorization contexts: the post author (member who created the post) can delete their own content at any time as part of content ownership rights, community moderators can remove posts within the communities they moderate as part of their content moderation responsibilities, and platform administrators can delete any post across all communities for platform-wide policy enforcement.\n\nWhen a post is removed, the content is hidden from public view and removed from community feeds, search results, and sorting algorithms. The system displays a placeholder message such as 'This post has been deleted by the author' or 'This post has been removed by moderators' depending on who initiated the deletion. However, the post record remains in the database with all metadata intact including the post ID, title, community association, author information, and timestamps.\n\nAssociated comments remain accessible and visible to maintain thread integrity and preserve valuable discussions. The comment section displays with a notice indicating the parent post has been removed, but all comment content, voting, and threading functionality continues to work normally. This design ensures that community discussions are not lost when posts are deleted, maintaining the value of user contributions in comment threads.\n\nVote scores and karma points previously earned from the deleted post are preserved according to the karma system requirements defined in document 07-karma-system.md section 4.4. This prevents users from manipulating their reputation by creating content to gain karma and then deleting poorly-received posts to avoid karma loss. The karma earned from a post persists even after deletion, maintaining the integrity of the reputation system.\n\nThe deletion workflow requires the authenticated user making the request to have appropriate authorization based on their role and relationship to the content. Post authors can delete their own posts through the member authorization role. Moderators must have moderator status for the specific community where the post exists, verified through the reddit_like_community_moderators table. Administrators have unrestricted deletion capabilities across all communities. The operation validates these permissions before proceeding with the deletion operation.\n\nRelated operations include POST /communities/{communityId}/posts for creating posts that may later be deleted, GET /posts/{postId} for retrieving post details before making deletion decisions, PUT /posts/{postId} for editing posts as an alternative to deletion, and various moderation endpoints defined in the Content Moderation and Reporting requirements for moderator-initiated content removal as part of the broader moderation workflow.","parameters":[{"name":"postId","description":"Unique identifier of the target post to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before it can be deleted by the member author"}]},{"specification":"This operation removes a post from the database by its unique identifier. The operation is accessible to the post author (member who created it), community moderators of the community where the post exists, and platform administrators. This implements the post deletion functionality specified in the Content Creation and Posts Requirements document section 7 (Post Deletion Requirements). When executed, the post is removed from public view while the database record is preserved for audit purposes and referential integrity.","path":"/redditLike/moderator/posts/{postId}","method":"delete","summary":"Remove a post by ID from the reddit_like_posts table","description":"Remove a specific post identified by its unique post ID as part of community moderation responsibilities. When a moderator removes a post, the content is hidden from public view while preserving the database record for audit purposes and referential integrity. The removal marks the post as deleted, making it invisible to community members while maintaining the record for moderation review and appeal processes.\n\nThis operation is available to three user roles with different authorization contexts: the post author (member who created the post) can delete their own content at any time as part of content ownership rights, community moderators can remove posts within the communities they moderate as part of their content moderation responsibilities, and platform administrators can delete any post across all communities for platform-wide policy enforcement.\n\nWhen a post is removed by a moderator, the content is hidden from public view and removed from community feeds, search results, and sorting algorithms. The system displays a placeholder message 'This post has been removed by moderators' to indicate moderator action rather than author deletion. The post record remains in the database with all metadata intact including the post ID, title, community association, author information, and timestamps, enabling moderators to review the removal history and users to understand moderation patterns.\n\nAssociated comments remain accessible and visible to maintain thread integrity and preserve valuable discussions. The comment section displays with a notice indicating the parent post has been removed by moderators, but all comment content, voting, and threading functionality continues to work normally. This design ensures that community discussions are not lost when posts are removed for moderation reasons, maintaining the value of user contributions in comment threads.\n\nVote scores and karma points previously earned from the deleted post are preserved according to the karma system requirements defined in document 07-karma-system.md section 4.4. This prevents users from manipulating their reputation by creating content to gain karma and then deleting poorly-received posts to avoid karma loss. The karma earned from a post persists even after deletion, maintaining the integrity of the reputation system.\n\nThe deletion workflow requires the authenticated user making the request to have appropriate authorization based on their role and relationship to the content. Moderators must have moderator status for the specific community where the post exists, verified through the reddit_like_community_moderators table and community_id association in the reddit_like_posts record. The system validates that the moderator has the manage_posts permission for the target community before proceeding with the removal operation. Administrators have unrestricted deletion capabilities across all communities.\n\nRelated operations include POST /communities/{communityId}/posts for creating posts that may later require moderation, GET /posts/{postId} for retrieving post details before making removal decisions, the content reporting system defined in Content Moderation and Reporting requirements for community members to flag rule violations, and the moderation action logging system that records all moderator removals with reasoning and context for transparency and accountability.","parameters":[{"name":"postId","description":"Unique identifier of the target post to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before it can be deleted by a moderator"}]},{"specification":"This operation removes a post from the database by its unique identifier. The operation is accessible to the post author (member who created it), community moderators of the community where the post exists, and platform administrators. This implements the post deletion functionality specified in the Content Creation and Posts Requirements document section 7 (Post Deletion Requirements). When executed, the post is removed from public view while the database record is preserved for audit purposes and referential integrity.","path":"/redditLike/admin/posts/{postId}","method":"delete","summary":"Remove a post by ID from the reddit_like_posts table","description":"Remove a specific post identified by its unique post ID as part of platform-wide content governance and policy enforcement. When an administrator removes a post, the content is hidden from public view while preserving the database record for audit purposes, legal compliance, and appeal processes. The removal marks the post as deleted across the entire platform, making it invisible to all users while maintaining the complete record for administrative review.\n\nThis operation is available to three user roles with different authorization contexts: the post author (member who created the post) can delete their own content at any time as part of content ownership rights, community moderators can remove posts within the communities they moderate as part of their content moderation responsibilities, and platform administrators can delete any post across all communities for platform-wide policy enforcement.\n\nWhen a post is removed by an administrator, the content is hidden from public view and removed from community feeds, search results, and sorting algorithms across the entire platform. The system displays a placeholder message 'This post has been removed by administrators' to indicate platform-level action rather than community moderation or author deletion. The post record remains in the database with all metadata intact including the post ID, title, community association, author information, and timestamps, enabling administrators to maintain comprehensive audit trails for legal compliance and policy enforcement review.\n\nAssociated comments remain accessible and visible to maintain thread integrity and preserve valuable discussions. The comment section displays with a notice indicating the parent post has been removed by administrators, but all comment content, voting, and threading functionality continues to work normally. This design ensures that community discussions are not lost when posts are removed for platform policy violations, maintaining the value of user contributions in comment threads even when parent content violates platform-wide rules.\n\nVote scores and karma points previously earned from the deleted post are preserved according to the karma system requirements defined in document 07-karma-system.md section 4.4. This prevents users from manipulating their reputation by creating content to gain karma and then deleting poorly-received posts to avoid karma loss. The karma earned from a post persists even after deletion, maintaining the integrity of the reputation system across all user roles.\n\nThe deletion workflow validates that the authenticated user has administrator privileges before proceeding with the removal operation. Administrators have unrestricted deletion capabilities across all communities without needing community-specific moderator status. This platform-wide authority enables administrators to enforce platform policies, handle escalated moderation issues, and remove content that violates terms of service regardless of community-level moderation decisions.\n\nRelated operations include POST /communities/{communityId}/posts for creating posts that may later require platform-level intervention, GET /posts/{postId} for retrieving post details before making removal decisions, the appeal system defined in Content Moderation and Reporting requirements for users to contest administrator actions, and the platform-wide moderation logging system that records all administrator removals with detailed reasoning for transparency and legal compliance.","parameters":[{"name":"postId","description":"Unique identifier of the target post to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/admin/posts","method":"post"},"description":"Post must be created before it can be deleted by administrators"}]},{"specification":"This operation creates a new post within a specific community identified by the community ID. The operation is available to authenticated members, moderators, and administrators who have posting permissions in the target community. This implements the post creation functionality specified in the Content Creation and Posts Requirements document section 3 (Post Creation Workflow). The operation supports three post types defined by the type discriminator field in reddit_like_posts: text posts with title and optional markdown body stored in reddit_like_post_text_content, link posts with title and URL with extracted metadata stored in reddit_like_post_link_content, and image posts with title, uploaded image URLs, and optional caption stored in reddit_like_post_image_content. All posts require community selection and validation of posting permissions based on community settings in the reddit_like_communities table.","path":"/redditLike/member/communities/{communityId}/posts","method":"post","summary":"Create a new post in a specific community in the reddit_like_posts table","description":"Create a new post within a specific community identified by the communityId path parameter. This operation enables authenticated users to contribute content to communities in the form of text discussions, link sharing, or image posts. The creation process validates user permissions, community settings, and content requirements before inserting a new record into the reddit_like_posts table along with type-specific content in the corresponding specialized tables based on the post type discriminator.\n\nThis operation is available to authenticated members, moderators, and administrators who have appropriate posting permissions in the target community. The system validates several authorization checks before allowing post creation: the requesting user must not be banned from the community (checked against reddit_like_community_bans table where is_active=true), the community's posting_permission setting must allow the user to post (valid values: anyone_subscribed requires community subscription, approved_only requires moderator approval, moderators_only restricts to moderators and admins), and the selected post type must be enabled in the community through the boolean flags allow_text_posts, allow_link_posts, and allow_image_posts in the reddit_like_communities table.\n\nThe request body must specify the post type discriminator with one of three valid values: 'text', 'link', or 'image'. Based on this discriminator, the system routes the content to the appropriate type-specific table. For text posts, the system creates a record in reddit_like_post_text_content with the title (3-300 characters required) and optional body text (up to 40,000 characters supporting markdown formatting). For link posts, the system creates a record in reddit_like_post_link_content with the title and a valid HTTP/HTTPS URL (up to 2,000 characters), then attempts to extract Open Graph metadata including preview_title, preview_description, and preview_image_url from the target webpage for rich preview generation. For image posts, the system creates a record in reddit_like_post_image_content with the title, image URLs for multiple resolutions (original_image_url for full resolution up to 20MB, medium_image_url resized to 640px width, thumbnail_image_url at 150x150 pixels), image metadata (image_width, image_height in pixels, file_size in bytes, file_format from values JPEG/PNG/GIF/WebP), and optional caption up to 10,000 characters supporting markdown.\n\nUpon successful creation, the system performs several coordinated actions: assigns a unique UUID to the post in the id field, records the current timestamp in both created_at and updated_at fields, sets reddit_like_member_id to the authenticated user's member ID establishing content ownership, associates the post with the specified community through reddit_like_community_id, sets the type field to the provided discriminator value, stores the title, leaves deleted_at as null indicating active status, and initializes the corresponding type-specific content record. The newly created post immediately appears in the community feed sorted according to the selected algorithm, becomes available for voting through the reddit_like_post_votes table, can receive comments through the reddit_like_comments table, and participates in karma calculation for the author through the reddit_like_user_karma and reddit_like_karma_history tables.\n\nThe operation enforces comprehensive validation rules aligned with requirements document section 5 (Content Validation Rules). Title validation ensures length between 3 and 300 characters, trims leading and trailing whitespace, and rejects titles containing only whitespace. Content sanitization prevents XSS attacks by escaping HTML special characters in titles and using trusted HTML sanitization libraries for markdown rendering in text post bodies and image captions. URL validation for link posts verifies HTTP or HTTPS protocol, validates URL format using standard parsing, checks URLs against malicious site databases, and rejects URLs from blacklisted domains. Image validation confirms file format matches allowed types (JPEG, PNG, GIF, WebP), validates file size does not exceed 20MB (20,971,520 bytes), verifies image integrity by attempting to decode, scans for malware signatures, and accepts images up to 10,000 pixels in width or height.\n\nAnti-spam measures protect the platform from abuse: users are limited to 10 posts per hour across all communities enforced through rate limiting, accounts less than 24 hours old are restricted to 5 posts per day, duplicate URL detection warns users when the same link was posted in the same community within the last 7 days, and the system scans post content for prohibited keywords flagging matches for moderator review. When users exceed posting frequency limits, the system displays the message 'You're posting too frequently. Please wait before posting again.' along with the remaining wait time.\n\nRelated operations that work together with post creation include DELETE /posts/{postId} for removing created posts through soft deletion, GET /communities/{communityId}/posts for listing and browsing posts within a community, PATCH /communities/{communityId}/posts for searching and filtering posts with complex criteria, PUT /posts/{postId} for editing post content within the allowed time windows (title editable within 5 minutes, body text editable anytime for text posts, captions editable for image posts), GET /posts/{postId} for retrieving complete post details with type-specific content, POST /posts/{postId}/votes for casting upvotes or downvotes on newly created posts, and POST /posts/{postId}/comments for starting discussions on the post through the comment system.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the post will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post creation data including type discriminator, title, and type-specific content fields for text, link, or image posts","typeName":"IRedditLikePost.ICreate"},"responseBody":{"description":"Complete post object with assigned ID, timestamps, author information, community association, and type-specific content details","typeName":"IRedditLikePost"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before posts can be created within it"}]},{"specification":"This operation creates a new post within a specific community identified by the community ID. The operation is available to authenticated members, moderators, and administrators who have posting permissions in the target community. This implements the post creation functionality specified in the Content Creation and Posts Requirements document section 3 (Post Creation Workflow). The operation supports three post types defined by the type discriminator field in reddit_like_posts: text posts with title and optional markdown body stored in reddit_like_post_text_content, link posts with title and URL with extracted metadata stored in reddit_like_post_link_content, and image posts with title, uploaded image URLs, and optional caption stored in reddit_like_post_image_content. All posts require community selection and validation of posting permissions based on community settings in the reddit_like_communities table.","path":"/redditLike/moderator/communities/{communityId}/posts","method":"post","summary":"Create a new post in a specific community in the reddit_like_posts table","description":"Create a new post within a specific community identified by the communityId path parameter. This operation enables authenticated users to contribute content to communities in the form of text discussions, link sharing, or image posts. The creation process validates user permissions, community settings, and content requirements before inserting a new record into the reddit_like_posts table along with type-specific content in the corresponding specialized tables based on the post type discriminator.\n\nThis operation is available to authenticated members, moderators, and administrators who have appropriate posting permissions in the target community. The system validates several authorization checks before allowing post creation: the requesting user must not be banned from the community (checked against reddit_like_community_bans table where is_active=true), the community's posting_permission setting must allow the user to post (valid values: anyone_subscribed requires community subscription, approved_only requires moderator approval, moderators_only restricts to moderators and admins), and the selected post type must be enabled in the community through the boolean flags allow_text_posts, allow_link_posts, and allow_image_posts in the reddit_like_communities table.\n\nThe request body must specify the post type discriminator with one of three valid values: 'text', 'link', or 'image'. Based on this discriminator, the system routes the content to the appropriate type-specific table. For text posts, the system creates a record in reddit_like_post_text_content with the title (3-300 characters required) and optional body text (up to 40,000 characters supporting markdown formatting). For link posts, the system creates a record in reddit_like_post_link_content with the title and a valid HTTP/HTTPS URL (up to 2,000 characters), then attempts to extract Open Graph metadata including preview_title, preview_description, and preview_image_url from the target webpage for rich preview generation. For image posts, the system creates a record in reddit_like_post_image_content with the title, image URLs for multiple resolutions (original_image_url for full resolution up to 20MB, medium_image_url resized to 640px width, thumbnail_image_url at 150x150 pixels), image metadata (image_width, image_height in pixels, file_size in bytes, file_format from values JPEG/PNG/GIF/WebP), and optional caption up to 10,000 characters supporting markdown.\n\nUpon successful creation, the system performs several coordinated actions: assigns a unique UUID to the post in the id field, records the current timestamp in both created_at and updated_at fields, sets reddit_like_member_id to the authenticated user's member ID establishing content ownership, associates the post with the specified community through reddit_like_community_id, sets the type field to the provided discriminator value, stores the title, leaves deleted_at as null indicating active status, and initializes the corresponding type-specific content record. The newly created post immediately appears in the community feed sorted according to the selected algorithm, becomes available for voting through the reddit_like_post_votes table, can receive comments through the reddit_like_comments table, and participates in karma calculation for the author through the reddit_like_user_karma and reddit_like_karma_history tables.\n\nThe operation enforces comprehensive validation rules aligned with requirements document section 5 (Content Validation Rules). Title validation ensures length between 3 and 300 characters, trims leading and trailing whitespace, and rejects titles containing only whitespace. Content sanitization prevents XSS attacks by escaping HTML special characters in titles and using trusted HTML sanitization libraries for markdown rendering in text post bodies and image captions. URL validation for link posts verifies HTTP or HTTPS protocol, validates URL format using standard parsing, checks URLs against malicious site databases, and rejects URLs from blacklisted domains. Image validation confirms file format matches allowed types (JPEG, PNG, GIF, WebP), validates file size does not exceed 20MB (20,971,520 bytes), verifies image integrity by attempting to decode, scans for malware signatures, and accepts images up to 10,000 pixels in width or height.\n\nAnti-spam measures protect the platform from abuse: users are limited to 10 posts per hour across all communities enforced through rate limiting, accounts less than 24 hours old are restricted to 5 posts per day, duplicate URL detection warns users when the same link was posted in the same community within the last 7 days, and the system scans post content for prohibited keywords flagging matches for moderator review. When users exceed posting frequency limits, the system displays the message 'You're posting too frequently. Please wait before posting again.' along with the remaining wait time.\n\nRelated operations that work together with post creation include DELETE /posts/{postId} for removing created posts, GET /communities/{communityId}/posts for listing and browsing posts within a community, PATCH /communities/{communityId}/posts for searching and filtering posts with complex criteria, PUT /posts/{postId} for editing post content within the allowed time windows (title editable within 5 minutes, body text editable anytime for text posts, captions editable for image posts), GET /posts/{postId} for retrieving complete post details with type-specific content, POST /posts/{postId}/votes for casting upvotes or downvotes on newly created posts, and POST /posts/{postId}/comments for starting discussions on the post through the comment system.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the post will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post creation data including type discriminator, title, and type-specific content fields for text, link, or image posts","typeName":"IRedditLikePost.ICreate"},"responseBody":{"description":"Complete post object with assigned ID, timestamps, author information, community association, and type-specific content details","typeName":"IRedditLikePost"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before posts can be created within it. The communityId parameter references a community that must be created first through the community creation endpoint."}]},{"specification":"This operation creates a new post within a specific community identified by the community ID. The operation is available to authenticated members, moderators, and administrators who have posting permissions in the target community. This implements the post creation functionality specified in the Content Creation and Posts Requirements document section 3 (Post Creation Workflow). The operation supports three post types defined by the type discriminator field in reddit_like_posts: text posts with title and optional markdown body stored in reddit_like_post_text_content, link posts with title and URL with extracted metadata stored in reddit_like_post_link_content, and image posts with title, uploaded image URLs, and optional caption stored in reddit_like_post_image_content. All posts require community selection and validation of posting permissions based on community settings in the reddit_like_communities table.","path":"/redditLike/admin/communities/{communityId}/posts","method":"post","summary":"Create a new post in a specific community in the reddit_like_posts table","description":"Create a new post within a specific community identified by the communityId path parameter. This operation enables authenticated users to contribute content to communities in the form of text discussions, link sharing, or image posts. The creation process validates user permissions, community settings, and content requirements before inserting a new record into the reddit_like_posts table along with type-specific content in the corresponding specialized tables based on the post type discriminator.\n\nThis operation is available to authenticated members, moderators, and administrators who have appropriate posting permissions in the target community. The system validates several authorization checks before allowing post creation: the requesting user must not be banned from the community (checked against reddit_like_community_bans table where is_active=true), the community's posting_permission setting must allow the user to post (valid values: anyone_subscribed requires community subscription, approved_only requires moderator approval, moderators_only restricts to moderators and admins), and the selected post type must be enabled in the community through the boolean flags allow_text_posts, allow_link_posts, and allow_image_posts in the reddit_like_communities table.\n\nThe request body must specify the post type discriminator with one of three valid values: 'text', 'link', or 'image'. Based on this discriminator, the system routes the content to the appropriate type-specific table. For text posts, the system creates a record in reddit_like_post_text_content with the title (3-300 characters required) and optional body text (up to 40,000 characters supporting markdown formatting). For link posts, the system creates a record in reddit_like_post_link_content with the title and a valid HTTP/HTTPS URL (up to 2,000 characters), then attempts to extract Open Graph metadata including preview_title, preview_description, and preview_image_url from the target webpage for rich preview generation. For image posts, the system creates a record in reddit_like_post_image_content with the title, image URLs for multiple resolutions (original_image_url for full resolution up to 20MB, medium_image_url resized to 640px width, thumbnail_image_url at 150x150 pixels), image metadata (image_width, image_height in pixels, file_size in bytes, file_format from values JPEG/PNG/GIF/WebP), and optional caption up to 10,000 characters supporting markdown.\n\nUpon successful creation, the system performs several coordinated actions: assigns a unique UUID to the post in the id field, records the current timestamp in both created_at and updated_at fields, sets reddit_like_member_id to the authenticated user's member ID establishing content ownership, associates the post with the specified community through reddit_like_community_id, sets the type field to the provided discriminator value, stores the title, leaves deleted_at as null indicating active status, and initializes the corresponding type-specific content record. The newly created post immediately appears in the community feed sorted according to the selected algorithm, becomes available for voting through the reddit_like_post_votes table, can receive comments through the reddit_like_comments table, and participates in karma calculation for the author through the reddit_like_user_karma and reddit_like_karma_history tables.\n\nThe operation enforces comprehensive validation rules aligned with requirements document section 5 (Content Validation Rules). Title validation ensures length between 3 and 300 characters, trims leading and trailing whitespace, and rejects titles containing only whitespace. Content sanitization prevents XSS attacks by escaping HTML special characters in titles and using trusted HTML sanitization libraries for markdown rendering in text post bodies and image captions. URL validation for link posts verifies HTTP or HTTPS protocol, validates URL format using standard parsing, checks URLs against malicious site databases, and rejects URLs from blacklisted domains. Image validation confirms file format matches allowed types (JPEG, PNG, GIF, WebP), validates file size does not exceed 20MB (20,971,520 bytes), verifies image integrity by attempting to decode, scans for malware signatures, and accepts images up to 10,000 pixels in width or height.\n\nAnti-spam measures protect the platform from abuse: users are limited to 10 posts per hour across all communities enforced through rate limiting, accounts less than 24 hours old are restricted to 5 posts per day, duplicate URL detection warns users when the same link was posted in the same community within the last 7 days, and the system scans post content for prohibited keywords flagging matches for moderator review. When users exceed posting frequency limits, the system displays the message 'You're posting too frequently. Please wait before posting again.' along with the remaining wait time.\n\nRelated operations that work together with post creation include DELETE /posts/{postId} for removing created posts through soft deletion, GET /communities/{communityId}/posts for listing and browsing posts within a community, PATCH /communities/{communityId}/posts for searching and filtering posts with complex criteria, PUT /posts/{postId} for editing post content within the allowed time windows (title editable within 5 minutes, body text editable anytime for text posts, captions editable for image posts), GET /posts/{postId} for retrieving complete post details with type-specific content, POST /posts/{postId}/votes for casting upvotes or downvotes on newly created posts, and POST /posts/{postId}/comments for starting discussions on the post through the comment system.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the post will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post creation data including type discriminator, title, and type-specific content fields for text, link, or image posts","typeName":"IRedditLikePost.ICreate"},"responseBody":{"description":"Complete post object with assigned ID, timestamps, author information, community association, and type-specific content details","typeName":"IRedditLikePost"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before posts can be created within it. The communityId parameter references a community that must be created first through the community creation endpoint."}]},{"specification":"This operation retrieves a paginated and filtered list of posts within a specific community. It operates on the reddit_like_posts table filtered by community_id, supporting advanced search, filtering, and sorting capabilities. The operation enables users to discover content within a community using various sorting algorithms (hot, new, top, controversial) and filter by post type, time range, and other criteria.","path":"/redditLike/communities/{communityId}/posts","method":"patch","summary":"Search and retrieve filtered, paginated list of posts in a community","description":"Retrieve a comprehensive filtered and paginated list of posts within a specific community from the Reddit-like platform. This operation provides advanced search and discovery capabilities for finding posts based on multiple criteria including post type (text, link, image), time range filters, voting thresholds, and sorting preferences.\n\nThe operation supports all four core sorting algorithms defined in the Content Sorting Algorithms specification: Hot (trending content with time decay and engagement velocity), New (strict chronological ordering), Top (highest vote scores with time range filters), and Controversial (polarizing content with balanced voting patterns). The default sorting is Hot to surface currently trending content.\n\nThis endpoint serves multiple user scenarios: casual browsing for interesting content, community exploration for new members discovering top posts, active community members checking latest submissions via New sorting, and users seeking debates through Controversial sorting. The operation integrates with the voting system to calculate vote scores, the karma system for content quality signals, and the comment system to display engagement metrics.\n\nSecurity considerations include respecting community privacy settings (public vs private communities), enforcing read permissions based on user authentication and community membership for private communities, and applying rate limiting for search operations to prevent abuse. Guest users can access public community posts, while private community posts require authenticated membership or approval.\n\nThe operation returns post summary information optimized for feed displays, including post metadata (title, type, author, timestamps, vote scores, comment counts), type-specific preview content (text excerpt, link metadata with thumbnails, image thumbnails), and engagement metrics from the mv_reddit_like_post_metrics materialized view for performance optimization. Pagination parameters control result set size and offset for efficient browsing of large post collections.","parameters":[{"name":"communityId","description":"Unique identifier of the community to retrieve posts from","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for post discovery","typeName":"IRedditLikeCommunity.IPostSearchRequest"},"responseBody":{"description":"Paginated collection of post summaries matching search criteria with sorting applied","typeName":"IPageIRedditLikePost.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"searchPosts","prerequisites":[]},{"specification":"This operation retrieves pre-calculated engagement metrics for a specific post from the mv_reddit_like_post_metrics materialized view. It provides denormalized performance-optimized access to vote scores (net votes, upvote count, downvote count, upvote percentage) and comment count without requiring real-time aggregation from normalized vote and comment tables. This read-only operation serves feed displays, ranking algorithms, and post detail views requiring fast metric access.","path":"/redditLike/posts/{postId}/metrics","method":"get","summary":"Retrieve pre-calculated engagement metrics for a specific post","description":"Retrieve comprehensive engagement metrics for a specific post from the Reddit-like platform. This operation accesses the mv_reddit_like_post_metrics materialized view which provides pre-calculated denormalized metrics optimized for query performance without expensive real-time vote and comment aggregation.\n\nThe metrics include detailed voting statistics: vote_score (net upvotes minus downvotes used for ranking algorithms), upvote_count (total positive votes for popularity analysis), downvote_count (total negative votes for controversy calculations), and derived upvote percentage (ratio of upvotes to total votes). Additionally, the operation returns comment_count aggregated from all comments and replies on the post, enabling fast feed displays showing engagement levels.\n\nThis endpoint is critical for content sorting algorithms defined in the Content Sorting Algorithms specification. The vote_score feeds into Hot algorithm time decay calculations and Top sorting rankings. The upvote/downvote counts power the Controversial sorting algorithm which identifies polarizing content with balanced voting patterns. The comment_count provides engagement signals for content discovery and user interest indication.\n\nThe operation integrates with the Voting System where individual votes are recorded in reddit_like_post_votes table, and the materialized view aggregates these atomic vote records into summary statistics. The metrics are refreshed periodically (indicated by last_calculated_at timestamp) to balance data freshness with write performance on the normalized voting tables.\n\nSecurity considerations include public read access for metrics on posts in public communities, while private community posts require membership verification before exposing metrics. The operation respects community privacy settings and post deletion status, returning appropriate errors for inaccessible or deleted posts.\n\nPerformance expectations are sub-second response times since metrics are pre-calculated in the materialized view rather than computed on-demand. The last_calculated_at timestamp indicates metric freshness, typically within seconds to minutes of actual vote changes depending on view refresh frequency. This architecture ensures fast feed rendering and sorting algorithm execution even for posts with thousands of votes.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve metrics for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Pre-calculated engagement metrics including vote scores, counts, and comment totals","typeName":"IRedditLikePostMetrics"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before its metrics can be retrieved"}]},{"specification":"This operation creates a new comment in response to a post or another comment, enabling threaded discussions within the community platform. It operates on the reddit_like_comments table and supports nested comment threading up to 10 levels deep. The operation validates the parent content exists, checks user authentication and community ban status, and enforces content validation rules (1-10,000 characters). Comments are immediately available for voting and display in the comment thread upon successful creation.","path":"/redditLike/member/comments","method":"post","summary":"Create a new comment or reply in a post discussion thread","description":"Create a new comment on a post or reply to an existing comment, enabling community discussion and engagement through threaded conversations. This operation inserts a new record into the reddit_like_comments table and supports the complete nested comment threading system defined in the business requirements.\n\nThis operation requires user authentication and validates that the authenticated member is not banned from the community where the content exists. The comment content must be between 1 and 10,000 characters and is stored with markdown formatting support. When creating a reply to another comment, the system validates the parent comment exists and enforces the maximum nesting depth of 10 levels per business requirement section 4.4.\n\nThe newly created comment is initialized with zero vote score, depth level calculated from parent comment (0 for top-level comments), and edited flag set to false. The system automatically increments the post's comment count through the mv_reddit_like_post_metrics materialized view and makes the comment immediately available for voting and further replies.\n\nSecurity considerations include content sanitization to prevent XSS attacks, rate limiting to prevent spam (max 10 comments per minute per business requirement section 11.2), and duplicate comment detection (rejecting identical comments within 5 minutes per requirement section 11.2). URL validation ensures only HTTP/HTTPS protocols are allowed in comment text links, protecting users from malicious links.\n\nThis operation integrates with the voting system by enabling immediate vote capability on the new comment, the karma system by preparing the comment for potential karma earning, and the content moderation system by making the comment reportable if it violates rules. The comment appears in the author's comment history on their profile and contributes to the overall discussion thread structure.","parameters":[],"requestBody":{"description":"Comment creation data including content text, parent post, and optional parent comment for threaded replies","typeName":"IRedditLikeComment.ICreate"},"responseBody":{"description":"Successfully created comment with assigned identifier, vote score, depth level, and metadata","typeName":"IRedditLikeComment"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before comments can be created on it. The reddit_like_post_id is required to create a comment."}]},{"specification":"This operation creates a new comment in response to a post or another comment, enabling threaded discussions within the community platform. It operates on the reddit_like_comments table and supports nested comment threading up to 10 levels deep. The operation validates the parent content exists, checks user authentication and community ban status, and enforces content validation rules (1-10,000 characters). Comments are immediately available for voting and display in the comment thread upon successful creation.","path":"/redditLike/moderator/comments","method":"post","summary":"Create a new comment or reply in a post discussion thread","description":"Create a new comment on a post or reply to an existing comment, enabling community discussion and engagement through threaded conversations. This operation inserts a new record into the reddit_like_comments table and supports the complete nested comment threading system defined in the business requirements.\n\nThis operation requires user authentication and validates that the authenticated moderator is not banned from the community where the content exists. The comment content must be between 1 and 10,000 characters and is stored with markdown formatting support. When creating a reply to another comment, the system validates the parent comment exists and enforces the maximum nesting depth of 10 levels per business requirement section 4.4.\n\nThe newly created comment is initialized with zero vote score, depth level calculated from parent comment (0 for top-level comments), and edited flag set to false. The system automatically increments the post's comment count through the mv_reddit_like_post_metrics materialized view and makes the comment immediately available for voting and further replies.\n\nSecurity considerations include content sanitization to prevent XSS attacks, rate limiting to prevent spam (max 10 comments per minute per business requirement section 11.2), and duplicate comment detection (rejecting identical comments within 5 minutes per requirement section 11.2). URL validation ensures only HTTP/HTTPS protocols are allowed in comment text links, protecting users from malicious links.\n\nThis operation integrates with the voting system by enabling immediate vote capability on the new comment, the karma system by preparing the comment for potential karma earning, and the content moderation system by making the comment reportable if it violates rules. The comment appears in the author's comment history on their profile and contributes to the overall discussion thread structure.","parameters":[],"requestBody":{"description":"Comment creation data including content text, parent post, and optional parent comment for threaded replies","typeName":"IRedditLikeComment.ICreate"},"responseBody":{"description":"Successfully created comment with assigned identifier, vote score, depth level, and metadata","typeName":"IRedditLikeComment"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/posts","method":"post"},"description":"Post must exist before comments can be created on it. The reddit_like_post_id is required to create a comment."}]},{"specification":"This operation creates a new comment in response to a post or another comment, enabling threaded discussions within the community platform. It operates on the reddit_like_comments table and supports nested comment threading up to 10 levels deep. The operation validates the parent content exists, checks user authentication and community ban status, and enforces content validation rules (1-10,000 characters). Comments are immediately available for voting and display in the comment thread upon successful creation.","path":"/redditLike/admin/comments","method":"post","summary":"Create a new comment or reply in a post discussion thread","description":"Create a new comment on a post or reply to an existing comment, enabling community discussion and engagement through threaded conversations. This operation inserts a new record into the reddit_like_comments table and supports the complete nested comment threading system defined in the business requirements.\n\nThis operation requires user authentication and validates that the authenticated administrator is not banned from the community where the content exists. The comment content must be between 1 and 10,000 characters and is stored with markdown formatting support. When creating a reply to another comment, the system validates the parent comment exists and enforces the maximum nesting depth of 10 levels per business requirement section 4.4.\n\nThe newly created comment is initialized with zero vote score, depth level calculated from parent comment (0 for top-level comments), and edited flag set to false. The system automatically increments the post's comment count through the mv_reddit_like_post_metrics materialized view and makes the comment immediately available for voting and further replies.\n\nSecurity considerations include content sanitization to prevent XSS attacks, rate limiting to prevent spam (max 10 comments per minute per business requirement section 11.2), and duplicate comment detection (rejecting identical comments within 5 minutes per requirement section 11.2). URL validation ensures only HTTP/HTTPS protocols are allowed in comment text links, protecting users from malicious links.\n\nThis operation integrates with the voting system by enabling immediate vote capability on the new comment, the karma system by preparing the comment for potential karma earning, and the content moderation system by making the comment reportable if it violates rules. The comment appears in the author's comment history on their profile and contributes to the overall discussion thread structure.","parameters":[],"requestBody":{"description":"Comment creation data including content text, parent post, and optional parent comment for threaded replies","typeName":"IRedditLikeComment.ICreate"},"responseBody":{"description":"Successfully created comment with assigned identifier, vote score, depth level, and metadata","typeName":"IRedditLikeComment"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/admin/posts","method":"post"},"description":"Post must be created before comments can be added to it. The reddit_like_post_id field in the comment references a post that must exist in the reddit_like_posts table."}]},{"specification":"This operation retrieves the complete details of a specific comment including its content, author information, vote score, threading metadata, and current status. It operates on the reddit_like_comments table and provides full comment information necessary for displaying the comment in its thread context, showing author karma, and enabling user interactions (voting, replying, reporting). The operation supports both top-level comments and nested replies at any depth level.","path":"/redditLike/comments/{commentId}","method":"get","summary":"Retrieve detailed information for a specific comment by its identifier","description":"Retrieve comprehensive information about a specific comment identified by its unique comment ID. This operation queries the reddit_like_comments table and returns complete comment details including the comment text content, author information, vote score, nesting depth, edit status, and timestamps.\n\nThis operation is accessible to all users including unauthenticated guests, as comment viewing is a public read operation per business requirements. The response includes the comment's content_text field with preserved markdown formatting, vote_score showing the net upvotes minus downvotes, depth indicating the nesting level in the thread (0 for top-level comments), and edited flag showing whether the comment has been modified since creation.\n\nThe operation returns author information including username and karma scores to provide reputation context for the comment. For deleted comments, the system returns the comment structure with content replaced by '[deleted]' placeholder per business requirement section 5.6, preserving thread integrity while hiding removed content. Comments removed by moderators display '[removed by moderator]' instead.\n\nSecurity and privacy considerations include respecting soft-delete status (deleted_at timestamp) to hide content appropriately, checking moderation removal status to display appropriate removal messages, and providing the complete parent-child relationship data to enable proper thread rendering. The response includes the parent comment ID for nested replies and the post ID for thread context.\n\nThis operation integrates with the voting system by providing current vote scores, the user profile system by including author karma and profile links, and the comment threading system by providing depth and parent relationship data for proper hierarchical display. The comment can be accessed via permalink URLs for direct linking and sharing as specified in business requirement section 8.1.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete comment information including content, author, votes, threading metadata, and timestamps","typeName":"IRedditLikeComment"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/admin/comments","method":"post"},"description":"Comment must be created before it can be retrieved. The commentId path parameter references a comment that must exist in the reddit_like_comments table."}]},{"specification":"This operation allows authenticated members to update their own comment content. It operates on the reddit_like_comments table from the Prisma schema. The operation validates that the authenticated user is the author of the comment and that the edit is occurring within the allowed time window (24 hours per requirements document 06-comment-system.md section 5.1). The comment text can be modified while preserving the comment's position in the thread hierarchy, vote score, and metadata. When a comment is successfully edited, the system updates the comment text, sets the 'edited' flag to true, and records the edit timestamp in updated_at.","path":"/redditLike/member/comments/{commentId}","method":"put","summary":"Update comment content by the comment author within 24-hour edit window","description":"This operation enables authenticated members to modify the text content of their own comments within 24 hours of creation, as specified in the comment system requirements document section 5.1. The endpoint validates comment ownership, ensuring only the original author can edit their content, and enforces the time-based editing window to maintain discussion integrity.\n\nThe operation interacts with the reddit_like_comments table in the Prisma schema, updating the content_text field while preserving all other comment attributes including vote scores, nesting relationships, and creation timestamps. When an edit is successfully applied, the system sets the 'edited' boolean flag to true and updates the updated_at timestamp to reflect the modification time.\n\nSecurity considerations include verifying the authenticated user matches the comment's reddit_like_member_id foreign key, preventing unauthorized edits of other users' comments. The system also validates that deleted_at is null, preventing edits to comments that have been soft-deleted by the author or removed by moderators.\n\nValidation rules require the edited comment text to comply with the same constraints as new comments: minimum 1 character, maximum 10,000 characters, no empty or whitespace-only content. The system rejects edits that would result in empty comments or exceed length limits, maintaining content quality standards.\n\nThe edited comment maintains its position in the thread hierarchy, preserving the parent-child relationship defined by reddit_like_parent_comment_id and depth fields. Vote scores accumulated before the edit remain intact, ensuring karma calculations reflect community assessment of the original content while allowing authors to clarify or improve their contributions.\n\nThis operation integrates with the comment display system to show an 'edited X time ago' indicator next to modified comments, providing transparency to readers that the content has been changed from its original form. The edit timestamp displayed to users is calculated from the updated_at field.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated comment text content within character limits","typeName":"IRedditLikeComment.IUpdate"},"responseBody":{"description":"The successfully updated comment with edited flag and new timestamp","typeName":"IRedditLikeComment"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be updated"}]},{"specification":"This operation allows authenticated members to permanently remove their own comments from the platform. It operates on the reddit_like_comments table from the Prisma schema using soft deletion by setting the deleted_at timestamp. The operation validates that the authenticated user is the comment author before allowing deletion. When a comment is deleted, the system preserves the comment's structural position in the thread hierarchy to maintain conversation continuity, especially when the deleted comment has child replies. The comment text is replaced with '[deleted]' in the display layer while the database record remains for referential integrity.","path":"/redditLike/member/comments/{commentId}","method":"delete","summary":"Remove comment by the comment author with soft deletion","description":"This operation enables authenticated members to remove their own comments from public view through a soft deletion mechanism, as specified in the comment system requirements document section 5.4. The endpoint validates comment ownership, ensuring only the original author can initiate deletion of their content, preventing unauthorized removal of other users' comments.\n\nThe operation performs a soft delete on the reddit_like_comments table by setting the deleted_at timestamp field to the current time while preserving all other comment data in the database. This soft deletion approach is necessary to maintain thread structure and conversation continuity, particularly when the deleted comment has child replies nested beneath it in the comment tree.\n\nSecurity considerations include verifying the authenticated user's ID matches the comment's reddit_like_member_id foreign key reference, implementing role-based access control to ensure only the comment author can delete their content. The system prevents deletion attempts on comments that are already soft-deleted (deleted_at is not null) to avoid redundant operations.\n\nAccording to the comment system requirements section 5.7, when a parent comment is deleted, all child replies remain visible and properly threaded. The soft-deleted parent comment displays as '[deleted]' with the author username removed, but the comment's position in the hierarchy is preserved through the reddit_like_parent_comment_id relationship. This ensures nested conversations remain coherent even when intermediate comments are removed.\n\nThe comment's vote score and accumulated karma remain intact after deletion per the karma system requirements section 4.4, which explicitly states that content deletion does not reverse earned or lost karma. This prevents users from manipulating their reputation by deleting poorly-received comments.\n\nWhen a comment with no child replies is deleted, the system may choose to completely hide it from the UI, but the database record persists with the deleted_at timestamp for audit trail purposes and to support potential future recovery mechanisms. The deletion is immediate, taking effect within 1 second, and the user receives confirmation of the successful deletion.\n\nThis operation integrates with the comment display system to render deleted comments appropriately: showing '[deleted]' text for author-deleted comments versus '[removed by moderator]' for moderator removals, allowing users to distinguish between self-deletions and moderation actions.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be deleted"}]},{"specification":"This operation retrieves a paginated and filtered list of comments for a specific post, supporting advanced search, filtering, and sorting capabilities. The operation enables users to view comment discussions on posts with multiple sorting algorithms (best, top, new, controversial, old) and supports pagination for posts with large comment volumes. This operation is essential for the comment display system and integrates with the voting system to provide vote scores for each comment. The endpoint serves both authenticated members and guest users, making comment discussions publicly accessible on public posts.","path":"/redditLike/posts/{postId}/comments","method":"patch","summary":"Retrieve paginated and sorted list of comments for a specific post","description":"Retrieve a comprehensive list of comments associated with a specific post, with support for multiple sorting algorithms and pagination. This operation implements the comment display system defined in the Comment System Requirements, enabling users to view threaded discussions on posts.\n\nThe operation supports five distinct sorting methods as specified in requirements: Best (confidence-based scoring balancing vote score and controversy), Top (highest net vote score), New (newest first chronologically), Controversial (similar upvote/downvote ratios with high volume), and Old (oldest first chronologically). Each sorting method serves different user needs, from discovering quality discussions to following conversation chronology.\n\nThis endpoint integrates with the reddit_like_comments table which stores the complete comment tree structure with parent-child relationships supporting nesting up to 10 levels deep. Comments are filtered based on the provided postId, ensuring only comments belonging to the specified post are returned. The response includes vote scores calculated from the reddit_like_comment_votes table, enabling accurate display of community assessment.\n\nPagination is implemented to handle posts with hundreds or thousands of comments efficiently. The request supports configurable page size with a default of 50 comments per page, matching the performance requirements specified in Comment System Requirements section 10.1. The operation loads comments in batches to maintain fast response times (target: under 2 seconds for initial load).\n\nThe operation is accessible to all user roles including guests (unauthenticated visitors), members, moderators, and administrators. Public posts display their comment threads to all users, promoting open discussion and content discovery. Authentication is not required for reading comments, only for creating comments or voting on them.\n\nSecurity considerations include validation of the postId parameter to ensure it references an existing post, handling of deleted or removed comments (displaying placeholder text while preserving thread structure), and appropriate filtering of comments based on moderation status. The response includes edit indicators for modified comments and properly handles the soft-delete pattern where deleted comments show [deleted] while maintaining their position in the conversation tree.\n\nThis operation is frequently used in conjunction with the post detail retrieval endpoint (GET /posts/{postId}) to provide the complete post viewing experience. When users navigate to a post, they typically view the post content first, then load the comment discussion using this endpoint with their preferred sorting method.","parameters":[{"name":"postId","description":"Unique identifier of the post whose comments are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, sorting preferences, and pagination parameters for filtering and organizing comments","typeName":"IRedditLikeComment.IRequest"},"responseBody":{"description":"Paginated list of comments matching the search criteria with vote scores and threading information","typeName":"IPageIRedditLikeComment"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before comments can be retrieved for it"}]},{"specification":"This operation creates a new comment on a specific post, enabling authenticated members to participate in discussions and contribute to community conversations. The operation implements the core comment creation workflow defined in Comment System Requirements section 2, supporting the fundamental engagement mechanism that transforms posts into interactive discussions. Comments can be top-level (direct replies to the post) or nested replies to other comments, creating threaded conversation trees. The operation validates comment content, enforces character limits (1-10,000 characters), checks user authentication and permissions, and initializes the comment with zero votes. Upon successful creation, the operation immediately awards comment karma to the author based on future voting activity, integrates the comment into the post's comment thread with appropriate depth tracking, and returns the newly created comment to the client.","path":"/redditLike/member/posts/{postId}/comments","method":"post","summary":"Create a new comment on a specific post as an authenticated member","description":"Create a new comment on a specific post, enabling authenticated members to participate in discussions and engage with community content. This operation is fundamental to the platform's engagement model, transforming static posts into dynamic conversations through user-generated commentary.\n\nThe operation implements the comment creation workflow specified in Comment System Requirements section 2. When a member submits a comment, the system validates the content meets requirements (1-10,000 characters, non-empty after trimming whitespace), verifies the user is authenticated, confirms the target post exists and is not deleted or locked, and creates the comment record in the reddit_like_comments table with appropriate metadata including author, post reference, content text, depth level, and initialization timestamps.\n\nAuthentication is strictly required for comment creation. Guest users (unauthenticated visitors) cannot create comments and must register or log in to participate. When a guest attempts to comment, they are prompted to authenticate per requirements section 2.1. This ensures all comments are attributed to registered users, enabling reputation tracking through karma and maintaining accountability for community discussions.\n\nThe operation supports both top-level comments (direct replies to posts) and nested replies (replies to other comments), managed through the parent_comment_id field in the request body. When creating a top-level comment, the parent_comment_id is omitted or null. When creating a nested reply, the parent_comment_id references the comment being replied to, and the system calculates the appropriate depth level (parent depth + 1). The system enforces a maximum nesting depth of 10 levels per requirements section 4.1, preventing replies to comments at the maximum depth.\n\nUpon successful comment creation, the system performs several integrated actions: initializes vote score to zero, enables immediate voting by other users, increments the parent post's comment count (denormalized in mv_reddit_like_post_metrics for performance), awards initial comment karma of zero to the author (karma increases as votes are received), positions the comment in the thread hierarchy based on its parent relationship, and makes the comment immediately visible in comment listings with the selected sorting algorithm.\n\nValidation rules enforced include: verifying the target post exists and is accessible, confirming the post is not locked by moderators (which prevents new comments), checking the user is not banned from the community where the post exists, validating comment text is between 1 and 10,000 characters after trimming whitespace, sanitizing content to prevent XSS attacks and injection vulnerabilities, and enforcing rate limits (maximum 10 comments per minute per requirements section 11.2) to prevent spam.\n\nSecurity considerations include authentication token validation, session verification, CSRF protection for state-changing operations, HTML/script tag sanitization to prevent malicious content injection, IP address tracking for rate limiting and abuse detection, and URL validation for any links included in comment text. The operation logs all comment creation events for audit and analytics purposes.\n\nThe newly created comment is immediately available for other users to view, vote on, and reply to, creating real-time engagement dynamics. The comment appears in the post's comment thread according to the current sorting method (Best, Top, New, Controversial, Old), and users can interact with it through voting, replying, or reporting if it violates rules. The comment author can edit their comment within 24 hours per requirements section 5.1 and delete it at any time per requirements section 5.4.\n\nError handling includes validation errors (empty comment, exceeds character limit), authentication errors (user not logged in, session expired), permission errors (user banned from community, post is locked), and system errors (database failures, network timeouts). All errors provide clear user-facing messages explaining the issue and how to resolve it, with detailed error information logged for troubleshooting.","parameters":[{"name":"postId","description":"Unique identifier of the post on which the comment is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation data including the text content and optional parent comment reference for nested replies","typeName":"IRedditLikeComment.ICreate"},"responseBody":{"description":"Newly created comment with metadata including author, timestamps, vote score, and thread position","typeName":"IRedditLikeComment"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before comments can be added to it"}]},{"specification":"This operation retrieves a paginated list of replies to a specific comment with advanced filtering, searching, and sorting capabilities. It operates on the reddit_like_comments table from the Prisma schema, filtering comments where reddit_like_parent_comment_id matches the specified commentId parameter. The operation supports complex queries to find nested replies based on various criteria including content text search, vote score ranges, creation date ranges, and author filtering. This enables users to browse and discover reply discussions beneath a parent comment efficiently.","path":"/redditLike/comments/{commentId}/replies","method":"patch","summary":"Search and retrieve filtered, paginated list of replies to a specific comment","description":"Retrieve a filtered and paginated list of comment replies nested under a specific parent comment. This operation provides advanced search capabilities for finding replies based on multiple criteria including partial text matching, vote score filtering, author identification, and creation date ranges.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Users can sort replies by creation date (chronological or reverse), vote score (top-voted first or controversial), or using the specialized comment sorting algorithms (best, top, new, controversial) as defined in the comment system requirements. This flexibility enables different browsing patterns from discovering newest replies to finding most popular or most controversial responses.\n\nSecurity considerations include rate limiting for search operations to prevent abuse, appropriate filtering based on the requesting user's authorization level and community ban status, and proper handling of deleted or removed comments. Guest users can view replies in public communities, while members, moderators, and administrators have full access based on their respective permission levels. The operation respects soft-deleted comments by hiding content while preserving thread structure as specified in the comment system requirements section 5.7.\n\nThis operation integrates with the reddit_like_comments table as defined in the Prisma schema, incorporating all available comment fields including content_text, vote_score, depth, edited status, and hierarchical relationships. The response includes reply information optimized for threaded discussion displays, with options to include additional metadata such as author karma, vote counts, and edit timestamps based on the requesting user's needs and authorization level.\n\nThe operation enforces the maximum comment nesting depth of 10 levels as specified in the comment threading requirements. When the parent comment is at or near maximum depth, the operation may return fewer or no replies based on the depth limitation rules defined in section 4.1 of the Comment System Requirements.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment whose replies are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, and pagination parameters for retrieving comment replies","typeName":"IRedditLikeComment.IReplyRequest"},"responseBody":{"description":"Paginated list of comment reply information matching search criteria with threading metadata","typeName":"IPageIRedditLikeComment.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation creates a new reply comment nested under an existing parent comment within the threaded discussion system. It operates on the reddit_like_comments table from the Prisma schema, creating a new comment record with the reddit_like_parent_comment_id field set to the specified commentId parameter. The operation enforces the maximum nesting depth of 10 levels, validates comment content requirements (1-10,000 characters), and establishes the parent-child relationship for threaded conversation structures as defined in the comment system requirements.","path":"/redditLike/member/comments/{commentId}/replies","method":"post","summary":"Create a new reply to a specific comment in the threaded discussion","description":"Create a new nested reply comment under an existing parent comment, establishing a parent-child relationship in the threaded discussion structure. This operation enables users to participate in multi-level conversations by responding directly to specific comments rather than only replying at the top level to posts.\n\nThe operation validates that the parent comment exists, is not deleted, and is not locked by moderators before allowing reply creation. It enforces the maximum comment nesting depth of 10 levels as specified in section 4.1 of the Comment System Requirements - if the parent comment is already at depth 10, the system denies the reply creation and displays an error message indicating maximum depth has been reached.\n\nContent validation ensures the reply text meets comment system requirements: minimum 1 character, maximum 10,000 characters, with proper sanitization to prevent XSS attacks as specified in section 11.1. The system automatically detects and converts URLs within the reply text into clickable links, preserves line breaks and paragraph spacing, and validates against spam patterns including duplicate content detection and excessive posting rate limits (10 comments per minute per section 11.2).\n\nSecurity and authorization checks verify the user is authenticated as a member, moderator, or administrator before allowing reply creation. The operation denies access to guest users and prompts them to log in per section 2.1. Additionally, the system checks if the user is banned from the community where the parent comment exists - community-banned users cannot create replies in that community per the moderation requirements.\n\nUpon successful reply creation, the operation increments the parent post's comment count, triggers karma calculation for the reply author based on future voting activity, and sends notifications to the parent comment author alerting them of the new reply. The system calculates the depth level by incrementing the parent comment's depth by 1 and stores this in the depth field for proper hierarchical rendering. The reply is immediately available for voting and further nested replies (if depth allows), and appears in the comment thread using the selected sorting algorithm (best, top, new, controversial).\n\nThis operation integrates with the voting system by initializing the new reply with zero votes, making it eligible for upvotes and downvotes immediately. It also integrates with the karma system - as votes are cast on this reply, the author's comment karma will be updated accordingly per the karma calculation rules. The reply inherits the same moderation and reporting capabilities as top-level comments, enabling community members to report inappropriate replies following the content moderation workflow.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment to which this reply is being added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply comment content and metadata for creating a nested response to the parent comment","typeName":"IRedditLikeComment.IReplyCreate"},"responseBody":{"description":"Newly created reply comment with complete metadata including hierarchy information and vote initialization","typeName":"IRedditLikeComment"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation creates a new reply comment nested under an existing parent comment within the threaded discussion system. It operates on the reddit_like_comments table from the Prisma schema, creating a new comment record with the reddit_like_parent_comment_id field set to the specified commentId parameter. The operation enforces the maximum nesting depth of 10 levels, validates comment content requirements (1-10,000 characters), and establishes the parent-child relationship for threaded conversation structures as defined in the comment system requirements.","path":"/redditLike/moderator/comments/{commentId}/replies","method":"post","summary":"Create a new reply to a specific comment in the threaded discussion","description":"Create a new nested reply comment under an existing parent comment, establishing a parent-child relationship in the threaded discussion structure. This operation enables users to participate in multi-level conversations by responding directly to specific comments rather than only replying at the top level to posts.\n\nThe operation validates that the parent comment exists, is not deleted, and is not locked by moderators before allowing reply creation. It enforces the maximum comment nesting depth of 10 levels as specified in section 4.1 of the Comment System Requirements - if the parent comment is already at depth 10, the system denies the reply creation and displays an error message indicating maximum depth has been reached.\n\nContent validation ensures the reply text meets comment system requirements: minimum 1 character, maximum 10,000 characters, with proper sanitization to prevent XSS attacks as specified in section 11.1. The system automatically detects and converts URLs within the reply text into clickable links, preserves line breaks and paragraph spacing, and validates against spam patterns including duplicate content detection and excessive posting rate limits (10 comments per minute per section 11.2).\n\nSecurity and authorization checks verify the user is authenticated as a member, moderator, or administrator before allowing reply creation. The operation denies access to guest users and prompts them to log in per section 2.1. Additionally, the system checks if the user is banned from the community where the parent comment exists - community-banned users cannot create replies in that community per the moderation requirements.\n\nUpon successful reply creation, the operation increments the parent post's comment count, triggers karma calculation for the reply author based on future voting activity, and sends notifications to the parent comment author alerting them of the new reply. The system calculates the depth level by incrementing the parent comment's depth by 1 and stores this in the depth field for proper hierarchical rendering. The reply is immediately available for voting and further nested replies (if depth allows), and appears in the comment thread using the selected sorting algorithm (best, top, new, controversial).\n\nThis operation integrates with the voting system by initializing the new reply with zero votes, making it eligible for upvotes and downvotes immediately. It also integrates with the karma system - as votes are cast on this reply, the author's comment karma will be updated accordingly per the karma calculation rules. The reply inherits the same moderation and reporting capabilities as top-level comments, enabling community members to report inappropriate replies following the content moderation workflow.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment to which this reply is being added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply comment content and metadata for creating a nested response to the parent comment","typeName":"IRedditLikeComment.IReplyCreate"},"responseBody":{"description":"Newly created reply comment with complete metadata including hierarchy information and vote initialization","typeName":"IRedditLikeComment"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/comments","method":"post"},"description":"Parent comment must exist before a nested reply can be created under it"}]},{"specification":"This operation creates a new reply comment nested under an existing parent comment within the threaded discussion system. It operates on the reddit_like_comments table from the Prisma schema, creating a new comment record with the reddit_like_parent_comment_id field set to the specified commentId parameter. The operation enforces the maximum nesting depth of 10 levels, validates comment content requirements (1-10,000 characters), and establishes the parent-child relationship for threaded conversation structures as defined in the comment system requirements.","path":"/redditLike/admin/comments/{commentId}/replies","method":"post","summary":"Create a new reply to a specific comment in the threaded discussion","description":"Create a new nested reply comment under an existing parent comment, establishing a parent-child relationship in the threaded discussion structure. This operation enables users to participate in multi-level conversations by responding directly to specific comments rather than only replying at the top level to posts.\n\nThe operation validates that the parent comment exists, is not deleted, and is not locked by moderators before allowing reply creation. It enforces the maximum comment nesting depth of 10 levels as specified in section 4.1 of the Comment System Requirements - if the parent comment is already at depth 10, the system denies the reply creation and displays an error message indicating maximum depth has been reached.\n\nContent validation ensures the reply text meets comment system requirements: minimum 1 character, maximum 10,000 characters, with proper sanitization to prevent XSS attacks as specified in section 11.1. The system automatically detects and converts URLs within the reply text into clickable links, preserves line breaks and paragraph spacing, and validates against spam patterns including duplicate content detection and excessive posting rate limits (10 comments per minute per section 11.2).\n\nSecurity and authorization checks verify the user is authenticated as a member, moderator, or administrator before allowing reply creation. The operation denies access to guest users and prompts them to log in per section 2.1. Additionally, the system checks if the user is banned from the community where the parent comment exists - community-banned users cannot create replies in that community per the moderation requirements.\n\nUpon successful reply creation, the operation increments the parent post's comment count, triggers karma calculation for the reply author based on future voting activity, and sends notifications to the parent comment author alerting them of the new reply. The system calculates the depth level by incrementing the parent comment's depth by 1 and stores this in the depth field for proper hierarchical rendering. The reply is immediately available for voting and further nested replies (if depth allows), and appears in the comment thread using the selected sorting algorithm (best, top, new, controversial).\n\nThis operation integrates with the voting system by initializing the new reply with zero votes, making it eligible for upvotes and downvotes immediately. It also integrates with the karma system - as votes are cast on this reply, the author's comment karma will be updated accordingly per the karma calculation rules. The reply inherits the same moderation and reporting capabilities as top-level comments, enabling community members to report inappropriate replies following the content moderation workflow.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment to which this reply is being added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply comment content and metadata for creating a nested response to the parent comment","typeName":"IRedditLikeComment.IReplyCreate"},"responseBody":{"description":"Newly created reply comment with complete metadata including hierarchy information and vote initialization","typeName":"IRedditLikeComment"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/admin/comments","method":"post"},"description":"Parent comment must exist before a nested reply can be created under it"}]},{"specification":"This operation allows authenticated members to cast an upvote or downvote on a specific post identified by its unique post ID. The operation is based on the reddit_like_post_votes table in the Prisma schema, which tracks individual user votes on posts. Each member can have exactly one vote (upvote or downvote) per post, enforced by a unique constraint on (reddit_like_member_id, reddit_like_post_id). The operation enables democratic content curation where community members signal content quality through voting. When a vote is successfully registered, the system updates the post's vote score (calculated from upvotes minus downvotes), updates the post author's karma in real-time, and tracks anti-manipulation data including IP address and user agent. The vote value is +1 for upvotes (positive endorsement) or -1 for downvotes (negative signal). Votes contribute to content ranking algorithms (hot, top, controversial) and directly impact the author's post karma. If a member already has a vote on the post, submitting a new vote replaces the previous one, with appropriate karma adjustments. The operation enforces anti-self-voting rules preventing users from voting on their own posts, and implements rate limiting (100 votes per minute maximum) to prevent abuse. Vote weights may be applied based on account trust factors to combat manipulation.","path":"/redditLike/member/posts/{postId}/votes","method":"post","summary":"Cast or change vote (upvote or downvote) on a specific post","description":"This operation enables authenticated members to participate in democratic content curation by casting upvotes or downvotes on posts. The voting system is the cornerstone of content quality signaling and community-driven content ranking on the platform.\n\nWhen a member submits a vote, the system records it in the reddit_like_post_votes table, which maintains the relationship between voters, posts, and vote values. Each member can maintain exactly one vote state per post (upvote, downvote, or neutral), enforced through a unique database constraint. If the member has already voted on the post, submitting a new vote replaces the previous vote automatically.\n\nVote values are strictly defined: +1 represents an upvote (positive endorsement indicating the content is valuable, relevant, or high-quality), while -1 represents a downvote (negative signal indicating the content is low-quality, irrelevant, or violates community standards). These vote values directly impact the post's net vote score (upvotes minus downvotes) and contribute to the post author's karma score in real-time.\n\nThe operation enforces critical business rules including self-voting prevention (members cannot vote on their own posts), rate limiting (maximum 100 votes per minute to prevent spam voting), and vote manipulation detection through IP address and user agent tracking. Vote weights may be applied based on account trust factors such as account age and voting history patterns to combat coordinated manipulation.\n\nSuccessful vote submission triggers multiple system updates: the post's vote score is recalculated, the post author's karma is adjusted (increasing by 1 for upvotes, decreasing by 1 for downvotes), and content ranking algorithms are updated to reflect the new vote. Vote changes (switching from upvote to downvote or vice versa) result in a net 2-point karma adjustment for the content author.\n\nThis operation integrates with the karma system defined in reddit_like_user_karma and reddit_like_karma_history tables, the content sorting algorithms that use vote scores for ranking, and the anti-manipulation systems that monitor voting patterns for abuse detection.","parameters":[{"name":"postId","description":"Unique identifier of the post to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote submission data specifying the vote direction (upvote or downvote)","typeName":"IRedditLikePostVote.ICreate"},"responseBody":{"description":"Updated vote information including the vote value and current post vote score","typeName":"IRedditLikePostVote"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before it can receive votes from members"}]},{"specification":"This operation allows authenticated members to remove their existing vote (upvote or downvote) from a specific post identified by its unique post ID. The operation returns the member to a neutral voting state on that post, effectively undoing their previous voting action. This is based on the reddit_like_post_votes table in the Prisma schema, where removing a vote means deleting the vote record for the (member, post) combination. When a vote is removed, the system recalculates the post's vote score (decrements by 1 if upvote was removed, increments by 1 if downvote was removed), adjusts the post author's karma accordingly, and updates content ranking positions. The operation is idempotent - attempting to remove a vote when no vote exists results in a no-op or appropriate error response. This functionality is essential for the voting system's flexibility, allowing members to change their minds and return to neutral status rather than being forced to maintain an opposing vote. Vote removal triggers karma adjustments for the post author and updates to sorting algorithm calculations.","path":"/redditLike/member/posts/{postId}/votes","method":"delete","summary":"Remove existing vote from a specific post to return to neutral state","description":"This operation enables authenticated members to withdraw their existing vote (upvote or downvote) from a post, returning to a neutral voting state. This is a critical component of the flexible voting system that allows members to change their minds and remove endorsements or negative signals they previously cast.\n\nWhen a member removes their vote, the system deletes the corresponding record from the reddit_like_post_votes table, effectively eliminating the vote relationship between the member and the post. This action triggers several system-wide updates to maintain data consistency and ranking accuracy.\n\nThe vote removal immediately impacts the post's net vote score: if an upvote is removed, the score decreases by 1; if a downvote is removed, the score increases by 1. Correspondingly, the post author's karma is adjusted in real-time - removing an upvote decreases the author's post karma by 1, while removing a downvote increases it by 1. These karma adjustments are logged in the reddit_like_karma_history table with the triggered_by_vote_action value set to 'vote_removed'.\n\nThe operation also affects content ranking algorithms that rely on vote scores. When a vote is removed, the post's position in hot, top, and controversial sorting views may shift based on the updated vote metrics. The hot algorithm recalculates the post's trending score considering the reduced vote velocity, while the top sorting simply reflects the new net vote count.\n\nThis operation is idempotent in behavior - if a member attempts to remove a vote when they haven't voted on the post, the system should handle this gracefully without error, either by returning success (no-op) or an appropriate informational response indicating no vote existed to remove.\n\nVote removal is unrestricted by time limits and can be performed at any point after the vote was cast, providing members complete flexibility in managing their voting history. The operation enforces standard authentication requirements and validates that the post exists and is accessible before processing the removal.","parameters":[{"name":"postId","description":"Unique identifier of the post from which to remove the vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before an existing vote can be removed from it"},{"endpoint":{"path":"/redditLike/member/posts/{postId}/votes","method":"post"},"description":"Vote must be created before it can be removed"}]},{"specification":"This operation retrieves the authenticated user's own vote status on a specific post. It operates on the reddit_like_post_votes table from the Prisma schema to determine if the current user has upvoted, downvoted, or not voted on the specified post. The operation requires authentication to identify the current user and returns their voting state for the given post, enabling the UI to display the correct vote button state (upvoted, downvoted, or neutral). This is essential for showing users which content they have already voted on and maintaining vote state across page refreshes.","path":"/redditLike/member/posts/{postId}/votes/me","method":"get","summary":"Retrieve the authenticated user's vote status on a specific post","description":"Retrieve the current authenticated user's voting status for a specific post identified by the post ID path parameter. This operation queries the reddit_like_post_votes table to determine if the user has cast an upvote (+1), downvote (-1), or has not voted on this post.\n\nThis endpoint is critical for maintaining accurate vote button states in the user interface. When a user views a post, the client application needs to know whether to display the upvote button as active, the downvote button as active, or both buttons in their neutral state. Without this information, the UI cannot correctly reflect the user's previous voting decisions.\n\nThe operation enforces authentication requirements per the User Roles and Authentication specification, requiring a valid JWT access token to identify the requesting user. Guest users who attempt to access this endpoint will receive an authentication error prompting them to log in.\n\nThe response includes the vote direction (upvote or downvote), the timestamp when the vote was cast, and when it was last modified. If the user has not voted on the post, the operation returns a response indicating no vote exists. This allows the client to distinguish between \"never voted\" and \"vote removed\" states.\n\nSecurity considerations include verifying that the post ID exists and is accessible, preventing information leakage about non-existent posts. The operation respects soft deletion - if the post has been deleted (deleted_at is not null in reddit_like_posts table), the system still returns the user's vote status to maintain vote history integrity.\n\nThis operation integrates with the voting system requirements defined in the Voting System specification, supporting the requirement that users can view their own voting history and current vote states. It works in conjunction with vote submission endpoints to provide complete vote management functionality.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve vote status for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The authenticated user's current vote status on the specified post","typeName":"IRedditLikePostVote.IUserVoteStatus"},"authorizationRoles":["member","moderator","admin"],"name":"getMyVote","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before checking vote status on it"}]},{"specification":"This operation retrieves the authenticated user's own vote status on a specific post. It operates on the reddit_like_post_votes table from the Prisma schema to determine if the current user has upvoted, downvoted, or not voted on the specified post. The operation requires authentication to identify the current user and returns their voting state for the given post, enabling the UI to display the correct vote button state (upvoted, downvoted, or neutral). This is essential for showing users which content they have already voted on and maintaining vote state across page refreshes.","path":"/redditLike/moderator/posts/{postId}/votes/me","method":"get","summary":"Retrieve the authenticated user's vote status on a specific post","description":"Retrieve the current authenticated user's voting status for a specific post identified by the post ID path parameter. This operation queries the reddit_like_post_votes table to determine if the user has cast an upvote (+1), downvote (-1), or has not voted on this post.\n\nThis endpoint is critical for maintaining accurate vote button states in the user interface. When a user views a post, the client application needs to know whether to display the upvote button as active, the downvote button as active, or both buttons in their neutral state. Without this information, the UI cannot correctly reflect the user's previous voting decisions.\n\nThe operation enforces authentication requirements per the User Roles and Authentication specification, requiring a valid JWT access token to identify the requesting user. Guest users who attempt to access this endpoint will receive an authentication error prompting them to log in.\n\nThe response includes the vote direction (upvote or downvote), the timestamp when the vote was cast, and when it was last modified. If the user has not voted on the post, the operation returns a response indicating no vote exists. This allows the client to distinguish between \"never voted\" and \"vote removed\" states.\n\nSecurity considerations include verifying that the post ID exists and is accessible, preventing information leakage about non-existent posts. The operation respects soft deletion - if the post has been deleted (deleted_at is not null in reddit_like_posts table), the system still returns the user's vote status to maintain vote history integrity.\n\nThis operation integrates with the voting system requirements defined in the Voting System specification, supporting the requirement that users can view their own voting history and current vote states. It works in conjunction with vote submission endpoints to provide complete vote management functionality.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve vote status for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The authenticated user's current vote status on the specified post","typeName":"IRedditLikePostVote.IUserVoteStatus"},"authorizationRoles":["member","moderator","admin"],"name":"getMyVote","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/moderator/posts","method":"post"},"description":"Post must be created before checking vote status on it"}]},{"specification":"This operation retrieves the authenticated user's own vote status on a specific post. It operates on the reddit_like_post_votes table from the Prisma schema to determine if the current user has upvoted, downvoted, or not voted on the specified post. The operation requires authentication to identify the current user and returns their voting state for the given post, enabling the UI to display the correct vote button state (upvoted, downvoted, or neutral). This is essential for showing users which content they have already voted on and maintaining vote state across page refreshes.","path":"/redditLike/admin/posts/{postId}/votes/me","method":"get","summary":"Retrieve the authenticated user's vote status on a specific post","description":"Retrieve the current authenticated user's voting status for a specific post identified by the post ID path parameter. This operation queries the reddit_like_post_votes table to determine if the user has cast an upvote (+1), downvote (-1), or has not voted on this post.\n\nThis endpoint is critical for maintaining accurate vote button states in the user interface. When a user views a post, the client application needs to know whether to display the upvote button as active, the downvote button as active, or both buttons in their neutral state. Without this information, the UI cannot correctly reflect the user's previous voting decisions.\n\nThe operation enforces authentication requirements per the User Roles and Authentication specification, requiring a valid JWT access token to identify the requesting user. Guest users who attempt to access this endpoint will receive an authentication error prompting them to log in.\n\nThe response includes the vote direction (upvote or downvote), the timestamp when the vote was cast, and when it was last modified. If the user has not voted on the post, the operation returns a response indicating no vote exists. This allows the client to distinguish between \"never voted\" and \"vote removed\" states.\n\nSecurity considerations include verifying that the post ID exists and is accessible, preventing information leakage about non-existent posts. The operation respects soft deletion - if the post has been deleted (deleted_at is not null in reddit_like_posts table), the system still returns the user's vote status to maintain vote history integrity.\n\nThis operation integrates with the voting system requirements defined in the Voting System specification, supporting the requirement that users can view their own voting history and current vote states. It works in conjunction with vote submission endpoints to provide complete vote management functionality.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve vote status for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The authenticated user's current vote status on the specified post","typeName":"IRedditLikePostVote.IUserVoteStatus"},"authorizationRoles":["member","moderator","admin"],"name":"getMyVote","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/posts","method":"post"},"description":"Post must be created before retrieving vote status on it"}]},{"specification":"This operation allows authenticated members to cast a vote (upvote or downvote) on a specific comment. It operates on the reddit_like_comment_votes table from the Prisma schema, creating or updating the user's vote record for the specified comment. The operation enforces the voting system business rules including self-voting prevention, vote state transitions, and vote score calculations. It supports the complete voting workflow including initial votes, vote changes, and vote removal as defined in the Voting System Requirements.","path":"/redditLike/member/comments/{commentId}/votes","method":"post","summary":"Cast or modify a vote on a specific comment","description":"Submit a vote on a specific comment identified by the comment ID path parameter. This operation enables authenticated users to upvote (positive endorsement) or downvote (negative signal) comments as part of the democratic content curation system defined in the Voting System Requirements.\n\nThe operation accepts a request body specifying the vote direction: upvote (+1) or downvote (-1). When a user submits a vote, the system processes it according to the vote state transition rules defined in the Voting System specification. If the user has not previously voted on this comment, a new vote record is created in the reddit_like_comment_votes table. If the user has previously voted, the operation updates the existing vote record, handling all vote change scenarios: upvote to downvote, downvote to upvote, or vote removal.\n\nVote processing includes several critical business rules enforced at the application level. The system prevents self-voting by validating that the authenticated user is not the comment author. The operation updates the comment's vote_score field in the reddit_like_comments table, incrementing by 1 for upvotes and decrementing by 1 for downvotes. Vote changes result in score adjustments of +2 or -2 to account for both removing the previous vote and applying the new vote.\n\nThis operation integrates with the karma system defined in the Karma System Requirements. When a comment receives a vote, the comment author's comment_karma is updated in real-time, affecting their total karma score displayed on their profile. The system records karma changes in the reddit_like_karma_history table for audit trail and transparency.\n\nAnti-manipulation measures defined in the Voting System Requirements section 8 are enforced during vote processing. The operation records the voter's IP address and user agent in the reddit_like_comment_votes table for detecting coordinated voting, multiple account abuse, and vote brigading patterns. The system may apply vote weight adjustments based on account trust factors, with new accounts or suspicious voting patterns receiving reduced vote impact.\n\nSecurity considerations include validating that the comment exists and is accessible, preventing votes on deleted comments (where deleted_at is not null in reddit_like_comments table), and enforcing rate limiting to prevent vote manipulation. The operation completes within 2 seconds per performance requirements, with optimistic UI updates providing immediate visual feedback while background processing completes.\n\nThe response includes the updated vote state, current vote score for the comment, and confirmation of successful vote registration. This enables the client application to immediately update the UI showing the new vote button states and comment score without requiring a page refresh.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote direction and optional metadata for voting on the comment","typeName":"IRedditLikeCommentVote.ICreate"},"responseBody":{"description":"Confirmation of vote submission with updated vote state and comment score","typeName":"IRedditLikeCommentVote"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must be created before it can be voted on"}]},{"specification":"This operation allows authenticated members to cast a vote (upvote or downvote) on a specific comment. It operates on the reddit_like_comment_votes table from the Prisma schema, creating or updating the user's vote record for the specified comment. The operation enforces the voting system business rules including self-voting prevention, vote state transitions, and vote score calculations. It supports the complete voting workflow including initial votes, vote changes, and vote removal as defined in the Voting System Requirements.","path":"/redditLike/moderator/comments/{commentId}/votes","method":"post","summary":"Cast or modify a vote on a specific comment","description":"Submit a vote on a specific comment identified by the comment ID path parameter. This operation enables authenticated users to upvote (positive endorsement) or downvote (negative signal) comments as part of the democratic content curation system defined in the Voting System Requirements.\n\nThe operation accepts a request body specifying the vote direction: upvote (+1) or downvote (-1). When a user submits a vote, the system processes it according to the vote state transition rules defined in the Voting System specification. If the user has not previously voted on this comment, a new vote record is created in the reddit_like_comment_votes table. If the user has previously voted, the operation updates the existing vote record, handling all vote change scenarios: upvote to downvote, downvote to upvote, or vote removal.\n\nVote processing includes several critical business rules enforced at the application level. The system prevents self-voting by validating that the authenticated user is not the comment author. The operation updates the comment's vote_score field in the reddit_like_comments table, incrementing by 1 for upvotes and decrementing by 1 for downvotes. Vote changes result in score adjustments of +2 or -2 to account for both removing the previous vote and applying the new vote.\n\nThis operation integrates with the karma system defined in the Karma System Requirements. When a comment receives a vote, the comment author's comment_karma is updated in real-time, affecting their total karma score displayed on their profile. The system records karma changes in the reddit_like_karma_history table for audit trail and transparency.\n\nAnti-manipulation measures defined in the Voting System Requirements section 8 are enforced during vote processing. The operation records the voter's IP address and user agent in the reddit_like_comment_votes table for detecting coordinated voting, multiple account abuse, and vote brigading patterns. The system may apply vote weight adjustments based on account trust factors, with new accounts or suspicious voting patterns receiving reduced vote impact.\n\nSecurity considerations include validating that the comment exists and is accessible, preventing votes on deleted comments (where deleted_at is not null in reddit_like_comments table), and enforcing rate limiting to prevent vote manipulation. The operation completes within 2 seconds per performance requirements, with optimistic UI updates providing immediate visual feedback while background processing completes.\n\nThe response includes the updated vote state, current vote score for the comment, and confirmation of successful vote registration. This enables the client application to immediately update the UI showing the new vote button states and comment score without requiring a page refresh.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote direction and optional metadata for voting on the comment","typeName":"IRedditLikeCommentVote.ICreate"},"responseBody":{"description":"Confirmation of vote submission with updated vote state and comment score","typeName":"IRedditLikeCommentVote"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/moderator/comments","method":"post"},"description":"Comment must exist before it can receive votes. The commentId path parameter requires a valid comment to be created first."}]},{"specification":"This operation allows authenticated members to cast a vote (upvote or downvote) on a specific comment. It operates on the reddit_like_comment_votes table from the Prisma schema, creating or updating the user's vote record for the specified comment. The operation enforces the voting system business rules including self-voting prevention, vote state transitions, and vote score calculations. It supports the complete voting workflow including initial votes, vote changes, and vote removal as defined in the Voting System Requirements.","path":"/redditLike/admin/comments/{commentId}/votes","method":"post","summary":"Cast or modify a vote on a specific comment","description":"Submit a vote on a specific comment identified by the comment ID path parameter. This operation enables authenticated users to upvote (positive endorsement) or downvote (negative signal) comments as part of the democratic content curation system defined in the Voting System Requirements.\n\nThe operation accepts a request body specifying the vote direction: upvote (+1) or downvote (-1). When a user submits a vote, the system processes it according to the vote state transition rules defined in the Voting System specification. If the user has not previously voted on this comment, a new vote record is created in the reddit_like_comment_votes table. If the user has previously voted, the operation updates the existing vote record, handling all vote change scenarios: upvote to downvote, downvote to upvote, or vote removal.\n\nVote processing includes several critical business rules enforced at the application level. The system prevents self-voting by validating that the authenticated user is not the comment author. The operation updates the comment's vote_score field in the reddit_like_comments table, incrementing by 1 for upvotes and decrementing by 1 for downvotes. Vote changes result in score adjustments of +2 or -2 to account for both removing the previous vote and applying the new vote.\n\nThis operation integrates with the karma system defined in the Karma System Requirements. When a comment receives a vote, the comment author's comment_karma is updated in real-time, affecting their total karma score displayed on their profile. The system records karma changes in the reddit_like_karma_history table for audit trail and transparency.\n\nAnti-manipulation measures defined in the Voting System Requirements section 8 are enforced during vote processing. The operation records the voter's IP address and user agent in the reddit_like_comment_votes table for detecting coordinated voting, multiple account abuse, and vote brigading patterns. The system may apply vote weight adjustments based on account trust factors, with new accounts or suspicious voting patterns receiving reduced vote impact.\n\nSecurity considerations include validating that the comment exists and is accessible, preventing votes on deleted comments (where deleted_at is not null in reddit_like_comments table), and enforcing rate limiting to prevent vote manipulation. The operation completes within 2 seconds per performance requirements, with optimistic UI updates providing immediate visual feedback while background processing completes.\n\nThe response includes the updated vote state, current vote score for the comment, and confirmation of successful vote registration. This enables the client application to immediately update the UI showing the new vote button states and comment score without requiring a page refresh.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote direction and optional metadata for voting on the comment","typeName":"IRedditLikeCommentVote.ICreate"},"responseBody":{"description":"Confirmation of vote submission with updated vote state and comment score","typeName":"IRedditLikeCommentVote"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/comments","method":"post"},"description":"Comment must exist before it can receive votes. The commentId path parameter requires a valid comment to be created first."}]},{"specification":"This operation retrieves the authenticated user's own vote status on a specific post. It operates on the reddit_like_post_votes table from the Prisma schema to determine if the current user has upvoted, downvoted, or not voted on the specified post. The operation requires authentication to identify the current user and returns their voting state for the given post, enabling the UI to display the correct vote button state (upvoted, downvoted, or neutral). This is essential for showing users which content they have already voted on and maintaining vote state across page refreshes.","path":"/redditLike/posts/{postId}/votes/me","method":"get","summary":"Retrieve the authenticated user's vote status on a specific post","description":"Retrieve the current authenticated user's voting status for a specific post identified by the post ID path parameter. This operation queries the reddit_like_post_votes table to determine if the user has cast an upvote (+1), downvote (-1), or has not voted on this post.\n\nThis endpoint is critical for maintaining accurate vote button states in the user interface. When a user views a post, the client application needs to know whether to display the upvote button as active, the downvote button as active, or both buttons in their neutral state. Without this information, the UI cannot correctly reflect the user's previous voting decisions.\n\nThe operation enforces authentication requirements per the User Roles and Authentication specification, requiring a valid JWT access token to identify the requesting user. The endpoint is accessible to all authenticated users regardless of role - members, moderators, and administrators all use the same endpoint to check their vote status.\n\nThe response includes the vote direction (upvote or downvote), the timestamp when the vote was cast, and when it was last modified. If the user has not voted on the post, the operation returns a response indicating no vote exists. This allows the client to distinguish between \"never voted\" and \"vote removed\" states.\n\nSecurity considerations include verifying that the post ID exists and is accessible, preventing information leakage about non-existent posts. The operation respects soft deletion - if the post has been deleted (deleted_at is not null in reddit_like_posts table), the system still returns the user's vote status to maintain vote history integrity.\n\nThis operation integrates with the voting system requirements defined in the Voting System specification, supporting the requirement that users can view their own voting history and current vote states. It works in conjunction with vote submission endpoints to provide complete vote management functionality.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve vote status for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The authenticated user's current vote status on the specified post","typeName":"IRedditLikePostVote.IUserVoteStatus"},"authorizationRole":"member","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before retrieving vote status on it"}]},{"specification":"This operation allows authenticated members to cast a vote (upvote or downvote) on a specific comment. It operates on the reddit_like_comment_votes table from the Prisma schema, creating or updating the user's vote record for the specified comment. The operation enforces the voting system business rules including self-voting prevention, vote state transitions, and vote score calculations. It supports the complete voting workflow including initial votes, vote changes, and vote removal as defined in the Voting System Requirements.","path":"/redditLike/comments/{commentId}/votes","method":"post","summary":"Cast or modify a vote on a specific comment","description":"Submit a vote on a specific comment identified by the comment ID path parameter. This operation enables authenticated users to upvote (positive endorsement) or downvote (negative signal) comments as part of the democratic content curation system defined in the Voting System Requirements.\n\nThe operation accepts a request body specifying the vote direction: upvote (+1) or downvote (-1). When a user submits a vote, the system processes it according to the vote state transition rules defined in the Voting System specification. If the user has not previously voted on this comment, a new vote record is created in the reddit_like_comment_votes table. If the user has previously voted, the operation updates the existing vote record, handling all vote change scenarios: upvote to downvote, downvote to upvote, or vote removal.\n\nVote processing includes several critical business rules enforced at the application level. The system prevents self-voting by validating that the authenticated user is not the comment author. The operation updates the comment's vote_score field in the reddit_like_comments table, incrementing by 1 for upvotes and decrementing by 1 for downvotes. Vote changes result in score adjustments of +2 or -2 to account for both removing the previous vote and applying the new vote.\n\nThis operation integrates with the karma system defined in the Karma System Requirements. When a comment receives a vote, the comment author's comment_karma is updated in real-time, affecting their total karma score displayed on their profile. The system records karma changes in the reddit_like_karma_history table for audit trail and transparency.\n\nAnti-manipulation measures defined in the Voting System Requirements section 8 are enforced during vote processing. The operation records the voter's IP address and user agent in the reddit_like_comment_votes table for detecting coordinated voting, multiple account abuse, and vote brigading patterns. The system may apply vote weight adjustments based on account trust factors, with new accounts or suspicious voting patterns receiving reduced vote impact.\n\nSecurity considerations include validating that the comment exists and is accessible, preventing votes on deleted comments (where deleted_at is not null in reddit_like_comments table), and enforcing rate limiting to prevent vote manipulation. The operation completes within 2 seconds per performance requirements, with optimistic UI updates providing immediate visual feedback while background processing completes.\n\nThe response includes the updated vote state, current vote score for the comment, and confirmation of successful vote registration. This enables the client application to immediately update the UI showing the new vote button states and comment score without requiring a page refresh. This endpoint is accessible to all authenticated users - members, moderators, and administrators all use the same endpoint to vote on comments.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote direction and optional metadata for voting on the comment","typeName":"IRedditLikeCommentVote.ICreate"},"responseBody":{"description":"Confirmation of vote submission with updated vote state and comment score","typeName":"IRedditLikeCommentVote"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before creating comments that can be voted on"},{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must be created before it can receive votes"}]},{"specification":"This operation removes a user's vote (either upvote or downvote) on a specific comment, returning the vote to a neutral state. It operates on the reddit_like_comment_votes table from the Prisma schema and is used when a user wants to retract their previous vote on a comment. The operation validates that the authenticated user has an existing vote on the specified comment before allowing removal.","path":"/redditLike/member/comments/{commentId}/votes","method":"delete","summary":"Remove the authenticated user's vote from a specific comment","description":"Remove the authenticated user's vote (upvote or downvote) on a specific comment, returning the vote state to neutral. This operation is part of the democratic content curation system that allows users to change their voting behavior on comments.\n\nWhen a user removes their vote, the comment's vote_score field is adjusted accordingly: removing an upvote decreases the score by 1, while removing a downvote increases the score by 1. The comment author's comment karma is also adjusted to reflect the vote removal, following the karma calculation rules defined in the karma system requirements.\n\nThis operation integrates with the voting system defined in the Voting System Requirements document. Per the vote change requirements, users can transition between three vote states (upvoted, downvoted, neutral) at any time without restrictions or cooldowns. Vote removal is accomplished by clicking the same vote button that was previously activated.\n\nThe operation requires authentication and validates that the user has an existing vote record in the reddit_like_comment_votes table for the specified comment. If no vote exists, the operation returns an error indicating there is no vote to remove. The operation also enforces that users cannot remove votes from deleted or archived comments.\n\nSecurity considerations include verifying the authenticated user's session is valid and that they are the owner of the vote being removed. The operation permanently removes the vote record from the database, as the reddit_like_comment_votes table does not have a deleted_at field and only supports hard deletion. This is the correct behavior for vote removal, as votes should be completely removed rather than marked as deleted.","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose vote is being removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/comments/{commentId}/votes","method":"post"},"description":"A vote must exist on the comment before it can be removed. The user must have previously cast a vote (upvote or downvote) on this comment to perform vote removal."}]},{"specification":"This operation retrieves the authenticated user's current vote status on a specific comment. It operates on the reddit_like_comment_votes table from the Prisma schema and returns information about whether the user has upvoted, downvoted, or not voted on the specified comment. This information is used by the UI to display the correct visual state of voting buttons.","path":"/redditLike/member/comments/{commentId}/votes/me","method":"get","summary":"Retrieve the authenticated user's vote status on a specific comment","description":"Retrieve the authenticated user's current vote status on a specific comment, returning information about whether they have upvoted (+1), downvoted (-1), or not voted (null) on the comment. This operation supports the voting system's user interface requirements by providing the data needed to display correct button states.\n\nThe operation queries the reddit_like_comment_votes table to find a vote record matching both the authenticated user's member ID and the specified comment ID. If a vote record exists, it returns the vote value and timestamp. If no vote record exists, it indicates the user has not voted on this comment.\n\nThis operation is essential for maintaining accurate voting UI state across the platform. When users view comments, the system must display whether they have already voted to prevent confusion and enable vote changes. The vote status information allows the frontend to highlight the appropriate vote button (upvote or downvote) and enable the vote removal functionality.\n\nPer the voting system requirements, vote status is user-specific and anonymous to other users. Only the individual user can see their own vote status on content. This operation enforces that privacy by only returning the authenticated user's vote information.\n\nThe operation integrates with the comment display system defined in the Comment System Requirements. When rendering comment threads, the system needs to know the user's vote status for each comment to display appropriate visual indicators (highlighted upvote button, highlighted downvote button, or neutral state).\n\nSecurity considerations include verifying the authenticated user's session is valid and ensuring the comment exists and is accessible. The operation works with both active and deleted comments, as users may want to see their vote history even on removed content.","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose vote status is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The authenticated user's current vote status on the specified comment","typeName":"IRedditLikeCommentVote"},"authorizationRole":"member","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves the current karma scores for a specific user, displaying both their post karma and comment karma along with the total karma. The operation accesses the reddit_like_users table which stores denormalized karma values (post_karma and comment_karma fields) that are updated in real-time as votes are cast on the user's content. This endpoint serves user profiles, leaderboards, and any interface displaying user reputation metrics. The karma values reflect the cumulative community recognition of the user's contributions through voting activity on their posts and comments.","path":"/redditLike/users/{userId}/karma","method":"get","summary":"Retrieve current karma scores for a specific user from the reddit_like_users table","description":"Retrieve the current karma scores for a specified user, including post karma, comment karma, and total karma. This operation accesses the reddit_like_users table where karma values are stored as denormalized fields (post_karma and comment_karma) that are maintained in real-time as voting activity occurs on the user's content.\n\nKarma represents the user's reputation earned through community voting on their posts and comments. Post karma reflects votes on the user's submitted posts, while comment karma reflects votes on their comments and replies. The total karma is the sum of both values. Per business requirements, karma can be negative if a user's content receives more downvotes than upvotes, and there is no minimum limit.\n\nThis endpoint is used throughout the platform wherever user reputation needs to be displayed, including user profiles, post/comment author displays, leaderboards, and analytics interfaces. The karma values returned represent the current state of the user's reputation, calculated from all historical voting activity on their content.\n\nSecurity considerations include respecting user privacy settings - if a user has set show_karma_publicly to false in their profile, the system should handle this appropriately based on the requesting user's permissions. However, karma is generally considered public information visible to all users including guests per the karma system requirements.\n\nThe operation returns only the current karma state. For detailed karma change history and audit trails, use the karma history endpoint instead. The userId path parameter must reference an existing user in the reddit_like_users table.","parameters":[{"name":"userId","description":"Unique identifier of the user whose karma scores are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current karma scores including post karma, comment karma, and total karma","typeName":"IRedditLikeUser.IKarma"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of karma change events from the reddit_like_karma_history table for a specific user. The karma history provides a complete audit trail of how a user's reputation evolved over time, showing individual karma modifications triggered by voting activity on their posts and comments. This endpoint supports searching and filtering by karma type, date ranges, and change amounts to help users understand their reputation progression and troubleshoot karma calculations. The operation returns historical records retained for a minimum of 12 months per business requirements.","path":"/redditLike/member/users/{userId}/karma/history","method":"patch","summary":"Search and retrieve paginated karma change history for a specific user from reddit_like_karma_history table","description":"Retrieve a filtered and paginated list of karma change events for a specified user from the reddit_like_karma_history table. This operation provides complete transparency into how a user's reputation has evolved over time by showing individual karma modifications triggered by voting activity on their posts and comments.\n\nEach karma history record represents a single karma change event, capturing the karma type affected (post or comment), the amount of change (positive or negative), the vote action that triggered the change (upvote added, downvote added, vote removed, vote changed), and references to the specific post or comment that was voted on. This audit trail enables users to understand exactly how their karma scores were calculated and helps troubleshoot any discrepancies.\n\nThe endpoint supports comprehensive filtering and searching capabilities including filtering by karma type (post karma vs comment karma changes), date range filtering to view karma changes within specific time periods, change amount filtering to find significant karma events, and vote action filtering to understand what types of voting behavior affected the user's karma. Pagination is essential given that active users may have thousands of karma change events over their account lifetime.\n\nBusiness requirements specify that karma history records must be retained for a minimum of 12 months, though the system may retain records indefinitely for audit purposes. The history provides insights into karma earning patterns, helps users identify which content earned the most karma, and supports the broader transparency goals of the karma system.\n\nSecurity considerations include ensuring users can only view karma history for their own accounts unless they are administrators who may need access for support purposes. The karma history represents a complete audit trail of reputation changes and should be treated as sensitive user data requiring appropriate access controls with ownership verification to ensure the authenticated member's ID matches the userId path parameter.\n\nThis operation is typically used in user profile interfaces where users review their karma progression, analytics dashboards showing karma trends, and support tools for investigating karma calculation issues. The returned data includes all relevant metadata from the reddit_like_karma_history table including timestamps, karma types, change amounts, triggering vote actions, and references to the affected content.\n\nRelated operations that users might access in conjunction with this endpoint include retrieving current karma totals (GET /users/{userId}/karma), viewing user post history to see which posts earned karma, and accessing user comment history to understand comment karma sources. The karma history provides the detailed breakdown that complements the high-level karma totals.","parameters":[{"name":"userId","description":"Unique identifier of the user whose karma change history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering karma history events by karma type, date range, change amount, and vote action","typeName":"IRedditLikeUser.IKarmaHistoryRequest"},"responseBody":{"description":"Paginated list of karma change events showing historical karma modifications with timestamps, change amounts, and triggering vote actions","typeName":"IPageIRedditLikeKarmaHistory"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"This operation allows authenticated users to report inappropriate content (posts or comments) that violates community or platform rules. The operation creates a new content report record in the reddit_like_content_reports table, enabling the moderation workflow by routing reports to the appropriate moderator review queue. This is a core safety and governance feature that empowers users to flag harmful, abusive, or policy-violating content for moderator review. The operation validates that exactly one content type is being reported (either a post or a comment, never both), ensures the reported content exists and is not already deleted, and captures all required report information including violation categories and optional context. Reports can be submitted by both authenticated members and unauthenticated guests, with guest reports tracked via IP address and marked as anonymous. The operation supports multiple violation categories per report and automatically flags high-priority reports when the same content receives multiple reports quickly.","path":"/redditLike/content-reports","method":"post","summary":"Submit a new content report for moderation review","description":"Creates a new content report enabling users to flag posts or comments that violate community rules or platform-wide policies. This operation is fundamental to the platform's distributed moderation system, allowing all users (authenticated members and anonymous guests) to participate in content curation by reporting inappropriate content.\n\nThe report submission captures comprehensive information including the type of content being reported (post or comment), specific violation categories selected by the reporter (spam, harassment, hate speech, violence, etc.), optional additional context explaining the concern, and metadata for anti-abuse tracking. The system validates that exactly one content type is specified and that the reported content exists and is accessible.\n\nReports are routed to the appropriate moderation queue based on the community context. Community moderators review reports for their assigned communities, while platform administrators handle escalated or platform-wide policy violations. The reporter's identity is kept confidential from the content creator to encourage honest reporting without fear of retaliation.\n\nFor authenticated members, the report is associated with their user account for tracking report history and preventing abuse. For guest users, reports are marked as anonymous with IP address tracking for security purposes. The system prevents duplicate reports from the same user on the same content within 24 hours to avoid report spam.\n\nUpon successful submission, the report enters the moderation queue with pending status. If multiple users report the same content within 24 hours (5+ reports), the system automatically flags it as high priority for expedited moderator review. The operation provides immediate confirmation to the reporter while maintaining confidentiality throughout the moderation workflow.","parameters":[],"requestBody":{"description":"Content report submission data including reported content reference, violation categories, and optional context","typeName":"IRedditLikeContentReport.ICreate"},"responseBody":{"description":"Created content report record with assigned identifier and queue routing information","typeName":"IRedditLikeContentReport"},"authorizationRole":null,"authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before it can be reported for content violations"},{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must exist before it can be reported for content violations"},{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist to provide context for the content report"}]},{"specification":"This operation retrieves a filtered and paginated list of content reports for moderator and administrator review. It operates on the reddit_like_content_reports table and provides the moderation queue interface where moderators review user-submitted reports about posts and comments that potentially violate rules. The operation supports comprehensive filtering by report status (pending, reviewed, dismissed), violation category, community, content type (post or comment), priority level, and date ranges. It also supports sorting by submission time, priority, and report count to help moderators efficiently process reports. Access is restricted to moderators (who see reports for their assigned communities) and administrators (who see all platform-wide reports). This operation powers the core moderation workflow by providing an organized, filterable queue of reports requiring review.","path":"/redditLike/moderator/content-reports","method":"patch","summary":"Retrieve filtered list of content reports for moderation queue","description":"Retrieves a filtered and paginated list of content reports submitted by users for moderator and administrator review. This operation provides the primary interface for the moderation queue, enabling moderators to efficiently process reports of potentially rule-violating content.\n\nThe operation supports comprehensive filtering and search capabilities to help moderators manage large volumes of reports effectively. Moderators can filter by report status (pending review, already reviewed, or dismissed), violation category (spam, harassment, hate speech, etc.), specific community, content type (posts vs comments), priority level (high-priority reports flagged by the system), and date ranges. Multiple filters can be combined to narrow down the queue to specific subsets of reports requiring attention.\n\nAccess control ensures moderators only see reports for communities where they have moderation permissions, while platform administrators have visibility into all reports across the entire platform. This scoped access prevents unauthorized review of reports outside a moderator's jurisdiction while enabling centralized oversight by administrators.\n\nThe response includes detailed report information for each item in the queue: the reported content preview, content author details, violation categories selected by reporters, number of reports for the same content, submission timestamps, and current review status. When multiple users report the same content, these reports are grouped together with a count indicator to signal widespread community concern.\n\nThe operation supports sorting by various criteria including submission time (newest or oldest first), priority level (high-priority reports first), and report count (most-reported content first). Pagination enables efficient loading of large report queues without performance degradation. The default sort order presents newest reports first to ensure timely review of fresh submissions.\n\nThis operation integrates with the broader moderation workflow by providing the entry point where moderators access reports before taking actions such as content removal, user bans, or report dismissal. The queue interface helps moderators meet expected review timeframes and maintain community standards through efficient report processing.","parameters":[],"requestBody":{"description":"Search criteria and filters for content reports including status, violation categories, community, priority level, and pagination parameters","typeName":"IRedditLikeContentReport.IRequest"},"responseBody":{"description":"Paginated list of content reports matching search criteria with detailed report information and grouped duplicate reports","typeName":"IPageIRedditLikeContentReport"},"authorizationRole":"moderator","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist to filter content reports by community context"},{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content reports must be created before they can be retrieved and reviewed in the moderation queue"}]},{"specification":"This operation retrieves a filtered and paginated list of content reports for moderator and administrator review. It operates on the reddit_like_content_reports table and provides the moderation queue interface where moderators review user-submitted reports about posts and comments that potentially violate rules. The operation supports comprehensive filtering by report status (pending, reviewed, dismissed), violation category, community, content type (post or comment), priority level, and date ranges. It also supports sorting by submission time, priority, and report count to help moderators efficiently process reports. Access is restricted to moderators (who see reports for their assigned communities) and administrators (who see all platform-wide reports). This operation powers the core moderation workflow by providing an organized, filterable queue of reports requiring review.","path":"/redditLike/admin/content-reports","method":"patch","summary":"Retrieve filtered list of content reports for moderation queue","description":"Retrieves a filtered and paginated list of content reports submitted by users for moderator and administrator review. This operation provides the primary interface for the moderation queue, enabling moderators to efficiently process reports of potentially rule-violating content.\n\nThe operation supports comprehensive filtering and search capabilities to help moderators manage large volumes of reports effectively. Moderators can filter by report status (pending review, already reviewed, or dismissed), violation category (spam, harassment, hate speech, etc.), specific community, content type (posts vs comments), priority level (high-priority reports flagged by the system), and date ranges. Multiple filters can be combined to narrow down the queue to specific subsets of reports requiring attention.\n\nAccess control ensures moderators only see reports for communities where they have moderation permissions, while platform administrators have visibility into all reports across the entire platform. This scoped access prevents unauthorized review of reports outside a moderator's jurisdiction while enabling centralized oversight by administrators.\n\nThe response includes detailed report information for each item in the queue: the reported content preview, content author details, violation categories selected by reporters, number of reports for the same content, submission timestamps, and current review status. When multiple users report the same content, these reports are grouped together with a count indicator to signal widespread community concern.\n\nThe operation supports sorting by various criteria including submission time (newest or oldest first), priority level (high-priority reports first), and report count (most-reported content first). Pagination enables efficient loading of large report queues without performance degradation. The default sort order presents newest reports first to ensure timely review of fresh submissions.\n\nThis operation integrates with the broader moderation workflow by providing the entry point where moderators access reports before taking actions such as content removal, user bans, or report dismissal. The queue interface helps moderators meet expected review timeframes and maintain community standards through efficient report processing.","parameters":[],"requestBody":{"description":"Search criteria and filters for content reports including status, violation categories, community, priority level, and pagination parameters","typeName":"IRedditLikeContentReport.IRequest"},"responseBody":{"description":"Paginated list of content reports matching search criteria with detailed report information and grouped duplicate reports","typeName":"IPageIRedditLikeContentReport"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before content reports can be filtered by community_id. The community_id filter in the request requires a valid community to have been created."}]},{"specification":"This operation retrieves detailed information about a specific content report submitted by users for review by moderators or administrators. The operation operates on the reddit_like_content_reports table and enables moderators and administrators to access complete report details including violation categories, reporter information, reported content references, and current review status. This endpoint is essential for the moderation workflow, allowing authorized users to examine reports in detail before taking moderation actions.","path":"/redditLike/moderator/content-reports/{reportId}","method":"get","summary":"Retrieve detailed information about a specific content report","description":"Retrieve comprehensive details for a specific content report identified by its unique report ID. This operation provides moderators and administrators with all information necessary to review and act on user-submitted reports of potentially inappropriate content.\n\nThe operation returns complete report information including the type of content being reported (post or comment), the violation categories selected by the reporter, any additional context provided, the current review status, and metadata about when the report was submitted. For authenticated reporters, the system includes the reporter's username to help moderators assess report credibility. For anonymous guest reports, the reporter is identified as 'Anonymous'.\n\nThis endpoint integrates with the content moderation workflow defined in the Content Moderation and Reporting requirements document. The retrieved report information enables moderators to make informed decisions about whether to remove content, dismiss reports as false positives, ban users, or escalate to administrators. The response includes references to the reported content (post ID or comment ID) allowing moderators to view the content in context before taking action.\n\nSecurity considerations include restricting access to moderators and administrators only, as content reports contain sensitive information about reporters and reported users. The system enforces role-based access control ensuring moderators can only access reports for communities they moderate, while administrators have platform-wide report access.\n\nThis operation supports the moderator review queue functionality by providing the detailed view when moderators click on queue items to investigate reports thoroughly. The comprehensive report details enable fair and informed moderation decisions that balance community safety with user rights.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete content report information including violation categories, reporter details, and review status","typeName":"IRedditLikeContentReport"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report must be created before it can be retrieved. The reportId path parameter requires a valid content report record to exist in the system."}]},{"specification":"This operation retrieves detailed information about a specific content report submitted by users for review by moderators or administrators. The operation operates on the reddit_like_content_reports table and enables moderators and administrators to access complete report details including violation categories, reporter information, reported content references, and current review status. This endpoint is essential for the moderation workflow, allowing authorized users to examine reports in detail before taking moderation actions.","path":"/redditLike/admin/content-reports/{reportId}","method":"get","summary":"Retrieve detailed information about a specific content report","description":"Retrieve comprehensive details for a specific content report identified by its unique report ID. This operation provides moderators and administrators with all information necessary to review and act on user-submitted reports of potentially inappropriate content.\n\nThe operation returns complete report information including the type of content being reported (post or comment), the violation categories selected by the reporter, any additional context provided, the current review status, and metadata about when the report was submitted. For authenticated reporters, the system includes the reporter's username to help moderators assess report credibility. For anonymous guest reports, the reporter is identified as 'Anonymous'.\n\nThis endpoint integrates with the content moderation workflow defined in the Content Moderation and Reporting requirements document. The retrieved report information enables moderators to make informed decisions about whether to remove content, dismiss reports as false positives, ban users, or escalate to administrators. The response includes references to the reported content (post ID or comment ID) allowing moderators to view the content in context before taking action.\n\nSecurity considerations include restricting access to moderators and administrators only, as content reports contain sensitive information about reporters and reported users. The system enforces role-based access control ensuring moderators can only access reports for communities they moderate, while administrators have platform-wide report access.\n\nThis operation supports the moderator review queue functionality by providing the detailed view when moderators click on queue items to investigate reports thoroughly. The comprehensive report details enable fair and informed moderation decisions that balance community safety with user rights.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete content report information including violation categories, reporter details, and review status","typeName":"IRedditLikeContentReport"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report must be created before it can be retrieved by administrators for review"}]},{"specification":"This operation creates a new moderation action in response to a content report or as a proactive moderation decision by moderators or administrators. The operation operates on the reddit_like_moderation_actions table and records actions such as content removal, report dismissal, content restoration, content locking, or escalation to administrators. This endpoint is the primary mechanism through which moderators and administrators enforce community standards and platform policies.","path":"/redditLike/moderator/moderation/actions","method":"post","summary":"Create a new moderation action to address reported or problematic content","description":"Create a comprehensive moderation action record documenting a moderator or administrator's decision regarding reported content or proactive content management. This operation is the central mechanism for enforcing community rules and platform policies through formal moderation actions.\n\nThe operation requires specification of the action type (remove, approve, dismiss_report, escalate, restore, lock), the content being acted upon (post or comment), and detailed reasoning for the action. For removal actions, the system requires additional specification of removal scope (community-level, platform-level, or spam removal). The operation associates actions with triggering reports when applicable, creating a complete audit trail linking user reports to moderator responses.\n\nWhen a moderation action is successfully created, the system immediately executes the specified action on the target content. For removal actions, content is hidden from public view within 1 second per performance requirements. For ban-related actions, user permissions are updated immediately. The system automatically sends notifications to affected content authors informing them of the action taken, the reason, and information about the appeal process per requirements section R-REM-015 through R-REM-017.\n\nThe operation enforces strict authorization rules based on user role and community scope. Moderators can only create moderation actions for communities where they have moderator permissions, while administrators can take actions across all communities. The system validates that the actor (moderator or admin) has appropriate permissions before executing the action.\n\nThis endpoint integrates deeply with the Content Moderation and Reporting requirements, implementing the core moderation workflow where reports are reviewed and actions are taken. The created moderation action becomes part of the permanent moderation log per requirements section 9, providing accountability and enabling appeals. The action record includes the actor's identity (moderator or admin), timestamps for audit purposes, and detailed reasoning for transparency.\n\nFor content removal actions specifically, the system follows the removal process defined in requirements section 6, preserving removed content in the database for audit and appeal purposes while hiding it from public view. The removal type field distinguishes between community-level removals (content hidden from community but visible in user profile) and platform-level removals (content completely hidden from all views).\n\nRelated operations that may be used together include retrieving content reports to review before taking action, and subsequently checking moderation logs to verify action completion.","parameters":[],"requestBody":{"description":"Moderation action details including action type, affected content, removal scope, and detailed reasoning","typeName":"IRedditLikeModerationAction.ICreate"},"responseBody":{"description":"Created moderation action record with complete action details and execution confirmation","typeName":"IRedditLikeModerationAction"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report must exist when creating a moderation action in response to reported content"},{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before moderation actions can be taken on it when content_type is post"},{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must be created before moderation actions can be taken on it when content_type is comment"},{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderation actions can be scoped to it as community context"}]},{"specification":"This operation creates a new moderation action in response to a content report or as a proactive moderation decision by moderators or administrators. The operation operates on the reddit_like_moderation_actions table and records actions such as content removal, report dismissal, content restoration, content locking, or escalation to administrators. This endpoint is the primary mechanism through which moderators and administrators enforce community standards and platform policies.","path":"/redditLike/admin/moderation/actions","method":"post","summary":"Create a new moderation action to address reported or problematic content","description":"Create a comprehensive moderation action record documenting a moderator or administrator's decision regarding reported content or proactive content management. This operation is the central mechanism for enforcing community rules and platform policies through formal moderation actions.\n\nThe operation requires specification of the action type (remove, approve, dismiss_report, escalate, restore, lock), the content being acted upon (post or comment), and detailed reasoning for the action. For removal actions, the system requires additional specification of removal scope (community-level, platform-level, or spam removal). The operation associates actions with triggering reports when applicable, creating a complete audit trail linking user reports to moderator responses.\n\nWhen a moderation action is successfully created, the system immediately executes the specified action on the target content. For removal actions, content is hidden from public view within 1 second per performance requirements. For ban-related actions, user permissions are updated immediately. The system automatically sends notifications to affected content authors informing them of the action taken, the reason, and information about the appeal process per requirements section R-REM-015 through R-REM-017.\n\nThe operation enforces strict authorization rules based on user role and community scope. Moderators can only create moderation actions for communities where they have moderator permissions, while administrators can take actions across all communities. The system validates that the actor (moderator or admin) has appropriate permissions before executing the action.\n\nThis endpoint integrates deeply with the Content Moderation and Reporting requirements, implementing the core moderation workflow where reports are reviewed and actions are taken. The created moderation action becomes part of the permanent moderation log per requirements section 9, providing accountability and enabling appeals. The action record includes the actor's identity (moderator or admin), timestamps for audit purposes, and detailed reasoning for transparency.\n\nFor content removal actions specifically, the system follows the removal process defined in requirements section 6, preserving removed content in the database for audit and appeal purposes while hiding it from public view. The removal type field distinguishes between community-level removals (content hidden from community but visible in user profile) and platform-level removals (content completely hidden from all views).\n\nRelated operations that may be used together include retrieving content reports to review before taking action, and subsequently checking moderation logs to verify action completion.","parameters":[],"requestBody":{"description":"Moderation action details including action type, affected content, removal scope, and detailed reasoning","typeName":"IRedditLikeModerationAction.ICreate"},"responseBody":{"description":"Created moderation action record with complete action details and execution confirmation","typeName":"IRedditLikeModerationAction"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report must be created first when the moderation action is taken in response to a user report, as indicated by the report_id field in the request body"},{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before a moderation action can be taken on it, required when affected_post_id is specified for post-related moderation actions"},{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must exist before a moderation action can be taken on it, required when affected_comment_id is specified for comment-related moderation actions"},{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before moderation actions can be taken within its context, as specified by the required community_id field"}]},{"specification":"This operation retrieves detailed information about a specific content report submitted by users for review by moderators or administrators. The operation operates on the reddit_like_content_reports table and enables moderators and administrators to access complete report details including violation categories, reporter information, reported content references, and current review status. This endpoint is essential for the moderation workflow, allowing authorized users to examine reports in detail before taking moderation actions.","path":"/redditLike/content-reports/{reportId}","method":"get","summary":"Retrieve detailed information about a specific content report","description":"Retrieve comprehensive details for a specific content report identified by its unique report ID. This operation provides moderators and administrators with all information necessary to review and act on user-submitted reports of potentially inappropriate content.\n\nThe operation returns complete report information including the type of content being reported (post or comment), the violation categories selected by the reporter, any additional context provided, the current review status, and metadata about when the report was submitted. For authenticated reporters, the system includes the reporter's username to help moderators assess report credibility. For anonymous guest reports, the reporter is identified as 'Anonymous'.\n\nThis endpoint integrates with the content moderation workflow defined in the Content Moderation and Reporting requirements document. The retrieved report information enables moderators to make informed decisions about whether to remove content, dismiss reports as false positives, ban users, or escalate to administrators. The response includes references to the reported content (post ID or comment ID) allowing moderators to view the content in context before taking action.\n\nSecurity considerations include restricting access to moderators and administrators only, as content reports contain sensitive information about reporters and reported users. The system enforces role-based access control ensuring moderators can only access reports for communities they moderate, while administrators have platform-wide report access.\n\nThis operation supports the moderator review queue functionality by providing the detailed view when moderators click on queue items to investigate reports thoroughly. The comprehensive report details enable fair and informed moderation decisions that balance community safety with user rights.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete content report information including violation categories, reporter details, and review status","typeName":"IRedditLikeContentReport"},"authorizationRole":"moderator","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report must be created before it can be retrieved by reportId"}]},{"specification":"This operation creates a new moderation action in response to a content report or as a proactive moderation decision by moderators or administrators. The operation operates on the reddit_like_moderation_actions table and records actions such as content removal, report dismissal, content restoration, content locking, or escalation to administrators. This endpoint is the primary mechanism through which moderators and administrators enforce community standards and platform policies.","path":"/redditLike/moderation/actions","method":"post","summary":"Create a new moderation action to address reported or problematic content","description":"Create a comprehensive moderation action record documenting a moderator or administrator's decision regarding reported content or proactive content management. This operation is the central mechanism for enforcing community rules and platform policies through formal moderation actions.\n\nThe operation requires specification of the action type (remove, approve, dismiss_report, escalate, restore, lock), the content being acted upon (post or comment), and detailed reasoning for the action. For removal actions, the system requires additional specification of removal scope (community-level, platform-level, or spam removal). The operation associates actions with triggering reports when applicable, creating a complete audit trail linking user reports to moderator responses.\n\nWhen a moderation action is successfully created, the system immediately executes the specified action on the target content. For removal actions, content is hidden from public view within 1 second per performance requirements. For ban-related actions, user permissions are updated immediately. The system automatically sends notifications to affected content authors informing them of the action taken, the reason, and information about the appeal process per requirements section R-REM-015 through R-REM-017.\n\nThe operation enforces strict authorization rules based on user role and community scope. Moderators can only create moderation actions for communities where they have moderator permissions, while administrators can take actions across all communities. The system validates that the actor (moderator or admin) has appropriate permissions before executing the action.\n\nThis endpoint integrates deeply with the Content Moderation and Reporting requirements, implementing the core moderation workflow where reports are reviewed and actions are taken. The created moderation action becomes part of the permanent moderation log per requirements section 9, providing accountability and enabling appeals. The action record includes the actor's identity (moderator or admin), timestamps for audit purposes, and detailed reasoning for transparency.\n\nFor content removal actions specifically, the system follows the removal process defined in requirements section 6, preserving removed content in the database for audit and appeal purposes while hiding it from public view. The removal type field distinguishes between community-level removals (content hidden from community but visible in user profile) and platform-level removals (content completely hidden from all views).\n\nRelated operations that may be used together include retrieving content reports to review before taking action, and subsequently checking moderation logs to verify action completion.","parameters":[],"requestBody":{"description":"Moderation action details including action type, affected content, removal scope, and detailed reasoning","typeName":"IRedditLikeModerationAction.ICreate"},"responseBody":{"description":"Created moderation action record with complete action details and execution confirmation","typeName":"IRedditLikeModerationAction"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report must exist before moderation action can be taken in response to it. The report_id field in the moderation action references the triggering report."},{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before moderation action can be taken on it. The affected_post_id field references the post being moderated."},{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must exist before moderation action can be taken on it. The affected_comment_id field references the comment being moderated."},{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before moderation actions can be taken within it. The community_id field provides the community context for all moderation actions."}]},{"specification":"This operation retrieves detailed information about a specific moderation action by its unique identifier. It operates on the reddit_like_moderation_actions table from the Prisma schema and provides complete visibility into a single moderation decision including the action type, affected content, actor who performed the action, reasoning, and current status. This endpoint serves moderators reviewing their own action history, administrators auditing moderation decisions, and system processes tracking moderation workflows.","path":"/redditLike/moderator/moderation/actions/{actionId}","method":"get","summary":"Retrieve detailed information about a specific moderation action","description":"Retrieve comprehensive details about a single moderation action identified by its unique ID. This operation provides access to the complete record of a moderation decision including what action was taken (remove, approve, dismiss, escalate, restore, lock), who performed the action (moderator or administrator), what content was affected (post or comment), the reasoning behind the decision, and the current status of the action.\n\nThis endpoint is essential for moderation transparency and accountability. Moderators can review their own past actions to maintain consistency in enforcement. Administrators can audit moderation decisions across the platform to ensure policy compliance and fairness. The operation also supports appeal processes by providing the detailed context users need to understand why their content was moderated.\n\nThe returned data includes references to the triggering report (if action was report-driven), the affected content (post or comment), the community context, and complete reasoning with both public explanation and internal moderator notes. Status tracking shows whether actions remain in effect, have been reversed, or are under appeal.\n\nSecurity considerations require that internal moderator notes are only visible to users with moderator or administrator privileges. Regular members should not see private moderation team communications. The endpoint enforces role-based access control to ensure only authorized users can view sensitive moderation details.\n\nThis operation integrates with the moderation appeal system, content reporting workflows, and moderation audit logging. When users appeal moderation decisions, this endpoint provides the foundational data for the appeal review process.","parameters":[{"name":"actionId","description":"Unique identifier of the moderation action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation action record with complete context","typeName":"IRedditLikeModerationAction"},"authorizationRole":"moderator","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/moderation/actions","method":"post"},"description":"Moderation action must be created before it can be retrieved. The actionId path parameter references the moderation action record being fetched."}]},{"specification":"This operation retrieves detailed information about a specific moderation action by its unique identifier. It operates on the reddit_like_moderation_actions table from the Prisma schema and provides complete visibility into a single moderation decision including the action type, affected content, actor who performed the action, reasoning, and current status. This endpoint serves moderators reviewing their own action history, administrators auditing moderation decisions, and system processes tracking moderation workflows.","path":"/redditLike/admin/moderation/actions/{actionId}","method":"get","summary":"Retrieve detailed information about a specific moderation action","description":"Retrieve comprehensive details about a single moderation action identified by its unique ID. This operation provides access to the complete record of a moderation decision including what action was taken (remove, approve, dismiss, escalate, restore, lock), who performed the action (moderator or administrator), what content was affected (post or comment), the reasoning behind the decision, and the current status of the action.\n\nThis endpoint is essential for moderation transparency and accountability. Moderators can review their own past actions to maintain consistency in enforcement. Administrators can audit moderation decisions across the platform to ensure policy compliance and fairness. The operation also supports appeal processes by providing the detailed context users need to understand why their content was moderated.\n\nThe returned data includes references to the triggering report (if action was report-driven), the affected content (post or comment), the community context, and complete reasoning with both public explanation and internal moderator notes. Status tracking shows whether actions remain in effect, have been reversed, or are under appeal.\n\nSecurity considerations require that internal moderator notes are only visible to users with moderator or administrator privileges. Regular members should not see private moderation team communications. The endpoint enforces role-based access control to ensure only authorized users can view sensitive moderation details.\n\nThis operation integrates with the moderation appeal system, content reporting workflows, and moderation audit logging. When users appeal moderation decisions, this endpoint provides the foundational data for the appeal review process.","parameters":[{"name":"actionId","description":"Unique identifier of the moderation action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation action record with complete context","typeName":"IRedditLikeModerationAction"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of moderation actions with advanced search capabilities for moderators and administrators to review moderation history. It operates on the reddit_like_moderation_actions table and supports comprehensive filtering by community, action type, status, content type, date ranges, and actor. This enables moderation teams to analyze patterns, audit decisions, and track enforcement across communities.","path":"/redditLike/moderator/moderation/actions","method":"patch","summary":"Search and retrieve filtered moderation actions with pagination","description":"Retrieve a comprehensive, searchable list of moderation actions taken across the platform or within specific communities. This operation provides powerful filtering and sorting capabilities essential for moderation oversight, policy enforcement review, and accountability tracking. Moderators can review all actions within their assigned communities, while administrators can query moderation activity platform-wide.\n\nThe search functionality supports multiple filter dimensions including community scope (filter by specific communities or view all), action types (remove, approve, dismiss, escalate, restore, lock), content types (posts vs comments), status (completed, reversed, appealed), and date ranges for temporal analysis. Additional filters allow searching by the moderator or administrator who performed actions, enabling performance reviews and activity auditing.\n\nThis operation is critical for several moderation workflows. Moderator teams use it to review recent enforcement decisions for consistency, identify patterns in rule violations, and coordinate moderation strategies across team members. Administrators leverage this endpoint to audit community moderation quality, investigate user complaints about moderator actions, and ensure platform-wide policy compliance.\n\nThe response provides paginated results with configurable page sizes and sorting options. Users can sort by action timestamp (newest or oldest first), action type, or status to organize results for their specific analysis needs. Each result includes summary information about the action, affected content, and actor, with links to detailed action records.\n\nSecurity and privacy considerations ensure that internal moderator notes and sensitive moderation context are only visible to authorized moderators and administrators. The endpoint enforces strict role-based access control, limiting moderators to viewing actions within their assigned communities while granting administrators full platform visibility.\n\nIntegration with the broader moderation system includes connections to content reports that triggered actions, appeals filed against actions, and audit logs tracking the complete moderation lifecycle. This enables comprehensive analysis of moderation effectiveness and fairness across the platform.","parameters":[],"requestBody":{"description":"Search criteria, filtering options, and pagination parameters for moderation actions","typeName":"IRedditLikeModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions matching search criteria","typeName":"IPageIRedditLikeModerationAction"},"authorizationRole":"moderator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of moderation actions with advanced search capabilities for moderators and administrators to review moderation history. It operates on the reddit_like_moderation_actions table and supports comprehensive filtering by community, action type, status, content type, date ranges, and actor. This enables moderation teams to analyze patterns, audit decisions, and track enforcement across communities.","path":"/redditLike/admin/moderation/actions","method":"patch","summary":"Search and retrieve filtered moderation actions with pagination","description":"Retrieve a comprehensive, searchable list of moderation actions taken across the platform or within specific communities. This operation provides powerful filtering and sorting capabilities essential for moderation oversight, policy enforcement review, and accountability tracking. Moderators can review all actions within their assigned communities, while administrators can query moderation activity platform-wide.\n\nThe search functionality supports multiple filter dimensions including community scope (filter by specific communities or view all), action types (remove, approve, dismiss, escalate, restore, lock), content types (posts vs comments), status (completed, reversed, appealed), and date ranges for temporal analysis. Additional filters allow searching by the moderator or administrator who performed actions, enabling performance reviews and activity auditing.\n\nThis operation is critical for several moderation workflows. Moderator teams use it to review recent enforcement decisions for consistency, identify patterns in rule violations, and coordinate moderation strategies across team members. Administrators leverage this endpoint to audit community moderation quality, investigate user complaints about moderator actions, and ensure platform-wide policy compliance.\n\nThe response provides paginated results with configurable page sizes and sorting options. Users can sort by action timestamp (newest or oldest first), action type, or status to organize results for their specific analysis needs. Each result includes summary information about the action, affected content, and actor, with links to detailed action records.\n\nSecurity and privacy considerations ensure that internal moderator notes and sensitive moderation context are only visible to authorized moderators and administrators. The endpoint enforces strict role-based access control, limiting moderators to viewing actions within their assigned communities while granting administrators full platform visibility.\n\nIntegration with the broader moderation system includes connections to content reports that triggered actions, appeals filed against actions, and audit logs tracking the complete moderation lifecycle. This enables comprehensive analysis of moderation effectiveness and fairness across the platform.","parameters":[],"requestBody":{"description":"Search criteria, filtering options, and pagination parameters for moderation actions","typeName":"IRedditLikeModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions matching search criteria","typeName":"IPageIRedditLikeModerationAction"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation allows community moderators to remove posts that violate community rules or standards within their assigned communities. It operates on the reddit_like_posts table and updates the moderation tracking tables (reddit_like_moderation_actions and reddit_like_moderation_logs). When a moderator removes a post, the system performs a soft delete by setting the deleted_at timestamp, marks the post as removed in the moderation system, and creates audit trail records. The operation enforces that moderators can only remove posts from communities where they have moderator permissions with the 'manage_posts' privilege. Administrators can remove posts from any community platform-wide. The removed post content is hidden from public view but preserved in the database for audit and appeal purposes.","path":"/redditLike/moderator/posts/{postId}/remove","method":"post","summary":"Remove a post from a community for rule violations","description":"Remove a specific post from a community due to content policy violations or community rule infractions. This operation is available to community moderators within their assigned communities and to platform administrators across all communities. The operation implements soft deletion by setting the deleted_at timestamp on the reddit_like_posts record while preserving all post data for audit trail and potential appeal processes.\n\nWhen a post is removed, the system creates detailed records in both reddit_like_moderation_actions and reddit_like_moderation_logs tables to maintain a comprehensive audit trail. The moderation action record captures the removal type (community, platform, or spam), the reason category and detailed explanation, and any internal notes for the moderation team. The moderation log provides an immutable historical record of the removal event with full context.\n\nSecurity and authorization are enforced at multiple levels. Moderators must have the 'manage_posts' permission in the specific community where the post exists. The system validates that the moderator's role assignments in reddit_like_community_moderators table grant them authority over the target community. Administrators bypass community-specific checks and can remove posts platform-wide. The operation rejects requests from regular members attempting to remove posts they don't own.\n\nThe removal process immediately hides the post content from public feeds, search results, and community listings by filtering based on the deleted_at timestamp. However, the post structure, metadata, title, and community association are preserved. All associated comments remain accessible with a notice indicating the parent post was removed, maintaining discussion continuity and preserving valuable community conversations. The post author receives a notification within 5 minutes explaining which content was removed, the stated reason, and information about the appeal process.\n\nRemoval types determine the scope of content hiding. Community-level removals hide content from the specific community but may remain visible in the author's profile. Platform-level removals by administrators hide content from all views due to platform-wide policy violations. Spam removals not only hide the content but also reverse any karma earned from that content according to anti-manipulation measures. The removal_type field in the request body specifies which removal scope to apply.\n\nThis operation integrates with the broader content moderation system defined in the Content Moderation and Reporting requirements document. Removals can be triggered either reactively (in response to content reports in reddit_like_content_reports) or proactively by moderators. When removing content in response to a report, the moderator provides the report_id to link the action to the triggering report. The moderation action updates the report status to 'reviewed' and creates the connection for tracking report resolution metrics.\n\nThe operation supports the appeal workflow by preserving all removed content and maintaining detailed reasoning. Users can appeal removals through the reddit_like_moderation_appeals table, referencing the moderation action record created by this operation. Moderators and administrators reviewing appeals have access to the complete context including the original removal reason, internal notes, and content state at time of removal.","parameters":[{"name":"postId","description":"Unique identifier of the post to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details about the post removal including reason category, explanation text, removal scope, and optional report reference","typeName":"IRedditLikePost.IRemove"},"responseBody":null,"name":"remove","authorizationRoles":["moderator","admin"],"authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before it can be removed by moderators"}]},{"specification":"This operation allows community moderators to remove posts that violate community rules or standards within their assigned communities. It operates on the reddit_like_posts table and updates the moderation tracking tables (reddit_like_moderation_actions and reddit_like_moderation_logs). When a moderator removes a post, the system performs a soft delete by setting the deleted_at timestamp, marks the post as removed in the moderation system, and creates audit trail records. The operation enforces that moderators can only remove posts from communities where they have moderator permissions with the 'manage_posts' privilege. Administrators can remove posts from any community platform-wide. The removed post content is hidden from public view but preserved in the database for audit and appeal purposes.","path":"/redditLike/admin/posts/{postId}/remove","method":"post","summary":"Remove a post from a community for rule violations","description":"Remove a specific post from a community due to content policy violations or community rule infractions. This operation is available to community moderators within their assigned communities and to platform administrators across all communities. The operation implements soft deletion by setting the deleted_at timestamp on the reddit_like_posts record while preserving all post data for audit trail and potential appeal processes.\n\nWhen a post is removed, the system creates detailed records in both reddit_like_moderation_actions and reddit_like_moderation_logs tables to maintain a comprehensive audit trail. The moderation action record captures the removal type (community, platform, or spam), the reason category and detailed explanation, and any internal notes for the moderation team. The moderation log provides an immutable historical record of the removal event with full context.\n\nSecurity and authorization are enforced at multiple levels. Moderators must have the 'manage_posts' permission in the specific community where the post exists. The system validates that the moderator's role assignments in reddit_like_community_moderators table grant them authority over the target community. Administrators bypass community-specific checks and can remove posts platform-wide. The operation rejects requests from regular members attempting to remove posts they don't own.\n\nThe removal process immediately hides the post content from public feeds, search results, and community listings by filtering based on the deleted_at timestamp. However, the post structure, metadata, title, and community association are preserved. All associated comments remain accessible with a notice indicating the parent post was removed, maintaining discussion continuity and preserving valuable community conversations. The post author receives a notification within 5 minutes explaining which content was removed, the stated reason, and information about the appeal process.\n\nRemoval types determine the scope of content hiding. Community-level removals hide content from the specific community but may remain visible in the author's profile. Platform-level removals by administrators hide content from all views due to platform-wide policy violations. Spam removals not only hide the content but also reverse any karma earned from that content according to anti-manipulation measures. The removal_type field in the request body specifies which removal scope to apply.\n\nThis operation integrates with the broader content moderation system defined in the Content Moderation and Reporting requirements document. Removals can be triggered either reactively (in response to content reports in reddit_like_content_reports) or proactively by moderators. When removing content in response to a report, the moderator provides the report_id to link the action to the triggering report. The moderation action updates the report status to 'reviewed' and creates the connection for tracking report resolution metrics.\n\nThe operation supports the appeal workflow by preserving all removed content and maintaining detailed reasoning. Users can appeal removals through the reddit_like_moderation_appeals table, referencing the moderation action record created by this operation. Moderators and administrators reviewing appeals have access to the complete context including the original removal reason, internal notes, and content state at time of removal.","parameters":[{"name":"postId","description":"Unique identifier of the post to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details about the post removal including reason category, explanation text, removal scope, and optional report reference","typeName":"IRedditLikePost.IRemove"},"responseBody":null,"name":"remove","authorizationRoles":["moderator","admin"],"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must exist before it can be removed by administrators"},{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report may trigger the post removal action when moderators respond to user-submitted reports"}]},{"specification":"This operation allows community moderators to remove comments that violate community rules or standards within their assigned communities. It operates on the reddit_like_comments table and updates the moderation tracking tables (reddit_like_moderation_actions and reddit_like_moderation_logs). When a moderator removes a comment, the system performs a soft delete by setting the deleted_at timestamp, marks the comment as removed in the moderation system, and creates comprehensive audit trail records. The operation enforces that moderators can only remove comments from communities where they have moderator permissions with the 'manage_comments' privilege. Administrators can remove comments from any community platform-wide. The removed comment content is replaced with '[removed]' placeholder while preserving the thread structure.","path":"/redditLike/moderator/comments/{commentId}/remove","method":"post","summary":"Remove a comment from a discussion for rule violations","description":"Remove a specific comment from a discussion thread due to content policy violations or community rule infractions. This operation is available to community moderators within their assigned communities and to platform administrators across all communities. The operation implements soft deletion by setting the deleted_at timestamp on the reddit_like_comments record while preserving all comment metadata and thread structure for discussion continuity.\n\nWhen a comment is removed, the system creates detailed records in both reddit_like_moderation_actions and reddit_like_moderation_logs tables to maintain a comprehensive audit trail. The moderation action record captures the removal type (community, platform, or spam), the reason category and detailed explanation, and any internal notes for the moderation team. The moderation log provides an immutable historical record of the removal event including the moderator's identity, timestamp, and full context.\n\nSecurity and authorization are enforced rigorously. Moderators must have the 'manage_comments' permission in the specific community where the comment exists, validated through the reddit_like_community_moderators table and the community association of the parent post in reddit_like_posts. The system verifies that the moderator's permission set includes comment management rights. Administrators bypass community-specific permission checks and can remove comments platform-wide for policy enforcement. Regular members are prevented from removing comments created by others.\n\nThe removal process immediately hides the comment's content_text from public view by filtering based on the deleted_at timestamp. The system replaces the comment text with the placeholder '[removed by moderator]' when displaying the thread to users. Critically, the comment's position in the thread hierarchy is preserved to maintain conversation flow. All child replies to the removed comment remain visible and properly nested beneath the '[removed]' placeholder, ensuring that valuable discussion threads are not fragmented by parent comment removals.\n\nThis approach aligns with the Comment System requirements (section 5.5) which specify that deleted comments with replies must preserve thread structure. When a comment is removed, nested replies continue to display in their proper hierarchical positions, maintaining the integrity of the conversation tree. Users viewing the thread see the discussion flow even when intermediate comments have been moderated, preventing confusion and preserving context for remaining comments.\n\nRemoval scope and type follow the same patterns as post removals. Community-level removals hide comments from the specific community context. Platform-level removals by administrators hide comments from all views due to severe platform-wide policy violations. Spam removals trigger karma reversal for the comment author, removing any karma points earned from the removed comment according to anti-manipulation rules in the Karma System requirements (section 9.2).\n\nThe comment author receives a notification within 5 minutes of removal explaining which comment was removed, the community it was removed from, the stated reason citing specific rule violations, and information about how to appeal the decision. The notification includes a link to the appeal submission form, enabling users to exercise their right to contest moderation decisions.\n\nThis operation integrates seamlessly with the content reporting and moderation workflow. Removals can be triggered either reactively (responding to user-submitted reports in reddit_like_content_reports) or proactively by moderators monitoring their communities. When removing a comment in response to a report, the moderator includes the report_id in the request to link the action to the triggering report, updating the report status to 'reviewed' and enabling report resolution tracking.\n\nThe operation fully supports the appeal process defined in the Content Moderation and Reporting requirements (section 8). All removed comments and their removal reasons are preserved in the moderation action records, providing the necessary context for appeal review. Users appealing comment removals reference the moderation action through the reddit_like_moderation_appeals table, and reviewing moderators or administrators have access to the complete removal context including original comment text, removal reasoning, and any internal moderation notes.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details about the comment removal including reason category, explanation text, removal scope, and optional report reference","typeName":"IRedditLikeComment.IRemove"},"responseBody":null,"name":"remove","authorizationRoles":["moderator","admin"],"authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must exist before it can be removed by moderators"},{"endpoint":{"path":"/redditLike/content-reports","method":"post"},"description":"Content report may trigger the comment removal action when moderators respond to user-submitted reports"}]},{"specification":"This operation allows community moderators to remove comments that violate community rules or standards within their assigned communities. It operates on the reddit_like_comments table and updates the moderation tracking tables (reddit_like_moderation_actions and reddit_like_moderation_logs). When a moderator removes a comment, the system performs a soft delete by setting the deleted_at timestamp, marks the comment as removed in the moderation system, and creates comprehensive audit trail records. The operation enforces that moderators can only remove comments from communities where they have moderator permissions with the 'manage_comments' privilege. Administrators can remove comments from any community platform-wide. The removed comment content is replaced with '[removed]' placeholder while preserving the thread structure.","path":"/redditLike/admin/comments/{commentId}/remove","method":"post","summary":"Remove a comment from a discussion for rule violations","description":"Remove a specific comment from a discussion thread due to content policy violations or community rule infractions. This operation is available to community moderators within their assigned communities and to platform administrators across all communities. The operation implements soft deletion by setting the deleted_at timestamp on the reddit_like_comments record while preserving all comment metadata and thread structure for discussion continuity.\n\nWhen a comment is removed, the system creates detailed records in both reddit_like_moderation_actions and reddit_like_moderation_logs tables to maintain a comprehensive audit trail. The moderation action record captures the removal type (community, platform, or spam), the reason category and detailed explanation, and any internal notes for the moderation team. The moderation log provides an immutable historical record of the removal event including the moderator's identity, timestamp, and full context.\n\nSecurity and authorization are enforced rigorously. Moderators must have the 'manage_comments' permission in the specific community where the comment exists, validated through the reddit_like_community_moderators table and the community association of the parent post in reddit_like_posts. The system verifies that the moderator's permission set includes comment management rights. Administrators bypass community-specific permission checks and can remove comments platform-wide for policy enforcement. Regular members are prevented from removing comments created by others.\n\nThe removal process immediately hides the comment's content_text from public view by filtering based on the deleted_at timestamp. The system replaces the comment text with the placeholder '[removed by moderator]' when displaying the thread to users. Critically, the comment's position in the thread hierarchy is preserved to maintain conversation flow. All child replies to the removed comment remain visible and properly nested beneath the '[removed]' placeholder, ensuring that valuable discussion threads are not fragmented by parent comment removals.\n\nThis approach aligns with the Comment System requirements (section 5.5) which specify that deleted comments with replies must preserve thread structure. When a comment is removed, nested replies continue to display in their proper hierarchical positions, maintaining the integrity of the conversation tree. Users viewing the thread see the discussion flow even when intermediate comments have been moderated, preventing confusion and preserving context for remaining comments.\n\nRemoval scope and type follow the same patterns as post removals. Community-level removals hide comments from the specific community context. Platform-level removals by administrators hide comments from all views due to severe platform-wide policy violations. Spam removals trigger karma reversal for the comment author, removing any karma points earned from the removed comment according to anti-manipulation rules in the Karma System requirements (section 9.2).\n\nThe comment author receives a notification within 5 minutes of removal explaining which comment was removed, the community it was removed from, the stated reason citing specific rule violations, and information about how to appeal the decision. The notification includes a link to the appeal submission form, enabling users to exercise their right to contest moderation decisions.\n\nThis operation integrates seamlessly with the content reporting and moderation workflow. Removals can be triggered either reactively (responding to user-submitted reports in reddit_like_content_reports) or proactively by moderators monitoring their communities. When removing a comment in response to a report, the moderator includes the report_id in the request to link the action to the triggering report, updating the report status to 'reviewed' and enabling report resolution tracking.\n\nThe operation fully supports the appeal process defined in the Content Moderation and Reporting requirements (section 8). All removed comments and their removal reasons are preserved in the moderation action records, providing the necessary context for appeal review. Users appealing comment removals reference the moderation action through the reddit_like_moderation_appeals table, and reviewing moderators or administrators have access to the complete removal context including original comment text, removal reasoning, and any internal moderation notes.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details about the comment removal including reason category, explanation text, removal scope, and optional report reference","typeName":"IRedditLikeComment.IRemove"},"responseBody":null,"name":"remove","authorizationRoles":["moderator","admin"],"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/comments","method":"post"},"description":"Comment must exist before it can be removed by administrators"}]},{"specification":"This operation restores a previously soft-deleted post in the Reddit-like community platform. When a post author or moderator deletes a post, it is soft-deleted (marked with deleted_at timestamp) rather than permanently removed from the database. This restoration endpoint allows authorized users to recover soft-deleted posts, making them visible again to the community. The operation validates that the post exists, is currently in deleted state, and that the requesting user has appropriate permissions to restore it. Upon successful restoration, the deleted_at timestamp is cleared, and the post becomes visible in community feeds, search results, and sorting algorithms again.","path":"/redditLike/member/posts/{postId}/restore","method":"post","summary":"Restore a soft-deleted post to make it visible again","description":"Restores a previously soft-deleted post by clearing its deleted_at timestamp, making the post visible again in the community platform. This operation is essential for recovering posts that were deleted by mistake or removed during moderation but later approved through appeals.\n\nWhen a post is deleted in the platform, it undergoes soft deletion where the deleted_at timestamp is set but the post data remains in the reddit_like_posts table along with all associated content in type-specific tables (reddit_like_post_text_content, reddit_like_post_link_content, or reddit_like_post_image_content). Soft deletion preserves the post structure, comments, votes, and karma attribution while hiding the content from public view.\n\nThis restoration endpoint reverses the soft deletion by clearing the deleted_at field, immediately making the post visible in community feeds, user profiles, and search results. All previously earned karma from the post remains intact per business requirements, and the post's engagement metrics (votes, comments) are preserved.\n\nAuthorization for post restoration depends on the context: post authors can restore their own deleted posts, community moderators can restore posts removed as part of moderation actions in their communities, and platform administrators can restore any post platform-wide. The operation validates that the requesting user has appropriate permissions before executing the restoration.\n\nThe restored post retains all its original metadata including creation timestamp, vote scores, comment count, and karma attribution. The post immediately appears in sorted feeds according to its original creation time and current vote score, not the restoration time. This ensures restored content integrates naturally into the existing content chronology rather than appearing artificially recent.","parameters":[{"name":"postId","description":"Unique identifier of the soft-deleted post to restore","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The restored post with all original content and metadata","typeName":"IRedditLikePost"},"authorizationRoles":["member","moderator","admin"],"name":"restore","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/posts","method":"post"},"description":"Post must be created before it can be restored from soft-deleted state"}]},{"specification":"This operation restores a previously soft-deleted post in the Reddit-like community platform. When a post author or moderator deletes a post, it is soft-deleted (marked with deleted_at timestamp) rather than permanently removed from the database. This restoration endpoint allows authorized users to recover soft-deleted posts, making them visible again to the community. The operation validates that the post exists, is currently in deleted state, and that the requesting user has appropriate permissions to restore it. Upon successful restoration, the deleted_at timestamp is cleared, and the post becomes visible in community feeds, search results, and sorting algorithms again.","path":"/redditLike/moderator/posts/{postId}/restore","method":"post","summary":"Restore a soft-deleted post to make it visible again","description":"Restores a previously soft-deleted post by clearing its deleted_at timestamp, making the post visible again in the community platform. This operation is essential for recovering posts that were deleted by mistake or removed during moderation but later approved through appeals.\n\nWhen a post is deleted in the platform, it undergoes soft deletion where the deleted_at timestamp is set but the post data remains in the reddit_like_posts table along with all associated content in type-specific tables (reddit_like_post_text_content, reddit_like_post_link_content, or reddit_like_post_image_content). Soft deletion preserves the post structure, comments, votes, and karma attribution while hiding the content from public view.\n\nThis restoration endpoint reverses the soft deletion by clearing the deleted_at field, immediately making the post visible in community feeds, user profiles, and search results. All previously earned karma from the post remains intact per business requirements, and the post's engagement metrics (votes, comments) are preserved.\n\nAuthorization for post restoration depends on the context: post authors can restore their own deleted posts, community moderators can restore posts removed as part of moderation actions in their communities, and platform administrators can restore any post platform-wide. The operation validates that the requesting user has appropriate permissions before executing the restoration.\n\nThe restored post retains all its original metadata including creation timestamp, vote scores, comment count, and karma attribution. The post immediately appears in sorted feeds according to its original creation time and current vote score, not the restoration time. This ensures restored content integrates naturally into the existing content chronology rather than appearing artificially recent.","parameters":[{"name":"postId","description":"Unique identifier of the soft-deleted post to restore","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The restored post with all original content and metadata","typeName":"IRedditLikePost"},"authorizationRoles":["member","moderator","admin"],"name":"restore","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/moderator/posts","method":"post"},"description":"Post must be created before it can be restored from soft-deleted state"}]},{"specification":"This operation restores a previously soft-deleted post in the Reddit-like community platform. When a post author or moderator deletes a post, it is soft-deleted (marked with deleted_at timestamp) rather than permanently removed from the database. This restoration endpoint allows authorized users to recover soft-deleted posts, making them visible again to the community. The operation validates that the post exists, is currently in deleted state, and that the requesting user has appropriate permissions to restore it. Upon successful restoration, the deleted_at timestamp is cleared, and the post becomes visible in community feeds, search results, and sorting algorithms again.","path":"/redditLike/admin/posts/{postId}/restore","method":"post","summary":"Restore a soft-deleted post to make it visible again","description":"Restores a previously soft-deleted post by clearing its deleted_at timestamp, making the post visible again in the community platform. This operation is essential for recovering posts that were deleted by mistake or removed during moderation but later approved through appeals.\n\nWhen a post is deleted in the platform, it undergoes soft deletion where the deleted_at timestamp is set but the post data remains in the reddit_like_posts table along with all associated content in type-specific tables (reddit_like_post_text_content, reddit_like_post_link_content, or reddit_like_post_image_content). Soft deletion preserves the post structure, comments, votes, and karma attribution while hiding the content from public view.\n\nThis restoration endpoint reverses the soft deletion by clearing the deleted_at field, immediately making the post visible in community feeds, user profiles, and search results. All previously earned karma from the post remains intact per business requirements, and the post's engagement metrics (votes, comments) are preserved.\n\nAuthorization for post restoration depends on the context: post authors can restore their own deleted posts, community moderators can restore posts removed as part of moderation actions in their communities, and platform administrators can restore any post platform-wide. The operation validates that the requesting user has appropriate permissions before executing the restoration.\n\nThe restored post retains all its original metadata including creation timestamp, vote scores, comment count, and karma attribution. The post immediately appears in sorted feeds according to its original creation time and current vote score, not the restoration time. This ensures restored content integrates naturally into the existing content chronology rather than appearing artificially recent.","parameters":[{"name":"postId","description":"Unique identifier of the soft-deleted post to restore","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The restored post with all original content and metadata","typeName":"IRedditLikePost"},"authorizationRoles":["member","moderator","admin"],"name":"restore","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/posts","method":"post"},"description":"Post must be created before it can be restored from soft-deleted state"}]},{"specification":"This operation restores a previously soft-deleted comment in the Reddit-like community platform. When a comment author or moderator deletes a comment, it is soft-deleted (marked with deleted_at timestamp) rather than permanently removed from the database. This restoration endpoint allows authorized users to recover soft-deleted comments, making them visible again in discussion threads. The operation validates that the comment exists, is currently in deleted state, and that the requesting user has appropriate permissions to restore it. Upon successful restoration, the deleted_at timestamp is cleared, and the comment becomes visible in its thread position again with all original content, votes, and threading relationships preserved.","path":"/redditLike/member/comments/{commentId}/restore","method":"post","summary":"Restore a soft-deleted comment to make it visible again","description":"Restores a previously soft-deleted comment by clearing its deleted_at timestamp, making the comment visible again in discussion threads. This operation is essential for recovering comments that were deleted by mistake or removed during moderation but later approved through appeals.\n\nWhen a comment is deleted in the platform, it undergoes soft deletion where the deleted_at timestamp is set but the comment data remains in the reddit_like_comments table. Soft deletion preserves the comment's position in the thread hierarchy, all voting data, karma attribution, and nested reply relationships while hiding the comment content from public view. The thread structure remains intact with '[deleted]' placeholder shown to maintain conversation context.\n\nThis restoration endpoint reverses the soft deletion by clearing the deleted_at field, immediately making the comment content visible again in its original thread position. The comment appears exactly where it was before deletion, maintaining all parent-child relationships in the nested comment tree. All previously earned karma from the comment remains intact per business requirements, and the comment's vote score is preserved.\n\nAuthorization for comment restoration depends on the context: comment authors can restore their own deleted comments within reasonable timeframes, community moderators can restore comments removed as part of moderation actions in their communities, and platform administrators can restore any comment platform-wide. The operation validates that the requesting user has appropriate permissions before executing the restoration.\n\nThe restored comment retains all its original attributes including content text, creation timestamp, vote score, depth level, and threading relationships. Child replies that were preserved during deletion remain connected to the restored parent comment. The comment immediately becomes available for voting and further replies. The restored comment integrates naturally into the existing conversation thread based on its original creation time, not the restoration time.","parameters":[{"name":"commentId","description":"Unique identifier of the soft-deleted comment to restore","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The restored comment with all original content and metadata","typeName":"IRedditLikeComment"},"authorizationRoles":["member","moderator","admin"],"name":"restore","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/comments","method":"post"},"description":"Comment must be created before it can be restored from deleted state"}]},{"specification":"This operation restores a previously soft-deleted comment in the Reddit-like community platform. When a comment author or moderator deletes a comment, it is soft-deleted (marked with deleted_at timestamp) rather than permanently removed from the database. This restoration endpoint allows authorized users to recover soft-deleted comments, making them visible again in discussion threads. The operation validates that the comment exists, is currently in deleted state, and that the requesting user has appropriate permissions to restore it. Upon successful restoration, the deleted_at timestamp is cleared, and the comment becomes visible in its thread position again with all original content, votes, and threading relationships preserved.","path":"/redditLike/moderator/comments/{commentId}/restore","method":"post","summary":"Restore a soft-deleted comment to make it visible again","description":"Restores a previously soft-deleted comment by clearing its deleted_at timestamp, making the comment visible again in discussion threads. This operation is essential for recovering comments that were deleted by mistake or removed during moderation but later approved through appeals.\n\nWhen a comment is deleted in the platform, it undergoes soft deletion where the deleted_at timestamp is set but the comment data remains in the reddit_like_comments table. Soft deletion preserves the comment's position in the thread hierarchy, all voting data, karma attribution, and nested reply relationships while hiding the comment content from public view. The thread structure remains intact with '[deleted]' placeholder shown to maintain conversation context.\n\nThis restoration endpoint reverses the soft deletion by clearing the deleted_at field, immediately making the comment content visible again in its original thread position. The comment appears exactly where it was before deletion, maintaining all parent-child relationships in the nested comment tree. All previously earned karma from the comment remains intact per business requirements, and the comment's vote score is preserved.\n\nAuthorization for comment restoration depends on the context: comment authors can restore their own deleted comments within reasonable timeframes, community moderators can restore comments removed as part of moderation actions in their communities, and platform administrators can restore any comment platform-wide. The operation validates that the requesting user has appropriate permissions before executing the restoration.\n\nThe restored comment retains all its original attributes including content text, creation timestamp, vote score, depth level, and threading relationships. Child replies that were preserved during deletion remain connected to the restored parent comment. The comment immediately becomes available for voting and further replies. The restored comment integrates naturally into the existing conversation thread based on its original creation time, not the restoration time.","parameters":[{"name":"commentId","description":"Unique identifier of the soft-deleted comment to restore","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The restored comment with all original content and metadata","typeName":"IRedditLikeComment"},"authorizationRoles":["member","moderator","admin"],"name":"restore","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/moderator/comments","method":"post"},"description":"Comment must be created before it can be restored from deleted state"}]},{"specification":"This operation restores a previously soft-deleted comment in the Reddit-like community platform. When a comment author or moderator deletes a comment, it is soft-deleted (marked with deleted_at timestamp) rather than permanently removed from the database. This restoration endpoint allows authorized users to recover soft-deleted comments, making them visible again in discussion threads. The operation validates that the comment exists, is currently in deleted state, and that the requesting user has appropriate permissions to restore it. Upon successful restoration, the deleted_at timestamp is cleared, and the comment becomes visible in its thread position again with all original content, votes, and threading relationships preserved.","path":"/redditLike/admin/comments/{commentId}/restore","method":"post","summary":"Restore a soft-deleted comment to make it visible again","description":"Restores a previously soft-deleted comment by clearing its deleted_at timestamp, making the comment visible again in discussion threads. This operation is essential for recovering comments that were deleted by mistake or removed during moderation but later approved through appeals.\n\nWhen a comment is deleted in the platform, it undergoes soft deletion where the deleted_at timestamp is set but the comment data remains in the reddit_like_comments table. Soft deletion preserves the comment's position in the thread hierarchy, all voting data, karma attribution, and nested reply relationships while hiding the comment content from public view. The thread structure remains intact with '[deleted]' placeholder shown to maintain conversation context.\n\nThis restoration endpoint reverses the soft deletion by clearing the deleted_at field, immediately making the comment content visible again in its original thread position. The comment appears exactly where it was before deletion, maintaining all parent-child relationships in the nested comment tree. All previously earned karma from the comment remains intact per business requirements, and the comment's vote score is preserved.\n\nAuthorization for comment restoration depends on the context: comment authors can restore their own deleted comments within reasonable timeframes, community moderators can restore comments removed as part of moderation actions in their communities, and platform administrators can restore any comment platform-wide. The operation validates that the requesting user has appropriate permissions before executing the restoration.\n\nThe restored comment retains all its original attributes including content text, creation timestamp, vote score, depth level, and threading relationships. Child replies that were preserved during deletion remain connected to the restored parent comment. The comment immediately becomes available for voting and further replies. The restored comment integrates naturally into the existing conversation thread based on its original creation time, not the restoration time.","parameters":[{"name":"commentId","description":"Unique identifier of the soft-deleted comment to restore","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The restored comment with all original content and metadata","typeName":"IRedditLikeComment"},"authorizationRoles":["member","moderator","admin"],"name":"restore","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/comments","method":"post"},"description":"Comment must be created before it can be restored from soft-deleted state"}]},{"specification":"This operation issues a community ban to a specific member, preventing them from posting, commenting, voting, or reporting content within the community. The operation operates on the reddit_like_community_bans table and is available to moderators of the specific community and platform administrators. The ban can be temporary (with expiration date) or permanent, and includes detailed reasoning for transparency and appeal processes. This operation enforces community standards by restricting disruptive users while maintaining due process through documented reasoning and appeal pathways.","path":"/redditLike/moderator/communities/{communityId}/bans","method":"post","summary":"Issue a community ban to prevent a member from participating in the community","description":"Create a new community-level ban preventing a specific member from participating in the community. This operation enforces community standards by restricting users who violate community rules or engage in disruptive behavior. The ban prevents the user from creating posts, writing comments, voting on content, and reporting content within the banned community, while still allowing them to view public content and participate in other communities.\n\nCommunity bans are scoped to a single community and do not affect the user's ability to participate elsewhere on the platform. This distributed moderation model empowers community moderators to manage their communities while limiting the scope of their authority. Only moderators assigned to the specific community or platform administrators can issue community bans.\n\nThe operation supports both temporary and permanent bans. Temporary bans include an expiration date (configurable in increments of 1 day, 7 days, 30 days, or custom duration), after which the system automatically restores the user's permissions. Permanent bans remain in effect until explicitly lifted by a moderator or administrator.\n\nAll bans require detailed reasoning through both a predefined reason category and explanatory text. The reason text is displayed to the banned user in notifications and serves as the basis for any subsequent appeals. Internal notes can be added for moderator-only context sharing. The banned user receives a notification within 5 minutes containing the ban details, duration, reason, and information about the appeal process.\n\nThis operation integrates with the moderation logging system, creating an immutable audit trail of all ban issuances. Ban history is tracked for each user to identify repeat offenders and inform future moderation decisions. The operation validates that the issuing moderator has appropriate permissions for the specified community before processing the ban request.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the ban is being issued","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ban creation details including target member, duration, and reasoning","typeName":"IRedditLikeCommunityBan.ICreate"},"responseBody":{"description":"Created community ban record with full details and expiration information","typeName":"IRedditLikeCommunityBan"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before bans can be issued within it"}]},{"specification":"This operation retrieves a paginated, filterable list of community bans for a specific community. It operates on the reddit_like_community_bans table and supports advanced search capabilities including filtering by active/inactive status, permanent/temporary bans, expiration date ranges, ban reasons, and issuing moderators. The operation is available to moderators of the specific community and platform administrators who need to review ban history, identify repeat offenders, or audit moderation decisions. Results can be sorted by various criteria and support pagination for efficient browsing of large ban lists.","path":"/redditLike/moderator/communities/{communityId}/bans","method":"patch","summary":"Retrieve filtered and paginated list of community bans with search capabilities","description":"Search and retrieve community bans for a specific community with advanced filtering, pagination, and sorting capabilities. This operation enables moderators and administrators to review ban history, identify currently banned users, track repeat offenders, and audit moderation decisions within their community.\n\nThe operation supports comprehensive filtering options to narrow down the ban list based on multiple criteria. Moderators can filter by active status to see only currently enforced bans versus historical lifted or expired bans. The system supports filtering by ban type (permanent versus temporary), expiration date ranges for identifying soon-to-expire bans, and ban reason categories for analyzing common violation patterns.\n\nSearch capabilities include text search across ban reason descriptions and internal moderator notes, enabling keyword-based discovery of specific ban incidents. The operation also supports filtering by the moderator who issued the ban, useful for reviewing individual moderator actions or training purposes.\n\nPagination controls allow efficient browsing through large ban lists with configurable page sizes. Sorting options include ordering by ban creation date (newest or oldest first), expiration date (for temporary bans), banned member username (alphabetically), or ban reason category. Default sorting displays the most recently issued bans first to prioritize current moderation activity.\n\nThis operation integrates with the reddit_like_community_bans table, accessing ban records, associated member information, issuing moderator details, and ban metadata. The response includes ban status, duration information, reasoning, and timestamps. Security enforcement ensures moderators can only access ban lists for communities they moderate, while administrators have unrestricted access to all community ban records.\n\nThe operation supports moderation workflows by providing the data foundation for ban management interfaces, moderator dashboards, and community health monitoring. It enables identification of problematic users, tracking of moderation patterns, and assessment of ban effectiveness over time.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose bans are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering community bans","typeName":"IRedditLikeCommunityBan.IRequest"},"responseBody":{"description":"Paginated list of community bans matching search criteria with ban details","typeName":"IPageIRedditLikeCommunityBan"},"authorizationRole":"moderator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific community ban by its unique identifier. The operation is used when moderators need to view the complete details of an existing ban in their community, including the banned member information, ban reason, duration, expiration details, and who issued the ban. This is associated with the reddit_like_community_bans table in the Prisma schema, which stores community-level bans issued by community moderators preventing users from participating in specific communities.","path":"/redditLike/moderator/communities/{communityId}/bans/{banId}","method":"get","summary":"Retrieve detailed information about a specific community ban","description":"Retrieve comprehensive details of a specific community ban issued within a community. This operation fetches complete ban information including the banned member's identity, the moderator who issued the ban, the reason for the ban, ban duration and expiration details, and current ban status.\n\nThis operation is primarily used by community moderators to review existing bans when managing their community's banned users list, or when users appeal bans and moderators need to review the ban details to make informed decisions about the appeal. The endpoint enables moderators to access full ban context including internal notes that may have been added by the issuing moderator.\n\nThe operation integrates with the reddit_like_community_bans table from the Prisma schema, which stores community-level bans with support for both temporary and permanent bans. The table includes soft delete support through the deleted_at field, allowing lifted bans to be preserved in audit history while being marked as inactive.\n\nSecurity considerations include ensuring only authorized moderators of the specific community can access ban details, as this information contains sensitive moderation data including internal notes and ban reasoning. The system validates that the requesting moderator has permissions for the specified community before returning ban information.\n\nThe response includes all ban metadata such as whether the ban is permanent or temporary, the expiration date for temporary bans, whether the ban is currently active, the complete ban reason provided by the issuing moderator, and any internal notes. This comprehensive view enables moderators to make informed decisions when reviewing appeals or managing community access.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the ban was issued","schema":{"type":"string","format":"uuid"}},{"name":"banId","description":"Unique identifier of the specific community ban to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the community ban including banned member, ban reason, duration, and status","typeName":"IRedditLikeCommunityBan"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/bans","method":"post"},"description":"Community ban must be created before it can be retrieved by its unique identifier"}]},{"specification":"This operation retrieves detailed information about a specific community ban by its unique identifier. The operation is used when administrators need to view the complete details of an existing ban across any community for oversight purposes, including the banned member information, ban reason, duration, expiration details, and who issued the ban. This is associated with the reddit_like_community_bans table in the Prisma schema, which stores community-level bans issued by community moderators.","path":"/redditLike/admin/communities/{communityId}/bans/{banId}","method":"get","summary":"Retrieve detailed information about a specific community ban (admin access)","description":"Retrieve comprehensive details of a specific community ban issued within any community on the platform. This operation fetches complete ban information including the banned member's identity, the moderator who issued the ban, the reason for the ban, ban duration and expiration details, and current ban status.\n\nThis operation is used by platform administrators to review community bans across any community for oversight purposes, appeal reviews, or investigation of moderation patterns. Unlike the moderator endpoint, administrators can access ban details for any community regardless of their moderator assignments, reflecting their elevated platform-wide permissions.\n\nThe operation integrates with the reddit_like_community_bans table from the Prisma schema, which stores community-level bans with support for both temporary and permanent bans. The table includes soft delete support through the deleted_at field, allowing lifted bans to be preserved in audit history.\n\nSecurity considerations include ensuring only platform administrators can access this endpoint, as it provides cross-community visibility into moderation decisions. This elevated access enables administrators to identify moderation abuse, review appeal requests, and ensure consistent application of platform policies across communities.\n\nThe response includes all ban metadata such as whether the ban is permanent or temporary, the expiration date for temporary bans, whether the ban is currently active, the complete ban reason provided by the issuing moderator, and any internal notes. This comprehensive view enables administrators to review moderation decisions and handle escalated appeals effectively.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the ban was issued","schema":{"type":"string","format":"uuid"}},{"name":"banId","description":"Unique identifier of the specific community ban to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the community ban including banned member, ban reason, duration, and status","typeName":"IRedditLikeCommunityBan"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/bans","method":"post"},"description":"Community ban must be created before it can be retrieved by administrators for oversight and review purposes"}]},{"specification":"This operation lifts a community ban by marking it as deleted through a soft delete pattern, restoring the member's access to the community. The operation sets the deleted_at timestamp on the reddit_like_community_bans table record, preserving the ban record for audit history while immediately ending ban enforcement. This is associated with the reddit_like_community_bans table which supports soft deletion through the deleted_at field.","path":"/redditLike/moderator/communities/{communityId}/bans/{banId}","method":"delete","summary":"Lift a community ban and restore member access (soft delete)","description":"Lifts a community ban by setting the deleted_at timestamp to the current time, marking the ban as inactive while preserving the complete ban record for audit history. This soft delete approach maintains the ban record in the reddit_like_community_bans table for moderation log purposes and historical review, while immediately restoring the banned member's ability to post, comment, and vote in the community.\n\nThis endpoint is used by community moderators when they decide to lift a ban, either due to successful appeal, manual removal of an expired temporary ban, or reconsideration of the ban decision. The soft delete pattern ensures that the platform maintains a complete audit trail of all moderation actions including lifted bans, supporting accountability and enabling moderators to review past ban patterns for repeat offenders.\n\nThe operation integrates with the reddit_like_community_bans table from the Prisma schema, which includes a deleted_at field specifically for soft deletion. When the deleted_at timestamp is set, the ban is no longer enforced for access control checks, but the record remains queryable by moderators and administrators for historical review and audit purposes. The complete ban history including issue date, reason, duration, and lift date is preserved.\n\nSecurity considerations include strict authorization validation ensuring only moderators of the specific community can lift bans within their communities. The operation verifies the ban exists, belongs to the specified community, and is currently active before performing the soft delete. After successful deletion, the system logs the ban removal action in the reddit_like_moderation_logs audit trail and may send a notification to the previously banned member informing them that their access has been restored.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the ban was issued","schema":{"type":"string","format":"uuid"}},{"name":"banId","description":"Unique identifier of the community ban to lift","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/bans","method":"post"},"description":"Community ban must exist before it can be lifted by moderators through soft deletion"}]},{"specification":"This operation lifts a community ban by marking it as deleted through a soft delete pattern, restoring the member's access to the community. The operation sets the deleted_at timestamp on the reddit_like_community_bans table record, preserving the ban record for audit history while immediately ending ban enforcement. This is associated with the reddit_like_community_bans table which supports soft deletion through the deleted_at field. Administrators can lift bans in any community as part of their platform-wide moderation oversight.","path":"/redditLike/admin/communities/{communityId}/bans/{banId}","method":"delete","summary":"Lift a community ban and restore member access (admin override, soft delete)","description":"Lifts a community ban by setting the deleted_at timestamp to the current time, marking the ban as inactive while preserving the complete ban record for audit history. This soft delete approach maintains the ban record in the reddit_like_community_bans table for moderation log purposes and historical review, while immediately restoring the banned member's ability to post, comment, and vote in the community.\n\nThis endpoint is used by platform administrators to override community bans as part of their elevated privileges. Administrators can lift bans in any community regardless of moderator assignments, which is essential for handling escalated appeals, correcting moderator errors, or intervening in cases of moderation abuse. The soft delete pattern ensures that the platform maintains a complete audit trail of all moderation actions including administrator interventions.\n\nThe operation integrates with the reddit_like_community_bans table from the Prisma schema, which includes a deleted_at field specifically for soft deletion. When the deleted_at timestamp is set, the ban is no longer enforced for access control checks, but the record remains queryable by moderators and administrators for historical review and audit purposes. The complete ban history including issue date, reason, duration, and lift date is preserved.\n\nSecurity considerations include strict authorization validation ensuring only platform administrators can access this endpoint. The operation verifies the ban exists and belongs to the specified community before performing the soft delete. After successful deletion, the system logs the ban removal action in the reddit_like_moderation_logs audit trail with the administrator's identity, and sends a notification to the previously banned member informing them that their access has been restored by platform administration.","parameters":[{"name":"communityId","description":"Unique identifier of the community where the ban was issued","schema":{"type":"string","format":"uuid"}},{"name":"banId","description":"Unique identifier of the community ban to lift","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/admin/platform/suspensions","method":"post"},"description":"Member must exist before community ban can be lifted - validating member existence through suspension creation capability ensures the member account is valid"}]},{"specification":"This operation creates a new platform-wide suspension for a member user, preventing them from accessing the entire platform. Platform suspensions are more severe than community bans and can only be issued by administrators. The operation associates with the reddit_like_platform_suspensions table in the Prisma schema and enforces platform-wide policy violations. The suspension can be temporary with an expiration date or permanent, and includes detailed reasoning for transparency and appeal processes. This operation implements the business requirements defined in section 7.3 of the Content Moderation and Reporting document, specifically requirements R-BAN-010 through R-BAN-014 for platform suspension functionality.","path":"/redditLike/admin/platform/suspensions","method":"post","summary":"Issue a platform-wide suspension for a member user","description":"Issue a platform-wide suspension that prevents a member from accessing the entire Reddit-like community platform. This operation is restricted to administrators only and represents the most severe moderation action available, affecting the user's ability to perform any authenticated actions across all communities.\n\nPlatform suspensions are issued for serious violations of platform-wide policies including repeated rule violations across multiple communities, severe harassment, spam campaigns, hate speech, illegal content posting, or ban evasion attempts. Unlike community-level bans which are scoped to specific communities, platform suspensions deny all platform access and prevent the user from logging in.\n\nThe operation creates a new record in the reddit_like_platform_suspensions table with references to the suspended member and the issuing administrator. Per business requirements R-BAN-013, suspensions can be temporary (3 days, 7 days, 30 days) or permanent account termination. Temporary suspensions automatically restore user access when the expiration date passes through system automation.\n\nWhen a suspension is issued, the system sends an email notification to the user's registered email address immediately per requirement R-BAN-020, including the suspension type, duration, detailed reason, and information about the appeal process per R-BAN-021. The notification includes a direct link to the appeal submission form.\n\nAll suspension actions are logged in the reddit_like_moderation_logs table per requirement R-BAN-018, creating an immutable audit trail with the administrator identity, suspension reason, timestamp, and IP address for accountability and legal compliance. The suspension record stores both a predefined reason category and detailed reason text for transparency.\n\nSuspended users attempting to log in will be denied access with a message displaying the suspension reason and duration per requirement R-BAN-012. For temporary suspensions, the message includes the expiration date. The system enforces suspensions by validating user status during authentication workflows and rejecting login attempts from suspended accounts.","parameters":[],"requestBody":{"description":"Suspension details including the member to suspend, reason category, detailed explanation, duration, and optional internal notes","typeName":"IRedditLikePlatformSuspension.ICreate"},"responseBody":{"description":"Created platform suspension record with suspension ID, member information, reason, duration, and timestamps","typeName":"IRedditLikePlatformSuspension"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of platform suspensions with advanced search capabilities. It operates on the reddit_like_platform_suspensions table and supports filtering by suspension status (active/expired), permanence type, date ranges, and member identifiers. The operation is restricted to administrators who need to monitor and manage platform-wide suspensions. The search functionality includes sorting options, pagination for handling large suspension datasets, and filtering by multiple criteria to help administrators efficiently manage platform safety and review suspension history.","path":"/redditLike/admin/platform/suspensions","method":"patch","summary":"Search and retrieve filtered platform suspensions with pagination","description":"Retrieve a comprehensive, filtered, and paginated list of all platform-wide suspensions issued by administrators. This operation provides advanced search and filtering capabilities for monitoring platform safety, reviewing suspension history, analyzing suspension patterns, and managing active suspensions across the entire platform.\n\nThe operation queries the reddit_like_platform_suspensions table with support for multiple filter criteria including suspension status (active, expired, lifted), permanence type (temporary or permanent), member identifiers, issuing administrator, date ranges, and reason categories. Results can be sorted by various fields including creation date, expiration date, and member username for flexible data exploration.\n\nThis search functionality serves multiple administrative use cases. Administrators monitoring platform health can filter for active suspensions to see currently banned users. Historical analysis requires filtering by date ranges to understand suspension trends over time. When reviewing specific cases, administrators can filter by member ID or username to see a user's complete suspension history across all incidents.\n\nPagination support is essential given the potential for thousands of suspension records as the platform scales. The operation returns paginated results with configurable page sizes, total count metadata, and navigation information. This enables efficient browsing through large suspension datasets without performance degradation.\n\nSecurity considerations include strict role-based access control ensuring only administrators can access suspension data, which contains sensitive information about user violations and platform policy enforcement. The operation integrates with the authentication system to verify administrator credentials before processing requests.\n\nThe response includes comprehensive suspension information from the reddit_like_platform_suspensions table including suspension reasons, durations, status, related member details, and audit timestamps. For each suspension, the system provides the member username, suspension category, detailed reason text, permanence flag, expiration date (if applicable), active status, issuing administrator, and creation timestamp.\n\nThis operation supports the administrator dashboard and moderation oversight requirements specified in the Content Moderation and Reporting document, enabling administrators to fulfill their platform governance responsibilities through efficient suspension data access and analysis.","parameters":[],"requestBody":{"description":"Search criteria including filters for status, permanence, date ranges, member information, and pagination parameters","typeName":"IRedditLikePlatformSuspension.IRequest"},"responseBody":{"description":"Paginated list of platform suspension records matching the search criteria with pagination metadata","typeName":"IPageIRedditLikePlatformSuspension"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific platform suspension by its unique identifier. It operates on the reddit_like_platform_suspensions table from the Prisma schema and provides complete suspension details including the suspended member, issuing administrator, suspension reason, duration, and current status. This endpoint is essential for administrators to review suspension details, verify suspension parameters, and prepare for appeal reviews.","path":"/redditLike/admin/platform/suspensions/{suspensionId}","method":"get","summary":"Retrieve detailed information about a specific platform suspension","description":"Retrieve comprehensive details about a platform-wide user suspension identified by its unique suspension identifier. This operation provides administrators with complete visibility into suspension records, including the suspended member's identity, the administrator who issued the suspension, the suspension reason category and detailed explanation, whether the suspension is temporary or permanent, the expiration date for temporary suspensions, and the current active status.\n\nThis endpoint is critical for administrative oversight and transparency in the platform's moderation system. Administrators use this operation to review suspension decisions before handling appeals, verify that suspensions were issued correctly with appropriate reasoning, and gather context when users contact support about their suspended accounts.\n\nThe suspension information integrates with the reddit_like_platform_suspensions table as defined in the Prisma schema. The response includes all suspension metadata such as suspension reason category (repeated_violations, harassment, spam, hate_speech, illegal_content, ban_evasion, other), the detailed suspension reason text that was communicated to the user, internal notes visible only to administrators for team context, and timestamps tracking when the suspension was issued and last modified.\n\nSecurity considerations include restricting this endpoint to administrator access only, as suspension details contain sensitive moderation information and internal notes. The endpoint enforces authorization to ensure only platform administrators can view suspension records. Suspended users cannot access their own suspension details through this endpoint - they receive suspension information through email notifications per the moderation requirements.\n\nRelated operations include the platform suspension creation endpoint (POST /platform/suspensions) which administrators use to issue new suspensions, the suspension appeal review endpoint where administrators handle user appeals, and the moderation logs endpoint which provides the complete audit trail of all suspension-related actions.","parameters":[{"name":"suspensionId","description":"Unique identifier of the platform suspension to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed platform suspension information including suspended member, issuing administrator, reason, duration, and status","typeName":"IRedditLikePlatformSuspension"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/platform/suspensions","method":"post"},"description":"Platform suspension must be created before it can be retrieved by its unique identifier"}]},{"specification":"This operation lifts (removes) an existing platform suspension, restoring the suspended member's access to the entire platform. It operates on the reddit_like_platform_suspensions table from the Prisma schema by setting the deleted_at soft delete timestamp and updating the is_active flag to false. This endpoint is used by administrators to manually lift suspensions before their expiration date, respond to successful appeals, or correct erroneous suspension decisions.","path":"/redditLike/admin/platform/suspensions/{suspensionId}","method":"delete","summary":"Lift a platform suspension and restore user access","description":"Remove an active platform suspension by setting the soft delete timestamp and deactivating the suspension record. This operation restores the suspended member's full access to the platform, allowing them to log in and participate in all communities again. The suspension record is preserved in the database through soft deletion to maintain the complete moderation audit trail and suspension history.\n\nThis endpoint is exclusively available to platform administrators who have the authority to lift platform-wide suspensions. Administrators use this operation in several scenarios: when handling successful appeals where the suspension is overturned, when correcting suspension errors or mistaken identity cases, when reducing penalties as part of partial appeal acceptance, or when implementing early release for users who have demonstrated rehabilitation.\n\nThe operation updates the reddit_like_platform_suspensions table as defined in the Prisma schema. When a suspension is lifted, the system sets the deleted_at field to the current timestamp (implementing the soft delete pattern present in the schema), updates the is_active field to false to disable the suspension, and records the updated_at timestamp. The suspension record remains in the database for historical tracking, audit compliance, and pattern analysis of repeat offenders.\n\nSecurity and authorization considerations include strict administrator-only access enforcement, logging of all suspension lift actions in the reddit_like_moderation_logs table for accountability, and notification requirements that inform the previously suspended user via email that their access has been restored. The operation validates that the suspension exists and is currently active before attempting to lift it.\n\nRelated operations include the suspension retrieval endpoint (GET /platform/suspensions/{suspensionId}) for viewing suspension details before lifting, the suspension creation endpoint (POST /platform/suspensions) for issuing new suspensions, the appeal review endpoint where administrators decide whether to lift suspensions based on user appeals, and the moderation logs endpoint which tracks all suspension lifecycle events including issuance and lifting.\n\nImportant business rules enforced by this operation include that lifted suspensions cannot be reactivated (a new suspension must be issued instead), all existing user sessions are invalidated when a suspension is lifted to force fresh authentication, and the user receives notification of the restoration within the notification SLA timeframe.","parameters":[{"name":"suspensionId","description":"Unique identifier of the platform suspension to lift","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/admin/platform/suspensions","method":"post"},"description":"Platform suspension must exist before it can be lifted. The suspension record needs to be created first through the suspension creation endpoint."}]},{"specification":"This operation allows users to submit appeals challenging moderation actions taken against their content or account. Appeals are a core component of the platform's due process system, enabling users to contest content removals, community bans, or platform suspensions. The operation creates a new appeal record and routes it to the appropriate review queue (community moderators for community-level actions, administrators for platform-level actions). Each appeal must reference the specific moderation action, ban, or suspension being contested and include the user's written reasoning for why the action should be reversed. The appeal is associated with the reddit_like_moderation_appeals table and triggers notifications to the appropriate review queue.","path":"/redditLike/member/moderation/appeals","method":"post","summary":"Submit a new appeal challenging a moderation action, community ban, or platform suspension","description":"Create a new moderation appeal allowing users to contest decisions made by moderators or administrators. This operation implements the platform's due process system as defined in the Content Moderation and Reporting requirements section 8.\n\nWhen a user submits an appeal, they must provide written reasoning explaining why they believe the moderation action should be reversed. The appeal text must be between 50 and 1000 characters per business requirements R-APP-006, ensuring sufficient detail while preventing excessive submissions. Users must identify what they are appealing (content removal, community ban, or platform suspension) through the appeal_type field.\n\nThe system validates that the user is the affected party for the moderation action being appealed. For content removals, the user must be the content author. For community bans, the user must be the banned member. For platform suspensions, the user must be the suspended account. This prevents users from appealing actions that don't affect them.\n\nAppeals are routed based on the action type per requirements R-APP-011 and R-APP-012. Community-level appeals (content removals, community bans) are sent to the community's moderator review queue. Platform suspension appeals are routed to the administrator review queue. The routing ensures the appropriate authority level reviews each appeal type.\n\nThe system enforces the one appeal per action rule specified in requirements R-APP-002 and R-APP-003. Users cannot submit multiple appeals for the same moderation action, preventing appeal spam and ensuring efficient review processes. If a user has already appealed a specific action, subsequent appeal attempts are rejected.\n\nUpon successful submission, the appeal is marked with status 'pending' and assigned an expected resolution timestamp calculated based on appeal type. Community appeals target 2-3 day review, platform suspensions target 5-7 days, and escalated appeals target 7-10 days per requirement R-APP-029. These expected timeframes enable SLA monitoring and automated reminder notifications.\n\nThe content author receives immediate confirmation of appeal submission per requirement R-APP-009, including the expected review timeframe and information about the review process. The appeal enters the moderation queue where moderators or administrators can review, approve, deny, or reduce penalties.\n\nThis operation integrates with the reddit_like_moderation_appeals table to persist appeal data, the reddit_like_moderation_logs table to create audit trail entries, and the notification system to alert review queues and provide status updates to appellants. Security considerations include validating that the requesting user has permission to appeal the specific action and preventing abuse through rate limiting on appeal submissions.","parameters":[],"requestBody":{"description":"Appeal submission data including the action being appealed, appeal type, and user's written reasoning","typeName":"IRedditLikeModerationAppeal.ICreate"},"responseBody":{"description":"Created appeal record with unique identifier, status, expected resolution timeframe, and confirmation details","typeName":"IRedditLikeModerationAppeal"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/moderation/actions","method":"post"},"description":"Moderation action must exist before it can be appealed. Users can only appeal actions that have been taken against their content."},{"endpoint":{"path":"/redditLike/moderator/communities/{communityId}/bans","method":"post"},"description":"Community ban must exist before it can be appealed. Users need to have an active or completed ban to submit an appeal."},{"endpoint":{"path":"/redditLike/admin/platform/suspensions","method":"post"},"description":"Platform suspension must exist before it can be appealed. Users can only appeal suspensions that have been issued against their accounts."}]},{"specification":"This operation retrieves a filtered and paginated list of moderation appeals based on search criteria and user permissions. Appeals can be searched by status, appeal type, date ranges, and other filtering parameters. The operation supports different access levels: members can only view their own submitted appeals, moderators can view appeals for their communities, and administrators can view all appeals platform-wide. The results are paginated with configurable page size and sorted by submission date, priority, or expected resolution timeframe. This operation integrates with the reddit_like_moderation_appeals table and respects role-based access control for data filtering.","path":"/redditLike/member/moderation/appeals","method":"patch","summary":"Search and retrieve a filtered, paginated list of moderation appeals based on user permissions","description":"Retrieve moderation appeals with advanced filtering, sorting, and pagination capabilities. This operation provides role-specific access to appeals based on the requesting user's authorization level and implements the appeal review queue functionality defined in Content Moderation requirements section 8.3.\n\nFor members (regular authenticated users), this operation returns only appeals they have personally submitted. Members can view their appeal history, track the status of pending appeals, and review decisions made on their past appeals. This enables users to monitor their own due process interactions without accessing other users' appeals. The filtering is automatically scoped to appellant_member_id matching the authenticated user's ID.\n\nFor moderators, this operation returns appeals related to communities they moderate. Moderators see appeals challenging actions taken in their communities, including content removal appeals and community ban appeals per requirement R-APP-011. The system filters results to only show appeals where the community_id (inferred from the moderation action being appealed) matches communities where the moderator has active moderator status. This ensures moderators only access appeals within their moderation scope.\n\nFor administrators, this operation returns all appeals across the entire platform. Administrators can view community-level appeals, escalated appeals, and platform suspension appeals per requirement R-APP-012. No community filtering is applied for admin users, enabling platform-wide appeal oversight and the ability to review escalated cases that moderators couldn't resolve.\n\nThe operation supports comprehensive filtering capabilities to help reviewers manage appeal queues efficiently. Filter options include appeal status (pending, under_review, upheld, overturned, reduced), appeal type (content_removal, community_ban, platform_suspension), submission date ranges, escalation status, and expected resolution timeframes. These filters enable moderators and administrators to prioritize urgent appeals, identify overdue reviews per requirement R-APP-030, and organize their review workflows.\n\nSorting options include submission time (newest or oldest first), expected resolution date (most urgent first), appeal type, and status. The default sorting shows pending appeals ordered by expected resolution date to surface the most time-sensitive reviews first. This aligns with the SLA monitoring requirements and helps ensure timely appeal resolution.\n\nPagination parameters allow control over page size and navigation through large appeal datasets. The response includes total appeal counts, current page information, and pagination metadata to support efficient queue browsing. For moderators managing active communities and administrators handling platform-wide appeals, pagination prevents overwhelming data loads while maintaining comprehensive access.\n\nThe operation integrates with the reddit_like_moderation_appeals table for appeal data retrieval, joins with reddit_like_moderation_actions, reddit_like_community_bans, and reddit_like_platform_suspensions tables to provide complete appeal context, and enforces row-level security based on user roles to ensure proper access control. Performance optimizations include indexed queries on status and expected_resolution_at fields to support fast filtering and sorting.\n\nSecurity considerations include strict role-based access control enforced at the database query level, validation that moderators only access appeals for their assigned communities, prevention of unauthorized access to other users' appeal data, and audit logging of all appeal list accesses for security monitoring. The operation also implements rate limiting to prevent abuse of the search functionality.","parameters":[],"requestBody":{"description":"Search criteria, filters, sorting preferences, and pagination parameters for retrieving moderation appeals","typeName":"IRedditLikeModerationAppeal.IRequest"},"responseBody":{"description":"Paginated list of moderation appeal records matching the search criteria, filtered by user authorization level","typeName":"IPageIRedditLikeModerationAppeal"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific moderation appeal by its unique identifier. It operates on the reddit_like_moderation_appeals table from the Prisma schema and returns complete appeal information including the appellant's submission, review status, reviewer decisions, and related moderation context. This endpoint serves moderators reviewing appeals in their communities and administrators handling escalated or platform-level appeals.","path":"/redditLike/moderator/moderation/appeals/{appealId}","method":"get","summary":"Retrieve detailed information about a specific moderation appeal","description":"Retrieve comprehensive details about a specific moderation appeal identified by its unique ID from the reddit_like_moderation_appeals table. This operation provides moderators and administrators with complete appeal information necessary for review and decision-making.\n\nThe appeal details include the appellant member's identity, the type of moderation action being contested (content removal, community ban, or platform suspension), the user's written appeal reasoning, current review status, and any decisions made by reviewing moderators or administrators. The response incorporates related context such as the original moderation action details, associated bans or suspensions, and the complete timeline of appeal progression.\n\nSecurity and authorization are critical for this operation. Moderators can only access appeals for communities they moderate, while administrators have platform-wide access to all appeals including escalated cases. The operation enforces role-based access control to prevent unauthorized access to sensitive moderation information and protects reporter privacy by not exposing reporter identities in appeal details.\n\nThis operation integrates with the moderation workflow by providing the detailed information needed for appeal review decisions. Reviewers use this data to understand the original violation, assess the user's appeal reasoning, review any prior moderation history, and make informed decisions about upholding, overturning, or reducing penalties. The appeal information also supports the escalation workflow where community-level appeals can be elevated to administrator review.\n\nThe response includes all fields from the reddit_like_moderation_appeals table including appellant_member_id, moderation_action_id, community_ban_id, platform_suspension_id, reviewer_moderator_id, reviewer_admin_id, appeal_type, appeal_text, status, decision_explanation, is_escalated, expected_resolution_at, and relevant timestamps. Related entity details may be included to provide complete context without requiring additional API calls.","parameters":[{"name":"appealId","description":"Unique identifier of the moderation appeal to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation appeal information including appeal details, review status, and related moderation context","typeName":"IRedditLikeModerationAppeal"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/moderation/appeals","method":"post"},"description":"Moderation appeal must be created before it can be retrieved by ID"}]},{"specification":"This operation retrieves detailed information about a specific moderation appeal by its unique identifier. It operates on the reddit_like_moderation_appeals table from the Prisma schema and returns complete appeal information including the appellant's submission, review status, reviewer decisions, and related moderation context. This endpoint serves moderators reviewing appeals in their communities and administrators handling escalated or platform-level appeals.","path":"/redditLike/admin/moderation/appeals/{appealId}","method":"get","summary":"Retrieve detailed information about a specific moderation appeal","description":"Retrieve comprehensive details about a specific moderation appeal identified by its unique ID from the reddit_like_moderation_appeals table. This operation provides moderators and administrators with complete appeal information necessary for review and decision-making.\n\nThe appeal details include the appellant member's identity, the type of moderation action being contested (content removal, community ban, or platform suspension), the user's written appeal reasoning, current review status, and any decisions made by reviewing moderators or administrators. The response incorporates related context such as the original moderation action details, associated bans or suspensions, and the complete timeline of appeal progression.\n\nSecurity and authorization are critical for this operation. Moderators can only access appeals for communities they moderate, while administrators have platform-wide access to all appeals including escalated cases. The operation enforces role-based access control to prevent unauthorized access to sensitive moderation information and protects reporter privacy by not exposing reporter identities in appeal details.\n\nThis operation integrates with the moderation workflow by providing the detailed information needed for appeal review decisions. Reviewers use this data to understand the original violation, assess the user's appeal reasoning, review any prior moderation history, and make informed decisions about upholding, overturning, or reducing penalties. The appeal information also supports the escalation workflow where community-level appeals can be elevated to administrator review.\n\nThe response includes all fields from the reddit_like_moderation_appeals table including appellant_member_id, moderation_action_id, community_ban_id, platform_suspension_id, reviewer_moderator_id, reviewer_admin_id, appeal_type, appeal_text, status, decision_explanation, is_escalated, expected_resolution_at, and relevant timestamps. Related entity details may be included to provide complete context without requiring additional API calls.","parameters":[{"name":"appealId","description":"Unique identifier of the moderation appeal to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation appeal information including appeal details, review status, and related moderation context","typeName":"IRedditLikeModerationAppeal"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/moderation/appeals","method":"post"},"description":"Moderation appeal must be created before it can be retrieved by ID for review"}]},{"specification":"This operation allows moderators and administrators to review and make decisions on moderation appeals. It operates on the reddit_like_moderation_appeals table, updating appeal status and recording review decisions. Moderators handle community-level appeals (content removal, community bans) for their communities, while administrators handle platform suspension appeals and escalated cases. The operation validates reviewer permissions, processes the decision (uphold, overturn, reduce penalty), applies appropriate actions to reverse or modify penalties, updates appeal status, and sends notifications to appellants.","path":"/redditLike/moderator/moderation/appeals/{appealId}/review","method":"post","summary":"Review and make a decision on a moderation appeal","description":"Process a moderation appeal review by recording the reviewer's decision and applying appropriate actions based on the decision outcome. This operation handles the complete appeal decision workflow including validation, action execution, status updates, and user notification as specified in the Content Moderation and Reporting requirements.\n\nThe appeal review process begins with authorization validation to ensure the reviewer has appropriate permissions for the appeal type. Moderators can review appeals for moderation actions taken in communities they moderate, while administrators handle platform suspension appeals and escalated community appeals. The operation enforces the proper review authority based on appeal_type and community context from the reddit_like_moderation_appeals table.\n\nWhen processing an appeal decision, the operation supports three decision types as defined in requirements R-APP-016. An 'uphold' decision maintains the original moderation action without changes, keeping content removed or bans active. An 'overturn' decision completely reverses the moderation action within 1 minute per R-APP-018, restoring removed content, lifting community bans, or removing platform suspensions. A 'reduce_penalty' decision partially accepts the appeal per R-APP-019, applying modified penalties such as reducing permanent bans to temporary bans or shortening ban durations.\n\nThe operation updates the reddit_like_moderation_appeals table fields including status (to 'upheld', 'overturned', or 'reduced'), reviewer_moderator_id or reviewer_admin_id depending on reviewer role, decision_explanation with the required written explanation per R-APP-020, and reviewed_at timestamp. When decisions are overturned, the operation triggers corresponding actions on related tables such as updating deleted_at on reddit_like_posts or reddit_like_comments for content restoration, setting is_active to false on reddit_like_community_bans or reddit_like_platform_suspensions, or modifying expiration_date for penalty reductions.\n\nNotification requirements per R-APP-021 and R-APP-022 mandate sending appeal decision notifications to appellants within 5 minutes including the decision outcome, reviewer explanation, any penalty changes, and information about escalation options or finality. For denied community appeals per R-APP-023, users are informed they may escalate to administrators. For denied platform appeals per R-APP-024, users are notified the decision is final. The operation creates entries in reddit_like_moderation_logs to maintain complete audit trail of appeal decisions per logging requirements.\n\nThe review decision is submitted through the request body containing the decision type, required written explanation, optional penalty modification details for 'reduce_penalty' decisions, and internal notes for moderator/administrator collaboration. The operation validates all required fields, ensures explanation meets minimum length requirements, and verifies that penalty modifications are appropriate for the decision type before processing.","parameters":[{"name":"appealId","description":"Unique identifier of the moderation appeal to review","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appeal review decision including decision type, explanation, and optional penalty modifications","typeName":"IRedditLikeModerationAppeal.IReview"},"responseBody":{"description":"Updated appeal information reflecting the review decision and applied actions","typeName":"IRedditLikeModerationAppeal"},"authorizationRoles":["moderator","admin"],"name":"review","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/moderation/appeals","method":"post"},"description":"Moderation appeal must exist before it can be reviewed and a decision can be made on it"}]},{"specification":"This operation allows moderators and administrators to review and make decisions on moderation appeals. It operates on the reddit_like_moderation_appeals table, updating appeal status and recording review decisions. Moderators handle community-level appeals (content removal, community bans) for their communities, while administrators handle platform suspension appeals and escalated cases. The operation validates reviewer permissions, processes the decision (uphold, overturn, reduce penalty), applies appropriate actions to reverse or modify penalties, updates appeal status, and sends notifications to appellants.","path":"/redditLike/admin/moderation/appeals/{appealId}/review","method":"post","summary":"Review and make a decision on a moderation appeal","description":"Process a moderation appeal review by recording the reviewer's decision and applying appropriate actions based on the decision outcome. This operation handles the complete appeal decision workflow including validation, action execution, status updates, and user notification as specified in the Content Moderation and Reporting requirements.\n\nThe appeal review process begins with authorization validation to ensure the reviewer has appropriate permissions for the appeal type. Moderators can review appeals for moderation actions taken in communities they moderate, while administrators handle platform suspension appeals and escalated community appeals. The operation enforces the proper review authority based on appeal_type and community context from the reddit_like_moderation_appeals table.\n\nWhen processing an appeal decision, the operation supports three decision types as defined in requirements R-APP-016. An 'uphold' decision maintains the original moderation action without changes, keeping content removed or bans active. An 'overturn' decision completely reverses the moderation action within 1 minute per R-APP-018, restoring removed content, lifting community bans, or removing platform suspensions. A 'reduce_penalty' decision partially accepts the appeal per R-APP-019, applying modified penalties such as reducing permanent bans to temporary bans or shortening ban durations.\n\nThe operation updates the reddit_like_moderation_appeals table fields including status (to 'upheld', 'overturned', or 'reduced'), reviewer_moderator_id or reviewer_admin_id depending on reviewer role, decision_explanation with the required written explanation per R-APP-020, and reviewed_at timestamp. When decisions are overturned, the operation triggers corresponding actions on related tables such as updating deleted_at on reddit_like_posts or reddit_like_comments for content restoration, setting is_active to false on reddit_like_community_bans or reddit_like_platform_suspensions, or modifying expiration_date for penalty reductions.\n\nNotification requirements per R-APP-021 and R-APP-022 mandate sending appeal decision notifications to appellants within 5 minutes including the decision outcome, reviewer explanation, any penalty changes, and information about escalation options or finality. For denied community appeals per R-APP-023, users are informed they may escalate to administrators. For denied platform appeals per R-APP-024, users are notified the decision is final. The operation creates entries in reddit_like_moderation_logs to maintain complete audit trail of appeal decisions per logging requirements.\n\nThe review decision is submitted through the request body containing the decision type, required written explanation, optional penalty modification details for 'reduce_penalty' decisions, and internal notes for moderator/administrator collaboration. The operation validates all required fields, ensures explanation meets minimum length requirements, and verifies that penalty modifications are appropriate for the decision type before processing.","parameters":[{"name":"appealId","description":"Unique identifier of the moderation appeal to review","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appeal review decision including decision type, explanation, and optional penalty modifications","typeName":"IRedditLikeModerationAppeal.IReview"},"responseBody":{"description":"Updated appeal information reflecting the review decision and applied actions","typeName":"IRedditLikeModerationAppeal"},"authorizationRoles":["moderator","admin"],"name":"review","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/moderation/appeals","method":"post"},"description":"Moderation appeal must be created before it can be reviewed by administrators"}]},{"specification":"This operation allows community moderators or administrators to escalate a moderation appeal to platform administrators for higher-level review. This is used when a community-level appeal decision is disputed or requires platform-wide policy interpretation. The escalation operation operates on the reddit_like_moderation_appeals table and updates the appeal status to route it to the administrator review queue. Per requirements R-APP-025 through R-APP-028, users can escalate denied community-level appeals to platform administrators, with the system routing escalated appeals to the admin review queue while maintaining complete appeal history including the original community moderator review and decision.","path":"/redditLike/member/moderation/appeals/{appealId}/escalate","method":"post","summary":"Escalate a community moderation appeal to platform administrators for higher-level review","description":"Escalate a community-level moderation appeal to platform administrators for higher-level review. This operation enables users who have had their community-level appeals denied by moderators to request a second review by platform administrators, as defined in requirements R-APP-025 and R-APP-026.\n\nWhen a user escalates an appeal, the system updates the reddit_like_moderation_appeals record by setting the is_escalated flag to true and changing the status to route the appeal to the administrator review queue. The escalation preserves the complete appeal history, including the original community moderator's review and decision, ensuring administrators have full context when reviewing the escalated appeal.\n\nPer requirement R-APP-027, the system limits users to one escalation per moderation action, preventing repeated escalation attempts on the same appeal. The operation validates that the appeal was previously reviewed and denied at the community level before allowing escalation. Appeals of platform-level suspensions cannot be escalated further as administrator decisions are final per R-APP-024.\n\nThe escalation process integrates with the moderation logging system defined in reddit_like_moderation_logs, creating an audit trail entry documenting the escalation action with timestamp, actor information, and appeal context. Expected resolution timeframes for escalated appeals are 7-10 days per R-APP-029, which is reflected in the expected_resolution_at timestamp calculation.\n\nThis operation requires authentication and verifies that the requesting user is the original appellant. Only the member who submitted the appeal can escalate it to administrators. The system enforces business rules ensuring appeals are eligible for escalation based on their current status and prior review outcomes.","parameters":[{"name":"appealId","description":"Unique identifier of the moderation appeal to escalate to administrators","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Updated appeal information reflecting escalation to administrator review queue","typeName":"IRedditLikeModerationAppeal"},"authorizationRoles":["member"],"name":"postByAppealid","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/moderation/appeals","method":"post"},"description":"Moderation appeal must be created before it can be escalated to administrators"}]},{"specification":"This operation retrieves a filtered and searchable list of moderation log entries from the reddit_like_moderation_logs table. The moderation logs serve as a comprehensive immutable audit trail of all moderation system activities including report submissions, actions taken, bans issued, appeals filed, and decisions made. This operation supports complex search criteria, filtering by log type, actor roles, communities, time ranges, and text search within action descriptions. Per requirements R-LOG-001 through R-LOG-005, the system maintains permanent moderation logs with complete context for accountability and legal compliance. The operation provides moderators access to logs for their communities (R-LOG-008) and administrators access to platform-wide logs (R-LOG-009), with visibility controls enforced through the authorizationRoles mechanism.","path":"/redditLike/moderator/moderation/logs","method":"patch","summary":"Search and retrieve filtered moderation log entries with pagination and advanced filtering","description":"Retrieve a filtered and paginated list of moderation log entries from the comprehensive audit trail system. This operation provides access to the reddit_like_moderation_logs table, which records all moderation system activities including report submissions, moderation actions, ban issuances, appeal submissions, and appeal decisions.\n\nThe moderation logs serve as a permanent, immutable audit trail for accountability, transparency, and legal compliance per requirements R-LOG-001 through R-LOG-005. Each log entry captures complete context including the actor who performed the action (member, moderator, or admin), the related moderation entities (reports, actions, bans, suspensions, appeals), the community context, event type, human-readable action description, and precise timestamp with second precision.\n\nThis operation supports comprehensive filtering and search capabilities to help moderators and administrators efficiently find relevant log entries. Filters include log type (report_submitted, action_taken, ban_issued, etc.), actor role (member, moderator, admin), community context, time ranges, and full-text search within action descriptions and metadata. The search functionality uses the GIN trigram index on action_description for efficient text matching.\n\nAccess control enforces requirement R-LOG-008 allowing moderators to view logs only for communities they moderate, while requirement R-LOG-009 grants administrators access to complete platform-wide moderation history. The system filters results based on the authenticated user's role and community moderation assignments, ensuring proper data access boundaries.\n\nThe operation returns paginated results with sorting options by timestamp (newest first by default per R-LOG-010), log type, or community. Each log entry includes comprehensive details about the moderation event, references to related entities (with IDs for further lookup), and metadata context. The pagination structure supports efficient browsing of large log datasets while maintaining query performance through proper indexing on log_type, created_at, actor IDs, and community_id.\n\nThis operation integrates with the broader moderation system, providing transparency into moderation decisions and enabling pattern analysis for improving moderation effectiveness. The logs support moderator accountability, user transparency (through public moderation logs per R-LOG-015 through R-LOG-018), and administrative oversight of moderation practices across the platform.","parameters":[],"requestBody":{"description":"Search criteria and filters for retrieving moderation log entries including log type, actor filters, community scope, time ranges, text search, and pagination parameters","typeName":"IRedditLikeModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log entries matching the search criteria with complete audit trail information","typeName":"IPageIRedditLikeModerationLog"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and searchable list of moderation log entries from the reddit_like_moderation_logs table. The moderation logs serve as a comprehensive immutable audit trail of all moderation system activities including report submissions, actions taken, bans issued, appeals filed, and decisions made. This operation supports complex search criteria, filtering by log type, actor roles, communities, time ranges, and text search within action descriptions. Per requirements R-LOG-001 through R-LOG-005, the system maintains permanent moderation logs with complete context for accountability and legal compliance. The operation provides moderators access to logs for their communities (R-LOG-008) and administrators access to platform-wide logs (R-LOG-009), with visibility controls enforced through the authorizationRoles mechanism.","path":"/redditLike/admin/moderation/logs","method":"patch","summary":"Search and retrieve filtered moderation log entries with pagination and advanced filtering","description":"Retrieve a filtered and paginated list of moderation log entries from the comprehensive audit trail system. This operation provides access to the reddit_like_moderation_logs table, which records all moderation system activities including report submissions, moderation actions, ban issuances, appeal submissions, and appeal decisions.\n\nThe moderation logs serve as a permanent, immutable audit trail for accountability, transparency, and legal compliance per requirements R-LOG-001 through R-LOG-005. Each log entry captures complete context including the actor who performed the action (member, moderator, or admin), the related moderation entities (reports, actions, bans, suspensions, appeals), the community context, event type, human-readable action description, and precise timestamp with second precision.\n\nThis operation supports comprehensive filtering and search capabilities to help moderators and administrators efficiently find relevant log entries. Filters include log type (report_submitted, action_taken, ban_issued, etc.), actor role (member, moderator, admin), community context, time ranges, and full-text search within action descriptions and metadata. The search functionality uses the GIN trigram index on action_description for efficient text matching.\n\nAccess control enforces requirement R-LOG-008 allowing moderators to view logs only for communities they moderate, while requirement R-LOG-009 grants administrators access to complete platform-wide moderation history. The system filters results based on the authenticated user's role and community moderation assignments, ensuring proper data access boundaries.\n\nThe operation returns paginated results with sorting options by timestamp (newest first by default per R-LOG-010), log type, or community. Each log entry includes comprehensive details about the moderation event, references to related entities (with IDs for further lookup), and metadata context. The pagination structure supports efficient browsing of large log datasets while maintaining query performance through proper indexing on log_type, created_at, actor IDs, and community_id.\n\nThis operation integrates with the broader moderation system, providing transparency into moderation decisions and enabling pattern analysis for improving moderation effectiveness. The logs support moderator accountability, user transparency (through public moderation logs per R-LOG-015 through R-LOG-018), and administrative oversight of moderation practices across the platform.","parameters":[],"requestBody":{"description":"Search criteria and filters for retrieving moderation log entries including log type, actor filters, community scope, time ranges, text search, and pagination parameters","typeName":"IRedditLikeModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log entries matching the search criteria with complete audit trail information","typeName":"IPageIRedditLikeModerationLog"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and searchable list of moderation log entries from the reddit_like_moderation_logs table. The moderation logs serve as a comprehensive immutable audit trail of all moderation system activities including report submissions, actions taken, bans issued, appeals filed, and decisions made. This operation supports complex search criteria, filtering by log type, actor roles, communities, time ranges, and text search within action descriptions. Per requirements R-LOG-001 through R-LOG-005, the system maintains permanent moderation logs with complete context for accountability and legal compliance. The operation provides moderators access to logs for their communities (R-LOG-008) and administrators access to platform-wide logs (R-LOG-009), with visibility controls enforced through the authorizationRole mechanism.","path":"/redditLike/moderation/logs","method":"patch","summary":"Search and retrieve filtered moderation log entries with pagination and advanced filtering","description":"Retrieve a filtered and paginated list of moderation log entries from the comprehensive audit trail system. This operation provides access to the reddit_like_moderation_logs table, which records all moderation system activities including report submissions, moderation actions, ban issuances, appeal submissions, and appeal decisions.\n\nThe moderation logs serve as a permanent, immutable audit trail for accountability, transparency, and legal compliance per requirements R-LOG-001 through R-LOG-005. Each log entry captures complete context including the actor who performed the action (member, moderator, or admin), the related moderation entities (reports, actions, bans, suspensions, appeals), the community context, event type, human-readable action description, and precise timestamp with second precision.\n\nThis operation supports comprehensive filtering and search capabilities to help moderators and administrators efficiently find relevant log entries. Filters include log type (report_submitted, action_taken, ban_issued, etc.), actor role (member, moderator, admin), community context, time ranges, and full-text search within action descriptions and metadata. The search functionality uses the GIN trigram index on action_description for efficient text matching.\n\nAccess control is role-based: moderators can view logs only for communities they moderate per requirement R-LOG-008, while administrators have access to complete platform-wide moderation history per requirement R-LOG-009. The system filters results based on the authenticated user's role and community moderation assignments, ensuring proper data access boundaries.\n\nThe operation returns paginated results with sorting options by timestamp (newest first by default per R-LOG-010), log type, or community. Each log entry includes comprehensive details about the moderation event, references to related entities (with IDs for further lookup), and metadata context. The pagination structure supports efficient browsing of large log datasets while maintaining query performance through proper indexing on log_type, created_at, actor IDs, and community_id.\n\nThis operation integrates with the broader moderation system, providing transparency into moderation decisions and enabling pattern analysis for improving moderation effectiveness. The logs support moderator accountability, user transparency (through public moderation logs per R-LOG-015 through R-LOG-018), and administrative oversight of moderation practices across the platform.","parameters":[],"requestBody":{"description":"Search criteria and filters for retrieving moderation log entries including log type, actor filters, community scope, time ranges, text search, and pagination parameters","typeName":"IRedditLikeModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log entries matching the search criteria with complete audit trail information","typeName":"IPageIRedditLikeModerationLog"},"authorizationRole":"moderator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation allows users to escalate a previously denied community-level moderation appeal to platform administrators for higher-level review. The operation updates an existing appeal record in the reddit_like_moderation_appeals table by setting the is_escalated flag to true and changing the status to route it to the administrator review queue. Per requirements R-APP-025 through R-APP-028, users can escalate denied community-level appeals to platform administrators, with the system routing escalated appeals to the admin review queue while maintaining complete appeal history including the original community moderator review and decision.","path":"/redditLike/member/moderation/appeals/{appealId}/escalate","method":"put","summary":"Escalate a denied community moderation appeal to platform administrators for review","description":"Update an existing moderation appeal to escalate it from community-level review to platform administrator review. This operation enables users who have had their community-level appeals denied by moderators to request a second review by platform administrators, as defined in requirements R-APP-025 and R-APP-026.\n\nWhen a user escalates an appeal, this operation updates the existing reddit_like_moderation_appeals record by setting the is_escalated boolean flag to true and changing the status field to route the appeal to the administrator review queue. The escalation preserves the complete appeal history, including the original community moderator's review and decision, ensuring administrators have full context when reviewing the escalated appeal.\n\nPer requirement R-APP-27, the system limits users to one escalation per moderation action, preventing repeated escalation attempts on the same appeal. The operation validates that the appeal was previously reviewed and denied at the community level (status = 'upheld') before allowing escalation. Appeals of platform-level suspensions cannot be escalated further as administrator decisions are final per R-APP-024.\n\nThe escalation integrates with the moderation logging system defined in reddit_like_moderation_logs, creating an audit trail entry documenting the escalation action with timestamp, actor information (the appellant member), and appeal context. Expected resolution timeframes for escalated appeals are 7-10 days per R-APP-029, which is reflected in the expected_resolution_at timestamp calculation when the escalation is processed.\n\nThis operation requires member authentication and verifies that the requesting user is the original appellant by checking that the authenticated member's ID matches the appeal's appellant_member_id. Only the member who submitted the appeal can escalate it to administrators. The system enforces business rules ensuring appeals are eligible for escalation based on their current status (must be 'upheld'/denied at community level) and appeal type (community-level appeals only, not platform suspensions).\n\nSecurity considerations include validating appeal ownership to prevent users from escalating other users' appeals, checking that the appeal hasn't already been escalated (is_escalated = false), and ensuring the appeal is in an appropriate state for escalation. The operation returns the updated appeal record showing the new escalated status and routing to the administrator review queue.","parameters":[{"name":"appealId","description":"Unique identifier of the moderation appeal to escalate to administrators","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Updated appeal information reflecting escalation to administrator review queue with is_escalated flag set to true and updated status","typeName":"IRedditLikeModerationAppeal"},"authorizationRole":"member","authorizationType":null,"name":"putByAppealid","prerequisites":[{"endpoint":{"path":"/redditLike/member/moderation/appeals","method":"post"},"description":"Moderation appeal must be created before it can be escalated to administrators"}]},{"specification":"This operation retrieves a specific moderation log entry by its unique identifier. The moderation log system tracks all moderation activities including content reports, moderator actions, bans, suspensions, appeals, and decisions. Each log entry provides a complete immutable audit trail of moderation events with full context including the actor who performed the action, the affected content or user, timestamps, and detailed action descriptions. This operation is essential for moderation transparency, accountability tracking, and investigating specific moderation events. It operates on the reddit_like_moderation_logs table which serves as the permanent historical record for all moderation system activities as defined in the Prisma schema.","path":"/redditLike/moderator/moderation/logs/{logId}","method":"get","summary":"Retrieve a specific moderation log entry by ID","description":"Retrieve detailed information about a specific moderation log entry from the platform's comprehensive audit trail. This operation returns complete details of a single moderation event including the type of action performed, who performed it (member, moderator, or administrator), what content or user was affected, associated reports or appeals, community context, and full event metadata.\n\nModeration logs serve as the immutable historical record of all moderation system activities on the platform. They provide accountability, transparency, and audit capabilities for content reports, moderator actions, community bans, platform suspensions, and appeal decisions. Each log entry captures a snapshot of a moderation event with complete context preserved for legal compliance and dispute resolution.\n\nThis operation integrates with the reddit_like_moderation_logs table as defined in the Prisma schema. The table maintains permanent records with foreign key references to related entities including content reports, moderation actions, community bans, platform suspensions, appeals, and the communities where events occurred. The logs track the actor who performed each action (which can be a member submitting a report, a moderator taking action, or an administrator making decisions), along with IP addresses for security auditing.\n\nSecurity considerations include role-based access control where moderators can view logs for their assigned communities while administrators have platform-wide log access. The operation returns complete log details including internal notes and metadata that may contain sensitive moderation context, so proper authorization verification is critical.\n\nThe log entry includes comprehensive event information such as log type categorization (report_submitted, action_taken, ban_issued, etc.), human-readable action descriptions, JSON metadata with event-specific details, and references to all related moderation entities. This enables full reconstruction of moderation event timelines and provides the transparency needed for user appeals and administrative oversight.","parameters":[{"name":"logId","description":"Unique identifier of the moderation log entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation log entry details including event type, actors, affected entities, and audit trail information","typeName":"IRedditLikeModerationLog"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific moderation log entry by its unique identifier. The moderation log system tracks all moderation activities including content reports, moderator actions, bans, suspensions, appeals, and decisions. Each log entry provides a complete immutable audit trail of moderation events with full context including the actor who performed the action, the affected content or user, timestamps, and detailed action descriptions. This operation is essential for moderation transparency, accountability tracking, and investigating specific moderation events. It operates on the reddit_like_moderation_logs table which serves as the permanent historical record for all moderation system activities as defined in the Prisma schema.","path":"/redditLike/admin/moderation/logs/{logId}","method":"get","summary":"Retrieve a specific moderation log entry by ID","description":"Retrieve detailed information about a specific moderation log entry from the platform's comprehensive audit trail. This operation returns complete details of a single moderation event including the type of action performed, who performed it (member, moderator, or administrator), what content or user was affected, associated reports or appeals, community context, and full event metadata.\n\nModeration logs serve as the immutable historical record of all moderation system activities on the platform. They provide accountability, transparency, and audit capabilities for content reports, moderator actions, community bans, platform suspensions, and appeal decisions. Each log entry captures a snapshot of a moderation event with complete context preserved for legal compliance and dispute resolution.\n\nThis operation integrates with the reddit_like_moderation_logs table as defined in the Prisma schema. The table maintains permanent records with foreign key references to related entities including content reports, moderation actions, community bans, platform suspensions, appeals, and the communities where events occurred. The logs track the actor who performed each action (which can be a member submitting a report, a moderator taking action, or an administrator making decisions), along with IP addresses for security auditing.\n\nSecurity considerations include role-based access control where moderators can view logs for their assigned communities while administrators have platform-wide log access. The operation returns complete log details including internal notes and metadata that may contain sensitive moderation context, so proper authorization verification is critical.\n\nThe log entry includes comprehensive event information such as log type categorization (report_submitted, action_taken, ban_issued, etc.), human-readable action descriptions, JSON metadata with event-specific details, and references to all related moderation entities. This enables full reconstruction of moderation event timelines and provides the transparency needed for user appeals and administrative oversight.","parameters":[{"name":"logId","description":"Unique identifier of the moderation log entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation log entry details including event type, actors, affected entities, and audit trail information","typeName":"IRedditLikeModerationLog"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of moderation log entries for a specific community. The moderation log provides a comprehensive audit trail of all moderation activities within the community including content reports, moderator actions, user bans, appeals, and decisions. This operation operates on the reddit_like_moderation_logs table which stores immutable records of every moderation event with complete context. The operation supports advanced filtering by log type, time ranges, specific actors, and related entities to help moderators and administrators track moderation patterns, review historical decisions, and ensure accountability. It integrates with the community context from reddit_like_communities to scope logs to the specific community being queried.","path":"/redditLike/moderator/communities/{communityId}/moderation-log","method":"patch","summary":"Search and retrieve moderation logs for a specific community","description":"Retrieve a filtered, paginated list of moderation log entries for a specific community, providing comprehensive audit trail access for moderators and administrators. This operation returns all moderation system activities that occurred within the specified community, including content report submissions, moderator actions on posts and comments, community ban issuances and lifts, appeal submissions and decisions, and report dismissals.\n\nThe moderation log system serves as the permanent immutable historical record of community governance and content moderation activities. It captures complete context for every moderation event including who performed the action (member reporting, moderator acting, or administrator deciding), what was affected (posts, comments, users), why the action was taken (violation categories, reasoning), and when it occurred (precise timestamps). This transparency is essential for moderation accountability, dispute resolution, and understanding community governance patterns over time.\n\nThis operation integrates with the reddit_like_moderation_logs table as defined in the Prisma schema, which maintains comprehensive audit trails with foreign key references to all related moderation entities. The table stores log type categorization, human-readable action descriptions, JSON metadata for event-specific details, and IP addresses for security auditing. The community_id foreign key enables efficient filtering of logs to specific communities.\n\nSecurity and authorization are critical for this operation. Community moderators can view logs only for communities they moderate, enabling them to review their team's moderation activities, track report handling, and ensure consistency in rule enforcement. Platform administrators have unrestricted access to logs across all communities for oversight, appeal reviews, and platform-wide moderation analytics.\n\nThe operation supports advanced filtering capabilities to help moderators efficiently navigate large log histories. Filters include log type (report_submitted, action_taken, ban_issued, etc.), time ranges for historical analysis, specific actor identification, and related entity references (specific reports, actions, bans, or appeals). The request body enables complex search queries with pagination to handle communities with extensive moderation histories.\n\nResponse data includes complete log entry details with all referenced entities (actors, affected content, related reports/actions/bans/appeals) providing full event context. The paginated structure ensures performant delivery of log data even for highly active communities with thousands of moderation events. This operation is fundamental to the public moderation log feature per requirement R-LOG-015, enabling community members to review moderation transparency while protecting sensitive internal notes and private information.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose moderation logs are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering moderation logs including log type, time ranges, actor filters, and related entity filters","typeName":"IRedditLikeModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log entries matching the search criteria with complete audit trail information","typeName":"IPageIRedditLikeModerationLog"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderation logs can be queried for that community"}]},{"specification":"This operation retrieves a filtered and paginated list of moderation log entries for a specific community. The moderation log provides a comprehensive audit trail of all moderation activities within the community including content reports, moderator actions, user bans, appeals, and decisions. This operation operates on the reddit_like_moderation_logs table which stores immutable records of every moderation event with complete context. The operation supports advanced filtering by log type, time ranges, specific actors, and related entities to help moderators and administrators track moderation patterns, review historical decisions, and ensure accountability. It integrates with the community context from reddit_like_communities to scope logs to the specific community being queried.","path":"/redditLike/admin/communities/{communityId}/moderation-log","method":"patch","summary":"Search and retrieve moderation logs for a specific community","description":"Retrieve a filtered, paginated list of moderation log entries for a specific community, providing comprehensive audit trail access for moderators and administrators. This operation returns all moderation system activities that occurred within the specified community, including content report submissions, moderator actions on posts and comments, community ban issuances and lifts, appeal submissions and decisions, and report dismissals.\n\nThe moderation log system serves as the permanent immutable historical record of community governance and content moderation activities. It captures complete context for every moderation event including who performed the action (member reporting, moderator acting, or administrator deciding), what was affected (posts, comments, users), why the action was taken (violation categories, reasoning), and when it occurred (precise timestamps). This transparency is essential for moderation accountability, dispute resolution, and understanding community governance patterns over time.\n\nThis operation integrates with the reddit_like_moderation_logs table as defined in the Prisma schema, which maintains comprehensive audit trails with foreign key references to all related moderation entities. The table stores log type categorization, human-readable action descriptions, JSON metadata for event-specific details, and IP addresses for security auditing. The community_id foreign key enables efficient filtering of logs to specific communities.\n\nSecurity and authorization are critical for this operation. Community moderators can view logs only for communities they moderate, enabling them to review their team's moderation activities, track report handling, and ensure consistency in rule enforcement. Platform administrators have unrestricted access to logs across all communities for oversight, appeal reviews, and platform-wide moderation analytics.\n\nThe operation supports advanced filtering capabilities to help moderators efficiently navigate large log histories. Filters include log type (report_submitted, action_taken, ban_issued, etc.), time ranges for historical analysis, specific actor identification, and related entity references (specific reports, actions, bans, or appeals). The request body enables complex search queries with pagination to handle communities with extensive moderation histories.\n\nResponse data includes complete log entry details with all referenced entities (actors, affected content, related reports/actions/bans/appeals) providing full event context. The paginated structure ensures performant delivery of log data even for highly active communities with thousands of moderation events. This operation is fundamental to the public moderation log feature per requirement R-LOG-015, enabling community members to review moderation transparency while protecting sensitive internal notes and private information.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose moderation logs are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering moderation logs including log type, time ranges, actor filters, and related entity filters","typeName":"IRedditLikeModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log entries matching the search criteria with complete audit trail information","typeName":"IPageIRedditLikeModerationLog"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before moderation logs can be queried for that community"}]},{"specification":"This operation retrieves detailed activity information for a specific moderator, including their moderation actions, reports reviewed, and other engagement metrics within the communities they moderate. The operation helps track moderator performance, accountability, and contribution levels. This operates on the reddit_like_moderators table and aggregates data from reddit_like_moderation_actions, reddit_like_content_reports, reddit_like_community_bans, and reddit_like_moderation_appeals.","path":"/redditLike/admin/moderators/{moderatorId}/activity","method":"get","summary":"Retrieve detailed activity information for a specific moderator","description":"Retrieve comprehensive activity information for a specific moderator identified by their unique moderator ID. This operation provides insights into the moderator's engagement, performance, and contribution patterns across the communities they manage.\n\nThe operation returns detailed activity metrics including the total number of reports reviewed, content removal actions taken, community bans issued, and appeals processed by the moderator. This data is essential for moderator accountability, performance evaluation, and identifying inactive moderators who may need to be removed per requirements section R-LOG-014.\n\nSecurity considerations include restricting access to moderator activity details based on the requesting user's authorization level. Only administrators and the moderator themselves should have full access to detailed activity breakdowns, while community members may see limited public activity statistics. The operation integrates with the moderation logging system defined in the Prisma schema through the reddit_like_moderation_logs table.\n\nThe activity information encompasses all moderation actions performed by the moderator across all communities they manage, including content removals from reddit_like_moderation_actions, ban issuances from reddit_like_community_bans, and appeal reviews from reddit_like_moderation_appeals. This provides a comprehensive view of the moderator's contribution to platform safety and community management.\n\nThis operation is typically used by platform administrators for moderator performance monitoring, by community managers for evaluating moderator effectiveness, and by moderators themselves for tracking their own contributions and identifying areas needing attention.","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator whose activity information is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator activity information including actions taken, reports reviewed, and engagement metrics","typeName":"IRedditLikeModerator.IActivity"},"authorizationRoles":["admin"],"name":"activity","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves pre-calculated statistical metrics for a specific moderator from the mv_reddit_like_moderator_activity_stats materialized view. It provides aggregated performance data including total reports reviewed, content removals, bans issued, appeals handled, average response times, and last activity timestamp. This operation is optimized for fast dashboard display without requiring real-time aggregation of moderation events.","path":"/redditLike/admin/moderators/{moderatorId}/statistics","method":"get","summary":"Retrieve pre-calculated statistical metrics for a specific moderator","description":"Retrieve comprehensive statistical metrics for a specific moderator identified by their unique moderator ID. This operation accesses the mv_reddit_like_moderator_activity_stats materialized view to provide pre-calculated performance and activity data without expensive real-time aggregation queries.\n\nThe operation returns aggregated metrics including the total number of reports reviewed (from reddit_like_moderation_actions where report_id is not null), total content removal actions (where action_type='remove'), total community bans issued (from reddit_like_community_bans), total appeals reviewed (from reddit_like_moderation_appeals), and average response time in hours from report submission to moderator action. These metrics provide quantitative assessment of moderator performance and engagement levels.\n\nSecurity considerations include appropriate access control to moderator statistics. Administrators should have full access to all moderator statistics for platform management purposes. Individual moderators should be able to view their own statistics for self-assessment and performance tracking. The statistics may be partially visible to community members for transparency purposes, though sensitive metrics like average response time might be restricted to moderators and administrators only.\n\nThe materialized view is refreshed periodically to maintain near-real-time accuracy while optimizing query performance. The last_calculated_at timestamp indicates data freshness, helping users understand how current the statistics are. This approach balances data accuracy with system performance, ensuring dashboard displays load quickly even for moderators with extensive activity histories.\n\nThis operation integrates with moderator activity tracking defined in the Prisma schema through the mv_reddit_like_moderator_activity_stats table. It supports use cases including moderator performance dashboards per requirements section 13.5, identification of inactive moderators per R-LOG-014 (moderators with no activity in 30 days), and platform-wide moderator effectiveness analysis. The statistics help administrators recognize high-performing moderators, identify those needing support or training, and maintain overall moderation quality across the platform.","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator whose statistical metrics are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Pre-calculated moderator activity statistics including metrics aggregated from moderation actions, reports, bans, and appeals","typeName":"IRedditLikeModeratorActivityStats"},"authorizationRoles":["admin"],"name":"statistics","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed profile information for a specific user by their unique identifier. It operates on the reddit_like_users table from the Prisma schema and returns comprehensive user profile data including username, account age, karma scores, biography, avatar, and privacy settings. This is a read operation that allows any user (guests, members, moderators, or administrators) to view public profile information, respecting the user's privacy settings (profile_privacy field). The operation serves user discovery, reputation verification, and profile browsing needs across the platform.","path":"/redditLike/users/{userId}/profile","method":"get","summary":"Retrieve detailed profile information for a specific user","description":"Retrieve comprehensive profile information for a specific user identified by their unique user ID. This operation returns detailed user profile data from the reddit_like_users table including username, account creation date, karma scores (post karma and comment karma separately), profile biography, avatar URL, and privacy settings.\n\nThis endpoint serves multiple critical use cases across the platform. When users click on a username anywhere in the platform (posts, comments, community member lists), they navigate to that user's profile to understand the user's participation history, reputation, and community standing. New users discovering a community can review moderator profiles to understand who manages the community. Users evaluating the credibility of a post or comment can check the author's karma score and account age. The profile serves as the public face of each user's platform identity.\n\nThe operation respects user privacy settings stored in the profile_privacy field. When a user has set their profile to 'members_only', the system requires authentication to view the profile and returns an error for guest requests. When a user has set their profile to 'private', the system denies access to all users except the profile owner themselves. When the profile is 'public' (default), all users including unauthenticated guests can view the profile information. Additionally, individual privacy flags like show_karma_publicly and show_subscriptions_publicly control visibility of specific profile elements.\n\nThe response includes calculated total karma (sum of post_karma and comment_karma) alongside the separate post and comment karma values, enabling users to understand the user's contribution patterns. Account age is calculated from the created_at timestamp and displayed in human-readable format. The operation performs no mutations and has no side effects, making it safe for repeated access and caching.\n\nThis operation integrates with the user roles and authentication system defined in requirement document 02-user-roles-authentication.md, respecting the four-tier role hierarchy. It also integrates with the karma system defined in document 07-karma-system.md, displaying karma scores calculated from voting activity. Profile privacy controls are specified in document 09-user-profiles-feeds.md section on privacy settings.","parameters":[{"name":"userId","description":"Unique identifier of the target user whose profile information is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user profile information including identity, reputation, and privacy-controlled data","typeName":"IRedditLikeUser.IProfile"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation updates the profile information for the authenticated user identified by the userId path parameter. It operates on the reddit_like_users table from the Prisma schema, allowing users to modify their editable profile fields including biography, avatar URL, and privacy settings. The operation enforces authorization ensuring users can only update their own profiles, with moderators and administrators having the same restrictions (no special privileges for profile editing). This is a mutation operation that validates ownership, applies business rules for profile field constraints, and updates the updated_at timestamp upon successful modification.","path":"/redditLike/member/users/{userId}/profile","method":"put","summary":"Update profile information for the authenticated user","description":"Update editable profile information for the authenticated user identified by the userId path parameter. This operation modifies user profile data in the reddit_like_users table, allowing users to customize their profile biography, avatar image, and privacy settings that control how their profile and activity are displayed to other platform members.\n\nThis endpoint serves the critical use case of profile customization and privacy management. Users access their account settings or profile page to modify their public presentation, add or update biographical information, change their profile picture, or adjust privacy controls for karma visibility, profile access, and subscription list display. The operation empowers users to manage their platform identity and control what information they share with the community.\n\nAuthorization enforcement is critical for this operation. The system must verify that the authenticated user's ID matches the userId path parameter, ensuring users can only modify their own profiles. Moderators and administrators do not have special privileges to edit other users' profiles - profile editing is strictly limited to the profile owner. If the authenticated user ID does not match the userId in the path, the system returns a permission error.\n\nEditable fields include profile_bio (limited to 200-500 characters per requirements document 02-user-roles-authentication.md section 2.3), avatar_url (must be valid image URL or uploaded image reference), show_karma_publicly (boolean controlling karma visibility), profile_privacy (values: 'public', 'members_only', 'private'), and show_subscriptions_publicly (boolean controlling subscription list visibility). The username, email, password_hash, role, karma scores (post_karma, comment_karma), and timestamps are immutable through this endpoint and must be modified through dedicated specialized endpoints.\n\nValidation rules enforce profile_bio length constraints, avatar_url format validation (must point to valid image), and profile_privacy enumeration values. The system validates that all provided values meet business requirements before applying updates. If validation fails, the system returns detailed error messages indicating which fields failed validation and why.\n\nThe operation updates the updated_at timestamp to reflect when profile modifications occurred. This timestamp is used for tracking profile edit history and identifying recently active users. The operation returns the complete updated profile information after successful modification, allowing clients to refresh their display with confirmed changes.\n\nThis operation integrates with the user authentication system defined in requirement document 02-user-roles-authentication.md, requiring valid JWT token authentication and enforcing member-level permissions. It implements privacy controls specified in document 09-user-profiles-feeds.md section 8 on profile privacy settings, allowing users to configure their public visibility preferences.","parameters":[{"name":"userId","description":"Unique identifier of the user whose profile is being updated, must match the authenticated user's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile information including biography, avatar, and privacy settings for the user","typeName":"IRedditLikeUser.IProfileUpdate"},"responseBody":{"description":"Updated user profile information reflecting the successfully applied changes","typeName":"IRedditLikeUser.IProfile"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation updates the profile information for the authenticated user identified by the userId path parameter. It operates on the reddit_like_users table from the Prisma schema, allowing users to modify their editable profile fields including biography, avatar URL, and privacy settings. The operation enforces authorization ensuring users can only update their own profiles, with moderators and administrators having the same restrictions (no special privileges for profile editing). This is a mutation operation that validates ownership, applies business rules for profile field constraints, and updates the updated_at timestamp upon successful modification.","path":"/redditLike/moderator/users/{userId}/profile","method":"put","summary":"Update profile information for the authenticated user","description":"Update editable profile information for the authenticated user identified by the userId path parameter. This operation modifies user profile data in the reddit_like_users table, allowing users to customize their profile biography, avatar image, and privacy settings that control how their profile and activity are displayed to other platform members.\n\nThis endpoint serves the critical use case of profile customization and privacy management. Users access their account settings or profile page to modify their public presentation, add or update biographical information, change their profile picture, or adjust privacy controls for karma visibility, profile access, and subscription list display. The operation empowers users to manage their platform identity and control what information they share with the community.\n\nAuthorization enforcement is critical for this operation. The system must verify that the authenticated user's ID matches the userId path parameter, ensuring users can only modify their own profiles. Moderators and administrators do not have special privileges to edit other users' profiles - profile editing is strictly limited to the profile owner. If the authenticated user ID does not match the userId in the path, the system returns a permission error.\n\nEditable fields include profile_bio (limited to 200-500 characters per requirements document 02-user-roles-authentication.md section 2.3), avatar_url (must be valid image URL or uploaded image reference), show_karma_publicly (boolean controlling karma visibility), profile_privacy (values: 'public', 'members_only', 'private'), and show_subscriptions_publicly (boolean controlling subscription list visibility). The username, email, password_hash, role, karma scores (post_karma, comment_karma), and timestamps are immutable through this endpoint and must be modified through dedicated specialized endpoints.\n\nValidation rules enforce profile_bio length constraints, avatar_url format validation (must point to valid image), and profile_privacy enumeration values. The system validates that all provided values meet business requirements before applying updates. If validation fails, the system returns detailed error messages indicating which fields failed validation and why.\n\nThe operation updates the updated_at timestamp to reflect when profile modifications occurred. This timestamp is used for tracking profile edit history and identifying recently active users. The operation returns the complete updated profile information after successful modification, allowing clients to refresh their display with confirmed changes.\n\nThis operation integrates with the user authentication system defined in requirement document 02-user-roles-authentication.md, requiring valid JWT token authentication and enforcing member-level permissions. It implements privacy controls specified in document 09-user-profiles-feeds.md section 8 on profile privacy settings, allowing users to configure their public visibility preferences.","parameters":[{"name":"userId","description":"Unique identifier of the user whose profile is being updated, must match the authenticated user's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile information including biography, avatar, and privacy settings for the user","typeName":"IRedditLikeUser.IProfileUpdate"},"responseBody":{"description":"Updated user profile information reflecting the successfully applied changes","typeName":"IRedditLikeUser.IProfile"},"authorizationRole":"moderator","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation updates the profile information for the authenticated user identified by the userId path parameter. It operates on the reddit_like_users table from the Prisma schema, allowing users to modify their editable profile fields including biography, avatar URL, and privacy settings. The operation enforces authorization ensuring users can only update their own profiles, with moderators and administrators having the same restrictions (no special privileges for profile editing). This is a mutation operation that validates ownership, applies business rules for profile field constraints, and updates the updated_at timestamp upon successful modification.","path":"/redditLike/admin/users/{userId}/profile","method":"put","summary":"Update profile information for the authenticated user","description":"Update editable profile information for the authenticated user identified by the userId path parameter. This operation modifies user profile data in the reddit_like_users table, allowing users to customize their profile biography, avatar image, and privacy settings that control how their profile and activity are displayed to other platform members.\n\nThis endpoint serves the critical use case of profile customization and privacy management. Users access their account settings or profile page to modify their public presentation, add or update biographical information, change their profile picture, or adjust privacy controls for karma visibility, profile access, and subscription list display. The operation empowers users to manage their platform identity and control what information they share with the community.\n\nAuthorization enforcement is critical for this operation. The system must verify that the authenticated user's ID matches the userId path parameter, ensuring users can only modify their own profiles. Moderators and administrators do not have special privileges to edit other users' profiles - profile editing is strictly limited to the profile owner. If the authenticated user ID does not match the userId in the path, the system returns a permission error.\n\nEditable fields include profile_bio (limited to 200-500 characters per requirements document 02-user-roles-authentication.md section 2.3), avatar_url (must be valid image URL or uploaded image reference), show_karma_publicly (boolean controlling karma visibility), profile_privacy (values: 'public', 'members_only', 'private'), and show_subscriptions_publicly (boolean controlling subscription list visibility). The username, email, password_hash, role, karma scores (post_karma, comment_karma), and timestamps are immutable through this endpoint and must be modified through dedicated specialized endpoints.\n\nValidation rules enforce profile_bio length constraints, avatar_url format validation (must point to valid image), and profile_privacy enumeration values. The system validates that all provided values meet business requirements before applying updates. If validation fails, the system returns detailed error messages indicating which fields failed validation and why.\n\nThe operation updates the updated_at timestamp to reflect when profile modifications occurred. This timestamp is used for tracking profile edit history and identifying recently active users. The operation returns the complete updated profile information after successful modification, allowing clients to refresh their display with confirmed changes.\n\nThis operation integrates with the user authentication system defined in requirement document 02-user-roles-authentication.md, requiring valid JWT token authentication and enforcing member-level permissions. It implements privacy controls specified in document 09-user-profiles-feeds.md section 8 on profile privacy settings, allowing users to configure their public visibility preferences.","parameters":[{"name":"userId","description":"Unique identifier of the user whose profile is being updated, must match the authenticated user's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile information including biography, avatar, and privacy settings for the user","typeName":"IRedditLikeUser.IProfileUpdate"},"responseBody":{"description":"Updated user profile information reflecting the successfully applied changes","typeName":"IRedditLikeUser.IProfile"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of posts created by a specific user. It operates on the reddit_like_posts table filtered by the reddit_like_member_id matching the userId path parameter. The operation supports advanced filtering, searching, sorting, and pagination to help users browse through a member's post history. This is essential for viewing user profiles and understanding a user's contribution patterns and content creation history.","path":"/redditLike/users/{userId}/posts","method":"patch","summary":"Retrieve a filtered and paginated list of posts created by a specific user","description":"Retrieve a comprehensive, filtered, and paginated list of all posts created by a specific user, supporting the user profile post history feature defined in the User Profiles and Feeds Requirements document. This operation enables users to browse through another member's contribution history, understand their posting patterns, and discover their most popular or recent content.\n\nThe operation integrates with the reddit_like_posts table, filtering posts by the reddit_like_member_id that matches the userId path parameter. It supports complex search capabilities including filtering by community, post type (text, link, image), date ranges, and vote score thresholds. Users can sort results by creation date (newest first - default), vote score (top posts first), or controversial score to find different types of content in the user's history.\n\nSecurity and privacy considerations include respecting user profile privacy settings defined in reddit_like_users.profile_privacy. If the target user has set their profile to 'private', only the user themselves can access their post history. If set to 'members_only', authentication is required. Public profiles are viewable by all users including guests. Additionally, the operation filters out soft-deleted posts (where deleted_at is not null) unless the requesting user is viewing their own profile, in which case deleted posts are included with appropriate indicators.\n\nThe response includes post summary information optimized for profile display, containing essential metadata such as post title, community name, vote score from mv_reddit_like_post_metrics, comment count, post type, and creation timestamp. For performance optimization, the operation leverages the materialized view mv_reddit_like_post_metrics to retrieve denormalized vote scores and comment counts without expensive real-time aggregation.\n\nThis operation supports the business requirement that user profiles display chronological post history with filtering and sorting capabilities, enabling both the profile owner and other community members to review posting activity. It integrates with the karma system by displaying vote scores that contribute to the user's post karma, and with the community system by showing which communities the user participates in through their posting activity.","parameters":[{"name":"userId","description":"Unique identifier of the user whose posts are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for retrieving user posts","typeName":"IRedditLikeUser.IPostsRequest"},"responseBody":{"description":"Paginated list of post summaries created by the specified user, including metadata and engagement metrics","typeName":"IPageIRedditLikePost.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"posts","prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of comments created by a specific user. It operates on the reddit_like_comments table filtered by the reddit_like_member_id matching the userId path parameter. The operation supports advanced filtering, searching, sorting, and pagination to help users browse through a member's comment history. This is essential for viewing user profiles and understanding a user's discussion participation patterns and commenting activity.","path":"/redditLike/users/{userId}/comments","method":"patch","summary":"Retrieve a filtered and paginated list of comments created by a specific user","description":"Retrieve a comprehensive, filtered, and paginated list of all comments created by a specific user, supporting the user profile comment history feature defined in the User Profiles and Feeds Requirements document. This operation enables users to browse through another member's discussion participation history, understand their commenting patterns, and discover their most insightful or popular comments.\n\nThe operation integrates with the reddit_like_comments table, filtering comments by the reddit_like_member_id that matches the userId path parameter. It supports complex search capabilities including filtering by community, post context, date ranges, vote score thresholds, and comment depth levels. Users can sort results by creation date (newest first - default), vote score (top comments first), or controversial score to find different types of commentary in the user's history.\n\nSecurity and privacy considerations include respecting user profile privacy settings defined in reddit_like_users.profile_privacy. If the target user has set their profile to 'private', only the user themselves can access their comment history. If set to 'members_only', authentication is required. Public profiles are viewable by all users including guests. Additionally, the operation filters out soft-deleted comments (where deleted_at is not null) unless the requesting user is viewing their own profile, in which case deleted comments are included with appropriate indicators.\n\nThe response includes comment summary information optimized for profile display, containing essential metadata such as comment text content (with preview truncation for long comments), the post title and community where the comment was made, vote score, nesting depth, edit status, and creation timestamp. For each comment, the operation provides context links enabling navigation to the original post and full comment thread, as required by the Comment System Requirements for comment permalinks and context viewing.\n\nThis operation supports the business requirement that user profiles display chronological comment history with filtering and sorting capabilities, enabling both the profile owner and other community members to review discussion participation. It integrates with the karma system by displaying vote scores that contribute to the user's comment karma, with the community system by showing which communities the user participates in through commenting, and with the post system by providing context about which posts generated the user's comments.","parameters":[{"name":"userId","description":"Unique identifier of the user whose comments are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for retrieving user comments","typeName":"IRedditLikeUser.ICommentsRequest"},"responseBody":{"description":"Paginated list of comment summaries created by the specified user, including context and engagement metrics","typeName":"IPageIRedditLikeComment.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"comments","prerequisites":[]},{"specification":"This operation retrieves a paginated and filtered list of communities that a specific user is subscribed to. It operates on the reddit_like_community_subscriptions junction table combined with reddit_like_communities table data to provide comprehensive subscription information. The endpoint supports advanced filtering by subscription date ranges, community categories, activity levels, and privacy types. Users can search subscribed communities by name or description keywords and sort results by subscription date, subscriber count, or community activity. This operation is essential for users managing their community subscriptions and understanding which communities they follow.","path":"/redditLike/users/{userId}/subscriptions","method":"patch","summary":"Retrieve filtered and paginated list of user's subscribed communities","description":"Retrieve a comprehensive, filtered, and paginated list of communities that a specific user has subscribed to. This operation provides advanced search and filtering capabilities for managing community subscriptions, allowing users to efficiently browse and organize their followed communities.\n\nThe operation queries the reddit_like_community_subscriptions junction table to identify all communities the user has subscribed to, joining with the reddit_like_communities table to provide full community details including name, description, subscriber counts, category information, and privacy settings. The response includes subscription metadata such as when the user subscribed to each community.\n\nFiltering capabilities enable users to narrow down their subscriptions by community category (Technology, Gaming, Sports, etc.), privacy type (public or private), subscription date ranges, and activity status (archived vs active communities). The search functionality supports partial matching on community names and descriptions using PostgreSQL trigram indexes for efficient text search.\n\nSorting options include ordering by subscription date (most recently subscribed first or oldest first), community subscriber count (most popular first), or alphabetically by community name. Pagination parameters control result set size and enable efficient browsing of large subscription lists.\n\nSecurity considerations include verifying the requesting user has permission to view the target user's subscriptions based on the profile owner's show_subscriptions_publicly privacy setting defined in reddit_like_users table. When show_subscriptions_publicly is false, only the profile owner can retrieve their subscription list. Public subscription lists are visible to all authenticated users.\n\nThis operation integrates with the community subscription system defined in the Community Management requirements document section 4, supporting the personalized feed composition workflows and subscription management interfaces. The returned data enables users to manage their subscriptions, understand their community participation patterns, and provides the foundation for personalized content feed generation.\n\nThe response includes denormalized subscriber counts from reddit_like_communities for display performance, avoiding real-time aggregation. Community metadata such as icons, banners, and primary categories enable rich UI presentation of subscription lists.","parameters":[{"name":"userId","description":"Unique identifier of the user whose subscriptions are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering parameters, sorting preferences, and pagination settings for retrieving user subscriptions","typeName":"IRedditLikeUser.ISubscriptionsRequest"},"responseBody":{"description":"Paginated list of subscribed communities with full community details and subscription metadata","typeName":"IPageIRedditLikeCommunity.ISubscriptionSummary"},"authorizationRole":"member","authorizationType":null,"name":"patchByUserid","prerequisites":[]},{"specification":"This operation allows an authenticated user to subscribe to a new community, creating a subscription relationship between the user and the target community. It operates on the reddit_like_community_subscriptions junction table, creating a new subscription record that links the user to the community. The operation validates that the community exists and is accessible, ensures the user is not already subscribed, and handles privacy restrictions for private communities. Upon successful subscription, the community's subscriber_count in reddit_like_communities is incremented, and the new subscription immediately affects the user's personalized feed composition.","path":"/redditLike/member/users/{userId}/subscriptions","method":"post","summary":"Subscribe user to a community","description":"Create a new subscription relationship between a user and a community, enabling the user to receive content from that community in their personalized feed. This operation implements the community subscription workflow defined in the Community Management requirements document section 4.2.\n\nThe operation validates several prerequisites before creating the subscription. First, it verifies that the target community exists in the reddit_like_communities table and is not soft-deleted or archived. Second, it checks whether the user is already subscribed to prevent duplicate subscription records, enforcing the unique constraint on (community_id, member_id) in reddit_like_community_subscriptions.\n\nFor public communities (privacy_type='public'), subscription is immediate and automatic. For private communities (privacy_type='private'), this operation initiates a join request workflow rather than creating an immediate subscription. Private community subscriptions require moderator approval before the subscription record is created, as specified in Community Management requirements section 8.2.\n\nWhen a valid subscription is created, the operation performs several actions atomically: creates the reddit_like_community_subscriptions record with current timestamp as subscribed_at, increments the subscriber_count field in reddit_like_communities by 1, and triggers feed composition updates to immediately include posts from the newly subscribed community in the user's personalized home feed.\n\nSecurity and authorization checks ensure that the requesting user matches the userId path parameter, preventing users from creating subscriptions on behalf of other users. The operation verifies the user is authenticated as a member, moderator, or admin, denying access to guest users per User Roles and Authentication requirements section on subscription permissions.\n\nThe operation integrates with the personalized feed system defined in User Profiles and Feeds requirements document section 9, where new subscriptions immediately affect feed composition. Posts from the subscribed community begin appearing in the user's home feed sorted by the user's preferred algorithm (hot, new, top, or controversial).\n\nResponse includes the complete created subscription record with community details, enabling the UI to immediately reflect the subscription state change without requiring a separate fetch. The response provides confirmation of subscription success, the subscription timestamp, and updated subscriber count for the community.\n\nError scenarios include attempting to subscribe to non-existent communities, duplicate subscription attempts (returns existing subscription), subscribing to archived communities (rejected with explanation), and private community subscription requests (returns pending request status instead of completed subscription).","parameters":[{"name":"userId","description":"Unique identifier of the user who is subscribing to the community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Community subscription creation data including the target community identifier to subscribe to","typeName":"IRedditLikeUser.ISubscriptionCreate"},"responseBody":{"description":"Created subscription record with community details and subscription metadata confirming successful subscription","typeName":"IRedditLikeCommunitySubscription"},"authorizationRoles":["member"],"name":"subscribe","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before a user can subscribe to it"}]},{"specification":"This operation allows an authenticated user to subscribe to a new community, creating a subscription relationship between the user and the target community. It operates on the reddit_like_community_subscriptions junction table, creating a new subscription record that links the user to the community. The operation validates that the community exists and is accessible, ensures the user is not already subscribed, and handles privacy restrictions for private communities. Upon successful subscription, the community's subscriber_count in reddit_like_communities is incremented, and the new subscription immediately affects the user's personalized feed composition.","path":"/redditLike/users/{userId}/subscriptions","method":"post","summary":"Subscribe user to a community","description":"Create a new subscription relationship between a user and a community, enabling the user to receive content from that community in their personalized feed. This operation implements the community subscription workflow defined in the Community Management requirements document section 4.2.\n\nThe operation validates several prerequisites before creating the subscription. First, it verifies that the target community exists in the reddit_like_communities table and is not soft-deleted or archived. Second, it checks whether the user is already subscribed to prevent duplicate subscription records, enforcing the unique constraint on (community_id, member_id) in reddit_like_community_subscriptions.\n\nFor public communities (privacy_type='public'), subscription is immediate and automatic. For private communities (privacy_type='private'), this operation initiates a join request workflow rather than creating an immediate subscription. Private community subscriptions require moderator approval before the subscription record is created, as specified in Community Management requirements section 8.2.\n\nWhen a valid subscription is created, the operation performs several actions atomically: creates the reddit_like_community_subscriptions record with current timestamp as subscribed_at, increments the subscriber_count field in reddit_like_communities by 1, and triggers feed composition updates to immediately include posts from the newly subscribed community in the user's personalized home feed.\n\nSecurity and authorization checks ensure that the requesting user matches the userId path parameter, preventing users from creating subscriptions on behalf of other users. The operation verifies the user is authenticated as a member, moderator, or admin, denying access to guest users per User Roles and Authentication requirements section on subscription permissions.\n\nThe operation integrates with the personalized feed system defined in User Profiles and Feeds requirements document section 9, where new subscriptions immediately affect feed composition. Posts from the subscribed community begin appearing in the user's home feed sorted by the user's preferred algorithm (hot, new, top, or controversial).\n\nResponse includes the complete created subscription record with community details, enabling the UI to immediately reflect the subscription state change without requiring a separate fetch. The response provides confirmation of subscription success, the subscription timestamp, and updated subscriber count for the community.\n\nError scenarios include attempting to subscribe to non-existent communities, duplicate subscription attempts (returns existing subscription), subscribing to archived communities (rejected with explanation), and private community subscription requests (returns pending request status instead of completed subscription).","parameters":[{"name":"userId","description":"Unique identifier of the user who is subscribing to the community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Community subscription creation data including the target community identifier to subscribe to","typeName":"IRedditLikeUser.ISubscriptionCreate"},"responseBody":{"description":"Created subscription record with community details and subscription metadata confirming successful subscription","typeName":"IRedditLikeCommunitySubscription"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before a user can subscribe to it"}]},{"specification":"This operation removes a user's subscription to a specific community, enabling users to unsubscribe from communities they no longer wish to follow. It operates on the reddit_like_community_subscriptions table from the Prisma schema, deleting the subscription relationship between the authenticated user and the specified community. This is a critical personalization feature allowing users to curate their community memberships and control what content appears in their personalized feed.","path":"/redditLike/member/users/{userId}/subscriptions/{communityId}","method":"delete","summary":"Unsubscribe a user from a specific community","description":"Remove a user's subscription to a community, allowing them to curate their content feed by unsubscribing from communities they no longer wish to follow. This operation deletes the corresponding record from the reddit_like_community_subscriptions table, immediately removing posts from that community from the user's personalized home feed.\n\nWhen a subscription is successfully removed, the system decrements the community's subscriber_count by 1 to maintain accurate community metrics. The unsubscribe action is immediate and does not require confirmation, providing a frictionless user experience for managing community memberships.\n\nSecurity considerations include verifying that the authenticated user matches the userId path parameter to prevent unauthorized subscription management. Users can only manage their own subscriptions, not those of other users. The operation validates that the subscription exists before attempting deletion and handles cases where the user is not subscribed gracefully.\n\nThis operation integrates with the personalized feed system defined in the User Profiles and Feeds requirements, immediately affecting what content the user sees in their home feed. The subscription removal is permanent until the user chooses to re-subscribe to the community.","parameters":[{"name":"userId","description":"Unique identifier of the user who is unsubscribing from the community","schema":{"type":"string","format":"uuid"}},{"name":"communityId","description":"Unique identifier of the community from which the user is unsubscribing","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must exist before unsubscribing from it"},{"endpoint":{"path":"/redditLike/users/{userId}/subscriptions","method":"post"},"description":"Subscription must be created before it can be deleted"}]},{"specification":"This operation retrieves the privacy settings for a specific user, allowing users to view and understand their current privacy configuration. It operates on the reddit_like_users table from the Prisma schema, specifically accessing the privacy-related fields including profile_privacy, show_karma_publicly, and show_subscriptions_publicly. This enables users to review their privacy preferences as defined in the User Profiles and Feeds requirements document.","path":"/redditLike/member/users/{userId}/privacy","method":"get","summary":"Retrieve user privacy settings and preferences","description":"Retrieve the complete privacy settings for a user account, including profile visibility preferences, karma display settings, and subscription list privacy controls. This operation accesses the reddit_like_users table to return the user's current privacy configuration as defined in the business requirements.\n\nThe privacy settings control multiple aspects of profile visibility as specified in the User Profiles and Feeds requirements document. Users can configure whether their profile is public (visible to all including guests), members_only (authenticated users only), or private (only visible to themselves). Additionally, users control whether their karma scores are publicly displayed and whether their community subscription list is visible to others.\n\nSecurity considerations include ensuring that users can only retrieve their own privacy settings unless they have administrative privileges. The operation validates that the authenticated user matches the userId path parameter to prevent unauthorized access to privacy configuration. Administrators may access privacy settings for any user for support and moderation purposes.\n\nThis operation integrates with the profile display system, where privacy settings determine what information is shown to different user types. The settings directly impact profile visibility, karma display, and subscription list access as defined in section 9 of the User Profiles and Feeds requirements. The operation returns the current privacy state without exposing sensitive account information beyond privacy preferences.\n\nThe privacy settings returned by this operation inform the frontend application how to render privacy controls and help users understand their current visibility settings. Users typically access this operation when reviewing or preparing to modify their privacy preferences through the account settings interface.","parameters":[{"name":"userId","description":"Unique identifier of the user whose privacy settings are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User privacy settings including profile visibility, karma display preferences, and subscription list privacy controls","typeName":"IRedditLikeUser.IPrivacySettings"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[]},{"specification":"This operation allows authenticated users to update their privacy settings controlling the visibility of their profile information, community subscriptions, and karma scores. It operates on the reddit_like_users table's privacy-related fields: profile_privacy, show_subscriptions_publicly, and show_karma_publicly. The operation enables users to control who can view their profile (public, members_only, private), whether their community subscription list is visible, and whether their karma scores are displayed publicly. This operation is essential for user privacy control and complies with the privacy requirements specified in the User Profiles and Feeds document section on Profile Privacy Settings.","path":"/redditLike/member/users/{userId}/privacy","method":"put","summary":"Update user privacy settings controlling profile visibility, subscription list, and karma display","description":"Update the privacy settings for an authenticated user's profile, enabling control over public visibility of profile information, community subscriptions, and karma scores. This operation modifies the reddit_like_users table fields that govern privacy: profile_privacy (determines overall profile visibility level), show_subscriptions_publicly (controls subscription list visibility), and show_karma_publicly (controls karma score display).\n\nThe profile_privacy field supports three visibility levels defined in the requirements: 'public' (visible to all users including guests), 'members_only' (visible only to authenticated members), and 'private' (visible only to the profile owner). The show_subscriptions_publicly field controls whether the user's community subscription list is visible to others, independent of overall profile privacy. The show_karma_publicly field determines whether post karma and comment karma scores are displayed on the user's profile.\n\nThis operation implements the privacy control requirements from the User Profiles and Feeds specification sections 10.1-10.4, ensuring users have granular control over their information visibility. When privacy settings are updated, the changes apply immediately to the public profile view, affecting how other users (both authenticated and guest) see the profile information.\n\nSecurity considerations include verifying that only the profile owner can modify their own privacy settings. The operation requires authentication and validates that the authenticated user's ID matches the userId path parameter. Unauthorized attempts to modify other users' privacy settings are rejected with appropriate error responses.\n\nThe operation integrates with the user profile display system to ensure privacy settings are respected when profiles are viewed. Changes to profile_privacy immediately affect profile accessibility, changes to show_subscriptions_publicly affect subscription list visibility, and changes to show_karma_publicly affect karma display in all contexts where the user's karma appears.","parameters":[{"name":"userId","description":"Unique identifier of the user whose privacy settings are being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated privacy settings including profile visibility level, subscription list visibility, and karma display preferences","typeName":"IRedditLikeUser.IUpdatePrivacy"},"responseBody":{"description":"Updated user privacy settings reflecting the new configuration","typeName":"IRedditLikeUser.IPrivacySettings"},"authorizationRole":"member","authorizationType":null,"name":"updatePrivacy","prerequisites":[]},{"specification":"This operation retrieves a paginated list of posts sorted by the 'hot' algorithm across all communities or filtered to specific communities. The hot sorting algorithm surfaces currently trending content by combining vote score, post age, and engagement velocity factors. This operation serves the primary content discovery mechanism for the platform, implementing the Hot Algorithm requirements from the Content Sorting Algorithms document. The operation queries the reddit_like_posts table along with mv_reddit_like_post_metrics materialized view for vote scores and comment counts, applying time decay and engagement velocity calculations to rank posts. Users can filter results by specific communities, apply time range filters, and control pagination parameters.","path":"/redditLike/posts/hot","method":"patch","summary":"Retrieve a paginated list of posts sorted by hot algorithm showing currently trending content","description":"Retrieve a filtered and paginated list of posts sorted by the hot algorithm, which surfaces currently trending and popular content based on vote momentum and recency. This operation implements the Hot Algorithm requirements from the Content Sorting Algorithms specification, calculating hot scores that balance net vote scores with time decay to ensure fresh, engaging content appears prominently.\n\nThe hot algorithm prioritizes posts that are gaining traction right now rather than simply displaying the most-voted content of all time. Posts created within the last 6-12 hours have an advantage over older posts with similar vote counts. Early engagement is rewarded, with posts gaining 10+ votes in the first hour ranking higher than posts with the same votes accumulated over 6 hours. The hot score decreases exponentially with post age, ensuring the feed remains dynamic and constantly changing.\n\nThis operation queries the reddit_like_posts table joined with mv_reddit_like_post_metrics for pre-calculated vote scores and comment counts, applying the hot score calculation formula that considers vote velocity, time decay, and engagement patterns. Posts with negative net votes are suppressed with very low hot scores, while posts receiving rapid upvotes receive velocity bonuses that boost their hot scores above linear expectations.\n\nThe request body supports comprehensive filtering options including community restrictions (filter by specific community IDs or retrieve from all communities), time range filters (limit to posts created within specified time windows), pagination controls (page number and page size), and search keywords (filter posts by title or content matching). When no community filter is provided, the operation returns hot posts from all public communities, creating a platform-wide trending feed.\n\nSecurity considerations include ensuring guests and authenticated users can both access this public content discovery endpoint. The operation respects community privacy settings, excluding posts from private communities unless the requesting user is an approved member. Deleted or moderator-removed posts are excluded from results automatically.\n\nThe operation integrates with the voting system to use current vote scores, the content creation system to respect post metadata, and the community system to enforce privacy rules. Hot scores are recalculated periodically (recommended every 5-15 minutes) to ensure feed freshness, with the materialized view providing performant access to pre-calculated metrics without impacting vote write performance.","parameters":[],"requestBody":{"description":"Search and filter criteria for hot posts including optional community filters, time ranges, pagination, and search keywords","typeName":"IRedditLikePost.IHotRequest"},"responseBody":{"description":"Paginated list of posts sorted by hot algorithm score with vote metrics, comment counts, and engagement data","typeName":"IPageIRedditLikePost.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"hot","prerequisites":[]},{"specification":"This operation retrieves a paginated list of 'hot' posts from a specific community, sorted by the Hot algorithm which surfaces trending content gaining momentum. The Hot sorting algorithm balances recency with engagement velocity to show users what's exciting right now in the community. It operates on the reddit_like_posts table filtered by the specified community, joining with mv_reddit_like_post_metrics materialized view for vote scores and comment counts. The operation applies the Hot score calculation which factors in vote score (upvotes minus downvotes), post age with time decay, and engagement velocity to prioritize fast-rising content. Posts created within the last 6-12 hours have advantage over older posts with similar vote counts, and posts gaining rapid early engagement receive velocity bonuses. The algorithm assigns very low hot scores to posts with negative net votes to suppress poor quality content. The operation supports pagination parameters to load posts in manageable batches (25-50 posts per page recommended). The request body allows filtering options such as time range restrictions, and the response returns post summary information optimized for feed display including title, author, vote scores, comment counts, and timestamps. This operation is fundamental to the default content discovery experience, as Hot sorting is the default view for community feeds and home feeds per requirements.","path":"/redditLike/communities/{communityId}/posts/hot","method":"patch","summary":"Retrieve hot-sorted trending posts from a specific community","description":"Retrieve a paginated list of posts from a specific community sorted by the Hot algorithm, which surfaces trending content that is currently gaining momentum and engagement. This operation serves as the primary content discovery mechanism for community feeds, implementing the Hot sorting algorithm defined in the Content Sorting Algorithms requirements.\n\nThe Hot sorting algorithm balances multiple factors to determine post ranking. It uses net vote score (upvotes minus downvotes) from the mv_reddit_like_post_metrics materialized view as the primary popularity factor, applies time decay so older posts gradually decrease in ranking even with high vote counts, and provides engagement velocity boosts for posts receiving rapid votes within their first hours. Posts created within the last 6-12 hours receive advantages over older posts with similar vote counts, and posts gaining 10+ votes in the first hour rank higher than posts with the same votes accumulated over 6 hours.\n\nThe operation queries the reddit_like_posts table filtered by the community_id path parameter, joining with mv_reddit_like_post_metrics for denormalized vote scores and comment counts to optimize query performance. The Hot score is recalculated periodically to ensure feed freshness and accurate trending status. Posts with net negative votes are assigned very low hot scores to suppress poor quality content, while newly created posts receive initial hot scores that provide brief visibility opportunity before time decay applies.\n\nThe request body supports pagination parameters (page number, page size) and optional filtering criteria such as time range restrictions to limit posts to recent time windows. The response returns post summary information optimized for feed display, including post ID, title, author information, community association, vote scores, comment counts, post type, creation timestamp, and Hot ranking score. Posts are ordered from highest Hot score to lowest, creating a dynamic, ever-changing feed that encourages frequent user visits.\n\nSecurity considerations include rate limiting for feed requests to prevent abuse, and appropriate filtering based on the requesting user's authorization level and community access permissions. Public communities allow all users including guests to access Hot-sorted posts, while private communities restrict access to approved members only. The operation integrates with the community subscription system to power personalized home feeds aggregating Hot posts from multiple subscribed communities.\n\nThis operation is critical for user engagement and retention, as it surfaces fresh, relevant content that keeps users engaged and returning to the platform. Performance expectations require displaying results within 2 seconds under normal load conditions, with efficient caching of frequently accessed community feeds to reduce database load.","parameters":[{"name":"communityId","description":"Unique identifier of the target community whose hot posts should be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination and filtering parameters for hot post retrieval including page number, page size, and optional time range restrictions","typeName":"IRedditLikePost.IHotRequest"},"responseBody":{"description":"Paginated list of post summary information sorted by Hot algorithm score, including post details, vote metrics, and engagement data","typeName":"IPageIRedditLikePost.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"hot","prerequisites":[{"endpoint":{"path":"/redditLike/member/communities","method":"post"},"description":"Community must be created before retrieving hot posts from that specific community"}]},{"specification":"This operation retrieves the complete list of platform-wide configuration settings stored in the reddit_like_system_settings table. System settings are key-value pairs that control platform behavior such as content limits (max_post_length, max_comment_length), rate limiting rules (posts_per_hour, votes_per_minute), feature toggles, and other configurable system parameters. Settings are categorized for organization (content, moderation, performance, features) and marked as public or internal-only. Public settings can be exposed via API to inform users about platform limits and features, while internal settings (API keys, security parameters) are restricted to administrators. The operation queries all setting records and returns them with their keys, values, descriptions, value types (string, int, double, boolean, json), categories, and public visibility flags. This enables client applications to dynamically configure behavior based on current platform settings without hardcoding limits. The operation does not require authentication as it only returns public settings, with internal-only settings filtered out based on the is_public flag. Administrators may access a separate privileged endpoint to retrieve internal settings. The response provides setting metadata to help clients interpret and use the configuration values correctly, with value_type indicating how to deserialize the string-stored values into proper data types.","path":"/redditLike/system/settings","method":"get","summary":"Retrieve platform-wide configuration settings for public consumption","description":"Retrieve the complete list of platform-wide configuration settings that control various aspects of system behavior, feature availability, and operational limits. This operation queries the reddit_like_system_settings table, which stores all configurable parameters as key-value pairs with metadata describing their purpose, type, and visibility.\n\nSystem settings encompass a wide range of platform controls including content limits (maximum post length, comment length, image file size), rate limiting rules (posts per hour, comments per minute, votes per minute), feature toggles (enable/disable specific features), moderation thresholds, and other runtime-configurable parameters. Each setting includes a unique key identifier used throughout the application to retrieve the setting value, a string-encoded value that may represent various data types, and a value_type field indicating how to deserialize the value (string, int, double, boolean, json).\n\nSettings are organized into categories such as 'content', 'moderation', 'performance', and 'features' to facilitate logical grouping and filtering in administrative interfaces. Each setting includes a human-readable description explaining what it controls and its purpose, helping administrators understand the impact of configuration changes. The is_public flag determines whether a setting can be exposed via public API or should remain internal-only for security and operational reasons.\n\nThis operation returns only public settings (where is_public = true) to prevent exposure of sensitive configuration like API keys, security parameters, or internal system controls. Public settings inform client applications about platform limits and capabilities, enabling dynamic behavior configuration without hardcoding values. For example, clients can query max_post_length to validate user input before submission, or check feature toggle settings to conditionally display UI elements.\n\nThe response includes all setting metadata: the setting key, current value, description, value type for proper deserialization, category for organization, and public visibility status. Settings are returned as a list that can be transformed into a key-value map by client applications for efficient lookup. The operation does not require authentication since it exposes only public configuration data intended for general consumption.\n\nInternal settings restricted to administrators are accessed through separate privileged endpoints not covered by this operation. This separation ensures proper access control while maintaining transparency about public platform parameters. The operation supports platform-wide consistency by providing a single source of truth for configuration values that affect user experience and platform behavior.","parameters":[],"requestBody":null,"responseBody":{"description":"Complete list of public platform configuration settings with keys, values, descriptions, types, and categorization","typeName":"IRedditLikeSystemSetting.IPublicList"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a single system setting record by its unique identifier. System settings are platform-wide configuration parameters stored as key-value pairs in the reddit_like_system_settings table, containing configurable aspects like content limits, rate limiting rules, and feature toggles. This endpoint allows administrators to fetch specific settings for review or modification workflows.","path":"/redditLike/admin/system/settings/{id}","method":"get","summary":"Retrieve a specific system setting by unique identifier","description":"Retrieve detailed information about a single system setting configuration parameter from the reddit_like_system_settings table. This operation returns complete setting details including the setting key, value, description, value type indicator, category classification, and public visibility flag.\n\nSystem settings control various platform behaviors such as maximum post length limits, rate limiting thresholds for posting and commenting, feature toggle flags, and other configurable system parameters. Each setting has a unique identifier and a semantic key name used throughout the application to retrieve configuration values.\n\nThis endpoint is primarily used by platform administrators to inspect current configuration values, understand setting purposes through descriptions, and prepare for configuration updates. The value_type field indicates how to deserialize the string value (string, int, double, boolean, json), enabling proper type handling in application logic.\n\nSecurity considerations require that this operation be restricted to administrator users only, as system settings may contain sensitive configuration data affecting platform-wide behavior. The is_public field indicates whether a setting can be safely exposed via public API, with internal-only settings (like API keys or security parameters) kept confidential.\n\nThis operation integrates with system configuration management workflows and may be used in conjunction with setting update operations to review current values before modifications. Settings are categorized (content, moderation, performance, features) to help administrators organize and locate related configuration parameters efficiently.","parameters":[{"name":"id","description":"Unique identifier of the target system setting","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete system setting configuration details including key, value, type, and metadata","typeName":"IRedditLikeSystemSetting"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/redditLike/admin/system/settings","method":"post"},"description":"System setting must be created before it can be retrieved by ID"}]},{"specification":"This operation creates a new system setting configuration parameter in the reddit_like_system_settings table. System settings are platform-wide key-value pairs that control various aspects of platform behavior including content validation limits, rate limiting rules, feature toggles, and other configurable system parameters. This endpoint allows administrators to add new configuration parameters to the system.","path":"/redditLike/admin/system/settings","method":"post","summary":"Create a new system setting configuration parameter","description":"Create a new configuration setting in the reddit_like_system_settings table to control platform behavior and features. This operation accepts setting details including the unique setting key, value, optional description, value type indicator, category classification, and public visibility flag.\n\nSystem settings provide flexible runtime configuration without requiring code changes or deployments. Each setting has a semantic key name (like 'max_post_length' or 'rate_limit_posts_per_hour') that application code uses to retrieve configuration values. The value is stored as a string with a value_type field indicating the proper deserialization type (string, int, double, boolean, json), enabling type-safe configuration handling.\n\nThe category field helps organize related settings into logical groups such as 'content', 'moderation', 'performance', or 'features', making it easier for administrators to manage configurations in admin interfaces. The is_public flag controls whether the setting can be exposed via public API endpoints, with sensitive internal settings (API keys, security parameters) marked as internal-only.\n\nThis operation is restricted to administrator users only, as system settings control critical platform behavior and may contain sensitive configuration data. Administrators should provide clear, comprehensive descriptions for all settings to help future administrators understand the purpose and impact of each configuration parameter.\n\nThe created setting is immediately available for use throughout the application, with timestamp tracking for creation and future updates. This operation integrates with platform configuration management and administrative dashboards for system maintenance and tuning.","parameters":[],"requestBody":{"description":"System setting configuration data including key, value, type, and metadata","typeName":"IRedditLikeSystemSetting.ICreate"},"responseBody":{"description":"Newly created system setting record with assigned identifier and timestamps","typeName":"IRedditLikeSystemSetting"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation updates an existing system settings configuration entry by its unique identifier. It operates on the reddit_like_system_settings table from the Prisma schema, allowing administrators to modify system parameters that control platform behavior such as content limits, rate limiting rules, feature toggles, and other configurable aspects. The operation validates that the setting exists, ensures the value conforms to the specified value_type, and updates the configuration atomically. This is a privileged operation restricted to administrators only as it controls critical platform functionality.","path":"/redditLike/admin/system/settings/{id}","method":"put","summary":"Update an existing system configuration setting by ID","description":"Update a system configuration setting in the reddit_like_system_settings table. This operation allows platform administrators to modify system parameters that control various aspects of platform behavior including content limits, rate limiting rules, feature toggles, and other configurable system settings.\n\nThis operation validates that the provided setting ID exists in the system before attempting the update. The value must conform to the data type specified in the value_type field to ensure proper deserialization by the application. Common value types include 'string', 'int', 'double', 'boolean', and 'json' for complex values.\n\nOnly administrators have permission to modify system settings as these configurations directly impact platform functionality, security, and performance. Changes to settings take effect immediately upon successful update, though some settings may require application restart or cache invalidation to fully apply.\n\nThe operation updates the settings metadata including the description, value_type, category classification, and public visibility flag. The updated_at timestamp is automatically set to the current time to track when the configuration was last modified, providing an audit trail for configuration changes.\n\nRelated operations include retrieving system settings to view current configuration values before making updates, and creating new system settings for expanding platform configuration capabilities.","parameters":[{"name":"id","description":"Unique identifier of the system setting to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated system setting configuration data including value, description, type, category, and visibility","typeName":"IRedditLikeSystemSetting.IUpdate"},"responseBody":{"description":"Updated system setting record with all current configuration values and metadata","typeName":"IRedditLikeSystemSetting"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/redditLike/admin/system/settings","method":"post"},"description":"System setting must be created before it can be updated. The setting record with the specified ID must exist in the reddit_like_system_settings table."}]},{"specification":"This operation permanently removes a system settings configuration entry from the reddit_like_system_settings table by its unique identifier. It performs a hard delete operation as the Prisma schema does not include a deleted_at column for this table. This is a privileged operation restricted to administrators only, used when a system configuration parameter is no longer needed or was created in error. The operation validates that the setting exists before deletion and removes the record completely from the database.","path":"/redditLike/admin/system/settings/{id}","method":"delete","summary":"Permanently delete a system configuration setting by ID","description":"Permanently remove a system configuration setting from the reddit_like_system_settings table. This operation completely deletes the setting record from the database and cannot be undone, as the schema does not support soft deletion for system settings.\n\nThis operation is restricted to platform administrators only, as system settings control critical platform functionality including content limits, rate limiting rules, feature toggles, and other configurable aspects of the system. Removing settings can have significant impact on platform behavior and should only be performed when a configuration parameter is definitively no longer needed.\n\nThe operation validates that the specified setting ID exists before attempting deletion. If the setting does not exist, the operation returns an appropriate error response. Upon successful deletion, the setting is immediately and permanently removed from the database, and all references to this configuration are lost.\n\nCare should be taken when deleting system settings, as the application may depend on certain configuration parameters to function correctly. Administrators should verify that removing a setting will not break platform functionality or cause runtime errors in components that reference the setting.\n\nBefore deleting a setting, consider whether disabling it (by changing its value or is_public flag) would be more appropriate than permanent removal. Settings that may be needed in the future should be disabled rather than deleted to preserve configuration history and enable easy re-activation.\n\nRelated operations include updating system settings to modify their values or visibility, and retrieving settings to verify current configuration before making deletion decisions.","parameters":[{"name":"id","description":"Unique identifier of the system setting to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditLike/admin/system/settings","method":"post"},"description":"System setting must be created before it can be deleted. The setting identified by {id} must exist in the reddit_like_system_settings table."}]},{"specification":"This operation retrieves public platform-wide configuration settings that are safe to expose to all users including guests. The operation focuses on settings where is_public=true from the reddit_like_system_settings table. These public settings include user-facing platform parameters such as maximum post length limits, allowed file upload sizes, rate limiting thresholds visible to users, and feature availability flags. This endpoint serves as a reference for clients to understand platform constraints and capabilities without exposing sensitive internal configuration. The operation supports the platform's transparency principle by making operational parameters visible to all users.","path":"/redditLike/system/settings/public","method":"get","summary":"Retrieve all public platform-wide configuration settings","description":"Retrieve all public platform-wide configuration settings that are safe to expose to all users including unauthenticated guests. This operation queries the reddit_like_system_settings table filtering for records where is_public is true, ensuring that only non-sensitive configuration parameters are returned.\n\nPublic settings typically include user-facing platform parameters that help clients understand system constraints and capabilities. Examples include maximum content lengths (max_post_length, max_comment_length), file upload limits (max_image_file_size), rate limiting thresholds visible to users (posts_per_hour_limit), and feature toggles that affect user experience (image_posts_enabled, comment_editing_window).\n\nThe response provides settings organized by their category field for easier consumption, allowing client applications to reference specific parameter groups. Each setting includes the key identifier, the value as a string, the value_type indicator for proper deserialization, and the description explaining the setting's purpose.\n\nThis endpoint supports the platform's transparency principle by making operational parameters visible to all users without requiring authentication. Security is maintained by the is_public flag preventing exposure of sensitive internal settings like API keys, security parameters, or administrative thresholds.\n\nSince this endpoint returns reference data that changes infrequently, client applications may cache the response with appropriate cache invalidation strategies. The settings returned represent current platform capabilities and constraints that clients should respect when submitting content or making requests.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of public system settings with keys, values, types, categories, and descriptions","typeName":"IRedditLikeSystemSetting.IPublic"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated visitors who can browse public communities and view posts/comments but cannot interact (vote, comment, or post). Guests can register for an account or log in.","kind":"guest"},{"name":"member","description":"Authenticated standard users who can create posts, comment, vote on content, subscribe to communities, earn karma points, and manage their own profile. Members have full participation rights but cannot moderate communities or access administrative functions.","kind":"member"},{"name":"moderator","description":"Community moderators who have elevated permissions within specific communities they manage. Moderators can review reported content, remove inappropriate posts/comments, ban users from their communities, and manage community settings. They retain all member privileges plus moderation capabilities.","kind":"member"},{"name":"admin","description":"Platform administrators with system-wide elevated permissions. Admins can manage all communities, handle user appeals, suspend or ban users globally, access platform analytics, and configure system-wide settings. They have ultimate authority over content moderation and user management.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIRedditLikeCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeCommunityRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeCommunityRule"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeCommunityModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeCommunityModerator"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeCommunitySubscription.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeCommunitySubscription.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikePost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikePost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeComment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeKarmaHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeKarmaHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeContentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeContentReport"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeModerationAction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeCommunityBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeCommunityBan"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikePlatformSuspension":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikePlatformSuspension"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeModerationAppeal":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeModerationAppeal"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeModerationLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditLikeCommunity.ISubscriptionSummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeCommunity.ISubscriptionSummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IRedditLikeGuest.ICreate":{"type":"object","properties":{"ip_address":{"type":"string","description":"IP address of the guest for analytics tracking.\n\nOptional field capturing the guest's IP address for analytics purposes, session tracking, and abuse prevention. This information helps the platform understand guest behavior patterns and detect potential abuse."},"user_agent":{"type":"string","description":"Browser user agent string for device analytics.\n\nOptional field containing the browser's user agent string, enabling device and browser type tracking for analytics and user experience optimization."}},"required":[],"description":"Guest registration request body.\n\nContains optional analytics tracking information for guest session initialization. Guest registration does not require credentials like email or password, enabling anonymous platform browsing."},"IRedditLikeGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the guest user account."},"session_identifier":{"type":"string","description":"Unique session identifier for tracking guest activity.\n\nGenerated during guest registration for analytics and anonymous user behavior tracking across visits."},"role":{"type":"string","const":"guest","description":"User role designation.\n\nAlways 'guest' for guest accounts, indicating limited permissions for browsing without full participation rights."},"first_visit_at":{"type":"string","format":"date-time","description":"Timestamp of the guest's first platform visit."},"last_visit_at":{"type":"string","format":"date-time","description":"Timestamp of the guest's most recent platform visit."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","session_identifier","role","first_visit_at","last_visit_at","token"],"description":"Guest authorization response with session details and JWT tokens.\n\nReturned after successful guest registration, providing the guest account information and authentication tokens required for making authenticated API requests within guest permission scope.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token from previous authentication.\n\nThe refresh token issued during guest registration, used to obtain a new access token without re-registration."}},"required":["refresh_token"],"description":"Refresh token request for guest sessions.\n\nContains the refresh token needed to obtain a new access token when the current access token expires."},"IRedditLikeMember.ICreate":{"type":"object","properties":{"username":{"type":"string","minLength":3,"maxLength":20,"pattern":"^[a-zA-Z0-9_-]+$","description":"Unique username for the account.\n\nMust be 3-20 characters containing only alphanumeric characters, underscores, and hyphens. This will be the user's display identity throughout the platform."},"email":{"type":"string","format":"email","description":"Unique email address for authentication.\n\nUsed for login, account verification, and platform communications. Must be a valid email format and unique across all platform users."},"password":{"type":"string","minLength":8,"description":"Account password in plain text.\n\nMust be minimum 8 characters with at least one uppercase letter, one lowercase letter, one number, and one special character. The backend will hash this password before storage - clients send plain text."}},"required":["username","email","password"],"description":"Member registration request.\n\nContains credentials for creating a new member account including username, email, and password. The system validates uniqueness, format requirements, and password strength before creating the account.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member account identifier."},"username":{"type":"string","description":"Member's unique username."},"email":{"type":"string","format":"email","description":"Member's registered email address."},"email_verified":{"type":"boolean","description":"Whether the member has verified their email address."},"profile_bio":{"type":"string","description":"Optional member biography displayed on profile."},"avatar_url":{"type":"string","description":"URL to member's profile avatar image."},"post_karma":{"type":"integer","description":"Karma earned from votes on member's posts."},"comment_karma":{"type":"integer","description":"Karma earned from votes on member's comments."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","username","email","email_verified","post_karma","comment_karma","token"],"description":"Member authorization response with profile and JWT tokens.\n\nReturned after successful registration or login, providing complete member profile information and authentication tokens for API access.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address for authentication."},"password":{"type":"string","description":"Account password in plain text.\n\nThe client sends the plain text password which the backend verifies against the stored hash."}},"required":["email","password"],"description":"Member login request.\n\nContains email and password credentials for authenticating existing member accounts."},"IRedditLikeMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token from previous authentication."}},"required":["refresh_token"],"description":"Token refresh request.\n\nContains the refresh token for obtaining a new access token without credential re-entry."},"IRedditLikeMember.IChangePassword":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification.\n\nPlain text password that must match the stored hash to authorize the password change."},"new_password":{"type":"string","minLength":8,"description":"New password to set.\n\nMust meet all password strength requirements: minimum 8 characters with uppercase, lowercase, number, and special character."},"new_password_confirmation":{"type":"string","description":"Confirmation of new password.\n\nMust match new_password exactly to prevent typos."}},"required":["current_password","new_password","new_password_confirmation"],"description":"Password change request for authenticated members.\n\nRequires current password verification before allowing password update."},"IRedditLikeMember.IPasswordChanged":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful password change."},"message":{"type":"string","description":"Confirmation message.\n\nTypically 'Your password has been successfully changed.'"}},"required":["success","message"],"description":"Password change confirmation response.\n\nConfirms that the password was successfully updated and other sessions have been invalidated."},"IRedditLikeMember.IVerifyEmail":{"type":"object","properties":{"verification_token":{"type":"string","description":"Unique verification token from email link.\n\nThe token parameter from the verification email URL, used to validate the email verification request."}},"required":["verification_token"],"description":"Email verification request.\n\nContains the verification token from the email link to complete email verification."},"IRedditLikeMember.IEmailVerified":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful email verification."},"message":{"type":"string","description":"Confirmation message.\n\nTypically 'Your email has been successfully verified.'"}},"required":["success","message"],"description":"Email verification confirmation response.\n\nConfirms that the email address has been successfully verified and the account is fully activated."},"IRedditLikeMember.IRequestPasswordReset":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the account requiring password reset."}},"required":["email"],"description":"Password reset request.\n\nContains the email address for which a password reset link should be sent."},"IRedditLikeMember.IPasswordResetRequested":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates request was processed."},"message":{"type":"string","description":"Generic confirmation message.\n\nTypically 'If that email address is registered, you will receive a password reset link.' Does not reveal whether email exists for security."}},"required":["success","message"],"description":"Password reset request confirmation.\n\nGeneric response that does not reveal whether the email exists in the system, preventing account enumeration attacks."},"IRedditLikeMember.IResetPassword":{"type":"object","properties":{"reset_token":{"type":"string","description":"Unique reset token from email link."},"new_password":{"type":"string","minLength":8,"description":"New password meeting strength requirements."},"new_password_confirmation":{"type":"string","description":"Confirmation of new password."}},"required":["reset_token","new_password","new_password_confirmation"],"description":"Password reset completion request.\n\nContains the reset token and new password for completing the password reset workflow."},"IRedditLikeMember.IPasswordResetCompleted":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful password reset."},"message":{"type":"string","description":"Confirmation message prompting user to log in with new password."}},"required":["success","message"],"description":"Password reset completion confirmation.\n\nConfirms password was successfully reset and all sessions invalidated."},"IRedditLikeMember.IResendVerification":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for which to resend verification link."}},"required":["email"],"description":"Email verification resend request.\n\nContains the email address for which a new verification link should be generated and sent."},"IRedditLikeMember.IVerificationResent":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates verification email was sent."},"message":{"type":"string","description":"Confirmation message about email being sent."}},"required":["success","message"],"description":"Verification email resend confirmation.\n\nConfirms that a new verification email has been sent with a fresh 24-hour token."},"IRedditLikeModerator.ICreate":{"type":"object","properties":{"username":{"type":"string","minLength":3,"maxLength":20,"pattern":"^[a-zA-Z0-9_-]+$","description":"Unique username for the moderator account."},"email":{"type":"string","format":"email","description":"Unique email address for moderator authentication."},"password":{"type":"string","minLength":8,"description":"Account password in plain text.\n\nThe backend will hash this password securely before storage."}},"required":["username","email","password"],"description":"Moderator registration request.\n\nContains credentials for creating a new moderator account with username, email, and password.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderator account identifier."},"username":{"type":"string","description":"Moderator's unique username."},"email":{"type":"string","format":"email","description":"Moderator's registered email address."},"email_verified":{"type":"boolean","description":"Whether the moderator has verified their email address."},"profile_bio":{"type":"string","description":"Optional moderator biography."},"avatar_url":{"type":"string","description":"URL to moderator's profile avatar."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","username","email","email_verified","token"],"description":"Moderator authorization response with profile and JWT tokens.\n\nReturned after successful moderator registration or login.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address."},"password":{"type":"string","description":"Account password in plain text."}},"required":["email","password"],"description":"Moderator login request.\n\nContains email and password credentials for authenticating existing moderator accounts."},"IRedditLikeModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token from previous authentication."}},"required":["refresh_token"],"description":"Moderator token refresh request."},"IRedditLikeModerator.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of moderator account."}},"required":["email"],"description":"Moderator password reset request."},"IRedditLikeModerator.IPasswordResetResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates request was processed."},"message":{"type":"string","description":"Generic confirmation message."}},"required":["success","message"],"description":"Password reset request confirmation for moderator."},"IRedditLikeModerator.IPasswordResetComplete":{"type":"object","properties":{"reset_token":{"type":"string","description":"Reset token from email link."},"new_password":{"type":"string","minLength":8,"description":"New password meeting strength requirements."},"new_password_confirmation":{"type":"string","description":"Confirmation of new password."}},"required":["reset_token","new_password","new_password_confirmation"],"description":"Moderator password reset completion request."},"IRedditLikeModerator.IPasswordResetConfirmation":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful password reset."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Moderator password reset completion confirmation."},"IRedditLikeModerator.IPasswordChange":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification."},"new_password":{"type":"string","minLength":8,"description":"New password to set."},"new_password_confirmation":{"type":"string","description":"Confirmation of new password."}},"required":["current_password","new_password","new_password_confirmation"],"description":"Moderator password change request."},"IRedditLikeModerator.IPasswordChangeConfirmation":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful password change."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Moderator password change confirmation."},"IRedditLikeModerator.IEmailVerification":{"type":"object","properties":{"verification_token":{"type":"string","description":"Verification token from email link."}},"required":["verification_token"],"description":"Moderator email verification request."},"IRedditLikeModerator.IEmailVerificationConfirmation":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful email verification."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Moderator email verification confirmation."},"IRedditLikeModerator.ILogoutConfirmation":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful logout."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Moderator logout confirmation."},"IRedditLikeAdmin.ICreate":{"type":"object","properties":{"username":{"type":"string","minLength":3,"maxLength":20,"pattern":"^[a-zA-Z0-9_-]+$","description":"Unique username for the administrator account."},"email":{"type":"string","format":"email","description":"Unique email address for administrator authentication."},"password":{"type":"string","minLength":8,"description":"Account password in plain text."}},"required":["username","email","password"],"description":"Administrator registration request.\n\nContains credentials for creating a new administrator account.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique administrator account identifier."},"username":{"type":"string","description":"Administrator's unique username."},"email":{"type":"string","format":"email","description":"Administrator's registered email address."},"email_verified":{"type":"boolean","description":"Whether the administrator has verified their email."},"is_super_admin":{"type":"boolean","description":"Whether this administrator has super admin privileges."},"profile_bio":{"type":"string","description":"Optional administrator biography."},"avatar_url":{"type":"string","description":"URL to administrator's profile avatar."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","username","email","email_verified","is_super_admin","token"],"description":"Administrator authorization response with profile and JWT tokens.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address."},"password":{"type":"string","description":"Account password in plain text."}},"required":["email","password"],"description":"Administrator login request."},"IRedditLikeAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token from previous authentication."}},"required":["refresh_token"],"description":"Administrator token refresh request."},"IRedditLikeAdmin.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of administrator account."}},"required":["email"],"description":"Administrator password reset request."},"IRedditLikeAdmin.IPasswordResetComplete":{"type":"object","properties":{"reset_token":{"type":"string","description":"Reset token from email link."},"new_password":{"type":"string","minLength":8,"description":"New password meeting strength requirements."},"new_password_confirmation":{"type":"string","description":"Confirmation of new password."}},"required":["reset_token","new_password","new_password_confirmation"],"description":"Administrator password reset completion request."},"IRedditLikeAdmin.IPasswordChange":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification."},"new_password":{"type":"string","minLength":8,"description":"New password to set."},"new_password_confirmation":{"type":"string","description":"Confirmation of new password."}},"required":["current_password","new_password","new_password_confirmation"],"description":"Administrator password change request."},"IRedditLikeAdmin.IPasswordChangeResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful password change."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Administrator password change confirmation."},"IRedditLikeAdmin.IEmailVerification":{"type":"object","properties":{"verification_token":{"type":"string","description":"Verification token from email link."}},"required":["verification_token"],"description":"Administrator email verification request."},"IRedditLikeAdmin.IEmailVerificationResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful email verification."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Administrator email verification confirmation."},"IRedditLikeAdmin.IResendVerificationResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates verification email was sent."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Administrator verification email resend confirmation."},"IRedditLikeAdmin.ILogoutResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful logout."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Administrator logout confirmation."},"IRedditLikeAuthSession.IValidate":{"type":"object","properties":{"access_token":{"type":"string","description":"JWT access token to validate."}},"required":["access_token"],"description":"Session validation request.\n\nContains the access token to validate for session state verification."},"IRedditLikeAuthSession.IValidationResult":{"type":"object","properties":{"valid":{"type":"boolean","description":"Whether the token is valid and session is active."},"user_id":{"type":"string","format":"uuid","description":"User ID from the validated token."},"username":{"type":"string","description":"Username from the validated token."},"role":{"type":"string","description":"User role from the validated token."},"expires_at":{"type":"string","format":"date-time","description":"Token expiration timestamp."}},"required":["valid"],"description":"Session validation result.\n\nIndicates whether the token is valid and includes user information if validation succeeds."},"IRedditLikeAuthMember.ILogout":{"type":"object","properties":{},"required":[],"description":"Member logout request.\n\nNo request body needed as session is identified from authentication token."},"IRedditLikeCommunity.ICreate":{"type":"object","properties":{"code":{"type":"string","minLength":3,"maxLength":25,"pattern":"^[a-zA-Z0-9_]+$","description":"Unique community identifier for URLs."},"name":{"type":"string","minLength":3,"maxLength":25,"description":"Display name of the community."},"description":{"type":"string","minLength":10,"maxLength":500,"description":"Community description explaining purpose."},"icon_url":{"type":"string","description":"Optional community icon URL."},"banner_url":{"type":"string","description":"Optional community banner URL."},"privacy_type":{"type":"string","description":"Privacy setting: 'public' or 'private'."},"posting_permission":{"type":"string","description":"Who can post: 'anyone_subscribed', 'approved_only', 'moderators_only'."},"allow_text_posts":{"type":"boolean","description":"Whether text posts are allowed."},"allow_link_posts":{"type":"boolean","description":"Whether link posts are allowed."},"allow_image_posts":{"type":"boolean","description":"Whether image posts are allowed."},"primary_category":{"type":"string","description":"Main category for discovery."},"secondary_tags":{"type":"string","description":"Additional tags (up to 3, comma-separated)."}},"required":["code","name","description"],"description":"Community creation request.\n\nContains required and optional fields for creating a new community.","x-autobe-prisma-schema":"reddit_like_communities"},"IRedditLikeCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique community identifier."},"code":{"type":"string","description":"Unique community code used in URLs.\n\n3-25 characters, alphanumeric and underscores only, case-insensitive."},"name":{"type":"string","description":"Display name of the community."},"description":{"type":"string","description":"Community description explaining its purpose and topic."},"icon_url":{"type":"string","description":"URL to community icon image (256x256 pixels)."},"banner_url":{"type":"string","description":"URL to community banner image."},"privacy_type":{"type":"string","description":"Privacy setting: 'public' or 'private'."},"posting_permission":{"type":"string","description":"Who can post: 'anyone_subscribed', 'approved_only', or 'moderators_only'."},"allow_text_posts":{"type":"boolean","description":"Whether text posts are allowed."},"allow_link_posts":{"type":"boolean","description":"Whether link posts are allowed."},"allow_image_posts":{"type":"boolean","description":"Whether image posts are allowed."},"primary_category":{"type":"string","description":"Main category for discovery."},"secondary_tags":{"type":"string","description":"Additional tags for discoverability (up to 3, comma-separated)."},"subscriber_count":{"type":"integer","description":"Total number of subscribers."},"is_archived":{"type":"boolean","description":"Whether community is archived."},"created_at":{"type":"string","format":"date-time","description":"Community creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","code","name","description","privacy_type","posting_permission","allow_text_posts","allow_link_posts","allow_image_posts","primary_category","subscriber_count","is_archived","created_at","updated_at"],"description":"Complete community entity.\n\nRepresents a Reddit-like community (subreddit) with all configuration settings, metadata, and statistics.","x-autobe-prisma-schema":"reddit_like_communities"},"IRedditLikeCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique community identifier."},"code":{"type":"string","description":"Community code for URLs."},"name":{"type":"string","description":"Community display name."},"description":{"type":"string","maxLength":100,"description":"Truncated description for list views."},"icon_url":{"type":"string","description":"Community icon URL."},"subscriber_count":{"type":"integer","description":"Total subscribers."},"primary_category":{"type":"string","description":"Main category."}},"required":["id","code","name","subscriber_count","primary_category"],"description":"Community summary for list displays.\n\nOptimized view with essential fields for browse and search interfaces.","x-autobe-prisma-schema":"reddit_like_communities"},"IRedditLikeCommunity.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"search":{"type":"string","description":"Search query for name/description."},"primary_category":{"type":"string","description":"Filter by category."},"privacy_type":{"type":"string","description":"Filter by privacy type."},"is_archived":{"type":"boolean","description":"Filter by archived status."},"sort_by":{"type":"string","description":"Sort field: 'subscriber_count', 'created_at', 'name'."},"sort_order":{"type":"string","description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Community search and filter parameters."},"IRedditLikeCommunity.IUpdate":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":25,"description":"Updated display name."},"description":{"type":"string","minLength":10,"maxLength":500,"description":"Updated community description."},"icon_url":{"type":"string","description":"Updated icon URL."},"banner_url":{"type":"string","description":"Updated banner URL."},"privacy_type":{"type":"string","description":"Updated privacy setting."},"posting_permission":{"type":"string","description":"Updated posting permission."},"allow_text_posts":{"type":"boolean","description":"Updated text post allowance."},"allow_link_posts":{"type":"boolean","description":"Updated link post allowance."},"allow_image_posts":{"type":"boolean","description":"Updated image post allowance."},"primary_category":{"type":"string","description":"Updated primary category."},"secondary_tags":{"type":"string","description":"Updated secondary tags."}},"required":[],"description":"Community update request.\n\nAll fields optional for partial updates. Community code cannot be changed.","x-autobe-prisma-schema":"reddit_like_communities"},"IRedditLikeCommunityRule":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique rule identifier."},"community_id":{"type":"string","format":"uuid","description":"Community this rule belongs to."},"title":{"type":"string","description":"Rule title."},"description":{"type":"string","description":"Detailed rule explanation."},"rule_type":{"type":"string","description":"Rule type: 'required', 'prohibited', or 'etiquette'."},"display_order":{"type":"integer","description":"Display order (1-15)."},"created_at":{"type":"string","format":"date-time","description":"Rule creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","community_id","title","rule_type","display_order","created_at","updated_at"],"description":"Community rule definition.\n\nRepresents a community-specific rule created by moderators.","x-autobe-prisma-schema":"reddit_like_community_rules"},"IRedditLikeCommunityRule.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":3,"maxLength":100,"description":"Rule title."},"description":{"type":"string","maxLength":500,"description":"Optional detailed explanation."},"rule_type":{"type":"string","description":"Rule type: 'required', 'prohibited', or 'etiquette'."},"display_order":{"type":"integer","minimum":1,"maximum":15,"description":"Display order."}},"required":["title","rule_type","display_order"],"description":"Community rule creation request.","x-autobe-prisma-schema":"reddit_like_community_rules"},"IRedditLikeCommunityRule.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":3,"maxLength":100,"description":"Updated rule title."},"description":{"type":"string","maxLength":500,"description":"Updated description."},"rule_type":{"type":"string","description":"Updated rule type."},"display_order":{"type":"integer","minimum":1,"maximum":15,"description":"Updated display order."}},"required":[],"description":"Community rule update request.\n\nAll fields optional for partial updates.","x-autobe-prisma-schema":"reddit_like_community_rules"},"IRedditLikeCommunitySubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique subscription identifier."},"community_id":{"type":"string","format":"uuid","description":"Subscribed community."},"member_id":{"type":"string","format":"uuid","description":"Subscribing member."},"subscribed_at":{"type":"string","format":"date-time","description":"Subscription timestamp."}},"required":["id","community_id","member_id","subscribed_at"],"description":"Community subscription record.\n\nRepresents a member's subscription to a community.","x-autobe-prisma-schema":"reddit_like_community_subscriptions"},"IRedditLikeMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Member identifier."},"username":{"type":"string","description":"Member username."},"avatar_url":{"type":"string","description":"Avatar URL."}},"required":["id","username"],"description":"Member summary for list displays.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeCommunityModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderator assignment identifier."},"community_id":{"type":"string","format":"uuid","description":"Community being moderated."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator user ID."},"assigned_at":{"type":"string","format":"date-time","description":"Assignment timestamp."},"is_primary":{"type":"boolean","description":"Whether this is the primary moderator (creator)."},"permissions":{"type":"string","description":"Granted permissions (comma-separated or JSON)."}},"required":["id","community_id","moderator_id","assigned_at","is_primary","permissions"],"description":"Moderator assignment record.\n\nTracks moderator assignments to communities with permissions.","x-autobe-prisma-schema":"reddit_like_community_moderators"},"IRedditLikeCommunityModerator.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"User to assign as moderator."},"permissions":{"type":"string","description":"Permissions to grant."}},"required":["moderator_id"],"description":"Moderator assignment request.\n\nSpecifies which user to assign and their permissions.","x-autobe-prisma-schema":"reddit_like_community_moderators"},"IRedditLikeCommunityModerator.IUpdate":{"type":"object","properties":{"permissions":{"type":"string","description":"Updated permissions."}},"required":[],"description":"Moderator assignment update.\n\nOnly permissions can be modified.","x-autobe-prisma-schema":"reddit_like_community_moderators"},"IRedditLikeCommunitySubscription.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Subscription identifier."},"community":{"$ref":"#/components/schemas/IRedditLikeCommunity.ISummary","description":"Subscribed community summary."},"subscribed_at":{"type":"string","format":"date-time","description":"Subscription timestamp."}},"required":["id","community","subscribed_at"],"description":"Subscription summary with community details."},"IRedditLikePost.ICreate":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"Target community for the post."},"type":{"type":"string","description":"Post type: 'text', 'link', or 'image'."},"title":{"type":"string","minLength":3,"maxLength":300,"description":"Post title."},"body":{"type":"string","maxLength":40000,"description":"Text post body (for type='text')."},"url":{"type":"string","maxLength":2000,"description":"Link URL (for type='link')."},"image_url":{"type":"string","description":"Image URL (for type='image')."},"caption":{"type":"string","maxLength":10000,"description":"Image caption (for type='image')."}},"required":["community_id","type","title"],"description":"Post creation request.\n\nContains post type and type-specific content fields.","x-autobe-prisma-schema":"reddit_like_posts"},"IRedditLikePost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique post identifier."},"type":{"type":"string","description":"Post type: 'text', 'link', or 'image'."},"title":{"type":"string","description":"Post title."},"created_at":{"type":"string","format":"date-time","description":"Post creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","type","title","created_at","updated_at"],"description":"Complete post entity.\n\nMain post record with type discriminator. Type-specific content is accessed through related tables.","x-autobe-prisma-schema":"reddit_like_posts"},"IRedditLikePost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Post identifier."},"type":{"type":"string","description":"Post type."},"title":{"type":"string","description":"Post title."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."}},"required":["id","type","title","created_at"],"description":"Post summary for list displays.\n\nOptimized view with essential fields for feeds.","x-autobe-prisma-schema":"reddit_like_posts"},"IRedditLikePost.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"search":{"type":"string","description":"Search query for titles."},"community_id":{"type":"string","format":"uuid","description":"Filter by community."},"type":{"type":"string","description":"Filter by post type."},"sort_by":{"type":"string","description":"Sort algorithm: 'hot', 'new', 'top', 'controversial'."}},"required":[],"description":"Post search and filter parameters."},"IRedditLikePost.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":3,"maxLength":300,"description":"Updated title (only within 5 minutes of creation)."},"body":{"type":"string","maxLength":40000,"description":"Updated body text (text posts only)."},"caption":{"type":"string","maxLength":10000,"description":"Updated caption (image posts only)."}},"required":[],"description":"Post update request.\n\nOnly certain fields are editable based on post type and time constraints.","x-autobe-prisma-schema":"reddit_like_posts"},"IRedditLikeCommunity.IPostSearchRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"sort_by":{"type":"string","description":"Sort algorithm."}},"required":[],"description":"Community post search parameters."},"IRedditLikePostMetrics":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Metrics record identifier."},"reddit_like_post_id":{"type":"string","format":"uuid","description":"Associated post."},"vote_score":{"type":"integer","description":"Net vote score (upvotes - downvotes)."},"comment_count":{"type":"integer","description":"Total comments on post."},"upvote_count":{"type":"integer","description":"Total upvotes."},"downvote_count":{"type":"integer","description":"Total downvotes."},"last_calculated_at":{"type":"string","format":"date-time","description":"When metrics were last calculated."}},"required":["id","reddit_like_post_id","vote_score","comment_count","upvote_count","downvote_count","last_calculated_at"],"description":"Pre-calculated post engagement metrics.\n\nDenormalized metrics from materialized view for performance.","x-autobe-prisma-schema":"mv_reddit_like_post_metrics"},"IRedditLikeComment.ICreate":{"type":"object","properties":{"reddit_like_post_id":{"type":"string","format":"uuid","description":"Post to comment on."},"reddit_like_parent_comment_id":{"type":"string","format":"uuid","description":"Parent comment for nested replies."},"content_text":{"type":"string","minLength":1,"maxLength":10000,"description":"Comment text content."}},"required":["reddit_like_post_id","content_text"],"description":"Comment creation request.\n\nContains post reference and comment text. Parent comment is optional for top-level comments.","x-autobe-prisma-schema":"reddit_like_comments"},"IRedditLikeComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique comment identifier."},"reddit_like_post_id":{"type":"string","format":"uuid","description":"Parent post."},"reddit_like_parent_comment_id":{"type":"string","format":"uuid","description":"Parent comment for nested replies."},"content_text":{"type":"string","description":"Comment text content."},"depth":{"type":"integer","description":"Nesting depth level."},"vote_score":{"type":"integer","description":"Net vote score."},"edited":{"type":"boolean","description":"Whether comment has been edited."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","reddit_like_post_id","content_text","depth","vote_score","edited","created_at","updated_at"],"description":"Complete comment entity.\n\nRepresents a comment or nested reply in a discussion thread.","x-autobe-prisma-schema":"reddit_like_comments"},"IRedditLikeComment.IUpdate":{"type":"object","properties":{"content_text":{"type":"string","minLength":1,"maxLength":10000,"description":"Updated comment text."}},"required":[],"description":"Comment update request.\n\nOnly text content can be edited, within 24-hour window.","x-autobe-prisma-schema":"reddit_like_comments"},"IRedditLikeComment.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"sort_by":{"type":"string","description":"Sort method: 'best', 'top', 'new', 'controversial', 'old'."}},"required":[],"description":"Comment search parameters."},"IRedditLikeComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Comment identifier."},"content_text":{"type":"string","maxLength":500,"description":"Comment text preview."},"vote_score":{"type":"integer","description":"Net vote score."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."}},"required":["id","content_text","vote_score","created_at"],"description":"Comment summary for list displays.","x-autobe-prisma-schema":"reddit_like_comments"},"IRedditLikeComment.IReplyCreate":{"type":"object","properties":{"content_text":{"type":"string","minLength":1,"maxLength":10000,"description":"Reply text content."}},"required":["content_text"],"description":"Reply creation request.\n\nContains text for creating a nested reply to a comment.","x-autobe-prisma-schema":"reddit_like_comments"},"IRedditLikeComment.IReplyRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"sort_by":{"type":"string","description":"Sort method."}},"required":[],"description":"Reply search parameters."},"IRedditLikePostVote.ICreate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"Vote direction: 1 for upvote, -1 for downvote."}},"required":["vote_value"],"description":"Post vote submission.\n\nSpecifies the vote direction for a post.","x-autobe-prisma-schema":"reddit_like_post_votes"},"IRedditLikePostVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique vote identifier."},"vote_value":{"type":"integer","description":"Vote direction: 1 for upvote, -1 for downvote."},"created_at":{"type":"string","format":"date-time","description":"Vote cast timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","vote_value","created_at","updated_at"],"description":"Post vote record.\n\nRepresents a user's vote on a post.","x-autobe-prisma-schema":"reddit_like_post_votes"},"IRedditLikePostVote.IUserVoteStatus":{"type":"object","properties":{"voted":{"type":"boolean","description":"Whether user has voted."},"vote_value":{"type":"integer","description":"Vote direction if voted."}},"required":["voted"],"description":"User's vote status on a post."},"IRedditLikeCommentVote.ICreate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"Vote direction: 1 for upvote, -1 for downvote."}},"required":["vote_value"],"description":"Comment vote submission.","x-autobe-prisma-schema":"reddit_like_comment_votes"},"IRedditLikeCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique vote identifier."},"vote_value":{"type":"integer","description":"Vote direction: 1 for upvote, -1 for downvote."},"created_at":{"type":"string","format":"date-time","description":"Vote cast timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","vote_value","created_at","updated_at"],"description":"Comment vote record.","x-autobe-prisma-schema":"reddit_like_comment_votes"},"IRedditLikeUser.IKarma":{"type":"object","properties":{"post_karma":{"type":"integer","description":"Post karma score."},"comment_karma":{"type":"integer","description":"Comment karma score."},"total_karma":{"type":"integer","description":"Total karma (post + comment)."}},"required":["post_karma","comment_karma","total_karma"],"description":"User karma scores.\n\nCurrent reputation metrics from voting activity."},"IRedditLikeUser.IKarmaHistoryRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"karma_type":{"type":"string","description":"Filter by type: 'post' or 'comment'."}},"required":[],"description":"Karma history search parameters."},"IRedditLikeKarmaHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"History record identifier."},"karma_type":{"type":"string","description":"Type: 'post' or 'comment'."},"change_amount":{"type":"integer","description":"Karma change amount."},"triggered_by_vote_action":{"type":"string","description":"Vote action that caused change."},"created_at":{"type":"string","format":"date-time","description":"Change timestamp."}},"required":["id","karma_type","change_amount","triggered_by_vote_action","created_at"],"description":"Karma change history record.\n\nAudit trail of individual karma modifications.","x-autobe-prisma-schema":"reddit_like_karma_history"},"IRedditLikeContentReport.ICreate":{"type":"object","properties":{"reported_post_id":{"type":"string","format":"uuid","description":"Post being reported."},"reported_comment_id":{"type":"string","format":"uuid","description":"Comment being reported."},"community_id":{"type":"string","format":"uuid","description":"Community context."},"content_type":{"type":"string","description":"Type: 'post' or 'comment'."},"violation_categories":{"type":"string","description":"Selected violation categories."},"additional_context":{"type":"string","maxLength":500,"description":"Optional explanation."}},"required":["community_id","content_type","violation_categories"],"description":"Content report submission.\n\nEither post or comment must be specified based on content_type.","x-autobe-prisma-schema":"reddit_like_content_reports"},"IRedditLikeContentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique report identifier."},"content_type":{"type":"string","description":"Type: 'post' or 'comment'."},"violation_categories":{"type":"string","description":"Comma-separated violation categories."},"additional_context":{"type":"string","description":"Reporter's explanation."},"status":{"type":"string","description":"Review status: 'pending', 'reviewed', 'dismissed'."},"is_anonymous_report":{"type":"boolean","description":"Whether submitted by guest."},"is_high_priority":{"type":"boolean","description":"Auto-flagged priority."},"created_at":{"type":"string","format":"date-time","description":"Report submission timestamp."}},"required":["id","content_type","violation_categories","status","is_anonymous_report","is_high_priority","created_at"],"description":"Content report record.\n\nUser-submitted report for potentially inappropriate content.","x-autobe-prisma-schema":"reddit_like_content_reports"},"IRedditLikeContentReport.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"status":{"type":"string","description":"Filter by status."},"content_type":{"type":"string","description":"Filter by content type."},"community_id":{"type":"string","format":"uuid","description":"Filter by community."},"is_high_priority":{"type":"boolean","description":"Filter by priority."}},"required":[],"description":"Content report search parameters."},"IRedditLikeModerationAction.ICreate":{"type":"object","properties":{"report_id":{"type":"string","format":"uuid","description":"Triggering report."},"affected_post_id":{"type":"string","format":"uuid","description":"Post being acted upon."},"affected_comment_id":{"type":"string","format":"uuid","description":"Comment being acted upon."},"community_id":{"type":"string","format":"uuid","description":"Community context."},"action_type":{"type":"string","description":"Action type."},"content_type":{"type":"string","description":"Content type."},"removal_type":{"type":"string","description":"Removal scope."},"reason_category":{"type":"string","description":"Reason category."},"reason_text":{"type":"string","description":"Detailed explanation."},"internal_notes":{"type":"string","description":"Private notes."}},"required":["community_id","action_type","content_type","reason_category","reason_text"],"description":"Moderation action creation.\n\nSpecifies action details and reasoning.","x-autobe-prisma-schema":"reddit_like_moderation_actions"},"IRedditLikeModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique action identifier."},"action_type":{"type":"string","description":"Action: 'remove', 'approve', 'dismiss_report', 'escalate', 'restore', 'lock'."},"content_type":{"type":"string","description":"Content type: 'post' or 'comment'."},"removal_type":{"type":"string","description":"Removal scope if applicable."},"reason_category":{"type":"string","description":"Predefined reason category."},"reason_text":{"type":"string","description":"Detailed explanation."},"status":{"type":"string","description":"Action status: 'completed', 'reversed', 'appealed'."},"created_at":{"type":"string","format":"date-time","description":"Action timestamp."}},"required":["id","action_type","content_type","reason_category","reason_text","status","created_at"],"description":"Moderation action record.\n\nDocuments moderator/admin actions on content.","x-autobe-prisma-schema":"reddit_like_moderation_actions"},"IRedditLikeModerationAction.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"action_type":{"type":"string","description":"Filter by action type."},"status":{"type":"string","description":"Filter by status."},"community_id":{"type":"string","format":"uuid","description":"Filter by community."}},"required":[],"description":"Moderation action search parameters."},"IRedditLikePost.IRemove":{"type":"object","properties":{"removal_type":{"type":"string","description":"Removal scope: 'community', 'platform', or 'spam'."},"reason_category":{"type":"string","description":"Predefined reason category."},"reason_text":{"type":"string","description":"Detailed explanation."},"internal_notes":{"type":"string","description":"Private moderator notes."},"report_id":{"type":"string","format":"uuid","description":"Related report if applicable."}},"required":["removal_type","reason_category","reason_text"],"description":"Post removal request.\n\nContains removal scope and reasoning for content removal."},"IRedditLikeComment.IRemove":{"type":"object","properties":{"removal_type":{"type":"string","description":"Removal scope."},"reason_category":{"type":"string","description":"Predefined reason."},"reason_text":{"type":"string","description":"Detailed explanation."},"internal_notes":{"type":"string","description":"Private notes."},"report_id":{"type":"string","format":"uuid","description":"Related report."}},"required":["removal_type","reason_category","reason_text"],"description":"Comment removal request."},"IRedditLikeCommunityBan.ICreate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Member to ban."},"ban_reason_category":{"type":"string","description":"Reason category."},"ban_reason_text":{"type":"string","description":"Detailed reason."},"internal_notes":{"type":"string","description":"Private notes."},"is_permanent":{"type":"boolean","description":"Whether permanent."},"expiration_date":{"type":"string","format":"date-time","description":"Expiration for temporary bans."}},"required":["banned_member_id","ban_reason_category","ban_reason_text","is_permanent"],"description":"Community ban creation request.","x-autobe-prisma-schema":"reddit_like_community_bans"},"IRedditLikeCommunityBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ban identifier."},"banned_member_id":{"type":"string","format":"uuid","description":"Banned member."},"community_id":{"type":"string","format":"uuid","description":"Community from which banned."},"ban_reason_category":{"type":"string","description":"Ban reason category."},"ban_reason_text":{"type":"string","description":"Detailed ban reason."},"is_permanent":{"type":"boolean","description":"Whether ban is permanent."},"expiration_date":{"type":"string","format":"date-time","description":"Expiration date for temporary bans."},"is_active":{"type":"boolean","description":"Whether ban is currently active."},"created_at":{"type":"string","format":"date-time","description":"Ban issuance timestamp."}},"required":["id","banned_member_id","community_id","ban_reason_category","ban_reason_text","is_permanent","is_active","created_at"],"description":"Community ban record.\n\nRepresents a member banned from a specific community.","x-autobe-prisma-schema":"reddit_like_community_bans"},"IRedditLikeCommunityBan.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"is_active":{"type":"boolean","description":"Filter by active status."},"is_permanent":{"type":"boolean","description":"Filter by permanence."}},"required":[],"description":"Community ban search parameters."},"IRedditLikePlatformSuspension.ICreate":{"type":"object","properties":{"suspended_member_id":{"type":"string","format":"uuid","description":"Member to suspend."},"suspension_reason_category":{"type":"string","description":"Reason category."},"suspension_reason_text":{"type":"string","description":"Detailed reason."},"internal_notes":{"type":"string","description":"Private notes."},"is_permanent":{"type":"boolean","description":"Whether permanent."},"expiration_date":{"type":"string","format":"date-time","description":"Expiration for temporary."}},"required":["suspended_member_id","suspension_reason_category","suspension_reason_text","is_permanent"],"description":"Platform suspension creation request.","x-autobe-prisma-schema":"reddit_like_platform_suspensions"},"IRedditLikePlatformSuspension":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique suspension identifier."},"suspended_member_id":{"type":"string","format":"uuid","description":"Suspended member."},"suspension_reason_category":{"type":"string","description":"Suspension reason category."},"suspension_reason_text":{"type":"string","description":"Detailed suspension reason."},"is_permanent":{"type":"boolean","description":"Whether suspension is permanent."},"expiration_date":{"type":"string","format":"date-time","description":"Expiration for temporary suspensions."},"is_active":{"type":"boolean","description":"Whether suspension is active."},"created_at":{"type":"string","format":"date-time","description":"Suspension issuance timestamp."}},"required":["id","suspended_member_id","suspension_reason_category","suspension_reason_text","is_permanent","is_active","created_at"],"description":"Platform suspension record.\n\nRepresents platform-wide user suspension.","x-autobe-prisma-schema":"reddit_like_platform_suspensions"},"IRedditLikePlatformSuspension.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"is_active":{"type":"boolean","description":"Filter by active status."},"is_permanent":{"type":"boolean","description":"Filter by permanence."}},"required":[],"description":"Platform suspension search parameters."},"IRedditLikeModerationAppeal.ICreate":{"type":"object","properties":{"moderation_action_id":{"type":"string","format":"uuid","description":"Action being appealed."},"community_ban_id":{"type":"string","format":"uuid","description":"Ban being appealed."},"platform_suspension_id":{"type":"string","format":"uuid","description":"Suspension being appealed."},"appeal_type":{"type":"string","description":"Appeal type."},"appeal_text":{"type":"string","minLength":50,"maxLength":1000,"description":"Appeal reasoning."}},"required":["appeal_type","appeal_text"],"description":"Appeal submission request.\n\nOne of the ID fields must be provided based on appeal_type.","x-autobe-prisma-schema":"reddit_like_moderation_appeals"},"IRedditLikeModerationAppeal":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique appeal identifier."},"appellant_member_id":{"type":"string","format":"uuid","description":"Member submitting appeal."},"appeal_type":{"type":"string","description":"Type: 'content_removal', 'community_ban', 'platform_suspension'."},"appeal_text":{"type":"string","description":"User's appeal reasoning."},"status":{"type":"string","description":"Status: 'pending', 'under_review', 'upheld', 'overturned', 'reduced'."},"decision_explanation":{"type":"string","description":"Reviewer's decision explanation."},"is_escalated":{"type":"boolean","description":"Whether escalated to admins."},"expected_resolution_at":{"type":"string","format":"date-time","description":"Expected resolution timestamp."},"created_at":{"type":"string","format":"date-time","description":"Appeal submission timestamp."},"reviewed_at":{"type":"string","format":"date-time","description":"Review completion timestamp."}},"required":["id","appellant_member_id","appeal_type","appeal_text","status","is_escalated","expected_resolution_at","created_at"],"description":"Moderation appeal record.\n\nUser appeal challenging moderation action.","x-autobe-prisma-schema":"reddit_like_moderation_appeals"},"IRedditLikeModerationAppeal.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"status":{"type":"string","description":"Filter by status."},"appeal_type":{"type":"string","description":"Filter by type."},"is_escalated":{"type":"boolean","description":"Filter by escalation."}},"required":[],"description":"Appeal search parameters."},"IRedditLikeModerationAppeal.IReview":{"type":"object","properties":{"decision":{"type":"string","description":"Decision: 'uphold', 'overturn', 'reduce_penalty'."},"decision_explanation":{"type":"string","minLength":30,"description":"Required decision explanation."},"penalty_modification":{"type":"string","description":"Modified penalty details for 'reduce_penalty'."}},"required":["decision","decision_explanation"],"description":"Appeal review decision.\n\nContains reviewer's decision and explanation."},"IRedditLikeModerationLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"log_type":{"type":"string","description":"Filter by log type."},"community_id":{"type":"string","format":"uuid","description":"Filter by community."}},"required":[],"description":"Moderation log search parameters."},"IRedditLikeModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique log identifier."},"log_type":{"type":"string","description":"Event type."},"action_description":{"type":"string","description":"Human-readable event description."},"metadata":{"type":"string","description":"JSON event metadata."},"created_at":{"type":"string","format":"date-time","description":"Event timestamp."}},"required":["id","log_type","action_description","created_at"],"description":"Moderation log entry.\n\nImmutable audit trail of moderation events.","x-autobe-prisma-schema":"reddit_like_moderation_logs"},"IRedditLikeModerator.IActivity":{"type":"object","properties":{"total_actions":{"type":"integer","description":"Total moderation actions."},"total_reports_reviewed":{"type":"integer","description":"Reports reviewed."},"total_content_removals":{"type":"integer","description":"Content removals."},"total_bans_issued":{"type":"integer","description":"Bans issued."}},"required":["total_actions","total_reports_reviewed","total_content_removals","total_bans_issued"],"description":"Moderator activity summary.\n\nAggregated moderation engagement metrics."},"IRedditLikeModeratorActivityStats":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Stats record identifier."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator being tracked."},"total_reports_reviewed":{"type":"integer","description":"Total reports reviewed."},"total_content_removals":{"type":"integer","description":"Total removals."},"total_bans_issued":{"type":"integer","description":"Total bans issued."},"total_appeals_reviewed":{"type":"integer","description":"Total appeals reviewed."},"average_report_response_hours":{"type":"number","description":"Average response time in hours."},"last_activity_at":{"type":"string","format":"date-time","description":"Most recent activity timestamp."},"last_calculated_at":{"type":"string","format":"date-time","description":"Stats calculation timestamp."}},"required":["id","moderator_id","total_reports_reviewed","total_content_removals","total_bans_issued","total_appeals_reviewed","last_calculated_at"],"description":"Pre-calculated moderator activity statistics.\n\nMaterialized view with performance metrics.","x-autobe-prisma-schema":"mv_reddit_like_moderator_activity_stats"},"IRedditLikeUser.IProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"User identifier."},"username":{"type":"string","description":"Username."},"profile_bio":{"type":"string","description":"Biography."},"avatar_url":{"type":"string","description":"Avatar URL."},"post_karma":{"type":"integer","description":"Post karma."},"comment_karma":{"type":"integer","description":"Comment karma."},"created_at":{"type":"string","format":"date-time","description":"Account age."}},"required":["id","username","post_karma","comment_karma","created_at"],"description":"User profile view.\n\nPublic profile information respecting privacy settings.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeUser.IProfileUpdate":{"type":"object","properties":{"profile_bio":{"type":"string","maxLength":500,"description":"Updated biography."},"avatar_url":{"type":"string","description":"Updated avatar URL."}},"required":[],"description":"Profile update request.\n\nEditable profile fields only.","x-autobe-prisma-schema":"reddit_like_users"},"IRedditLikeUser.IPostsRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"sort_by":{"type":"string","description":"Sort: 'new', 'top', 'controversial'."}},"required":[],"description":"User posts search parameters."},"IRedditLikeUser.ICommentsRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"sort_by":{"type":"string","description":"Sort: 'new', 'top', 'controversial'."}},"required":[],"description":"User comments search parameters."},"IRedditLikeUser.ISubscriptionsRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."}},"required":[],"description":"User subscriptions search parameters."},"IRedditLikeCommunity.ISubscriptionSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Community identifier."},"code":{"type":"string","description":"Community code."},"name":{"type":"string","description":"Community name."},"icon_url":{"type":"string","description":"Community icon."},"subscriber_count":{"type":"integer","description":"Subscriber count."},"subscribed_at":{"type":"string","format":"date-time","description":"When user subscribed."}},"required":["id","code","name","subscriber_count","subscribed_at"],"description":"Community subscription summary.\n\nCombines community info with subscription metadata.","x-autobe-prisma-schema":"reddit_like_communities"},"IRedditLikeUser.ISubscriptionCreate":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"Community to subscribe to."}},"required":["community_id"],"description":"Subscription creation request."},"IRedditLikeUser.IPrivacySettings":{"type":"object","properties":{"profile_privacy":{"type":"string","description":"Profile visibility level."},"show_karma_publicly":{"type":"boolean","description":"Karma visibility."},"show_subscriptions_publicly":{"type":"boolean","description":"Subscription list visibility."}},"required":["profile_privacy","show_karma_publicly","show_subscriptions_publicly"],"description":"User privacy settings.\n\nControls visibility of profile elements."},"IRedditLikeUser.IUpdatePrivacy":{"type":"object","properties":{"profile_privacy":{"type":"string","description":"Updated profile privacy."},"show_karma_publicly":{"type":"boolean","description":"Updated karma visibility."},"show_subscriptions_publicly":{"type":"boolean","description":"Updated subscription visibility."}},"required":[],"description":"Privacy settings update.\n\nAll fields optional for partial updates."},"IRedditLikePost.IHotRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"community_id":{"type":"string","format":"uuid","description":"Optional community filter."}},"required":[],"description":"Hot posts request parameters."},"IRedditLikeSystemSetting.IPublicList":{"type":"object","properties":{"settings":{"type":"array","items":{"$ref":"#/components/schemas/IRedditLikeSystemSetting"},"description":"Array of public settings."}},"required":["settings"],"description":"Public system settings list."},"IRedditLikeSystemSetting.IPublic":{"type":"object","properties":{"key":{"type":"string","description":"Setting key."},"value":{"type":"string","description":"Setting value."},"description":{"type":"string","description":"Setting description."},"value_type":{"type":"string","description":"Value type."},"category":{"type":"string","description":"Category."}},"required":["key","value","value_type"],"description":"Public system setting.\n\nSingle public configuration parameter."},"IRedditLikeSystemSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Setting identifier."},"key":{"type":"string","description":"Setting key."},"value":{"type":"string","description":"Setting value."},"description":{"type":"string","description":"Setting description."},"value_type":{"type":"string","description":"Value type: 'string', 'int', 'double', 'boolean', 'json'."},"category":{"type":"string","description":"Setting category."},"is_public":{"type":"boolean","description":"Whether publicly visible."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp."}},"required":["id","key","value","value_type","is_public","created_at","updated_at"],"description":"System setting configuration.\n\nPlatform-wide configuration parameter.","x-autobe-prisma-schema":"reddit_like_system_settings"},"IRedditLikeSystemSetting.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Setting key."},"value":{"type":"string","description":"Setting value."},"description":{"type":"string","description":"Setting description."},"value_type":{"type":"string","description":"Value type."},"category":{"type":"string","description":"Category."},"is_public":{"type":"boolean","description":"Public visibility."}},"required":["key","value","value_type","is_public"],"description":"System setting creation request.","x-autobe-prisma-schema":"reddit_like_system_settings"},"IRedditLikeSystemSetting.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"Updated value."},"description":{"type":"string","description":"Updated description."},"category":{"type":"string","description":"Updated category."},"is_public":{"type":"boolean","description":"Updated visibility."}},"required":[],"description":"System setting update request.","x-autobe-prisma-schema":"reddit_like_system_settings"},"IRedditLikeAdmin.IPasswordResetRequestResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates request was processed."},"message":{"type":"string","description":"Generic confirmation message."}},"required":["success","message"],"description":"Administrator password reset request confirmation."},"IRedditLikeAdmin.IPasswordResetCompleteResponse":{"type":"object","properties":{"success":{"type":"boolean","const":true,"description":"Indicates successful password reset."},"message":{"type":"string","description":"Confirmation message."}},"required":["success","message"],"description":"Administrator password reset completion confirmation."}}}}