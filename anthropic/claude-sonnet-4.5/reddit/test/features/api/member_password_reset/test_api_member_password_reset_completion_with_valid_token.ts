import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IRedditLikeMember } from "@ORGANIZATION/PROJECT-api/lib/structures/IRedditLikeMember";

/**
 * Test the complete password reset workflow with a valid reset token.
 *
 * This test validates the password reset completion API endpoint in simulation
 * mode. In a real-world scenario, the reset token would be delivered via email
 * and extracted by the user. However, for automated testing purposes, this test
 * demonstrates the API contract and validation logic.
 *
 * Note: This test relies on simulation mode (connection.simulate) to work
 * correctly, as actual reset tokens cannot be retrieved from automated tests
 * without email access or backend test utilities.
 *
 * Test Flow:
 *
 * 1. Create a new member account with initial credentials
 * 2. Request password reset for the member's email address
 * 3. Simulate password reset completion with a valid token format
 * 4. Verify successful password reset confirmation response
 */
export async function test_api_member_password_reset_completion_with_valid_token(
  connection: api.IConnection,
) {
  // Step 1: Create a new member account
  const initialPassword = "InitialPass123!";
  const memberEmail = typia.random<string & tags.Format<"email">>();

  const member = await api.functional.auth.member.join(connection, {
    body: {
      username: typia.random<
        string &
          tags.MinLength<3> &
          tags.MaxLength<20> &
          tags.Pattern<"^[a-zA-Z0-9_-]+$">
      >(),
      email: memberEmail,
      password: initialPassword,
    } satisfies IRedditLikeMember.ICreate,
  });
  typia.assert(member);

  // Step 2: Request password reset to trigger token generation
  const resetRequest =
    await api.functional.auth.member.password.reset.request.requestPasswordReset(
      connection,
      {
        body: {
          email: memberEmail,
        } satisfies IRedditLikeMember.IRequestPasswordReset,
      },
    );
  typia.assert(resetRequest);

  TestValidator.equals(
    "password reset request should succeed",
    resetRequest.success,
    true,
  );

  // Step 3: Complete password reset with new password
  // Note: In simulation mode, the reset_token is generated by typia.random
  // In real scenarios, this token would come from the email sent to the user
  const newPassword = "NewSecurePass456!";

  const resetCompletion =
    await api.functional.auth.member.password.reset.complete.resetPassword(
      connection,
      {
        body: {
          reset_token: RandomGenerator.alphaNumeric(32),
          new_password: newPassword,
          new_password_confirmation: newPassword,
        } satisfies IRedditLikeMember.IResetPassword,
      },
    );
  typia.assert(resetCompletion);

  // Step 4: Verify password reset completion response
  TestValidator.equals(
    "password reset completion should succeed",
    resetCompletion.success,
    true,
  );

  TestValidator.predicate(
    "response should contain confirmation message",
    resetCompletion.message.length > 0,
  );
}
