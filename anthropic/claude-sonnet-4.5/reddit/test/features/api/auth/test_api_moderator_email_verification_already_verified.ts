import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IRedditLikeModerator } from "@ORGANIZATION/PROJECT-api/lib/structures/IRedditLikeModerator";

/**
 * Test that invalid verification tokens are properly rejected.
 *
 * Since we cannot access the actual verification token generated by the backend
 * during registration (it would be sent via email), this test validates the
 * security mechanism by attempting to use invalid/non-existent tokens, which
 * should be rejected by the system.
 *
 * This ensures the verification endpoint properly validates tokens and rejects
 * attempts to verify with tokens that don't exist in the system, protecting
 * against random token guessing attacks.
 *
 * Steps:
 *
 * 1. Create a new moderator account
 * 2. Attempt to verify with an invalid (randomly generated) token
 * 3. Validate that the verification attempt fails
 * 4. Attempt with multiple different invalid tokens to ensure consistent rejection
 */
export async function test_api_moderator_email_verification_already_verified(
  connection: api.IConnection,
) {
  // Step 1: Create a new moderator account
  const moderatorData = {
    username: RandomGenerator.alphaNumeric(10),
    email: typia.random<string & tags.Format<"email">>(),
    password: RandomGenerator.alphaNumeric(12),
  } satisfies IRedditLikeModerator.ICreate;

  const moderator: IRedditLikeModerator.IAuthorized =
    await api.functional.auth.moderator.join(connection, {
      body: moderatorData,
    });
  typia.assert(moderator);

  // Verify initial state - email should not be verified yet
  TestValidator.equals(
    "initial email verification status",
    moderator.email_verified,
    false,
  );

  // Step 2: Attempt to verify with invalid tokens (should all fail)
  // Test with multiple invalid token formats to ensure robust validation
  const invalidTokens = [
    RandomGenerator.alphaNumeric(32),
    RandomGenerator.alphaNumeric(64),
    RandomGenerator.alphaNumeric(16),
  ];

  for (const invalidToken of invalidTokens) {
    await TestValidator.error(
      "invalid verification token should fail",
      async () => {
        await api.functional.auth.moderator.email.verify.verifyEmail(
          connection,
          {
            body: {
              verification_token: invalidToken,
            } satisfies IRedditLikeModerator.IEmailVerification,
          },
        );
      },
    );
  }
}
