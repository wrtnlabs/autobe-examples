import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditLikeUsersUserIdPosts } from "../../../providers/patchRedditLikeUsersUserIdPosts";
import { patchRedditLikeUsersUserIdComments } from "../../../providers/patchRedditLikeUsersUserIdComments";

import { IPageIRedditLikePost } from "../../../api/structures/IPageIRedditLikePost";
import { IRedditLikeUser } from "../../../api/structures/IRedditLikeUser";
import { IPageIRedditLikeComment } from "../../../api/structures/IPageIRedditLikeComment";

@Controller("/redditLike/users/:userId")
export class RedditlikeUsersController {
  /**
   * Retrieve a filtered and paginated list of posts created by a specific user.
   *
   * Retrieve a comprehensive, filtered, and paginated list of all posts created
   * by a specific user, supporting the user profile post history feature
   * defined in the User Profiles and Feeds Requirements document. This
   * operation enables users to browse through another member's contribution
   * history, understand their posting patterns, and discover their most popular
   * or recent content.
   *
   * The operation integrates with the reddit_like_posts table, filtering posts
   * by the reddit_like_member_id that matches the userId path parameter. It
   * supports complex search capabilities including filtering by community, post
   * type (text, link, image), date ranges, and vote score thresholds. Users can
   * sort results by creation date (newest first - default), vote score (top
   * posts first), or controversial score to find different types of content in
   * the user's history.
   *
   * Security and privacy considerations include respecting user profile privacy
   * settings defined in reddit_like_users.profile_privacy. If the target user
   * has set their profile to 'private', only the user themselves can access
   * their post history. If set to 'members_only', authentication is required.
   * Public profiles are viewable by all users including guests. Additionally,
   * the operation filters out soft-deleted posts (where deleted_at is not null)
   * unless the requesting user is viewing their own profile, in which case
   * deleted posts are included with appropriate indicators.
   *
   * The response includes post summary information optimized for profile
   * display, containing essential metadata such as post title, community name,
   * vote score from mv_reddit_like_post_metrics, comment count, post type, and
   * creation timestamp. For performance optimization, the operation leverages
   * the materialized view mv_reddit_like_post_metrics to retrieve denormalized
   * vote scores and comment counts without expensive real-time aggregation.
   *
   * This operation supports the business requirement that user profiles display
   * chronological post history with filtering and sorting capabilities,
   * enabling both the profile owner and other community members to review
   * posting activity. It integrates with the karma system by displaying vote
   * scores that contribute to the user's post karma, and with the community
   * system by showing which communities the user participates in through their
   * posting activity.
   *
   * @param connection
   * @param userId Unique identifier of the user whose posts are being retrieved
   * @param body Search criteria, filtering options, sorting preferences, and
   *   pagination parameters for retrieving user posts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch("posts")
  public async posts(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeUser.IPostsRequest,
  ): Promise<IPageIRedditLikePost.ISummary> {
    try {
      return await patchRedditLikeUsersUserIdPosts({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered and paginated list of comments created by a specific
   * user.
   *
   * Retrieve a comprehensive, filtered, and paginated list of all comments
   * created by a specific user, supporting the user profile comment history
   * feature defined in the User Profiles and Feeds Requirements document. This
   * operation enables users to browse through another member's discussion
   * participation history, understand their commenting patterns, and discover
   * their most insightful or popular comments.
   *
   * The operation integrates with the reddit_like_comments table, filtering
   * comments by the reddit_like_member_id that matches the userId path
   * parameter. It supports complex search capabilities including filtering by
   * community, post context, date ranges, vote score thresholds, and comment
   * depth levels. Users can sort results by creation date (newest first -
   * default), vote score (top comments first), or controversial score to find
   * different types of commentary in the user's history.
   *
   * Security and privacy considerations include respecting user profile privacy
   * settings defined in reddit_like_users.profile_privacy. If the target user
   * has set their profile to 'private', only the user themselves can access
   * their comment history. If set to 'members_only', authentication is
   * required. Public profiles are viewable by all users including guests.
   * Additionally, the operation filters out soft-deleted comments (where
   * deleted_at is not null) unless the requesting user is viewing their own
   * profile, in which case deleted comments are included with appropriate
   * indicators.
   *
   * The response includes comment summary information optimized for profile
   * display, containing essential metadata such as comment text content (with
   * preview truncation for long comments), the post title and community where
   * the comment was made, vote score, nesting depth, edit status, and creation
   * timestamp. For each comment, the operation provides context links enabling
   * navigation to the original post and full comment thread, as required by the
   * Comment System Requirements for comment permalinks and context viewing.
   *
   * This operation supports the business requirement that user profiles display
   * chronological comment history with filtering and sorting capabilities,
   * enabling both the profile owner and other community members to review
   * discussion participation. It integrates with the karma system by displaying
   * vote scores that contribute to the user's comment karma, with the community
   * system by showing which communities the user participates in through
   * commenting, and with the post system by providing context about which posts
   * generated the user's comments.
   *
   * @param connection
   * @param userId Unique identifier of the user whose comments are being
   *   retrieved
   * @param body Search criteria, filtering options, sorting preferences, and
   *   pagination parameters for retrieving user comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch("comments")
  public async comments(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeUser.ICommentsRequest,
  ): Promise<IPageIRedditLikeComment.ISummary> {
    try {
      return await patchRedditLikeUsersUserIdComments({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
