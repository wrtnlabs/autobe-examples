import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikeUsersUserIdKarma } from "../../../../providers/getRedditLikeUsersUserIdKarma";

import { IRedditLikeUser } from "../../../../api/structures/IRedditLikeUser";

@Controller("/redditLike/users/:userId/karma")
export class RedditlikeUsersKarmaController {
  /**
   * Retrieve current karma scores for a specific user from the
   * reddit_like_users table.
   *
   * Retrieve the current karma scores for a specified user, including post
   * karma, comment karma, and total karma. This operation accesses the
   * reddit_like_users table where karma values are stored as denormalized
   * fields (post_karma and comment_karma) that are maintained in real-time as
   * voting activity occurs on the user's content.
   *
   * Karma represents the user's reputation earned through community voting on
   * their posts and comments. Post karma reflects votes on the user's submitted
   * posts, while comment karma reflects votes on their comments and replies.
   * The total karma is the sum of both values. Per business requirements, karma
   * can be negative if a user's content receives more downvotes than upvotes,
   * and there is no minimum limit.
   *
   * This endpoint is used throughout the platform wherever user reputation
   * needs to be displayed, including user profiles, post/comment author
   * displays, leaderboards, and analytics interfaces. The karma values returned
   * represent the current state of the user's reputation, calculated from all
   * historical voting activity on their content.
   *
   * Security considerations include respecting user privacy settings - if a
   * user has set show_karma_publicly to false in their profile, the system
   * should handle this appropriately based on the requesting user's
   * permissions. However, karma is generally considered public information
   * visible to all users including guests per the karma system requirements.
   *
   * The operation returns only the current karma state. For detailed karma
   * change history and audit trails, use the karma history endpoint instead.
   * The userId path parameter must reference an existing user in the
   * reddit_like_users table.
   *
   * @param connection
   * @param userId Unique identifier of the user whose karma scores are being
   *   retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeUser.IKarma> {
    try {
      return await getRedditLikeUsersUserIdKarma({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
