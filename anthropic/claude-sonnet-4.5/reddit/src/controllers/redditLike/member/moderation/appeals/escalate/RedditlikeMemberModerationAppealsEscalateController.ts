import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditLikeMemberModerationAppealsAppealIdEscalate } from "../../../../../../providers/postRedditLikeMemberModerationAppealsAppealIdEscalate";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";
import { putRedditLikeMemberModerationAppealsAppealIdEscalate } from "../../../../../../providers/putRedditLikeMemberModerationAppealsAppealIdEscalate";

import { IRedditLikeModerationAppeal } from "../../../../../../api/structures/IRedditLikeModerationAppeal";

@Controller("/redditLike/member/moderation/appeals/:appealId/escalate")
export class RedditlikeMemberModerationAppealsEscalateController {
  /**
   * Escalate a community moderation appeal to platform administrators for
   * higher-level review.
   *
   * Escalate a community-level moderation appeal to platform administrators for
   * higher-level review. This operation enables users who have had their
   * community-level appeals denied by moderators to request a second review by
   * platform administrators, as defined in requirements R-APP-025 and
   * R-APP-026.
   *
   * When a user escalates an appeal, the system updates the
   * reddit_like_moderation_appeals record by setting the is_escalated flag to
   * true and changing the status to route the appeal to the administrator
   * review queue. The escalation preserves the complete appeal history,
   * including the original community moderator's review and decision, ensuring
   * administrators have full context when reviewing the escalated appeal.
   *
   * Per requirement R-APP-027, the system limits users to one escalation per
   * moderation action, preventing repeated escalation attempts on the same
   * appeal. The operation validates that the appeal was previously reviewed and
   * denied at the community level before allowing escalation. Appeals of
   * platform-level suspensions cannot be escalated further as administrator
   * decisions are final per R-APP-024.
   *
   * The escalation process integrates with the moderation logging system
   * defined in reddit_like_moderation_logs, creating an audit trail entry
   * documenting the escalation action with timestamp, actor information, and
   * appeal context. Expected resolution timeframes for escalated appeals are
   * 7-10 days per R-APP-029, which is reflected in the expected_resolution_at
   * timestamp calculation.
   *
   * This operation requires authentication and verifies that the requesting
   * user is the original appellant. Only the member who submitted the appeal
   * can escalate it to administrators. The system enforces business rules
   * ensuring appeals are eligible for escalation based on their current status
   * and prior review outcomes.
   *
   * @param connection
   * @param appealId Unique identifier of the moderation appeal to escalate to
   *   administrators
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async postByAppealid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeModerationAppeal> {
    try {
      return await postRedditLikeMemberModerationAppealsAppealIdEscalate({
        member,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Escalate a denied community moderation appeal to platform administrators
   * for review.
   *
   * Update an existing moderation appeal to escalate it from community-level
   * review to platform administrator review. This operation enables users who
   * have had their community-level appeals denied by moderators to request a
   * second review by platform administrators, as defined in requirements
   * R-APP-025 and R-APP-026.
   *
   * When a user escalates an appeal, this operation updates the existing
   * reddit_like_moderation_appeals record by setting the is_escalated boolean
   * flag to true and changing the status field to route the appeal to the
   * administrator review queue. The escalation preserves the complete appeal
   * history, including the original community moderator's review and decision,
   * ensuring administrators have full context when reviewing the escalated
   * appeal.
   *
   * Per requirement R-APP-27, the system limits users to one escalation per
   * moderation action, preventing repeated escalation attempts on the same
   * appeal. The operation validates that the appeal was previously reviewed and
   * denied at the community level (status = 'upheld') before allowing
   * escalation. Appeals of platform-level suspensions cannot be escalated
   * further as administrator decisions are final per R-APP-024.
   *
   * The escalation integrates with the moderation logging system defined in
   * reddit_like_moderation_logs, creating an audit trail entry documenting the
   * escalation action with timestamp, actor information (the appellant member),
   * and appeal context. Expected resolution timeframes for escalated appeals
   * are 7-10 days per R-APP-029, which is reflected in the
   * expected_resolution_at timestamp calculation when the escalation is
   * processed.
   *
   * This operation requires member authentication and verifies that the
   * requesting user is the original appellant by checking that the
   * authenticated member's ID matches the appeal's appellant_member_id. Only
   * the member who submitted the appeal can escalate it to administrators. The
   * system enforces business rules ensuring appeals are eligible for escalation
   * based on their current status (must be 'upheld'/denied at community level)
   * and appeal type (community-level appeals only, not platform suspensions).
   *
   * Security considerations include validating appeal ownership to prevent
   * users from escalating other users' appeals, checking that the appeal hasn't
   * already been escalated (is_escalated = false), and ensuring the appeal is
   * in an appropriate state for escalation. The operation returns the updated
   * appeal record showing the new escalated status and routing to the
   * administrator review queue.
   *
   * @param connection
   * @param appealId Unique identifier of the moderation appeal to escalate to
   *   administrators
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async putByAppealid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeModerationAppeal> {
    try {
      return await putRedditLikeMemberModerationAppealsAppealIdEscalate({
        member,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
