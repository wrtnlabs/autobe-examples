import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditLikeMemberCommentsCommentIdReplies } from "../../../../../providers/postRedditLikeMemberCommentsCommentIdReplies";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IRedditLikeComment } from "../../../../../api/structures/IRedditLikeComment";

@Controller("/redditLike/member/comments/:commentId/replies")
export class RedditlikeMemberCommentsRepliesController {
  /**
   * Create a new reply to a specific comment in the threaded discussion.
   *
   * Create a new nested reply comment under an existing parent comment,
   * establishing a parent-child relationship in the threaded discussion
   * structure. This operation enables users to participate in multi-level
   * conversations by responding directly to specific comments rather than only
   * replying at the top level to posts.
   *
   * The operation validates that the parent comment exists, is not deleted, and
   * is not locked by moderators before allowing reply creation. It enforces the
   * maximum comment nesting depth of 10 levels as specified in section 4.1 of
   * the Comment System Requirements - if the parent comment is already at depth
   * 10, the system denies the reply creation and displays an error message
   * indicating maximum depth has been reached.
   *
   * Content validation ensures the reply text meets comment system
   * requirements: minimum 1 character, maximum 10,000 characters, with proper
   * sanitization to prevent XSS attacks as specified in section 11.1. The
   * system automatically detects and converts URLs within the reply text into
   * clickable links, preserves line breaks and paragraph spacing, and validates
   * against spam patterns including duplicate content detection and excessive
   * posting rate limits (10 comments per minute per section 11.2).
   *
   * Security and authorization checks verify the user is authenticated as a
   * member, moderator, or administrator before allowing reply creation. The
   * operation denies access to guest users and prompts them to log in per
   * section 2.1. Additionally, the system checks if the user is banned from the
   * community where the parent comment exists - community-banned users cannot
   * create replies in that community per the moderation requirements.
   *
   * Upon successful reply creation, the operation increments the parent post's
   * comment count, triggers karma calculation for the reply author based on
   * future voting activity, and sends notifications to the parent comment
   * author alerting them of the new reply. The system calculates the depth
   * level by incrementing the parent comment's depth by 1 and stores this in
   * the depth field for proper hierarchical rendering. The reply is immediately
   * available for voting and further nested replies (if depth allows), and
   * appears in the comment thread using the selected sorting algorithm (best,
   * top, new, controversial).
   *
   * This operation integrates with the voting system by initializing the new
   * reply with zero votes, making it eligible for upvotes and downvotes
   * immediately. It also integrates with the karma system - as votes are cast
   * on this reply, the author's comment karma will be updated accordingly per
   * the karma calculation rules. The reply inherits the same moderation and
   * reporting capabilities as top-level comments, enabling community members to
   * report inappropriate replies following the content moderation workflow.
   *
   * @param connection
   * @param commentId Unique identifier of the parent comment to which this
   *   reply is being added
   * @param body Reply comment content and metadata for creating a nested
   *   response to the parent comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeComment.IReplyCreate,
  ): Promise<IRedditLikeComment> {
    try {
      return await postRedditLikeMemberCommentsCommentIdReplies({
        member,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
