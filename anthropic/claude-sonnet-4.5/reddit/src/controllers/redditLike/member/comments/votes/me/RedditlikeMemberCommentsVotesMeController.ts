import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikeMemberCommentsCommentIdVotesMe } from "../../../../../../providers/getRedditLikeMemberCommentsCommentIdVotesMe";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

import { IRedditLikeCommentVote } from "../../../../../../api/structures/IRedditLikeCommentVote";

@Controller("/redditLike/member/comments/:commentId/votes/me")
export class RedditlikeMemberCommentsVotesMeController {
  /**
   * Retrieve the authenticated user's vote status on a specific comment.
   *
   * Retrieve the authenticated user's current vote status on a specific
   * comment, returning information about whether they have upvoted (+1),
   * downvoted (-1), or not voted (null) on the comment. This operation supports
   * the voting system's user interface requirements by providing the data
   * needed to display correct button states.
   *
   * The operation queries the reddit_like_comment_votes table to find a vote
   * record matching both the authenticated user's member ID and the specified
   * comment ID. If a vote record exists, it returns the vote value and
   * timestamp. If no vote record exists, it indicates the user has not voted on
   * this comment.
   *
   * This operation is essential for maintaining accurate voting UI state across
   * the platform. When users view comments, the system must display whether
   * they have already voted to prevent confusion and enable vote changes. The
   * vote status information allows the frontend to highlight the appropriate
   * vote button (upvote or downvote) and enable the vote removal
   * functionality.
   *
   * Per the voting system requirements, vote status is user-specific and
   * anonymous to other users. Only the individual user can see their own vote
   * status on content. This operation enforces that privacy by only returning
   * the authenticated user's vote information.
   *
   * The operation integrates with the comment display system defined in the
   * Comment System Requirements. When rendering comment threads, the system
   * needs to know the user's vote status for each comment to display
   * appropriate visual indicators (highlighted upvote button, highlighted
   * downvote button, or neutral state).
   *
   * Security considerations include verifying the authenticated user's session
   * is valid and ensuring the comment exists and is accessible. The operation
   * works with both active and deleted comments, as users may want to see their
   * vote history even on removed content.
   *
   * @param connection
   * @param commentId Unique identifier of the comment whose vote status is
   *   being retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeCommentVote> {
    try {
      return await getRedditLikeMemberCommentsCommentIdVotesMe({
        member,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
