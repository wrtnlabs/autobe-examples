import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditLikeMemberCommunities } from "../../../../providers/postRedditLikeMemberCommunities";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { postRedditLikeMemberCommunitiesCommunityIdUnsubscribe } from "../../../../providers/postRedditLikeMemberCommunitiesCommunityIdUnsubscribe";

import { IRedditLikeCommunity } from "../../../../api/structures/IRedditLikeCommunity";

@Controller("/redditLike/member/communities")
export class RedditlikeMemberCommunitiesController {
  /**
   * Create a new community with the authenticated member as primary moderator.
   *
   * This operation enables authenticated members to create new communities
   * (analogous to subreddits) where users can gather around shared interests
   * and topics. Communities serve as the foundational organizational structure
   * of the platform, with each community having its own rules, moderators, and
   * subscriber base.
   *
   * When a member creates a community, they provide required information
   * including a unique community identifier (code), display name, and
   * description explaining the community's purpose. The creator can optionally
   * configure additional settings such as privacy type (public or private),
   * posting permissions (who can create posts), allowed post types (text, link,
   * image), category classification, and visual branding (icon and banner
   * images).
   *
   * The system validates that the community code is globally unique
   * (case-insensitive) and meets format requirements (3-25 characters,
   * alphanumeric and underscores only). The description must be between 10-500
   * characters and clearly explain the community's purpose. Per business
   * requirements, members are limited to creating 3 communities per day to
   * prevent abuse.
   *
   * Upon successful creation, the system automatically assigns the creator as
   * the primary moderator with irrevocable full permissions for managing the
   * community. The new community is initialized with default settings (public,
   * anyone subscribed can post, all post types allowed) unless custom values
   * are provided. The subscriber count starts at zero.
   *
   * Security considerations include enforcing the daily creation limit,
   * validating community names against a blacklist of prohibited terms, and
   * preventing names that impersonate platform entities. The operation
   * integrates with the community management system defined in the requirements
   * and establishes the foundation for community-specific content,
   * subscriptions, and moderation workflows.
   *
   * This operation is essential for platform growth as it enables distributed
   * community creation by members, allowing the platform to scale organically
   * through user-driven community formation around diverse interests and
   * topics.
   *
   * @param connection
   * @param body Community creation data including unique identifier, name,
   *   description, privacy settings, posting permissions, allowed post types,
   *   category, and optional branding
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IRedditLikeCommunity.ICreate,
  ): Promise<IRedditLikeCommunity> {
    try {
      return await postRedditLikeMemberCommunities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Unsubscribe authenticated member from a specific community.
   *
   * Removes the subscription relationship between the currently authenticated
   * member and the specified community, as defined in the Community Management
   * Requirements section 4.3. This operation decrements the community's
   * subscriber count and immediately updates the member's personalized feed to
   * exclude posts from this community.
   *
   * When a member unsubscribes from a community, the system performs several
   * coordinated actions: First, it removes the corresponding record from the
   * reddit_like_community_subscriptions table. Second, it decrements the
   * subscriber_count field in the reddit_like_communities table by 1 to
   * maintain accurate subscription metrics. Third, it updates the member's
   * personalized home feed composition to stop including posts from the
   * unsubscribed community, as specified in the User Profiles and Feeds
   * Requirements.
   *
   * The operation validates that the member is currently subscribed to the
   * specified community before processing the unsubscription. If the member is
   * not subscribed, the system handles this gracefully as an idempotent
   * operation, returning success without making changes. The visual feedback
   * requirement from section 4.3 states that the system must provide immediate
   * visual confirmation within 200 milliseconds of the unsubscription action.
   *
   * This operation integrates with the subscription management system defined
   * in section 4 of the Community Management Requirements. Per section 4.2, the
   * unsubscription can be initiated from multiple access points including the
   * community page, the user's subscription management page, or the sidebar of
   * the home feed. The operation enforces authentication requirements - only
   * authenticated members can unsubscribe from communities.
   *
   * The subscriber count denormalization in the reddit_like_communities table
   * is updated synchronously to ensure consistency. The feed composition
   * changes are applied immediately, with the requirement that posts from the
   * unsubscribed community stop appearing in the member's feed within 60
   * seconds as specified in the subscription workflow requirements.
   *
   * @param connection
   * @param communityId Unique identifier of the community from which the member
   *   wishes to unsubscribe
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post(":communityId/unsubscribe")
  public async unsubscribe(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await postRedditLikeMemberCommunitiesCommunityIdUnsubscribe({
        member,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
