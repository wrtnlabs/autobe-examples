import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditLikeMemberCommunitiesCommunityIdSubscribe } from "../../../../../providers/postRedditLikeMemberCommunitiesCommunityIdSubscribe";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IRedditLikeCommunitySubscription } from "../../../../../api/structures/IRedditLikeCommunitySubscription";

@Controller("/redditLike/member/communities/:communityId/subscribe")
export class RedditlikeMemberCommunitiesSubscribeController {
  /**
   * Subscribe authenticated member to a specific community.
   *
   * This operation creates a new subscription relationship between an
   * authenticated member and a community, enabling the member to receive posts
   * from this community in their personalized home feed. The endpoint targets
   * the reddit_like_community_subscriptions table in the Prisma schema,
   * creating a many-to-many relationship record that links the current user's
   * member ID with the specified community ID.
   *
   * When a member subscribes to a community, several system updates occur
   * immediately: the subscription record is created with the current timestamp,
   * the community's subscriber_count is incremented by 1 in the
   * reddit_like_communities table, and posts from this community begin
   * appearing in the user's personalized feed within 60 seconds. The
   * subscription enables the member to see community content when using any
   * feed sorting method (hot, new, top, controversial) and provides the
   * foundation for personalized content discovery as defined in the User
   * Profiles and Feeds requirements.
   *
   * Security and authorization considerations include verifying that the
   * requesting user is an authenticated member (not a guest), checking that the
   * community exists and is accessible, and validating that the user is not
   * already subscribed to prevent duplicate subscriptions. For public
   * communities, any authenticated member can subscribe immediately. For
   * private communities as defined in the Community Management requirements,
   * the operation behavior differs: users must request access rather than
   * subscribing directly, though this endpoint may still be used with
   * appropriate approval workflow integration.
   *
   * The operation integrates with multiple platform systems: it affects feed
   * composition by adding a new content source to the user's home feed, updates
   * community metrics by incrementing the subscriber count, and may trigger
   * community recommendation algorithm updates if the platform tracks
   * subscription patterns for personalized suggestions. The subscription
   * relationship persists until the user explicitly unsubscribes, and there is
   * no limit on the number of communities a user can subscribe to as per the
   * requirements specification.
   *
   * Expected behavior includes immediate visual feedback updating the subscribe
   * button state to 'Subscribed' or 'Unsubscribe', real-time or near-real-time
   * subscriber count updates visible to all users viewing the community page,
   * and immediate inclusion of community posts in the subscriber's feed. Error
   * scenarios include attempting to subscribe while unauthenticated (requires
   * member role), attempting to subscribe to non-existent communities,
   * attempting to subscribe to private communities without approval, and
   * attempting to create duplicate subscriptions when already subscribed.
   *
   * @param connection
   * @param communityId Unique identifier of the community to subscribe to
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeCommunitySubscription> {
    try {
      return await postRedditLikeMemberCommunitiesCommunityIdSubscribe({
        member,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
