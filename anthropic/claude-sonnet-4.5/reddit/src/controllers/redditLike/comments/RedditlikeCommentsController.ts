import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikeCommentsCommentId } from "../../../providers/getRedditLikeCommentsCommentId";

import { IRedditLikeComment } from "../../../api/structures/IRedditLikeComment";

@Controller("/redditLike/comments/:commentId")
export class RedditlikeCommentsController {
  /**
   * Retrieve detailed information for a specific comment by its identifier.
   *
   * Retrieve comprehensive information about a specific comment identified by
   * its unique comment ID. This operation queries the reddit_like_comments
   * table and returns complete comment details including the comment text
   * content, author information, vote score, nesting depth, edit status, and
   * timestamps.
   *
   * This operation is accessible to all users including unauthenticated guests,
   * as comment viewing is a public read operation per business requirements.
   * The response includes the comment's content_text field with preserved
   * markdown formatting, vote_score showing the net upvotes minus downvotes,
   * depth indicating the nesting level in the thread (0 for top-level
   * comments), and edited flag showing whether the comment has been modified
   * since creation.
   *
   * The operation returns author information including username and karma
   * scores to provide reputation context for the comment. For deleted comments,
   * the system returns the comment structure with content replaced by
   * '[deleted]' placeholder per business requirement section 5.6, preserving
   * thread integrity while hiding removed content. Comments removed by
   * moderators display '[removed by moderator]' instead.
   *
   * Security and privacy considerations include respecting soft-delete status
   * (deleted_at timestamp) to hide content appropriately, checking moderation
   * removal status to display appropriate removal messages, and providing the
   * complete parent-child relationship data to enable proper thread rendering.
   * The response includes the parent comment ID for nested replies and the post
   * ID for thread context.
   *
   * This operation integrates with the voting system by providing current vote
   * scores, the user profile system by including author karma and profile
   * links, and the comment threading system by providing depth and parent
   * relationship data for proper hierarchical display. The comment can be
   * accessed via permalink URLs for direct linking and sharing as specified in
   * business requirement section 8.1.
   *
   * @param connection
   * @param commentId Unique identifier of the target comment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeComment> {
    try {
      return await getRedditLikeCommentsCommentId({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
