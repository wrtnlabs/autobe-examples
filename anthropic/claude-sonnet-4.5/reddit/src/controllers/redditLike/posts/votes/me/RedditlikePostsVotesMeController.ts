import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikePostsPostIdVotesMe } from "../../../../../providers/getRedditLikePostsPostIdVotesMe";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IRedditLikePostVote } from "../../../../../api/structures/IRedditLikePostVote";

@Controller("/redditLike/posts/:postId/votes/me")
export class RedditlikePostsVotesMeController {
  /**
   * Retrieve the authenticated user's vote status on a specific post.
   *
   * Retrieve the current authenticated user's voting status for a specific post
   * identified by the post ID path parameter. This operation queries the
   * reddit_like_post_votes table to determine if the user has cast an upvote
   * (+1), downvote (-1), or has not voted on this post.
   *
   * This endpoint is critical for maintaining accurate vote button states in
   * the user interface. When a user views a post, the client application needs
   * to know whether to display the upvote button as active, the downvote button
   * as active, or both buttons in their neutral state. Without this
   * information, the UI cannot correctly reflect the user's previous voting
   * decisions.
   *
   * The operation enforces authentication requirements per the User Roles and
   * Authentication specification, requiring a valid JWT access token to
   * identify the requesting user. The endpoint is accessible to all
   * authenticated users regardless of role - members, moderators, and
   * administrators all use the same endpoint to check their vote status.
   *
   * The response includes the vote direction (upvote or downvote), the
   * timestamp when the vote was cast, and when it was last modified. If the
   * user has not voted on the post, the operation returns a response indicating
   * no vote exists. This allows the client to distinguish between "never voted"
   * and "vote removed" states.
   *
   * Security considerations include verifying that the post ID exists and is
   * accessible, preventing information leakage about non-existent posts. The
   * operation respects soft deletion - if the post has been deleted (deleted_at
   * is not null in reddit_like_posts table), the system still returns the
   * user's vote status to maintain vote history integrity.
   *
   * This operation integrates with the voting system requirements defined in
   * the Voting System specification, supporting the requirement that users can
   * view their own voting history and current vote states. It works in
   * conjunction with vote submission endpoints to provide complete vote
   * management functionality.
   *
   * @param connection
   * @param postId Unique identifier of the post to retrieve vote status for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikePostVote.IUserVoteStatus> {
    try {
      return await getRedditLikePostsPostIdVotesMe({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
