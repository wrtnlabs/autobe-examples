import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikePostsPostIdMetrics } from "../../../../providers/getRedditLikePostsPostIdMetrics";

import { IRedditLikePostMetrics } from "../../../../api/structures/IRedditLikePostMetrics";

@Controller("/redditLike/posts/:postId/metrics")
export class RedditlikePostsMetricsController {
  /**
   * Retrieve pre-calculated engagement metrics for a specific post.
   *
   * Retrieve comprehensive engagement metrics for a specific post from the
   * Reddit-like platform. This operation accesses the
   * mv_reddit_like_post_metrics materialized view which provides pre-calculated
   * denormalized metrics optimized for query performance without expensive
   * real-time vote and comment aggregation.
   *
   * The metrics include detailed voting statistics: vote_score (net upvotes
   * minus downvotes used for ranking algorithms), upvote_count (total positive
   * votes for popularity analysis), downvote_count (total negative votes for
   * controversy calculations), and derived upvote percentage (ratio of upvotes
   * to total votes). Additionally, the operation returns comment_count
   * aggregated from all comments and replies on the post, enabling fast feed
   * displays showing engagement levels.
   *
   * This endpoint is critical for content sorting algorithms defined in the
   * Content Sorting Algorithms specification. The vote_score feeds into Hot
   * algorithm time decay calculations and Top sorting rankings. The
   * upvote/downvote counts power the Controversial sorting algorithm which
   * identifies polarizing content with balanced voting patterns. The
   * comment_count provides engagement signals for content discovery and user
   * interest indication.
   *
   * The operation integrates with the Voting System where individual votes are
   * recorded in reddit_like_post_votes table, and the materialized view
   * aggregates these atomic vote records into summary statistics. The metrics
   * are refreshed periodically (indicated by last_calculated_at timestamp) to
   * balance data freshness with write performance on the normalized voting
   * tables.
   *
   * Security considerations include public read access for metrics on posts in
   * public communities, while private community posts require membership
   * verification before exposing metrics. The operation respects community
   * privacy settings and post deletion status, returning appropriate errors for
   * inaccessible or deleted posts.
   *
   * Performance expectations are sub-second response times since metrics are
   * pre-calculated in the materialized view rather than computed on-demand. The
   * last_calculated_at timestamp indicates metric freshness, typically within
   * seconds to minutes of actual vote changes depending on view refresh
   * frequency. This architecture ensures fast feed rendering and sorting
   * algorithm execution even for posts with thousands of votes.
   *
   * @param connection
   * @param postId Unique identifier of the post to retrieve metrics for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikePostMetrics> {
    try {
      return await getRedditLikePostsPostIdMetrics({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
