import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikeCommunitiesCommunityIdRules } from "../../../../providers/getRedditLikeCommunitiesCommunityIdRules";
import { getRedditLikeCommunitiesCommunityIdRulesRuleId } from "../../../../providers/getRedditLikeCommunitiesCommunityIdRulesRuleId";

import { IPageIRedditLikeCommunityRule } from "../../../../api/structures/IPageIRedditLikeCommunityRule";
import { IRedditLikeCommunityRule } from "../../../../api/structures/IRedditLikeCommunityRule";

@Controller("/redditLike/communities/:communityId/rules")
export class RedditlikeCommunitiesRulesController {
  /**
   * Retrieve all rules for a specific community.
   *
   * Retrieve the complete list of community-specific rules for a given
   * community by its unique identifier. This operation returns all rules
   * defined by community moderators to guide user behavior and maintain
   * community standards within that specific community.
   *
   * This endpoint provides essential information for users before they create
   * posts or comments in the community, helping them understand community
   * expectations and avoid rule violations. The rules are displayed on the
   * community page, in the post creation interface, and can be referenced
   * during content moderation workflows.
   *
   * The operation fetches rules from the reddit_like_community_rules table,
   * which stores up to 15 custom rules per community. Each rule includes a
   * title (3-100 characters), optional description (up to 500 characters), rule
   * type (required, prohibited, or etiquette), and display order for proper
   * presentation.
   *
   * Rules are ordered by their display_order field to ensure consistent
   * presentation as configured by moderators. The response includes all rule
   * metadata to enable proper display in the user interface, including rule
   * types that help categorize rules as mandatory requirements, prohibitions,
   * or etiquette guidelines.
   *
   * This is a public read-only operation accessible to all users including
   * guests, as community rules must be visible to anyone considering
   * participation in the community. No authentication is required to view
   * community rules, supporting transparency and informed participation.
   *
   * @param connection
   * @param communityId Unique identifier of the community whose rules are being
   *   retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<IPageIRedditLikeCommunityRule> {
    try {
      return await getRedditLikeCommunitiesCommunityIdRules({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific community rule.
   *
   * Retrieve comprehensive details about a single community rule identified by
   * its unique identifier within a specific community. This operation provides
   * access to the complete rule definition including the title, detailed
   * description, rule type classification, and display ordering information.
   *
   * This endpoint serves multiple stakeholders and use cases. General users
   * access rule details to understand community standards before posting
   * content or when they receive moderation notices citing specific rules.
   * Moderators retrieve rule information when reviewing reported content to
   * verify violations against community standards. The platform displays rule
   * details in moderation interfaces, post creation workflows, and community
   * information pages.
   *
   * The operation integrates with the community management system defined in
   * the Community Management Requirements document. Rules are
   * community-specific entities created and managed by community moderators,
   * with each community supporting up to 15 custom rules as specified in
   * requirement R-CAT-006. Rules are categorized by type (required, prohibited,
   * etiquette) and displayed in order determined by the display_order field.
   *
   * Security considerations include verifying that the requested rule belongs
   * to the specified community to prevent unauthorized cross-community rule
   * access. The endpoint returns public rule information visible to all users
   * regardless of authentication status, supporting the platform's transparency
   * principle that community rules must be visible to users before they post
   * content.
   *
   * Related operations include listing all rules for a community (GET
   * /communities/{communityId}/rules), creating new rules (POST
   * /communities/{communityId}/rules), and updating rule definitions (PUT
   * /communities/{communityId}/rules/{ruleId}). This operation is frequently
   * used in conjunction with post creation workflows where users review rules
   * before submitting content, and moderation workflows where moderators
   * reference specific rules when taking actions.
   *
   * @param connection
   * @param communityId Unique identifier of the community containing the rule
   * @param ruleId Unique identifier of the specific rule to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ruleId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeCommunityRule> {
    try {
      return await getRedditLikeCommunitiesCommunityIdRulesRuleId({
        communityId,
        ruleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
