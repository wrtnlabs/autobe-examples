import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikeAdminModerationAppealsAppealId } from "../../../../../providers/getRedditLikeAdminModerationAppealsAppealId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { postRedditLikeAdminModerationAppealsAppealIdReview } from "../../../../../providers/postRedditLikeAdminModerationAppealsAppealIdReview";

import { IRedditLikeModerationAppeal } from "../../../../../api/structures/IRedditLikeModerationAppeal";

@Controller("/redditLike/admin/moderation/appeals/:appealId")
export class RedditlikeAdminModerationAppealsController {
  /**
   * Retrieve detailed information about a specific moderation appeal.
   *
   * Retrieve comprehensive details about a specific moderation appeal
   * identified by its unique ID from the reddit_like_moderation_appeals table.
   * This operation provides moderators and administrators with complete appeal
   * information necessary for review and decision-making.
   *
   * The appeal details include the appellant member's identity, the type of
   * moderation action being contested (content removal, community ban, or
   * platform suspension), the user's written appeal reasoning, current review
   * status, and any decisions made by reviewing moderators or administrators.
   * The response incorporates related context such as the original moderation
   * action details, associated bans or suspensions, and the complete timeline
   * of appeal progression.
   *
   * Security and authorization are critical for this operation. Moderators can
   * only access appeals for communities they moderate, while administrators
   * have platform-wide access to all appeals including escalated cases. The
   * operation enforces role-based access control to prevent unauthorized access
   * to sensitive moderation information and protects reporter privacy by not
   * exposing reporter identities in appeal details.
   *
   * This operation integrates with the moderation workflow by providing the
   * detailed information needed for appeal review decisions. Reviewers use this
   * data to understand the original violation, assess the user's appeal
   * reasoning, review any prior moderation history, and make informed decisions
   * about upholding, overturning, or reducing penalties. The appeal information
   * also supports the escalation workflow where community-level appeals can be
   * elevated to administrator review.
   *
   * The response includes all fields from the reddit_like_moderation_appeals
   * table including appellant_member_id, moderation_action_id,
   * community_ban_id, platform_suspension_id, reviewer_moderator_id,
   * reviewer_admin_id, appeal_type, appeal_text, status, decision_explanation,
   * is_escalated, expected_resolution_at, and relevant timestamps. Related
   * entity details may be included to provide complete context without
   * requiring additional API calls.
   *
   * @param connection
   * @param appealId Unique identifier of the moderation appeal to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeModerationAppeal> {
    try {
      return await getRedditLikeAdminModerationAppealsAppealId({
        admin,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Review and make a decision on a moderation appeal.
   *
   * Process a moderation appeal review by recording the reviewer's decision and
   * applying appropriate actions based on the decision outcome. This operation
   * handles the complete appeal decision workflow including validation, action
   * execution, status updates, and user notification as specified in the
   * Content Moderation and Reporting requirements.
   *
   * The appeal review process begins with authorization validation to ensure
   * the reviewer has appropriate permissions for the appeal type. Moderators
   * can review appeals for moderation actions taken in communities they
   * moderate, while administrators handle platform suspension appeals and
   * escalated community appeals. The operation enforces the proper review
   * authority based on appeal_type and community context from the
   * reddit_like_moderation_appeals table.
   *
   * When processing an appeal decision, the operation supports three decision
   * types as defined in requirements R-APP-016. An 'uphold' decision maintains
   * the original moderation action without changes, keeping content removed or
   * bans active. An 'overturn' decision completely reverses the moderation
   * action within 1 minute per R-APP-018, restoring removed content, lifting
   * community bans, or removing platform suspensions. A 'reduce_penalty'
   * decision partially accepts the appeal per R-APP-019, applying modified
   * penalties such as reducing permanent bans to temporary bans or shortening
   * ban durations.
   *
   * The operation updates the reddit_like_moderation_appeals table fields
   * including status (to 'upheld', 'overturned', or 'reduced'),
   * reviewer_moderator_id or reviewer_admin_id depending on reviewer role,
   * decision_explanation with the required written explanation per R-APP-020,
   * and reviewed_at timestamp. When decisions are overturned, the operation
   * triggers corresponding actions on related tables such as updating
   * deleted_at on reddit_like_posts or reddit_like_comments for content
   * restoration, setting is_active to false on reddit_like_community_bans or
   * reddit_like_platform_suspensions, or modifying expiration_date for penalty
   * reductions.
   *
   * Notification requirements per R-APP-021 and R-APP-022 mandate sending
   * appeal decision notifications to appellants within 5 minutes including the
   * decision outcome, reviewer explanation, any penalty changes, and
   * information about escalation options or finality. For denied community
   * appeals per R-APP-023, users are informed they may escalate to
   * administrators. For denied platform appeals per R-APP-024, users are
   * notified the decision is final. The operation creates entries in
   * reddit_like_moderation_logs to maintain complete audit trail of appeal
   * decisions per logging requirements.
   *
   * The review decision is submitted through the request body containing the
   * decision type, required written explanation, optional penalty modification
   * details for 'reduce_penalty' decisions, and internal notes for
   * moderator/administrator collaboration. The operation validates all required
   * fields, ensures explanation meets minimum length requirements, and verifies
   * that penalty modifications are appropriate for the decision type before
   * processing.
   *
   * @param connection
   * @param appealId Unique identifier of the moderation appeal to review
   * @param body Appeal review decision including decision type, explanation,
   *   and optional penalty modifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("review")
  public async review(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeModerationAppeal.IReview,
  ): Promise<IRedditLikeModerationAppeal> {
    try {
      return await postRedditLikeAdminModerationAppealsAppealIdReview({
        admin,
        appealId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
