import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditLikeAdminModeratorsModeratorIdActivity } from "../../../../providers/getRedditLikeAdminModeratorsModeratorIdActivity";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getRedditLikeAdminModeratorsModeratorIdStatistics } from "../../../../providers/getRedditLikeAdminModeratorsModeratorIdStatistics";

import { IRedditLikeModerator } from "../../../../api/structures/IRedditLikeModerator";
import { IRedditLikeModeratorActivityStats } from "../../../../api/structures/IRedditLikeModeratorActivityStats";

@Controller("/redditLike/admin/moderators/:moderatorId")
export class RedditlikeAdminModeratorsController {
  /**
   * Retrieve detailed activity information for a specific moderator.
   *
   * Retrieve comprehensive activity information for a specific moderator
   * identified by their unique moderator ID. This operation provides insights
   * into the moderator's engagement, performance, and contribution patterns
   * across the communities they manage.
   *
   * The operation returns detailed activity metrics including the total number
   * of reports reviewed, content removal actions taken, community bans issued,
   * and appeals processed by the moderator. This data is essential for
   * moderator accountability, performance evaluation, and identifying inactive
   * moderators who may need to be removed per requirements section R-LOG-014.
   *
   * Security considerations include restricting access to moderator activity
   * details based on the requesting user's authorization level. Only
   * administrators and the moderator themselves should have full access to
   * detailed activity breakdowns, while community members may see limited
   * public activity statistics. The operation integrates with the moderation
   * logging system defined in the Prisma schema through the
   * reddit_like_moderation_logs table.
   *
   * The activity information encompasses all moderation actions performed by
   * the moderator across all communities they manage, including content
   * removals from reddit_like_moderation_actions, ban issuances from
   * reddit_like_community_bans, and appeal reviews from
   * reddit_like_moderation_appeals. This provides a comprehensive view of the
   * moderator's contribution to platform safety and community management.
   *
   * This operation is typically used by platform administrators for moderator
   * performance monitoring, by community managers for evaluating moderator
   * effectiveness, and by moderators themselves for tracking their own
   * contributions and identifying areas needing attention.
   *
   * @param connection
   * @param moderatorId Unique identifier of the target moderator whose activity
   *   information is being retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get("activity")
  public async activity(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeModerator.IActivity> {
    try {
      return await getRedditLikeAdminModeratorsModeratorIdActivity({
        admin,
        moderatorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve pre-calculated statistical metrics for a specific moderator.
   *
   * Retrieve comprehensive statistical metrics for a specific moderator
   * identified by their unique moderator ID. This operation accesses the
   * mv_reddit_like_moderator_activity_stats materialized view to provide
   * pre-calculated performance and activity data without expensive real-time
   * aggregation queries.
   *
   * The operation returns aggregated metrics including the total number of
   * reports reviewed (from reddit_like_moderation_actions where report_id is
   * not null), total content removal actions (where action_type='remove'),
   * total community bans issued (from reddit_like_community_bans), total
   * appeals reviewed (from reddit_like_moderation_appeals), and average
   * response time in hours from report submission to moderator action. These
   * metrics provide quantitative assessment of moderator performance and
   * engagement levels.
   *
   * Security considerations include appropriate access control to moderator
   * statistics. Administrators should have full access to all moderator
   * statistics for platform management purposes. Individual moderators should
   * be able to view their own statistics for self-assessment and performance
   * tracking. The statistics may be partially visible to community members for
   * transparency purposes, though sensitive metrics like average response time
   * might be restricted to moderators and administrators only.
   *
   * The materialized view is refreshed periodically to maintain near-real-time
   * accuracy while optimizing query performance. The last_calculated_at
   * timestamp indicates data freshness, helping users understand how current
   * the statistics are. This approach balances data accuracy with system
   * performance, ensuring dashboard displays load quickly even for moderators
   * with extensive activity histories.
   *
   * This operation integrates with moderator activity tracking defined in the
   * Prisma schema through the mv_reddit_like_moderator_activity_stats table. It
   * supports use cases including moderator performance dashboards per
   * requirements section 13.5, identification of inactive moderators per
   * R-LOG-014 (moderators with no activity in 30 days), and platform-wide
   * moderator effectiveness analysis. The statistics help administrators
   * recognize high-performing moderators, identify those needing support or
   * training, and maintain overall moderation quality across the platform.
   *
   * @param connection
   * @param moderatorId Unique identifier of the target moderator whose
   *   statistical metrics are being retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get("statistics")
  public async statistics(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<IRedditLikeModeratorActivityStats> {
    try {
      return await getRedditLikeAdminModeratorsModeratorIdStatistics({
        admin,
        moderatorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
