import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putRedditLikeAdminUsersUserIdProfile } from "../../../../../providers/putRedditLikeAdminUsersUserIdProfile";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IRedditLikeUser } from "../../../../../api/structures/IRedditLikeUser";

@Controller("/redditLike/admin/users/:userId/profile")
export class RedditlikeAdminUsersProfileController {
  /**
   * Update profile information for the authenticated user.
   *
   * Update editable profile information for the authenticated user identified
   * by the userId path parameter. This operation modifies user profile data in
   * the reddit_like_users table, allowing users to customize their profile
   * biography, avatar image, and privacy settings that control how their
   * profile and activity are displayed to other platform members.
   *
   * This endpoint serves the critical use case of profile customization and
   * privacy management. Users access their account settings or profile page to
   * modify their public presentation, add or update biographical information,
   * change their profile picture, or adjust privacy controls for karma
   * visibility, profile access, and subscription list display. The operation
   * empowers users to manage their platform identity and control what
   * information they share with the community.
   *
   * Authorization enforcement is critical for this operation. The system must
   * verify that the authenticated user's ID matches the userId path parameter,
   * ensuring users can only modify their own profiles. Moderators and
   * administrators do not have special privileges to edit other users' profiles
   * - profile editing is strictly limited to the profile owner. If the
   * authenticated user ID does not match the userId in the path, the system
   * returns a permission error.
   *
   * Editable fields include profile_bio (limited to 200-500 characters per
   * requirements document 02-user-roles-authentication.md section 2.3),
   * avatar_url (must be valid image URL or uploaded image reference),
   * show_karma_publicly (boolean controlling karma visibility), profile_privacy
   * (values: 'public', 'members_only', 'private'), and
   * show_subscriptions_publicly (boolean controlling subscription list
   * visibility). The username, email, password_hash, role, karma scores
   * (post_karma, comment_karma), and timestamps are immutable through this
   * endpoint and must be modified through dedicated specialized endpoints.
   *
   * Validation rules enforce profile_bio length constraints, avatar_url format
   * validation (must point to valid image), and profile_privacy enumeration
   * values. The system validates that all provided values meet business
   * requirements before applying updates. If validation fails, the system
   * returns detailed error messages indicating which fields failed validation
   * and why.
   *
   * The operation updates the updated_at timestamp to reflect when profile
   * modifications occurred. This timestamp is used for tracking profile edit
   * history and identifying recently active users. The operation returns the
   * complete updated profile information after successful modification,
   * allowing clients to refresh their display with confirmed changes.
   *
   * This operation integrates with the user authentication system defined in
   * requirement document 02-user-roles-authentication.md, requiring valid JWT
   * token authentication and enforcing member-level permissions. It implements
   * privacy controls specified in document 09-user-profiles-feeds.md section 8
   * on profile privacy settings, allowing users to configure their public
   * visibility preferences.
   *
   * @param connection
   * @param userId Unique identifier of the user whose profile is being updated,
   *   must match the authenticated user's ID
   * @param body Updated profile information including biography, avatar, and
   *   privacy settings for the user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeUser.IProfileUpdate,
  ): Promise<IRedditLikeUser.IProfile> {
    try {
      return await putRedditLikeAdminUsersUserIdProfile({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
