import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditLikeAdminCommunitiesCommunityIdModerationLog } from "../../../../../providers/patchRedditLikeAdminCommunitiesCommunityIdModerationLog";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageIRedditLikeModerationLog } from "../../../../../api/structures/IPageIRedditLikeModerationLog";
import { IRedditLikeModerationLog } from "../../../../../api/structures/IRedditLikeModerationLog";

@Controller("/redditLike/admin/communities/:communityId/moderation-log")
export class RedditlikeAdminCommunitiesModeration_logController {
  /**
   * Search and retrieve moderation logs for a specific community.
   *
   * Retrieve a filtered, paginated list of moderation log entries for a
   * specific community, providing comprehensive audit trail access for
   * moderators and administrators. This operation returns all moderation system
   * activities that occurred within the specified community, including content
   * report submissions, moderator actions on posts and comments, community ban
   * issuances and lifts, appeal submissions and decisions, and report
   * dismissals.
   *
   * The moderation log system serves as the permanent immutable historical
   * record of community governance and content moderation activities. It
   * captures complete context for every moderation event including who
   * performed the action (member reporting, moderator acting, or administrator
   * deciding), what was affected (posts, comments, users), why the action was
   * taken (violation categories, reasoning), and when it occurred (precise
   * timestamps). This transparency is essential for moderation accountability,
   * dispute resolution, and understanding community governance patterns over
   * time.
   *
   * This operation integrates with the reddit_like_moderation_logs table as
   * defined in the Prisma schema, which maintains comprehensive audit trails
   * with foreign key references to all related moderation entities. The table
   * stores log type categorization, human-readable action descriptions, JSON
   * metadata for event-specific details, and IP addresses for security
   * auditing. The community_id foreign key enables efficient filtering of logs
   * to specific communities.
   *
   * Security and authorization are critical for this operation. Community
   * moderators can view logs only for communities they moderate, enabling them
   * to review their team's moderation activities, track report handling, and
   * ensure consistency in rule enforcement. Platform administrators have
   * unrestricted access to logs across all communities for oversight, appeal
   * reviews, and platform-wide moderation analytics.
   *
   * The operation supports advanced filtering capabilities to help moderators
   * efficiently navigate large log histories. Filters include log type
   * (report_submitted, action_taken, ban_issued, etc.), time ranges for
   * historical analysis, specific actor identification, and related entity
   * references (specific reports, actions, bans, or appeals). The request body
   * enables complex search queries with pagination to handle communities with
   * extensive moderation histories.
   *
   * Response data includes complete log entry details with all referenced
   * entities (actors, affected content, related reports/actions/bans/appeals)
   * providing full event context. The paginated structure ensures performant
   * delivery of log data even for highly active communities with thousands of
   * moderation events. This operation is fundamental to the public moderation
   * log feature per requirement R-LOG-015, enabling community members to review
   * moderation transparency while protecting sensitive internal notes and
   * private information.
   *
   * @param connection
   * @param communityId Unique identifier of the community whose moderation logs
   *   are being retrieved
   * @param body Search criteria and pagination parameters for filtering
   *   moderation logs including log type, time ranges, actor filters, and
   *   related entity filters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeModerationLog.IRequest,
  ): Promise<IPageIRedditLikeModerationLog> {
    try {
      return await patchRedditLikeAdminCommunitiesCommunityIdModerationLog({
        admin,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
