import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditLikeAdminCommunitiesCommunityIdModerators } from "../../../../../providers/postRedditLikeAdminCommunitiesCommunityIdModerators";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IRedditLikeCommunityModerator } from "../../../../../api/structures/IRedditLikeCommunityModerator";

@Controller("/redditLike/admin/communities/:communityId/moderators")
export class RedditlikeAdminCommunitiesModeratorsController {
  /**
   * Assign a new moderator to a community with specified permissions.
   *
   * Assign a new moderator to manage a specific community by creating a
   * moderator assignment record with customizable permission grants. This
   * operation enables existing community moderators with 'manage_moderators'
   * permission to expand their moderation team by inviting additional
   * moderators from the member base.
   *
   * The operation implements the moderator invitation workflow defined in the
   * Community Management requirements document section 5.2. When a moderator
   * invites a new moderator, the system verifies the invited user is a
   * registered member, ensures they are not already a moderator of this
   * community, and validates that the community has not reached the maximum
   * limit of 25 moderators. The inviting moderator can customize which specific
   * permissions to grant, choosing from manage_posts, manage_comments,
   * manage_users, manage_settings, manage_moderators, and access_reports.
   *
   * This operation references the reddit_like_community_moderators table which
   * tracks the many-to-many relationship between moderators and communities.
   * Each assignment record includes the moderator being assigned, the community
   * they are managing, who assigned them (for seniority tracking), the
   * timestamp of assignment (for seniority-based removal rules), whether they
   * are the primary moderator (always false for invited moderators), and the
   * JSON or comma-separated list of granted permissions.
   *
   * The default permission set for newly invited moderators includes
   * 'manage_posts', 'manage_comments', and 'access_reports' as specified in the
   * requirements, though the inviting moderator can customize this set during
   * the invitation. Primary moderators (community creators) automatically
   * receive all permissions and have irrevocable status, but this operation is
   * for inviting additional moderators, not creating communities.
   *
   * Authorization for this operation requires the requesting user to be an
   * authenticated moderator with 'manage_moderators' permission in the target
   * community, or a platform administrator who can manage moderators in any
   * community. The operation validates these permissions before allowing
   * moderator assignment to maintain proper community governance hierarchy.
   *
   * @param connection
   * @param communityId Unique identifier of the community where the new
   *   moderator is being assigned
   * @param body Moderator assignment information including the user to be
   *   assigned and their permission set
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditLikeCommunityModerator.ICreate,
  ): Promise<IRedditLikeCommunityModerator> {
    try {
      return await postRedditLikeAdminCommunitiesCommunityIdModerators({
        admin,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
