import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorEmailVerify } from "../../../../../providers/postAuthModeratorEmailVerify";

import { IRedditLikeModerator } from "../../../../../api/structures/IRedditLikeModerator";

@Controller("/auth/moderator/email/verify")
export class AuthModeratorEmailVerifyController {
  /**
   * Verify moderator email address using verification token.
   *
   * Completes email verification workflow by validating the verification token
   * and marking the moderator's email as verified in the reddit_like_moderators
   * table. This endpoint receives the unique verification token from the email
   * link, validates it against reddit_like_email_verifications records, checks
   * expiration constraints, and updates the moderator's email_verified status
   * to true.
   *
   * The validation process checks that the verification token exists in
   * reddit_like_email_verifications, matches the provided token exactly, has
   * not expired (current time is before expires_at timestamp set to 24 hours
   * after creation per requirements), and has not been previously used
   * (verified_at field is null). The system retrieves the associated moderator
   * record via reddit_like_user_id foreign key reference.
   *
   * If the token is expired (current time exceeds expires_at), the system
   * rejects the verification with error message 'This verification link has
   * expired. Please request a new verification email' and provides an option to
   * resend verification email. Already-verified tokens (verified_at is not
   * null) are rejected to prevent reuse.
   *
   * Upon successful validation, the system performs two database updates: (1)
   * sets email_verified to true in the reddit_like_moderators record, granting
   * the moderator full verified account privileges, and (2) sets verified_at to
   * the current timestamp in the reddit_like_email_verifications record,
   * marking the token as consumed and preventing future use.
   *
   * For moderators created through registration, email verification is
   * initially set to false, and certain features may require verified status
   * (such as being assigned moderator permissions for communities or posting in
   * certain communities per requirements). The verification type field
   * distinguishes between 'registration' (initial account email verification)
   * and 'email_change' (verifying new email address when moderators update
   * their email).
   *
   * This operation is publicly accessible as verification links are sent via
   * email and users may click them before logging in. A confirmation message is
   * displayed upon successful verification, and if the user is authenticated,
   * they may be redirected to continue their previous activity. If verification
   * fails, clear error messages guide users to request a new verification
   * email.
   *
   * @param connection
   * @param body Email verification token from verification link
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IRedditLikeModerator.IEmailVerification,
  ): Promise<IRedditLikeModerator.IEmailVerificationConfirmation> {
    try {
      return await postAuthModeratorEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
