import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorPasswordResetComplete } from "../../../../../../providers/postAuthModeratorPasswordResetComplete";

import { IRedditLikeModerator } from "../../../../../../api/structures/IRedditLikeModerator";

@Controller("/auth/moderator/password/reset/complete")
export class AuthModeratorPasswordResetCompleteController {
  /**
   * Complete password reset by validating token and updating password.
   *
   * Completes password reset by validating the reset token and updating the
   * moderator's password to a new secure value. This endpoint receives the
   * reset token (from email link) and new password, validates the token against
   * reddit_like_password_resets records, verifies expiration constraints, and
   * updates authentication credentials.
   *
   * The validation process checks that the reset token exists in
   * reddit_like_password_resets, matches the provided token exactly, has not
   * expired (current time is before expires_at timestamp set to 1 hour after
   * creation), and has not been previously used (used_at field is null). If any
   * validation fails, the system rejects the request with appropriate error
   * messages: expired tokens display 'This password reset link has expired.
   * Please request a new password reset', and already-used tokens are
   * rejected.
   *
   * The new password must meet all platform password requirements: minimum 8
   * characters, at least one uppercase letter, one lowercase letter, one
   * number, and one special character (@, #, $, %, &, *, etc.). The system
   * validates password strength before accepting the change, displaying
   * specific validation errors if requirements are not met.
   *
   * Upon successful validation, the system updates the reddit_like_moderators
   * record by replacing the password_hash with a newly generated secure hash of
   * the new password using bcrypt, Argon2, or PBKDF2. The
   * reddit_like_password_resets record is updated by setting used_at to the
   * current timestamp, preventing token reuse per security requirements.
   *
   * Critically, all existing sessions in reddit_like_sessions for this
   * moderator account are invalidated by setting their deleted_at timestamps to
   * the current time. This security measure ensures that any potentially
   * compromised sessions using the old password cannot continue accessing the
   * account after password reset. The user must log in again with their new
   * password to establish fresh authenticated sessions.
   *
   * A confirmation email is sent to the account email address notifying the
   * moderator that their password has been successfully changed, providing
   * security awareness if the password change was unauthorized. This operation
   * is publicly accessible as users resetting passwords cannot authenticate
   * with their forgotten credentials.
   *
   * @param connection
   * @param body Reset token and new password for completing password reset
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async completePasswordReset(
    @TypedBody()
    body: IRedditLikeModerator.IPasswordResetComplete,
  ): Promise<IRedditLikeModerator.IPasswordResetConfirmation> {
    try {
      return await postAuthModeratorPasswordResetComplete({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
