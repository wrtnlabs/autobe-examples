import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorPasswordResetRequest } from "../../../../../../providers/postAuthModeratorPasswordResetRequest";

import { IRedditLikeModerator } from "../../../../../../api/structures/IRedditLikeModerator";

@Controller("/auth/moderator/password/reset/request")
export class AuthModeratorPasswordResetRequestController {
  /**
   * Request password reset link for moderator account.
   *
   * Initiates password reset workflow by generating a unique time-limited reset
   * token and sending it to the moderator's registered email address. This
   * endpoint accepts an email address, validates it against
   * reddit_like_moderators records to confirm a moderator account exists with
   * that email, and creates a password reset token entry in
   * reddit_like_password_resets.
   *
   * The system generates a cryptographically secure random reset token using
   * secure random number generation, ensuring tokens cannot be predicted or
   * brute-forced. The token is stored with the moderator's user ID, email
   * address, current timestamp as created_at, and expiration timestamp
   * (expires_at) set to 1 hour from creation per requirements section on
   * password reset.
   *
   * A password reset email is sent to the validated email address containing a
   * unique verification link embedding the reset token. The link directs users
   * to a password reset form where they can enter a new password. The email
   * includes security guidance and warns users to ignore the email if they did
   * not request a password reset.
   *
   * If the provided email address does not match any moderator account, the
   * system still returns a success response without revealing whether the email
   * exists (preventing account enumeration attacks). This maintains security
   * while providing a consistent user experience. The reset token can only be
   * used once, tracked via the used_at timestamp which is set when the token is
   * successfully consumed for password reset.
   *
   * This operation is publicly accessible as moderators who have forgotten
   * their passwords cannot authenticate to access protected endpoints. Rate
   * limiting is applied per requirements to prevent abuse, restricting password
   * reset requests to prevent email flooding attacks.
   *
   * @param connection
   * @param body Email address for moderator account requiring password reset
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IRedditLikeModerator.IPasswordResetRequest,
  ): Promise<IRedditLikeModerator.IPasswordResetResponse> {
    try {
      return await postAuthModeratorPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
