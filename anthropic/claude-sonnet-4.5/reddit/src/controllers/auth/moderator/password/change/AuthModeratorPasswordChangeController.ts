import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthModeratorPasswordChange } from "../../../../../providers/putAuthModeratorPasswordChange";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";

import { IRedditLikeModerator } from "../../../../../api/structures/IRedditLikeModerator";

@Controller("/auth/moderator/password/change")
export class AuthModeratorPasswordChangeController {
  /**
   * Change moderator password with current password verification.
   *
   * Enables authenticated moderators to change their password by providing
   * current password verification and new password credentials. This endpoint
   * requires valid moderator authentication via JWT access token and validates
   * the current password before allowing password updates, ensuring only the
   * legitimate account owner can change credentials.
   *
   * The operation validates the provided current password by retrieving the
   * moderator record from reddit_like_moderators using the authenticated user
   * ID from the JWT token payload, then comparing the current password against
   * the stored password_hash using the same hashing algorithm
   * (bcrypt/Argon2/PBKDF2). If the current password verification fails, the
   * system rejects the request with error message 'Current password is
   * incorrect' without proceeding to password update.
   *
   * The new password must meet all platform password requirements: minimum 8
   * characters, at least one uppercase letter, one lowercase letter, one
   * number, and one special character. The system validates password strength
   * before accepting the change. A confirmation field ensures the new password
   * was entered correctly by requiring exact match between new password and
   * password confirmation inputs, rejecting mismatches with error 'Password
   * confirmation does not match. Please ensure both passwords are identical.'
   *
   * Upon successful validation, the reddit_like_moderators record is updated
   * with a new password_hash generated by securely hashing the new password.
   * All existing sessions in reddit_like_sessions for this moderator are
   * invalidated by setting deleted_at to the current timestamp, EXCEPT the
   * current session used for this password change request. This security
   * measure prevents potentially compromised sessions from continuing access
   * after password change while maintaining the user's current authenticated
   * state.
   *
   * A notification email is sent to the account email address confirming the
   * password change occurred, providing security awareness if the change was
   * unauthorized. The moderator remains logged in with their current session
   * and can continue using the platform without interruption. This operation
   * requires moderator role authentication and operates only on the
   * authenticated user's own account.
   *
   * @param connection
   * @param body Current password verification and new password credentials
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRedditLikeModerator.IPasswordChange,
  ): Promise<IRedditLikeModerator.IPasswordChangeConfirmation> {
    try {
      return await putAuthModeratorPasswordChange({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
