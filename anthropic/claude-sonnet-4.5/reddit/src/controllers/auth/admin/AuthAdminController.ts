import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";
import { postAuthAdminLogout } from "../../../providers/postAuthAdminLogout";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";

import { IRedditLikeAdmin } from "../../../api/structures/IRedditLikeAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register new administrator account and issue authentication tokens.
   *
   * Creates a new administrator account in the reddit_like_admins table with
   * provided username, email, and securely hashed password. This endpoint
   * serves as the registration gateway for platform administrators who will
   * have system-wide elevated permissions to manage all communities, handle
   * user appeals, suspend users globally, and configure platform settings.
   *
   * The registration process validates username uniqueness (must be globally
   * unique across all user types, 3-20 characters containing only alphanumeric
   * characters, underscores, and hyphens), email uniqueness and format (valid
   * email address unique across the platform), and password strength
   * requirements (minimum 8 characters with at least one uppercase letter,
   * lowercase letter, number, and special character). The password is securely
   * hashed using bcrypt, Argon2, or PBKDF2 before storage - never stored in
   * plain text.
   *
   * Upon successful account creation, the system initializes the admin with
   * email_verified set to false, profile_bio and avatar_url as null,
   * super_admin as false (can be elevated later by existing super admins), and
   * sends a verification email containing a unique time-limited verification
   * link that expires after 24 hours. The verification email is sent within 5
   * minutes of registration as tracked in the reddit_like_email_verifications
   * table.
   *
   * Immediately after creating the admin account, the system generates and
   * returns JWT authentication tokens to enable immediate platform access
   * without requiring a separate login. The response includes an access token
   * (expires in 30 minutes) and refresh token (expires in 30 days) in the
   * IRedditLikeAdmin.IAuthorized response structure. These tokens contain the
   * admin's user ID, username, role ('admin'), token issue timestamp, and
   * expiration timestamp in the JWT payload, enabling authenticated API
   * requests across the platform.
   *
   * This endpoint integrates with the authentication credential tracking system
   * (reddit_like_auth_credentials) to initialize security metadata for the new
   * admin account, including failed login attempt counters set to zero and
   * account lock status initialized as unlocked. The registration also creates
   * the initial session record in reddit_like_sessions with the issued tokens,
   * IP address, user agent, and activity timestamps for security monitoring and
   * session management.
   *
   * @param connection
   * @param body Admin registration information including unique username (3-20
   *   characters, alphanumeric with underscores/hyphens), unique email address,
   *   and strong password (minimum 8 characters with uppercase, lowercase,
   *   number, and special character)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IRedditLikeAdmin.ICreate,
  ): Promise<IRedditLikeAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate administrator and issue JWT tokens.
   *
   * Validates administrator credentials (email and password) against the
   * reddit_like_admins table and issues JWT authentication tokens upon
   * successful verification. This endpoint serves as the primary authentication
   * mechanism for platform administrators who need to access system-wide
   * management capabilities, moderation tools, user appeals, and platform
   * configuration.
   *
   * The authentication process validates the provided email address against
   * registered admin accounts, verifies the submitted password matches the
   * stored securely hashed password (using bcrypt, Argon2, or PBKDF2), and
   * checks the account's authentication credential status in
   * reddit_like_auth_credentials. If the email does not match any admin account
   * or the password is incorrect, the system rejects the login attempt and
   * displays the generic error message 'Invalid email or password' to prevent
   * account enumeration attacks.
   *
   * Security measures integrated into the login workflow include rate limiting
   * to prevent brute-force attacks (maximum 5 failed login attempts within 15
   * minutes before temporarily locking the account for 30 minutes as tracked in
   * reddit_like_auth_credentials), failed attempt counting with timestamps in
   * last_failed_login_at, and temporary account locking via
   * account_locked_until field. If an account is locked due to excessive failed
   * attempts, the system denies login and displays the message 'Your account
   * has been temporarily locked due to multiple failed login attempts. Please
   * try again in 30 minutes or reset your password.'
   *
   * Upon successful credential validation, the system generates two JWT tokens:
   * an access token with 30-minute expiration containing user ID, username,
   * role ('admin'), token issue timestamp, and expiration timestamp in the
   * payload; and a refresh token with 30-day expiration for obtaining new
   * access tokens without re-entering credentials. Both tokens are returned in
   * the IRedditLikeAdmin.IAuthorized response structure. The system also
   * creates a session record in reddit_like_sessions capturing the access
   * token, refresh token, IP address, user agent, and activity timestamps for
   * security monitoring.
   *
   * The login operation updates security metadata in
   * reddit_like_auth_credentials by recording the successful login timestamp in
   * last_successful_login_at, capturing the login IP address in last_login_ip,
   * and resetting the failed_login_attempts counter to zero. All authentication
   * events (successful logins, failed attempts, account locks) are logged in
   * the reddit_like_moderation_logs table for security monitoring, audit
   * trails, and suspicious activity detection per platform security
   * requirements.
   *
   * @param connection
   * @param body Administrator login credentials containing email address and
   *   password for authentication validation
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IRedditLikeAdmin.ILogin,
  ): Promise<IRedditLikeAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh administrator access token using refresh token.
   *
   * Validates the administrator's refresh token and issues a new access token
   * with fresh 30-minute expiration, enabling continued authenticated access
   * without requiring credential re-entry. This endpoint implements the token
   * refresh workflow that allows administrators to maintain long-term sessions
   * while using short-lived access tokens for enhanced security.
   *
   * The refresh operation validates the provided refresh token against active
   * sessions in the reddit_like_sessions table, confirming the refresh token
   * exists, has not expired (refresh_token_expires_at is in the future), and
   * the session has not been revoked (deleted_at is null). The system also
   * verifies the associated admin account exists in reddit_like_admins, is not
   * deleted (deleted_at is null), and is not suspended in
   * reddit_like_platform_suspensions.
   *
   * If the refresh token is invalid, expired, or associated with a
   * deleted/revoked session, the system rejects the refresh request and returns
   * an authentication error requiring the administrator to log in again with
   * their email and password credentials. If the refresh token has expired
   * beyond the 30-day lifetime, the system displays the message 'Your session
   * has expired. Please log in again' and requires full re-authentication.
   *
   * Upon successful refresh token validation, the system generates a new JWT
   * access token with fresh 30-minute expiration containing the admin's user
   * ID, username, role ('admin'), super_admin status, token issue timestamp,
   * and new expiration timestamp in the payload. The refresh token itself
   * remains unchanged and continues to be valid until its original 30-day
   * expiration. Both the new access token and the existing refresh token are
   * returned in the IRedditLikeAdmin.IAuthorized response structure.
   *
   * The refresh operation updates the session record in reddit_like_sessions by
   * replacing the access_token field with the newly generated token, updating
   * access_token_expires_at to the new expiration time (30 minutes from refresh
   * time), recording the current timestamp in last_activity_at for session
   * activity tracking, and updating the updated_at timestamp. This maintains an
   * audit trail of token refresh activity for security monitoring and enables
   * detection of suspicious refresh patterns that might indicate compromised
   * tokens.
   *
   * @param connection
   * @param body Refresh token from previous authentication (login or join) used
   *   to obtain new access token without credential re-entry
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IRedditLikeAdmin.IRefresh,
  ): Promise<IRedditLikeAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Log out administrator and invalidate current session.
   *
   * Terminates the administrator's current authenticated session by
   * invalidating JWT tokens and marking the session as revoked in the database.
   * This endpoint implements the logout mechanism accessible from all
   * authenticated pages, enabling administrators to explicitly end their
   * session for security when leaving a device or ending their work session.
   *
   * The operation validates the administrator's authentication status by
   * verifying their JWT access token is valid and not expired, confirming they
   * have admin role permissions. The system identifies the current active
   * session by matching the provided access token or refresh token against
   * records in reddit_like_sessions table where the token matches and
   * deleted_at is null (active session).
   *
   * Upon identifying the current session, the system performs soft deletion by
   * setting the deleted_at field to the current timestamp, which marks the
   * session as revoked and prevents the associated access token and refresh
   * token from being used for future authenticated requests. This soft delete
   * approach preserves session history in reddit_like_sessions for security
   * audit trails, activity analytics, and investigating suspicious
   * authentication patterns while immediately terminating the session's
   * validity.
   *
   * The logout operation does not affect other active sessions the
   * administrator may have on different devices or browsers - only the current
   * session making the logout request is invalidated. If the administrator is
   * logged in on multiple devices, those other sessions remain valid until they
   * expire naturally, are explicitly logged out, or are invalidated by security
   * events like password changes.
   *
   * The system logs the logout event in reddit_like_moderation_logs with
   * log_type 'admin_logout', actor_admin_id identifying the admin who logged
   * out, action_description explaining the session termination, metadata
   * containing session information (IP address, user agent from the session
   * record), and created_at timestamp. This creates an audit trail of all admin
   * authentication events for security monitoring and compliance.
   *
   * After successfully invalidating the session, the system returns a response
   * indicating logout was successful and instructs the client application to
   * clear all stored authentication tokens (access token and refresh token)
   * from local storage, cookies, or session storage. The response may include a
   * redirect URL to the public homepage or login page. The client application
   * must clear the tokens to complete the logout process and prevent accidental
   * authenticated requests with invalidated tokens.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("logout")
  public async logout(
    @AdminAuth()
    admin: AdminPayload,
  ): Promise<IRedditLikeAdmin.ILogoutResponse> {
    try {
      return await postAuthAdminLogout({
        admin,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
