import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminPasswordResetComplete } from "../../../../../../providers/postAuthAdminPasswordResetComplete";

import { IRedditLikeAdmin } from "../../../../../../api/structures/IRedditLikeAdmin";

@Controller("/auth/admin/password/reset/complete")
export class AuthAdminPasswordResetCompleteController {
  /**
   * Complete password reset with token and new password.
   *
   * Completes the password reset workflow by validating the reset token and
   * updating the administrator's password to the new provided password. This
   * endpoint is accessed when an administrator clicks the password reset link
   * from their email and submits their new password, finalizing the account
   * recovery process.
   *
   * The operation validates the provided reset token against active password
   * reset records in reddit_like_password_resets table, confirming the token
   * exists, has not expired (expires_at is in the future and within the 1-hour
   * validity window per authentication requirements), has not been previously
   * used (used_at is null), and matches an existing admin account in
   * reddit_like_admins through the reddit_like_user_id foreign key
   * relationship.
   *
   * If the reset token is expired (current time exceeds expires_at), the system
   * rejects the reset request and displays the error message 'This password
   * reset link has expired. Please request a new password reset.' and offers to
   * resend a new reset link. If the reset token has already been used (used_at
   * is not null), the system rejects the request to prevent token reuse and
   * displays an error indicating the link is no longer valid.
   *
   * The new password undergoes complete validation against the same
   * requirements as registration: minimum length of 8 characters, contains at
   * least one uppercase letter, one lowercase letter, one number, and one
   * special character (@, #, $, %, &, *, etc.). If the new password fails any
   * validation requirement, the system rejects the reset and displays specific
   * error messages listing which requirements are not met. The system also
   * validates that the new password confirmation (if provided) matches the new
   * password exactly.
   *
   * Upon successful validation, the system updates the admin account's
   * password_hash field in reddit_like_admins with the securely hashed new
   * password (using bcrypt, Argon2, or PBKDF2), marks the reset token as used
   * by setting used_at to the current timestamp in reddit_like_password_resets,
   * and invalidates all existing active sessions for that admin account by
   * setting deleted_at on all related reddit_like_sessions records to force
   * re-authentication on all devices for security.
   *
   * After successful password reset completion, the system sends a confirmation
   * email to the admin's registered email address notifying them that their
   * password was changed, includes the timestamp of the change, and advises
   * them to contact support if they did not initiate this change. The system
   * then displays a confirmation message 'Your password has been successfully
   * reset. Please log in with your new password.' and redirects or prompts the
   * administrator to log in using the new credentials through the login
   * endpoint.
   *
   * @param connection
   * @param body Password reset completion data including the unique reset token
   *   (from email link), new password meeting strength requirements, and new
   *   password confirmation for validation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async completePasswordReset(
    @TypedBody()
    body: IRedditLikeAdmin.IPasswordResetComplete,
  ): Promise<IRedditLikeAdmin.IPasswordResetCompleteResponse> {
    try {
      return await postAuthAdminPasswordResetComplete({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
