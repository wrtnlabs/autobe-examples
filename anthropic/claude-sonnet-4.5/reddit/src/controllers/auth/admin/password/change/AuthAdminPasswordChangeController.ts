import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthAdminPasswordChange } from "../../../../../providers/putAuthAdminPasswordChange";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IRedditLikeAdmin } from "../../../../../api/structures/IRedditLikeAdmin";

@Controller("/auth/admin/password/change")
export class AuthAdminPasswordChangeController {
  /**
   * Change administrator password from account settings.
   *
   * Enables authenticated administrators to change their password from account
   * settings by providing their current password for verification and
   * submitting a new password. This endpoint implements the password change
   * feature accessible from the admin's account settings page, requiring the
   * admin to be currently authenticated and to know their existing password.
   *
   * The operation first validates the administrator's authentication status by
   * verifying their JWT access token is valid and not expired, confirming they
   * have admin role permissions. The system then validates the provided current
   * password against the stored password_hash in reddit_like_admins table for
   * the authenticated admin. If the current password is incorrect, the system
   * rejects the password change request and displays the error message 'Current
   * password is incorrect' to prevent unauthorized password changes.
   *
   * The new password undergoes complete validation against platform password
   * requirements: minimum length of 8 characters, contains at least one
   * uppercase letter, one lowercase letter, one number, and one special
   * character (@, #, $, %, &, *, etc.). The system also validates that the new
   * password confirmation field matches the new password exactly. If the
   * confirmation does not match, the system displays the error message
   * 'Password confirmation does not match. Please ensure both passwords are
   * identical.'
   *
   * Upon successful validation of both the current password and new password
   * requirements, the system updates the admin's password_hash field in
   * reddit_like_admins with the securely hashed new password using bcrypt,
   * Argon2, or PBKDF2. For security, the system then invalidates all existing
   * active sessions for this admin account except the current session by
   * setting deleted_at timestamps on all other reddit_like_sessions records
   * where reddit_like_user_id matches and deleted_at is null, forcing
   * re-authentication on other devices to prevent unauthorized access with old
   * credentials.
   *
   * After successful password change, the system sends a notification email to
   * the admin's registered email address in the email field confirming the
   * password change occurred, includes the timestamp of the change, and advises
   * contacting support if the change was not initiated by them. The password
   * change event is also logged in reddit_like_moderation_logs with log_type
   * 'password_change', actor_admin_id identifying the admin who changed their
   * password, action_description explaining the security event, and created_at
   * timestamp for security audit trails and compliance.
   *
   * @param connection
   * @param body Password change request containing current password for
   *   verification, new password meeting strength requirements, and new
   *   password confirmation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditLikeAdmin.IPasswordChange,
  ): Promise<IRedditLikeAdmin.IPasswordChangeResponse> {
    try {
      return await putAuthAdminPasswordChange({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
