import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminEmailVerify } from "../../../../../providers/postAuthAdminEmailVerify";

import { IRedditLikeAdmin } from "../../../../../api/structures/IRedditLikeAdmin";

@Controller("/auth/admin/email/verify")
export class AuthAdminEmailVerifyController {
  /**
   * Verify administrator email address using verification token.
   *
   * Processes the email verification token sent to the administrator's email
   * address, marking the email as verified in the system upon successful
   * validation. This endpoint is accessed when administrators click the
   * verification link from their registration email or email change
   * verification email, completing the email verification workflow.
   *
   * The operation validates the provided verification_token against active
   * verification records in reddit_like_email_verifications table, confirming
   * the token exists, matches a pending verification (verified_at is null), has
   * not expired (expires_at is in the future and within the 24-hour validity
   * window per authentication requirements), and is associated with an admin
   * account through the reddit_like_user_id foreign key linking to
   * reddit_like_users table.
   *
   * If the verification token is expired (current time exceeds expires_at), the
   * system displays the error message 'This email verification link has
   * expired. Please request a new verification email.' and offers the
   * administrator the option to resend a new verification email by generating a
   * fresh verification token with a new 24-hour expiration window. If the token
   * does not exist or is invalid, the system displays an appropriate error
   * message indicating the verification link is not valid.
   *
   * The system distinguishes between two verification types based on the
   * verification_type field: 'registration' for initial account email
   * verification during signup, and 'email_change' for verifying a new email
   * address when administrators update their email in account settings. The
   * verification workflow handles both types appropriately.
   *
   * For registration verification (verification_type = 'registration'), upon
   * successful token validation, the system marks the email as verified by
   * setting verified_at to the current timestamp in
   * reddit_like_email_verifications, updates email_verified to true in the
   * reddit_like_users table for the associated admin account, and displays a
   * confirmation message 'Your email has been successfully verified. Your
   * account is now fully activated.' The admin is then redirected to their
   * dashboard or home page.
   *
   * For email change verification (verification_type = 'email_change'), upon
   * successful token validation, the system marks the verification as complete
   * by setting verified_at in reddit_like_email_verifications, updates the
   * email field in reddit_like_users to the newly verified email address
   * (stored in the email field of the verification record), updates
   * email_verified to true, and sends a confirmation notification to both the
   * old and new email addresses informing the admin of the email change for
   * security awareness.
   *
   * All email verification events are logged in reddit_like_moderation_logs for
   * security monitoring, with log_type 'email_verification', actor
   * identification fields populated appropriately, action_description
   * explaining the verification event, and created_at timestamp for audit
   * trails.
   *
   * @param connection
   * @param body Email verification token from the verification link sent to
   *   admin's email address (expires after 24 hours)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IRedditLikeAdmin.IEmailVerification,
  ): Promise<IRedditLikeAdmin.IEmailVerificationResponse> {
    try {
      return await postAuthAdminEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
