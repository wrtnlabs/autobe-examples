import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberEmailVerify } from "../../../../../providers/postAuthMemberEmailVerify";

import { IRedditLikeMember } from "../../../../../api/structures/IRedditLikeMember";

@Controller("/auth/member/email/verify")
export class AuthMemberEmailVerifyController {
  /**
   * Verify email address using verification token from
   * reddit_like_email_verifications table, updating
   * reddit_like_members.email_verified status.
   *
   * Verifies user email address by validating time-limited verification token
   * from registration or email change workflow.
   *
   * This endpoint implements the email verification workflow defined in
   * requirements section 2 (Email Verification and Password Management). When
   * users register new accounts, the system sends a verification email
   * containing a unique, cryptographically secure verification link. This
   * endpoint processes those verification links, confirming email address
   * ownership and activating email-dependent platform features.
   *
   * The verification process begins when a user clicks the verification link in
   * their email, which contains a unique verification_token parameter. The
   * system queries reddit_like_email_verifications table to find a record
   * matching the provided token. If no matching record exists, the verification
   * fails with error indicating invalid token. This protects against random
   * token guessing attacks.
   *
   * Next, the system validates the verification token hasn't expired by
   * comparing current timestamp against the expires_at field in the
   * verification record. Per requirements section 2.1, verification links
   * expire 24 hours after being sent. If the current time exceeds expires_at,
   * the system rejects the verification with error message explaining the link
   * has expired and offers to resend a new verification email. This time
   * limitation prevents indefinite validity of verification links.
   *
   * For valid, non-expired tokens, the system checks if the token has already
   * been used by examining the verified_at field. If verified_at is already set
   * (not null), the token was previously used and the system displays a message
   * indicating email is already verified, preventing duplicate processing.
   *
   * When processing a fresh, valid verification token, the system performs the
   * following atomic operations: sets verified_at timestamp in
   * reddit_like_email_verifications to current time, updates email_verified
   * field to true in reddit_like_members table for the associated user
   * (identified by reddit_like_user_id foreign key), and marks the verification
   * as complete. For email change verifications
   * (verification_type='email_change'), the system additionally updates the
   * email field in reddit_like_members to the new email address from the
   * verification record.
   *
   * The response confirms successful verification and may redirect the user to
   * a confirmation page or auto-login the user if they weren't already
   * authenticated. Features that require verified email (such as becoming a
   * community moderator or posting in certain restricted communities per
   * requirements section 2.1) become immediately available after verification
   * completes.
   *
   * If verification fails, the system provides clear error messaging and
   * recovery options. For expired tokens, a "Resend verification email" action
   * generates a new reddit_like_email_verifications record with fresh token and
   * updated expires_at timestamp 24 hours in the future, sending a new email to
   * the user's registered address.
   *
   * @param connection
   * @param body Email verification request containing the unique verification
   *   token from the email link
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IRedditLikeMember.IVerifyEmail,
  ): Promise<IRedditLikeMember.IEmailVerified> {
    try {
      return await postAuthMemberEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
