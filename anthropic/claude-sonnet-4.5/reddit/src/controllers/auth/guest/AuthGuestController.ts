import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestJoin } from "../../../providers/postAuthGuestJoin";
import { postAuthGuestRefresh } from "../../../providers/postAuthGuestRefresh";

import { IRedditLikeGuest } from "../../../api/structures/IRedditLikeGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Register a new temporary guest account and issue guest session tokens.
   *
   * Creates a temporary guest account for unauthenticated visitors to the
   * Reddit-like community platform. This endpoint enables anonymous users to
   * obtain a tracked session identity without providing personal credentials
   * like email or password. Guest accounts are designed for visitors who want
   * to browse public communities, view posts and comments, but are not yet
   * ready to commit to full membership.
   *
   * The registration process generates a unique session identifier that tracks
   * the guest's activity for analytics purposes, including first visit
   * timestamp, IP address, and user agent information. This data helps the
   * platform understand guest behavior patterns and optimize conversion to full
   * member accounts. The session identifier persists across visits until the
   * guest either registers as a member or the session expires.
   *
   * Upon successful registration, the system issues JWT authentication tokens
   * (access token with 30-minute expiration and refresh token with 30-day
   * expiration) that enable the guest to make authenticated API requests within
   * their limited permission scope. Guest users can browse public communities,
   * view posts, read comments, and access user profiles, but cannot vote,
   * comment, post, subscribe to communities, or create communities.
   *
   * The response contains the complete guest user profile including their
   * unique session identifier, role designation ('guest'), timestamps for first
   * and last visit, and the JWT tokens required for subsequent authenticated
   * requests. Security measures include IP address and user agent tracking for
   * abuse prevention and rate limiting, though guests are not subject to the
   * same strict rate limits as authenticated members for content creation since
   * they cannot create content.
   *
   * This endpoint serves as the entry point for anonymous platform exploration
   * and is critical for converting casual visitors into registered members. By
   * providing a low-friction registration mechanism, the platform can track
   * guest behavior, demonstrate value, and encourage eventual conversion to
   * full membership through the member registration endpoint.
   *
   * @param connection
   * @param body Guest registration information including optional tracking data
   *   for analytics
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IRedditLikeGuest.ICreate,
  ): Promise<IRedditLikeGuest.IAuthorized> {
    try {
      return await postAuthGuestJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh guest session access token using refresh token.
   *
   * Refreshes the JWT access token for an existing guest session using a valid
   * refresh token. This endpoint is essential for maintaining continuous guest
   * sessions without requiring the guest to re-register when their access token
   * expires after the standard 30-minute window.
   *
   * Guest users receive both an access token (short-lived, 30 minutes) and a
   * refresh token (long-lived, 30 days) during initial registration through the
   * join endpoint. The access token is used to authenticate API requests, while
   * the refresh token enables obtaining new access tokens without
   * re-authentication. This token refresh mechanism follows industry-standard
   * JWT security patterns, minimizing the exposure window of access tokens
   * while providing convenient session continuity.
   *
   * The refresh process validates that the provided refresh token is authentic,
   * not expired, and belongs to an active guest session. Upon successful
   * validation, the system generates a new access token with a fresh 30-minute
   * expiration and returns it to the client. The refresh token itself typically
   * remains valid and unchanged, though the implementation may optionally issue
   * a new refresh token as part of a token rotation strategy for enhanced
   * security.
   *
   * If the refresh token has expired (after 30 days), is invalid, or belongs to
   * a deleted/revoked session, the refresh request fails and the guest must
   * re-register through the join endpoint to obtain new tokens. This expiration
   * mechanism ensures that abandoned guest sessions eventually terminate,
   * preventing indefinite session persistence.
   *
   * The response contains the new access token, its expiration timestamp, and
   * optionally a new refresh token if token rotation is implemented. The guest
   * can immediately use the new access token for authenticated requests,
   * maintaining seamless browsing continuity. The system tracks the last
   * activity timestamp on the guest session, updating it during refresh
   * operations to monitor session usage patterns.
   *
   * This endpoint requires a valid refresh token but does not require the
   * access token (which may be expired). Rate limiting is applied to prevent
   * abuse of the refresh mechanism, with stricter limits than the join endpoint
   * to detect and prevent token theft or replay attacks.
   *
   * @param connection
   * @param body Refresh token information for obtaining new access token
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IRedditLikeGuest.IRefresh,
  ): Promise<IRedditLikeGuest.IAuthorized> {
    try {
      return await postAuthGuestRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
