import { tags } from "typia";

/**
 * Complete community entity.
 *
 * Represents a Reddit-like community (subreddit) with all configuration
 * settings, metadata, and statistics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditLikeCommunity = {
  /** Unique community identifier. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique community code used in URLs.
   *
   * 3-25 characters, alphanumeric and underscores only, case-insensitive.
   */
  code: string;

  /** Display name of the community. */
  name: string;

  /** Community description explaining its purpose and topic. */
  description: string;

  /** URL to community icon image (256x256 pixels). */
  icon_url?: string | undefined;

  /** URL to community banner image. */
  banner_url?: string | undefined;

  /** Privacy setting: 'public' or 'private'. */
  privacy_type: string;

  /** Who can post: 'anyone_subscribed', 'approved_only', or 'moderators_only'. */
  posting_permission: string;

  /** Whether text posts are allowed. */
  allow_text_posts: boolean;

  /** Whether link posts are allowed. */
  allow_link_posts: boolean;

  /** Whether image posts are allowed. */
  allow_image_posts: boolean;

  /** Main category for discovery. */
  primary_category: string;

  /** Additional tags for discoverability (up to 3, comma-separated). */
  secondary_tags?: string | undefined;

  /** Total number of subscribers. */
  subscriber_count: number & tags.Type<"int32">;

  /** Whether community is archived. */
  is_archived: boolean;

  /** Community creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRedditLikeCommunity {
  /**
   * Community creation request.
   *
   * Contains required and optional fields for creating a new community.
   */
  export type ICreate = {
    /** Unique community identifier for URLs. */
    code: string &
      tags.MinLength<3> &
      tags.MaxLength<25> &
      tags.Pattern<"^[a-zA-Z0-9_]+$">;

    /** Display name of the community. */
    name: string & tags.MinLength<3> & tags.MaxLength<25>;

    /** Community description explaining purpose. */
    description: string & tags.MinLength<10> & tags.MaxLength<500>;

    /** Optional community icon URL. */
    icon_url?: string | undefined;

    /** Optional community banner URL. */
    banner_url?: string | undefined;

    /** Privacy setting: 'public' or 'private'. */
    privacy_type?: string | undefined;

    /**
     * Who can post: 'anyone_subscribed', 'approved_only',
     * 'moderators_only'.
     */
    posting_permission?: string | undefined;

    /** Whether text posts are allowed. */
    allow_text_posts?: boolean | undefined;

    /** Whether link posts are allowed. */
    allow_link_posts?: boolean | undefined;

    /** Whether image posts are allowed. */
    allow_image_posts?: boolean | undefined;

    /** Main category for discovery. */
    primary_category?: string | undefined;

    /** Additional tags (up to 3, comma-separated). */
    secondary_tags?: string | undefined;
  };

  /**
   * Community summary for list displays.
   *
   * Optimized view with essential fields for browse and search interfaces.
   */
  export type ISummary = {
    /** Unique community identifier. */
    id: string & tags.Format<"uuid">;

    /** Community code for URLs. */
    code: string;

    /** Community display name. */
    name: string;

    /** Truncated description for list views. */
    description?: (string & tags.MaxLength<100>) | undefined;

    /** Community icon URL. */
    icon_url?: string | undefined;

    /** Total subscribers. */
    subscriber_count: number & tags.Type<"int32">;

    /** Main category. */
    primary_category: string;
  };

  /** Community search and filter parameters. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Search query for name/description. */
    search?: string | undefined;

    /** Filter by category. */
    primary_category?: string | undefined;

    /** Filter by privacy type. */
    privacy_type?: string | undefined;

    /** Filter by archived status. */
    is_archived?: boolean | undefined;

    /** Sort field: 'subscriber_count', 'created_at', 'name'. */
    sort_by?: string | undefined;

    /** Sort direction: 'asc' or 'desc'. */
    sort_order?: string | undefined;
  };

  /**
   * Community update request.
   *
   * All fields optional for partial updates. Community code cannot be
   * changed.
   */
  export type IUpdate = {
    /** Updated display name. */
    name?: (string & tags.MinLength<3> & tags.MaxLength<25>) | undefined;

    /** Updated community description. */
    description?:
      | (string & tags.MinLength<10> & tags.MaxLength<500>)
      | undefined;

    /** Updated icon URL. */
    icon_url?: string | undefined;

    /** Updated banner URL. */
    banner_url?: string | undefined;

    /** Updated privacy setting. */
    privacy_type?: string | undefined;

    /** Updated posting permission. */
    posting_permission?: string | undefined;

    /** Updated text post allowance. */
    allow_text_posts?: boolean | undefined;

    /** Updated link post allowance. */
    allow_link_posts?: boolean | undefined;

    /** Updated image post allowance. */
    allow_image_posts?: boolean | undefined;

    /** Updated primary category. */
    primary_category?: string | undefined;

    /** Updated secondary tags. */
    secondary_tags?: string | undefined;
  };

  /** Community post search parameters. */
  export type IPostSearchRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort algorithm. */
    sort_by?: string | undefined;
  };

  /**
   * Community subscription summary.
   *
   * Combines community info with subscription metadata.
   */
  export type ISubscriptionSummary = {
    /** Community identifier. */
    id: string & tags.Format<"uuid">;

    /** Community code. */
    code: string;

    /** Community name. */
    name: string;

    /** Community icon. */
    icon_url?: string | undefined;

    /** Subscriber count. */
    subscriber_count: number & tags.Type<"int32">;

    /** When user subscribed. */
    subscribed_at: string & tags.Format<"date-time">;
  };
}
