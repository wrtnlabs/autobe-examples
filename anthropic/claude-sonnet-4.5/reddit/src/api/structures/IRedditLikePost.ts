import { tags } from "typia";

/**
 * Complete post entity.
 *
 * Main post record with type discriminator. Type-specific content is accessed
 * through related tables.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditLikePost = {
  /** Unique post identifier. */
  id: string & tags.Format<"uuid">;

  /** Post type: 'text', 'link', or 'image'. */
  type: string;

  /** Post title. */
  title: string;

  /** Post creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRedditLikePost {
  /**
   * Post creation request.
   *
   * Contains post type and type-specific content fields.
   */
  export type ICreate = {
    /** Target community for the post. */
    community_id: string & tags.Format<"uuid">;

    /** Post type: 'text', 'link', or 'image'. */
    type: string;

    /** Post title. */
    title: string & tags.MinLength<3> & tags.MaxLength<300>;

    /** Text post body (for type='text'). */
    body?: (string & tags.MaxLength<40000>) | undefined;

    /** Link URL (for type='link'). */
    url?: (string & tags.MaxLength<2000>) | undefined;

    /** Image URL (for type='image'). */
    image_url?: string | undefined;

    /** Image caption (for type='image'). */
    caption?: (string & tags.MaxLength<10000>) | undefined;
  };

  /**
   * Post summary for list displays.
   *
   * Optimized view with essential fields for feeds.
   */
  export type ISummary = {
    /** Post identifier. */
    id: string & tags.Format<"uuid">;

    /** Post type. */
    type: string;

    /** Post title. */
    title: string;

    /** Creation timestamp. */
    created_at: string & tags.Format<"date-time">;
  };

  /** Post search and filter parameters. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Search query for titles. */
    search?: string | undefined;

    /** Filter by community. */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by post type. */
    type?: string | undefined;

    /** Sort algorithm: 'hot', 'new', 'top', 'controversial'. */
    sort_by?: string | undefined;
  };

  /**
   * Post update request.
   *
   * Only certain fields are editable based on post type and time constraints.
   */
  export type IUpdate = {
    /** Updated title (only within 5 minutes of creation). */
    title?: (string & tags.MinLength<3> & tags.MaxLength<300>) | undefined;

    /** Updated body text (text posts only). */
    body?: (string & tags.MaxLength<40000>) | undefined;

    /** Updated caption (image posts only). */
    caption?: (string & tags.MaxLength<10000>) | undefined;
  };

  /**
   * Post removal request.
   *
   * Contains removal scope and reasoning for content removal.
   */
  export type IRemove = {
    /** Removal scope: 'community', 'platform', or 'spam'. */
    removal_type: string;

    /** Predefined reason category. */
    reason_category: string;

    /** Detailed explanation. */
    reason_text: string;

    /** Private moderator notes. */
    internal_notes?: string | undefined;

    /** Related report if applicable. */
    report_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /** Hot posts request parameters. */
  export type IHotRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Optional community filter. */
    community_id?: (string & tags.Format<"uuid">) | undefined;
  };
}
