import { tags } from "typia";

/**
 * Moderation appeal record.
 *
 * User appeal challenging moderation action.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditLikeModerationAppeal = {
  /** Unique appeal identifier. */
  id: string & tags.Format<"uuid">;

  /** Member submitting appeal. */
  appellant_member_id: string & tags.Format<"uuid">;

  /** Type: 'content_removal', 'community_ban', 'platform_suspension'. */
  appeal_type: string;

  /** User's appeal reasoning. */
  appeal_text: string;

  /** Status: 'pending', 'under_review', 'upheld', 'overturned', 'reduced'. */
  status: string;

  /** Reviewer's decision explanation. */
  decision_explanation?: string | undefined;

  /** Whether escalated to admins. */
  is_escalated: boolean;

  /** Expected resolution timestamp. */
  expected_resolution_at: string & tags.Format<"date-time">;

  /** Appeal submission timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Review completion timestamp. */
  reviewed_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IRedditLikeModerationAppeal {
  /**
   * Appeal submission request.
   *
   * One of the ID fields must be provided based on appeal_type.
   */
  export type ICreate = {
    /** Action being appealed. */
    moderation_action_id?: (string & tags.Format<"uuid">) | undefined;

    /** Ban being appealed. */
    community_ban_id?: (string & tags.Format<"uuid">) | undefined;

    /** Suspension being appealed. */
    platform_suspension_id?: (string & tags.Format<"uuid">) | undefined;

    /** Appeal type. */
    appeal_type: string;

    /** Appeal reasoning. */
    appeal_text: string & tags.MinLength<50> & tags.MaxLength<1000>;
  };

  /** Appeal search parameters. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Filter by status. */
    status?: string | undefined;

    /** Filter by type. */
    appeal_type?: string | undefined;

    /** Filter by escalation. */
    is_escalated?: boolean | undefined;
  };

  /**
   * Appeal review decision.
   *
   * Contains reviewer's decision and explanation.
   */
  export type IReview = {
    /** Decision: 'uphold', 'overturn', 'reduce_penalty'. */
    decision: string;

    /** Required decision explanation. */
    decision_explanation: string & tags.MinLength<30>;

    /** Modified penalty details for 'reduce_penalty'. */
    penalty_modification?: string | undefined;
  };
}
