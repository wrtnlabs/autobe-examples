import { tags } from "typia";

/**
 * Complete comment entity.
 *
 * Represents a comment or nested reply in a discussion thread.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditLikeComment = {
  /** Unique comment identifier. */
  id: string & tags.Format<"uuid">;

  /** Parent post. */
  reddit_like_post_id: string & tags.Format<"uuid">;

  /** Parent comment for nested replies. */
  reddit_like_parent_comment_id?: (string & tags.Format<"uuid">) | undefined;

  /** Comment text content. */
  content_text: string;

  /** Nesting depth level. */
  depth: number & tags.Type<"int32">;

  /** Net vote score. */
  vote_score: number & tags.Type<"int32">;

  /** Whether comment has been edited. */
  edited: boolean;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRedditLikeComment {
  /**
   * Comment creation request.
   *
   * Contains post reference and comment text. Parent comment is optional for
   * top-level comments.
   */
  export type ICreate = {
    /** Post to comment on. */
    reddit_like_post_id: string & tags.Format<"uuid">;

    /** Parent comment for nested replies. */
    reddit_like_parent_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /** Comment text content. */
    content_text: string & tags.MinLength<1> & tags.MaxLength<10000>;
  };

  /**
   * Comment update request.
   *
   * Only text content can be edited, within 24-hour window.
   */
  export type IUpdate = {
    /** Updated comment text. */
    content_text?:
      | (string & tags.MinLength<1> & tags.MaxLength<10000>)
      | undefined;
  };

  /** Comment search parameters. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort method: 'best', 'top', 'new', 'controversial', 'old'. */
    sort_by?: string | undefined;
  };

  /** Comment summary for list displays. */
  export type ISummary = {
    /** Comment identifier. */
    id: string & tags.Format<"uuid">;

    /** Comment text preview. */
    content_text: string & tags.MaxLength<500>;

    /** Net vote score. */
    vote_score: number & tags.Type<"int32">;

    /** Creation timestamp. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Reply creation request.
   *
   * Contains text for creating a nested reply to a comment.
   */
  export type IReplyCreate = {
    /** Reply text content. */
    content_text: string & tags.MinLength<1> & tags.MaxLength<10000>;
  };

  /** Reply search parameters. */
  export type IReplyRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort method. */
    sort_by?: string | undefined;
  };

  /** Comment removal request. */
  export type IRemove = {
    /** Removal scope. */
    removal_type: string;

    /** Predefined reason. */
    reason_category: string;

    /** Detailed explanation. */
    reason_text: string;

    /** Private notes. */
    internal_notes?: string | undefined;

    /** Related report. */
    report_id?: (string & tags.Format<"uuid">) | undefined;
  };
}
