import { tags } from "typia";

/**
 * Platform suspension record.
 *
 * Represents platform-wide user suspension.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditLikePlatformSuspension = {
  /** Unique suspension identifier. */
  id: string & tags.Format<"uuid">;

  /** Suspended member. */
  suspended_member_id: string & tags.Format<"uuid">;

  /** Suspension reason category. */
  suspension_reason_category: string;

  /** Detailed suspension reason. */
  suspension_reason_text: string;

  /** Whether suspension is permanent. */
  is_permanent: boolean;

  /** Expiration for temporary suspensions. */
  expiration_date?: (string & tags.Format<"date-time">) | undefined;

  /** Whether suspension is active. */
  is_active: boolean;

  /** Suspension issuance timestamp. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IRedditLikePlatformSuspension {
  /** Platform suspension creation request. */
  export type ICreate = {
    /** Member to suspend. */
    suspended_member_id: string & tags.Format<"uuid">;

    /** Reason category. */
    suspension_reason_category: string;

    /** Detailed reason. */
    suspension_reason_text: string;

    /** Private notes. */
    internal_notes?: string | undefined;

    /** Whether permanent. */
    is_permanent: boolean;

    /** Expiration for temporary. */
    expiration_date?: (string & tags.Format<"date-time">) | undefined;
  };

  /** Platform suspension search parameters. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Filter by active status. */
    is_active?: boolean | undefined;

    /** Filter by permanence. */
    is_permanent?: boolean | undefined;
  };
}
