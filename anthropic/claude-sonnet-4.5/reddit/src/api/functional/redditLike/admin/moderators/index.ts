import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeModerator } from "../../../../structures/IRedditLikeModerator";
import { IRedditLikeModeratorActivityStats } from "../../../../structures/IRedditLikeModeratorActivityStats";

/**
 * Retrieve detailed activity information for a specific moderator.
 *
 * Retrieve comprehensive activity information for a specific moderator
 * identified by their unique moderator ID. This operation provides insights
 * into the moderator's engagement, performance, and contribution patterns
 * across the communities they manage.
 *
 * The operation returns detailed activity metrics including the total number of
 * reports reviewed, content removal actions taken, community bans issued, and
 * appeals processed by the moderator. This data is essential for moderator
 * accountability, performance evaluation, and identifying inactive moderators
 * who may need to be removed per requirements section R-LOG-014.
 *
 * Security considerations include restricting access to moderator activity
 * details based on the requesting user's authorization level. Only
 * administrators and the moderator themselves should have full access to
 * detailed activity breakdowns, while community members may see limited public
 * activity statistics. The operation integrates with the moderation logging
 * system defined in the Prisma schema through the reddit_like_moderation_logs
 * table.
 *
 * The activity information encompasses all moderation actions performed by the
 * moderator across all communities they manage, including content removals from
 * reddit_like_moderation_actions, ban issuances from
 * reddit_like_community_bans, and appeal reviews from
 * reddit_like_moderation_appeals. This provides a comprehensive view of the
 * moderator's contribution to platform safety and community management.
 *
 * This operation is typically used by platform administrators for moderator
 * performance monitoring, by community managers for evaluating moderator
 * effectiveness, and by moderators themselves for tracking their own
 * contributions and identifying areas needing attention.
 *
 * @param props.connection
 * @param props.moderatorId Unique identifier of the target moderator whose
 *   activity information is being retrieved
 * @path /redditLike/admin/moderators/:moderatorId/activity
 * @accessor api.functional.redditLike.admin.moderators.activity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function activity(
  connection: IConnection,
  props: activity.Props,
): Promise<activity.Response> {
  return true === connection.simulate
    ? activity.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...activity.METADATA,
          path: activity.path(props),
          status: null,
        },
      );
}
export namespace activity {
  export type Props = {
    /**
     * Unique identifier of the target moderator whose activity information
     * is being retrieved
     */
    moderatorId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikeModerator.IActivity;

  export const METADATA = {
    method: "GET",
    path: "/redditLike/admin/moderators/:moderatorId/activity",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/admin/moderators/${encodeURIComponent(props.moderatorId ?? "null")}/activity`;
  export const random = (): IRedditLikeModerator.IActivity =>
    typia.random<IRedditLikeModerator.IActivity>();
  export const simulate = (
    connection: IConnection,
    props: activity.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: activity.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve pre-calculated statistical metrics for a specific moderator.
 *
 * Retrieve comprehensive statistical metrics for a specific moderator
 * identified by their unique moderator ID. This operation accesses the
 * mv_reddit_like_moderator_activity_stats materialized view to provide
 * pre-calculated performance and activity data without expensive real-time
 * aggregation queries.
 *
 * The operation returns aggregated metrics including the total number of
 * reports reviewed (from reddit_like_moderation_actions where report_id is not
 * null), total content removal actions (where action_type='remove'), total
 * community bans issued (from reddit_like_community_bans), total appeals
 * reviewed (from reddit_like_moderation_appeals), and average response time in
 * hours from report submission to moderator action. These metrics provide
 * quantitative assessment of moderator performance and engagement levels.
 *
 * Security considerations include appropriate access control to moderator
 * statistics. Administrators should have full access to all moderator
 * statistics for platform management purposes. Individual moderators should be
 * able to view their own statistics for self-assessment and performance
 * tracking. The statistics may be partially visible to community members for
 * transparency purposes, though sensitive metrics like average response time
 * might be restricted to moderators and administrators only.
 *
 * The materialized view is refreshed periodically to maintain near-real-time
 * accuracy while optimizing query performance. The last_calculated_at timestamp
 * indicates data freshness, helping users understand how current the statistics
 * are. This approach balances data accuracy with system performance, ensuring
 * dashboard displays load quickly even for moderators with extensive activity
 * histories.
 *
 * This operation integrates with moderator activity tracking defined in the
 * Prisma schema through the mv_reddit_like_moderator_activity_stats table. It
 * supports use cases including moderator performance dashboards per
 * requirements section 13.5, identification of inactive moderators per
 * R-LOG-014 (moderators with no activity in 30 days), and platform-wide
 * moderator effectiveness analysis. The statistics help administrators
 * recognize high-performing moderators, identify those needing support or
 * training, and maintain overall moderation quality across the platform.
 *
 * @param props.connection
 * @param props.moderatorId Unique identifier of the target moderator whose
 *   statistical metrics are being retrieved
 * @path /redditLike/admin/moderators/:moderatorId/statistics
 * @accessor api.functional.redditLike.admin.moderators.statistics
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function statistics(
  connection: IConnection,
  props: statistics.Props,
): Promise<statistics.Response> {
  return true === connection.simulate
    ? statistics.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...statistics.METADATA,
          path: statistics.path(props),
          status: null,
        },
      );
}
export namespace statistics {
  export type Props = {
    /**
     * Unique identifier of the target moderator whose statistical metrics
     * are being retrieved
     */
    moderatorId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikeModeratorActivityStats;

  export const METADATA = {
    method: "GET",
    path: "/redditLike/admin/moderators/:moderatorId/statistics",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/admin/moderators/${encodeURIComponent(props.moderatorId ?? "null")}/statistics`;
  export const random = (): IRedditLikeModeratorActivityStats =>
    typia.random<IRedditLikeModeratorActivityStats>();
  export const simulate = (
    connection: IConnection,
    props: statistics.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: statistics.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
