import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeCommunityModerator } from "../../../../../structures/IRedditLikeCommunityModerator";

/**
 * Assign a new moderator to a community with specified permissions.
 *
 * Assign a new moderator to manage a specific community by creating a moderator
 * assignment record with customizable permission grants. This operation enables
 * existing community moderators with 'manage_moderators' permission to expand
 * their moderation team by inviting additional moderators from the member
 * base.
 *
 * The operation implements the moderator invitation workflow defined in the
 * Community Management requirements document section 5.2. When a moderator
 * invites a new moderator, the system verifies the invited user is a registered
 * member, ensures they are not already a moderator of this community, and
 * validates that the community has not reached the maximum limit of 25
 * moderators. The inviting moderator can customize which specific permissions
 * to grant, choosing from manage_posts, manage_comments, manage_users,
 * manage_settings, manage_moderators, and access_reports.
 *
 * This operation references the reddit_like_community_moderators table which
 * tracks the many-to-many relationship between moderators and communities. Each
 * assignment record includes the moderator being assigned, the community they
 * are managing, who assigned them (for seniority tracking), the timestamp of
 * assignment (for seniority-based removal rules), whether they are the primary
 * moderator (always false for invited moderators), and the JSON or
 * comma-separated list of granted permissions.
 *
 * The default permission set for newly invited moderators includes
 * 'manage_posts', 'manage_comments', and 'access_reports' as specified in the
 * requirements, though the inviting moderator can customize this set during the
 * invitation. Primary moderators (community creators) automatically receive all
 * permissions and have irrevocable status, but this operation is for inviting
 * additional moderators, not creating communities.
 *
 * Authorization for this operation requires the requesting user to be an
 * authenticated moderator with 'manage_moderators' permission in the target
 * community, or a platform administrator who can manage moderators in any
 * community. The operation validates these permissions before allowing
 * moderator assignment to maintain proper community governance hierarchy.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community where the new
 *   moderator is being assigned
 * @param props.body Moderator assignment information including the user to be
 *   assigned and their permission set
 * @path /redditLike/admin/communities/:communityId/moderators
 * @accessor api.functional.redditLike.admin.communities.moderators.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the community where the new moderator is being
     * assigned
     */
    communityId: string & tags.Format<"uuid">;

    /**
     * Moderator assignment information including the user to be assigned
     * and their permission set
     */
    body: IRedditLikeCommunityModerator.ICreate;
  };
  export type Body = IRedditLikeCommunityModerator.ICreate;
  export type Response = IRedditLikeCommunityModerator;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/admin/communities/:communityId/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/admin/communities/${encodeURIComponent(props.communityId ?? "null")}/moderators`;
  export const random = (): IRedditLikeCommunityModerator =>
    typia.random<IRedditLikeCommunityModerator>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
