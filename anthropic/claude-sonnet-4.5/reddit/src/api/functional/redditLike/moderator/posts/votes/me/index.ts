import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikePostVote } from "../../../../../../structures/IRedditLikePostVote";

/**
 * Retrieve the authenticated user's vote status on a specific post.
 *
 * Retrieve the current authenticated user's voting status for a specific post
 * identified by the post ID path parameter. This operation queries the
 * reddit_like_post_votes table to determine if the user has cast an upvote
 * (+1), downvote (-1), or has not voted on this post.
 *
 * This endpoint is critical for maintaining accurate vote button states in the
 * user interface. When a user views a post, the client application needs to
 * know whether to display the upvote button as active, the downvote button as
 * active, or both buttons in their neutral state. Without this information, the
 * UI cannot correctly reflect the user's previous voting decisions.
 *
 * The operation enforces authentication requirements per the User Roles and
 * Authentication specification, requiring a valid JWT access token to identify
 * the requesting user. Guest users who attempt to access this endpoint will
 * receive an authentication error prompting them to log in.
 *
 * The response includes the vote direction (upvote or downvote), the timestamp
 * when the vote was cast, and when it was last modified. If the user has not
 * voted on the post, the operation returns a response indicating no vote
 * exists. This allows the client to distinguish between "never voted" and "vote
 * removed" states.
 *
 * Security considerations include verifying that the post ID exists and is
 * accessible, preventing information leakage about non-existent posts. The
 * operation respects soft deletion - if the post has been deleted (deleted_at
 * is not null in reddit_like_posts table), the system still returns the user's
 * vote status to maintain vote history integrity.
 *
 * This operation integrates with the voting system requirements defined in the
 * Voting System specification, supporting the requirement that users can view
 * their own voting history and current vote states. It works in conjunction
 * with vote submission endpoints to provide complete vote management
 * functionality.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post to retrieve vote status for
 * @path /redditLike/moderator/posts/:postId/votes/me
 * @accessor api.functional.redditLike.moderator.posts.votes.me.getMyVote
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getMyVote(
  connection: IConnection,
  props: getMyVote.Props,
): Promise<getMyVote.Response> {
  return true === connection.simulate
    ? getMyVote.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getMyVote.METADATA,
          path: getMyVote.path(props),
          status: null,
        },
      );
}
export namespace getMyVote {
  export type Props = {
    /** Unique identifier of the post to retrieve vote status for */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikePostVote.IUserVoteStatus;

  export const METADATA = {
    method: "GET",
    path: "/redditLike/moderator/posts/:postId/votes/me",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/moderator/posts/${encodeURIComponent(props.postId ?? "null")}/votes/me`;
  export const random = (): IRedditLikePostVote.IUserVoteStatus =>
    typia.random<IRedditLikePostVote.IUserVoteStatus>();
  export const simulate = (
    connection: IConnection,
    props: getMyVote.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getMyVote.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
