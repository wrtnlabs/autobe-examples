import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeComment } from "../../../structures/IRedditLikeComment";
export * as replies from "./replies/index";
export * as votes from "./votes/index";

/**
 * Retrieve detailed information for a specific comment by its identifier.
 *
 * Retrieve comprehensive information about a specific comment identified by its
 * unique comment ID. This operation queries the reddit_like_comments table and
 * returns complete comment details including the comment text content, author
 * information, vote score, nesting depth, edit status, and timestamps.
 *
 * This operation is accessible to all users including unauthenticated guests,
 * as comment viewing is a public read operation per business requirements. The
 * response includes the comment's content_text field with preserved markdown
 * formatting, vote_score showing the net upvotes minus downvotes, depth
 * indicating the nesting level in the thread (0 for top-level comments), and
 * edited flag showing whether the comment has been modified since creation.
 *
 * The operation returns author information including username and karma scores
 * to provide reputation context for the comment. For deleted comments, the
 * system returns the comment structure with content replaced by '[deleted]'
 * placeholder per business requirement section 5.6, preserving thread integrity
 * while hiding removed content. Comments removed by moderators display
 * '[removed by moderator]' instead.
 *
 * Security and privacy considerations include respecting soft-delete status
 * (deleted_at timestamp) to hide content appropriately, checking moderation
 * removal status to display appropriate removal messages, and providing the
 * complete parent-child relationship data to enable proper thread rendering.
 * The response includes the parent comment ID for nested replies and the post
 * ID for thread context.
 *
 * This operation integrates with the voting system by providing current vote
 * scores, the user profile system by including author karma and profile links,
 * and the comment threading system by providing depth and parent relationship
 * data for proper hierarchical display. The comment can be accessed via
 * permalink URLs for direct linking and sharing as specified in business
 * requirement section 8.1.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment to retrieve
 * @path /redditLike/comments/:commentId
 * @accessor api.functional.redditLike.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target comment to retrieve */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikeComment;

  export const METADATA = {
    method: "GET",
    path: "/redditLike/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IRedditLikeComment =>
    typia.random<IRedditLikeComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
