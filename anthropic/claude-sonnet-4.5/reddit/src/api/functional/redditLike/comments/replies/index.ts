import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeComment } from "../../../../structures/IRedditLikeComment";
import { IPageIRedditLikeComment } from "../../../../structures/IPageIRedditLikeComment";

/**
 * Search and retrieve filtered, paginated list of replies to a specific
 * comment.
 *
 * Retrieve a filtered and paginated list of comment replies nested under a
 * specific parent comment. This operation provides advanced search capabilities
 * for finding replies based on multiple criteria including partial text
 * matching, vote score filtering, author identification, and creation date
 * ranges.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Users can sort replies by creation date (chronological
 * or reverse), vote score (top-voted first or controversial), or using the
 * specialized comment sorting algorithms (best, top, new, controversial) as
 * defined in the comment system requirements. This flexibility enables
 * different browsing patterns from discovering newest replies to finding most
 * popular or most controversial responses.
 *
 * Security considerations include rate limiting for search operations to
 * prevent abuse, appropriate filtering based on the requesting user's
 * authorization level and community ban status, and proper handling of deleted
 * or removed comments. Guest users can view replies in public communities,
 * while members, moderators, and administrators have full access based on their
 * respective permission levels. The operation respects soft-deleted comments by
 * hiding content while preserving thread structure as specified in the comment
 * system requirements section 5.7.
 *
 * This operation integrates with the reddit_like_comments table as defined in
 * the Prisma schema, incorporating all available comment fields including
 * content_text, vote_score, depth, edited status, and hierarchical
 * relationships. The response includes reply information optimized for threaded
 * discussion displays, with options to include additional metadata such as
 * author karma, vote counts, and edit timestamps based on the requesting user's
 * needs and authorization level.
 *
 * The operation enforces the maximum comment nesting depth of 10 levels as
 * specified in the comment threading requirements. When the parent comment is
 * at or near maximum depth, the operation may return fewer or no replies based
 * on the depth limitation rules defined in section 4.1 of the Comment System
 * Requirements.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the parent comment whose replies
 *   are being retrieved
 * @param props.body Search criteria, filtering options, and pagination
 *   parameters for retrieving comment replies
 * @path /redditLike/comments/:commentId/replies
 * @accessor api.functional.redditLike.comments.replies.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the parent comment whose replies are being
     * retrieved
     */
    commentId: string & tags.Format<"uuid">;

    /**
     * Search criteria, filtering options, and pagination parameters for
     * retrieving comment replies
     */
    body: IRedditLikeComment.IReplyRequest;
  };
  export type Body = IRedditLikeComment.IReplyRequest;
  export type Response = IPageIRedditLikeComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditLike/comments/:commentId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/comments/${encodeURIComponent(props.commentId ?? "null")}/replies`;
  export const random = (): IPageIRedditLikeComment.ISummary =>
    typia.random<IPageIRedditLikeComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
