import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeComment } from "../../../../structures/IRedditLikeComment";
import { IPageIRedditLikeComment } from "../../../../structures/IPageIRedditLikeComment";

/**
 * Retrieve paginated and sorted list of comments for a specific post.
 *
 * Retrieve a comprehensive list of comments associated with a specific post,
 * with support for multiple sorting algorithms and pagination. This operation
 * implements the comment display system defined in the Comment System
 * Requirements, enabling users to view threaded discussions on posts.
 *
 * The operation supports five distinct sorting methods as specified in
 * requirements: Best (confidence-based scoring balancing vote score and
 * controversy), Top (highest net vote score), New (newest first
 * chronologically), Controversial (similar upvote/downvote ratios with high
 * volume), and Old (oldest first chronologically). Each sorting method serves
 * different user needs, from discovering quality discussions to following
 * conversation chronology.
 *
 * This endpoint integrates with the reddit_like_comments table which stores the
 * complete comment tree structure with parent-child relationships supporting
 * nesting up to 10 levels deep. Comments are filtered based on the provided
 * postId, ensuring only comments belonging to the specified post are returned.
 * The response includes vote scores calculated from the
 * reddit_like_comment_votes table, enabling accurate display of community
 * assessment.
 *
 * Pagination is implemented to handle posts with hundreds or thousands of
 * comments efficiently. The request supports configurable page size with a
 * default of 50 comments per page, matching the performance requirements
 * specified in Comment System Requirements section 10.1. The operation loads
 * comments in batches to maintain fast response times (target: under 2 seconds
 * for initial load).
 *
 * The operation is accessible to all user roles including guests
 * (unauthenticated visitors), members, moderators, and administrators. Public
 * posts display their comment threads to all users, promoting open discussion
 * and content discovery. Authentication is not required for reading comments,
 * only for creating comments or voting on them.
 *
 * Security considerations include validation of the postId parameter to ensure
 * it references an existing post, handling of deleted or removed comments
 * (displaying placeholder text while preserving thread structure), and
 * appropriate filtering of comments based on moderation status. The response
 * includes edit indicators for modified comments and properly handles the
 * soft-delete pattern where deleted comments show [deleted] while maintaining
 * their position in the conversation tree.
 *
 * This operation is frequently used in conjunction with the post detail
 * retrieval endpoint (GET /posts/{postId}) to provide the complete post viewing
 * experience. When users navigate to a post, they typically view the post
 * content first, then load the comment discussion using this endpoint with
 * their preferred sorting method.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post whose comments are being
 *   retrieved
 * @param props.body Search criteria, sorting preferences, and pagination
 *   parameters for filtering and organizing comments
 * @path /redditLike/posts/:postId/comments
 * @accessor api.functional.redditLike.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the post whose comments are being retrieved */
    postId: string & tags.Format<"uuid">;

    /**
     * Search criteria, sorting preferences, and pagination parameters for
     * filtering and organizing comments
     */
    body: IRedditLikeComment.IRequest;
  };
  export type Body = IRedditLikeComment.IRequest;
  export type Response = IPageIRedditLikeComment;

  export const METADATA = {
    method: "PATCH",
    path: "/redditLike/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageIRedditLikeComment =>
    typia.random<IPageIRedditLikeComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
