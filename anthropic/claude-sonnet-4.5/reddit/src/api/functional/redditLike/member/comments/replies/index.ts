import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeComment } from "../../../../../structures/IRedditLikeComment";

/**
 * Create a new reply to a specific comment in the threaded discussion.
 *
 * Create a new nested reply comment under an existing parent comment,
 * establishing a parent-child relationship in the threaded discussion
 * structure. This operation enables users to participate in multi-level
 * conversations by responding directly to specific comments rather than only
 * replying at the top level to posts.
 *
 * The operation validates that the parent comment exists, is not deleted, and
 * is not locked by moderators before allowing reply creation. It enforces the
 * maximum comment nesting depth of 10 levels as specified in section 4.1 of the
 * Comment System Requirements - if the parent comment is already at depth 10,
 * the system denies the reply creation and displays an error message indicating
 * maximum depth has been reached.
 *
 * Content validation ensures the reply text meets comment system requirements:
 * minimum 1 character, maximum 10,000 characters, with proper sanitization to
 * prevent XSS attacks as specified in section 11.1. The system automatically
 * detects and converts URLs within the reply text into clickable links,
 * preserves line breaks and paragraph spacing, and validates against spam
 * patterns including duplicate content detection and excessive posting rate
 * limits (10 comments per minute per section 11.2).
 *
 * Security and authorization checks verify the user is authenticated as a
 * member, moderator, or administrator before allowing reply creation. The
 * operation denies access to guest users and prompts them to log in per section
 * 2.1. Additionally, the system checks if the user is banned from the community
 * where the parent comment exists - community-banned users cannot create
 * replies in that community per the moderation requirements.
 *
 * Upon successful reply creation, the operation increments the parent post's
 * comment count, triggers karma calculation for the reply author based on
 * future voting activity, and sends notifications to the parent comment author
 * alerting them of the new reply. The system calculates the depth level by
 * incrementing the parent comment's depth by 1 and stores this in the depth
 * field for proper hierarchical rendering. The reply is immediately available
 * for voting and further nested replies (if depth allows), and appears in the
 * comment thread using the selected sorting algorithm (best, top, new,
 * controversial).
 *
 * This operation integrates with the voting system by initializing the new
 * reply with zero votes, making it eligible for upvotes and downvotes
 * immediately. It also integrates with the karma system - as votes are cast on
 * this reply, the author's comment karma will be updated accordingly per the
 * karma calculation rules. The reply inherits the same moderation and reporting
 * capabilities as top-level comments, enabling community members to report
 * inappropriate replies following the content moderation workflow.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the parent comment to which this
 *   reply is being added
 * @param props.body Reply comment content and metadata for creating a nested
 *   response to the parent comment
 * @path /redditLike/member/comments/:commentId/replies
 * @accessor api.functional.redditLike.member.comments.replies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the parent comment to which this reply is being
     * added
     */
    commentId: string & tags.Format<"uuid">;

    /**
     * Reply comment content and metadata for creating a nested response to
     * the parent comment
     */
    body: IRedditLikeComment.IReplyCreate;
  };
  export type Body = IRedditLikeComment.IReplyCreate;
  export type Response = IRedditLikeComment;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/member/comments/:commentId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/member/comments/${encodeURIComponent(props.commentId ?? "null")}/replies`;
  export const random = (): IRedditLikeComment =>
    typia.random<IRedditLikeComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
