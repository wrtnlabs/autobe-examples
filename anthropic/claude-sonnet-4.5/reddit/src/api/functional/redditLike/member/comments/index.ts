import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeComment } from "../../../../structures/IRedditLikeComment";
export * as replies from "./replies/index";
export * as votes from "./votes/index";

/**
 * Create a new comment or reply in a post discussion thread.
 *
 * Create a new comment on a post or reply to an existing comment, enabling
 * community discussion and engagement through threaded conversations. This
 * operation inserts a new record into the reddit_like_comments table and
 * supports the complete nested comment threading system defined in the business
 * requirements.
 *
 * This operation requires user authentication and validates that the
 * authenticated member is not banned from the community where the content
 * exists. The comment content must be between 1 and 10,000 characters and is
 * stored with markdown formatting support. When creating a reply to another
 * comment, the system validates the parent comment exists and enforces the
 * maximum nesting depth of 10 levels per business requirement section 4.4.
 *
 * The newly created comment is initialized with zero vote score, depth level
 * calculated from parent comment (0 for top-level comments), and edited flag
 * set to false. The system automatically increments the post's comment count
 * through the mv_reddit_like_post_metrics materialized view and makes the
 * comment immediately available for voting and further replies.
 *
 * Security considerations include content sanitization to prevent XSS attacks,
 * rate limiting to prevent spam (max 10 comments per minute per business
 * requirement section 11.2), and duplicate comment detection (rejecting
 * identical comments within 5 minutes per requirement section 11.2). URL
 * validation ensures only HTTP/HTTPS protocols are allowed in comment text
 * links, protecting users from malicious links.
 *
 * This operation integrates with the voting system by enabling immediate vote
 * capability on the new comment, the karma system by preparing the comment for
 * potential karma earning, and the content moderation system by making the
 * comment reportable if it violates rules. The comment appears in the author's
 * comment history on their profile and contributes to the overall discussion
 * thread structure.
 *
 * @param props.connection
 * @param props.body Comment creation data including content text, parent post,
 *   and optional parent comment for threaded replies
 * @path /redditLike/member/comments
 * @accessor api.functional.redditLike.member.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Comment creation data including content text, parent post, and
     * optional parent comment for threaded replies
     */
    body: IRedditLikeComment.ICreate;
  };
  export type Body = IRedditLikeComment.ICreate;
  export type Response = IRedditLikeComment;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/member/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditLike/member/comments";
  export const random = (): IRedditLikeComment =>
    typia.random<IRedditLikeComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update comment content by the comment author within 24-hour edit window.
 *
 * This operation enables authenticated members to modify the text content of
 * their own comments within 24 hours of creation, as specified in the comment
 * system requirements document section 5.1. The endpoint validates comment
 * ownership, ensuring only the original author can edit their content, and
 * enforces the time-based editing window to maintain discussion integrity.
 *
 * The operation interacts with the reddit_like_comments table in the Prisma
 * schema, updating the content_text field while preserving all other comment
 * attributes including vote scores, nesting relationships, and creation
 * timestamps. When an edit is successfully applied, the system sets the
 * 'edited' boolean flag to true and updates the updated_at timestamp to reflect
 * the modification time.
 *
 * Security considerations include verifying the authenticated user matches the
 * comment's reddit_like_member_id foreign key, preventing unauthorized edits of
 * other users' comments. The system also validates that deleted_at is null,
 * preventing edits to comments that have been soft-deleted by the author or
 * removed by moderators.
 *
 * Validation rules require the edited comment text to comply with the same
 * constraints as new comments: minimum 1 character, maximum 10,000 characters,
 * no empty or whitespace-only content. The system rejects edits that would
 * result in empty comments or exceed length limits, maintaining content quality
 * standards.
 *
 * The edited comment maintains its position in the thread hierarchy, preserving
 * the parent-child relationship defined by reddit_like_parent_comment_id and
 * depth fields. Vote scores accumulated before the edit remain intact, ensuring
 * karma calculations reflect community assessment of the original content while
 * allowing authors to clarify or improve their contributions.
 *
 * This operation integrates with the comment display system to show an 'edited
 * X time ago' indicator next to modified comments, providing transparency to
 * readers that the content has been changed from its original form. The edit
 * timestamp displayed to users is calculated from the updated_at field.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to be updated
 * @param props.body Updated comment text content within character limits
 * @path /redditLike/member/comments/:commentId
 * @accessor api.functional.redditLike.member.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the comment to be updated */
    commentId: string & tags.Format<"uuid">;

    /** Updated comment text content within character limits */
    body: IRedditLikeComment.IUpdate;
  };
  export type Body = IRedditLikeComment.IUpdate;
  export type Response = IRedditLikeComment;

  export const METADATA = {
    method: "PUT",
    path: "/redditLike/member/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/member/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IRedditLikeComment =>
    typia.random<IRedditLikeComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove comment by the comment author with soft deletion.
 *
 * This operation enables authenticated members to remove their own comments
 * from public view through a soft deletion mechanism, as specified in the
 * comment system requirements document section 5.4. The endpoint validates
 * comment ownership, ensuring only the original author can initiate deletion of
 * their content, preventing unauthorized removal of other users' comments.
 *
 * The operation performs a soft delete on the reddit_like_comments table by
 * setting the deleted_at timestamp field to the current time while preserving
 * all other comment data in the database. This soft deletion approach is
 * necessary to maintain thread structure and conversation continuity,
 * particularly when the deleted comment has child replies nested beneath it in
 * the comment tree.
 *
 * Security considerations include verifying the authenticated user's ID matches
 * the comment's reddit_like_member_id foreign key reference, implementing
 * role-based access control to ensure only the comment author can delete their
 * content. The system prevents deletion attempts on comments that are already
 * soft-deleted (deleted_at is not null) to avoid redundant operations.
 *
 * According to the comment system requirements section 5.7, when a parent
 * comment is deleted, all child replies remain visible and properly threaded.
 * The soft-deleted parent comment displays as '[deleted]' with the author
 * username removed, but the comment's position in the hierarchy is preserved
 * through the reddit_like_parent_comment_id relationship. This ensures nested
 * conversations remain coherent even when intermediate comments are removed.
 *
 * The comment's vote score and accumulated karma remain intact after deletion
 * per the karma system requirements section 4.4, which explicitly states that
 * content deletion does not reverse earned or lost karma. This prevents users
 * from manipulating their reputation by deleting poorly-received comments.
 *
 * When a comment with no child replies is deleted, the system may choose to
 * completely hide it from the UI, but the database record persists with the
 * deleted_at timestamp for audit trail purposes and to support potential future
 * recovery mechanisms. The deletion is immediate, taking effect within 1
 * second, and the user receives confirmation of the successful deletion.
 *
 * This operation integrates with the comment display system to render deleted
 * comments appropriately: showing '[deleted]' text for author-deleted comments
 * versus '[removed by moderator]' for moderator removals, allowing users to
 * distinguish between self-deletions and moderation actions.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to be removed
 * @path /redditLike/member/comments/:commentId
 * @accessor api.functional.redditLike.member.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the comment to be removed */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditLike/member/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/member/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Restore a soft-deleted comment to make it visible again.
 *
 * Restores a previously soft-deleted comment by clearing its deleted_at
 * timestamp, making the comment visible again in discussion threads. This
 * operation is essential for recovering comments that were deleted by mistake
 * or removed during moderation but later approved through appeals.
 *
 * When a comment is deleted in the platform, it undergoes soft deletion where
 * the deleted_at timestamp is set but the comment data remains in the
 * reddit_like_comments table. Soft deletion preserves the comment's position in
 * the thread hierarchy, all voting data, karma attribution, and nested reply
 * relationships while hiding the comment content from public view. The thread
 * structure remains intact with '[deleted]' placeholder shown to maintain
 * conversation context.
 *
 * This restoration endpoint reverses the soft deletion by clearing the
 * deleted_at field, immediately making the comment content visible again in its
 * original thread position. The comment appears exactly where it was before
 * deletion, maintaining all parent-child relationships in the nested comment
 * tree. All previously earned karma from the comment remains intact per
 * business requirements, and the comment's vote score is preserved.
 *
 * Authorization for comment restoration depends on the context: comment authors
 * can restore their own deleted comments within reasonable timeframes,
 * community moderators can restore comments removed as part of moderation
 * actions in their communities, and platform administrators can restore any
 * comment platform-wide. The operation validates that the requesting user has
 * appropriate permissions before executing the restoration.
 *
 * The restored comment retains all its original attributes including content
 * text, creation timestamp, vote score, depth level, and threading
 * relationships. Child replies that were preserved during deletion remain
 * connected to the restored parent comment. The comment immediately becomes
 * available for voting and further replies. The restored comment integrates
 * naturally into the existing conversation thread based on its original
 * creation time, not the restoration time.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the soft-deleted comment to
 *   restore
 * @path /redditLike/member/comments/:commentId/restore
 * @accessor api.functional.redditLike.member.comments.restore
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function restore(
  connection: IConnection,
  props: restore.Props,
): Promise<restore.Response> {
  return true === connection.simulate
    ? restore.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...restore.METADATA,
          path: restore.path(props),
          status: null,
        },
      );
}
export namespace restore {
  export type Props = {
    /** Unique identifier of the soft-deleted comment to restore */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikeComment;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/member/comments/:commentId/restore",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/member/comments/${encodeURIComponent(props.commentId ?? "null")}/restore`;
  export const random = (): IRedditLikeComment =>
    typia.random<IRedditLikeComment>();
  export const simulate = (
    connection: IConnection,
    props: restore.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: restore.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
