import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeAuthMember } from "../../../../../structures/IRedditLikeAuthMember";

/**
 * Log out authenticated member by revoking current session and invalidating
 * tokens.
 *
 * This operation performs the logout workflow for authenticated members by
 * explicitly revoking their current active session. When a member initiates
 * logout, this endpoint invalidates both the access token and refresh token
 * associated with their session, preventing any further authenticated requests
 * using those credentials.
 *
 * The logout process operates on the reddit_like_sessions table by
 * soft-deleting the session record, setting the deleted_at timestamp to mark
 * the session as revoked. This approach follows the platform's soft-delete
 * pattern and maintains an audit trail of session lifecycle events including
 * when users logged out. The soft deletion ensures that historical session data
 * is preserved for security monitoring and analytics while preventing the
 * tokens from being used for future authentication.
 *
 * Security considerations include ensuring that logout invalidates sessions
 * completely, preventing token reuse after logout, and protecting against
 * session hijacking by requiring the current valid session to perform logout.
 * The operation validates that the requesting user owns the session being
 * logged out, preventing users from terminating other users' sessions.
 *
 * This operation integrates with the User Roles and Authentication system
 * defined in the requirements document section on logout requirements. It
 * implements the specified behavior that when a user initiates logout, the
 * system invalidates the current session by clearing tokens from the client
 * application and provides appropriate redirection after logout completion.
 *
 * Related API operations include the login endpoint that creates sessions and
 * issues tokens, the session validation endpoint that verifies token validity,
 * and the token refresh endpoint that extends sessions. After successful
 * logout, users must log in again with their email and password credentials to
 * obtain new access and refresh tokens.
 *
 * Expected behavior includes immediate session invalidation upon successful
 * logout, clearing authentication state from the client application, providing
 * confirmation that logout completed successfully, and properly handling edge
 * cases such as already-expired sessions or invalid logout requests. The
 * operation ensures that all existing sessions for the user are invalidated as
 * specified in the password change requirements, though the primary use case is
 * revoking the current session during normal logout flow.
 *
 * @param props.connection
 * @param props.body Current session information and logout confirmation
 *   parameters
 * @path /redditLike/member/auth/member/logout
 * @accessor api.functional.redditLike.member.auth.member.logout
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function logout(
  connection: IConnection,
  props: logout.Props,
): Promise<void> {
  return true === connection.simulate
    ? logout.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...logout.METADATA,
          path: logout.path(),
          status: null,
        },
        props.body,
      );
}
export namespace logout {
  export type Props = {
    /** Current session information and logout confirmation parameters */
    body: IRedditLikeAuthMember.ILogout;
  };
  export type Body = IRedditLikeAuthMember.ILogout;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/member/auth/member/logout",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditLike/member/auth/member/logout";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: logout.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: logout.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
