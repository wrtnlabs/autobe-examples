import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeUser } from "../../../../../../structures/IRedditLikeUser";
import { IPageIRedditLikeKarmaHistory } from "../../../../../../structures/IPageIRedditLikeKarmaHistory";

/**
 * Search and retrieve paginated karma change history for a specific user from
 * reddit_like_karma_history table.
 *
 * Retrieve a filtered and paginated list of karma change events for a specified
 * user from the reddit_like_karma_history table. This operation provides
 * complete transparency into how a user's reputation has evolved over time by
 * showing individual karma modifications triggered by voting activity on their
 * posts and comments.
 *
 * Each karma history record represents a single karma change event, capturing
 * the karma type affected (post or comment), the amount of change (positive or
 * negative), the vote action that triggered the change (upvote added, downvote
 * added, vote removed, vote changed), and references to the specific post or
 * comment that was voted on. This audit trail enables users to understand
 * exactly how their karma scores were calculated and helps troubleshoot any
 * discrepancies.
 *
 * The endpoint supports comprehensive filtering and searching capabilities
 * including filtering by karma type (post karma vs comment karma changes), date
 * range filtering to view karma changes within specific time periods, change
 * amount filtering to find significant karma events, and vote action filtering
 * to understand what types of voting behavior affected the user's karma.
 * Pagination is essential given that active users may have thousands of karma
 * change events over their account lifetime.
 *
 * Business requirements specify that karma history records must be retained for
 * a minimum of 12 months, though the system may retain records indefinitely for
 * audit purposes. The history provides insights into karma earning patterns,
 * helps users identify which content earned the most karma, and supports the
 * broader transparency goals of the karma system.
 *
 * Security considerations include ensuring users can only view karma history
 * for their own accounts unless they are administrators who may need access for
 * support purposes. The karma history represents a complete audit trail of
 * reputation changes and should be treated as sensitive user data requiring
 * appropriate access controls with ownership verification to ensure the
 * authenticated member's ID matches the userId path parameter.
 *
 * This operation is typically used in user profile interfaces where users
 * review their karma progression, analytics dashboards showing karma trends,
 * and support tools for investigating karma calculation issues. The returned
 * data includes all relevant metadata from the reddit_like_karma_history table
 * including timestamps, karma types, change amounts, triggering vote actions,
 * and references to the affected content.
 *
 * Related operations that users might access in conjunction with this endpoint
 * include retrieving current karma totals (GET /users/{userId}/karma), viewing
 * user post history to see which posts earned karma, and accessing user comment
 * history to understand comment karma sources. The karma history provides the
 * detailed breakdown that complements the high-level karma totals.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose karma change history
 *   is being retrieved
 * @param props.body Search criteria and pagination parameters for filtering
 *   karma history events by karma type, date range, change amount, and vote
 *   action
 * @path /redditLike/member/users/:userId/karma/history
 * @accessor api.functional.redditLike.member.users.karma.history.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the user whose karma change history is being
     * retrieved
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for filtering karma history
     * events by karma type, date range, change amount, and vote action
     */
    body: IRedditLikeUser.IKarmaHistoryRequest;
  };
  export type Body = IRedditLikeUser.IKarmaHistoryRequest;
  export type Response = IPageIRedditLikeKarmaHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/redditLike/member/users/:userId/karma/history",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/member/users/${encodeURIComponent(props.userId ?? "null")}/karma/history`;
  export const random = (): IPageIRedditLikeKarmaHistory =>
    typia.random<IPageIRedditLikeKarmaHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
