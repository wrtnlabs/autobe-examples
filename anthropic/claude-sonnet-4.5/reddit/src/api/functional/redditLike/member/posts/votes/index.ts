import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikePostVote } from "../../../../../structures/IRedditLikePostVote";
export * as me from "./me/index";

/**
 * Cast or change vote (upvote or downvote) on a specific post.
 *
 * This operation enables authenticated members to participate in democratic
 * content curation by casting upvotes or downvotes on posts. The voting system
 * is the cornerstone of content quality signaling and community-driven content
 * ranking on the platform.
 *
 * When a member submits a vote, the system records it in the
 * reddit_like_post_votes table, which maintains the relationship between
 * voters, posts, and vote values. Each member can maintain exactly one vote
 * state per post (upvote, downvote, or neutral), enforced through a unique
 * database constraint. If the member has already voted on the post, submitting
 * a new vote replaces the previous vote automatically.
 *
 * Vote values are strictly defined: +1 represents an upvote (positive
 * endorsement indicating the content is valuable, relevant, or high-quality),
 * while -1 represents a downvote (negative signal indicating the content is
 * low-quality, irrelevant, or violates community standards). These vote values
 * directly impact the post's net vote score (upvotes minus downvotes) and
 * contribute to the post author's karma score in real-time.
 *
 * The operation enforces critical business rules including self-voting
 * prevention (members cannot vote on their own posts), rate limiting (maximum
 * 100 votes per minute to prevent spam voting), and vote manipulation detection
 * through IP address and user agent tracking. Vote weights may be applied based
 * on account trust factors such as account age and voting history patterns to
 * combat coordinated manipulation.
 *
 * Successful vote submission triggers multiple system updates: the post's vote
 * score is recalculated, the post author's karma is adjusted (increasing by 1
 * for upvotes, decreasing by 1 for downvotes), and content ranking algorithms
 * are updated to reflect the new vote. Vote changes (switching from upvote to
 * downvote or vice versa) result in a net 2-point karma adjustment for the
 * content author.
 *
 * This operation integrates with the karma system defined in
 * reddit_like_user_karma and reddit_like_karma_history tables, the content
 * sorting algorithms that use vote scores for ranking, and the
 * anti-manipulation systems that monitor voting patterns for abuse detection.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post to vote on
 * @param props.body Vote submission data specifying the vote direction (upvote
 *   or downvote)
 * @path /redditLike/member/posts/:postId/votes
 * @accessor api.functional.redditLike.member.posts.votes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the post to vote on */
    postId: string & tags.Format<"uuid">;

    /**
     * Vote submission data specifying the vote direction (upvote or
     * downvote)
     */
    body: IRedditLikePostVote.ICreate;
  };
  export type Body = IRedditLikePostVote.ICreate;
  export type Response = IRedditLikePostVote;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/member/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): IRedditLikePostVote =>
    typia.random<IRedditLikePostVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove existing vote from a specific post to return to neutral state.
 *
 * This operation enables authenticated members to withdraw their existing vote
 * (upvote or downvote) from a post, returning to a neutral voting state. This
 * is a critical component of the flexible voting system that allows members to
 * change their minds and remove endorsements or negative signals they
 * previously cast.
 *
 * When a member removes their vote, the system deletes the corresponding record
 * from the reddit_like_post_votes table, effectively eliminating the vote
 * relationship between the member and the post. This action triggers several
 * system-wide updates to maintain data consistency and ranking accuracy.
 *
 * The vote removal immediately impacts the post's net vote score: if an upvote
 * is removed, the score decreases by 1; if a downvote is removed, the score
 * increases by 1. Correspondingly, the post author's karma is adjusted in
 * real-time - removing an upvote decreases the author's post karma by 1, while
 * removing a downvote increases it by 1. These karma adjustments are logged in
 * the reddit_like_karma_history table with the triggered_by_vote_action value
 * set to 'vote_removed'.
 *
 * The operation also affects content ranking algorithms that rely on vote
 * scores. When a vote is removed, the post's position in hot, top, and
 * controversial sorting views may shift based on the updated vote metrics. The
 * hot algorithm recalculates the post's trending score considering the reduced
 * vote velocity, while the top sorting simply reflects the new net vote count.
 *
 * This operation is idempotent in behavior - if a member attempts to remove a
 * vote when they haven't voted on the post, the system should handle this
 * gracefully without error, either by returning success (no-op) or an
 * appropriate informational response indicating no vote existed to remove.
 *
 * Vote removal is unrestricted by time limits and can be performed at any point
 * after the vote was cast, providing members complete flexibility in managing
 * their voting history. The operation enforces standard authentication
 * requirements and validates that the post exists and is accessible before
 * processing the removal.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post from which to remove the
 *   vote
 * @path /redditLike/member/posts/:postId/votes
 * @accessor api.functional.redditLike.member.posts.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the post from which to remove the vote */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditLike/member/posts/:postId/votes",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
