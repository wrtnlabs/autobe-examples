import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * Terminate guest user session and clear session tracking data.
 *
 * This operation performs logout for guest users (unauthenticated visitors) by
 * terminating their current session and clearing associated tracking data.
 * Guest sessions are tracked in the reddit_like_users table with role='guest'
 * and a unique session_identifier used for analytics and conversion tracking.
 *
 * When a guest user initiates logout, the system clears the session_identifier,
 * ip_address, user_agent, and related tracking fields from the guest user
 * record. This effectively ends the anonymous session and removes any
 * personalization or tracking associated with that guest session.
 *
 * Security considerations include ensuring the session termination is complete
 * and that any client-side session data is properly cleared. The operation is
 * available to all users regardless of authentication status, as guests may
 * have active sessions that need to be terminated.
 *
 * This operation integrates with the authentication system defined in the User
 * Roles and Authentication requirements. It provides a clean exit path for
 * guest users who wish to clear their browsing data or start a fresh session.
 * After logout, the guest user can continue browsing as a new guest session or
 * proceed to register for a member account.
 *
 * The operation does not require request body parameters as the guest session
 * is identified through session tokens or cookies provided by the client. The
 * system identifies the guest user context from the authentication state and
 * terminates the appropriate session.
 *
 * @param props.connection
 * @path /redditLike/auth/guest/logout
 * @accessor api.functional.redditLike.auth.guest.logout
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function logout(connection: IConnection): Promise<void> {
  return true === connection.simulate
    ? logout.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...logout.METADATA,
          path: logout.path(),
          status: null,
        },
      );
}
export namespace logout {
  export const METADATA = {
    method: "POST",
    path: "/redditLike/auth/guest/logout",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditLike/auth/guest/logout";
  export const random = (): void => typia.random<void>();
  export const simulate = (_connection: IConnection): void => {
    return random();
  };
}
