import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeAuthSession } from "../../../../structures/IRedditLikeAuthSession";

/**
 * Validate JWT access token and verify active session status.
 *
 * This operation validates an existing JWT access token to determine whether
 * the user's session remains valid and active. When a client application needs
 * to verify that the current user is still authenticated, this endpoint checks
 * the provided access token against the reddit_like_sessions table in the
 * database.
 *
 * The validation process performs several critical checks. First, it verifies
 * that the access token exists in the database and corresponds to an active
 * session record. Second, it checks that the access_token_expires_at timestamp
 * has not passed, ensuring the token is still within its 30-minute validity
 * window as defined in the authentication requirements. Third, it verifies that
 * the session has not been explicitly revoked through soft deletion (deleted_at
 * is null), which occurs when users log out or change their passwords.
 *
 * Security considerations include protecting against token reuse after logout,
 * preventing access with expired credentials, and ensuring session integrity.
 * The operation validates that the associated user account exists and is in
 * good standing, checking that the reddit_like_users record is not soft-deleted
 * and that the user is not under platform suspension.
 *
 * This operation integrates with the User Roles and Authentication system
 * defined in the requirements, implementing the JWT-based session management
 * specified in sections on login and session management. It provides the
 * foundation for maintaining authenticated state across API requests and
 * supports the token refresh workflow when access tokens expire.
 *
 * Related API operations include the initial login endpoint that creates
 * sessions and generates tokens, the token refresh endpoint that issues new
 * access tokens using refresh tokens, and the logout endpoint that explicitly
 * revokes sessions. This validation endpoint is typically called by client
 * applications on startup, page refresh, or before performing authenticated
 * actions to ensure the user's session remains valid.
 *
 * Expected behavior includes returning current user information (user ID,
 * username, role) when the token is valid, returning authentication errors when
 * the token is expired or invalid, and properly handling edge cases such as
 * deleted user accounts or revoked sessions.
 *
 * @param props.connection
 * @param props.body JWT access token to validate and session verification
 *   parameters
 * @path /redditLike/auth/session/validate
 * @accessor api.functional.redditLike.auth.session.validate
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function validate(
  connection: IConnection,
  props: validate.Props,
): Promise<validate.Response> {
  return true === connection.simulate
    ? validate.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...validate.METADATA,
          path: validate.path(),
          status: null,
        },
        props.body,
      );
}
export namespace validate {
  export type Props = {
    /** JWT access token to validate and session verification parameters */
    body: IRedditLikeAuthSession.IValidate;
  };
  export type Body = IRedditLikeAuthSession.IValidate;
  export type Response = IRedditLikeAuthSession.IValidationResult;

  export const METADATA = {
    method: "POST",
    path: "/redditLike/auth/session/validate",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditLike/auth/session/validate";
  export const random = (): IRedditLikeAuthSession.IValidationResult =>
    typia.random<IRedditLikeAuthSession.IValidationResult>();
  export const simulate = (
    connection: IConnection,
    props: validate.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: validate.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
