import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeUser } from "../../../../structures/IRedditLikeUser";

/**
 * Retrieve detailed profile information for a specific user.
 *
 * Retrieve comprehensive profile information for a specific user identified by
 * their unique user ID. This operation returns detailed user profile data from
 * the reddit_like_users table including username, account creation date, karma
 * scores (post karma and comment karma separately), profile biography, avatar
 * URL, and privacy settings.
 *
 * This endpoint serves multiple critical use cases across the platform. When
 * users click on a username anywhere in the platform (posts, comments,
 * community member lists), they navigate to that user's profile to understand
 * the user's participation history, reputation, and community standing. New
 * users discovering a community can review moderator profiles to understand who
 * manages the community. Users evaluating the credibility of a post or comment
 * can check the author's karma score and account age. The profile serves as the
 * public face of each user's platform identity.
 *
 * The operation respects user privacy settings stored in the profile_privacy
 * field. When a user has set their profile to 'members_only', the system
 * requires authentication to view the profile and returns an error for guest
 * requests. When a user has set their profile to 'private', the system denies
 * access to all users except the profile owner themselves. When the profile is
 * 'public' (default), all users including unauthenticated guests can view the
 * profile information. Additionally, individual privacy flags like
 * show_karma_publicly and show_subscriptions_publicly control visibility of
 * specific profile elements.
 *
 * The response includes calculated total karma (sum of post_karma and
 * comment_karma) alongside the separate post and comment karma values, enabling
 * users to understand the user's contribution patterns. Account age is
 * calculated from the created_at timestamp and displayed in human-readable
 * format. The operation performs no mutations and has no side effects, making
 * it safe for repeated access and caching.
 *
 * This operation integrates with the user roles and authentication system
 * defined in requirement document 02-user-roles-authentication.md, respecting
 * the four-tier role hierarchy. It also integrates with the karma system
 * defined in document 07-karma-system.md, displaying karma scores calculated
 * from voting activity. Profile privacy controls are specified in document
 * 09-user-profiles-feeds.md section on privacy settings.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user whose profile
 *   information is being retrieved
 * @path /redditLike/users/:userId/profile
 * @accessor api.functional.redditLike.users.profile.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target user whose profile information is
     * being retrieved
     */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikeUser.IProfile;

  export const METADATA = {
    method: "GET",
    path: "/redditLike/users/:userId/profile",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/users/${encodeURIComponent(props.userId ?? "null")}/profile`;
  export const random = (): IRedditLikeUser.IProfile =>
    typia.random<IRedditLikeUser.IProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
