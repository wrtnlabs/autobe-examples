import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeUser } from "../../../../structures/IRedditLikeUser";

/**
 * Retrieve current karma scores for a specific user from the reddit_like_users
 * table.
 *
 * Retrieve the current karma scores for a specified user, including post karma,
 * comment karma, and total karma. This operation accesses the reddit_like_users
 * table where karma values are stored as denormalized fields (post_karma and
 * comment_karma) that are maintained in real-time as voting activity occurs on
 * the user's content.
 *
 * Karma represents the user's reputation earned through community voting on
 * their posts and comments. Post karma reflects votes on the user's submitted
 * posts, while comment karma reflects votes on their comments and replies. The
 * total karma is the sum of both values. Per business requirements, karma can
 * be negative if a user's content receives more downvotes than upvotes, and
 * there is no minimum limit.
 *
 * This endpoint is used throughout the platform wherever user reputation needs
 * to be displayed, including user profiles, post/comment author displays,
 * leaderboards, and analytics interfaces. The karma values returned represent
 * the current state of the user's reputation, calculated from all historical
 * voting activity on their content.
 *
 * Security considerations include respecting user privacy settings - if a user
 * has set show_karma_publicly to false in their profile, the system should
 * handle this appropriately based on the requesting user's permissions.
 * However, karma is generally considered public information visible to all
 * users including guests per the karma system requirements.
 *
 * The operation returns only the current karma state. For detailed karma change
 * history and audit trails, use the karma history endpoint instead. The userId
 * path parameter must reference an existing user in the reddit_like_users
 * table.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose karma scores are
 *   being retrieved
 * @path /redditLike/users/:userId/karma
 * @accessor api.functional.redditLike.users.karma.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user whose karma scores are being retrieved */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditLikeUser.IKarma;

  export const METADATA = {
    method: "GET",
    path: "/redditLike/users/:userId/karma",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditLike/users/${encodeURIComponent(props.userId ?? "null")}/karma`;
  export const random = (): IRedditLikeUser.IKarma =>
    typia.random<IRedditLikeUser.IKarma>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
