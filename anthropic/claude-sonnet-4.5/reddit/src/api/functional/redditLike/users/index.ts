import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeUser } from "../../../structures/IRedditLikeUser";
import { IPageIRedditLikePost } from "../../../structures/IPageIRedditLikePost";
import { IPageIRedditLikeComment } from "../../../structures/IPageIRedditLikeComment";
export * as subscriptions from "./subscriptions/index";
export * as karma from "./karma/index";
export * as profile from "./profile/index";

/**
 * Retrieve a filtered and paginated list of posts created by a specific user.
 *
 * Retrieve a comprehensive, filtered, and paginated list of all posts created
 * by a specific user, supporting the user profile post history feature defined
 * in the User Profiles and Feeds Requirements document. This operation enables
 * users to browse through another member's contribution history, understand
 * their posting patterns, and discover their most popular or recent content.
 *
 * The operation integrates with the reddit_like_posts table, filtering posts by
 * the reddit_like_member_id that matches the userId path parameter. It supports
 * complex search capabilities including filtering by community, post type
 * (text, link, image), date ranges, and vote score thresholds. Users can sort
 * results by creation date (newest first - default), vote score (top posts
 * first), or controversial score to find different types of content in the
 * user's history.
 *
 * Security and privacy considerations include respecting user profile privacy
 * settings defined in reddit_like_users.profile_privacy. If the target user has
 * set their profile to 'private', only the user themselves can access their
 * post history. If set to 'members_only', authentication is required. Public
 * profiles are viewable by all users including guests. Additionally, the
 * operation filters out soft-deleted posts (where deleted_at is not null)
 * unless the requesting user is viewing their own profile, in which case
 * deleted posts are included with appropriate indicators.
 *
 * The response includes post summary information optimized for profile display,
 * containing essential metadata such as post title, community name, vote score
 * from mv_reddit_like_post_metrics, comment count, post type, and creation
 * timestamp. For performance optimization, the operation leverages the
 * materialized view mv_reddit_like_post_metrics to retrieve denormalized vote
 * scores and comment counts without expensive real-time aggregation.
 *
 * This operation supports the business requirement that user profiles display
 * chronological post history with filtering and sorting capabilities, enabling
 * both the profile owner and other community members to review posting
 * activity. It integrates with the karma system by displaying vote scores that
 * contribute to the user's post karma, and with the community system by showing
 * which communities the user participates in through their posting activity.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose posts are being
 *   retrieved
 * @param props.body Search criteria, filtering options, sorting preferences,
 *   and pagination parameters for retrieving user posts
 * @path /redditLike/users/:userId/posts
 * @accessor api.functional.redditLike.users.posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function posts(
  connection: IConnection,
  props: posts.Props,
): Promise<posts.Response> {
  return true === connection.simulate
    ? posts.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...posts.METADATA,
          path: posts.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace posts {
  export type Props = {
    /** Unique identifier of the user whose posts are being retrieved */
    userId: string & tags.Format<"uuid">;

    /**
     * Search criteria, filtering options, sorting preferences, and
     * pagination parameters for retrieving user posts
     */
    body: IRedditLikeUser.IPostsRequest;
  };
  export type Body = IRedditLikeUser.IPostsRequest;
  export type Response = IPageIRedditLikePost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditLike/users/:userId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/users/${encodeURIComponent(props.userId ?? "null")}/posts`;
  export const random = (): IPageIRedditLikePost.ISummary =>
    typia.random<IPageIRedditLikePost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: posts.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: posts.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered and paginated list of comments created by a specific
 * user.
 *
 * Retrieve a comprehensive, filtered, and paginated list of all comments
 * created by a specific user, supporting the user profile comment history
 * feature defined in the User Profiles and Feeds Requirements document. This
 * operation enables users to browse through another member's discussion
 * participation history, understand their commenting patterns, and discover
 * their most insightful or popular comments.
 *
 * The operation integrates with the reddit_like_comments table, filtering
 * comments by the reddit_like_member_id that matches the userId path parameter.
 * It supports complex search capabilities including filtering by community,
 * post context, date ranges, vote score thresholds, and comment depth levels.
 * Users can sort results by creation date (newest first - default), vote score
 * (top comments first), or controversial score to find different types of
 * commentary in the user's history.
 *
 * Security and privacy considerations include respecting user profile privacy
 * settings defined in reddit_like_users.profile_privacy. If the target user has
 * set their profile to 'private', only the user themselves can access their
 * comment history. If set to 'members_only', authentication is required. Public
 * profiles are viewable by all users including guests. Additionally, the
 * operation filters out soft-deleted comments (where deleted_at is not null)
 * unless the requesting user is viewing their own profile, in which case
 * deleted comments are included with appropriate indicators.
 *
 * The response includes comment summary information optimized for profile
 * display, containing essential metadata such as comment text content (with
 * preview truncation for long comments), the post title and community where the
 * comment was made, vote score, nesting depth, edit status, and creation
 * timestamp. For each comment, the operation provides context links enabling
 * navigation to the original post and full comment thread, as required by the
 * Comment System Requirements for comment permalinks and context viewing.
 *
 * This operation supports the business requirement that user profiles display
 * chronological comment history with filtering and sorting capabilities,
 * enabling both the profile owner and other community members to review
 * discussion participation. It integrates with the karma system by displaying
 * vote scores that contribute to the user's comment karma, with the community
 * system by showing which communities the user participates in through
 * commenting, and with the post system by providing context about which posts
 * generated the user's comments.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose comments are being
 *   retrieved
 * @param props.body Search criteria, filtering options, sorting preferences,
 *   and pagination parameters for retrieving user comments
 * @path /redditLike/users/:userId/comments
 * @accessor api.functional.redditLike.users.comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function comments(
  connection: IConnection,
  props: comments.Props,
): Promise<comments.Response> {
  return true === connection.simulate
    ? comments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...comments.METADATA,
          path: comments.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace comments {
  export type Props = {
    /** Unique identifier of the user whose comments are being retrieved */
    userId: string & tags.Format<"uuid">;

    /**
     * Search criteria, filtering options, sorting preferences, and
     * pagination parameters for retrieving user comments
     */
    body: IRedditLikeUser.ICommentsRequest;
  };
  export type Body = IRedditLikeUser.ICommentsRequest;
  export type Response = IPageIRedditLikeComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditLike/users/:userId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditLike/users/${encodeURIComponent(props.userId ?? "null")}/comments`;
  export const random = (): IPageIRedditLikeComment.ISummary =>
    typia.random<IPageIRedditLikeComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: comments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: comments.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
