import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeModerator } from "../../../../../structures/IRedditLikeModerator";

/**
 * Change moderator password with current password verification.
 *
 * Enables authenticated moderators to change their password by providing
 * current password verification and new password credentials. This endpoint
 * requires valid moderator authentication via JWT access token and validates
 * the current password before allowing password updates, ensuring only the
 * legitimate account owner can change credentials.
 *
 * The operation validates the provided current password by retrieving the
 * moderator record from reddit_like_moderators using the authenticated user ID
 * from the JWT token payload, then comparing the current password against the
 * stored password_hash using the same hashing algorithm (bcrypt/Argon2/PBKDF2).
 * If the current password verification fails, the system rejects the request
 * with error message 'Current password is incorrect' without proceeding to
 * password update.
 *
 * The new password must meet all platform password requirements: minimum 8
 * characters, at least one uppercase letter, one lowercase letter, one number,
 * and one special character. The system validates password strength before
 * accepting the change. A confirmation field ensures the new password was
 * entered correctly by requiring exact match between new password and password
 * confirmation inputs, rejecting mismatches with error 'Password confirmation
 * does not match. Please ensure both passwords are identical.'
 *
 * Upon successful validation, the reddit_like_moderators record is updated with
 * a new password_hash generated by securely hashing the new password. All
 * existing sessions in reddit_like_sessions for this moderator are invalidated
 * by setting deleted_at to the current timestamp, EXCEPT the current session
 * used for this password change request. This security measure prevents
 * potentially compromised sessions from continuing access after password change
 * while maintaining the user's current authenticated state.
 *
 * A notification email is sent to the account email address confirming the
 * password change occurred, providing security awareness if the change was
 * unauthorized. The moderator remains logged in with their current session and
 * can continue using the platform without interruption. This operation requires
 * moderator role authentication and operates only on the authenticated user's
 * own account.
 *
 * @param props.connection
 * @param props.body Current password verification and new password credentials
 * @path /auth/moderator/password/change
 * @accessor api.functional.auth.moderator.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Current password verification and new password credentials */
    body: IRedditLikeModerator.IPasswordChange;
  };
  export type Body = IRedditLikeModerator.IPasswordChange;
  export type Response = IRedditLikeModerator.IPasswordChangeConfirmation;

  export const METADATA = {
    method: "PUT",
    path: "/auth/moderator/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/change";
  export const random = (): IRedditLikeModerator.IPasswordChangeConfirmation =>
    typia.random<IRedditLikeModerator.IPasswordChangeConfirmation>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
