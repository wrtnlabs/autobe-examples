import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeModerator } from "../../../../../../structures/IRedditLikeModerator";

/**
 * Complete password reset by validating token and updating password.
 *
 * Completes password reset by validating the reset token and updating the
 * moderator's password to a new secure value. This endpoint receives the reset
 * token (from email link) and new password, validates the token against
 * reddit_like_password_resets records, verifies expiration constraints, and
 * updates authentication credentials.
 *
 * The validation process checks that the reset token exists in
 * reddit_like_password_resets, matches the provided token exactly, has not
 * expired (current time is before expires_at timestamp set to 1 hour after
 * creation), and has not been previously used (used_at field is null). If any
 * validation fails, the system rejects the request with appropriate error
 * messages: expired tokens display 'This password reset link has expired.
 * Please request a new password reset', and already-used tokens are rejected.
 *
 * The new password must meet all platform password requirements: minimum 8
 * characters, at least one uppercase letter, one lowercase letter, one number,
 * and one special character (@, #, $, %, &, *, etc.). The system validates
 * password strength before accepting the change, displaying specific validation
 * errors if requirements are not met.
 *
 * Upon successful validation, the system updates the reddit_like_moderators
 * record by replacing the password_hash with a newly generated secure hash of
 * the new password using bcrypt, Argon2, or PBKDF2. The
 * reddit_like_password_resets record is updated by setting used_at to the
 * current timestamp, preventing token reuse per security requirements.
 *
 * Critically, all existing sessions in reddit_like_sessions for this moderator
 * account are invalidated by setting their deleted_at timestamps to the current
 * time. This security measure ensures that any potentially compromised sessions
 * using the old password cannot continue accessing the account after password
 * reset. The user must log in again with their new password to establish fresh
 * authenticated sessions.
 *
 * A confirmation email is sent to the account email address notifying the
 * moderator that their password has been successfully changed, providing
 * security awareness if the password change was unauthorized. This operation is
 * publicly accessible as users resetting passwords cannot authenticate with
 * their forgotten credentials.
 *
 * @param props.connection
 * @param props.body Reset token and new password for completing password reset
 * @path /auth/moderator/password/reset/complete
 * @accessor api.functional.auth.moderator.password.reset.complete.completePasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function completePasswordReset(
  connection: IConnection,
  props: completePasswordReset.Props,
): Promise<completePasswordReset.Response> {
  return true === connection.simulate
    ? completePasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...completePasswordReset.METADATA,
          path: completePasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace completePasswordReset {
  export type Props = {
    /** Reset token and new password for completing password reset */
    body: IRedditLikeModerator.IPasswordResetComplete;
  };
  export type Body = IRedditLikeModerator.IPasswordResetComplete;
  export type Response = IRedditLikeModerator.IPasswordResetConfirmation;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/password/reset/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/reset/complete";
  export const random = (): IRedditLikeModerator.IPasswordResetConfirmation =>
    typia.random<IRedditLikeModerator.IPasswordResetConfirmation>();
  export const simulate = (
    connection: IConnection,
    props: completePasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: completePasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
