import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeMember } from "../../../../../structures/IRedditLikeMember";

/**
 * Change authenticated member's password after validating current password,
 * updating reddit_like_members.password_hash and invalidating other sessions.
 *
 * Updates authenticated member's password after validating current password and
 * meeting security requirements.
 *
 * This endpoint implements the password change feature defined in requirements
 * section 2.6 (Password Change Requirements). Authenticated members can
 * proactively change their passwords through their account settings for
 * security maintenance. The operation requires three pieces of information: the
 * user's current password for verification, the new desired password, and
 * confirmation of the new password to prevent typos.
 *
 * The password change process begins by validating the submitted current
 * password against the stored password_hash in the reddit_like_members table
 * for the authenticated user. This verification step prevents unauthorized
 * password changes if someone gains temporary access to an authenticated
 * session. If the current password is incorrect, the system rejects the change
 * with error message "Current password is incorrect" and does not proceed
 * further.
 *
 * Next, the system validates the new password meets all security requirements
 * defined in registration specifications: minimum 8 characters length, at least
 * one uppercase letter, at least one lowercase letter, at least one number, and
 * at least one special character (@, #, $, %, &, *, etc.). These complexity
 * requirements ensure password strength and resistance to common attack
 * patterns. The system also validates that new password confirmation matches
 * the new password exactly, rejecting with error if they differ.
 *
 * Upon successful validation, the system updates the password_hash field in
 * reddit_like_members using the same secure hashing algorithm as registration
 * (bcrypt, Argon2, or PBKDF2 with appropriate salt). The old password hash is
 * completely replaced and cannot be recovered. For security, the system
 * immediately invalidates all existing authentication sessions except the
 * current one by setting deleted_at timestamp on all other reddit_like_sessions
 * records belonging to this user. This forces logout on all other devices and
 * prevents compromised sessions from remaining active after password change.
 *
 * The system sends an email notification to the account's registered email
 * address confirming the password change occurred. This security notification
 * alerts the user to potentially unauthorized password changes and provides
 * opportunity to take corrective action if the change was not initiated by
 * them. The notification includes timestamp of change and guidance on what to
 * do if change was unauthorized (contact support, secure account).
 *
 * The current session remains valid after password change, allowing the user to
 * continue using the platform without immediate re-authentication. However, the
 * access token in the current session should be considered for refresh or
 * re-issuance to reflect the security state change, though this is an
 * implementation decision for the development team.
 *
 * Security logging records the password change event in
 * reddit_like_auth_credentials or audit tables for security monitoring,
 * including timestamp, IP address, and whether the current password validation
 * succeeded or failed (for tracking password change attempt patterns).
 *
 * @param props.connection
 * @param props.body Password change request with current password for
 *   verification, new password meeting security requirements, and new password
 *   confirmation
 * @path /auth/member/password/change
 * @accessor api.functional.auth.member.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /**
     * Password change request with current password for verification, new
     * password meeting security requirements, and new password
     * confirmation
     */
    body: IRedditLikeMember.IChangePassword;
  };
  export type Body = IRedditLikeMember.IChangePassword;
  export type Response = IRedditLikeMember.IPasswordChanged;

  export const METADATA = {
    method: "PUT",
    path: "/auth/member/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/change";
  export const random = (): IRedditLikeMember.IPasswordChanged =>
    typia.random<IRedditLikeMember.IPasswordChanged>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
