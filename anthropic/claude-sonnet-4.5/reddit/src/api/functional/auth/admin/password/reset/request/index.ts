import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeAdmin } from "../../../../../../structures/IRedditLikeAdmin";

/**
 * Request password reset email for admin account.
 *
 * Initiates the password reset workflow for administrators who have forgotten
 * their password by generating a time-limited password reset token and sending
 * a reset email to the registered email address. This endpoint implements the
 * 'Forgot Password' mechanism accessible from the login page, enabling account
 * recovery without requiring the current password.
 *
 * The operation validates the provided email address exists in the
 * reddit_like_admins table as a registered administrator account. If the email
 * address is found, the system generates a unique cryptographically secure
 * reset token using secure random number generation, creates a password reset
 * record in reddit_like_password_resets with the admin's user ID, email
 * address, reset token, and expiration timestamp set to 1 hour from creation
 * time per authentication requirements. The reset token is a one-time use token
 * tracked via the used_at field.
 *
 * Within 5 minutes of receiving a valid password reset request, the system
 * sends a password reset email to the registered email address containing a
 * unique password reset link with the embedded reset token. The email explains
 * the reset process, includes the clickable reset link, warns that the link
 * expires in 1 hour, and provides instructions for requesting a new reset link
 * if needed. If the provided email address does not match any admin account,
 * the system still displays a success message to prevent account enumeration
 * attacks, but does not send an email.
 *
 * The password reset record in reddit_like_password_resets includes the
 * reddit_like_user_id linking to the reddit_like_users table (which
 * consolidates all user types including admins), the email address for
 * validation, the unique reset_token, expires_at timestamp (1 hour from
 * creation), used_at initially set to null (marks token as unused), and
 * created_at timestamp. The reset token can only be used once - after
 * successful password reset, the used_at field is updated to prevent token
 * reuse.
 *
 * This operation is the first step in the two-step password reset workflow.
 * After receiving the email, the administrator clicks the reset link (which
 * contains the token), navigates to the password reset form, enters their new
 * password meeting all validation requirements (minimum 8 characters with
 * uppercase, lowercase, number, and special character), and submits the new
 * password along with the token to complete the reset process. If the reset
 * link expires before use, the system displays an error message and offers to
 * resend a new reset link.
 *
 * @param props.connection
 * @param props.body Email address of the admin account requesting password
 *   reset. System validates this email exists in admin accounts before sending
 *   reset link.
 * @path /auth/admin/password/reset/request
 * @accessor api.functional.auth.admin.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /**
     * Email address of the admin account requesting password reset. System
     * validates this email exists in admin accounts before sending reset
     * link.
     */
    body: IRedditLikeAdmin.IPasswordResetRequest;
  };
  export type Body = IRedditLikeAdmin.IPasswordResetRequest;
  export type Response = IRedditLikeAdmin.IPasswordResetRequestResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset/request";
  export const random = (): IRedditLikeAdmin.IPasswordResetRequestResponse =>
    typia.random<IRedditLikeAdmin.IPasswordResetRequestResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
