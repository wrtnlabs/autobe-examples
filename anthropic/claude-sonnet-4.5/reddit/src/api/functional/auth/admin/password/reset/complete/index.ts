import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditLikeAdmin } from "../../../../../../structures/IRedditLikeAdmin";

/**
 * Complete password reset with token and new password.
 *
 * Completes the password reset workflow by validating the reset token and
 * updating the administrator's password to the new provided password. This
 * endpoint is accessed when an administrator clicks the password reset link
 * from their email and submits their new password, finalizing the account
 * recovery process.
 *
 * The operation validates the provided reset token against active password
 * reset records in reddit_like_password_resets table, confirming the token
 * exists, has not expired (expires_at is in the future and within the 1-hour
 * validity window per authentication requirements), has not been previously
 * used (used_at is null), and matches an existing admin account in
 * reddit_like_admins through the reddit_like_user_id foreign key relationship.
 *
 * If the reset token is expired (current time exceeds expires_at), the system
 * rejects the reset request and displays the error message 'This password reset
 * link has expired. Please request a new password reset.' and offers to resend
 * a new reset link. If the reset token has already been used (used_at is not
 * null), the system rejects the request to prevent token reuse and displays an
 * error indicating the link is no longer valid.
 *
 * The new password undergoes complete validation against the same requirements
 * as registration: minimum length of 8 characters, contains at least one
 * uppercase letter, one lowercase letter, one number, and one special character
 * (@, #, $, %, &, *, etc.). If the new password fails any validation
 * requirement, the system rejects the reset and displays specific error
 * messages listing which requirements are not met. The system also validates
 * that the new password confirmation (if provided) matches the new password
 * exactly.
 *
 * Upon successful validation, the system updates the admin account's
 * password_hash field in reddit_like_admins with the securely hashed new
 * password (using bcrypt, Argon2, or PBKDF2), marks the reset token as used by
 * setting used_at to the current timestamp in reddit_like_password_resets, and
 * invalidates all existing active sessions for that admin account by setting
 * deleted_at on all related reddit_like_sessions records to force
 * re-authentication on all devices for security.
 *
 * After successful password reset completion, the system sends a confirmation
 * email to the admin's registered email address notifying them that their
 * password was changed, includes the timestamp of the change, and advises them
 * to contact support if they did not initiate this change. The system then
 * displays a confirmation message 'Your password has been successfully reset.
 * Please log in with your new password.' and redirects or prompts the
 * administrator to log in using the new credentials through the login
 * endpoint.
 *
 * @param props.connection
 * @param props.body Password reset completion data including the unique reset
 *   token (from email link), new password meeting strength requirements, and
 *   new password confirmation for validation
 * @path /auth/admin/password/reset/complete
 * @accessor api.functional.auth.admin.password.reset.complete.completePasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function completePasswordReset(
  connection: IConnection,
  props: completePasswordReset.Props,
): Promise<completePasswordReset.Response> {
  return true === connection.simulate
    ? completePasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...completePasswordReset.METADATA,
          path: completePasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace completePasswordReset {
  export type Props = {
    /**
     * Password reset completion data including the unique reset token (from
     * email link), new password meeting strength requirements, and new
     * password confirmation for validation
     */
    body: IRedditLikeAdmin.IPasswordResetComplete;
  };
  export type Body = IRedditLikeAdmin.IPasswordResetComplete;
  export type Response = IRedditLikeAdmin.IPasswordResetCompleteResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset/complete";
  export const random = (): IRedditLikeAdmin.IPasswordResetCompleteResponse =>
    typia.random<IRedditLikeAdmin.IPasswordResetCompleteResponse>();
  export const simulate = (
    connection: IConnection,
    props: completePasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: completePasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
