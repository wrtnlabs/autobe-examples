import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { getTodoListUserAuthUserSessions } from "../../../../../../providers/getTodoListUserAuthUserSessions";
import { UserAuth } from "../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../decorators/payload/UserPayload";
import { deleteTodoListUserAuthUserSessions } from "../../../../../../providers/deleteTodoListUserAuthUserSessions";

import { IPageITodoListRefreshToken } from "../../../../../../api/structures/IPageITodoListRefreshToken";
import { ITodoListSessionRevocationResult } from "../../../../../../api/structures/ITodoListSessionRevocationResult";

@Controller("/todoList/user/auth/user/sessions")
export class TodolistUserAuthUserSessionsController {
  /**
   * Retrieve all active refresh token sessions for the authenticated user.
   *
   * Retrieve a comprehensive list of all active refresh token sessions
   * associated with the currently authenticated user's account. This operation
   * provides users with visibility into where and when they are logged in
   * across different devices and browsers, supporting security monitoring and
   * session management capabilities.
   *
   * The operation queries the todo_list_refresh_tokens table to find all
   * refresh tokens belonging to the authenticated user where revoked_at is null
   * and expires_at is in the future. Each session record includes the token
   * identifier, creation timestamp, expiration timestamp, and any metadata that
   * helps users identify the device or location of the session.
   *
   * This functionality supports the security requirement (REQ-AUTH-027) that
   * allows users to view their active sessions. By providing this visibility,
   * users can identify unauthorized access attempts and take action by revoking
   * suspicious sessions. The operation is essential for maintaining account
   * security and user control over authentication state.
   *
   * The response includes session details such as when each session was
   * created, when it will expire, and potentially device/browser information if
   * captured during token issuance. Sessions are returned in reverse
   * chronological order (newest first) to help users quickly identify recent
   * login activity.
   *
   * Only the authenticated user can access their own sessions - the operation
   * enforces strict authorization by filtering results based on the user ID
   * extracted from the JWT access token. This ensures complete data isolation
   * between users as required by the security and privacy specifications.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @UserAuth()
    user: UserPayload,
  ): Promise<IPageITodoListRefreshToken> {
    try {
      return await getTodoListUserAuthUserSessions({
        user,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke all active sessions and force logout from all devices.
   *
   * Permanently revoke all active refresh token sessions for the currently
   * authenticated user, forcing logout across all devices and browsers where
   * the user is currently logged in. This operation provides a critical
   * security feature allowing users to terminate all their sessions
   * simultaneously, typically used when a user suspects their account may be
   * compromised or when they want to ensure they are logged out everywhere.
   *
   * The operation updates all records in the todo_list_refresh_tokens table
   * where todo_list_user_id matches the authenticated user and revoked_at is
   * null, setting revoked_at to the current timestamp. This makes all existing
   * refresh tokens invalid, preventing them from being used to obtain new
   * access tokens even if they have not yet reached their expiration time.
   *
   * This functionality implements the security requirement (REQ-AUTH-029) that
   * states 'WHEN a user requests logout from all devices, THE system SHALL
   * invalidate all refresh tokens associated with that user.' By revoking all
   * tokens, the system ensures that any device attempting to use an old refresh
   * token will be denied and required to perform a fresh login with email and
   * password credentials.
   *
   * The operation is particularly important for security scenarios such as
   * password changes (where all sessions should be invalidated), suspected
   * unauthorized access, or when a user loses a device. After this operation
   * completes, the user will need to log in again on all devices to establish
   * new authenticated sessions.
   *
   * The operation affects only the authenticated user's sessions and cannot
   * impact other users' tokens, maintaining strict data isolation. The
   * operation returns a confirmation of how many sessions were revoked,
   * providing transparency about the action taken.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @UserAuth()
    user: UserPayload,
  ): Promise<ITodoListSessionRevocationResult> {
    try {
      return await deleteTodoListUserAuthUserSessions({
        user,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
