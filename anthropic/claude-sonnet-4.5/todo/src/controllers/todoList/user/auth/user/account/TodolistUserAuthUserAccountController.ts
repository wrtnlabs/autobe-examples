import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { deleteTodoListUserAuthUserAccount } from "../../../../../../providers/deleteTodoListUserAuthUserAccount";
import { UserAuth } from "../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../decorators/payload/UserPayload";

import { ITodoListAccountDeletion } from "../../../../../../api/structures/ITodoListAccountDeletion";

@Controller("/todoList/user/auth/user/account")
export class TodolistUserAuthUserAccountController {
  /**
   * Delete authenticated user's account from the todo_list_users table.
   *
   * Permanently delete the authenticated user's account from the Todo list
   * application. This operation performs a soft delete by setting the
   * deleted_at timestamp on the user's record in the todo_list_users table,
   * allowing for a grace period before permanent data removal as specified in
   * the data management requirements.
   *
   * When a user account is deleted, the system marks the account for deletion
   * by populating the deleted_at field with the current timestamp. This soft
   * delete approach supports the 7-day grace period mentioned in the
   * requirements where users can potentially cancel account deletion. After the
   * grace period, the account and all associated data (todos, refresh tokens)
   * are permanently removed from the system.
   *
   * Security considerations: This operation requires valid JWT authentication.
   * The user can only delete their own account - the system verifies that the
   * authenticated user's ID matches the account being deleted. All active
   * sessions and refresh tokens for the user are immediately invalidated when
   * the account is deleted, preventing further access. The operation triggers
   * cascade deletion of related data as defined in the Prisma schema
   * relationships, ensuring todos and refresh tokens associated with the user
   * are also marked for deletion.
   *
   * Relationship to database entities: This operation directly modifies the
   * todo_list_users table by setting the deleted_at timestamp. Through cascade
   * relationships defined in the schema, it also affects todo_list_todos and
   * todo_list_refresh_tokens tables, marking all user-owned todos and active
   * refresh tokens for deletion.
   *
   * Validation rules: The user must be authenticated with a valid JWT token.
   * The token must not be expired or revoked. The account must not already be
   * deleted (deleted_at must be null).
   *
   * Expected behavior: Upon successful deletion, all user sessions are
   * terminated, refresh tokens are revoked, and the user is logged out. The API
   * returns a success confirmation without exposing internal deletion details.
   * If the account is already deleted or the user is not authenticated,
   * appropriate error responses are returned as specified in the error handling
   * documentation.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @UserAuth()
    user: UserPayload,
  ): Promise<ITodoListAccountDeletion.IResponse> {
    try {
      return await deleteTodoListUserAuthUserAccount({
        user,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
