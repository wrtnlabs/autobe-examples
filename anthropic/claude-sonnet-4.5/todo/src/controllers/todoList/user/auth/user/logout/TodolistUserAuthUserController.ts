import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postTodoListUserAuthUserLogout } from "../../../../../../providers/postTodoListUserAuthUserLogout";
import { UserAuth } from "../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../decorators/payload/UserPayload";

import { ITodoListLogout } from "../../../../../../api/structures/ITodoListLogout";

@Controller("/todoList/user/auth/user/logout")
export class TodolistUserAuthUserController {
  /**
   * Logout authenticated user and revoke current session token.
   *
   * Terminates the authenticated user's current session by revoking their
   * refresh token. This operation updates the todo_list_refresh_tokens table to
   * mark the current refresh token as revoked by setting the revoked_at
   * timestamp to the current date and time. Once a refresh token is revoked, it
   * can no longer be used to obtain new access tokens, effectively ending the
   * session.
   *
   * The logout process follows these steps: First, the system validates the
   * user's JWT access token from the Authorization header to identify the
   * authenticated user. Then, it locates the active refresh token associated
   * with the current session. Finally, it sets the revoked_at field on that
   * token record to permanently invalidate it.
   *
   * Security considerations: This operation requires a valid JWT access token
   * in the Authorization header. The system will only revoke the refresh token
   * associated with the current session, not all of the user's active sessions
   * across different devices. If the user wants to log out from all devices
   * simultaneously, they should use a separate "logout from all devices"
   * operation (if implemented) or change their password, which invalidates all
   * refresh tokens.
   *
   * After successful logout, the user will need to log in again with their
   * email and password to obtain new access and refresh tokens. The client
   * application should clear all stored tokens (both access and refresh tokens)
   * from local storage or cookies upon receiving the logout success response.
   *
   * Related operations: This operation should be used in conjunction with the
   * login operation. Users typically log in to start a session and log out when
   * they finish using the application or want to secure their account on a
   * shared device. The logout operation complements the authentication workflow
   * defined in the User Roles and Authentication requirements document.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async logout(
    @UserAuth()
    user: UserPayload,
  ): Promise<ITodoListLogout.IResponse> {
    try {
      return await postTodoListUserAuthUserLogout({
        user,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
