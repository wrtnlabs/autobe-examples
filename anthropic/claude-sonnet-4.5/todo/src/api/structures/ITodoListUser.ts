import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * User account entity representing authenticated users in the Todo list
 * application.
 *
 * Represents authenticated users who can create and manage their personal todo
 * items. Each user account stores authentication credentials and profile
 * information. Users are the foundation of the application - they must register
 * and authenticate before accessing any todo management features.
 *
 * This type corresponds to the todo_list_users table in the Prisma schema.
 * Security note: The password_hash and deleted_at fields are intentionally
 * excluded from this response type as they are internal system fields that
 * should never be exposed to clients.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListUser = {
  /**
   * Primary Key.
   *
   * Unique identifier for the user account. This UUID is system-generated
   * upon account creation and serves as the primary reference for the user
   * across all tables in the system. The ID is immutable and used to
   * establish relationships with todos and refresh tokens.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's email address for authentication and identification.
   *
   * Must be unique across all users. Used as the primary login credential.
   * Normalized to lowercase for case-insensitive comparison. Maximum 255
   * characters as per validation requirements. This field serves as both the
   * user identifier and communication channel for password resets and account
   * notifications.
   */
  email: string & tags.MaxLength<255> & tags.Format<"email">;

  /**
   * Timestamp when the user account was created.
   *
   * Immutable after creation. Used for account age tracking and audit
   * purposes. This timestamp is automatically set by the system when the user
   * completes registration and is never modified thereafter.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last modification to the user account.
   *
   * Updated automatically whenever email or password is changed. Used for
   * tracking account activity and changes. This field reflects the most
   * recent time any user profile information was modified.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListUser {
  /**
   * Guest user registration request for creating new authenticated accounts.
   *
   * Contains the credentials needed for a guest user to register for a new
   * account in the Todo list application. This is the entry point for new
   * users to gain access to the system. The email must be unique and the
   * password must meet security requirements.
   *
   * After successful registration, the user account is created and the user
   * is automatically authenticated with JWT tokens issued immediately.
   */
  export type IRegister = {
    /**
     * User's email address for account creation.
     *
     * Must be unique across all users. Must follow standard email format.
     * Will be normalized to lowercase for storage and comparison. This
     * becomes the primary login credential for the account.
     */
    email: string & tags.MaxLength<255> & tags.Format<"email">;

    /**
     * User's password for account security.
     *
     * Must be at least 8 characters long. Must contain at least one
     * uppercase letter, one lowercase letter, one number, and one special
     * character. The password will be securely hashed using bcrypt before
     * storage - never send hashed passwords from the client.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations such
   * as login, registration, or token refresh. It includes the user's ID and
   * complete token information needed to establish and maintain an
   * authenticated session.
   *
   * The response provides everything needed for the client to store
   * authentication state and begin making authenticated requests to protected
   * endpoints.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated user.
     *
     * The user's ID that can be used to reference the authenticated user in
     * subsequent requests. This ID is included in the JWT token payload and
     * identifies which user account the tokens belong to.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Token refresh request for renewing access tokens.
   *
   * Contains the refresh token needed to obtain a new access token when the
   * current one expires. The system validates the refresh token against
   * stored records, checks expiration and revocation status, and issues a new
   * access token if valid.
   *
   * This enables seamless session continuation without requiring users to
   * re-enter their credentials every 30 minutes.
   */
  export type IRefresh = {
    /**
     * Valid refresh token for obtaining new access token.
     *
     * The refresh token previously issued during login or registration.
     * Must be a valid, non-expired, non-revoked token from the
     * todo_list_refresh_tokens table. Used to obtain a new access token
     * without re-authentication.
     */
    refresh_token: string;
  };

  /**
   * User registration request data for creating new accounts.
   *
   * Contains the minimal information needed to create a new user account:
   * email address and password. The system will validate email uniqueness and
   * password strength before creating the account. Upon successful
   * registration, the password is hashed using bcrypt with cost factor 12 and
   * stored securely.
   *
   * Security note: This is a request DTO, so it contains the plain text
   * password. The password is only transmitted over HTTPS and is immediately
   * hashed upon receipt by the server. The password_hash is never sent by
   * clients.
   */
  export type ICreate = {
    /**
     * User's email address for account creation.
     *
     * Must be unique across all users. Must follow standard email format.
     * Will be normalized to lowercase for storage and comparison. This
     * becomes the primary login credential for the account.
     */
    email: string & tags.MaxLength<255> & tags.Format<"email">;

    /**
     * User's password for account security.
     *
     * Must be at least 8 characters long. Must contain at least one
     * uppercase letter, one lowercase letter, one number, and one special
     * character. The password will be securely hashed using bcrypt before
     * storage - never send hashed passwords from the client.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * User login credentials for authentication.
   *
   * Contains the email and password needed to authenticate an existing user.
   * The system validates these credentials against stored user records,
   * verifying the password hash using bcrypt comparison. Upon successful
   * authentication, JWT access and refresh tokens are issued.
   *
   * Security measures include brute force protection (account locked after 5
   * failed attempts for 15 minutes), rate limiting, and generic error
   * messages that don't reveal whether the email exists in the system.
   */
  export type ILogin = {
    /**
     * User's email address for authentication.
     *
     * The email address registered with the account. Case-insensitive for
     * login purposes. Must match an existing user account in the system.
     */
    email: string & tags.Format<"email">;

    /**
     * User's password for authentication.
     *
     * The plain text password that will be verified against the stored
     * bcrypt hash. Transmitted only over HTTPS for security. The system
     * uses constant-time comparison to prevent timing attacks.
     */
    password: string;
  };

  /**
   * Password change request for authenticated users.
   *
   * Contains the current password for verification and the new password to
   * set. The system validates the current password, ensures the new password
   * meets security requirements and differs from the current one, then
   * updates the password hash and invalidates all refresh tokens for
   * security.
   *
   * After password change, all sessions are terminated and the user must log
   * in again on all devices.
   */
  export type IChangePassword = {
    /**
     * Current password for verification.
     *
     * The user's existing password that will be verified before allowing
     * the password change. This security measure ensures only the account
     * owner can change the password. Must match the stored password hash.
     */
    current_password: string;

    /**
     * New password for the account.
     *
     * Must meet security requirements: minimum 8 characters, containing
     * letters and numbers. Must be different from the current password.
     * Will be hashed using bcrypt before storage.
     */
    new_password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * Password change confirmation response.
   *
   * Returned after successful password change to confirm the operation
   * completed. Indicates that the password was updated, all refresh tokens
   * were revoked, and the user needs to re-authenticate on all devices.
   */
  export type IPasswordChangeResponse = {
    /**
     * Confirmation message for password change.
     *
     * Indicates that the password was successfully changed and all sessions
     * were terminated. Informs the user they need to log in again with
     * their new credentials.
     */
    message: string;
  };

  /**
   * User profile information for authenticated users.
   *
   * Contains the user's public profile data including their ID, email, and
   * account timestamps. This represents the user's account information
   * without sensitive fields like password hash. Used for displaying user
   * profile details and account information.
   *
   * Security note: Excludes password_hash and deleted_at fields which are
   * internal system fields.
   */
  export type IProfile = {
    /**
     * Unique identifier for the user account.
     *
     * The user's primary key that uniquely identifies their account. This
     * ID is used throughout the system to reference the user and establish
     * ownership of todos and sessions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * User's current email address.
     *
     * The email address associated with the account. Used for login and
     * account-related communications. Can be updated through the profile
     * update endpoint.
     */
    email: string & tags.Format<"email">;

    /**
     * Account creation timestamp.
     *
     * When the user account was originally created. This timestamp is
     * immutable and provides a record of how long the account has existed.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last profile modification timestamp.
     *
     * When the user account was last modified. Updated whenever the email
     * or password is changed. Helps users understand when their account
     * information was last updated.
     */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Profile update request for modifying user information.
   *
   * Contains the fields that can be updated on a user profile. Currently
   * limited to email address updates. All fields are optional - only provided
   * fields will be updated. The system validates email uniqueness and format
   * before applying changes.
   *
   * The updated_at timestamp is automatically set when any profile changes
   * are saved.
   */
  export type IUpdate = {
    /**
     * Updated email address for the account.
     *
     * Must be unique across all users. Must follow standard email format.
     * If provided, this becomes the new login credential. The system
     * validates uniqueness before applying the update.
     */
    email?: (string & tags.MaxLength<255> & tags.Format<"email">) | undefined;
  };
}
