import { tags } from "typia";

/**
 * Core todo item entity representing user tasks.
 *
 * Each todo belongs to a specific user and contains a title, optional
 * description, and completion status. This is the primary business entity of
 * the application where users manage their personal task lists. Todos support
 * creation, viewing, editing, status toggling, and deletion workflows.
 *
 * Security note: The todo_list_user_id and deleted_at fields are excluded from
 * this response as they are internal fields. User ownership is enforced by the
 * system, not exposed in the API response.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Primary Key.
   *
   * Unique identifier for the todo item. System-generated UUID assigned upon
   * creation. Used to reference the todo in update and delete operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The main text describing the task.
   *
   * Required field with 1-200 characters. Must contain at least one
   * non-whitespace character. This is the primary display text in todo
   * lists.
   */
  title: string & tags.MinLength<1> & tags.MaxLength<200>;

  /**
   * Optional detailed information about the task.
   *
   * Can be null or empty. Maximum 2000 characters when provided. Provides
   * additional context for complex tasks.
   */
  description?: (string & tags.MaxLength<2000>) | undefined;

  /**
   * Completion status indicating whether the task is finished.
   *
   * True means completed, false means incomplete. Defaults to false for newly
   * created todos. Users can toggle this status unlimited times.
   */
  completed: boolean;

  /**
   * Timestamp when this todo was created.
   *
   * System-generated upon todo creation. Immutable - never changes after
   * creation. Used for chronological sorting and audit trails.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this todo was last modified.
   *
   * System-generated and automatically updated on every modification. Changes
   * whenever title, description, or completion status is updated.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListTodo {
  /**
   * Todo creation request data.
   *
   * Contains the information needed to create a new todo: a required title
   * and optional description. The system automatically sets the owner to the
   * authenticated user, sets completed to false, generates the ID, and
   * records timestamps.
   *
   * Security note: This is a request DTO. The user_id is never accepted from
   * the client - it's automatically set from the authenticated user's JWT
   * token.
   */
  export type ICreate = {
    /**
     * Todo title describing the task.
     *
     * Required field between 1-200 characters. Must contain at least one
     * non-whitespace character. Leading and trailing whitespace is trimmed
     * before validation.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<200>;

    /**
     * Optional detailed description of the task.
     *
     * Optional field. Maximum 2000 characters when provided. Can be omitted
     * or set to empty string for simple tasks.
     */
    description?: (string & tags.MaxLength<2000>) | undefined;
  };

  /**
   * Todo update request data.
   *
   * Contains fields that can be updated on an existing todo. All fields are
   * optional - only provided fields will be updated. The system automatically
   * updates the updated_at timestamp when any changes are saved.
   *
   * Security note: Ownership (user_id) cannot be changed. The created_at
   * timestamp is immutable. The updated_at timestamp is system-managed.
   */
  export type IUpdate = {
    /**
     * Updated todo title.
     *
     * Optional field. If provided, must be 1-200 characters with at least
     * one non-whitespace character. Replaces the existing title.
     */
    title?: (string & tags.MinLength<1> & tags.MaxLength<200>) | undefined;

    /**
     * Updated description.
     *
     * Optional field. If provided, must be 2000 characters or less. Can be
     * set to empty string to clear the description.
     */
    description?: (string & tags.MaxLength<2000>) | undefined;

    /**
     * Updated completion status.
     *
     * Optional field. If provided, updates whether the task is marked as
     * complete (true) or incomplete (false).
     */
    completed?: boolean | undefined;
  };

  /**
   * Todo list search and filter request.
   *
   * Contains optional parameters for searching, filtering, sorting, and
   * paginating the user's todo list. All parameters are optional - defaults
   * are applied when not provided. Supports flexible todo list browsing and
   * management.
   *
   * The system automatically filters results to show only the authenticated
   * user's todos and excludes soft-deleted items (deleted_at is null).
   */
  export type IRequest = {
    /**
     * Search text for filtering todos.
     *
     * Optional search term to filter todos by title or description.
     * Performs text matching against todo content.
     */
    search?: string | undefined;

    /**
     * Filter by completion status.
     *
     * Optional filter. If true, returns only completed todos. If false,
     * returns only incomplete todos. If omitted, returns all todos.
     */
    completed?: boolean | undefined;

    /**
     * Sort field for ordering results.
     *
     * Optional sort field. Defaults to created_at. Determines how todos are
     * ordered in the response.
     */
    sort?: "created_at" | "updated_at" | "title" | undefined;

    /**
     * Sort order direction.
     *
     * Optional order direction. Defaults to desc (newest first for
     * timestamps, Z-A for title). Determines ascending or descending
     * order.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination.
     *
     * Optional page number. Defaults to 1. Determines which page of results
     * to return.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Items per page.
     *
     * Optional limit. Defaults to 50. Maximum 100. Determines how many
     * todos are returned per page.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Simplified todo summary for list views.
   *
   * Optimized representation of a todo for efficient list display. Includes
   * only the essential fields needed for browsing: ID, title, completion
   * status, and creation date. Excludes the description field to reduce
   * payload size in paginated list responses.
   *
   * This summary format supports the primary todo list view where users
   * browse their tasks and can click for full details.
   */
  export type ISummary = {
    /**
     * Todo unique identifier.
     *
     * Used to reference the todo in detail views, updates, and deletions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Todo title.
     *
     * The main task description displayed in list views.
     */
    title: string;

    /**
     * Completion status.
     *
     * Indicates whether the task is complete (true) or incomplete (false).
     * Used for visual distinction in list displays.
     */
    completed: boolean;

    /**
     * Creation timestamp.
     *
     * When the todo was created. Used for chronological sorting in list
     * views.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
