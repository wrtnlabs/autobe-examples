import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ITodoListLogout } from "../../../../../structures/ITodoListLogout";
export * as password from "./password/index";
export * as profile from "./profile/index";
export * as sessions from "./sessions/index";
export * as account from "./account/index";

/**
 * Logout authenticated user and revoke current session token.
 *
 * Terminates the authenticated user's current session by revoking their refresh
 * token. This operation updates the todo_list_refresh_tokens table to mark the
 * current refresh token as revoked by setting the revoked_at timestamp to the
 * current date and time. Once a refresh token is revoked, it can no longer be
 * used to obtain new access tokens, effectively ending the session.
 *
 * The logout process follows these steps: First, the system validates the
 * user's JWT access token from the Authorization header to identify the
 * authenticated user. Then, it locates the active refresh token associated with
 * the current session. Finally, it sets the revoked_at field on that token
 * record to permanently invalidate it.
 *
 * Security considerations: This operation requires a valid JWT access token in
 * the Authorization header. The system will only revoke the refresh token
 * associated with the current session, not all of the user's active sessions
 * across different devices. If the user wants to log out from all devices
 * simultaneously, they should use a separate "logout from all devices"
 * operation (if implemented) or change their password, which invalidates all
 * refresh tokens.
 *
 * After successful logout, the user will need to log in again with their email
 * and password to obtain new access and refresh tokens. The client application
 * should clear all stored tokens (both access and refresh tokens) from local
 * storage or cookies upon receiving the logout success response.
 *
 * Related operations: This operation should be used in conjunction with the
 * login operation. Users typically log in to start a session and log out when
 * they finish using the application or want to secure their account on a shared
 * device. The logout operation complements the authentication workflow defined
 * in the User Roles and Authentication requirements document.
 *
 * @param props.connection
 * @path /todoList/user/auth/user/logout
 * @accessor api.functional.todoList.user.auth.user.logout
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function logout(
  connection: IConnection,
): Promise<logout.Response> {
  return true === connection.simulate
    ? logout.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...logout.METADATA,
          path: logout.path(),
          status: null,
        },
      );
}
export namespace logout {
  export type Response = ITodoListLogout.IResponse;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/auth/user/logout",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/auth/user/logout";
  export const random = (): ITodoListLogout.IResponse =>
    typia.random<ITodoListLogout.IResponse>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
