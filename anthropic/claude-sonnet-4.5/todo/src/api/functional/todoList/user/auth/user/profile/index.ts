import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../../../../structures/ITodoListUser";

/**
 * Retrieve authenticated user's profile information from todo_list_users table.
 *
 * Retrieve the complete profile information for the currently authenticated
 * user. This operation provides users with access to their own account details
 * stored in the todo_list_users table, including their email address, account
 * creation timestamp, and last modification timestamp.
 *
 * The operation enforces strict authentication and authorization controls.
 * Users can only access their own profile information - the system validates
 * the JWT token and returns data exclusively for the authenticated user. This
 * ensures complete data privacy and isolation between user accounts,
 * maintaining the security-first approach of the application.
 *
 * The profile data includes all non-sensitive user information. Sensitive
 * fields such as password_hash are explicitly excluded from the response for
 * security reasons. The email field is provided as the primary user identifier,
 * along with temporal data (created_at, updated_at) that helps users understand
 * their account history.
 *
 * This endpoint supports the user account management workflows defined in the
 * requirements, enabling users to view their current account state. It is
 * typically accessed when users want to verify their account details, check
 * their registration date, or confirm their current email address. The
 * operation completes quickly (within 500 milliseconds) to provide instant
 * feedback to users.
 *
 * Authentication is mandatory for this endpoint. Unauthenticated requests
 * receive HTTP 401 Unauthorized responses. The operation validates the JWT
 * access token, verifies it has not expired, and extracts the userId to
 * retrieve the corresponding user profile. If the token is invalid or expired,
 * appropriate error responses guide users to re-authenticate.
 *
 * This operation is foundational for user account management and integrates
 * with other profile-related features such as profile updates and account
 * settings. It provides the baseline data that users can then modify through
 * the profile update endpoint.
 *
 * @param props.connection
 * @path /todoList/user/auth/user/profile
 * @accessor api.functional.todoList.user.auth.user.profile.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(connection: IConnection): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(),
          status: null,
        },
      );
}
export namespace at {
  export type Response = ITodoListUser.IProfile;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/auth/user/profile",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/auth/user/profile";
  export const random = (): ITodoListUser.IProfile =>
    typia.random<ITodoListUser.IProfile>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Update authenticated user's profile information in todo_list_users table.
 *
 * Update the profile information for the currently authenticated user. This
 * operation allows users to modify their account details stored in the
 * todo_list_users table, specifically their email address. Users have full
 * control over their own profile data and can update it at any time.
 *
 * The operation enforces strict ownership verification. Users can only update
 * their own profile - the system validates the JWT token, extracts the userId,
 * and ensures the update applies exclusively to the authenticated user's
 * record. This prevents unauthorized modification of other users' accounts and
 * maintains complete data isolation between users.
 *
 * When updating the email address, the system performs comprehensive validation
 * to ensure data integrity and business rule compliance. The new email must be
 * unique across all users - if another account already uses the provided email,
 * the update is rejected with a clear error message. The email format is
 * validated to ensure it follows standard email patterns. These validation
 * steps protect data quality and prevent conflicts.
 *
 * The system automatically updates the updated_at timestamp whenever a profile
 * modification occurs, maintaining accurate audit trails of account changes.
 * This timestamp tracking supports data management requirements and helps users
 * understand when their account was last modified.
 *
 * If the email address is successfully updated, all existing user sessions and
 * refresh tokens remain valid. The user can continue using the application
 * without re-authentication. However, the new email address becomes the login
 * credential for all future authentication attempts.
 *
 * Authentication is mandatory for this endpoint. Unauthenticated requests
 * receive HTTP 401 Unauthorized responses. The operation validates the JWT
 * access token, verifies it has not expired, and confirms the user account is
 * active before processing the update.
 *
 * Validation errors return HTTP 400 Bad Request with specific error messages
 * indicating what failed (invalid email format, email too long, email already
 * exists, etc.). This clear error feedback helps users correct their input and
 * successfully update their profile.
 *
 * The operation completes within 500 milliseconds under normal conditions,
 * providing quick feedback to users. Upon successful update, the complete
 * updated profile is returned, allowing the user interface to immediately
 * reflect the changes without requiring an additional fetch operation.
 *
 * @param props.connection
 * @param props.body Profile update data containing the new email address and
 *   any other modifiable user information
 * @path /todoList/user/auth/user/profile
 * @accessor api.functional.todoList.user.auth.user.profile.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Profile update data containing the new email address and any other
     * modifiable user information
     */
    body: ITodoListUser.IUpdate;
  };
  export type Body = ITodoListUser.IUpdate;
  export type Response = ITodoListUser.IProfile;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/auth/user/profile",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/auth/user/profile";
  export const random = (): ITodoListUser.IProfile =>
    typia.random<ITodoListUser.IProfile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
