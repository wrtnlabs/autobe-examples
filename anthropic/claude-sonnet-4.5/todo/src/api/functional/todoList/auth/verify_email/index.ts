import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAuth } from "../../../../structures/ITodoListAuth";

/**
 * Verify user email address with verification token.
 *
 * This operation completes the user registration process by verifying the email
 * address provided during account creation. When users register for a new
 * account, the system sends a verification email containing a unique,
 * time-limited token. This operation validates that token and activates the
 * user account.
 *
 * The verification process checks the provided token against stored
 * verification data, ensuring the token is valid, has not expired (24-hour
 * expiration as per authentication requirements), and has not been previously
 * used. The token is typically stored in a secure, hashed form similar to
 * password storage practices.
 *
 * Upon successful verification, the system updates the user account status in
 * the todo_list_users table to mark the email as verified. This typically
 * involves setting a verification timestamp or boolean flag that indicates the
 * account is fully activated. The user is then permitted to log in and access
 * the todo list application.
 *
 * If the verification token is expired, the system provides an appropriate
 * error message and may offer the option to request a new verification email.
 * Invalid tokens (malformed, already used, or non-existent) result in clear
 * error responses that guide users toward resolution.
 *
 * Security considerations include single-use token enforcement (tokens cannot
 * be reused after successful verification), time-based expiration (24 hours
 * from issuance), and secure token generation using cryptographically strong
 * random values. The operation prevents email enumeration by not revealing
 * whether an email exists in the system through error messages.
 *
 * This operation is essential for account security, ensuring that users have
 * access to the email addresses they register with. It prevents account
 * creation with invalid or unowned email addresses, which is critical for
 * password recovery and account security notifications.
 *
 * Related operations include user registration (which triggers verification
 * email sending) and resend verification email (for cases where the original
 * email was not received or the token expired).
 *
 * @param props.connection
 * @param props.body Email verification token received via email
 * @path /todoList/auth/verify-email
 * @accessor api.functional.todoList.auth.verify_email.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification token received via email */
    body: ITodoListAuth.IVerifyEmailRequest;
  };
  export type Body = ITodoListAuth.IVerifyEmailRequest;
  export type Response = ITodoListAuth.IVerifyEmailResponse;

  export const METADATA = {
    method: "POST",
    path: "/todoList/auth/verify-email",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/auth/verify-email";
  export const random = (): ITodoListAuth.IVerifyEmailResponse =>
    typia.random<ITodoListAuth.IVerifyEmailResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
