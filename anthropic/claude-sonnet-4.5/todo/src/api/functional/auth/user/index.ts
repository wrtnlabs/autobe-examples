import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../structures/ITodoListUser";
export * as password from "./password/index";

/**
 * Register new user account and issue authentication tokens for todo_list_users
 * table.
 *
 * Registers a new user account in the Todo list application and issues JWT
 * authentication tokens.
 *
 * This operation creates a new user account with the provided email and
 * password credentials. The system performs comprehensive validation including
 * email format verification, email uniqueness check, and password strength
 * validation (minimum 8 characters with letters and numbers). Upon successful
 * validation, the password is securely hashed using bcrypt with cost factor 12
 * before storage.
 *
 * The registration process follows these steps: validate email format and
 * uniqueness, validate password strength requirements, hash the password using
 * bcrypt, create the user account record in todo_list_users table, generate JWT
 * access token (30-minute expiration) and refresh token (30-day expiration),
 * store the refresh token hash in todo_list_refresh_tokens table, and return
 * the complete authentication response.
 *
 * Security measures include password hashing with bcrypt, JWT token generation
 * with HS256 signing, rate limiting (maximum 3 registration attempts per IP per
 * hour), and protection against common vulnerabilities. The operation returns
 * HTTP 409 if the email already exists, HTTP 400 for validation errors, and
 * HTTP 201 with authentication tokens on success.
 *
 * The response includes the user's profile information (id, email, created_at),
 * JWT access token for API authentication, and refresh token for session
 * renewal. After successful registration, users can immediately access all todo
 * management features without additional login.
 *
 * This operation relates to the todo_list_users table creation workflow and is
 * a prerequisite for all authenticated todo management operations.
 *
 * @param props.connection
 * @param props.body User registration credentials including email and password
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @accessor api.functional.auth.user.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** User registration credentials including email and password */
    body: ITodoListUser.ICreate;
  };
  export type Body = ITodoListUser.ICreate;
  export type Response = ITodoListUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): ITodoListUser.IAuthorized =>
    typia.random<ITodoListUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate user credentials and issue session tokens for todo_list_users
 * table.
 *
 * Authenticates existing user credentials and establishes an authenticated
 * session with JWT tokens.
 *
 * This operation validates user login credentials by verifying the email exists
 * in the todo_list_users table and comparing the provided password against the
 * stored bcrypt password hash. The authentication process implements several
 * security measures including constant-time password comparison to prevent
 * timing attacks, account activity verification (deleted_at must be null), and
 * comprehensive brute force protection.
 *
 * The login workflow executes these steps: validate that both email and
 * password are provided, lookup the user account by email address, verify the
 * account is active (not soft-deleted), validate the password using bcrypt
 * comparison against password_hash, check for account lockout due to failed
 * attempts, generate new JWT access token with 30-minute expiration, generate
 * new JWT refresh token with 30-day expiration, store the refresh token hash in
 * todo_list_refresh_tokens table, update the user's login activity timestamp,
 * and return the complete authentication response.
 *
 * Security implementations include bcrypt password verification with
 * constant-time comparison, JWT token generation using HS256 algorithm with
 * 256-bit secret key, brute force protection tracking failed login attempts
 * (locks account for 15 minutes after 5 consecutive failures), rate limiting on
 * login endpoint, comprehensive security logging of all authentication
 * attempts, and generic error messages that don't reveal whether email exists.
 *
 * The operation returns HTTP 401 for invalid credentials (without revealing
 * which field is incorrect for security), HTTP 429 when rate limit or account
 * lockout is triggered, HTTP 400 for missing required fields, and HTTP 200 with
 * authentication tokens on success. Error responses maintain security by using
 * the same message for non-existent email and wrong password scenarios.
 *
 * The response includes complete user profile information (id, email,
 * created_at, updated_at), JWT access token for authenticating API requests,
 * refresh token for obtaining new access tokens, and token expiration
 * information. Users can immediately access all todo management features after
 * successful login.
 *
 * This operation integrates with the session management system and is followed
 * by token refresh operations when access tokens expire.
 *
 * @param props.connection
 * @param props.body User login credentials with email and password
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @accessor api.functional.auth.user.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** User login credentials with email and password */
    body: ITodoListUser.ILogin;
  };
  export type Body = ITodoListUser.ILogin;
  export type Response = ITodoListUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): ITodoListUser.IAuthorized =>
    typia.random<ITodoListUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh expired access token using valid refresh token for session
 * continuation.
 *
 * Renews user session by generating a new access token from a valid refresh
 * token.
 *
 * This operation enables seamless session continuation when JWT access tokens
 * expire after their 30-minute lifetime. Users submit their refresh token to
 * obtain a new access token without re-authentication, maintaining
 * uninterrupted access to the application. The system validates the refresh
 * token against stored hashes in todo_list_refresh_tokens table and ensures all
 * security requirements are met.
 *
 * The refresh workflow executes these steps: validate that refresh token is
 * provided in request, lookup the refresh token hash in
 * todo_list_refresh_tokens table, verify token signature and integrity, check
 * token hasn't expired (expires_at is in the future), verify token hasn't been
 * revoked (revoked_at is null), confirm the associated user account exists and
 * is active (deleted_at is null in todo_list_users), generate new JWT access
 * token with fresh 30-minute expiration containing userId and role claims,
 * optionally implement token rotation by generating new refresh token and
 * invalidating the old one, update token usage tracking, and return the new
 * authentication tokens.
 *
 * Security implementations include refresh token validation against stored
 * hashes using secure comparison, expiration timestamp verification ensuring
 * tokens are used within 30-day validity period, revocation status checking to
 * prevent use of invalidated tokens, user account status verification, optional
 * token rotation where each refresh generates a new refresh token and
 * invalidates the old one (limiting exposure window), rate limiting to prevent
 * token refresh abuse, comprehensive logging of all refresh attempts for
 * security monitoring, and immediate token invalidation on security events.
 *
 * The operation returns HTTP 401 with error code TOKEN_EXPIRED when the refresh
 * token has expired (user must log in again), HTTP 401 with error code
 * TOKEN_REVOKED when token has been invalidated, HTTP 401 with error code
 * TOKEN_INVALID for malformed or tampered tokens, HTTP 404 when token not found
 * in database, HTTP 403 when associated user account is inactive or deleted,
 * and HTTP 200 with new tokens on success.
 *
 * The response includes new JWT access token with fresh expiration, optionally
 * new refresh token if rotation is enabled, token expiration timestamps, and
 * user identification information. This enables client applications to
 * automatically refresh tokens before expiration, providing seamless user
 * experience without interruption.
 *
 * This operation integrates with the session management system and is critical
 * for maintaining long-lived user sessions. It works in conjunction with login
 * operations and supports the authentication flow defined in the security
 * requirements. When refresh tokens expire after 30 days, users must perform a
 * new login operation.
 *
 * @param props.connection
 * @param props.body Refresh token for obtaining new access token
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @accessor api.functional.auth.user.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token for obtaining new access token */
    body: ITodoListUser.IRefresh;
  };
  export type Body = ITodoListUser.IRefresh;
  export type Response = ITodoListUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): ITodoListUser.IAuthorized =>
    typia.random<ITodoListUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
