{"operations":[{"specification":"Guest user registration endpoint that creates a new user account with email and password. This operation allows unauthenticated users to register for a new account, which is the first step in using the Todo list application. The system validates the email format and uniqueness, enforces password strength requirements (minimum 8 characters with letters and numbers), hashes the password securely using bcrypt, creates the user account, and automatically logs in the newly registered user by issuing JWT tokens. This operation references the todo_list_users table which stores email, password_hash, created_at, updated_at, and deleted_at fields.","authorizationType":"join","description":"Enables new users to create an account in the Todo list application by providing their email address and password. This is the primary onboarding endpoint for guest users to become authenticated users.\n\nThe registration process performs comprehensive validation before account creation. The email address must follow standard email format and be unique across all users - no duplicate email addresses are allowed. The password must meet minimum security requirements: at least 8 characters long, containing both letters and numbers. Weak or commonly used passwords are rejected to ensure account security.\n\nWhen validation succeeds, the system creates a new user account in the todo_list_users table. The password is securely hashed using bcrypt with a minimum cost factor of 10 before storage - plain text passwords are never stored. The system automatically generates a unique user ID, sets the created_at and updated_at timestamps, and ensures deleted_at is null for the new active account.\n\nUpon successful account creation, the system immediately authenticates the new user by generating JWT tokens. An access token (expires in 30 minutes) and a refresh token (expires in 30 days) are issued. The refresh token is securely stored in the todo_list_refresh_tokens table with its hashed value, expiration timestamp, and created_at timestamp. This automatic login provides a seamless onboarding experience - users can immediately begin creating todos without a separate login step.\n\nIf registration fails due to duplicate email, weak password, or invalid email format, the system returns clear error messages guiding users to correct the issue. All registration attempts (successful and failed) are logged for security monitoring.","summary":"Register a new guest user account and issue authentication tokens","parameters":[],"requestBody":{"description":"User registration credentials including email and password","typeName":"ITodoListUser.IRegister"},"responseBody":{"description":"Newly created user account information with JWT access and refresh tokens for immediate authentication","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Token refresh endpoint that issues new access tokens using valid refresh tokens. This operation allows users to obtain fresh access tokens without re-entering credentials when their access token expires. The system validates the refresh token by checking its signature, verifying it exists in the todo_list_refresh_tokens table, ensuring it hasn't expired (expires_at is in the future), confirming it hasn't been revoked (revoked_at is null), and checking the associated user account is active (deleted_at is null in todo_list_users). Upon successful validation, a new access token is generated with fresh 30-minute expiration. The system may optionally implement refresh token rotation by issuing a new refresh token and revoking the old one for enhanced security.","authorizationType":"refresh","description":"Enables users to obtain new access tokens using their valid refresh tokens without requiring re-authentication, supporting seamless session continuity.\n\nThe token refresh mechanism maintains user sessions beyond the short-lived access token expiration (30 minutes) without forcing frequent re-login. When a client's access token expires, it can request a new one by presenting a valid refresh token to this endpoint.\n\nThe validation process is comprehensive and security-focused. First, the system verifies the refresh token's JWT signature using the same secret key used for signing. If signature verification fails, the request is immediately rejected with HTTP 401 Unauthorized and error code TOKEN_INVALID - this prevents tampered or forged tokens from being accepted.\n\nNext, the system extracts the userId from the token payload and queries the todo_list_refresh_tokens table to find a matching token record. The provided token is hashed and compared against stored token_hash values for the user. If no matching token exists, the request fails with HTTP 401 and error code REFRESH_TOKEN_NOT_FOUND - this catches scenarios where tokens were never issued or have been deleted.\n\nThe system then validates the token hasn't expired by comparing the current timestamp against the expires_at field. Refresh tokens expire 30 days after issuance. If the token is expired, the request fails with HTTP 401 and error code REFRESH_TOKEN_EXPIRED, requiring the user to log in again to obtain a new refresh token.\n\nRevocation status is checked by examining the revoked_at field. If this field is non-null, the token has been explicitly revoked - typically when a user logs out, changes their password, or requests 'logout from all devices'. Revoked tokens cannot be used even if not yet expired, and the request fails with HTTP 401 and error code REFRESH_TOKEN_REVOKED.\n\nFinally, the system verifies the associated user account is still active by checking the deleted_at field in the todo_list_users table is null. If the account has been soft-deleted, the refresh token is invalid and the request fails.\n\nWhen all validations pass, the system generates a new access token with the same payload structure (userId, email, role) but with a fresh 30-minute expiration timestamp. The new access token is signed and returned to the client.\n\nFor enhanced security, the system may implement refresh token rotation: when a refresh token is used successfully, a new refresh token is issued and the old one is revoked. This is done by creating a new record in todo_list_refresh_tokens with a fresh token_hash and expires_at (30 days from now), setting created_at to current timestamp, and updating the old token's revoked_at to the current timestamp. If token rotation is enabled, the response includes both the new access token and the new refresh token.\n\nThis token refresh mechanism balances security and user experience - access tokens remain short-lived for security while refresh tokens enable long-lived sessions without constant re-authentication.","summary":"Refresh access token using valid refresh token","parameters":[],"requestBody":{"description":"Refresh token request containing the current valid refresh token","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"New JWT access token with fresh expiration and optionally a new refresh token if rotation is enabled","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"User registration operation for creating new authenticated user accounts. This operation allows guests to register for the Todo list application by providing their email address and password. Upon successful registration, the system creates a new user account, hashes the password securely using bcrypt, generates JWT access and refresh tokens, and returns the authenticated user information with tokens. This is a public endpoint that does not require authentication. The operation implements email uniqueness validation and password strength requirements as defined in the authentication security specifications. After successful registration, users can immediately begin using the application to manage their todos.","path":"/auth/user/join","method":"post","name":"join","authorizationType":"join","authorizationRole":null,"summary":"Register new user account and issue authentication tokens for todo_list_users table","description":"Registers a new user account in the Todo list application and issues JWT authentication tokens.\n\nThis operation creates a new user account with the provided email and password credentials. The system performs comprehensive validation including email format verification, email uniqueness check, and password strength validation (minimum 8 characters with letters and numbers). Upon successful validation, the password is securely hashed using bcrypt with cost factor 12 before storage.\n\nThe registration process follows these steps: validate email format and uniqueness, validate password strength requirements, hash the password using bcrypt, create the user account record in todo_list_users table, generate JWT access token (30-minute expiration) and refresh token (30-day expiration), store the refresh token hash in todo_list_refresh_tokens table, and return the complete authentication response.\n\nSecurity measures include password hashing with bcrypt, JWT token generation with HS256 signing, rate limiting (maximum 3 registration attempts per IP per hour), and protection against common vulnerabilities. The operation returns HTTP 409 if the email already exists, HTTP 400 for validation errors, and HTTP 201 with authentication tokens on success.\n\nThe response includes the user's profile information (id, email, created_at), JWT access token for API authentication, and refresh token for session renewal. After successful registration, users can immediately access all todo management features without additional login.\n\nThis operation relates to the todo_list_users table creation workflow and is a prerequisite for all authenticated todo management operations.","parameters":[],"requestBody":{"description":"User registration credentials including email and password","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"Authenticated user information with JWT access and refresh tokens","typeName":"ITodoListUser.IAuthorized"},"prerequisites":[]},{"specification":"User login operation for authenticating existing users and issuing session tokens. This operation validates user credentials (email and password) and generates JWT access and refresh tokens for authenticated sessions. It verifies the email exists in the todo_list_users table, validates the provided password against the stored bcrypt hash, and ensures the account is active (deleted_at is null). Upon successful authentication, the system generates new JWT tokens, stores the refresh token hash in todo_list_refresh_tokens table, updates the user's last login timestamp, and returns the authenticated user profile with tokens. This is a public endpoint that implements brute force protection through rate limiting (maximum 10 failed attempts per 15 minutes per email). The operation supports session management and enables users to access their personal todo lists.","path":"/auth/user/login","method":"post","name":"login","authorizationType":"login","authorizationRole":null,"summary":"Authenticate user credentials and issue session tokens for todo_list_users table","description":"Authenticates existing user credentials and establishes an authenticated session with JWT tokens.\n\nThis operation validates user login credentials by verifying the email exists in the todo_list_users table and comparing the provided password against the stored bcrypt password hash. The authentication process implements several security measures including constant-time password comparison to prevent timing attacks, account activity verification (deleted_at must be null), and comprehensive brute force protection.\n\nThe login workflow executes these steps: validate that both email and password are provided, lookup the user account by email address, verify the account is active (not soft-deleted), validate the password using bcrypt comparison against password_hash, check for account lockout due to failed attempts, generate new JWT access token with 30-minute expiration, generate new JWT refresh token with 30-day expiration, store the refresh token hash in todo_list_refresh_tokens table, update the user's login activity timestamp, and return the complete authentication response.\n\nSecurity implementations include bcrypt password verification with constant-time comparison, JWT token generation using HS256 algorithm with 256-bit secret key, brute force protection tracking failed login attempts (locks account for 15 minutes after 5 consecutive failures), rate limiting on login endpoint, comprehensive security logging of all authentication attempts, and generic error messages that don't reveal whether email exists.\n\nThe operation returns HTTP 401 for invalid credentials (without revealing which field is incorrect for security), HTTP 429 when rate limit or account lockout is triggered, HTTP 400 for missing required fields, and HTTP 200 with authentication tokens on success. Error responses maintain security by using the same message for non-existent email and wrong password scenarios.\n\nThe response includes complete user profile information (id, email, created_at, updated_at), JWT access token for authenticating API requests, refresh token for obtaining new access tokens, and token expiration information. Users can immediately access all todo management features after successful login.\n\nThis operation integrates with the session management system and is followed by token refresh operations when access tokens expire.","parameters":[],"requestBody":{"description":"User login credentials with email and password","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authenticated user session with JWT access and refresh tokens","typeName":"ITodoListUser.IAuthorized"},"prerequisites":[]},{"specification":"Token refresh operation for renewing expired access tokens using valid refresh tokens. This operation enables users to obtain new JWT access tokens without re-entering credentials when their access token expires (after 30 minutes). It validates the provided refresh token against the todo_list_refresh_tokens table, verifies the token hasn't expired or been revoked, confirms the associated user account is still active, and generates a new access token with fresh 30-minute expiration. The operation implements token rotation by optionally issuing a new refresh token and invalidating the old one for enhanced security. This is a public endpoint that requires a valid refresh token but not an access token, supporting seamless session continuation for authenticated users.","path":"/auth/user/refresh","method":"post","name":"refresh","authorizationType":"refresh","authorizationRole":null,"summary":"Refresh expired access token using valid refresh token for session continuation","description":"Renews user session by generating a new access token from a valid refresh token.\n\nThis operation enables seamless session continuation when JWT access tokens expire after their 30-minute lifetime. Users submit their refresh token to obtain a new access token without re-authentication, maintaining uninterrupted access to the application. The system validates the refresh token against stored hashes in todo_list_refresh_tokens table and ensures all security requirements are met.\n\nThe refresh workflow executes these steps: validate that refresh token is provided in request, lookup the refresh token hash in todo_list_refresh_tokens table, verify token signature and integrity, check token hasn't expired (expires_at is in the future), verify token hasn't been revoked (revoked_at is null), confirm the associated user account exists and is active (deleted_at is null in todo_list_users), generate new JWT access token with fresh 30-minute expiration containing userId and role claims, optionally implement token rotation by generating new refresh token and invalidating the old one, update token usage tracking, and return the new authentication tokens.\n\nSecurity implementations include refresh token validation against stored hashes using secure comparison, expiration timestamp verification ensuring tokens are used within 30-day validity period, revocation status checking to prevent use of invalidated tokens, user account status verification, optional token rotation where each refresh generates a new refresh token and invalidates the old one (limiting exposure window), rate limiting to prevent token refresh abuse, comprehensive logging of all refresh attempts for security monitoring, and immediate token invalidation on security events.\n\nThe operation returns HTTP 401 with error code TOKEN_EXPIRED when the refresh token has expired (user must log in again), HTTP 401 with error code TOKEN_REVOKED when token has been invalidated, HTTP 401 with error code TOKEN_INVALID for malformed or tampered tokens, HTTP 404 when token not found in database, HTTP 403 when associated user account is inactive or deleted, and HTTP 200 with new tokens on success.\n\nThe response includes new JWT access token with fresh expiration, optionally new refresh token if rotation is enabled, token expiration timestamps, and user identification information. This enables client applications to automatically refresh tokens before expiration, providing seamless user experience without interruption.\n\nThis operation integrates with the session management system and is critical for maintaining long-lived user sessions. It works in conjunction with login operations and supports the authentication flow defined in the security requirements. When refresh tokens expire after 30 days, users must perform a new login operation.","parameters":[],"requestBody":{"description":"Refresh token for obtaining new access token","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"New JWT access token and optionally new refresh token","typeName":"ITodoListUser.IAuthorized"},"prerequisites":[]},{"specification":"User password change operation for authenticated users to update their account password. This operation allows users to securely change their password by providing their current password for verification and a new password that meets security requirements. The system validates the current password against the stored bcrypt hash in todo_list_users table, ensures the new password meets minimum security standards (8+ characters with letters and numbers), verifies the new password is different from the current one, hashes the new password using bcrypt with cost factor 12, updates the password_hash field, invalidates all existing refresh tokens in todo_list_refresh_tokens table to force re-login on all devices, and sends a notification email to the user's registered email address. This is a protected endpoint requiring valid JWT authentication and the user can only change their own password.","path":"/auth/user/password","method":"put","name":"changePassword","authorizationType":null,"authorizationRole":"user","summary":"Change authenticated user password and invalidate all sessions for todo_list_users table","description":"Allows authenticated users to securely change their account password with comprehensive security measures.\n\nThis operation enables users to update their password while maintaining strict security controls. The system validates the current password before allowing changes, ensures the new password meets strength requirements, and implements security measures to protect the account including session invalidation across all devices. The password change workflow references the password_hash field in todo_list_users table and manages associated refresh tokens.\n\nThe password change workflow executes these steps: authenticate the user via JWT token validation, verify the provided current password matches the stored password_hash using bcrypt comparison, validate the new password meets security requirements (minimum 8 characters, contains letters and numbers, not commonly weak password), ensure new password differs from current password to prevent reuse, hash the new password using bcrypt with minimum cost factor 12, update the password_hash field in todo_list_users table, update the updated_at timestamp, invalidate all existing refresh tokens for this user by setting revoked_at timestamp in todo_list_refresh_tokens table, generate new JWT tokens for the current session, send notification email to the user's email address confirming the password change, and return success confirmation with new authentication tokens.\n\nSecurity implementations include current password verification using bcrypt constant-time comparison, new password strength validation enforcing minimum 8 characters with letters and numbers, prevention of password reuse by comparing new against current, secure bcrypt hashing with cost factor 12 for the new password, session invalidation across all devices by revoking all refresh tokens (forces re-login everywhere for security), rate limiting to prevent password change abuse, comprehensive logging of password change events for audit trail, notification email to alert user of password change for security awareness, and protection against concurrent password change attempts.\n\nThe operation returns HTTP 401 with error code PASSWORD_INCORRECT when current password verification fails, HTTP 400 with error code WEAK_PASSWORD when new password doesn't meet requirements, HTTP 400 with error code PASSWORD_REUSED when new password matches current password, HTTP 400 for missing required fields, and HTTP 200 with new authentication tokens on success.\n\nThe response includes success confirmation message, new JWT access token for immediate use, new refresh token to replace invalidated ones, and timestamp of the password change. All other active sessions (on other devices) are invalidated and require re-login, enhancing security when passwords are changed.\n\nThis operation is critical for account security management and integrates with the authentication security requirements. It ensures that password changes are a conscious, verified action by the account owner and prevents unauthorized access if the account was compromised. Users should use this operation whenever they suspect their password may have been exposed or as part of regular security hygiene.","parameters":[],"requestBody":{"description":"Current password verification and new password for account update","typeName":"ITodoListUser.IChangePassword"},"responseBody":{"description":"Password change confirmation with new authentication tokens","typeName":"ITodoListUser.IAuthorized"},"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must be created before the password can be changed"},{"endpoint":{"path":"/todoList/auth/login","method":"post"},"description":"User must be authenticated with valid credentials before changing their password"}]},{"specification":"This operation handles user registration for the Todo list application. It creates a new user account by accepting an email address and password, validating the input according to business rules, hashing the password securely using bcrypt, and persisting the user record to the todo_list_users table. The operation operates on the todo_list_users table from the Prisma schema and is the entry point for new users to access the todo management system.","path":"/todoList/auth/register","method":"post","summary":"Register a new user account in the todo_list_users table","description":"Register a new user account to enable access to the Todo list application. This operation creates a new record in the todo_list_users table with the provided email and password credentials.\n\nThe registration process validates that the email address follows standard email format, is unique across all existing users, and does not exceed 255 characters. The password must meet minimum security requirements: at least 8 characters in length, containing at least one uppercase letter, one lowercase letter, and one number. The system rejects commonly used weak passwords to ensure account security.\n\nUpon successful validation, the password is securely hashed using bcrypt with a minimum cost factor of 10 before storage. The system never stores passwords in plain text. The email address is normalized to lowercase to enable case-insensitive comparison and prevent duplicate accounts with different casing.\n\nThe created user account is immediately available for authentication. The system generates timestamps for created_at and updated_at fields, both set to the current time. The deleted_at field is set to null, indicating an active account. A unique UUID is assigned as the primary key identifier.\n\nThis operation is accessible to unauthenticated guest users, as it is the mechanism by which new users gain access to the system. No authentication token is required to call this endpoint. After successful registration, users should proceed to the login endpoint to obtain authentication tokens for accessing protected todo management features.","parameters":[],"requestBody":{"description":"User registration credentials including email address and password","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"Created user account information with unique identifier and timestamps, excluding password hash for security","typeName":"ITodoListUser"},"authorizationRoles":[],"name":"register","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation authenticates existing users by validating their email and password credentials against records in the todo_list_users table. Upon successful authentication, it generates JWT access and refresh tokens to establish a user session. The operation creates a new record in the todo_list_refresh_tokens table to support token-based session management and automatic token renewal.","path":"/todoList/auth/login","method":"post","summary":"Authenticate user credentials and issue JWT tokens for session management","description":"Authenticate a registered user and establish a session by issuing JWT access and refresh tokens. This operation validates user credentials against the todo_list_users table and creates session tokens for subsequent authenticated requests.\n\nThe authentication process begins by validating that both email and password fields are provided. The system looks up the user account by email address (case-insensitive comparison) in the todo_list_users table. If no account exists with the provided email, the operation returns a generic error message to prevent email enumeration attacks.\n\nFor existing accounts, the system verifies the provided password against the stored password_hash using bcrypt comparison. If the password does not match, the operation returns the same generic error message as for non-existent accounts: \"Invalid email or password.\" This security measure prevents attackers from determining whether an email address is registered in the system.\n\nThe system implements brute force protection by tracking failed login attempts per user account. After 5 consecutive failed attempts, the account is temporarily locked for 15 minutes. During this lockout period, all login attempts for that account return an HTTP 429 error with the message \"Too many login attempts. Please wait 15 minutes before trying again.\"\n\nUpon successful authentication, the system generates two JWT tokens: an access token with 30-minute expiration and a refresh token with 30-day expiration. The access token payload includes userId, email, role (set to \"user\"), and issued-at timestamp. The refresh token payload includes userId, tokenType (set to \"refresh\"), and issued-at timestamp. Both tokens are signed using HS256 algorithm with a secure secret key stored in environment configuration.\n\nThe refresh token is hashed and stored in the todo_list_refresh_tokens table with the user reference, expiration timestamp, and creation timestamp. The revoked_at field is set to null, indicating an active token. This enables server-side token validation and revocation capabilities for logout and password change operations.\n\nThe operation updates the user's last login timestamp and resets the failed login attempt counter. The system logs all login attempts (successful and failed) with timestamp, IP address, and user agent for security monitoring purposes.\n\nThis operation is accessible to unauthenticated guest users, as authentication is the purpose of the endpoint. No prior authentication token is required. The returned tokens must be included in subsequent requests to protected endpoints for authorization.","parameters":[],"requestBody":{"description":"User login credentials with email address and password for authentication","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authentication tokens including JWT access token and refresh token, along with user profile information","typeName":"ITodoListAuthToken"},"authorizationRoles":[],"name":"login","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must be registered before they can log in with their credentials"}]},{"specification":"This operation refreshes an expired JWT access token using a valid refresh token. It operates on the todo_list_refresh_tokens table from the Prisma schema to validate the provided refresh token and generate a new access token for continued user session. The operation enables users to maintain their authenticated session without re-entering credentials when their short-lived access token (30 minutes) expires while their refresh token (30 days) remains valid.","path":"/todoList/auth/token/refresh","method":"post","summary":"Refresh JWT access token using a valid refresh token","description":"This operation allows users to obtain a new JWT access token when their current access token has expired, using their valid refresh token. This is a critical part of the authentication flow that enables seamless user experience by avoiding frequent re-authentication.\n\nThe operation validates the provided refresh token against the todo_list_refresh_tokens table in the Prisma schema. It verifies that the token exists, has not been revoked (revoked_at is null), and has not expired (expires_at is after current time). The refresh token value is compared against the stored token_hash using secure hashing comparison.\n\nWhen validation succeeds, the system generates a new JWT access token with 30-minute expiration containing the user's userId, email, and role claims. Optionally, the system may implement refresh token rotation by issuing a new refresh token and invalidating the old one for enhanced security.\n\nSecurity considerations include rate limiting to prevent token refresh abuse, secure token transmission over HTTPS only, and proper token validation to prevent unauthorized access. The operation maintains referential integrity with the todo_list_users table through the todo_list_user_id foreign key relationship.\n\nThis operation is essential for maintaining user sessions as defined in the authentication requirements. It supports the 30-minute access token expiration policy while providing a 30-day refresh token validity period, balancing security with user convenience.\n\nRelated operations include user login (which issues the initial token pair) and logout (which revokes refresh tokens). This operation must be called before the refresh token expires to maintain continuous access.","parameters":[],"requestBody":{"description":"Refresh token credentials for obtaining a new access token","typeName":"ITodoListAuth.IRefreshTokenRequest"},"responseBody":{"description":"New JWT access token and optionally a new refresh token","typeName":"ITodoListAuth.ITokenResponse"},"authorizationRoles":[],"name":"refresh","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must exist before a refresh token can be issued and validated"},{"endpoint":{"path":"/todoList/auth/login","method":"post"},"description":"User must have logged in to obtain a valid refresh token that can be used for token refresh"}]},{"specification":"This operation verifies a user's email address using a unique verification token sent during registration. It operates on the todo_list_users table to activate user accounts after successful email verification. Email verification is a required step before users can log in and access todo management features, ensuring email addresses are valid and owned by the registering user.","path":"/todoList/auth/verify-email","method":"post","summary":"Verify user email address with verification token","description":"This operation completes the user registration process by verifying the email address provided during account creation. When users register for a new account, the system sends a verification email containing a unique, time-limited token. This operation validates that token and activates the user account.\n\nThe verification process checks the provided token against stored verification data, ensuring the token is valid, has not expired (24-hour expiration as per authentication requirements), and has not been previously used. The token is typically stored in a secure, hashed form similar to password storage practices.\n\nUpon successful verification, the system updates the user account status in the todo_list_users table to mark the email as verified. This typically involves setting a verification timestamp or boolean flag that indicates the account is fully activated. The user is then permitted to log in and access the todo list application.\n\nIf the verification token is expired, the system provides an appropriate error message and may offer the option to request a new verification email. Invalid tokens (malformed, already used, or non-existent) result in clear error responses that guide users toward resolution.\n\nSecurity considerations include single-use token enforcement (tokens cannot be reused after successful verification), time-based expiration (24 hours from issuance), and secure token generation using cryptographically strong random values. The operation prevents email enumeration by not revealing whether an email exists in the system through error messages.\n\nThis operation is essential for account security, ensuring that users have access to the email addresses they register with. It prevents account creation with invalid or unowned email addresses, which is critical for password recovery and account security notifications.\n\nRelated operations include user registration (which triggers verification email sending) and resend verification email (for cases where the original email was not received or the token expired).","parameters":[],"requestBody":{"description":"Email verification token received via email","typeName":"ITodoListAuth.IVerifyEmailRequest"},"responseBody":{"description":"Verification success confirmation","typeName":"ITodoListAuth.IVerifyEmailResponse"},"authorizationRoles":[],"name":"verifyEmail","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must be registered before email verification can be performed. The verification token is generated and sent during the registration process."}]},{"specification":"This operation initiates the password reset process for users who have forgotten their password. It operates on the todo_list_users table from the Prisma schema and generates a secure password reset token that is sent to the user's registered email address. The operation validates that the provided email exists in the system before sending the reset link.","path":"/todoList/auth/password-reset/request","method":"post","summary":"Request password reset for a user account","description":"Initiates the password reset workflow for users who have forgotten their password and need to regain access to their account. This operation provides a secure mechanism for users to reset their credentials without requiring authentication.\n\nWhen a user submits their email address, the system validates that an account exists with that email in the todo_list_users table. If the account exists and is active (deleted_at is null), the system generates a unique, time-limited password reset token and sends it to the user's registered email address. The reset link expires after 1 hour for security purposes.\n\nSecurity considerations include rate limiting to prevent abuse (maximum 3 reset requests per email per hour), protection against email enumeration attacks by returning the same success message regardless of whether the email exists, and secure token generation using cryptographically strong random values. The operation logs all password reset requests for security monitoring.\n\nThe password reset token is single-use and becomes invalid once used or after expiration. If a user requests multiple password resets, only the most recent token remains valid. This operation does not require authentication since users who need password reset cannot authenticate.\n\nRelated operations: This operation must be followed by POST /auth/password-reset/confirm to complete the password reset process. Users receive the reset token via email and use it in the confirmation endpoint.","parameters":[],"requestBody":{"description":"Email address of the user account requesting password reset","typeName":"ITodoListPasswordResetRequest"},"responseBody":{"description":"Confirmation message indicating the password reset email was sent","typeName":"ITodoListPasswordResetResponse"},"authorizationRoles":[],"name":"request","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must exist in the system before a password reset can be requested. The reset token is sent to the registered email address."}]},{"specification":"This operation completes the password reset process by validating the reset token and updating the user's password in the todo_list_users table. It accepts the password reset token sent to the user's email and the new password, validates both, updates the password_hash field, and invalidates all existing sessions by removing refresh tokens from the todo_list_refresh_tokens table.","path":"/todoList/auth/password-reset/confirm","method":"post","summary":"Confirm password reset and set new password for user account","description":"Completes the password reset workflow by validating the reset token and updating the user's password to a new secure value. This operation is the second step in the password reset process, following the initial reset request.\n\nWhen a user submits the password reset token (received via email) along with their new password, the system validates several security requirements. First, it verifies the reset token is valid, not expired (tokens expire after 1 hour), and has not been previously used. Second, it validates the new password meets security requirements: minimum 8 characters, containing at least one uppercase letter, one lowercase letter, and one number.\n\nIf validation succeeds, the system updates the password_hash field in the todo_list_users table using bcrypt with a minimum cost factor of 10. The system then invalidates all existing user sessions for security by deleting all associated records from the todo_list_refresh_tokens table, forcing the user to log in again with their new password on all devices.\n\nSecurity measures include: the reset token is immediately invalidated after use (even if password update fails), all previous reset tokens for that user are invalidated, and a confirmation email is sent to the user's registered email address notifying them of the password change. The operation logs all password reset completions for security auditing.\n\nError scenarios include expired tokens, invalid tokens, tokens that have already been used, and passwords that don't meet security requirements. Each error returns specific guidance to help users complete the process successfully.\n\nRelated operations: This operation must be preceded by POST /auth/password-reset/request which sends the reset token to the user's email. After successful password reset, users must use POST /auth/login with their new credentials.","parameters":[],"requestBody":{"description":"Password reset token and new password for account recovery","typeName":"ITodoListPasswordResetConfirm"},"responseBody":{"description":"Confirmation message indicating password was successfully reset","typeName":"ITodoListPasswordResetConfirmResponse"},"authorizationRoles":[],"name":"confirm","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/password-reset/request","method":"post"},"description":"Password reset request must be initiated first to generate a valid reset token that will be used for confirming the password reset"}]},{"specification":"This operation allows authenticated users to log out from their account by invalidating their current refresh token. The logout process terminates the user's active session and revokes the refresh token associated with their current authentication session. This operation operates on the todo_list_refresh_tokens table by setting the revoked_at timestamp for the user's active refresh token. After successful logout, the user must log in again to access protected resources. This is a critical security operation that ensures users can properly terminate their sessions and prevent unauthorized access if they are using a shared device or want to log out from a specific session.","path":"/todoList/user/auth/user/logout","method":"post","summary":"Logout authenticated user and revoke current session token","description":"Terminates the authenticated user's current session by revoking their refresh token. This operation updates the todo_list_refresh_tokens table to mark the current refresh token as revoked by setting the revoked_at timestamp to the current date and time. Once a refresh token is revoked, it can no longer be used to obtain new access tokens, effectively ending the session.\n\nThe logout process follows these steps: First, the system validates the user's JWT access token from the Authorization header to identify the authenticated user. Then, it locates the active refresh token associated with the current session. Finally, it sets the revoked_at field on that token record to permanently invalidate it.\n\nSecurity considerations: This operation requires a valid JWT access token in the Authorization header. The system will only revoke the refresh token associated with the current session, not all of the user's active sessions across different devices. If the user wants to log out from all devices simultaneously, they should use a separate \"logout from all devices\" operation (if implemented) or change their password, which invalidates all refresh tokens.\n\nAfter successful logout, the user will need to log in again with their email and password to obtain new access and refresh tokens. The client application should clear all stored tokens (both access and refresh tokens) from local storage or cookies upon receiving the logout success response.\n\nRelated operations: This operation should be used in conjunction with the login operation. Users typically log in to start a session and log out when they finish using the application or want to secure their account on a shared device. The logout operation complements the authentication workflow defined in the User Roles and Authentication requirements document.","parameters":[],"requestBody":null,"responseBody":{"description":"Confirmation that the user has been successfully logged out and their session has been terminated","typeName":"ITodoListLogout.IResponse"},"authorizationRoles":["user"],"name":"logout","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/login","method":"post"},"description":"User must be logged in with a valid session and refresh token before they can log out and revoke that token"}]},{"specification":"This operation enables authenticated users to change their account password. The password change process requires the user to provide their current password for verification before setting a new password. This security measure ensures that only the account owner can change the password, protecting against unauthorized password modifications. The operation updates the password_hash field in the todo_list_users table with the newly hashed password. Additionally, for security purposes, changing the password invalidates all existing refresh tokens for the user across all devices, forcing re-authentication on all sessions. This prevents any previously issued tokens from being used after a password change, which is critical if the user suspects their account may have been compromised.","path":"/todoList/user/auth/user/password","method":"put","summary":"Change authenticated user's password with current password verification","description":"Allows authenticated users to update their account password securely. This operation requires both the current password and the new password to complete the change. The current password verification step ensures that only the legitimate account owner can modify the password, preventing unauthorized changes if someone gains temporary access to an authenticated session.\n\nThe password change workflow operates on the todo_list_users table by updating the password_hash field with a new bcrypt hash of the provided password. The system uses bcrypt with a minimum cost factor of 12 to ensure strong cryptographic security. The new password must meet all security requirements defined in the authentication specifications: minimum 8 characters, containing at least one uppercase letter, one lowercase letter, one number, and one special character.\n\nSecurity measures implemented in this operation include: (1) Current password verification against the stored password_hash to confirm the user knows the existing password, (2) Validation that the new password meets all complexity requirements, (3) Ensuring the new password is different from the current password, (4) Automatic revocation of all existing refresh tokens in the todo_list_refresh_tokens table by setting their revoked_at timestamps, forcing the user to log in again on all devices.\n\nWhen all refresh tokens are revoked, the user will be immediately logged out from all active sessions across all devices. This is a critical security feature because if an account has been compromised, changing the password ensures that any attacker's session is immediately terminated. The user will need to log in again with their new password to obtain fresh access and refresh tokens.\n\nThe operation also updates the updated_at timestamp in the todo_list_users table to reflect when the password was last changed. Additionally, the system sends a confirmation email to the user's registered email address notifying them of the successful password change. This email notification serves as a security alert - if the user did not initiate the password change, they can take immediate action to secure their account.\n\nBusiness rules enforced: The current password must match the stored password_hash. The new password must meet all validation requirements (length, complexity). The new password must be different from the current password. All of these rules are defined in the Business Rules document under password management requirements.\n\nRelated operations: After successfully changing the password, the user should use the login operation to re-authenticate with their new credentials. This operation works in conjunction with the password reset flow for users who have forgotten their password.","parameters":[],"requestBody":{"description":"Password change request containing current password for verification and new password that meets security requirements","typeName":"ITodoListUser.IChangePassword"},"responseBody":{"description":"Confirmation of successful password change with notification that all sessions have been terminated","typeName":"ITodoListUser.IPasswordChangeResponse"},"authorizationRoles":["user"],"name":"changePassword","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must exist before the password can be changed"}]},{"specification":"This operation retrieves the authenticated user's profile information from the todo_list_users table. It provides users with access to their own account details including email address and account timestamps. This endpoint is essential for users to view and verify their account information. The operation enforces strict authentication - only the logged-in user can access their own profile data, ensuring complete privacy and data isolation between users. This aligns with the authentication security requirements and user data ownership principles defined in the business requirements.","path":"/todoList/user/auth/user/profile","method":"get","summary":"Retrieve authenticated user's profile information from todo_list_users table","description":"Retrieve the complete profile information for the currently authenticated user. This operation provides users with access to their own account details stored in the todo_list_users table, including their email address, account creation timestamp, and last modification timestamp.\n\nThe operation enforces strict authentication and authorization controls. Users can only access their own profile information - the system validates the JWT token and returns data exclusively for the authenticated user. This ensures complete data privacy and isolation between user accounts, maintaining the security-first approach of the application.\n\nThe profile data includes all non-sensitive user information. Sensitive fields such as password_hash are explicitly excluded from the response for security reasons. The email field is provided as the primary user identifier, along with temporal data (created_at, updated_at) that helps users understand their account history.\n\nThis endpoint supports the user account management workflows defined in the requirements, enabling users to view their current account state. It is typically accessed when users want to verify their account details, check their registration date, or confirm their current email address. The operation completes quickly (within 500 milliseconds) to provide instant feedback to users.\n\nAuthentication is mandatory for this endpoint. Unauthenticated requests receive HTTP 401 Unauthorized responses. The operation validates the JWT access token, verifies it has not expired, and extracts the userId to retrieve the corresponding user profile. If the token is invalid or expired, appropriate error responses guide users to re-authenticate.\n\nThis operation is foundational for user account management and integrates with other profile-related features such as profile updates and account settings. It provides the baseline data that users can then modify through the profile update endpoint.","parameters":[],"requestBody":null,"responseBody":{"description":"User profile information including email, account timestamps, and user identifier","typeName":"ITodoListUser.IProfile"},"authorizationRoles":["user"],"name":"at","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must exist before profile information can be retrieved"}]},{"specification":"This operation allows authenticated users to update their profile information in the todo_list_users table. Users can modify their email address through this endpoint. The operation enforces ownership verification - users can only update their own profile, never another user's data. This implements the user data modification requirements and maintains data integrity. The system validates all input data, ensures email uniqueness, and updates the updated_at timestamp automatically upon successful modification.","path":"/todoList/user/auth/user/profile","method":"put","summary":"Update authenticated user's profile information in todo_list_users table","description":"Update the profile information for the currently authenticated user. This operation allows users to modify their account details stored in the todo_list_users table, specifically their email address. Users have full control over their own profile data and can update it at any time.\n\nThe operation enforces strict ownership verification. Users can only update their own profile - the system validates the JWT token, extracts the userId, and ensures the update applies exclusively to the authenticated user's record. This prevents unauthorized modification of other users' accounts and maintains complete data isolation between users.\n\nWhen updating the email address, the system performs comprehensive validation to ensure data integrity and business rule compliance. The new email must be unique across all users - if another account already uses the provided email, the update is rejected with a clear error message. The email format is validated to ensure it follows standard email patterns. These validation steps protect data quality and prevent conflicts.\n\nThe system automatically updates the updated_at timestamp whenever a profile modification occurs, maintaining accurate audit trails of account changes. This timestamp tracking supports data management requirements and helps users understand when their account was last modified.\n\nIf the email address is successfully updated, all existing user sessions and refresh tokens remain valid. The user can continue using the application without re-authentication. However, the new email address becomes the login credential for all future authentication attempts.\n\nAuthentication is mandatory for this endpoint. Unauthenticated requests receive HTTP 401 Unauthorized responses. The operation validates the JWT access token, verifies it has not expired, and confirms the user account is active before processing the update.\n\nValidation errors return HTTP 400 Bad Request with specific error messages indicating what failed (invalid email format, email too long, email already exists, etc.). This clear error feedback helps users correct their input and successfully update their profile.\n\nThe operation completes within 500 milliseconds under normal conditions, providing quick feedback to users. Upon successful update, the complete updated profile is returned, allowing the user interface to immediately reflect the changes without requiring an additional fetch operation.","parameters":[],"requestBody":{"description":"Profile update data containing the new email address and any other modifiable user information","typeName":"ITodoListUser.IUpdate"},"responseBody":{"description":"Updated user profile information reflecting the modifications","typeName":"ITodoListUser.IProfile"},"authorizationRoles":["user"],"name":"update","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must be created before profile information can be updated"}]},{"specification":"This operation retrieves a list of all active refresh token sessions for the currently authenticated user. It enables users to view all devices and locations where they are currently logged in, supporting security features like session monitoring and device management. The operation queries the todo_list_refresh_tokens table filtered by the authenticated user's ID, returning only non-revoked tokens that have not yet expired. This provides transparency about active authentication sessions and supports the 'view active sessions' security requirement from the authentication specification.","path":"/todoList/user/auth/user/sessions","method":"get","summary":"Retrieve all active refresh token sessions for the authenticated user","description":"Retrieve a comprehensive list of all active refresh token sessions associated with the currently authenticated user's account. This operation provides users with visibility into where and when they are logged in across different devices and browsers, supporting security monitoring and session management capabilities.\n\nThe operation queries the todo_list_refresh_tokens table to find all refresh tokens belonging to the authenticated user where revoked_at is null and expires_at is in the future. Each session record includes the token identifier, creation timestamp, expiration timestamp, and any metadata that helps users identify the device or location of the session.\n\nThis functionality supports the security requirement (REQ-AUTH-027) that allows users to view their active sessions. By providing this visibility, users can identify unauthorized access attempts and take action by revoking suspicious sessions. The operation is essential for maintaining account security and user control over authentication state.\n\nThe response includes session details such as when each session was created, when it will expire, and potentially device/browser information if captured during token issuance. Sessions are returned in reverse chronological order (newest first) to help users quickly identify recent login activity.\n\nOnly the authenticated user can access their own sessions - the operation enforces strict authorization by filtering results based on the user ID extracted from the JWT access token. This ensures complete data isolation between users as required by the security and privacy specifications.","parameters":[],"requestBody":null,"responseBody":{"description":"List of active refresh token sessions with details including creation time and expiration","typeName":"IPageITodoListRefreshToken"},"authorizationRoles":["user"],"name":"index","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must be created before active sessions can be retrieved"},{"endpoint":{"path":"/todoList/auth/login","method":"post"},"description":"User must login to create refresh token sessions that can be retrieved"}]},{"specification":"This operation invalidates all active refresh token sessions for the currently authenticated user, effectively logging them out from all devices. It implements the 'logout from all devices' security feature (REQ-AUTH-029) by setting the revoked_at timestamp on all non-revoked refresh tokens belonging to the user. This is a critical security operation that users can invoke when they suspect unauthorized access or want to force re-authentication across all their sessions. The operation updates the todo_list_refresh_tokens table by setting revoked_at to the current timestamp for all tokens where todo_list_user_id matches the authenticated user and revoked_at is currently null.","path":"/todoList/user/auth/user/sessions","method":"delete","summary":"Revoke all active sessions and force logout from all devices","description":"Permanently revoke all active refresh token sessions for the currently authenticated user, forcing logout across all devices and browsers where the user is currently logged in. This operation provides a critical security feature allowing users to terminate all their sessions simultaneously, typically used when a user suspects their account may be compromised or when they want to ensure they are logged out everywhere.\n\nThe operation updates all records in the todo_list_refresh_tokens table where todo_list_user_id matches the authenticated user and revoked_at is null, setting revoked_at to the current timestamp. This makes all existing refresh tokens invalid, preventing them from being used to obtain new access tokens even if they have not yet reached their expiration time.\n\nThis functionality implements the security requirement (REQ-AUTH-029) that states 'WHEN a user requests logout from all devices, THE system SHALL invalidate all refresh tokens associated with that user.' By revoking all tokens, the system ensures that any device attempting to use an old refresh token will be denied and required to perform a fresh login with email and password credentials.\n\nThe operation is particularly important for security scenarios such as password changes (where all sessions should be invalidated), suspected unauthorized access, or when a user loses a device. After this operation completes, the user will need to log in again on all devices to establish new authenticated sessions.\n\nThe operation affects only the authenticated user's sessions and cannot impact other users' tokens, maintaining strict data isolation. The operation returns a confirmation of how many sessions were revoked, providing transparency about the action taken.","parameters":[],"requestBody":null,"responseBody":{"description":"Confirmation of session revocation including count of sessions terminated","typeName":"ITodoListSessionRevocationResult"},"authorizationRoles":["user"],"name":"erase","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must exist before sessions can be revoked. Registration creates the user account that can have active refresh token sessions."},{"endpoint":{"path":"/todoList/auth/login","method":"post"},"description":"Active refresh token sessions must exist before they can be revoked. Login creates refresh tokens in the todo_list_refresh_tokens table that this operation will revoke."}]},{"specification":"This operation allows authenticated users to permanently delete their own account from the Todo list application. It operates on the todo_list_users table from the Prisma schema. When a user deletes their account, all associated data including todos and refresh tokens are also removed through cascade deletion as defined in the database relationships. This operation requires the user to be authenticated and can only delete the authenticated user's own account - users cannot delete other users' accounts. The deletion is implemented as a soft delete by setting the deleted_at timestamp, supporting the account deletion grace period as specified in the data management requirements. This aligns with the user's right to data deletion and supports GDPR/CCPA compliance requirements for data subject rights.","path":"/todoList/user/auth/user/account","method":"delete","summary":"Delete authenticated user's account from the todo_list_users table","description":"Permanently delete the authenticated user's account from the Todo list application. This operation performs a soft delete by setting the deleted_at timestamp on the user's record in the todo_list_users table, allowing for a grace period before permanent data removal as specified in the data management requirements.\n\nWhen a user account is deleted, the system marks the account for deletion by populating the deleted_at field with the current timestamp. This soft delete approach supports the 7-day grace period mentioned in the requirements where users can potentially cancel account deletion. After the grace period, the account and all associated data (todos, refresh tokens) are permanently removed from the system.\n\nSecurity considerations: This operation requires valid JWT authentication. The user can only delete their own account - the system verifies that the authenticated user's ID matches the account being deleted. All active sessions and refresh tokens for the user are immediately invalidated when the account is deleted, preventing further access. The operation triggers cascade deletion of related data as defined in the Prisma schema relationships, ensuring todos and refresh tokens associated with the user are also marked for deletion.\n\nRelationship to database entities: This operation directly modifies the todo_list_users table by setting the deleted_at timestamp. Through cascade relationships defined in the schema, it also affects todo_list_todos and todo_list_refresh_tokens tables, marking all user-owned todos and active refresh tokens for deletion.\n\nValidation rules: The user must be authenticated with a valid JWT token. The token must not be expired or revoked. The account must not already be deleted (deleted_at must be null).\n\nExpected behavior: Upon successful deletion, all user sessions are terminated, refresh tokens are revoked, and the user is logged out. The API returns a success confirmation without exposing internal deletion details. If the account is already deleted or the user is not authenticated, appropriate error responses are returned as specified in the error handling documentation.","parameters":[],"requestBody":null,"responseBody":{"description":"Confirmation message indicating successful account deletion","typeName":"ITodoListAccountDeletion.IResponse"},"authorizationRoles":["user"],"name":"erase","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/auth/register","method":"post"},"description":"User account must exist in the todo_list_users table before it can be deleted. Registration creates the user account record that this operation marks for deletion."}]},{"specification":"This operation retrieves a filtered and paginated list of todo items from the todo_list_todos table for the authenticated user. It supports advanced search capabilities including filtering by completion status, searching todo titles and descriptions, sorting by various fields, and pagination. This is the primary operation for viewing and managing the user's todo list, providing comprehensive query capabilities while maintaining strict data isolation - users can only retrieve their own todos. The operation returns todo summaries optimized for list display, supporting efficient browsing of large todo collections.","path":"/todoList/user/todos","method":"patch","summary":"Search and retrieve filtered, paginated list of user's todos from todo_list_todos table","description":"Retrieve a filtered and paginated list of todo items belonging to the authenticated user. This operation provides advanced search and filtering capabilities for the user's personal todo list, operating on the todo_list_todos table with strict user isolation.\n\nThe operation supports comprehensive filtering and search functionality to help users find specific todos or view subsets of their task list. Users can filter by completion status to view only incomplete or completed tasks, search within todo titles and descriptions using text matching, and sort results by various fields including creation date, update date, title, or completion status. Pagination enables efficient handling of large todo lists, returning results in manageable pages.\n\nSecurity considerations include strict enforcement of data isolation - the system automatically filters todos to include only those where todo_list_user_id matches the authenticated user's ID from the JWT token. Users cannot access or search todos belonging to other users under any circumstances. Rate limiting prevents abuse of search operations, and all query parameters are validated to prevent injection attacks.\n\nThis operation integrates with the todo_list_todos table as defined in the Prisma schema, utilizing indexes on todo_list_user_id, created_at, completed, and deleted_at fields for optimal query performance. The operation excludes soft-deleted todos by filtering where deleted_at is null, ensuring users only see their active todo items.\n\nThe response includes todo summary information optimized for list displays: id, title, description, completion status, creation timestamp, and last update timestamp. Each response also includes pagination metadata showing total count, current page, page size, and total pages to support client-side pagination controls.\n\nValidation rules ensure search parameters are within acceptable ranges: page numbers must be positive integers, page size is limited to prevent excessive data retrieval (typically 50-100 items per page), sort fields must be valid todo properties, and search text length is constrained to prevent performance issues. The system provides clear error messages when validation fails.\n\nExpected behavior: Successful requests return a paginated list of todos matching the search criteria, sorted according to the specified order (defaulting to newest first by created_at). Empty result sets return successfully with an empty data array and pagination metadata. Invalid search parameters return validation errors with specific guidance on correcting the request.","parameters":[],"requestBody":{"description":"Search criteria including filters, pagination, and sorting options for todo list retrieval","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of todo items matching search criteria with pagination metadata","typeName":"IPageITodoListTodo.ISummary"},"authorizationRoles":["user"],"name":"index","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"At least one todo item must be created before the user can search and retrieve their todo list"}]},{"specification":"This operation retrieves detailed information for a specific todo item belonging to the authenticated user. It operates on the todo_list_todos table from the Prisma schema and returns the complete todo object including title, description, completion status, and timestamps. The operation is used when users need to view or access the details of a particular todo they previously created. This is a fundamental read operation that supports viewing individual todo items by their unique identifier.","path":"/todoList/user/todos/{todoId}","method":"get","summary":"Retrieve detailed information for a specific todo item","description":"Retrieve the complete details of a single todo item by its unique identifier. This operation returns all properties of the specified todo including the title, optional description, completion status, creation timestamp, and last modification timestamp.\n\nThe operation enforces strict data isolation to ensure users can only access their own todo items. When a user requests a todo by ID, the system verifies that the authenticated user is the owner of the requested todo. If the user attempts to access a todo owned by another user, the request is denied with a 403 Forbidden error.\n\nThis endpoint is commonly used after viewing the todo list when a user wants to see full details of a specific task, or when the user interface needs to display detailed todo information for editing or review purposes. The operation is designed to respond quickly, typically within 300 milliseconds as per performance requirements.\n\nSecurity considerations include verifying the JWT authentication token before processing the request and ensuring the todo belongs to the authenticated user. The operation will return appropriate error responses if the todo does not exist (404 Not Found) or if the user lacks permission to access it (403 Forbidden).\n\nThe response includes all todo fields as defined in the todo_list_todos table: unique identifier, title (1-200 characters), optional description (up to 2000 characters), completion status (boolean), creation timestamp, and last updated timestamp. The operation supports the core user workflow of reviewing task details and provides the foundation for subsequent edit or status update operations.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete todo item with all properties including title, description, status, and timestamps","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"at","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"Todo item must be created before it can be retrieved by its ID"}]},{"specification":"This operation creates a new todo item for the authenticated user in the todo_list_todos table. It accepts a title (required, 1-200 characters) and optional description (up to 2000 characters) from the user. The system automatically assigns the authenticated user as the owner, sets the completion status to false (incomplete), generates a unique UUID identifier, and records creation and update timestamps. This is the primary entry point for users to add new tasks to their personal todo list.","path":"/todoList/user/todos","method":"post","summary":"Create a new todo item for the authenticated user","description":"Create a new todo item and add it to the authenticated user's personal todo list. This operation is the primary method for users to capture and record new tasks they need to complete.\n\nThe operation accepts a todo title (required) and an optional description in the request body. The title must be between 1 and 200 characters and contain at least one non-whitespace character as per business validation rules defined in the requirements. The description is optional but if provided must not exceed 2000 characters.\n\nWhen a todo is successfully created, the system automatically performs several operations: generates a unique UUID identifier for the todo, assigns the currently authenticated user (extracted from the JWT token) as the owner by setting the todo_list_user_id field, sets the completion status to false (incomplete) by default, and records both the creation timestamp and initial update timestamp with the current date and time.\n\nThe operation enforces strict ownership and data isolation. Each todo is exclusively associated with the user who created it, and the todo_list_user_id field in the todo_list_todos table maintains this relationship through a foreign key reference to todo_list_users.id. The relationship is configured with CASCADE delete, meaning if a user account is deleted, all their todos are automatically removed to maintain referential integrity.\n\nValidation occurs before todo creation. If the title is empty, contains only whitespace, or exceeds 200 characters, the system rejects the request with a 400 Bad Request error and returns a clear validation error message. Similarly, if the description exceeds 2000 characters, the request is rejected with appropriate error feedback.\n\nSecurity measures include requiring valid JWT authentication before processing the request (users must be logged in), extracting the user ID from the validated JWT token payload to ensure correct ownership assignment, and preventing unauthenticated guests from creating todos (returns 401 Unauthorized).\n\nPerformance expectations require the operation to complete within 500 milliseconds from request receipt to response delivery as defined in the performance requirements document. The system provides immediate feedback by returning the complete newly created todo object including the system-generated ID and timestamps.\n\nThis operation is fundamental to the user workflow. After successful registration or login, creating the first todo is typically the user's initial interaction with the core functionality. The operation is designed to be fast and simple, allowing users to quickly capture tasks as they arise throughout their day without friction or complexity.","parameters":[],"requestBody":{"description":"Todo creation data including required title and optional description","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The newly created todo item with system-generated ID, timestamps, and all properties","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"create","authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing todo item with new information provided by the authenticated user. It operates on the todo_list_todos table from the Prisma schema, allowing users to modify the title, description, and completion status of their personal todo items. The operation enforces strict ownership verification to ensure users can only update their own todos, maintaining data isolation between user accounts. This is a core todo management operation that enables users to correct mistakes, add details, or update task information as their needs change throughout the lifecycle of a todo item.","path":"/todoList/user/todos/{todoId}","method":"put","summary":"Update an existing todo item with new title, description, or completion status","description":"Update an existing todo item in the user's personal task list. This operation allows authenticated users to modify the title, description, and completion status of their own todo items. The operation enforces strict ownership verification - users can only update todos they created, ensuring complete data isolation between different user accounts.\n\nThe update process validates all input data according to business rules defined in the requirements. The title must be between 1 and 200 characters and contain at least one non-whitespace character. The description, when provided, must not exceed 2000 characters. The completion status must be a valid boolean value (true for completed, false for incomplete).\n\nWhen a todo is successfully updated, the system automatically updates the updated_at timestamp to record when the modification occurred. The original creation timestamp (created_at) remains unchanged, preserving the historical record of when the todo was first created. This operation supports partial updates - only the fields included in the request body will be modified, while other fields retain their existing values.\n\nThe operation returns the complete updated todo item upon success, including all current field values and system-generated timestamps. If the specified todo does not exist or belongs to another user, the operation returns an appropriate error response. If the provided data fails validation (empty title, title too long, description too long), the operation rejects the request and returns detailed validation error information.\n\nThis update operation is essential for the daily todo management workflow, enabling users to refine task details, correct typos, add context through descriptions, and manage their tasks effectively throughout their lifecycle. The operation maintains data integrity by preventing cross-user data access and enforcing all business validation rules defined in the requirements documentation.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated todo information including title, description, and completion status","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"Complete updated todo item with all current values and timestamps","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"update","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"Todo item must be created before it can be updated"}]},{"specification":"This operation permanently deletes a todo item from the user's personal task list. It operates on the todo_list_todos table from the Prisma schema, implementing soft delete functionality by setting the deleted_at timestamp rather than physically removing the record from the database. The operation enforces strict ownership verification to ensure users can only delete their own todos, maintaining complete data isolation between user accounts. This is a core todo management operation that allows users to remove completed tasks or eliminate tasks that are no longer relevant.","path":"/todoList/user/todos/{todoId}","method":"delete","summary":"Delete a todo item from the user's task list","description":"Delete a todo item from the authenticated user's personal task list. This operation allows users to remove todos they no longer need, whether completed tasks they want to clear from their list or tasks that have become obsolete or irrelevant. The operation implements soft delete functionality by setting the deleted_at timestamp on the todo record, marking it as deleted while preserving the data in the database for referential integrity and potential recovery processes.\n\nThe deletion process enforces strict ownership verification - users can only delete todos they created. The system validates that the specified todo exists and belongs to the authenticated user before proceeding with deletion. If the todo does not exist or belongs to another user, the operation returns an appropriate error response denying the deletion request.\n\nAs per the Prisma schema, this table includes a deleted_at field, indicating soft delete implementation. When a todo is deleted, the system sets the deleted_at timestamp to the current date and time, marking the todo as deleted. The todo is then excluded from normal query results and user views, effectively removing it from the user's active todo list. However, the data remains in the database to support data lifecycle management and maintain referential integrity.\n\nThe operation returns a success confirmation when the deletion completes successfully. Deleted todos are immediately removed from the user's todo list view and cannot be accessed through normal todo retrieval operations. Users should be aware that deletion is permanent from their perspective - once deleted, todos cannot be easily recovered through the user interface (though the data is retained in the database with the deleted_at timestamp).\n\nThis delete operation is essential for maintaining a clean, manageable todo list. It enables users to remove completed tasks to reduce clutter, eliminate outdated or cancelled tasks, and keep their task list focused on current, actionable items. The soft delete approach supports data management requirements while providing a clean user experience where deleted items disappear from view immediately.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"Todo item must be created before it can be deleted. The todoId in the deletion path must reference an existing todo created by the authenticated user."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users who can only access the registration and login pages. They cannot create or manage todos until they register and authenticate.","kind":"guest"},{"name":"user","description":"Authenticated standard users who can create, view, edit, complete, and delete their own todo items. Each user has access only to their personal todo list and cannot see or modify other users' todos.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListRefreshToken":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListRefreshToken"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.IRegister":{"type":"object","properties":{"email":{"type":"string","format":"email","maxLength":255,"description":"User's email address for account creation.\n\nMust be unique across all users. Must follow standard email format. Will be normalized to lowercase for storage and comparison. This becomes the primary login credential for the account."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"User's password for account security.\n\nMust be at least 8 characters long. Must contain at least one uppercase letter, one lowercase letter, one number, and one special character. The password will be securely hashed using bcrypt before storage - never send hashed passwords from the client."}},"required":["email","password"],"description":"Guest user registration request for creating new authenticated accounts.\n\nContains the credentials needed for a guest user to register for a new account in the Todo list application. This is the entry point for new users to gain access to the system. The email must be unique and the password must meet security requirements.\n\nAfter successful registration, the user account is created and the user is automatically authenticated with JWT tokens issued immediately.","x-autobe-prisma-schema":"todo_list_users"},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user.\n\nThe user's ID that can be used to reference the authenticated user in subsequent requests. This ID is included in the JWT token payload and identifies which user account the tokens belong to."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as login, registration, or token refresh. It includes the user's ID and complete token information needed to establish and maintain an authenticated session.\n\nThe response provides everything needed for the client to store authentication state and begin making authenticated requests to protected endpoints."},"ITodoListUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token for obtaining new access token.\n\nThe refresh token previously issued during login or registration. Must be a valid, non-expired, non-revoked token from the todo_list_refresh_tokens table. Used to obtain a new access token without re-authentication."}},"required":["refresh_token"],"description":"Token refresh request for renewing access tokens.\n\nContains the refresh token needed to obtain a new access token when the current one expires. The system validates the refresh token against stored records, checks expiration and revocation status, and issues a new access token if valid.\n\nThis enables seamless session continuation without requiring users to re-enter their credentials every 30 minutes."},"ITodoListUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","maxLength":255,"description":"User's email address for account creation.\n\nMust be unique across all users. Must follow standard email format. Will be normalized to lowercase for storage and comparison. This becomes the primary login credential for the account."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"User's password for account security.\n\nMust be at least 8 characters long. Must contain at least one uppercase letter, one lowercase letter, one number, and one special character. The password will be securely hashed using bcrypt before storage - never send hashed passwords from the client."}},"required":["email","password"],"description":"User registration request data for creating new accounts.\n\nContains the minimal information needed to create a new user account: email address and password. The system will validate email uniqueness and password strength before creating the account. Upon successful registration, the password is hashed using bcrypt with cost factor 12 and stored securely.\n\nSecurity note: This is a request DTO, so it contains the plain text password. The password is only transmitted over HTTPS and is immediately hashed upon receipt by the server. The password_hash is never sent by clients.","x-autobe-prisma-schema":"todo_list_users"},"ITodoListUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for authentication.\n\nThe email address registered with the account. Case-insensitive for login purposes. Must match an existing user account in the system."},"password":{"type":"string","description":"User's password for authentication.\n\nThe plain text password that will be verified against the stored bcrypt hash. Transmitted only over HTTPS for security. The system uses constant-time comparison to prevent timing attacks."}},"required":["email","password"],"description":"User login credentials for authentication.\n\nContains the email and password needed to authenticate an existing user. The system validates these credentials against stored user records, verifying the password hash using bcrypt comparison. Upon successful authentication, JWT access and refresh tokens are issued.\n\nSecurity measures include brute force protection (account locked after 5 failed attempts for 15 minutes), rate limiting, and generic error messages that don't reveal whether the email exists in the system."},"ITodoListUser.IChangePassword":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification.\n\nThe user's existing password that will be verified before allowing the password change. This security measure ensures only the account owner can change the password. Must match the stored password hash."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password for the account.\n\nMust meet security requirements: minimum 8 characters, containing letters and numbers. Must be different from the current password. Will be hashed using bcrypt before storage."}},"required":["current_password","new_password"],"description":"Password change request for authenticated users.\n\nContains the current password for verification and the new password to set. The system validates the current password, ensures the new password meets security requirements and differs from the current one, then updates the password hash and invalidates all refresh tokens for security.\n\nAfter password change, all sessions are terminated and the user must log in again on all devices."},"ITodoListUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the user account. This UUID is system-generated upon account creation and serves as the primary reference for the user across all tables in the system. The ID is immutable and used to establish relationships with todos and refresh tokens."},"email":{"type":"string","format":"email","maxLength":255,"description":"User's email address for authentication and identification.\n\nMust be unique across all users. Used as the primary login credential. Normalized to lowercase for case-insensitive comparison. Maximum 255 characters as per validation requirements. This field serves as both the user identifier and communication channel for password resets and account notifications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nImmutable after creation. Used for account age tracking and audit purposes. This timestamp is automatically set by the system when the user completes registration and is never modified thereafter."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last modification to the user account.\n\nUpdated automatically whenever email or password is changed. Used for tracking account activity and changes. This field reflects the most recent time any user profile information was modified."}},"required":["id","email","created_at","updated_at"],"description":"User account entity representing authenticated users in the Todo list application.\n\nRepresents authenticated users who can create and manage their personal todo items. Each user account stores authentication credentials and profile information. Users are the foundation of the application - they must register and authenticate before accessing any todo management features.\n\nThis type corresponds to the todo_list_users table in the Prisma schema. Security note: The password_hash and deleted_at fields are intentionally excluded from this response type as they are internal system fields that should never be exposed to clients.","x-autobe-prisma-schema":"todo_list_users"},"ITodoListUser.IPasswordChangeResponse":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message for password change.\n\nIndicates that the password was successfully changed and all sessions were terminated. Informs the user they need to log in again with their new credentials."}},"required":["message"],"description":"Password change confirmation response.\n\nReturned after successful password change to confirm the operation completed. Indicates that the password was updated, all refresh tokens were revoked, and the user needs to re-authenticate on all devices."},"ITodoListUser.IProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user account.\n\nThe user's primary key that uniquely identifies their account. This ID is used throughout the system to reference the user and establish ownership of todos and sessions."},"email":{"type":"string","format":"email","description":"User's current email address.\n\nThe email address associated with the account. Used for login and account-related communications. Can be updated through the profile update endpoint."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp.\n\nWhen the user account was originally created. This timestamp is immutable and provides a record of how long the account has existed."},"updated_at":{"type":"string","format":"date-time","description":"Last profile modification timestamp.\n\nWhen the user account was last modified. Updated whenever the email or password is changed. Helps users understand when their account information was last updated."}},"required":["id","email","created_at","updated_at"],"description":"User profile information for authenticated users.\n\nContains the user's public profile data including their ID, email, and account timestamps. This represents the user's account information without sensitive fields like password hash. Used for displaying user profile details and account information.\n\nSecurity note: Excludes password_hash and deleted_at fields which are internal system fields.","x-autobe-prisma-schema":"todo_list_users"},"ITodoListUser.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","maxLength":255,"description":"Updated email address for the account.\n\nMust be unique across all users. Must follow standard email format. If provided, this becomes the new login credential. The system validates uniqueness before applying the update."}},"required":[],"description":"Profile update request for modifying user information.\n\nContains the fields that can be updated on a user profile. Currently limited to email address updates. All fields are optional - only provided fields will be updated. The system validates email uniqueness and format before applying changes.\n\nThe updated_at timestamp is automatically set when any profile changes are saved.","x-autobe-prisma-schema":"todo_list_users"},"ITodoListAuthToken":{"type":"object","properties":{"access_token":{"type":"string","description":"JWT access token for API authentication.\n\nShort-lived token (30-minute expiration) containing user ID, email, and role claims. Used to authenticate requests to protected endpoints by including in Authorization header."},"refresh_token":{"type":"string","description":"JWT refresh token for session renewal.\n\nLong-lived token (30-day expiration) used to obtain new access tokens. Stored securely and used with the token refresh endpoint when access tokens expire."},"expires_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nWhen the access token will expire. Set to 30 minutes from issuance. Clients should refresh before this time to maintain uninterrupted access."}},"required":["access_token","refresh_token","expires_at"],"description":"Authentication token response for login operations.\n\nContains the complete token set needed for authenticated sessions. Returned after successful login operations to provide the client with access and refresh tokens for API authentication and session management."},"ITodoListAuth.IRefreshTokenRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token for renewal.\n\nThe refresh token to validate and use for obtaining a new access token. Must be a valid, non-expired, non-revoked token from the system."}},"required":["refresh_token"],"description":"Token refresh request for obtaining new access tokens.\n\nContains the refresh token that will be validated against stored tokens to issue a new access token. The system checks the token's signature, expiration, and revocation status before generating new credentials."},"ITodoListAuth.ITokenResponse":{"type":"object","properties":{"access_token":{"type":"string","description":"New JWT access token.\n\nFreshly generated access token with 30-minute expiration. Contains the same user claims as the original but with updated timestamps."},"refresh_token":{"type":"string","description":"New or existing refresh token.\n\nIf token rotation is enabled, this is a new refresh token. Otherwise, the same refresh token that was submitted. Valid for 30 days from issuance."},"expires_at":{"type":"string","format":"date-time","description":"New access token expiration.\n\nWhen the newly issued access token will expire. Set to 30 minutes from current time."}},"required":["access_token","refresh_token","expires_at"],"description":"Token refresh response with new credentials.\n\nReturned after successful refresh token validation. Contains a new access token for continued API access and optionally a new refresh token if rotation is enabled."},"ITodoListAuth.IVerifyEmailRequest":{"type":"object","properties":{"token":{"type":"string","description":"Email verification token.\n\nUnique token sent to the user's email address during registration. Used to verify ownership of the email address. Single-use token that expires after 24 hours."}},"required":["token"],"description":"Email verification request containing verification token.\n\nContains the token needed to verify a user's email address. The token is validated against stored verification data to activate the user account."},"ITodoListAuth.IVerifyEmailResponse":{"type":"object","properties":{"message":{"type":"string","description":"Verification result message.\n\nConfirms successful email verification or provides error details if verification failed."}},"required":["message"],"description":"Email verification confirmation response.\n\nReturned after email verification attempt to confirm success or provide error information."},"ITodoListPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for password reset.\n\nThe email address of the account that needs password reset. A reset link will be sent to this address if it matches an active account."}},"required":["email"],"description":"Password reset request containing user email.\n\nInitiates the password reset process by sending a reset token to the provided email address. The system validates the email exists before sending the reset link."},"ITodoListPasswordResetResponse":{"type":"object","properties":{"message":{"type":"string","description":"Password reset request confirmation.\n\nGeneric success message indicating the reset email was sent. Returns the same message regardless of whether the email exists to prevent email enumeration."}},"required":["message"],"description":"Password reset request confirmation.\n\nReturned after password reset request to confirm the reset email was sent (or would be sent if the email exists). Generic response for security."},"ITodoListPasswordResetConfirm":{"type":"object","properties":{"token":{"type":"string","description":"Password reset token.\n\nUnique token received via email. Used to verify the reset request is legitimate. Single-use token that expires after 1 hour."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password for the account.\n\nMust meet security requirements: minimum 8 characters with letters and numbers. Will replace the existing password after token validation."}},"required":["token","new_password"],"description":"Password reset confirmation with token and new password.\n\nCompletes the password reset process by validating the reset token and updating the password. All existing sessions are invalidated for security."},"ITodoListPasswordResetConfirmResponse":{"type":"object","properties":{"message":{"type":"string","description":"Password reset success confirmation.\n\nConfirms the password was successfully reset and sessions were terminated."}},"required":["message"],"description":"Password reset completion confirmation.\n\nReturned after successful password reset to confirm the operation and inform the user to log in with new credentials."},"ITodoListLogout.IResponse":{"type":"object","properties":{"message":{"type":"string","description":"Logout confirmation message.\n\nConfirms the user was successfully logged out and their session was terminated."}},"required":["message"],"description":"Logout confirmation response.\n\nReturned after successful logout to confirm the refresh token was revoked and the session ended."},"ITodoListRefreshToken":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for this refresh token record."},"expires_at":{"type":"string","format":"date-time","description":"Token expiration timestamp.\n\nSet to 30 days from issuance as per authentication requirements. After this time, the token becomes invalid and user must log in again."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the refresh token was issued.\n\nUsed for token age tracking and audit purposes."},"revoked_at":{"type":"string","format":"date-time","description":"Timestamp when the token was revoked.\n\nNull for active tokens. Set when user logs out, changes password, or explicitly revokes the token. Revoked tokens cannot be used even if not yet expired."}},"required":["id","expires_at","created_at"],"description":"Refresh token session information.\n\nRepresents an active or revoked refresh token session. Used to display session information to users for security monitoring. Excludes sensitive fields like token_hash and user_id.\n\nNote: The revoked_at field is optional as it's null for active tokens.","x-autobe-prisma-schema":"todo_list_refresh_tokens"},"ITodoListSessionRevocationResult":{"type":"object","properties":{"count":{"type":"integer","minimum":0,"description":"Number of sessions revoked.\n\nThe count of refresh tokens that were invalidated by the logout from all devices operation."},"message":{"type":"string","description":"Revocation confirmation message.\n\nConfirms all sessions were successfully terminated and the user needs to log in again on all devices."}},"required":["count","message"],"description":"Session revocation result for logout from all devices.\n\nReturned after revoking all refresh tokens to show how many sessions were terminated and confirm the operation succeeded."},"ITodoListAccountDeletion.IResponse":{"type":"object","properties":{"message":{"type":"string","description":"Account deletion confirmation.\n\nConfirms the account was successfully marked for deletion and will be permanently removed after the grace period."}},"required":["message"],"description":"Account deletion confirmation response.\n\nReturned after successful account deletion to confirm the operation and inform the user of the deletion schedule."},"ITodoListTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the todo item. System-generated UUID assigned upon creation. Used to reference the todo in update and delete operations."},"title":{"type":"string","minLength":1,"maxLength":200,"description":"The main text describing the task.\n\nRequired field with 1-200 characters. Must contain at least one non-whitespace character. This is the primary display text in todo lists."},"description":{"type":"string","maxLength":2000,"description":"Optional detailed information about the task.\n\nCan be null or empty. Maximum 2000 characters when provided. Provides additional context for complex tasks."},"completed":{"type":"boolean","description":"Completion status indicating whether the task is finished.\n\nTrue means completed, false means incomplete. Defaults to false for newly created todos. Users can toggle this status unlimited times."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this todo was created.\n\nSystem-generated upon todo creation. Immutable - never changes after creation. Used for chronological sorting and audit trails."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this todo was last modified.\n\nSystem-generated and automatically updated on every modification. Changes whenever title, description, or completion status is updated."}},"required":["id","title","completed","created_at","updated_at"],"description":"Core todo item entity representing user tasks.\n\nEach todo belongs to a specific user and contains a title, optional description, and completion status. This is the primary business entity of the application where users manage their personal task lists. Todos support creation, viewing, editing, status toggling, and deletion workflows.\n\nSecurity note: The todo_list_user_id and deleted_at fields are excluded from this response as they are internal fields. User ownership is enforced by the system, not exposed in the API response.","x-autobe-prisma-schema":"todo_list_todos"},"ITodoListTodo.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":200,"description":"Todo title describing the task.\n\nRequired field between 1-200 characters. Must contain at least one non-whitespace character. Leading and trailing whitespace is trimmed before validation."},"description":{"type":"string","maxLength":2000,"description":"Optional detailed description of the task.\n\nOptional field. Maximum 2000 characters when provided. Can be omitted or set to empty string for simple tasks."}},"required":["title"],"description":"Todo creation request data.\n\nContains the information needed to create a new todo: a required title and optional description. The system automatically sets the owner to the authenticated user, sets completed to false, generates the ID, and records timestamps.\n\nSecurity note: This is a request DTO. The user_id is never accepted from the client - it's automatically set from the authenticated user's JWT token.","x-autobe-prisma-schema":"todo_list_todos"},"ITodoListTodo.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":200,"description":"Updated todo title.\n\nOptional field. If provided, must be 1-200 characters with at least one non-whitespace character. Replaces the existing title."},"description":{"type":"string","maxLength":2000,"description":"Updated description.\n\nOptional field. If provided, must be 2000 characters or less. Can be set to empty string to clear the description."},"completed":{"type":"boolean","description":"Updated completion status.\n\nOptional field. If provided, updates whether the task is marked as complete (true) or incomplete (false)."}},"required":[],"description":"Todo update request data.\n\nContains fields that can be updated on an existing todo. All fields are optional - only provided fields will be updated. The system automatically updates the updated_at timestamp when any changes are saved.\n\nSecurity note: Ownership (user_id) cannot be changed. The created_at timestamp is immutable. The updated_at timestamp is system-managed.","x-autobe-prisma-schema":"todo_list_todos"},"ITodoListTodo.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Search text for filtering todos.\n\nOptional search term to filter todos by title or description. Performs text matching against todo content."},"completed":{"type":"boolean","description":"Filter by completion status.\n\nOptional filter. If true, returns only completed todos. If false, returns only incomplete todos. If omitted, returns all todos."},"sort":{"oneOf":[{"const":"created_at","description":"Sort field for ordering results.\n\nOptional sort field. Defaults to created_at. Determines how todos are ordered in the response."},{"const":"updated_at","description":"Sort field for ordering results.\n\nOptional sort field. Defaults to created_at. Determines how todos are ordered in the response."},{"const":"title","description":"Sort field for ordering results.\n\nOptional sort field. Defaults to created_at. Determines how todos are ordered in the response."}],"description":"Sort field for ordering results.\n\nOptional sort field. Defaults to created_at. Determines how todos are ordered in the response."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction.\n\nOptional order direction. Defaults to desc (newest first for timestamps, Z-A for title). Determines ascending or descending order."},{"const":"desc","description":"Sort order direction.\n\nOptional order direction. Defaults to desc (newest first for timestamps, Z-A for title). Determines ascending or descending order."}],"description":"Sort order direction.\n\nOptional order direction. Defaults to desc (newest first for timestamps, Z-A for title). Determines ascending or descending order."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nOptional page number. Defaults to 1. Determines which page of results to return."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Items per page.\n\nOptional limit. Defaults to 50. Maximum 100. Determines how many todos are returned per page."}},"required":[],"description":"Todo list search and filter request.\n\nContains optional parameters for searching, filtering, sorting, and paginating the user's todo list. All parameters are optional - defaults are applied when not provided. Supports flexible todo list browsing and management.\n\nThe system automatically filters results to show only the authenticated user's todos and excludes soft-deleted items (deleted_at is null)."},"ITodoListTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Todo unique identifier.\n\nUsed to reference the todo in detail views, updates, and deletions."},"title":{"type":"string","description":"Todo title.\n\nThe main task description displayed in list views."},"completed":{"type":"boolean","description":"Completion status.\n\nIndicates whether the task is complete (true) or incomplete (false). Used for visual distinction in list displays."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp.\n\nWhen the todo was created. Used for chronological sorting in list views."}},"required":["id","title","completed","created_at"],"description":"Simplified todo summary for list views.\n\nOptimized representation of a todo for efficient list display. Includes only the essential fields needed for browsing: ID, title, completion status, and creation date. Excludes the description field to reduce payload size in paginated list responses.\n\nThis summary format supports the primary todo list view where users browse their tasks and can click for full details.","x-autobe-prisma-schema":"todo_list_todos"}}}}