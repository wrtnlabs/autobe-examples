import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerRefundRequestsRefundRequestId } from "../../../../providers/getShoppingMallCustomerRefundRequestsRefundRequestId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";

import { IShoppingMallRefundRequest } from "../../../../api/structures/IShoppingMallRefundRequest";

@Controller("/shoppingMall/customer/refundRequests/:refundRequestId")
export class ShoppingmallCustomerRefundrequestsController {
  /**
   * Retrieve detailed information about a specific refund request.
   *
   * Retrieves comprehensive details about a specific refund request identified
   * by its unique ID from the shopping_mall_refund_requests table. This
   * operation provides complete visibility into the refund workflow including
   * the original order information, customer's refund reason and description,
   * requested refund amount, approved amount (if reviewed), current refund
   * status, return requirements, and tracking information.
   *
   * The refund request detail includes information about the requesting
   * customer, the associated order, the seller responsible for reviewing the
   * request, and any admin who may have overridden the decision. The response
   * contains the complete refund timeline with key timestamps including when
   * the request was submitted, the seller response deadline (3 business days
   * from submission with auto-approval if missed), when the request was
   * reviewed, and when the refund was completed.
   *
   * Security considerations include role-based access control where customers
   * can only view their own refund requests, sellers can view refund requests
   * for orders containing their products, and admins have full visibility
   * across all refund requests. The operation validates the refund request ID
   * and ensures the requesting user has appropriate permissions to access the
   * refund request details.
   *
   * This operation integrates with the order management system to provide order
   * context, the payment system to show refund processing status, and the
   * review workflow to display seller and admin responses. The refund request
   * data helps customers track their refund progress, enables sellers to make
   * informed approval decisions, and allows admins to resolve disputes and
   * override decisions when necessary.
   *
   * Related operations that might be used together include retrieving the
   * associated order details, viewing the order items that are being refunded,
   * and accessing the customer's refund request history for pattern analysis.
   *
   * @param connection
   * @param refundRequestId Unique identifier of the target refund request to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("refundRequestId")
    refundRequestId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallRefundRequest> {
    try {
      return await getShoppingMallCustomerRefundRequestsRefundRequestId({
        customer,
        refundRequestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
