import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchShoppingMallCustomerCancellations } from "../../../../providers/patchShoppingMallCustomerCancellations";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";

import { IPageIShoppingMallCancellation } from "../../../../api/structures/IPageIShoppingMallCancellation";
import { IShoppingMallCancellation } from "../../../../api/structures/IShoppingMallCancellation";

@Controller("/shoppingMall/customer/cancellations")
export class ShoppingmallCustomerCancellationsController {
  /**
   * Search and retrieve filtered list of order cancellation records for
   * customers.
   *
   * Retrieves a comprehensive, paginated list of order cancellation records
   * from the shopping_mall_cancellations table with advanced filtering,
   * searching, and sorting capabilities. This customer-specific endpoint
   * enables customers to search their own cancellation history based on
   * multiple criteria including cancellation status, approval workflow state,
   * refund processing status, and date ranges.
   *
   * Customers use this endpoint to view their own cancellation requests and
   * track approval status and refund processing. The operation automatically
   * filters results to show only cancellations where the authenticated customer
   * is the requester (requester_customer_id matches the authenticated user),
   * ensuring data privacy and security.
   *
   * The operation supports sophisticated filtering including cancellation
   * status (pending_approval, approved, rejected, completed), date range
   * queries for requested_at timestamp, refund processing status, and approval
   * workflow states. Sorting options include most recent cancellations first,
   * highest refund amounts, and cancellations approaching approval deadlines.
   *
   * Security and authorization are enforced through role-based access control.
   * Customers can only view their own cancellation records, ensuring proper
   * data isolation. The operation returns appropriate error responses for
   * unauthorized access attempts.
   *
   * The response includes complete cancellation details: order information,
   * cancellation reason and notes, refund amounts, processing status, and
   * complete timeline from request through approval to refund completion.
   * Pagination enables efficient handling of large result sets.
   *
   * @param connection
   * @param body Search criteria, filters, sorting options, and pagination
   *   parameters for cancellation queries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallCancellation.IRequest,
  ): Promise<IPageIShoppingMallCancellation> {
    try {
      return await patchShoppingMallCustomerCancellations({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
