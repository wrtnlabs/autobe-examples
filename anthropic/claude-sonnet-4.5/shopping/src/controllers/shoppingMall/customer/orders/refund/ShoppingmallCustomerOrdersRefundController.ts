import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerOrdersOrderIdRefund } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdRefund";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";

import { IShoppingMallRefundRequest } from "../../../../../api/structures/IShoppingMallRefundRequest";
import { IShoppingMallOrder } from "../../../../../api/structures/IShoppingMallOrder";

@Controller("/shoppingMall/customer/orders/:orderId/refund")
export class ShoppingmallCustomerOrdersRefundController {
  /**
   * Submit a refund request for a delivered order within the return window.
   *
   * Enables customers to formally request refunds for delivered orders by
   * submitting detailed refund information including reason, description,
   * requested amount, and optional evidence. This operation initiates the
   * refund approval workflow as defined in the order management requirements,
   * creating a refund request record that will be reviewed by the seller and
   * potentially escalated to admin for final decision.
   *
   * The operation validates critical business rules before accepting the refund
   * request. First, it verifies the order exists and belongs to the requesting
   * customer. Second, it confirms the order is in a refundable state (delivered
   * or completed status). Third, it validates the request is submitted within
   * the 30-day return window from delivery date as specified in the business
   * rules. If any validation fails, the request is rejected with specific error
   * messages.
   *
   * Upon successful submission, the system creates a
   * shopping_mall_refund_requests record with status 'pending_review',
   * calculates the seller response deadline (3 business days from submission),
   * and sends immediate notifications to the seller alerting them of the new
   * refund request. The customer receives confirmation with a refund request ID
   * for tracking purposes.
   *
   * The refund reason must be selected from predefined categories:
   * defective_damaged, wrong_item, does_not_match_description, changed_mind,
   * found_better_price, quality_not_expected, or other. Customers must provide
   * a detailed explanation regardless of selected reason to help sellers and
   * admins make informed decisions. The requested refund amount typically
   * matches the order total but can be partial refund amounts in some cases.
   *
   * This operation integrates with the shopping_mall_orders,
   * shopping_mall_refund_requests, and shopping_mall_customers tables as
   * defined in the Prisma schema. It serves as the entry point for the complete
   * refund workflow documented in the Order Management and Tracking
   * requirements, which includes seller review, admin escalation for disputes,
   * return shipping coordination, and final refund payment processing through
   * the payment gateway.
   *
   * Related operations include viewing refund request status, seller refund
   * approval/rejection endpoints, and admin refund decision overrides. This
   * endpoint is customer-facing and requires customer authentication with
   * ownership verification to ensure only the order owner can request refunds.
   *
   * @param connection
   * @param orderId Unique identifier of the order for which refund is being
   *   requested
   * @param body Refund request details including reason, description, requested
   *   amount, and supporting information for the refund approval workflow
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createRefund(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IRefundCreate,
  ): Promise<IShoppingMallRefundRequest> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdRefund({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
