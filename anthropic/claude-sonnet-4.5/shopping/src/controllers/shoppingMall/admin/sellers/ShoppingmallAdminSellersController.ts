import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminSellers } from "../../../../providers/patchShoppingMallAdminSellers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminSellersSellerId } from "../../../../providers/getShoppingMallAdminSellersSellerId";

import { IPageIShoppingMallSeller } from "../../../../api/structures/IPageIShoppingMallSeller";
import { IShoppingMallSeller } from "../../../../api/structures/IShoppingMallSeller";

@Controller("/shoppingMall/admin/sellers")
export class ShoppingmallAdminSellersController {
  /**
   * Search and retrieve a filtered, paginated list of seller accounts from the
   * shopping_mall_sellers table.
   *
   * Retrieve a comprehensive filtered and paginated list of seller accounts
   * registered on the e-commerce shopping mall platform. This operation
   * provides advanced search capabilities for finding sellers based on multiple
   * criteria including business name patterns, account status, verification
   * status, registration date ranges, and approval status.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and sorting options. Results can be sorted by registration date,
   * business name, approval date, account status, or other relevant seller
   * attributes in ascending or descending order. This enables efficient
   * management and oversight of the seller ecosystem.
   *
   * Security considerations include restricting this operation to administrator
   * roles only, as it provides access to business information across all
   * sellers on the platform. Sellers should not be able to view other sellers'
   * account information to maintain competitive privacy. The response filters
   * sensitive information such as password hashes, tax IDs, and bank account
   * details from the summary view.
   *
   * This operation integrates with the shopping_mall_sellers table as defined
   * in the Prisma schema, incorporating all available seller fields and
   * relationships including approval status by admins, document verification
   * status, and account lifecycle timestamps. The response includes seller
   * summary information optimized for admin dashboard displays with key metrics
   * like total products, order count, and performance ratings where
   * applicable.
   *
   * The operation is essential for admin dashboard functionality as specified
   * in the Admin Dashboard requirements document, enabling administrators to
   * review seller applications, monitor seller performance, manage account
   * statuses, and perform bulk operations on seller accounts. It supports the
   * seller onboarding workflow, performance monitoring, and marketplace quality
   * control functions critical to platform governance.
   *
   * @param connection
   * @param body Search criteria, filtering parameters, pagination settings, and
   *   sorting options for seller account retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSeller.IRequest,
  ): Promise<IPageIShoppingMallSeller.ISummary> {
    try {
      return await patchShoppingMallAdminSellers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific seller account from the
   * shopping_mall_sellers table.
   *
   * Retrieve complete detailed information for a specific seller account on the
   * e-commerce shopping mall platform. This operation provides comprehensive
   * visibility into a seller's business profile, verification status, account
   * configuration, and operational details.
   *
   * The operation returns extensive seller information including business
   * identity (business name, business type, contact person), authentication and
   * security details (email, email verification status, account status),
   * business verification data (business registration number, tax ID, document
   * verification status), financial settings (bank account information,
   * commission rate, payout preferences), store customization (store URL slug,
   * description, logo, banner), and operational policies (return policy,
   * shipping policy, free shipping threshold).
   *
   * Security and authorization considerations are critical for this operation.
   * Administrator roles have unrestricted access to view detailed information
   * for any seller account on the platform, enabling oversight, verification,
   * and support functions. Seller roles can only access their own account
   * details, enforced through ownership validation that compares the
   * authenticated seller's ID with the requested sellerId parameter. This
   * prevents sellers from viewing competitors' business information,
   * maintaining marketplace privacy and competitive fairness.
   *
   * The response includes denormalized performance metrics and related entity
   * counts where applicable, such as total active products, total orders
   * fulfilled, average ratings, and account approval information including
   * which admin approved the account and when. Sensitive information such as
   * password hashes and full bank account numbers are excluded from the
   * response for security, with only masked/partial information provided where
   * needed for reference.
   *
   * This operation integrates with the shopping_mall_sellers table and related
   * entities as defined in the Prisma schema, including relationships to
   * shopping_mall_admins (for approval tracking), shopping_mall_products (for
   * product count), shopping_mall_orders (for fulfillment metrics), and
   * shopping_mall_addresses (for business location). The operation supports the
   * seller profile management, admin seller oversight, and seller dashboard
   * initialization use cases specified in the Seller Management and Admin
   * Dashboard requirements documents.
   *
   * Performance expectations require the operation to retrieve and return
   * seller details within 1 second under normal load conditions, with efficient
   * database queries leveraging indexed fields such as seller ID, email, and
   * account status. The response structure should be comprehensive yet
   * optimized for both display and potential editing workflows.
   *
   * @param connection
   * @param sellerId Unique identifier of the target seller account to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSeller> {
    try {
      return await getShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
