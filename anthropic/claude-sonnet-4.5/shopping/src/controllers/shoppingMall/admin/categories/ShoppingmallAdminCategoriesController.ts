import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminCategories } from "../../../../providers/postShoppingMallAdminCategories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminCategoriesCategoryId } from "../../../../providers/putShoppingMallAdminCategoriesCategoryId";
import { deleteShoppingMallAdminCategoriesCategoryId } from "../../../../providers/deleteShoppingMallAdminCategoriesCategoryId";

import { IShoppingMallCategory } from "../../../../api/structures/IShoppingMallCategory";

@Controller("/shoppingMall/admin/categories")
export class ShoppingmallAdminCategoriesController {
  /**
   * Create a new product category in the hierarchical taxonomy.
   *
   * Create a new product category within the hierarchical taxonomy structure
   * used to organize the marketplace product catalog. This operation inserts a
   * new record into the shopping_mall_categories table, which implements a
   * self-referential parent-child structure supporting unlimited depth for
   * flexible category organization from broad classifications to highly
   * specific subcategories.
   *
   * The category creation process requires specification of the category name,
   * optional detailed description, URL-friendly slug for SEO-optimized category
   * pages, display order for controlling presentation sequence among sibling
   * categories, and optional parent category reference if creating a
   * subcategory rather than a root-level category. The system validates that
   * category names are unique within the same parent level to prevent
   * confusion, and that slugs are globally unique across the entire platform to
   * ensure distinct URL paths for all category pages.
   *
   * Security and authorization are critical for this operation as only platform
   * administrators can create new categories to maintain taxonomy integrity and
   * consistency. Unrestricted category creation by sellers or customers would
   * lead to taxonomy fragmentation, duplicate categories, inconsistent naming
   * conventions, and poor catalog organization. The admin role ensures that
   * category structure aligns with business strategy, market segmentation, and
   * customer browsing patterns. All category creation actions are logged in the
   * audit trail with the administrator who performed the action and timestamp
   * for accountability.
   *
   * This operation integrates with the product management system where products
   * must be assigned to exactly one category. Creating new categories expands
   * the available classification options for sellers when listing products. The
   * hierarchical structure enables customers to navigate from general to
   * specific product types, improving product discovery through intuitive
   * browsing. The is_active flag can be set during creation to control
   * immediate visibility to customers, allowing administrators to prepare
   * category structures before making them public.
   *
   * The display_order field enables precise control over how categories appear
   * in navigation menus and category lists at the same hierarchy level. Lower
   * display order values appear first, allowing administrators to prioritize
   * important or popular categories in customer-facing navigation. When
   * creating subcategories, the parent_id reference establishes the
   * hierarchical relationship and determines the category's position in
   * breadcrumb navigation paths.
   *
   * Validation rules enforce that new categories meet platform standards
   * including appropriate name length (must be meaningful but not excessively
   * long), valid slug format (lowercase, alphanumeric with hyphens only),
   * non-negative display order values, and valid parent category references if
   * specified. If a parent_id is provided, the system verifies that the parent
   * category exists and is not soft-deleted before allowing the subcategory
   * creation.
   *
   * This endpoint is typically used by administrators when expanding the
   * marketplace into new product verticals, reorganizing existing taxonomy for
   * improved customer navigation, creating seasonal or promotional category
   * groupings, or establishing region-specific category structures for
   * international marketplace expansion. The created category immediately
   * becomes available for product assignment by sellers, enabling rapid catalog
   * expansion to support business growth.
   *
   * @param connection
   * @param body Category creation data including name, description, slug,
   *   parent reference, and display settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallCategory.ICreate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await postShoppingMallAdminCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product category in the hierarchical taxonomy.
   *
   * Update an existing product category within the shopping_mall_categories
   * hierarchical structure. This operation enables administrators to modify
   * category properties including name, description, URL slug, display order,
   * active status, and parent category assignment to reorganize the category
   * taxonomy.
   *
   * This operation validates that the target category exists in the database
   * and is not soft-deleted. When updating the category name or slug, the
   * system ensures uniqueness constraints are satisfied. If the parent_id is
   * modified to reorganize the hierarchy, the system validates that the new
   * parent category exists and prevents circular relationships where a category
   * becomes its own ancestor.
   *
   * Category updates immediately affect product organization throughout the
   * platform. When a category's parent_id changes, all products assigned to
   * this category will have updated breadcrumb paths for navigation. When a
   * category is deactivated (is_active set to false), all products in that
   * category become hidden from customer view while preserving product data and
   * seller associations.
   *
   * The operation supports complete category reorganization including moving
   * categories to different parent categories, changing display order within
   * sibling categories, and modifying category metadata. Display order changes
   * affect how categories appear in navigation menus and category browsing
   * interfaces.
   *
   * Administrators must have super_admin or content_moderator role level to
   * perform category updates. This operation is critical for maintaining
   * organized product taxonomy and ensuring customers can effectively browse
   * and discover products through logical category structures. All changes are
   * logged with timestamp and admin identifier for audit trail purposes.
   *
   * @param connection
   * @param categoryId Unique identifier of the category to update
   * @param body Updated category information including name, description, slug,
   *   parent assignment, display order, and active status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategory.IUpdate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await putShoppingMallAdminCategoriesCategoryId({
        admin,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product category from the platform taxonomy.
   *
   * Soft delete an existing product category from the shopping_mall_categories
   * hierarchical structure. This operation marks the category as deleted by
   * setting the deleted_at timestamp without permanently removing the record
   * from the database, preserving historical data for audit compliance and
   * product associations.
   *
   * The operation validates that the target category exists and is not
   * soft-deleted before performing the deletion. Based on the Prisma schema,
   * the shopping_mall_categories table includes a deleted_at timestamp column
   * that implements soft deletion functionality, ensuring category data is
   * retained for historical orders and analytics while being excluded from
   * active category navigation.
   *
   * Before soft-deleting a category, the system must handle dependent
   * relationships. If products are currently assigned to this category,
   * administrators should reassign those products to alternative categories to
   * prevent orphaned products. If child categories exist with this category as
   * their parent_id, those child categories must be reorganized or reassigned
   * to different parents to maintain hierarchy integrity.
   *
   * When a category is soft-deleted, it is immediately removed from
   * customer-facing category navigation menus, product filtering options, and
   * search facets. However, historical product-category associations are
   * preserved to maintain accurate records of product organization at the time
   * orders were placed. This supports order history display and analytics
   * without data corruption.
   *
   * This operation requires super_admin role level as category deletion
   * significantly impacts platform taxonomy and product organization. The soft
   * delete timestamp enables potential category restoration if needed while
   * maintaining strict data retention policies for compliance purposes. All
   * deletion actions are logged with administrator identifier and timestamp for
   * complete audit trail.
   *
   * @param connection
   * @param categoryId Unique identifier of the category to soft delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminCategoriesCategoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
