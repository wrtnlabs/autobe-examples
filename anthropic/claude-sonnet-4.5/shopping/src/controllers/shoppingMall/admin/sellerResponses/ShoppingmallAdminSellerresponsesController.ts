import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminSellerResponses } from "../../../../providers/patchShoppingMallAdminSellerResponses";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminSellerResponsesResponseId } from "../../../../providers/getShoppingMallAdminSellerResponsesResponseId";

import { IPageIShoppingMallSellerResponse } from "../../../../api/structures/IPageIShoppingMallSellerResponse";
import { IShoppingMallSellerResponse } from "../../../../api/structures/IShoppingMallSellerResponse";

@Controller("/shoppingMall/admin/sellerResponses")
export class ShoppingmallAdminSellerresponsesController {
  /**
   * Search and retrieve filtered, paginated list of seller responses to product
   * reviews.
   *
   * Retrieve a comprehensive, paginated list of seller responses to customer
   * product reviews with advanced filtering and search capabilities. This
   * operation provides access to all seller responses across the platform based
   * on the requesting user's role and permissions.
   *
   * Seller responses represent replies posted by sellers to customer reviews on
   * their products. Each response undergoes moderation workflow before
   * publication, requiring admin approval to ensure professional and
   * policy-compliant communication. Sellers can respond to reviews to address
   * customer concerns, provide explanations, thank customers for positive
   * feedback, and build customer relationships.
   *
   * The operation supports complex search and filtering criteria including
   * response moderation status (pending_moderation, approved, rejected), seller
   * identification, associated review ID, date ranges, and text content search.
   * This enables sellers to manage their response history and admins to
   * efficiently moderate pending responses.
   *
   * Security and role-based access control ensure that sellers can only view
   * and search their own responses, while admins have platform-wide visibility
   * for moderation purposes. The response data includes complete seller
   * response information with associated review context, seller business
   * details, moderation status, timestamps, and soft deletion status.
   *
   * This operation integrates with the product review system defined in the
   * shopping_mall_reviews table, enabling navigation from reviews to seller
   * responses and supporting the complete review-response workflow. Pagination
   * parameters allow efficient handling of large response datasets, and sorting
   * options (by creation date, status, helpfulness) provide flexible result
   * ordering.
   *
   * The endpoint is critical for seller reputation management, enabling sellers
   * to engage with customer feedback professionally and for admins to maintain
   * communication quality standards across the marketplace.
   *
   * @param connection
   * @param body Search and filter criteria for seller responses including
   *   status, seller ID, review association, date ranges, and pagination
   *   parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSellerResponse.IRequest,
  ): Promise<IPageIShoppingMallSellerResponse.ISummary> {
    try {
      return await patchShoppingMallAdminSellerResponses({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific seller response by ID.
   *
   * Retrieve comprehensive detailed information about a specific seller
   * response to a customer product review using the response's unique
   * identifier. This operation provides complete response data including the
   * response text content, moderation status, associated review context, and
   * seller information.
   *
   * Seller responses are replies posted by sellers to customer reviews on their
   * products, enabling sellers to address customer concerns, provide
   * explanations, offer solutions, or thank customers for positive feedback.
   * All seller responses undergo moderation workflow requiring admin approval
   * before publication to ensure professional communication and policy
   * compliance.
   *
   * The operation returns complete seller response details including the
   * response text (maximum 2000 characters), current moderation status
   * (pending_moderation, approved, rejected), associated review information
   * with the original customer review content and rating, seller business
   * details, submission and last edit timestamps, and soft deletion status.
   * This comprehensive data supports seller response management, admin
   * moderation workflows, and customer display of seller engagement.
   *
   * Security and role-based access control ensure that sellers can only view
   * their own responses while admins have platform-wide access for moderation
   * purposes. The endpoint validates that the requesting user has appropriate
   * permissions to access the specific seller response.
   *
   * This operation integrates with the shopping_mall_reviews table to provide
   * complete review-response context, enabling display of seller responses
   * beneath customer reviews on product pages. The response data includes
   * whether the response has been edited (updated_at differs from created_at),
   * supporting the '7-day edit window' business rule where sellers can modify
   * responses within 7 days of submission.
   *
   * The endpoint is essential for sellers to view and edit their responses, for
   * admins to moderate pending responses and review policy compliance, and for
   * displaying approved seller responses to customers on product detail pages
   * as part of the trusted review ecosystem.
   *
   * @param connection
   * @param responseId Unique identifier of the seller response to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":responseId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSellerResponse> {
    try {
      return await getShoppingMallAdminSellerResponsesResponseId({
        admin,
        responseId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
