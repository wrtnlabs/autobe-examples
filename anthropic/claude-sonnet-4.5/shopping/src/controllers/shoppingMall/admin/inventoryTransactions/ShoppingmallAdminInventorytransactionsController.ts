import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminInventoryTransactions } from "../../../../providers/patchShoppingMallAdminInventoryTransactions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminInventoryTransactionsTransactionId } from "../../../../providers/getShoppingMallAdminInventoryTransactionsTransactionId";

import { IPageIShoppingMallInventoryTransaction } from "../../../../api/structures/IPageIShoppingMallInventoryTransaction";
import { IShoppingMallInventoryTransaction } from "../../../../api/structures/IShoppingMallInventoryTransaction";

@Controller("/shoppingMall/admin/inventoryTransactions")
export class ShoppingmallAdminInventorytransactionsController {
  /**
   * Search and retrieve filtered, paginated inventory transaction records.
   *
   * Retrieve a comprehensive, filterable list of inventory transaction records
   * for the shopping mall platform. This operation provides administrators with
   * complete visibility into all inventory movements across all sellers,
   * products, and SKUs for audit, reconciliation, and compliance purposes.
   *
   * This endpoint accesses the shopping_mall_inventory_transactions table which
   * maintains a complete audit trail of every inventory change including sales,
   * restocks, manual adjustments, damage/loss records, returns, and
   * cancellations. Each transaction record captures the quantity change,
   * resulting inventory level, transaction type, processing status, actor who
   * initiated the change (seller or admin), and optional reason/notes.
   *
   * The operation supports advanced filtering capabilities including
   * transaction type (sale, restock, adjustment, damage_loss, return,
   * cancellation), transaction status (pending, completed, reversed), date
   * range filtering, specific SKU filtering, order reference filtering, and
   * actor filtering (which seller or admin performed the action). This enables
   * administrators to perform detailed inventory audits, identify
   * discrepancies, track seller inventory management patterns, and generate
   * compliance reports.
   *
   * Security considerations include restricting this endpoint to admin users
   * only, as inventory transaction data contains sensitive business information
   * across all sellers. The response includes complete transaction details with
   * actor information, timestamps, quantity changes, and context (order
   * references, reasons, notes) to support comprehensive audit trail
   * requirements.
   *
   * This operation integrates with the shopping_mall_skus table to provide SKU
   * details, shopping_mall_orders for order context, shopping_mall_sellers and
   * shopping_mall_admins for actor identification. The paginated results
   * support large-scale inventory audit operations across the entire platform
   * history.
   *
   * @param connection
   * @param body Search criteria, filtering parameters, and pagination settings
   *   for inventory transaction records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallInventoryTransaction.IRequest,
  ): Promise<IPageIShoppingMallInventoryTransaction> {
    try {
      return await patchShoppingMallAdminInventoryTransactions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific inventory transaction record.
   *
   * Retrieve complete details for a specific inventory transaction identified
   * by the transaction ID. This operation provides administrators with full
   * visibility into a single inventory movement event for audit verification,
   * compliance review, and investigation purposes.
   *
   * This endpoint accesses a specific record from the
   * shopping_mall_inventory_transactions table, which maintains the complete
   * audit trail of all inventory changes. The transaction record contains
   * comprehensive information including the SKU whose inventory changed, the
   * transaction type (sale, restock, adjustment, damage_loss, return,
   * cancellation), the quantity change amount (positive for additions, negative
   * for reductions), the resulting inventory quantity after the transaction,
   * the processing status (pending, completed, reversed), and the actor who
   * initiated the change.
   *
   * The detailed transaction record includes critical audit information such as
   * the related order reference (if transaction resulted from a sale or
   * cancellation), the seller or admin who performed the action
   * (actor_seller_id or actor_admin_id), the reason or explanation for the
   * change (required for adjustments and corrections), any additional notes,
   * and the precise timestamp when the transaction occurred.
   *
   * Security considerations restrict this endpoint to admin users only, as
   * inventory transaction details contain sensitive business operations data.
   * The response provides complete transparency for inventory audit trails,
   * enabling administrators to verify inventory movements, investigate
   * discrepancies, validate business rules compliance (such as inventory never
   * going negative), and maintain accurate financial reconciliation.
   *
   * This operation integrates with related entities to provide full context:
   * shopping_mall_skus for the affected product variant, shopping_mall_orders
   * for order-related transactions, shopping_mall_sellers and
   * shopping_mall_admins for actor identification, and shopping_mall_products
   * indirectly through the SKU relationship for complete product information.
   *
   * @param connection
   * @param transactionId Unique identifier of the inventory transaction record
   *   to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":transactionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("transactionId")
    transactionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallInventoryTransaction> {
    try {
      return await getShoppingMallAdminInventoryTransactionsTransactionId({
        admin,
        transactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
