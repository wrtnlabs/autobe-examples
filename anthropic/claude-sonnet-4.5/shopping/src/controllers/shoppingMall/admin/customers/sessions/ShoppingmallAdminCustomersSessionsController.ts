import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminCustomersCustomerIdSessions } from "../../../../../providers/patchShoppingMallAdminCustomersCustomerIdSessions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageIShoppingMallCustomerSession } from "../../../../../api/structures/IPageIShoppingMallCustomerSession";
import { IShoppingMallCustomerSession } from "../../../../../api/structures/IShoppingMallCustomerSession";

@Controller("/shoppingMall/admin/customers/:customerId/sessions")
export class ShoppingmallAdminCustomersSessionsController {
  /**
   * Retrieve and filter active sessions for a specific customer account.
   *
   * Retrieves a comprehensive list of all active sessions associated with a
   * specific customer account, supporting advanced filtering and pagination.
   * This operation queries the shopping_mall_sessions table for records where
   * user_type is 'customer' and matches the specified customer ID parameter.
   *
   * This endpoint serves multiple critical business purposes. First, it enables
   * customers to monitor their account security by viewing all active login
   * sessions across different devices and browsers. Customers can identify
   * which devices are currently logged in, where those sessions originated (IP
   * address and approximate location), and when each session was last active.
   * This visibility is essential for detecting unauthorized access and
   * maintaining account security.
   *
   * Second, the operation supports the multi-device session management feature
   * described in the requirements. Customers can see sessions from their
   * desktop computer, mobile phone, tablet, and any other devices
   * simultaneously logged in. Each session record includes detailed device
   * information parsed from the user agent string, including device type
   * (mobile, tablet, desktop), browser name, operating system, and a
   * user-friendly device name for easy identification.
   *
   * The filtering capabilities provided through the request body enable
   * customers to narrow down sessions by specific criteria. For example,
   * customers can filter sessions by device type to see only mobile sessions,
   * or filter by date range to find sessions created within a specific
   * timeframe. This is particularly useful for customers with many active
   * sessions who want to identify and manage specific sessions.
   *
   * From a security perspective, this operation provides the foundation for
   * customers to detect and respond to suspicious activity. If a customer sees
   * a session from an unfamiliar location or device, they can identify it
   * through this endpoint and then use related session revocation endpoints to
   * terminate that session. The approximate location information, derived from
   * IP address geolocation, helps customers quickly identify whether a session
   * is legitimate.
   *
   * Administrators also use this operation for customer support and security
   * investigations. When a customer reports unauthorized account access,
   * administrators can retrieve the session list to identify suspicious
   * sessions and take appropriate action. The comprehensive session details
   * including IP addresses and timestamps provide valuable forensic
   * information.
   *
   * The response includes pagination support for customers with many historical
   * sessions, ensuring efficient data retrieval and display. Sessions are
   * typically sorted by last activity timestamp with most recent sessions
   * first, allowing customers to quickly see their active sessions.
   *
   * Related operations that customers might use together with this endpoint
   * include session revocation (to terminate specific sessions), login history
   * retrieval, and account security settings management. Together, these
   * operations provide complete session lifecycle management and security
   * control for customer accounts.
   *
   * @param connection
   * @param customerId Unique identifier of the customer whose sessions are
   *   being retrieved
   * @param body Filtering and pagination criteria for session retrieval
   *   including device type, date range, location filters, and sorting
   *   preferences
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCustomerSession.IRequest,
  ): Promise<IPageIShoppingMallCustomerSession> {
    try {
      return await patchShoppingMallAdminCustomersCustomerIdSessions({
        admin,
        customerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
