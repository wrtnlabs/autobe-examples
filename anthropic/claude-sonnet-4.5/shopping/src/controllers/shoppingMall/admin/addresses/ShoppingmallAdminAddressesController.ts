import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminAddresses } from "../../../../providers/postShoppingMallAdminAddresses";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminAddresses } from "../../../../providers/patchShoppingMallAdminAddresses";
import { getShoppingMallAdminAddressesAddressId } from "../../../../providers/getShoppingMallAdminAddressesAddressId";
import { putShoppingMallAdminAddressesAddressId } from "../../../../providers/putShoppingMallAdminAddressesAddressId";
import { deleteShoppingMallAdminAddressesAddressId } from "../../../../providers/deleteShoppingMallAdminAddressesAddressId";

import { IShoppingMallAddress } from "../../../../api/structures/IShoppingMallAddress";
import { IPageIShoppingMallAddress } from "../../../../api/structures/IPageIShoppingMallAddress";

@Controller("/shoppingMall/admin/addresses")
export class ShoppingmallAdminAddressesController {
  /**
   * Create a new delivery address for the authenticated admin.
   *
   * Creates a new delivery address record in the shopping_mall_addresses table
   * for the authenticated admin. This operation supports address management
   * capabilities for admins who may also purchase from the platform (admins
   * inherit all customer and seller permissions).
   *
   * The system validates all required address fields including recipient name,
   * phone number, complete street address (address_line1), city,
   * state/province, postal code, country, and country code. The operation
   * automatically sets user_type to 'admin' and associates the address with
   * shopping_mall_admin_id of the authenticated admin.
   *
   * If this is the admin's first address, the system automatically sets
   * is_default to true. Admins can optionally provide a label for the address
   * which must be unique per admin. The address is initially marked as
   * unverified and can be verified through address validation service after
   * creation.
   *
   * @param connection
   * @param body Complete address information including recipient details,
   *   street address components, city, state, postal code, country, and
   *   optional settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAddress.ICreate,
  ): Promise<IShoppingMallAddress> {
    try {
      return await postShoppingMallAdminAddresses({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of delivery addresses.
   *
   * Retrieve a comprehensive list of delivery addresses with advanced
   * filtering, searching, sorting, and pagination capabilities. This operation
   * provides full address search functionality for authenticated users to
   * manage their saved delivery addresses efficiently.
   *
   * This endpoint operates on the shopping_mall_addresses table which stores
   * delivery addresses for customers, sellers, and admins using a polymorphic
   * user ownership pattern. Each address contains complete delivery information
   * including recipient details, phone number, multi-line street address, city,
   * state/province, postal code, country data, verification status, default
   * designation, and optional user-defined labels.
   *
   * Security and authorization are enforced based on the authenticated user's
   * role. Customers can only retrieve their own addresses by filtering on their
   * customer_id. Sellers can only retrieve their own addresses by filtering on
   * their seller_id. Admins have platform-wide access and can retrieve
   * addresses for any user across all user types, enabling administrative
   * address management and customer support functions.
   *
   * The operation supports comprehensive filtering capabilities including user
   * type discrimination (customer, seller, admin), country-based filtering,
   * verification status (is_verified), default address filtering (is_default),
   * postal code searches, city and state filtering, and soft deletion status
   * (deleted_at). This enables users to find specific addresses quickly and
   * admins to perform advanced address data analysis.
   *
   * Pagination is implemented to handle users with multiple saved addresses
   * efficiently. The response includes total count, current page number, page
   * size, and the array of address records matching the filter criteria.
   * Sorting options include chronological ordering (created_at, updated_at),
   * alphabetical ordering by recipient name or city, and custom ordering by
   * verification status or default designation.
   *
   * Address data returned includes all fields from the Prisma schema:
   * recipient_name, phone_number, address_line1, address_line2 (optional),
   * city, state_province, postal_code, country, country_code, is_default, label
   * (optional), is_verified, verified_at timestamp, and soft deletion timestamp
   * deleted_at. The user_type discriminator field indicates ownership type
   * (customer, seller, admin) and the corresponding user foreign key
   * (shopping_mall_customer_id, shopping_mall_seller_id, or
   * shopping_mall_admin_id) identifies the owner.
   *
   * This operation integrates with the order placement and checkout processes
   * where customers select delivery addresses. Addresses are preserved as
   * snapshots in completed orders even when the user later updates or deletes
   * the address record, maintaining historical accuracy for order fulfillment
   * and customer service.
   *
   * Related operations include retrieving individual address details (GET
   * /addresses/{addressId}), creating new addresses (POST /addresses), updating
   * existing addresses (PUT /addresses/{addressId}), and deleting addresses
   * (DELETE /addresses/{addressId}).
   *
   * @param connection
   * @param body Search criteria, filtering parameters, sorting options, and
   *   pagination controls for address retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAddress.IRequest,
  ): Promise<IPageIShoppingMallAddress> {
    try {
      return await patchShoppingMallAdminAddresses({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific delivery address by ID.
   *
   * Retrieve complete details for a specific delivery address identified by the
   * addressId path parameter. This operation returns comprehensive address
   * information including recipient details, complete street address
   * components, verification status, default address designation, and user
   * ownership data.
   *
   * This endpoint operates on the shopping_mall_addresses table which
   * implements polymorphic user ownership supporting customers, sellers, and
   * admins. Each address record contains recipient_name, phone_number,
   * address_line1, address_line2 (optional apartment/suite information), city,
   * state_province, postal_code, country, country_code (ISO 3166-1 alpha-2),
   * is_default flag, optional user-defined label, verification status
   * (is_verified), verification timestamp (verified_at), and soft deletion
   * status (deleted_at).
   *
   * Strict authorization and ownership verification are enforced to protect
   * address privacy. Customers can only retrieve addresses where
   * shopping_mall_customer_id matches their authenticated user ID. Sellers can
   * only retrieve addresses where shopping_mall_seller_id matches their
   * authenticated user ID. Admins have platform-wide access and can retrieve
   * any address regardless of ownership for customer support, dispute
   * resolution, and administrative functions.
   *
   * The addressId path parameter must be a valid UUID format matching an
   * existing record in the shopping_mall_addresses table. The operation
   * validates that the address exists and performs ownership verification
   * before returning data. If the address does not exist or the authenticated
   * user does not have permission to access it, appropriate error responses are
   * returned (404 Not Found for non-existent addresses, 403 Forbidden for
   * unauthorized access attempts).
   *
   * The response includes the complete address record with all fields from the
   * Prisma schema. The user_type field (values: customer, seller, admin)
   * indicates the ownership type, and the corresponding foreign key field
   * (shopping_mall_customer_id, shopping_mall_seller_id, or
   * shopping_mall_admin_id) identifies the specific owner. This polymorphic
   * pattern enables unified address management across all user types while
   * maintaining clear ownership boundaries.
   *
   * Address data returned includes verification metadata showing whether the
   * address has been validated through an address verification service
   * (is_verified) and when verification occurred (verified_at). Verified
   * addresses provide higher confidence for order delivery and reduce shipping
   * errors. Unverified addresses may prompt customers to confirm accuracy
   * during checkout.
   *
   * The is_default field indicates whether this is the user's default delivery
   * address, which is pre-selected during checkout for convenience. Only one
   * address per user should be marked as default. The optional label field
   * allows users to assign friendly names like 'Home', 'Office', 'Parents
   * House' for quick identification.
   *
   * This operation integrates with checkout and order management workflows
   * where customers select delivery addresses for order fulfillment. When
   * orders are placed, the complete address is snapshotted and stored with the
   * order record, preserving historical accuracy even if the user later updates
   * or deletes the address. This ensures order history displays the correct
   * delivery destination for all past orders.
   *
   * The soft deletion pattern (deleted_at timestamp) allows users to remove
   * addresses from their active list while preserving the data for historical
   * order references. Deleted addresses are filtered out from normal address
   * selection interfaces but remain accessible for order history display and
   * audit purposes.
   *
   * Related operations include searching and listing addresses (PATCH
   * /addresses), creating new addresses (POST /addresses), updating address
   * details (PUT /addresses/{addressId}), and deleting addresses (DELETE
   * /addresses/{addressId}).
   *
   * @param connection
   * @param addressId Unique identifier of the target delivery address to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":addressId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAddress> {
    try {
      return await getShoppingMallAdminAddressesAddressId({
        admin,
        addressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing delivery address for the authenticated admin.
   *
   * Updates an existing address record in the shopping_mall_addresses table for
   * the authenticated admin. This operation enables admins to modify their
   * saved delivery addresses.
   *
   * The system validates that the authenticated admin owns the address being
   * updated by verifying the address's shopping_mall_admin_id matches the
   * authenticated admin's ID. If ownership validation fails, the operation
   * returns HTTP 403 Forbidden.
   *
   * All address fields are validated according to address creation rules:
   * postal code format must match the country, phone number format must be
   * valid, all required fields must be completed, and the label must be unique
   * per admin if provided.
   *
   * When the update sets is_default to true, the system automatically updates
   * the admin's previous default address to remove default status. The system
   * sets is_verified to false when address components change, requiring
   * revalidation.
   *
   * @param connection
   * @param addressId Unique identifier of the delivery address to update
   * @param body Updated address information including modified recipient
   *   details, street address components, and optional settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":addressId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAddress.IUpdate,
  ): Promise<IShoppingMallAddress> {
    try {
      return await putShoppingMallAdminAddressesAddressId({
        admin,
        addressId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a delivery address using soft delete.
   *
   * Permanently removes a delivery address from the customer's, seller's, or
   * admin's saved addresses by setting the deleted_at timestamp (soft delete).
   * This operation validates that the authenticated user owns the address
   * before performing the deletion. Addresses cannot be deleted if they are
   * associated with pending orders, as this would compromise order fulfillment
   * data integrity.
   *
   * The soft delete approach preserves historical references from completed
   * orders while hiding the address from the user's active address list. When
   * an address is soft deleted, it remains in the database with a deleted_at
   * timestamp but is excluded from all user-facing address retrieval
   * operations.
   *
   * If the deleted address was designated as the user's default address
   * (is_default = true), the business logic layer should handle updating the
   * default designation. This may involve clearing the default flag or
   * prompting the user to select a new default address from their remaining
   * active addresses.
   *
   * Security considerations include verifying the authenticated user's identity
   * matches the address owner (customer_id, seller_id, or admin_id) to prevent
   * unauthorized deletion of other users' addresses. The operation returns no
   * response body on successful deletion, following standard HTTP DELETE
   * semantics with 204 No Content status.
   *
   * @param connection
   * @param addressId Unique identifier of the delivery address to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":addressId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAddressesAddressId({
        admin,
        addressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
