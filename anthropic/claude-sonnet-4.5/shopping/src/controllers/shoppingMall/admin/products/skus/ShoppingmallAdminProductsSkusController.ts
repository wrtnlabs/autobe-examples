import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putShoppingMallAdminProductsProductIdSkusSkuId } from "../../../../../providers/putShoppingMallAdminProductsProductIdSkusSkuId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { deleteShoppingMallAdminProductsProductIdSkusSkuId } from "../../../../../providers/deleteShoppingMallAdminProductsProductIdSkusSkuId";

import { IShoppingMallSku } from "../../../../../api/structures/IShoppingMallSku";

@Controller("/shoppingMall/admin/products/:productId/skus/:skuId")
export class ShoppingmallAdminProductsSkusController {
  /**
   * Update a product SKU variant's pricing, inventory, and active status.
   *
   * Updates an existing product SKU variant's attributes including price,
   * inventory quantities (available and reserved), low stock threshold, and
   * active status. This operation enables sellers to maintain accurate product
   * variant information and inventory levels for their products.
   *
   * The operation validates that the specified SKU belongs to the specified
   * product to ensure data integrity. Sellers can only update SKUs for products
   * they own, while administrators have platform-wide access to update any
   * SKU.
   *
   * Key update capabilities include adjusting SKU pricing to reflect market
   * conditions or promotional strategies, modifying inventory quantities when
   * restocking or correcting discrepancies, updating low stock thresholds to
   * trigger appropriate alerts, and toggling SKU active status to control
   * variant availability without deletion.
   *
   * The operation maintains the relationship between products and their SKUs as
   * defined in the shopping_mall_skus table, which tracks independent pricing
   * and inventory for each variant combination of color, size, and custom
   * options. Updates to inventory quantities should consider existing reserved
   * quantities from active carts and pending orders.
   *
   * Security considerations include role-based access control where sellers can
   * only update their own products' SKUs and admins can update any SKU. The
   * operation logs inventory changes for audit trail purposes when quantities
   * are modified, supporting inventory transaction tracking requirements.
   *
   * This operation is typically used when sellers need to adjust pricing
   * strategies, restock inventory after receiving new shipments, correct
   * inventory discrepancies, or temporarily disable specific variants. Updates
   * are applied immediately and reflected in product catalog displays, cart
   * validations, and order processing workflows.
   *
   * @param connection
   * @param productId Unique identifier of the parent product containing the SKU
   *   variant
   * @param skuId Unique identifier of the specific SKU variant to update
   * @param body Updated SKU variant information including pricing, inventory,
   *   and status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSku.IUpdate,
  ): Promise<IShoppingMallSku> {
    try {
      return await putShoppingMallAdminProductsProductIdSkusSkuId({
        admin,
        productId,
        skuId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a product SKU variant from the system.
   *
   * Permanently removes a product SKU variant from the database. This operation
   * performs a hard delete as the shopping_mall_skus table does not support
   * soft deletion. Once deleted, the SKU cannot be recovered and all associated
   * data is permanently removed.
   *
   * The operation validates that the specified SKU belongs to the specified
   * product to ensure proper data relationships. Sellers can only delete SKUs
   * from products they own, while administrators have platform-wide access to
   * delete any SKU.
   *
   * Critical validation includes checking that the SKU is not referenced in
   * existing order items (shopping_mall_order_items table) to preserve order
   * history integrity. If the SKU has been purchased in any order, the deletion
   * is blocked and an appropriate error is returned. This ensures historical
   * order data remains accurate and customers can view their past purchases
   * correctly.
   *
   * Additional validation checks include verifying that the product has at
   * least one other active SKU remaining after deletion, as products cannot
   * exist without any purchasable variants. If this is the last SKU for a
   * product, the deletion may be blocked or the product status may need to be
   * updated accordingly.
   *
   * The operation also cleans up related data including cart items
   * (shopping_mall_cart_items), wishlist items (shopping_mall_wishlist_items),
   * and product images (shopping_mall_product_images) that are specific to the
   * deleted SKU variant. These cascading deletions ensure data consistency
   * across the system.
   *
   * Security considerations include role-based access control where sellers can
   * only delete SKUs from their own products and admins can delete any SKU. The
   * operation logs the deletion action for audit trail purposes, recording who
   * deleted the SKU, when, and which product it belonged to.
   *
   * This operation is typically used when sellers need to remove discontinued
   * variants, correct erroneous SKU entries created by mistake, or clean up
   * product listings by removing variants that are no longer offered. Because
   * this is a permanent deletion, it should be used with caution and
   * appropriate confirmation prompts in the user interface.
   *
   * @param connection
   * @param productId Unique identifier of the parent product containing the SKU
   *   variant
   * @param skuId Unique identifier of the specific SKU variant to permanently
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductIdSkusSkuId({
        admin,
        productId,
        skuId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
