import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteShoppingMallAdminProductsProductId } from "../../../../providers/deleteShoppingMallAdminProductsProductId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/shoppingMall/admin/products/:productId")
export class ShoppingmallAdminProductsController {
  /**
   * Permanently delete a product from the shopping_mall_products table.
   *
   * This operation permanently removes a product record from the
   * shopping_mall_products table in the database. It is designed for products
   * that have no order history or for administrative removal of
   * policy-violating content.
   *
   * The deletion is a hard delete operation that completely removes the product
   * from the database rather than soft-deleting it. When a product is deleted,
   * all associated data including SKU variants, product images, and variant
   * attribute configurations are also removed through cascading deletion as
   * defined in the Prisma schema relationships.
   *
   * This operation enforces strict business rules to maintain data integrity.
   * Products that have been included in customer orders cannot be deleted to
   * preserve historical transaction records and order details. Instead, sellers
   * should mark such products as discontinued through the product status update
   * functionality. Only products in draft status or products that have never
   * been ordered are eligible for deletion.
   *
   * Sellers can use this endpoint to remove their own draft products that were
   * created but never published or ordered. Admins can use this endpoint to
   * remove any product for policy violations, inappropriate content, or
   * administrative purposes, though they should exercise caution as this is an
   * irreversible operation.
   *
   * The operation validates that the requesting user (seller or admin) has
   * appropriate permissions to delete the specified product. Sellers can only
   * delete products they own, while admins can delete any product on the
   * platform. The operation returns an error if the product has associated
   * orders or if the requester lacks deletion permissions.
   *
   * This endpoint should be used sparingly as product deletion is permanent.
   * For most operational scenarios, changing the product status to 'inactive'
   * or 'discontinued' is preferred to maintain data integrity and support order
   * history display.
   *
   * @param connection
   * @param productId Unique identifier of the product to be permanently deleted
   *   from the shopping_mall_products table
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductId({
        admin,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
