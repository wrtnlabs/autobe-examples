import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminProductsProductIdImages } from "../../../../../providers/patchShoppingMallAdminProductsProductIdImages";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminProductsProductIdImagesImageId } from "../../../../../providers/getShoppingMallAdminProductsProductIdImagesImageId";
import { deleteShoppingMallAdminProductsProductIdImagesImageId } from "../../../../../providers/deleteShoppingMallAdminProductsProductIdImagesImageId";

import { IPageIShoppingMallProductImage } from "../../../../../api/structures/IPageIShoppingMallProductImage";
import { IShoppingMallProductImage } from "../../../../../api/structures/IShoppingMallProductImage";

@Controller("/shoppingMall/admin/products/:productId/images")
export class ShoppingmallAdminProductsImagesController {
  /**
   * Retrieve paginated list of images for a specific product with filtering and
   * sorting.
   *
   * Retrieve a comprehensive, paginated list of images associated with a
   * specific product from the shopping_mall_product_images table. This
   * operation provides advanced search and filtering capabilities for managing
   * product image galleries, supporting both general product images and
   * variant-specific images.
   *
   * The operation is designed to serve multiple user roles with different
   * access requirements. Sellers can retrieve and manage images for their own
   * products to maintain their product catalog and visual presentation.
   * Administrators can access images across all products for content
   * moderation, policy enforcement, and quality control purposes. The filtering
   * capabilities enable efficient image management even for products with large
   * image galleries.
   *
   * Security considerations include role-based access control where sellers can
   * only retrieve images for products they own, while admins have platform-wide
   * access. The operation validates that the specified product exists and that
   * the requesting user has appropriate permissions based on their role and
   * product ownership.
   *
   * The response includes comprehensive image metadata from the
   * shopping_mall_product_images schema: image URLs for display, display_order
   * for gallery sequencing, is_primary flag to identify the main product image,
   * optional SKU associations for variant-specific images, alt_text for
   * accessibility, and creation timestamps. This metadata enables sophisticated
   * image management workflows including reordering, primary image selection,
   * and variant image coordination.
   *
   * The operation supports pagination to handle products with many images
   * efficiently, with configurable page size and sorting options. Sorting can
   * be applied by display_order (for gallery sequence), creation date
   * (chronological), or primary status (main images first). Filtering options
   * include SKU-specific images, primary image only, or date range filters.
   *
   * This operation integrates with the product catalog management system
   * defined in the requirements, supporting the business rule that products
   * must have at least one image and can have up to 10 images. The
   * display_order field enables the requirement that the first image (order 0)
   * serves as the main product image in listings and search results.
   *
   * Related operations that work together with this endpoint include retrieving
   * individual image details, creating new product images, updating image
   * properties (order, primary status), and deleting images. These operations
   * collectively enable complete product image lifecycle management as
   * specified in the product catalog management requirements.
   *
   * @param connection
   * @param productId Unique identifier of the product whose images are being
   *   retrieved
   * @param body Filtering, sorting, and pagination parameters for product image
   *   search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductImage.IRequest,
  ): Promise<IPageIShoppingMallProductImage> {
    try {
      return await patchShoppingMallAdminProductsProductIdImages({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific product image.
   *
   * Retrieve comprehensive details for a single product image identified by its
   * unique ID within the context of a specific product. This operation accesses
   * the shopping_mall_product_images table to return complete image metadata
   * and properties.
   *
   * The operation provides detailed image information including the storage URL
   * for the image file, the display_order position determining where the image
   * appears in the product gallery sequence, the is_primary boolean flag
   * indicating whether this is the main product image shown in listings,
   * optional shopping_mall_sku_id reference if the image is specific to a
   * product variant, alt_text for accessibility and SEO purposes, and the
   * created_at timestamp showing when the image was uploaded.
   *
   * Security and authorization are critical aspects of this operation. Sellers
   * can only retrieve images for products they own, validated by checking that
   * the product's shopping_mall_seller_id matches the authenticated seller's
   * ID. Administrators have unrestricted access to retrieve any product image
   * across the platform for moderation and quality control purposes. The
   * operation validates that both the product and image exist before returning
   * data, ensuring referential integrity.
   *
   * The image URL returned uses the image_url field from the
   * shopping_mall_product_images schema, which stores the full path or URL to
   * the image file. The URL format follows the pattern defined in the schema
   * with a maximum length of 80,000 characters to support long URI formats
   * including data URIs or cloud storage URLs with authentication tokens.
   *
   * The display_order field indicates the image's position in the product
   * gallery, where position 0 represents the first image (which is the main
   * product image by convention). This information is essential for image
   * management interfaces that allow reordering images or identifying which
   * image serves as the primary product representation.
   *
   * The optional shopping_mall_sku_id association enables variant-specific
   * images. When this field is populated, it indicates the image specifically
   * represents a particular color, size, or option combination. This supports
   * the business requirement that customers should see variant-specific images
   * when selecting product variants during shopping. When the field is null,
   * the image is a general product image applicable to all variants.
   *
   * This operation is frequently used in conjunction with image update
   * operations (changing display order, setting primary status, updating alt
   * text) and image deletion operations. Together, these operations enable
   * complete product image lifecycle management as specified in the product
   * catalog management requirements document.
   *
   * The operation returns a single image object with all properties from the
   * shopping_mall_product_images table, formatted according to the
   * IShoppingMallProductImage response type. Error scenarios include product
   * not found (404), image not found (404), and unauthorized access (403) when
   * the seller attempts to access another seller's product images.
   *
   * @param connection
   * @param productId Unique identifier of the product that owns this image
   * @param imageId Unique identifier of the specific product image to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":imageId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductImage> {
    try {
      return await getShoppingMallAdminProductsProductIdImagesImageId({
        admin,
        productId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific product image from the product gallery.
   *
   * This operation permanently removes a product image from the
   * shopping_mall_product_images table. The image is hard-deleted from the
   * database as the schema does not include soft deletion fields for product
   * images. This operation is critical for product media management, allowing
   * sellers to curate their product presentations by removing outdated,
   * incorrect, or low-quality images.
   *
   * The operation enforces strict authorization based on product ownership.
   * Sellers can only delete images from products they own (verified through
   * shopping_mall_products.shopping_mall_seller_id), while admins have
   * unrestricted access to delete any product image for content moderation
   * purposes. The system validates that the specified product and image exist
   * and that the image belongs to the specified product before processing the
   * deletion.
   *
   * Business rules enforce that products must maintain at least one image to
   * remain in active status. If the image being deleted is the only image for
   * the product, the deletion should be rejected with an appropriate error
   * message. If the deleted image is marked as the primary image (is_primary =
   * true), the system should either prevent deletion or automatically promote
   * another image to primary status to maintain product integrity.
   *
   * After successful deletion, the system recalculates the display_order values
   * for remaining images to maintain sequential ordering without gaps in the
   * gallery presentation. If the deleted image had display_order 2 in a gallery
   * with 5 images, the images with display_order 3, 4, and 5 are renumbered to
   * 2, 3, and 4 respectively.
   *
   * The operation also handles variant-specific images. If the deleted image
   * was associated with a specific SKU variant (shopping_mall_sku_id is not
   * null), removing it affects only that variant's visual representation and
   * does not impact other variants or the base product images.
   *
   * This operation integrates with the product management workflow defined in
   * the Product Catalog Management requirements. It should be available to
   * sellers through their product editing interface and to admins through the
   * admin dashboard product management tools.
   *
   * @param connection
   * @param productId Unique identifier of the product containing the image to
   *   be deleted
   * @param imageId Unique identifier of the specific product image to be
   *   deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductIdImagesImageId({
        admin,
        productId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
