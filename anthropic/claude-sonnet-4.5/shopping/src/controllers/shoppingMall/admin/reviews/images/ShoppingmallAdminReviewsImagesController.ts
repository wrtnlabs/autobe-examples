import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteShoppingMallAdminReviewsReviewIdImagesImageId } from "../../../../../providers/deleteShoppingMallAdminReviewsReviewIdImagesImageId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

@Controller("/shoppingMall/admin/reviews/:reviewId/images/:imageId")
export class ShoppingmallAdminReviewsImagesController {
  /**
   * Permanently delete a specific image from a product review.
   *
   * Removes a customer-uploaded image from a product review, operating on the
   * shopping_mall_review_images table in the Reviews namespace. This endpoint
   * serves two primary use cases: allowing customers to remove images they
   * uploaded to their own reviews, and enabling admins to remove inappropriate
   * images during content moderation workflows.
   *
   * Customers can upload up to 5 images per review (JPEG, PNG, WebP formats,
   * 5MB max per image) to provide visual evidence and context for their product
   * feedback. These images are particularly valuable for reviews involving
   * defective or damaged products, helping other customers make informed
   * purchase decisions. This deletion endpoint provides customers with control
   * over their submitted media content.
   *
   * The operation performs a permanent hard delete as the
   * shopping_mall_review_images table does not include a deleted_at column.
   * When an image is removed, the record is completely deleted from the
   * database. The system automatically recalculates the display_order values
   * for remaining images in the review to maintain sequential ordering (1, 2,
   * 3...) without gaps.
   *
   * Business rules enforced by this operation include verification that the
   * requesting user has appropriate permissions (review author for
   * customer-initiated deletions, or admin role for moderation-initiated
   * deletions). The operation validates that both the review and the image
   * exist and that the image actually belongs to the specified review before
   * proceeding with deletion.
   *
   * Related operations that work together with this endpoint include the review
   * creation and update endpoints that initially upload and manage review
   * images, and the review retrieval endpoints that display the remaining
   * images after deletion. The review moderation workflow also uses this
   * endpoint when admins identify policy-violating image content that must be
   * removed.
   *
   * @param connection
   * @param reviewId Unique identifier of the parent product review containing
   *   the image to be deleted
   * @param imageId Unique identifier of the specific review image to be
   *   permanently removed
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminReviewsReviewIdImagesImageId({
        admin,
        reviewId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
