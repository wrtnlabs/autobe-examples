import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallOrdersOrderIdItems } from "../../../../providers/patchShoppingMallOrdersOrderIdItems";

import { IPageIShoppingMallOrderItem } from "../../../../api/structures/IPageIShoppingMallOrderItem";
import { IShoppingMallOrderItem } from "../../../../api/structures/IShoppingMallOrderItem";

@Controller("/shoppingMall/orders/:orderId/items")
export class ShoppingmallOrdersItemsController {
  /**
   * Retrieve filtered list of order items for a specific order.
   *
   * Retrieve a filtered and paginated list of order items (line items) for a
   * specific order identified by orderId. This operation provides advanced
   * search capabilities for examining individual line items within an order
   * context, supporting filtering by SKU, product name, price range, quantity,
   * and item status.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and sorting options. Results can be sorted by creation date, product
   * name, quantity, unit price, or item status in ascending or descending
   * order.
   *
   * This operation is particularly valuable for admin order management
   * dashboards where detailed analysis of order composition is needed, seller
   * fulfillment workflows where individual item statuses must be tracked, and
   * customer order detail views showing itemized purchase history. It enables
   * granular inspection of order contents beyond simple order totals.
   *
   * Security considerations include role-based access control ensuring
   * customers can only view their own order items, sellers can view items from
   * orders containing their products, and admins have unrestricted access to
   * all order items. The operation respects the order ownership hierarchy
   * defined in the shopping_mall_orders table.
   *
   * The response includes complete order item information from the
   * shopping_mall_order_items table including product_name, variant_attributes,
   * product_image_url, quantity, unit_price, and item_status. This provides
   * rich context for understanding the order composition and individual item
   * lifecycle within the fulfillment process.
   *
   * @param connection
   * @param orderId Unique identifier of the order whose items are being
   *   retrieved
   * @param body Search criteria and pagination parameters for filtering order
   *   items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.IRequest,
  ): Promise<IPageIShoppingMallOrderItem> {
    try {
      return await patchShoppingMallOrdersOrderIdItems({
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
