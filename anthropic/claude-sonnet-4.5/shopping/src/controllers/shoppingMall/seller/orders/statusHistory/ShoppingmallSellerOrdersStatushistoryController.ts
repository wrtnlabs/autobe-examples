import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerOrdersOrderIdStatusHistory } from "../../../../../providers/patchShoppingMallSellerOrdersOrderIdStatusHistory";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IPageIShoppingMallOrderStatusHistory } from "../../../../../api/structures/IPageIShoppingMallOrderStatusHistory";
import { IShoppingMallOrderStatusHistory } from "../../../../../api/structures/IShoppingMallOrderStatusHistory";

@Controller("/shoppingMall/seller/orders/:orderId/statusHistory")
export class ShoppingmallSellerOrdersStatushistoryController {
  /**
   * Retrieve the complete status change audit trail for a specific order with
   * filtering and pagination.
   *
   * Retrieves the comprehensive audit trail of all status transitions for a
   * specific order from the shopping_mall_order_status_history table as defined
   * in the Prisma schema. This operation provides complete visibility into the
   * order lifecycle, documenting every state change from initial placement
   * through final completion, cancellation, or refund.
   *
   * Each status history record includes the previous status, new status,
   * timestamp of the change, reason for the transition, optional notes, and
   * identification of the actor who triggered the change (customer, seller,
   * admin, or system-generated). This detailed audit trail is essential for
   * order tracking, customer service, dispute resolution, and compliance with
   * business audit requirements.
   *
   * The operation validates that the requesting user has appropriate
   * permissions to view the order's status history based on their role and
   * relationship to the order. Customers can retrieve status history only for
   * orders they placed (validated by matching shopping_mall_customer_id).
   * Sellers can retrieve status history for orders containing their products
   * (validated by matching shopping_mall_seller_id). Admins have unrestricted
   * access to view status history for any order across the platform for
   * oversight and dispute resolution purposes.
   *
   * The request body supports advanced filtering capabilities to narrow down
   * the status history results. Filters include date range (from/to
   * timestamps), specific status values (to find transitions to particular
   * states like 'shipped' or 'delivered'), actor types (customer-initiated,
   * seller-initiated, admin-initiated, system-generated), and change reasons.
   * These filters enable efficient retrieval of relevant status events without
   * overwhelming users with complete histories for long-lived orders.
   *
   * Pagination is implemented to handle orders with extensive status histories
   * efficiently. The response includes standard pagination metadata (total
   * count, page number, page size, has next page) along with the sorted status
   * history records. Results are ordered by created_at timestamp in descending
   * order (most recent changes first) by default, providing immediate
   * visibility into the latest order state transitions.
   *
   * This operation integrates with the order status lifecycle defined in the
   * Order Management and Tracking requirements document. It provides read
   * access to the append-only audit trail that tracks all order state
   * transitions according to the valid status transition rules (pending_payment
   * → payment_confirmed → processing → shipped → in_transit → out_for_delivery
   * → delivered → completed, with possible cancellation and refund branches).
   *
   * The status history data includes both user-initiated actions (customer
   * cancellation requests, seller shipment updates) and system-generated events
   * (automatic payment confirmation, carrier tracking updates, auto-completion
   * after 7 days). The is_system_generated flag distinguishes between manual
   * and automated status changes, enabling analysis of order workflow
   * automation effectiveness.
   *
   * Related operations include retrieving order details, updating order status
   * (seller and admin operations), and processing cancellations or refunds.
   * This endpoint provides the temporal dimension of order data, complementing
   * the current order state with complete historical context.
   *
   * @param connection
   * @param orderId Unique identifier of the order whose status history is being
   *   retrieved
   * @param body Search criteria for filtering order status history including
   *   date range, status values, actor types, and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderStatusHistory.IRequest,
  ): Promise<IPageIShoppingMallOrderStatusHistory> {
    try {
      return await patchShoppingMallSellerOrdersOrderIdStatusHistory({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
