import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchShoppingMallSellerCancellations } from "../../../../providers/patchShoppingMallSellerCancellations";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";

import { IPageIShoppingMallCancellation } from "../../../../api/structures/IPageIShoppingMallCancellation";
import { IShoppingMallCancellation } from "../../../../api/structures/IShoppingMallCancellation";

@Controller("/shoppingMall/seller/cancellations")
export class ShoppingmallSellerCancellationsController {
  /**
   * Search and retrieve filtered list of order cancellation records for
   * sellers.
   *
   * Retrieves a comprehensive, paginated list of order cancellation records
   * from the shopping_mall_cancellations table with advanced filtering,
   * searching, and sorting capabilities. This seller-specific endpoint enables
   * sellers to review cancellation requests for orders containing their
   * products.
   *
   * Sellers use this endpoint to review cancellation requests for orders
   * containing their products. The operation filters to show cancellations
   * where the seller is either the requester (seller-initiated cancellations
   * due to stock issues) or the approver (customer-requested cancellations
   * requiring seller approval). This enables sellers to manage pending
   * cancellation requests within the required 24-hour response window and track
   * refund processing status.
   *
   * The operation supports sophisticated filtering including cancellation
   * status (pending_approval, approved, rejected, completed), date range
   * queries for requested_at timestamp, refund processing status, and approval
   * workflow states. Sorting options include most recent cancellations first,
   * highest refund amounts, and cancellations approaching approval deadlines.
   * Sellers can prioritize cancellations requiring their immediate action.
   *
   * Security and authorization ensure that sellers only see cancellations
   * related to their products, maintaining data privacy across the multi-vendor
   * marketplace. The operation validates seller identity and filters results
   * appropriately.
   *
   * The response includes complete cancellation details: order information,
   * requester and approver identities, cancellation reason and notes, refund
   * amounts, processing status, and complete timeline from request through
   * approval to refund completion. Pagination enables efficient handling of
   * large result sets, critical for sellers managing high volumes of
   * cancellations.
   *
   * @param connection
   * @param body Search criteria, filters, sorting options, and pagination
   *   parameters for cancellation queries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallCancellation.IRequest,
  ): Promise<IPageIShoppingMallCancellation> {
    try {
      return await patchShoppingMallSellerCancellations({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
