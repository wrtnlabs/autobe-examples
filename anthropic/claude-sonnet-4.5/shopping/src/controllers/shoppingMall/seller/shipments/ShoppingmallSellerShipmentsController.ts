import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerShipments } from "../../../../providers/postShoppingMallSellerShipments";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerShipmentsShipmentId } from "../../../../providers/putShoppingMallSellerShipmentsShipmentId";

import { IShoppingMallShipment } from "../../../../api/structures/IShoppingMallShipment";

@Controller("/shoppingMall/seller/shipments")
export class ShoppingmallSellerShipmentsController {
  /**
   * Create a new shipment record with tracking information.
   *
   * Create a new shipment record to track package delivery when a seller marks
   * an order as shipped. This operation is a critical step in the order
   * fulfillment workflow, transitioning orders from the preparing_shipment
   * state to the shipped state and initiating customer tracking capabilities.
   *
   * The operation creates a record in the shopping_mall_shipments table with
   * all required shipment information including the associated order ID, the
   * seller creating the shipment, carrier name, tracking number, shipping
   * method, initial shipment status, and shipped timestamp. The shipment record
   * enables real-time tracking updates from carrier APIs and provides customers
   * with delivery visibility.
   *
   * Security considerations include strict authorization enforcement to ensure
   * only the seller who owns the order can create shipment records for that
   * order. The system validates that the requesting seller has permission to
   * fulfill the specified order by checking the order's shopping_mall_seller_id
   * matches the authenticated seller's ID. Admins can create shipments for any
   * order as part of their platform oversight capabilities.
   *
   * Business logic validation includes verifying that the order exists and is
   * in an appropriate state for shipping (typically confirmed or
   * preparing_shipment status). The operation validates the tracking number
   * format for the selected carrier to ensure customers receive valid tracking
   * links. The shipping method provided must match one of the standard shipping
   * methods (standard, express, overnight, free_shipping) configured for the
   * platform.
   *
   * Relationship to underlying database entities includes the
   * shopping_mall_order_id foreign key linking the shipment to the specific
   * order being fulfilled, and the created_by_seller_id foreign key identifying
   * which seller created the shipment record for audit trail and seller
   * performance tracking. The shipment record captures the shipping method
   * selected at checkout and the carrier_name chosen by the seller for package
   * transportation.
   *
   * Expected behavior includes creating the shipment record with initial
   * shipment_status set to 'label_created' or 'picked_up', capturing the
   * shipped_at timestamp as the current time, setting the
   * estimated_delivery_date based on the shipping method and carrier estimates,
   * and returning the created shipment record with its generated unique ID. The
   * operation triggers automatic order status updates changing the order status
   * to 'shipped' and sends shipment notifications to customers with tracking
   * information within 5 minutes as specified in the order management business
   * rules.
   *
   * @param connection
   * @param body Shipment creation data including order reference, carrier
   *   information, tracking number, shipping method, and shipment status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallShipment.ICreate,
  ): Promise<IShoppingMallShipment> {
    try {
      return await postShoppingMallSellerShipments({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shipping information and status for a specific shipment.
   *
   * Updates comprehensive shipping and tracking information for an existing
   * shipment record in the shopping_mall_shipments table. This operation
   * enables sellers to modify shipment details after initial creation,
   * including correcting tracking numbers, updating carrier information,
   * changing shipment status, and adjusting estimated delivery dates.
   *
   * Sellers use this endpoint to maintain accurate shipping information
   * throughout the delivery lifecycle. Common use cases include correcting
   * initially entered tracking numbers, updating shipment status based on
   * carrier notifications, adding delivery signatures or proof of delivery, and
   * revising estimated delivery dates when carrier schedules change.
   *
   * Security considerations ensure that only the seller who created the
   * shipment (matching created_by_seller_id) can update it. Admins have
   * override capabilities for dispute resolution and customer service
   * escalations. The operation validates that the shipment exists, belongs to
   * the requesting seller, and that status transitions follow valid shipment
   * lifecycle rules.
   *
   * The update operation validates tracking number formats for the specified
   * carrier, ensures shipment status transitions are logical (e.g., cannot move
   * from 'delivered' back to 'in_transit'), and maintains audit trail by
   * updating the updated_at timestamp. All shipment updates trigger
   * notifications to customers when significant status changes occur, such as
   * status changes to 'out_for_delivery' or 'delivered'.
   *
   * This operation integrates with the order management system by updating
   * corresponding order status when shipment status changes. For example,
   * marking a shipment as 'delivered' triggers the order status to update to
   * 'delivered' as well, maintaining consistency across the order fulfillment
   * workflow.
   *
   * @param connection
   * @param shipmentId Unique identifier of the shipment to update
   * @param body Updated shipment information including tracking details,
   *   status, and delivery estimates
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shipmentId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipment.IUpdate,
  ): Promise<IShoppingMallShipment> {
    try {
      return await putShoppingMallSellerShipmentsShipmentId({
        seller,
        shipmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
