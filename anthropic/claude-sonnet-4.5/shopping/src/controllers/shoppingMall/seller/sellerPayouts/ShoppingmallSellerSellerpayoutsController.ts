import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallSellerSellerPayoutsPayoutId } from "../../../../providers/getShoppingMallSellerSellerPayoutsPayoutId";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";

import { IShoppingMallSellerPayout } from "../../../../api/structures/IShoppingMallSellerPayout";

@Controller("/shoppingMall/seller/sellerPayouts/:payoutId")
export class ShoppingmallSellerSellerpayoutsController {
  /**
   * Retrieve detailed information for a specific seller payout by payout ID.
   *
   * Retrieve complete details of a specific seller payout record by its unique
   * identifier. This operation provides comprehensive financial information
   * about a payout settlement including the settlement period covered, total
   * order revenue, platform commission deductions, refund deductions, payment
   * processing fees, and the final net payout amount transferred to the
   * seller.
   *
   * This endpoint is critical for financial transparency and reconciliation.
   * Sellers use it to verify their earnings, understand deductions, and confirm
   * payout processing status. Administrators use it to audit payout
   * calculations, investigate payout issues, and ensure accurate financial
   * settlements.
   *
   * The payout record corresponds to the shopping_mall_seller_payouts table in
   * the Prisma schema, which tracks periodic payment settlements to sellers
   * after deducting platform commission and fees. Each payout covers a specific
   * time period (typically weekly or monthly) and aggregates all eligible
   * orders delivered during that period.
   *
   * Security considerations include role-based access control where sellers can
   * only view their own payouts, while admins have platform-wide access to all
   * seller payouts. The endpoint validates that the requesting user has
   * appropriate permissions before returning payout details.
   *
   * The response includes the payout status (pending, processing, completed,
   * failed, on_hold), payout method (bank_transfer, paypal, etc.), and
   * processing timestamps. For completed payouts, it includes the payout
   * reference number for bank reconciliation. For failed payouts, it provides
   * failure reasons to help resolve payout issues.
   *
   * This operation integrates with the seller order management system to show
   * which orders contributed to the payout and with the refund system to show
   * refund deductions. It also displays commission calculations transparently
   * so sellers understand platform fee deductions.
   *
   * @param connection
   * @param payoutId Unique identifier of the seller payout record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("payoutId")
    payoutId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSellerPayout> {
    try {
      return await getShoppingMallSellerSellerPayoutsPayoutId({
        seller,
        payoutId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
