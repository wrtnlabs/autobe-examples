import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCancellationsCancellationId } from "../../../providers/getShoppingMallCancellationsCancellationId";

import { IShoppingMallCancellation } from "../../../api/structures/IShoppingMallCancellation";

@Controller("/shoppingMall/cancellations/:cancellationId")
export class ShoppingmallCancellationsController {
  /**
   * Retrieve detailed information for a specific order cancellation request.
   *
   * Retrieve comprehensive details for a specific order cancellation request
   * identified by its unique cancellation ID. This operation provides complete
   * visibility into the cancellation workflow including the requester
   * (customer, seller, or admin), the order being cancelled, cancellation
   * reason and notes, approval status, refund amount, and processing
   * timestamps.
   *
   * The cancellation detail includes information about who requested the
   * cancellation and who approved it (if applicable), enabling full
   * transparency in the cancellation approval workflow. The response shows the
   * current cancellation_status which can be pending_approval, approved,
   * rejected, or completed, allowing users to understand where the cancellation
   * request stands in the processing pipeline.
   *
   * This endpoint is accessible by multiple user roles with different
   * permission levels. Customers can view cancellations for their own orders to
   * track the status of their cancellation requests. Sellers can view
   * cancellations for orders containing their products to review and respond to
   * cancellation requests. Admins have full access to view any cancellation
   * request across the platform for oversight and dispute resolution purposes.
   *
   * The operation returns denormalized order information including order_number
   * and order details to provide complete context without requiring additional
   * API calls. Refund processing status is included through the
   * refund_processed boolean flag and refund_amount field, showing whether the
   * financial reversal has been completed.
   *
   * Security considerations include role-based authorization ensuring customers
   * can only access cancellations for their own orders, sellers can only access
   * cancellations for orders involving their products, and admins have
   * unrestricted access. The endpoint validates that the cancellation ID exists
   * and returns appropriate error responses for invalid or inaccessible
   * cancellation requests.
   *
   * This operation integrates with the shopping_mall_orders table to retrieve
   * order context, and references the shopping_mall_customers,
   * shopping_mall_sellers, and shopping_mall_admins tables through the
   * polymorphic requester and approver relationships documented in the Prisma
   * schema.
   *
   * @param connection
   * @param cancellationId Unique identifier of the target cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCancellation> {
    try {
      return await getShoppingMallCancellationsCancellationId({
        cancellationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
