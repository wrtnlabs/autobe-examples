import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallShipments } from "../../../providers/patchShoppingMallShipments";
import { getShoppingMallShipmentsShipmentId } from "../../../providers/getShoppingMallShipmentsShipmentId";

import { IPageIShoppingMallShipment } from "../../../api/structures/IPageIShoppingMallShipment";
import { IShoppingMallShipment } from "../../../api/structures/IShoppingMallShipment";

@Controller("/shoppingMall/shipments")
export class ShoppingmallShipmentsController {
  /**
   * Search and retrieve filtered list of shipments.
   *
   * Retrieve a filtered and paginated list of shipments from the
   * shopping_mall_shipments table with advanced search capabilities for finding
   * shipments based on multiple criteria including carrier name, tracking
   * number, shipping method, shipment status, and date ranges.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and sorting options. Shipments can be sorted by shipped_at date,
   * estimated_delivery_date, actual_delivery_date, shipment_status, or
   * carrier_name in ascending or descending order to facilitate efficient
   * logistics management.
   *
   * Security considerations include role-based access control ensuring sellers
   * can only view shipments they created for their orders, customers can view
   * shipments for their orders, and admins have unrestricted access to all
   * platform shipments. The operation enforces data access boundaries based on
   * the authenticated user's role and ownership relationships defined in the
   * shopping_mall_orders and shopping_mall_sellers tables.
   *
   * This operation integrates with the shipping and fulfillment workflow
   * defined in the order management requirements, providing visibility into the
   * current state of all shipments across the platform. It enables sellers to
   * manage their fulfillment pipeline, admins to monitor logistics performance,
   * and supports operational dashboards displaying shipment statistics and
   * delivery timelines.
   *
   * The response includes complete shipment information from the
   * shopping_mall_shipments table including carrier_name, tracking_number,
   * shipping_method, shipment_status, shipped_at, estimated_delivery_date,
   * actual_delivery_date, and delivery_signature. This provides comprehensive
   * tracking data for logistics coordination and customer communication about
   * delivery expectations.
   *
   * Related operations that might be used together include order retrieval
   * endpoints to view the associated order details, order status history to
   * understand the complete order lifecycle, and seller order management
   * endpoints for fulfillment workflows.
   *
   * @param connection
   * @param body Search criteria, filters, and pagination parameters for
   *   shipment retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallShipment.IRequest,
  ): Promise<IPageIShoppingMallShipment> {
    try {
      return await patchShoppingMallShipments({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed shipment information by shipment ID.
   *
   * Retrieve comprehensive shipping and tracking information for a specific
   * shipment identified by the shipment ID. This operation provides complete
   * visibility into the shipment lifecycle including carrier details, tracking
   * numbers, current status, estimated and actual delivery dates, and delivery
   * confirmation information.
   *
   * The operation accesses the shopping_mall_shipments table in the Prisma
   * schema and returns all shipment attributes including the carrier name,
   * tracking number, shipping method (standard, express, overnight,
   * free_shipping), current shipment status (label_created, picked_up,
   * in_transit, out_for_delivery, delivered, exception, failed_delivery), and
   * complete timeline information with shipped date, estimated delivery date,
   * and actual delivery date when available.
   *
   * Security considerations include role-based access control to ensure
   * customers can only view shipments for their own orders, sellers can view
   * shipments they created for their products, and admins have full visibility
   * across all platform shipments. The endpoint validates that the requested
   * shipment exists and that the requesting user has permission to access the
   * shipment information based on their role and relationship to the associated
   * order.
   *
   * This operation integrates with the order management system as shipments are
   * directly linked to orders through the shopping_mall_order_id foreign key.
   * The shipment data includes the seller who created the shipment record via
   * the created_by_seller_id relationship, enabling proper attribution and
   * seller-specific filtering.
   *
   * Expected behavior includes returning the complete shipment record with all
   * fields from the shopping_mall_shipments table including id,
   * shopping_mall_order_id, created_by_seller_id, carrier_name,
   * tracking_number, shipping_method, shipment_status, shipped_at,
   * estimated_delivery_date, actual_delivery_date, delivery_signature,
   * created_at, and updated_at timestamps. The response enables customers to
   * track their packages, sellers to verify shipping information they
   * submitted, and admins to monitor shipment processing across the platform.
   *
   * @param connection
   * @param shipmentId Unique identifier of the target shipment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shipmentId")
  public async at(
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallShipment> {
    try {
      return await getShoppingMallShipmentsShipmentId({
        shipmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
