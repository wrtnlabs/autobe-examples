import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallRefunds } from "../../../providers/patchShoppingMallRefunds";
import { getShoppingMallRefundsRefundId } from "../../../providers/getShoppingMallRefundsRefundId";

import { IPageIShoppingMallRefund } from "../../../api/structures/IPageIShoppingMallRefund";
import { IShoppingMallRefund } from "../../../api/structures/IShoppingMallRefund";

@Controller("/shoppingMall/refunds")
export class ShoppingmallRefundsController {
  /**
   * Retrieve filtered and paginated list of refund transactions with advanced
   * search capabilities.
   *
   * Retrieves a comprehensive, filtered, and paginated list of refund
   * transactions from the shopping_mall_refunds table. This operation provides
   * advanced search and filtering capabilities for customers to track their
   * refund history, sellers to manage refund processing for their orders, and
   * administrators to oversee all platform refund operations.
   *
   * The operation supports extensive filtering criteria including refund status
   * (pending, processing, completed, failed), date ranges for refund initiation
   * and completion, specific order references, customer identifiers, seller
   * identifiers, refund amount ranges, refund reasons (order_cancellation,
   * defective_product, customer_request, wrong_item, policy_violation), and
   * actor types (customer, seller, admin, system). These filters enable users
   * to quickly locate specific refunds or analyze refund patterns.
   *
   * Security considerations include role-based access control where customers
   * can only view their own refunds, sellers can view refunds related to their
   * products, and administrators have unrestricted access to all platform
   * refunds. The operation implements permission checks based on the
   * authenticated user's role and ownership relationships defined in the
   * shopping_mall_refunds table.
   *
   * The response includes detailed refund information such as refund amounts,
   * original payment transaction references, refund request associations,
   * processing status through payment gateway, actor information (who initiated
   * the refund), timestamps for key lifecycle events (processed_at,
   * completed_at, failed_at), failure reasons if applicable, and administrative
   * notes. This comprehensive data enables full refund lifecycle tracking and
   * financial reconciliation.
   *
   * Pagination parameters support efficient retrieval of large refund datasets,
   * with configurable page sizes and sorting options by refund date, refund
   * amount, completion date, or refund status. The operation integrates with
   * the shopping_mall_payment_transactions, shopping_mall_refund_requests,
   * shopping_mall_orders, shopping_mall_customers, shopping_mall_sellers, and
   * shopping_mall_admins tables to provide complete refund context.
   *
   * Related operations include POST /refunds for initiating new refund
   * transactions, GET /refunds/{refundId} for retrieving detailed information
   * about a specific refund, and PUT /refunds/{refundId} for updating refund
   * processing status or administrative notes.
   *
   * @param connection
   * @param body Search criteria, filtering parameters, pagination settings, and
   *   sorting options for refund transaction retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallRefund.IRequest,
  ): Promise<IPageIShoppingMallRefund> {
    try {
      return await patchShoppingMallRefunds({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific refund transaction.
   *
   * Retrieve comprehensive details for a specific refund transaction identified
   * by its unique refund ID. This operation provides complete refund
   * information including the original payment transaction reference,
   * associated refund request details (if refund was initiated through customer
   * refund request workflow), order information, refund amount processed,
   * current processing status, payment gateway transaction identifier, and the
   * actor who initiated the refund.
   *
   * The refund record contains critical financial data for reconciliation and
   * compliance. It tracks the complete refund lifecycle from initiation through
   * payment processing to completion or failure. The response includes
   * timestamps for each processing stage: when the refund was created, when
   * payment processing began, when it completed successfully, or when it failed
   * with detailed failure reasons.
   *
   * The initiated_by_type field indicates whether the refund was triggered by a
   * customer (through refund request), seller (through order cancellation),
   * admin (dispute resolution or override), or system (automatic processing).
   * The corresponding initiated_by_*_id foreign key provides the specific actor
   * reference.
   *
   * Security and authorization are role-based: customers can only retrieve
   * refunds for their own orders, sellers can retrieve refunds related to
   * orders for their products, and admins have unrestricted access to all
   * platform refunds for oversight and financial management. The system
   * validates refund ownership before returning data to prevent unauthorized
   * access to financial information.
   *
   * This operation is commonly used in customer service workflows for refund
   * status inquiries, financial reconciliation processes, dispute resolution
   * investigations, and audit trail reviews. The detailed refund information
   * enables transparent communication with customers about refund processing
   * timelines and provides sellers and admins with complete visibility into
   * refund operations.
   *
   * @param connection
   * @param refundId Unique identifier of the target refund transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":refundId")
  public async at(
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallRefund> {
    try {
      return await getShoppingMallRefundsRefundId({
        refundId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
