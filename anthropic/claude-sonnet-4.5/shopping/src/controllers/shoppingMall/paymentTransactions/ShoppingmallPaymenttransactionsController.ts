import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallPaymentTransactions } from "../../../providers/patchShoppingMallPaymentTransactions";
import { getShoppingMallPaymentTransactionsTransactionId } from "../../../providers/getShoppingMallPaymentTransactionsTransactionId";

import { IPageIShoppingMallPaymentTransaction } from "../../../api/structures/IPageIShoppingMallPaymentTransaction";
import { IShoppingMallPaymentTransaction } from "../../../api/structures/IShoppingMallPaymentTransaction";

@Controller("/shoppingMall/paymentTransactions")
export class ShoppingmallPaymenttransactionsController {
  /**
   * Search and retrieve filtered, paginated payment transaction records.
   *
   * Retrieve a comprehensive list of payment transactions from the
   * shopping_mall_payment_transactions table with advanced filtering,
   * searching, and sorting capabilities. This operation provides customers
   * access to their payment history, enables administrators to monitor all
   * platform payment operations, and supports financial reconciliation and
   * audit requirements.
   *
   * The payment transaction entity stores complete payment processing records
   * including payment gateway details, transaction status tracking, payment
   * method information, and authorization/capture timestamps. Each transaction
   * represents a financial payment processed through integrated payment
   * gateways (Stripe, PayPal, etc.) for specific customer orders.
   *
   * Security considerations include role-based filtering where customers can
   * only view their own payment transactions, while administrators have access
   * to all platform payment records. Payment information is returned in
   * PCI-compliant format showing only last 4 digits of card numbers and
   * tokenized payment references, never exposing full card numbers or sensitive
   * payment credentials.
   *
   * The request supports filtering by payment status (pending, authorized,
   * captured, failed, cancelled, refunded), payment type (credit_card,
   * debit_card, paypal, digital wallets), payment gateway provider, transaction
   * date ranges, and amount ranges. Sorting options include transaction date,
   * amount, and status for flexible data analysis and reporting.
   *
   * This operation integrates with the shopping_mall_payment_transactions table
   * which references shopping_mall_customers for transaction ownership and
   * shopping_mall_payment_methods for saved payment instrument details. The
   * response includes transaction metadata such as gateway transaction IDs,
   * authorization timestamps, failure reasons, and billing address snapshots
   * for comprehensive payment audit trails.
   *
   * Related operations include retrieving individual transaction details,
   * processing refunds through the refunds endpoints, and managing saved
   * payment methods. This search endpoint is the primary interface for payment
   * history access and financial reporting across the platform.
   *
   * @param connection
   * @param body Search criteria, filtering parameters, pagination settings, and
   *   sorting options for payment transaction retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallPaymentTransaction.IRequest,
  ): Promise<IPageIShoppingMallPaymentTransaction.ISummary> {
    try {
      return await patchShoppingMallPaymentTransactions({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific payment transaction by ID.
   *
   * Retrieve complete detailed information about a specific payment transaction
   * from the shopping_mall_payment_transactions table. This operation provides
   * comprehensive transaction data including payment processing status,
   * authorization details, capture timestamps, payment method information,
   * billing address snapshot, and gateway response details.
   *
   * The payment transaction entity represents a complete financial payment
   * record processed through payment gateway integrations. Each transaction
   * captures critical information for audit compliance, fraud prevention, and
   * financial reconciliation including the payment gateway provider name,
   * unique gateway transaction identifier, payment authorization and capture
   * timestamps, and detailed failure information when payments do not succeed.
   *
   * Security considerations enforce strict access control where customers can
   * only access their own payment transaction details, while administrators
   * have unrestricted access to all transaction records for platform oversight
   * and dispute resolution. All sensitive payment information is returned in
   * PCI-compliant format, displaying only the last 4 digits of card numbers and
   * tokenized references without exposing complete card numbers or CVV codes.
   *
   * The response includes complete transaction lifecycle information with
   * authorization timestamps, capture timestamps, failure timestamps and
   * reasons if applicable, payment attempt number for retry tracking, and raw
   * gateway response JSON for technical troubleshooting. The billing address
   * snapshot preserves the billing information at time of transaction for audit
   * and fraud detection purposes.
   *
   * This operation integrates with the broader payment ecosystem by referencing
   * the associated shopping_mall_customer who made the payment, the optional
   * shopping_mall_payment_method if a saved payment instrument was used, and
   * connects to potential shopping_mall_refunds if the transaction has been
   * reversed. The transaction details enable comprehensive financial reporting,
   * dispute investigation, and payment troubleshooting workflows.
   *
   * Related operations include searching payment transactions through the index
   * endpoint, processing refunds through the refunds API, and managing payment
   * methods for customers. This detail endpoint serves as the authoritative
   * source for complete payment transaction information required for customer
   * service, financial reconciliation, and compliance auditing.
   *
   * @param connection
   * @param transactionId Unique identifier of the payment transaction to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":transactionId")
  public async at(
    @TypedParam("transactionId")
    transactionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallPaymentTransaction> {
    try {
      return await getShoppingMallPaymentTransactionsTransactionId({
        transactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
