import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCategories } from "../../../providers/patchShoppingMallCategories";
import { getShoppingMallCategoriesCategoryId } from "../../../providers/getShoppingMallCategoriesCategoryId";

import { IPageIShoppingMallCategory } from "../../../api/structures/IPageIShoppingMallCategory";
import { IShoppingMallCategory } from "../../../api/structures/IShoppingMallCategory";

@Controller("/shoppingMall/categories")
export class ShoppingmallCategoriesController {
  /**
   * Search and retrieve filtered, paginated list of product categories.
   *
   * Retrieves a comprehensive list of product categories with support for
   * advanced filtering, searching, sorting, and pagination. This operation
   * enables both customer-facing category navigation and administrative
   * category management by providing flexible query capabilities.
   *
   * The hierarchical category structure supports unlimited depth parent-child
   * relationships, allowing the request to filter by parent category, depth
   * level, or retrieve entire category trees. Categories include essential
   * information such as unique identifiers, names, descriptions, URL-friendly
   * slugs, display ordering, and active status flags.
   *
   * For customer-facing use cases, the operation filters out inactive
   * categories (is_active = false) and soft-deleted categories (deleted_at is
   * not null) to show only currently available category options. For
   * administrative use cases, the request can specify filters to include
   * inactive or deleted categories for complete category management and audit
   * purposes.
   *
   * The operation supports searching categories by name or description using
   * full-text search capabilities, filtering by active status, parent category
   * relationships, and sorting by display order, name, or creation date.
   * Pagination parameters control the number of categories returned per page
   * and enable efficient navigation through large category hierarchies.
   *
   * Security considerations include public access for customer category
   * browsing while restricting access to inactive/deleted categories based on
   * user role. The response provides category data suitable for rendering
   * navigation menus, breadcrumb trails, filter options, and administrative
   * category management interfaces.
   *
   * @param connection
   * @param body Search criteria, filtering options, sorting preferences, and
   *   pagination parameters for category retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallCategory.IRequest,
  ): Promise<IPageIShoppingMallCategory> {
    try {
      return await patchShoppingMallCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific product category by ID.
   *
   * Retrieve complete details for a single product category identified by its
   * unique category ID. This operation fetches comprehensive category
   * information from the shopping_mall_categories table, which implements a
   * hierarchical taxonomy structure supporting unlimited depth parent-child
   * relationships for organizing the product catalog.
   *
   * The endpoint returns all category attributes including the category name,
   * optional description, URL-friendly slug, display order for sorting, active
   * status indicating visibility to customers, parent category reference for
   * hierarchy navigation, and timestamps for creation and modification
   * tracking. This information is essential for displaying category pages,
   * generating breadcrumb navigation paths, managing category-based product
   * filtering, and understanding the category's position within the overall
   * taxonomy structure.
   *
   * Security considerations include public read access to active categories for
   * customer browsing, while inactive or soft-deleted categories should be
   * filtered from customer-facing results. Administrators and sellers need
   * access to complete category information including inactive categories for
   * product management and catalog organization purposes.
   *
   * This operation integrates with the product catalog system where each
   * product must be assigned to exactly one category. The hierarchical
   * structure enables customers to navigate from broad classifications (root
   * categories like 'Electronics') through increasingly specific subcategories
   * (e.g., 'Computers' > 'Laptops' > 'Gaming Laptops'). The category slug is
   * used for SEO-friendly URLs in category browsing pages, and the
   * display_order field controls the presentation sequence of categories at the
   * same hierarchy level.
   *
   * The response includes the category's parent_id reference, which enables
   * construction of complete category paths for breadcrumb navigation and
   * understanding category hierarchy depth. Root-level categories have null
   * parent_id values. The is_active flag indicates whether the category is
   * currently visible to customers, while the deleted_at timestamp supports
   * soft deletion for preserving historical product-category associations
   * without displaying the category in active navigation.
   *
   * This endpoint is typically used when customers click on category navigation
   * elements, when sellers select categories for product listings, when
   * administrators manage the category hierarchy, and when generating
   * category-specific product filters and faceted navigation in search
   * results.
   *
   * @param connection
   * @param categoryId Unique identifier of the product category to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCategory> {
    try {
      return await getShoppingMallCategoriesCategoryId({
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
