import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerLogoutAll } from "../../../../../providers/postAuthCustomerLogoutAll";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";

import { IShoppingMallCustomer } from "../../../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer/logout/all")
export class AuthCustomer_logoutAllController {
  /**
   * Logout customer from all devices by revoking all session tokens
   * (shopping_mall_sessions table).
   *
   * Terminates all active sessions for the authenticated customer across all
   * devices by revoking all refresh tokens associated with their account. This
   * operation implements the 'logout from all devices' functionality defined in
   * the Session Management and Multi-Device Support sections of the User Roles
   * and Authentication requirements, providing customers with the ability to
   * secure their account by ending all active sessions simultaneously.
   *
   * This endpoint requires authentication via valid JWT access token in the
   * Authorization header. The system extracts the customer's userId from the
   * token payload to identify the customer whose sessions should be terminated.
   * Unlike the single-session logout endpoint, this operation does not require
   * the refresh token in the request body because it targets all sessions
   * rather than a specific session.
   *
   * The system queries the shopping_mall_sessions table to retrieve all session
   * records where customer_id matches the authenticated customer and is_revoked
   * is false, indicating currently active sessions that have not been
   * previously revoked. This query returns all concurrent sessions the customer
   * has established across different devices, browsers, and locations - for
   * example, sessions from their mobile phone, home computer, work computer,
   * and tablet.
   *
   * For each active session found, the system performs a batch update setting
   * is_revoked to true and revoked_at to the current timestamp. This bulk
   * revocation operation immediately invalidates all refresh tokens associated
   * with the customer's account, preventing any of them from being used to
   * generate new access tokens. The revocation is atomic to ensure all sessions
   * are terminated together without partial failures. The system logs the
   * session termination in each session record with the revoked_at timestamp
   * for security auditing and session history tracking.
   *
   * After revoking all refresh tokens, existing access tokens remain
   * technically valid until their individual 30-minute expirations, but they
   * cannot be renewed. This means the customer will be fully logged out from
   * all devices within 30 minutes at most. If the client applications are
   * properly implemented to discard access tokens upon receiving logout
   * confirmation, the customer is logged out immediately across all devices.
   * The 'logout from all devices' operation is typically used in security
   * scenarios such as: (1) customer suspects account compromise, (2) customer
   * changes password and wants to force re-authentication everywhere, (3)
   * customer lost a device and wants to protect their account.
   *
   * The operation returns a success response confirming all sessions have been
   * revoked and the customer will be logged out from all devices. The response
   * includes the count of sessions that were terminated to provide
   * transparency. The client application receiving this response should
   * immediately discard stored tokens and redirect the customer to the login
   * page. All other devices will be forced to re-authenticate when their access
   * tokens expire (within 30 minutes) or when they next attempt to refresh
   * their tokens (immediate failure due to revoked refresh token).
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async logoutAll(
    @CustomerAuth()
    customer: CustomerPayload,
  ): Promise<IShoppingMallCustomer.ILogoutAllResponse> {
    try {
      return await postAuthCustomerLogoutAll({
        customer,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
