import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { deleteAuthAdminSessionsAll } from "../../../../../providers/deleteAuthAdminSessionsAll";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IShoppingMallAdmin } from "../../../../../api/structures/IShoppingMallAdmin";

@Controller("/auth/admin/sessions/all")
export class AuthAdminSessionsAllController {
  /**
   * Revoke all admin sessions across all devices for complete logout.
   *
   * Terminates all active sessions for the authenticated admin across all
   * devices, forcing re-authentication everywhere. This endpoint implements the
   * 'logout from all devices' security feature, enabling admins to completely
   * reset their account's login state in case of security concerns or when
   * changing critical account settings.
   *
   * The logout from all devices process requires the admin to be authenticated
   * with a valid JWT access token. The system extracts the admin's userId from
   * the token payload to identify which admin's sessions to revoke.
   *
   * This operation is typically used in the following scenarios: the admin
   * suspects their account may have been compromised and wants to terminate all
   * access immediately, the admin is changing their password and wants to
   * ensure all devices re-authenticate with the new password, the admin sees
   * unfamiliar sessions in their active sessions list and wants to terminate
   * everything as a precaution, or the admin is completing a security review
   * and wants to ensure only currently authorized devices have access.
   *
   * The system queries the shopping_mall_sessions table for all session records
   * matching the following criteria: user_type='admin', admin_id equals the
   * authenticated admin's ID, and is_revoked=false (only active sessions). This
   * query identifies all currently valid sessions across all devices.
   *
   * For each active session found, the system updates the session record:
   * is_revoked is set to true, and revoked_at is set to the current timestamp.
   * This marks every session as terminated simultaneously.
   *
   * Unlike the single session revocation endpoint, this operation revokes ALL
   * sessions INCLUDING the current session making the request. This means the
   * admin who initiates this operation will also be logged out from their
   * current device immediately after the response is returned.
   *
   * All revoked refresh tokens can no longer be used to generate new access
   * tokens. Any device attempting to use a revoked refresh token will receive
   * 401 Unauthorized with error code AUTH_INVALID_TOKEN, forcing the user to
   * log in again.
   *
   * The system counts how many sessions were revoked (typically ranges from 1
   * to 10+ for admins who log in from multiple devices frequently). This count
   * is included in the response to inform the admin how many sessions were
   * terminated.
   *
   * A security notification email is sent to the admin's email address
   * confirming that all sessions were revoked. The email includes a list of all
   * terminated sessions with device information (device_name, browser_name,
   * operating_system, approximate_location, last_activity_at) so the admin can
   * review which devices were logged out. The email emphasizes: 'If you did not
   * initiate this action, your account may be compromised. Please contact
   * support immediately and change your password.'
   *
   * The system logs the logout from all devices event in the security audit
   * trail, recording the admin who initiated it, timestamp, IP address, and
   * count of sessions revoked. This provides accountability and traceability
   * for security actions.
   *
   * After this operation completes successfully, the admin must log in again on
   * ALL devices to regain access to the platform. The client application should
   * redirect to the login page immediately after receiving the response,
   * clearing all stored tokens.
   *
   * The response returns a success confirmation message indicating all sessions
   * have been revoked, the count of terminated sessions, and instructions to
   * log in again.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async revokeAllSessions(
    @AdminAuth()
    admin: AdminPayload,
  ): Promise<IShoppingMallAdmin.IRevokeAllSessionsResponse> {
    try {
      return await deleteAuthAdminSessionsAll({
        admin,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
