import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthSellerPasswordResetRequest } from "../../../../../../providers/postAuthSellerPasswordResetRequest";

import { IShoppingMallSeller } from "../../../../../../api/structures/IShoppingMallSeller";

@Controller("/auth/seller/password/reset/request")
export class AuthSellerPasswordResetRequestController {
  /**
   * Request password reset token for seller account.
   *
   * Initiates the password reset workflow for seller accounts by generating a
   * secure reset token and sending it via email. This endpoint serves sellers
   * who have forgotten their password or need to reset credentials for security
   * reasons, providing a secure self-service recovery mechanism without
   * requiring current password knowledge.
   *
   * The operation accepts the seller's registered email address and validates
   * it exists in the shopping_mall_sellers table. For security reasons
   * (preventing email enumeration attacks), the endpoint returns a generic
   * success message 'If an account exists with this email, you will receive
   * password reset instructions' regardless of whether the email is found,
   * preventing attackers from determining which emails are registered as seller
   * accounts.
   *
   * When a valid seller email is found, the system generates a
   * cryptographically secure random token (minimum 32 bytes using
   * crypto.randomBytes or equivalent) and stores it in the password_reset_token
   * field. The password_reset_expires_at field is set to 1 hour from the
   * current timestamp, enforcing the business rule that reset tokens expire
   * quickly for security. Any existing password_reset_token is overwritten,
   * ensuring only one active reset token exists per seller at any time.
   *
   * Rate limiting is enforced by tracking reset request timestamps and counting
   * requests within the last hour. The system allows maximum 3 password reset
   * requests per hour per seller email address to prevent abuse and potential
   * denial-of-service attacks. If the limit is exceeded, the endpoint returns
   * an error 'Too many password reset requests. Please try again later' without
   * processing the request.
   *
   * Account status validation checks that the seller account is not in 'banned'
   * status - banned sellers cannot reset passwords and must contact support.
   * Accounts with 'pending_approval', 'suspended', or 'on_hold' status can
   * request password resets, as password reset does not require active account
   * status (seller may have forgotten password before completing approval
   * process).
   *
   * The email notification system is triggered with template containing the
   * password reset link (typically
   * https://platform.com/seller/password/reset?token={password_reset_token}),
   * seller's business_name for personalization, token expiration time (1 hour),
   * and security advisory to ignore the email if the seller did not request the
   * reset. The notification is sent to the seller's registered email address
   * asynchronously within 5 minutes.
   *
   * This operation does not create sessions, issue JWT tokens, or modify any
   * other seller account fields beyond password_reset_token and
   * password_reset_expires_at. It serves exclusively as the first step in the
   * two-step password recovery process, with the actual password reset
   * occurring in a subsequent operation that validates the token and updates
   * the password_hash field.
   *
   * @param connection
   * @param body Seller email address for password reset request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IShoppingMallSeller.IPasswordResetRequest,
  ): Promise<IShoppingMallSeller.IPasswordResetRequestResponse> {
    try {
      return await postAuthSellerPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
