import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCancellation } from "../../../../structures/IShoppingMallCancellation";
import { IPageIShoppingMallCancellation } from "../../../../structures/IPageIShoppingMallCancellation";

/**
 * Search and retrieve filtered list of order cancellation records for
 * customers.
 *
 * Retrieves a comprehensive, paginated list of order cancellation records from
 * the shopping_mall_cancellations table with advanced filtering, searching, and
 * sorting capabilities. This customer-specific endpoint enables customers to
 * search their own cancellation history based on multiple criteria including
 * cancellation status, approval workflow state, refund processing status, and
 * date ranges.
 *
 * Customers use this endpoint to view their own cancellation requests and track
 * approval status and refund processing. The operation automatically filters
 * results to show only cancellations where the authenticated customer is the
 * requester (requester_customer_id matches the authenticated user), ensuring
 * data privacy and security.
 *
 * The operation supports sophisticated filtering including cancellation status
 * (pending_approval, approved, rejected, completed), date range queries for
 * requested_at timestamp, refund processing status, and approval workflow
 * states. Sorting options include most recent cancellations first, highest
 * refund amounts, and cancellations approaching approval deadlines.
 *
 * Security and authorization are enforced through role-based access control.
 * Customers can only view their own cancellation records, ensuring proper data
 * isolation. The operation returns appropriate error responses for unauthorized
 * access attempts.
 *
 * The response includes complete cancellation details: order information,
 * cancellation reason and notes, refund amounts, processing status, and
 * complete timeline from request through approval to refund completion.
 * Pagination enables efficient handling of large result sets.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, sorting options, and pagination
 *   parameters for cancellation queries
 * @path /shoppingMall/customer/cancellations
 * @accessor api.functional.shoppingMall.customer.cancellations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filters, sorting options, and pagination parameters
     * for cancellation queries
     */
    body: IShoppingMallCancellation.IRequest;
  };
  export type Body = IShoppingMallCancellation.IRequest;
  export type Response = IPageIShoppingMallCancellation;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/cancellations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/cancellations";
  export const random = (): IPageIShoppingMallCancellation =>
    typia.random<IPageIShoppingMallCancellation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
