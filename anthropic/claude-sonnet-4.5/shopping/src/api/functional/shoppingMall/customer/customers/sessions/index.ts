import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomerSession } from "../../../../../structures/IShoppingMallCustomerSession";
import { IPageIShoppingMallCustomerSession } from "../../../../../structures/IPageIShoppingMallCustomerSession";
import { IShoppingMallSession } from "../../../../../structures/IShoppingMallSession";

/**
 * Retrieve and filter active sessions for a specific customer account.
 *
 * Retrieves a comprehensive list of all active sessions associated with a
 * specific customer account, supporting advanced filtering and pagination. This
 * operation queries the shopping_mall_sessions table for records where
 * user_type is 'customer' and matches the specified customer ID parameter.
 *
 * This endpoint serves multiple critical business purposes. First, it enables
 * customers to monitor their account security by viewing all active login
 * sessions across different devices and browsers. Customers can identify which
 * devices are currently logged in, where those sessions originated (IP address
 * and approximate location), and when each session was last active. This
 * visibility is essential for detecting unauthorized access and maintaining
 * account security.
 *
 * Second, the operation supports the multi-device session management feature
 * described in the requirements. Customers can see sessions from their desktop
 * computer, mobile phone, tablet, and any other devices simultaneously logged
 * in. Each session record includes detailed device information parsed from the
 * user agent string, including device type (mobile, tablet, desktop), browser
 * name, operating system, and a user-friendly device name for easy
 * identification.
 *
 * The filtering capabilities provided through the request body enable customers
 * to narrow down sessions by specific criteria. For example, customers can
 * filter sessions by device type to see only mobile sessions, or filter by date
 * range to find sessions created within a specific timeframe. This is
 * particularly useful for customers with many active sessions who want to
 * identify and manage specific sessions.
 *
 * From a security perspective, this operation provides the foundation for
 * customers to detect and respond to suspicious activity. If a customer sees a
 * session from an unfamiliar location or device, they can identify it through
 * this endpoint and then use related session revocation endpoints to terminate
 * that session. The approximate location information, derived from IP address
 * geolocation, helps customers quickly identify whether a session is
 * legitimate.
 *
 * Administrators also use this operation for customer support and security
 * investigations. When a customer reports unauthorized account access,
 * administrators can retrieve the session list to identify suspicious sessions
 * and take appropriate action. The comprehensive session details including IP
 * addresses and timestamps provide valuable forensic information.
 *
 * The response includes pagination support for customers with many historical
 * sessions, ensuring efficient data retrieval and display. Sessions are
 * typically sorted by last activity timestamp with most recent sessions first,
 * allowing customers to quickly see their active sessions.
 *
 * Related operations that customers might use together with this endpoint
 * include session revocation (to terminate specific sessions), login history
 * retrieval, and account security settings management. Together, these
 * operations provide complete session lifecycle management and security control
 * for customer accounts.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer whose sessions are
 *   being retrieved
 * @param props.body Filtering and pagination criteria for session retrieval
 *   including device type, date range, location filters, and sorting
 *   preferences
 * @path /shoppingMall/customer/customers/:customerId/sessions
 * @accessor api.functional.shoppingMall.customer.customers.sessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the customer whose sessions are being retrieved */
    customerId: string & tags.Format<"uuid">;

    /**
     * Filtering and pagination criteria for session retrieval including
     * device type, date range, location filters, and sorting preferences
     */
    body: IShoppingMallCustomerSession.IRequest;
  };
  export type Body = IShoppingMallCustomerSession.IRequest;
  export type Response = IPageIShoppingMallCustomerSession;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/customers/:customerId/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions`;
  export const random = (): IPageIShoppingMallCustomerSession =>
    typia.random<IPageIShoppingMallCustomerSession>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific customer session by session ID.
 *
 * Retrieves detailed information about a specific active session for a
 * customer. This operation queries the shopping_mall_sessions table to return
 * comprehensive session data including device information, browser details,
 * geographic location, activity timestamps, and token expiration status.
 *
 * This endpoint supports the multi-device session management feature described
 * in the User Roles and Authentication requirements. Customers can view details
 * about their active sessions across different devices to monitor account
 * security and identify any suspicious login activity.
 *
 * The session information includes device type (mobile, tablet, desktop),
 * browser name, operating system, approximate location based on IP address, and
 * timestamps for session creation and last activity. This transparency helps
 * customers ensure their account is being accessed only from authorized
 * devices.
 *
 * Security considerations include verifying that the requesting customer owns
 * the session being queried. The system enforces that customers can only view
 * their own session details, preventing unauthorized access to other users'
 * session information. Session details include last activity tracking to help
 * customers identify inactive sessions that may need revocation.
 *
 * This operation integrates with the authentication system defined in the User
 * Roles and Authentication document, providing visibility into the JWT refresh
 * token lifecycle, session expiration, and revocation status. Customers use
 * this information to make informed decisions about session management and
 * security.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer who owns the
 *   session
 * @param props.sessionId Unique identifier of the specific session to retrieve
 * @path /shoppingMall/customer/customers/:customerId/sessions/:sessionId
 * @accessor api.functional.shoppingMall.customer.customers.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the customer who owns the session */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific session to retrieve */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSession;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/customers/:customerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IShoppingMallSession =>
    typia.random<IShoppingMallSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Terminate a specific customer session and revoke associated tokens.
 *
 * Terminates a specific active session for a customer by marking it as revoked
 * and invalidating the associated JWT refresh token. This operation sets the
 * is_revoked field to true and records the revoked_at timestamp, permanently
 * preventing the session from being used for further authentication.
 *
 * This endpoint implements the multi-device session management and security
 * features described in the User Roles and Authentication requirements.
 * Customers can remotely revoke sessions from devices they no longer use or
 * from devices they suspect may be compromised. This provides granular control
 * over account access across multiple devices.
 *
 * The operation updates the shopping_mall_sessions table by setting is_revoked
 * to true and recording the revoked_at timestamp. Once revoked, the session's
 * refresh token can no longer be used to generate new access tokens,
 * effectively terminating access from that device. The customer will need to
 * log in again from that device to establish a new session.
 *
 * Security considerations include verifying that the requesting customer owns
 * the session being revoked. The system enforces that customers can only revoke
 * their own sessions, preventing unauthorized session termination. The
 * operation logs the revocation event in the session record for security
 * auditing.
 *
 * This operation supports the security requirement that customers should be
 * able to view all active sessions and revoke any specific session remotely, as
 * defined in the authentication security features. Common use cases include
 * revoking sessions after logging in from a public computer, terminating access
 * from a lost mobile device, or clearing all sessions except the current one
 * for security purposes.
 *
 * Related operations include viewing all active sessions and the 'logout from
 * all devices' functionality. This operation provides fine-grained control by
 * targeting a specific session rather than terminating all sessions at once.
 * The revocation is permanent and cannot be undone - the user must create a new
 * session by logging in again.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer who owns the
 *   session to be terminated
 * @param props.sessionId Unique identifier of the specific session to revoke
 *   and terminate
 * @path /shoppingMall/customer/customers/:customerId/sessions/:sessionId
 * @accessor api.functional.shoppingMall.customer.customers.sessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the customer who owns the session to be
     * terminated
     */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific session to revoke and terminate */
    sessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/customers/:customerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
