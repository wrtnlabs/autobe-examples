import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrder } from "../../../../../structures/IShoppingMallOrder";
import { IShoppingMallRefundRequest } from "../../../../../structures/IShoppingMallRefundRequest";

/**
 * Submit a refund request for a delivered order within the return window.
 *
 * Enables customers to formally request refunds for delivered orders by
 * submitting detailed refund information including reason, description,
 * requested amount, and optional evidence. This operation initiates the refund
 * approval workflow as defined in the order management requirements, creating a
 * refund request record that will be reviewed by the seller and potentially
 * escalated to admin for final decision.
 *
 * The operation validates critical business rules before accepting the refund
 * request. First, it verifies the order exists and belongs to the requesting
 * customer. Second, it confirms the order is in a refundable state (delivered
 * or completed status). Third, it validates the request is submitted within the
 * 30-day return window from delivery date as specified in the business rules.
 * If any validation fails, the request is rejected with specific error
 * messages.
 *
 * Upon successful submission, the system creates a
 * shopping_mall_refund_requests record with status 'pending_review', calculates
 * the seller response deadline (3 business days from submission), and sends
 * immediate notifications to the seller alerting them of the new refund
 * request. The customer receives confirmation with a refund request ID for
 * tracking purposes.
 *
 * The refund reason must be selected from predefined categories:
 * defective_damaged, wrong_item, does_not_match_description, changed_mind,
 * found_better_price, quality_not_expected, or other. Customers must provide a
 * detailed explanation regardless of selected reason to help sellers and admins
 * make informed decisions. The requested refund amount typically matches the
 * order total but can be partial refund amounts in some cases.
 *
 * This operation integrates with the shopping_mall_orders,
 * shopping_mall_refund_requests, and shopping_mall_customers tables as defined
 * in the Prisma schema. It serves as the entry point for the complete refund
 * workflow documented in the Order Management and Tracking requirements, which
 * includes seller review, admin escalation for disputes, return shipping
 * coordination, and final refund payment processing through the payment
 * gateway.
 *
 * Related operations include viewing refund request status, seller refund
 * approval/rejection endpoints, and admin refund decision overrides. This
 * endpoint is customer-facing and requires customer authentication with
 * ownership verification to ensure only the order owner can request refunds.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order for which refund is being
 *   requested
 * @param props.body Refund request details including reason, description,
 *   requested amount, and supporting information for the refund approval
 *   workflow
 * @path /shoppingMall/customer/orders/:orderId/refund
 * @accessor api.functional.shoppingMall.customer.orders.refund.createRefund
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createRefund(
  connection: IConnection,
  props: createRefund.Props,
): Promise<createRefund.Response> {
  return true === connection.simulate
    ? createRefund.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createRefund.METADATA,
          path: createRefund.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createRefund {
  export type Props = {
    /** Unique identifier of the order for which refund is being requested */
    orderId: string & tags.Format<"uuid">;

    /**
     * Refund request details including reason, description, requested
     * amount, and supporting information for the refund approval workflow
     */
    body: IShoppingMallOrder.IRefundCreate;
  };
  export type Body = IShoppingMallOrder.IRefundCreate;
  export type Response = IShoppingMallRefundRequest;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/refund",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refund`;
  export const random = (): IShoppingMallRefundRequest =>
    typia.random<IShoppingMallRefundRequest>();
  export const simulate = (
    connection: IConnection,
    props: createRefund.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createRefund.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
