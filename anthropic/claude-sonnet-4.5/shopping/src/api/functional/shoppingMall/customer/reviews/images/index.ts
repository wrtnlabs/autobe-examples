import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReviewImage } from "../../../../../structures/IShoppingMallReviewImage";

/**
 * Upload and attach new images to a specific product review.
 *
 * Upload one or more product images to be associated with the specified review,
 * supporting customer-provided visual evidence and context for their product
 * feedback. This operation enables customers to enhance their written reviews
 * with photographic documentation of the product's appearance, quality,
 * defects, or usage scenarios.
 *
 * The operation validates that the requesting customer is the owner of the
 * review identified by reviewId, ensuring only the review author can upload
 * images to their own review. The review must be in an editable state (within
 * 30 days of creation) and not in deleted or permanently locked status.
 *
 * Image validation includes comprehensive checks for file format (JPEG, PNG,
 * WebP only), file size constraints (maximum 5MB per image), minimum resolution
 * requirements (800x800 pixels recommended for quality), and content
 * appropriateness through automated scanning. The operation enforces a strict
 * limit of 5 images per review as defined in the business requirements,
 * rejecting upload attempts that would exceed this threshold.
 *
 * Upon successful validation, the system processes uploaded images by
 * generating multiple optimized versions including thumbnails (150x150 pixels
 * for review lists), medium resolution (600x600 pixels for review detail
 * pages), and preserving original high-resolution versions for zoom
 * functionality. Images are assigned sequential display_order values based on
 * upload sequence, which customers can later reorder through review editing
 * functionality.
 *
 * The operation integrates with the review moderation workflow, where newly
 * uploaded images to pending reviews are included in the moderation queue for
 * content policy compliance review. Images uploaded to already-approved reviews
 * may trigger re-moderation depending on platform policy configuration.
 *
 * Security considerations include authentication verification to confirm the
 * requesting user is the review author, authorization checks to prevent
 * unauthorized image uploads to other users' reviews, rate limiting to prevent
 * abuse (maximum 10 upload operations per hour per customer), and virus
 * scanning for uploaded files to protect platform integrity.
 *
 * Related operations that customers typically use in conjunction with this
 * endpoint include review creation (POST /reviews), review editing (PUT
 * /reviews/{reviewId}), and review image reordering during the edit workflow.
 * Sellers and admins viewing customer reviews also retrieve these images
 * through review detail endpoints to assess product feedback quality and
 * authenticity.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review to which
 *   images will be attached
 * @param props.body Image upload data including image files, display order
 *   preferences, and optional alt text for accessibility
 * @path /shoppingMall/customer/reviews/:reviewId/images
 * @accessor api.functional.shoppingMall.customer.reviews.images.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target product review to which images will
     * be attached
     */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Image upload data including image files, display order preferences,
     * and optional alt text for accessibility
     */
    body: IShoppingMallReviewImage.ICreate;
  };
  export type Body = IShoppingMallReviewImage.ICreate;
  export type Response = IShoppingMallReviewImage;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/reviews/:reviewId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/images`;
  export const random = (): IShoppingMallReviewImage =>
    typia.random<IShoppingMallReviewImage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific image from a product review.
 *
 * Removes a customer-uploaded image from a product review, operating on the
 * shopping_mall_review_images table in the Reviews namespace. This endpoint
 * serves two primary use cases: allowing customers to remove images they
 * uploaded to their own reviews, and enabling admins to remove inappropriate
 * images during content moderation workflows.
 *
 * Customers can upload up to 5 images per review (JPEG, PNG, WebP formats, 5MB
 * max per image) to provide visual evidence and context for their product
 * feedback. These images are particularly valuable for reviews involving
 * defective or damaged products, helping other customers make informed purchase
 * decisions. This deletion endpoint provides customers with control over their
 * submitted media content.
 *
 * The operation performs a permanent hard delete as the
 * shopping_mall_review_images table does not include a deleted_at column. When
 * an image is removed, the record is completely deleted from the database. The
 * system automatically recalculates the display_order values for remaining
 * images in the review to maintain sequential ordering (1, 2, 3...) without
 * gaps.
 *
 * Business rules enforced by this operation include verification that the
 * requesting user has appropriate permissions (review author for
 * customer-initiated deletions, or admin role for moderation-initiated
 * deletions). The operation validates that both the review and the image exist
 * and that the image actually belongs to the specified review before proceeding
 * with deletion.
 *
 * Related operations that work together with this endpoint include the review
 * creation and update endpoints that initially upload and manage review images,
 * and the review retrieval endpoints that display the remaining images after
 * deletion. The review moderation workflow also uses this endpoint when admins
 * identify policy-violating image content that must be removed.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the parent product review
 *   containing the image to be deleted
 * @param props.imageId Unique identifier of the specific review image to be
 *   permanently removed
 * @path /shoppingMall/customer/reviews/:reviewId/images/:imageId
 * @accessor api.functional.shoppingMall.customer.reviews.images.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the parent product review containing the image
     * to be deleted
     */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the specific review image to be permanently
     * removed
     */
    imageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/reviews/:reviewId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
