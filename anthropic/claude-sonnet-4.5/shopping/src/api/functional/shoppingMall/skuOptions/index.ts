import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSkuOption } from "../../../structures/IShoppingMallSkuOption";

/**
 * Retrieve detailed information for a specific custom SKU option by ID.
 *
 * This operation fetches complete details for a single custom SKU option
 * identified by its unique ID. Custom options enable flexible product variant
 * configurations beyond standard color and size attributes, allowing sellers to
 * define product-specific attributes like storage capacity, material
 * composition, package quantities, or any other distinguishing characteristic.
 *
 * The endpoint retrieves data from the shopping_mall_sku_options table which
 * stores option_name (the attribute category like 'Storage Capacity' or
 * 'Material Type') and option_value (the specific value like '128GB' or
 * 'Cotton'). Each unique combination of option_name and option_value has a
 * distinct record, ensuring no duplicates exist.
 *
 * This operation is primarily used when displaying product detail pages where
 * variant selection interfaces need to show all available custom options, or
 * when managing inventory where SKU variant attributes must be fully resolved.
 * The response includes the option's name-value pair along with metadata like
 * creation and update timestamps.
 *
 * Customers interact with this data indirectly through product variant
 * selectors on product pages. Sellers reference this data when creating or
 * editing product variants to ensure consistency in option naming and values
 * across their catalog. Admins may query this endpoint for catalog management
 * and ensuring data quality across product variants.
 *
 * Security considerations include ensuring only active, non-deleted options are
 * returned to customers, while sellers and admins may need visibility into all
 * options for management purposes.
 *
 * @param props.connection
 * @param props.optionId Unique identifier of the target custom SKU option to
 *   retrieve
 * @path /shoppingMall/skuOptions/:optionId
 * @accessor api.functional.shoppingMall.skuOptions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target custom SKU option to retrieve */
    optionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSkuOption;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/skuOptions/:optionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/skuOptions/${encodeURIComponent(props.optionId ?? "null")}`;
  export const random = (): IShoppingMallSkuOption =>
    typia.random<IShoppingMallSkuOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("optionId")(() => typia.assert(props.optionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
