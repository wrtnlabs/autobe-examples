import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerPayout } from "../../../../structures/IShoppingMallSellerPayout";
import { IPageIShoppingMallSellerPayout } from "../../../../structures/IPageIShoppingMallSellerPayout";

/**
 * Search and retrieve filtered, paginated list of seller payout records.
 *
 * Retrieve a comprehensive, filtered, and paginated list of seller payout
 * records representing financial settlements between the platform and sellers.
 * This operation enables advanced search capabilities for payout
 * reconciliation, financial reporting, and seller account management by
 * allowing filtering based on multiple criteria including seller identifier,
 * payout period date ranges, processing status, and payout amounts.
 *
 * Seller payouts are generated on a regular schedule (typically weekly or
 * monthly) and represent the platform's obligation to transfer net earnings to
 * sellers after deducting platform commission, processing fees, and any refund
 * amounts from the payout period. Each payout record calculates the final net
 * amount using the formula: Net Payout = (Total Order Amount + Shipping Fees) -
 * Platform Commission - Refund Deductions - Processing Fees.
 *
 * The request body supports extensive filtering options: seller ID for viewing
 * specific seller's payouts, status filters for tracking payout lifecycle
 * (pending, processing, completed, failed, on_hold), date range filters for
 * payout periods to analyze settlements over time, and amount range filters for
 * identifying high-value or problematic payouts. Pagination parameters enable
 * efficient handling of large payout datasets.
 *
 * Each payout record in the response includes comprehensive financial
 * breakdown: the settlement period covered (start and end dates), total gross
 * revenue from seller's orders during that period, platform commission amount
 * deducted, refund deduction amount for returns/cancellations, payment
 * processing fees, final net payout amount, currency, payout processing status,
 * payout method used (bank transfer, PayPal, etc.), payout reference numbers,
 * scheduled and actual payout dates, and detailed timestamps for processing
 * stages.
 *
 * This operation is essential for financial operations teams managing
 * platform-wide seller settlements, accountants reconciling payout transactions
 * with bank records, and potentially for sellers to view their own payout
 * history and financial statements. Authorization controls ensure customers
 * cannot access payout data (business-to-business financial information),
 * sellers can only view their own payouts when applicable, and admins have
 * unrestricted access for platform oversight.
 *
 * The operation integrates with the payment settlement workflow, providing
 * visibility into the complete lifecycle from payout calculation through bank
 * transfer processing to completion or failure handling. Failed payouts include
 * detailed failure reasons enabling support teams to resolve issues such as
 * invalid bank account information or insufficient platform funds.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   seller payout records by seller, status, date ranges, and amount ranges
 * @path /shoppingMall/admin/sellerPayouts
 * @accessor api.functional.shoppingMall.admin.sellerPayouts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering seller payout
     * records by seller, status, date ranges, and amount ranges
     */
    body: IShoppingMallSellerPayout.IRequest;
  };
  export type Body = IShoppingMallSellerPayout.IRequest;
  export type Response = IPageIShoppingMallSellerPayout;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/sellerPayouts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/sellerPayouts";
  export const random = (): IPageIShoppingMallSellerPayout =>
    typia.random<IPageIShoppingMallSellerPayout>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific seller payout by payout ID.
 *
 * Retrieve complete details of a specific seller payout record by its unique
 * identifier. This operation provides comprehensive financial information about
 * a payout settlement including the settlement period covered, total order
 * revenue, platform commission deductions, refund deductions, payment
 * processing fees, and the final net payout amount transferred to the seller.
 *
 * This endpoint is critical for financial transparency and reconciliation.
 * Sellers use it to verify their earnings, understand deductions, and confirm
 * payout processing status. Administrators use it to audit payout calculations,
 * investigate payout issues, and ensure accurate financial settlements.
 *
 * The payout record corresponds to the shopping_mall_seller_payouts table in
 * the Prisma schema, which tracks periodic payment settlements to sellers after
 * deducting platform commission and fees. Each payout covers a specific time
 * period (typically weekly or monthly) and aggregates all eligible orders
 * delivered during that period.
 *
 * Security considerations include role-based access control where sellers can
 * only view their own payouts, while admins have platform-wide access to all
 * seller payouts. The endpoint validates that the requesting user has
 * appropriate permissions before returning payout details.
 *
 * The response includes the payout status (pending, processing, completed,
 * failed, on_hold), payout method (bank_transfer, paypal, etc.), and processing
 * timestamps. For completed payouts, it includes the payout reference number
 * for bank reconciliation. For failed payouts, it provides failure reasons to
 * help resolve payout issues.
 *
 * This operation integrates with the seller order management system to show
 * which orders contributed to the payout and with the refund system to show
 * refund deductions. It also displays commission calculations transparently so
 * sellers understand platform fee deductions.
 *
 * @param props.connection
 * @param props.payoutId Unique identifier of the seller payout record to
 *   retrieve
 * @path /shoppingMall/admin/sellerPayouts/:payoutId
 * @accessor api.functional.shoppingMall.admin.sellerPayouts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller payout record to retrieve */
    payoutId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerPayout;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/sellerPayouts/:payoutId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellerPayouts/${encodeURIComponent(props.payoutId ?? "null")}`;
  export const random = (): IShoppingMallSellerPayout =>
    typia.random<IShoppingMallSellerPayout>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("payoutId")(() => typia.assert(props.payoutId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
