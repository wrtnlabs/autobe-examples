import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerResponse } from "../../../../structures/IShoppingMallSellerResponse";
import { IPageIShoppingMallSellerResponse } from "../../../../structures/IPageIShoppingMallSellerResponse";

/**
 * Search and retrieve filtered, paginated list of seller responses to product
 * reviews.
 *
 * Retrieve a comprehensive, paginated list of seller responses to customer
 * product reviews with advanced filtering and search capabilities. This
 * operation provides access to all seller responses across the platform based
 * on the requesting user's role and permissions.
 *
 * Seller responses represent replies posted by sellers to customer reviews on
 * their products. Each response undergoes moderation workflow before
 * publication, requiring admin approval to ensure professional and
 * policy-compliant communication. Sellers can respond to reviews to address
 * customer concerns, provide explanations, thank customers for positive
 * feedback, and build customer relationships.
 *
 * The operation supports complex search and filtering criteria including
 * response moderation status (pending_moderation, approved, rejected), seller
 * identification, associated review ID, date ranges, and text content search.
 * This enables sellers to manage their response history and admins to
 * efficiently moderate pending responses.
 *
 * Security and role-based access control ensure that sellers can only view and
 * search their own responses, while admins have platform-wide visibility for
 * moderation purposes. The response data includes complete seller response
 * information with associated review context, seller business details,
 * moderation status, timestamps, and soft deletion status.
 *
 * This operation integrates with the product review system defined in the
 * shopping_mall_reviews table, enabling navigation from reviews to seller
 * responses and supporting the complete review-response workflow. Pagination
 * parameters allow efficient handling of large response datasets, and sorting
 * options (by creation date, status, helpfulness) provide flexible result
 * ordering.
 *
 * The endpoint is critical for seller reputation management, enabling sellers
 * to engage with customer feedback professionally and for admins to maintain
 * communication quality standards across the marketplace.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for seller responses including
 *   status, seller ID, review association, date ranges, and pagination
 *   parameters
 * @path /shoppingMall/admin/sellerResponses
 * @accessor api.functional.shoppingMall.admin.sellerResponses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria for seller responses including status,
     * seller ID, review association, date ranges, and pagination
     * parameters
     */
    body: IShoppingMallSellerResponse.IRequest;
  };
  export type Body = IShoppingMallSellerResponse.IRequest;
  export type Response = IPageIShoppingMallSellerResponse.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/sellerResponses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/sellerResponses";
  export const random = (): IPageIShoppingMallSellerResponse.ISummary =>
    typia.random<IPageIShoppingMallSellerResponse.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific seller response by ID.
 *
 * Retrieve comprehensive detailed information about a specific seller response
 * to a customer product review using the response's unique identifier. This
 * operation provides complete response data including the response text
 * content, moderation status, associated review context, and seller
 * information.
 *
 * Seller responses are replies posted by sellers to customer reviews on their
 * products, enabling sellers to address customer concerns, provide
 * explanations, offer solutions, or thank customers for positive feedback. All
 * seller responses undergo moderation workflow requiring admin approval before
 * publication to ensure professional communication and policy compliance.
 *
 * The operation returns complete seller response details including the response
 * text (maximum 2000 characters), current moderation status
 * (pending_moderation, approved, rejected), associated review information with
 * the original customer review content and rating, seller business details,
 * submission and last edit timestamps, and soft deletion status. This
 * comprehensive data supports seller response management, admin moderation
 * workflows, and customer display of seller engagement.
 *
 * Security and role-based access control ensure that sellers can only view
 * their own responses while admins have platform-wide access for moderation
 * purposes. The endpoint validates that the requesting user has appropriate
 * permissions to access the specific seller response.
 *
 * This operation integrates with the shopping_mall_reviews table to provide
 * complete review-response context, enabling display of seller responses
 * beneath customer reviews on product pages. The response data includes whether
 * the response has been edited (updated_at differs from created_at), supporting
 * the '7-day edit window' business rule where sellers can modify responses
 * within 7 days of submission.
 *
 * The endpoint is essential for sellers to view and edit their responses, for
 * admins to moderate pending responses and review policy compliance, and for
 * displaying approved seller responses to customers on product detail pages as
 * part of the trusted review ecosystem.
 *
 * @param props.connection
 * @param props.responseId Unique identifier of the seller response to retrieve
 * @path /shoppingMall/admin/sellerResponses/:responseId
 * @accessor api.functional.shoppingMall.admin.sellerResponses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller response to retrieve */
    responseId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/sellerResponses/:responseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellerResponses/${encodeURIComponent(props.responseId ?? "null")}`;
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("responseId")(() => typia.assert(props.responseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
