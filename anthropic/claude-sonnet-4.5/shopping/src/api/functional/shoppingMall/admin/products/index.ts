import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as skus from "./skus/index";
export * as images from "./images/index";

/**
 * Permanently delete a product from the shopping_mall_products table.
 *
 * This operation permanently removes a product record from the
 * shopping_mall_products table in the database. It is designed for products
 * that have no order history or for administrative removal of policy-violating
 * content.
 *
 * The deletion is a hard delete operation that completely removes the product
 * from the database rather than soft-deleting it. When a product is deleted,
 * all associated data including SKU variants, product images, and variant
 * attribute configurations are also removed through cascading deletion as
 * defined in the Prisma schema relationships.
 *
 * This operation enforces strict business rules to maintain data integrity.
 * Products that have been included in customer orders cannot be deleted to
 * preserve historical transaction records and order details. Instead, sellers
 * should mark such products as discontinued through the product status update
 * functionality. Only products in draft status or products that have never been
 * ordered are eligible for deletion.
 *
 * Sellers can use this endpoint to remove their own draft products that were
 * created but never published or ordered. Admins can use this endpoint to
 * remove any product for policy violations, inappropriate content, or
 * administrative purposes, though they should exercise caution as this is an
 * irreversible operation.
 *
 * The operation validates that the requesting user (seller or admin) has
 * appropriate permissions to delete the specified product. Sellers can only
 * delete products they own, while admins can delete any product on the
 * platform. The operation returns an error if the product has associated orders
 * or if the requester lacks deletion permissions.
 *
 * This endpoint should be used sparingly as product deletion is permanent. For
 * most operational scenarios, changing the product status to 'inactive' or
 * 'discontinued' is preferred to maintain data integrity and support order
 * history display.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product to be permanently
 *   deleted from the shopping_mall_products table
 * @path /shoppingMall/admin/products/:productId
 * @accessor api.functional.shoppingMall.admin.products.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the product to be permanently deleted from the
     * shopping_mall_products table
     */
    productId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
