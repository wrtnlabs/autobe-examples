import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSystemConfig } from "../../../../structures/IShoppingMallSystemConfig";
import { IPageIShoppingMallSystemConfig } from "../../../../structures/IPageIShoppingMallSystemConfig";

/**
 * Create a new platform configuration setting.
 *
 * Creates a new global configuration setting in the
 * shopping_mall_system_configs table for system-wide parameter management. This
 * operation enables administrators to add new configuration entries that
 * control platform behavior, business rules, feature toggles, and operational
 * thresholds.
 *
 * The configuration system uses a key-value pattern with dot notation for keys
 * (e.g., 'platform.commission.default_rate',
 * 'order.cancellation.window_hours'), allowing flexible and hierarchical
 * organization of settings. Each configuration includes a data type indicator
 * to guide proper value parsing, a human-readable description for
 * administrative clarity, and a category for grouping related settings.
 *
 * Configurations can be marked as editable or non-editable. System-critical
 * configurations should be set as non-editable to prevent accidental changes
 * that could destabilize the platform. Editable configurations can be modified
 * through the admin interface for operational flexibility.
 *
 * This operation is essential for platform configuration management, enabling
 * administrators to customize business logic, adjust operational parameters,
 * and control platform features without requiring code deployments. All
 * configuration changes are tracked with timestamps for audit purposes.
 *
 * Security considerations: Only administrators with super_admin role should
 * have access to create system configurations, as these settings directly
 * affect platform behavior and business operations. Input validation ensures
 * config_key uniqueness, data_type validity, and proper category assignment.
 *
 * @param props.connection
 * @param props.body Configuration setting data including key, value, data type,
 *   description, category, and editability flag
 * @path /shoppingMall/admin/systemConfigs
 * @accessor api.functional.shoppingMall.admin.systemConfigs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Configuration setting data including key, value, data type,
     * description, category, and editability flag
     */
    body: IShoppingMallSystemConfig.ICreate;
  };
  export type Body = IShoppingMallSystemConfig.ICreate;
  export type Response = IShoppingMallSystemConfig;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/systemConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/systemConfigs";
  export const random = (): IShoppingMallSystemConfig =>
    typia.random<IShoppingMallSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filtered, paginated list of platform system configuration
 * entries.
 *
 * Retrieve a filtered and paginated list of platform-wide system configuration
 * entries from the shopping_mall_system_configs table. This operation provides
 * advanced search capabilities for finding configuration settings based on
 * multiple criteria including config key patterns, categories, data types, and
 * editability status.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Administrators can sort by configuration key, category,
 * data type, or creation date in ascending or descending order to organize
 * settings logically.
 *
 * Security considerations include restricting this operation to authenticated
 * administrators only, as system configurations contain sensitive platform
 * parameters. The operation provides read-only access to configuration metadata
 * and values, enabling administrators to review settings before making
 * modifications through dedicated update endpoints.
 *
 * This operation integrates with the shopping_mall_system_configs table as
 * defined in the Prisma schema, returning all configuration fields including
 * config_key, config_value, data_type, description, category, is_editable,
 * created_at, and updated_at. The response is optimized for admin dashboard
 * display, providing complete configuration information for management and
 * auditing purposes.
 *
 * Related API operations that might be used together include retrieving
 * individual configuration details by ID (GET /systemConfigs/{configId}) for
 * viewing specific settings, and update operations for modifying editable
 * configuration values.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for system
 *   configuration filtering, including optional filters for category, data
 *   type, editability status, and keyword search on config keys or
 *   descriptions
 * @path /shoppingMall/admin/systemConfigs
 * @accessor api.functional.shoppingMall.admin.systemConfigs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for system configuration
     * filtering, including optional filters for category, data type,
     * editability status, and keyword search on config keys or
     * descriptions
     */
    body: IShoppingMallSystemConfig.IRequest;
  };
  export type Body = IShoppingMallSystemConfig.IRequest;
  export type Response = IPageIShoppingMallSystemConfig;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/systemConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/systemConfigs";
  export const random = (): IPageIShoppingMallSystemConfig =>
    typia.random<IPageIShoppingMallSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific system configuration entry by
 * ID.
 *
 * Retrieve comprehensive details for a single platform system configuration
 * entry from the shopping_mall_system_configs table, specified by its unique
 * configuration ID. This operation provides complete information about a
 * specific configuration setting, including its key identifier, current value,
 * data type classification, human-readable description, category grouping, and
 * whether the setting can be modified through the admin interface.
 *
 * The operation is essential for administrators who need to review the details
 * of a specific configuration parameter before making modifications. It
 * provides visibility into system-critical settings that control platform
 * behavior, business rules, commission rates, operational thresholds, and
 * feature toggles.
 *
 * Security considerations include restricting access to authenticated
 * administrators only, as configuration data contains sensitive platform
 * parameters that should not be exposed to regular users or sellers. The
 * operation enforces role-based access control ensuring only users with admin
 * privileges can view system configuration details.
 *
 * This operation integrates with the shopping_mall_system_configs table as
 * defined in the Prisma schema, returning all configuration fields including
 * config_key (unique identifier using dot notation), config_value (stored as
 * string), data_type (string, integer, decimal, boolean, json), description
 * (explaining the setting's purpose), category (grouping related settings),
 * is_editable (whether modifiable through admin UI), created_at, and updated_at
 * timestamps.
 *
 * The response provides administrators with complete context about the
 * configuration setting, enabling informed decision-making when adjusting
 * platform parameters. Related operations include searching configurations
 * (PATCH /systemConfigs) to find settings by category or keyword, and update
 * operations for modifying editable configuration values.
 *
 * Typical use cases include reviewing commission rate settings before
 * adjustments, checking feature toggle states, verifying threshold values for
 * business rules, and auditing configuration changes through timestamp
 * tracking.
 *
 * @param props.connection
 * @param props.configId Unique identifier of the target system configuration
 *   entry
 * @path /shoppingMall/admin/systemConfigs/:configId
 * @accessor api.functional.shoppingMall.admin.systemConfigs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target system configuration entry */
    configId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSystemConfig;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/systemConfigs/:configId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/systemConfigs/${encodeURIComponent(props.configId ?? "null")}`;
  export const random = (): IShoppingMallSystemConfig =>
    typia.random<IShoppingMallSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configId")(() => typia.assert(props.configId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing platform configuration setting.
 *
 * Updates an existing global configuration setting identified by the configId
 * path parameter in the shopping_mall_system_configs table. This operation
 * enables administrators to modify configuration values, descriptions, and
 * editability status for system-wide parameters that control platform
 * behavior.
 *
 * The update operation should validate that the configuration exists and is
 * editable before applying changes. System-critical configurations marked with
 * is_editable=false should be protected from modification unless explicitly
 * overridden by super administrators with additional security checks. This
 * protection prevents accidental changes to fundamental platform parameters
 * that could cause operational issues.
 *
 * Administrators can update the config_value to adjust business thresholds
 * (e.g., changing commission rates, timeout periods, or inventory thresholds),
 * modify the description to improve administrative documentation, or change the
 * is_editable flag to lock or unlock configurations. The data_type field helps
 * ensure that updated values are parsed correctly by the application layer
 * (string, integer, decimal, boolean, or json).
 *
 * All configuration updates are tracked with the updated_at timestamp,
 * providing a complete audit trail of when settings were changed. For enhanced
 * auditability, the platform should log configuration changes with the admin
 * user who made the modification and the previous value for rollback
 * capability.
 *
 * Security considerations: This operation must be restricted to administrators
 * with appropriate permissions (super_admin for critical settings, potentially
 * lower admin roles for non-critical operational parameters). Validation should
 * ensure config_key uniqueness is preserved if the key is being modified,
 * data_type remains valid, and category assignments are appropriate.
 *
 * Integration with other systems: Configuration changes may affect real-time
 * platform behavior, so the application layer should implement configuration
 * refresh mechanisms to pick up updated values without requiring system
 * restart. Changes to commission rates should only affect new transactions, not
 * retroactively modify existing orders.
 *
 * @param props.connection
 * @param props.configId Unique identifier of the configuration setting to
 *   update
 * @param props.body Updated configuration data including value, description,
 *   data type, category, and editability status
 * @path /shoppingMall/admin/systemConfigs/:configId
 * @accessor api.functional.shoppingMall.admin.systemConfigs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the configuration setting to update */
    configId: string & tags.Format<"uuid">;

    /**
     * Updated configuration data including value, description, data type,
     * category, and editability status
     */
    body: IShoppingMallSystemConfig.IUpdate;
  };
  export type Body = IShoppingMallSystemConfig.IUpdate;
  export type Response = IShoppingMallSystemConfig;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/systemConfigs/:configId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/systemConfigs/${encodeURIComponent(props.configId ?? "null")}`;
  export const random = (): IShoppingMallSystemConfig =>
    typia.random<IShoppingMallSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configId")(() => typia.assert(props.configId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a system configuration entry from the
 * shopping_mall_system_configs table.
 *
 * This operation permanently removes a system configuration entry from the
 * platform's configuration database. System configurations control
 * platform-wide settings including feature toggles, business thresholds,
 * default values, and operational parameters stored as key-value pairs in the
 * shopping_mall_system_configs table.
 *
 * The deletion is a hard delete operation that completely removes the
 * configuration record from the database, as the schema does not implement soft
 * deletion for system configurations. Once deleted, the configuration entry
 * cannot be recovered and any dependent platform functionality relying on this
 * setting will revert to application defaults.
 *
 * This is a privileged administrative operation that should be restricted to
 * super administrators only. Before deletion, the system should validate that
 * the configuration is not marked as non-editable (is_editable=false), as
 * system-critical configurations should be protected from accidental removal.
 * The operation should also check for dependencies and warn if the
 * configuration is actively used by other platform components.
 *
 * After successful deletion, related caches should be invalidated and any
 * services relying on this configuration should be notified to reload their
 * settings. Consider implementing audit logging to track which administrator
 * deleted which configuration and when, even though the configuration record
 * itself is removed.
 *
 * This operation should be used sparingly and only when a configuration is
 * truly obsolete. For temporary disabling of settings, consider using
 * application-level flags rather than deletion.
 *
 * @param props.connection
 * @param props.configId Unique identifier of the system configuration entry to
 *   permanently delete
 * @path /shoppingMall/admin/systemConfigs/:configId
 * @accessor api.functional.shoppingMall.admin.systemConfigs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the system configuration entry to permanently
     * delete
     */
    configId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/systemConfigs/:configId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/systemConfigs/${encodeURIComponent(props.configId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configId")(() => typia.assert(props.configId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
