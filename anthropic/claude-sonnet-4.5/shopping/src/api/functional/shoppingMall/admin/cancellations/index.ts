import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCancellation } from "../../../../structures/IShoppingMallCancellation";
import { IPageIShoppingMallCancellation } from "../../../../structures/IPageIShoppingMallCancellation";

/**
 * Search and retrieve filtered list of order cancellation records for admins.
 *
 * Retrieves a comprehensive, paginated list of order cancellation records from
 * the shopping_mall_cancellations table with advanced filtering, searching, and
 * sorting capabilities. This admin-specific endpoint enables platform
 * administrators to oversee all cancellations across the marketplace for
 * dispute resolution, fraud detection, and performance analytics.
 *
 * Admins use this endpoint to oversee all platform cancellations for dispute
 * resolution, fraud detection, and performance analytics. Admins can filter by
 * any criteria to identify patterns such as high cancellation rates from
 * specific sellers, common cancellation reasons, or cancellations requiring
 * administrative intervention. The comprehensive view supports platform quality
 * monitoring and seller performance evaluation.
 *
 * The operation supports sophisticated filtering including cancellation status
 * (pending_approval, approved, rejected, completed), requester type filtering
 * (customer, seller, admin), date range queries for requested_at timestamp,
 * refund processing status, and approval workflow states. Sorting options
 * include most recent cancellations first, highest refund amounts, and
 * cancellations approaching approval deadlines.
 *
 * Security and authorization provide admins with unrestricted access to all
 * cancellation data across all sellers and customers. This comprehensive
 * visibility enables effective platform oversight and dispute resolution.
 *
 * The response includes complete cancellation details: order information,
 * requester and approver identities, cancellation reason and notes, refund
 * amounts, processing status, and complete timeline from request through
 * approval to refund completion. Pagination enables efficient handling of large
 * result sets across the entire platform.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, sorting options, and pagination
 *   parameters for cancellation queries
 * @path /shoppingMall/admin/cancellations
 * @accessor api.functional.shoppingMall.admin.cancellations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filters, sorting options, and pagination parameters
     * for cancellation queries
     */
    body: IShoppingMallCancellation.IRequest;
  };
  export type Body = IShoppingMallCancellation.IRequest;
  export type Response = IPageIShoppingMallCancellation;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/cancellations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/cancellations";
  export const random = (): IPageIShoppingMallCancellation =>
    typia.random<IPageIShoppingMallCancellation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
