import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSkuColor } from "../../../../structures/IShoppingMallSkuColor";

/**
 * Create a new SKU color variant for product configuration.
 *
 * Create a new SKU color variant by adding a record to the
 * shopping_mall_sku_colors table. This operation enables sellers and
 * administrators to define new color options that can be assigned to product
 * SKUs when creating or updating product variants. The system validates that
 * the color name is unique across the entire platform according to the Prisma
 * schema unique constraint, preventing duplicate color definitions.
 *
 * This endpoint plays a crucial role in the product variant management
 * workflow. Before sellers can create product SKUs with color variations, they
 * need available color options in the system. Sellers typically create colors
 * during their initial product setup or when introducing new color variants for
 * existing products. Admins may create colors to establish a standardized color
 * taxonomy for the marketplace, ensuring consistency across different sellers'
 * product listings.
 *
 * The request must provide a color name (required field, e.g., 'Navy Blue',
 * 'Forest Green', 'Crimson Red') which serves as the human-readable identifier
 * displayed to customers during product browsing and variant selection. The
 * optional hex color code (format #RRGGBB) enables visual swatch rendering in
 * the user interface, providing customers with an accurate color preview before
 * making purchase decisions.
 *
 * Validation rules enforce data quality and uniqueness. The system checks that
 * the color name does not already exist in the shopping_mall_sku_colors table,
 * rejecting duplicate submissions with appropriate error messages. If a hex
 * code is provided, the system validates the format matches the standard
 * 6-digit hexadecimal color notation. The color name must be meaningful and
 * descriptive to help customers understand the variant option.
 *
 * Security and authorization controls ensure only authorized users can create
 * color variants. Sellers creating colors for their products must be
 * authenticated with active seller accounts. Admins managing platform-wide
 * color taxonomy must have appropriate administrative permissions. The system
 * logs all color creation events with timestamps for audit purposes.
 *
 * Once created, the new color variant becomes immediately available for
 * assignment to product SKUs through the shopping_mall_skus table's
 * shopping_mall_sku_color_id foreign key relationship. The color can be
 * referenced by multiple products and SKUs across different sellers, promoting
 * color taxonomy consistency throughout the marketplace.
 *
 * Related operations that work together with this endpoint include SKU creation
 * endpoints that reference these color IDs when defining product variants,
 * product management endpoints that display available color options, and color
 * listing endpoints that show all available colors to sellers during product
 * configuration.
 *
 * @param props.connection
 * @param props.body SKU color variant creation data including required color
 *   name and optional hex code for visual representation
 * @path /shoppingMall/admin/skuColors
 * @accessor api.functional.shoppingMall.admin.skuColors.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * SKU color variant creation data including required color name and
     * optional hex code for visual representation
     */
    body: IShoppingMallSkuColor.ICreate;
  };
  export type Body = IShoppingMallSkuColor.ICreate;
  export type Response = IShoppingMallSkuColor;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/skuColors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/skuColors";
  export const random = (): IShoppingMallSkuColor =>
    typia.random<IShoppingMallSkuColor>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing SKU color variant attribute that is used across product
 * variants in the catalog. This operation allows administrators to modify the
 * color name and optional hex code for visual representation of a color
 * variant.
 *
 * The color variant is a reusable attribute that can be assigned to multiple
 * product SKUs throughout the platform. When a color is updated, all products
 * using this color variant will reflect the updated color information
 * immediately. This ensures consistency across the product catalog when color
 * naming or visual representation needs to be corrected or refined.
 *
 * Security considerations require administrative privileges to perform this
 * operation, as color variant changes affect multiple products and sellers.
 * Only admins have permission to manage the global color variant catalog to
 * maintain data quality and prevent unauthorized modifications that could
 * confuse customers.
 *
 * The operation validates that the color name remains unique after the update
 * to prevent duplicate color entries. If a hex code is provided, it must follow
 * the standard hex color format (#RRGGBB). The system preserves referential
 * integrity by maintaining all SKU relationships to this color variant while
 * updating its display attributes.
 *
 * This operation is typically used when standardizing color naming conventions,
 * correcting spelling errors in color names, adding or updating hex codes for
 * better visual swatches, or consolidating similar color variants to reduce
 * redundancy in the catalog.
 *
 * @param props.connection
 * @param props.colorId Unique identifier of the target SKU color variant to
 *   update
 * @param props.body Updated color variant information including name and
 *   optional hex code
 * @path /shoppingMall/admin/skuColors/:colorId
 * @accessor api.functional.shoppingMall.admin.skuColors.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target SKU color variant to update */
    colorId: string & tags.Format<"uuid">;

    /**
     * Updated color variant information including name and optional hex
     * code
     */
    body: IShoppingMallSkuColor.IUpdate;
  };
  export type Body = IShoppingMallSkuColor.IUpdate;
  export type Response = IShoppingMallSkuColor;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/skuColors/:colorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/skuColors/${encodeURIComponent(props.colorId ?? "null")}`;
  export const random = (): IShoppingMallSkuColor =>
    typia.random<IShoppingMallSkuColor>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("colorId")(() => typia.assert(props.colorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove an SKU color variant attribute from the catalog.
 *
 * Permanently delete an SKU color variant attribute from the product catalog.
 * This operation removes the color variant from the shopping_mall_sku_colors
 * table and is only permitted when no active product SKUs are currently using
 * this color variant.
 *
 * This is a hard delete operation that completely removes the color record from
 * the database. The shopping_mall_sku_colors table does not include soft delete
 * functionality, so deletion is permanent and irreversible. Before executing
 * the deletion, the system validates that no SKUs in the shopping_mall_skus
 * table reference this color through the shopping_mall_sku_color_id foreign
 * key.
 *
 * Security considerations require administrative privileges for this operation,
 * as color variant management affects the entire product catalog across all
 * sellers. Only admins have permission to remove color variants to prevent
 * accidental data loss and maintain catalog integrity.
 *
 * The operation enforces referential integrity by checking for active SKU
 * references. If any product SKUs currently use this color variant, the
 * deletion is rejected with an appropriate error message indicating the color
 * is in use. This prevents breaking product variant configurations and ensures
 * customers can still view historical order information correctly.
 *
 * This operation is typically used when consolidating redundant color variants,
 * removing color entries that were created by mistake, or cleaning up unused
 * color options from the catalog. Administrators should verify that no products
 * depend on this color before deletion, either by checking the usage count or
 * by first reassigning products to alternative color variants.
 *
 * Related operations include updating color variants (PUT /skuColors/{colorId})
 * for non-destructive modifications and retrieving color details (GET
 * /skuColors/{colorId}) to verify usage before deletion.
 *
 * @param props.connection
 * @param props.colorId Unique identifier of the target SKU color variant to
 *   permanently delete
 * @path /shoppingMall/admin/skuColors/:colorId
 * @accessor api.functional.shoppingMall.admin.skuColors.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the target SKU color variant to permanently
     * delete
     */
    colorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/skuColors/:colorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/skuColors/${encodeURIComponent(props.colorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("colorId")(() => typia.assert(props.colorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
