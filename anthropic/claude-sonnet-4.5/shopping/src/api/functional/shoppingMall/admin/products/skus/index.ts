import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSku } from "../../../../../structures/IShoppingMallSku";

/**
 * Update a product SKU variant's pricing, inventory, and active status.
 *
 * Updates an existing product SKU variant's attributes including price,
 * inventory quantities (available and reserved), low stock threshold, and
 * active status. This operation enables sellers to maintain accurate product
 * variant information and inventory levels for their products.
 *
 * The operation validates that the specified SKU belongs to the specified
 * product to ensure data integrity. Sellers can only update SKUs for products
 * they own, while administrators have platform-wide access to update any SKU.
 *
 * Key update capabilities include adjusting SKU pricing to reflect market
 * conditions or promotional strategies, modifying inventory quantities when
 * restocking or correcting discrepancies, updating low stock thresholds to
 * trigger appropriate alerts, and toggling SKU active status to control variant
 * availability without deletion.
 *
 * The operation maintains the relationship between products and their SKUs as
 * defined in the shopping_mall_skus table, which tracks independent pricing and
 * inventory for each variant combination of color, size, and custom options.
 * Updates to inventory quantities should consider existing reserved quantities
 * from active carts and pending orders.
 *
 * Security considerations include role-based access control where sellers can
 * only update their own products' SKUs and admins can update any SKU. The
 * operation logs inventory changes for audit trail purposes when quantities are
 * modified, supporting inventory transaction tracking requirements.
 *
 * This operation is typically used when sellers need to adjust pricing
 * strategies, restock inventory after receiving new shipments, correct
 * inventory discrepancies, or temporarily disable specific variants. Updates
 * are applied immediately and reflected in product catalog displays, cart
 * validations, and order processing workflows.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the parent product containing the
 *   SKU variant
 * @param props.skuId Unique identifier of the specific SKU variant to update
 * @param props.body Updated SKU variant information including pricing,
 *   inventory, and status
 * @path /shoppingMall/admin/products/:productId/skus/:skuId
 * @accessor api.functional.shoppingMall.admin.products.skus.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the parent product containing the SKU variant */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific SKU variant to update */
    skuId: string & tags.Format<"uuid">;

    /**
     * Updated SKU variant information including pricing, inventory, and
     * status
     */
    body: IShoppingMallSku.IUpdate;
  };
  export type Body = IShoppingMallSku.IUpdate;
  export type Response = IShoppingMallSku;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/products/:productId/skus/:skuId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IShoppingMallSku =>
    typia.random<IShoppingMallSku>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a product SKU variant from the system.
 *
 * Permanently removes a product SKU variant from the database. This operation
 * performs a hard delete as the shopping_mall_skus table does not support soft
 * deletion. Once deleted, the SKU cannot be recovered and all associated data
 * is permanently removed.
 *
 * The operation validates that the specified SKU belongs to the specified
 * product to ensure proper data relationships. Sellers can only delete SKUs
 * from products they own, while administrators have platform-wide access to
 * delete any SKU.
 *
 * Critical validation includes checking that the SKU is not referenced in
 * existing order items (shopping_mall_order_items table) to preserve order
 * history integrity. If the SKU has been purchased in any order, the deletion
 * is blocked and an appropriate error is returned. This ensures historical
 * order data remains accurate and customers can view their past purchases
 * correctly.
 *
 * Additional validation checks include verifying that the product has at least
 * one other active SKU remaining after deletion, as products cannot exist
 * without any purchasable variants. If this is the last SKU for a product, the
 * deletion may be blocked or the product status may need to be updated
 * accordingly.
 *
 * The operation also cleans up related data including cart items
 * (shopping_mall_cart_items), wishlist items (shopping_mall_wishlist_items),
 * and product images (shopping_mall_product_images) that are specific to the
 * deleted SKU variant. These cascading deletions ensure data consistency across
 * the system.
 *
 * Security considerations include role-based access control where sellers can
 * only delete SKUs from their own products and admins can delete any SKU. The
 * operation logs the deletion action for audit trail purposes, recording who
 * deleted the SKU, when, and which product it belonged to.
 *
 * This operation is typically used when sellers need to remove discontinued
 * variants, correct erroneous SKU entries created by mistake, or clean up
 * product listings by removing variants that are no longer offered. Because
 * this is a permanent deletion, it should be used with caution and appropriate
 * confirmation prompts in the user interface.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the parent product containing the
 *   SKU variant
 * @param props.skuId Unique identifier of the specific SKU variant to
 *   permanently delete
 * @path /shoppingMall/admin/products/:productId/skus/:skuId
 * @accessor api.functional.shoppingMall.admin.products.skus.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent product containing the SKU variant */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific SKU variant to permanently delete */
    skuId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/products/:productId/skus/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
