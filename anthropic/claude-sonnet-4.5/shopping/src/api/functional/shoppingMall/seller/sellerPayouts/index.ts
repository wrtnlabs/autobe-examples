import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerPayout } from "../../../../structures/IShoppingMallSellerPayout";

/**
 * Retrieve detailed information for a specific seller payout by payout ID.
 *
 * Retrieve complete details of a specific seller payout record by its unique
 * identifier. This operation provides comprehensive financial information about
 * a payout settlement including the settlement period covered, total order
 * revenue, platform commission deductions, refund deductions, payment
 * processing fees, and the final net payout amount transferred to the seller.
 *
 * This endpoint is critical for financial transparency and reconciliation.
 * Sellers use it to verify their earnings, understand deductions, and confirm
 * payout processing status. Administrators use it to audit payout calculations,
 * investigate payout issues, and ensure accurate financial settlements.
 *
 * The payout record corresponds to the shopping_mall_seller_payouts table in
 * the Prisma schema, which tracks periodic payment settlements to sellers after
 * deducting platform commission and fees. Each payout covers a specific time
 * period (typically weekly or monthly) and aggregates all eligible orders
 * delivered during that period.
 *
 * Security considerations include role-based access control where sellers can
 * only view their own payouts, while admins have platform-wide access to all
 * seller payouts. The endpoint validates that the requesting user has
 * appropriate permissions before returning payout details.
 *
 * The response includes the payout status (pending, processing, completed,
 * failed, on_hold), payout method (bank_transfer, paypal, etc.), and processing
 * timestamps. For completed payouts, it includes the payout reference number
 * for bank reconciliation. For failed payouts, it provides failure reasons to
 * help resolve payout issues.
 *
 * This operation integrates with the seller order management system to show
 * which orders contributed to the payout and with the refund system to show
 * refund deductions. It also displays commission calculations transparently so
 * sellers understand platform fee deductions.
 *
 * @param props.connection
 * @param props.payoutId Unique identifier of the seller payout record to
 *   retrieve
 * @path /shoppingMall/seller/sellerPayouts/:payoutId
 * @accessor api.functional.shoppingMall.seller.sellerPayouts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller payout record to retrieve */
    payoutId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerPayout;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/sellerPayouts/:payoutId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/sellerPayouts/${encodeURIComponent(props.payoutId ?? "null")}`;
  export const random = (): IShoppingMallSellerPayout =>
    typia.random<IShoppingMallSellerPayout>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("payoutId")(() => typia.assert(props.payoutId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
