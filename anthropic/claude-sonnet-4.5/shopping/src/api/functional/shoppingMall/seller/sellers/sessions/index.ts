import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSession } from "../../../../../structures/IShoppingMallSession";

/**
 * Retrieve detailed information about a specific seller session.
 *
 * Retrieve comprehensive details about a specific seller session including
 * device information, location data, activity timestamps, and session validity
 * status. This operation supports the multi-device session management
 * capabilities specified in section 7.2 of the User Roles and Authentication
 * requirements document.
 *
 * The operation queries the shopping_mall_sessions table to retrieve the
 * session record matching the provided sessionId and validates that the session
 * belongs to the authenticated seller (user_type='seller' and seller_id matches
 * the authenticated seller). This ownership validation ensures sellers can only
 * view their own sessions, implementing the least privilege security
 * principle.
 *
 * The returned session information includes comprehensive metadata captured
 * during session creation and maintained throughout the session lifecycle.
 * Device information parsed from the user agent string includes device_type
 * (mobile, tablet, desktop), browser_name (Chrome, Firefox, Safari, etc.),
 * operating_system (Windows, macOS, iOS, Android, Linux), and a user-friendly
 * device_name for display in the active sessions list.
 *
 * Security-related information includes the IP address from which the session
 * was initiated, approximate_location based on IP geolocation (e.g., 'New York,
 * US'), and security status indicators. The is_revoked boolean indicates
 * whether the session has been manually terminated, and revoked_at timestamp
 * records when revocation occurred. The refresh_token_expires_at timestamp
 * shows when the refresh token will expire, and last_activity_at tracks the
 * most recent session activity.
 *
 * This operation enables the seller to view all active sessions feature
 * specified in the session management requirements. Sellers can review their
 * active sessions to identify unfamiliar devices or locations, which helps
 * detect unauthorized access. The detailed device and location information
 * assists sellers in recognizing their own devices versus potential security
 * threats.
 *
 * The session detail information is essential for implementing the 'revoke
 * specific session' and 'logout from all devices' features. Sellers use this
 * data to identify which sessions to terminate when they detect suspicious
 * activity or want to sign out from devices they no longer use.
 *
 * Session validity is determined by checking that is_revoked is false and
 * refresh_token_expires_at is in the future. The operation returns complete
 * session state including whether the session is currently valid, expired, or
 * revoked, enabling the seller dashboard to display accurate session status.
 *
 * This operation integrates with the session security features specified in the
 * authentication requirements, including suspicious login detection and
 * security alert notifications. When a seller reviews their sessions and
 * identifies an unrecognized device or location, they can use the session
 * termination features to revoke that session immediately.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller who owns the session
 * @param props.sessionId Unique identifier of the specific session to retrieve
 *   details for
 * @path /shoppingMall/seller/sellers/:sellerId/sessions/:sessionId
 * @accessor api.functional.shoppingMall.seller.sellers.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller who owns the session */
    sellerId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific session to retrieve details for */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSession;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/sellers/:sellerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IShoppingMallSession =>
    typia.random<IShoppingMallSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Terminate a specific seller session to remotely log out from a device.
 *
 * Terminates a specific active session for a seller account, enabling remote
 * logout from individual devices or browsers. This operation is a critical
 * security feature that allows sellers to manage their active sessions across
 * multiple devices and revoke access from sessions they no longer recognize or
 * need.
 *
 * When a seller is logged in across multiple devices (desktop, mobile, tablet),
 * each login creates a separate session record with a unique session identifier
 * and refresh token. This operation targets a specific session by its ID,
 * allowing granular control over which device or browser session to terminate
 * without affecting other active sessions.
 *
 * The session termination process involves marking the session as revoked by
 * setting is_revoked to true and recording the revocation timestamp in
 * revoked_at. The associated JWT refresh token is invalidated immediately,
 * preventing any future token refresh operations from that session. The
 * seller's access token for that session will expire naturally (within 30
 * minutes) and cannot be renewed, effectively logging them out from that
 * specific device.
 *
 * This operation is particularly valuable for security scenarios: if a seller
 * suspects unauthorized access, they can view all active sessions in their
 * account settings and remotely terminate suspicious sessions. Similarly, if a
 * seller used a public or shared computer and forgot to log out, they can later
 * revoke that session from a trusted device.
 *
 * The operation validates that the session belongs to the specified seller
 * before allowing termination. Sellers cannot terminate sessions belonging to
 * other sellers, customers, or admins. The session must exist and belong to the
 * authenticated seller for the operation to succeed.
 *
 * Upon successful termination, the seller receives confirmation and the session
 * immediately becomes unusable for authentication. The session record is
 * preserved with the revoked status for security audit purposes. All session
 * termination events are logged with timestamp and the seller who initiated the
 * termination for compliance and security monitoring.
 *
 * This operation integrates with the authentication system defined in the User
 * Roles and Authentication requirements, specifically supporting the
 * multi-device session management and remote session revocation capabilities
 * specified for seller accounts.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller whose session is being
 *   terminated
 * @param props.sessionId Unique identifier of the specific session to terminate
 * @path /shoppingMall/seller/sellers/:sellerId/sessions/:sessionId
 * @accessor api.functional.shoppingMall.seller.sellers.sessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller whose session is being terminated */
    sellerId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific session to terminate */
    sessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/sellers/:sellerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
