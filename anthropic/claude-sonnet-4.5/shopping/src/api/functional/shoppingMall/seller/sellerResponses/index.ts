import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerResponse } from "../../../../structures/IShoppingMallSellerResponse";
import { IPageIShoppingMallSellerResponse } from "../../../../structures/IPageIShoppingMallSellerResponse";

/**
 * Create new seller response to customer product review.
 *
 * Create a new seller response to a customer product review, enabling sellers
 * to engage with customer feedback professionally. This operation allows
 * sellers to post replies to reviews on their products, addressing customer
 * concerns, providing explanations, thanking customers for positive feedback,
 * or offering solutions to reported issues.
 *
 * Seller responses are an essential component of the trusted review ecosystem
 * defined in the product reviews and ratings requirements. By responding to
 * reviews, sellers can build customer relationships, demonstrate
 * responsiveness, clarify misunderstandings, and showcase their commitment to
 * customer satisfaction. Professional and helpful seller responses can
 * positively influence potential customers reading reviews.
 *
 * The operation enforces the business rule that sellers can submit only one
 * response per review. The system validates that the authenticated seller owns
 * the product associated with the review being responded to, preventing sellers
 * from responding to reviews on competitors' products. Additionally, the system
 * checks that no existing response has been submitted for this review, as the
 * shopping_mall_seller_responses table has a unique constraint on
 * shopping_mall_review_id.
 *
 * All seller responses undergo mandatory moderation workflow before
 * publication. When a seller submits a response, the system creates a new
 * record with status set to 'pending_moderation' and notifies the admin
 * moderation team. This ensures that all seller communications maintain
 * professional standards, comply with platform response guidelines (no
 * offensive language, no requests to remove reviews, no promotional content),
 * and protect the integrity of the review system.
 *
 * The response text is limited to 2000 characters to encourage concise, focused
 * communication. Sellers should address the specific points raised in the
 * customer review, provide helpful information, and maintain a respectful tone
 * even when responding to negative reviews. The system validates response
 * content for prohibited patterns including profanity, contact information, and
 * policy violations before accepting submission.
 *
 * Security and role-based access control ensure that only authenticated sellers
 * can create responses, and sellers can only respond to reviews on their own
 * products. The operation references the shopping_mall_reviews table to
 * retrieve review details and validate seller ownership through the product
 * relationship chain (review → product → seller).
 *
 * This operation integrates with the notification system to alert the customer
 * who wrote the review when the seller response is approved and published,
 * fostering transparent communication between buyers and sellers. The
 * moderation workflow protects customers from inappropriate seller
 * communications while enabling constructive seller engagement.
 *
 * @param props.connection
 * @param props.body Seller response creation data including review ID, response
 *   text, and seller information
 * @path /shoppingMall/seller/sellerResponses
 * @accessor api.functional.shoppingMall.seller.sellerResponses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Seller response creation data including review ID, response text, and
     * seller information
     */
    body: IShoppingMallSellerResponse.ICreate;
  };
  export type Body = IShoppingMallSellerResponse.ICreate;
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/sellerResponses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/seller/sellerResponses";
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filtered, paginated list of seller responses to product
 * reviews.
 *
 * Retrieve a comprehensive, paginated list of seller responses to customer
 * product reviews with advanced filtering and search capabilities. This
 * operation provides access to all seller responses across the platform based
 * on the requesting user's role and permissions.
 *
 * Seller responses represent replies posted by sellers to customer reviews on
 * their products. Each response undergoes moderation workflow before
 * publication, requiring admin approval to ensure professional and
 * policy-compliant communication. Sellers can respond to reviews to address
 * customer concerns, provide explanations, thank customers for positive
 * feedback, and build customer relationships.
 *
 * The operation supports complex search and filtering criteria including
 * response moderation status (pending_moderation, approved, rejected), seller
 * identification, associated review ID, date ranges, and text content search.
 * This enables sellers to manage their response history and admins to
 * efficiently moderate pending responses.
 *
 * Security and role-based access control ensure that sellers can only view and
 * search their own responses, while admins have platform-wide visibility for
 * moderation purposes. The response data includes complete seller response
 * information with associated review context, seller business details,
 * moderation status, timestamps, and soft deletion status.
 *
 * This operation integrates with the product review system defined in the
 * shopping_mall_reviews table, enabling navigation from reviews to seller
 * responses and supporting the complete review-response workflow. Pagination
 * parameters allow efficient handling of large response datasets, and sorting
 * options (by creation date, status, helpfulness) provide flexible result
 * ordering.
 *
 * The endpoint is critical for seller reputation management, enabling sellers
 * to engage with customer feedback professionally and for admins to maintain
 * communication quality standards across the marketplace.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for seller responses including
 *   status, seller ID, review association, date ranges, and pagination
 *   parameters
 * @path /shoppingMall/seller/sellerResponses
 * @accessor api.functional.shoppingMall.seller.sellerResponses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria for seller responses including status,
     * seller ID, review association, date ranges, and pagination
     * parameters
     */
    body: IShoppingMallSellerResponse.IRequest;
  };
  export type Body = IShoppingMallSellerResponse.IRequest;
  export type Response = IPageIShoppingMallSellerResponse.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/sellerResponses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/seller/sellerResponses";
  export const random = (): IPageIShoppingMallSellerResponse.ISummary =>
    typia.random<IPageIShoppingMallSellerResponse.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific seller response by ID.
 *
 * Retrieve comprehensive detailed information about a specific seller response
 * to a customer product review using the response's unique identifier. This
 * operation provides complete response data including the response text
 * content, moderation status, associated review context, and seller
 * information.
 *
 * Seller responses are replies posted by sellers to customer reviews on their
 * products, enabling sellers to address customer concerns, provide
 * explanations, offer solutions, or thank customers for positive feedback. All
 * seller responses undergo moderation workflow requiring admin approval before
 * publication to ensure professional communication and policy compliance.
 *
 * The operation returns complete seller response details including the response
 * text (maximum 2000 characters), current moderation status
 * (pending_moderation, approved, rejected), associated review information with
 * the original customer review content and rating, seller business details,
 * submission and last edit timestamps, and soft deletion status. This
 * comprehensive data supports seller response management, admin moderation
 * workflows, and customer display of seller engagement.
 *
 * Security and role-based access control ensure that sellers can only view
 * their own responses while admins have platform-wide access for moderation
 * purposes. The endpoint validates that the requesting user has appropriate
 * permissions to access the specific seller response.
 *
 * This operation integrates with the shopping_mall_reviews table to provide
 * complete review-response context, enabling display of seller responses
 * beneath customer reviews on product pages. The response data includes whether
 * the response has been edited (updated_at differs from created_at), supporting
 * the '7-day edit window' business rule where sellers can modify responses
 * within 7 days of submission.
 *
 * The endpoint is essential for sellers to view and edit their responses, for
 * admins to moderate pending responses and review policy compliance, and for
 * displaying approved seller responses to customers on product detail pages as
 * part of the trusted review ecosystem.
 *
 * @param props.connection
 * @param props.responseId Unique identifier of the seller response to retrieve
 * @path /shoppingMall/seller/sellerResponses/:responseId
 * @accessor api.functional.shoppingMall.seller.sellerResponses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller response to retrieve */
    responseId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/sellerResponses/:responseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/sellerResponses/${encodeURIComponent(props.responseId ?? "null")}`;
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("responseId")(() => typia.assert(props.responseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing seller response to customer review within 7-day edit window.
 *
 * Update an existing seller response to a customer product review, allowing
 * sellers to edit their replies within 7 days of original submission. This
 * operation enables sellers to correct errors, add additional information,
 * improve clarity, or refine their communication with customers who reviewed
 * their products.
 *
 * The operation enforces the critical 7-day edit window business rule defined
 * in the product reviews and ratings requirements. Sellers can modify response
 * text within 7 days of the original submission (created_at), after which
 * responses become permanently locked and cannot be edited. This policy
 * balances seller flexibility with maintaining review integrity and preventing
 * abuse of the response system.
 *
 * When a seller edits a response, the system validates that the authenticated
 * seller owns the original response through the shopping_mall_seller_id foreign
 * key. This prevents sellers from modifying other sellers' responses and
 * maintains proper ownership boundaries. The system also validates that the
 * response is within the 7-day edit window by comparing the current timestamp
 * against the response's created_at timestamp.
 *
 * All edited responses require re-moderation before republication to ensure the
 * updated content continues to comply with platform response guidelines. When a
 * seller submits an edited response, the system resets the status field to
 * 'pending_moderation' and removes the response from public display until an
 * admin reviews and approves the changes. This moderation workflow protects
 * customers from inappropriate content while allowing sellers to improve their
 * communications.
 *
 * The operation updates the response_text field with the new content (validated
 * for maximum 2000 characters, no profanity, no contact information, no
 * promotional content). The updated_at timestamp is set to the current time,
 * and the system displays an 'edited' badge on approved responses where
 * updated_at differs from created_at, providing transparency to customers that
 * the response was modified.
 *
 * Security and role-based access control ensure that only the seller who
 * created the original response can edit it. Admins cannot directly edit seller
 * responses but can reject them during moderation if they violate policies,
 * requiring sellers to submit new responses instead.
 *
 * This operation integrates with the shopping_mall_reviews table to maintain
 * the review-response relationship and with the moderation system to queue
 * edited responses for admin review. The edit history is tracked through the
 * updated_at timestamp, and the soft deletion status (deleted_at) is preserved
 * if applicable.
 *
 * The endpoint is essential for seller reputation management, enabling sellers
 * to refine their customer communication while maintaining platform
 * communication quality standards through mandatory re-moderation of all
 * edits.
 *
 * @param props.connection
 * @param props.responseId Unique identifier of the seller response to update
 * @param props.body Updated seller response data including revised response
 *   text
 * @path /shoppingMall/seller/sellerResponses/:responseId
 * @accessor api.functional.shoppingMall.seller.sellerResponses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller response to update */
    responseId: string & tags.Format<"uuid">;

    /** Updated seller response data including revised response text */
    body: IShoppingMallSellerResponse.IUpdate;
  };
  export type Body = IShoppingMallSellerResponse.IUpdate;
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/sellerResponses/:responseId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/sellerResponses/${encodeURIComponent(props.responseId ?? "null")}`;
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("responseId")(() => typia.assert(props.responseId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete seller response to customer review (soft delete).
 *
 * Permanently delete a seller response to a customer product review, removing
 * it from public display while preserving the data for audit and compliance
 * purposes. This operation enables sellers to remove their responses at any
 * time if they wish to withdraw their reply or if the response is no longer
 * relevant.
 *
 * The operation performs a soft delete by setting the deleted_at timestamp in
 * the shopping_mall_seller_responses table, as confirmed by the Prisma schema
 * which includes a deleted_at field of type DateTime (nullable). Soft deletion
 * preserves the complete response history for audit trail, moderation review,
 * and potential dispute resolution while immediately hiding the response from
 * customer view and excluding it from search results.
 *
 * When a seller deletes a response, the system validates that the authenticated
 * seller owns the response through the shopping_mall_seller_id foreign key.
 * This ownership validation prevents sellers from deleting other sellers'
 * responses and maintains proper access control boundaries. Only the seller who
 * originally created the response can delete it, except admins who have
 * override capabilities for moderation purposes.
 *
 * Deleted seller responses are immediately removed from product detail pages
 * where they would normally appear beneath customer reviews. The system
 * excludes soft-deleted responses (where deleted_at is not null) from all
 * customer-facing queries, search results, and review displays. However, the
 * response data remains in the database for compliance with record retention
 * policies and potential audit requirements.
 *
 * The soft deletion approach ensures that if a response was part of a
 * moderation workflow, dispute resolution, or compliance investigation, the
 * complete record is preserved even after the seller removes it from public
 * view. Admins can still access deleted responses through admin interfaces for
 * review history and pattern analysis.
 *
 * Security and role-based access control ensure that only authenticated sellers
 * can delete responses, and sellers can only delete their own responses. The
 * operation validates seller ownership before executing the soft delete
 * operation. Admins have separate moderation tools to remove policy-violating
 * responses through the content moderation workflow.
 *
 * This operation integrates with the product review system defined in the
 * shopping_mall_reviews table, maintaining the review-response relationship
 * even after deletion for historical reference. The soft deletion pattern
 * supports data retention policies while providing sellers with control over
 * their published communications.
 *
 * The endpoint is important for seller account management, enabling sellers to
 * manage their response history and remove responses they no longer wish to
 * maintain publicly, while the platform retains complete audit trails for
 * compliance and quality control purposes.
 *
 * @param props.connection
 * @param props.responseId Unique identifier of the seller response to delete
 * @path /shoppingMall/seller/sellerResponses/:responseId
 * @accessor api.functional.shoppingMall.seller.sellerResponses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller response to delete */
    responseId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/sellerResponses/:responseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/sellerResponses/${encodeURIComponent(props.responseId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("responseId")(() => typia.assert(props.responseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
