import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReviewImage } from "../../../../structures/IShoppingMallReviewImage";
import { IPageIShoppingMallReviewImage } from "../../../../structures/IPageIShoppingMallReviewImage";

/**
 * Retrieve paginated list of images for a specific product review.
 *
 * Retrieve a filtered and paginated collection of customer-uploaded images
 * associated with a specific product review identified by the reviewId path
 * parameter. This operation provides comprehensive access to review image
 * metadata including storage URLs, display ordering, upload timestamps, and
 * image positioning within the review's gallery.
 *
 * The operation integrates with the shopping_mall_review_images table and
 * provides read-only access to image collections. Images serve as visual
 * evidence and context for customer reviews, particularly valuable for
 * showcasing product quality, identifying defects in refund requests, and
 * building trust through authentic customer photography.
 *
 * Security considerations include validation that the specified review exists
 * and is accessible, appropriate filtering of images from unpublished or
 * moderated reviews based on the requesting user's authorization level, and
 * rate limiting to prevent automated scraping of review image URLs. Only
 * approved and published reviews' images are visible to public users, while
 * moderators and admins can access images from reviews in any moderation
 * status.
 *
 * The response includes complete image metadata optimized for gallery display,
 * with support for responsive image loading, lazy loading optimization, and
 * thumbnail generation. Images are returned in display_order sequence as
 * configured by the review author, enabling accurate representation of the
 * customer's intended visual narrative.
 *
 * This operation is commonly used in conjunction with review detail retrieval
 * endpoints to provide complete review visualization including both textual
 * content and supporting imagery. The paginated response structure supports
 * efficient loading of reviews with numerous images while maintaining
 * acceptable performance characteristics.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review whose
 *   images are being retrieved
 * @param props.body Pagination, filtering, and sorting parameters for review
 *   image collection retrieval
 * @path /shoppingMall/reviews/:reviewId/images
 * @accessor api.functional.shoppingMall.reviews.images.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target product review whose images are being
     * retrieved
     */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Pagination, filtering, and sorting parameters for review image
     * collection retrieval
     */
    body: IShoppingMallReviewImage.IRequest;
  };
  export type Body = IShoppingMallReviewImage.IRequest;
  export type Response = IPageIShoppingMallReviewImage;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/reviews/:reviewId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/reviews/${encodeURIComponent(props.reviewId ?? "null")}/images`;
  export const random = (): IPageIShoppingMallReviewImage =>
    typia.random<IPageIShoppingMallReviewImage>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
