import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderItem } from "../../../../structures/IShoppingMallOrderItem";
import { IPageIShoppingMallOrderItem } from "../../../../structures/IPageIShoppingMallOrderItem";

/**
 * Retrieve filtered list of order items for a specific order.
 *
 * Retrieve a filtered and paginated list of order items (line items) for a
 * specific order identified by orderId. This operation provides advanced search
 * capabilities for examining individual line items within an order context,
 * supporting filtering by SKU, product name, price range, quantity, and item
 * status.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Results can be sorted by creation date, product name,
 * quantity, unit price, or item status in ascending or descending order.
 *
 * This operation is particularly valuable for admin order management dashboards
 * where detailed analysis of order composition is needed, seller fulfillment
 * workflows where individual item statuses must be tracked, and customer order
 * detail views showing itemized purchase history. It enables granular
 * inspection of order contents beyond simple order totals.
 *
 * Security considerations include role-based access control ensuring customers
 * can only view their own order items, sellers can view items from orders
 * containing their products, and admins have unrestricted access to all order
 * items. The operation respects the order ownership hierarchy defined in the
 * shopping_mall_orders table.
 *
 * The response includes complete order item information from the
 * shopping_mall_order_items table including product_name, variant_attributes,
 * product_image_url, quantity, unit_price, and item_status. This provides rich
 * context for understanding the order composition and individual item lifecycle
 * within the fulfillment process.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose items are being
 *   retrieved
 * @param props.body Search criteria and pagination parameters for filtering
 *   order items
 * @path /shoppingMall/orders/:orderId/items
 * @accessor api.functional.shoppingMall.orders.items.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose items are being retrieved */
    orderId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for filtering order items */
    body: IShoppingMallOrderItem.IRequest;
  };
  export type Body = IShoppingMallOrderItem.IRequest;
  export type Response = IPageIShoppingMallOrderItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IPageIShoppingMallOrderItem =>
    typia.random<IPageIShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
