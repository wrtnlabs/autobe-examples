import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../structures/IShoppingMallSeller";
import { IShoppingMallSession } from "../../../../structures/IShoppingMallSession";

/**
 * Authenticate seller and create new session with JWT tokens.
 *
 * Authenticate a seller user and establish a new authenticated session by
 * validating credentials and generating JWT access and refresh tokens. This
 * operation implements the complete seller login workflow as specified in the
 * User Roles and Authentication requirements document.
 *
 * The operation validates the seller's email and password against the hashed
 * password stored in the shopping_mall_sellers table. It enforces critical
 * security policies including account status verification (account must be
 * active, not suspended or banned), email verification status (email_verified
 * must be true), and account lockout rules (account_locked_until must be null
 * or expired).
 *
 * Failed login attempt tracking is implemented through the
 * failed_login_attempts counter and failed_login_window_start_at timestamp. The
 * system enforces the business rule of allowing 5 failed attempts within a
 * 15-minute window before locking the account for 30 minutes. Upon successful
 * authentication, the failed_login_attempts counter is reset to zero.
 *
 * Upon successful credential validation, the operation generates a JWT access
 * token (30-minute expiration) and refresh token (30-day expiration) following
 * the token specifications defined in the authentication requirements. The
 * access token payload includes sellerId, email, role ('seller'), and
 * permissions. The refresh token is stored in a new shopping_mall_sessions
 * record with user_type='seller', device information parsed from the user
 * agent, IP address, and session metadata.
 *
 * The operation supports multi-device concurrent sessions as specified in the
 * session management requirements. Each login creates a new session record, and
 * sellers can maintain multiple active sessions across different devices
 * simultaneously. Session records include device_type, browser_name,
 * operating_system, and approximate_location for security monitoring and
 * display in the seller's active sessions list.
 *
 * Security considerations include rate limiting to prevent brute force attacks,
 * generic error messages that don't reveal whether an email exists, HTTPS-only
 * transmission of credentials and tokens, and comprehensive audit logging of
 * all authentication attempts. The operation implements the complete
 * authentication flow diagram specified in section 2.2.3 of the User Roles and
 * Authentication document.
 *
 * This operation integrates with the seller management system to enable access
 * to seller dashboard, product listing management, inventory control, order
 * fulfillment, and sales analytics features. It is a prerequisite for all
 * seller-specific operations on the platform.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller account attempting to
 *   authenticate
 * @param props.body Seller login credentials including email and password for
 *   authentication
 * @path /shoppingMall/sellers/:sellerId/sessions
 * @accessor api.functional.shoppingMall.sellers.sessions.patchBySellerid
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patchBySellerid(
  connection: IConnection,
  props: patchBySellerid.Props,
): Promise<patchBySellerid.Response> {
  return true === connection.simulate
    ? patchBySellerid.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchBySellerid.METADATA,
          path: patchBySellerid.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace patchBySellerid {
  export type Props = {
    /** Unique identifier of the seller account attempting to authenticate */
    sellerId: string & tags.Format<"uuid">;

    /**
     * Seller login credentials including email and password for
     * authentication
     */
    body: IShoppingMallSeller.ILogin;
  };
  export type Body = IShoppingMallSeller.ILogin;
  export type Response = IShoppingMallSeller.ILoginResponse;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/sellers/:sellerId/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellers/${encodeURIComponent(props.sellerId ?? "null")}/sessions`;
  export const random = (): IShoppingMallSeller.ILoginResponse =>
    typia.random<IShoppingMallSeller.ILoginResponse>();
  export const simulate = (
    connection: IConnection,
    props: patchBySellerid.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchBySellerid.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate seller and create new session with JWT tokens.
 *
 * Authenticate a seller user and establish a new authenticated session by
 * validating credentials and generating JWT access and refresh tokens. This
 * operation implements the complete seller login workflow as specified in the
 * User Roles and Authentication requirements document.
 *
 * The operation validates the seller's email and password against the hashed
 * password stored in the shopping_mall_sellers table. It enforces critical
 * security policies including account status verification (account must be
 * active, not suspended or banned), email verification status (email_verified
 * must be true), and account lockout rules (account_locked_until must be null
 * or expired).
 *
 * Failed login attempt tracking is implemented through the
 * failed_login_attempts counter and failed_login_window_start_at timestamp. The
 * system enforces the business rule of allowing 5 failed attempts within a
 * 15-minute window before locking the account for 30 minutes. Upon successful
 * authentication, the failed_login_attempts counter is reset to zero.
 *
 * Upon successful credential validation, the operation generates a JWT access
 * token (30-minute expiration) and refresh token (30-day expiration) following
 * the token specifications defined in the authentication requirements. The
 * access token payload includes sellerId, email, role ('seller'), and
 * permissions. The refresh token is stored in a new shopping_mall_sessions
 * record with user_type='seller', device information parsed from the user
 * agent, IP address, and session metadata.
 *
 * The operation supports multi-device concurrent sessions as specified in the
 * session management requirements. Each login creates a new session record, and
 * sellers can maintain multiple active sessions across different devices
 * simultaneously. Session records include device_type, browser_name,
 * operating_system, and approximate_location for security monitoring and
 * display in the seller's active sessions list.
 *
 * Security considerations include rate limiting to prevent brute force attacks,
 * generic error messages that don't reveal whether an email exists, HTTPS-only
 * transmission of credentials and tokens, and comprehensive audit logging of
 * all authentication attempts. The operation implements the complete
 * authentication flow diagram specified in section 2.2.3 of the User Roles and
 * Authentication document.
 *
 * This operation integrates with the seller management system to enable access
 * to seller dashboard, product listing management, inventory control, order
 * fulfillment, and sales analytics features. It is a prerequisite for all
 * seller-specific operations on the platform.
 *
 * @param props.connection
 * @param props.body Seller login credentials including email and password for
 *   authentication
 * @path /shoppingMall/sellers/sessions
 * @accessor api.functional.shoppingMall.sellers.sessions.post
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Seller login credentials including email and password for
     * authentication
     */
    body: IShoppingMallSeller.ILogin;
  };
  export type Body = IShoppingMallSeller.ILogin;
  export type Response = IShoppingMallSeller.ILoginResponse;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/sellers/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellers/sessions";
  export const random = (): IShoppingMallSeller.ILoginResponse =>
    typia.random<IShoppingMallSeller.ILoginResponse>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific seller session.
 *
 * Retrieve comprehensive details about a specific seller session including
 * device information, location data, activity timestamps, and session validity
 * status. This operation supports the multi-device session management
 * capabilities specified in section 7.2 of the User Roles and Authentication
 * requirements document.
 *
 * The operation queries the shopping_mall_sessions table to retrieve the
 * session record matching the provided sessionId and validates that the session
 * belongs to the authenticated seller (user_type='seller' and seller_id matches
 * the authenticated seller). This ownership validation ensures sellers can only
 * view their own sessions, implementing the least privilege security
 * principle.
 *
 * The returned session information includes comprehensive metadata captured
 * during session creation and maintained throughout the session lifecycle.
 * Device information parsed from the user agent string includes device_type
 * (mobile, tablet, desktop), browser_name (Chrome, Firefox, Safari, etc.),
 * operating_system (Windows, macOS, iOS, Android, Linux), and a user-friendly
 * device_name for display in the active sessions list.
 *
 * Security-related information includes the IP address from which the session
 * was initiated, approximate_location based on IP geolocation (e.g., 'New York,
 * US'), and security status indicators. The is_revoked boolean indicates
 * whether the session has been manually terminated, and revoked_at timestamp
 * records when revocation occurred. The refresh_token_expires_at timestamp
 * shows when the refresh token will expire, and last_activity_at tracks the
 * most recent session activity.
 *
 * This operation enables the seller to view all active sessions feature
 * specified in the session management requirements. Sellers can review their
 * active sessions to identify unfamiliar devices or locations, which helps
 * detect unauthorized access. The detailed device and location information
 * assists sellers in recognizing their own devices versus potential security
 * threats.
 *
 * The session detail information is essential for implementing the 'revoke
 * specific session' and 'logout from all devices' features. Sellers use this
 * data to identify which sessions to terminate when they detect suspicious
 * activity or want to sign out from devices they no longer use.
 *
 * Session validity is determined by checking that is_revoked is false and
 * refresh_token_expires_at is in the future. The operation returns complete
 * session state including whether the session is currently valid, expired, or
 * revoked, enabling the seller dashboard to display accurate session status.
 *
 * This operation integrates with the session security features specified in the
 * authentication requirements, including suspicious login detection and
 * security alert notifications. When a seller reviews their sessions and
 * identifies an unrecognized device or location, they can use the session
 * termination features to revoke that session immediately.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller who owns the session
 * @param props.sessionId Unique identifier of the specific session to retrieve
 *   details for
 * @path /shoppingMall/sellers/:sellerId/sessions/:sessionId
 * @accessor api.functional.shoppingMall.sellers.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller who owns the session */
    sellerId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific session to retrieve details for */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSession;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/sellers/:sellerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellers/${encodeURIComponent(props.sellerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IShoppingMallSession =>
    typia.random<IShoppingMallSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
