import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSkuSize } from "../../../structures/IShoppingMallSkuSize";
import { IPageIShoppingMallSkuSize } from "../../../structures/IPageIShoppingMallSkuSize";

/**
 * Retrieve filtered and paginated list of SKU size variants.
 *
 * Retrieve a comprehensive, filtered, and paginated list of size variant
 * attributes from the shopping_mall_sku_sizes table. Size variants are
 * essential attributes that differentiate product SKUs by size dimensions,
 * supporting diverse sizing systems including standard sizes (Small, Medium,
 * Large), numeric sizes (38, 40, 42), and specialized size categories (US
 * Sizes, EU Sizes, One Size).
 *
 * This operation provides advanced search and filtering capabilities to locate
 * specific size variants based on value patterns, category classifications, and
 * creation date ranges. It supports pagination to efficiently handle large
 * datasets of size options across the platform's product catalog.
 *
 * Size variants are referenced by shopping_mall_skus records to create specific
 * purchasable product variants. For example, a clothing product might have SKUs
 * for each combination of color and size, where size references records from
 * this table. The operation enables administrators and sellers to browse
 * available size options when configuring product variants, and supports bulk
 * size management workflows.
 *
 * The response includes complete size information including the size value
 * (displayed to customers), optional size category (sizing system identifier
 * like 'US Sizes' or 'EU Sizes'), and metadata such as creation and update
 * timestamps. Pagination parameters control the number of results per page and
 * enable navigation through large size catalogs.
 *
 * This endpoint is particularly useful for product variant configuration
 * interfaces, inventory management dashboards, and analytics on size
 * availability and usage across the product catalog. Search functionality
 * allows finding specific sizes by value patterns, enabling quick lookup during
 * product listing creation.
 *
 * Security considerations include role-based access control, with different
 * visibility and filtering options based on user role. Public access may be
 * restricted to active, customer-facing size lists, while sellers and
 * administrators can access comprehensive size catalogs including recently
 * added or modified entries for management purposes.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for retrieving
 *   size variants including value pattern matching, category filtering, date
 *   range filters, sorting options, and pagination controls
 * @path /shoppingMall/skuSizes
 * @accessor api.functional.shoppingMall.skuSizes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for retrieving size
     * variants including value pattern matching, category filtering, date
     * range filters, sorting options, and pagination controls
     */
    body: IShoppingMallSkuSize.IRequest;
  };
  export type Body = IShoppingMallSkuSize.IRequest;
  export type Response = IPageIShoppingMallSkuSize;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/skuSizes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/skuSizes";
  export const random = (): IPageIShoppingMallSkuSize =>
    typia.random<IPageIShoppingMallSkuSize>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific SKU size variant by ID.
 *
 * Retrieve comprehensive information for a specific size variant attribute from
 * the shopping_mall_sku_sizes table identified by its unique UUID. Size
 * variants are fundamental attributes in the product variant system,
 * representing different sizing options that customers can select when
 * purchasing products.
 *
 * This operation returns complete size information including the size value
 * (the actual size displayed to customers such as 'Small', 'Medium', 'Large',
 * '38', '40', or '42'), the optional size category that indicates the sizing
 * system (e.g., 'US Sizes', 'EU Sizes', 'One Size', 'Numeric'), and temporal
 * metadata including creation and last update timestamps.
 *
 * Size variants are referenced by shopping_mall_skus records through the
 * shopping_mall_sku_size_id foreign key to create specific purchasable product
 * variants. For example, a clothing product with multiple sizes would have
 * separate SKU records for each size, all referencing size variant records from
 * this table. The unique combination of color, size, and option attributes
 * defines each distinct SKU.
 *
 * The endpoint is particularly useful when:
 *
 * - Product management interfaces need to display complete size information for a
 *   specific variant
 * - Sellers are configuring product variants and need to view detailed size
 *   attributes
 * - Customer-facing product pages display size information with category context
 *   (e.g., showing 'Size: Medium (US Sizes)')
 * - Administrative tools retrieve size data for reporting, analytics, or bulk
 *   operations
 * - Validation workflows verify size existence and attributes before creating or
 *   updating SKUs
 *
 * The size variant data model supports flexible sizing systems through the
 * combination of value and category fields. The value field stores the actual
 * size designation, while the optional category field provides additional
 * context about the sizing system, enabling the platform to support diverse
 * product categories with different sizing conventions (apparel with S/M/L,
 * shoes with numeric sizes, international size standards, etc.).
 *
 * Security and access control: This operation is publicly accessible since size
 * information is non-sensitive product catalog data required for product
 * browsing and variant selection. All user roles (customers, sellers, admins)
 * and even unauthenticated users can retrieve size information to support
 * product discovery and purchase workflows.
 *
 * @param props.connection
 * @param props.sizeId Unique identifier of the target size variant attribute to
 *   retrieve from shopping_mall_sku_sizes table
 * @path /shoppingMall/skuSizes/:sizeId
 * @accessor api.functional.shoppingMall.skuSizes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target size variant attribute to retrieve
     * from shopping_mall_sku_sizes table
     */
    sizeId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSkuSize;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/skuSizes/:sizeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/skuSizes/${encodeURIComponent(props.sizeId ?? "null")}`;
  export const random = (): IShoppingMallSkuSize =>
    typia.random<IShoppingMallSkuSize>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sizeId")(() => typia.assert(props.sizeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
