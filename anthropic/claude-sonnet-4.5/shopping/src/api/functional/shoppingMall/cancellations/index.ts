import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCancellation } from "../../../structures/IShoppingMallCancellation";

/**
 * Retrieve detailed information for a specific order cancellation request.
 *
 * Retrieve comprehensive details for a specific order cancellation request
 * identified by its unique cancellation ID. This operation provides complete
 * visibility into the cancellation workflow including the requester (customer,
 * seller, or admin), the order being cancelled, cancellation reason and notes,
 * approval status, refund amount, and processing timestamps.
 *
 * The cancellation detail includes information about who requested the
 * cancellation and who approved it (if applicable), enabling full transparency
 * in the cancellation approval workflow. The response shows the current
 * cancellation_status which can be pending_approval, approved, rejected, or
 * completed, allowing users to understand where the cancellation request stands
 * in the processing pipeline.
 *
 * This endpoint is accessible by multiple user roles with different permission
 * levels. Customers can view cancellations for their own orders to track the
 * status of their cancellation requests. Sellers can view cancellations for
 * orders containing their products to review and respond to cancellation
 * requests. Admins have full access to view any cancellation request across the
 * platform for oversight and dispute resolution purposes.
 *
 * The operation returns denormalized order information including order_number
 * and order details to provide complete context without requiring additional
 * API calls. Refund processing status is included through the refund_processed
 * boolean flag and refund_amount field, showing whether the financial reversal
 * has been completed.
 *
 * Security considerations include role-based authorization ensuring customers
 * can only access cancellations for their own orders, sellers can only access
 * cancellations for orders involving their products, and admins have
 * unrestricted access. The endpoint validates that the cancellation ID exists
 * and returns appropriate error responses for invalid or inaccessible
 * cancellation requests.
 *
 * This operation integrates with the shopping_mall_orders table to retrieve
 * order context, and references the shopping_mall_customers,
 * shopping_mall_sellers, and shopping_mall_admins tables through the
 * polymorphic requester and approver relationships documented in the Prisma
 * schema.
 *
 * @param props.connection
 * @param props.cancellationId Unique identifier of the target cancellation
 *   request
 * @path /shoppingMall/cancellations/:cancellationId
 * @accessor api.functional.shoppingMall.cancellations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target cancellation request */
    cancellationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCancellation;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/cancellations/:cancellationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/cancellations/${encodeURIComponent(props.cancellationId ?? "null")}`;
  export const random = (): IShoppingMallCancellation =>
    typia.random<IShoppingMallCancellation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cancellationId")(() => typia.assert(props.cancellationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
