import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallShipment } from "../../../structures/IShoppingMallShipment";
import { IPageIShoppingMallShipment } from "../../../structures/IPageIShoppingMallShipment";

/**
 * Search and retrieve filtered list of shipments.
 *
 * Retrieve a filtered and paginated list of shipments from the
 * shopping_mall_shipments table with advanced search capabilities for finding
 * shipments based on multiple criteria including carrier name, tracking number,
 * shipping method, shipment status, and date ranges.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Shipments can be sorted by shipped_at date,
 * estimated_delivery_date, actual_delivery_date, shipment_status, or
 * carrier_name in ascending or descending order to facilitate efficient
 * logistics management.
 *
 * Security considerations include role-based access control ensuring sellers
 * can only view shipments they created for their orders, customers can view
 * shipments for their orders, and admins have unrestricted access to all
 * platform shipments. The operation enforces data access boundaries based on
 * the authenticated user's role and ownership relationships defined in the
 * shopping_mall_orders and shopping_mall_sellers tables.
 *
 * This operation integrates with the shipping and fulfillment workflow defined
 * in the order management requirements, providing visibility into the current
 * state of all shipments across the platform. It enables sellers to manage
 * their fulfillment pipeline, admins to monitor logistics performance, and
 * supports operational dashboards displaying shipment statistics and delivery
 * timelines.
 *
 * The response includes complete shipment information from the
 * shopping_mall_shipments table including carrier_name, tracking_number,
 * shipping_method, shipment_status, shipped_at, estimated_delivery_date,
 * actual_delivery_date, and delivery_signature. This provides comprehensive
 * tracking data for logistics coordination and customer communication about
 * delivery expectations.
 *
 * Related operations that might be used together include order retrieval
 * endpoints to view the associated order details, order status history to
 * understand the complete order lifecycle, and seller order management
 * endpoints for fulfillment workflows.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, and pagination parameters for
 *   shipment retrieval
 * @path /shoppingMall/shipments
 * @accessor api.functional.shoppingMall.shipments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filters, and pagination parameters for shipment
     * retrieval
     */
    body: IShoppingMallShipment.IRequest;
  };
  export type Body = IShoppingMallShipment.IRequest;
  export type Response = IPageIShoppingMallShipment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/shipments";
  export const random = (): IPageIShoppingMallShipment =>
    typia.random<IPageIShoppingMallShipment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed shipment information by shipment ID.
 *
 * Retrieve comprehensive shipping and tracking information for a specific
 * shipment identified by the shipment ID. This operation provides complete
 * visibility into the shipment lifecycle including carrier details, tracking
 * numbers, current status, estimated and actual delivery dates, and delivery
 * confirmation information.
 *
 * The operation accesses the shopping_mall_shipments table in the Prisma schema
 * and returns all shipment attributes including the carrier name, tracking
 * number, shipping method (standard, express, overnight, free_shipping),
 * current shipment status (label_created, picked_up, in_transit,
 * out_for_delivery, delivered, exception, failed_delivery), and complete
 * timeline information with shipped date, estimated delivery date, and actual
 * delivery date when available.
 *
 * Security considerations include role-based access control to ensure customers
 * can only view shipments for their own orders, sellers can view shipments they
 * created for their products, and admins have full visibility across all
 * platform shipments. The endpoint validates that the requested shipment exists
 * and that the requesting user has permission to access the shipment
 * information based on their role and relationship to the associated order.
 *
 * This operation integrates with the order management system as shipments are
 * directly linked to orders through the shopping_mall_order_id foreign key. The
 * shipment data includes the seller who created the shipment record via the
 * created_by_seller_id relationship, enabling proper attribution and
 * seller-specific filtering.
 *
 * Expected behavior includes returning the complete shipment record with all
 * fields from the shopping_mall_shipments table including id,
 * shopping_mall_order_id, created_by_seller_id, carrier_name, tracking_number,
 * shipping_method, shipment_status, shipped_at, estimated_delivery_date,
 * actual_delivery_date, delivery_signature, created_at, and updated_at
 * timestamps. The response enables customers to track their packages, sellers
 * to verify shipping information they submitted, and admins to monitor shipment
 * processing across the platform.
 *
 * @param props.connection
 * @param props.shipmentId Unique identifier of the target shipment to retrieve
 * @path /shoppingMall/shipments/:shipmentId
 * @accessor api.functional.shoppingMall.shipments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target shipment to retrieve */
    shipmentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallShipment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IShoppingMallShipment =>
    typia.random<IShoppingMallShipment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
