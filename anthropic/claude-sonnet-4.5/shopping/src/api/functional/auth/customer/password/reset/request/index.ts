import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../../../structures/IShoppingMallCustomer";

/**
 * Request password reset email with secure token link (shopping_mall_customers
 * table).
 *
 * Initiates the password reset process for customers who have forgotten their
 * password by generating a secure password reset token and sending a reset link
 * to the customer's registered email address. This operation implements the
 * password reset flow defined in the Password Management section of the User
 * Roles and Authentication requirements document.
 *
 * When a customer provides their email address to request password reset, the
 * system queries the shopping_mall_customers table to determine if an account
 * exists with that email. For security purposes following best practices to
 * prevent account enumeration, the system returns a generic success message
 * regardless of whether the email exists: 'If an account exists with that email
 * address, you will receive password reset instructions.' This prevents
 * attackers from determining which email addresses are registered on the
 * platform.
 *
 * If a customer account is found matching the provided email, the system
 * generates a cryptographically secure random token of at least 32 bytes for
 * the password reset. This token is stored in the password_reset_token field of
 * the shopping_mall_customers table. The system also calculates and stores the
 * expiration timestamp in password_reset_expires_at, set to 1 hour from the
 * current time as specified in the business rules. If a previous
 * password_reset_token exists and has not yet expired, the system invalidates
 * it by generating a new token, ensuring only one active reset token per
 * customer at any time.
 *
 * The system constructs a password reset email containing a secure link in
 * format:
 * https://platform-url/auth/customer/password/reset?token={password_reset_token}.
 * The email is sent to the customer's registered email address with subject
 * 'Password Reset Request for Shopping Mall Account' and body explaining the
 * reset process, token expiration (1 hour), and security warning that the link
 * should not be shared. The email includes customer service contact information
 * for customers who did not request the reset. The system implements rate
 * limiting allowing maximum 3 password reset requests per hour per email
 * address to prevent abuse.
 *
 * This operation does not require authentication (publicly accessible endpoint)
 * as it serves customers who cannot log in. The response is always a success
 * message regardless of email existence, maintaining security while providing a
 * user-friendly experience. Customers who receive the email can click the link
 * to proceed to the password reset completion endpoint where they provide a new
 * password. If the customer does not receive the email within a few minutes,
 * they can retry the request, and the system will generate a new token with a
 * fresh 1-hour expiration window.
 *
 * @param props.connection
 * @param props.body Customer email address for password reset
 * @path /auth/customer/password/reset/request
 * @accessor api.functional.auth.customer.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Customer email address for password reset */
    body: IShoppingMallCustomer.IPasswordResetRequest;
  };
  export type Body = IShoppingMallCustomer.IPasswordResetRequest;
  export type Response = IShoppingMallCustomer.IPasswordResetRequestResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/password/reset/request";
  export const random =
    (): IShoppingMallCustomer.IPasswordResetRequestResponse =>
      typia.random<IShoppingMallCustomer.IPasswordResetRequestResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
