import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../../structures/IShoppingMallCustomer";
export * as resend from "./resend/index";

/**
 * Verify customer email address using verification token
 * (shopping_mall_customers table).
 *
 * Verifies a customer's email address by validating the verification token sent
 * in the registration confirmation email, enabling full platform access
 * including order placement. This operation implements the email verification
 * flow defined in the User Registration and Email Verification sections of the
 * User Roles and Authentication requirements.
 *
 * When a customer clicks the verification link from their registration email,
 * the system receives the email_verification_token as a query parameter or
 * request body. The system queries the shopping_mall_customers table to find a
 * customer record with a matching email_verification_token. If no customer is
 * found with the provided token, the system returns HTTP 400 error with message
 * 'Invalid or expired verification token. Please request a new verification
 * email.' This handles cases where the token was already used, never existed,
 * or the customer record was deleted.
 *
 * For valid tokens, the system validates the token has not expired by checking
 * that the current timestamp is within 24 hours of the
 * email_verification_sent_at timestamp, as specified in the business rule that
 * verification tokens expire after 24 hours. If the token has expired (current
 * time > email_verification_sent_at + 24 hours), the system returns the same
 * 'Invalid or expired verification token' error and prompts the customer to
 * request a new verification email through the resend verification endpoint.
 *
 * Upon successful token validation, the system updates the customer record in
 * the shopping_mall_customers table by setting email_verified to true and
 * changing account_status from 'unverified' to 'active'. The
 * email_verification_token is cleared (set to null) to prevent token reuse. The
 * system also updates the updated_at timestamp to reflect the account
 * modification. These changes immediately grant the customer full platform
 * access including the ability to place orders, manage addresses, add items to
 * wishlist, and write product reviews - features that were restricted while the
 * account was unverified as defined in the permission matrix.
 *
 * The operation returns a success response indicating email verification is
 * complete and the account is now active. The customer is typically redirected
 * to a success page with a message 'Your email has been verified! You can now
 * access all platform features.' and a link to continue shopping or proceed to
 * their account dashboard. No new JWT tokens are issued by this endpoint; the
 * customer continues using their existing access and refresh tokens from
 * registration. The system may optionally send a welcome email to the verified
 * customer with getting started guidance and platform feature highlights.
 *
 * @param props.connection
 * @param props.body Email verification token from registration email
 * @path /auth/customer/email/verify
 * @accessor api.functional.auth.customer.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification token from registration email */
    body: IShoppingMallCustomer.IEmailVerification;
  };
  export type Body = IShoppingMallCustomer.IEmailVerification;
  export type Response = IShoppingMallCustomer.IEmailVerificationResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/email/verify";
  export const random = (): IShoppingMallCustomer.IEmailVerificationResponse =>
    typia.random<IShoppingMallCustomer.IEmailVerificationResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
