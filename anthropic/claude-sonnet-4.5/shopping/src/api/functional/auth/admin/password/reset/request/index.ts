import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdmin } from "../../../../../../structures/IShoppingMallAdmin";

/**
 * Request admin password reset token and email.
 *
 * Initiates the admin password reset workflow by generating a secure reset
 * token and sending reset instructions via email. This endpoint implements the
 * account recovery process for admin users who have forgotten their password or
 * need to reset it for security reasons.
 *
 * The password reset request process begins when an admin provides their
 * registered email address. The system validates the email format to ensure
 * it's a properly structured email address. If the format is invalid, the
 * request is rejected with a validation error.
 *
 * The system queries the shopping_mall_admins table to check if an admin
 * account exists with the provided email address. For security reasons, the
 * system returns the same generic success message whether or not the email
 * exists: 'If an account exists with this email, you will receive password
 * reset instructions.' This prevents attackers from using the endpoint to
 * enumerate valid admin email addresses.
 *
 * If an admin account is found with the provided email, the system implements
 * rate limiting to prevent abuse. It checks if the admin has requested password
 * resets recently by examining the email_verification_sent_at timestamp (which
 * is reused for tracking reset request timing). If the admin has already
 * requested 3 password resets within the last hour, the request is denied
 * (though the generic success message is still returned to prevent
 * enumeration).
 *
 * The system generates a cryptographically secure random token of at least 32
 * bytes (256 bits) using a secure random number generator. This token serves as
 * the password_reset_token and is stored in the admin's record. The
 * password_reset_expires_at field is set to exactly 1 hour from the current
 * timestamp, enforcing the 1-hour expiration window specified in the business
 * requirements.
 *
 * A password reset email is sent to the admin's email address using the
 * platform's email notification system. The email contains a secure reset link
 * in the format:
 * https://platform.com/auth/admin/reset-password?token=[password_reset_token].
 * The email also includes security information explaining that if the admin did
 * not request this reset, they should ignore the email and contact support if
 * they have concerns.
 *
 * The password_reset_token can be used only once. After successful password
 * reset (via a separate endpoint), the token is cleared (set to null) to
 * prevent reuse. If the admin doesn't use the token within 1 hour, it expires
 * and a new reset request is required.
 *
 * The system logs all password reset requests with timestamp, IP address, and
 * email for security auditing and fraud detection. Multiple reset requests from
 * unusual IP addresses or patterns trigger security alerts for investigation.
 *
 * The response returns a generic success message and does not reveal whether
 * the email address corresponds to an actual admin account, maintaining
 * security against email enumeration attacks.
 *
 * @param props.connection
 * @param props.body Email address for admin account password reset
 * @path /auth/admin/password/reset/request
 * @accessor api.functional.auth.admin.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Email address for admin account password reset */
    body: IShoppingMallAdmin.IPasswordResetRequest;
  };
  export type Body = IShoppingMallAdmin.IPasswordResetRequest;
  export type Response = IShoppingMallAdmin.IPasswordResetRequestResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset/request";
  export const random = (): IShoppingMallAdmin.IPasswordResetRequestResponse =>
    typia.random<IShoppingMallAdmin.IPasswordResetRequestResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
