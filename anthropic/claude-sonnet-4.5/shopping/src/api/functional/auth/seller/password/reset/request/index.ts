import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../../../structures/IShoppingMallSeller";

/**
 * Request password reset token for seller account.
 *
 * Initiates the password reset workflow for seller accounts by generating a
 * secure reset token and sending it via email. This endpoint serves sellers who
 * have forgotten their password or need to reset credentials for security
 * reasons, providing a secure self-service recovery mechanism without requiring
 * current password knowledge.
 *
 * The operation accepts the seller's registered email address and validates it
 * exists in the shopping_mall_sellers table. For security reasons (preventing
 * email enumeration attacks), the endpoint returns a generic success message
 * 'If an account exists with this email, you will receive password reset
 * instructions' regardless of whether the email is found, preventing attackers
 * from determining which emails are registered as seller accounts.
 *
 * When a valid seller email is found, the system generates a cryptographically
 * secure random token (minimum 32 bytes using crypto.randomBytes or equivalent)
 * and stores it in the password_reset_token field. The
 * password_reset_expires_at field is set to 1 hour from the current timestamp,
 * enforcing the business rule that reset tokens expire quickly for security.
 * Any existing password_reset_token is overwritten, ensuring only one active
 * reset token exists per seller at any time.
 *
 * Rate limiting is enforced by tracking reset request timestamps and counting
 * requests within the last hour. The system allows maximum 3 password reset
 * requests per hour per seller email address to prevent abuse and potential
 * denial-of-service attacks. If the limit is exceeded, the endpoint returns an
 * error 'Too many password reset requests. Please try again later' without
 * processing the request.
 *
 * Account status validation checks that the seller account is not in 'banned'
 * status - banned sellers cannot reset passwords and must contact support.
 * Accounts with 'pending_approval', 'suspended', or 'on_hold' status can
 * request password resets, as password reset does not require active account
 * status (seller may have forgotten password before completing approval
 * process).
 *
 * The email notification system is triggered with template containing the
 * password reset link (typically
 * https://platform.com/seller/password/reset?token={password_reset_token}),
 * seller's business_name for personalization, token expiration time (1 hour),
 * and security advisory to ignore the email if the seller did not request the
 * reset. The notification is sent to the seller's registered email address
 * asynchronously within 5 minutes.
 *
 * This operation does not create sessions, issue JWT tokens, or modify any
 * other seller account fields beyond password_reset_token and
 * password_reset_expires_at. It serves exclusively as the first step in the
 * two-step password recovery process, with the actual password reset occurring
 * in a subsequent operation that validates the token and updates the
 * password_hash field.
 *
 * @param props.connection
 * @param props.body Seller email address for password reset request
 * @path /auth/seller/password/reset/request
 * @accessor api.functional.auth.seller.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Seller email address for password reset request */
    body: IShoppingMallSeller.IPasswordResetRequest;
  };
  export type Body = IShoppingMallSeller.IPasswordResetRequest;
  export type Response = IShoppingMallSeller.IPasswordResetRequestResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/password/reset/request";
  export const random = (): IShoppingMallSeller.IPasswordResetRequestResponse =>
    typia.random<IShoppingMallSeller.IPasswordResetRequestResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
