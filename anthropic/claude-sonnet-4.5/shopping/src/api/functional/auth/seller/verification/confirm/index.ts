import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../../structures/IShoppingMallSeller";

/**
 * Confirm seller email verification using token.
 *
 * Validates the email verification token and marks the seller's email as
 * verified, completing the email verification step of the seller onboarding
 * workflow. This endpoint processes the verification link clicked by the seller
 * in the verification email, updating the seller account to reflect confirmed
 * email ownership and enabling progression toward full account approval.
 *
 * Token validation queries the shopping_mall_sellers table for a record where
 * email_verification_token matches the provided token. The system verifies the
 * token exists (not null, not empty string), confirming the seller has a
 * pending verification request. If no matching token is found, the endpoint
 * returns error 'Invalid or expired verification token. Please request a new
 * verification email' indicating the token does not correspond to any pending
 * verification.
 *
 * Expiration validation checks the token age by comparing the current timestamp
 * against email_verification_sent_at (the time when the verification email was
 * sent). Verification tokens have a 24-hour lifetime, so the system validates
 * that (current_time - email_verification_sent_at) < 24 hours. If the token has
 * expired, the endpoint returns error 'Verification link has expired. Please
 * request a new verification email' and directs the seller to use the resend
 * verification email endpoint to generate a fresh token.
 *
 * Email verification update sets the email_verified field to true, confirming
 * the seller has access to the registered email address and can receive
 * important platform communications (order notifications, account updates,
 * payment information). The email_verification_token field is cleared (set to
 * null) and email_verification_sent_at is cleared (set to null) to prevent
 * token reuse - each verification token is single-use and cannot be reused
 * after successful verification.
 *
 * Account status consideration checks the current account_status field. The
 * endpoint does NOT automatically change account_status from 'pending_approval'
 * to 'active' - email verification is a necessary but not sufficient condition
 * for account activation. Administrator approval of business documents
 * (verified by documents_verified field and approved_by_admin_id foreign key)
 * is still required before account_status transitions to 'active'. However,
 * email verification (email_verified = true) is a prerequisite that admins
 * check before approving seller applications.
 *
 * Timestamp updates set the updated_at field to the current time, tracking when
 * the email verification occurred. The created_at timestamp remains unchanged.
 * No modifications are made to other authentication-related fields such as
 * password_hash, failed_login_attempts, account_locked_until, or session data.
 *
 * Success response returns a confirmation message 'Email verified successfully.
 * Your account is pending administrator approval' along with the seller's
 * current account_status, email_verified status (now true), and optional
 * guidance on next steps (e.g., 'We will notify you via email once your seller
 * application is reviewed'). The endpoint may optionally issue JWT
 * authentication tokens to allow the seller to access their pending account
 * dashboard and view application status, or it may require the seller to log in
 * separately using the login endpoint - this behavior depends on security
 * policy configuration.
 *
 * Notification integration sends a confirmation email to the seller
 * acknowledging successful email verification and providing estimated timeline
 * for administrator review (typically 3 business days per business rules).
 * Simultaneously, the system notifies administrators of the newly verified
 * seller account via admin notification dashboard or email, prompting them to
 * review the seller application and uploaded verification documents.
 *
 * @param props.connection
 * @param props.body Email verification token from the verification link
 * @path /auth/seller/verification/confirm
 * @accessor api.functional.auth.seller.verification.confirm.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification token from the verification link */
    body: IShoppingMallSeller.IVerifyEmail;
  };
  export type Body = IShoppingMallSeller.IVerifyEmail;
  export type Response = IShoppingMallSeller.IVerifyEmailResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/verification/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/verification/confirm";
  export const random = (): IShoppingMallSeller.IVerifyEmailResponse =>
    typia.random<IShoppingMallSeller.IVerifyEmailResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
