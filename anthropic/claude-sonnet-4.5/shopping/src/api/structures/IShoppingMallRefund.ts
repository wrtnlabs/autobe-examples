import { tags } from "typia";

/**
 * Refund.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallRefund = {
  /** Refund ID. */
  id: string & tags.Format<"uuid">;

  /** Amount. */
  refund_amount: number;

  /** Status. */
  status: string;
};
export namespace IShoppingMallRefund {
  /**
   * Search and filter request for refund transactions.
   *
   * Provides comprehensive filtering, sorting, and pagination capabilities
   * for retrieving refund transaction records from the shopping_mall_refunds
   * table. This request type supports advanced search scenarios for customers
   * tracking their refund history, sellers managing refund processing for
   * their orders, and administrators overseeing platform-wide refund
   * operations.
   *
   * All filter parameters are optional, allowing flexible query construction
   * from simple paginated lists to complex filtered searches by status, date
   * ranges, order references, payment transaction references, refund request
   * references, actor types, and refund amounts. The pagination parameters
   * (page, limit) enable efficient retrieval of large refund datasets.
   *
   * Role-based access control is enforced at the business logic layer:
   * customers see only their own refunds, sellers see refunds related to
   * their products, and admins have unrestricted access to all platform
   * refunds.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve. Page numbers start at 1.
     * Used in combination with limit to implement offset-based pagination
     * for navigating large result sets.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of records per page.
     *
     * Controls how many refund transaction records are returned in a single
     * page. Maximum value is 100 to prevent excessive data transfer.
     * Default value is typically 20-50 records per page.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Filter refund transactions by processing status.
     *
     * Narrows results to refunds in specific processing states. Valid
     * values: pending (refund initiated but not yet processing), processing
     * (refund being processed by payment gateway), completed (refund
     * successfully processed and funds returned), failed (refund processing
     * failed).
     *
     * Null or omitted means no status filtering - all statuses are
     * included.
     */
    status?:
      | "pending"
      | "processing"
      | "completed"
      | "failed"
      | null
      | undefined;

    /**
     * Filter refunds by the reason for refund.
     *
     * Narrows results to refunds with specific reasons. Valid values:
     * order_cancellation (refund due to cancelled order), defective_product
     * (product was defective or damaged), customer_request
     * (customer-initiated refund request), wrong_item (incorrect product
     * delivered), policy_violation (admin-initiated refund for policy
     * issues).
     *
     * Null or omitted means no reason filtering - all refund reasons are
     * included.
     */
    refund_reason?:
      | "order_cancellation"
      | "defective_product"
      | "customer_request"
      | "wrong_item"
      | "policy_violation"
      | null
      | undefined;

    /**
     * Start date for filtering refunds by creation date.
     *
     * When provided, only refunds created on or after this timestamp are
     * included in results. Used with to_date to define a date range for
     * temporal filtering. Null or omitted means no start date filter.
     */
    from_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End date for filtering refunds by creation date.
     *
     * When provided, only refunds created on or before this timestamp are
     * included in results. Used with from_date to define a date range for
     * temporal filtering. Null or omitted means no end date filter.
     */
    to_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter refunds by specific order.
     *
     * When provided, returns only refunds associated with the specified
     * order ID from the shopping_mall_orders table. Useful for viewing all
     * refunds related to a particular order. Null or omitted means no order
     * filtering.
     */
    shopping_mall_order_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter refunds by original payment transaction.
     *
     * When provided, returns only refunds associated with the specified
     * payment transaction ID from the shopping_mall_payment_transactions
     * table. Useful for financial reconciliation and tracking refunds for
     * specific payments. Null or omitted means no payment transaction
     * filtering.
     */
    shopping_mall_payment_transaction_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Filter refunds by associated refund request.
     *
     * When provided, returns only refunds linked to the specified refund
     * request ID from the shopping_mall_refund_requests table. Useful for
     * tracking refund processing that originated from customer refund
     * requests. Null or omitted means no refund request filtering.
     */
    shopping_mall_refund_request_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Filter refunds by the type of actor who initiated the refund.
     *
     * Narrows results based on who triggered the refund process. Valid
     * values: customer (customer-initiated refund request), seller
     * (seller-initiated refund for cancellation), admin (admin override or
     * dispute resolution), system (automated refund processing).
     *
     * Null or omitted means no actor type filtering - refunds initiated by
     * any actor are included.
     */
    initiated_by_type?:
      | "customer"
      | "seller"
      | "admin"
      | "system"
      | null
      | undefined;

    /**
     * Minimum refund amount filter.
     *
     * When provided, only refunds with refund_amount greater than or equal
     * to this value are included. Used with max_amount to define refund
     * amount ranges for financial analysis. Null or omitted means no
     * minimum amount filter.
     */
    min_amount?: (number & tags.Minimum<0>) | null | undefined;

    /**
     * Maximum refund amount filter.
     *
     * When provided, only refunds with refund_amount less than or equal to
     * this value are included. Used with min_amount to define refund amount
     * ranges for identifying high-value or problematic refunds. Null or
     * omitted means no maximum amount filter.
     */
    max_amount?: (number & tags.Minimum<0>) | null | undefined;

    /**
     * Field to sort results by.
     *
     * Determines the ordering criterion for refund results. Valid values:
     * created_at (refund initiation date), refund_amount (refund value),
     * completed_at (refund completion date), status (processing status).
     *
     * Default sorting is by created_at descending (newest refunds first)
     * when null or omitted.
     */
    sort_by?:
      | "created_at"
      | "refund_amount"
      | "completed_at"
      | "status"
      | null
      | undefined;

    /**
     * Sort direction for results.
     *
     * Controls whether results are sorted in ascending (asc) or descending
     * (desc) order based on the sort_by field. Default is descending (desc)
     * when null or omitted, showing most recent or highest values first.
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };
}
