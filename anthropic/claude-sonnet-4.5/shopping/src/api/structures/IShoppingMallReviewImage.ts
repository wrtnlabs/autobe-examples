import { tags } from "typia";

/**
 * Customer-uploaded image attached to a product review.
 *
 * This entity represents visual evidence and context images uploaded by
 * customers with their reviews. Images enhance review credibility and help
 * other customers visualize product quality and characteristics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallReviewImage = {
  /** Unique identifier of the review image. */
  id: string & tags.Format<"uuid">;

  /** Parent review containing this image. */
  shopping_mall_review_id: string & tags.Format<"uuid">;

  /** Storage path or URL for the image. */
  image_url: string;

  /** Display position in gallery (1-based). */
  display_order: number & tags.Type<"int32">;

  /** When the image was uploaded. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallReviewImage {
  /**
   * Request parameters for searching and filtering product review images.
   *
   * Defines pagination and sorting controls for retrieving customer-uploaded
   * images associated with product reviews. Review images provide visual
   * evidence for customer feedback.
   *
   * This simplified request structure focuses on essential pagination and
   * sorting, with the review ID coming from the path parameter rather than as
   * a filter. Since the shopping_mall_review_images table only has basic
   * fields (id, review_id, image_url, display_order, created_at), advanced
   * filtering is not needed.
   */
  export type IRequest = {
    /**
     * Page number for pagination of review images.
     *
     * Specifies which page of results to retrieve when browsing review
     * images. Page numbers are 1-indexed, with 1 being the first page.
     *
     * Defaults to page 1 if not specified.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of review images to return per page.
     *
     * Controls the page size for pagination. Since reviews can have up to 5
     * images as per business requirements, this limit typically ranges from
     * 5 to 20.
     *
     * Defaults to 10 images per page if not specified.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Sorting criteria for ordering review images.
     *
     * Determines how images are ordered in results. Options include
     * 'display_order' (default, showing images in author's intended
     * sequence), 'created_at' for chronological ordering, or
     * 'created_at_desc' for newest first.
     *
     * The display_order sort respects the customer's intended image
     * narrative sequence.
     */
    sort?: "display_order" | "created_at" | "created_at_desc" | undefined;
  };

  /**
   * Review image upload data transfer object.
   *
   * This DTO enables customers to upload visual evidence and context images
   * with their product reviews. Up to 5 images can be uploaded per review in
   * JPEG, PNG, or WebP formats with 5MB maximum per image.
   *
   * Images are particularly valuable for showcasing product quality,
   * identifying defects in refund scenarios, and building trust through
   * authentic customer photography.
   */
  export type ICreate = {
    /**
     * Storage path or URL for the uploaded review image.
     *
     * The system generates thumbnails and optimized versions for responsive
     * display. Accepts JPEG, PNG, WebP formats with maximum 5MB file size.
     */
    image_url: string;

    /**
     * Display position in the review image gallery.
     *
     * 1-based index for ordering images. Customers can reorder images when
     * editing reviews.
     */
    display_order: number & tags.Type<"int32"> & tags.Minimum<1>;
  };
}
