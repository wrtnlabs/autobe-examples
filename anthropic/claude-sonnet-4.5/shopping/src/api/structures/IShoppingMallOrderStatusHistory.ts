import { tags } from "typia";

/**
 * Complete audit trail record of a single order status transition.
 *
 * This entity represents one status change event in an order's lifecycle,
 * documenting the transition from one state to another with complete context
 * including who triggered the change, why it occurred, and when it happened.
 * The shopping_mall_order_status_history table implements an append-only audit
 * trail pattern, preserving every status transition for compliance, dispute
 * resolution, and order lifecycle visibility.
 *
 * Each history record captures a snapshot of a status change event, including
 * the source and destination statuses, the actor responsible for the change
 * (customer, seller, admin, or system), the reason for the transition, and any
 * additional explanatory notes. This comprehensive tracking enables
 * reconstruction of the complete order journey from placement through
 * fulfillment or cancellation.
 *
 * The polymorphic actor pattern uses three optional foreign keys
 * (shopping_mall_customer_id, shopping_mall_seller_id, shopping_mall_admin_id)
 * where exactly one is populated based on who initiated the status change, or
 * all are null for system-generated transitions. This design provides flexible
 * actor tracking while maintaining referential integrity.
 *
 * Status history records are immutable once created - they document historical
 * events and should never be modified or deleted. This append-only pattern
 * ensures audit trail integrity for compliance, dispute resolution, and
 * forensic analysis of order processing issues.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderStatusHistory = {
  /**
   * Unique identifier for the order status history record.
   *
   * This primary key uniquely identifies each status transition event in the
   * order lifecycle. Every status change creates a new history record with
   * its own unique ID, enabling complete audit trail tracking and temporal
   * analysis of order progression.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the order whose status changed.
   *
   * This foreign key links the status history record to the specific order in
   * the shopping_mall_orders table. All status transitions for a single order
   * are tracked through multiple history records sharing this order
   * reference, enabling complete lifecycle visibility.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Customer who triggered the status change if customer-initiated.
   *
   * This optional foreign key references the shopping_mall_customers table
   * and is populated when a customer action caused the status transition,
   * such as order placement, cancellation requests, or delivery confirmation.
   * Null when the change was triggered by seller, admin, or automated system
   * processes.
   */
  shopping_mall_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Seller who triggered the status change if seller-initiated.
   *
   * This optional foreign key references the shopping_mall_sellers table and
   * is populated when a seller action caused the status transition, such as
   * order confirmation, shipment updates, or seller-initiated cancellations.
   * Null when the change was triggered by customer, admin, or automated
   * system processes.
   */
  shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Admin who triggered the status change if admin-initiated.
   *
   * This optional foreign key references the shopping_mall_admins table and
   * is populated when an administrator action caused the status transition,
   * such as dispute resolution, manual order cancellations, or administrative
   * status overrides. Null when the change was triggered by customer, seller,
   * or automated system processes.
   */
  shopping_mall_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Order status before this transition occurred.
   *
   * This field captures the state the order was in immediately before this
   * status change event. For the very first status history record when an
   * order is created, this field is null since there was no previous status.
   * For all subsequent transitions, this documents the source state of the
   * transition, enabling validation of proper status lifecycle progression.
   */
  previous_status?: string | null | undefined;

  /**
   * Order status after this transition occurred.
   *
   * This field captures the state the order transitioned into during this
   * status change event. Valid values include pending_payment,
   * payment_confirmed, awaiting_seller_confirmation, confirmed, processing,
   * preparing_shipment, shipped, in_transit, out_for_delivery, delivered,
   * completed, cancelled, refund_requested, refund_approved, refunded, and
   * failed. This represents the destination state of the status transition
   * and the current state after this history record was created.
   */
  new_status: string;

  /**
   * Explanation for the status change event.
   *
   * This optional field provides context about why the status transition
   * occurred, such as 'payment_confirmed' for automated payment gateway
   * callbacks, 'seller_shipped' for seller-initiated shipment updates,
   * 'customer_cancelled' for customer cancellation requests, or
   * 'auto_completed' for system-generated completion after delivery
   * confirmation period. This reason helps administrators and users
   * understand the cause of each status transition.
   */
  change_reason?: string | null | undefined;

  /**
   * Additional details or context about the status change.
   *
   * This optional free-text field allows actors (customers, sellers, admins)
   * or the system to record supplementary information about the status
   * transition. Examples include customer cancellation explanations, seller
   * notes about shipment delays, admin comments on dispute resolution
   * decisions, or system-generated error messages for failed transitions.
   * This provides detailed context for audit trail and customer service
   * purposes.
   */
  notes?: string | null | undefined;

  /**
   * Indicates whether the status change was automatic or manually triggered.
   *
   * True indicates the status transition was triggered by automated system
   * processes such as payment gateway callbacks, shipping carrier tracking
   * updates, scheduled auto-completion workflows, or timeout-based
   * auto-approvals. False indicates the transition was manually initiated by
   * a user (customer, seller, or admin) through explicit action in the
   * platform interface. This distinction is critical for analyzing workflow
   * automation effectiveness and identifying manual intervention points.
   */
  is_system_generated: boolean;

  /**
   * Timestamp when this status change occurred.
   *
   * This timestamp records the exact moment the status transition happened,
   * providing precise temporal tracking for the order lifecycle. Combined
   * with the new_status field, this enables calculation of time spent in each
   * order state, fulfillment timeline analysis, and SLA compliance
   * monitoring. The chronological sequence of created_at values across all
   * history records for an order forms the complete timeline visualization.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallOrderStatusHistory {
  /**
   * Search criteria for retrieving order status history.
   *
   * Supports filtering by date range and status with pagination.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Filter status changes after this timestamp. */
    start_date?: (string & tags.Format<"date-time">) | undefined;

    /** Filter status changes before this timestamp. */
    end_date?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by specific status value. */
    new_status?: string | undefined;
  };
}
