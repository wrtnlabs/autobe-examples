import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Customer account entity.
 *
 * Represents authenticated shopper accounts with profile information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCustomer = {
  /** Unique customer account identifier. */
  id: string & tags.Format<"uuid">;

  /** Customer's email address. */
  email: string & tags.Format<"email">;

  /** Customer's full name. */
  name: string;

  /** Customer's phone number. */
  phone?: string | undefined;

  /** Account status: active, suspended, deleted. */
  account_status: string;

  /** Email verification status. */
  email_verified: boolean;

  /** Account creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Account last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallCustomer {
  /** Customer registration request. */
  export type ICreate = {
    /** Customer's email address for authentication. */
    email: string & tags.Format<"email">;

    /**
     * Customer's password (plain text).
     *
     * Backend will hash before storage.
     */
    password: string & tags.MinLength<8>;

    /** Customer's full name. */
    name: string;

    /** Customer's phone number. */
    phone?: string | undefined;
  };

  /**
   * Customer authentication response.
   *
   * Returned after registration, login, or token refresh.
   */
  export type IAuthorized = {
    /** Customer account identifier. */
    id: string & tags.Format<"uuid">;

    /** Customer email. */
    email: string & tags.Format<"email">;

    /** Customer name. */
    name: string;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Customer login credentials for authentication.
   *
   * Contains only email and password for credential verification. All other
   * authentication logic is handled server-side.
   */
  export type ILogin = {
    /** Customer's registered email address for authentication. */
    email: string & tags.Format<"email">;

    /** Customer's password for authentication verification. */
    password: string;
  };

  /**
   * Token refresh request.
   *
   * Contains refresh token for access token renewal.
   */
  export type IRefresh = {
    /**
     * Refresh token for renewal.
     *
     * Current refresh token to generate new access token.
     */
    refresh_token: string;
  };

  /**
   * Password reset request data.
   *
   * Contains email address to initiate password recovery workflow. System
   * sends reset link to this email if account exists.
   */
  export type IPasswordResetRequest = {
    /**
     * Customer's registered email address.
     *
     * Email associated with the customer account for which password reset
     * is requested.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Password reset request confirmation.
   *
   * Generic response for security, doesn't reveal whether email exists in
   * system to prevent account enumeration.
   */
  export type IPasswordResetRequestResponse = {
    /**
     * Generic success message.
     *
     * Security-conscious message that doesn't reveal whether email exists:
     * 'If an account exists with that email address, you will receive
     * password reset instructions.'
     */
    message: string;
  };

  /**
   * Password reset completion data.
   *
   * Contains reset token from email and new password to complete password
   * recovery.
   */
  export type IPasswordReset = {
    /**
     * Password reset token from email.
     *
     * Unique token sent in reset email, valid for 1 hour.
     */
    token: string;

    /**
     * New password for the account.
     *
     * Must meet security requirements: 8+ characters with uppercase,
     * lowercase, number, and special character.
     */
    new_password: string & tags.MinLength<8>;
  };

  /**
   * Password reset success confirmation.
   *
   * Indicates password update completed successfully.
   */
  export type IPasswordResetResponse = {
    /**
     * Success confirmation message.
     *
     * Confirms password was successfully reset and sessions were
     * invalidated.
     */
    message: string;
  };

  /**
   * Email verification request data.
   *
   * Contains verification token from registration email.
   */
  export type IEmailVerification = {
    /**
     * Email verification token.
     *
     * Unique token from verification email, valid for 24 hours.
     */
    token: string;
  };

  /**
   * Email verification success response.
   *
   * Confirmation that email verification completed.
   */
  export type IEmailVerificationResponse = {
    /**
     * Verification success message.
     *
     * Confirms email was verified and account is now active.
     */
    message: string;
  };

  /**
   * Resend verification email request.
   *
   * Contains email for verification link resend.
   */
  export type IResendVerification = {
    /**
     * Customer's registered email.
     *
     * Email address to resend verification link.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Verification email resend confirmation.
   *
   * Generic response for security.
   */
  export type IResendVerificationResponse = {
    /**
     * Generic success message.
     *
     * Security message that doesn't reveal email existence.
     */
    message: string;
  };

  /**
   * Password change request data.
   *
   * Contains current password for verification and new password.
   */
  export type IPasswordChange = {
    /**
     * Current account password.
     *
     * Required for verification before password change.
     */
    current_password: string;

    /**
     * New password for the account.
     *
     * Must meet security requirements.
     */
    new_password: string & tags.MinLength<8>;
  };

  /**
   * Password change confirmation.
   *
   * Indicates successful password update.
   */
  export type IPasswordChangeResponse = {
    /**
     * Success message.
     *
     * Confirms password changed and sessions invalidated.
     */
    message: string;
  };

  /**
   * Logout request data.
   *
   * Contains refresh token of session to terminate.
   */
  export type ILogout = {
    /**
     * Session refresh token to revoke.
     *
     * Token identifying the session to terminate.
     */
    refresh_token: string;
  };

  /**
   * Logout success response.
   *
   * Confirmation of session termination.
   */
  export type ILogoutResponse = {
    /**
     * Logout confirmation.
     *
     * Confirms session terminated successfully.
     */
    message: string;
  };

  /**
   * Logout all devices response.
   *
   * Confirms termination of all sessions with count.
   */
  export type ILogoutAllResponse = {
    /**
     * Success message.
     *
     * Confirms all sessions terminated.
     */
    message: string;

    /**
     * Count of revoked sessions.
     *
     * Number of sessions that were terminated.
     */
    sessions_revoked: number & tags.Type<"int32">;
  };

  /** Customer search request parameters. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Page size. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };

  /** Customer summary for list displays. */
  export type ISummary = {
    /** Customer identifier. */
    id: string & tags.Format<"uuid">;

    /** Email address. */
    email: string & tags.Format<"email">;

    /** Full name. */
    name: string;

    /** Account status. */
    account_status: string;
  };

  /** Customer update payload. */
  export type IUpdate = {
    /** Updated name. */
    name?: string | undefined;

    /** Updated phone. */
    phone?: string | undefined;

    /** Updated status. */
    account_status?: string | undefined;
  };
}
