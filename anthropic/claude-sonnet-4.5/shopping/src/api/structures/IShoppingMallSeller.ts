import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";
import { IShoppingMallSession } from "./IShoppingMallSession";

/**
 * Seller account entity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSeller = {
  /** Seller account identifier. */
  id: string & tags.Format<"uuid">;

  /** Seller email address. */
  email: string & tags.Format<"email">;

  /** Business name displayed to customers. */
  business_name: string;

  /** Business entity type. */
  business_type: string;

  /** Primary contact name. */
  contact_person_name: string;

  /** Business phone number. */
  phone: string;

  /** Account status. */
  account_status: string;

  /** Email verification status. */
  email_verified: boolean;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallSeller {
  /** Seller registration request. */
  export type ICreate = {
    /** Seller email. */
    email: string & tags.Format<"email">;

    /** Seller password (plain text). */
    password: string & tags.MinLength<8>;

    /** Business name. */
    business_name: string;

    /** Business type. */
    business_type: string;

    /** Contact person. */
    contact_person_name: string;

    /** Phone number. */
    phone: string;

    /** Business address. */
    business_address: string;

    /** Tax ID. */
    tax_id: string;
  };

  /** Seller authentication response. */
  export type IAuthorized = {
    /** Seller identifier. */
    id: string & tags.Format<"uuid">;

    /** Seller email. */
    email: string & tags.Format<"email">;

    /** Business name. */
    business_name: string;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Seller login credentials. */
  export type ILogin = {
    /** Seller's registered email. */
    email: string & tags.Format<"email">;

    /** Account password. */
    password: string;
  };

  /** Password reset request for seller account. */
  export type IPasswordResetRequest = {
    /** Seller's registered email address for password reset. */
    email: string & tags.Format<"email">;
  };

  /** Password reset request confirmation. */
  export type IPasswordResetRequestResponse = {
    /** Generic success confirmation message for security. */
    message: string;
  };

  /** Password reset completion with token and new password. */
  export type IPasswordResetConfirm = {
    /** Password reset token from email link. */
    token: string;

    /** New password meeting security requirements. */
    new_password: string & tags.MinLength<8>;
  };

  /** Password reset completion confirmation. */
  export type IPasswordResetConfirmResponse = {
    /** Password reset success confirmation. */
    message: string;
  };

  /** Seller password change request. */
  export type IPasswordChange = {
    /** Current password for verification. */
    current_password: string;

    /** New password meeting security requirements. */
    new_password: string & tags.MinLength<8>;
  };

  /** Password change completion confirmation. */
  export type IPasswordChangeResponse = {
    /** Password change success confirmation. */
    message: string;
  };

  /** Request to resend seller verification email. */
  export type IResendVerificationRequest = {
    /** Seller email address for verification email resend. */
    email: string & tags.Format<"email">;
  };

  /** Resend verification email confirmation. */
  export type IResendVerificationResponse = {
    /** Verification email resend success confirmation. */
    message: string;
  };

  /** Email verification request with token. */
  export type IVerifyEmail = {
    /** Email verification token from the verification link. */
    token: string;
  };

  /** Email verification completion confirmation. */
  export type IVerifyEmailResponse = {
    /** Email verification success confirmation. */
    message: string;
  };

  /** List of all active seller sessions with device and security information. */
  export type ISessionList = {
    /** Array of active seller sessions. */
    sessions: IShoppingMallSession[];

    /** Total number of active sessions. */
    total_count: number & tags.Type<"int32">;
  };

  /**
   * Confirmation response for successful seller session revocation.
   *
   * Provides confirmation that a specific seller session has been
   * successfully revoked and terminated, including details about the revoked
   * session for security transparency.
   */
  export type ISessionRevokeResponse = {
    /**
     * Human-readable confirmation message such as 'Session revoked
     * successfully'.
     */
    message: string;

    /** Unique identifier of the session that was revoked. */
    revoked_session_id: string & tags.Format<"uuid">;

    /**
     * User-friendly device name of the revoked session (e.g., 'Chrome on
     * Windows').
     */
    device_name?: string | null | undefined;
  };

  /** Seller logout confirmation. */
  export type ILogoutResponse = {
    /** Logout success confirmation message. */
    message: string;
  };

  /** Token refresh request for sellers. */
  export type IRefresh = {
    /** Refresh token for generating new access token. */
    refresh_token: string;
  };

  /** Seller search. */
  export type IRequest = {
    /** Page. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Limit. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /** Seller summary. */
  export type ISummary = {
    /** ID. */
    id: string & tags.Format<"uuid">;

    /** Email. */
    email: string & tags.Format<"email">;

    /** Business. */
    business_name: string;
  };

  /** Seller update. */
  export type IUpdate = {
    /** Name. */
    business_name?: string | undefined;
  };

  /** Seller login response. */
  export type ILoginResponse = {
    /** Seller ID. */
    id: string & tags.Format<"uuid">;

    /** Tokens. */
    token: IAuthorizationToken;
  };
}
