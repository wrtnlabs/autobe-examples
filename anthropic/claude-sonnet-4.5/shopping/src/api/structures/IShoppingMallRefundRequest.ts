import { tags } from "typia";

/**
 * Complete refund request record with full workflow details.
 *
 * This DTO represents a comprehensive refund request from the
 * shopping_mall_refund_requests table, documenting the complete refund approval
 * workflow from customer submission through seller/admin review to final refund
 * processing.
 *
 * Refund requests are created when customers want to return delivered orders
 * and receive payment reversal. The request captures why the customer wants a
 * refund, how much they're requesting, and tracks the complete approval
 * workflow including seller response deadlines, review decisions, return
 * requirements, and payment processing status.
 *
 * The workflow involves multiple actors: customers initiate requests, sellers
 * review and approve/reject within 3 business days (or auto-approval), admins
 * resolve disputes and make final binding decisions, and the system processes
 * approved refunds through payment gateways.
 *
 * This DTO is used for displaying complete refund request details to customers
 * tracking their request status, to sellers reviewing and responding to refund
 * requests, and to admins resolving disputes and monitoring refund operations
 * across the platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallRefundRequest = {
  /**
   * Unique identifier of the refund request.
   *
   * Primary key from shopping_mall_refund_requests table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Order for which refund is requested.
   *
   * Foreign key reference to shopping_mall_orders table identifying the
   * delivered order that the customer wants to refund.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Customer who submitted the refund request.
   *
   * Foreign key reference to shopping_mall_customers table identifying the
   * customer requesting the refund.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Seller who reviewed the refund request.
   *
   * Foreign key reference to shopping_mall_sellers table. Null if the seller
   * has not yet reviewed the request or if admin reviewed without seller
   * input.
   */
  reviewer_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Admin who reviewed or overrode the refund decision.
   *
   * Foreign key reference to shopping_mall_admins table. Populated when admin
   * makes final decision on disputed refunds or overrides seller decisions.
   */
  reviewer_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Categorized reason for the refund request.
   *
   * Predefined category selected by customer: defective_damaged (product
   * defect or damage), wrong_item (incorrect product shipped),
   * does_not_match_description (product differs from listing), changed_mind
   * (customer preference), found_better_price (competitive pricing),
   * quality_not_expected (quality below expectations), other (requires
   * detailed explanation).
   */
  refund_reason:
    | "defective_damaged"
    | "wrong_item"
    | "does_not_match_description"
    | "changed_mind"
    | "found_better_price"
    | "quality_not_expected"
    | "other";

  /**
   * Detailed explanation from customer about why refund is requested.
   *
   * Customer's narrative describing the issue, providing context and
   * justification for the refund request. This detailed explanation helps
   * sellers and admins make informed decisions about refund approval.
   */
  refund_description: string;

  /**
   * Amount customer is requesting for refund.
   *
   * Typically the full order total, but can be partial refund amount in some
   * cases. Represents the customer's desired refund amount.
   */
  refund_amount_requested: number;

  /**
   * Amount approved by seller or admin, which can be partial refund.
   *
   * Final approved refund amount after review. Can be less than requested
   * amount for partial refund scenarios. Null if review has not been
   * completed.
   */
  refund_amount_approved?: number | null | undefined;

  /**
   * Current workflow status of the refund request.
   *
   * Tracks refund through approval workflow: pending_review (awaiting seller
   * response), pending_seller_response (waiting for seller), approved (refund
   * approved), rejected (denied), processing (payment being refunded),
   * completed (refund finalized).
   */
  refund_status:
    | "pending_review"
    | "pending_seller_response"
    | "approved"
    | "rejected"
    | "processing"
    | "completed";

  /**
   * Whether customer must return the product for refund processing.
   *
   * When true, customer must ship product back and provide tracking before
   * refund is processed. When false, refund proceeds without product return
   * (defective items, low-value items).
   */
  return_required: boolean;

  /**
   * Tracking number for returned product shipment.
   *
   * Provided by customer when returning the product. Seller confirms receipt
   * using this tracking before finalizing refund. Null if return not required
   * or not yet shipped.
   */
  return_tracking_number?: string | null | undefined;

  /**
   * Notes from seller or admin during refund review.
   *
   * Explanation of the refund decision including justification for partial
   * refunds, reasons for rejection, or approval conditions. Null if not yet
   * reviewed.
   */
  review_notes?: string | null | undefined;

  /**
   * Timestamp when customer submitted the refund request.
   *
   * Records when the refund request was initiated by the customer.
   */
  requested_at: string & tags.Format<"date-time">;

  /**
   * Deadline for seller to respond to the refund request.
   *
   * Calculated as 3 business days from requested_at. If seller does not
   * respond by this deadline, the refund is automatically approved per
   * business rules.
   */
  seller_response_deadline: string & tags.Format<"date-time">;

  /**
   * Timestamp when seller or admin reviewed the request.
   *
   * Records when the refund decision was made. Null if still pending review.
   */
  reviewed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when refund payment processing completed.
   *
   * Records when the refund was fully processed and funds returned to
   * customer. Null if refund not yet completed.
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallRefundRequest {
  /**
   * Search and filter criteria for retrieving refund requests.
   *
   * Provides comprehensive filtering, sorting, and pagination parameters for
   * querying the shopping_mall_refund_requests table. Enables customers to
   * find their refund requests, sellers to manage pending approvals, and
   * admins to oversee platform-wide refund operations.
   *
   * Supports role-based filtering where customers automatically filter to
   * their own refunds through auth context, sellers filter to refunds for
   * their products through auth context, and admins access all platform
   * refunds. Multiple filter criteria can be combined for precise queries,
   * such as finding all pending refunds over $100 submitted in the last 7
   * days.
   *
   * Note: customer_id and seller_id filtering is applied at the provider
   * function level based on authenticated user context, not through request
   * parameters.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve from the paginated refund
     * request list. Must be a positive integer starting from 1. If null or
     * omitted, defaults to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of records per page.
     *
     * Controls how many refund request records are returned in a single
     * page. Must be between 1 and 100. If null or omitted, uses platform
     * default (typically 20). Larger limits reduce pagination requests but
     * increase response size.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Filter by refund workflow status.
     *
     * Restricts results to refund requests with specific status values.
     * Valid values include: pending_review (newly submitted),
     * pending_seller_response (awaiting seller action), approved
     * (seller/admin approved), rejected (seller/admin rejected), processing
     * (refund payment in progress), completed (refund fully processed).
     * Multiple statuses can be specified to retrieve refunds in any of the
     * listed states.
     */
    refund_status?: string[] | null | undefined;

    /**
     * Filter by specific order identifier.
     *
     * Restricts results to refund requests associated with a particular
     * order. Useful for viewing all refund requests related to a specific
     * transaction.
     */
    order_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by refund reason categories.
     *
     * Restricts results to refund requests with specific reasons. Valid
     * values: defective_damaged, wrong_item, does_not_match_description,
     * changed_mind, found_better_price, quality_not_expected, other.
     * Multiple reasons can be specified for inclusive filtering.
     */
    refund_reason?: string[] | null | undefined;

    /**
     * Filter by minimum request submission date.
     *
     * Restricts results to refund requests submitted on or after this
     * timestamp. Used to find recent refunds or analyze refunds within
     * specific time periods.
     */
    requested_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by maximum request submission date.
     *
     * Restricts results to refund requests submitted on or before this
     * timestamp. Combined with requested_at_from, creates a date range
     * filter for temporal analysis.
     */
    requested_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by minimum refund amount.
     *
     * Restricts results to refund requests with requested or approved
     * amount greater than or equal to this value. Useful for identifying
     * high-value refunds requiring additional scrutiny.
     */
    refund_amount_min?: (number & tags.Minimum<0>) | null | undefined;

    /**
     * Filter by maximum refund amount.
     *
     * Restricts results to refund requests with requested or approved
     * amount less than or equal to this value. Combined with
     * refund_amount_min, creates amount range filtering.
     */
    refund_amount_max?: (number & tags.Minimum<0>) | null | undefined;

    /**
     * Filter by return requirement status.
     *
     * When true, returns only refund requests where product return is
     * required. When false, returns refund requests not requiring product
     * return (damaged items, small value, etc.). Null returns all refunds
     * regardless of return requirement.
     */
    return_required?: boolean | null | undefined;

    /**
     * Field to sort results by.
     *
     * Specifies which attribute to use for ordering results. Options
     * include requested_at (submission date), refund_amount (refund value),
     * refund_status (workflow state), seller_response_deadline (urgency).
     * If null, defaults to requested_at descending (newest first).
     */
    sort_by?:
      | "requested_at"
      | "refund_amount"
      | "refund_status"
      | "seller_response_deadline"
      | null
      | undefined;

    /**
     * Sort direction.
     *
     * Specifies ascending (asc) or descending (desc) order for the sort_by
     * field. If null, defaults to descending for most fields to show
     * recent/high-value items first.
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };

  /** Refund update. */
  export type IUpdate = {
    /** Status. */
    refund_status?: string | undefined;
  };
}
