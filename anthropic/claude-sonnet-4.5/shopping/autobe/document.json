{"operations":[{"specification":"Customer registration endpoint that creates a new customer account and issues initial JWT authentication tokens. This operation implements the user registration flow for the 'customer' role as defined in the authentication system (User Roles and Authentication document). Customers self-register by providing email, password, name, and phone information. The system validates email uniqueness, password complexity requirements, and field formats before creating the account in 'unverified' status. Upon successful registration, the system sends a verification email with a time-limited token and immediately issues JWT access and refresh tokens to enable authenticated session. The customer can begin browsing and adding items to cart but cannot complete purchases until email verification. This operation references the shopping_mall_customers table fields: email, password_hash, name, phone, account_status, email_verified, email_verification_token, email_verification_sent_at, failed_login_attempts, created_at, updated_at.","authorizationType":"join","description":"Creates a new customer account in the shopping mall platform by validating provided registration information (email, password, name, phone) against business rules defined in the User Roles and Authentication requirements. The system enforces email uniqueness by checking the shopping_mall_customers table to ensure no existing account uses the provided email address. Password validation confirms the password meets security requirements: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. The password is hashed using bcrypt or Argon2 before storage in the password_hash field, and the plain text password is never stored.\n\nUpon successful validation, the system creates a customer record in the shopping_mall_customers table with account_status set to 'unverified' and email_verified set to false. The system generates a unique email_verification_token and records the email_verification_sent_at timestamp, then sends a verification email containing a link with the token that expires after 24 hours. The newly created account is assigned the 'customer' role with permissions to browse products, manage shopping cart and wishlist, and access customer-specific features as defined in the permission matrix.\n\nThe operation immediately generates JWT tokens (access token with 30-minute expiration and refresh token with 30-day expiration) containing the customer's userId, email, role ('customer'), and permissions in the token payload. The access token uses HS256 algorithm and includes fields: userId, email, role, permissions, iat, exp, and type ('access'). The refresh token includes: userId, tokenId, iat, exp, and type ('refresh'). A session record is created in the shopping_mall_sessions table linking the refresh token to the customer account with device information and IP address for security monitoring.\n\nThis registration operation returns the complete customer profile information along with the authentication tokens, enabling the customer to immediately begin an authenticated session. The customer can browse products, manage cart and wishlist, but cannot place orders until completing email verification through the verification link sent to their email address. The failed_login_attempts counter is initialized to 0, and password_history is initialized as empty to support future password change policies.","summary":"Register new customer account with email verification and issue JWT tokens (shopping_mall_customers table)","authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/customer/join","method":"post","parameters":[],"requestBody":{"description":"Customer registration information including email, password, name, and phone number","typeName":"IShoppingMallCustomer.ICreate"},"responseBody":{"description":"Customer account details with JWT access and refresh tokens for authentication","typeName":"IShoppingMallCustomer.IAuthorized"},"accessor":["auth","customer","join"]},{"specification":"Customer login endpoint that authenticates existing customers using email and password credentials and issues JWT tokens for session management. This operation implements the login flow for the 'customer' role as defined in the authentication system. The system validates credentials against the shopping_mall_customers table by verifying the account exists, is active, has verified email, and is not locked. Password verification compares the provided password with the stored password_hash. Upon successful authentication, the system generates JWT access and refresh tokens and creates a session record. Failed login attempts increment the failed_login_attempts counter and can trigger account lockout after 5 failures within a 15-minute window. This operation references shopping_mall_customers table fields: email, password_hash, account_status, email_verified, failed_login_attempts, failed_login_window_start_at, account_locked_until.","authorizationType":"login","description":"Authenticates a customer using email and password credentials by performing comprehensive validation against the shopping_mall_customers table and business rules defined in the User Roles and Authentication document. The system first validates the email format, then queries the shopping_mall_customers table to find a customer record matching the provided email address. If no matching customer exists, the system returns a generic 'Invalid email or password' error without revealing whether the email exists (security best practice to prevent account enumeration).\n\nFor existing accounts, the system performs sequential validation checks: (1) verifies account_status is 'active' and not 'suspended' or 'deleted', (2) confirms email_verified is true (unverified accounts cannot log in), (3) checks account_locked_until timestamp to ensure account is not currently locked due to previous failed login attempts. If any validation fails, the system returns appropriate error messages: 'Your account is inactive', 'Please verify your email address before logging in', or 'Your account has been locked due to multiple failed login attempts. Please try again in 30 minutes or reset your password'.\n\nPassword verification compares the provided password with the stored password_hash using bcrypt or Argon2 verification. If the password is incorrect, the system increments the failed_login_attempts counter and updates the failed_login_window_start_at timestamp if this is the first failure in the current 15-minute window. After 5 failed attempts within a 15-minute window, the system sets account_locked_until to 30 minutes in the future and returns an account locked error. The system tracks failed attempts using the failed_login_attempts counter and failed_login_window_start_at timestamp to implement the business rule allowing 5 failures per 15-minute window before 30-minute lockout.\n\nUpon successful password verification, the system resets failed_login_attempts to 0 and clears failed_login_window_start_at. The system then generates JWT tokens with access token (30-minute expiration) containing userId, email, role ('customer'), permissions, iat, exp, and type ('access'), and refresh token (30-day expiration) containing userId, tokenId, iat, exp, and type ('refresh'). A new session record is created in the shopping_mall_sessions table with user_type 'customer', the refresh token, device information parsed from the user agent string, IP address, and approximate_location derived from IP geolocation. The session supports multi-device concurrent access and can be revoked individually.\n\nThe login response returns the customer's profile information from the shopping_mall_customers table (id, email, name, phone, account_status) along with the JWT access and refresh tokens. The customer can now access all authenticated customer features including shopping cart management, order placement, wishlist functionality, address management, and order history as defined in the permission matrix. The refresh token enables token renewal without requiring re-login for 30 days.","summary":"Authenticate customer with email and password and issue JWT tokens (shopping_mall_customers table)","authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/customer/login","method":"post","parameters":[],"requestBody":{"description":"Customer login credentials with email and password","typeName":"IShoppingMallCustomer.ILogin"},"responseBody":{"description":"Customer account details with JWT access and refresh tokens for session management","typeName":"IShoppingMallCustomer.IAuthorized"},"accessor":["auth","customer","login"]},{"specification":"Token refresh endpoint that generates a new access token using a valid refresh token without requiring re-authentication. This operation implements the JWT token refresh flow for the 'customer' role as defined in the authentication system. When the customer's access token expires (after 30 minutes), the client can use the refresh token to obtain a new access token without prompting the customer to log in again. The system validates the refresh token signature, expiration (30 days), and revocation status by querying the shopping_mall_sessions table. If the refresh token is valid and not revoked (is_revoked = false), the system generates a new access token with fresh expiration time and returns it to the client. This operation references shopping_mall_sessions table fields: refresh_token, refresh_token_expires_at, is_revoked, last_activity_at, customer_id.","authorizationType":"refresh","description":"Refreshes an expired or expiring JWT access token by validating the provided refresh token and issuing a new access token without requiring customer re-authentication. This operation implements the token refresh mechanism defined in the JWT Token Management section of the User Roles and Authentication requirements, enabling seamless session continuation across the 30-minute access token lifetime.\n\nThe system validates the refresh token through multiple security checks: (1) verifies the JWT signature using the platform secret key to ensure the token was issued by the platform and has not been tampered with, (2) checks the refresh token has not expired by comparing current time against the refresh_token_expires_at timestamp (30 days from issuance), (3) queries the shopping_mall_sessions table to verify the refresh token exists and matches an active session record, (4) confirms the session is not revoked by checking is_revoked is false. If any validation fails, the system returns HTTP 401 Unauthorized with error code AUTH_TOKEN_EXPIRED or AUTH_INVALID_TOKEN, requiring the customer to re-authenticate via the login endpoint.\n\nUpon successful refresh token validation, the system extracts the customer's userId from the token payload and retrieves the current customer information from the shopping_mall_customers table to ensure the account is still active (account_status = 'active') and not suspended or deleted. The system generates a new access token with a fresh 30-minute expiration timestamp, containing the customer's userId, email, role ('customer'), permissions array, iat (issued at), exp (expiration), and type ('access'). The new access token uses the HS256 algorithm for signature.\n\nThe system updates the shopping_mall_sessions table by setting last_activity_at to the current timestamp to track session activity and prevent automatic expiration after 30 days of inactivity. If the current refresh token is within 7 days of expiration (refresh_token_expires_at < 7 days from now), the system also generates a new refresh token and updates the session record with the new refresh token and extended expiration (30 days from now). This rolling refresh token strategy maintains long-term session validity for active customers without requiring frequent re-authentication.\n\nThe operation returns the new access token to the client. If a new refresh token was also generated (due to near-expiration), both tokens are returned. The client should store the new access token and use it for subsequent authenticated API requests in the Authorization header as 'Bearer {access_token}'. This refresh mechanism supports continuous customer session across multiple devices as tracked in the shopping_mall_sessions table with concurrent session support.","summary":"Refresh JWT access token using valid refresh token without re-authentication (shopping_mall_sessions table)","authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/customer/refresh","method":"post","parameters":[],"requestBody":{"description":"Refresh token for generating new access token","typeName":"IShoppingMallCustomer.IRefresh"},"responseBody":{"description":"New JWT access token and optionally refreshed refresh token","typeName":"IShoppingMallCustomer.IAuthorized"},"accessor":["auth","customer","refresh"]},{"specification":"Password reset request initiation endpoint that generates a password reset token and sends a secure reset link to the customer's registered email address. This operation implements the password reset flow defined in the authentication system. When a customer forgets their password, they provide their email address. The system verifies an account exists for that email in the shopping_mall_customers table, generates a unique password_reset_token with 1-hour expiration (password_reset_expires_at), and sends an email containing a secure reset link. For security, the response does not reveal whether the email exists in the system. This operation references shopping_mall_customers table fields: email, password_reset_token, password_reset_expires_at.","authorizationType":null,"description":"Initiates the password reset process for customers who have forgotten their password by generating a secure password reset token and sending a reset link to the customer's registered email address. This operation implements the password reset flow defined in the Password Management section of the User Roles and Authentication requirements document.\n\nWhen a customer provides their email address to request password reset, the system queries the shopping_mall_customers table to determine if an account exists with that email. For security purposes following best practices to prevent account enumeration, the system returns a generic success message regardless of whether the email exists: 'If an account exists with that email address, you will receive password reset instructions.' This prevents attackers from determining which email addresses are registered on the platform.\n\nIf a customer account is found matching the provided email, the system generates a cryptographically secure random token of at least 32 bytes for the password reset. This token is stored in the password_reset_token field of the shopping_mall_customers table. The system also calculates and stores the expiration timestamp in password_reset_expires_at, set to 1 hour from the current time as specified in the business rules. If a previous password_reset_token exists and has not yet expired, the system invalidates it by generating a new token, ensuring only one active reset token per customer at any time.\n\nThe system constructs a password reset email containing a secure link in format: https://platform-url/auth/customer/password/reset?token={password_reset_token}. The email is sent to the customer's registered email address with subject 'Password Reset Request for Shopping Mall Account' and body explaining the reset process, token expiration (1 hour), and security warning that the link should not be shared. The email includes customer service contact information for customers who did not request the reset. The system implements rate limiting allowing maximum 3 password reset requests per hour per email address to prevent abuse.\n\nThis operation does not require authentication (publicly accessible endpoint) as it serves customers who cannot log in. The response is always a success message regardless of email existence, maintaining security while providing a user-friendly experience. Customers who receive the email can click the link to proceed to the password reset completion endpoint where they provide a new password. If the customer does not receive the email within a few minutes, they can retry the request, and the system will generate a new token with a fresh 1-hour expiration window.","summary":"Request password reset email with secure token link (shopping_mall_customers table)","authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/customer/password/reset/request","method":"post","parameters":[],"requestBody":{"description":"Customer email address for password reset","typeName":"IShoppingMallCustomer.IPasswordResetRequest"},"responseBody":{"description":"Confirmation message indicating reset email was sent if account exists","typeName":"IShoppingMallCustomer.IPasswordResetRequestResponse"},"accessor":["auth","customer","password","reset","request","requestPasswordReset"]},{"specification":"Password reset completion endpoint that validates the password reset token and sets a new password for the customer account. This operation completes the password reset flow by accepting the reset token (from email link) and new password. The system validates the token exists in the shopping_mall_customers table, has not expired (password_reset_expires_at > current time), and the new password meets all security requirements. Upon successful validation, the system hashes the new password, updates the password_hash field, invalidates all existing sessions by deleting associated refresh tokens in shopping_mall_sessions, clears the password_reset_token, and sends confirmation email. This operation references shopping_mall_customers table fields: password_reset_token, password_reset_expires_at, password_hash, password_changed_at, password_history, and shopping_mall_sessions table for session invalidation.","authorizationType":null,"description":"Completes the password reset process by validating the password reset token from the email link and updating the customer's password to the newly provided password. This operation implements the password reset completion flow defined in the Password Management section of the User Roles and Authentication requirements.\n\nWhen a customer clicks the password reset link from their email and submits a new password, the system first validates the password_reset_token by querying the shopping_mall_customers table to find a customer record with a matching token. If no customer is found with the provided token, the system returns error 'Password reset link is invalid or has expired' with HTTP 400 status. For valid tokens, the system checks the password_reset_expires_at timestamp to ensure the token has not expired (must be less than 1 hour old as per business rules). Expired tokens return the same error message, prompting the customer to request a new password reset link.\n\nThe system validates the new password meets all security requirements defined in the password policy: minimum 8 characters, maximum 128 characters, contains at least one uppercase letter (A-Z), one lowercase letter (a-z), one digit (0-9), and one special character (@$!%*?&#). The system rejects passwords matching the customer's email address or found in the common weak password blocklist. The system also validates the new password does not match any of the last 5 passwords stored in the password_history JSON array field. If password validation fails, the system returns specific error messages indicating which requirements are not met.\n\nUpon successful validation, the system hashes the new password using bcrypt with cost factor 12 or Argon2, ensuring the password is never stored in plain text. The new hash is stored in the password_hash field. The system updates password_changed_at to the current timestamp for security auditing. The previous password hash is prepended to the password_history JSON array, maintaining a maximum of 5 historical password hashes to enforce the password reuse prevention rule. The password_reset_token and password_reset_expires_at fields are cleared (set to null) to invalidate the reset token and prevent reuse.\n\nAs specified in the password change security requirements, the system invalidates all existing customer sessions except the current one by querying the shopping_mall_sessions table for all sessions where customer_id matches the customer and setting is_revoked to true and revoked_at to current timestamp. This forces logout from all devices and prevents unauthorized access if the password reset was initiated due to account compromise. The system sends a password change confirmation email to the customer's email address as a security notification, alerting them that their password was successfully changed and advising them to contact support if they did not initiate this change.\n\nThe operation returns a success response confirming the password has been updated and all other sessions have been invalidated for security. The customer should then log in using their new password via the login endpoint to establish a new authenticated session.","summary":"Complete password reset with token validation and update customer password (shopping_mall_customers table)","authorizationRole":null,"name":"resetPassword","prerequisites":[],"path":"/auth/customer/password/reset/complete","method":"post","parameters":[],"requestBody":{"description":"Password reset token and new password for account recovery","typeName":"IShoppingMallCustomer.IPasswordReset"},"responseBody":{"description":"Confirmation that password has been successfully reset","typeName":"IShoppingMallCustomer.IPasswordResetResponse"},"accessor":["auth","customer","password","reset","complete","resetPassword"]},{"specification":"Email verification endpoint that activates customer accounts by validating the verification token sent via email. This operation implements the email verification flow defined in the registration requirements. After registration, customers receive a verification email with a unique token. When clicking the verification link, this endpoint validates the email_verification_token from the shopping_mall_customers table, checks it has not expired (within 24 hours of email_verification_sent_at), and updates the account by setting email_verified to true and account_status to 'active'. The verified customer gains full access to platform features including order placement. This operation references shopping_mall_customers table fields: email_verification_token, email_verification_sent_at, email_verified, account_status.","authorizationType":null,"description":"Verifies a customer's email address by validating the verification token sent in the registration confirmation email, enabling full platform access including order placement. This operation implements the email verification flow defined in the User Registration and Email Verification sections of the User Roles and Authentication requirements.\n\nWhen a customer clicks the verification link from their registration email, the system receives the email_verification_token as a query parameter or request body. The system queries the shopping_mall_customers table to find a customer record with a matching email_verification_token. If no customer is found with the provided token, the system returns HTTP 400 error with message 'Invalid or expired verification token. Please request a new verification email.' This handles cases where the token was already used, never existed, or the customer record was deleted.\n\nFor valid tokens, the system validates the token has not expired by checking that the current timestamp is within 24 hours of the email_verification_sent_at timestamp, as specified in the business rule that verification tokens expire after 24 hours. If the token has expired (current time > email_verification_sent_at + 24 hours), the system returns the same 'Invalid or expired verification token' error and prompts the customer to request a new verification email through the resend verification endpoint.\n\nUpon successful token validation, the system updates the customer record in the shopping_mall_customers table by setting email_verified to true and changing account_status from 'unverified' to 'active'. The email_verification_token is cleared (set to null) to prevent token reuse. The system also updates the updated_at timestamp to reflect the account modification. These changes immediately grant the customer full platform access including the ability to place orders, manage addresses, add items to wishlist, and write product reviews - features that were restricted while the account was unverified as defined in the permission matrix.\n\nThe operation returns a success response indicating email verification is complete and the account is now active. The customer is typically redirected to a success page with a message 'Your email has been verified! You can now access all platform features.' and a link to continue shopping or proceed to their account dashboard. No new JWT tokens are issued by this endpoint; the customer continues using their existing access and refresh tokens from registration. The system may optionally send a welcome email to the verified customer with getting started guidance and platform feature highlights.","summary":"Verify customer email address using verification token (shopping_mall_customers table)","authorizationRole":null,"name":"verifyEmail","prerequisites":[],"path":"/auth/customer/email/verify","method":"post","parameters":[],"requestBody":{"description":"Email verification token from registration email","typeName":"IShoppingMallCustomer.IEmailVerification"},"responseBody":{"description":"Confirmation that email has been successfully verified and account is activated","typeName":"IShoppingMallCustomer.IEmailVerificationResponse"},"accessor":["auth","customer","email","verify","verifyEmail"]},{"specification":"Resend email verification endpoint that generates a new verification token and sends a new verification email to customers who did not receive or lost the original verification email. This operation supports the email verification flow by allowing customers to request a new verification link. The system validates the customer account exists in shopping_mall_customers table with the provided email, is in 'unverified' status (email_verified = false), and enforces rate limiting (maximum 1 resend per 5 minutes by checking email_verification_sent_at timestamp). Upon validation, the system generates a new email_verification_token with 24-hour expiration, updates email_verification_sent_at, and sends a new verification email. This operation references shopping_mall_customers table fields: email, account_status, email_verified, email_verification_token, email_verification_sent_at.","authorizationType":null,"description":"Resends the email verification link to customers who did not receive the original verification email or whose verification token has expired. This operation implements the verification email resend functionality defined in the Email Verification section of the User Roles and Authentication requirements, supporting customers who need a new verification link.\n\nWhen a customer requests a new verification email by providing their email address, the system queries the shopping_mall_customers table to find a customer record matching the provided email. If no customer exists with that email, the system returns a generic success message 'If your email is registered and unverified, you will receive a new verification link' without revealing whether the account exists (following security best practice to prevent account enumeration).\n\nFor existing customer accounts, the system validates the account is eligible for verification email resend by checking: (1) email_verified is false (verified accounts don't need new verification emails), (2) account_status is 'unverified' or 'active' (suspended or deleted accounts cannot receive verification emails). If the account is already verified, the system returns error 'This email address has already been verified. You can log in to your account.'\n\nThe system enforces rate limiting as specified in the business rules allowing maximum 1 verification email resend per 5 minutes per customer. This is validated by checking the email_verification_sent_at timestamp and comparing it to current time. If less than 5 minutes have passed since the last verification email was sent (email_verification_sent_at + 5 minutes > current time), the system returns HTTP 429 error 'Verification email was recently sent. Please wait a few minutes before requesting another one.' This prevents abuse and email system overload.\n\nIf rate limiting validation passes, the system generates a new cryptographically secure email_verification_token (unique random string) and sets a new expiration time of 24 hours from the current timestamp. The token is stored in the email_verification_token field, and email_verification_sent_at is updated to the current timestamp. The system queues a verification email containing a link in format: https://platform-url/auth/customer/email/verify?token={email_verification_token}. The email explains the verification process, token expiration (24 hours), and provides instructions for completing verification.\n\nThe operation returns a generic success response 'If your email is registered and unverified, you will receive a new verification link' to avoid revealing account information while providing a user-friendly confirmation message. The customer should check their email inbox (and spam folder) for the verification link. The new token expires 24 hours from issuance, replacing any previous unexpired tokens. Once the customer clicks the verification link and the verifyEmail endpoint processes the token, their account transitions from 'unverified' to 'active' status with email_verified set to true, granting access to full platform features.","summary":"Resend verification email with new token for unverified customer accounts (shopping_mall_customers table)","authorizationRole":null,"name":"resendVerification","prerequisites":[],"path":"/auth/customer/email/verify/resend","method":"post","parameters":[],"requestBody":{"description":"Customer email address to resend verification link","typeName":"IShoppingMallCustomer.IResendVerification"},"responseBody":{"description":"Confirmation message indicating verification email sent if account exists","typeName":"IShoppingMallCustomer.IResendVerificationResponse"},"accessor":["auth","customer","email","verify","resend","resendVerification"]},{"specification":"Password change endpoint for authenticated customers to update their password by providing current password and new password. This operation implements the password change functionality defined in the authentication system for logged-in customers who want to change their password for security reasons. The system validates the customer is authenticated via JWT token, verifies the current password matches the stored password_hash, validates the new password meets all security requirements (8+ characters, complexity rules), ensures the new password does not match any of the last 5 passwords in password_history, hashes the new password, updates password_hash and password_changed_at, invalidates all other sessions except current, and sends confirmation email. This operation references shopping_mall_customers table fields: password_hash, password_changed_at, password_history, and shopping_mall_sessions for session invalidation.","authorizationType":null,"description":"Allows authenticated customers to change their password by validating their current password and updating to a new password that meets security requirements. This operation implements the password change process defined in the Password Management section of the User Roles and Authentication requirements, providing customers with the ability to proactively update their credentials for security purposes.\n\nThis endpoint requires authentication via valid JWT access token in the Authorization header. The system extracts the customer's userId from the token payload and retrieves the customer record from the shopping_mall_customers table. The customer must be authenticated and have an active account (account_status = 'active') to change their password.\n\nThe customer must provide both their current password and the desired new password in the request body. The system first verifies the current password by comparing it against the stored password_hash using bcrypt or Argon2 verification. If the current password is incorrect, the system returns HTTP 401 error 'Current password is incorrect' and does not proceed with the password change. This verification prevents unauthorized password changes if someone gains temporary access to an authenticated session.\n\nThe system validates the new password meets all password policy requirements defined in the business rules: minimum 8 characters, maximum 128 characters, contains at least one uppercase letter (A-Z), one lowercase letter (a-z), one digit (0-9), and one special character (@$!%*?&#). The system rejects new passwords that match the customer's email address or are found in the commonly used weak password blocklist. Additionally, the system checks the password_history JSON array field (storing hashes of the last 5 passwords) to ensure the new password does not match any previously used password. If the new password fails any validation rule, the system returns HTTP 400 error with specific messages indicating which requirements are not met.\n\nUpon successful validation, the system hashes the new password using bcrypt with cost factor 12 or Argon2 and stores the hash in the password_hash field. The current password hash is prepended to the password_history JSON array, and if the array exceeds 5 entries, the oldest hash is removed to maintain the limit of 5 historical passwords. The password_changed_at timestamp is updated to the current time for security auditing and password age tracking.\n\nAs specified in the password change security requirements, the system invalidates all existing customer sessions except the current session to protect the account from unauthorized access. This is achieved by querying the shopping_mall_sessions table for all records where customer_id matches the customer and the session is not the current session (identified by the refresh token from the current request), then setting is_revoked to true and revoked_at to current timestamp for those sessions. This forces logout from all other devices, ensuring only the device where the password was changed remains authenticated.\n\nThe system sends a password change confirmation email to the customer's email address as a security notification, informing them their password was successfully changed at the current timestamp from the current IP address and device. The email advises the customer to contact support immediately if they did not initiate this change. The operation returns a success response confirming the password has been updated and all other sessions have been logged out for security. The customer continues their authenticated session with the current access and refresh tokens, while all other devices require re-authentication with the new password.","summary":"Change customer password with current password verification (shopping_mall_customers table)","authorizationRole":"customer","name":"changePassword","prerequisites":[],"path":"/auth/customer/password/change","method":"put","parameters":[],"requestBody":{"description":"Current password and new password for password change","typeName":"IShoppingMallCustomer.IPasswordChange"},"responseBody":{"description":"Confirmation that password has been changed and sessions invalidated","typeName":"IShoppingMallCustomer.IPasswordChangeResponse"},"accessor":["auth","customer","password","change","changePassword"]},{"specification":"Logout endpoint that terminates the customer's current session by revoking the refresh token and invalidating the session record. This operation implements the logout functionality defined in the authentication system. The authenticated customer's session is identified by the refresh token in the request. The system updates the corresponding session record in shopping_mall_sessions by setting is_revoked to true and revoked_at to current timestamp, preventing future token refresh operations. The client should also discard stored access and refresh tokens. This operation references shopping_mall_sessions table fields: refresh_token, is_revoked, revoked_at, customer_id.","authorizationType":null,"description":"Logs out the customer by revoking the current session's refresh token and invalidating the session record in the shopping_mall_sessions table. This operation implements the logout process defined in the Session Management section of the User Roles and Authentication requirements, allowing customers to securely terminate their authenticated session.\n\nThis endpoint requires authentication via valid JWT access token in the Authorization header. The system extracts the customer's userId from the token payload to identify the customer. The request must include the refresh token (either in request body or extracted from httpOnly cookie depending on storage strategy) to identify which specific session to terminate, supporting the multi-device session management capability where customers can have concurrent sessions on different devices.\n\nThe system queries the shopping_mall_sessions table to find the session record matching the provided refresh_token and customer_id. If no matching session is found or the session is already revoked (is_revoked = true), the system returns a success response anyway (idempotent operation) without revealing session state details. For valid active sessions, the system updates the session record by setting is_revoked to true and revoked_at to the current timestamp. This immediately invalidates the refresh token, preventing it from being used to generate new access tokens in future token refresh requests.\n\nRevoking the refresh token effectively terminates the session because while the current access token remains technically valid until its 30-minute expiration, it cannot be renewed once the refresh token is revoked. This means the customer will be logged out within 30 minutes at most, and immediately if the client application discards the access token upon logout (recommended client-side behavior). The session revocation is logged in the shopping_mall_sessions table with the revoked_at timestamp for security auditing and session history tracking.\n\nThe operation instructs the client application to immediately discard both the access token (stored in localStorage or sessionStorage) and refresh token (stored in httpOnly cookie or localStorage) from client-side storage. This ensures the customer cannot continue making authenticated requests with the revoked session. The system response confirms successful logout and session termination.\n\nThis single-session logout operation terminates only the current session associated with the provided refresh token. Other concurrent sessions on different devices remain active and unaffected, as specified in the multi-device support requirements. If the customer wants to log out from all devices simultaneously, they should use a separate 'logout from all devices' endpoint that revokes all refresh tokens associated with their customer_id in the shopping_mall_sessions table. The current operation enables customers to log out from one device while maintaining active sessions on their other devices (e.g., logging out from work computer while staying logged in on mobile phone).","summary":"Logout customer and revoke current session refresh token (shopping_mall_sessions table)","authorizationRole":"customer","name":"logout","prerequisites":[],"path":"/auth/customer/logout","method":"post","parameters":[],"requestBody":{"description":"Refresh token of the session to terminate","typeName":"IShoppingMallCustomer.ILogout"},"responseBody":{"description":"Confirmation that session has been successfully terminated","typeName":"IShoppingMallCustomer.ILogoutResponse"},"accessor":["auth","customer","logout"]},{"specification":"Logout from all devices endpoint that terminates all active sessions for the authenticated customer by revoking all their refresh tokens. This operation implements the multi-device logout functionality defined in the session management requirements. The authenticated customer's identity is extracted from the JWT token. The system queries shopping_mall_sessions table for all session records where customer_id matches the customer and is_revoked is false, then updates all matching sessions by setting is_revoked to true and revoked_at to current timestamp. This forces logout from all devices including the current device. This operation references shopping_mall_sessions table fields: customer_id, is_revoked, revoked_at.","authorizationType":null,"description":"Terminates all active sessions for the authenticated customer across all devices by revoking all refresh tokens associated with their account. This operation implements the 'logout from all devices' functionality defined in the Session Management and Multi-Device Support sections of the User Roles and Authentication requirements, providing customers with the ability to secure their account by ending all active sessions simultaneously.\n\nThis endpoint requires authentication via valid JWT access token in the Authorization header. The system extracts the customer's userId from the token payload to identify the customer whose sessions should be terminated. Unlike the single-session logout endpoint, this operation does not require the refresh token in the request body because it targets all sessions rather than a specific session.\n\nThe system queries the shopping_mall_sessions table to retrieve all session records where customer_id matches the authenticated customer and is_revoked is false, indicating currently active sessions that have not been previously revoked. This query returns all concurrent sessions the customer has established across different devices, browsers, and locations - for example, sessions from their mobile phone, home computer, work computer, and tablet.\n\nFor each active session found, the system performs a batch update setting is_revoked to true and revoked_at to the current timestamp. This bulk revocation operation immediately invalidates all refresh tokens associated with the customer's account, preventing any of them from being used to generate new access tokens. The revocation is atomic to ensure all sessions are terminated together without partial failures. The system logs the session termination in each session record with the revoked_at timestamp for security auditing and session history tracking.\n\nAfter revoking all refresh tokens, existing access tokens remain technically valid until their individual 30-minute expirations, but they cannot be renewed. This means the customer will be fully logged out from all devices within 30 minutes at most. If the client applications are properly implemented to discard access tokens upon receiving logout confirmation, the customer is logged out immediately across all devices. The 'logout from all devices' operation is typically used in security scenarios such as: (1) customer suspects account compromise, (2) customer changes password and wants to force re-authentication everywhere, (3) customer lost a device and wants to protect their account.\n\nThe operation returns a success response confirming all sessions have been revoked and the customer will be logged out from all devices. The response includes the count of sessions that were terminated to provide transparency. The client application receiving this response should immediately discard stored tokens and redirect the customer to the login page. All other devices will be forced to re-authenticate when their access tokens expire (within 30 minutes) or when they next attempt to refresh their tokens (immediate failure due to revoked refresh token).","summary":"Logout customer from all devices by revoking all session tokens (shopping_mall_sessions table)","authorizationRole":"customer","name":"logoutAll","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Customer must have an active session with cart items to demonstrate multi-device usage before logging out from all devices"}],"path":"/auth/customer/logout/all","method":"post","parameters":[],"requestBody":null,"responseBody":{"description":"Confirmation that all sessions have been terminated with count of revoked sessions","typeName":"IShoppingMallCustomer.ILogoutAllResponse"},"accessor":["auth","customer","_logout","all","logoutAll"]},{"specification":"Seller registration endpoint that creates a new seller account and issues initial JWT authentication tokens. This operation handles the complete seller onboarding process including business information collection, email verification token generation, and initial account setup in pending_approval status. The endpoint collects comprehensive business details required for seller verification including business name, contact information, tax identification, and bank account details for future payouts. Upon successful registration, the system generates and returns JWT access and refresh tokens for immediate authentication, though the seller account remains in pending_approval status until administrator verification. This is a public endpoint that does not require authentication, allowing prospective vendors to initiate the seller application process. The operation creates the seller record in the shopping_mall_sellers table with email_verified set to false and account_status set to pending_approval, generates a unique email_verification_token for account activation, and initializes authentication-related fields including password_hash (bcrypt/Argon2 encrypted) and security counters (failed_login_attempts set to 0). The response includes the complete seller profile data along with authentication tokens, enabling the newly registered seller to access their pending account dashboard immediately.","authorizationType":"join","name":"join","path":"/auth/seller/join","method":"post","summary":"Register new seller account and issue authentication tokens","description":"Creates a new seller account in the shopping_mall_sellers table with comprehensive business information required for vendor onboarding and marketplace participation. This endpoint handles the complete seller registration workflow including business entity verification data collection, authentication credential setup, and initial JWT token issuance for immediate platform access.\n\nThe registration process collects essential business information including business_name (publicly displayed store name), business_type (individual, LLC, corporation, partnership), contact_person_name (primary contact), email (unique authentication identifier), phone (business contact number), business_address (physical location for verification), tax_id (for tax reporting and payout processing), and optional banking details (bank_account_number, bank_routing_number, bank_account_holder_name) for future payout configuration.\n\nUpon successful registration, the system creates a seller record with account_status set to 'pending_approval' and email_verified set to false, requiring subsequent email verification and administrator approval before full platform access is granted. The operation generates a unique email_verification_token (expires in 24 hours) and sets email_verification_sent_at timestamp for verification workflow tracking.\n\nSecurity measures include password hashing using bcrypt or Argon2 (stored in password_hash field), initialization of failed login attempt tracking (failed_login_attempts set to 0, failed_login_window_start_at set to null), and account lockout prevention fields (account_locked_until set to null). The password_changed_at timestamp is set to the current time, and password_history is initialized as empty JSON array for future password rotation enforcement.\n\nThe endpoint immediately issues JWT authentication tokens (access token with 30-minute expiration and refresh token with 30-day expiration) enabling the seller to access their account dashboard and view application status, though product management and order fulfillment capabilities remain restricted until account approval. The commission_rate is set to the platform default (typically 0.10 for 10%), and optional store customization fields (store_url_slug, store_description, store_logo_url, store_banner_url) can be provided or configured later.\n\nThis operation integrates with the email notification system to send verification emails, the session management system to create initial authentication sessions, and the admin notification system to alert administrators of new seller applications requiring review. The created_at and updated_at timestamps are set to the current time for audit trail establishment.","parameters":[],"requestBody":{"description":"Seller registration information including business details, contact information, and authentication credentials","typeName":"IShoppingMallSeller.ICreate"},"responseBody":{"description":"Registered seller account details with JWT authentication tokens for immediate platform access","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"prerequisites":[],"accessor":["auth","seller","join"]},{"specification":"Seller authentication endpoint that validates credentials and issues JWT access and refresh tokens. This operation authenticates sellers using their registered email and password, verifying account status and email verification before granting access. The endpoint performs comprehensive authentication checks including account existence validation, email verification status confirmation, account status verification (must be active, not suspended or banned), password hash comparison, and failed login attempt tracking. Upon successful authentication, the system generates fresh JWT tokens and resets security counters, enabling sellers to access their product management dashboard, inventory controls, order fulfillment interface, and sales analytics. Failed authentication attempts increment the failed_login_attempts counter and may trigger account lockout after 5 failures within a 15-minute window. This is a public endpoint that does not require existing authentication, serving as the primary entry point for returning sellers to access the platform.","authorizationType":"login","name":"login","path":"/auth/seller/login","method":"post","summary":"Authenticate seller and issue access tokens","description":"Validates seller login credentials (email and password) and issues JWT authentication tokens for platform access. This endpoint performs multi-layered authentication validation to ensure secure seller access to product management, inventory controls, order fulfillment, and analytics features.\n\nThe authentication process validates the seller exists in the shopping_mall_sellers table by querying with the provided email address (must match exactly, case-insensitive comparison). The endpoint verifies the account_status field is set to 'active' - accounts with 'pending_approval', 'suspended', 'banned', or 'on_hold' status are denied access with specific error messages indicating the account state and required actions.\n\nEmail verification is enforced by checking the email_verified field is true. Sellers who have registered but not verified their email (email_verified = false) cannot authenticate and receive a prompt to complete email verification using the verification link sent to their registered email address. The system allows requesting a new verification email if the original email_verification_token has expired (24-hour expiration from email_verification_sent_at timestamp).\n\nPassword validation compares the provided password against the stored password_hash using bcrypt or Argon2 verification. The system implements account lockout protection by checking if account_locked_until timestamp is set and has not passed - locked accounts display the remaining lockout duration and suggest password reset or waiting for automatic unlock (30 minutes from lock time).\n\nFailed authentication attempts are tracked using failed_login_attempts counter and failed_login_window_start_at timestamp. The system increments failed_login_attempts on invalid password and checks if 5 failures occurred within the 15-minute window defined by failed_login_window_start_at. Upon reaching 5 failures, the account_locked_until field is set to 30 minutes from current time, account is locked, and the seller receives notification email about the security lockout.\n\nSuccessful authentication resets security counters (failed_login_attempts to 0, failed_login_window_start_at to null, account_locked_until to null), generates new JWT access token (30-minute expiration) and refresh token (30-day expiration), creates a session record in shopping_mall_sessions table with device information and IP address tracking, and returns the complete seller profile along with authentication tokens.\n\nThe response includes seller account details (id, email, business_name, account_status, store information), authentication tokens for API access, and session metadata. The seller can immediately access their dashboard, manage products and inventory, view and process orders, respond to reviews, and access sales analytics using the provided tokens.","parameters":[],"requestBody":{"description":"Seller login credentials containing email and password for authentication","typeName":"IShoppingMallSeller.ILogin"},"responseBody":{"description":"Authenticated seller account information with JWT tokens for platform access","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"prerequisites":[],"accessor":["auth","seller","login"]},{"specification":"Token refresh endpoint that renews JWT access tokens using a valid refresh token. This operation extends seller authentication sessions without requiring re-login by issuing new access tokens when the current access token expires (30-minute lifetime). The endpoint validates the provided refresh token against the shopping_mall_sessions table, verifying the token is not expired (30-day lifetime), not revoked (is_revoked = false), and belongs to an active seller account. Upon successful validation, the system generates a new access token with fresh 30-minute expiration while maintaining the same refresh token (unless refresh token is within 7 days of expiration, in which case a new refresh token is also issued). This operation updates the last_activity_at timestamp in the session record to track ongoing session activity and prevent automatic session expiration due to inactivity. The refresh endpoint enables seamless seller experience by allowing continuous platform access without frequent re-authentication, while maintaining security through short-lived access tokens and revocable refresh tokens. If the refresh token is invalid, expired, or revoked, the endpoint returns authentication error requiring the seller to log in again.","authorizationType":"refresh","name":"refresh","path":"/auth/seller/refresh","method":"post","summary":"Refresh seller access tokens using valid refresh token","description":"Renews JWT access tokens for sellers using a valid refresh token, enabling session extension without re-authentication. This endpoint is critical for maintaining continuous seller access to the platform when access tokens expire (30-minute lifetime), providing seamless user experience for ongoing product management, inventory updates, and order fulfillment activities.\n\nThe token refresh process validates the provided refresh token by querying the shopping_mall_sessions table where refresh_token matches the provided token, user_type equals 'seller', and seller_id is not null. The system performs comprehensive validation checks including verifying refresh_token_expires_at timestamp has not passed (30-day token lifetime), confirming is_revoked field is false (session not manually terminated), and validating the associated seller account exists and is active in shopping_mall_sellers table.\n\nSession activity tracking updates the last_activity_at timestamp to the current time, maintaining the session as active and preventing automatic expiration due to the 30-day inactivity threshold. The system checks if sessions have been inactive for 30 days by comparing current time against last_activity_at, automatically expiring and revoking stale sessions.\n\nToken renewal logic generates a new JWT access token with fresh 30-minute expiration containing seller authentication claims (seller ID, email, role, permissions). The existing refresh token is maintained unless it is within 7 days of expiration (refresh_token_expires_at - current_time < 7 days), in which case a new refresh token is generated with extended 30-day lifetime and the session record is updated with the new refresh_token value and refresh_token_expires_at timestamp.\n\nThe endpoint returns the complete seller profile information (id, email, business_name, account_status, email_verified, store_url_slug, store_description, commission_rate, and other seller-specific fields from shopping_mall_sellers table) along with the new access token and refresh token (if renewed). This enables the seller application to update stored credentials and continue authenticated operations without interruption.\n\nSecurity features include automatic session revocation detection (is_revoked = true returns authentication error), device and location tracking through existing session metadata (ip_address, user_agent, device_type, browser_name, operating_system, approximate_location fields), and comprehensive audit logging of token refresh operations for security monitoring and fraud detection.","parameters":[],"requestBody":{"description":"Refresh token for generating new access tokens","typeName":"IShoppingMallSeller.IRefresh"},"responseBody":{"description":"Renewed seller authentication tokens and updated seller profile information","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"prerequisites":[],"accessor":["auth","seller","refresh"]},{"specification":"Password reset request endpoint that generates and sends a password reset token to the seller's registered email address. This operation handles the initial step of the password recovery workflow for sellers who have forgotten their credentials or need to reset their password for security reasons. The endpoint accepts the seller's email address, validates the account exists and is not in a state that prevents password reset (e.g., banned accounts), generates a cryptographically secure random token (minimum 32 bytes), sets the password_reset_token and password_reset_expires_at (1 hour expiration) fields in the shopping_mall_sellers table, and triggers an email notification containing a secure password reset link with the token. For security, the endpoint returns a generic success message regardless of whether the email exists in the system (prevents email enumeration attacks). The operation implements rate limiting allowing maximum 3 password reset requests per hour per email address to prevent abuse. This is a public endpoint that does not require authentication since it serves users who cannot log in.","authorizationType":null,"name":"requestPasswordReset","path":"/auth/seller/password/reset/request","method":"post","summary":"Request password reset token for seller account","description":"Initiates the password reset workflow for seller accounts by generating a secure reset token and sending it via email. This endpoint serves sellers who have forgotten their password or need to reset credentials for security reasons, providing a secure self-service recovery mechanism without requiring current password knowledge.\n\nThe operation accepts the seller's registered email address and validates it exists in the shopping_mall_sellers table. For security reasons (preventing email enumeration attacks), the endpoint returns a generic success message 'If an account exists with this email, you will receive password reset instructions' regardless of whether the email is found, preventing attackers from determining which emails are registered as seller accounts.\n\nWhen a valid seller email is found, the system generates a cryptographically secure random token (minimum 32 bytes using crypto.randomBytes or equivalent) and stores it in the password_reset_token field. The password_reset_expires_at field is set to 1 hour from the current timestamp, enforcing the business rule that reset tokens expire quickly for security. Any existing password_reset_token is overwritten, ensuring only one active reset token exists per seller at any time.\n\nRate limiting is enforced by tracking reset request timestamps and counting requests within the last hour. The system allows maximum 3 password reset requests per hour per seller email address to prevent abuse and potential denial-of-service attacks. If the limit is exceeded, the endpoint returns an error 'Too many password reset requests. Please try again later' without processing the request.\n\nAccount status validation checks that the seller account is not in 'banned' status - banned sellers cannot reset passwords and must contact support. Accounts with 'pending_approval', 'suspended', or 'on_hold' status can request password resets, as password reset does not require active account status (seller may have forgotten password before completing approval process).\n\nThe email notification system is triggered with template containing the password reset link (typically https://platform.com/seller/password/reset?token={password_reset_token}), seller's business_name for personalization, token expiration time (1 hour), and security advisory to ignore the email if the seller did not request the reset. The notification is sent to the seller's registered email address asynchronously within 5 minutes.\n\nThis operation does not create sessions, issue JWT tokens, or modify any other seller account fields beyond password_reset_token and password_reset_expires_at. It serves exclusively as the first step in the two-step password recovery process, with the actual password reset occurring in a subsequent operation that validates the token and updates the password_hash field.","parameters":[],"requestBody":{"description":"Seller email address for password reset request","typeName":"IShoppingMallSeller.IPasswordResetRequest"},"responseBody":{"description":"Generic success confirmation message for security","typeName":"IShoppingMallSeller.IPasswordResetRequestResponse"},"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller account must exist and be registered in the system before password reset can be requested"}],"accessor":["auth","seller","password","reset","request","requestPasswordReset"]},{"specification":"Password reset confirmation endpoint that validates the reset token and updates the seller's password. This operation completes the password recovery workflow by accepting the reset token (sent via email) and the new password, validating the token is valid and not expired (password_reset_token matches and password_reset_expires_at is in the future), enforcing password complexity requirements (minimum 8 characters with uppercase, lowercase, number, and special character), checking password history to prevent reuse of last 5 passwords (comparing against password_history JSON array), hashing the new password using bcrypt or Argon2, updating the password_hash field, invalidating all existing sessions in shopping_mall_sessions table by setting is_revoked to true (forcing re-login on all devices for security), clearing the password_reset_token and password_reset_expires_at fields, updating password_changed_at to current timestamp, and appending the old password hash to password_history array. The endpoint returns success confirmation without issuing new tokens, requiring the seller to log in with their new password. This is a public endpoint since sellers who forgot their password cannot authenticate. If the token is invalid or expired, the endpoint returns error 'Password reset link is invalid or has expired' and suggests requesting a new reset link.","authorizationType":null,"name":"confirmPasswordReset","path":"/auth/seller/password/reset/confirm","method":"post","summary":"Reset seller password using valid reset token","description":"Completes the password reset workflow by validating the reset token and updating the seller's password with enhanced security measures. This endpoint is the second step of the two-step password recovery process, accepting the token sent via email and the new password credentials to restore seller account access.\n\nThe operation performs comprehensive token validation by querying the shopping_mall_sellers table for a record where password_reset_token matches the provided token. The system verifies the token exists (not null), has not been used (token is cleared after successful reset), and has not expired by comparing password_reset_expires_at timestamp against the current time (token lifetime is 1 hour from generation in the request operation). If validation fails, the endpoint returns error 'Password reset link is invalid or has expired. Please request a new password reset' and suggests using the password reset request endpoint to generate a fresh token.\n\nPassword complexity validation enforces platform security requirements: minimum 8 characters, maximum 128 characters, must contain at least one uppercase letter (A-Z), one lowercase letter (a-z), one digit (0-9), and one special character from the set (@, $, !, %, *, ?, &, #). The system rejects passwords matching the seller's email address to prevent easily guessable credentials. If complexity validation fails, specific error messages indicate which requirements are not met.\n\nPassword reuse prevention checks the password_history field (JSON array storing hashes of the last 5 passwords with format [{\"hash\": \"bcrypt_hash\", \"changed_at\": \"timestamp\"}]). The system compares the new password against all 5 historical password hashes using bcrypt/Argon2 verification. If the new password matches any previous password, the endpoint rejects the reset with error 'This password was recently used. Please choose a different password' to enforce password rotation policy.\n\nUpon successful validation, the new password is hashed using bcrypt with cost factor 12 or Argon2 and stored in the password_hash field. The password_changed_at timestamp is updated to the current time for security audit tracking. The old password hash (current password_hash before update) is appended to the password_history JSON array, maintaining only the most recent 5 password hashes (oldest hash is removed if array exceeds 5 entries).\n\nSession invalidation occurs for all active seller sessions by updating all records in shopping_mall_sessions where seller_id matches the seller's ID and is_revoked is false, setting is_revoked to true and revoked_at to the current timestamp. This forces logout on all devices and browsers where the seller is currently authenticated, requiring re-login with the new password for security. Only the current password reset session is exempt from revocation (if token was used in authenticated context).\n\nToken cleanup clears the password_reset_token field (set to null) and password_reset_expires_at field (set to null) to prevent token reuse. Each reset token is single-use and cannot be reused after successful password update. Failed reset attempts do not clear the token, allowing sellers to retry if they make mistakes entering the new password (token remains valid until 1-hour expiration).\n\nSecurity notification email is sent to the seller's registered email address confirming the password was successfully changed, including timestamp of change, IP address from which reset was completed (if trackable), and advisory to contact support immediately if the seller did not initiate the password reset (potential account compromise). The notification is sent asynchronously within 5 minutes of password update.\n\nThe endpoint returns a simple success confirmation without issuing new JWT tokens. Sellers must use the login endpoint with their new password to obtain authentication tokens and access their account. This security measure ensures the password reset was intentional and the seller can successfully authenticate with the new credentials.","parameters":[],"requestBody":{"description":"Password reset token and new password credentials","typeName":"IShoppingMallSeller.IPasswordResetConfirm"},"responseBody":{"description":"Password reset success confirmation","typeName":"IShoppingMallSeller.IPasswordResetConfirmResponse"},"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/auth/seller/password/reset/request","method":"post"},"description":"Password reset token must be generated and sent via email before it can be used to confirm password reset. The reset request operation creates the password_reset_token and password_reset_expires_at fields that this confirmation endpoint validates."}],"accessor":["auth","seller","password","reset","confirm","confirmPasswordReset"]},{"specification":"Authenticated password change endpoint that allows sellers to update their password while logged in. This operation requires the seller to provide their current password for verification (re-authentication) along with the new password, ensuring the password change is authorized by the account owner. The endpoint validates the seller is authenticated via JWT token, verifies the current password matches the password_hash using bcrypt/Argon2 comparison, enforces password complexity requirements on the new password (minimum 8 characters with uppercase, lowercase, number, special character), checks password history to prevent reuse of last 5 passwords (comparing against password_history JSON array), hashes the new password, updates password_hash field, invalidates all sessions except the current one (allowing continued access in current browser/device while forcing re-login elsewhere), updates password_changed_at timestamp, and appends old password hash to password_history. The endpoint returns success confirmation without new tokens (seller remains authenticated in current session). This differs from password reset in that it requires authentication and current password verification, serving sellers who remember their password but want to change it for security or preference reasons.","authorizationType":null,"name":"changePassword","path":"/auth/seller/password/change","method":"post","summary":"Change seller password with current password verification","description":"Enables authenticated sellers to change their password while logged in, requiring current password verification for security. This endpoint serves sellers who know their current password and want to update it for security hygiene, suspected compromise, or personal preference, providing a secure password rotation mechanism within an authenticated session.\n\nAuthentication requirement enforces that the seller must have a valid JWT access token and active session. The endpoint extracts the seller ID from the authenticated token claims and validates the session exists in shopping_mall_sessions table with is_revoked false and seller_id matching the authenticated seller. This ensures only the legitimate account owner who can authenticate with current credentials can change the password.\n\nCurrent password verification re-authenticates the seller by comparing the provided current_password against the password_hash field in shopping_mall_sellers table using bcrypt or Argon2 verification. This critical security step prevents unauthorized password changes if someone gains access to an unlocked device or stolen session token - the attacker would need to know the current password to change it. If current password verification fails, the endpoint returns error 'Current password is incorrect' without incrementing failed_login_attempts (failed password change is not the same as failed login).\n\nNew password validation enforces identical complexity requirements as registration and password reset: minimum 8 characters, maximum 128 characters, must contain at least one uppercase letter (A-Z), one lowercase letter (a-z), one digit (0-9), and one special character (@, $, !, %, *, ?, &, #). The system validates the new password does not match the seller's email address (prevents easily guessable passwords based on account identifier). If complexity validation fails, specific error messages indicate which requirements are not satisfied.\n\nPassword reuse prevention retrieves the password_history field (JSON array storing up to 5 previous password hashes with format [{\"hash\": \"bcrypt_hash\", \"changed_at\": \"timestamp\"}]) and compares the new password against all stored historical hashes using bcrypt/Argon2 verification. If the new password matches any of the last 5 passwords, the endpoint rejects the change with error 'This password was recently used. Please choose a different password' to enforce password rotation and prevent cycling between the same few passwords.\n\nPassword update process hashes the new password using bcrypt with cost factor 12 or Argon2 and stores the hash in the password_hash field. The password_changed_at timestamp is updated to the current time for security audit tracking and password age policy enforcement. The current password_hash value (before update) is appended to the password_history JSON array with the current timestamp, maintaining chronological history of password changes. If the password_history array contains more than 5 entries after appending, the oldest entry is removed to maintain the 5-password limit.\n\nSelective session invalidation revokes all seller sessions EXCEPT the current one to balance security and convenience. The system queries shopping_mall_sessions table for all records where seller_id matches the seller, is_revoked is false, and refresh_token is NOT equal to the current session's refresh token (identified from the request's refresh token or session cookie). For all matching sessions, is_revoked is set to true and revoked_at is set to the current timestamp. This forces the seller to re-login on all other devices and browsers (mobile apps, other computers, tablets) while allowing them to continue working in the current session without interruption.\n\nSecurity notification email is sent to the seller's registered email address confirming the password change, including the change timestamp, approximate location (from approximate_location field of current session), device information (from device_name field), and advisory to contact support immediately if the change was not authorized. This alert enables the seller to detect unauthorized password changes quickly and take protective action.\n\nThe endpoint returns a simple success confirmation message without issuing new JWT tokens, as the seller's current session remains valid and authenticated. The seller can continue using their existing access token and refresh token for the current session. All other sessions are invalidated and will receive authentication errors on next API request, prompting re-login with the new password.","parameters":[],"requestBody":{"description":"Current password for verification and new password credentials","typeName":"IShoppingMallSeller.IPasswordChange"},"responseBody":{"description":"Password change success confirmation","typeName":"IShoppingMallSeller.IPasswordChangeResponse"},"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must be authenticated with an active session before they can change their password. The login operation creates the authenticated session that enables password change functionality."}],"accessor":["auth","seller","password","change","changePassword"]},{"specification":"Resend email verification endpoint that generates a new verification token and sends it to the seller's registered email address. This operation handles cases where sellers did not receive the original verification email, the token expired (24-hour lifetime), or the email was accidentally deleted. The endpoint validates the seller exists by email address, checks that email_verified is still false (already verified accounts cannot request new verification emails), generates a new unique email_verification_token, updates email_verification_sent_at to the current timestamp, and triggers the verification email through the notification system. Rate limiting allows maximum 1 verification email resend request per 5 minutes per email address (tracked via email_verification_sent_at timestamp) to prevent abuse and email flooding. The endpoint returns success confirmation indicating the email was sent. This is a public endpoint since unverified sellers may not be able to fully authenticate until email verification is completed. The operation integrates with the email notification system using the seller email verification template containing the verification link with the new token.","authorizationType":null,"name":"resendVerificationEmail","path":"/auth/seller/verification/resend","method":"post","summary":"Resend email verification link to seller","description":"Generates and sends a new email verification token to sellers who did not receive the original verification email or whose token expired. This endpoint supports the seller onboarding workflow by providing a self-service mechanism to complete email verification, which is required before the seller account can be approved by administrators and before full platform access is granted.\n\nThe operation accepts the seller's registered email address and queries the shopping_mall_sellers table to verify the account exists and requires verification. Email verification status is checked by reading the email_verified field - if email_verified is true, the endpoint returns error 'Email address is already verified' since there is no need to resend verification for already-confirmed accounts.\n\nRate limiting enforcement prevents email flooding and abuse by checking the email_verification_sent_at timestamp. The system calculates the time elapsed since the last verification email was sent by comparing email_verification_sent_at against the current timestamp. If less than 5 minutes have passed, the endpoint rejects the request with error 'Please wait before requesting another verification email. You can request a new email in {remaining_minutes} minutes' to enforce the business rule of maximum 1 verification email per 5 minutes.\n\nToken generation creates a new cryptographically secure random verification token (minimum 32 bytes using crypto.randomBytes or equivalent secure random generation) and stores it in the email_verification_token field, overwriting any previous token. The email_verification_sent_at timestamp is updated to the current time, resetting the rate limiting window and tracking when this new verification email was sent. The new token has a 24-hour lifetime from email_verification_sent_at.\n\nAccount status validation ensures the seller account is not in 'banned' status, which would prevent email verification resend. Sellers with account_status of 'pending_approval', 'active', 'suspended', or 'on_hold' can request verification email resend, as email verification is independent of approval status and may be needed at various account lifecycle stages.\n\nEmail notification system integration triggers the seller email verification template with personalized content including the seller's business_name, verification link (typically https://platform.com/seller/verify-email?token={email_verification_token}), token expiration information (24 hours from sending), and onboarding guidance. The email is sent asynchronously to the seller's registered email address (the email field) within 5 minutes of the request.\n\nThe endpoint returns a simple success message 'Verification email sent successfully. Please check your inbox and spam folder' without exposing sensitive account details. No JWT tokens are issued, and no session modifications occur. The seller must complete email verification by clicking the link in the email, which will trigger a separate email verification confirmation endpoint that updates email_verified to true and potentially changes account status if all verification requirements are met.\n\nThis operation is idempotent within the rate limit window - multiple requests with the same email within 5 minutes return rate limit error, but requests spaced more than 5 minutes apart successfully generate new tokens each time, with each new token invalidating the previous one (only the most recent email_verification_token is valid).","parameters":[],"requestBody":{"description":"Seller email address for verification email resend","typeName":"IShoppingMallSeller.IResendVerificationRequest"},"responseBody":{"description":"Verification email resend success confirmation","typeName":"IShoppingMallSeller.IResendVerificationResponse"},"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller account must exist before requesting verification email resend. The registration process creates the seller account with initial email_verified=false and generates the first verification token."}],"accessor":["auth","seller","verification","resend","resendVerificationEmail"]},{"specification":"Email verification confirmation endpoint that validates the verification token and activates the seller's email as verified. This operation completes the email verification workflow by accepting the verification token (from email link), validating the token exists in email_verification_token field and has not expired (email_verification_sent_at + 24 hours > current time), updating email_verified to true, clearing the email_verification_token and email_verification_sent_at fields to prevent token reuse, and returning success confirmation. The endpoint does NOT change the account_status field - sellers remain in pending_approval status until administrator reviews and approves their application, but email verification is a prerequisite for approval. This is a public endpoint since sellers verifying their email are not yet fully authenticated. If the token is invalid or expired, the endpoint returns error directing the seller to request a new verification email. Upon successful verification, the endpoint may optionally issue JWT tokens to allow the seller to access their pending account dashboard, or it may require subsequent login with verified credentials depending on security policy.","authorizationType":null,"name":"verifyEmail","path":"/auth/seller/verification/confirm","method":"post","summary":"Confirm seller email verification using token","description":"Validates the email verification token and marks the seller's email as verified, completing the email verification step of the seller onboarding workflow. This endpoint processes the verification link clicked by the seller in the verification email, updating the seller account to reflect confirmed email ownership and enabling progression toward full account approval.\n\nToken validation queries the shopping_mall_sellers table for a record where email_verification_token matches the provided token. The system verifies the token exists (not null, not empty string), confirming the seller has a pending verification request. If no matching token is found, the endpoint returns error 'Invalid or expired verification token. Please request a new verification email' indicating the token does not correspond to any pending verification.\n\nExpiration validation checks the token age by comparing the current timestamp against email_verification_sent_at (the time when the verification email was sent). Verification tokens have a 24-hour lifetime, so the system validates that (current_time - email_verification_sent_at) < 24 hours. If the token has expired, the endpoint returns error 'Verification link has expired. Please request a new verification email' and directs the seller to use the resend verification email endpoint to generate a fresh token.\n\nEmail verification update sets the email_verified field to true, confirming the seller has access to the registered email address and can receive important platform communications (order notifications, account updates, payment information). The email_verification_token field is cleared (set to null) and email_verification_sent_at is cleared (set to null) to prevent token reuse - each verification token is single-use and cannot be reused after successful verification.\n\nAccount status consideration checks the current account_status field. The endpoint does NOT automatically change account_status from 'pending_approval' to 'active' - email verification is a necessary but not sufficient condition for account activation. Administrator approval of business documents (verified by documents_verified field and approved_by_admin_id foreign key) is still required before account_status transitions to 'active'. However, email verification (email_verified = true) is a prerequisite that admins check before approving seller applications.\n\nTimestamp updates set the updated_at field to the current time, tracking when the email verification occurred. The created_at timestamp remains unchanged. No modifications are made to other authentication-related fields such as password_hash, failed_login_attempts, account_locked_until, or session data.\n\nSuccess response returns a confirmation message 'Email verified successfully. Your account is pending administrator approval' along with the seller's current account_status, email_verified status (now true), and optional guidance on next steps (e.g., 'We will notify you via email once your seller application is reviewed'). The endpoint may optionally issue JWT authentication tokens to allow the seller to access their pending account dashboard and view application status, or it may require the seller to log in separately using the login endpoint - this behavior depends on security policy configuration.\n\nNotification integration sends a confirmation email to the seller acknowledging successful email verification and providing estimated timeline for administrator review (typically 3 business days per business rules). Simultaneously, the system notifies administrators of the newly verified seller account via admin notification dashboard or email, prompting them to review the seller application and uploaded verification documents.","parameters":[],"requestBody":{"description":"Email verification token from the verification link","typeName":"IShoppingMallSeller.IVerifyEmail"},"responseBody":{"description":"Email verification success confirmation with account status","typeName":"IShoppingMallSeller.IVerifyEmailResponse"},"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller account must be created and registered before email verification can be confirmed. The registration process generates the email_verification_token that is validated by this endpoint."}],"accessor":["auth","seller","verification","confirm","verifyEmail"]},{"specification":"Active sessions retrieval endpoint that displays all current authentication sessions for the seller across all devices and browsers. This operation requires seller authentication and returns a list of all active (not revoked) sessions from the shopping_mall_sessions table where seller_id matches the authenticated seller and is_revoked is false. Each session record includes comprehensive device and location information (device_type, device_name, browser_name, operating_system, approximate_location extracted from IP geolocation), session security metadata (ip_address, user_agent, created_at login timestamp, last_activity_at for session age tracking), refresh token expiration (refresh_token_expires_at), and unique session identifier for potential revocation. The endpoint enables sellers to monitor their account security by viewing all active login locations and devices, identifying suspicious sessions from unfamiliar locations or devices, and providing the ability to revoke specific sessions remotely. Sessions are sorted by last_activity_at descending (most recently active first) to highlight current working sessions. The response indicates which session corresponds to the current request (matching refresh token or session ID) so sellers don't accidentally revoke their own active session. This operation integrates with session management security features and supports multi-device usage patterns common in seller workflows (desktop for product management, mobile for order notifications).","authorizationType":null,"name":"listActiveSessions","path":"/auth/seller/sessions","method":"get","summary":"Retrieve all active seller authentication sessions","description":"Returns a comprehensive list of all current authentication sessions for the authenticated seller, enabling security monitoring and multi-device session management. This endpoint provides transparency into where and how the seller's account is currently accessed, supporting security best practices by allowing sellers to identify and revoke suspicious or unauthorized sessions.\n\nAuthentication validation extracts the seller ID from the JWT access token claims (sub or userId claim containing the seller's unique identifier) and verifies the authenticated user has seller role. The endpoint queries the shopping_mall_sessions table for all records where seller_id equals the authenticated seller's ID, user_type equals 'seller', and is_revoked is false (only active, non-revoked sessions are returned).\n\nSession information retrieval fetches comprehensive metadata for each active session including device identification details (device_type indicating mobile, tablet, or desktop; device_name providing user-friendly description like 'Chrome on Windows' or 'Safari on iPhone'; browser_name identifying Chrome, Firefox, Safari, Edge; operating_system showing Windows, macOS, iOS, Android, Linux), location data (ip_address for technical reference, approximate_location providing city and country derived from IP geolocation such as 'New York, US' or 'London, UK'), and temporal information (created_at showing when the session was established via login, last_activity_at indicating most recent authenticated request or token refresh, refresh_token_expires_at showing when the session will automatically expire).\n\nCurrent session identification determines which session in the list corresponds to the request being processed by comparing the refresh token used in the current request (extracted from Authorization header or session cookie) against the refresh_token field of each session record. The matching session is flagged with is_current_session indicator in the response, preventing sellers from accidentally revoking their own active session and providing context for session management decisions.\n\nSession security analysis calculates session age (current_time - created_at), inactivity duration (current_time - last_activity_at), and remaining token lifetime (refresh_token_expires_at - current_time) for each session. Sessions approaching expiration (within 7 days of refresh_token_expires_at) are flagged with expiring_soon indicator, prompting sellers to maintain activity to preserve the session or prepare for re-authentication.\n\nSorting and organization presents sessions ordered by last_activity_at descending, showing the most recently active sessions first. This prioritizes currently-in-use sessions at the top of the list while relegating dormant or forgotten sessions to the bottom. The response groups sessions by device type (mobile sessions, tablet sessions, desktop sessions) for easier visual scanning when sellers have many active sessions.\n\nSecurity indicators highlight suspicious patterns such as sessions from unusual locations (compared to seller's typical login locations stored in login history), sessions from IP addresses flagged in security databases, concurrent sessions from geographically distant locations (physically impossible without VPN or credential sharing), and new device logins that occurred recently (within last 24 hours, flagged for seller awareness).\n\nThe response provides actionable session management by including each session's unique ID, enabling sellers to invoke the session revocation endpoint for specific sessions they want to terminate. The list also indicates which sessions are close to expiration (within 7 days) so sellers can proactively refresh tokens or prepare for re-authentication.\n\nThis endpoint integrates with the platform's security monitoring by logging session list access (who viewed their sessions and when) and potentially triggering security alerts if unusual access patterns are detected (e.g., session list checked immediately before password change from unfamiliar location could indicate account compromise investigation).","parameters":[],"requestBody":null,"responseBody":{"description":"List of all active seller sessions with device and security information","typeName":"IShoppingMallSeller.ISessionList"},"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must have an active authenticated session before they can retrieve the list of their active sessions"}],"accessor":["auth","seller","sessions","listActiveSessions"]},{"specification":"Session revocation endpoint that terminates a specific authentication session, invalidating its refresh token and forcing re-login. This operation requires seller authentication and accepts a session ID parameter to identify which session to revoke. The endpoint validates the session belongs to the authenticated seller (seller_id matches), updates the is_revoked field to true and sets revoked_at timestamp in the shopping_mall_sessions table, effectively invalidating the refresh token and preventing further access token generation for that session. Sellers can use this to remotely log out from specific devices (e.g., 'I lost my phone' or 'I logged in on a public computer and forgot to log out'). The endpoint prevents sellers from revoking their current session by checking if the session ID being revoked matches the session ID of the current request - attempting to revoke the current session returns error 'Cannot revoke current session. Please use logout endpoint instead'. Successfully revoking a session sends a security notification to the seller's email confirming the revocation with device and location details. This operation is part of the multi-device session management security features enabling sellers to maintain control over account access across multiple devices and browsers.","authorizationType":null,"name":"revokeSession","path":"/auth/seller/sessions/{sessionId}","method":"delete","summary":"Revoke specific seller authentication session","description":"Terminates a specific authentication session by invalidating its refresh token, forcing re-login on the associated device or browser. This endpoint provides sellers with granular session management capabilities, enabling remote logout from specific devices for security purposes such as terminating sessions on lost devices, public computers, or suspicious login locations.\n\nAuthentication and ownership validation extracts the seller ID from the JWT access token claims and verifies the authenticated user has seller role. The endpoint receives the sessionId path parameter (UUID from shopping_mall_sessions.id field) and queries the shopping_mall_sessions table to verify the session exists where id equals sessionId, seller_id equals the authenticated seller's ID, and user_type equals 'seller'. If the session is not found or belongs to a different seller, the endpoint returns error 'Session not found or you do not have permission to revoke it' to prevent unauthorized session manipulation.\n\nCurrent session protection prevents sellers from accidentally locking themselves out by revoking their own active session. The system identifies the current session by comparing the sessionId parameter against the session ID associated with the current request's authentication token (determined by matching the refresh token in the request against refresh_token field in shopping_mall_sessions, or by extracting session ID from JWT token claims if embedded). If sessionId matches the current session, the endpoint returns error 'Cannot revoke your current active session. Please use the logout endpoint to end your current session' and blocks the revocation to maintain seller access.\n\nSession revocation updates execute an atomic database transaction on the shopping_mall_sessions table, setting is_revoked to true and revoked_at to the current timestamp for the session where id equals sessionId. This immediately invalidates the session - any subsequent token refresh attempts using that session's refresh_token will fail with authentication error, and any active access tokens from that session will become invalid on next validation (access tokens are short-lived, 30-minute expiration, so impact is near-immediate).\n\nRevoked session cannot be reactivated - session revocation is permanent and irreversible. The seller must log in again on the affected device to create a new session with fresh tokens. The revoked session data is retained in the database for security audit trail purposes with is_revoked marker clearly indicating the session termination.\n\nSecurity notification email is sent to the seller's registered email address confirming the session revocation, including details about the revoked session (device_name like 'Chrome on Windows', approximate_location like 'New York, US', created_at showing when that session was originally established, ip_address for technical reference). The notification also includes advisory 'If you did not initiate this action, your account may be compromised. Please change your password immediately' to alert the seller of potential unauthorized access.\n\nDevice and location information in the notification helps the seller verify the revocation was legitimate (e.g., 'Yes, I revoked my old work laptop session from New York' vs. 'I never logged in from Russia, this is suspicious'). The notification is sent asynchronously within 5 minutes of revocation.\n\nThe endpoint returns a success confirmation message 'Session revoked successfully. The device will be logged out shortly' along with the revoked session's device information for seller confirmation. No tokens are issued or modified for the current session - only the target session identified by sessionId is affected.\n\nThis operation integrates with the session security monitoring system, logging all revocation events with timestamp, initiating seller, revoked session details, and IP address from which revocation was requested. Patterns of frequent session revocations may indicate security issues or account sharing, triggering security alerts for admin investigation.","parameters":[{"name":"sessionId","description":"Unique identifier of the session to revoke","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Session revocation success confirmation with revoked session details","typeName":"IShoppingMallSeller.ISessionRevokeResponse"},"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must have an active authenticated session to perform session revocation operations"}],"accessor":["auth","seller","sessions","revokeSession"]},{"specification":"Logout endpoint that terminates the current seller session and revokes the refresh token. This operation requires seller authentication and immediately invalidates the current session by updating is_revoked to true and setting revoked_at timestamp in the shopping_mall_sessions table for the current session (identified by the refresh token in the request). The endpoint provides sellers with immediate logout functionality, clearing their authentication state and requiring fresh login for subsequent access. Unlike session revocation which targets other sessions, logout specifically terminates the session from which the request originated. The operation returns success confirmation and instructs the client to discard stored access and refresh tokens. After logout, the seller must use the login endpoint to re-authenticate and obtain new tokens. This endpoint is commonly used when sellers finish their work session, switch accounts, or want to log out from the current device for security. The operation logs the logout event in session audit trail and optionally sends confirmation email if logout occurs from unusual location (potential unauthorized access).","authorizationType":null,"name":"logout","path":"/auth/seller/logout","method":"post","summary":"Logout seller from current session","description":"Terminates the seller's current authentication session by revoking the refresh token and invalidating access, requiring fresh login for subsequent platform access. This endpoint provides sellers with immediate logout functionality to end their work session securely, clear authentication state, and ensure their account credentials are not accessible from the current device or browser.\n\nSession identification determines the current session by extracting the refresh token from the request (typically sent in Authorization header as Bearer token or in httpOnly session cookie). The system queries the shopping_mall_sessions table for the record where refresh_token equals the provided token, user_type equals 'seller', and seller_id equals the authenticated seller's ID (from JWT access token claims). If the session is not found or already revoked (is_revoked = true), the endpoint returns error 'Session not found or already logged out'.\n\nAuthentication validation verifies the seller is authenticated with a valid JWT access token before processing logout. While logout conceptually ends authentication, the request itself must be authenticated to prevent unauthorized session termination. The seller ID from the access token must match the seller_id associated with the refresh token's session to ensure sellers can only log out their own sessions.\n\nSession revocation executes an atomic database update on the shopping_mall_sessions table, setting is_revoked to true and revoked_at to the current timestamp for the session where refresh_token matches the request's refresh token. This immediately invalidates the session - the refresh token can no longer be used to generate new access tokens, and the seller is effectively logged out. The last_activity_at timestamp is updated to the current time as the final activity of the session.\n\nToken invalidation guidance instructs the client application to immediately discard all stored authentication credentials including the access token (stored in memory, localStorage, or sessionStorage), the refresh token (stored in httpOnly cookie or secure storage), and any cached seller profile data. The response confirms 'Logged out successfully. Please remove all stored tokens' to ensure client-side cleanup.\n\nCurrent access token remains technically valid until its natural expiration (30 minutes from issuance) since JWT tokens are stateless and cannot be immediately invalidated server-side without token blacklisting infrastructure. However, the revoked refresh token prevents generation of new access tokens, so the seller's session effectively ends within 30 minutes maximum (when current access token expires). For immediate access revocation, the platform may implement optional access token blacklisting checked on each authenticated request.\n\nSecurity audit logging records the logout event with comprehensive details including the seller's ID, email, session metadata (device_name, browser_name, operating_system, approximate_location, ip_address), logout timestamp, and session lifetime (created_at to revoked_at duration). This audit trail supports security monitoring and investigation of unusual account activity.\n\nAnomalous logout detection identifies logout events from unusual locations or devices that differ from the seller's typical login patterns. If logout occurs from an IP address or location inconsistent with the seller's historical logins, the system sends a security notification email to the seller's registered email address alerting them that a logout occurred from an unfamiliar location (e.g., 'Your account was logged out from Paris, France on Chrome/Windows at 2025-10-13 14:30 UTC'). This notification helps sellers detect potential account compromise where an attacker gained access and then logged out to cover tracks.\n\nMulti-session awareness does not affect other active sessions - logout only revokes the specific session associated with the provided refresh token. Sellers logged in on other devices or browsers remain authenticated with their respective sessions until those sessions are individually logged out or revoked. To log out from all devices simultaneously, sellers should use a 'logout from all devices' endpoint (if available) or manually revoke all sessions via the session management interface.\n\nThe endpoint returns a minimal success response with confirmation message and no sensitive data, as the seller is being logged out and should not continue using authentication credentials. Client applications should redirect to login page or public homepage after successful logout.","parameters":[],"requestBody":null,"responseBody":{"description":"Logout success confirmation message","typeName":"IShoppingMallSeller.ILogoutResponse"},"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must have an active authenticated session before they can log out. The logout operation terminates the current session by revoking the refresh token, which requires a valid session to exist first."}],"accessor":["auth","seller","logout"]},{"specification":"This operation enables admin users to register for a new admin account. Since admins cannot self-register per the business requirements, this endpoint allows an existing authenticated admin to create a new admin account for another administrator. The operation collects essential admin information including email, password, full name, and role level (super_admin, order_manager, content_moderator, or support_admin). The new admin account is created with email_verified set to false initially and requires email verification before granting full access. Multi-factor authentication (MFA) is disabled by default but required for super_admin roles. The created_by_admin_id field is populated from the authenticated admin's JWT token to maintain the audit trail of who created each admin account. This operation is critical for expanding the administrative team while maintaining security and accountability through the approval chain.","authorizationType":"join","description":"Creates a new admin account through an existing authenticated administrator. This endpoint implements the admin account creation workflow as specified in the business requirements, where admin accounts cannot be self-registered and must be created by existing admins to maintain security and accountability.\n\nThe operation requires the requesting admin to be authenticated with a valid JWT token. The system extracts the creator admin's ID from the token and populates the created_by_admin_id field to establish the audit trail. This creates a self-referential relationship in the shopping_mall_admins table, tracking which admin created each new admin account.\n\nThe new admin account is initialized with email_verified set to false, requiring the new admin to verify their email before accessing the platform. An email_verification_token is generated and sent to the provided email address. The verification link expires after 24 hours, and the new admin can request a new verification email if needed with rate limiting (1 per 5 minutes).\n\nPassword security is enforced according to platform standards: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. The password is hashed using bcrypt or Argon2 before storage. The password_history field is initialized as an empty JSON array to track future password changes (last 5 passwords stored to prevent reuse).\n\nRole-based permissions are assigned through the role_level field, supporting hierarchical admin roles: super_admin (full platform access, can create other admins), order_manager (order and refund management only), content_moderator (product and review moderation only), and support_admin (customer service and basic operations). The is_active flag is set to true by default, allowing the new admin to log in after email verification.\n\nMulti-factor authentication (mfa_enabled) is set to false initially but should be required for super_admin roles as per security requirements. The mfa_secret field remains null until the admin enables MFA. Failed login attempt tracking fields (failed_login_attempts, failed_login_window_start_at, account_locked_until) are initialized to zero/null to begin tracking login security from the first login attempt.\n\nUpon successful account creation, the system issues JWT access and refresh tokens following the standard authentication flow, allowing the creating admin to continue their session. The response includes the complete admin profile information and authentication tokens, enabling immediate integration into admin workflows.","summary":"Create new admin account (admin role creation via existing admin)","parameters":[],"requestBody":{"description":"New admin account registration information including email, password, full name, and role level","typeName":"IShoppingMallAdmin.ICreate"},"responseBody":{"description":"Created admin account information with authentication tokens","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post","accessor":["auth","admin","join"]},{"specification":"This operation authenticates an existing admin user and issues JWT access and refresh tokens for subsequent API requests. The admin provides their registered email and password. The system validates credentials against the shopping_mall_admins table, verifying the password hash matches using bcrypt comparison. Upon successful authentication, the system generates a JWT access token (expires in 30 minutes) and a refresh token (expires in 30 days). The access token payload includes userId, email, role (admin), role_level (super_admin, order_manager, content_moderator, or support_admin), permissions array, and standard JWT claims (iat, exp, type). A session record is created in shopping_mall_sessions with user_type set to 'admin', storing the refresh token, IP address, user agent, device information, and location data for security monitoring and multi-device session management. The system enforces account security by checking email_verified status, account_status (must be active), and account lockout status. Failed login attempts are tracked with failed_login_attempts counter and failed_login_window_start_at timestamp. After 5 failed attempts within 15 minutes, the account is locked for 30 minutes (account_locked_until). The system updates last_login_at and last_login_ip fields for security auditing. If MFA is enabled for the admin, additional verification is required before token issuance. The response includes complete admin profile data and both tokens for client-side storage and subsequent authenticated API requests.","authorizationType":"login","description":"Authenticates an existing admin user with email and password credentials and issues JWT tokens for API access. This endpoint implements the admin login workflow with comprehensive security measures including account verification, lockout protection, and MFA support.\n\nThe authentication process begins by validating the provided email format and checking if an admin account exists with that email in the shopping_mall_admins table. If no account is found, a generic error is returned to prevent email enumeration attacks: 'Invalid email or password'.\n\nOnce the account is located, the system performs several security checks before password verification. First, it verifies the account_status is 'active' - suspended or inactive admin accounts cannot log in. Second, it checks the email_verified flag is true, ensuring the admin has completed email verification. Unverified admin accounts receive an error: 'Please verify your email address before logging in'.\n\nThe system then checks if the account is currently locked due to previous failed login attempts by examining the account_locked_until timestamp. If the current time is before the lockout expiration, login is denied with the error: 'Your account has been locked due to multiple failed login attempts. Please try again in X minutes or reset your password'.\n\nIf all preliminary checks pass, the system verifies the password by comparing the provided password against the stored password_hash using bcrypt. If the password is incorrect, the system increments the failed_login_attempts counter and updates the failed_login_window_start_at timestamp if this is the first failure in a new 15-minute window. After the 5th failed attempt within a 15-minute window, the account_locked_until field is set to 30 minutes from the current time, locking the account. A security notification email is sent to the admin's email address.\n\nUpon successful password verification, the system resets failed_login_attempts to zero and clears the failed_login_window_start_at timestamp. The last_login_at timestamp is updated to the current time, and last_login_ip is set to the client's IP address for security monitoring.\n\nIf mfa_enabled is true for the admin account, the system requires an additional MFA verification step before issuing tokens. The admin must provide a valid TOTP code generated from their mfa_secret. This adds an extra layer of security, particularly important for super_admin roles.\n\nAfter all authentication and security checks pass, the system generates JWT tokens. The access token includes claims: userId (admin.id), email, role ('admin'), role_level (e.g., 'super_admin'), permissions array based on role_level, iat (issued at), exp (expiration - 30 minutes), and type ('access'). The refresh token includes: userId, tokenId (unique identifier), iat, exp (30 days), and type ('refresh').\n\nA session record is created in shopping_mall_sessions with user_type='admin', admin_id=admin.id, refresh_token, refresh_token_expires_at (30 days from now), ip_address, user_agent, and parsed device information (device_type, device_name, browser_name, operating_system, approximate_location based on IP). This enables multi-device session tracking and management.\n\nThe response returns the admin's complete profile information (id, email, name, role_level, is_active, mfa_enabled, last_login_at) along with the access token and refresh token, enabling the client to store tokens and make authenticated API requests.","summary":"Admin login authentication with credential validation and JWT token issuance","parameters":[],"requestBody":{"description":"Admin login credentials containing email and password","typeName":"IShoppingMallAdmin.ILogin"},"responseBody":{"description":"Admin profile information with JWT access and refresh tokens","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post","accessor":["auth","admin","login"]},{"specification":"This operation refreshes an expired access token using a valid refresh token. When an admin's access token expires (30-minute lifetime), the client can obtain a new access token without requiring re-authentication by providing the refresh token. The system validates the refresh token from the shopping_mall_sessions table where user_type='admin', checking the token signature, expiration (30 days from issuance), and revocation status (is_revoked must be false). If the refresh token is valid and not expired, the system generates a new access token with the same claims structure (userId, email, role, role_level, permissions, iat, exp, type). The refresh token itself is maintained for the full 30-day period unless it expires within 7 days, in which case a new refresh token is also issued. The session's last_activity_at timestamp is updated to track session activity. Sessions automatically expire after 30 days of inactivity based on this timestamp. The operation supports the continuous authentication flow, allowing admins to remain logged in without frequent credential re-entry while maintaining security through short-lived access tokens. If the refresh token is invalid, expired, or revoked, the system returns 401 Unauthorized and the client must redirect the admin to the login page for re-authentication.","authorizationType":"refresh","description":"Refreshes an expired admin access token using a valid refresh token, enabling continuous authentication without requiring credential re-entry. This endpoint implements the JWT token refresh flow for admin users, supporting seamless session continuation while maintaining security through short-lived access tokens.\n\nThe token refresh process begins when the client detects the access token has expired (indicated by 401 responses on authenticated requests or by checking the exp claim). The client sends the refresh token (originally issued during login) to this endpoint. The system validates the refresh token against several security criteria.\n\nFirst, the system queries the shopping_mall_sessions table to find a session record matching the provided refresh_token where user_type='admin'. If no matching session exists, the refresh token is invalid and the request is rejected with 401 Unauthorized.\n\nNext, the system verifies the refresh token signature using the platform's JWT secret key to ensure the token hasn't been tampered with. Invalid signatures result in immediate rejection.\n\nThe system checks the refresh_token_expires_at timestamp to ensure the token hasn't expired. Refresh tokens have a 30-day lifetime from issuance. If the current time exceeds the expiration timestamp, the token is expired and the request is rejected with 401 Unauthorized. The client must redirect the admin to the login page for re-authentication.\n\nThe system verifies the is_revoked flag is false. Revoked refresh tokens cannot be used for token refresh. Tokens are revoked when the admin logs out, changes their password, or manually terminates the session. Revoked tokens result in 401 Unauthorized.\n\nIf all validation checks pass, the system retrieves the admin account details from shopping_mall_admins using the admin_id from the session record. The system verifies the admin account is still active (is_active=true) and the account_status is 'active'. Suspended or inactive admin accounts cannot refresh tokens.\n\nA new access token is generated with the same claims structure as the original login: userId (admin.id), email (admin.email), role ('admin'), role_level (admin.role_level), permissions array derived from role_level, iat (current timestamp), exp (30 minutes from now), and type ('access').\n\nThe system evaluates if the refresh token itself needs renewal. If the refresh_token_expires_at is within 7 days of the current time, a new refresh token is generated with a fresh 30-day expiration period. The shopping_mall_sessions record is updated with the new refresh token and expiration timestamp. This sliding expiration window ensures active sessions remain valid without requiring login, while inactive sessions naturally expire.\n\nThe session's last_activity_at timestamp is updated to the current time, tracking session usage for the 30-day inactivity timeout rule. Sessions with last_activity_at older than 30 days are considered expired even if the refresh token hasn't reached its expiration timestamp.\n\nThe response returns the new access token and, if renewed, the new refresh token. If the refresh token was not renewed, the response includes only the new access token, and the client continues using the existing refresh token. This enables the client to retry the original API request that triggered the token refresh flow.\n\nIf the refresh token is invalid, expired, or revoked, the system returns 401 Unauthorized with error code AUTH_TOKEN_EXPIRED or AUTH_INVALID_TOKEN, signaling the client to redirect the admin to the login page.","summary":"Refresh expired admin access token using valid refresh token","parameters":[],"requestBody":{"description":"Refresh token for generating new access token","typeName":"IShoppingMallAdmin.IRefresh"},"responseBody":{"description":"New access token and optionally renewed refresh token","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post","accessor":["auth","admin","refresh"]},{"specification":"This operation allows an admin to initiate a password reset by requesting a password reset token. The admin provides their registered email address. The system verifies an admin account exists with that email in the shopping_mall_admins table. If the account exists, the system generates a cryptographically secure random password reset token (at least 32 bytes), stores it in the password_reset_token field, and sets password_reset_expires_at to 1 hour from the current time. A password reset email is sent to the admin's email address containing a secure link with the token. The email includes instructions for completing the password reset. For security, the system returns a generic success message regardless of whether the email exists, preventing email enumeration attacks. Rate limiting is enforced: maximum 3 password reset requests per hour per email address. If the limit is exceeded, the request is rejected. The password reset token can be used only once and is invalidated after successful password reset or when it expires after 1 hour.","authorizationType":null,"description":"Initiates the admin password reset workflow by generating a secure reset token and sending reset instructions via email. This endpoint implements the account recovery process for admin users who have forgotten their password or need to reset it for security reasons.\n\nThe password reset request process begins when an admin provides their registered email address. The system validates the email format to ensure it's a properly structured email address. If the format is invalid, the request is rejected with a validation error.\n\nThe system queries the shopping_mall_admins table to check if an admin account exists with the provided email address. For security reasons, the system returns the same generic success message whether or not the email exists: 'If an account exists with this email, you will receive password reset instructions.' This prevents attackers from using the endpoint to enumerate valid admin email addresses.\n\nIf an admin account is found with the provided email, the system implements rate limiting to prevent abuse. It checks if the admin has requested password resets recently by examining the email_verification_sent_at timestamp (which is reused for tracking reset request timing). If the admin has already requested 3 password resets within the last hour, the request is denied (though the generic success message is still returned to prevent enumeration).\n\nThe system generates a cryptographically secure random token of at least 32 bytes (256 bits) using a secure random number generator. This token serves as the password_reset_token and is stored in the admin's record. The password_reset_expires_at field is set to exactly 1 hour from the current timestamp, enforcing the 1-hour expiration window specified in the business requirements.\n\nA password reset email is sent to the admin's email address using the platform's email notification system. The email contains a secure reset link in the format: https://platform.com/auth/admin/reset-password?token=[password_reset_token]. The email also includes security information explaining that if the admin did not request this reset, they should ignore the email and contact support if they have concerns.\n\nThe password_reset_token can be used only once. After successful password reset (via a separate endpoint), the token is cleared (set to null) to prevent reuse. If the admin doesn't use the token within 1 hour, it expires and a new reset request is required.\n\nThe system logs all password reset requests with timestamp, IP address, and email for security auditing and fraud detection. Multiple reset requests from unusual IP addresses or patterns trigger security alerts for investigation.\n\nThe response returns a generic success message and does not reveal whether the email address corresponds to an actual admin account, maintaining security against email enumeration attacks.","summary":"Request admin password reset token and email","parameters":[],"requestBody":{"description":"Email address for admin account password reset","typeName":"IShoppingMallAdmin.IPasswordResetRequest"},"responseBody":{"description":"Generic success confirmation message","typeName":"IShoppingMallAdmin.IPasswordResetRequestResponse"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/admin/password/reset/request","method":"post","accessor":["auth","admin","password","reset","request","requestPasswordReset"]},{"specification":"This operation completes the admin password reset process by accepting a valid reset token and a new password. The admin provides the password_reset_token received via email and a new password meeting all security requirements. The system validates the token exists in the shopping_mall_admins table, checks it hasn't expired (password_reset_expires_at must be in the future), and verifies the token hasn't been used already. The new password is validated against platform security policies: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. The system also checks the new password against the password_history JSON array to ensure it doesn't match any of the last 5 passwords. If all validations pass, the system hashes the new password using bcrypt or Argon2, updates the password_hash field, clears the password_reset_token and password_reset_expires_at fields, updates password_changed_at to the current timestamp, and adds the new password hash to the password_history array (maintaining only the last 5 entries). All existing sessions for this admin are invalidated by setting is_revoked=true in shopping_mall_sessions (except optionally the current session if the request is authenticated). A confirmation email is sent to the admin notifying them of the successful password change. This operation provides secure account recovery while maintaining password security standards and session integrity.","authorizationType":null,"description":"Completes the admin password reset process by validating the reset token and updating the password. This endpoint implements the final step of the account recovery workflow, enforcing password security policies and invalidating existing sessions for security.\n\nThe password reset completion process begins when an admin clicks the reset link in their email and submits the password_reset_token along with their new desired password. The system first validates that both the token and new password are provided in the request.\n\nToken validation involves querying the shopping_mall_admins table for an account with the provided password_reset_token. If no matching token is found, the request is rejected with error: 'Password reset link is invalid or has expired' (AUTH_RESET_TOKEN_INVALID). This generic message is used whether the token doesn't exist or has already been used, preventing token enumeration.\n\nThe system checks the password_reset_expires_at timestamp to ensure the token hasn't expired. Tokens are valid for exactly 1 hour from issuance. If the current time is after the expiration timestamp, the token is expired and the request is rejected with the same error message. The admin must request a new password reset token.\n\nOnce the token is confirmed valid and not expired, the system validates the new password against comprehensive security requirements. The password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character from the set (@, $, !, %, *, ?, &, #). If any requirement is not met, specific validation errors are returned indicating which requirements failed.\n\nThe system retrieves the admin's password_history JSON array and validates the new password hash doesn't match any of the last 5 password hashes stored in the history. This prevents password reuse as specified in the business requirements. If the new password matches a recent password, the request is rejected with error: 'Password cannot be the same as any of your last 5 passwords'.\n\nThe new password is hashed using bcrypt with a cost factor of 12 or Argon2 to generate a secure password_hash. The system updates the admin record: password_hash is set to the new hash, password_reset_token and password_reset_expires_at are cleared (set to null) to invalidate the token, password_changed_at is updated to the current timestamp for security auditing.\n\nThe new password hash is added to the password_history JSON array. If the array already contains 5 entries (the maximum), the oldest entry is removed before adding the new one, maintaining a rolling history of the last 5 passwords.\n\nFor security, all existing sessions for this admin are invalidated to prevent unauthorized access using old session tokens. The system updates all records in shopping_mall_sessions where admin_id matches the admin's ID and user_type='admin', setting is_revoked=true and revoked_at=current timestamp. This forces the admin to log in again on all devices using the new password.\n\nA confirmation email is sent to the admin's email address notifying them that their password was successfully changed, including the timestamp and IP address from which the change was made. If the admin did not initiate the change, they are instructed to contact support immediately.\n\nThe response returns a success confirmation message indicating the password has been updated and the admin should log in with the new password.","summary":"Complete admin password reset with token validation and session invalidation","parameters":[],"requestBody":{"description":"Password reset token and new password meeting security requirements","typeName":"IShoppingMallAdmin.IPasswordReset"},"responseBody":{"description":"Password reset success confirmation","typeName":"IShoppingMallAdmin.IPasswordResetResponse"},"authorizationRole":null,"name":"resetPassword","prerequisites":[{"endpoint":{"path":"/auth/admin/password/reset/request","method":"post"},"description":"Admin must first request a password reset to receive a valid password_reset_token via email before completing the password reset process"}],"path":"/auth/admin/password/reset/complete","method":"post","accessor":["auth","admin","password","reset","complete","resetPassword"]},{"specification":"This operation allows an authenticated admin to change their current password by providing both the old password for verification and a new password meeting security requirements. The admin must be authenticated with a valid JWT token. The system extracts the admin's ID from the token and retrieves the admin record from shopping_mall_admins. The old password is verified by comparing it against the stored password_hash using bcrypt. If the old password is incorrect, the request is rejected. The new password is validated against all security policies: minimum 8 characters, uppercase, lowercase, number, special character, and not matching any of the last 5 passwords from password_history. If validation passes, the new password is hashed and the password_hash is updated. The password_changed_at timestamp is set to the current time. The new password hash is added to the password_history JSON array (maintaining last 5 entries). All existing sessions except the current one are invalidated by setting is_revoked=true in shopping_mall_sessions for this admin. A confirmation email is sent notifying the admin of the password change. This operation provides secure password management for admins who want to update their credentials proactively.","authorizationType":null,"description":"Enables authenticated admin users to change their password by verifying the current password and setting a new one. This endpoint implements the password change workflow for admins who want to update their credentials proactively for security reasons, requiring current password verification to prevent unauthorized password changes.\n\nThe password change process requires the admin to be authenticated with a valid JWT access token. The system extracts the admin's userId from the JWT token payload and uses it to retrieve the admin's full record from the shopping_mall_admins table.\n\nThe admin must provide their current password for verification as a security measure, preventing unauthorized password changes if someone gains temporary access to an authenticated session. The system compares the provided current password against the stored password_hash using bcrypt comparison. If the current password is incorrect, the request is rejected with error: 'Current password is incorrect' (AUTH_INVALID_CREDENTIALS).\n\nOnce the current password is verified, the system validates the new password against comprehensive security requirements. The new password must meet all complexity rules: minimum 8 characters, at least one uppercase letter, one lowercase letter, one digit, and one special character from the set (@, $, !, %, *, ?, &, #). Additionally, the new password cannot be the same as the current password - this is checked by comparing the new password against the current password_hash. If the passwords match, the request is rejected with error: 'New password must be different from current password'.\n\nThe system retrieves the password_history JSON array from the admin record and validates the new password hash doesn't match any of the last 5 password hashes. This enforces the password reuse prevention policy. If the new password matches any recent password, the request is rejected with error: 'Password cannot be the same as any of your last 5 passwords'.\n\nThe new password is hashed using bcrypt with cost factor 12 or Argon2 to generate a secure password_hash. The admin record is updated: password_hash is set to the new hash, password_changed_at is updated to the current timestamp for security auditing and password age tracking.\n\nThe new password hash is prepended to the password_history JSON array. If the array already contains 5 entries, the oldest entry is removed, maintaining a rolling history of the last 5 passwords. The updated array is serialized and stored in the password_history field.\n\nFor security, all existing sessions for this admin are invalidated EXCEPT the current session used to make this request. The system updates all shopping_mall_sessions records where admin_id matches and user_type='admin' and the session is not the current one, setting is_revoked=true and revoked_at=current timestamp. This forces re-authentication on all other devices while allowing the current session to continue.\n\nA security notification email is sent to the admin's email address confirming the password was changed, including the timestamp, IP address, and device information from the current session. The email includes a warning: 'If you did not make this change, please contact support immediately' to alert the admin of potential unauthorized access.\n\nThe response returns a success confirmation message indicating the password has been updated and other sessions have been terminated.","summary":"Change admin password with current password verification","parameters":[],"requestBody":{"description":"Current password verification and new password","typeName":"IShoppingMallAdmin.IPasswordChange"},"responseBody":{"description":"Password change success confirmation","typeName":"IShoppingMallAdmin.IPasswordChangeResponse"},"authorizationRole":"admin","name":"changePassword","prerequisites":[],"path":"/auth/admin/password/change","method":"post","accessor":["auth","admin","password","change","changePassword"]},{"specification":"This operation terminates the admin's current authenticated session by revoking the refresh token. The admin must be authenticated with a valid JWT access token. The system extracts the admin's ID from the token and identifies the current session in shopping_mall_sessions where user_type='admin' and admin_id matches. The session record is updated by setting is_revoked=true and revoked_at to the current timestamp. This prevents the refresh token from being used to generate new access tokens. The client must discard both the access token and refresh token from local storage. After logout, the admin must log in again to access the platform. This operation provides standard logout functionality while maintaining session audit trails. The system supports 'logout from all devices' through a separate endpoint that revokes all sessions for the admin.","authorizationType":null,"description":"Terminates the admin's current authenticated session by revoking the associated refresh token. This endpoint implements the logout workflow for admin users, invalidating the current session while preserving the session record for security auditing and activity tracking.\n\nThe logout process requires the admin to be authenticated with a valid JWT access token. The system extracts the admin's userId from the JWT token payload to identify which admin is logging out. Additionally, the client should provide the refresh token in the request to identify the specific session to terminate (supporting multi-device scenarios where an admin might be logged in on multiple devices).\n\nThe system queries the shopping_mall_sessions table to find the session record matching the provided refresh_token where user_type='admin' and admin_id matches the authenticated admin's ID. If the session is not found or doesn't belong to the authenticated admin, the request is rejected with 403 Forbidden.\n\nOnce the session is identified, the system updates the session record to mark it as revoked: is_revoked is set to true, and revoked_at is set to the current timestamp. This prevents the refresh token from being used to generate new access tokens in the future. The session record is retained in the database for security auditing, activity tracking, and compliance purposes.\n\nThe last_activity_at timestamp is updated to the current time to accurately reflect when the logout occurred, completing the session activity timeline.\n\nThe client is instructed to immediately discard both the access token and refresh token from local storage (localStorage, sessionStorage, or cookies). The access token will be rejected on subsequent API requests due to the revoked session, and the refresh token can no longer generate new access tokens.\n\nAfter logout completes, the admin must go through the full login process again to access the platform, providing email and password credentials. This ensures security by requiring credential verification for new sessions.\n\nThe system logs the logout event in the session audit trail, recording the timestamp, IP address, and reason (user-initiated logout) for security monitoring and compliance.\n\nIf the admin wants to logout from ALL devices (terminate all active sessions), they should use the 'logout from all devices' endpoint instead. The single logout endpoint affects only the current session identified by the provided refresh token.\n\nThe response returns a success confirmation message indicating the logout was completed and the session has been terminated.","summary":"Logout admin user and revoke current session refresh token","parameters":[],"requestBody":{"description":"Refresh token of the session to terminate","typeName":"IShoppingMallAdmin.ILogout"},"responseBody":{"description":"Logout success confirmation","typeName":"IShoppingMallAdmin.ILogoutResponse"},"authorizationRole":"admin","name":"logout","prerequisites":[],"path":"/auth/admin/logout","method":"post","accessor":["auth","admin","logout"]},{"specification":"This operation allows an authenticated admin to retrieve all active sessions associated with their account across multiple devices. The admin must be authenticated with a valid JWT access token. The system extracts the admin's ID from the token and queries the shopping_mall_sessions table for all session records where user_type='admin', admin_id matches, and is_revoked=false. Each session record contains information about the device, browser, operating system, IP address, approximate location, and activity timestamps. The response provides a list of all active sessions, enabling the admin to review where they are currently logged in and identify any suspicious or unauthorized sessions. This supports the multi-device session management requirement, allowing admins to monitor their account security. Each session in the response includes the session ID, device information, login timestamp, last activity timestamp, and current location, helping admins identify and manage their sessions across different devices.","authorizationType":null,"description":"Retrieves all active sessions for the authenticated admin user, providing visibility into login activity across multiple devices. This endpoint implements the multi-device session management feature, enabling admins to monitor where they are logged in and identify potentially unauthorized access.\n\nThe session listing process requires the admin to be authenticated with a valid JWT access token. The system extracts the admin's userId from the token payload to identify which admin's sessions to retrieve.\n\nThe system queries the shopping_mall_sessions table for all session records matching the following criteria: user_type='admin', admin_id equals the authenticated admin's ID, and is_revoked=false (only active, non-revoked sessions). The query results are ordered by last_activity_at descending, showing the most recently active sessions first.\n\nFor each session record retrieved, the system constructs a detailed session information object containing device and activity data. This includes the session ID (unique identifier for session management actions), refresh_token_expires_at (when the session will expire), ip_address (IP from which the session originated), device_type (mobile, tablet, or desktop), device_name (user-friendly description like 'Chrome on Windows'), browser_name (Chrome, Firefox, Safari), operating_system (Windows, macOS, iOS, Android, Linux), approximate_location (city and country based on IP geolocation), created_at (when the admin logged in to create this session), and last_activity_at (most recent token refresh or important action).\n\nThe system identifies the current session (the one associated with the access token making this request) and marks it with an is_current=true flag in the response, helping the admin distinguish their current device from other logged-in devices.\n\nEach session object includes security-relevant information enabling the admin to make informed decisions about session management. For example, if the admin sees a session from an unfamiliar location or device, they can identify it as potentially unauthorized and revoke it using the session management endpoint.\n\nThe response provides session count information (total active sessions) along with the detailed session list. This gives the admin an overview of their account's login footprint across devices.\n\nSessions that have expired (refresh_token_expires_at is in the past) are automatically excluded from the active sessions list, though they remain in the database for audit purposes.\n\nThe system supports pagination if an admin has a large number of active sessions (unlikely but supported for completeness). The default page size is 50 sessions, which accommodates most usage patterns.\n\nThis endpoint does not include revoked or expired sessions - only currently active sessions that could be used for API access are displayed. Admins reviewing their login history for security auditing can access a separate endpoint for complete session history including revoked and expired sessions.\n\nThe response returns an array of session objects with comprehensive device and activity information, enabling the admin to monitor and manage their account security effectively.","summary":"List all active sessions for authenticated admin across devices","parameters":[],"requestBody":null,"responseBody":{"description":"List of active admin sessions with device and activity information","typeName":"IShoppingMallAdmin.ISessionList"},"authorizationRole":"admin","name":"listSessions","prerequisites":[],"path":"/auth/admin/sessions","method":"get","accessor":["auth","admin","sessions","listSessions"]},{"specification":"This operation allows an authenticated admin to revoke a specific session by providing the session ID. The admin must be authenticated with a valid JWT access token. The system extracts the admin's ID from the token and validates the session_id parameter refers to a session owned by this admin (user_type='admin' and admin_id matches). If the session belongs to the admin, the system updates the shopping_mall_sessions record by setting is_revoked=true and revoked_at to the current timestamp. This immediately invalidates the refresh token associated with that session, preventing it from generating new access tokens. This operation supports the multi-device session management requirement, enabling admins to remotely terminate sessions from specific devices (e.g., if they lose a device or suspect unauthorized access). The admin can retrieve session IDs from the 'list all sessions' endpoint and then revoke specific sessions individually. The current session (the one making this request) can also be revoked, effectively logging the admin out of the current device.","authorizationType":null,"description":"Revokes a specific admin session by session ID, enabling remote logout from individual devices. This endpoint implements the multi-device session management feature, allowing admins to terminate sessions on specific devices without affecting other logged-in sessions.\n\nThe session revocation process requires the admin to be authenticated with a valid JWT access token. The system extracts the admin's userId from the token payload to verify ownership of the session being revoked.\n\nThe admin provides a session_id parameter identifying which session to terminate. This session ID is obtained from the 'list all sessions' endpoint, which displays all active sessions with their unique identifiers.\n\nThe system queries the shopping_mall_sessions table to retrieve the session record matching the provided session_id. Several validation checks are performed before allowing revocation.\n\nFirst, the system verifies the session exists. If no session is found with the provided ID, the request is rejected with error: 'Session not found' (404 Not Found).\n\nSecond, the system verifies the session belongs to the authenticated admin by checking user_type='admin' and admin_id equals the admin's ID from the JWT token. If the session belongs to a different user, the request is rejected with error: 'You do not have permission to revoke this session' (403 Forbidden). This prevents admins from revoking each other's sessions.\n\nThird, the system checks if the session is already revoked by examining the is_revoked flag. If is_revoked is already true, the request is rejected with error: 'This session has already been revoked' (400 Bad Request), as there's no need to revoke an already-terminated session.\n\nIf all validation checks pass, the system updates the session record: is_revoked is set to true, and revoked_at is set to the current timestamp. This marks the session as terminated and records exactly when the revocation occurred for audit purposes.\n\nThe revoked refresh token can no longer be used to generate new access tokens. Any attempt to use the revoked refresh token on the token refresh endpoint will result in 401 Unauthorized with error code AUTH_INVALID_TOKEN.\n\nIf the session being revoked is the current session (the one making this request), the admin effectively logs themselves out from the current device. The response is successfully returned before the session becomes invalid, and subsequent API requests from this device will fail authentication.\n\nIf the session being revoked is a different session (another device), the current session remains active and unaffected. The admin stays logged in on the current device but the specified session is terminated. The other device will be forced to re-authenticate on its next API request or token refresh attempt.\n\nA security notification email is sent to the admin's email address informing them that a session was revoked, including device information and timestamp of the revoked session. This provides transparency and alerts the admin if sessions are revoked without their knowledge.\n\nThe system logs the session revocation event in the audit trail, recording which admin performed the revocation, which session was revoked, the timestamp, and the IP address from which the revocation was initiated.\n\nThe response returns a success confirmation message indicating the session has been revoked, along with device information about the terminated session for the admin's reference.","summary":"Revoke specific admin session by ID for remote device logout","parameters":[{"name":"sessionId","description":"Unique identifier of the session to revoke","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Session revocation success confirmation with revoked session details","typeName":"IShoppingMallAdmin.ISessionRevokeResponse"},"authorizationRole":"admin","name":"revokeSession","prerequisites":[],"path":"/auth/admin/sessions/{sessionId}","method":"delete","accessor":["auth","admin","sessions","revokeSession"]},{"specification":"This operation allows an authenticated admin to terminate all active sessions across all devices simultaneously, providing a complete logout from all locations. The admin must be authenticated with a valid JWT access token. The system extracts the admin's ID from the token and updates all session records in shopping_mall_sessions where user_type='admin', admin_id matches, and is_revoked=false, setting is_revoked=true and revoked_at to the current timestamp. This invalidates all refresh tokens for the admin, forcing re-authentication on all devices. This operation is useful when an admin suspects their account may be compromised, wants to ensure all old sessions are terminated, or is changing security settings. A confirmation email is sent listing all devices from which sessions were terminated. After this operation completes, the admin must log in again on all devices, including the device that initiated the logout. This provides a comprehensive security reset for the admin account.","authorizationType":null,"description":"Terminates all active sessions for the authenticated admin across all devices, forcing re-authentication everywhere. This endpoint implements the 'logout from all devices' security feature, enabling admins to completely reset their account's login state in case of security concerns or when changing critical account settings.\n\nThe logout from all devices process requires the admin to be authenticated with a valid JWT access token. The system extracts the admin's userId from the token payload to identify which admin's sessions to revoke.\n\nThis operation is typically used in the following scenarios: the admin suspects their account may have been compromised and wants to terminate all access immediately, the admin is changing their password and wants to ensure all devices re-authenticate with the new password, the admin sees unfamiliar sessions in their active sessions list and wants to terminate everything as a precaution, or the admin is completing a security review and wants to ensure only currently authorized devices have access.\n\nThe system queries the shopping_mall_sessions table for all session records matching the following criteria: user_type='admin', admin_id equals the authenticated admin's ID, and is_revoked=false (only active sessions). This query identifies all currently valid sessions across all devices.\n\nFor each active session found, the system updates the session record: is_revoked is set to true, and revoked_at is set to the current timestamp. This marks every session as terminated simultaneously.\n\nUnlike the single session revocation endpoint, this operation revokes ALL sessions INCLUDING the current session making the request. This means the admin who initiates this operation will also be logged out from their current device immediately after the response is returned.\n\nAll revoked refresh tokens can no longer be used to generate new access tokens. Any device attempting to use a revoked refresh token will receive 401 Unauthorized with error code AUTH_INVALID_TOKEN, forcing the user to log in again.\n\nThe system counts how many sessions were revoked (typically ranges from 1 to 10+ for admins who log in from multiple devices frequently). This count is included in the response to inform the admin how many sessions were terminated.\n\nA security notification email is sent to the admin's email address confirming that all sessions were revoked. The email includes a list of all terminated sessions with device information (device_name, browser_name, operating_system, approximate_location, last_activity_at) so the admin can review which devices were logged out. The email emphasizes: 'If you did not initiate this action, your account may be compromised. Please contact support immediately and change your password.'\n\nThe system logs the logout from all devices event in the security audit trail, recording the admin who initiated it, timestamp, IP address, and count of sessions revoked. This provides accountability and traceability for security actions.\n\nAfter this operation completes successfully, the admin must log in again on ALL devices to regain access to the platform. The client application should redirect to the login page immediately after receiving the response, clearing all stored tokens.\n\nThe response returns a success confirmation message indicating all sessions have been revoked, the count of terminated sessions, and instructions to log in again.","summary":"Revoke all admin sessions across all devices for complete logout","parameters":[],"requestBody":null,"responseBody":{"description":"All sessions revocation confirmation with count of terminated sessions","typeName":"IShoppingMallAdmin.IRevokeAllSessionsResponse"},"authorizationRole":"admin","name":"revokeAllSessions","prerequisites":[],"path":"/auth/admin/sessions/all","method":"delete","accessor":["auth","admin","sessions","all","revokeAllSessions"]},{"specification":"This operation retrieves a filtered and paginated list of platform-wide system configuration entries. It operates on the shopping_mall_system_configs table which stores key-value pairs for system-wide settings including feature toggles, business thresholds, default values, and platform behavior controls. The operation supports complex search, filtering by category, data type, and editability status, as well as sorting by various fields. This is a read-only operation that does not modify configuration values but provides comprehensive query capabilities for administrators to review and manage platform settings.","path":"/shoppingMall/admin/systemConfigs","method":"patch","summary":"Search and retrieve filtered, paginated list of platform system configuration entries","description":"Retrieve a filtered and paginated list of platform-wide system configuration entries from the shopping_mall_system_configs table. This operation provides advanced search capabilities for finding configuration settings based on multiple criteria including config key patterns, categories, data types, and editability status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Administrators can sort by configuration key, category, data type, or creation date in ascending or descending order to organize settings logically.\n\nSecurity considerations include restricting this operation to authenticated administrators only, as system configurations contain sensitive platform parameters. The operation provides read-only access to configuration metadata and values, enabling administrators to review settings before making modifications through dedicated update endpoints.\n\nThis operation integrates with the shopping_mall_system_configs table as defined in the Prisma schema, returning all configuration fields including config_key, config_value, data_type, description, category, is_editable, created_at, and updated_at. The response is optimized for admin dashboard display, providing complete configuration information for management and auditing purposes.\n\nRelated API operations that might be used together include retrieving individual configuration details by ID (GET /systemConfigs/{configId}) for viewing specific settings, and update operations for modifying editable configuration values.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for system configuration filtering, including optional filters for category, data type, editability status, and keyword search on config keys or descriptions","typeName":"IShoppingMallSystemConfig.IRequest"},"responseBody":{"description":"Paginated list of system configuration entries matching search criteria, with complete configuration details including keys, values, types, descriptions, and editability status","typeName":"IPageIShoppingMallSystemConfig"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[],"accessor":["shoppingMall","admin","systemConfigs","index"]},{"specification":"This operation retrieves detailed information for a single platform system configuration entry identified by its unique ID. It operates on the shopping_mall_system_configs table which stores centralized configuration management for the entire e-commerce platform. The operation returns complete configuration details including the config key, current value, data type, description, category classification, and editability status. This is essential for administrators to review specific configuration settings before making changes or to understand the current platform behavior parameters.","path":"/shoppingMall/admin/systemConfigs/{configId}","method":"get","summary":"Retrieve detailed information for a specific system configuration entry by ID","description":"Retrieve comprehensive details for a single platform system configuration entry from the shopping_mall_system_configs table, specified by its unique configuration ID. This operation provides complete information about a specific configuration setting, including its key identifier, current value, data type classification, human-readable description, category grouping, and whether the setting can be modified through the admin interface.\n\nThe operation is essential for administrators who need to review the details of a specific configuration parameter before making modifications. It provides visibility into system-critical settings that control platform behavior, business rules, commission rates, operational thresholds, and feature toggles.\n\nSecurity considerations include restricting access to authenticated administrators only, as configuration data contains sensitive platform parameters that should not be exposed to regular users or sellers. The operation enforces role-based access control ensuring only users with admin privileges can view system configuration details.\n\nThis operation integrates with the shopping_mall_system_configs table as defined in the Prisma schema, returning all configuration fields including config_key (unique identifier using dot notation), config_value (stored as string), data_type (string, integer, decimal, boolean, json), description (explaining the setting's purpose), category (grouping related settings), is_editable (whether modifiable through admin UI), created_at, and updated_at timestamps.\n\nThe response provides administrators with complete context about the configuration setting, enabling informed decision-making when adjusting platform parameters. Related operations include searching configurations (PATCH /systemConfigs) to find settings by category or keyword, and update operations for modifying editable configuration values.\n\nTypical use cases include reviewing commission rate settings before adjustments, checking feature toggle states, verifying threshold values for business rules, and auditing configuration changes through timestamp tracking.","parameters":[{"name":"configId","description":"Unique identifier of the target system configuration entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete system configuration entry details including config key, value, data type, description, category, editability status, and timestamps","typeName":"IShoppingMallSystemConfig"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/systemConfigs","method":"post"},"description":"System configuration entry must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","admin","systemConfigs","at"]},{"specification":"This operation creates a new global platform configuration setting. It operates on the shopping_mall_system_configs table, which stores key-value pairs for system-wide settings including feature toggles, business thresholds, default values, and platform behavior controls. The configuration system provides centralized management of platform parameters that affect the entire e-commerce marketplace, such as commission rates, order cancellation windows, notification settings, and operational limits. Configurations are categorized and can be marked as editable or non-editable to prevent accidental modification of critical system settings. This operation is restricted to administrators who need to add new configuration parameters or adjust existing system behavior through the admin dashboard.","path":"/shoppingMall/admin/systemConfigs","method":"post","summary":"Create a new platform configuration setting","description":"Creates a new global configuration setting in the shopping_mall_system_configs table for system-wide parameter management. This operation enables administrators to add new configuration entries that control platform behavior, business rules, feature toggles, and operational thresholds.\n\nThe configuration system uses a key-value pattern with dot notation for keys (e.g., 'platform.commission.default_rate', 'order.cancellation.window_hours'), allowing flexible and hierarchical organization of settings. Each configuration includes a data type indicator to guide proper value parsing, a human-readable description for administrative clarity, and a category for grouping related settings.\n\nConfigurations can be marked as editable or non-editable. System-critical configurations should be set as non-editable to prevent accidental changes that could destabilize the platform. Editable configurations can be modified through the admin interface for operational flexibility.\n\nThis operation is essential for platform configuration management, enabling administrators to customize business logic, adjust operational parameters, and control platform features without requiring code deployments. All configuration changes are tracked with timestamps for audit purposes.\n\nSecurity considerations: Only administrators with super_admin role should have access to create system configurations, as these settings directly affect platform behavior and business operations. Input validation ensures config_key uniqueness, data_type validity, and proper category assignment.","parameters":[],"requestBody":{"description":"Configuration setting data including key, value, data type, description, category, and editability flag","typeName":"IShoppingMallSystemConfig.ICreate"},"responseBody":{"description":"Created configuration setting with generated ID and timestamps","typeName":"IShoppingMallSystemConfig"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[],"accessor":["shoppingMall","admin","systemConfigs","create"]},{"specification":"This operation updates an existing platform configuration setting. It operates on the shopping_mall_system_configs table, allowing administrators to modify configuration values that control system-wide behavior. The operation identifies the specific configuration by its unique identifier (configId path parameter) and updates modifiable fields while preserving system integrity. Only configurations marked as is_editable=true should be modifiable through this operation to protect critical system settings. The update operation maintains audit trail through updated_at timestamp and enables administrators to adjust business rules, operational thresholds, and platform behavior without code changes. This is a critical administrative function for platform governance and operational flexibility.","path":"/shoppingMall/admin/systemConfigs/{configId}","method":"put","summary":"Update an existing platform configuration setting","description":"Updates an existing global configuration setting identified by the configId path parameter in the shopping_mall_system_configs table. This operation enables administrators to modify configuration values, descriptions, and editability status for system-wide parameters that control platform behavior.\n\nThe update operation should validate that the configuration exists and is editable before applying changes. System-critical configurations marked with is_editable=false should be protected from modification unless explicitly overridden by super administrators with additional security checks. This protection prevents accidental changes to fundamental platform parameters that could cause operational issues.\n\nAdministrators can update the config_value to adjust business thresholds (e.g., changing commission rates, timeout periods, or inventory thresholds), modify the description to improve administrative documentation, or change the is_editable flag to lock or unlock configurations. The data_type field helps ensure that updated values are parsed correctly by the application layer (string, integer, decimal, boolean, or json).\n\nAll configuration updates are tracked with the updated_at timestamp, providing a complete audit trail of when settings were changed. For enhanced auditability, the platform should log configuration changes with the admin user who made the modification and the previous value for rollback capability.\n\nSecurity considerations: This operation must be restricted to administrators with appropriate permissions (super_admin for critical settings, potentially lower admin roles for non-critical operational parameters). Validation should ensure config_key uniqueness is preserved if the key is being modified, data_type remains valid, and category assignments are appropriate.\n\nIntegration with other systems: Configuration changes may affect real-time platform behavior, so the application layer should implement configuration refresh mechanisms to pick up updated values without requiring system restart. Changes to commission rates should only affect new transactions, not retroactively modify existing orders.","parameters":[{"name":"configId","description":"Unique identifier of the configuration setting to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated configuration data including value, description, data type, category, and editability status","typeName":"IShoppingMallSystemConfig.IUpdate"},"responseBody":{"description":"Updated configuration setting with modified fields and updated timestamp","typeName":"IShoppingMallSystemConfig"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/systemConfigs","method":"post"},"description":"System configuration must be created before it can be updated. The configuration identified by configId must exist in the shopping_mall_system_configs table for the update operation to succeed."}],"accessor":["shoppingMall","admin","systemConfigs","update"]},{"specification":"This operation performs a hard delete of a system configuration entry identified by configId. It operates on the shopping_mall_system_configs table, which stores platform-wide settings as key-value pairs. Since the Prisma schema does not include a deleted_at column for this table, this operation permanently removes the configuration record from the database. This is an administrative operation that should be used carefully as it irreversibly deletes configuration data. System-critical configurations marked as is_editable=false should be protected from deletion at the business logic layer.","path":"/shoppingMall/admin/systemConfigs/{configId}","method":"delete","summary":"Permanently delete a system configuration entry from the shopping_mall_system_configs table","description":"This operation permanently removes a system configuration entry from the platform's configuration database. System configurations control platform-wide settings including feature toggles, business thresholds, default values, and operational parameters stored as key-value pairs in the shopping_mall_system_configs table.\n\nThe deletion is a hard delete operation that completely removes the configuration record from the database, as the schema does not implement soft deletion for system configurations. Once deleted, the configuration entry cannot be recovered and any dependent platform functionality relying on this setting will revert to application defaults.\n\nThis is a privileged administrative operation that should be restricted to super administrators only. Before deletion, the system should validate that the configuration is not marked as non-editable (is_editable=false), as system-critical configurations should be protected from accidental removal. The operation should also check for dependencies and warn if the configuration is actively used by other platform components.\n\nAfter successful deletion, related caches should be invalidated and any services relying on this configuration should be notified to reload their settings. Consider implementing audit logging to track which administrator deleted which configuration and when, even though the configuration record itself is removed.\n\nThis operation should be used sparingly and only when a configuration is truly obsolete. For temporary disabling of settings, consider using application-level flags rather than deletion.","parameters":[{"name":"configId","description":"Unique identifier of the system configuration entry to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/systemConfigs","method":"post"},"description":"System configuration must be created before it can be deleted"}],"accessor":["shoppingMall","admin","systemConfigs","erase"]},{"specification":"This operation retrieves a filtered and paginated list of sales channels from the shopping_mall_channels table. Channels represent different distribution channels for the marketplace such as web platform, mobile app, regional markets, or partner channels. The operation supports advanced search capabilities including filtering by channel status (is_active), channel type, date ranges, and text search across channel names and descriptions. Results include pagination support and can be sorted by various criteria such as creation date, channel name, or activity status.","path":"/shoppingMall/admin/channels","method":"patch","summary":"Search and retrieve filtered, paginated sales channels from shopping_mall_channels table","description":"This operation provides comprehensive search and filtering capabilities for sales channels in the multi-vendor e-commerce platform. Sales channels represent different distribution pathways through which products are sold, such as the main web platform, mobile applications, regional marketplaces, or partner integrations.\n\nThe shopping_mall_channels table stores channel configuration including channel identification (channel_code, channel_name), operational parameters (default_currency, default_language, timezone), business settings (commission_rate), and status flags (is_active). This operation allows administrators to search, filter, and analyze the channel landscape to manage marketplace segmentation effectively.\n\nThe search functionality supports complex filtering criteria including channel status (active/inactive), channel type classification (platform, regional, partner, mobile), creation date ranges for temporal analysis, and full-text search across channel names and descriptions using PostgreSQL trigram indexing for fuzzy matching capabilities.\n\nResults are returned in a paginated format to handle potentially large numbers of channels efficiently. The response includes detailed channel information such as channel identification codes, display names, descriptions, operational settings (currency, language, timezone), commission rates, and activity status. Each channel record also includes soft deletion status (deleted_at) to support historical data retention while hiding logically deleted channels from active operations.\n\nThis operation is essential for platform administrators to monitor channel performance, manage channel configurations, analyze commission structures across different channels, and maintain the overall channel architecture of the marketplace. The filtering and sorting capabilities enable administrators to quickly identify channels requiring attention, compare channel configurations, and make data-driven decisions about channel strategy.\n\nChannel data influences order processing, payment routing, content localization, and analytics segmentation. Accurate channel configuration ensures proper commission calculation, correct currency handling, and appropriate language/timezone settings for customer communications. This operation provides the foundation for effective channel governance and marketplace expansion strategies.","parameters":[],"requestBody":{"description":"Search criteria, filters, pagination, and sorting parameters for channel retrieval","typeName":"IShoppingMallChannel.IRequest"},"responseBody":{"description":"Paginated list of sales channels matching the search criteria with detailed channel information and configuration settings","typeName":"IPageIShoppingMallChannel"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","channels","index"]},{"specification":"This operation retrieves detailed information about a specific sales channel by its unique identifier. Sales channels represent different distribution methods through which products are sold, such as web platform, mobile app, or regional marketplaces. The endpoint provides comprehensive channel configuration including active status, currency settings, language preferences, timezone, commission rates, and custom settings. This information is essential for understanding channel-specific business rules, localization parameters, and financial configurations. The operation queries the shopping_mall_channels table from the Prisma schema using the channelId path parameter to locate and return the complete channel record. The operation excludes soft-deleted channels from results.","path":"/shoppingMall/admin/channels/{channelId}","method":"get","summary":"Retrieve detailed information for a specific sales channel by ID","description":"Retrieve comprehensive configuration and details for a specific sales channel identified by the channelId path parameter. Sales channels in the shopping mall platform represent different distribution channels through which products are sold, such as the main web platform, mobile applications, regional marketplaces, or partner channels. Each channel maintains its own configuration including currency, language, timezone, and commission rate settings.\n\nThis operation returns complete channel information from the shopping_mall_channels table including the channel code, human-readable name, description, channel type classification, active status, default currency (ISO 4217), default language (ISO 639-1), timezone (IANA format), platform commission rate, and any channel-specific settings stored in JSON format.\n\nThe channel's active status determines whether it is currently accepting orders and visible in customer-facing interfaces. Inactive channels are preserved for historical reference and analytics but hidden from operational use. The commission rate defines the platform's fee percentage for transactions processed through this channel, which may differ from the global platform default.\n\nThe operation filters results to exclude soft-deleted channels where deleted_at is not null. Only active and inactive channels that have not been soft-deleted are returned. To access historical deleted channel data, administrators should use dedicated archived channel endpoints if available.\n\nThis endpoint is typically accessed by administrators who need to review or verify channel configurations, or by system integrations that need to retrieve channel-specific parameters for transaction processing, localization, or analytics purposes. The endpoint provides read-only access to channel data and does not modify any records.\n\nSecurity considerations include role-based access control ensuring only authorized administrators can view channel configuration details, as commission rates and business settings are sensitive operational data. The operation supports efficient caching due to the infrequent changes in channel configuration.","parameters":[{"name":"channelId","description":"Unique identifier of the sales channel to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete sales channel configuration and details","typeName":"IShoppingMallChannel"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Sales channel must be created before it can be retrieved by ID. The GET operation requires an existing channel record in the shopping_mall_channels table identified by channelId."}],"accessor":["shoppingMall","admin","channels","at"]},{"specification":"This operation creates a new sales channel in the shopping mall platform. Sales channels represent different distribution methods or regional marketplaces through which products can be sold. Creating a channel involves specifying the channel code, name, description, type classification, default currency, language, timezone, and commission rate. The operation validates all required fields, ensures the channel code is unique across the platform, and initializes the channel with appropriate default settings. New channels are created in active status unless explicitly specified otherwise. This operation is restricted to platform administrators who manage the marketplace infrastructure and multi-channel strategy.","path":"/shoppingMall/admin/channels","method":"post","summary":"Create a new sales channel for the shopping mall platform","description":"Create a new sales channel to expand the marketplace's distribution capabilities and enable multi-channel commerce operations. Sales channels in the shopping mall platform represent distinct distribution methods, regional marketplaces, platform types, or partner integrations through which products are sold to customers. Each channel operates with its own configuration including currency, language, timezone, and commission structure.\n\nThis operation accepts comprehensive channel configuration data through the request body and creates a new record in the shopping_mall_channels table. The channel creation process validates that the provided channel_code is unique across all existing channels (enforced by unique constraint in schema), ensures required fields are complete, validates currency codes against ISO 4217 standard (3-letter uppercase codes like USD, EUR, GBP), validates language codes against ISO 639-1 standard (2-letter lowercase codes like en, es, fr), and verifies the timezone identifier follows IANA timezone database format (e.g., America/New_York, Europe/London).\n\nChannel types classify the distribution method (platform, regional, partner, mobile) and help organize channels by operational category. The commission rate specified during creation determines the platform's fee percentage for all transactions processed through this channel, expressed as a decimal value between 0.0 and 1.0 (e.g., 0.10 for 10% commission). This may differ from the global platform default to accommodate different business models or promotional strategies.\n\nNew channels can be created in either active or inactive status based on the is_active field in the request. Active channels are immediately available for order processing and customer interactions, while inactive channels are created for preparation but not yet operational. Channel-specific settings can be stored in JSON format in the settings_json field to accommodate custom parameters unique to each distribution method.\n\nThis operation is exclusively available to platform administrators with admin role, as channel management is a critical platform configuration that affects financial processing, localization, and business operations across the marketplace. The endpoint enforces strict validation to prevent misconfiguration that could impact transaction processing or financial reporting.\n\nUpon successful creation, the operation returns the complete channel record including the system-generated unique identifier (UUID), creation timestamp, and all configuration parameters. This enables administrators to verify the channel was created correctly and obtain the channel ID for subsequent operations or integration configuration.\n\nValidation errors are returned with specific field-level error messages to guide administrators in correcting invalid input. Common validation failures include duplicate channel codes, invalid currency or language codes, malformed timezone identifiers, or commission rates outside the valid range.","parameters":[],"requestBody":{"description":"Sales channel configuration data for creation including channel code, name, type, currency, language, timezone, and commission rate","typeName":"IShoppingMallChannel.ICreate"},"responseBody":{"description":"Created sales channel with complete configuration details including generated ID and timestamps","typeName":"IShoppingMallChannel"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[],"accessor":["shoppingMall","admin","channels","create"]},{"specification":"This operation allows administrators to update the configuration of a sales channel in the e-commerce shopping mall platform. Sales channels represent different distribution channels (web platform, mobile app, regional marketplaces, partner channels) through which products are sold. This operation enables modification of channel properties including name, description, operational settings, commission rates, currency, language, timezone, and active status. The operation validates that the channel exists, updates the specified fields, and maintains an audit trail of configuration changes. This is a critical administrative function for managing marketplace segmentation and channel-specific operational parameters. Only administrators with appropriate permissions can modify channel configurations.","description":"Update the configuration and settings for a specific sales channel in the e-commerce shopping mall platform. This operation modifies channel properties including the channel name, description, channel type classification, active status, default currency, default language, timezone, commission rate, and channel-specific settings stored as JSON.\n\nThis operation is essential for maintaining accurate channel configuration as business requirements evolve. Administrators can adjust commission rates for specific channels, change operational currencies for regional markets, update localization settings (language and timezone), and toggle channel availability by modifying the is_active flag.\n\nThe operation corresponds to the shopping_mall_channels table in the Prisma schema. Key fields that can be updated include channel_name (human-readable display name), description (detailed channel purpose), channel_type (classification like 'platform', 'regional', 'partner'), is_active (visibility and order acceptance control), default_currency (ISO 4217 code), default_language (ISO 639-1 code), timezone (IANA format), commission_rate (decimal percentage for platform fees), and settings_json (channel-specific configuration parameters).\n\nSecurity considerations include verifying the administrator has appropriate permissions to modify channel configurations, validating that the channel_id exists in the system, and ensuring commission rate changes do not retroactively affect existing orders. The operation updates the updated_at timestamp automatically to track configuration change history.\n\nValidation rules include ensuring commission_rate is a valid decimal between 0 and 1 (representing 0-100%), default_currency follows ISO 4217 standard, default_language follows ISO 639-1 standard, timezone is a valid IANA timezone identifier, and channel_type matches predefined categories. The operation maintains data integrity by validating all updated fields before applying changes.\n\nThis operation integrates with the email template system (shopping_mall_email_templates reference channel_id), ensuring channel-specific communication templates remain associated after configuration updates. Related operations include retrieving channel configuration (GET) and creating new channels (POST), which should be used together with this update operation in typical channel management workflows.","summary":"Update sales channel configuration including commission rates, currency, language, and operational settings","path":"/shoppingMall/admin/channels/{channelId}","method":"put","parameters":[{"name":"channelId","description":"Unique identifier of the sales channel to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated channel configuration data including name, description, operational settings, commission rate, and localization parameters","typeName":"IShoppingMallChannel.IUpdate"},"responseBody":{"description":"Updated sales channel entity with all configuration properties reflecting the applied changes","typeName":"IShoppingMallChannel"},"name":"update","authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Sales channel must be created before it can be updated with new configuration settings"}],"accessor":["shoppingMall","admin","channels","update"]},{"specification":"This operation allows administrators to delete a sales channel from the e-commerce shopping mall platform. Sales channels (shopping_mall_channels table) represent different distribution channels through which products are sold. This operation performs a soft delete by setting the deleted_at timestamp, preserving channel data for historical orders and analytics while removing the channel from active use. The operation validates that the channel exists and that it is safe to delete (no critical dependencies or active orders relying on this channel). Only administrators with appropriate permissions can delete channels. This is a critical administrative function for managing marketplace segmentation and retiring obsolete distribution channels.","description":"Soft delete a sales channel by setting the deleted_at timestamp in the shopping_mall_channels table. This operation marks the channel as deleted while preserving all historical data associated with the channel, including email templates, orders, and analytics records that reference this channel.\n\nThe operation performs a soft delete rather than permanent deletion to maintain data integrity for historical transactions and reporting. When a channel is soft-deleted, it becomes hidden from active channel lists and cannot accept new orders, but all existing references remain intact. This approach ensures that historical orders, email templates, and analytics data that reference this channel continue to function correctly.\n\nAccording to the Prisma schema, the shopping_mall_channels table includes a deleted_at field (DateTime? @db.Timestamptz), which enables soft deletion functionality. The operation sets this field to the current timestamp, effectively removing the channel from active operations while preserving the complete audit trail.\n\nThis operation corresponds to the shopping_mall_channels table where each channel has properties including channel_code (unique identifier), channel_name (display name), channel_type (classification), is_active (operational status), commission_rate (platform fee percentage), and various localization settings (currency, language, timezone). The soft delete affects the channel's visibility but does not cascade delete related entities.\n\nSecurity considerations include verifying that the administrator has appropriate permissions to delete channels and ensuring that critical channels required for platform operation cannot be deleted. The operation should validate that no active orders are currently being processed through this channel before allowing deletion.\n\nBusiness rules enforced by this operation include checking that the channel is not marked as a required system channel, validating that dependent email templates are either reassigned or archived, and ensuring that ongoing transactions are not disrupted. The operation logs the deletion action with administrator identification for audit trail purposes.\n\nRelated operations include retrieving channel information (GET) and updating channel configuration (PUT), which should be used to verify channel status before deletion. After deletion, administrators can still retrieve historical channel data for reporting purposes, but the channel will not appear in active channel lists or be available for new order processing.","summary":"Soft delete a sales channel marking it inactive while preserving historical data","path":"/shoppingMall/admin/channels/{channelId}","method":"delete","parameters":[{"name":"channelId","description":"Unique identifier of the sales channel to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Sales channel must be created before it can be deleted from the platform"}],"accessor":["shoppingMall","admin","channels","erase"]},{"specification":"This operation retrieves a filtered and paginated list of email templates used for transactional and marketing communications across the platform. It operates on the shopping_mall_email_templates table which stores reusable email templates with dynamic content placeholders for order confirmations, shipping notifications, account verification, password reset, and promotional campaigns. The operation supports advanced filtering by template category (transactional, marketing, authentication, notification), channel association, language code, active status, and template name/content search. It enables administrators to manage the complete email template library with efficient searching and filtering capabilities.","path":"/shoppingMall/admin/emailTemplates","method":"patch","summary":"Search and retrieve filtered, paginated list of email templates for platform communications","description":"Retrieve a comprehensive filtered and paginated list of email templates from the shopping_mall_email_templates table. This operation provides advanced search capabilities for administrators to find and manage email templates based on multiple criteria including template category, channel association, language code, active status, and content search.\n\nEmail templates are critical platform components that define the structure and content of all automated communications sent to customers, sellers, and admins. Each template supports variable placeholders for dynamic content personalization, multi-language support for international communications, and channel-specific customization for different marketplace segments.\n\nThe operation supports comprehensive filtering options to help administrators locate specific templates efficiently. Filters include template category (transactional emails like order confirmations, marketing emails like promotional campaigns, authentication emails like password reset, notification emails like shipping updates), channel assignment (platform-wide templates or channel-specific variants), language code for localization, and active status to show only enabled templates.\n\nSearch functionality enables full-text search across template names, subjects, and body content to locate templates containing specific keywords or phrases. This is particularly valuable when administrators need to update messaging across multiple related templates or audit template content for compliance.\n\nPagination support ensures efficient handling of large template libraries as the platform grows to support multiple languages, channels, and communication scenarios. The operation returns template summary information optimized for list displays, with options to drill down into individual templates for detailed editing.\n\nSecurity considerations include role-based access control ensuring only administrators can search and view email templates, as templates may contain sensitive business logic and communication strategies. Template content is sanitized for display to prevent injection attacks.\n\nThis operation integrates with the shopping_mall_channels table through the optional shopping_mall_channel_id foreign key, enabling channel-specific template filtering. Templates without channel association are platform-wide defaults. The multi-language support through language_code enables localized communications for international customers and sellers.\n\nRelated operations that might be used together include retrieving individual template details for editing, creating new templates for new communication scenarios, updating template content for messaging improvements, and activating/deactivating templates for A/B testing or seasonal campaigns.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering email templates by category, channel, language, status, and content keywords","typeName":"IShoppingMallEmailTemplate.IRequest"},"responseBody":{"description":"Paginated list of email template summary information matching search criteria with template metadata and configuration","typeName":"IPageIShoppingMallEmailTemplate.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[],"accessor":["shoppingMall","admin","emailTemplates","index"]},{"specification":"This operation retrieves complete details of a specific email template by its unique identifier. It operates on the shopping_mall_email_templates table and returns the full template configuration including subject line, HTML body, plain text body, available variables, sender configuration, and metadata. The operation is used by administrators when viewing or editing individual template details, testing email rendering, or reviewing template configuration before sending communications.","path":"/shoppingMall/admin/emailTemplates/{templateId}","method":"get","summary":"Retrieve complete details of a specific email template by ID","description":"Retrieve comprehensive information for a single email template identified by its unique template ID from the shopping_mall_email_templates table. This operation provides administrators with complete template details necessary for viewing, editing, testing, and managing individual email communication templates.\n\nEmail templates define the structure and content of all automated platform communications sent to customers, sellers, and administrators throughout various business workflows. Each template contains carefully crafted messaging with dynamic variable placeholders that are replaced with actual data when emails are sent. Understanding the complete template structure is essential for maintaining consistent, professional communication across the platform.\n\nThe operation returns exhaustive template information including the template_code (unique identifier used by application logic to select templates), template_name and description for administrative reference, category classification (transactional, marketing, authentication, notification), and language_code for localization support. Channel association is included if the template is specific to a marketplace channel, otherwise null indicates platform-wide usage.\n\nCritical template content includes both HTML and plain text versions of the email body, enabling rich formatting for modern email clients while providing accessible fallback for text-only readers. The subject line includes variable placeholders for personalization such as order numbers, customer names, or action-specific details. Administrators can review how these placeholders are used throughout the template content.\n\nThe variables_json field provides documentation of all available placeholders for this template, describing each variable's purpose and expected data type. This information is invaluable when customizing templates or troubleshooting template rendering issues. Sender configuration (from_email, from_name, reply_to_email) defines how the email appears to recipients and where replies are directed.\n\nTemplate metadata includes activation status controlling whether the template can be used for sending emails, version number tracking template evolution over time, and creation/update timestamps for audit trail. The is_active flag allows administrators to temporarily disable templates for testing or revision without deleting template history.\n\nSecurity considerations include verifying the requesting user has administrator role permissions, as email templates may contain sensitive business logic and communication strategies. Template content is returned without modification to enable accurate editing, but administrators must be trusted users as template injection could affect platform communications.\n\nThis operation integrates with the shopping_mall_channels relationship to show channel-specific template variants versus platform-wide templates. Understanding channel assignment helps administrators maintain template consistency across marketplace segments while allowing necessary customization.\n\nRelated operations that might be used together include searching the template library to locate templates by category or purpose, updating template content to improve messaging or fix errors, creating new template versions for A/B testing, and previewing template rendering with sample data before deployment.","parameters":[{"name":"templateId","description":"Unique identifier of the target email template to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete email template information including subject, HTML/text bodies, variables, sender configuration, and metadata","typeName":"IShoppingMallEmailTemplate"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/emailTemplates","method":"post"},"description":"Email template must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","admin","emailTemplates","at"]},{"specification":"This operation creates a new email template for the shopping mall platform's transactional and marketing communications. Email templates are used for order confirmations, shipping notifications, account verification, password reset, and promotional campaigns. The template includes HTML and plain text body content with support for dynamic variable placeholders that are replaced with actual values when emails are sent. Templates can be associated with specific channels or used platform-wide when channel_id is null. All templates require a unique template_code within their channel/language combination. The template supports multi-language capability through language_code field and can be activated/deactivated through is_active flag. Version tracking enables template change history and potential rollback capability. This operation is restricted to administrators who manage platform communications and customer engagement strategies. The template references the shopping_mall_email_templates table from the Prisma schema.","path":"/shoppingMall/admin/emailTemplates","method":"post","summary":"Create a new email template for platform communications","description":"Creates a new email template in the shopping mall platform's communication system. Email templates provide reusable, customizable content for transactional and marketing emails sent to customers, sellers, and administrators throughout various platform workflows.\n\nThis operation enables administrators to define email templates with dynamic variable placeholders that are populated with actual data when emails are sent. For example, an order confirmation template might include placeholders like {{order_number}}, {{customer_name}}, and {{total_amount}} that are replaced with specific order details for each customer.\n\nThe template supports both HTML and plain text body content. The HTML body enables rich formatting, branding, and visual design for modern email clients, while the plain text body serves as a fallback for email clients that don't support HTML rendering or for accessibility purposes. Both versions should convey the same essential information.\n\nTemplates can be associated with specific channels through the shopping_mall_channel_id field, enabling channel-specific customization of communications. For example, a mobile app channel might have different email styling than the web platform channel. When shopping_mall_channel_id is null, the template is available platform-wide across all channels.\n\nThe template_code field serves as the unique identifier used by the application logic to select the appropriate template for each email sending scenario. Common codes include 'ORDER_CONFIRMATION', 'SHIPMENT_NOTIFICATION', 'PASSWORD_RESET', 'WELCOME_EMAIL', 'REFUND_APPROVED', and 'REVIEW_REQUEST'.\n\nMulti-language support is provided through the language_code field following ISO 639-1 standard. The platform can maintain separate templates for each language, enabling localized communications. The combination of template_code, language_code, and shopping_mall_channel_id must be unique.\n\nTemplate categorization through the category field enables organization by business function such as 'transactional' (order/payment related), 'marketing' (promotional campaigns), 'authentication' (login/verification), and 'notification' (status updates). This grouping facilitates template management and reporting.\n\nThe variables_json field documents available placeholders in JSON format, helping administrators understand which dynamic values can be used in the template content. For example: [{\"key\": \"order_number\", \"description\": \"Unique order identifier\"}, {\"key\": \"customer_name\", \"description\": \"Customer's full name\"}].\n\nVersion tracking through the version field enables audit trail of template changes and potential rollback to previous versions if needed. Each update increments the version number.\n\nSender configuration through from_email, from_name, and reply_to_email fields allows customization of the email envelope. These fields can override platform defaults to provide context-specific sender identification. For example, transactional emails might come from 'orders@shoppingmall.com' while support emails come from 'support@shoppingmall.com'.\n\nOnly administrators with content management permissions can create email templates, ensuring consistent brand voice and compliance with communication policies across the platform.","parameters":[],"requestBody":{"description":"Email template creation data including template identification, content bodies, variable definitions, and sender configuration","typeName":"IShoppingMallEmailTemplate.ICreate"},"responseBody":{"description":"Newly created email template with system-generated ID and timestamps","typeName":"IShoppingMallEmailTemplate"},"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Sales channel must be created before it can be referenced in email templates. Email templates can be associated with specific channels through the shopping_mall_channel_id field to enable channel-specific customization of communications."}],"accessor":["shoppingMall","admin","emailTemplates","create"]},{"specification":"This operation updates an existing email template identified by templateId. Administrators can modify template content, configuration, and metadata to adapt communications to evolving business needs. The update operation allows changing template subject, HTML body, plain text body, sender configuration, active status, and other template properties. Template versioning ensures an audit trail of changes through version number incrementation. Updates apply immediately to future email sends using this template but do not affect emails already sent. The template_code, language_code, and channel_id combination must remain unique across all templates. This operation validates that the specified template exists before applying updates. Updates to template content should be carefully reviewed as they affect customer communications. Only administrators with appropriate permissions can update email templates to maintain communication consistency and brand compliance. The operation references the shopping_mall_email_templates table from the Prisma schema.","path":"/shoppingMall/admin/emailTemplates/{templateId}","method":"put","summary":"Update an existing email template by ID","description":"Updates an existing email template in the shopping mall platform's communication system. This operation enables administrators to modify template content, configuration, and settings to adapt to changing business requirements, fix issues, or improve email effectiveness.\n\nAdministrators can update any aspect of the email template including the subject line, HTML body content, plain text body content, sender information, active status, and template metadata. Each update increments the version number, creating an audit trail of template changes over time.\n\nThe template_code serves as the functional identifier used by the application to select templates for specific email scenarios. While most template properties can be updated, changing the template_code effectively changes which emails will use this template. Care should be taken when modifying template_code to ensure application logic references remain valid.\n\nHTML and plain text body content can be updated independently. When updating email bodies, administrators should ensure both HTML and plain text versions convey the same essential information for consistency across email clients. The HTML body enables rich formatting and branding, while the plain text version ensures accessibility and compatibility with text-only email clients.\n\nTemplate variable placeholders (e.g., {{order_number}}, {{customer_name}}) can be added or removed from the body content. The variables_json field should be updated accordingly to document available placeholders. This documentation helps other administrators understand which dynamic values can be used in the template.\n\nSender configuration can be updated through from_email, from_name, and reply_to_email fields. Changing these fields affects the sender identity displayed to email recipients. For example, changing from 'noreply@shoppingmall.com' to 'support@shoppingmall.com' makes the email appear more personal and enables recipient replies.\n\nThe is_active flag controls whether the template is available for sending emails. Administrators can deactivate templates temporarily without deletion, useful for testing new versions or temporarily disabling certain email communications. Inactive templates are retained in the database but not selectable for email sending operations.\n\nMulti-language templates can be updated independently for each language_code. When updating a template for a specific language, only that language version is affected. Other language versions of the same template_code remain unchanged.\n\nChannel-specific templates (those with non-null shopping_mall_channel_id) can be updated without affecting platform-wide templates or templates for other channels. This enables channel-specific communication customization while maintaining overall template structure.\n\nTemplate updates apply immediately to all future email sending operations using this template. Emails that have already been sent are not affected by template updates, ensuring historical email content remains consistent.\n\nThe version field automatically increments with each update, providing version history tracking. While this operation doesn't support rollback to previous versions directly, the version history enables administrators to track when changes occurred and potentially restore previous content manually if needed.\n\nOnly administrators with appropriate permissions can update email templates. This restriction ensures communication consistency, maintains brand standards, and prevents unauthorized modification of customer-facing content. Template updates should be carefully reviewed before deployment as they affect communications sent to all platform users.","parameters":[{"name":"templateId","description":"Unique identifier of the email template to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Email template update data containing fields to be modified","typeName":"IShoppingMallEmailTemplate.IUpdate"},"responseBody":{"description":"Updated email template with incremented version number and updated timestamps","typeName":"IShoppingMallEmailTemplate"},"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/emailTemplates","method":"post"},"description":"Email template must be created before it can be updated. The templateId parameter references an existing email template that needs to exist in the shopping_mall_email_templates table."}],"accessor":["shoppingMall","admin","emailTemplates","update"]},{"specification":"This operation permanently deletes an email template from the system by its unique identifier. Email templates are used for transactional and marketing communications across the platform. This operation is restricted to administrators only and performs a hard delete, removing the template record entirely from the database. The template_id path parameter specifies which email template to delete. This is used when a template is no longer needed or has been replaced. The operation validates that the template exists before deletion and returns appropriate errors if the template cannot be found. This endpoint should be used cautiously as deletion is permanent and cannot be undone.","path":"/shoppingMall/admin/emailTemplates/{templateId}","method":"delete","summary":"Delete an email template permanently from the system","description":"This operation performs a permanent deletion of an email template identified by the templateId path parameter. Email templates in the shopping_mall_email_templates table are used throughout the platform for sending transactional emails (order confirmations, shipping notifications, password resets) and marketing communications.\n\nThis endpoint is exclusively available to administrators who manage platform-wide email communication templates. When a template is deleted, it is permanently removed from the system - the schema does not include soft deletion fields for email templates.\n\nThe deletion is immediate and irreversible. Before deleting a template, administrators should ensure that the template is not actively referenced by scheduled email campaigns or set as default for critical system notifications.\n\nThe operation validates that the template exists before attempting deletion. If the template ID does not correspond to an existing record, the system returns a 404 Not Found error. The template is identified by its UUID primary key passed as the templateId path parameter.\n\nSecurity considerations include verifying the requesting admin has appropriate permissions to delete email templates. This operation is logged in the audit trail for compliance and traceability of template management actions.\n\nRelated operations: To create new templates, use POST /emailTemplates. To update existing templates, use PUT /emailTemplates/{templateId}. To retrieve template details, use GET /emailTemplates/{templateId}.","parameters":[{"name":"templateId","description":"Unique identifier of the email template to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/emailTemplates","method":"post"},"description":"Email template must be created before it can be deleted. This operation creates the email template record that will be referenced by the templateId parameter in the delete operation."}],"accessor":["shoppingMall","admin","emailTemplates","erase"]},{"specification":"This operation retrieves a filtered and paginated list of customer accounts from the shopping_mall_customers table based on search criteria. The endpoint supports comprehensive filtering by account status, email verification status, registration date ranges, and customer name search. It uses PATCH method to accommodate complex request parameters that would be impractical in a GET query string. The response includes customer profile information with pagination metadata to enable efficient browsing of large customer datasets. This operation is primarily used by administrators for customer account management and by the system for customer analytics.","path":"/shoppingMall/admin/customers","method":"patch","summary":"Search and retrieve a filtered, paginated list of customer accounts","description":"This operation retrieves a comprehensive list of customer accounts from the shopping_mall_customers table with advanced filtering, searching, and pagination capabilities. It is designed to support administrative customer management workflows and customer analytics reporting.\n\nThe endpoint accepts complex search criteria through the request body, enabling filtering by multiple dimensions including account status (active, suspended, deleted), email verification status, registration date ranges, and text-based name searching. The PATCH method is used instead of GET to accommodate the complexity and size of filter parameters that would be impractical to encode in URL query strings.\n\nAdministrators use this endpoint to monitor customer account registrations and growth trends, identify customers requiring email verification follow-up, find customers with specific account statuses for bulk operations, search for customers by name for support inquiries, and generate customer reports with filtered datasets.\n\nThe response returns a paginated collection of customer records including essential profile information such as name, email, phone number, account status, email verification status, registration date, and account activity timestamps. Sensitive authentication data (password hashes, verification tokens, reset tokens, password history) are excluded from the response for security.\n\nPagination is implemented to handle large customer datasets efficiently, with configurable page size and page number parameters. The response includes pagination metadata showing total record count, current page, total pages, and page size to enable proper pagination UI rendering.\n\nSecurity considerations include restricting this endpoint to authenticated administrators only. Customer personal information is protected through role-based access control, ensuring only authorized personnel can search and view customer accounts.\n\nThe search functionality utilizes database indexing on customer name (using trigram GIN index) for fast full-text search performance. Account status and email verification filters use indexed columns for efficient query execution even with millions of customer records.\n\nRelated operations: To view detailed information for a specific customer, use GET /customers/{customerId}. To update customer account status, use PUT /customers/{customerId}. To manage customer addresses, use the /customers/{customerId}/addresses endpoints.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering customer accounts","typeName":"IShoppingMallCustomer.IRequest"},"responseBody":{"description":"Paginated list of customer account summaries matching the search criteria","typeName":"IPageIShoppingMallCustomer.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[],"accessor":["shoppingMall","admin","customers","index"]},{"specification":"This operation retrieves detailed information about a specific customer account by customer ID. It accesses the shopping_mall_customers table from the Prisma schema to fetch comprehensive customer profile data including email, name, phone, account status, verification status, and authentication-related metadata. This endpoint is used when admins need to view customer details for support, verification, or account management purposes. The operation validates that the requesting admin has proper authorization to access customer data and returns a complete customer record with all relevant fields except sensitive authentication data like password hashes and tokens.","path":"/shoppingMall/admin/customers/{customerId}","method":"get","summary":"Retrieve detailed information for a specific customer account","description":"Retrieves comprehensive customer account information from the shopping_mall_customers table by customer ID. This operation provides complete customer profile data including personal information, account status, email verification status, and security metadata for administrative oversight and customer support purposes.\n\nThe endpoint returns detailed customer information including email address, full name, phone number, account status (active, suspended, deleted), email verification status, and timestamps for account creation and last update. Security-sensitive fields such as password hashes, verification tokens, and password reset tokens are excluded from the response to maintain security compliance.\n\nThis operation integrates with the user authentication system to validate that only authorized administrators can access customer details. The customer data is retrieved from the shopping_mall_customers table as defined in the Prisma schema, ensuring accurate reflection of the current account state.\n\nAdministrators use this endpoint to review customer accounts for support inquiries, verify customer identity, investigate account issues, monitor account status, and manage customer relationships. The operation supports the admin dashboard functionality defined in the requirements for comprehensive customer account management.\n\nRelated operations include customer account listing, customer account updates, and customer account suspension workflows. This endpoint serves as the foundation for detailed customer profile inspection and administrative decision-making regarding customer accounts.","parameters":[{"name":"customerId","description":"Unique identifier of the target customer account to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive customer account information including profile data, account status, and verification details","typeName":"IShoppingMallCustomer"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Customer must exist before their details can be retrieved. Customer creation is validated through address creation which requires an authenticated customer account."}],"accessor":["shoppingMall","admin","customers","at"]},{"specification":"This operation updates an existing customer account by customer ID. It modifies the shopping_mall_customers table in the Prisma schema to update customer profile information such as name, phone number, and account status. Administrators can use this endpoint to modify customer accounts for support purposes, account verification, or status management. The operation validates all input fields according to business rules (name format, phone number format, valid account status values) and ensures data integrity. Only administrators have permission to update customer accounts through this endpoint. Customers updating their own profiles would use a separate self-service endpoint.","path":"/shoppingMall/admin/customers/{customerId}","method":"put","summary":"Update customer account information for administrative management","description":"Updates an existing customer account record in the shopping_mall_customers table with modified profile information. This operation allows administrators to modify customer account details including name, phone number, account status, and email verification status for account management, support resolution, and compliance purposes.\n\nThe endpoint accepts updated customer information and validates all fields according to platform business rules. Name must be a valid non-empty string, phone number must match international format standards, and account status must be one of the valid values (active, suspended, deleted) as defined in the business requirements. The operation prevents modification of immutable fields like customer ID, email address (which requires separate email change workflow), and password hash (which requires password reset workflow).\n\nThis operation integrates with the user management system to ensure only authorized administrators can modify customer accounts. All changes are validated against the shopping_mall_customers table schema defined in the Prisma database, ensuring data consistency and referential integrity.\n\nAdministrators use this endpoint to update customer information when resolving support tickets, manually verifying email addresses when verification emails fail, correcting customer profile data, updating account status for policy enforcement (suspensions), and managing customer account lifecycle. The operation supports the admin dashboard functionality specified in the requirements for comprehensive customer account management.\n\nChanges made through this endpoint are immediately reflected in the customer's account and may trigger notifications to the customer (for status changes or significant profile updates). The operation maintains an audit trail of account modifications for compliance and security monitoring. Related operations include retrieving customer details, suspending customer accounts, and managing customer addresses.","parameters":[{"name":"customerId","description":"Unique identifier of the target customer account to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated customer account information including profile data and account status modifications","typeName":"IShoppingMallCustomer.IUpdate"},"responseBody":{"description":"Complete updated customer account information reflecting the applied changes","typeName":"IShoppingMallCustomer"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Customer must exist before their account information can be updated. Customer existence is validated through address creation which requires an authenticated customer account."}],"accessor":["shoppingMall","admin","customers","update"]},{"specification":"This operation marks a customer account as deleted in the shopping mall platform by setting the deleted_at timestamp (soft delete). The shopping_mall_customers table implements soft deletion through the deleted_at field, allowing the account to be marked as removed while preserving all related data for legal compliance, audit trail, and financial record-keeping. When a customer account is soft deleted, the deleted_at timestamp is set to the current time, the account is filtered from normal queries and login attempts, but all order history, payment transactions, and reviews are preserved. This operation is used when customers exercise their right to account deletion under privacy regulations such as GDPR, or when administrators need to remove accounts for policy violations. The soft delete approach ensures compliance with financial record retention requirements while honoring user privacy rights. Active sessions for the customer should be revoked when the account is marked as deleted.","path":"/shoppingMall/admin/customers/{customerId}","method":"delete","summary":"Mark customer account as deleted (soft delete)","description":"Marks a customer account as deleted by setting the deleted_at timestamp in the shopping_mall_customers table. This operation implements soft deletion, preserving all customer-related data while preventing future account access and filtering the account from normal platform queries.\n\nThe shopping_mall_customers schema includes a deleted_at field (nullable DateTime) that enables soft deletion. When this operation is executed, the deleted_at field is set to the current timestamp, effectively marking the account as deleted without removing any data from the database. This approach satisfies multiple critical business and legal requirements.\n\nFrom a compliance perspective, soft deletion is essential for maintaining financial records and audit trails. Order history, payment transactions, and customer reviews must be preserved to comply with tax regulations, financial reporting requirements, and legal record-keeping obligations. Hard deletion of customer accounts would create gaps in financial records and violate various regulatory requirements that mandate transaction history retention (typically 7 years for tax purposes).\n\nWhen a customer account is marked as deleted, several automated actions occur. First, all active sessions associated with the customer are immediately revoked by setting is_revoked to true in the shopping_mall_sessions table. This prevents the customer from continuing to use any active login sessions across any devices. Second, the customer account is filtered from login authentication queries, preventing future login attempts with the deleted account credentials. Third, the account_status field may be updated to 'deleted' to provide additional filtering capability beyond the deleted_at timestamp.\n\nAll related data is preserved in the database, including shopping_mall_orders (order history), shopping_mall_payment_transactions (payment records), shopping_mall_reviews (product reviews), shopping_mall_addresses (delivery addresses), and shopping_mall_wishlists (saved items). The onDelete: Cascade directives in the schema apply only to hard deletes (actual record removal), not to soft deletes. Soft deletion simply marks the parent record as deleted while leaving all child records intact.\n\nFor GDPR compliance and the \"right to erasure\", this soft delete operation can be combined with a separate data anonymization process. Personal identifiable information (PII) such as the customer's name, email, phone number, and addresses can be replaced with anonymized values (e.g., 'DELETED_USER_[ID]', 'deleted_[ID]@privacy.local') while maintaining the order and transaction records with anonymized customer references. This approach satisfies both the right to erasure and the legal requirement to maintain financial records.\n\nFrom a security standpoint, only administrators with appropriate permissions can execute this operation, preventing unauthorized account deletion. The operation verifies that the customer account exists before attempting the soft delete and returns appropriate error codes if the customer ID is not found (404 Not Found) or if the account is already marked as deleted.\n\nThis operation provides no response body upon success, following REST conventions for DELETE operations. A successful soft deletion returns HTTP 204 No Content. The deleted_at timestamp serves as the permanent record of when the account was marked as deleted and by which administrator (tracked through audit logs).","parameters":[{"name":"customerId","description":"Unique identifier of the customer account to be marked as deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","customers","erase"]},{"specification":"This operation retrieves and filters all active sessions for a specific customer account by customer ID. It provides comprehensive session management capabilities, allowing customers and administrators to view all active login sessions across different devices and locations. The operation returns a filtered list of session records from the shopping_mall_sessions table where user_type is 'customer' and the customer_id matches the provided path parameter. This enables customers to monitor their account security by reviewing active sessions and identifying any suspicious login activity. The operation supports complex filtering criteria through the request body, including filtering by device type, browser, location, and date ranges. Results include detailed session information such as IP address, device information, browser details, approximate location, last activity timestamp, and session creation date. This operation is essential for security monitoring and multi-device session management, enabling customers to identify and revoke unauthorized sessions.","path":"/shoppingMall/customer/customers/{customerId}/sessions","method":"patch","summary":"Retrieve and filter active sessions for a specific customer account","description":"Retrieves a comprehensive list of all active sessions associated with a specific customer account, supporting advanced filtering and pagination. This operation queries the shopping_mall_sessions table for records where user_type is 'customer' and matches the specified customer ID parameter.\n\nThis endpoint serves multiple critical business purposes. First, it enables customers to monitor their account security by viewing all active login sessions across different devices and browsers. Customers can identify which devices are currently logged in, where those sessions originated (IP address and approximate location), and when each session was last active. This visibility is essential for detecting unauthorized access and maintaining account security.\n\nSecond, the operation supports the multi-device session management feature described in the requirements. Customers can see sessions from their desktop computer, mobile phone, tablet, and any other devices simultaneously logged in. Each session record includes detailed device information parsed from the user agent string, including device type (mobile, tablet, desktop), browser name, operating system, and a user-friendly device name for easy identification.\n\nThe filtering capabilities provided through the request body enable customers to narrow down sessions by specific criteria. For example, customers can filter sessions by device type to see only mobile sessions, or filter by date range to find sessions created within a specific timeframe. This is particularly useful for customers with many active sessions who want to identify and manage specific sessions.\n\nFrom a security perspective, this operation provides the foundation for customers to detect and respond to suspicious activity. If a customer sees a session from an unfamiliar location or device, they can identify it through this endpoint and then use related session revocation endpoints to terminate that session. The approximate location information, derived from IP address geolocation, helps customers quickly identify whether a session is legitimate.\n\nAdministrators also use this operation for customer support and security investigations. When a customer reports unauthorized account access, administrators can retrieve the session list to identify suspicious sessions and take appropriate action. The comprehensive session details including IP addresses and timestamps provide valuable forensic information.\n\nThe response includes pagination support for customers with many historical sessions, ensuring efficient data retrieval and display. Sessions are typically sorted by last activity timestamp with most recent sessions first, allowing customers to quickly see their active sessions.\n\nRelated operations that customers might use together with this endpoint include session revocation (to terminate specific sessions), login history retrieval, and account security settings management. Together, these operations provide complete session lifecycle management and security control for customer accounts.","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose sessions are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination criteria for session retrieval including device type, date range, location filters, and sorting preferences","typeName":"IShoppingMallCustomerSession.IRequest"},"responseBody":{"description":"Paginated list of active and historical sessions for the specified customer with detailed device and location information","typeName":"IPageIShoppingMallCustomerSession"},"name":"index","authorizationRole":"customer","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","customer","customers","sessions","index"]},{"specification":"This operation retrieves and filters all active sessions for a specific customer account by customer ID. It provides comprehensive session management capabilities, allowing customers and administrators to view all active login sessions across different devices and locations. The operation returns a filtered list of session records from the shopping_mall_sessions table where user_type is 'customer' and the customer_id matches the provided path parameter. This enables customers to monitor their account security by reviewing active sessions and identifying any suspicious login activity. The operation supports complex filtering criteria through the request body, including filtering by device type, browser, location, and date ranges. Results include detailed session information such as IP address, device information, browser details, approximate location, last activity timestamp, and session creation date. This operation is essential for security monitoring and multi-device session management, enabling customers to identify and revoke unauthorized sessions.","path":"/shoppingMall/admin/customers/{customerId}/sessions","method":"patch","summary":"Retrieve and filter active sessions for a specific customer account","description":"Retrieves a comprehensive list of all active sessions associated with a specific customer account, supporting advanced filtering and pagination. This operation queries the shopping_mall_sessions table for records where user_type is 'customer' and matches the specified customer ID parameter.\n\nThis endpoint serves multiple critical business purposes. First, it enables customers to monitor their account security by viewing all active login sessions across different devices and browsers. Customers can identify which devices are currently logged in, where those sessions originated (IP address and approximate location), and when each session was last active. This visibility is essential for detecting unauthorized access and maintaining account security.\n\nSecond, the operation supports the multi-device session management feature described in the requirements. Customers can see sessions from their desktop computer, mobile phone, tablet, and any other devices simultaneously logged in. Each session record includes detailed device information parsed from the user agent string, including device type (mobile, tablet, desktop), browser name, operating system, and a user-friendly device name for easy identification.\n\nThe filtering capabilities provided through the request body enable customers to narrow down sessions by specific criteria. For example, customers can filter sessions by device type to see only mobile sessions, or filter by date range to find sessions created within a specific timeframe. This is particularly useful for customers with many active sessions who want to identify and manage specific sessions.\n\nFrom a security perspective, this operation provides the foundation for customers to detect and respond to suspicious activity. If a customer sees a session from an unfamiliar location or device, they can identify it through this endpoint and then use related session revocation endpoints to terminate that session. The approximate location information, derived from IP address geolocation, helps customers quickly identify whether a session is legitimate.\n\nAdministrators also use this operation for customer support and security investigations. When a customer reports unauthorized account access, administrators can retrieve the session list to identify suspicious sessions and take appropriate action. The comprehensive session details including IP addresses and timestamps provide valuable forensic information.\n\nThe response includes pagination support for customers with many historical sessions, ensuring efficient data retrieval and display. Sessions are typically sorted by last activity timestamp with most recent sessions first, allowing customers to quickly see their active sessions.\n\nRelated operations that customers might use together with this endpoint include session revocation (to terminate specific sessions), login history retrieval, and account security settings management. Together, these operations provide complete session lifecycle management and security control for customer accounts.","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose sessions are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination criteria for session retrieval including device type, date range, location filters, and sorting preferences","typeName":"IShoppingMallCustomerSession.IRequest"},"responseBody":{"description":"Paginated list of active and historical sessions for the specified customer with detailed device and location information","typeName":"IPageIShoppingMallCustomerSession"},"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Customer account must exist before retrieving their sessions. Creating an address requires an authenticated customer account, which validates the customer exists in the system."}],"accessor":["shoppingMall","admin","customers","sessions","index"]},{"specification":"This operation retrieves a specific active session for a customer by session ID. It operates on the shopping_mall_sessions table where customer_id matches the provided customerId parameter and the session ID matches the sessionId parameter. The operation returns detailed session information including device details, location, activity timestamps, and token expiration. This endpoint enables customers to view specific session details for security monitoring and multi-device session management, allowing them to review login information, device identification, and session activity for a particular active session.","path":"/shoppingMall/customer/customers/{customerId}/sessions/{sessionId}","method":"get","summary":"Retrieve a specific customer session by session ID","description":"Retrieves detailed information about a specific active session for a customer. This operation queries the shopping_mall_sessions table to return comprehensive session data including device information, browser details, geographic location, activity timestamps, and token expiration status.\n\nThis endpoint supports the multi-device session management feature described in the User Roles and Authentication requirements. Customers can view details about their active sessions across different devices to monitor account security and identify any suspicious login activity.\n\nThe session information includes device type (mobile, tablet, desktop), browser name, operating system, approximate location based on IP address, and timestamps for session creation and last activity. This transparency helps customers ensure their account is being accessed only from authorized devices.\n\nSecurity considerations include verifying that the requesting customer owns the session being queried. The system enforces that customers can only view their own session details, preventing unauthorized access to other users' session information. Session details include last activity tracking to help customers identify inactive sessions that may need revocation.\n\nThis operation integrates with the authentication system defined in the User Roles and Authentication document, providing visibility into the JWT refresh token lifecycle, session expiration, and revocation status. Customers use this information to make informed decisions about session management and security.","parameters":[{"name":"customerId","description":"Unique identifier of the customer who owns the session","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific session to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed session information including device details, location, and activity timestamps","typeName":"IShoppingMallSession"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Customer account must exist before retrieving a specific session. Creating an address requires an authenticated customer account, which validates the customer exists in the system."},{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"An active session must exist before it can be retrieved by session ID. The seller login operation creates sessions in the shopping_mall_sessions table which demonstrates the session creation pattern needed for customer sessions."}],"accessor":["shoppingMall","customer","customers","sessions","at"]},{"specification":"This operation terminates a specific customer session by setting the is_revoked flag to true and recording the revoked_at timestamp in the shopping_mall_sessions table. It enables customers to remotely log out from a specific device by revoking the session and invalidating the associated refresh token. This is a critical security feature that allows customers to terminate sessions on lost or compromised devices.","path":"/shoppingMall/customer/customers/{customerId}/sessions/{sessionId}","method":"delete","summary":"Terminate a specific customer session and revoke associated tokens","description":"Terminates a specific active session for a customer by marking it as revoked and invalidating the associated JWT refresh token. This operation sets the is_revoked field to true and records the revoked_at timestamp, permanently preventing the session from being used for further authentication.\n\nThis endpoint implements the multi-device session management and security features described in the User Roles and Authentication requirements. Customers can remotely revoke sessions from devices they no longer use or from devices they suspect may be compromised. This provides granular control over account access across multiple devices.\n\nThe operation updates the shopping_mall_sessions table by setting is_revoked to true and recording the revoked_at timestamp. Once revoked, the session's refresh token can no longer be used to generate new access tokens, effectively terminating access from that device. The customer will need to log in again from that device to establish a new session.\n\nSecurity considerations include verifying that the requesting customer owns the session being revoked. The system enforces that customers can only revoke their own sessions, preventing unauthorized session termination. The operation logs the revocation event in the session record for security auditing.\n\nThis operation supports the security requirement that customers should be able to view all active sessions and revoke any specific session remotely, as defined in the authentication security features. Common use cases include revoking sessions after logging in from a public computer, terminating access from a lost mobile device, or clearing all sessions except the current one for security purposes.\n\nRelated operations include viewing all active sessions and the 'logout from all devices' functionality. This operation provides fine-grained control by targeting a specific session rather than terminating all sessions at once. The revocation is permanent and cannot be undone - the user must create a new session by logging in again.","parameters":[{"name":"customerId","description":"Unique identifier of the customer who owns the session to be terminated","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific session to revoke and terminate","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Session must exist before it can be terminated. A valid session must be created first through the login process to establish the session record that will be revoked."}],"accessor":["shoppingMall","customer","customers","sessions","erase"]},{"specification":"This operation retrieves a filtered and paginated list of seller accounts registered on the platform. It operates on the shopping_mall_sellers table from the Prisma schema and supports comprehensive search capabilities including filtering by account status (pending_approval, active, suspended, banned, on_hold), business name search, registration date ranges, email verification status, and document verification status. The operation enables administrators to oversee all seller accounts while sellers themselves cannot access this list. The response provides seller summary information optimized for list displays in admin dashboards and seller management interfaces.","path":"/shoppingMall/admin/sellers","method":"patch","summary":"Search and retrieve a filtered, paginated list of seller accounts from the shopping_mall_sellers table","description":"Retrieve a comprehensive filtered and paginated list of seller accounts registered on the e-commerce shopping mall platform. This operation provides advanced search capabilities for finding sellers based on multiple criteria including business name patterns, account status, verification status, registration date ranges, and approval status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Results can be sorted by registration date, business name, approval date, account status, or other relevant seller attributes in ascending or descending order. This enables efficient management and oversight of the seller ecosystem.\n\nSecurity considerations include restricting this operation to administrator roles only, as it provides access to business information across all sellers on the platform. Sellers should not be able to view other sellers' account information to maintain competitive privacy. The response filters sensitive information such as password hashes, tax IDs, and bank account details from the summary view.\n\nThis operation integrates with the shopping_mall_sellers table as defined in the Prisma schema, incorporating all available seller fields and relationships including approval status by admins, document verification status, and account lifecycle timestamps. The response includes seller summary information optimized for admin dashboard displays with key metrics like total products, order count, and performance ratings where applicable.\n\nThe operation is essential for admin dashboard functionality as specified in the Admin Dashboard requirements document, enabling administrators to review seller applications, monitor seller performance, manage account statuses, and perform bulk operations on seller accounts. It supports the seller onboarding workflow, performance monitoring, and marketplace quality control functions critical to platform governance.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, pagination settings, and sorting options for seller account retrieval","typeName":"IShoppingMallSeller.IRequest"},"responseBody":{"description":"Paginated list of seller account summary information matching the search criteria and filters","typeName":"IPageIShoppingMallSeller.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/auth/seller/password/reset/request","method":"post"},"description":"Seller accounts must be registered before they can be searched and filtered. The seller registration process creates the seller records that this search operation retrieves."}],"accessor":["shoppingMall","admin","sellers","index"]},{"specification":"This operation retrieves detailed information for a specific seller account identified by the sellerId path parameter. It operates on the shopping_mall_sellers table from the Prisma schema and returns comprehensive seller profile data including business information, verification status, account status, store customization, payment settings, and performance metrics. The operation supports role-based access where admins can view any seller's details, while sellers can only view their own account information.","path":"/shoppingMall/admin/sellers/{sellerId}","method":"get","summary":"Retrieve detailed information for a specific seller account from the shopping_mall_sellers table","description":"Retrieve complete detailed information for a specific seller account on the e-commerce shopping mall platform. This operation provides comprehensive visibility into a seller's business profile, verification status, account configuration, and operational details.\n\nThe operation returns extensive seller information including business identity (business name, business type, contact person), authentication and security details (email, email verification status, account status), business verification data (business registration number, tax ID, document verification status), financial settings (bank account information, commission rate, payout preferences), store customization (store URL slug, description, logo, banner), and operational policies (return policy, shipping policy, free shipping threshold).\n\nSecurity and authorization considerations are critical for this operation. Administrator roles have unrestricted access to view detailed information for any seller account on the platform, enabling oversight, verification, and support functions. Seller roles can only access their own account details, enforced through ownership validation that compares the authenticated seller's ID with the requested sellerId parameter. This prevents sellers from viewing competitors' business information, maintaining marketplace privacy and competitive fairness.\n\nThe response includes denormalized performance metrics and related entity counts where applicable, such as total active products, total orders fulfilled, average ratings, and account approval information including which admin approved the account and when. Sensitive information such as password hashes and full bank account numbers are excluded from the response for security, with only masked/partial information provided where needed for reference.\n\nThis operation integrates with the shopping_mall_sellers table and related entities as defined in the Prisma schema, including relationships to shopping_mall_admins (for approval tracking), shopping_mall_products (for product count), shopping_mall_orders (for fulfillment metrics), and shopping_mall_addresses (for business location). The operation supports the seller profile management, admin seller oversight, and seller dashboard initialization use cases specified in the Seller Management and Admin Dashboard requirements documents.\n\nPerformance expectations require the operation to retrieve and return seller details within 1 second under normal load conditions, with efficient database queries leveraging indexed fields such as seller ID, email, and account status. The response structure should be comprehensive yet optimized for both display and potential editing workflows.","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller account to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive detailed seller account information including business profile, verification status, financial settings, store customization, and operational policies","typeName":"IShoppingMallSeller"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller account must be created and authenticated before their detailed information can be retrieved by admin"}],"accessor":["shoppingMall","admin","sellers","at"]},{"specification":"This operation retrieves detailed information for a specific seller account identified by the sellerId path parameter. It operates on the shopping_mall_sellers table from the Prisma schema and returns comprehensive seller profile data including business information, verification status, account status, store customization, payment settings, and performance metrics. The operation supports role-based access where admins can view any seller's details, while sellers can only view their own account information.","path":"/shoppingMall/seller/sellers/{sellerId}","method":"get","summary":"Retrieve detailed information for a specific seller account from the shopping_mall_sellers table","description":"Retrieve complete detailed information for a specific seller account on the e-commerce shopping mall platform. This operation provides comprehensive visibility into a seller's business profile, verification status, account configuration, and operational details.\n\nThe operation returns extensive seller information including business identity (business name, business type, contact person), authentication and security details (email, email verification status, account status), business verification data (business registration number, tax ID, document verification status), financial settings (bank account information, commission rate, payout preferences), store customization (store URL slug, description, logo, banner), and operational policies (return policy, shipping policy, free shipping threshold).\n\nSecurity and authorization considerations are critical for this operation. Administrator roles have unrestricted access to view detailed information for any seller account on the platform, enabling oversight, verification, and support functions. Seller roles can only access their own account details, enforced through ownership validation that compares the authenticated seller's ID with the requested sellerId parameter. This prevents sellers from viewing competitors' business information, maintaining marketplace privacy and competitive fairness.\n\nThe response includes denormalized performance metrics and related entity counts where applicable, such as total active products, total orders fulfilled, average ratings, and account approval information including which admin approved the account and when. Sensitive information such as password hashes and full bank account numbers are excluded from the response for security, with only masked/partial information provided where needed for reference.\n\nThis operation integrates with the shopping_mall_sellers table and related entities as defined in the Prisma schema, including relationships to shopping_mall_admins (for approval tracking), shopping_mall_products (for product count), shopping_mall_orders (for fulfillment metrics), and shopping_mall_addresses (for business location). The operation supports the seller profile management, admin seller oversight, and seller dashboard initialization use cases specified in the Seller Management and Admin Dashboard requirements documents.\n\nPerformance expectations require the operation to retrieve and return seller details within 1 second under normal load conditions, with efficient database queries leveraging indexed fields such as seller ID, email, and account status. The response structure should be comprehensive yet optimized for both display and potential editing workflows.","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller account to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive detailed seller account information including business profile, verification status, financial settings, store customization, and operational policies","typeName":"IShoppingMallSeller"},"authorizationRole":"seller","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must be created and authenticated to view their own account details"}],"accessor":["shoppingMall","seller","sellers","at"]},{"specification":"This operation allows a seller to update their own seller account information including business details, store branding, policies, and payment settings. It operates on the shopping_mall_sellers table and enables sellers to modify their profile, store description, shipping and return policies, and other business-related information. This is restricted to the authenticated seller modifying their own account - sellers cannot update other sellers' information.","path":"/shoppingMall/seller/sellers/{sellerId}","method":"put","summary":"Update seller account information and business settings","description":"Updates the seller's business profile and account settings including store information, policies, and preferences. This operation enables sellers to maintain current business information, customize their store presence, and configure operational parameters.\n\nThe seller can update various aspects of their account including business name, contact information, store branding (logo and banner), store description, return and shipping policies, and payout preferences. Changes to business verification information such as tax ID or bank account details may require additional admin verification before taking effect.\n\nSecurity considerations include verifying that the authenticated seller is updating their own account (sellerId must match the authenticated user's seller ID). The system validates all input fields according to business rules including email format, phone number format, URL format for images, and policy text length constraints.\n\nThe operation integrates with the shopping_mall_sellers table in the Prisma schema, updating fields such as business_name, email, phone, store_description, store_logo_url, store_banner_url, return_policy, shipping_policy, free_shipping_threshold, and bank account information. Sensitive fields like password_hash are not updated through this endpoint - separate password change endpoints should be used.\n\nValidation rules include ensuring email uniqueness (if changed), validating image URLs and file size constraints (logo max 500KB, banner max 2MB), enforcing policy text length limits, and validating free shipping threshold is a positive number. The updated_at timestamp is automatically set to the current time when any field is modified.\n\nRelated API operations that might be used together include seller authentication endpoints for verifying the seller's identity, seller product management endpoints for managing the seller's catalog, and seller analytics endpoints for viewing performance metrics after profile updates.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller account to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated seller account information including business details, store settings, and policies","typeName":"IShoppingMallSeller.IUpdate"},"responseBody":{"description":"Complete updated seller account information with all current settings","typeName":"IShoppingMallSeller"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must be authenticated with a valid session before updating their account information. The session provides the seller credentials and identity verification required to authorize account modifications."}],"accessor":["shoppingMall","seller","sellers","update"]},{"specification":"This operation allows a seller to deactivate or soft-delete their seller account. It operates on the shopping_mall_sellers table by setting the deleted_at timestamp, marking the account as deleted while preserving all historical data for order history, financial records, and compliance purposes. The seller's products will be automatically hidden from customers when the account is deleted. This is restricted to the authenticated seller deleting their own account.","path":"/shoppingMall/seller/sellers/{sellerId}","method":"delete","summary":"Deactivate seller account with soft deletion","description":"Deactivates the seller's account by performing a soft deletion, marking the account as deleted while preserving all historical data for legal compliance and audit purposes. This operation is typically used when a seller wishes to close their business on the platform or when an admin needs to remove a seller for policy violations.\n\nWhen a seller account is deleted, the system sets the deleted_at timestamp in the shopping_mall_sellers table, which effectively deactivates the account while maintaining data integrity for past transactions. All products owned by the seller are automatically hidden from customer view, preventing new orders. However, existing order history, financial transaction records, seller payout history, and customer reviews remain intact for compliance with tax regulations and legal record-keeping requirements.\n\nSecurity considerations include strict verification that the authenticated user is the seller who owns the account being deleted (sellerId must match authenticated seller's ID), or that an admin with appropriate permissions is performing the deletion. The operation validates that all pending orders from the seller have been fulfilled or properly cancelled before allowing account deletion. If the seller has pending payouts or unresolved disputes, the deletion may be blocked pending resolution.\n\nThe soft deletion mechanism updates the deleted_at field in the shopping_mall_sellers table with the current timestamp. This approach allows the system to filter out deleted sellers from active operations while preserving complete historical records. Related entities such as products (shopping_mall_products), orders (shopping_mall_orders), and reviews maintain their relationships to the deleted seller through foreign key references, ensuring order history displays correctly even after seller account deletion.\n\nBusiness logic considerations include automatically deactivating all seller products by setting their status to inactive, cancelling any pending seller confirmations for new orders, processing final payouts for completed orders, and notifying customers with pending orders from this seller. The seller's store page becomes inaccessible to customers, but historical order details continue to reference the seller's business name as it existed at the time of the order.\n\nValidation rules enforce that sellers cannot delete their accounts if they have active orders in 'confirmed', 'processing', or 'preparing_shipment' states. All orders must be either delivered, cancelled, or refunded before account deletion is permitted. Additionally, the seller must have zero pending payout balance or agree to forfeit pending payouts (which is unusual and should trigger manual admin review).\n\nRelated API operations include seller account retrieval to view account status before deletion, seller order management to ensure all orders are fulfilled, and seller payout retrieval to verify all financial settlements are complete. After deletion, sellers can contact platform support to potentially reactivate accounts within a grace period (typically 90 days), after which permanent deletion may occur.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller account to deactivate","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must be authenticated with a valid session before deactivating their account. The session establishes the seller's identity and ensures only the account owner can delete their own account."}],"accessor":["shoppingMall","seller","sellers","erase"]},{"specification":"This operation authenticates a seller and creates a new session with JWT tokens. It validates seller credentials (email and password) against the shopping_mall_sellers table, verifies the account is active and email is verified, and generates access and refresh tokens for API authentication. The operation implements the complete seller login workflow including failed attempt tracking, account lockout enforcement, and multi-device session management. Upon successful authentication, it creates a session record in shopping_mall_sessions with device information, IP address, and refresh token. The session enables the seller to access product management, order fulfillment, and seller dashboard features. This operation is essential for seller authentication and must enforce all security policies including password validation, account status checks, and rate limiting to prevent brute force attacks.","path":"/shoppingMall/sellers/{sellerId}/sessions","method":"patch","summary":"Authenticate seller and create new session with JWT tokens","description":"Authenticate a seller user and establish a new authenticated session by validating credentials and generating JWT access and refresh tokens. This operation implements the complete seller login workflow as specified in the User Roles and Authentication requirements document.\n\nThe operation validates the seller's email and password against the hashed password stored in the shopping_mall_sellers table. It enforces critical security policies including account status verification (account must be active, not suspended or banned), email verification status (email_verified must be true), and account lockout rules (account_locked_until must be null or expired).\n\nFailed login attempt tracking is implemented through the failed_login_attempts counter and failed_login_window_start_at timestamp. The system enforces the business rule of allowing 5 failed attempts within a 15-minute window before locking the account for 30 minutes. Upon successful authentication, the failed_login_attempts counter is reset to zero.\n\nUpon successful credential validation, the operation generates a JWT access token (30-minute expiration) and refresh token (30-day expiration) following the token specifications defined in the authentication requirements. The access token payload includes sellerId, email, role ('seller'), and permissions. The refresh token is stored in a new shopping_mall_sessions record with user_type='seller', device information parsed from the user agent, IP address, and session metadata.\n\nThe operation supports multi-device concurrent sessions as specified in the session management requirements. Each login creates a new session record, and sellers can maintain multiple active sessions across different devices simultaneously. Session records include device_type, browser_name, operating_system, and approximate_location for security monitoring and display in the seller's active sessions list.\n\nSecurity considerations include rate limiting to prevent brute force attacks, generic error messages that don't reveal whether an email exists, HTTPS-only transmission of credentials and tokens, and comprehensive audit logging of all authentication attempts. The operation implements the complete authentication flow diagram specified in section 2.2.3 of the User Roles and Authentication document.\n\nThis operation integrates with the seller management system to enable access to seller dashboard, product listing management, inventory control, order fulfillment, and sales analytics features. It is a prerequisite for all seller-specific operations on the platform.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller account attempting to authenticate","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Seller login credentials including email and password for authentication","typeName":"IShoppingMallSeller.ILogin"},"responseBody":{"description":"Authentication response with JWT access and refresh tokens, seller profile information, and session details","typeName":"IShoppingMallSeller.ILoginResponse"},"authorizationRoles":[],"name":"patchBySellerid","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/seller/verification/confirm","method":"post"},"description":"Seller email must be verified before authentication is allowed. The login operation validates email_verified is true, which is set by the email verification confirmation endpoint."}],"accessor":["shoppingMall","sellers","sessions","patchBySellerid"]},{"specification":"This operation retrieves detailed information about a specific seller session including device details, location, activity timestamps, and session validity status. It validates the session belongs to the authenticated seller and returns comprehensive session metadata for security monitoring and multi-device session management. The operation enables sellers to view their active sessions across different devices and supports the 'logout from all devices' and individual session revocation features specified in the authentication requirements. This is critical for session security and allows sellers to monitor and manage their account access.","path":"/shoppingMall/seller/sellers/{sellerId}/sessions/{sessionId}","method":"get","summary":"Retrieve detailed information about a specific seller session","description":"Retrieve comprehensive details about a specific seller session including device information, location data, activity timestamps, and session validity status. This operation supports the multi-device session management capabilities specified in section 7.2 of the User Roles and Authentication requirements document.\n\nThe operation queries the shopping_mall_sessions table to retrieve the session record matching the provided sessionId and validates that the session belongs to the authenticated seller (user_type='seller' and seller_id matches the authenticated seller). This ownership validation ensures sellers can only view their own sessions, implementing the least privilege security principle.\n\nThe returned session information includes comprehensive metadata captured during session creation and maintained throughout the session lifecycle. Device information parsed from the user agent string includes device_type (mobile, tablet, desktop), browser_name (Chrome, Firefox, Safari, etc.), operating_system (Windows, macOS, iOS, Android, Linux), and a user-friendly device_name for display in the active sessions list.\n\nSecurity-related information includes the IP address from which the session was initiated, approximate_location based on IP geolocation (e.g., 'New York, US'), and security status indicators. The is_revoked boolean indicates whether the session has been manually terminated, and revoked_at timestamp records when revocation occurred. The refresh_token_expires_at timestamp shows when the refresh token will expire, and last_activity_at tracks the most recent session activity.\n\nThis operation enables the seller to view all active sessions feature specified in the session management requirements. Sellers can review their active sessions to identify unfamiliar devices or locations, which helps detect unauthorized access. The detailed device and location information assists sellers in recognizing their own devices versus potential security threats.\n\nThe session detail information is essential for implementing the 'revoke specific session' and 'logout from all devices' features. Sellers use this data to identify which sessions to terminate when they detect suspicious activity or want to sign out from devices they no longer use.\n\nSession validity is determined by checking that is_revoked is false and refresh_token_expires_at is in the future. The operation returns complete session state including whether the session is currently valid, expired, or revoked, enabling the seller dashboard to display accurate session status.\n\nThis operation integrates with the session security features specified in the authentication requirements, including suspicious login detection and security alert notifications. When a seller reviews their sessions and identifies an unrecognized device or location, they can use the session termination features to revoke that session immediately.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the session","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific session to retrieve details for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed session information including device details, location, activity timestamps, refresh token expiration, revocation status, and session validity indicators","typeName":"IShoppingMallSession"},"authorizationRoles":["seller"],"name":"at","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"A seller session must be created before it can be retrieved. The session record with the specified sessionId must exist in the shopping_mall_sessions table."}],"accessor":["shoppingMall","seller","sellers","sessions","at"]},{"specification":"This operation authenticates a seller and creates a new session with JWT tokens. It validates seller credentials (email and password) against the shopping_mall_sellers table, verifies the account is active and email is verified, and generates access and refresh tokens for API authentication. The operation implements the complete seller login workflow including failed attempt tracking, account lockout enforcement, and multi-device session management. Upon successful authentication, it creates a session record in shopping_mall_sessions with device information, IP address, and refresh token. The session enables the seller to access product management, order fulfillment, and seller dashboard features. This operation is essential for seller authentication and must enforce all security policies including password validation, account status checks, and rate limiting to prevent brute force attacks.","path":"/shoppingMall/sellers/sessions","method":"post","summary":"Authenticate seller and create new session with JWT tokens","description":"Authenticate a seller user and establish a new authenticated session by validating credentials and generating JWT access and refresh tokens. This operation implements the complete seller login workflow as specified in the User Roles and Authentication requirements document.\n\nThe operation validates the seller's email and password against the hashed password stored in the shopping_mall_sellers table. It enforces critical security policies including account status verification (account must be active, not suspended or banned), email verification status (email_verified must be true), and account lockout rules (account_locked_until must be null or expired).\n\nFailed login attempt tracking is implemented through the failed_login_attempts counter and failed_login_window_start_at timestamp. The system enforces the business rule of allowing 5 failed attempts within a 15-minute window before locking the account for 30 minutes. Upon successful authentication, the failed_login_attempts counter is reset to zero.\n\nUpon successful credential validation, the operation generates a JWT access token (30-minute expiration) and refresh token (30-day expiration) following the token specifications defined in the authentication requirements. The access token payload includes sellerId, email, role ('seller'), and permissions. The refresh token is stored in a new shopping_mall_sessions record with user_type='seller', device information parsed from the user agent, IP address, and session metadata.\n\nThe operation supports multi-device concurrent sessions as specified in the session management requirements. Each login creates a new session record, and sellers can maintain multiple active sessions across different devices simultaneously. Session records include device_type, browser_name, operating_system, and approximate_location for security monitoring and display in the seller's active sessions list.\n\nSecurity considerations include rate limiting to prevent brute force attacks, generic error messages that don't reveal whether an email exists, HTTPS-only transmission of credentials and tokens, and comprehensive audit logging of all authentication attempts. The operation implements the complete authentication flow diagram specified in section 2.2.3 of the User Roles and Authentication document.\n\nThis operation integrates with the seller management system to enable access to seller dashboard, product listing management, inventory control, order fulfillment, and sales analytics features. It is a prerequisite for all seller-specific operations on the platform.","parameters":[],"requestBody":{"description":"Seller login credentials including email and password for authentication","typeName":"IShoppingMallSeller.ILogin"},"responseBody":{"description":"Authentication response with JWT access and refresh tokens, seller profile information, and session details","typeName":"IShoppingMallSeller.ILoginResponse"},"authorizationRole":null,"authorizationType":null,"name":"post","prerequisites":[],"accessor":["shoppingMall","sellers","sessions","post"]},{"specification":"This operation retrieves detailed information about a specific seller session including device details, location, activity timestamps, and session validity status. It validates the session belongs to the authenticated seller and returns comprehensive session metadata for security monitoring and multi-device session management. The operation enables sellers to view their active sessions across different devices and supports the 'logout from all devices' and individual session revocation features specified in the authentication requirements. This is critical for session security and allows sellers to monitor and manage their account access.","path":"/shoppingMall/sellers/{sellerId}/sessions/{sessionId}","method":"get","summary":"Retrieve detailed information about a specific seller session","description":"Retrieve comprehensive details about a specific seller session including device information, location data, activity timestamps, and session validity status. This operation supports the multi-device session management capabilities specified in section 7.2 of the User Roles and Authentication requirements document.\n\nThe operation queries the shopping_mall_sessions table to retrieve the session record matching the provided sessionId and validates that the session belongs to the authenticated seller (user_type='seller' and seller_id matches the authenticated seller). This ownership validation ensures sellers can only view their own sessions, implementing the least privilege security principle.\n\nThe returned session information includes comprehensive metadata captured during session creation and maintained throughout the session lifecycle. Device information parsed from the user agent string includes device_type (mobile, tablet, desktop), browser_name (Chrome, Firefox, Safari, etc.), operating_system (Windows, macOS, iOS, Android, Linux), and a user-friendly device_name for display in the active sessions list.\n\nSecurity-related information includes the IP address from which the session was initiated, approximate_location based on IP geolocation (e.g., 'New York, US'), and security status indicators. The is_revoked boolean indicates whether the session has been manually terminated, and revoked_at timestamp records when revocation occurred. The refresh_token_expires_at timestamp shows when the refresh token will expire, and last_activity_at tracks the most recent session activity.\n\nThis operation enables the seller to view all active sessions feature specified in the session management requirements. Sellers can review their active sessions to identify unfamiliar devices or locations, which helps detect unauthorized access. The detailed device and location information assists sellers in recognizing their own devices versus potential security threats.\n\nThe session detail information is essential for implementing the 'revoke specific session' and 'logout from all devices' features. Sellers use this data to identify which sessions to terminate when they detect suspicious activity or want to sign out from devices they no longer use.\n\nSession validity is determined by checking that is_revoked is false and refresh_token_expires_at is in the future. The operation returns complete session state including whether the session is currently valid, expired, or revoked, enabling the seller dashboard to display accurate session status.\n\nThis operation integrates with the session security features specified in the authentication requirements, including suspicious login detection and security alert notifications. When a seller reviews their sessions and identifies an unrecognized device or location, they can use the session termination features to revoke that session immediately.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the session","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific session to retrieve details for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed session information including device details, location, activity timestamps, refresh token expiration, revocation status, and session validity indicators","typeName":"IShoppingMallSession"},"authorizationRole":"seller","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must be authenticated with an active session before retrieving session details. The login operation creates the session record that this endpoint retrieves."}],"accessor":["shoppingMall","sellers","sessions","at"]},{"specification":"This operation terminates a specific active session for a seller account, effectively logging out the seller from that particular device or browser session. The operation requires both the seller identifier and the specific session identifier to target the exact session to terminate. This is part of the multi-device session management system that allows sellers to remotely revoke access from specific devices, for example if they suspect unauthorized access or want to log out from a previously used device. The operation is useful for security purposes when sellers want to end sessions they no longer recognize or need to secure their account by removing old sessions. The session termination process involves revoking the refresh token associated with that session, preventing any future token refresh operations from that session. The session record is marked as revoked and the revocation timestamp is recorded for audit purposes.","path":"/shoppingMall/seller/sellers/{sellerId}/sessions/{sessionId}","method":"delete","summary":"Terminate a specific seller session to remotely log out from a device","description":"Terminates a specific active session for a seller account, enabling remote logout from individual devices or browsers. This operation is a critical security feature that allows sellers to manage their active sessions across multiple devices and revoke access from sessions they no longer recognize or need.\n\nWhen a seller is logged in across multiple devices (desktop, mobile, tablet), each login creates a separate session record with a unique session identifier and refresh token. This operation targets a specific session by its ID, allowing granular control over which device or browser session to terminate without affecting other active sessions.\n\nThe session termination process involves marking the session as revoked by setting is_revoked to true and recording the revocation timestamp in revoked_at. The associated JWT refresh token is invalidated immediately, preventing any future token refresh operations from that session. The seller's access token for that session will expire naturally (within 30 minutes) and cannot be renewed, effectively logging them out from that specific device.\n\nThis operation is particularly valuable for security scenarios: if a seller suspects unauthorized access, they can view all active sessions in their account settings and remotely terminate suspicious sessions. Similarly, if a seller used a public or shared computer and forgot to log out, they can later revoke that session from a trusted device.\n\nThe operation validates that the session belongs to the specified seller before allowing termination. Sellers cannot terminate sessions belonging to other sellers, customers, or admins. The session must exist and belong to the authenticated seller for the operation to succeed.\n\nUpon successful termination, the seller receives confirmation and the session immediately becomes unusable for authentication. The session record is preserved with the revoked status for security audit purposes. All session termination events are logged with timestamp and the seller who initiated the termination for compliance and security monitoring.\n\nThis operation integrates with the authentication system defined in the User Roles and Authentication requirements, specifically supporting the multi-device session management and remote session revocation capabilities specified for seller accounts.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller whose session is being terminated","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific session to terminate","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"seller","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller must have an authenticated session before that session can be terminated. The session being deleted must exist and be associated with the seller account."}],"accessor":["shoppingMall","seller","sellers","sessions","erase"]},{"specification":"This operation retrieves a filtered and paginated list of administrator accounts across the entire platform. Administrators need to search, filter, and manage admin accounts for user management, permission assignment, and security auditing purposes. The operation supports comprehensive filtering by admin status, role level, account activity, creation date ranges, and text search across admin names and emails. This enables efficient discovery and management of admin accounts, particularly important for super admins who need to oversee all admin users, manage role assignments, monitor admin activity, and maintain platform security through proper access control. The operation returns paginated results with detailed admin information including role levels, activity status, verification status, and security settings. This is a primary management interface for admin account oversight, requiring PATCH method to support complex search and filter criteria that exceed URL parameter limitations.","path":"/shoppingMall/admin/admins","method":"patch","summary":"Search and retrieve a filtered, paginated list of administrator accounts","description":"Retrieves a comprehensive, filtered, and paginated list of all administrator accounts on the platform. This operation is essential for super admins and authorized administrators to search, discover, and manage admin users across the entire system.\n\nAdministrator accounts have privileged access to platform functions including order management, product moderation, user management, dispute resolution, and system configuration. This operation provides the necessary visibility and search capabilities to effectively manage this critical user group.\n\nThe operation supports extensive filtering capabilities to help administrators find specific admin accounts or groups of admins based on various criteria. Administrators can filter by role level (super_admin, order_manager, content_moderator, support_admin) to view admins with specific permission sets. Status filtering enables viewing active admins, inactive accounts, or admins with unverified emails. Date range filtering helps identify recently created admin accounts or accounts created during specific periods for audit purposes.\n\nText search functionality allows searching across admin names and email addresses using partial matching, making it easy to locate specific administrators even with incomplete information. For example, searching for 'john' would return all admins with 'john' in their name or email address.\n\nThe operation returns paginated results to handle potentially large admin user bases efficiently. Each result includes comprehensive admin information: unique identifier, email address, full name, assigned role level, account status (active/inactive), email verification status, multi-factor authentication enablement status, last login timestamp, account creation date, and information about which admin created this account.\n\nSecurity considerations include role-based access control where only authorized admins (typically super_admins) can access this operation. The operation logs all admin account searches for security auditing. Sensitive authentication data like password hashes, MFA secrets, and password reset tokens are never included in the response to maintain security.\n\nPagination parameters include page number, page size (typically 20-50 results per page), and sorting options (by creation date, name, last login, or role level). The response includes total count of matching admins, total pages, current page number, and the array of admin records.\n\nThis operation integrates with the user roles and authentication system defined in the requirements, specifically supporting the admin account management capabilities where super admins can oversee all admin users, manage role assignments, and maintain proper access control across the platform.\n\nThe operation is critical for maintaining platform security, ensuring proper segregation of duties among admin roles, monitoring admin activity patterns, and conducting security audits when suspicious activity is detected.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering administrator accounts","typeName":"IShoppingMallAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrator accounts matching the search criteria with comprehensive account information","typeName":"IPageIShoppingMallAdmin.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[],"accessor":["shoppingMall","admin","admins","index"]},{"specification":"This operation retrieves detailed information about a specific administrator account by their unique identifier. It operates on the shopping_mall_admins table from the Prisma schema and returns comprehensive admin profile data including email, name, role level, account status, authentication settings, and security information. This endpoint is restricted to authenticated admins who need to view admin account details for account management, security auditing, or profile review purposes.","path":"/shoppingMall/admin/admins/{adminId}","method":"get","summary":"Retrieve detailed information for a specific administrator account","description":"This operation fetches complete administrator account information from the shopping_mall_admins table for a specified admin ID. It is used by authorized admins to view detailed profile information, account status, role assignments, and security settings for platform administrators.\n\nThe endpoint returns comprehensive admin data including email address, full name, assigned role level (super_admin, order_manager, content_moderator, or support_admin), account activity status, email verification status, multi-factor authentication configuration, last login information, and account timestamps. The response DTO (IShoppingMallAdmin) is specifically designed to exclude sensitive authentication fields for security compliance.\n\nSecurity considerations include role-based access control ensuring only authorized admins can view admin account details. The operation enforces authentication requirements and validates that the requesting user has appropriate admin permissions. Sensitive authentication fields are explicitly excluded from the response DTO including: password_hash, mfa_secret, password_history, password_reset_token, password_reset_expires_at, email_verification_token, email_verification_sent_at, account_locked_until, failed_login_attempts, and failed_login_window_start_at. These exclusions prevent exposure of authentication secrets and security-sensitive data.\n\nThe response includes safe account information useful for administration: account identifiers, contact information, role assignments, account status indicators, verification states, last login metadata (timestamp and IP), and account lifecycle timestamps (created_at, updated_at). This data supports administrative oversight without compromising account security.\n\nThis operation is typically used in admin management interfaces where super admins need to review other admin accounts, audit admin activities, verify role assignments, check account security status, or investigate login and authentication events. The data supports administrative oversight, security monitoring, and account lifecycle management.\n\nRelated operations include updating admin information (PUT /admins/{adminId}), listing all admins for account management, and creating new admin accounts through admin-initiated registration workflows. This operation supports the admin account management capabilities defined in the Admin Dashboard requirements document.","parameters":[{"name":"adminId","description":"Unique identifier of the target administrator account","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete administrator account information with sensitive authentication fields excluded for security","typeName":"IShoppingMallAdmin"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[],"accessor":["shoppingMall","admin","admins","at"]},{"specification":"This operation updates an existing administrator account's profile information including name, role level, account status, email verification status, and account activity settings. It operates on the shopping_mall_admins table from the Prisma schema and allows authorized admins (specifically super_admin role) to modify admin account details. Password management is handled through separate dedicated endpoints with proper validation and hashing workflows. The operation validates all update data, enforces business rules for role assignments, and maintains audit trails of admin account modifications.","path":"/shoppingMall/admin/admins/{adminId}","method":"put","summary":"Update an existing administrator account's profile and settings","description":"This operation modifies administrator account information in the shopping_mall_admins table for a specified admin ID. It enables authorized administrators (specifically those with super_admin role level) to update admin profiles, change role assignments, modify account status, and manage email verification states. Password management is explicitly excluded from this operation and handled through dedicated password update endpoints.\n\nThe endpoint accepts partial or complete update data for admin accounts including email address changes, full name modifications, role level reassignments (super_admin, order_manager, content_moderator, support_admin), account status changes (activating or deactivating admins via is_active field), email verification status updates (email_verified field), last login information, and MFA configuration status (mfa_enabled field). The request DTO (IShoppingMallAdmin.IUpdate) is specifically designed to exclude all authentication-sensitive fields for security compliance.\n\nPassword management is handled through separate dedicated endpoints with proper security workflows. Password changes require validation of current password, complexity checking (8+ characters with uppercase, lowercase, number, special character), password history verification (cannot reuse last 5 passwords), secure bcrypt/Argon2 hashing, and complete audit trail logging. These workflows cannot be achieved through direct field updates and must use dedicated password management endpoints (e.g., PUT /admins/{adminId}/password).\n\nThe request DTO explicitly excludes all authentication-sensitive fields to prevent security bypasses: password_hash, mfa_secret, password_history, password_reset_token, password_reset_expires_at, email_verification_token, email_verification_sent_at, account_locked_until, failed_login_attempts, failed_login_window_start_at, and password_changed_at. These fields are managed through dedicated security workflows and administrative actions, not direct profile updates.\n\nSecurity considerations include strict role-based access control. While the endpoint requires admin authentication, business logic should additionally verify the requesting admin has super_admin role level, as only super admins should modify other admin accounts according to the platform's hierarchical admin structure defined in the requirements. The operation validates that role changes comply with business rules: super_admins cannot demote themselves to prevent lockout, and at least one super_admin must remain active on the platform. Email changes trigger re-verification workflows requiring the admin to verify the new email address before it becomes effective.\n\nValidation rules enforce data integrity including email uniqueness across admins (email field has unique constraint in schema), valid role_level values from the predefined set (super_admin, order_manager, content_moderator, support_admin), boolean validation for is_active and email_verified fields, and proper timestamp handling for datetime fields like last_login_at.\n\nThe operation automatically updates the updated_at timestamp to track modification time and maintains audit trails by logging all admin account modifications through the order status history and admin activity logging systems. Related business rules from the requirements include role hierarchy enforcement (super_admin has all permissions, other roles have restricted access), account status management (inactive admins cannot log in), and email verification requirements for account activation.\n\nThis operation is typically used in admin account management interfaces where super admins need to update admin profiles, reassign roles when responsibilities change, activate or deactivate admin access for onboarding/offboarding, update contact information, toggle MFA requirements, or correct account information. The operation supports the comprehensive admin management capabilities defined in the Admin Dashboard requirements and User Roles and Authentication requirements.\n\nRelated operations include retrieving admin details (GET /admins/{adminId}) for viewing current information before updates, listing all admin accounts for management overview, creating new admin accounts (super_admin privilege only), dedicated password change endpoints for security-validated password updates, and viewing admin activity audit logs for tracking account modifications and security monitoring.","parameters":[{"name":"adminId","description":"Unique identifier of the administrator account to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated administrator account information excluding authentication fields - supports profile, role, and status updates only","typeName":"IShoppingMallAdmin.IUpdate"},"responseBody":{"description":"Updated administrator account information reflecting the applied changes with sensitive fields excluded","typeName":"IShoppingMallAdmin"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[],"accessor":["shoppingMall","admin","admins","update"]},{"specification":"This operation permanently removes an admin user account from the platform. It is designed for hard deletion scenarios where an admin account must be completely removed from the system. This operation is restricted to super administrators who have full platform access and the authority to manage other admin accounts. The deletion is immediate and irreversible, removing the admin record from the shopping_mall_admins table. When an admin is deleted, all related records that reference this admin through foreign keys with ON DELETE CASCADE will be automatically handled according to the database schema's cascade rules. This includes sessions, address records, audit trail entries, and other admin-initiated actions. The operation ensures data integrity by leveraging database-level cascade deletion defined in the Prisma schema. This is a critical security operation that should only be performed after careful consideration and verification of the admin account's status. Admin accounts that have created other admins will have their relationships preserved through the self-referential created_by_admin_id foreign key structure. The operation validates that the requesting super admin has sufficient permissions and that the target admin account exists before proceeding with deletion. Deletion is logged in the audit trail for compliance and security monitoring purposes, recording which super admin performed the deletion and when.","path":"/shoppingMall/admin/admins/{adminId}","method":"delete","summary":"Permanently delete an admin user account from the platform","description":"This operation permanently removes an administrator account from the shopping mall platform. It performs a hard delete operation, completely removing the admin record from the shopping_mall_admins table along with all associated data through cascade deletion rules defined in the database schema.\n\nThis is a highly privileged operation restricted exclusively to super administrators with full platform access. The deletion is immediate and cannot be reversed, making this a critical security operation requiring careful verification before execution. Before deletion, the system validates that the requesting admin has super_admin role level and that the target admin account exists.\n\nWhen an admin account is deleted, the database automatically handles related records through ON DELETE CASCADE foreign key constraints. This includes all sessions associated with the admin (shopping_mall_sessions), address records (shopping_mall_addresses), and any audit trail entries where the admin appears as an actor (shopping_mall_order_status_history, shopping_mall_cancellations, shopping_mall_refund_requests, shopping_mall_refunds, shopping_mall_inventory_transactions). The self-referential relationship through created_by_admin_id means that admins created by the deleted admin will have their created_by_admin_id field set to null, preserving those admin accounts while losing the creation reference.\n\nThis operation is essential for administrative account lifecycle management, allowing removal of compromised accounts, terminated administrators, or accounts that are no longer needed. The deletion is logged in the platform's audit trail with details including which super admin performed the deletion, the timestamp, and the target admin's identifier for compliance and security monitoring.\n\nImportant security considerations include verifying the requesting admin's identity through JWT token validation, ensuring the operation cannot be used to delete one's own account (self-deletion prevention), and confirming that at least one super admin remains active on the platform after deletion to prevent complete administrative lockout.","parameters":[{"name":"adminId","description":"Unique identifier of the admin account to be permanently deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","admins","erase"]},{"specification":"This operation retrieves all active sessions for a specific admin user, providing comprehensive session management capabilities. It returns a filtered list of sessions belonging to the target admin across all devices and browsers where they are currently logged in. The operation supports session monitoring, security auditing, and multi-device session management by displaying device information, login timestamps, IP addresses, and activity status for each active session. This is essential for security monitoring, allowing admins to review where their account is currently accessed from and enabling remote session revocation if suspicious activity is detected. The operation is restricted to admin users and validates that the requesting admin has permission to view the target admin's sessions (either viewing their own sessions or a super admin viewing another admin's sessions). The response includes complete session metadata such as device type, browser information, operating system, approximate location, last activity timestamp, and session creation time. Sessions that have been revoked or expired are excluded from the results to focus on currently active access points.","path":"/shoppingMall/admin/admins/{adminId}/sessions","method":"patch","summary":"Retrieve all active sessions for a specific admin user","description":"This operation retrieves a comprehensive list of all active sessions associated with a specific administrator account. It provides detailed session management and security monitoring capabilities by returning information about every device and browser where the admin is currently logged in. This functionality is critical for security auditing, multi-device session tracking, and detecting potentially unauthorized access to admin accounts.\n\nThe operation returns an array of session records from the shopping_mall_sessions table where the admin_id matches the specified adminId parameter, user_type is 'admin', is_revoked is false, and refresh_token_expires_at is in the future (indicating active, non-expired sessions). Each session record includes comprehensive metadata about the login context, device information, and activity timeline.\n\nThe response includes the following session details for each active session: session ID, refresh token expiration timestamp, IP address from which the session originated, complete user agent string, detected device type (mobile, tablet, desktop), user-friendly device name (e.g., 'Chrome on Windows', 'Safari on iPhone'), browser name and version, operating system, approximate geographic location based on IP address, last activity timestamp showing when the session was last used, and session creation timestamp indicating when the admin logged in from that device.\n\nThis operation supports important security use cases including reviewing all current login locations, identifying suspicious or unrecognized devices, monitoring session activity patterns, and enabling informed decisions about which sessions to revoke. For example, if an admin sees a session from an unfamiliar location or device, they can use this information to determine whether to revoke that specific session through a separate session revocation endpoint.\n\nAccess control for this operation validates that the requesting admin has permission to view the target admin's sessions. Admins can always view their own sessions, while super admins can view sessions for any admin account on the platform. This hierarchical permission model ensures appropriate access control while enabling security oversight.\n\nThe operation supports optional filtering and pagination through the request body, allowing searches for sessions by device type, location, IP address, or activity timeframe. This is particularly useful for admins with many concurrent sessions or when investigating security incidents. The response is sorted by last activity timestamp in descending order, showing the most recently used sessions first for relevance.","parameters":[{"name":"adminId","description":"Unique identifier of the admin user whose sessions are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional filtering and pagination parameters for session retrieval including device type filter, location filter, date range, and pagination settings","typeName":"IShoppingMallAdminSession.IRequest"},"responseBody":{"description":"Paginated list of active admin sessions with device information, login timestamps, IP addresses, and activity status","typeName":"IPageIShoppingMallAdminSession"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[],"accessor":["shoppingMall","admin","admins","sessions","index"]},{"specification":"This operation retrieves detailed information about a specific active session for an authenticated admin user. The endpoint is designed to provide complete session metadata including device information, authentication tokens, activity timestamps, and security-related data such as IP address and location. This enables admins to monitor their own active sessions across multiple devices and identify any suspicious login activity. The operation validates that the requesting admin is accessing their own session data (ownership verification) to prevent unauthorized access to other admins' session information. The session data returned includes technical details necessary for security auditing, session revocation decisions, and multi-device session management. This operation integrates with the shopping_mall_sessions table defined in the Prisma schema, specifically retrieving sessions where admin_id matches the authenticated admin and user_type is 'admin'. The session must not be revoked (is_revoked = false) and should not be expired (refresh_token_expires_at > current timestamp) to be considered active and retrievable.","path":"/shoppingMall/admin/admins/{adminId}/sessions/{sessionId}","method":"get","summary":"Retrieve detailed information for a specific admin session","description":"This endpoint retrieves comprehensive session information for a specific active admin session, enabling administrators to view details about their current and past login sessions across different devices and browsers. The operation is designed for security monitoring and multi-device session management purposes.\n\nThe session data provides critical security information including the device type, browser name, operating system, IP address, approximate geographic location based on IP, and the timestamp of last activity. This information helps admins identify unauthorized access attempts, verify their own login locations, and make informed decisions about which sessions to keep active or revoke.\n\nThe response includes authentication token metadata such as refresh token expiration timestamp, session creation time, and revocation status. This enables admins to understand when their session will expire and whether it has been manually revoked. The session detail view is essential for implementing the multi-device session management feature described in the authentication requirements document.\n\nSecurity considerations include strict ownership validation: admins can only retrieve session details for their own sessions, not sessions belonging to other admins. The system validates that the adminId path parameter matches the authenticated admin's user ID and that the session belongs to that admin before returning any data. Unauthorized access attempts are logged for security auditing.\n\nThis operation is closely related to session revocation functionality. After retrieving session details and identifying sessions the admin wants to terminate (e.g., unrecognized devices or old sessions), the admin can use the DELETE operation on the same endpoint to revoke specific sessions remotely.\n\nThe session information returned is sourced directly from the shopping_mall_sessions table in the Prisma schema, which tracks all active and revoked sessions with complete metadata including device fingerprinting, authentication tokens, and activity timestamps. Only sessions with user_type='admin' and matching admin_id are retrievable through this endpoint.","parameters":[{"name":"adminId","description":"Unique identifier of the authenticated admin user who owns the session","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific admin session to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete session details including device information, authentication tokens, activity timestamps, and security metadata","typeName":"IShoppingMallAdminSession"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[],"accessor":["shoppingMall","admin","admins","sessions","at"]},{"specification":"This operation revokes (terminates) a specific active session for an authenticated admin user, effectively logging out that particular device or browser session. The endpoint implements the session revocation feature described in the authentication requirements, allowing admins to remotely terminate sessions from devices they no longer want to have access. This is a critical security feature enabling admins to revoke compromised sessions, sign out from lost or stolen devices, or clean up old sessions from devices they no longer use. The operation performs ownership validation to ensure admins can only revoke their own sessions, not sessions belonging to other admins. When a session is revoked, the system updates the is_revoked flag to true, sets the revoked_at timestamp to the current time, and invalidates the associated refresh token, preventing any further token refresh operations using that session. The revoked session can no longer be used to generate new access tokens, effectively terminating the authentication state for that device. This operation integrates with the shopping_mall_sessions table in the Prisma schema, specifically updating the session record where admin_id matches the authenticated admin, user_type is 'admin', and the session ID matches the path parameter.","path":"/shoppingMall/admin/admins/{adminId}/sessions/{sessionId}","method":"delete","summary":"Revoke a specific admin session to terminate authentication for that device","description":"This endpoint enables administrators to revoke specific active sessions, effectively signing out from individual devices or browsers remotely. This is a critical security feature for managing multi-device authentication and protecting admin accounts from unauthorized access.\n\nThe session revocation process is designed to support the 'logout from specific device' use case described in the authentication requirements. When an admin identifies a session they want to terminate—whether it's an old session from a device they no longer use, a session from an unrecognized location, or a potentially compromised session—they can revoke it using this endpoint without affecting their other active sessions.\n\nUpon successful revocation, the system performs several important actions to ensure complete session termination. First, it updates the session record in the shopping_mall_sessions table by setting is_revoked to true and recording the revocation timestamp in revoked_at. This permanently marks the session as invalid. Second, it invalidates the associated refresh token, preventing any future attempts to generate new access tokens using that session's refresh token. The revoked session immediately becomes unusable for authentication purposes.\n\nSecurity validation is paramount for this operation. The system strictly enforces ownership verification: admins can only revoke their own sessions, never sessions belonging to other administrators. The endpoint validates that the adminId path parameter matches the authenticated admin's user ID extracted from the JWT access token, and that the session with the given sessionId belongs to that admin. Any attempt to revoke another admin's session results in a 403 Forbidden response and is logged as a security event.\n\nThe operation provides immediate feedback to the client. Unlike the soft delete pattern used in many other entities, session revocation uses a revocation flag mechanism (is_revoked boolean and revoked_at timestamp) to maintain the session record for audit trail purposes while making it completely unusable for authentication. This supports security auditing requirements and enables admins to review their historical sessions including which ones were manually revoked and when.\n\nThis operation integrates with the broader session management system defined in the authentication requirements document. After revoking a session, that session will no longer appear in the admin's active sessions list, though it may be retained in historical session views for security audit purposes. The revocation is permanent and irreversible—once revoked, a session cannot be reactivated; the admin must log in again from that device to create a new session.\n\nCommon use cases for this endpoint include: removing sessions from lost or stolen devices, terminating sessions from untrusted networks or locations, cleaning up old sessions that are no longer needed, and responding to security alerts about suspicious session activity. The session revocation feature complements the 'logout from all devices' functionality (which would revoke all sessions for an admin) by providing granular control over individual session lifecycles.","parameters":[{"name":"adminId","description":"Unique identifier of the authenticated admin user who owns the session to be revoked","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific admin session to revoke and terminate","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[],"accessor":["shoppingMall","admin","admins","sessions","erase"]},{"specification":"This operation retrieves a paginated and filtered list of delivery addresses for authenticated users (customers, sellers, or admins). It operates on the shopping_mall_addresses table from the Prisma schema and supports advanced filtering by user type, country, verification status, default address status, and soft deletion status. The operation provides comprehensive address search capabilities to help users find and manage their saved addresses efficiently. It supports complex queries including partial name matching, postal code filtering, city/state searches, and address verification status filtering. The operation implements pagination with configurable page sizes and sorting options including by creation date, update date, recipient name, or city. Security considerations include role-based filtering where customers see only their own addresses, sellers see only their own addresses, and admins can view addresses across all users with appropriate authorization. The response includes address summary information optimized for list displays with options to include full address details. This operation integrates with the shopping_mall_addresses table as defined in the Prisma schema, supporting the user_type discriminator pattern for polymorphic user ownership (customer_id, seller_id, or admin_id). Address data includes recipient name, phone number, complete street address components (line1, line2, city, state_province, postal_code, country, country_code), verification status, default designation, and optional user-defined labels. The operation respects soft deletion through the deleted_at timestamp field, allowing retrieval of active addresses by default with optional inclusion of deleted addresses for audit purposes.","path":"/shoppingMall/customer/addresses","method":"patch","summary":"Search and retrieve a filtered, paginated list of delivery addresses","description":"Retrieve a comprehensive list of delivery addresses with advanced filtering, searching, sorting, and pagination capabilities. This operation provides full address search functionality for authenticated users to manage their saved delivery addresses efficiently.\n\nThis endpoint operates on the shopping_mall_addresses table which stores delivery addresses for customers, sellers, and admins using a polymorphic user ownership pattern. Each address contains complete delivery information including recipient details, phone number, multi-line street address, city, state/province, postal code, country data, verification status, default designation, and optional user-defined labels.\n\nSecurity and authorization are enforced based on the authenticated user's role. Customers can only retrieve their own addresses by filtering on their customer_id. Sellers can only retrieve their own addresses by filtering on their seller_id. Admins have platform-wide access and can retrieve addresses for any user across all user types, enabling administrative address management and customer support functions.\n\nThe operation supports comprehensive filtering capabilities including user type discrimination (customer, seller, admin), country-based filtering, verification status (is_verified), default address filtering (is_default), postal code searches, city and state filtering, and soft deletion status (deleted_at). This enables users to find specific addresses quickly and admins to perform advanced address data analysis.\n\nPagination is implemented to handle users with multiple saved addresses efficiently. The response includes total count, current page number, page size, and the array of address records matching the filter criteria. Sorting options include chronological ordering (created_at, updated_at), alphabetical ordering by recipient name or city, and custom ordering by verification status or default designation.\n\nAddress data returned includes all fields from the Prisma schema: recipient_name, phone_number, address_line1, address_line2 (optional), city, state_province, postal_code, country, country_code, is_default, label (optional), is_verified, verified_at timestamp, and soft deletion timestamp deleted_at. The user_type discriminator field indicates ownership type (customer, seller, admin) and the corresponding user foreign key (shopping_mall_customer_id, shopping_mall_seller_id, or shopping_mall_admin_id) identifies the owner.\n\nThis operation integrates with the order placement and checkout processes where customers select delivery addresses. Addresses are preserved as snapshots in completed orders even when the user later updates or deletes the address record, maintaining historical accuracy for order fulfillment and customer service.\n\nRelated operations include retrieving individual address details (GET /addresses/{addressId}), creating new addresses (POST /addresses), updating existing addresses (PUT /addresses/{addressId}), and deleting addresses (DELETE /addresses/{addressId}).","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination controls for address retrieval","typeName":"IShoppingMallAddress.IRequest"},"responseBody":{"description":"Paginated list of delivery addresses matching the search criteria with total count and pagination metadata","typeName":"IPageIShoppingMallAddress"},"authorizationRole":"customer","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"At least one delivery address must be created before addresses can be searched and retrieved"}],"accessor":["shoppingMall","customer","addresses","index"]},{"specification":"This operation retrieves a paginated and filtered list of delivery addresses for authenticated users (customers, sellers, or admins). It operates on the shopping_mall_addresses table from the Prisma schema and supports advanced filtering by user type, country, verification status, default address status, and soft deletion status. The operation provides comprehensive address search capabilities to help users find and manage their saved addresses efficiently. It supports complex queries including partial name matching, postal code filtering, city/state searches, and address verification status filtering. The operation implements pagination with configurable page sizes and sorting options including by creation date, update date, recipient name, or city. Security considerations include role-based filtering where customers see only their own addresses, sellers see only their own addresses, and admins can view addresses across all users with appropriate authorization. The response includes address summary information optimized for list displays with options to include full address details. This operation integrates with the shopping_mall_addresses table as defined in the Prisma schema, supporting the user_type discriminator pattern for polymorphic user ownership (customer_id, seller_id, or admin_id). Address data includes recipient name, phone number, complete street address components (line1, line2, city, state_province, postal_code, country, country_code), verification status, default designation, and optional user-defined labels. The operation respects soft deletion through the deleted_at timestamp field, allowing retrieval of active addresses by default with optional inclusion of deleted addresses for audit purposes.","path":"/shoppingMall/seller/addresses","method":"patch","summary":"Search and retrieve a filtered, paginated list of delivery addresses","description":"Retrieve a comprehensive list of delivery addresses with advanced filtering, searching, sorting, and pagination capabilities. This operation provides full address search functionality for authenticated users to manage their saved delivery addresses efficiently.\n\nThis endpoint operates on the shopping_mall_addresses table which stores delivery addresses for customers, sellers, and admins using a polymorphic user ownership pattern. Each address contains complete delivery information including recipient details, phone number, multi-line street address, city, state/province, postal code, country data, verification status, default designation, and optional user-defined labels.\n\nSecurity and authorization are enforced based on the authenticated user's role. Customers can only retrieve their own addresses by filtering on their customer_id. Sellers can only retrieve their own addresses by filtering on their seller_id. Admins have platform-wide access and can retrieve addresses for any user across all user types, enabling administrative address management and customer support functions.\n\nThe operation supports comprehensive filtering capabilities including user type discrimination (customer, seller, admin), country-based filtering, verification status (is_verified), default address filtering (is_default), postal code searches, city and state filtering, and soft deletion status (deleted_at). This enables users to find specific addresses quickly and admins to perform advanced address data analysis.\n\nPagination is implemented to handle users with multiple saved addresses efficiently. The response includes total count, current page number, page size, and the array of address records matching the filter criteria. Sorting options include chronological ordering (created_at, updated_at), alphabetical ordering by recipient name or city, and custom ordering by verification status or default designation.\n\nAddress data returned includes all fields from the Prisma schema: recipient_name, phone_number, address_line1, address_line2 (optional), city, state_province, postal_code, country, country_code, is_default, label (optional), is_verified, verified_at timestamp, and soft deletion timestamp deleted_at. The user_type discriminator field indicates ownership type (customer, seller, admin) and the corresponding user foreign key (shopping_mall_customer_id, shopping_mall_seller_id, or shopping_mall_admin_id) identifies the owner.\n\nThis operation integrates with the order placement and checkout processes where customers select delivery addresses. Addresses are preserved as snapshots in completed orders even when the user later updates or deletes the address record, maintaining historical accuracy for order fulfillment and customer service.\n\nRelated operations include retrieving individual address details (GET /addresses/{addressId}), creating new addresses (POST /addresses), updating existing addresses (PUT /addresses/{addressId}), and deleting addresses (DELETE /addresses/{addressId}).","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination controls for address retrieval","typeName":"IShoppingMallAddress.IRequest"},"responseBody":{"description":"Paginated list of delivery addresses matching the search criteria with total count and pagination metadata","typeName":"IPageIShoppingMallAddress"},"authorizationRole":"seller","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/addresses","method":"post"},"description":"At least one delivery address must be created before addresses can be searched and retrieved"}],"accessor":["shoppingMall","seller","addresses","index"]},{"specification":"This operation retrieves a paginated and filtered list of delivery addresses for authenticated users (customers, sellers, or admins). It operates on the shopping_mall_addresses table from the Prisma schema and supports advanced filtering by user type, country, verification status, default address status, and soft deletion status. The operation provides comprehensive address search capabilities to help users find and manage their saved addresses efficiently. It supports complex queries including partial name matching, postal code filtering, city/state searches, and address verification status filtering. The operation implements pagination with configurable page sizes and sorting options including by creation date, update date, recipient name, or city. Security considerations include role-based filtering where customers see only their own addresses, sellers see only their own addresses, and admins can view addresses across all users with appropriate authorization. The response includes address summary information optimized for list displays with options to include full address details. This operation integrates with the shopping_mall_addresses table as defined in the Prisma schema, supporting the user_type discriminator pattern for polymorphic user ownership (customer_id, seller_id, or admin_id). Address data includes recipient name, phone number, complete street address components (line1, line2, city, state_province, postal_code, country, country_code), verification status, default designation, and optional user-defined labels. The operation respects soft deletion through the deleted_at timestamp field, allowing retrieval of active addresses by default with optional inclusion of deleted addresses for audit purposes.","path":"/shoppingMall/admin/addresses","method":"patch","summary":"Search and retrieve a filtered, paginated list of delivery addresses","description":"Retrieve a comprehensive list of delivery addresses with advanced filtering, searching, sorting, and pagination capabilities. This operation provides full address search functionality for authenticated users to manage their saved delivery addresses efficiently.\n\nThis endpoint operates on the shopping_mall_addresses table which stores delivery addresses for customers, sellers, and admins using a polymorphic user ownership pattern. Each address contains complete delivery information including recipient details, phone number, multi-line street address, city, state/province, postal code, country data, verification status, default designation, and optional user-defined labels.\n\nSecurity and authorization are enforced based on the authenticated user's role. Customers can only retrieve their own addresses by filtering on their customer_id. Sellers can only retrieve their own addresses by filtering on their seller_id. Admins have platform-wide access and can retrieve addresses for any user across all user types, enabling administrative address management and customer support functions.\n\nThe operation supports comprehensive filtering capabilities including user type discrimination (customer, seller, admin), country-based filtering, verification status (is_verified), default address filtering (is_default), postal code searches, city and state filtering, and soft deletion status (deleted_at). This enables users to find specific addresses quickly and admins to perform advanced address data analysis.\n\nPagination is implemented to handle users with multiple saved addresses efficiently. The response includes total count, current page number, page size, and the array of address records matching the filter criteria. Sorting options include chronological ordering (created_at, updated_at), alphabetical ordering by recipient name or city, and custom ordering by verification status or default designation.\n\nAddress data returned includes all fields from the Prisma schema: recipient_name, phone_number, address_line1, address_line2 (optional), city, state_province, postal_code, country, country_code, is_default, label (optional), is_verified, verified_at timestamp, and soft deletion timestamp deleted_at. The user_type discriminator field indicates ownership type (customer, seller, admin) and the corresponding user foreign key (shopping_mall_customer_id, shopping_mall_seller_id, or shopping_mall_admin_id) identifies the owner.\n\nThis operation integrates with the order placement and checkout processes where customers select delivery addresses. Addresses are preserved as snapshots in completed orders even when the user later updates or deletes the address record, maintaining historical accuracy for order fulfillment and customer service.\n\nRelated operations include retrieving individual address details (GET /addresses/{addressId}), creating new addresses (POST /addresses), updating existing addresses (PUT /addresses/{addressId}), and deleting addresses (DELETE /addresses/{addressId}).","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination controls for address retrieval","typeName":"IShoppingMallAddress.IRequest"},"responseBody":{"description":"Paginated list of delivery addresses matching the search criteria with total count and pagination metadata","typeName":"IPageIShoppingMallAddress"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[],"accessor":["shoppingMall","admin","addresses","index"]},{"specification":"This operation retrieves detailed information for a specific delivery address identified by the addressId path parameter. It operates on the shopping_mall_addresses table from the Prisma schema and returns complete address details including recipient information, full street address components, verification status, default designation, and ownership information. The operation enforces strict authorization rules where users can only access their own addresses (customers access customer-owned addresses, sellers access seller-owned addresses) and admins can access any address for platform-wide management. The addressId parameter must be a valid UUID matching an existing address record. The operation performs ownership verification by checking that the authenticated user's ID matches the appropriate foreign key (shopping_mall_customer_id for customers, shopping_mall_seller_id for sellers) before returning address data. This ensures address privacy and prevents unauthorized access to other users' delivery information. The response includes all address fields from the Prisma schema including polymorphic user ownership details, address verification status, and soft deletion status. This operation is typically used when customers select delivery addresses during checkout, when users edit address details, or when admins review customer address information for support purposes.","path":"/shoppingMall/customer/addresses/{addressId}","method":"get","summary":"Retrieve detailed information for a specific delivery address by ID","description":"Retrieve complete details for a specific delivery address identified by the addressId path parameter. This operation returns comprehensive address information including recipient details, complete street address components, verification status, default address designation, and user ownership data.\n\nThis endpoint operates on the shopping_mall_addresses table which implements polymorphic user ownership supporting customers, sellers, and admins. Each address record contains recipient_name, phone_number, address_line1, address_line2 (optional apartment/suite information), city, state_province, postal_code, country, country_code (ISO 3166-1 alpha-2), is_default flag, optional user-defined label, verification status (is_verified), verification timestamp (verified_at), and soft deletion status (deleted_at).\n\nStrict authorization and ownership verification are enforced to protect address privacy. Customers can only retrieve addresses where shopping_mall_customer_id matches their authenticated user ID. Sellers can only retrieve addresses where shopping_mall_seller_id matches their authenticated user ID. Admins have platform-wide access and can retrieve any address regardless of ownership for customer support, dispute resolution, and administrative functions.\n\nThe addressId path parameter must be a valid UUID format matching an existing record in the shopping_mall_addresses table. The operation validates that the address exists and performs ownership verification before returning data. If the address does not exist or the authenticated user does not have permission to access it, appropriate error responses are returned (404 Not Found for non-existent addresses, 403 Forbidden for unauthorized access attempts).\n\nThe response includes the complete address record with all fields from the Prisma schema. The user_type field (values: customer, seller, admin) indicates the ownership type, and the corresponding foreign key field (shopping_mall_customer_id, shopping_mall_seller_id, or shopping_mall_admin_id) identifies the specific owner. This polymorphic pattern enables unified address management across all user types while maintaining clear ownership boundaries.\n\nAddress data returned includes verification metadata showing whether the address has been validated through an address verification service (is_verified) and when verification occurred (verified_at). Verified addresses provide higher confidence for order delivery and reduce shipping errors. Unverified addresses may prompt customers to confirm accuracy during checkout.\n\nThe is_default field indicates whether this is the user's default delivery address, which is pre-selected during checkout for convenience. Only one address per user should be marked as default. The optional label field allows users to assign friendly names like 'Home', 'Office', 'Parents House' for quick identification.\n\nThis operation integrates with checkout and order management workflows where customers select delivery addresses for order fulfillment. When orders are placed, the complete address is snapshotted and stored with the order record, preserving historical accuracy even if the user later updates or deletes the address. This ensures order history displays the correct delivery destination for all past orders.\n\nThe soft deletion pattern (deleted_at timestamp) allows users to remove addresses from their active list while preserving the data for historical order references. Deleted addresses are filtered out from normal address selection interfaces but remain accessible for order history display and audit purposes.\n\nRelated operations include searching and listing addresses (PATCH /addresses), creating new addresses (POST /addresses), updating address details (PUT /addresses/{addressId}), and deleting addresses (DELETE /addresses/{addressId}).","parameters":[{"name":"addressId","description":"Unique identifier of the target delivery address to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete delivery address information including recipient details, street address components, verification status, and ownership data","typeName":"IShoppingMallAddress"},"authorizationRole":"customer","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Address must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","customer","addresses","at"]},{"specification":"This operation retrieves detailed information for a specific delivery address identified by the addressId path parameter. It operates on the shopping_mall_addresses table from the Prisma schema and returns complete address details including recipient information, full street address components, verification status, default designation, and ownership information. The operation enforces strict authorization rules where users can only access their own addresses (customers access customer-owned addresses, sellers access seller-owned addresses) and admins can access any address for platform-wide management. The addressId parameter must be a valid UUID matching an existing address record. The operation performs ownership verification by checking that the authenticated user's ID matches the appropriate foreign key (shopping_mall_customer_id for customers, shopping_mall_seller_id for sellers) before returning address data. This ensures address privacy and prevents unauthorized access to other users' delivery information. The response includes all address fields from the Prisma schema including polymorphic user ownership details, address verification status, and soft deletion status. This operation is typically used when customers select delivery addresses during checkout, when users edit address details, or when admins review customer address information for support purposes.","path":"/shoppingMall/seller/addresses/{addressId}","method":"get","summary":"Retrieve detailed information for a specific delivery address by ID","description":"Retrieve complete details for a specific delivery address identified by the addressId path parameter. This operation returns comprehensive address information including recipient details, complete street address components, verification status, default address designation, and user ownership data.\n\nThis endpoint operates on the shopping_mall_addresses table which implements polymorphic user ownership supporting customers, sellers, and admins. Each address record contains recipient_name, phone_number, address_line1, address_line2 (optional apartment/suite information), city, state_province, postal_code, country, country_code (ISO 3166-1 alpha-2), is_default flag, optional user-defined label, verification status (is_verified), verification timestamp (verified_at), and soft deletion status (deleted_at).\n\nStrict authorization and ownership verification are enforced to protect address privacy. Customers can only retrieve addresses where shopping_mall_customer_id matches their authenticated user ID. Sellers can only retrieve addresses where shopping_mall_seller_id matches their authenticated user ID. Admins have platform-wide access and can retrieve any address regardless of ownership for customer support, dispute resolution, and administrative functions.\n\nThe addressId path parameter must be a valid UUID format matching an existing record in the shopping_mall_addresses table. The operation validates that the address exists and performs ownership verification before returning data. If the address does not exist or the authenticated user does not have permission to access it, appropriate error responses are returned (404 Not Found for non-existent addresses, 403 Forbidden for unauthorized access attempts).\n\nThe response includes the complete address record with all fields from the Prisma schema. The user_type field (values: customer, seller, admin) indicates the ownership type, and the corresponding foreign key field (shopping_mall_customer_id, shopping_mall_seller_id, or shopping_mall_admin_id) identifies the specific owner. This polymorphic pattern enables unified address management across all user types while maintaining clear ownership boundaries.\n\nAddress data returned includes verification metadata showing whether the address has been validated through an address verification service (is_verified) and when verification occurred (verified_at). Verified addresses provide higher confidence for order delivery and reduce shipping errors. Unverified addresses may prompt customers to confirm accuracy during checkout.\n\nThe is_default field indicates whether this is the user's default delivery address, which is pre-selected during checkout for convenience. Only one address per user should be marked as default. The optional label field allows users to assign friendly names like 'Home', 'Office', 'Parents House' for quick identification.\n\nThis operation integrates with checkout and order management workflows where customers select delivery addresses for order fulfillment. When orders are placed, the complete address is snapshotted and stored with the order record, preserving historical accuracy even if the user later updates or deletes the address. This ensures order history displays the correct delivery destination for all past orders.\n\nThe soft deletion pattern (deleted_at timestamp) allows users to remove addresses from their active list while preserving the data for historical order references. Deleted addresses are filtered out from normal address selection interfaces but remain accessible for order history display and audit purposes.\n\nRelated operations include searching and listing addresses (PATCH /addresses), creating new addresses (POST /addresses), updating address details (PUT /addresses/{addressId}), and deleting addresses (DELETE /addresses/{addressId}).","parameters":[{"name":"addressId","description":"Unique identifier of the target delivery address to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete delivery address information including recipient details, street address components, verification status, and ownership data","typeName":"IShoppingMallAddress"},"authorizationRole":"seller","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/addresses","method":"post"},"description":"Address must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","seller","addresses","at"]},{"specification":"This operation retrieves detailed information for a specific delivery address identified by the addressId path parameter. It operates on the shopping_mall_addresses table from the Prisma schema and returns complete address details including recipient information, full street address components, verification status, default designation, and ownership information. The operation enforces strict authorization rules where users can only access their own addresses (customers access customer-owned addresses, sellers access seller-owned addresses) and admins can access any address for platform-wide management. The addressId parameter must be a valid UUID matching an existing address record. The operation performs ownership verification by checking that the authenticated user's ID matches the appropriate foreign key (shopping_mall_customer_id for customers, shopping_mall_seller_id for sellers) before returning address data. This ensures address privacy and prevents unauthorized access to other users' delivery information. The response includes all address fields from the Prisma schema including polymorphic user ownership details, address verification status, and soft deletion status. This operation is typically used when customers select delivery addresses during checkout, when users edit address details, or when admins review customer address information for support purposes.","path":"/shoppingMall/admin/addresses/{addressId}","method":"get","summary":"Retrieve detailed information for a specific delivery address by ID","description":"Retrieve complete details for a specific delivery address identified by the addressId path parameter. This operation returns comprehensive address information including recipient details, complete street address components, verification status, default address designation, and user ownership data.\n\nThis endpoint operates on the shopping_mall_addresses table which implements polymorphic user ownership supporting customers, sellers, and admins. Each address record contains recipient_name, phone_number, address_line1, address_line2 (optional apartment/suite information), city, state_province, postal_code, country, country_code (ISO 3166-1 alpha-2), is_default flag, optional user-defined label, verification status (is_verified), verification timestamp (verified_at), and soft deletion status (deleted_at).\n\nStrict authorization and ownership verification are enforced to protect address privacy. Customers can only retrieve addresses where shopping_mall_customer_id matches their authenticated user ID. Sellers can only retrieve addresses where shopping_mall_seller_id matches their authenticated user ID. Admins have platform-wide access and can retrieve any address regardless of ownership for customer support, dispute resolution, and administrative functions.\n\nThe addressId path parameter must be a valid UUID format matching an existing record in the shopping_mall_addresses table. The operation validates that the address exists and performs ownership verification before returning data. If the address does not exist or the authenticated user does not have permission to access it, appropriate error responses are returned (404 Not Found for non-existent addresses, 403 Forbidden for unauthorized access attempts).\n\nThe response includes the complete address record with all fields from the Prisma schema. The user_type field (values: customer, seller, admin) indicates the ownership type, and the corresponding foreign key field (shopping_mall_customer_id, shopping_mall_seller_id, or shopping_mall_admin_id) identifies the specific owner. This polymorphic pattern enables unified address management across all user types while maintaining clear ownership boundaries.\n\nAddress data returned includes verification metadata showing whether the address has been validated through an address verification service (is_verified) and when verification occurred (verified_at). Verified addresses provide higher confidence for order delivery and reduce shipping errors. Unverified addresses may prompt customers to confirm accuracy during checkout.\n\nThe is_default field indicates whether this is the user's default delivery address, which is pre-selected during checkout for convenience. Only one address per user should be marked as default. The optional label field allows users to assign friendly names like 'Home', 'Office', 'Parents House' for quick identification.\n\nThis operation integrates with checkout and order management workflows where customers select delivery addresses for order fulfillment. When orders are placed, the complete address is snapshotted and stored with the order record, preserving historical accuracy even if the user later updates or deletes the address. This ensures order history displays the correct delivery destination for all past orders.\n\nThe soft deletion pattern (deleted_at timestamp) allows users to remove addresses from their active list while preserving the data for historical order references. Deleted addresses are filtered out from normal address selection interfaces but remain accessible for order history display and audit purposes.\n\nRelated operations include searching and listing addresses (PATCH /addresses), creating new addresses (POST /addresses), updating address details (PUT /addresses/{addressId}), and deleting addresses (DELETE /addresses/{addressId}).","parameters":[{"name":"addressId","description":"Unique identifier of the target delivery address to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete delivery address information including recipient details, street address components, verification status, and ownership data","typeName":"IShoppingMallAddress"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/addresses","method":"post"},"description":"Address must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","admin","addresses","at"]},{"specification":"This operation creates a new delivery address for authenticated customers. The address system supports multiple addresses per customer with one designated as default. This operation validates all required address components including recipient information, full street address, city, state/province, postal code, and country. When this is the customer's first address, the system automatically sets it as the default address.","path":"/shoppingMall/customer/addresses","method":"post","summary":"Create a new delivery address for the authenticated customer","description":"Creates a new delivery address record in the shopping_mall_addresses table for the authenticated customer. This operation supports address management capabilities required during checkout and order fulfillment. The system validates all required address fields including recipient name, phone number, complete street address (address_line1), city, state/province, postal code, country, and country code.\n\nAddress validation includes checking postal code format matches the country, validating phone number format, and ensuring all required fields are populated. The operation automatically sets user_type to 'customer' and associates the address with shopping_mall_customer_id of the authenticated customer.\n\nIf this is the customer's first address, the system automatically sets is_default to true. If the customer already has addresses and the request specifies is_default as true, the system updates the previous default address to remove its default status. Customers can optionally provide a label for the address (such as 'Home', 'Office') which must be unique per customer.\n\nThe address is initially marked as unverified (is_verified=false) and can be verified through an address validation service integration after creation. This operation is essential for the checkout flow as customers must have at least one delivery address to complete order placement.","parameters":[],"requestBody":{"description":"Complete address information including recipient details, street address components, city, state, postal code, country, and optional settings like default designation and label","typeName":"IShoppingMallAddress.ICreate"},"responseBody":{"description":"Complete address record including generated ID, customer association, address components, verification status, and timestamps","typeName":"IShoppingMallAddress"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[],"accessor":["shoppingMall","customer","addresses","create"]},{"specification":"This operation creates a new delivery address for authenticated sellers. The address system supports multiple addresses per seller with one designated as default. This operation validates all required address components and is used when sellers purchase from the platform (sellers have all customer permissions).","path":"/shoppingMall/seller/addresses","method":"post","summary":"Create a new delivery address for the authenticated seller","description":"Creates a new delivery address record in the shopping_mall_addresses table for the authenticated seller. This operation supports address management capabilities for sellers who may also purchase from the platform (sellers have all customer permissions).\n\nThe system validates all required address fields including recipient name, phone number, complete street address (address_line1), city, state/province, postal code, country, and country code. Address validation includes checking postal code format matches the country and validating phone number format.\n\nThe operation automatically sets user_type to 'seller' and associates the address with shopping_mall_seller_id of the authenticated seller. If this is the seller's first address, the system automatically sets is_default to true. Sellers can optionally provide a label for the address which must be unique per seller.\n\nThe address is initially marked as unverified (is_verified=false) and can be verified through an address validation service after creation. Sellers can use these addresses when purchasing products from other sellers on the platform.","parameters":[],"requestBody":{"description":"Complete address information including recipient details, street address components, city, state, postal code, country, and optional settings","typeName":"IShoppingMallAddress.ICreate"},"responseBody":{"description":"Complete address record including generated ID, seller association, address components, verification status, and timestamps","typeName":"IShoppingMallAddress"},"authorizationRole":"seller","authorizationType":null,"name":"create","prerequisites":[],"accessor":["shoppingMall","seller","addresses","create"]},{"specification":"This operation creates a new delivery address for authenticated admins. Admins have all customer and seller permissions, allowing them to purchase from the platform and manage their own delivery addresses.","path":"/shoppingMall/admin/addresses","method":"post","summary":"Create a new delivery address for the authenticated admin","description":"Creates a new delivery address record in the shopping_mall_addresses table for the authenticated admin. This operation supports address management capabilities for admins who may also purchase from the platform (admins inherit all customer and seller permissions).\n\nThe system validates all required address fields including recipient name, phone number, complete street address (address_line1), city, state/province, postal code, country, and country code. The operation automatically sets user_type to 'admin' and associates the address with shopping_mall_admin_id of the authenticated admin.\n\nIf this is the admin's first address, the system automatically sets is_default to true. Admins can optionally provide a label for the address which must be unique per admin. The address is initially marked as unverified and can be verified through address validation service after creation.","parameters":[],"requestBody":{"description":"Complete address information including recipient details, street address components, city, state, postal code, country, and optional settings","typeName":"IShoppingMallAddress.ICreate"},"responseBody":{"description":"Complete address record including generated ID, admin association, address components, verification status, and timestamps","typeName":"IShoppingMallAddress"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[],"accessor":["shoppingMall","admin","addresses","create"]},{"specification":"This operation updates an existing delivery address for authenticated customers. Customers can modify any field of their own addresses. The operation validates the customer owns the address being updated by checking that the address's shopping_mall_customer_id matches the authenticated customer. When an address is updated, address history is preserved for order tracking purposes through address snapshots in orders.","path":"/shoppingMall/customer/addresses/{addressId}","method":"put","summary":"Update an existing delivery address for the authenticated customer","description":"Updates an existing address record in the shopping_mall_addresses table for the authenticated customer. This operation enables customers to modify their saved delivery addresses including recipient information, street address components, city, state/province, postal code, country, and optional settings like default designation and custom label.\n\nThe system validates that the authenticated customer owns the address being updated by verifying the address's shopping_mall_customer_id matches the authenticated customer's ID. If ownership validation fails, the operation returns HTTP 403 Forbidden.\n\nAll address fields are validated according to the same rules as address creation: postal code format must match the country, phone number format must be valid, all required fields must be completed, and the label must be unique per customer if provided.\n\nWhen the update sets is_default to true for this address, the system automatically updates the customer's previous default address to set is_default to false, ensuring only one address per customer is marked as default at any time.\n\nAddress updates do not affect historical order records. Orders preserve address information through snapshot fields (delivery_recipient_name, delivery_address_line1, etc.) in the shopping_mall_orders table. The system updates the is_verified field to false when address components change, requiring revalidation.","parameters":[{"name":"addressId","description":"Unique identifier of the delivery address to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated address information including modified recipient details, street address components, and optional settings","typeName":"IShoppingMallAddress.IUpdate"},"responseBody":{"description":"Complete updated address record with modified fields, updated timestamp, and verification status","typeName":"IShoppingMallAddress"},"authorizationRole":"customer","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Address must be created before it can be updated"}],"accessor":["shoppingMall","customer","addresses","update"]},{"specification":"This operation updates an existing delivery address for authenticated sellers. Sellers can modify any field of their own addresses. The operation validates the seller owns the address being updated by checking that the address's shopping_mall_seller_id matches the authenticated seller.","path":"/shoppingMall/seller/addresses/{addressId}","method":"put","summary":"Update an existing delivery address for the authenticated seller","description":"Updates an existing address record in the shopping_mall_addresses table for the authenticated seller. This operation enables sellers to modify their saved delivery addresses.\n\nThe system validates that the authenticated seller owns the address being updated by verifying the address's shopping_mall_seller_id matches the authenticated seller's ID. If ownership validation fails, the operation returns HTTP 403 Forbidden.\n\nAll address fields are validated according to address creation rules: postal code format must match the country, phone number format must be valid, all required fields must be completed, and the label must be unique per seller if provided.\n\nWhen the update sets is_default to true, the system automatically updates the seller's previous default address to remove default status. Address updates do not affect historical order records which preserve address snapshots. The system sets is_verified to false when address components change.","parameters":[{"name":"addressId","description":"Unique identifier of the delivery address to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated address information including modified recipient details, street address components, and optional settings","typeName":"IShoppingMallAddress.IUpdate"},"responseBody":{"description":"Complete updated address record with modified fields, updated timestamp, and verification status","typeName":"IShoppingMallAddress"},"authorizationRole":"seller","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/addresses","method":"post"},"description":"Seller delivery address must be created before it can be updated. The address identified by addressId must exist in the shopping_mall_addresses table with user_type='seller' before modification operations can be performed."}],"accessor":["shoppingMall","seller","addresses","update"]},{"specification":"This operation updates an existing delivery address for authenticated admins. Admins can modify any field of their own addresses. The operation validates the admin owns the address being updated by checking that the address's shopping_mall_admin_id matches the authenticated admin.","path":"/shoppingMall/admin/addresses/{addressId}","method":"put","summary":"Update an existing delivery address for the authenticated admin","description":"Updates an existing address record in the shopping_mall_addresses table for the authenticated admin. This operation enables admins to modify their saved delivery addresses.\n\nThe system validates that the authenticated admin owns the address being updated by verifying the address's shopping_mall_admin_id matches the authenticated admin's ID. If ownership validation fails, the operation returns HTTP 403 Forbidden.\n\nAll address fields are validated according to address creation rules: postal code format must match the country, phone number format must be valid, all required fields must be completed, and the label must be unique per admin if provided.\n\nWhen the update sets is_default to true, the system automatically updates the admin's previous default address to remove default status. The system sets is_verified to false when address components change, requiring revalidation.","parameters":[{"name":"addressId","description":"Unique identifier of the delivery address to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated address information including modified recipient details, street address components, and optional settings","typeName":"IShoppingMallAddress.IUpdate"},"responseBody":{"description":"Complete updated address record with modified fields, updated timestamp, and verification status","typeName":"IShoppingMallAddress"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/addresses","method":"post"},"description":"Admin delivery address must be created before it can be updated. The address identified by addressId must exist in the shopping_mall_addresses table with user_type='admin' before modification operations can be performed."}],"accessor":["shoppingMall","admin","addresses","update"]},{"specification":"This operation permanently removes a delivery address from the system. The address is identified by its unique ID provided in the path parameter. This operation supports the address management requirements where customers, sellers, and admins can delete their saved delivery addresses. According to the Prisma schema, the shopping_mall_addresses table has a deleted_at soft delete column, so this operation will perform a soft delete by setting the deleted_at timestamp rather than permanently removing the record from the database. This preserves historical order data that references the address. The operation validates that the authenticated user owns the address before allowing deletion. Addresses associated with pending orders cannot be deleted to maintain order integrity. If the deleted address was marked as the user's default address, the system should handle this by clearing the default designation or prompting the user to select a new default address through business logic.","path":"/shoppingMall/customer/addresses/{addressId}","method":"delete","summary":"Delete a delivery address using soft delete","description":"Permanently removes a delivery address from the customer's, seller's, or admin's saved addresses by setting the deleted_at timestamp (soft delete). This operation validates that the authenticated user owns the address before performing the deletion. Addresses cannot be deleted if they are associated with pending orders, as this would compromise order fulfillment data integrity.\n\nThe soft delete approach preserves historical references from completed orders while hiding the address from the user's active address list. When an address is soft deleted, it remains in the database with a deleted_at timestamp but is excluded from all user-facing address retrieval operations.\n\nIf the deleted address was designated as the user's default address (is_default = true), the business logic layer should handle updating the default designation. This may involve clearing the default flag or prompting the user to select a new default address from their remaining active addresses.\n\nSecurity considerations include verifying the authenticated user's identity matches the address owner (customer_id, seller_id, or admin_id) to prevent unauthorized deletion of other users' addresses. The operation returns no response body on successful deletion, following standard HTTP DELETE semantics with 204 No Content status.","parameters":[{"name":"addressId","description":"Unique identifier of the delivery address to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Address must be created before it can be deleted"}],"accessor":["shoppingMall","customer","addresses","erase"]},{"specification":"This operation permanently removes a delivery address from the system. The address is identified by its unique ID provided in the path parameter. This operation supports the address management requirements where customers, sellers, and admins can delete their saved delivery addresses. According to the Prisma schema, the shopping_mall_addresses table has a deleted_at soft delete column, so this operation will perform a soft delete by setting the deleted_at timestamp rather than permanently removing the record from the database. This preserves historical order data that references the address. The operation validates that the authenticated user owns the address before allowing deletion. Addresses associated with pending orders cannot be deleted to maintain order integrity. If the deleted address was marked as the user's default address, the system should handle this by clearing the default designation or prompting the user to select a new default address through business logic.","path":"/shoppingMall/seller/addresses/{addressId}","method":"delete","summary":"Delete a delivery address using soft delete","description":"Permanently removes a delivery address from the customer's, seller's, or admin's saved addresses by setting the deleted_at timestamp (soft delete). This operation validates that the authenticated user owns the address before performing the deletion. Addresses cannot be deleted if they are associated with pending orders, as this would compromise order fulfillment data integrity.\n\nThe soft delete approach preserves historical references from completed orders while hiding the address from the user's active address list. When an address is soft deleted, it remains in the database with a deleted_at timestamp but is excluded from all user-facing address retrieval operations.\n\nIf the deleted address was designated as the user's default address (is_default = true), the business logic layer should handle updating the default designation. This may involve clearing the default flag or prompting the user to select a new default address from their remaining active addresses.\n\nSecurity considerations include verifying the authenticated user's identity matches the address owner (customer_id, seller_id, or admin_id) to prevent unauthorized deletion of other users' addresses. The operation returns no response body on successful deletion, following standard HTTP DELETE semantics with 204 No Content status.","parameters":[{"name":"addressId","description":"Unique identifier of the delivery address to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/addresses","method":"post"},"description":"Address must be created before it can be deleted"}],"accessor":["shoppingMall","seller","addresses","erase"]},{"specification":"This operation permanently removes a delivery address from the system. The address is identified by its unique ID provided in the path parameter. This operation supports the address management requirements where customers, sellers, and admins can delete their saved delivery addresses. According to the Prisma schema, the shopping_mall_addresses table has a deleted_at soft delete column, so this operation will perform a soft delete by setting the deleted_at timestamp rather than permanently removing the record from the database. This preserves historical order data that references the address. The operation validates that the authenticated user owns the address before allowing deletion. Addresses associated with pending orders cannot be deleted to maintain order integrity. If the deleted address was marked as the user's default address, the system should handle this by clearing the default designation or prompting the user to select a new default address through business logic.","path":"/shoppingMall/admin/addresses/{addressId}","method":"delete","summary":"Delete a delivery address using soft delete","description":"Permanently removes a delivery address from the customer's, seller's, or admin's saved addresses by setting the deleted_at timestamp (soft delete). This operation validates that the authenticated user owns the address before performing the deletion. Addresses cannot be deleted if they are associated with pending orders, as this would compromise order fulfillment data integrity.\n\nThe soft delete approach preserves historical references from completed orders while hiding the address from the user's active address list. When an address is soft deleted, it remains in the database with a deleted_at timestamp but is excluded from all user-facing address retrieval operations.\n\nIf the deleted address was designated as the user's default address (is_default = true), the business logic layer should handle updating the default designation. This may involve clearing the default flag or prompting the user to select a new default address from their remaining active addresses.\n\nSecurity considerations include verifying the authenticated user's identity matches the address owner (customer_id, seller_id, or admin_id) to prevent unauthorized deletion of other users' addresses. The operation returns no response body on successful deletion, following standard HTTP DELETE semantics with 204 No Content status.","parameters":[{"name":"addressId","description":"Unique identifier of the delivery address to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/addresses","method":"post"},"description":"Address must be created before it can be deleted"}],"accessor":["shoppingMall","admin","addresses","erase"]},{"specification":"This operation retrieves a filtered and paginated list of product categories from the hierarchical category taxonomy. Categories organize the product catalog and support unlimited depth parent-child relationships for flexible product organization. This operation supports the product catalog browsing requirements where customers need to navigate category hierarchies, and admins need to manage the category structure. The operation uses PATCH method to support complex filtering, searching, and pagination parameters in the request body, following the pattern for list retrieval operations that need advanced query capabilities. The response includes category information such as name, description, slug, parent-child relationships, display order, and active status. Categories marked as inactive (is_active = false) or soft-deleted (deleted_at is not null) should be excluded from customer-facing responses but may be included for admin users depending on filter criteria.","path":"/shoppingMall/categories","method":"patch","summary":"Search and retrieve filtered, paginated list of product categories","description":"Retrieves a comprehensive list of product categories with support for advanced filtering, searching, sorting, and pagination. This operation enables both customer-facing category navigation and administrative category management by providing flexible query capabilities.\n\nThe hierarchical category structure supports unlimited depth parent-child relationships, allowing the request to filter by parent category, depth level, or retrieve entire category trees. Categories include essential information such as unique identifiers, names, descriptions, URL-friendly slugs, display ordering, and active status flags.\n\nFor customer-facing use cases, the operation filters out inactive categories (is_active = false) and soft-deleted categories (deleted_at is not null) to show only currently available category options. For administrative use cases, the request can specify filters to include inactive or deleted categories for complete category management and audit purposes.\n\nThe operation supports searching categories by name or description using full-text search capabilities, filtering by active status, parent category relationships, and sorting by display order, name, or creation date. Pagination parameters control the number of categories returned per page and enable efficient navigation through large category hierarchies.\n\nSecurity considerations include public access for customer category browsing while restricting access to inactive/deleted categories based on user role. The response provides category data suitable for rendering navigation menus, breadcrumb trails, filter options, and administrative category management interfaces.","parameters":[],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for category retrieval","typeName":"IShoppingMallCategory.IRequest"},"responseBody":{"description":"Paginated list of product categories matching the search and filter criteria with hierarchical relationship information","typeName":"IPageIShoppingMallCategory"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Categories must be created before they can be searched and retrieved"}],"accessor":["shoppingMall","categories","index"]},{"specification":"This operation retrieves detailed information about a specific product category by its unique identifier. It operates on the shopping_mall_categories table, which implements a hierarchical category structure with unlimited depth parent-child relationships. The category system organizes the product catalog using self-referential structure enabling breadcrumb navigation, taxonomy management, and flexible product organization. This endpoint is used to fetch a single category's complete details including its name, description, slug, display order, active status, hierarchy position, and metadata for displaying category pages, generating navigation breadcrumbs, and managing category-based product filtering.","path":"/shoppingMall/categories/{categoryId}","method":"get","summary":"Retrieve detailed information for a specific product category by ID","description":"Retrieve complete details for a single product category identified by its unique category ID. This operation fetches comprehensive category information from the shopping_mall_categories table, which implements a hierarchical taxonomy structure supporting unlimited depth parent-child relationships for organizing the product catalog.\n\nThe endpoint returns all category attributes including the category name, optional description, URL-friendly slug, display order for sorting, active status indicating visibility to customers, parent category reference for hierarchy navigation, and timestamps for creation and modification tracking. This information is essential for displaying category pages, generating breadcrumb navigation paths, managing category-based product filtering, and understanding the category's position within the overall taxonomy structure.\n\nSecurity considerations include public read access to active categories for customer browsing, while inactive or soft-deleted categories should be filtered from customer-facing results. Administrators and sellers need access to complete category information including inactive categories for product management and catalog organization purposes.\n\nThis operation integrates with the product catalog system where each product must be assigned to exactly one category. The hierarchical structure enables customers to navigate from broad classifications (root categories like 'Electronics') through increasingly specific subcategories (e.g., 'Computers' > 'Laptops' > 'Gaming Laptops'). The category slug is used for SEO-friendly URLs in category browsing pages, and the display_order field controls the presentation sequence of categories at the same hierarchy level.\n\nThe response includes the category's parent_id reference, which enables construction of complete category paths for breadcrumb navigation and understanding category hierarchy depth. Root-level categories have null parent_id values. The is_active flag indicates whether the category is currently visible to customers, while the deleted_at timestamp supports soft deletion for preserving historical product-category associations without displaying the category in active navigation.\n\nThis endpoint is typically used when customers click on category navigation elements, when sellers select categories for product listings, when administrators manage the category hierarchy, and when generating category-specific product filters and faceted navigation in search results.","parameters":[{"name":"categoryId","description":"Unique identifier of the product category to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete category details including name, description, hierarchy position, and metadata","typeName":"IShoppingMallCategory"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Category must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","categories","at"]},{"specification":"This operation creates a new product category in the hierarchical category taxonomy for organizing the product catalog. It operates on the shopping_mall_categories table which implements unlimited depth parent-child relationships for flexible category organization. Only administrators can create new categories to maintain taxonomy integrity and prevent seller-initiated category proliferation. The category creation includes validation of category name uniqueness within the same parent level, slug uniqueness across the entire platform, and proper parent category reference if creating a subcategory. This endpoint is essential for expanding the product taxonomy as the marketplace grows and new product types are added.","path":"/shoppingMall/admin/categories","method":"post","summary":"Create a new product category in the hierarchical taxonomy","description":"Create a new product category within the hierarchical taxonomy structure used to organize the marketplace product catalog. This operation inserts a new record into the shopping_mall_categories table, which implements a self-referential parent-child structure supporting unlimited depth for flexible category organization from broad classifications to highly specific subcategories.\n\nThe category creation process requires specification of the category name, optional detailed description, URL-friendly slug for SEO-optimized category pages, display order for controlling presentation sequence among sibling categories, and optional parent category reference if creating a subcategory rather than a root-level category. The system validates that category names are unique within the same parent level to prevent confusion, and that slugs are globally unique across the entire platform to ensure distinct URL paths for all category pages.\n\nSecurity and authorization are critical for this operation as only platform administrators can create new categories to maintain taxonomy integrity and consistency. Unrestricted category creation by sellers or customers would lead to taxonomy fragmentation, duplicate categories, inconsistent naming conventions, and poor catalog organization. The admin role ensures that category structure aligns with business strategy, market segmentation, and customer browsing patterns. All category creation actions are logged in the audit trail with the administrator who performed the action and timestamp for accountability.\n\nThis operation integrates with the product management system where products must be assigned to exactly one category. Creating new categories expands the available classification options for sellers when listing products. The hierarchical structure enables customers to navigate from general to specific product types, improving product discovery through intuitive browsing. The is_active flag can be set during creation to control immediate visibility to customers, allowing administrators to prepare category structures before making them public.\n\nThe display_order field enables precise control over how categories appear in navigation menus and category lists at the same hierarchy level. Lower display order values appear first, allowing administrators to prioritize important or popular categories in customer-facing navigation. When creating subcategories, the parent_id reference establishes the hierarchical relationship and determines the category's position in breadcrumb navigation paths.\n\nValidation rules enforce that new categories meet platform standards including appropriate name length (must be meaningful but not excessively long), valid slug format (lowercase, alphanumeric with hyphens only), non-negative display order values, and valid parent category references if specified. If a parent_id is provided, the system verifies that the parent category exists and is not soft-deleted before allowing the subcategory creation.\n\nThis endpoint is typically used by administrators when expanding the marketplace into new product verticals, reorganizing existing taxonomy for improved customer navigation, creating seasonal or promotional category groupings, or establishing region-specific category structures for international marketplace expansion. The created category immediately becomes available for product assignment by sellers, enabling rapid catalog expansion to support business growth.","parameters":[],"requestBody":{"description":"Category creation data including name, description, slug, parent reference, and display settings","typeName":"IShoppingMallCategory.ICreate"},"responseBody":{"description":"Created category details with generated ID and system-assigned timestamps","typeName":"IShoppingMallCategory"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[],"accessor":["shoppingMall","admin","categories","create"]},{"specification":"This operation allows administrators to update an existing product category in the hierarchical category system. The category being updated is identified by the categoryId path parameter which must correspond to an existing category UUID in the shopping_mall_categories table. Administrators can modify category properties including name, description, slug, display_order, is_active status, and parent_id to reorganize the category hierarchy. The operation validates that the category exists, ensures slug uniqueness if changed, prevents creating circular hierarchies if parent_id is modified, and validates that the new parent category exists if specified. When a category is successfully updated, all affected products maintain their association with the category but may have updated breadcrumb paths if the hierarchy changed. This operation is restricted to administrators only as category management is a platform-wide administrative function that affects product organization and customer navigation throughout the marketplace.","path":"/shoppingMall/admin/categories/{categoryId}","method":"put","summary":"Update an existing product category in the hierarchical taxonomy","description":"Update an existing product category within the shopping_mall_categories hierarchical structure. This operation enables administrators to modify category properties including name, description, URL slug, display order, active status, and parent category assignment to reorganize the category taxonomy.\n\nThis operation validates that the target category exists in the database and is not soft-deleted. When updating the category name or slug, the system ensures uniqueness constraints are satisfied. If the parent_id is modified to reorganize the hierarchy, the system validates that the new parent category exists and prevents circular relationships where a category becomes its own ancestor.\n\nCategory updates immediately affect product organization throughout the platform. When a category's parent_id changes, all products assigned to this category will have updated breadcrumb paths for navigation. When a category is deactivated (is_active set to false), all products in that category become hidden from customer view while preserving product data and seller associations.\n\nThe operation supports complete category reorganization including moving categories to different parent categories, changing display order within sibling categories, and modifying category metadata. Display order changes affect how categories appear in navigation menus and category browsing interfaces.\n\nAdministrators must have super_admin or content_moderator role level to perform category updates. This operation is critical for maintaining organized product taxonomy and ensuring customers can effectively browse and discover products through logical category structures. All changes are logged with timestamp and admin identifier for audit trail purposes.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated category information including name, description, slug, parent assignment, display order, and active status","typeName":"IShoppingMallCategory.IUpdate"},"responseBody":{"description":"Updated category information with all current properties and relationships","typeName":"IShoppingMallCategory"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Category must be created before it can be updated"}],"accessor":["shoppingMall","admin","categories","update"]},{"specification":"This operation allows administrators to delete a product category from the hierarchical category system. The category being deleted is identified by the categoryId path parameter which must correspond to an existing category UUID in the shopping_mall_categories table. Based on the Prisma schema analysis, the shopping_mall_categories table has a deleted_at timestamp column, indicating this operation implements soft deletion rather than permanent removal. When a category is soft-deleted, the deleted_at timestamp is set to the current time, marking the category as deleted while preserving all data for historical product associations and audit compliance. The operation validates that the category exists and is not already deleted before performing the soft delete. Categories with existing product assignments or child categories require special handling - administrators may need to reassign products to alternative categories and reorganize child categories before deletion. This ensures data integrity and prevents orphaned products or broken category hierarchies. Soft-deleted categories are excluded from customer-facing category navigation and product filtering but remain in the database for historical order references and analytics. This operation is restricted to administrators only as category management affects platform-wide product organization.","path":"/shoppingMall/admin/categories/{categoryId}","method":"delete","summary":"Soft delete a product category from the platform taxonomy","description":"Soft delete an existing product category from the shopping_mall_categories hierarchical structure. This operation marks the category as deleted by setting the deleted_at timestamp without permanently removing the record from the database, preserving historical data for audit compliance and product associations.\n\nThe operation validates that the target category exists and is not soft-deleted before performing the deletion. Based on the Prisma schema, the shopping_mall_categories table includes a deleted_at timestamp column that implements soft deletion functionality, ensuring category data is retained for historical orders and analytics while being excluded from active category navigation.\n\nBefore soft-deleting a category, the system must handle dependent relationships. If products are currently assigned to this category, administrators should reassign those products to alternative categories to prevent orphaned products. If child categories exist with this category as their parent_id, those child categories must be reorganized or reassigned to different parents to maintain hierarchy integrity.\n\nWhen a category is soft-deleted, it is immediately removed from customer-facing category navigation menus, product filtering options, and search facets. However, historical product-category associations are preserved to maintain accurate records of product organization at the time orders were placed. This supports order history display and analytics without data corruption.\n\nThis operation requires super_admin role level as category deletion significantly impacts platform taxonomy and product organization. The soft delete timestamp enables potential category restoration if needed while maintaining strict data retention policies for compliance purposes. All deletion actions are logged with administrator identifier and timestamp for complete audit trail.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Category must be created before it can be deleted"}],"accessor":["shoppingMall","admin","categories","erase"]},{"specification":"This operation retrieves a filtered and paginated list of products from the e-commerce shopping mall platform. It operates on the shopping_mall_products table and its related entities including shopping_mall_skus, shopping_mall_categories, shopping_mall_sellers, shopping_mall_product_images, and shopping_mall_reviews. The operation supports comprehensive search capabilities including keyword search across product names and descriptions, category filtering, price range filtering, seller filtering, brand filtering, availability filtering, and rating filtering. It also supports sorting by various criteria such as relevance, price, newest first, best selling, and top rated. The operation returns paginated results with product summary information optimized for list displays, including aggregate ratings calculated from shopping_mall_reviews and lowest SKU price from shopping_mall_skus variants.","path":"/shoppingMall/products","method":"patch","summary":"Search and retrieve filtered, paginated list of products from the shopping mall catalog","description":"Retrieve a comprehensive, filtered, and paginated list of products from the e-commerce shopping mall platform with advanced search and filtering capabilities. This operation provides customers with powerful product discovery tools to find items across the entire marketplace catalog.\n\nThe operation performs full-text search across product names, descriptions, brands, and tags from the shopping_mall_products table. It supports hierarchical category filtering using the shopping_mall_categories relationship, enabling customers to browse products within specific taxonomy branches. Price range filtering operates on the minimum SKU price calculated from associated shopping_mall_skus variants, as products may have multiple variants with different pricing.\n\nAvailability filtering checks the shopping_mall_skus table to determine stock status, considering the available_quantity field for each variant. Products are marked as in-stock if at least one active SKU has available_quantity greater than zero. The operation also supports filtering by seller using the shopping_mall_seller_id foreign key, brand name, and minimum product rating calculated from aggregated shopping_mall_reviews.\n\nSearch results are ranked by relevance for keyword searches, with exact product name matches prioritized highest, followed by partial name matches, brand matches, description matches, and tag matches. Within the same relevance tier, results are further sorted by product popularity (sales volume), seller rating, and recency. Customers can override relevance sorting with explicit sort options including price ascending/descending, newest first, best selling, and top rated.\n\nThe response includes product summary information optimized for catalog listings: product ID, name, primary image from shopping_mall_product_images, starting price (lowest SKU price), average rating calculated from shopping_mall_reviews, total review count, seller name from shopping_mall_sellers, category breadcrumb path from shopping_mall_categories hierarchy, and stock availability status. Only products with status 'active' from shopping_mall_products are included in customer-facing search results.\n\nPagination is implemented to handle large result sets efficiently, with configurable page size and page number parameters. The operation maintains high performance for catalogs with 100,000+ products through optimized database indexing on shopping_mall_products.name, shopping_mall_products.description, shopping_mall_products.status, and related tables.\n\nSecurity considerations include rate limiting for search operations to prevent abuse. The operation is publicly accessible without authentication, allowing guest users to browse the product catalog. All product data returned is sanitized and only publicly-appropriate information is exposed.","parameters":[],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for product discovery","typeName":"IShoppingMallProduct.IRequest"},"responseBody":{"description":"Paginated list of product summaries matching the search and filter criteria","typeName":"IPageIShoppingMallProduct.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[],"accessor":["shoppingMall","products","index"]},{"specification":"This operation retrieves complete detailed information for a single product identified by its unique product ID. It operates on the shopping_mall_products table and eagerly loads all related data including product variants (shopping_mall_skus with color, size, and option relationships), product images (shopping_mall_product_images), category information with full breadcrumb path (shopping_mall_categories hierarchy), seller information (shopping_mall_sellers), and aggregated review statistics (from shopping_mall_reviews). The operation returns comprehensive product details necessary for the product detail page display, including all available SKU variants with their individual pricing and inventory status, complete image gallery, full product description, specifications, and calculated aggregate ratings.","path":"/shoppingMall/products/{productId}","method":"get","summary":"Retrieve complete detailed information for a specific product including all variants, images, and reviews","description":"Retrieve comprehensive detailed information for a single product from the shopping mall catalog, identified by the unique product ID from the shopping_mall_products table. This operation provides all data necessary to render a complete product detail page for customer viewing and purchasing decisions.\n\nThe operation fetches the core product entity including name, description, base_price, status, brand, tags, and specifications from shopping_mall_products. It validates that the product exists and has status 'active' to ensure only published products are accessible to customers. Discontinued, inactive, or draft products return appropriate error responses.\n\nAll product variants (SKUs) are loaded from the shopping_mall_skus table with their relationships to shopping_mall_sku_colors, shopping_mall_sku_sizes, and shopping_mall_sku_options. Each SKU variant includes its unique sku_code, variant-specific price, available_quantity, reserved_quantity, and is_active status. This enables customers to see all available color, size, and option combinations with real-time inventory status for each variant.\n\nThe complete product image gallery is retrieved from shopping_mall_product_images ordered by display_order. Images include both product-level images and variant-specific images (where shopping_mall_sku_id is populated). The primary image (is_primary = true) is identified for main display, with additional images forming the gallery for customer browsing and zoom functionality.\n\nCategory information is fetched from shopping_mall_categories including the direct category assignment and the complete hierarchical breadcrumb path to the root category. This supports navigation breadcrumbs and related product suggestions based on category taxonomy.\n\nSeller information is retrieved from shopping_mall_sellers including business_name, store_url_slug, and seller rating metrics. This allows customers to view seller identity, access the seller's store page, and assess seller reputation.\n\nAggregate review statistics are calculated from shopping_mall_reviews including average rating (calculated from rating field), total review count, and rating distribution (count of reviews at each star level 1-5). Only reviews with status 'approved' are included in these calculations. The response may include a preview of recent top reviews with pagination support for viewing all reviews.\n\nThe operation also determines the product's stock availability status by checking if any active SKU has available_quantity greater than zero. Products with all SKUs out of stock display appropriate messaging while remaining visible for wishlist addition and back-in-stock notifications.\n\nSecurity and performance considerations: This is a publicly accessible endpoint requiring no authentication, enabling guest browsing. Response data is cached for frequently accessed products to minimize database load. All pricing displays use two decimal precision. Product view events may be tracked for analytics purposes to measure product popularity and optimize search ranking.\n\nRelated API operations: After viewing product details, customers typically add items to cart (POST /carts/items), add to wishlist (POST /wishlists/items), or browse related products. For authenticated customers who have purchased this product, the review submission endpoint becomes available.","parameters":[{"name":"productId","description":"Unique identifier of the product to retrieve from shopping_mall_products table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete product details including variants, images, seller information, category hierarchy, and review statistics","typeName":"IShoppingMallProduct"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before it can be retrieved. The product entity must exist in the shopping_mall_products table with the specified productId for the GET operation to return product details."}],"accessor":["shoppingMall","products","at"]},{"specification":"This operation enables sellers to create a new product listing in the e-commerce shopping mall platform. The operation interacts with the shopping_mall_products table to insert a new product record with all required information including product details, category assignment, pricing, and initial status. The seller must provide complete product information meeting validation requirements: product name (3-200 characters), description (minimum 20 characters), category assignment, base price (positive number > 0), and at least one product image. The product is initially created in 'draft' status allowing the seller to prepare complete product information before activating it for customer visibility. This operation validates all input data according to product creation business rules including name uniqueness within seller's catalog, valid category reference, and price constraints. The operation associates the product with the authenticated seller account and records creation timestamp. After successful creation, sellers can proceed to add product variants (SKUs), additional images, and activate the product for sale.","path":"/shoppingMall/seller/products","method":"post","summary":"Create a new product listing for the authenticated seller","description":"This operation allows sellers to create new product listings in their catalog within the shopping_mall_products table. The operation validates that all required product information is provided and meets the platform's business rules before creating the product record.\n\nThe product creation process enforces several critical validation rules. The product name must be between 3 and 200 characters and unique within the seller's existing product catalog to prevent duplicate listings. The product description must contain at least 20 meaningful characters to ensure customers receive adequate product information. The base price must be a positive number greater than zero with maximum two decimal places. The seller must assign the product to an active category from the shopping_mall_categories table.\n\nAll newly created products are initialized with 'draft' status, allowing sellers to prepare complete product information including variants (SKUs), images, and specifications before making the product visible to customers. The draft status ensures incomplete products do not appear in customer-facing catalog searches or category browsing. Sellers can later activate products by changing status to 'active' once all required information including at least one SKU and one product image is complete.\n\nThe operation automatically associates the product with the authenticated seller's account by capturing the seller_id from the authentication context. This ensures proper ownership and access control, allowing sellers to manage only their own products. The system records the creation timestamp for audit purposes and product lifecycle tracking.\n\nThis operation integrates with the product catalog management system and must validate the category reference exists and is active. The created product serves as the parent container for product variants (shopping_mall_skus), product images (shopping_mall_product_images), and customer reviews (shopping_mall_reviews). After creation, sellers typically proceed to add SKU variants representing different color, size, and option combinations, upload product images, and complete all required information before activating the product for sale.\n\nSecurity considerations include validating the seller account is active and verified before allowing product creation. The operation enforces rate limiting to prevent spam product creation and validates input data to prevent XSS attacks and SQL injection through malicious product names or descriptions.","parameters":[],"requestBody":{"description":"Product creation data including name, description, category, pricing, and initial product information","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"The newly created product record with assigned ID, initial draft status, and complete product details","typeName":"IShoppingMallProduct"},"authorizationRole":"seller","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/auth/seller/password/reset/request","method":"post"},"description":"Seller account must exist before creating products. The password reset request operation validates that a seller account exists in the system."},{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Product category must be created before it can be assigned to a product. The product creation requires a valid category reference from the shopping_mall_categories table."}],"accessor":["shoppingMall","seller","products","create"]},{"specification":"This operation enables sellers to update existing product information for products they own. The operation interacts with the shopping_mall_products table to modify product attributes such as name, description, category assignment, base price, brand, tags, specifications, and status. The seller can update any product information at any time regardless of product status (draft, active, inactive). The operation validates the authenticated seller owns the product being updated by verifying the product's shopping_mall_seller_id matches the authenticated seller. Updates to active products apply immediately and are visible to customers, while draft product updates do not affect customer-facing displays. The operation enforces all product validation rules including name length constraints, description minimum length, price validity, and category reference validation. When sellers update product prices, the new price applies to future orders while preserving historical prices in existing orders and carts. The operation records the update timestamp for audit trail and change tracking. This operation allows sellers to maintain accurate product information, correct errors, update pricing in response to market conditions, and manage product lifecycle through status changes.","path":"/shoppingMall/seller/products/{productId}","method":"put","summary":"Update existing product information for seller-owned products","description":"This operation allows sellers to update product information for products in their catalog stored in the shopping_mall_products table. Sellers can modify product attributes to correct errors, update descriptions, adjust pricing, change categories, or manage product lifecycle status.\n\nThe operation enforces strict ownership validation to ensure sellers can only update their own products. When a seller submits an update request, the system verifies the product's shopping_mall_seller_id matches the authenticated seller's account ID. If the seller does not own the product, the operation returns a 403 Forbidden error preventing unauthorized modifications. This ownership check protects seller data and prevents cross-seller interference.\n\nSellers can update any product information fields including product name (3-200 characters), description (minimum 20 characters), category assignment, base price, brand, tags, specifications JSON, and product status. All field validations from product creation apply to updates as well. The product name must remain unique within the seller's catalog, the description must maintain meaningful content, and prices must be positive numbers greater than zero with maximum two decimal places.\n\nProduct status updates enable sellers to manage product lifecycle. Sellers can transition products between draft (hidden from customers), active (published and visible), inactive (temporarily hidden), and discontinued (permanently removed from active catalog). Status transitions must follow valid business rules. For example, transitioning from draft to active requires all mandatory information to be complete including at least one SKU variant and one product image.\n\nWhen sellers update product prices for active products, the new price applies immediately to all customer-facing displays including product listings, detail pages, and search results. However, existing orders and shopping carts preserve the original prices at the time of addition to maintain price integrity and prevent customer confusion. Customers viewing their carts are notified of price changes with updated totals before checkout.\n\nCategory updates allow sellers to reorganize products within the platform taxonomy. When changing a product's category, the system validates the new category exists in shopping_mall_categories and is active. Category changes affect product discoverability, applicable filters, and breadcrumb navigation displayed to customers.\n\nThe operation records the update timestamp in the updated_at field for audit purposes and change tracking. The system maintains edit history through timestamp tracking enabling administrators to monitor product modification patterns and detect suspicious changes. Updates to critical fields like pricing or category may trigger administrative review for fraud prevention.\n\nThis operation integrates with the product catalog system and must maintain referential integrity with related entities including SKUs, images, and reviews. Sellers typically use this operation to respond to market conditions, correct listing errors, refresh product descriptions with updated information, and manage seasonal availability through status changes.","parameters":[{"name":"productId","description":"Unique identifier of the product to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated product information including any modifiable fields such as name, description, category, price, brand, tags, specifications, or status","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"The updated product record reflecting all changes with updated timestamp","typeName":"IShoppingMallProduct"},"authorizationRole":"seller","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before it can be updated. The update operation requires an existing product identified by productId in the shopping_mall_products table."},{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Product category must exist before it can be assigned during product update. The category assignment validation requires a valid category reference from the shopping_mall_categories table."}],"accessor":["shoppingMall","seller","products","update"]},{"specification":"This operation permanently removes a product from the database. It operates on the shopping_mall_products table from the Prisma schema. The operation is only permitted when the product has no associated order history to preserve referential integrity and historical transaction records. This endpoint is restricted to sellers for removing their own draft products, and admins who can remove any product for policy violations or moderation purposes. The deletion is a hard delete operation that completely removes the product record from the database along with all associated SKUs, images, and variant configurations. This operation should be used cautiously as it is irreversible and results in complete data removal.","path":"/shoppingMall/seller/products/{productId}","method":"delete","summary":"Permanently delete a product from the shopping_mall_products table","description":"This operation permanently removes a product record from the shopping_mall_products table in the database. It is designed for products that have no order history or for administrative removal of policy-violating content.\n\nThe deletion is a hard delete operation that completely removes the product from the database rather than soft-deleting it. When a product is deleted, all associated data including SKU variants, product images, and variant attribute configurations are also removed through cascading deletion as defined in the Prisma schema relationships.\n\nThis operation enforces strict business rules to maintain data integrity. Products that have been included in customer orders cannot be deleted to preserve historical transaction records and order details. Instead, sellers should mark such products as discontinued through the product status update functionality. Only products in draft status or products that have never been ordered are eligible for deletion.\n\nSellers can use this endpoint to remove their own draft products that were created but never published or ordered. Admins can use this endpoint to remove any product for policy violations, inappropriate content, or administrative purposes, though they should exercise caution as this is an irreversible operation.\n\nThe operation validates that the requesting user (seller or admin) has appropriate permissions to delete the specified product. Sellers can only delete products they own, while admins can delete any product on the platform. The operation returns an error if the product has associated orders or if the requester lacks deletion permissions.\n\nThis endpoint should be used sparingly as product deletion is permanent. For most operational scenarios, changing the product status to 'inactive' or 'discontinued' is preferred to maintain data integrity and support order history display.","parameters":[{"name":"productId","description":"Unique identifier of the product to be permanently deleted from the shopping_mall_products table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before it can be deleted"}],"accessor":["shoppingMall","seller","products","erase"]},{"specification":"This operation permanently removes a product from the database. It operates on the shopping_mall_products table from the Prisma schema. The operation is only permitted when the product has no associated order history to preserve referential integrity and historical transaction records. This endpoint is restricted to sellers for removing their own draft products, and admins who can remove any product for policy violations or moderation purposes. The deletion is a hard delete operation that completely removes the product record from the database along with all associated SKUs, images, and variant configurations. This operation should be used cautiously as it is irreversible and results in complete data removal.","path":"/shoppingMall/admin/products/{productId}","method":"delete","summary":"Permanently delete a product from the shopping_mall_products table","description":"This operation permanently removes a product record from the shopping_mall_products table in the database. It is designed for products that have no order history or for administrative removal of policy-violating content.\n\nThe deletion is a hard delete operation that completely removes the product from the database rather than soft-deleting it. When a product is deleted, all associated data including SKU variants, product images, and variant attribute configurations are also removed through cascading deletion as defined in the Prisma schema relationships.\n\nThis operation enforces strict business rules to maintain data integrity. Products that have been included in customer orders cannot be deleted to preserve historical transaction records and order details. Instead, sellers should mark such products as discontinued through the product status update functionality. Only products in draft status or products that have never been ordered are eligible for deletion.\n\nSellers can use this endpoint to remove their own draft products that were created but never published or ordered. Admins can use this endpoint to remove any product for policy violations, inappropriate content, or administrative purposes, though they should exercise caution as this is an irreversible operation.\n\nThe operation validates that the requesting user (seller or admin) has appropriate permissions to delete the specified product. Sellers can only delete products they own, while admins can delete any product on the platform. The operation returns an error if the product has associated orders or if the requester lacks deletion permissions.\n\nThis endpoint should be used sparingly as product deletion is permanent. For most operational scenarios, changing the product status to 'inactive' or 'discontinued' is preferred to maintain data integrity and support order history display.","parameters":[{"name":"productId","description":"Unique identifier of the product to be permanently deleted from the shopping_mall_products table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before it can be deleted"}],"accessor":["shoppingMall","admin","products","erase"]},{"specification":"This operation retrieves a filtered and paginated list of SKU variants for a specific product from the shopping_mall_skus table. It allows customers, sellers, and admins to search and filter product variants based on various criteria including color, size, custom options, price range, availability status, and activity status. The operation supports complex filtering for variant attributes, inventory levels, and SKU-specific pricing. It returns SKU details including variant attribute information (color, size, option combinations), pricing, inventory quantities (available and reserved), and availability status. The response includes pagination metadata enabling efficient navigation through potentially large variant collections. This endpoint is essential for product detail pages where customers view available variants, and for seller inventory management where sellers monitor their SKU-level stock and pricing.","path":"/shoppingMall/products/{productId}/skus","method":"patch","summary":"Search and filter SKU variants for a specific product in shopping_mall_skus table","description":"This operation retrieves a comprehensive, filtered, and paginated list of SKU (Stock Keeping Unit) variants associated with a specific product from the shopping_mall_skus table. SKUs represent individual product variants with unique combinations of attributes such as color, size, and custom options, each maintaining independent pricing and inventory tracking.\n\nThe endpoint supports advanced filtering capabilities enabling users to narrow down SKU variants based on multiple criteria. Filters include variant attributes (specific colors, sizes, or custom options), price ranges, inventory availability (in stock, low stock, out of stock), and SKU activity status. This flexible filtering is essential for both customer-facing product displays and seller inventory management interfaces.\n\nEach SKU in the response includes complete variant information: the unique SKU code, associated variant attributes (color name and hex code if applicable, size value and category, custom option name and value), current pricing, inventory levels (available quantity, reserved quantity for pending orders, and low stock threshold), and availability status (active or inactive). This comprehensive data enables accurate product variant selection by customers and detailed inventory monitoring by sellers.\n\nThe operation implements pagination to handle products with numerous variants efficiently. Pagination parameters include page number, page size (default 20, maximum 100 variants per page), and sorting options. Sort capabilities include sorting by price (ascending or descending), available quantity (to identify low-stock variants), SKU code alphabetically, or creation date (newest or oldest first).\n\nSecurity and authorization considerations are critical for this endpoint. Customers and public users can view only active SKUs with their pricing and availability to support purchasing decisions. Sellers can view all their product SKUs including inactive variants, reserved inventory quantities, and comprehensive stock details for inventory management. Admins have full visibility across all SKU data for any product on the platform for moderation and oversight purposes.\n\nThis endpoint directly references the shopping_mall_skus table structure from the Prisma schema, including foreign key relationships to shopping_mall_products (parent product), shopping_mall_sku_colors (color variant), shopping_mall_sku_sizes (size variant), and shopping_mall_sku_options (custom option variant). The response accurately reflects these relationships by including denormalized variant attribute details for efficient display.\n\nPerformance requirements mandate that this operation returns results within 500 milliseconds even for products with hundreds of variants. The implementation should leverage database indexing on foreign keys, composite indexes on product_id with is_active status, and efficient pagination strategies to meet these performance targets.","parameters":[{"name":"productId","description":"Unique identifier of the parent product whose SKU variants are being retrieved from the shopping_mall_skus table","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filtering criteria for SKU variants including variant attributes, price ranges, inventory filters, availability status, pagination parameters, and sort options","typeName":"IShoppingMallSku.IRequest"},"responseBody":{"description":"Paginated collection of SKU variants matching the search criteria with complete variant information including attributes, pricing, inventory levels, and availability status","typeName":"IPageIShoppingMallSku"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before SKU variants can be retrieved for that product"}],"accessor":["shoppingMall","products","skus","index"]},{"specification":"This operation retrieves detailed information about a specific product variant (SKU) including its variant attributes (color, size, options), pricing, inventory availability, and variant-specific images. It operates on the shopping_mall_skus table from the Prisma schema and provides complete SKU details necessary for customer product selection and purchase decisions. The SKU represents the actual purchasable unit with specific attributes, independent pricing, and stock tracking.","path":"/shoppingMall/products/{productId}/skus/{skuId}","method":"get","summary":"Retrieve detailed information for a specific product SKU variant","description":"Retrieve comprehensive details for a specific product variant (SKU) identified by its unique SKU ID within the context of a parent product. This operation provides all information necessary for customers to make informed purchase decisions about a specific product variant.\n\nThe SKU represents a Stock Keeping Unit with a unique combination of variant attributes such as color, size, and custom options. Each SKU has independent pricing that may differ from the base product price, allowing sellers to charge different amounts for different sizes, colors, or configurations. The SKU also maintains its own inventory tracking with available_quantity and reserved_quantity fields.\n\nThis endpoint returns complete SKU information including the SKU code (unique identifier), current price, stock availability status (in stock, low stock, out of stock based on available_quantity), low stock threshold configuration, and whether the SKU is currently active for purchase. The response includes references to variant attribute entities (shopping_mall_sku_colors, shopping_mall_sku_sizes, shopping_mall_sku_options) that define the specific variant combination.\n\nCustomers use this information to understand exactly which product variant they are viewing, check its availability, and see the specific price for their selected combination of attributes. The inventory information helps customers make immediate purchase decisions by showing real-time stock status.\n\nSecurity considerations include validating that the SKU belongs to the specified product to prevent unauthorized access to SKU details from unrelated products. The operation is publicly accessible as customers need to view SKU details during product browsing without authentication.\n\nThis operation integrates with the shopping_mall_products table to verify the parent product relationship and with variant attribute tables to provide complete variant descriptions. Performance is critical as customers frequently switch between variants on product pages, requiring sub-second response times.","parameters":[{"name":"productId","description":"Unique identifier of the parent product containing the SKU variant","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the specific SKU variant to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete SKU variant information including attributes, pricing, and inventory status","typeName":"IShoppingMallSku"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before a specific SKU variant can be retrieved"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variant must be created before it can be retrieved with detailed information"}],"accessor":["shoppingMall","products","skus","at"]},{"specification":"This operation creates a new product variant (SKU) for an existing product with specific attribute combinations (color, size, options), independent pricing, and initial inventory quantity. It operates on the shopping_mall_skus table from the Prisma schema and enables sellers to expand their product offerings with additional variants. The operation validates attribute uniqueness, generates unique SKU codes, and initializes inventory tracking for the new variant.","path":"/shoppingMall/seller/products/{productId}/skus","method":"post","summary":"Create a new SKU variant for an existing product","description":"Create a new Stock Keeping Unit (SKU) variant for an existing product with a unique combination of variant attributes such as color, size, and custom options. This operation enables sellers to expand their product catalog by adding new variants to existing products, each with independent pricing and inventory tracking.\n\nThe SKU creation process requires the seller to specify which variant attributes apply to this SKU by providing foreign key references to shopping_mall_sku_colors, shopping_mall_sku_sizes, and shopping_mall_sku_options entities. Not all attributes are required - a product might have only color variants, only size variants, or a combination of multiple attributes. The system validates that the combination of attributes is unique within the parent product to prevent duplicate SKU creation.\n\nEach new SKU must have a unique sku_code generated automatically by the system or provided by the seller. This code must be unique across the entire platform, not just within the product. The seller specifies the price for this specific variant, which can differ from the base product price to accommodate size-based pricing, premium color charges, or custom option pricing differences.\n\nInitial inventory configuration is critical during SKU creation. The seller provides the available_quantity (initial stock for sale), and the system initializes reserved_quantity to zero. The seller can also configure the low_stock_threshold that triggers inventory alerts when stock falls below this level (default is 10 units). The is_active flag determines whether customers can immediately purchase this variant or if it should be hidden from catalog display.\n\nSecurity and authorization are essential for this operation. Only sellers can create SKUs, and they can only create SKUs for products they own. The system validates that the authenticated seller's ID matches the shopping_mall_seller_id of the parent product before allowing SKU creation. Admins have override capability to create SKUs for any product during exceptional circumstances.\n\nThe operation returns the complete created SKU entity including the generated ID, sku_code, timestamps, and all configured attributes. This allows the seller to immediately verify the SKU was created correctly and obtain the SKU ID for subsequent operations like uploading variant-specific images or updating inventory.\n\nBusiness logic validation includes ensuring prices are positive numbers greater than zero, inventory quantities are non-negative integers, and attribute references point to valid, existing entities. The system prevents creating SKUs with attribute combinations that would result in duplicate variants for the same product.\n\nThis operation integrates with the product catalog management system and inventory management workflows, triggering events that may update product availability status and enable the new variant for customer purchase once created.","parameters":[{"name":"productId","description":"Unique identifier of the parent product for which the SKU variant is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"SKU variant creation data including variant attributes, pricing, and initial inventory configuration","typeName":"IShoppingMallSku.ICreate"},"responseBody":{"description":"Newly created SKU variant with generated ID, timestamps, and complete attribute configuration","typeName":"IShoppingMallSku"},"authorizationRole":"seller","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before SKU variants can be added to it"}],"accessor":["shoppingMall","seller","products","skus","create"]},{"specification":"This operation enables sellers and admins to update an existing product SKU variant's information including pricing, inventory quantities, and active status. It operates on the shopping_mall_skus table from the Prisma schema. Sellers can only update SKUs belonging to their own products, while admins can update any SKU across the platform. The operation validates that the SKU exists and belongs to the product specified in the path, ensuring data integrity and proper ownership validation. This is a critical operation for maintaining accurate product variant information and inventory levels.","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}","method":"put","summary":"Update a product SKU variant's pricing, inventory, and active status","description":"Updates an existing product SKU variant's attributes including price, inventory quantities (available and reserved), low stock threshold, and active status. This operation enables sellers to maintain accurate product variant information and inventory levels for their products.\n\nThe operation validates that the specified SKU belongs to the specified product to ensure data integrity. Sellers can only update SKUs for products they own, while administrators have platform-wide access to update any SKU.\n\nKey update capabilities include adjusting SKU pricing to reflect market conditions or promotional strategies, modifying inventory quantities when restocking or correcting discrepancies, updating low stock thresholds to trigger appropriate alerts, and toggling SKU active status to control variant availability without deletion.\n\nThe operation maintains the relationship between products and their SKUs as defined in the shopping_mall_skus table, which tracks independent pricing and inventory for each variant combination of color, size, and custom options. Updates to inventory quantities should consider existing reserved quantities from active carts and pending orders.\n\nSecurity considerations include role-based access control where sellers can only update their own products' SKUs and admins can update any SKU. The operation logs inventory changes for audit trail purposes when quantities are modified, supporting inventory transaction tracking requirements.\n\nThis operation is typically used when sellers need to adjust pricing strategies, restock inventory after receiving new shipments, correct inventory discrepancies, or temporarily disable specific variants. Updates are applied immediately and reflected in product catalog displays, cart validations, and order processing workflows.","parameters":[{"name":"productId","description":"Unique identifier of the parent product containing the SKU variant","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the specific SKU variant to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated SKU variant information including pricing, inventory, and status","typeName":"IShoppingMallSku.IUpdate"},"responseBody":{"description":"Updated SKU variant details with current pricing and inventory information","typeName":"IShoppingMallSku"},"name":"update","authorizationType":null,"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its SKU variant can be updated"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variant must be created before it can be updated"}],"accessor":["shoppingMall","seller","products","skus","update"]},{"specification":"This operation enables sellers and admins to update an existing product SKU variant's information including pricing, inventory quantities, and active status. It operates on the shopping_mall_skus table from the Prisma schema. Sellers can only update SKUs belonging to their own products, while admins can update any SKU across the platform. The operation validates that the SKU exists and belongs to the product specified in the path, ensuring data integrity and proper ownership validation. This is a critical operation for maintaining accurate product variant information and inventory levels.","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}","method":"put","summary":"Update a product SKU variant's pricing, inventory, and active status","description":"Updates an existing product SKU variant's attributes including price, inventory quantities (available and reserved), low stock threshold, and active status. This operation enables sellers to maintain accurate product variant information and inventory levels for their products.\n\nThe operation validates that the specified SKU belongs to the specified product to ensure data integrity. Sellers can only update SKUs for products they own, while administrators have platform-wide access to update any SKU.\n\nKey update capabilities include adjusting SKU pricing to reflect market conditions or promotional strategies, modifying inventory quantities when restocking or correcting discrepancies, updating low stock thresholds to trigger appropriate alerts, and toggling SKU active status to control variant availability without deletion.\n\nThe operation maintains the relationship between products and their SKUs as defined in the shopping_mall_skus table, which tracks independent pricing and inventory for each variant combination of color, size, and custom options. Updates to inventory quantities should consider existing reserved quantities from active carts and pending orders.\n\nSecurity considerations include role-based access control where sellers can only update their own products' SKUs and admins can update any SKU. The operation logs inventory changes for audit trail purposes when quantities are modified, supporting inventory transaction tracking requirements.\n\nThis operation is typically used when sellers need to adjust pricing strategies, restock inventory after receiving new shipments, correct inventory discrepancies, or temporarily disable specific variants. Updates are applied immediately and reflected in product catalog displays, cart validations, and order processing workflows.","parameters":[{"name":"productId","description":"Unique identifier of the parent product containing the SKU variant","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the specific SKU variant to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated SKU variant information including pricing, inventory, and status","typeName":"IShoppingMallSku.IUpdate"},"responseBody":{"description":"Updated SKU variant details with current pricing and inventory information","typeName":"IShoppingMallSku"},"name":"update","authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its SKU variants can be updated"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variant must be created before it can be updated"}],"accessor":["shoppingMall","admin","products","skus","update"]},{"specification":"This operation enables sellers and admins to remove a product SKU variant from the system. It operates on the shopping_mall_skus table from the Prisma schema. Since the schema does NOT have a deleted_at column for shopping_mall_skus, this operation performs a hard delete that permanently removes the SKU record from the database. Sellers can only delete SKUs belonging to their own products, while admins can delete any SKU across the platform. The operation must validate that the SKU is not referenced in existing orders to maintain referential integrity and preserve order history. This is a critical operation for managing product variants and cleaning up discontinued or erroneous SKU entries.","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}","method":"delete","summary":"Permanently delete a product SKU variant from the system","description":"Permanently removes a product SKU variant from the database. This operation performs a hard delete as the shopping_mall_skus table does not support soft deletion. Once deleted, the SKU cannot be recovered and all associated data is permanently removed.\n\nThe operation validates that the specified SKU belongs to the specified product to ensure proper data relationships. Sellers can only delete SKUs from products they own, while administrators have platform-wide access to delete any SKU.\n\nCritical validation includes checking that the SKU is not referenced in existing order items (shopping_mall_order_items table) to preserve order history integrity. If the SKU has been purchased in any order, the deletion is blocked and an appropriate error is returned. This ensures historical order data remains accurate and customers can view their past purchases correctly.\n\nAdditional validation checks include verifying that the product has at least one other active SKU remaining after deletion, as products cannot exist without any purchasable variants. If this is the last SKU for a product, the deletion may be blocked or the product status may need to be updated accordingly.\n\nThe operation also cleans up related data including cart items (shopping_mall_cart_items), wishlist items (shopping_mall_wishlist_items), and product images (shopping_mall_product_images) that are specific to the deleted SKU variant. These cascading deletions ensure data consistency across the system.\n\nSecurity considerations include role-based access control where sellers can only delete SKUs from their own products and admins can delete any SKU. The operation logs the deletion action for audit trail purposes, recording who deleted the SKU, when, and which product it belonged to.\n\nThis operation is typically used when sellers need to remove discontinued variants, correct erroneous SKU entries created by mistake, or clean up product listings by removing variants that are no longer offered. Because this is a permanent deletion, it should be used with caution and appropriate confirmation prompts in the user interface.","parameters":[{"name":"productId","description":"Unique identifier of the parent product containing the SKU variant","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the specific SKU variant to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationType":null,"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its SKU variants can be deleted"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variant must be created before it can be deleted"}],"accessor":["shoppingMall","seller","products","skus","erase"]},{"specification":"This operation enables sellers and admins to remove a product SKU variant from the system. It operates on the shopping_mall_skus table from the Prisma schema. Since the schema does NOT have a deleted_at column for shopping_mall_skus, this operation performs a hard delete that permanently removes the SKU record from the database. Sellers can only delete SKUs belonging to their own products, while admins can delete any SKU across the platform. The operation must validate that the SKU is not referenced in existing orders to maintain referential integrity and preserve order history. This is a critical operation for managing product variants and cleaning up discontinued or erroneous SKU entries.","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}","method":"delete","summary":"Permanently delete a product SKU variant from the system","description":"Permanently removes a product SKU variant from the database. This operation performs a hard delete as the shopping_mall_skus table does not support soft deletion. Once deleted, the SKU cannot be recovered and all associated data is permanently removed.\n\nThe operation validates that the specified SKU belongs to the specified product to ensure proper data relationships. Sellers can only delete SKUs from products they own, while administrators have platform-wide access to delete any SKU.\n\nCritical validation includes checking that the SKU is not referenced in existing order items (shopping_mall_order_items table) to preserve order history integrity. If the SKU has been purchased in any order, the deletion is blocked and an appropriate error is returned. This ensures historical order data remains accurate and customers can view their past purchases correctly.\n\nAdditional validation checks include verifying that the product has at least one other active SKU remaining after deletion, as products cannot exist without any purchasable variants. If this is the last SKU for a product, the deletion may be blocked or the product status may need to be updated accordingly.\n\nThe operation also cleans up related data including cart items (shopping_mall_cart_items), wishlist items (shopping_mall_wishlist_items), and product images (shopping_mall_product_images) that are specific to the deleted SKU variant. These cascading deletions ensure data consistency across the system.\n\nSecurity considerations include role-based access control where sellers can only delete SKUs from their own products and admins can delete any SKU. The operation logs the deletion action for audit trail purposes, recording who deleted the SKU, when, and which product it belonged to.\n\nThis operation is typically used when sellers need to remove discontinued variants, correct erroneous SKU entries created by mistake, or clean up product listings by removing variants that are no longer offered. Because this is a permanent deletion, it should be used with caution and appropriate confirmation prompts in the user interface.","parameters":[{"name":"productId","description":"Unique identifier of the parent product containing the SKU variant","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the specific SKU variant to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its SKU variants can be deleted"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variant must be created before it can be deleted"}],"accessor":["shoppingMall","admin","products","skus","erase"]},{"specification":"This operation retrieves a paginated and filterable list of images associated with a specific product. It operates on the shopping_mall_product_images table which stores all images for a product including both general product images and variant-specific images. The operation supports complex filtering, sorting, and pagination requirements for efficient image management and display. Sellers need this operation to review and manage their product's image gallery, while admins need it for product moderation and content review. The operation returns image metadata including URLs, display order, primary image designation, SKU associations, and alternative text. This enables comprehensive image gallery management with filtering capabilities to find specific images within a product's collection.","path":"/shoppingMall/seller/products/{productId}/images","method":"patch","summary":"Retrieve paginated list of images for a specific product with filtering and sorting","description":"Retrieve a comprehensive, paginated list of images associated with a specific product from the shopping_mall_product_images table. This operation provides advanced search and filtering capabilities for managing product image galleries, supporting both general product images and variant-specific images.\n\nThe operation is designed to serve multiple user roles with different access requirements. Sellers can retrieve and manage images for their own products to maintain their product catalog and visual presentation. Administrators can access images across all products for content moderation, policy enforcement, and quality control purposes. The filtering capabilities enable efficient image management even for products with large image galleries.\n\nSecurity considerations include role-based access control where sellers can only retrieve images for products they own, while admins have platform-wide access. The operation validates that the specified product exists and that the requesting user has appropriate permissions based on their role and product ownership.\n\nThe response includes comprehensive image metadata from the shopping_mall_product_images schema: image URLs for display, display_order for gallery sequencing, is_primary flag to identify the main product image, optional SKU associations for variant-specific images, alt_text for accessibility, and creation timestamps. This metadata enables sophisticated image management workflows including reordering, primary image selection, and variant image coordination.\n\nThe operation supports pagination to handle products with many images efficiently, with configurable page size and sorting options. Sorting can be applied by display_order (for gallery sequence), creation date (chronological), or primary status (main images first). Filtering options include SKU-specific images, primary image only, or date range filters.\n\nThis operation integrates with the product catalog management system defined in the requirements, supporting the business rule that products must have at least one image and can have up to 10 images. The display_order field enables the requirement that the first image (order 0) serves as the main product image in listings and search results.\n\nRelated operations that work together with this endpoint include retrieving individual image details, creating new product images, updating image properties (order, primary status), and deleting images. These operations collectively enable complete product image lifecycle management as specified in the product catalog management requirements.","parameters":[{"name":"productId","description":"Unique identifier of the product whose images are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for product image search","typeName":"IShoppingMallProductImage.IRequest"},"responseBody":{"description":"Paginated list of product images with metadata including URLs, display order, primary status, and SKU associations","typeName":"IPageIShoppingMallProductImage"},"authorizationRole":"seller","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its images can be retrieved"}],"accessor":["shoppingMall","seller","products","images","index"]},{"specification":"This operation retrieves a paginated and filterable list of images associated with a specific product. It operates on the shopping_mall_product_images table which stores all images for a product including both general product images and variant-specific images. The operation supports complex filtering, sorting, and pagination requirements for efficient image management and display. Sellers need this operation to review and manage their product's image gallery, while admins need it for product moderation and content review. The operation returns image metadata including URLs, display order, primary image designation, SKU associations, and alternative text. This enables comprehensive image gallery management with filtering capabilities to find specific images within a product's collection.","path":"/shoppingMall/admin/products/{productId}/images","method":"patch","summary":"Retrieve paginated list of images for a specific product with filtering and sorting","description":"Retrieve a comprehensive, paginated list of images associated with a specific product from the shopping_mall_product_images table. This operation provides advanced search and filtering capabilities for managing product image galleries, supporting both general product images and variant-specific images.\n\nThe operation is designed to serve multiple user roles with different access requirements. Sellers can retrieve and manage images for their own products to maintain their product catalog and visual presentation. Administrators can access images across all products for content moderation, policy enforcement, and quality control purposes. The filtering capabilities enable efficient image management even for products with large image galleries.\n\nSecurity considerations include role-based access control where sellers can only retrieve images for products they own, while admins have platform-wide access. The operation validates that the specified product exists and that the requesting user has appropriate permissions based on their role and product ownership.\n\nThe response includes comprehensive image metadata from the shopping_mall_product_images schema: image URLs for display, display_order for gallery sequencing, is_primary flag to identify the main product image, optional SKU associations for variant-specific images, alt_text for accessibility, and creation timestamps. This metadata enables sophisticated image management workflows including reordering, primary image selection, and variant image coordination.\n\nThe operation supports pagination to handle products with many images efficiently, with configurable page size and sorting options. Sorting can be applied by display_order (for gallery sequence), creation date (chronological), or primary status (main images first). Filtering options include SKU-specific images, primary image only, or date range filters.\n\nThis operation integrates with the product catalog management system defined in the requirements, supporting the business rule that products must have at least one image and can have up to 10 images. The display_order field enables the requirement that the first image (order 0) serves as the main product image in listings and search results.\n\nRelated operations that work together with this endpoint include retrieving individual image details, creating new product images, updating image properties (order, primary status), and deleting images. These operations collectively enable complete product image lifecycle management as specified in the product catalog management requirements.","parameters":[{"name":"productId","description":"Unique identifier of the product whose images are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for product image search","typeName":"IShoppingMallProductImage.IRequest"},"responseBody":{"description":"Paginated list of product images with metadata including URLs, display order, primary status, and SKU associations","typeName":"IPageIShoppingMallProductImage"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before retrieving its images. The product needs to be created first to have images associated with it."}],"accessor":["shoppingMall","admin","products","images","index"]},{"specification":"This operation retrieves detailed information about a specific product image by its unique identifier. It operates on the shopping_mall_product_images table and returns complete image metadata including the image URL, display positioning, primary image status, optional SKU variant association, alternative text for accessibility, and creation timestamp. The operation serves sellers managing their product visual presentation and admins performing content moderation. It requires both product identification and specific image identification to ensure proper scoping and authorization validation.","path":"/shoppingMall/seller/products/{productId}/images/{imageId}","method":"get","summary":"Retrieve detailed information for a specific product image","description":"Retrieve comprehensive details for a single product image identified by its unique ID within the context of a specific product. This operation accesses the shopping_mall_product_images table to return complete image metadata and properties.\n\nThe operation provides detailed image information including the storage URL for the image file, the display_order position determining where the image appears in the product gallery sequence, the is_primary boolean flag indicating whether this is the main product image shown in listings, optional shopping_mall_sku_id reference if the image is specific to a product variant, alt_text for accessibility and SEO purposes, and the created_at timestamp showing when the image was uploaded.\n\nSecurity and authorization are critical aspects of this operation. Sellers can only retrieve images for products they own, validated by checking that the product's shopping_mall_seller_id matches the authenticated seller's ID. Administrators have unrestricted access to retrieve any product image across the platform for moderation and quality control purposes. The operation validates that both the product and image exist before returning data, ensuring referential integrity.\n\nThe image URL returned uses the image_url field from the shopping_mall_product_images schema, which stores the full path or URL to the image file. The URL format follows the pattern defined in the schema with a maximum length of 80,000 characters to support long URI formats including data URIs or cloud storage URLs with authentication tokens.\n\nThe display_order field indicates the image's position in the product gallery, where position 0 represents the first image (which is the main product image by convention). This information is essential for image management interfaces that allow reordering images or identifying which image serves as the primary product representation.\n\nThe optional shopping_mall_sku_id association enables variant-specific images. When this field is populated, it indicates the image specifically represents a particular color, size, or option combination. This supports the business requirement that customers should see variant-specific images when selecting product variants during shopping. When the field is null, the image is a general product image applicable to all variants.\n\nThis operation is frequently used in conjunction with image update operations (changing display order, setting primary status, updating alt text) and image deletion operations. Together, these operations enable complete product image lifecycle management as specified in the product catalog management requirements document.\n\nThe operation returns a single image object with all properties from the shopping_mall_product_images table, formatted according to the IShoppingMallProductImage response type. Error scenarios include product not found (404), image not found (404), and unauthorized access (403) when the seller attempts to access another seller's product images.","parameters":[{"name":"productId","description":"Unique identifier of the product that owns this image","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific product image to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product image information including URL, display order, primary status, SKU association, and metadata","typeName":"IShoppingMallProductImage"},"authorizationRole":"seller","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before retrieving its specific image. The product needs to be created first to have images associated with it."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Product image must be created before it can be retrieved. The image needs to be uploaded to the product first."}],"accessor":["shoppingMall","seller","products","images","at"]},{"specification":"This operation retrieves detailed information about a specific product image by its unique identifier. It operates on the shopping_mall_product_images table and returns complete image metadata including the image URL, display positioning, primary image status, optional SKU variant association, alternative text for accessibility, and creation timestamp. The operation serves sellers managing their product visual presentation and admins performing content moderation. It requires both product identification and specific image identification to ensure proper scoping and authorization validation.","path":"/shoppingMall/admin/products/{productId}/images/{imageId}","method":"get","summary":"Retrieve detailed information for a specific product image","description":"Retrieve comprehensive details for a single product image identified by its unique ID within the context of a specific product. This operation accesses the shopping_mall_product_images table to return complete image metadata and properties.\n\nThe operation provides detailed image information including the storage URL for the image file, the display_order position determining where the image appears in the product gallery sequence, the is_primary boolean flag indicating whether this is the main product image shown in listings, optional shopping_mall_sku_id reference if the image is specific to a product variant, alt_text for accessibility and SEO purposes, and the created_at timestamp showing when the image was uploaded.\n\nSecurity and authorization are critical aspects of this operation. Sellers can only retrieve images for products they own, validated by checking that the product's shopping_mall_seller_id matches the authenticated seller's ID. Administrators have unrestricted access to retrieve any product image across the platform for moderation and quality control purposes. The operation validates that both the product and image exist before returning data, ensuring referential integrity.\n\nThe image URL returned uses the image_url field from the shopping_mall_product_images schema, which stores the full path or URL to the image file. The URL format follows the pattern defined in the schema with a maximum length of 80,000 characters to support long URI formats including data URIs or cloud storage URLs with authentication tokens.\n\nThe display_order field indicates the image's position in the product gallery, where position 0 represents the first image (which is the main product image by convention). This information is essential for image management interfaces that allow reordering images or identifying which image serves as the primary product representation.\n\nThe optional shopping_mall_sku_id association enables variant-specific images. When this field is populated, it indicates the image specifically represents a particular color, size, or option combination. This supports the business requirement that customers should see variant-specific images when selecting product variants during shopping. When the field is null, the image is a general product image applicable to all variants.\n\nThis operation is frequently used in conjunction with image update operations (changing display order, setting primary status, updating alt text) and image deletion operations. Together, these operations enable complete product image lifecycle management as specified in the product catalog management requirements document.\n\nThe operation returns a single image object with all properties from the shopping_mall_product_images table, formatted according to the IShoppingMallProductImage response type. Error scenarios include product not found (404), image not found (404), and unauthorized access (403) when the seller attempts to access another seller's product images.","parameters":[{"name":"productId","description":"Unique identifier of the product that owns this image","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific product image to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product image information including URL, display order, primary status, SKU association, and metadata","typeName":"IShoppingMallProductImage"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its images can be retrieved"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Product image must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","admin","products","images","at"]},{"specification":"This operation allows sellers to upload and add a new image to an existing product in their catalog. The endpoint operates on the shopping_mall_products and shopping_mall_product_images tables. Sellers can upload product images in JPEG, PNG, or WebP formats with a maximum file size of 5MB and minimum resolution of 800x800 pixels. The system validates the product exists and belongs to the authenticated seller before allowing image upload. The uploaded image is added to the product's image gallery with an appropriate display order. Images are essential for product visibility and customer purchase decisions, with each product supporting up to 10 images. This operation is part of the product content management workflow that enables sellers to maintain visually appealing product listings.","path":"/shoppingMall/seller/products/{productId}/images","method":"post","summary":"Upload and add a new image to a product's image gallery","description":"This operation enables sellers to upload product images to enhance their product listings with visual content. Product images are critical for customer purchase decisions and product discoverability in the e-commerce marketplace.\n\nThe operation validates that the specified product exists in the shopping_mall_products table and that the authenticated seller is the owner of the product. Only sellers can upload images to their own products, enforcing ownership-based authorization. The system checks that the product has not exceeded the maximum limit of 10 images per product as defined in the business requirements.\n\nUpon successful upload, the image is stored and a new record is created in the shopping_mall_product_images table. The system automatically determines the appropriate display_order based on existing images, and the is_primary flag is set to true only if this is the first image for the product. The image URL is generated by the storage service and persisted in the database.\n\nThe uploaded image must meet the following validation criteria: accepted file formats (JPEG, PNG, WebP), maximum file size of 5MB, and minimum resolution of 800x800 pixels. The system generates multiple optimized versions (thumbnail 150x150, medium 600x600, large 1200x1200) for responsive display across different contexts. Invalid uploads are rejected with specific error messages indicating the validation failure reason.\n\nThis operation integrates with the product catalog management system defined in the requirements, supporting the seller's ability to create compelling product presentations. Images uploaded through this endpoint become part of the product's visual gallery displayed to customers during product browsing and detail viewing.","parameters":[{"name":"productId","description":"Unique identifier of the product to which the image will be added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Image file upload data including the image file and optional metadata such as alt text and variant association","typeName":"IShoppingMallProduct.IImageCreate"},"responseBody":{"description":"Created product image record with generated image URL, display order, and metadata","typeName":"IShoppingMallProductImage"},"authorizationRole":"seller","authorizationType":null,"name":"createImage","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before images can be uploaded to it"}],"accessor":["shoppingMall","seller","products","images","createImage"]},{"specification":"This operation allows sellers to update metadata and properties of an existing product image, such as display order, alt text, primary image designation, or variant-specific assignment. The endpoint operates on the shopping_mall_product_images table and validates that both the product and image exist and belong to the authenticated seller. Sellers can reorder images by changing display_order, set a different image as primary, update alt text for SEO and accessibility, or associate the image with a specific SKU variant. The operation does not replace the image file itself but updates the image record's properties. This enables sellers to optimize their product presentation without re-uploading images.","path":"/shoppingMall/seller/products/{productId}/images/{imageId}","method":"put","summary":"Update metadata and properties of an existing product image","description":"This operation enables sellers to modify the properties and metadata of product images that have already been uploaded to their product listings. It provides flexibility in managing product visual presentation without requiring image re-upload.\n\nThe operation validates that the specified product exists in the shopping_mall_products table and that the authenticated seller is the owner of the product. It further validates that the specified image exists in the shopping_mall_product_images table and is associated with the specified product. Only sellers can update images for their own products, enforcing strict ownership-based authorization.\n\nSellers can update the following image properties through this operation: display_order (for reordering images in the gallery), is_primary (to designate which image is the main product image shown in listings), alt_text (for SEO and accessibility compliance), and shopping_mall_sku_id (to associate the image with a specific product variant for variant-specific visualization).\n\nWhen changing the is_primary flag to true, the system automatically sets is_primary to false for any other image of the same product, ensuring only one primary image exists per product as required by business rules. When updating display_order, the system validates that the new order value is appropriate and does not create gaps or duplicates in the image sequence.\n\nThis operation is particularly useful for sellers who want to optimize their product presentation by reordering images based on customer feedback, setting variant-specific images for color options, or improving accessibility with better alt text descriptions. Changes take effect immediately and are reflected in customer-facing product pages.\n\nThe operation integrates with the product catalog management requirements, supporting sellers' ongoing product content optimization and visual merchandising efforts. It complements the image creation operation by providing full lifecycle management of product images.","parameters":[{"name":"productId","description":"Unique identifier of the product that owns the image being updated","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the product image to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated image metadata including display order, primary designation, alt text, and variant association","typeName":"IShoppingMallProduct.IImageUpdate"},"responseBody":{"description":"Updated product image record with modified properties and metadata","typeName":"IShoppingMallProductImage"},"authorizationRole":"seller","authorizationType":null,"name":"updateImage","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its images can be updated"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Product image must be created before it can be updated"}],"accessor":["shoppingMall","seller","products","images","updateImage"]},{"specification":"This operation permanently deletes a specific product image from a product's image gallery. It operates on the shopping_mall_product_images table and removes the image record from the database. The operation validates that the requester (seller or admin) has appropriate permissions to delete the image. Sellers can only delete images from their own products, while admins can delete any product image. After deletion, the system updates the display_order of remaining images to maintain sequential ordering in the gallery. If the deleted image was the primary image (is_primary = true), the system must designate another image as primary or prevent deletion if it's the only image remaining, as products require at least one image to remain active according to business rules.","path":"/shoppingMall/seller/products/{productId}/images/{imageId}","method":"delete","summary":"Permanently delete a specific product image from the product gallery","description":"This operation permanently removes a product image from the shopping_mall_product_images table. The image is hard-deleted from the database as the schema does not include soft deletion fields for product images. This operation is critical for product media management, allowing sellers to curate their product presentations by removing outdated, incorrect, or low-quality images.\n\nThe operation enforces strict authorization based on product ownership. Sellers can only delete images from products they own (verified through shopping_mall_products.shopping_mall_seller_id), while admins have unrestricted access to delete any product image for content moderation purposes. The system validates that the specified product and image exist and that the image belongs to the specified product before processing the deletion.\n\nBusiness rules enforce that products must maintain at least one image to remain in active status. If the image being deleted is the only image for the product, the deletion should be rejected with an appropriate error message. If the deleted image is marked as the primary image (is_primary = true), the system should either prevent deletion or automatically promote another image to primary status to maintain product integrity.\n\nAfter successful deletion, the system recalculates the display_order values for remaining images to maintain sequential ordering without gaps in the gallery presentation. If the deleted image had display_order 2 in a gallery with 5 images, the images with display_order 3, 4, and 5 are renumbered to 2, 3, and 4 respectively.\n\nThe operation also handles variant-specific images. If the deleted image was associated with a specific SKU variant (shopping_mall_sku_id is not null), removing it affects only that variant's visual representation and does not impact other variants or the base product images.\n\nThis operation integrates with the product management workflow defined in the Product Catalog Management requirements. It should be available to sellers through their product editing interface and to admins through the admin dashboard product management tools.","parameters":[{"name":"productId","description":"Unique identifier of the product containing the image to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific product image to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationType":null,"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its images can be deleted"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Product image must be created before it can be deleted"}],"accessor":["shoppingMall","seller","products","images","erase"]},{"specification":"This operation permanently deletes a specific product image from a product's image gallery. It operates on the shopping_mall_product_images table and removes the image record from the database. The operation validates that the requester (seller or admin) has appropriate permissions to delete the image. Sellers can only delete images from their own products, while admins can delete any product image. After deletion, the system updates the display_order of remaining images to maintain sequential ordering in the gallery. If the deleted image was the primary image (is_primary = true), the system must designate another image as primary or prevent deletion if it's the only image remaining, as products require at least one image to remain active according to business rules.","path":"/shoppingMall/admin/products/{productId}/images/{imageId}","method":"delete","summary":"Permanently delete a specific product image from the product gallery","description":"This operation permanently removes a product image from the shopping_mall_product_images table. The image is hard-deleted from the database as the schema does not include soft deletion fields for product images. This operation is critical for product media management, allowing sellers to curate their product presentations by removing outdated, incorrect, or low-quality images.\n\nThe operation enforces strict authorization based on product ownership. Sellers can only delete images from products they own (verified through shopping_mall_products.shopping_mall_seller_id), while admins have unrestricted access to delete any product image for content moderation purposes. The system validates that the specified product and image exist and that the image belongs to the specified product before processing the deletion.\n\nBusiness rules enforce that products must maintain at least one image to remain in active status. If the image being deleted is the only image for the product, the deletion should be rejected with an appropriate error message. If the deleted image is marked as the primary image (is_primary = true), the system should either prevent deletion or automatically promote another image to primary status to maintain product integrity.\n\nAfter successful deletion, the system recalculates the display_order values for remaining images to maintain sequential ordering without gaps in the gallery presentation. If the deleted image had display_order 2 in a gallery with 5 images, the images with display_order 3, 4, and 5 are renumbered to 2, 3, and 4 respectively.\n\nThe operation also handles variant-specific images. If the deleted image was associated with a specific SKU variant (shopping_mall_sku_id is not null), removing it affects only that variant's visual representation and does not impact other variants or the base product images.\n\nThis operation integrates with the product management workflow defined in the Product Catalog Management requirements. It should be available to sellers through their product editing interface and to admins through the admin dashboard product management tools.","parameters":[{"name":"productId","description":"Unique identifier of the product containing the image to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific product image to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its images can be deleted. The product creation operation establishes the product entity that contains the image gallery."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Product image must be created before it can be deleted. This operation creates the image record in the shopping_mall_product_images table that will be removed by the delete operation."}],"accessor":["shoppingMall","admin","products","images","erase"]},{"specification":"This operation retrieves a filtered, paginated list of SKU color variant options from the shopping_mall_sku_colors table. It supports searching and filtering color variants that are used across the platform for product SKU differentiation. The operation enables customers to discover available color options, sellers to manage their color variant inventory, and admins to oversee the complete color taxonomy used in the marketplace. The endpoint uses PATCH method to support complex filtering and search criteria in the request body, following the pattern for collection retrieval operations with advanced query capabilities.","path":"/shoppingMall/skuColors","method":"patch","summary":"Search and retrieve a filtered, paginated list of SKU color variants","description":"This operation provides comprehensive search and filtering capabilities for SKU color variants stored in the shopping_mall_sku_colors table. It enables retrieval of color options used throughout the platform's product catalog, supporting use cases such as color filter facets in product search, seller color management interfaces, and admin color taxonomy oversight.\n\nThe operation accepts complex search criteria including text-based search on color names (with support for partial matching and fuzzy search), filtering by specific color attributes like hex codes, and date-based filtering for recently added colors. The search functionality uses full-text search capabilities with trigram indexing on the name field to provide efficient and flexible color discovery.\n\nPagination support is essential as the platform may accumulate hundreds of distinct color variants across all sellers and products. The request body should include pagination parameters such as page number, page size, and optional cursor-based pagination for efficient large dataset traversal. Default page size should be configurable but typically 20-50 color records per page.\n\nSorting capabilities allow ordering results by color name (alphabetical), creation date (newest or oldest first), or usage frequency (colors used in the most active SKUs). This helps users discover popular colors, recently added options, or navigate alphabetically through the color taxonomy.\n\nThe response includes comprehensive color information from the shopping_mall_sku_colors table: unique color ID, color name, optional hex code for visual representation, creation timestamp, and optionally aggregated statistics like the number of SKUs using each color. The hex_code field enables client applications to render accurate color swatches in filter interfaces and product variant selectors.\n\nAuthorization is public (empty array) as color variant information is non-sensitive reference data needed for product browsing and filtering. Customers need to view available colors when filtering products, sellers need to select colors when creating product variants, and admins need to manage the color taxonomy. No authentication is required for read access to color options.\n\nThis operation integrates with the product catalog search and filtering functionality defined in the Product Catalog Management requirements. Color filters are a critical component of the product discovery experience, enabling customers to narrow product searches to their preferred color options. The operation supports the SKU variant architecture where colors are one of the primary differentiating attributes alongside size and custom options.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination settings for SKU color variant retrieval","typeName":"IShoppingMallSkuColor.IRequest"},"responseBody":{"description":"Paginated list of SKU color variants matching the search and filter criteria, with comprehensive color information","typeName":"IPageIShoppingMallSkuColor"},"name":"index","authorizationType":null,"authorizationRole":null,"prerequisites":[],"accessor":["shoppingMall","skuColors","index"]},{"specification":"This operation retrieves the complete details of a specific SKU color variant by its unique identifier. It operates on the shopping_mall_sku_colors table from the Prisma schema and provides comprehensive color information including the color name and optional hex code for visual representation. This endpoint is essential for displaying color variant options when customers browse products, enabling sellers to manage their product color attributes, and supporting admin color management workflows. The color information returned includes all attributes necessary for visual swatch displays and product variant selection interfaces.","path":"/shoppingMall/skuColors/{colorId}","method":"get","summary":"Retrieve detailed information for a specific SKU color variant by ID","description":"Retrieve complete details of a specific SKU color variant identified by its unique color ID from the shopping_mall_sku_colors table. This operation provides comprehensive color information including the color name displayed to customers (e.g., 'Navy Blue', 'Forest Green', 'Crimson Red') and the optional hex color code used for visual swatch representation in product variant selection interfaces.\n\nThis endpoint serves multiple business purposes across different user roles. Customers use this information when browsing product variants to see available color options with visual swatches. Sellers reference color details when creating or updating product SKUs to maintain consistent color variant definitions across their catalog. Admins access this endpoint when managing the platform-wide color taxonomy and ensuring color data consistency.\n\nThe color information is critical for the product variant selection workflow. When customers select product variants, the system displays color options using the name and hex code to provide both textual and visual identification. The hex code enables rendering color swatches that give customers an accurate preview of the actual product color before making a purchase decision.\n\nSecurity considerations include standard authentication to ensure only valid users access the system, though color information itself is generally non-sensitive reference data. The endpoint returns the complete color record including the creation timestamp for audit purposes.\n\nThis operation integrates with the broader product catalog system where SKU color variants are referenced by shopping_mall_skus records through the shopping_mall_sku_color_id foreign key relationship. The color data is shared across multiple products and SKUs, maintaining a centralized color taxonomy that ensures consistency throughout the marketplace.","parameters":[{"name":"colorId","description":"Unique identifier of the target SKU color variant to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete SKU color variant information including name, hex code, and creation timestamp","typeName":"IShoppingMallSkuColor"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuColors","method":"post"},"description":"SKU color variant must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","skuColors","at"]},{"specification":"This operation creates a new SKU color variant in the shopping_mall_sku_colors table. Sellers and admins use this endpoint to define new color options that can be applied to product SKUs. The operation validates color name uniqueness (as per the Prisma schema unique constraint on 'name'), validates hex code format if provided, and ensures data integrity before creating the color record. Only users with appropriate permissions (sellers creating colors for their products, or admins managing platform-wide color taxonomy) can execute this operation.","path":"/shoppingMall/admin/skuColors","method":"post","summary":"Create a new SKU color variant for product configuration","description":"Create a new SKU color variant by adding a record to the shopping_mall_sku_colors table. This operation enables sellers and administrators to define new color options that can be assigned to product SKUs when creating or updating product variants. The system validates that the color name is unique across the entire platform according to the Prisma schema unique constraint, preventing duplicate color definitions.\n\nThis endpoint plays a crucial role in the product variant management workflow. Before sellers can create product SKUs with color variations, they need available color options in the system. Sellers typically create colors during their initial product setup or when introducing new color variants for existing products. Admins may create colors to establish a standardized color taxonomy for the marketplace, ensuring consistency across different sellers' product listings.\n\nThe request must provide a color name (required field, e.g., 'Navy Blue', 'Forest Green', 'Crimson Red') which serves as the human-readable identifier displayed to customers during product browsing and variant selection. The optional hex color code (format #RRGGBB) enables visual swatch rendering in the user interface, providing customers with an accurate color preview before making purchase decisions.\n\nValidation rules enforce data quality and uniqueness. The system checks that the color name does not already exist in the shopping_mall_sku_colors table, rejecting duplicate submissions with appropriate error messages. If a hex code is provided, the system validates the format matches the standard 6-digit hexadecimal color notation. The color name must be meaningful and descriptive to help customers understand the variant option.\n\nSecurity and authorization controls ensure only authorized users can create color variants. Sellers creating colors for their products must be authenticated with active seller accounts. Admins managing platform-wide color taxonomy must have appropriate administrative permissions. The system logs all color creation events with timestamps for audit purposes.\n\nOnce created, the new color variant becomes immediately available for assignment to product SKUs through the shopping_mall_skus table's shopping_mall_sku_color_id foreign key relationship. The color can be referenced by multiple products and SKUs across different sellers, promoting color taxonomy consistency throughout the marketplace.\n\nRelated operations that work together with this endpoint include SKU creation endpoints that reference these color IDs when defining product variants, product management endpoints that display available color options, and color listing endpoints that show all available colors to sellers during product configuration.","parameters":[],"requestBody":{"description":"SKU color variant creation data including required color name and optional hex code for visual representation","typeName":"IShoppingMallSkuColor.ICreate"},"responseBody":{"description":"Newly created SKU color variant with assigned ID, name, hex code, and creation timestamp","typeName":"IShoppingMallSkuColor"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","skuColors","create"]},{"specification":"This operation updates an existing SKU color variant attribute in the product catalog. It operates on the shopping_mall_sku_colors table from the Prisma schema and allows administrators to modify color variant attributes such as color name and optional hex code. The color must be identified by its unique colorId UUID. This operation is part of the product variant management system and affects all SKUs that reference this color variant. When a color is updated, the changes are immediately reflected across all products using this color variant, maintaining consistency in the catalog.","path":"/shoppingMall/admin/skuColors/{colorId}","method":"put","summary":"Update an existing SKU color variant attribute","description":"Update an existing SKU color variant attribute that is used across product variants in the catalog. This operation allows administrators to modify the color name and optional hex code for visual representation of a color variant.\n\nThe color variant is a reusable attribute that can be assigned to multiple product SKUs throughout the platform. When a color is updated, all products using this color variant will reflect the updated color information immediately. This ensures consistency across the product catalog when color naming or visual representation needs to be corrected or refined.\n\nSecurity considerations require administrative privileges to perform this operation, as color variant changes affect multiple products and sellers. Only admins have permission to manage the global color variant catalog to maintain data quality and prevent unauthorized modifications that could confuse customers.\n\nThe operation validates that the color name remains unique after the update to prevent duplicate color entries. If a hex code is provided, it must follow the standard hex color format (#RRGGBB). The system preserves referential integrity by maintaining all SKU relationships to this color variant while updating its display attributes.\n\nThis operation is typically used when standardizing color naming conventions, correcting spelling errors in color names, adding or updating hex codes for better visual swatches, or consolidating similar color variants to reduce redundancy in the catalog.","parameters":[{"name":"colorId","description":"Unique identifier of the target SKU color variant to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated color variant information including name and optional hex code","typeName":"IShoppingMallSkuColor.IUpdate"},"responseBody":{"description":"Updated SKU color variant information with modified attributes","typeName":"IShoppingMallSkuColor"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuColors","method":"post"},"description":"SKU color variant must be created before it can be updated"}],"accessor":["shoppingMall","admin","skuColors","update"]},{"specification":"This operation permanently removes an SKU color variant attribute from the product catalog. It operates on the shopping_mall_sku_colors table from the Prisma schema. The color must be identified by its unique colorId UUID. This is a hard delete operation as the Prisma schema does NOT include a deleted_at soft delete column for the shopping_mall_sku_colors table. Before deletion, the system must validate that no active SKUs are currently using this color variant. If SKUs reference this color, deletion should be prevented to maintain referential integrity. This operation is restricted to administrators who manage the global variant attribute catalog.","path":"/shoppingMall/admin/skuColors/{colorId}","method":"delete","summary":"Permanently remove an SKU color variant attribute from the catalog","description":"Permanently delete an SKU color variant attribute from the product catalog. This operation removes the color variant from the shopping_mall_sku_colors table and is only permitted when no active product SKUs are currently using this color variant.\n\nThis is a hard delete operation that completely removes the color record from the database. The shopping_mall_sku_colors table does not include soft delete functionality, so deletion is permanent and irreversible. Before executing the deletion, the system validates that no SKUs in the shopping_mall_skus table reference this color through the shopping_mall_sku_color_id foreign key.\n\nSecurity considerations require administrative privileges for this operation, as color variant management affects the entire product catalog across all sellers. Only admins have permission to remove color variants to prevent accidental data loss and maintain catalog integrity.\n\nThe operation enforces referential integrity by checking for active SKU references. If any product SKUs currently use this color variant, the deletion is rejected with an appropriate error message indicating the color is in use. This prevents breaking product variant configurations and ensures customers can still view historical order information correctly.\n\nThis operation is typically used when consolidating redundant color variants, removing color entries that were created by mistake, or cleaning up unused color options from the catalog. Administrators should verify that no products depend on this color before deletion, either by checking the usage count or by first reassigning products to alternative color variants.\n\nRelated operations include updating color variants (PUT /skuColors/{colorId}) for non-destructive modifications and retrieving color details (GET /skuColors/{colorId}) to verify usage before deletion.","parameters":[{"name":"colorId","description":"Unique identifier of the target SKU color variant to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuColors","method":"post"},"description":"SKU color variant must exist before it can be deleted"}],"accessor":["shoppingMall","admin","skuColors","erase"]},{"specification":"This operation retrieves a filtered and paginated list of size variant attributes from the shopping_mall_sku_sizes table. Size variants represent different sizing options for products such as 'Small', 'Medium', 'Large' for clothing or numeric sizes like '38', '40', '42' for shoes. Each size can belong to a size category like 'US Sizes', 'EU Sizes', or 'One Size'. This endpoint enables searching, filtering, and sorting size variants to support product variant management, catalog browsing, and administrative size configuration. The operation is designed for scenarios where clients need to retrieve lists of available sizes for product variant selection, bulk size management, or analytics on size availability across the platform.","path":"/shoppingMall/skuSizes","method":"patch","summary":"Retrieve filtered and paginated list of SKU size variants","description":"Retrieve a comprehensive, filtered, and paginated list of size variant attributes from the shopping_mall_sku_sizes table. Size variants are essential attributes that differentiate product SKUs by size dimensions, supporting diverse sizing systems including standard sizes (Small, Medium, Large), numeric sizes (38, 40, 42), and specialized size categories (US Sizes, EU Sizes, One Size).\n\nThis operation provides advanced search and filtering capabilities to locate specific size variants based on value patterns, category classifications, and creation date ranges. It supports pagination to efficiently handle large datasets of size options across the platform's product catalog.\n\nSize variants are referenced by shopping_mall_skus records to create specific purchasable product variants. For example, a clothing product might have SKUs for each combination of color and size, where size references records from this table. The operation enables administrators and sellers to browse available size options when configuring product variants, and supports bulk size management workflows.\n\nThe response includes complete size information including the size value (displayed to customers), optional size category (sizing system identifier like 'US Sizes' or 'EU Sizes'), and metadata such as creation and update timestamps. Pagination parameters control the number of results per page and enable navigation through large size catalogs.\n\nThis endpoint is particularly useful for product variant configuration interfaces, inventory management dashboards, and analytics on size availability and usage across the product catalog. Search functionality allows finding specific sizes by value patterns, enabling quick lookup during product listing creation.\n\nSecurity considerations include role-based access control, with different visibility and filtering options based on user role. Public access may be restricted to active, customer-facing size lists, while sellers and administrators can access comprehensive size catalogs including recently added or modified entries for management purposes.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for retrieving size variants including value pattern matching, category filtering, date range filters, sorting options, and pagination controls","typeName":"IShoppingMallSkuSize.IRequest"},"responseBody":{"description":"Paginated list of size variant records with complete size information, pagination metadata, and total result count","typeName":"IPageIShoppingMallSkuSize"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","skuSizes","index"]},{"specification":"This operation retrieves detailed information for a specific size variant attribute identified by its unique ID from the shopping_mall_sku_sizes table. Size variants represent standardized size options (Small, Medium, Large, numeric sizes, etc.) that are used to differentiate product SKUs. Each size variant can optionally belong to a size category (US Sizes, EU Sizes, One Size) that indicates the sizing system. This endpoint provides complete size information including the size value displayed to customers, the optional size category classification, and metadata such as creation and update timestamps. The operation is designed for viewing detailed size information when configuring product variants, displaying size attributes in product management interfaces, or retrieving specific size data for analytics and reporting purposes.","path":"/shoppingMall/skuSizes/{sizeId}","method":"get","summary":"Retrieve detailed information for a specific SKU size variant by ID","description":"Retrieve comprehensive information for a specific size variant attribute from the shopping_mall_sku_sizes table identified by its unique UUID. Size variants are fundamental attributes in the product variant system, representing different sizing options that customers can select when purchasing products.\n\nThis operation returns complete size information including the size value (the actual size displayed to customers such as 'Small', 'Medium', 'Large', '38', '40', or '42'), the optional size category that indicates the sizing system (e.g., 'US Sizes', 'EU Sizes', 'One Size', 'Numeric'), and temporal metadata including creation and last update timestamps.\n\nSize variants are referenced by shopping_mall_skus records through the shopping_mall_sku_size_id foreign key to create specific purchasable product variants. For example, a clothing product with multiple sizes would have separate SKU records for each size, all referencing size variant records from this table. The unique combination of color, size, and option attributes defines each distinct SKU.\n\nThe endpoint is particularly useful when:\n- Product management interfaces need to display complete size information for a specific variant\n- Sellers are configuring product variants and need to view detailed size attributes\n- Customer-facing product pages display size information with category context (e.g., showing 'Size: Medium (US Sizes)')\n- Administrative tools retrieve size data for reporting, analytics, or bulk operations\n- Validation workflows verify size existence and attributes before creating or updating SKUs\n\nThe size variant data model supports flexible sizing systems through the combination of value and category fields. The value field stores the actual size designation, while the optional category field provides additional context about the sizing system, enabling the platform to support diverse product categories with different sizing conventions (apparel with S/M/L, shoes with numeric sizes, international size standards, etc.).\n\nSecurity and access control: This operation is publicly accessible since size information is non-sensitive product catalog data required for product browsing and variant selection. All user roles (customers, sellers, admins) and even unauthenticated users can retrieve size information to support product discovery and purchase workflows.","parameters":[{"name":"sizeId","description":"Unique identifier of the target size variant attribute to retrieve from shopping_mall_sku_sizes table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete size variant information including size value, optional category classification, and metadata timestamps","typeName":"IShoppingMallSkuSize"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuSizes","method":"post"},"description":"Size variant must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","skuSizes","at"]},{"specification":"This operation creates a new size variant attribute in the shopping_mall_sku_sizes table. Size attributes are used to differentiate product SKUs by size (e.g., Small, Medium, Large, or numeric sizes like 38, 40, 42). The operation associates with the shopping_mall_sku_sizes Prisma table which stores size values and optional size categories (US Sizes, EU Sizes, One Size, Numeric). When sellers create products with size variants, they reference these size entities. This endpoint allows administrators to expand the available size options in the platform, ensuring sellers have the necessary size attributes to create product variants.","path":"/shoppingMall/admin/skuSizes","method":"post","summary":"Create a new size variant attribute for product SKU differentiation","description":"Creates a new size variant attribute in the shopping_mall_sku_sizes table that sellers can use when defining product variants. Size attributes enable product differentiation by size dimensions such as Small/Medium/Large for apparel or numeric sizes for shoes and other sized products.\n\nThis operation is critical for expanding the platform's variant attribute catalog. When sellers create products with multiple size options, they select from existing size records in the shopping_mall_sku_sizes table. By adding new size attributes through this endpoint, administrators ensure sellers have the necessary options to accurately represent their product variants.\n\nThe size creation requires a unique combination of size value and optional size category. The value represents the actual size (e.g., 'Medium', '42', 'XL'), while the category groups sizes by system (e.g., 'US Sizes', 'EU Sizes', 'One Size'). This combination ensures clarity when sellers offer products in different sizing systems.\n\nOnce created, size attributes become available for SKU creation. Sellers can then associate their product SKUs with these sizes through the shopping_mall_skus table, which references shopping_mall_sku_sizes via the shopping_mall_sku_size_id foreign key. The size attribute is immutable once associated with active SKUs to maintain data integrity and prevent confusion in existing product listings.\n\nThis endpoint integrates with the product catalog management system defined in the requirements analysis, supporting the comprehensive SKU-level inventory management that differentiates this platform. Size attributes are a fundamental component of the variant system, working alongside color and custom option attributes to create unique, trackable product SKUs.","parameters":[],"requestBody":{"description":"Size variant attribute creation data including size value and optional category classification","typeName":"IShoppingMallSkuSize.ICreate"},"responseBody":{"description":"Created size variant attribute with unique identifier and timestamps","typeName":"IShoppingMallSkuSize"},"name":"create","authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","skuSizes","create"]},{"specification":"This operation updates an existing size variant attribute in the shopping_mall_sku_sizes table. Administrators can modify the size value, size category, or both fields to correct errors, standardize naming conventions, or reorganize sizing systems. The operation identifies the target size by its unique identifier and validates that the updated combination of value and category remains unique across all size records. This ensures size attribute integrity and prevents duplicate size definitions that could confuse sellers during product variant creation.","path":"/shoppingMall/admin/skuSizes/{sizeId}","method":"put","summary":"Update an existing size variant attribute's value or category","description":"Updates an existing size variant attribute in the shopping_mall_sku_sizes table, allowing administrators to modify size specifications for platform-wide variant management. This operation enables correction of size naming, reorganization of size categories, and standardization of sizing systems across the marketplace.\n\nSize attributes in the shopping_mall_sku_sizes table are referenced by product SKUs through the shopping_mall_skus.shopping_mall_sku_size_id foreign key relationship. When a size attribute is updated, the changes affect how that size is displayed across all products using it. This operation is critical for maintaining consistent and accurate size representation throughout the product catalog.\n\nAdministrators can update the size value (e.g., changing 'M' to 'Medium' for clarity) and the size category (e.g., moving a size from 'US Sizes' to 'EU Sizes' for proper classification). The system validates that the updated combination of value and category remains unique across all size records, as enforced by the Prisma schema's unique constraint on [value, category]. If the update would create a duplicate, the operation fails with a validation error.\n\nThis endpoint requires careful consideration of downstream impacts. Updating a size attribute affects all SKUs that reference it, changing how those product variants are displayed to customers. Therefore, this operation is restricted to administrators who understand the platform-wide implications. The shopping_mall_sku_sizes table tracks updated_at timestamps to maintain an audit trail of size modifications.\n\nSize updates integrate with the product catalog system, ensuring that product listings reflect the corrected or reorganized size information immediately. Sellers do not need to take any action when size attributes are updated - the changes propagate automatically through the foreign key relationships to all associated SKUs and product displays.","parameters":[{"name":"sizeId","description":"Unique identifier of the size variant attribute to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated size variant attribute data including new value or category","typeName":"IShoppingMallSkuSize.IUpdate"},"responseBody":{"description":"Updated size variant attribute with modified fields and updated timestamp","typeName":"IShoppingMallSkuSize"},"name":"update","authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuSizes","method":"post"},"description":"Size variant attribute must be created before it can be updated"}],"accessor":["shoppingMall","admin","skuSizes","update"]},{"specification":"This operation permanently deletes a specific SKU size variant from the platform. It operates on the shopping_mall_sku_sizes table and removes the size definition that was previously used by product SKUs. The operation requires the unique size identifier (sizeId) as a path parameter to target the specific size variant to be deleted. This is an administrative function typically performed when size definitions are no longer needed, contain errors, or need to be replaced with corrected versions. The operation performs a hard delete, permanently removing the size record from the database. Before deletion, the system must verify that the size is not currently associated with any active SKU records to prevent referential integrity violations. If active SKUs reference this size, the operation should fail with appropriate error messaging. This operation impacts the product variant system and should be used carefully as it affects the product catalog structure.","path":"/shoppingMall/admin/skuSizes/{sizeId}","method":"delete","summary":"Permanently delete a specific SKU size variant by ID from the shopping_mall_sku_sizes table","description":"This operation permanently removes a SKU size variant definition from the e-commerce platform's product variant system. The size entity being deleted belongs to the shopping_mall_sku_sizes table, which stores size variant attributes such as 'Small', 'Medium', 'Large' or numeric sizes like '38', '40', '42' along with optional size categories like 'US Sizes' or 'EU Sizes'.\n\nThe deletion is a hard delete operation that permanently removes the size record from the database. This is an important distinction because the schema does NOT contain soft delete columns (deleted_at) for the shopping_mall_sku_sizes table, meaning the record is completely removed rather than marked as deleted.\n\nSecurity considerations include ensuring that only authorized administrators have permission to delete size variants, as this operation impacts the product catalog structure across the platform. The operation should validate referential integrity by checking whether any shopping_mall_skus records currently reference this size ID through the shopping_mall_sku_size_id foreign key. If active SKU records reference this size, the deletion should fail with an appropriate error message to prevent orphaned SKU references.\n\nThe operation integrates with the product catalog management system defined in the requirements document [Product Catalog Management](03-product-catalog-management.md), specifically the SKU and variant management sections. Size variants are fundamental to the product variant architecture that enables sellers to offer products in different sizes.\n\nBefore executing this deletion, the system should verify that no shopping_mall_skus records have their shopping_mall_sku_size_id foreign key pointing to this size ID. If such references exist, the operation must be blocked and return an error indicating the size is in use by active product variants. This prevents breaking the product catalog and ensures customers can still view historical orders and product information correctly.\n\nExpected behavior includes returning a success status (204 No Content) upon successful deletion when the size has no active references, or returning an error status (409 Conflict or 400 Bad Request) if the size is currently in use by SKU records.","parameters":[{"name":"sizeId","description":"Unique identifier of the SKU size variant to be permanently deleted from the shopping_mall_sku_sizes table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","skuSizes","erase"]},{"specification":"This operation retrieves a filtered and paginated list of custom SKU option variants from the shopping_mall_sku_options table. It enables searching and filtering through all custom option definitions that sellers have created for product variants beyond standard color and size attributes. The operation uses PATCH method to support complex search criteria in the request body, including text search across option names and values, filtering by creation date ranges, and pagination parameters. The response includes a paginated list of option records showing option_name (e.g., 'Storage Capacity', 'Material Type'), option_value (e.g., '128GB', 'Cotton'), and metadata like creation and update timestamps. This operation is essential for administrative management of the product variant system and for providing sellers with visibility into available custom options when creating product variants.","path":"/shoppingMall/admin/skuOptions","method":"patch","summary":"Search and retrieve a filtered, paginated list of custom SKU option variants from shopping_mall_sku_options table","description":"This operation provides comprehensive search and filtering capabilities for retrieving custom SKU option variants from the shopping_mall_sku_options table. Custom options represent seller-defined product variant attributes beyond the standard color and size, such as storage capacity, material type, package quantity, subscription period, and other product-specific variations.\n\nThe operation accepts complex search criteria in the request body, enabling administrators and potentially sellers to search through available custom option definitions when managing product variants. Search capabilities include full-text search across option names and values, filtering by creation date ranges, and pagination controls for managing large result sets.\n\nThe shopping_mall_sku_options table structure includes the following fields: id (UUID primary key), option_name (the name of the custom option like 'Storage Capacity'), option_value (the specific value like '128GB' or '256GB'), created_at (timestamp when the option was created), and updated_at (timestamp when last modified). The table uses a unique constraint on the combination of option_name and option_value to prevent duplicate option definitions.\n\nSecurity considerations include role-based access control where administrators have full visibility into all custom options, while sellers might have filtered views based on their product catalog needs. The operation does not expose sensitive customer or financial information, focusing purely on product variant configuration data.\n\nRelationship to underlying database entities: This operation queries the shopping_mall_sku_options table, which is referenced by shopping_mall_skus through the shopping_mall_sku_option_id foreign key. Each SKU can optionally reference a custom option to represent variant differentiation beyond color and size. This makes custom options a critical part of the product variant architecture described in [Product Catalog Management](03-product-catalog-management.md).\n\nValidation rules include ensuring pagination parameters are within acceptable ranges (page size typically 10-100 records), validating date range filters if provided, and sanitizing text search inputs to prevent injection attacks. The system should handle empty result sets gracefully and provide appropriate feedback when no options match the search criteria.\n\nExpected behavior includes returning a paginated response with total count, current page metadata, and an array of matching custom option records sorted by creation date (newest first) or by option name alphabetically based on request parameters. Performance expectations require results to be returned within 500 milliseconds for typical queries on datasets up to 10,000 option records.","parameters":[],"requestBody":{"description":"Search and filter criteria for SKU custom options including text search, date ranges, and pagination parameters","typeName":"IShoppingMallSkuOption.IRequest"},"responseBody":{"description":"Paginated collection of custom SKU option variant records matching the search criteria with metadata","typeName":"IPageIShoppingMallSkuOption"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","skuOptions","index"]},{"specification":"This operation retrieves detailed information about a specific custom SKU option by its unique identifier. Custom SKU options represent seller-defined product attributes beyond standard color and size variants, such as storage capacity, material type, package quantity, or subscription period. This endpoint is essential for displaying complete product variant information and enabling customers to understand all available product configurations. The operation retrieves the option from the shopping_mall_sku_options table which stores option_name and option_value pairs that are referenced by shopping_mall_skus to create unique product variants.","path":"/shoppingMall/skuOptions/{optionId}","method":"get","summary":"Retrieve detailed information for a specific custom SKU option by ID","description":"This operation fetches complete details for a single custom SKU option identified by its unique ID. Custom options enable flexible product variant configurations beyond standard color and size attributes, allowing sellers to define product-specific attributes like storage capacity, material composition, package quantities, or any other distinguishing characteristic.\n\nThe endpoint retrieves data from the shopping_mall_sku_options table which stores option_name (the attribute category like 'Storage Capacity' or 'Material Type') and option_value (the specific value like '128GB' or 'Cotton'). Each unique combination of option_name and option_value has a distinct record, ensuring no duplicates exist.\n\nThis operation is primarily used when displaying product detail pages where variant selection interfaces need to show all available custom options, or when managing inventory where SKU variant attributes must be fully resolved. The response includes the option's name-value pair along with metadata like creation and update timestamps.\n\nCustomers interact with this data indirectly through product variant selectors on product pages. Sellers reference this data when creating or editing product variants to ensure consistency in option naming and values across their catalog. Admins may query this endpoint for catalog management and ensuring data quality across product variants.\n\nSecurity considerations include ensuring only active, non-deleted options are returned to customers, while sellers and admins may need visibility into all options for management purposes.","parameters":[{"name":"optionId","description":"Unique identifier of the target custom SKU option to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete custom SKU option details including name, value, and metadata","typeName":"IShoppingMallSkuOption"},"name":"at","authorizationType":null,"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/skuOptions","method":"post"},"description":"SKU option must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","skuOptions","at"]},{"specification":"This operation creates a new custom SKU option for product variant configurations. Custom options extend the standard variant attributes (color, size) to support seller-specific product characteristics like storage capacity, material type, package quantity, subscription periods, or any other distinguishing attribute. The operation validates that the option_name and option_value combination is unique across the platform (enforced by unique constraint in shopping_mall_sku_options) and creates a new option record that can subsequently be referenced when creating or updating SKU variants in shopping_mall_skus.","path":"/shoppingMall/seller/skuOptions","method":"post","summary":"Create a new custom SKU option for product variant configurations","description":"This operation enables the creation of custom SKU option attributes that extend beyond standard color and size variants. Custom options provide flexibility for sellers to define product-specific attributes that differentiate their SKU variants, such as storage capacity for electronics, material composition for clothing, package quantities for consumables, or subscription durations for services.\n\nThe endpoint creates a new record in the shopping_mall_sku_options table with the provided option_name (the attribute category) and option_value (the specific value). The system enforces uniqueness on the combination of option_name and option_value to prevent duplicate options across the platform. For example, if 'Storage Capacity: 128GB' already exists, attempting to create it again will be rejected.\n\nOnce created, custom options become available for selection when sellers create or update SKU variants through the product management interface. The same option can be referenced by multiple SKUs across different products, promoting consistency in variant naming and enabling effective filtering and search capabilities.\n\nThis operation is typically invoked during product listing creation workflows when sellers need to define new variant attributes that don't exist in the current option catalog. It may also be used by admins to pre-populate common option values for specific product categories, ensuring standardization across seller listings.\n\nValidation rules include verifying the option_name is descriptive and follows consistent naming conventions (e.g., 'Storage Capacity' rather than 'storage' or 'capacity'), and that option_value accurately represents the specific variant characteristic. The system automatically assigns a unique UUID identifier and records creation timestamp for audit purposes.\n\nSecurity considerations include restricting option creation to authenticated sellers and admins, preventing spam or inappropriate option values, and maintaining data integrity by rejecting options with malicious content or excessive length.","parameters":[],"requestBody":{"description":"Custom SKU option creation data including option name and value","typeName":"IShoppingMallSkuOption.ICreate"},"responseBody":{"description":"Newly created custom SKU option with assigned ID and timestamps","typeName":"IShoppingMallSkuOption"},"name":"create","authorizationRoles":["seller","admin"],"soft_delete_column":null,"authorizationRole":"seller","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","seller","skuOptions","create"]},{"specification":"This operation creates a new custom SKU option for product variant configurations. Custom options extend the standard variant attributes (color, size) to support seller-specific product characteristics like storage capacity, material type, package quantity, subscription periods, or any other distinguishing attribute. The operation validates that the option_name and option_value combination is unique across the platform (enforced by unique constraint in shopping_mall_sku_options) and creates a new option record that can subsequently be referenced when creating or updating SKU variants in shopping_mall_skus.","path":"/shoppingMall/admin/skuOptions","method":"post","summary":"Create a new custom SKU option for product variant configurations","description":"This operation enables the creation of custom SKU option attributes that extend beyond standard color and size variants. Custom options provide flexibility for sellers to define product-specific attributes that differentiate their SKU variants, such as storage capacity for electronics, material composition for clothing, package quantities for consumables, or subscription durations for services.\n\nThe endpoint creates a new record in the shopping_mall_sku_options table with the provided option_name (the attribute category) and option_value (the specific value). The system enforces uniqueness on the combination of option_name and option_value to prevent duplicate options across the platform. For example, if 'Storage Capacity: 128GB' already exists, attempting to create it again will be rejected.\n\nOnce created, custom options become available for selection when sellers create or update SKU variants through the product management interface. The same option can be referenced by multiple SKUs across different products, promoting consistency in variant naming and enabling effective filtering and search capabilities.\n\nThis operation is typically invoked during product listing creation workflows when sellers need to define new variant attributes that don't exist in the current option catalog. It may also be used by admins to pre-populate common option values for specific product categories, ensuring standardization across seller listings.\n\nValidation rules include verifying the option_name is descriptive and follows consistent naming conventions (e.g., 'Storage Capacity' rather than 'storage' or 'capacity'), and that option_value accurately represents the specific variant characteristic. The system automatically assigns a unique UUID identifier and records creation timestamp for audit purposes.\n\nSecurity considerations include restricting option creation to authenticated sellers and admins, preventing spam or inappropriate option values, and maintaining data integrity by rejecting options with malicious content or excessive length.","parameters":[],"requestBody":{"description":"Custom SKU option creation data including option name and value","typeName":"IShoppingMallSkuOption.ICreate"},"responseBody":{"description":"Newly created custom SKU option with assigned ID and timestamps","typeName":"IShoppingMallSkuOption"},"name":"create","authorizationRoles":["seller","admin"],"soft_delete_column":null,"authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","skuOptions","create"]},{"specification":"This operation updates an existing custom SKU option attribute in the product variant system. SKU options represent seller-defined product variations beyond standard color and size attributes, such as storage capacity, material type, package quantity, or subscription period. The operation modifies the option_name and/or option_value fields for a specific SKU option identified by its unique ID. This is a critical product catalog management function used by sellers and admins to maintain accurate product variant information. When an SKU option is updated, all associated SKUs referencing this option will automatically reflect the updated attribute in their variant descriptions. This operation operates on the shopping_mall_sku_options table which stores custom variant attributes with name-value pairs that extend the standard color/size variant system defined in the Product Catalog Management requirements.","path":"/shoppingMall/seller/skuOptions/{optionId}","method":"put","summary":"Update an existing custom SKU option attribute for product variants","description":"Updates the name and/or value of a custom SKU option attribute that is used across product variants in the shopping mall catalog. This operation is essential for maintaining accurate product variant information when sellers need to correct option naming, update value labels, or refine variant attribute definitions.\n\nCustom SKU options extend the standard color and size variant system by allowing sellers to define product-specific attributes such as storage capacity for electronics, material composition for apparel, package quantities for consumables, or subscription periods for services. Each option consists of an option_name (the attribute category) and option_value (the specific variant) that together create unique product differentiators.\n\nWhen a custom SKU option is updated through this endpoint, the changes propagate to all product SKUs that reference this option. For example, updating an option from 'Storage: 128GB' to 'Storage Capacity: 128 GB' will automatically update the variant description for all products using this option. This ensures consistency across the product catalog and prevents variant attribute fragmentation.\n\nAccess to this operation is restricted based on user roles. Sellers can update custom options that belong to their own products, while admins have unrestricted access to update any SKU option across the platform. The system validates that the updated option_name and option_value combination remains unique to prevent duplicate variant attributes.\n\nThis operation requires validation against the shopping_mall_sku_options table structure, which contains id, option_name, option_value, created_at, and updated_at fields. The option_name and option_value pair must remain unique after the update, and the system must ensure that all referencing SKUs maintain valid variant combinations. Updates are logged with timestamps for audit trail and change tracking purposes.","parameters":[{"name":"optionId","description":"Unique identifier of the custom SKU option to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated custom SKU option information including option name and value","typeName":"IShoppingMallSkuOption.IUpdate"},"responseBody":{"description":"Updated custom SKU option with complete attribute information","typeName":"IShoppingMallSkuOption"},"authorizationRole":"seller","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/skuOptions","method":"post"},"description":"Custom SKU option must be created before it can be updated. The option identified by optionId must exist in the shopping_mall_sku_options table with valid option_name and option_value before any update operations can be performed."}],"accessor":["shoppingMall","seller","skuOptions","update"]},{"specification":"This operation updates an existing custom SKU option attribute in the product variant system. SKU options represent seller-defined product variations beyond standard color and size attributes, such as storage capacity, material type, package quantity, or subscription period. The operation modifies the option_name and/or option_value fields for a specific SKU option identified by its unique ID. This is a critical product catalog management function used by sellers and admins to maintain accurate product variant information. When an SKU option is updated, all associated SKUs referencing this option will automatically reflect the updated attribute in their variant descriptions. This operation operates on the shopping_mall_sku_options table which stores custom variant attributes with name-value pairs that extend the standard color/size variant system defined in the Product Catalog Management requirements.","path":"/shoppingMall/admin/skuOptions/{optionId}","method":"put","summary":"Update an existing custom SKU option attribute for product variants","description":"Updates the name and/or value of a custom SKU option attribute that is used across product variants in the shopping mall catalog. This operation is essential for maintaining accurate product variant information when sellers need to correct option naming, update value labels, or refine variant attribute definitions.\n\nCustom SKU options extend the standard color and size variant system by allowing sellers to define product-specific attributes such as storage capacity for electronics, material composition for apparel, package quantities for consumables, or subscription periods for services. Each option consists of an option_name (the attribute category) and option_value (the specific variant) that together create unique product differentiators.\n\nWhen a custom SKU option is updated through this endpoint, the changes propagate to all product SKUs that reference this option. For example, updating an option from 'Storage: 128GB' to 'Storage Capacity: 128 GB' will automatically update the variant description for all products using this option. This ensures consistency across the product catalog and prevents variant attribute fragmentation.\n\nAccess to this operation is restricted based on user roles. Sellers can update custom options that belong to their own products, while admins have unrestricted access to update any SKU option across the platform. The system validates that the updated option_name and option_value combination remains unique to prevent duplicate variant attributes.\n\nThis operation requires validation against the shopping_mall_sku_options table structure, which contains id, option_name, option_value, created_at, and updated_at fields. The option_name and option_value pair must remain unique after the update, and the system must ensure that all referencing SKUs maintain valid variant combinations. Updates are logged with timestamps for audit trail and change tracking purposes.","parameters":[{"name":"optionId","description":"Unique identifier of the custom SKU option to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated custom SKU option information including option name and value","typeName":"IShoppingMallSkuOption.IUpdate"},"responseBody":{"description":"Updated custom SKU option with complete attribute information","typeName":"IShoppingMallSkuOption"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuOptions","method":"post"},"description":"Custom SKU option must be created before it can be updated. The option identified by optionId must exist in the shopping_mall_sku_options table for the update operation to succeed."}],"accessor":["shoppingMall","admin","skuOptions","update"]},{"specification":"This operation permanently removes a custom SKU option attribute from the product variant system. SKU options represent seller-defined product variations beyond standard color and size, such as storage capacity, material type, or package quantity. The deletion is a hard delete operation that completely removes the record from the shopping_mall_sku_options table, as the schema does not include a deleted_at soft delete column. This operation should only be permitted when no active SKUs are currently using this option to prevent orphaned variant references and maintain data integrity. The operation operates on the shopping_mall_sku_options table which stores name-value pairs for custom variant attributes that extend the standard color/size variant system defined in the Product Catalog Management requirements.","path":"/shoppingMall/seller/skuOptions/{optionId}","method":"delete","summary":"Permanently delete a custom SKU option attribute from the variant system","description":"Permanently removes a custom SKU option attribute from the shopping mall product variant system. This operation performs a hard delete that completely removes the option record from the database, as the shopping_mall_sku_options table does not support soft deletion.\n\nCustom SKU options are seller-defined variant attributes that extend beyond the standard color and size system. Examples include storage capacity for electronics (128GB, 256GB), material types for apparel (Cotton, Polyester), package quantities for consumables (6-pack, 12-pack), or subscription periods for services (Monthly, Annual). These options enable sellers to create rich product variant combinations tailored to their specific product offerings.\n\nBefore deleting a custom SKU option, the system must validate that no active product SKUs are currently referencing this option. The shopping_mall_skus table contains a foreign key shopping_mall_sku_option_id that links SKUs to their custom option attributes. If any SKUs reference the option being deleted, the operation must be rejected to prevent orphaned references and maintain catalog data integrity. Sellers or admins must first reassign or discontinue affected SKUs before the option can be deleted.\n\nThis deletion operation is permanent and irreversible. Once executed, the option_name and option_value combination is removed from the system and cannot be recovered. Historical order data remains intact as order_items snapshot variant attributes at purchase time, preserving accurate order history even after variant options are deleted.\n\nAccess to this operation is restricted by user role. Sellers can delete custom options that belong exclusively to their own products and have no active SKU references. Admins have broader deletion authority but must still respect the referential integrity constraint requiring zero active SKU references. The system logs all deletion operations with actor information and timestamp for audit trail and compliance purposes.","parameters":[{"name":"optionId","description":"Unique identifier of the custom SKU option to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"seller","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/skuOptions","method":"post"},"description":"Custom SKU option must be created before it can be deleted. The option identified by optionId must exist in the shopping_mall_sku_options table for the delete operation to succeed."}],"accessor":["shoppingMall","seller","skuOptions","erase"]},{"specification":"This operation permanently removes a custom SKU option attribute from the product variant system. SKU options represent seller-defined product variations beyond standard color and size, such as storage capacity, material type, or package quantity. The deletion is a hard delete operation that completely removes the record from the shopping_mall_sku_options table, as the schema does not include a deleted_at soft delete column. This operation should only be permitted when no active SKUs are currently using this option to prevent orphaned variant references and maintain data integrity. The operation operates on the shopping_mall_sku_options table which stores name-value pairs for custom variant attributes that extend the standard color/size variant system defined in the Product Catalog Management requirements.","path":"/shoppingMall/admin/skuOptions/{optionId}","method":"delete","summary":"Permanently delete a custom SKU option attribute from the variant system","description":"Permanently removes a custom SKU option attribute from the shopping mall product variant system. This operation performs a hard delete that completely removes the option record from the database, as the shopping_mall_sku_options table does not support soft deletion.\n\nCustom SKU options are seller-defined variant attributes that extend beyond the standard color and size system. Examples include storage capacity for electronics (128GB, 256GB), material types for apparel (Cotton, Polyester), package quantities for consumables (6-pack, 12-pack), or subscription periods for services (Monthly, Annual). These options enable sellers to create rich product variant combinations tailored to their specific product offerings.\n\nBefore deleting a custom SKU option, the system must validate that no active product SKUs are currently referencing this option. The shopping_mall_skus table contains a foreign key shopping_mall_sku_option_id that links SKUs to their custom option attributes. If any SKUs reference the option being deleted, the operation must be rejected to prevent orphaned references and maintain catalog data integrity. Sellers or admins must first reassign or discontinue affected SKUs before the option can be deleted.\n\nThis deletion operation is permanent and irreversible. Once executed, the option_name and option_value combination is removed from the system and cannot be recovered. Historical order data remains intact as order_items snapshot variant attributes at purchase time, preserving accurate order history even after variant options are deleted.\n\nAccess to this operation is restricted by user role. Sellers can delete custom options that belong exclusively to their own products and have no active SKU references. Admins have broader deletion authority but must still respect the referential integrity constraint requiring zero active SKU references. The system logs all deletion operations with actor information and timestamp for audit trail and compliance purposes.","parameters":[{"name":"optionId","description":"Unique identifier of the custom SKU option to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/skuOptions","method":"post"},"description":"Custom SKU option must be created before it can be deleted. The option identified by optionId must exist in the shopping_mall_sku_options table."}],"accessor":["shoppingMall","admin","skuOptions","erase"]},{"specification":"This operation retrieves a paginated and filtered list of all inventory transaction records across the entire shopping mall platform. It operates on the shopping_mall_inventory_transactions table from the Prisma schema and provides comprehensive search capabilities for admins to audit inventory movements, track SKU-level stock changes, and analyze inventory operations across all sellers and products. The endpoint supports complex filtering by transaction type, transaction status, date ranges, seller, SKU, and order reference, enabling detailed inventory reconciliation and compliance reporting.","path":"/shoppingMall/admin/inventoryTransactions","method":"patch","summary":"Search and retrieve filtered, paginated inventory transaction records","description":"Retrieve a comprehensive, filterable list of inventory transaction records for the shopping mall platform. This operation provides administrators with complete visibility into all inventory movements across all sellers, products, and SKUs for audit, reconciliation, and compliance purposes.\n\nThis endpoint accesses the shopping_mall_inventory_transactions table which maintains a complete audit trail of every inventory change including sales, restocks, manual adjustments, damage/loss records, returns, and cancellations. Each transaction record captures the quantity change, resulting inventory level, transaction type, processing status, actor who initiated the change (seller or admin), and optional reason/notes.\n\nThe operation supports advanced filtering capabilities including transaction type (sale, restock, adjustment, damage_loss, return, cancellation), transaction status (pending, completed, reversed), date range filtering, specific SKU filtering, order reference filtering, and actor filtering (which seller or admin performed the action). This enables administrators to perform detailed inventory audits, identify discrepancies, track seller inventory management patterns, and generate compliance reports.\n\nSecurity considerations include restricting this endpoint to admin users only, as inventory transaction data contains sensitive business information across all sellers. The response includes complete transaction details with actor information, timestamps, quantity changes, and context (order references, reasons, notes) to support comprehensive audit trail requirements.\n\nThis operation integrates with the shopping_mall_skus table to provide SKU details, shopping_mall_orders for order context, shopping_mall_sellers and shopping_mall_admins for actor identification. The paginated results support large-scale inventory audit operations across the entire platform history.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, and pagination settings for inventory transaction records","typeName":"IShoppingMallInventoryTransaction.IRequest"},"responseBody":{"description":"Paginated list of inventory transaction records matching the search criteria with complete audit trail details","typeName":"IPageIShoppingMallInventoryTransaction"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","inventoryTransactions","index"]},{"specification":"This operation retrieves detailed information about a specific inventory transaction record identified by its unique transaction ID. It operates on the shopping_mall_inventory_transactions table and provides complete visibility into a single inventory movement event including transaction type, quantity change, resulting inventory level, actor information, order reference, reason, notes, and timestamp. This endpoint is used by administrators to investigate specific inventory changes, verify audit trail entries, and review the complete context of inventory movements.","path":"/shoppingMall/admin/inventoryTransactions/{transactionId}","method":"get","summary":"Retrieve detailed information for a specific inventory transaction record","description":"Retrieve complete details for a specific inventory transaction identified by the transaction ID. This operation provides administrators with full visibility into a single inventory movement event for audit verification, compliance review, and investigation purposes.\n\nThis endpoint accesses a specific record from the shopping_mall_inventory_transactions table, which maintains the complete audit trail of all inventory changes. The transaction record contains comprehensive information including the SKU whose inventory changed, the transaction type (sale, restock, adjustment, damage_loss, return, cancellation), the quantity change amount (positive for additions, negative for reductions), the resulting inventory quantity after the transaction, the processing status (pending, completed, reversed), and the actor who initiated the change.\n\nThe detailed transaction record includes critical audit information such as the related order reference (if transaction resulted from a sale or cancellation), the seller or admin who performed the action (actor_seller_id or actor_admin_id), the reason or explanation for the change (required for adjustments and corrections), any additional notes, and the precise timestamp when the transaction occurred.\n\nSecurity considerations restrict this endpoint to admin users only, as inventory transaction details contain sensitive business operations data. The response provides complete transparency for inventory audit trails, enabling administrators to verify inventory movements, investigate discrepancies, validate business rules compliance (such as inventory never going negative), and maintain accurate financial reconciliation.\n\nThis operation integrates with related entities to provide full context: shopping_mall_skus for the affected product variant, shopping_mall_orders for order-related transactions, shopping_mall_sellers and shopping_mall_admins for actor identification, and shopping_mall_products indirectly through the SKU relationship for complete product information.","parameters":[{"name":"transactionId","description":"Unique identifier of the inventory transaction record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed information for the specified inventory transaction including audit trail data","typeName":"IShoppingMallInventoryTransaction"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","admin","inventoryTransactions","at"]},{"specification":"This operation retrieves complete details of a specific shopping cart by its unique cart ID. It operates on the shopping_mall_carts table and returns comprehensive cart information including all cart items with their current SKU details, pricing, availability status, and cart totals. The operation validates that the authenticated customer owns the requested cart and enforces ownership-based access control. This is a primary cart viewing operation used when customers access their cart page, during checkout initiation, or when updating cart contents. The cart details include real-time inventory validation, current pricing from SKUs, and seller grouping for multi-seller cart visualization.","path":"/shoppingMall/customer/carts/{cartId}","method":"get","summary":"Retrieve complete shopping cart details for a specific cart by ID","description":"Retrieve comprehensive details of a specific shopping cart identified by its unique cart ID from the shopping_mall_carts table. This operation returns complete cart information including all associated cart items from shopping_mall_cart_items, with full product and SKU details, current pricing, inventory availability, and calculated totals.\n\nThe operation enforces ownership-based access control by validating that the authenticated customer owns the requested cart. Customers can only access their own carts, preventing unauthorized access to other users' shopping cart data. The cart ID must match a cart belonging to the authenticated customer's account.\n\nThis endpoint provides real-time cart data essential for cart page display, checkout initiation, and cart synchronization across devices. The response includes current SKU pricing and availability status, enabling the frontend to display accurate information and handle scenarios where prices have changed or items have become unavailable since being added to the cart.\n\nThe cart details include grouping of items by seller to support multi-seller order visualization, showing which products will be fulfilled by which sellers. This grouping is critical for displaying shipping costs per seller and preparing customers for potential multiple shipments from a single checkout.\n\nIntegration with the product catalog ensures that returned cart items include up-to-date product names, images, and SKU variant details even if the underlying product information has been updated since items were added to the cart. Deleted or discontinued products are flagged appropriately, allowing the frontend to prompt customers to remove unavailable items.\n\nThe operation calculates cart subtotals, estimated taxes (if delivery address is available), and potential shipping costs (if shipping methods are pre-selected), providing customers with a comprehensive view of their pending purchase total. Price change notifications are included when SKU prices have changed since items were added.\n\nThis is a read-only operation that does not modify cart state, inventory reservations, or user data. It serves as the primary cart detail retrieval endpoint for customer cart management workflows.","parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete shopping cart details including all items, pricing, and availability","typeName":"IShoppingMallCart"},"authorizationRole":"customer","authorizationType":null,"name":"at","prerequisites":[],"accessor":["shoppingMall","customer","carts","at"]},{"specification":"This operation retrieves a filtered and paginated list of cart items for a specific shopping cart identified by cartId. It operates on the shopping_mall_cart_items table and supports advanced querying capabilities including filtering by product attributes, price ranges, seller, availability status, and sorting options. The operation enforces ownership validation ensuring the authenticated customer owns the specified cart. This is a complex cart item search operation used for scenarios like filtering cart items by seller, viewing only available items, or sorting cart contents by various criteria. The response includes full SKU and product details for each cart item with real-time pricing and inventory status.","path":"/shoppingMall/customer/carts/{cartId}/items","method":"patch","summary":"Search and retrieve filtered, paginated list of cart items for a specific cart","description":"Retrieve a filtered and paginated list of shopping cart items for a specific cart identified by the cartId path parameter from the shopping_mall_cart_items table. This operation provides advanced search and filtering capabilities for cart item management, supporting scenarios where customers need to view subsets of their cart contents based on specific criteria.\n\nThe operation enforces strict ownership validation by verifying that the authenticated customer owns the cart specified in the path parameter. This security check prevents unauthorized access to other customers' cart item data and ensures customers can only query their own cart contents.\n\nThis endpoint supports comprehensive filtering capabilities including filtering cart items by seller (grouping items by the seller who owns the product), product categories, price ranges, availability status (in stock, low stock, out of stock), and specific SKU attributes like color, size, or custom options. The flexible filtering enables customers to manage complex carts with items from multiple sellers efficiently.\n\nAdvanced sorting options allow customers to organize cart items by various criteria including date added (most recent first), product name (alphabetical), price (ascending or descending), seller name, or availability status. Sorting helps customers prioritize items, identify expensive items quickly, or group items logically for review before checkout.\n\nThe operation performs real-time inventory validation for all returned cart items, checking current availability against the shopping_mall_skus table. Items that have become unavailable or have insufficient stock since being added to the cart are clearly flagged in the response, enabling the frontend to prompt customers to update quantities or remove unavailable items.\n\nPrice synchronization is performed by comparing the cart item's unit_price (snapshotted when added) against the current SKU price from shopping_mall_skus. Price changes are highlighted in the response, allowing the frontend to notify customers when prices have increased or decreased, maintaining transparency and building trust.\n\nThe response includes complete product and SKU information for each cart item, incorporating data from shopping_mall_products, shopping_mall_skus, shopping_mall_sellers, and related variant attribute tables (shopping_mall_sku_colors, shopping_mall_sku_sizes, shopping_mall_sku_options). This comprehensive data enables rich cart item display with product images, variant details, and seller information.\n\nPagination is implemented to handle large carts efficiently, returning a configurable number of items per page with total count and page navigation information. This ensures performant cart display even for customers with extensive cart contents exceeding 100 items.\n\nThe operation calculates cart item subtotals (quantity × unit_price), identifies seller groupings for multi-seller cart visualization, and provides aggregated statistics such as total item count, unique seller count, and estimated cart total. These calculated values support comprehensive cart summary displays and checkout preparation.\n\nThis endpoint is essential for cart management workflows, enabling customers to review, filter, and organize cart contents before proceeding to checkout. It complements the simple cart detail retrieval endpoint by providing advanced querying capabilities for complex cart scenarios.","parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart whose items to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination settings for cart items","typeName":"IShoppingMallCartItem.IRequest"},"responseBody":{"description":"Paginated list of cart items matching the search criteria with complete product and availability information","typeName":"IPageIShoppingMallCartItem"},"authorizationRole":"customer","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Cart items must be created before they can be filtered and retrieved through search operations"}],"accessor":["shoppingMall","customer","carts","items","index"]},{"specification":"This operation adds a new product item to a specific shopping cart by cart ID. It operates on the shopping_mall_carts and shopping_mall_cart_items tables from the Prisma schema. When a customer selects a product with specific SKU variant (color, size, option combination) and clicks 'Add to Cart', this endpoint creates a new cart_item record associated with the customer's cart. The operation validates that the selected SKU exists, is currently available, has sufficient inventory, and belongs to an active product from an active seller. It performs real-time inventory availability checking against the shopping_mall_skus table to ensure the requested quantity does not exceed available_quantity. If the same SKU already exists in the cart, the system increases the existing cart item's quantity instead of creating a duplicate. The operation enforces cart quantity limits (1-99 per item, maximum 100 distinct SKUs per cart) and immediately reserves the inventory by updating reserved_quantity in shopping_mall_skus. This endpoint is essential for the shopping experience, enabling customers to collect products before checkout.","path":"/shoppingMall/customer/carts/{cartId}/items","method":"post","summary":"Add a new product item to a customer's shopping cart","description":"Add a new product item with specific SKU variant to a customer's shopping cart, with comprehensive validation and inventory reservation.\n\nThis endpoint creates a new shopping_mall_cart_items record associated with the specified cart ID. When a customer selects a product variant (specific combination of color, size, and custom options identified by shopping_mall_sku_id) and requests to add it to their cart, this operation performs the following:\n\n1. **Cart Validation**: Verifies that the specified cart exists in shopping_mall_carts table and belongs to an authenticated customer. The cart must be active (deleted_at is null).\n\n2. **SKU Validation**: Validates that the requested SKU exists in shopping_mall_skus, is active (is_active = true), and belongs to a product that is active and not deleted. Checks that the product's seller account (shopping_mall_sellers) is active and in good standing.\n\n3. **Inventory Availability**: Performs real-time inventory check against shopping_mall_skus.available_quantity to ensure sufficient stock exists for the requested quantity. The operation validates that requested quantity does not exceed available inventory and respects the maximum per-item limit of 99 units.\n\n4. **Duplicate Handling**: Checks if the same SKU already exists as a cart item in this cart. If found, instead of creating a new cart_items record, the system increases the existing item's quantity (subject to inventory and limit validations).\n\n5. **Cart Limits Enforcement**: Validates that adding this item does not exceed cart limits: maximum 100 distinct SKUs per cart, maximum 999 total units across all items, and maximum 99 units per individual SKU.\n\n6. **Inventory Reservation**: Upon successful validation, creates the shopping_mall_cart_items record with the current SKU price (from shopping_mall_skus.price) and immediately updates shopping_mall_skus.reserved_quantity to reserve the inventory. This prevents overselling during the cart session.\n\n7. **Price Snapshot**: Captures the current unit_price from shopping_mall_skus.price at the time of addition. This preserves pricing information even if the seller later changes the product price, though the cart will reflect current prices when viewed.\n\nThe operation returns the created cart item with complete details including product information, variant attributes, pricing, and updated cart summary. If validation fails at any step, appropriate error responses are returned with specific reasons (SKU not found, insufficient inventory, cart limits exceeded, etc.).\n\nSecurity: Only authenticated customers can add items to their own cart. The system verifies cart ownership before allowing item addition.\n\nRelated Operations: This endpoint is typically used in conjunction with GET /carts/{cartId} to display updated cart contents, and PATCH /carts/{cartId}/items/{itemId} to modify quantities. It integrates with the product catalog (shopping_mall_products, shopping_mall_skus) for product information and inventory management.","parameters":[{"name":"cartId","description":"Unique identifier of the customer's shopping cart to which the product item will be added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product item information to add to the cart including SKU selection and quantity","typeName":"IShoppingMallCartItem.ICreate"},"responseBody":{"description":"Created cart item with complete product details, pricing, and updated cart summary","typeName":"IShoppingMallCartItem"},"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"Product SKU must exist before it can be added to a shopping cart as a cart item"},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before SKUs can be created and added to cart"}],"accessor":["shoppingMall","customer","carts","items","create"]},{"specification":"This operation updates the quantity of an existing cart item within a specific shopping cart. It operates on the shopping_mall_cart_items table to modify the quantity field for a particular cart item identified by both cartId and itemId. When a customer changes the quantity of a product already in their cart (either increasing or decreasing the amount), this endpoint validates the new quantity against current inventory availability in shopping_mall_skus, enforces quantity limits, updates the cart_item record, and adjusts inventory reservations accordingly. The operation handles three scenarios: increasing quantity (validates sufficient inventory), decreasing quantity (releases reserved inventory), and setting quantity to zero (removes the cart item entirely). It performs real-time inventory checks to prevent overselling and maintains accurate reserved_quantity tracking in shopping_mall_skus. The updated cart item is returned with recalculated line totals and current pricing information.","path":"/shoppingMall/customer/carts/{cartId}/items/{itemId}","method":"put","summary":"Update the quantity of an existing item in a customer's shopping cart","description":"Update the quantity of an existing cart item with comprehensive validation, inventory management, and automatic removal for zero quantities.\n\nThis endpoint modifies an existing shopping_mall_cart_items record identified by the cart item ID within the specified cart. When a customer adjusts the quantity of a product already in their shopping cart, this operation performs the following:\n\n1. **Cart and Item Validation**: Verifies that the specified cart exists in shopping_mall_carts and is active (deleted_at is null). Validates that the cart item exists within this cart and belongs to the authenticated customer. Ensures the customer owns the cart being modified for security.\n\n2. **SKU and Product Validation**: Retrieves the associated SKU from shopping_mall_skus through the cart item's shopping_mall_sku_id foreign key. Validates that the SKU is still active (is_active = true) and belongs to an active product (shopping_mall_products.status = 'active'). Verifies the product's seller (shopping_mall_sellers) is active and in good standing.\n\n3. **Quantity Update Scenarios**:\n   - **Increasing Quantity**: When new quantity is greater than current quantity, validates that additional units are available in shopping_mall_skus.available_quantity. Checks that the new quantity does not exceed the per-item maximum of 99 units. If sufficient inventory exists, updates cart_items.quantity and increases shopping_mall_skus.reserved_quantity by the difference.\n   - **Decreasing Quantity**: When new quantity is less than current quantity but greater than zero, updates cart_items.quantity and decreases shopping_mall_skus.reserved_quantity by the difference, returning inventory to available stock.\n   - **Zero Quantity**: When new quantity is zero, removes the cart item entirely from shopping_mall_cart_items and restores all reserved_quantity to available inventory in shopping_mall_skus.\n\n4. **Inventory Availability Validation**: Performs real-time inventory check for quantity increases to ensure sufficient stock exists. If requested quantity exceeds available inventory, the operation rejects the update and returns an error indicating the maximum available quantity. This prevents overselling and maintains inventory accuracy.\n\n5. **Price Recalculation**: Updates the cart_items.updated_at timestamp. The operation may also refresh the unit_price from the current shopping_mall_skus.price to reflect any price changes, ensuring customers see current pricing. Calculates line total (quantity × unit_price) for the updated item.\n\n6. **Cart Totals Update**: Recalculates cart-level totals including subtotal across all items, which is returned in the response for immediate UI updates.\n\n7. **Automatic Item Removal**: If the new quantity is set to zero or if the update would violate business rules, the cart item is automatically removed from shopping_mall_cart_items (hard delete since cart items are transient pre-purchase data). Reserved inventory is immediately released back to available stock.\n\nThe operation returns the updated cart item with complete details including current pricing, quantity, variant attributes, and product information. If the item was removed (quantity = 0), a success response is returned without cart item data. If validation fails (insufficient inventory, invalid quantity, item not found), appropriate error responses with specific reasons are returned.\n\nSecurity: Only authenticated customers can update items in their own carts. The system verifies cart ownership and prevents customers from modifying other customers' carts.\n\nRelated Operations: This endpoint works in conjunction with POST /carts/{cartId}/items (add new items), DELETE /carts/{cartId}/items/{itemId} (remove items), and GET /carts/{cartId} (view complete cart). It integrates with the inventory management system through shopping_mall_skus and shopping_mall_inventory_transactions tables for accurate stock tracking.\n\nBusiness Rules Applied: Enforces minimum quantity of 1 (or removal), maximum quantity of 99 per cart item, validates against available inventory in real-time, updates reserved_quantity atomically to prevent race conditions, and maintains cart item price synchronization with current SKU pricing.","parameters":[{"name":"cartId","description":"Unique identifier of the customer's shopping cart containing the item to update","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the specific cart item whose quantity will be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated quantity information for the cart item, including new quantity value and optional price refresh flag","typeName":"IShoppingMallCartItem.IUpdate"},"responseBody":{"description":"Updated cart item with new quantity, recalculated line total, current pricing, and cart summary","typeName":"IShoppingMallCartItem"},"name":"update","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Cart item must be created before it can be updated. The item identified by itemId must exist in the shopping_mall_cart_items table within the specified cart before its quantity can be modified."}],"accessor":["shoppingMall","customer","carts","items","update"]},{"specification":"This operation removes a specific item from a customer's shopping cart. It operates on the shopping_mall_cart_items table by permanently deleting the cart item record identified by the itemId parameter. The operation ensures that the cart item belongs to the specified cart before deletion. When a cart item is deleted, the system must immediately release any inventory reservations associated with that item, returning the reserved quantity to available inventory in the shopping_mall_skus table. This operation is used when customers decide to remove products from their cart during the shopping process, either because they changed their mind, found the item elsewhere, or want to modify their order. The cart item must exist and belong to the authenticated customer's cart for the deletion to succeed. After successful deletion, cart totals and item counts are recalculated automatically to reflect the updated cart state.","path":"/shoppingMall/customer/carts/{cartId}/items/{itemId}","method":"delete","summary":"Remove a specific item from the customer's shopping cart","description":"This operation permanently removes a specific cart item from a customer's shopping cart by deleting the corresponding record from the shopping_mall_cart_items table. The operation is initiated when a customer decides to remove a product they previously added to their cart.\n\nThe operation validates that the cart identified by cartId belongs to the authenticated customer and that the cart item identified by itemId exists within that cart. If either validation fails, the operation returns an appropriate error. The system enforces ownership validation to prevent customers from modifying other customers' carts.\n\nWhen a cart item is successfully deleted, the system performs several automated actions. First, it releases the inventory reservation associated with the removed item by decreasing the reserved_quantity and increasing the available_quantity in the shopping_mall_skus table for the corresponding SKU. This ensures that the inventory becomes immediately available for other customers to purchase. The inventory update is recorded in the shopping_mall_inventory_transactions table with transaction_type set to 'reservation_release' and transaction_status set to 'completed'.\n\nAfter the cart item deletion and inventory release, the shopping cart's updated_at timestamp is automatically updated to reflect the modification. This timestamp update enables proper cart synchronization across multiple devices and sessions for the same customer.\n\nThe operation returns a success response with no content body upon successful deletion. If the cart or cart item does not exist, or if the cart does not belong to the authenticated customer, the operation returns an error response indicating the specific validation failure.\n\nThis operation is commonly used during the shopping journey when customers refine their selections, compare alternatives, or adjust their purchase decisions before proceeding to checkout. It integrates with the shopping cart business rules defined in the requirements, ensuring proper inventory management and cart state consistency.","name":"erase","authorizationRole":"customer","authorizationType":null,"parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart containing the item to be removed","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the specific cart item to be removed from the cart","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Cart item must be created before it can be deleted. The item identified by itemId must exist in the shopping_mall_cart_items table within the specified cart before it can be removed."}],"accessor":["shoppingMall","customer","carts","items","erase"]},{"specification":"This operation removes all items from a customer's shopping cart by deleting all cart item records associated with the cart, then marking the cart itself as deleted through soft deletion. It operates on the shopping_mall_carts and shopping_mall_cart_items tables. The operation releases all inventory reservations for all cart items, returning reserved quantities to available inventory in the shopping_mall_skus table. This is a bulk deletion operation used when customers want to clear their entire cart at once, typically to start fresh or when abandoning a shopping session. The cart is soft-deleted by setting the deleted_at timestamp, preserving the cart record for analytics while making it inactive. The authenticated customer must own the cart for the operation to succeed. After successful deletion, if the customer adds items to cart again, a new active cart record will be created.","path":"/shoppingMall/customer/carts/{cartId}","method":"delete","summary":"Clear all items from the shopping cart and mark cart as deleted","description":"This operation clears the entire shopping cart by removing all cart items and marking the cart record as deleted. It provides a convenient way for customers to start fresh with an empty cart without manually removing each item individually.\n\nThe operation first validates that the shopping cart identified by cartId belongs to the authenticated customer. This ownership validation is critical for security, preventing customers from clearing other customers' carts. If the cart does not belong to the authenticated customer or does not exist, the operation returns an appropriate error response.\n\nWhen the validation passes, the operation performs multiple coordinated actions. First, it retrieves all cart items associated with the cart from the shopping_mall_cart_items table. For each cart item, the system calculates the total reserved quantity (item quantity) and releases the inventory reservation by updating the corresponding SKU record in the shopping_mall_skus table. The reserved_quantity is decreased and the available_quantity is increased for each SKU that was in the cart.\n\nEach inventory release operation is recorded in the shopping_mall_inventory_transactions table with transaction_type set to 'reservation_release', transaction_status set to 'completed', and quantity_change reflecting the returned quantity. This maintains a complete audit trail of all inventory movements as required by the business rules.\n\nAfter releasing all inventory reservations, the operation permanently deletes all shopping_mall_cart_items records associated with the cart. Then, it performs a soft deletion on the shopping_mall_carts record by setting the deleted_at timestamp to the current time. Soft deletion preserves the cart record for analytics and audit purposes while marking it as inactive. According to the Prisma schema, the unique constraint on shopping_mall_carts includes the deleted_at column, allowing customers to create new carts after clearing previous ones.\n\nThis operation is typically used when customers want to completely clear their cart to start over, when they decide not to proceed with their current selections, or when they want to begin a new shopping session. It provides a clean slate without requiring individual item removal operations.\n\nThe operation returns a success response with no content upon successful completion. All inventory updates, transaction logging, and cart deletion are performed atomically to maintain data consistency. If any part of the operation fails, the entire operation is rolled back to prevent partial cart clearing or inventory inconsistencies.\n\nThis operation integrates with the shopping cart business rules defined in the requirements analysis, specifically the cart persistence rules and inventory reservation management. It ensures that clearing a cart properly releases all inventory back to the available pool, maintaining accurate stock levels for other customers.","name":"erase","authorizationRole":"customer","authorizationType":null,"parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart to be cleared and deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Cart must exist with at least one item before it can be cleared. Cart items must be created to establish the cart and populate it with products that will be cleared by the delete operation."}],"accessor":["shoppingMall","customer","carts","erase"]},{"specification":"This operation retrieves a filtered and paginated list of wishlists for the authenticated customer. It operates on the shopping_mall_wishlists table and supports complex search criteria including wishlist name filtering, creation date ranges, and sorting options. The operation enables customers to view all their wishlists with metadata including item counts and last update times. Since wishlists are customer-owned resources with soft deletion support, this endpoint validates the customer's authentication and returns only their wishlists, respecting the deleted_at soft delete field to exclude deleted wishlists by default.","path":"/shoppingMall/customer/wishlists","method":"patch","summary":"Search and retrieve filtered, paginated list of customer wishlists","description":"Retrieve a comprehensive filtered and paginated list of wishlists belonging to the authenticated customer. This operation provides advanced search capabilities for finding wishlists based on various criteria including wishlist name, creation date ranges, and last update timestamps.\n\nThe operation supports flexible pagination with configurable page sizes and multiple sorting options. Customers can sort wishlists by creation date, last update time, or wishlist name to organize their saved product collections effectively.\n\nSecurity considerations include authentication verification to ensure customers can only access their own wishlists. The operation respects the soft deletion mechanism defined in the shopping_mall_wishlists table, filtering out wishlists marked as deleted (deleted_at is not null) by default unless explicitly requested through search parameters.\n\nThis operation integrates with the shopping_mall_wishlists table as defined in the Prisma schema, incorporating wishlist metadata including ID, name, timestamps, and soft delete status. The response includes wishlist summary information optimized for list displays, with aggregated data such as total item count per wishlist and most recent update activity.\n\nCustomers typically use this endpoint to view and manage their collection of wishlists (e.g., 'Favorites', 'Holiday Gifts', 'Birthday Ideas') before accessing individual wishlist details or moving items to their shopping cart. The pagination and filtering capabilities enable efficient browsing even for customers with numerous wishlists containing many saved products.","parameters":[],"requestBody":{"description":"Search criteria, filtering options, and pagination parameters for retrieving customer wishlists","typeName":"IShoppingMallWishlist.IRequest"},"responseBody":{"description":"Paginated list of wishlist summary information with item counts and metadata","typeName":"IPageIShoppingMallWishlist.ISummary"},"authorizationRole":"customer","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"At least one wishlist must be created before searching and retrieving the customer's wishlist collection. The search operation requires existing wishlist records to return meaningful results."}],"accessor":["shoppingMall","customer","wishlists","index"]},{"specification":"This operation retrieves detailed information for a specific wishlist identified by its unique ID. It operates on the shopping_mall_wishlists table and returns complete wishlist details including all saved items with product and SKU information. The operation validates that the authenticated customer owns the requested wishlist and that the wishlist has not been soft-deleted. This endpoint provides the foundation for customers to view their saved products, check availability and pricing, and move items to their shopping cart for purchase.","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"get","summary":"Retrieve detailed information for a specific customer wishlist by ID","description":"Retrieve comprehensive details for a specific wishlist identified by its unique wishlist ID. This operation provides complete wishlist information including the wishlist name, creation and update timestamps, and all items currently saved in the wishlist with their associated product and SKU details.\n\nThe operation validates that the authenticated customer is the owner of the requested wishlist to enforce proper access control and data privacy. Customers cannot access wishlists belonging to other users, ensuring wishlist privacy as defined in the business requirements.\n\nThis endpoint respects the soft deletion mechanism in the shopping_mall_wishlists table. If the requested wishlist has been soft-deleted (deleted_at is not null), the operation returns an appropriate error indicating the wishlist is no longer available, preventing access to deleted resources.\n\nThe response includes detailed wishlist information with all wishlist items, each containing references to the product and SKU, current pricing, stock availability status, and product images. This enables customers to view comprehensive information about their saved products, check if prices have changed since adding to wishlist, verify current stock availability, and make informed decisions about moving items to their shopping cart.\n\nCustomers typically access this endpoint after viewing their wishlist list (from the index operation) to see full details of a specific wishlist's contents. The detailed information supports actions like moving items to cart, removing items from wishlist, checking price changes, and receiving out-of-stock or back-in-stock notifications for saved products.\n\nThe operation integrates with the shopping_mall_wishlist_items table to retrieve all items within the wishlist, joining with shopping_mall_skus and shopping_mall_products to provide current product information including pricing, availability, images, and variant attributes. This ensures customers see real-time product data even though items were added to wishlist at earlier times with potentially different prices or stock levels.","parameters":[{"name":"wishlistId","description":"Unique identifier of the target wishlist to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete wishlist details including all items with product and SKU information","typeName":"IShoppingMallWishlist"},"authorizationRole":"customer","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before it can be retrieved. The wishlist ID referenced in the path parameter must exist in the shopping_mall_wishlists table and belong to the authenticated customer."}],"accessor":["shoppingMall","customer","wishlists","at"]},{"specification":"This operation creates a new wishlist for an authenticated customer. Wishlists enable customers to organize and save products for future purchase consideration. The customer can create multiple named wishlists to categorize products (e.g., 'Holiday Gifts', 'Favorites', 'Birthday Ideas'). Each wishlist is associated with the authenticated customer and can contain multiple wishlist items (products/SKUs). The wishlist creation process validates the wishlist name and initializes an empty wishlist that can subsequently receive wishlist items through separate operations. This operation is associated with the shopping_mall_wishlists table in the Prisma schema.","path":"/shoppingMall/customer/wishlists","method":"post","summary":"Create a new wishlist for the authenticated customer","description":"Creates a new wishlist for the authenticated customer, enabling them to organize and save products for future purchase consideration. This operation allows customers to create multiple named wishlists to categorize products based on different purposes such as 'Holiday Gifts', 'Favorites', or 'Birthday Ideas'.\n\nThe wishlist serves as a container for wishlist items (specific product SKUs) that customers want to save. Upon creation, the wishlist is initialized as empty and can subsequently receive items through the add-to-wishlist operations. Each wishlist is uniquely identified and associated with the customer's account.\n\nThis operation validates the provided wishlist name to ensure it meets business requirements (minimum length, no offensive content). The newly created wishlist is immediately available for the customer to add products.\n\nThe wishlist creation is linked to the shopping_mall_wishlists table in the Prisma schema, which tracks wishlist metadata including the customer owner, wishlist name, creation timestamp, and soft deletion status. The wishlist supports unlimited items and persists indefinitely until explicitly deleted by the customer.\n\nThis operation is a fundamental part of the customer engagement features, allowing customers to save products they're interested in but not ready to purchase immediately. Wishlists improve customer retention by keeping customers engaged with products and enabling easy purchase when they're ready.","parameters":[],"requestBody":{"description":"Wishlist creation data including the name for the new wishlist","typeName":"IShoppingMallWishlist.ICreate"},"responseBody":{"description":"Newly created wishlist with unique identifier and metadata","typeName":"IShoppingMallWishlist"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[],"accessor":["shoppingMall","customer","wishlists","create"]},{"specification":"This operation updates an existing wishlist's properties for an authenticated customer. Customers can modify wishlist metadata such as the wishlist name to better organize their saved products. The update operation validates ownership (ensuring the customer owns the wishlist being modified) and applies the requested changes. This operation is associated with the shopping_mall_wishlists table in the Prisma schema and enforces business rules such as wishlist name validation and ownership verification.","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"put","summary":"Update an existing wishlist's name or properties","description":"Updates an existing wishlist's properties for the authenticated customer. This operation allows customers to modify wishlist metadata, primarily the wishlist name, to better organize their saved products as their needs evolve.\n\nThe update operation enforces strict ownership validation, ensuring that customers can only modify wishlists they own. The system verifies that the wishlist identified by the wishlistId parameter belongs to the authenticated customer before applying any changes. If the customer attempts to update a wishlist they don't own, the operation returns an authorization error.\n\nThis operation validates the new wishlist name against business requirements including minimum length, maximum length, and content appropriateness. The wishlist name must be meaningful and help the customer organize their saved products effectively.\n\nThe updated wishlist metadata is persisted to the shopping_mall_wishlists table in the Prisma schema. The updated_at timestamp is automatically set to track when the modification occurred. The operation preserves all wishlist items - updating wishlist properties does not affect the products saved within the wishlist.\n\nThis operation supports the customer's ability to maintain organized wishlists as their shopping interests and priorities change over time. For example, a customer might rename 'General Wishlist' to 'Summer Wardrobe' as they refine their shopping plans.\n\nIf the wishlist has been soft-deleted (deleted_at is not null), this operation will fail with an appropriate error indicating the wishlist no longer exists.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated wishlist information including the new name","typeName":"IShoppingMallWishlist.IUpdate"},"responseBody":{"description":"Updated wishlist with modified properties and updated timestamp","typeName":"IShoppingMallWishlist"},"authorizationRole":"customer","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before it can be updated"}],"accessor":["shoppingMall","customer","wishlists","update"]},{"specification":"This operation performs soft deletion of a specific wishlist belonging to the authenticated customer by setting the deleted_at timestamp. It operates on the shopping_mall_wishlists table identified by the wishlistId path parameter. The operation validates that the wishlist belongs to the requesting customer before marking it as deleted. The wishlist record is preserved in the database with deleted_at timestamp set, maintaining data integrity for audit purposes and historical references. Associated wishlist items remain in the database but are filtered based on the parent wishlist's deletion status in normal queries.","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"delete","summary":"Soft delete a customer's wishlist by marking it as deleted","description":"This operation enables customers to delete one of their wishlists by setting the deleted_at timestamp on the wishlist record. The wishlist is identified by the wishlistId path parameter, which must correspond to a valid wishlist owned by the authenticated customer.\n\nThe operation performs authorization checks to ensure the requesting customer owns the specified wishlist before deletion. Attempts to delete another customer's wishlist will result in permission errors.\n\nAccording to the Prisma schema, the shopping_mall_wishlists table includes a deleted_at column supporting soft deletion. When a customer deletes a wishlist, the system sets the deleted_at timestamp to the current time rather than removing the record from the database. This soft delete approach preserves the wishlist data for audit purposes and maintains referential integrity.\n\nThe associated wishlist items in shopping_mall_wishlist_items remain in the database when the parent wishlist is soft deleted. Normal application queries filter out items belonging to deleted wishlists by checking the parent wishlist's deleted_at status. This approach prevents orphaned data while maintaining complete historical records.\n\nSoft deleted wishlists are excluded from normal customer wishlist queries and displays. The customer will not see the deleted wishlist in their wishlist list, and the wishlist name becomes available for reuse in new wishlists. However, the data remains in the database for administrative purposes, analytics, and potential data recovery if needed.\n\nThis operation is commonly used when customers finish shopping for specific occasions, want to consolidate wishlists, or simply no longer need to track certain products. After soft deletion, customers can create new wishlists with the same name at any time.\n\nThe operation does not return any response body upon success, following standard REST DELETE semantics. Clients should handle successful deletion by removing the wishlist from local state and refreshing the wishlist display.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist to be soft deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before it can be deleted"}],"accessor":["shoppingMall","customer","wishlists","erase"]},{"specification":"This operation retrieves a filtered and paginated list of items from a specific customer wishlist. It operates on the shopping_mall_wishlist_items table for the wishlist identified by wishlistId. The operation supports complex filtering criteria including product availability status, price ranges, date ranges, and SKU attributes through the request body. Results include complete item details with current product information, pricing, stock status, and variant attributes. The response is paginated to handle wishlists with many items efficiently. This operation is essential for displaying wishlist contents with real-time product data and enabling customers to find specific saved items.","path":"/shoppingMall/customer/wishlists/{wishlistId}/items","method":"patch","summary":"Search and retrieve filtered wishlist items with pagination and current product data","description":"This operation provides comprehensive search and filtering capabilities for items within a specific customer wishlist. The wishlist is identified by the wishlistId path parameter, and the operation returns detailed information about saved products including real-time pricing, stock availability, and variant attributes.\n\nThe operation validates that the requesting customer owns the specified wishlist before returning any data. Attempts to access another customer's wishlist items will result in authorization errors, ensuring privacy of wishlist data.\n\nUnlike simple wishlist retrieval, this operation supports advanced filtering through the request body, enabling customers to find specific items within large wishlists. Supported filtering criteria include product availability (in stock, out of stock), price ranges, categories, date added ranges, and SKU variant attributes like color or size.\n\nEach wishlist item in the response includes up-to-date product information fetched from the shopping_mall_products and shopping_mall_skus tables. This ensures customers see current prices even if they have changed since the item was added to the wishlist. Stock availability is also validated in real-time, allowing customers to identify which saved items are currently available for purchase.\n\nThe operation joins wishlist items with their associated SKU, product, and product image data to provide complete display information. This includes product names, variant details (color, size, options from shopping_mall_sku_colors, shopping_mall_sku_sizes, shopping_mall_sku_options), primary product images, current pricing, and inventory status.\n\nResults are paginated to handle wishlists containing hundreds of items efficiently. The response includes pagination metadata (current page, total pages, total items) along with the filtered item data. Default page size is 20 items, with support for customizable page sizes through the request parameters.\n\nThis operation is frequently used when customers view their wishlist page, filter saved items by availability before purchasing, or search for specific products they saved previously. The real-time data updates help customers make informed decisions about which wishlist items to move to cart for purchase.\n\nRelated operations include moving wishlist items to cart (requires separate operation), removing individual wishlist items (DELETE on specific item), and adding products to wishlist (POST operation). Customers typically use this operation before deciding which items to purchase or remove from their wishlist.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist containing the items to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering parameters, and pagination settings for wishlist items including availability filters, price ranges, and sort preferences","typeName":"IShoppingMallWishlistItem.IRequest"},"responseBody":{"description":"Paginated collection of wishlist items with complete product information, current pricing, stock status, variant attributes, and images","typeName":"IPageIShoppingMallWishlistItem"},"authorizationRole":"customer","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before retrieving or filtering its items"}],"accessor":["shoppingMall","customer","wishlists","items","index"]},{"specification":"This operation adds a new product SKU to a customer's wishlist. It operates on the shopping_mall_wishlist_items table by creating a new item record associated with the specified wishlist. The operation validates that the wishlist exists and belongs to the requesting customer, verifies the SKU is valid and active, checks that the SKU is not already in the wishlist, and creates the wishlist item record. This enables customers to save products they're interested in for future purchase consideration.","path":"/shoppingMall/customer/wishlists/{wishlistId}/items","method":"post","summary":"Add a product SKU to customer's wishlist for future purchase consideration","description":"Add a new product SKU to the specified customer wishlist. This operation enables customers to save products of interest for future purchase by creating a wishlist item entry in the shopping_mall_wishlist_items table.\n\nThe operation validates several conditions before adding the item. First, it verifies that the specified wishlist exists in the shopping_mall_wishlists table and belongs to the authenticated customer making the request. Second, it validates that the provided SKU identifier exists in the shopping_mall_skus table and corresponds to an active product variant. Third, it checks that the same SKU is not already present in this wishlist to prevent duplicate entries.\n\nWhen the SKU is successfully added to the wishlist, the system creates a new record in shopping_mall_wishlist_items with references to both the wishlist and the SKU. The created_at and updated_at timestamps are set to the current time. The operation returns the complete wishlist item information including product details, SKU variant attributes, current pricing, and stock availability status.\n\nSecurity considerations include verifying that the customer has permission to modify the specified wishlist through ownership validation. The operation enforces the business rule that wishlists can contain unlimited items without quantity limits, differentiating it from shopping cart constraints. Products can be added to wishlists regardless of stock availability, enabling customers to save out-of-stock items for future notification when inventory is replenished.\n\nThis operation integrates with the product catalog system to retrieve current product information and pricing at the time of display, ensuring customers see up-to-date details when viewing their wishlist items.","parameters":[{"name":"wishlistId","description":"Unique identifier of the target customer wishlist","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"SKU identifier and optional metadata for the wishlist item to be added","typeName":"IShoppingMallWishlistItem.ICreate"},"responseBody":{"description":"Complete wishlist item information including product details, variant attributes, and current availability","typeName":"IShoppingMallWishlistItem"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before items can be added to it"},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its SKU can be added to wishlist"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variant must be created before it can be added to the wishlist"}],"accessor":["shoppingMall","customer","wishlists","items","create"]},{"specification":"This operation removes a specific item from a customer's wishlist by deleting the corresponding shopping_mall_wishlist_items record. It operates on the wishlist items table to permanently remove the wishlist entry identified by the item ID. The operation validates that the wishlist item exists, belongs to the specified wishlist, and that the wishlist is owned by the requesting customer before performing the deletion. This enables customers to manage their saved products by removing items they are no longer interested in.","path":"/shoppingMall/customer/wishlists/{wishlistId}/items/{itemId}","method":"delete","summary":"Remove a specific product item from customer's wishlist","description":"Remove the specified item from the customer's wishlist by permanently deleting the record from the shopping_mall_wishlist_items table. This operation enables customers to manage their saved products by removing items they no longer wish to track.\n\nThe operation performs several validation checks before deletion. First, it verifies that the specified wishlist exists in the shopping_mall_wishlists table and belongs to the authenticated customer making the request through ownership validation. Second, it confirms that the wishlist item with the given itemId exists in the shopping_mall_wishlist_items table and is associated with the correct wishlist through the shopping_mall_wishlist_id foreign key.\n\nThis is a hard delete operation that permanently removes the wishlist item record from the database. The shopping_mall_wishlist_items table does not have a deleted_at soft delete column, so the record is completely removed. Once deleted, the item cannot be recovered and the customer would need to add the product to their wishlist again if desired.\n\nSecurity considerations include verifying the customer has permission to modify the specified wishlist through ownership validation, preventing customers from deleting items from other customers' wishlists. The operation enforces authorization by checking that the wishlist referenced by the item belongs to the authenticated customer.\n\nAfter successful deletion, the operation returns a success confirmation. No response body is needed since the resource has been removed. The deletion immediately affects the wishlist item count and list display for the customer across all devices through real-time synchronization.\n\nThis operation integrates with the wishlist management system and maintains referential integrity by removing the item relationship between the wishlist and the SKU. The parent shopping_mall_wishlists record and the referenced shopping_mall_skus record remain intact, as only the linking wishlist_items record is deleted.","parameters":[{"name":"wishlistId","description":"Unique identifier of the customer wishlist containing the item","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the specific wishlist item to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before wishlist items can be removed from it"},{"endpoint":{"path":"/shoppingMall/customer/wishlists/{wishlistId}/items","method":"post"},"description":"Wishlist item must be created before it can be deleted from the wishlist"}],"accessor":["shoppingMall","customer","wishlists","items","erase"]},{"specification":"This operation retrieves a filtered and paginated list of orders based on complex search criteria. It operates on the shopping_mall_orders table and supports filtering by order status, date ranges, customer information, seller information, price ranges, and delivery locations. The operation is designed to handle complex query requirements that cannot be efficiently expressed through simple query parameters, hence using the PATCH method with a request body. This endpoint serves multiple user roles: customers viewing their order history, sellers managing orders for their products, and admins overseeing all platform orders. The response includes order summaries optimized for list display with pagination support. This operation integrates with the order management system defined in the requirements and provides the foundation for order history browsing, order searching, and order filtering across the platform. It supports the business requirement for customers, sellers, and admins to access and search their respective orders efficiently.","path":"/shoppingMall/orders","method":"patch","summary":"Search and retrieve a filtered, paginated list of orders from the shopping_mall_orders table","description":"Retrieve a comprehensive, filtered, and paginated list of orders from the shopping_mall_orders table based on advanced search criteria including order status, date ranges, customer filters, seller filters, price ranges, delivery information, and more. This operation provides flexible order history access and searching capabilities for customers, sellers, and admins.\n\nThis endpoint supports complex query requirements through a request body, enabling multi-field filtering, full-text search across order attributes, date range filtering, and sorting options. Customers can search their own order history, sellers can search orders containing their products, and admins can search all platform orders with comprehensive filtering.\n\nThe operation implements role-based data filtering: customers see only their own orders, sellers see only orders containing their products, and admins have unrestricted access to all orders. Authorization is enforced at the business logic layer based on the authenticated user's role and identity.\n\nSearch capabilities include filtering by order number, customer name, seller name, order status (pending_payment, payment_confirmed, processing, shipped, delivered, cancelled, refunded, etc.), date ranges for various timestamps (created_at, delivered_at, cancelled_at), price ranges, shipping methods, delivery locations, and payment status. The response includes order summary information optimized for list display with pagination controls.\n\nThis operation is critical for order management workflows defined in the requirements document, supporting customer order history viewing, seller order fulfillment tracking, and admin order oversight. It integrates with the order lifecycle management system and provides foundation for order tracking, cancellation workflows, and refund request identification.\n\nPerformance requirements specify that search results must be returned within 1-2 seconds for datasets up to 100,000 orders. The operation supports sorting by order date, total amount, status, and other relevant fields. Pagination is implemented to handle large result sets efficiently, with configurable page sizes typically ranging from 10-50 orders per page.\n\nRelated operations include GET /orders/{orderId} for detailed order information and order-specific action endpoints for cancellation and refund requests. This search operation serves as the entry point for users to locate specific orders before drilling down into details.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination controls for order retrieval. Includes filters for order status, date ranges, customer/seller identifiers, price ranges, and full-text search terms.","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated list of order summary records matching the search criteria, including order numbers, status, dates, amounts, customer information, seller information, and quick action links. Includes pagination metadata (total count, page number, page size).","typeName":"IPageIShoppingMallOrder.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Orders must be created before they can be searched and retrieved through the order search endpoint"}],"accessor":["shoppingMall","orders","index"]},{"specification":"This operation retrieves complete detailed information for a specific order identified by orderId from the shopping_mall_orders table. It returns comprehensive order data including all order items with product details and SKU information, delivery address snapshot, shipping information, payment details, order status history timeline, cancellation information (if applicable), refund requests (if applicable), and shipment tracking. The operation serves customers viewing their order details, sellers accessing orders they need to fulfill, and admins overseeing order management. Authorization is enforced to ensure customers can only view their own orders, sellers can only view orders containing their products, and admins have unrestricted access. The response includes complete order information necessary for order tracking, fulfillment, customer service, and dispute resolution. This operation integrates with the order lifecycle and tracking requirements defined in the Order Management and Tracking document, providing the foundation for detailed order inspection and order-related actions.","path":"/shoppingMall/orders/{orderId}","method":"get","summary":"Retrieve detailed information for a specific order from the shopping_mall_orders table","description":"Retrieve complete detailed information for a specific order identified by the orderId path parameter from the shopping_mall_orders table. This operation returns comprehensive order data including order metadata, itemized product list with SKU details and pricing, delivery address snapshot preserved at checkout time, shipping method and costs, tax calculations, payment information, order status with complete lifecycle timeline, and related entities such as shipment tracking, cancellation records, and refund requests.\n\nThe operation serves multiple use cases across different user roles. Customers access this endpoint to view their order details, track shipping status, review purchased items, and initiate cancellation or refund requests. Sellers access this endpoint to view orders they need to fulfill, retrieve customer shipping addresses, and update order processing status. Admins access this endpoint for comprehensive order oversight, dispute resolution, and customer service support.\n\nAuthorization is strictly enforced based on user role and ownership: customers can only retrieve their own orders (where shopping_mall_customer_id matches authenticated customer), sellers can only retrieve orders containing their products (where shopping_mall_seller_id matches authenticated seller), and admins have unrestricted access to all orders. Attempting to access an order without proper authorization returns a 403 Forbidden error.\n\nThe response includes complete order information structured for detailed display: order header with order_number, status, timestamps (created_at, payment_confirmed_at, seller_confirmed_at, shipped_at, delivered_at, completed_at, cancelled_at), financial breakdown (subtotal from order_items, shipping_cost, tax_amount, total_amount), delivery address details (snapshotted from checkout time), customer contact information, seller information, and shipping method selection.\n\nOrder items are returned with full detail including product_name (snapshotted), variant_attributes (color, size, options as JSON), product_image_url (snapshotted), quantity, unit_price (at time of purchase), and individual item_status for partial fulfillment tracking. This enables accurate historical display even if products are later modified or discontinued.\n\nShipping information includes carrier tracking integration: carrier_name, tracking_number with validation, shipment_status (label_created, picked_up, in_transit, out_for_delivery, delivered, exception), shipped_at timestamp, estimated_delivery_date, and actual_delivery_date when available. The order status history provides a complete audit trail with all state transitions, timestamps, and actors (customer, seller, admin, or system) who triggered each change.\n\nFor cancelled orders, the response includes cancellation details from shopping_mall_cancellations: requester identification (customer, seller, or admin), cancellation_reason, cancellation_status, refund_amount, refund_processed flag, and timestamps. For orders with refund requests, the response includes refund request details from shopping_mall_refund_requests: refund_reason, refund_description, refund_amount_requested, refund_amount_approved, refund_status, return_required flag, and review timeline.\n\nThis operation is essential for order tracking workflows defined in the Order Management and Tracking requirements document. It provides the complete order context needed for customers to track deliveries, for sellers to fulfill orders, and for admins to resolve disputes and manage refunds. The detailed order view serves as the basis for order-related actions including cancellation requests, refund requests, review submissions, and customer service inquiries.\n\nPerformance expectations require the order detail page to load within 1 second under normal conditions. The operation retrieves data from multiple related tables (orders, order_items, shipments, cancellations, refund_requests, order_status_history) and should optimize queries to minimize database round trips while maintaining response time targets.\n\nError handling includes returning 404 Not Found when the orderId does not exist, 403 Forbidden when the authenticated user lacks permission to view the order, and appropriate error messages for any data retrieval issues. The operation handles soft-deleted orders by excluding them from results unless specifically requested by admins for audit purposes.","parameters":[{"name":"orderId","description":"Unique identifier of the target order to retrieve. Must be a valid UUID matching an existing order in the shopping_mall_orders table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed order information including order metadata, itemized product list with SKU details, delivery address snapshot, shipping information, payment details, order status history timeline, cancellation details (if applicable), refund request details (if applicable), and shipment tracking data. Structured for comprehensive order display and management.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","orders","at"]},{"specification":"This operation enables customers to create new orders by processing their shopping cart contents through checkout. It operates on the shopping_mall_orders table and related entities (shopping_mall_order_items, shopping_mall_payment_transactions, shopping_mall_inventory_transactions). The operation handles complete order placement workflow including cart validation, inventory allocation, payment processing, order splitting by seller, and multi-seller coordination. It creates separate order records for each seller when cart contains items from multiple vendors, generates unique order numbers, snapshots delivery address and pricing information, processes payment through gateway integration, and updates inventory allocations. This is the core transaction endpoint that converts shopping cart into confirmed orders.","path":"/shoppingMall/customer/orders","method":"post","summary":"Create new order from shopping cart with payment processing","description":"Create and process a new order from the customer's shopping cart, handling complete checkout workflow including payment authorization, inventory allocation, and multi-seller order splitting.\n\nThis operation processes the customer's shopping cart and creates confirmed order records in the shopping_mall_orders table. When the cart contains items from multiple sellers, the system automatically splits the order into separate shopping_mall_orders records—one per seller—each with a unique order_number in format ORD-YYYYMMDD-NNNNNN. All orders from the same checkout session share a checkout_transaction_id for grouping and display purposes.\n\nThe operation performs comprehensive validation before order creation: verifies customer authentication and account status, validates all cart items are still available and in stock, confirms delivery address is complete and valid, validates selected payment method, and ensures cart total meets minimum order value ($5.00). Real-time inventory availability is checked immediately before payment processing to prevent overselling.\n\nPayment processing integrates with configured payment gateways (Stripe, PayPal, etc.) following PCI-DSS compliant practices. The system processes a single payment transaction for the entire cart total even when creating multiple seller orders, then internally allocates payment amounts to each seller based on their order subtotals. Payment authorization must succeed before any order records are created or inventory is allocated. If payment fails, the cart remains unchanged and customers can retry with the same or different payment method (maximum 5 attempts).\n\nAddress information from shopping_mall_addresses is snapshotted into the order record (delivery_recipient_name, delivery_phone, delivery_address_line1, delivery_address_line2, delivery_city, delivery_state_province, delivery_postal_code, delivery_country) to preserve historical accuracy even if the customer later modifies or deletes the address. Similarly, product information is snapshotted in shopping_mall_order_items (product_name, variant_attributes, product_image_url, unit_price) to maintain accurate order history regardless of future product changes.\n\nInventory management is handled atomically: cart reservations are converted to permanent allocations by creating shopping_mall_inventory_transactions records with transaction_type 'sale' and transaction_status 'completed'. The shopping_mall_skus table is updated with reduced available_quantity and increased reserved_quantity. This ensures inventory consistency and prevents overselling through transaction-level locking.\n\nUpon successful order creation, the system generates shopping_mall_order_status_history records tracking the initial status transition, sends order confirmation emails to the customer within 5 minutes, notifies each seller of new orders within 5 minutes, and clears the customer's shopping_mall_cart_items. The response includes all generated order numbers, complete order details, estimated delivery dates, and payment confirmation information for customer reference and order tracking.","parameters":[],"requestBody":{"description":"Order creation payload containing delivery address, payment method, shipping preferences, and optional customer notes","typeName":"IShoppingMallOrder.ICreate"},"responseBody":{"description":"Complete order confirmation details including all order numbers for multi-seller orders, payment status, delivery estimates, and next steps","typeName":"IShoppingMallOrder.ICreateResponse"},"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Delivery address must be created before it can be referenced in order creation"},{"endpoint":{"path":"/shoppingMall/customer/paymentMethods","method":"post"},"description":"Payment method must be created and saved before it can be used for order payment"}],"accessor":["shoppingMall","customer","orders","create"]},{"specification":"This operation allows customers to request cancellation of their orders based on order status and cancellation eligibility windows. It operates on the shopping_mall_cancellations table and updates the shopping_mall_orders table status. The operation enforces business rules for cancellation timing: free cancellation without approval for orders in pending_payment, payment_confirmed, or awaiting_seller_confirmation states; seller approval required for orders in confirmed or preparing_shipment states; cancellation not allowed for orders already shipped or delivered. When cancellation is processed, it triggers inventory restoration (shopping_mall_inventory_transactions), initiates refund processing (shopping_mall_refunds), and updates order status to cancelled. This endpoint is essential for order lifecycle management and customer service.","path":"/shoppingMall/customer/orders/{orderId}/cancel","method":"post","summary":"Request cancellation of an existing order","description":"Request cancellation of a customer's order, with automatic approval or seller approval workflow depending on current order status and timing rules defined in business requirements.\n\nThis operation creates a record in the shopping_mall_cancellations table to track the cancellation request workflow. The cancellation process varies based on the current status of the shopping_mall_orders record being cancelled. For orders in early states (pending_payment, payment_confirmed, awaiting_seller_confirmation), the cancellation is immediately approved and processed without requiring seller confirmation. For orders in later states (confirmed, preparing_shipment), the request requires seller approval and enters pending_approval status, with the seller having 24 hours to respond before automatic approval.\n\nThe operation enforces strict business rules regarding cancellation eligibility. Customers can freely cancel orders before the preparing_shipment state. Orders in confirmed or preparing_shipment states require seller approval (requester_customer_id is set, cancellation_status is pending_approval). Orders that have reached shipped, in_transit, out_for_delivery, or delivered states cannot be cancelled through this endpoint—customers must use the refund request process instead for delivered orders.\n\nWhen a cancellation request is created, the system populates the shopping_mall_cancellations record with requester_customer_id (the authenticated customer), cancellation_reason (from predefined options: customer_changed_mind, found_better_price, order_mistake, delivery_too_long, or other), optional cancellation_notes for additional context, refund_amount (typically the full order total_amount), and requested_at timestamp. The system immediately notifies the associated seller (shopping_mall_seller_id from the order) about the cancellation request.\n\nFor immediate cancellations (no approval required), the system atomically updates the shopping_mall_orders.status to 'cancelled', sets cancelled_at timestamp, creates shopping_mall_inventory_transactions records with transaction_type 'cancellation' to restore inventory quantities back to shopping_mall_skus.available_quantity, and initiates refund processing by creating shopping_mall_refunds record referencing the original shopping_mall_payment_transactions. The entire cart quantity is returned to available stock within 5 seconds, and refund processing begins immediately with funds returned to the customer's original payment method within 24 hours.\n\nFor approval-required cancellations, the shopping_mall_cancellations.cancellation_status remains pending_approval, and a notification is sent to the seller who must respond within 24 hours. If the seller approves (approver_seller_id is set, cancellation_status changes to approved), the cancellation proceeds as described above. If the seller does not respond within 24 hours, the system automatically approves the cancellation (auto-approval business rule). If the seller rejects the request, the customer is notified and the order continues normal processing.\n\nMulti-seller order cancellation is supported: if an order is part of a multi-seller checkout (identified by checkout_transaction_id), each seller's order can be cancelled independently. Cancelling all orders from a checkout session results in full transaction cancellation and complete refund. Partial cancellations result in partial refunds calculated based on the cancelled order items.\n\nThe operation validates that the authenticated customer owns the order being cancelled (shopping_mall_orders.shopping_mall_customer_id matches the authenticated user), preventing unauthorized cancellation attempts. It also validates the current order status allows cancellation and returns appropriate error messages for ineligible orders with guidance on alternative actions (refund requests for delivered orders).","parameters":[{"name":"orderId","description":"Unique identifier of the order to be cancelled","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Cancellation request details including reason for cancellation and optional explanatory notes","typeName":"IShoppingMallOrder.ICancelRequest"},"responseBody":{"description":"Cancellation request confirmation with status, refund information, and expected processing timeline","typeName":"IShoppingMallOrder.ICancelResponse"},"name":"cancel","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be cancelled. The cancellation operation requires an existing order record in the shopping_mall_orders table with a valid orderId to process the cancellation request and determine eligibility based on order status."}],"accessor":["shoppingMall","customer","orders","cancel"]},{"specification":"This operation enables customers to request a refund for a delivered order by providing refund details including the reason, requested amount, and supporting information. The operation creates a refund request record that enters the approval workflow involving seller review and potential admin escalation. This endpoint validates that the order is in a refundable state (delivered or completed status) and within the 30-day return window as specified in the business rules. The refund request will be linked to the customer, order, and will track the approval workflow through various statuses including pending review, seller response, admin review, and final processing. This operation is essential for post-delivery customer satisfaction and dispute resolution workflows defined in the order management requirements.","path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post","summary":"Submit a refund request for a delivered order within the return window","description":"Enables customers to formally request refunds for delivered orders by submitting detailed refund information including reason, description, requested amount, and optional evidence. This operation initiates the refund approval workflow as defined in the order management requirements, creating a refund request record that will be reviewed by the seller and potentially escalated to admin for final decision.\n\nThe operation validates critical business rules before accepting the refund request. First, it verifies the order exists and belongs to the requesting customer. Second, it confirms the order is in a refundable state (delivered or completed status). Third, it validates the request is submitted within the 30-day return window from delivery date as specified in the business rules. If any validation fails, the request is rejected with specific error messages.\n\nUpon successful submission, the system creates a shopping_mall_refund_requests record with status 'pending_review', calculates the seller response deadline (3 business days from submission), and sends immediate notifications to the seller alerting them of the new refund request. The customer receives confirmation with a refund request ID for tracking purposes.\n\nThe refund reason must be selected from predefined categories: defective_damaged, wrong_item, does_not_match_description, changed_mind, found_better_price, quality_not_expected, or other. Customers must provide a detailed explanation regardless of selected reason to help sellers and admins make informed decisions. The requested refund amount typically matches the order total but can be partial refund amounts in some cases.\n\nThis operation integrates with the shopping_mall_orders, shopping_mall_refund_requests, and shopping_mall_customers tables as defined in the Prisma schema. It serves as the entry point for the complete refund workflow documented in the Order Management and Tracking requirements, which includes seller review, admin escalation for disputes, return shipping coordination, and final refund payment processing through the payment gateway.\n\nRelated operations include viewing refund request status, seller refund approval/rejection endpoints, and admin refund decision overrides. This endpoint is customer-facing and requires customer authentication with ownership verification to ensure only the order owner can request refunds.","parameters":[{"name":"orderId","description":"Unique identifier of the order for which refund is being requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Refund request details including reason, description, requested amount, and supporting information for the refund approval workflow","typeName":"IShoppingMallOrder.IRefundCreate"},"responseBody":{"description":"Created refund request record with assigned refund request ID, initial status, seller response deadline, and tracking information","typeName":"IShoppingMallRefundRequest"},"name":"createRefund","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created and delivered before a refund can be requested. The refund request operation validates that the order exists, is in a refundable state (delivered or completed status), and is within the 30-day return window from delivery date."}],"accessor":["shoppingMall","customer","orders","refund","createRefund"]},{"specification":"This operation retrieves the complete audit trail of status transitions for a specific order, providing visibility into the order lifecycle from placement through delivery or cancellation. The operation returns all status change records from the shopping_mall_order_status_history table including timestamps, actors (customer, seller, admin, or system), previous and new statuses, reasons for changes, and any associated notes. This endpoint supports complex filtering and pagination for orders with extensive status histories. The operation is essential for order tracking, dispute resolution, customer service, and audit compliance. Customers can view their order status history to understand order progression, sellers can track fulfillment timelines and identify bottlenecks, and admins can investigate order issues with complete visibility into all state transitions. The endpoint validates that the requester has appropriate permissions: customers can only view history for their own orders, sellers can view history for orders containing their products, and admins have unrestricted access to all order status histories across the platform.","path":"/shoppingMall/customer/orders/{orderId}/statusHistory","method":"patch","summary":"Retrieve the complete status change audit trail for a specific order with filtering and pagination","description":"Retrieves the comprehensive audit trail of all status transitions for a specific order from the shopping_mall_order_status_history table as defined in the Prisma schema. This operation provides complete visibility into the order lifecycle, documenting every state change from initial placement through final completion, cancellation, or refund.\n\nEach status history record includes the previous status, new status, timestamp of the change, reason for the transition, optional notes, and identification of the actor who triggered the change (customer, seller, admin, or system-generated). This detailed audit trail is essential for order tracking, customer service, dispute resolution, and compliance with business audit requirements.\n\nThe operation validates that the requesting user has appropriate permissions to view the order's status history based on their role and relationship to the order. Customers can retrieve status history only for orders they placed (validated by matching shopping_mall_customer_id). Sellers can retrieve status history for orders containing their products (validated by matching shopping_mall_seller_id). Admins have unrestricted access to view status history for any order across the platform for oversight and dispute resolution purposes.\n\nThe request body supports advanced filtering capabilities to narrow down the status history results. Filters include date range (from/to timestamps), specific status values (to find transitions to particular states like 'shipped' or 'delivered'), actor types (customer-initiated, seller-initiated, admin-initiated, system-generated), and change reasons. These filters enable efficient retrieval of relevant status events without overwhelming users with complete histories for long-lived orders.\n\nPagination is implemented to handle orders with extensive status histories efficiently. The response includes standard pagination metadata (total count, page number, page size, has next page) along with the sorted status history records. Results are ordered by created_at timestamp in descending order (most recent changes first) by default, providing immediate visibility into the latest order state transitions.\n\nThis operation integrates with the order status lifecycle defined in the Order Management and Tracking requirements document. It provides read access to the append-only audit trail that tracks all order state transitions according to the valid status transition rules (pending_payment → payment_confirmed → processing → shipped → in_transit → out_for_delivery → delivered → completed, with possible cancellation and refund branches).\n\nThe status history data includes both user-initiated actions (customer cancellation requests, seller shipment updates) and system-generated events (automatic payment confirmation, carrier tracking updates, auto-completion after 7 days). The is_system_generated flag distinguishes between manual and automated status changes, enabling analysis of order workflow automation effectiveness.\n\nRelated operations include retrieving order details, updating order status (seller and admin operations), and processing cancellations or refunds. This endpoint provides the temporal dimension of order data, complementing the current order state with complete historical context.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose status history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria for filtering order status history including date range, status values, actor types, and pagination parameters","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status change records with complete audit information including timestamps, actors, status transitions, reasons, and notes","typeName":"IPageIShoppingMallOrderStatusHistory"},"name":"index","authorizationRoles":["customer","seller","admin"],"authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status history can be retrieved"}],"accessor":["shoppingMall","customer","orders","statusHistory","index"]},{"specification":"This operation retrieves the complete audit trail of status transitions for a specific order, providing visibility into the order lifecycle from placement through delivery or cancellation. The operation returns all status change records from the shopping_mall_order_status_history table including timestamps, actors (customer, seller, admin, or system), previous and new statuses, reasons for changes, and any associated notes. This endpoint supports complex filtering and pagination for orders with extensive status histories. The operation is essential for order tracking, dispute resolution, customer service, and audit compliance. Customers can view their order status history to understand order progression, sellers can track fulfillment timelines and identify bottlenecks, and admins can investigate order issues with complete visibility into all state transitions. The endpoint validates that the requester has appropriate permissions: customers can only view history for their own orders, sellers can view history for orders containing their products, and admins have unrestricted access to all order status histories across the platform.","path":"/shoppingMall/seller/orders/{orderId}/statusHistory","method":"patch","summary":"Retrieve the complete status change audit trail for a specific order with filtering and pagination","description":"Retrieves the comprehensive audit trail of all status transitions for a specific order from the shopping_mall_order_status_history table as defined in the Prisma schema. This operation provides complete visibility into the order lifecycle, documenting every state change from initial placement through final completion, cancellation, or refund.\n\nEach status history record includes the previous status, new status, timestamp of the change, reason for the transition, optional notes, and identification of the actor who triggered the change (customer, seller, admin, or system-generated). This detailed audit trail is essential for order tracking, customer service, dispute resolution, and compliance with business audit requirements.\n\nThe operation validates that the requesting user has appropriate permissions to view the order's status history based on their role and relationship to the order. Customers can retrieve status history only for orders they placed (validated by matching shopping_mall_customer_id). Sellers can retrieve status history for orders containing their products (validated by matching shopping_mall_seller_id). Admins have unrestricted access to view status history for any order across the platform for oversight and dispute resolution purposes.\n\nThe request body supports advanced filtering capabilities to narrow down the status history results. Filters include date range (from/to timestamps), specific status values (to find transitions to particular states like 'shipped' or 'delivered'), actor types (customer-initiated, seller-initiated, admin-initiated, system-generated), and change reasons. These filters enable efficient retrieval of relevant status events without overwhelming users with complete histories for long-lived orders.\n\nPagination is implemented to handle orders with extensive status histories efficiently. The response includes standard pagination metadata (total count, page number, page size, has next page) along with the sorted status history records. Results are ordered by created_at timestamp in descending order (most recent changes first) by default, providing immediate visibility into the latest order state transitions.\n\nThis operation integrates with the order status lifecycle defined in the Order Management and Tracking requirements document. It provides read access to the append-only audit trail that tracks all order state transitions according to the valid status transition rules (pending_payment → payment_confirmed → processing → shipped → in_transit → out_for_delivery → delivered → completed, with possible cancellation and refund branches).\n\nThe status history data includes both user-initiated actions (customer cancellation requests, seller shipment updates) and system-generated events (automatic payment confirmation, carrier tracking updates, auto-completion after 7 days). The is_system_generated flag distinguishes between manual and automated status changes, enabling analysis of order workflow automation effectiveness.\n\nRelated operations include retrieving order details, updating order status (seller and admin operations), and processing cancellations or refunds. This endpoint provides the temporal dimension of order data, complementing the current order state with complete historical context.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose status history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria for filtering order status history including date range, status values, actor types, and pagination parameters","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status change records with complete audit information including timestamps, actors, status transitions, reasons, and notes","typeName":"IPageIShoppingMallOrderStatusHistory"},"name":"index","authorizationRoles":["customer","seller","admin"],"authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status history can be retrieved"}],"accessor":["shoppingMall","seller","orders","statusHistory","index"]},{"specification":"This operation retrieves the complete audit trail of status transitions for a specific order, providing visibility into the order lifecycle from placement through delivery or cancellation. The operation returns all status change records from the shopping_mall_order_status_history table including timestamps, actors (customer, seller, admin, or system), previous and new statuses, reasons for changes, and any associated notes. This endpoint supports complex filtering and pagination for orders with extensive status histories. The operation is essential for order tracking, dispute resolution, customer service, and audit compliance. Customers can view their order status history to understand order progression, sellers can track fulfillment timelines and identify bottlenecks, and admins can investigate order issues with complete visibility into all state transitions. The endpoint validates that the requester has appropriate permissions: customers can only view history for their own orders, sellers can view history for orders containing their products, and admins have unrestricted access to all order status histories across the platform.","path":"/shoppingMall/admin/orders/{orderId}/statusHistory","method":"patch","summary":"Retrieve the complete status change audit trail for a specific order with filtering and pagination","description":"Retrieves the comprehensive audit trail of all status transitions for a specific order from the shopping_mall_order_status_history table as defined in the Prisma schema. This operation provides complete visibility into the order lifecycle, documenting every state change from initial placement through final completion, cancellation, or refund.\n\nEach status history record includes the previous status, new status, timestamp of the change, reason for the transition, optional notes, and identification of the actor who triggered the change (customer, seller, admin, or system-generated). This detailed audit trail is essential for order tracking, customer service, dispute resolution, and compliance with business audit requirements.\n\nThe operation validates that the requesting user has appropriate permissions to view the order's status history based on their role and relationship to the order. Customers can retrieve status history only for orders they placed (validated by matching shopping_mall_customer_id). Sellers can retrieve status history for orders containing their products (validated by matching shopping_mall_seller_id). Admins have unrestricted access to view status history for any order across the platform for oversight and dispute resolution purposes.\n\nThe request body supports advanced filtering capabilities to narrow down the status history results. Filters include date range (from/to timestamps), specific status values (to find transitions to particular states like 'shipped' or 'delivered'), actor types (customer-initiated, seller-initiated, admin-initiated, system-generated), and change reasons. These filters enable efficient retrieval of relevant status events without overwhelming users with complete histories for long-lived orders.\n\nPagination is implemented to handle orders with extensive status histories efficiently. The response includes standard pagination metadata (total count, page number, page size, has next page) along with the sorted status history records. Results are ordered by created_at timestamp in descending order (most recent changes first) by default, providing immediate visibility into the latest order state transitions.\n\nThis operation integrates with the order status lifecycle defined in the Order Management and Tracking requirements document. It provides read access to the append-only audit trail that tracks all order state transitions according to the valid status transition rules (pending_payment → payment_confirmed → processing → shipped → in_transit → out_for_delivery → delivered → completed, with possible cancellation and refund branches).\n\nThe status history data includes both user-initiated actions (customer cancellation requests, seller shipment updates) and system-generated events (automatic payment confirmation, carrier tracking updates, auto-completion after 7 days). The is_system_generated flag distinguishes between manual and automated status changes, enabling analysis of order workflow automation effectiveness.\n\nRelated operations include retrieving order details, updating order status (seller and admin operations), and processing cancellations or refunds. This endpoint provides the temporal dimension of order data, complementing the current order state with complete historical context.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose status history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria for filtering order status history including date range, status values, actor types, and pagination parameters","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status change records with complete audit information including timestamps, actors, status transitions, reasons, and notes","typeName":"IPageIShoppingMallOrderStatusHistory"},"name":"index","authorizationRoles":["customer","seller","admin"],"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its status history can be retrieved. The order creation endpoint creates the initial order record that subsequent status transitions will be tracked against."}],"accessor":["shoppingMall","admin","orders","statusHistory","index"]},{"specification":"This operation retrieves the complete audit trail of status transitions for a specific order, providing visibility into the order lifecycle from placement through delivery or cancellation. The operation returns all status change records from the shopping_mall_order_status_history table including timestamps, actors (customer, seller, admin, or system), previous and new statuses, reasons for changes, and any associated notes. This endpoint supports complex filtering and pagination for orders with extensive status histories. The operation is essential for order tracking, dispute resolution, customer service, and audit compliance. All authenticated users (customers, sellers, admins) can access this endpoint with appropriate permission-based filtering applied in the backend: customers see status history only for their own orders, sellers see history for orders containing their products, and admins have unrestricted access to all order histories.","path":"/shoppingMall/orders/{orderId}/statusHistory","method":"patch","summary":"Retrieve the complete status change audit trail for a specific order with filtering and pagination","description":"Retrieves the comprehensive audit trail of all status transitions for a specific order from the shopping_mall_order_status_history table as defined in the Prisma schema. This operation provides complete visibility into the order lifecycle, documenting every state change from initial placement through final completion, cancellation, or refund.\n\nEach status history record includes the previous status, new status, timestamp of the change, reason for the transition, optional notes, and identification of the actor who triggered the change (customer, seller, admin, or system-generated). This detailed audit trail is essential for order tracking, customer service, dispute resolution, and compliance with business audit requirements.\n\nThe operation implements role-based access control with permission filtering in the backend implementation. Customers can retrieve status history only for orders they placed (validated by matching shopping_mall_customer_id). Sellers can retrieve status history for orders containing their products (validated by matching shopping_mall_seller_id). Admins have unrestricted access to view status history for any order across the platform for oversight and dispute resolution purposes. Authorization validation occurs at the provider function level, ensuring each user type sees only the data they are permitted to access.\n\nThe request body supports advanced filtering capabilities to narrow down the status history results. Filters include date range (from/to timestamps), specific status values (to find transitions to particular states like 'shipped' or 'delivered'), actor types (customer-initiated, seller-initiated, admin-initiated, system-generated), and change reasons. These filters enable efficient retrieval of relevant status events without overwhelming users with complete histories for long-lived orders.\n\nPagination is implemented to handle orders with extensive status histories efficiently. The response includes standard pagination metadata (total count, page number, page size, has next page) along with the sorted status history records. Results are ordered by created_at timestamp in descending order (most recent changes first) by default, providing immediate visibility into the latest order state transitions.\n\nThis operation integrates with the order status lifecycle defined in the Order Management and Tracking requirements document. It provides read access to the append-only audit trail that tracks all order state transitions according to the valid status transition rules (pending_payment → payment_confirmed → processing → shipped → in_transit → out_for_delivery → delivered → completed, with possible cancellation and refund branches).\n\nThe status history data includes both user-initiated actions (customer cancellation requests, seller shipment updates) and system-generated events (automatic payment confirmation, carrier tracking updates, auto-completion after 7 days). The is_system_generated flag distinguishes between manual and automated status changes, enabling analysis of order workflow automation effectiveness.\n\nRelated operations include retrieving order details, updating order status (seller and admin operations), and processing cancellations or refunds. This endpoint provides the temporal dimension of order data, complementing the current order state with complete historical context.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose status history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria for filtering order status history including date range, status values, actor types, and pagination parameters","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status change records with complete audit information including timestamps, actors, status transitions, reasons, and notes","typeName":"IPageIShoppingMallOrderStatusHistory"},"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its status history can be retrieved. The order creation endpoint creates the initial order record that subsequent status transitions will be tracked against."}],"accessor":["shoppingMall","orders","statusHistory","index"]},{"specification":"This operation retrieves a filtered and paginated list of order items for a specific order. It operates on the shopping_mall_order_items table and allows searching, filtering, and sorting order line items within a single order context. The operation is useful for admin order management, detailed order analysis, and customer order detail views where individual line items need to be examined separately. It supports complex queries to find specific items within an order based on SKU, product name, quantity, price, and item status.","path":"/shoppingMall/orders/{orderId}/items","method":"patch","summary":"Retrieve filtered list of order items for a specific order","description":"Retrieve a filtered and paginated list of order items (line items) for a specific order identified by orderId. This operation provides advanced search capabilities for examining individual line items within an order context, supporting filtering by SKU, product name, price range, quantity, and item status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Results can be sorted by creation date, product name, quantity, unit price, or item status in ascending or descending order.\n\nThis operation is particularly valuable for admin order management dashboards where detailed analysis of order composition is needed, seller fulfillment workflows where individual item statuses must be tracked, and customer order detail views showing itemized purchase history. It enables granular inspection of order contents beyond simple order totals.\n\nSecurity considerations include role-based access control ensuring customers can only view their own order items, sellers can view items from orders containing their products, and admins have unrestricted access to all order items. The operation respects the order ownership hierarchy defined in the shopping_mall_orders table.\n\nThe response includes complete order item information from the shopping_mall_order_items table including product_name, variant_attributes, product_image_url, quantity, unit_price, and item_status. This provides rich context for understanding the order composition and individual item lifecycle within the fulfillment process.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose items are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering order items","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated list of order items matching the search criteria","typeName":"IPageIShoppingMallOrderItem"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its items can be retrieved and analyzed"}],"accessor":["shoppingMall","orders","items","index"]},{"specification":"This operation retrieves a filtered and paginated list of shipments across the platform. It operates on the shopping_mall_shipments table and supports complex queries to find shipments based on various criteria including carrier name, tracking number, shipping method, shipment status, and date ranges. The operation is essential for seller fulfillment management, admin logistics oversight, and customer shipment tracking workflows.","path":"/shoppingMall/shipments","method":"patch","summary":"Search and retrieve filtered list of shipments","description":"Retrieve a filtered and paginated list of shipments from the shopping_mall_shipments table with advanced search capabilities for finding shipments based on multiple criteria including carrier name, tracking number, shipping method, shipment status, and date ranges.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Shipments can be sorted by shipped_at date, estimated_delivery_date, actual_delivery_date, shipment_status, or carrier_name in ascending or descending order to facilitate efficient logistics management.\n\nSecurity considerations include role-based access control ensuring sellers can only view shipments they created for their orders, customers can view shipments for their orders, and admins have unrestricted access to all platform shipments. The operation enforces data access boundaries based on the authenticated user's role and ownership relationships defined in the shopping_mall_orders and shopping_mall_sellers tables.\n\nThis operation integrates with the shipping and fulfillment workflow defined in the order management requirements, providing visibility into the current state of all shipments across the platform. It enables sellers to manage their fulfillment pipeline, admins to monitor logistics performance, and supports operational dashboards displaying shipment statistics and delivery timelines.\n\nThe response includes complete shipment information from the shopping_mall_shipments table including carrier_name, tracking_number, shipping_method, shipment_status, shipped_at, estimated_delivery_date, actual_delivery_date, and delivery_signature. This provides comprehensive tracking data for logistics coordination and customer communication about delivery expectations.\n\nRelated operations that might be used together include order retrieval endpoints to view the associated order details, order status history to understand the complete order lifecycle, and seller order management endpoints for fulfillment workflows.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for shipment retrieval","typeName":"IShoppingMallShipment.IRequest"},"responseBody":{"description":"Paginated list of shipments matching the search criteria with tracking details","typeName":"IPageIShoppingMallShipment"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/shipments","method":"post"},"description":"Shipment records must be created before they can be searched and retrieved"}],"accessor":["shoppingMall","shipments","index"]},{"specification":"This operation retrieves detailed shipping information for a specific shipment by its unique identifier. It operates on the shopping_mall_shipments table from the Prisma schema and returns complete shipment details including carrier information, tracking number, shipment status, delivery estimates, and timeline data. This endpoint is used by customers to view detailed tracking information for their order shipments, by sellers to review shipment details they created, and by admins to oversee all platform shipments.","path":"/shoppingMall/shipments/{shipmentId}","method":"get","summary":"Retrieve detailed shipment information by shipment ID","description":"Retrieve comprehensive shipping and tracking information for a specific shipment identified by the shipment ID. This operation provides complete visibility into the shipment lifecycle including carrier details, tracking numbers, current status, estimated and actual delivery dates, and delivery confirmation information.\n\nThe operation accesses the shopping_mall_shipments table in the Prisma schema and returns all shipment attributes including the carrier name, tracking number, shipping method (standard, express, overnight, free_shipping), current shipment status (label_created, picked_up, in_transit, out_for_delivery, delivered, exception, failed_delivery), and complete timeline information with shipped date, estimated delivery date, and actual delivery date when available.\n\nSecurity considerations include role-based access control to ensure customers can only view shipments for their own orders, sellers can view shipments they created for their products, and admins have full visibility across all platform shipments. The endpoint validates that the requested shipment exists and that the requesting user has permission to access the shipment information based on their role and relationship to the associated order.\n\nThis operation integrates with the order management system as shipments are directly linked to orders through the shopping_mall_order_id foreign key. The shipment data includes the seller who created the shipment record via the created_by_seller_id relationship, enabling proper attribution and seller-specific filtering.\n\nExpected behavior includes returning the complete shipment record with all fields from the shopping_mall_shipments table including id, shopping_mall_order_id, created_by_seller_id, carrier_name, tracking_number, shipping_method, shipment_status, shipped_at, estimated_delivery_date, actual_delivery_date, delivery_signature, created_at, and updated_at timestamps. The response enables customers to track their packages, sellers to verify shipping information they submitted, and admins to monitor shipment processing across the platform.","parameters":[{"name":"shipmentId","description":"Unique identifier of the target shipment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete shipment details including carrier information, tracking number, status, and delivery timeline","typeName":"IShoppingMallShipment"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/shipments","method":"post"},"description":"Shipment must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","shipments","at"]},{"specification":"This operation creates a new shipment record when a seller marks an order as shipped and provides tracking information. It operates on the shopping_mall_shipments table from the Prisma schema and captures all necessary shipping details including carrier name, tracking number, shipping method, and initial shipment status. This endpoint is invoked by sellers through their order management dashboard when they hand over packages to shipping carriers, enabling order tracking for customers.","path":"/shoppingMall/seller/shipments","method":"post","summary":"Create a new shipment record with tracking information","description":"Create a new shipment record to track package delivery when a seller marks an order as shipped. This operation is a critical step in the order fulfillment workflow, transitioning orders from the preparing_shipment state to the shipped state and initiating customer tracking capabilities.\n\nThe operation creates a record in the shopping_mall_shipments table with all required shipment information including the associated order ID, the seller creating the shipment, carrier name, tracking number, shipping method, initial shipment status, and shipped timestamp. The shipment record enables real-time tracking updates from carrier APIs and provides customers with delivery visibility.\n\nSecurity considerations include strict authorization enforcement to ensure only the seller who owns the order can create shipment records for that order. The system validates that the requesting seller has permission to fulfill the specified order by checking the order's shopping_mall_seller_id matches the authenticated seller's ID. Admins can create shipments for any order as part of their platform oversight capabilities.\n\nBusiness logic validation includes verifying that the order exists and is in an appropriate state for shipping (typically confirmed or preparing_shipment status). The operation validates the tracking number format for the selected carrier to ensure customers receive valid tracking links. The shipping method provided must match one of the standard shipping methods (standard, express, overnight, free_shipping) configured for the platform.\n\nRelationship to underlying database entities includes the shopping_mall_order_id foreign key linking the shipment to the specific order being fulfilled, and the created_by_seller_id foreign key identifying which seller created the shipment record for audit trail and seller performance tracking. The shipment record captures the shipping method selected at checkout and the carrier_name chosen by the seller for package transportation.\n\nExpected behavior includes creating the shipment record with initial shipment_status set to 'label_created' or 'picked_up', capturing the shipped_at timestamp as the current time, setting the estimated_delivery_date based on the shipping method and carrier estimates, and returning the created shipment record with its generated unique ID. The operation triggers automatic order status updates changing the order status to 'shipped' and sends shipment notifications to customers with tracking information within 5 minutes as specified in the order management business rules.","parameters":[],"requestBody":{"description":"Shipment creation data including order reference, carrier information, tracking number, shipping method, and shipment status","typeName":"IShoppingMallShipment.ICreate"},"responseBody":{"description":"Created shipment record with unique shipment ID and complete tracking information","typeName":"IShoppingMallShipment"},"authorizationRole":"seller","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a shipment can be created for that order"}],"accessor":["shoppingMall","seller","shipments","create"]},{"specification":"This operation updates shipping information for a specific shipment in the order fulfillment process. It operates on the shopping_mall_shipments table and is used by sellers to modify tracking details, shipping status, estimated delivery dates, and other shipment-related information after the shipment has been created. The operation allows sellers to correct tracking numbers, update carrier information, or adjust shipment status as the package moves through the delivery lifecycle.","path":"/shoppingMall/seller/shipments/{shipmentId}","method":"put","summary":"Update shipping information and status for a specific shipment","description":"Updates comprehensive shipping and tracking information for an existing shipment record in the shopping_mall_shipments table. This operation enables sellers to modify shipment details after initial creation, including correcting tracking numbers, updating carrier information, changing shipment status, and adjusting estimated delivery dates.\n\nSellers use this endpoint to maintain accurate shipping information throughout the delivery lifecycle. Common use cases include correcting initially entered tracking numbers, updating shipment status based on carrier notifications, adding delivery signatures or proof of delivery, and revising estimated delivery dates when carrier schedules change.\n\nSecurity considerations ensure that only the seller who created the shipment (matching created_by_seller_id) can update it. Admins have override capabilities for dispute resolution and customer service escalations. The operation validates that the shipment exists, belongs to the requesting seller, and that status transitions follow valid shipment lifecycle rules.\n\nThe update operation validates tracking number formats for the specified carrier, ensures shipment status transitions are logical (e.g., cannot move from 'delivered' back to 'in_transit'), and maintains audit trail by updating the updated_at timestamp. All shipment updates trigger notifications to customers when significant status changes occur, such as status changes to 'out_for_delivery' or 'delivered'.\n\nThis operation integrates with the order management system by updating corresponding order status when shipment status changes. For example, marking a shipment as 'delivered' triggers the order status to update to 'delivered' as well, maintaining consistency across the order fulfillment workflow.","name":"update","parameters":[{"name":"shipmentId","description":"Unique identifier of the shipment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated shipment information including tracking details, status, and delivery estimates","typeName":"IShoppingMallShipment.IUpdate"},"responseBody":{"description":"Complete updated shipment record with current tracking information and delivery status","typeName":"IShoppingMallShipment"},"authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/shipments","method":"post"},"description":"Shipment must be created before it can be updated with tracking details and status changes"}],"accessor":["shoppingMall","seller","shipments","update"]},{"specification":"This operation retrieves a paginated, filtered list of order cancellation records from the shopping_mall_cancellations table. It supports complex search criteria including cancellation status, requester type (customer, seller, admin), date ranges, refund processing status, and approval workflow states. The operation is specifically for customers to search their own cancellation history.","path":"/shoppingMall/customer/cancellations","method":"patch","summary":"Search and retrieve filtered list of order cancellation records for customers","description":"Retrieves a comprehensive, paginated list of order cancellation records from the shopping_mall_cancellations table with advanced filtering, searching, and sorting capabilities. This customer-specific endpoint enables customers to search their own cancellation history based on multiple criteria including cancellation status, approval workflow state, refund processing status, and date ranges.\n\nCustomers use this endpoint to view their own cancellation requests and track approval status and refund processing. The operation automatically filters results to show only cancellations where the authenticated customer is the requester (requester_customer_id matches the authenticated user), ensuring data privacy and security.\n\nThe operation supports sophisticated filtering including cancellation status (pending_approval, approved, rejected, completed), date range queries for requested_at timestamp, refund processing status, and approval workflow states. Sorting options include most recent cancellations first, highest refund amounts, and cancellations approaching approval deadlines.\n\nSecurity and authorization are enforced through role-based access control. Customers can only view their own cancellation records, ensuring proper data isolation. The operation returns appropriate error responses for unauthorized access attempts.\n\nThe response includes complete cancellation details: order information, cancellation reason and notes, refund amounts, processing status, and complete timeline from request through approval to refund completion. Pagination enables efficient handling of large result sets.","name":"index","parameters":[],"requestBody":{"description":"Search criteria, filters, sorting options, and pagination parameters for cancellation queries","typeName":"IShoppingMallCancellation.IRequest"},"responseBody":{"description":"Paginated list of cancellation records matching search criteria with request metadata","typeName":"IPageIShoppingMallCancellation"},"authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before cancellation records can exist for searching"}],"accessor":["shoppingMall","customer","cancellations","index"]},{"specification":"This operation retrieves a paginated, filtered list of order cancellation records from the shopping_mall_cancellations table. It supports complex search criteria including cancellation status, requester type, date ranges, refund processing status, and approval workflow states. The operation is specifically for sellers to review cancellation requests for their orders.","path":"/shoppingMall/seller/cancellations","method":"patch","summary":"Search and retrieve filtered list of order cancellation records for sellers","description":"Retrieves a comprehensive, paginated list of order cancellation records from the shopping_mall_cancellations table with advanced filtering, searching, and sorting capabilities. This seller-specific endpoint enables sellers to review cancellation requests for orders containing their products.\n\nSellers use this endpoint to review cancellation requests for orders containing their products. The operation filters to show cancellations where the seller is either the requester (seller-initiated cancellations due to stock issues) or the approver (customer-requested cancellations requiring seller approval). This enables sellers to manage pending cancellation requests within the required 24-hour response window and track refund processing status.\n\nThe operation supports sophisticated filtering including cancellation status (pending_approval, approved, rejected, completed), date range queries for requested_at timestamp, refund processing status, and approval workflow states. Sorting options include most recent cancellations first, highest refund amounts, and cancellations approaching approval deadlines. Sellers can prioritize cancellations requiring their immediate action.\n\nSecurity and authorization ensure that sellers only see cancellations related to their products, maintaining data privacy across the multi-vendor marketplace. The operation validates seller identity and filters results appropriately.\n\nThe response includes complete cancellation details: order information, requester and approver identities, cancellation reason and notes, refund amounts, processing status, and complete timeline from request through approval to refund completion. Pagination enables efficient handling of large result sets, critical for sellers managing high volumes of cancellations.","name":"index","parameters":[],"requestBody":{"description":"Search criteria, filters, sorting options, and pagination parameters for cancellation queries","typeName":"IShoppingMallCancellation.IRequest"},"responseBody":{"description":"Paginated list of cancellation records matching search criteria with request metadata","typeName":"IPageIShoppingMallCancellation"},"authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before cancellation requests can exist for sellers to review"}],"accessor":["shoppingMall","seller","cancellations","index"]},{"specification":"This operation retrieves a paginated, filtered list of order cancellation records from the shopping_mall_cancellations table. It supports complex search criteria including cancellation status, requester type, date ranges, refund processing status, and approval workflow states. The operation is specifically for admins to oversee all platform cancellations for dispute resolution and analytics.","path":"/shoppingMall/admin/cancellations","method":"patch","summary":"Search and retrieve filtered list of order cancellation records for admins","description":"Retrieves a comprehensive, paginated list of order cancellation records from the shopping_mall_cancellations table with advanced filtering, searching, and sorting capabilities. This admin-specific endpoint enables platform administrators to oversee all cancellations across the marketplace for dispute resolution, fraud detection, and performance analytics.\n\nAdmins use this endpoint to oversee all platform cancellations for dispute resolution, fraud detection, and performance analytics. Admins can filter by any criteria to identify patterns such as high cancellation rates from specific sellers, common cancellation reasons, or cancellations requiring administrative intervention. The comprehensive view supports platform quality monitoring and seller performance evaluation.\n\nThe operation supports sophisticated filtering including cancellation status (pending_approval, approved, rejected, completed), requester type filtering (customer, seller, admin), date range queries for requested_at timestamp, refund processing status, and approval workflow states. Sorting options include most recent cancellations first, highest refund amounts, and cancellations approaching approval deadlines.\n\nSecurity and authorization provide admins with unrestricted access to all cancellation data across all sellers and customers. This comprehensive visibility enables effective platform oversight and dispute resolution.\n\nThe response includes complete cancellation details: order information, requester and approver identities, cancellation reason and notes, refund amounts, processing status, and complete timeline from request through approval to refund completion. Pagination enables efficient handling of large result sets across the entire platform.","name":"index","parameters":[],"requestBody":{"description":"Search criteria, filters, sorting options, and pagination parameters for cancellation queries","typeName":"IShoppingMallCancellation.IRequest"},"responseBody":{"description":"Paginated list of cancellation records matching search criteria with request metadata","typeName":"IPageIShoppingMallCancellation"},"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before cancellation requests can exist for admins to oversee"}],"accessor":["shoppingMall","admin","cancellations","index"]},{"specification":"This operation retrieves detailed information about a specific order cancellation request by its unique identifier. It operates on the shopping_mall_cancellations table from the Prisma schema and provides complete cancellation details including requester information, approval status, refund processing status, and cancellation workflow state. This endpoint is essential for customers, sellers, and admins to track the progress of cancellation requests and understand the current state of the cancellation approval workflow.","path":"/shoppingMall/cancellations/{cancellationId}","method":"get","summary":"Retrieve detailed information for a specific order cancellation request","description":"Retrieve comprehensive details for a specific order cancellation request identified by its unique cancellation ID. This operation provides complete visibility into the cancellation workflow including the requester (customer, seller, or admin), the order being cancelled, cancellation reason and notes, approval status, refund amount, and processing timestamps.\n\nThe cancellation detail includes information about who requested the cancellation and who approved it (if applicable), enabling full transparency in the cancellation approval workflow. The response shows the current cancellation_status which can be pending_approval, approved, rejected, or completed, allowing users to understand where the cancellation request stands in the processing pipeline.\n\nThis endpoint is accessible by multiple user roles with different permission levels. Customers can view cancellations for their own orders to track the status of their cancellation requests. Sellers can view cancellations for orders containing their products to review and respond to cancellation requests. Admins have full access to view any cancellation request across the platform for oversight and dispute resolution purposes.\n\nThe operation returns denormalized order information including order_number and order details to provide complete context without requiring additional API calls. Refund processing status is included through the refund_processed boolean flag and refund_amount field, showing whether the financial reversal has been completed.\n\nSecurity considerations include role-based authorization ensuring customers can only access cancellations for their own orders, sellers can only access cancellations for orders involving their products, and admins have unrestricted access. The endpoint validates that the cancellation ID exists and returns appropriate error responses for invalid or inaccessible cancellation requests.\n\nThis operation integrates with the shopping_mall_orders table to retrieve order context, and references the shopping_mall_customers, shopping_mall_sellers, and shopping_mall_admins tables through the polymorphic requester and approver relationships documented in the Prisma schema.","parameters":[{"name":"cancellationId","description":"Unique identifier of the target cancellation request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed cancellation request information including workflow status, requester and approver details, refund processing status, and associated order context","typeName":"IShoppingMallCancellation"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be cancelled, and a cancellation request must exist to retrieve cancellation details"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/cancel","method":"post"},"description":"Cancellation request must be created before cancellation details can be retrieved by cancellationId"}],"accessor":["shoppingMall","cancellations","at"]},{"specification":"This operation retrieves a filtered and paginated list of refund requests across the platform or for specific users. It operates on the shopping_mall_refund_requests table and supports complex search criteria including filtering by status, date ranges, customer, seller, order, and refund amount. The endpoint is designed to serve multiple user roles: customers viewing their own refund requests, sellers managing refund requests for their products, and admins overseeing all platform refund requests. The operation uses PATCH method to accommodate complex request parameters including pagination, sorting, and multiple filter criteria through a structured request body.","path":"/shoppingMall/refundRequests","method":"patch","summary":"Search and retrieve filtered, paginated list of refund requests with advanced filtering capabilities","description":"Retrieve a comprehensive, paginated list of refund requests with advanced filtering, searching, and sorting capabilities. This operation provides role-based access to refund request data, returning different result sets based on the authenticated user's role and permissions.\n\nFor customers, this endpoint returns refund requests associated with their own orders, enabling them to track the status of their refund requests from submission through approval and completion. Customers can filter by refund status (pending_review, pending_seller_response, approved, rejected, processing, completed) and date ranges to find specific refund requests or monitor active refunds.\n\nFor sellers, this endpoint returns refund requests for orders containing their products, allowing sellers to manage and respond to customer refund requests efficiently. Sellers can filter by refund status to prioritize pending requests requiring their response within the 3-business-day deadline. The seller_response_deadline field enables sellers to identify urgent refund requests approaching auto-approval.\n\nFor admins, this endpoint provides unrestricted access to all platform refund requests across all customers and sellers, supporting platform-wide refund management, dispute resolution, and quality monitoring. Admins can filter by customer, seller, order, refund status, date ranges, and refund amounts to identify patterns, resolve disputes, or investigate high-value refund requests requiring admin approval.\n\nThe operation supports comprehensive filtering by refund_status (pending_review, approved, rejected, etc.), date ranges for requested_at and reviewed_at timestamps, customer and seller identifiers, order identifiers, refund amount ranges, return requirements, and refund reasons. Multiple filters can be combined to create precise queries for specific refund request subsets.\n\nSorting options include requested_at (newest or oldest first), refund_amount (highest or lowest first), refund_status, and seller_response_deadline (to prioritize urgent requests). The default sort order is requested_at descending (newest requests first) to surface recent refund submissions.\n\nPagination is implemented using limit and offset parameters, returning result sets with total count for building pagination controls. The response includes complete refund request details with denormalized order information, customer and seller references, refund amounts (requested and approved), status tracking, and timeline information (requested_at, reviewed_at, completed_at).\n\nSecurity and authorization are enforced at the business logic layer, automatically filtering results based on the authenticated user's role. Customers see only their own refund requests, sellers see refund requests for their products, and admins see all requests. The endpoint validates filter parameters and returns appropriate error responses for invalid filter combinations or missing required parameters.\n\nThis operation is essential for the refund workflow management described in the business requirements, supporting the 3-business-day seller response deadline, auto-approval mechanism, admin escalation process, and refund lifecycle tracking from request through completion. It integrates with the shopping_mall_orders, shopping_mall_customers, shopping_mall_sellers, and shopping_mall_admins tables through the Prisma schema relationships.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination settings for refund request retrieval","typeName":"IShoppingMallRefundRequest.IRequest"},"responseBody":{"description":"Paginated list of refund request records matching the search criteria with complete refund details, order context, and workflow status","typeName":"IPageIShoppingMallRefundRequest"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created and delivered before refund requests can be submitted and retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before it can be retrieved in the refund requests list"}],"accessor":["shoppingMall","refundRequests","index"]},{"specification":"This operation retrieves detailed information about a specific refund request by its unique identifier. It operates on the shopping_mall_refund_requests table from the Prisma schema and provides complete refund request details including customer information, order details, requested and approved refund amounts, review status, seller/admin responses, return tracking information, and the complete timeline of the refund workflow. The operation validates that the refund request exists and returns comprehensive information needed for customers to track their refund status, sellers to review and respond to requests, and admins to manage the refund approval process. This endpoint supports role-based access where customers can view their own refund requests, sellers can view refund requests for orders containing their products, and admins can view all refund requests across the platform.","path":"/shoppingMall/customer/refundRequests/{refundRequestId}","method":"get","summary":"Retrieve detailed information about a specific refund request","description":"Retrieves comprehensive details about a specific refund request identified by its unique ID from the shopping_mall_refund_requests table. This operation provides complete visibility into the refund workflow including the original order information, customer's refund reason and description, requested refund amount, approved amount (if reviewed), current refund status, return requirements, and tracking information.\n\nThe refund request detail includes information about the requesting customer, the associated order, the seller responsible for reviewing the request, and any admin who may have overridden the decision. The response contains the complete refund timeline with key timestamps including when the request was submitted, the seller response deadline (3 business days from submission with auto-approval if missed), when the request was reviewed, and when the refund was completed.\n\nSecurity considerations include role-based access control where customers can only view their own refund requests, sellers can view refund requests for orders containing their products, and admins have full visibility across all refund requests. The operation validates the refund request ID and ensures the requesting user has appropriate permissions to access the refund request details.\n\nThis operation integrates with the order management system to provide order context, the payment system to show refund processing status, and the review workflow to display seller and admin responses. The refund request data helps customers track their refund progress, enables sellers to make informed approval decisions, and allows admins to resolve disputes and override decisions when necessary.\n\nRelated operations that might be used together include retrieving the associated order details, viewing the order items that are being refunded, and accessing the customer's refund request history for pattern analysis.","parameters":[{"name":"refundRequestId","description":"Unique identifier of the target refund request to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed refund request information including workflow status, amounts, timestamps, and associated entities","typeName":"IShoppingMallRefundRequest"},"authorizationRole":"customer","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a refund request can be submitted for that order"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before it can be retrieved by its ID"}],"accessor":["shoppingMall","customer","refundRequests","at"]},{"specification":"This operation retrieves detailed information about a specific refund request by its unique identifier. It operates on the shopping_mall_refund_requests table from the Prisma schema and provides complete refund request details including customer information, order details, requested and approved refund amounts, review status, seller/admin responses, return tracking information, and the complete timeline of the refund workflow. The operation validates that the refund request exists and returns comprehensive information needed for customers to track their refund status, sellers to review and respond to requests, and admins to manage the refund approval process. This endpoint supports role-based access where customers can view their own refund requests, sellers can view refund requests for orders containing their products, and admins can view all refund requests across the platform.","path":"/shoppingMall/seller/refundRequests/{refundRequestId}","method":"get","summary":"Retrieve detailed information about a specific refund request","description":"Retrieves comprehensive details about a specific refund request identified by its unique ID from the shopping_mall_refund_requests table. This operation provides complete visibility into the refund workflow including the original order information, customer's refund reason and description, requested refund amount, approved amount (if reviewed), current refund status, return requirements, and tracking information.\n\nThe refund request detail includes information about the requesting customer, the associated order, the seller responsible for reviewing the request, and any admin who may have overridden the decision. The response contains the complete refund timeline with key timestamps including when the request was submitted, the seller response deadline (3 business days from submission with auto-approval if missed), when the request was reviewed, and when the refund was completed.\n\nSecurity considerations include role-based access control where customers can only view their own refund requests, sellers can view refund requests for orders containing their products, and admins have full visibility across all refund requests. The operation validates the refund request ID and ensures the requesting user has appropriate permissions to access the refund request details.\n\nThis operation integrates with the order management system to provide order context, the payment system to show refund processing status, and the review workflow to display seller and admin responses. The refund request data helps customers track their refund progress, enables sellers to make informed approval decisions, and allows admins to resolve disputes and override decisions when necessary.\n\nRelated operations that might be used together include retrieving the associated order details, viewing the order items that are being refunded, and accessing the customer's refund request history for pattern analysis.","parameters":[{"name":"refundRequestId","description":"Unique identifier of the target refund request to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed refund request information including workflow status, amounts, timestamps, and associated entities","typeName":"IShoppingMallRefundRequest"},"authorizationRole":"seller","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a refund request can be submitted for that order"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before sellers can view and respond to it"}],"accessor":["shoppingMall","seller","refundRequests","at"]},{"specification":"This operation retrieves detailed information about a specific refund request by its unique identifier. It operates on the shopping_mall_refund_requests table from the Prisma schema and provides complete refund request details including customer information, order details, requested and approved refund amounts, review status, seller/admin responses, return tracking information, and the complete timeline of the refund workflow. The operation validates that the refund request exists and returns comprehensive information needed for customers to track their refund status, sellers to review and respond to requests, and admins to manage the refund approval process. This endpoint supports role-based access where customers can view their own refund requests, sellers can view refund requests for orders containing their products, and admins can view all refund requests across the platform.","path":"/shoppingMall/admin/refundRequests/{refundRequestId}","method":"get","summary":"Retrieve detailed information about a specific refund request","description":"Retrieves comprehensive details about a specific refund request identified by its unique ID from the shopping_mall_refund_requests table. This operation provides complete visibility into the refund workflow including the original order information, customer's refund reason and description, requested refund amount, approved amount (if reviewed), current refund status, return requirements, and tracking information.\n\nThe refund request detail includes information about the requesting customer, the associated order, the seller responsible for reviewing the request, and any admin who may have overridden the decision. The response contains the complete refund timeline with key timestamps including when the request was submitted, the seller response deadline (3 business days from submission with auto-approval if missed), when the request was reviewed, and when the refund was completed.\n\nSecurity considerations include role-based access control where customers can only view their own refund requests, sellers can view refund requests for orders containing their products, and admins have full visibility across all refund requests. The operation validates the refund request ID and ensures the requesting user has appropriate permissions to access the refund request details.\n\nThis operation integrates with the order management system to provide order context, the payment system to show refund processing status, and the review workflow to display seller and admin responses. The refund request data helps customers track their refund progress, enables sellers to make informed approval decisions, and allows admins to resolve disputes and override decisions when necessary.\n\nRelated operations that might be used together include retrieving the associated order details, viewing the order items that are being refunded, and accessing the customer's refund request history for pattern analysis.","parameters":[{"name":"refundRequestId","description":"Unique identifier of the target refund request to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed refund request information including workflow status, amounts, timestamps, and associated entities","typeName":"IShoppingMallRefundRequest"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before it can be retrieved. The refund request is created when a customer submits a refund request for a delivered order."}],"accessor":["shoppingMall","admin","refundRequests","at"]},{"specification":"This operation updates the status and details of a specific refund request through the approval workflow. It operates on the shopping_mall_refund_requests table and enables sellers to approve or reject customer refund requests, admins to override decisions and make final determinations, and the system to record review notes and approved refund amounts. The operation validates that the refund request exists, is in an appropriate status for updates, and that the acting user has permission to modify the request. Sellers can respond to refund requests for orders containing their products within the 3 business day deadline. Admins can update any refund request at any stage to resolve disputes. The update workflow supports full refund approval, partial refund approval with justification, rejection with detailed reasons, and return requirement specifications. This endpoint enforces business rules including seller response deadlines with auto-approval, admin override capabilities, and refund amount validation against original order totals.","path":"/shoppingMall/seller/refundRequests/{refundRequestId}","method":"put","summary":"Update refund request status, review decision, and approval details","description":"Updates the workflow status and review details of an existing refund request in the shopping_mall_refund_requests table. This operation enables the refund approval workflow where sellers review customer refund requests and admins resolve disputes or override decisions. The update supports multiple actions including approving full refunds, offering partial refunds with justification, rejecting requests with detailed reasons, and specifying return requirements and tracking.\n\nSellers receive refund requests for orders containing their products and have 3 business days to respond (recorded in seller_response_deadline). They can approve the full requested amount, offer a partial refund with explanation in review_notes, or reject the request with justification. When sellers approve refunds, they indicate whether product return is required and provide return shipping instructions. If sellers fail to respond within the deadline, the system automatically approves the refund request per business rules.\n\nAdmins can override any seller decision and make final binding determinations on disputed refund requests. When customers reject seller partial refund offers or appeal rejected requests, the case escalates to admin review. Admins can approve full or partial refunds, mandate returns, or make final rejection decisions. Admin decisions are recorded with reviewer_admin_id and include detailed review_notes explaining the rationale.\n\nThe operation validates that the refund_amount_approved does not exceed the original refund_amount_requested and that the refund_status transitions are valid (pending_review -> approved/rejected, rejected -> under_admin_review -> approved/rejected). When refund status changes to approved, the operation triggers the payment refund processing workflow. If return_required is true, the customer must provide return_tracking_number before refund payment is processed.\n\nSecurity and permission validation ensures that only the seller of the product or an admin can update the refund request. Customers cannot directly update refund requests after submission but can provide additional information through support channels. All updates are logged in the audit trail with timestamp and actor identification.\n\nIntegration with the payment system initiates refund transactions when requests are approved. Integration with inventory management restores stock when returned products are received and confirmed. Integration with the notification system sends status updates to customers at each workflow stage.\n\nRelated operations include retrieving refund request details to inform update decisions, viewing the associated order to understand purchase context, accessing customer refund history to identify patterns, and creating refund transaction records when requests are approved.","parameters":[{"name":"refundRequestId","description":"Unique identifier of the target refund request to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Refund request update information including review decision, approved amount, status changes, return requirements, and review notes","typeName":"IShoppingMallRefundRequest.IUpdate"},"responseBody":{"description":"Updated refund request information reflecting the new workflow status, approval decision, and review details","typeName":"IShoppingMallRefundRequest"},"authorizationRole":"seller","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before it can be updated. The refund request is created when a customer submits a refund request for a delivered order, establishing the refund workflow that sellers can then review and respond to."}],"accessor":["shoppingMall","seller","refundRequests","update"]},{"specification":"This operation updates the status and details of a specific refund request through the approval workflow. It operates on the shopping_mall_refund_requests table and enables sellers to approve or reject customer refund requests, admins to override decisions and make final determinations, and the system to record review notes and approved refund amounts. The operation validates that the refund request exists, is in an appropriate status for updates, and that the acting user has permission to modify the request. Sellers can respond to refund requests for orders containing their products within the 3 business day deadline. Admins can update any refund request at any stage to resolve disputes. The update workflow supports full refund approval, partial refund approval with justification, rejection with detailed reasons, and return requirement specifications. This endpoint enforces business rules including seller response deadlines with auto-approval, admin override capabilities, and refund amount validation against original order totals.","path":"/shoppingMall/admin/refundRequests/{refundRequestId}","method":"put","summary":"Update refund request status, review decision, and approval details","description":"Updates the workflow status and review details of an existing refund request in the shopping_mall_refund_requests table. This operation enables the refund approval workflow where sellers review customer refund requests and admins resolve disputes or override decisions. The update supports multiple actions including approving full refunds, offering partial refunds with justification, rejecting requests with detailed reasons, and specifying return requirements and tracking.\n\nSellers receive refund requests for orders containing their products and have 3 business days to respond (recorded in seller_response_deadline). They can approve the full requested amount, offer a partial refund with explanation in review_notes, or reject the request with justification. When sellers approve refunds, they indicate whether product return is required and provide return shipping instructions. If sellers fail to respond within the deadline, the system automatically approves the refund request per business rules.\n\nAdmins can override any seller decision and make final binding determinations on disputed refund requests. When customers reject seller partial refund offers or appeal rejected requests, the case escalates to admin review. Admins can approve full or partial refunds, mandate returns, or make final rejection decisions. Admin decisions are recorded with reviewer_admin_id and include detailed review_notes explaining the rationale.\n\nThe operation validates that the refund_amount_approved does not exceed the original refund_amount_requested and that the refund_status transitions are valid (pending_review -> approved/rejected, rejected -> under_admin_review -> approved/rejected). When refund status changes to approved, the operation triggers the payment refund processing workflow. If return_required is true, the customer must provide return_tracking_number before refund payment is processed.\n\nSecurity and permission validation ensures that only the seller of the product or an admin can update the refund request. Customers cannot directly update refund requests after submission but can provide additional information through support channels. All updates are logged in the audit trail with timestamp and actor identification.\n\nIntegration with the payment system initiates refund transactions when requests are approved. Integration with inventory management restores stock when returned products are received and confirmed. Integration with the notification system sends status updates to customers at each workflow stage.\n\nRelated operations include retrieving refund request details to inform update decisions, viewing the associated order to understand purchase context, accessing customer refund history to identify patterns, and creating refund transaction records when requests are approved.","parameters":[{"name":"refundRequestId","description":"Unique identifier of the target refund request to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Refund request update information including review decision, approved amount, status changes, return requirements, and review notes","typeName":"IShoppingMallRefundRequest.IUpdate"},"responseBody":{"description":"Updated refund request information reflecting the new workflow status, approval decision, and review details","typeName":"IShoppingMallRefundRequest"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before it can be updated. The refundRequestId in the path parameter must reference an existing refund request record created through the order refund submission endpoint."}],"accessor":["shoppingMall","admin","refundRequests","update"]},{"specification":"This operation retrieves a paginated and filtered list of payment transactions across the platform. It operates on the shopping_mall_payment_transactions table and provides comprehensive search, filtering, and sorting capabilities for payment transaction records. The operation supports filtering by customer, payment status, payment type, date ranges, transaction amounts, and payment gateway. This is essential for customers to view their payment history, for sellers to track payments for their orders, and for administrators to monitor platform-wide payment operations and reconcile financial records.","path":"/shoppingMall/paymentTransactions","method":"patch","summary":"Search and retrieve filtered, paginated payment transaction records","description":"Retrieve a comprehensive list of payment transactions from the shopping_mall_payment_transactions table with advanced filtering, searching, and sorting capabilities. This operation provides customers access to their payment history, enables administrators to monitor all platform payment operations, and supports financial reconciliation and audit requirements.\n\nThe payment transaction entity stores complete payment processing records including payment gateway details, transaction status tracking, payment method information, and authorization/capture timestamps. Each transaction represents a financial payment processed through integrated payment gateways (Stripe, PayPal, etc.) for specific customer orders.\n\nSecurity considerations include role-based filtering where customers can only view their own payment transactions, while administrators have access to all platform payment records. Payment information is returned in PCI-compliant format showing only last 4 digits of card numbers and tokenized payment references, never exposing full card numbers or sensitive payment credentials.\n\nThe request supports filtering by payment status (pending, authorized, captured, failed, cancelled, refunded), payment type (credit_card, debit_card, paypal, digital wallets), payment gateway provider, transaction date ranges, and amount ranges. Sorting options include transaction date, amount, and status for flexible data analysis and reporting.\n\nThis operation integrates with the shopping_mall_payment_transactions table which references shopping_mall_customers for transaction ownership and shopping_mall_payment_methods for saved payment instrument details. The response includes transaction metadata such as gateway transaction IDs, authorization timestamps, failure reasons, and billing address snapshots for comprehensive payment audit trails.\n\nRelated operations include retrieving individual transaction details, processing refunds through the refunds endpoints, and managing saved payment methods. This search endpoint is the primary interface for payment history access and financial reporting across the platform.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, pagination settings, and sorting options for payment transaction retrieval","typeName":"IShoppingMallPaymentTransaction.IRequest"},"responseBody":{"description":"Paginated list of payment transaction records matching the search criteria with summary information","typeName":"IPageIShoppingMallPaymentTransaction.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[],"accessor":["shoppingMall","paymentTransactions","index"]},{"specification":"This operation retrieves detailed information about a specific payment transaction identified by its unique transaction ID. It operates on the shopping_mall_payment_transactions table and returns complete transaction details including payment gateway information, authorization status, payment method details, billing information, and transaction timeline. This operation is essential for customers to review specific payment details, for administrators to investigate payment issues, and for support teams to resolve payment disputes and inquiries.","path":"/shoppingMall/paymentTransactions/{transactionId}","method":"get","summary":"Retrieve detailed information for a specific payment transaction by ID","description":"Retrieve complete detailed information about a specific payment transaction from the shopping_mall_payment_transactions table. This operation provides comprehensive transaction data including payment processing status, authorization details, capture timestamps, payment method information, billing address snapshot, and gateway response details.\n\nThe payment transaction entity represents a complete financial payment record processed through payment gateway integrations. Each transaction captures critical information for audit compliance, fraud prevention, and financial reconciliation including the payment gateway provider name, unique gateway transaction identifier, payment authorization and capture timestamps, and detailed failure information when payments do not succeed.\n\nSecurity considerations enforce strict access control where customers can only access their own payment transaction details, while administrators have unrestricted access to all transaction records for platform oversight and dispute resolution. All sensitive payment information is returned in PCI-compliant format, displaying only the last 4 digits of card numbers and tokenized references without exposing complete card numbers or CVV codes.\n\nThe response includes complete transaction lifecycle information with authorization timestamps, capture timestamps, failure timestamps and reasons if applicable, payment attempt number for retry tracking, and raw gateway response JSON for technical troubleshooting. The billing address snapshot preserves the billing information at time of transaction for audit and fraud detection purposes.\n\nThis operation integrates with the broader payment ecosystem by referencing the associated shopping_mall_customer who made the payment, the optional shopping_mall_payment_method if a saved payment instrument was used, and connects to potential shopping_mall_refunds if the transaction has been reversed. The transaction details enable comprehensive financial reporting, dispute investigation, and payment troubleshooting workflows.\n\nRelated operations include searching payment transactions through the index endpoint, processing refunds through the refunds API, and managing payment methods for customers. This detail endpoint serves as the authoritative source for complete payment transaction information required for customer service, financial reconciliation, and compliance auditing.","parameters":[{"name":"transactionId","description":"Unique identifier of the payment transaction to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed payment transaction information including gateway details, payment method, billing information, and transaction timeline","typeName":"IShoppingMallPaymentTransaction"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created to generate a payment transaction. Payment transactions are created during the order placement process when payment is processed through the payment gateway."}],"accessor":["shoppingMall","paymentTransactions","at"]},{"specification":"This operation retrieves a filtered and paginated list of saved payment methods for the authenticated customer. It operates on the shopping_mall_payment_methods table from the Prisma schema and supports comprehensive search, filtering, and sorting capabilities. The operation enables customers to view all their saved payment methods including credit cards, debit cards, and digital wallets with relevant display information such as last 4 digits, card brand, expiration status, and default designation. This is essential for customers to manage their saved payment methods and select payment options during checkout.","path":"/shoppingMall/customer/paymentMethods","method":"patch","summary":"Search and retrieve filtered list of customer's saved payment methods","description":"Retrieve a filtered and paginated list of saved payment methods for the authenticated customer from the system. This operation provides comprehensive search and filtering capabilities for customers to manage their saved payment instruments including credit cards, debit cards, digital wallets, and bank accounts.\n\nThe operation supports filtering by payment type (credit_card, debit_card, paypal, bank_account, digital_wallet), payment gateway provider, expiration status, default designation, and card brand. Customers can search by card last 4 digits, billing name, or nickname to quickly locate specific payment methods. Sorting options include creation date, last used date, card brand, and expiration date.\n\nSecurity considerations are paramount for this operation. Only tokenized payment data is transmitted - full card numbers are never exposed through the API. The operation returns only the payment methods belonging to the authenticated customer, with strict user ownership validation. All payment data access is logged for security auditing and PCI compliance monitoring.\n\nThis operation integrates with the shopping_mall_payment_methods table as defined in the Prisma schema, incorporating all available payment method fields including tokenized gateway references, card metadata, billing information, and expiration tracking. The response includes payment method summary information optimized for display in account settings and checkout payment selection interfaces.\n\nRelated API operations include retrieving individual payment method details (GET /paymentMethods/{methodId}), adding new payment methods during checkout or account management (POST /paymentMethods), updating payment method settings like default designation (PUT /paymentMethods/{methodId}), and removing saved payment methods (DELETE /paymentMethods/{methodId}). This search operation provides the entry point for customers to discover and manage their complete collection of saved payment instruments.\n\nPayment method data is sensitive financial information requiring HTTPS transmission, secure token storage, and compliance with PCI DSS standards. The operation validates customer authentication and session validity before returning any payment data. Expired payment methods are clearly indicated to prompt customers to update their information before attempting purchases.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, pagination settings, and sorting options for payment method retrieval","typeName":"IShoppingMallPaymentMethod.IRequest"},"responseBody":{"description":"Paginated list of customer's saved payment methods with summary information including card metadata, expiration status, and default designation","typeName":"IPageIShoppingMallPaymentMethod.ISummary"},"authorizationRole":"customer","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/paymentMethods","method":"post"},"description":"At least one payment method must be created before searching or filtering payment methods. The search operation requires existing payment method records to retrieve and display."}],"accessor":["shoppingMall","customer","paymentMethods","index"]},{"specification":"This operation retrieves detailed information for a specific saved payment method identified by methodId. It operates on the shopping_mall_payment_methods table and returns complete payment method details including tokenized gateway information, card metadata, billing address association, expiration status, and usage statistics. This operation enables customers to view full details of their saved payment methods and is used during checkout payment selection and account management workflows.","path":"/shoppingMall/customer/paymentMethods/{methodId}","method":"get","summary":"Retrieve detailed information for a specific saved payment method","description":"Retrieve complete details for a specific saved payment method identified by the methodId parameter. This operation returns comprehensive payment method information including payment type, gateway provider, tokenized payment data, card metadata (last 4 digits, brand, expiration), billing address association, default status, and expiration indicators.\n\nThe operation validates that the requested payment method belongs to the authenticated customer through strict ownership verification. Customers can only access their own payment methods - attempts to access other customers' payment methods result in authorization errors. This ownership validation is critical for protecting sensitive financial information and maintaining PCI compliance.\n\nSecurity and compliance considerations are paramount for this operation. Only tokenized payment gateway references are returned - full card numbers, CVV codes, and other sensitive card data are never exposed through the API. All payment method access is logged for security auditing and PCI DSS compliance monitoring. The operation requires HTTPS transmission and active customer authentication with valid JWT token.\n\nThis operation integrates with the shopping_mall_payment_methods table as defined in the Prisma schema, incorporating all available payment method fields including gateway tokens, card metadata, billing information, default designation, and expiration tracking. The response includes associated billing address information when available, enabling complete payment method display.\n\nRelated API operations that work together with this endpoint include searching payment methods (PATCH /paymentMethods) to get the list of payment method IDs, updating payment method settings such as default designation or nickname (PUT /paymentMethods/{methodId}), and removing saved payment methods (DELETE /paymentMethods/{methodId}). The detail retrieval operation provides complete information needed for payment method management interfaces and checkout payment selection screens.\n\nThe operation handles various error scenarios including payment method not found (when methodId is invalid), unauthorized access (when customer doesn't own the payment method), and expired payment methods (clearly indicated in response for customer awareness). Expired payment methods prompt customers to update their information before attempting purchases.","parameters":[{"name":"methodId","description":"Unique identifier of the target payment method to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete payment method details including card metadata, billing address, expiration status, and gateway token information","typeName":"IShoppingMallPaymentMethod"},"authorizationRole":"customer","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/paymentMethods","method":"post"},"description":"Payment method must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","customer","paymentMethods","at"]},{"specification":"This operation creates a new saved payment method for a customer account. It enables customers to securely store payment instruments (credit cards, debit cards, digital wallets) for faster checkout in future purchases. The operation integrates with payment gateways to tokenize payment information according to PCI DSS compliance requirements, ensuring that full card numbers are never stored in the application database. Only payment tokens from gateways like Stripe, PayPal, or Braintree are persisted. The payment method is associated with the authenticated customer's account from the shopping_mall_customers table and optionally linked to a billing address from shopping_mall_addresses. Customers can save multiple payment methods and designate one as their default for automatic selection during checkout. The system validates that payment information is complete, card expiration dates are in the future, and billing information matches the payment method. This operation is essential for improving customer experience by reducing friction in repeat purchases and enabling one-click checkout flows.","path":"/shoppingMall/customer/paymentMethods","method":"post","summary":"Create and save a new payment method for the authenticated customer","description":"Creates a new saved payment method entry in the shopping_mall_payment_methods table for the authenticated customer. This operation tokenizes payment information through the selected payment gateway (Stripe, PayPal, Braintree, etc.) and stores only the secure token along with display information like last 4 digits and card brand. Full credit card numbers are never persisted to maintain PCI DSS compliance.\n\nThe payment method creation process validates that the provided payment information is complete and valid. For credit/debit cards, this includes validating card number format using the Luhn algorithm, ensuring expiration date is in the future, verifying CVV length matches card type, and confirming billing address information. The system supports multiple payment method types including credit cards (Visa, MasterCard, American Express, Discover), debit cards, digital wallets (PayPal, Apple Pay, Google Pay), and bank accounts.\n\nCustomers can optionally associate a billing address with the payment method by referencing a saved address from shopping_mall_addresses. If this is the customer's first payment method, the system automatically marks it as default. Otherwise, customers can explicitly specify whether this new payment method should become their default for future checkouts. The default payment method is pre-selected during checkout to streamline the purchase process.\n\nThe operation returns the created payment method record with tokenized information, display details (last 4 digits, card brand), expiration information, and default status. The returned token can be used in future payment transactions without re-entering payment information. This enhances user experience by enabling faster checkout flows while maintaining security through gateway tokenization.\n\nSecurity considerations include validating that the authenticated customer owns the billing address if provided, preventing storage of complete card numbers, encrypting gateway tokens at rest, and logging payment method creation for audit trails. Rate limiting prevents abuse of payment method creation endpoints, and suspicious patterns (multiple failed tokenization attempts, unusual billing addresses) are flagged for fraud review.","parameters":[],"requestBody":{"description":"Payment method creation data including payment type, gateway token, card details, billing information, and default preference","typeName":"IShoppingMallPaymentMethod.ICreate"},"responseBody":{"description":"Created payment method with tokenized information, display details, and default status","typeName":"IShoppingMallPaymentMethod"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Billing address must exist before it can be associated with a payment method"}],"accessor":["shoppingMall","customer","paymentMethods","create"]},{"specification":"This operation updates an existing saved payment method for a customer account. Customers can modify specific attributes of their saved payment methods such as the billing address association, default status designation, or user-friendly nickname. The operation also supports updating expiration dates for credit/debit cards when customers receive renewed cards with the same account number. The payment method must belong to the authenticated customer making the update request, enforcing ownership validation. The methodId path parameter identifies the specific payment method record in shopping_mall_payment_methods to update. This operation is crucial for maintaining accurate payment information as customer circumstances change, such as moving to a new address, receiving card renewals, or reorganizing default payment preferences. The system validates that any billing address references exist in shopping_mall_addresses and belong to the customer. When changing the default payment method, the system automatically removes default status from the previously designated method, ensuring only one payment method is marked as default per customer. Updates to payment methods are logged for security auditing and fraud prevention.","path":"/shoppingMall/customer/paymentMethods/{methodId}","method":"put","summary":"Update an existing saved payment method for the authenticated customer","description":"Updates specific attributes of an existing payment method record in the shopping_mall_payment_methods table. This operation allows customers to maintain their saved payment information by modifying billing address associations, default status, expiration dates, or display nicknames. The authenticated customer must own the payment method being updated, with ownership validated by checking that shopping_mall_customer_id matches the requesting user's customer ID from the JWT token.\n\nCommon update scenarios include changing the billing address when customers move, updating card expiration dates when renewed cards are issued by banks, setting a different payment method as default for checkout convenience, and adding or modifying user-friendly nicknames for easy payment method identification. The system preserves the original payment gateway token, as the underlying payment instrument identifier cannot be changed without creating a new payment method.\n\nWhen a customer designates this payment method as default by setting is_default to true, the system automatically updates any previously default payment method to remove its default status, ensuring data integrity with only one default payment method per customer. This atomic operation prevents race conditions when multiple payment method updates occur simultaneously.\n\nThe operation validates that any referenced billing address exists in shopping_mall_addresses and belongs to the requesting customer. For card expiration date updates, the system validates that the new expiration month is between 1-12 and the year is current or future, preventing invalid expiration dates. The is_expired flag is automatically recalculated based on the updated expiration date.\n\nSecurity measures include verifying customer ownership of both the payment method and any referenced billing address, logging all payment method modifications with timestamps and IP addresses for audit trails, and preventing modification of gateway tokens to maintain payment integrity. The operation returns the updated payment method with all current values, enabling clients to refresh their display of payment method information.\n\nThis operation supports the payment method management workflow defined in the business requirements, enabling customers to keep their payment information current without needing to delete and recreate payment methods. It enhances user experience by allowing customers to organize and maintain their saved payment options efficiently.","parameters":[{"name":"methodId","description":"Unique identifier of the payment method to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated payment method information including billing address, default status, expiration dates, and nickname","typeName":"IShoppingMallPaymentMethod.IUpdate"},"responseBody":{"description":"Updated payment method with current attribute values","typeName":"IShoppingMallPaymentMethod"},"authorizationRole":"customer","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/paymentMethods","method":"post"},"description":"Payment method must be created before it can be updated. The methodId references a payment method that must exist in the shopping_mall_payment_methods table."},{"endpoint":{"path":"/shoppingMall/customer/addresses","method":"post"},"description":"Billing address must exist before it can be associated with a payment method. The shopping_mall_billing_address_id references an address record in the shopping_mall_addresses table."}],"accessor":["shoppingMall","customer","paymentMethods","update"]},{"specification":"This operation permanently removes a saved payment method from a customer's account. It operates on the shopping_mall_payment_methods table from the Prisma schema. The payment method is identified by its unique methodId in the path parameter. This endpoint allows customers to delete payment methods they no longer wish to use, such as expired cards or outdated payment information. The operation performs a soft delete by setting the deleted_at timestamp, preserving the record for audit purposes while making it unavailable for future transactions. This is essential for payment method lifecycle management and customer account security.","path":"/shoppingMall/customer/paymentMethods/{methodId}","method":"delete","summary":"Permanently remove a saved payment method from customer account","description":"Removes a saved payment method from a customer's account in the shopping_mall_payment_methods table. This operation allows customers to delete payment methods they no longer wish to use, such as expired credit cards, outdated debit cards, or disconnected digital wallets.\n\nThe operation performs a soft delete by setting the deleted_at timestamp, preserving the payment method record for audit trail and historical transaction references while making it unavailable for future use. This ensures compliance with financial record-keeping requirements while allowing customers to manage their saved payment options.\n\nSecurity considerations include verifying that the requesting customer owns the payment method being deleted. The system prevents deletion of payment methods that are currently set as default without first designating a different default method. Before deletion, the system validates that no pending payment transactions reference this payment method.\n\nThe payment method is identified by the methodId path parameter, which corresponds to the shopping_mall_payment_methods.id field. After successful deletion, the payment method will no longer appear in the customer's saved payment methods list and cannot be selected during checkout.\n\nRelated operations include GET /paymentMethods for retrieving all saved payment methods, POST /paymentMethods for adding new payment methods, and PUT /paymentMethods/{methodId} for updating payment method details such as expiration date or billing address.","parameters":[{"name":"methodId","description":"Unique identifier of the payment method to be deleted from the shopping_mall_payment_methods table","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/paymentMethods","method":"post"},"description":"Payment method must be created before it can be deleted. The methodId references a payment method record that must exist in the shopping_mall_payment_methods table."}],"accessor":["shoppingMall","customer","paymentMethods","erase"]},{"specification":"This operation retrieves a filtered and paginated list of refund transactions from the shopping_mall_refunds table in the Prisma schema. It provides comprehensive search and filtering capabilities for customers to view their refund history, sellers to manage refund processing, and admins to oversee platform-wide refund operations. The operation supports complex filtering by refund status, date ranges, order references, customer identifiers, seller identifiers, refund amounts, and refund reasons. It includes pagination parameters for efficient data retrieval and sorting options for organizing results. The response returns detailed refund information including transaction status, amounts, timestamps, payment gateway details, and related order context.","path":"/shoppingMall/refunds","method":"patch","summary":"Retrieve filtered and paginated list of refund transactions with advanced search capabilities","description":"Retrieves a comprehensive, filtered, and paginated list of refund transactions from the shopping_mall_refunds table. This operation provides advanced search and filtering capabilities for customers to track their refund history, sellers to manage refund processing for their orders, and administrators to oversee all platform refund operations.\n\nThe operation supports extensive filtering criteria including refund status (pending, processing, completed, failed), date ranges for refund initiation and completion, specific order references, customer identifiers, seller identifiers, refund amount ranges, refund reasons (order_cancellation, defective_product, customer_request, wrong_item, policy_violation), and actor types (customer, seller, admin, system). These filters enable users to quickly locate specific refunds or analyze refund patterns.\n\nSecurity considerations include role-based access control where customers can only view their own refunds, sellers can view refunds related to their products, and administrators have unrestricted access to all platform refunds. The operation implements permission checks based on the authenticated user's role and ownership relationships defined in the shopping_mall_refunds table.\n\nThe response includes detailed refund information such as refund amounts, original payment transaction references, refund request associations, processing status through payment gateway, actor information (who initiated the refund), timestamps for key lifecycle events (processed_at, completed_at, failed_at), failure reasons if applicable, and administrative notes. This comprehensive data enables full refund lifecycle tracking and financial reconciliation.\n\nPagination parameters support efficient retrieval of large refund datasets, with configurable page sizes and sorting options by refund date, refund amount, completion date, or refund status. The operation integrates with the shopping_mall_payment_transactions, shopping_mall_refund_requests, shopping_mall_orders, shopping_mall_customers, shopping_mall_sellers, and shopping_mall_admins tables to provide complete refund context.\n\nRelated operations include POST /refunds for initiating new refund transactions, GET /refunds/{refundId} for retrieving detailed information about a specific refund, and PUT /refunds/{refundId} for updating refund processing status or administrative notes.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, pagination settings, and sorting options for refund transaction retrieval","typeName":"IShoppingMallRefund.IRequest"},"responseBody":{"description":"Paginated list of refund transactions matching the specified search and filter criteria with pagination metadata","typeName":"IPageIShoppingMallRefund"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before refunds can be associated with it (shopping_mall_order_id dependency)"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created before refund transactions can be filtered by shopping_mall_refund_request_id"}],"accessor":["shoppingMall","refunds","index"]},{"specification":"This operation retrieves detailed information about a specific refund transaction by its unique identifier. It provides complete refund details including the associated payment transaction, refund request (if applicable), order information, refund amount, processing status, gateway details, and the actor who initiated the refund (customer, seller, admin, or system). This endpoint is essential for tracking refund lifecycle, financial reconciliation, and customer service inquiries about refund status. The operation supports all user roles (customer, seller, admin) with appropriate data filtering: customers can only view refunds for their own orders, sellers can view refunds related to their products, and admins have full access to all platform refunds. The response includes complete audit trail with timestamps for refund processing stages (created, processed, completed, failed) and detailed failure reasons if applicable.","path":"/shoppingMall/refunds/{refundId}","method":"get","summary":"Retrieve detailed information for a specific refund transaction","description":"Retrieve comprehensive details for a specific refund transaction identified by its unique refund ID. This operation provides complete refund information including the original payment transaction reference, associated refund request details (if refund was initiated through customer refund request workflow), order information, refund amount processed, current processing status, payment gateway transaction identifier, and the actor who initiated the refund.\n\nThe refund record contains critical financial data for reconciliation and compliance. It tracks the complete refund lifecycle from initiation through payment processing to completion or failure. The response includes timestamps for each processing stage: when the refund was created, when payment processing began, when it completed successfully, or when it failed with detailed failure reasons.\n\nThe initiated_by_type field indicates whether the refund was triggered by a customer (through refund request), seller (through order cancellation), admin (dispute resolution or override), or system (automatic processing). The corresponding initiated_by_*_id foreign key provides the specific actor reference.\n\nSecurity and authorization are role-based: customers can only retrieve refunds for their own orders, sellers can retrieve refunds related to orders for their products, and admins have unrestricted access to all platform refunds for oversight and financial management. The system validates refund ownership before returning data to prevent unauthorized access to financial information.\n\nThis operation is commonly used in customer service workflows for refund status inquiries, financial reconciliation processes, dispute resolution investigations, and audit trail reviews. The detailed refund information enables transparent communication with customers about refund processing timelines and provides sellers and admins with complete visibility into refund operations.","parameters":[{"name":"refundId","description":"Unique identifier of the target refund transaction","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete refund transaction details including payment information, order reference, refund amount, processing status, gateway details, and actor information","typeName":"IShoppingMallRefund"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before refund can exist and be retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refund","method":"post"},"description":"Refund request must be created to initiate the refund transaction that can then be retrieved"}],"accessor":["shoppingMall","refunds","at"]},{"specification":"This operation retrieves a filtered and paginated list of seller payout records based on search criteria including seller identifier, payout period date ranges, payout status, and amount ranges. Seller payouts represent periodic financial settlements from the platform to sellers, calculating net amounts owed after deducting platform commission, refunds, and processing fees. The operation supports complex filtering for financial reporting, payout reconciliation, and seller account management. Request body includes filters for seller ID, status (pending, processing, completed, failed, on_hold), date range for payout periods, and amount ranges. The response provides paginated results with each payout record showing settlement period, gross order amount, commission deductions, refund deductions, processing fees, net payout amount, processing status, payout method, and relevant timestamps. This endpoint serves admins who need comprehensive visibility into platform-wide seller payouts for financial operations, and potentially sellers who need to view their own payout history (with seller ID filter enforced by authorization). The operation enables financial reconciliation, dispute resolution for payout issues, and business analytics on seller settlements.","path":"/shoppingMall/admin/sellerPayouts","method":"patch","summary":"Search and retrieve filtered, paginated list of seller payout records","description":"Retrieve a comprehensive, filtered, and paginated list of seller payout records representing financial settlements between the platform and sellers. This operation enables advanced search capabilities for payout reconciliation, financial reporting, and seller account management by allowing filtering based on multiple criteria including seller identifier, payout period date ranges, processing status, and payout amounts.\n\nSeller payouts are generated on a regular schedule (typically weekly or monthly) and represent the platform's obligation to transfer net earnings to sellers after deducting platform commission, processing fees, and any refund amounts from the payout period. Each payout record calculates the final net amount using the formula: Net Payout = (Total Order Amount + Shipping Fees) - Platform Commission - Refund Deductions - Processing Fees.\n\nThe request body supports extensive filtering options: seller ID for viewing specific seller's payouts, status filters for tracking payout lifecycle (pending, processing, completed, failed, on_hold), date range filters for payout periods to analyze settlements over time, and amount range filters for identifying high-value or problematic payouts. Pagination parameters enable efficient handling of large payout datasets.\n\nEach payout record in the response includes comprehensive financial breakdown: the settlement period covered (start and end dates), total gross revenue from seller's orders during that period, platform commission amount deducted, refund deduction amount for returns/cancellations, payment processing fees, final net payout amount, currency, payout processing status, payout method used (bank transfer, PayPal, etc.), payout reference numbers, scheduled and actual payout dates, and detailed timestamps for processing stages.\n\nThis operation is essential for financial operations teams managing platform-wide seller settlements, accountants reconciling payout transactions with bank records, and potentially for sellers to view their own payout history and financial statements. Authorization controls ensure customers cannot access payout data (business-to-business financial information), sellers can only view their own payouts when applicable, and admins have unrestricted access for platform oversight.\n\nThe operation integrates with the payment settlement workflow, providing visibility into the complete lifecycle from payout calculation through bank transfer processing to completion or failure handling. Failed payouts include detailed failure reasons enabling support teams to resolve issues such as invalid bank account information or insufficient platform funds.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering seller payout records by seller, status, date ranges, and amount ranges","typeName":"IShoppingMallSellerPayout.IRequest"},"responseBody":{"description":"Paginated list of seller payout records with complete financial breakdown including settlement periods, amounts, deductions, and processing status","typeName":"IPageIShoppingMallSellerPayout"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller account must exist and be authenticated before payouts can be generated and retrieved. Seller sessions are required to establish seller accounts in the system that will receive payouts."}],"accessor":["shoppingMall","admin","sellerPayouts","index"]},{"specification":"This operation retrieves detailed information about a specific seller payout by its unique payout ID. It operates on the shopping_mall_seller_payouts table from the Prisma schema and provides comprehensive payout details including settlement period, revenue breakdown, commission deductions, refund deductions, processing fees, and final net payout amount. This endpoint is essential for sellers to review their payment settlements and for admins to audit payout processing.","path":"/shoppingMall/seller/sellerPayouts/{payoutId}","method":"get","summary":"Retrieve detailed information for a specific seller payout by payout ID","description":"Retrieve complete details of a specific seller payout record by its unique identifier. This operation provides comprehensive financial information about a payout settlement including the settlement period covered, total order revenue, platform commission deductions, refund deductions, payment processing fees, and the final net payout amount transferred to the seller.\n\nThis endpoint is critical for financial transparency and reconciliation. Sellers use it to verify their earnings, understand deductions, and confirm payout processing status. Administrators use it to audit payout calculations, investigate payout issues, and ensure accurate financial settlements.\n\nThe payout record corresponds to the shopping_mall_seller_payouts table in the Prisma schema, which tracks periodic payment settlements to sellers after deducting platform commission and fees. Each payout covers a specific time period (typically weekly or monthly) and aggregates all eligible orders delivered during that period.\n\nSecurity considerations include role-based access control where sellers can only view their own payouts, while admins have platform-wide access to all seller payouts. The endpoint validates that the requesting user has appropriate permissions before returning payout details.\n\nThe response includes the payout status (pending, processing, completed, failed, on_hold), payout method (bank_transfer, paypal, etc.), and processing timestamps. For completed payouts, it includes the payout reference number for bank reconciliation. For failed payouts, it provides failure reasons to help resolve payout issues.\n\nThis operation integrates with the seller order management system to show which orders contributed to the payout and with the refund system to show refund deductions. It also displays commission calculations transparently so sellers understand platform fee deductions.","parameters":[{"name":"payoutId","description":"Unique identifier of the seller payout record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete seller payout information including settlement period, revenue breakdown, deductions, and payout status","typeName":"IShoppingMallSellerPayout"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/sellers/sessions","method":"post"},"description":"Seller account must exist and be authenticated before they can view their payout details. Seller login creates the seller account that owns the payout records."}],"accessor":["shoppingMall","seller","sellerPayouts","at"]},{"specification":"This operation retrieves detailed information about a specific seller payout by its unique payout ID. It operates on the shopping_mall_seller_payouts table from the Prisma schema and provides comprehensive payout details including settlement period, revenue breakdown, commission deductions, refund deductions, processing fees, and final net payout amount. This endpoint is essential for sellers to review their payment settlements and for admins to audit payout processing.","path":"/shoppingMall/admin/sellerPayouts/{payoutId}","method":"get","summary":"Retrieve detailed information for a specific seller payout by payout ID","description":"Retrieve complete details of a specific seller payout record by its unique identifier. This operation provides comprehensive financial information about a payout settlement including the settlement period covered, total order revenue, platform commission deductions, refund deductions, payment processing fees, and the final net payout amount transferred to the seller.\n\nThis endpoint is critical for financial transparency and reconciliation. Sellers use it to verify their earnings, understand deductions, and confirm payout processing status. Administrators use it to audit payout calculations, investigate payout issues, and ensure accurate financial settlements.\n\nThe payout record corresponds to the shopping_mall_seller_payouts table in the Prisma schema, which tracks periodic payment settlements to sellers after deducting platform commission and fees. Each payout covers a specific time period (typically weekly or monthly) and aggregates all eligible orders delivered during that period.\n\nSecurity considerations include role-based access control where sellers can only view their own payouts, while admins have platform-wide access to all seller payouts. The endpoint validates that the requesting user has appropriate permissions before returning payout details.\n\nThe response includes the payout status (pending, processing, completed, failed, on_hold), payout method (bank_transfer, paypal, etc.), and processing timestamps. For completed payouts, it includes the payout reference number for bank reconciliation. For failed payouts, it provides failure reasons to help resolve payout issues.\n\nThis operation integrates with the seller order management system to show which orders contributed to the payout and with the refund system to show refund deductions. It also displays commission calculations transparently so sellers understand platform fee deductions.","parameters":[{"name":"payoutId","description":"Unique identifier of the seller payout record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete seller payout information including settlement period, revenue breakdown, deductions, and payout status","typeName":"IShoppingMallSellerPayout"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[],"accessor":["shoppingMall","admin","sellerPayouts","at"]},{"specification":"This operation retrieves a filtered and paginated list of product reviews with advanced search, filtering, and sorting capabilities. It operates on the shopping_mall_reviews table from the Prisma schema and supports comprehensive querying to find reviews based on multiple criteria including product, customer, rating level, verification status, moderation status, and date ranges. This is a complex search endpoint using PATCH method due to the sophisticated request parameters required for filtering and pagination.","path":"/shoppingMall/reviews","method":"patch","summary":"Search and retrieve a filtered, paginated list of product reviews","description":"Retrieve a filtered and paginated collection of product reviews from the shopping mall platform. This operation provides advanced search capabilities for finding reviews based on multiple criteria including product ID, customer ID, rating levels, verification status, moderation status, helpfulness scores, and date ranges. The endpoint supports comprehensive filtering, sorting, and pagination to enable efficient review discovery and management.\n\nThis operation is essential for multiple use cases across different user roles. Customers use it to browse reviews when evaluating products, filtering by rating level or sorting by helpfulness to find the most useful reviews. Sellers use it to monitor customer feedback on their products, track review sentiment, and identify products requiring attention based on negative reviews. Admins use it to manage the review moderation queue, filtering by status to find pending or flagged reviews requiring approval or removal.\n\nThe review system corresponds to the shopping_mall_reviews table in the Prisma schema, which stores customer product reviews with star ratings (1-5), optional text content, and optional customer-uploaded images. All reviews are from verified purchases, meaning only customers who completed orders for the product can submit reviews. Reviews go through moderation workflow before publication, with statuses including pending_moderation, approved, and rejected.\n\nSecurity considerations include role-based access where customers see only approved reviews when browsing products, sellers see all reviews (including pending) for their products, and admins see all reviews platform-wide including rejected reviews for moderation purposes. The endpoint enforces appropriate filtering based on the requesting user's role and permissions.\n\nThe response includes review content (rating, title, text), reviewer information, verified purchase badges, helpfulness vote counts, moderation status, associated product and SKU details, and timestamps. For reviews with seller responses, it includes the response content and status. The pagination structure provides total count, page information, and navigation metadata to support efficient client-side display.\n\nThis operation integrates with the product catalog to enrich reviews with current product information, with the order system to verify purchase eligibility, and with the helpfulness voting system to calculate and display vote counts. Sorting options include most recent, most helpful, highest rating, and lowest rating to support various customer browsing patterns.\n\nRelated API operations include creating new reviews (POST /reviews), retrieving specific review details (GET /reviews/{reviewId}), updating reviews (PUT /reviews/{reviewId}), and managing review helpfulness votes. Customers typically use GET /products/{productId} to view product details before searching its reviews, and POST /orders to complete purchases that enable future review submission.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination configuration for review retrieval","typeName":"IShoppingMallReview.IRequest"},"responseBody":{"description":"Paginated collection of product reviews matching the search criteria with review details, ratings, helpfulness counts, and moderation status","typeName":"IPageIShoppingMallReview"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before customers can submit reviews for it"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Customer must have a completed order containing the product to be eligible to submit verified purchase reviews"}],"accessor":["shoppingMall","reviews","index"]},{"specification":"This operation retrieves detailed information about a specific product review by its unique identifier. It operates on the shopping_mall_reviews table from the Prisma schema and returns comprehensive review details including the rating, review text, customer information, product reference, verification status, moderation status, helpfulness metrics, any attached images, and seller responses. This endpoint serves multiple user types: customers viewing product reviews to make informed purchase decisions, sellers monitoring feedback on their products, and admins moderating review content. The operation validates that the review exists and applies appropriate access control based on user roles. Customers can view all approved reviews, sellers can view reviews on their products regardless of status, and admins have full visibility. The response includes complete review metadata, associated product and customer information, and aggregated helpfulness vote counts to support rich review display interfaces.","path":"/shoppingMall/reviews/{reviewId}","method":"get","summary":"Retrieve detailed information for a specific product review by ID","description":"Retrieve comprehensive details about a specific product review identified by its unique review ID. This operation returns complete review information from the shopping_mall_reviews table including the star rating (1-5), optional review title, review text content, customer information, product and SKU references, verified purchase status, moderation status, and aggregated helpfulness vote counts.\n\nThe review detail includes all associated data such as customer-uploaded review images (from shopping_mall_review_images), seller responses if any exist (from shopping_mall_seller_responses), and the complete review metadata including creation and modification timestamps. The verified_purchase badge is always true since only customers who completed and received orders can submit reviews.\n\nSecurity considerations include role-based access control where customers can view all approved reviews, sellers can view all reviews on their own products regardless of moderation status, and admins have unrestricted visibility for moderation purposes. The endpoint enforces that only approved reviews (status='approved') are visible to regular customers, while pending_moderation and rejected reviews are accessible only to the review author, the product seller, and platform administrators.\n\nThis operation integrates with the shopping_mall_products table to provide product context, the shopping_mall_customers table for reviewer information, and the shopping_mall_orders table to validate verified purchase status. The response includes aggregated helpfulness vote counts from shopping_mall_review_helpfulness_votes to display community feedback on review quality.\n\nRelated operations include searching reviews for a product, submitting new reviews after purchase, editing existing reviews within the 30-day window, and voting on review helpfulness. This endpoint is essential for displaying detailed review information on product pages and in review management interfaces.","parameters":[{"name":"reviewId","description":"Unique identifier of the product review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product review information including rating, text, customer info, product reference, verification status, helpfulness metrics, images, and seller responses","typeName":"IShoppingMallReview"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","reviews","at"]},{"specification":"This operation allows verified customers who have received a product from a completed order to submit a new product review with a star rating and optional written feedback. It operates on the shopping_mall_reviews table from the Prisma schema and enforces strict business rules: only customers with verified purchases (completed orders with status 'delivered') can review, customers can submit only one review per product, reviews include mandatory star rating (1-5), optional review title and text, and optional customer-uploaded images. The review submission triggers a moderation workflow where reviews are initially set to pending_moderation status and require admin approval before publication. The operation validates purchase eligibility by checking the shopping_mall_orders table for delivered orders containing the reviewed product, prevents duplicate reviews by checking existing reviews from the same customer for the same product, and automatically marks reviews with verified_purchase flag. This endpoint is critical for building marketplace trust through authentic customer feedback and supports the review ecosystem that influences product ratings, search rankings, and purchase decisions.","path":"/shoppingMall/customer/reviews","method":"post","summary":"Submit a new product review with rating and optional feedback from verified purchaser","description":"Create a new product review for a purchased product, allowing verified customers to share their experience and provide feedback. This operation inserts a new record into the shopping_mall_reviews table with comprehensive validation of customer eligibility, purchase verification, and content quality requirements.\n\nThe review submission process enforces critical business rules defined in the requirements: only customers who have received the product in a completed order (status='delivered') are eligible to review, ensuring authentic feedback from verified purchasers. The system validates that the customer has not already reviewed the same product by checking for existing reviews from the same customer_id and product_id combination, as each customer can submit only one review per product.\n\nThe mandatory star rating must be an integer from 1 to 5, where 1=Terrible, 2=Poor, 3=Average, 4=Very Good, 5=Excellent. The review text is optional, allowing customers to submit rating-only reviews for quick feedback. When text is provided, it must meet minimum quality standards: at least 10 characters for meaningful content, maximum 5000 characters, no profanity or offensive language, no personal contact information or external URLs. The optional review title provides a short summary limited to 100 characters.\n\nCustomers can optionally upload up to 5 product images (JPEG, PNG, WebP formats, 5MB maximum per image, minimum 400x400 pixels resolution) to provide visual evidence and context. These images are particularly valuable for reviews of defective or damaged products and enhance review helpfulness for other customers.\n\nAll submitted reviews enter a moderation workflow with initial status='pending_moderation'. The system automatically flags reviews for manual moderation if they contain potentially offensive language, very negative ratings (1-2 stars), competitor mentions, or contact information patterns. Reviews without moderation flags may be auto-approved for customers with good review history. The moderation workflow ensures review quality and policy compliance before publication.\n\nThe operation automatically sets verified_purchase=true since only verified purchasers can access this endpoint, and the verified purchase badge is displayed with all reviews to build trust. The review is associated with the specific order that enabled the review for audit trail and eligibility validation.\n\nUpon successful submission, the system sends confirmation notification to the customer, notifies the seller of the new review, and returns the created review details including the assigned review ID and moderation status.\n\nRelated operations that customers may use in conjunction include retrieving product reviews to read others' feedback before writing their own, editing submitted reviews within the 30-day window, and voting on other reviews' helpfulness. Sellers can respond to published reviews through dedicated seller response endpoints.","parameters":[],"requestBody":{"description":"Product review submission data including mandatory star rating, optional review text and title, product and order references, and optional customer-uploaded images","typeName":"IShoppingMallReview.ICreate"},"responseBody":{"description":"Created review information including assigned review ID, moderation status, verified purchase badge, and complete review details","typeName":"IShoppingMallReview"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before customers can submit reviews for it"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Customer must have a completed order with delivered status containing the product to be eligible for verified purchase review"}],"accessor":["shoppingMall","customer","reviews","create"]},{"specification":"This operation allows customers to update their existing product reviews. Customers who have previously submitted a review for a product can modify the star rating, review title, review text, and uploaded images within 30 days of the original submission. After 30 days, reviews become locked and cannot be edited. The operation validates that the review belongs to the authenticated customer and that the edit timeframe has not expired. When a customer edits a review, the system re-submits it to the moderation queue for admin approval, ensuring continued content quality. The review is marked with an 'edited' badge displaying the last edit timestamp. This operation references the shopping_mall_reviews table from the Prisma schema, updating fields including rating, title, review_text, and updated_at timestamp. The edit history is maintained in audit logs for moderation purposes. This operation is essential for allowing customers to correct mistakes, update their opinions after extended product usage, or add additional information to their reviews while maintaining platform review quality standards.","path":"/shoppingMall/customer/reviews/{reviewId}","method":"put","summary":"Update an existing product review within 30-day edit window","description":"Enables customers to modify their previously submitted product reviews including star rating, title, review text, and uploaded images. This operation is restricted to the original review author and must be performed within 30 days of the original submission date as per platform business rules.\n\nThe review update process validates several critical conditions before allowing modifications. First, the system verifies that the authenticated customer is the original author of the review by comparing the customer ID from the JWT token with the shopping_mall_customer_id in the review record. Second, the system checks that the current date is within 30 days of the review's created_at timestamp. Reviews older than 30 days are locked and cannot be edited, requiring customers to contact support for exceptional cases.\n\nWhen a customer updates a review, all modified content is re-submitted to the moderation workflow. The review status transitions to 'pending_moderation' and requires admin approval before the updated content becomes visible to other customers. This ensures that edited reviews maintain the same quality standards as new submissions. The system validates the updated content against the same rules as new reviews: minimum 10 characters for review text, maximum 5000 characters, no prohibited content (profanity, personal information, external URLs), and proper image formats for uploaded photos.\n\nThe updated_at timestamp is automatically set to the current time, and the review receives an 'edited' badge that displays the last modification date to other customers. This transparency helps maintain trust in the review ecosystem. The edit history is preserved in audit logs accessible only to administrators for moderation and dispute resolution purposes.\n\nUpon successful update, the system recalculates aggregate product ratings if the star rating was modified, updates the review's helpful_count if necessary, and sends a notification to the seller of the reviewed product. The customer receives confirmation that their updated review is pending moderation and will be published after admin approval.","name":"update","parameters":[{"name":"reviewId","description":"Unique identifier of the review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated review content including star rating, title, review text, and optional image modifications","typeName":"IShoppingMallReview.IUpdate"},"responseBody":{"description":"Updated review record with pending moderation status and edit timestamp","typeName":"IShoppingMallReview"},"authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must be created before it can be updated. The customer must have previously submitted a review for a product through a completed order to have a review record to modify."}],"accessor":["shoppingMall","customer","reviews","update"]},{"specification":"This operation allows customers to delete their product reviews at any time. Customers maintain full control over their submitted reviews and can choose to remove them from the platform whenever desired. The operation implements soft deletion, preserving the review data in the database for audit and compliance purposes while removing it from public visibility. When a review is deleted, the system immediately recalculates the product's aggregate rating and review count, removing this review's contribution. The deleted_at timestamp is set in the shopping_mall_reviews table, and the review status may be updated to reflect deletion. This operation validates that the authenticated customer is the original author of the review before allowing deletion. The system also handles cascading effects, such as removing the review from helpfulness vote counts and notifying the seller that a review of their product was removed. Deleted reviews are retained in the database for historical tracking and dispute resolution but are excluded from all customer-facing queries and aggregate calculations.","path":"/shoppingMall/customer/reviews/{reviewId}","method":"delete","summary":"Soft delete a customer's product review with immediate effect","description":"Enables customers to remove their previously submitted product reviews from public visibility. This operation performs a soft deletion, setting the deleted_at timestamp in the shopping_mall_reviews table while preserving the review data for audit trails and historical compliance.\n\nThe deletion process first validates that the authenticated customer owns the review being deleted. The system compares the customer ID from the JWT authentication token with the shopping_mall_customer_id field in the review record. If the review belongs to a different customer, the operation returns a 403 Forbidden error, preventing unauthorized deletion attempts.\n\nUpon successful validation, the system performs several critical operations atomically. First, the deleted_at timestamp is set to the current date and time, marking the review as deleted. Second, the product's aggregate rating statistics are immediately recalculated, removing this review's star rating from the average rating calculation and decrementing the total review count displayed on the product page. This ensures that product ratings accurately reflect only active, visible reviews.\n\nThe system also handles related data cleanup. Any helpfulness votes on this review (from the shopping_mall_review_helpfulness_votes table) are retained for audit purposes but excluded from public helpful count displays. If a seller had posted a response to this review (shopping_mall_seller_responses), the response is also soft-deleted in cascade to maintain data consistency.\n\nA notification is sent to the seller of the reviewed product, informing them that a review has been removed. This helps sellers track changes to their product feedback. The customer receives confirmation that their review has been successfully deleted.\n\nThe soft deletion approach maintains referential integrity with the shopping_mall_orders table, preserving the historical link between the order that enabled the verified purchase review and the now-deleted review record. This is essential for audit trails and compliance with data retention policies while respecting customer privacy and control over their contributed content.","name":"erase","parameters":[{"name":"reviewId","description":"Unique identifier of the review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must be created before it can be deleted. The customer must have previously submitted a review to have a review record to remove from the platform."}],"accessor":["shoppingMall","customer","reviews","erase"]},{"specification":"This operation retrieves a paginated list of images associated with a specific product review. The endpoint supports filtering, sorting, and pagination to enable efficient browsing of customer-uploaded review images. Images are subsidiary entities managed entirely within the review context, and this operation provides read-only access to the collection of images for a specific review identified by reviewId. The operation operates on the shopping_mall_review_images table from the Prisma schema, retrieving image URLs, display order, and metadata for images uploaded by customers as visual evidence or context for their product reviews. This endpoint is useful for displaying review image galleries, verifying review authenticity through visual evidence, and supporting moderation workflows where admins need to review customer-uploaded content for policy compliance.","path":"/shoppingMall/reviews/{reviewId}/images","method":"patch","summary":"Retrieve paginated list of images for a specific product review","description":"Retrieve a filtered and paginated collection of customer-uploaded images associated with a specific product review identified by the reviewId path parameter. This operation provides comprehensive access to review image metadata including storage URLs, display ordering, upload timestamps, and image positioning within the review's gallery.\n\nThe operation integrates with the shopping_mall_review_images table and provides read-only access to image collections. Images serve as visual evidence and context for customer reviews, particularly valuable for showcasing product quality, identifying defects in refund requests, and building trust through authentic customer photography.\n\nSecurity considerations include validation that the specified review exists and is accessible, appropriate filtering of images from unpublished or moderated reviews based on the requesting user's authorization level, and rate limiting to prevent automated scraping of review image URLs. Only approved and published reviews' images are visible to public users, while moderators and admins can access images from reviews in any moderation status.\n\nThe response includes complete image metadata optimized for gallery display, with support for responsive image loading, lazy loading optimization, and thumbnail generation. Images are returned in display_order sequence as configured by the review author, enabling accurate representation of the customer's intended visual narrative.\n\nThis operation is commonly used in conjunction with review detail retrieval endpoints to provide complete review visualization including both textual content and supporting imagery. The paginated response structure supports efficient loading of reviews with numerous images while maintaining acceptable performance characteristics.","parameters":[{"name":"reviewId","description":"Unique identifier of the target product review whose images are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, filtering, and sorting parameters for review image collection retrieval","typeName":"IShoppingMallReviewImage.IRequest"},"responseBody":{"description":"Paginated collection of review images with metadata including URLs, display order, and timestamps","typeName":"IPageIShoppingMallReviewImage"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must exist before retrieving its images. The review needs to be created first so that images can be associated with it and retrieved."}],"accessor":["shoppingMall","reviews","images","index"]},{"specification":"This operation creates and uploads new images to be associated with a specific product review identified by reviewId. Customers can upload up to 5 images per review in JPEG, PNG, or WebP formats with a maximum file size of 5MB per image. The operation validates image format, size, resolution requirements, and enforces the maximum image count limit per review. Each uploaded image is assigned a display_order position and stored with metadata including upload timestamp. The operation processes image files, generates optimized versions for web display (thumbnails and responsive sizes), and associates them with the parent review in the shopping_mall_review_images table. This endpoint is used during review creation or when customers edit their reviews within the 30-day edit window. Images provide visual evidence and context for reviews, particularly valuable for showcasing product quality or documenting defects in refund scenarios.","path":"/shoppingMall/customer/reviews/{reviewId}/images","method":"post","summary":"Upload and attach new images to a specific product review","description":"Upload one or more product images to be associated with the specified review, supporting customer-provided visual evidence and context for their product feedback. This operation enables customers to enhance their written reviews with photographic documentation of the product's appearance, quality, defects, or usage scenarios.\n\nThe operation validates that the requesting customer is the owner of the review identified by reviewId, ensuring only the review author can upload images to their own review. The review must be in an editable state (within 30 days of creation) and not in deleted or permanently locked status.\n\nImage validation includes comprehensive checks for file format (JPEG, PNG, WebP only), file size constraints (maximum 5MB per image), minimum resolution requirements (800x800 pixels recommended for quality), and content appropriateness through automated scanning. The operation enforces a strict limit of 5 images per review as defined in the business requirements, rejecting upload attempts that would exceed this threshold.\n\nUpon successful validation, the system processes uploaded images by generating multiple optimized versions including thumbnails (150x150 pixels for review lists), medium resolution (600x600 pixels for review detail pages), and preserving original high-resolution versions for zoom functionality. Images are assigned sequential display_order values based on upload sequence, which customers can later reorder through review editing functionality.\n\nThe operation integrates with the review moderation workflow, where newly uploaded images to pending reviews are included in the moderation queue for content policy compliance review. Images uploaded to already-approved reviews may trigger re-moderation depending on platform policy configuration.\n\nSecurity considerations include authentication verification to confirm the requesting user is the review author, authorization checks to prevent unauthorized image uploads to other users' reviews, rate limiting to prevent abuse (maximum 10 upload operations per hour per customer), and virus scanning for uploaded files to protect platform integrity.\n\nRelated operations that customers typically use in conjunction with this endpoint include review creation (POST /reviews), review editing (PUT /reviews/{reviewId}), and review image reordering during the edit workflow. Sellers and admins viewing customer reviews also retrieve these images through review detail endpoints to assess product feedback quality and authenticity.","parameters":[{"name":"reviewId","description":"Unique identifier of the target product review to which images will be attached","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Image upload data including image files, display order preferences, and optional alt text for accessibility","typeName":"IShoppingMallReviewImage.ICreate"},"responseBody":{"description":"Created review image records with assigned IDs, storage URLs, and metadata including display order and upload timestamps","typeName":"IShoppingMallReviewImage"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must be created before images can be uploaded to it. Images are subsidiary entities that require a parent review to exist in the shopping_mall_review_images table."}],"accessor":["shoppingMall","customer","reviews","images","create"]},{"specification":"This operation permanently removes a customer-uploaded image from a product review. It operates on the shopping_mall_review_images table which stores customer-uploaded photos attached to product reviews. Customers can upload up to 5 images per review to provide visual evidence and context for their feedback. This deletion endpoint allows customers to remove specific images they no longer want associated with their review, or enables admins to remove inappropriate images during content moderation. The operation requires both the parent review ID and the specific image ID to identify and delete the target image. After deletion, the system recalculates display_order for remaining images in the review to maintain sequential ordering. This is a hard delete operation as the schema does not include a deleted_at column for review images - the image record is permanently removed from the database.","path":"/shoppingMall/customer/reviews/{reviewId}/images/{imageId}","method":"delete","summary":"Permanently delete a specific image from a product review","description":"Removes a customer-uploaded image from a product review, operating on the shopping_mall_review_images table in the Reviews namespace. This endpoint serves two primary use cases: allowing customers to remove images they uploaded to their own reviews, and enabling admins to remove inappropriate images during content moderation workflows.\n\nCustomers can upload up to 5 images per review (JPEG, PNG, WebP formats, 5MB max per image) to provide visual evidence and context for their product feedback. These images are particularly valuable for reviews involving defective or damaged products, helping other customers make informed purchase decisions. This deletion endpoint provides customers with control over their submitted media content.\n\nThe operation performs a permanent hard delete as the shopping_mall_review_images table does not include a deleted_at column. When an image is removed, the record is completely deleted from the database. The system automatically recalculates the display_order values for remaining images in the review to maintain sequential ordering (1, 2, 3...) without gaps.\n\nBusiness rules enforced by this operation include verification that the requesting user has appropriate permissions (review author for customer-initiated deletions, or admin role for moderation-initiated deletions). The operation validates that both the review and the image exist and that the image actually belongs to the specified review before proceeding with deletion.\n\nRelated operations that work together with this endpoint include the review creation and update endpoints that initially upload and manage review images, and the review retrieval endpoints that display the remaining images after deletion. The review moderation workflow also uses this endpoint when admins identify policy-violating image content that must be removed.","parameters":[{"name":"reviewId","description":"Unique identifier of the parent product review containing the image to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific review image to be permanently removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must exist before its images can be deleted. A review must be created first to establish the parent review entity that contains images."},{"endpoint":{"path":"/shoppingMall/customer/reviews/{reviewId}/images","method":"post"},"description":"Review image must be created before it can be deleted. This operation creates the image record that will be removed by the delete operation."}],"accessor":["shoppingMall","customer","reviews","images","erase"]},{"specification":"This operation permanently removes a customer-uploaded image from a product review. It operates on the shopping_mall_review_images table which stores customer-uploaded photos attached to product reviews. Customers can upload up to 5 images per review to provide visual evidence and context for their feedback. This deletion endpoint allows customers to remove specific images they no longer want associated with their review, or enables admins to remove inappropriate images during content moderation. The operation requires both the parent review ID and the specific image ID to identify and delete the target image. After deletion, the system recalculates display_order for remaining images in the review to maintain sequential ordering. This is a hard delete operation as the schema does not include a deleted_at column for review images - the image record is permanently removed from the database.","path":"/shoppingMall/admin/reviews/{reviewId}/images/{imageId}","method":"delete","summary":"Permanently delete a specific image from a product review","description":"Removes a customer-uploaded image from a product review, operating on the shopping_mall_review_images table in the Reviews namespace. This endpoint serves two primary use cases: allowing customers to remove images they uploaded to their own reviews, and enabling admins to remove inappropriate images during content moderation workflows.\n\nCustomers can upload up to 5 images per review (JPEG, PNG, WebP formats, 5MB max per image) to provide visual evidence and context for their product feedback. These images are particularly valuable for reviews involving defective or damaged products, helping other customers make informed purchase decisions. This deletion endpoint provides customers with control over their submitted media content.\n\nThe operation performs a permanent hard delete as the shopping_mall_review_images table does not include a deleted_at column. When an image is removed, the record is completely deleted from the database. The system automatically recalculates the display_order values for remaining images in the review to maintain sequential ordering (1, 2, 3...) without gaps.\n\nBusiness rules enforced by this operation include verification that the requesting user has appropriate permissions (review author for customer-initiated deletions, or admin role for moderation-initiated deletions). The operation validates that both the review and the image exist and that the image actually belongs to the specified review before proceeding with deletion.\n\nRelated operations that work together with this endpoint include the review creation and update endpoints that initially upload and manage review images, and the review retrieval endpoints that display the remaining images after deletion. The review moderation workflow also uses this endpoint when admins identify policy-violating image content that must be removed.","parameters":[{"name":"reviewId","description":"Unique identifier of the parent product review containing the image to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific review image to be permanently removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Review must exist before its images can be deleted. A review must be created first to establish the parent review entity that contains images."},{"endpoint":{"path":"/shoppingMall/customer/reviews/{reviewId}/images","method":"post"},"description":"Review image must be created before it can be deleted. This operation creates the image record that will be removed by the delete operation."}],"accessor":["shoppingMall","admin","reviews","images","erase"]},{"specification":"This operation records a customer's vote on whether a specific product review was helpful. It operates on the shopping_mall_review_helpfulness_votes table which tracks helpful/not-helpful votes from customers on product reviews. The system allows any customer (including those who haven't purchased the product) to vote on review helpfulness to surface the most useful reviews for future shoppers. Each customer can cast one vote per review, and customers can change their vote (update existing record). The operation enforces that reviewers cannot vote on their own reviews. Helpful vote counts are displayed publicly with reviews and influence 'Most Helpful' sorting, while not-helpful counts are tracked internally but not publicly displayed to avoid negative sentiment.","path":"/shoppingMall/customer/reviews/{reviewId}/vote","method":"post","summary":"Cast or update helpfulness vote on a product review","description":"Records a customer's vote indicating whether a product review was helpful or not helpful, operating on the shopping_mall_review_helpfulness_votes table in the Reviews namespace. This voting mechanism helps surface the most useful reviews by allowing the community to collectively identify which reviews provide the most value to future shoppers.\n\nThe endpoint supports the core review helpfulness voting system where any authenticated customer can vote on any published review, regardless of whether they have purchased the product themselves. This inclusive voting policy enables a broader community to participate in identifying high-quality, informative reviews. Each customer can cast exactly one vote per review, implemented through a unique constraint on the combination of review ID and customer ID.\n\nWhen a customer votes on a review they have previously voted on, the system updates the existing vote record rather than creating a duplicate. This allows customers to change their minds and update their vote from 'helpful' to 'not helpful' or vice versa. The updated_at timestamp tracks when votes were changed, providing audit capability for vote manipulation detection.\n\nThe operation enforces a critical business rule: reviewers cannot vote on their own reviews. This prevents self-promotion and maintains voting integrity. The system validates that the authenticated customer ID does not match the review author's customer ID before accepting the vote.\n\nHelpful vote counts are aggregated and displayed publicly on each review, contributing to the 'Most Helpful' sorting algorithm which ranks reviews by net helpful votes (helpful votes minus not-helpful votes). Reviews with higher helpful counts appear first when customers sort by 'Most Helpful', directly influencing which feedback is most prominently featured.\n\nNot-helpful votes are recorded in the database but are not publicly displayed to customers to avoid creating negative sentiment around reviews. These votes still contribute to the internal helpfulness score calculation and can inform admins about potentially problematic reviews that receive high not-helpful vote counts.\n\nThe voting system integrates with review moderation workflows - reviews that receive unusually high not-helpful vote counts may be flagged for admin review to verify they meet content quality standards. The system also monitors for suspicious voting patterns such as coordinated voting from new accounts, which could indicate vote manipulation attempts.\n\nRelated operations include review retrieval endpoints that display helpful vote counts and implement 'Most Helpful' sorting, and review moderation endpoints that use voting patterns as quality signals.","parameters":[{"name":"reviewId","description":"Unique identifier of the product review being voted on for helpfulness","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote information indicating whether the customer found the review helpful or not helpful","typeName":"IShoppingMallReview.IVote"},"responseBody":{"description":"Confirmation of vote submission with updated helpfulness counts for the review","typeName":"IShoppingMallReviewHelpfulnessVote"},"authorizationRole":"customer","authorizationType":null,"name":"vote","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must exist before a customer can vote on its helpfulness. The review must be created and published (approved status) so that customers can evaluate and vote on it."}],"accessor":["shoppingMall","customer","reviews","vote"]},{"specification":"This operation retrieves a paginated and filtered list of seller responses to customer product reviews. Seller responses are replies posted by sellers to address customer reviews on their products. The endpoint supports complex search criteria including filtering by response status (pending moderation, approved, rejected), seller ID, review association, moderation state, and date ranges. This operation is essential for both sellers to manage their response history and admins to moderate seller responses before publication. The response includes complete seller response information with associated review context, seller details, and moderation status. This endpoint operates on the shopping_mall_seller_responses table which tracks all seller replies to customer reviews with moderation workflow support.","path":"/shoppingMall/seller/sellerResponses","method":"patch","summary":"Search and retrieve filtered, paginated list of seller responses to product reviews","description":"Retrieve a comprehensive, paginated list of seller responses to customer product reviews with advanced filtering and search capabilities. This operation provides access to all seller responses across the platform based on the requesting user's role and permissions.\n\nSeller responses represent replies posted by sellers to customer reviews on their products. Each response undergoes moderation workflow before publication, requiring admin approval to ensure professional and policy-compliant communication. Sellers can respond to reviews to address customer concerns, provide explanations, thank customers for positive feedback, and build customer relationships.\n\nThe operation supports complex search and filtering criteria including response moderation status (pending_moderation, approved, rejected), seller identification, associated review ID, date ranges, and text content search. This enables sellers to manage their response history and admins to efficiently moderate pending responses.\n\nSecurity and role-based access control ensure that sellers can only view and search their own responses, while admins have platform-wide visibility for moderation purposes. The response data includes complete seller response information with associated review context, seller business details, moderation status, timestamps, and soft deletion status.\n\nThis operation integrates with the product review system defined in the shopping_mall_reviews table, enabling navigation from reviews to seller responses and supporting the complete review-response workflow. Pagination parameters allow efficient handling of large response datasets, and sorting options (by creation date, status, helpfulness) provide flexible result ordering.\n\nThe endpoint is critical for seller reputation management, enabling sellers to engage with customer feedback professionally and for admins to maintain communication quality standards across the marketplace.","parameters":[],"requestBody":{"description":"Search and filter criteria for seller responses including status, seller ID, review association, date ranges, and pagination parameters","typeName":"IShoppingMallSellerResponse.IRequest"},"responseBody":{"description":"Paginated list of seller response summary information matching the search criteria with pagination metadata","typeName":"IPageIShoppingMallSellerResponse.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/sellerResponses","method":"post"},"description":"Seller responses must be created before they can be searched and retrieved. The seller needs to have posted at least one response to customer reviews to populate the search results."}],"accessor":["shoppingMall","seller","sellerResponses","index"]},{"specification":"This operation retrieves a paginated and filtered list of seller responses to customer product reviews. Seller responses are replies posted by sellers to address customer reviews on their products. The endpoint supports complex search criteria including filtering by response status (pending moderation, approved, rejected), seller ID, review association, moderation state, and date ranges. This operation is essential for both sellers to manage their response history and admins to moderate seller responses before publication. The response includes complete seller response information with associated review context, seller details, and moderation status. This endpoint operates on the shopping_mall_seller_responses table which tracks all seller replies to customer reviews with moderation workflow support.","path":"/shoppingMall/admin/sellerResponses","method":"patch","summary":"Search and retrieve filtered, paginated list of seller responses to product reviews","description":"Retrieve a comprehensive, paginated list of seller responses to customer product reviews with advanced filtering and search capabilities. This operation provides access to all seller responses across the platform based on the requesting user's role and permissions.\n\nSeller responses represent replies posted by sellers to customer reviews on their products. Each response undergoes moderation workflow before publication, requiring admin approval to ensure professional and policy-compliant communication. Sellers can respond to reviews to address customer concerns, provide explanations, thank customers for positive feedback, and build customer relationships.\n\nThe operation supports complex search and filtering criteria including response moderation status (pending_moderation, approved, rejected), seller identification, associated review ID, date ranges, and text content search. This enables sellers to manage their response history and admins to efficiently moderate pending responses.\n\nSecurity and role-based access control ensure that sellers can only view and search their own responses, while admins have platform-wide visibility for moderation purposes. The response data includes complete seller response information with associated review context, seller business details, moderation status, timestamps, and soft deletion status.\n\nThis operation integrates with the product review system defined in the shopping_mall_reviews table, enabling navigation from reviews to seller responses and supporting the complete review-response workflow. Pagination parameters allow efficient handling of large response datasets, and sorting options (by creation date, status, helpfulness) provide flexible result ordering.\n\nThe endpoint is critical for seller reputation management, enabling sellers to engage with customer feedback professionally and for admins to maintain communication quality standards across the marketplace.","parameters":[],"requestBody":{"description":"Search and filter criteria for seller responses including status, seller ID, review association, date ranges, and pagination parameters","typeName":"IShoppingMallSellerResponse.IRequest"},"responseBody":{"description":"Paginated list of seller response summary information matching the search criteria with pagination metadata","typeName":"IPageIShoppingMallSellerResponse.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[],"accessor":["shoppingMall","admin","sellerResponses","index"]},{"specification":"This operation retrieves detailed information about a specific seller response to a customer product review by its unique identifier. Seller responses are replies posted by sellers to address customer reviews on their products. The endpoint returns complete response details including response text, moderation status, associated review information, seller details, timestamps, edit history, and soft deletion status. This operation is used when viewing full seller response details, editing existing responses, or moderating responses. It operates on the shopping_mall_seller_responses table which tracks all seller replies with moderation workflow.","path":"/shoppingMall/seller/sellerResponses/{responseId}","method":"get","summary":"Retrieve detailed information for a specific seller response by ID","description":"Retrieve comprehensive detailed information about a specific seller response to a customer product review using the response's unique identifier. This operation provides complete response data including the response text content, moderation status, associated review context, and seller information.\n\nSeller responses are replies posted by sellers to customer reviews on their products, enabling sellers to address customer concerns, provide explanations, offer solutions, or thank customers for positive feedback. All seller responses undergo moderation workflow requiring admin approval before publication to ensure professional communication and policy compliance.\n\nThe operation returns complete seller response details including the response text (maximum 2000 characters), current moderation status (pending_moderation, approved, rejected), associated review information with the original customer review content and rating, seller business details, submission and last edit timestamps, and soft deletion status. This comprehensive data supports seller response management, admin moderation workflows, and customer display of seller engagement.\n\nSecurity and role-based access control ensure that sellers can only view their own responses while admins have platform-wide access for moderation purposes. The endpoint validates that the requesting user has appropriate permissions to access the specific seller response.\n\nThis operation integrates with the shopping_mall_reviews table to provide complete review-response context, enabling display of seller responses beneath customer reviews on product pages. The response data includes whether the response has been edited (updated_at differs from created_at), supporting the '7-day edit window' business rule where sellers can modify responses within 7 days of submission.\n\nThe endpoint is essential for sellers to view and edit their responses, for admins to moderate pending responses and review policy compliance, and for displaying approved seller responses to customers on product detail pages as part of the trusted review ecosystem.","parameters":[{"name":"responseId","description":"Unique identifier of the seller response to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed information for the seller response including response text, moderation status, associated review context, and seller details","typeName":"IShoppingMallSellerResponse"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/sellerResponses","method":"post"},"description":"Seller response must be created before it can be retrieved by ID. The POST operation creates the seller response record in the shopping_mall_seller_responses table with the responseId that is required to retrieve the specific response details."}],"accessor":["shoppingMall","seller","sellerResponses","at"]},{"specification":"This operation retrieves detailed information about a specific seller response to a customer product review by its unique identifier. Seller responses are replies posted by sellers to address customer reviews on their products. The endpoint returns complete response details including response text, moderation status, associated review information, seller details, timestamps, edit history, and soft deletion status. This operation is used when viewing full seller response details, editing existing responses, or moderating responses. It operates on the shopping_mall_seller_responses table which tracks all seller replies with moderation workflow.","path":"/shoppingMall/admin/sellerResponses/{responseId}","method":"get","summary":"Retrieve detailed information for a specific seller response by ID","description":"Retrieve comprehensive detailed information about a specific seller response to a customer product review using the response's unique identifier. This operation provides complete response data including the response text content, moderation status, associated review context, and seller information.\n\nSeller responses are replies posted by sellers to customer reviews on their products, enabling sellers to address customer concerns, provide explanations, offer solutions, or thank customers for positive feedback. All seller responses undergo moderation workflow requiring admin approval before publication to ensure professional communication and policy compliance.\n\nThe operation returns complete seller response details including the response text (maximum 2000 characters), current moderation status (pending_moderation, approved, rejected), associated review information with the original customer review content and rating, seller business details, submission and last edit timestamps, and soft deletion status. This comprehensive data supports seller response management, admin moderation workflows, and customer display of seller engagement.\n\nSecurity and role-based access control ensure that sellers can only view their own responses while admins have platform-wide access for moderation purposes. The endpoint validates that the requesting user has appropriate permissions to access the specific seller response.\n\nThis operation integrates with the shopping_mall_reviews table to provide complete review-response context, enabling display of seller responses beneath customer reviews on product pages. The response data includes whether the response has been edited (updated_at differs from created_at), supporting the '7-day edit window' business rule where sellers can modify responses within 7 days of submission.\n\nThe endpoint is essential for sellers to view and edit their responses, for admins to moderate pending responses and review policy compliance, and for displaying approved seller responses to customers on product detail pages as part of the trusted review ecosystem.","parameters":[{"name":"responseId","description":"Unique identifier of the seller response to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed information for the seller response including response text, moderation status, associated review context, and seller details","typeName":"IShoppingMallSellerResponse"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/sellerResponses","method":"post"},"description":"Seller response must be created before it can be retrieved by ID"}],"accessor":["shoppingMall","admin","sellerResponses","at"]},{"specification":"This operation creates a new seller response to a customer product review. Sellers can post one response per review to address customer concerns, provide explanations, thank customers for positive feedback, or offer solutions. The endpoint validates that the seller owns the product being reviewed and that no response already exists for this review (one response per review rule). All seller responses require admin moderation before publication to ensure professional communication and policy compliance. The operation creates a new record in the shopping_mall_seller_responses table with status set to pending_moderation.","path":"/shoppingMall/seller/sellerResponses","method":"post","summary":"Create new seller response to customer product review","description":"Create a new seller response to a customer product review, enabling sellers to engage with customer feedback professionally. This operation allows sellers to post replies to reviews on their products, addressing customer concerns, providing explanations, thanking customers for positive feedback, or offering solutions to reported issues.\n\nSeller responses are an essential component of the trusted review ecosystem defined in the product reviews and ratings requirements. By responding to reviews, sellers can build customer relationships, demonstrate responsiveness, clarify misunderstandings, and showcase their commitment to customer satisfaction. Professional and helpful seller responses can positively influence potential customers reading reviews.\n\nThe operation enforces the business rule that sellers can submit only one response per review. The system validates that the authenticated seller owns the product associated with the review being responded to, preventing sellers from responding to reviews on competitors' products. Additionally, the system checks that no existing response has been submitted for this review, as the shopping_mall_seller_responses table has a unique constraint on shopping_mall_review_id.\n\nAll seller responses undergo mandatory moderation workflow before publication. When a seller submits a response, the system creates a new record with status set to 'pending_moderation' and notifies the admin moderation team. This ensures that all seller communications maintain professional standards, comply with platform response guidelines (no offensive language, no requests to remove reviews, no promotional content), and protect the integrity of the review system.\n\nThe response text is limited to 2000 characters to encourage concise, focused communication. Sellers should address the specific points raised in the customer review, provide helpful information, and maintain a respectful tone even when responding to negative reviews. The system validates response content for prohibited patterns including profanity, contact information, and policy violations before accepting submission.\n\nSecurity and role-based access control ensure that only authenticated sellers can create responses, and sellers can only respond to reviews on their own products. The operation references the shopping_mall_reviews table to retrieve review details and validate seller ownership through the product relationship chain (review → product → seller).\n\nThis operation integrates with the notification system to alert the customer who wrote the review when the seller response is approved and published, fostering transparent communication between buyers and sellers. The moderation workflow protects customers from inappropriate seller communications while enabling constructive seller engagement.","parameters":[],"requestBody":{"description":"Seller response creation data including review ID, response text, and seller information","typeName":"IShoppingMallSellerResponse.ICreate"},"responseBody":{"description":"Newly created seller response with pending moderation status and complete response details","typeName":"IShoppingMallSellerResponse"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"Customer review must exist before seller can post a response to it"}],"accessor":["shoppingMall","seller","sellerResponses","create"]},{"specification":"This operation updates an existing seller response to a customer product review. Sellers can edit their responses within 7 days of submission to correct errors, add additional information, or improve clarity. The endpoint enforces the 7-day edit window business rule and requires re-moderation of edited responses. The updated response status is reset to pending_moderation to ensure admin review of changes. The operation validates seller ownership of the response and checks that the response is within the editable timeframe. After 7 days, responses become locked and cannot be modified. This operates on the shopping_mall_seller_responses table.","path":"/shoppingMall/seller/sellerResponses/{responseId}","method":"put","summary":"Update existing seller response to customer review within 7-day edit window","description":"Update an existing seller response to a customer product review, allowing sellers to edit their replies within 7 days of original submission. This operation enables sellers to correct errors, add additional information, improve clarity, or refine their communication with customers who reviewed their products.\n\nThe operation enforces the critical 7-day edit window business rule defined in the product reviews and ratings requirements. Sellers can modify response text within 7 days of the original submission (created_at), after which responses become permanently locked and cannot be edited. This policy balances seller flexibility with maintaining review integrity and preventing abuse of the response system.\n\nWhen a seller edits a response, the system validates that the authenticated seller owns the original response through the shopping_mall_seller_id foreign key. This prevents sellers from modifying other sellers' responses and maintains proper ownership boundaries. The system also validates that the response is within the 7-day edit window by comparing the current timestamp against the response's created_at timestamp.\n\nAll edited responses require re-moderation before republication to ensure the updated content continues to comply with platform response guidelines. When a seller submits an edited response, the system resets the status field to 'pending_moderation' and removes the response from public display until an admin reviews and approves the changes. This moderation workflow protects customers from inappropriate content while allowing sellers to improve their communications.\n\nThe operation updates the response_text field with the new content (validated for maximum 2000 characters, no profanity, no contact information, no promotional content). The updated_at timestamp is set to the current time, and the system displays an 'edited' badge on approved responses where updated_at differs from created_at, providing transparency to customers that the response was modified.\n\nSecurity and role-based access control ensure that only the seller who created the original response can edit it. Admins cannot directly edit seller responses but can reject them during moderation if they violate policies, requiring sellers to submit new responses instead.\n\nThis operation integrates with the shopping_mall_reviews table to maintain the review-response relationship and with the moderation system to queue edited responses for admin review. The edit history is tracked through the updated_at timestamp, and the soft deletion status (deleted_at) is preserved if applicable.\n\nThe endpoint is essential for seller reputation management, enabling sellers to refine their customer communication while maintaining platform communication quality standards through mandatory re-moderation of all edits.","parameters":[{"name":"responseId","description":"Unique identifier of the seller response to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated seller response data including revised response text","typeName":"IShoppingMallSellerResponse.IUpdate"},"responseBody":{"description":"Updated seller response with pending moderation status and revised content","typeName":"IShoppingMallSellerResponse"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/sellerResponses","method":"post"},"description":"Seller response must be created before it can be updated. The response identified by responseId must exist in the shopping_mall_seller_responses table for the update operation to succeed."}],"accessor":["shoppingMall","seller","sellerResponses","update"]},{"specification":"This operation permanently deletes a seller response to a customer product review. Sellers can delete their own responses at any time to remove them from public display. The operation performs a soft delete by setting the deleted_at timestamp, preserving the response data for audit purposes while removing it from customer view. The system validates that the authenticated seller owns the response before allowing deletion. Deleted responses are excluded from search results and review displays. This operates on the shopping_mall_seller_responses table which supports soft deletion through the deleted_at field.","path":"/shoppingMall/seller/sellerResponses/{responseId}","method":"delete","summary":"Delete seller response to customer review (soft delete)","description":"Permanently delete a seller response to a customer product review, removing it from public display while preserving the data for audit and compliance purposes. This operation enables sellers to remove their responses at any time if they wish to withdraw their reply or if the response is no longer relevant.\n\nThe operation performs a soft delete by setting the deleted_at timestamp in the shopping_mall_seller_responses table, as confirmed by the Prisma schema which includes a deleted_at field of type DateTime (nullable). Soft deletion preserves the complete response history for audit trail, moderation review, and potential dispute resolution while immediately hiding the response from customer view and excluding it from search results.\n\nWhen a seller deletes a response, the system validates that the authenticated seller owns the response through the shopping_mall_seller_id foreign key. This ownership validation prevents sellers from deleting other sellers' responses and maintains proper access control boundaries. Only the seller who originally created the response can delete it, except admins who have override capabilities for moderation purposes.\n\nDeleted seller responses are immediately removed from product detail pages where they would normally appear beneath customer reviews. The system excludes soft-deleted responses (where deleted_at is not null) from all customer-facing queries, search results, and review displays. However, the response data remains in the database for compliance with record retention policies and potential audit requirements.\n\nThe soft deletion approach ensures that if a response was part of a moderation workflow, dispute resolution, or compliance investigation, the complete record is preserved even after the seller removes it from public view. Admins can still access deleted responses through admin interfaces for review history and pattern analysis.\n\nSecurity and role-based access control ensure that only authenticated sellers can delete responses, and sellers can only delete their own responses. The operation validates seller ownership before executing the soft delete operation. Admins have separate moderation tools to remove policy-violating responses through the content moderation workflow.\n\nThis operation integrates with the product review system defined in the shopping_mall_reviews table, maintaining the review-response relationship even after deletion for historical reference. The soft deletion pattern supports data retention policies while providing sellers with control over their published communications.\n\nThe endpoint is important for seller account management, enabling sellers to manage their response history and remove responses they no longer wish to maintain publicly, while the platform retains complete audit trails for compliance and quality control purposes.","parameters":[{"name":"responseId","description":"Unique identifier of the seller response to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/sellerResponses","method":"post"},"description":"Seller response must be created before it can be deleted. The response identified by responseId must exist in the shopping_mall_seller_responses table for the delete operation to succeed."}],"accessor":["shoppingMall","seller","sellerResponses","erase"]}],"components":{"authorization":[{"name":"customer","description":"Registered users who can browse products, manage shopping carts and wishlists, place orders, track shipments, write reviews, and manage their delivery addresses. Customers have access to their order history and can request cancellations or refunds.","kind":"member"},{"name":"seller","description":"Vendor accounts who can list and manage their own products, handle inventory per SKU, view and process orders for their products, and access sales analytics. Sellers can create product variants with different colors, sizes, and options.","kind":"member"},{"name":"admin","description":"System administrators who have full access to manage all orders, products, users, and sellers across the platform. Admins can oversee the entire marketplace, handle dispute resolution, manage refund requests, and access comprehensive platform analytics.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIShoppingMallSystemConfig":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSystemConfig"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallChannel"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallEmailTemplate.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallEmailTemplate.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomer.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomer.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomerSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomerSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSeller.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSeller.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdminSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdminSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAddress":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAddress"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCategory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProduct.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProduct.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSku":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSku"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductImage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductImage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSkuColor":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSkuColor"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSkuSize":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSkuSize"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSkuOption":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSkuOption"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallInventoryTransaction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallInventoryTransaction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCartItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallWishlist.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallWishlist.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallWishlistItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallWishlistItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrder.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrder.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderStatusHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderStatusHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallShipment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallShipment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCancellation":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCancellation"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallRefundRequest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallRefundRequest"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallPaymentTransaction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPaymentTransaction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallPaymentMethod.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPaymentMethod.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallRefund":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallRefund"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSellerPayout":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSellerPayout"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReview":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReview"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReviewImage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReviewImage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSellerResponse.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSellerResponse.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IShoppingMallCustomer.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's email address for authentication."},"password":{"type":"string","minLength":8,"description":"Customer's password (plain text).\n\nBackend will hash before storage."},"name":{"type":"string","description":"Customer's full name."},"phone":{"type":"string","description":"Customer's phone number."}},"required":["email","password","name"],"x-autobe-prisma-schema":"shopping_mall_customers","description":"Customer registration request."},"IShoppingMallCustomer.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Customer account identifier."},"email":{"type":"string","format":"email","description":"Customer email."},"name":{"type":"string","description":"Customer name."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","name","token"],"x-autobe-prisma-schema":"shopping_mall_customers","description":"Customer authentication response.\n\nReturned after registration, login, or token refresh."},"IShoppingMallCustomer.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's registered email address for authentication."},"password":{"type":"string","description":"Customer's password for authentication verification."}},"required":["email","password"],"description":"Customer login credentials for authentication.\n\nContains only email and password for credential verification. All other authentication logic is handled server-side.","x-autobe-prisma-schema":"shopping_mall_customers"},"IShoppingMallCustomer.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token for renewal.\n\nCurrent refresh token to generate new access token."}},"required":["refresh_token"],"description":"Token refresh request.\n\nContains refresh token for access token renewal."},"IShoppingMallCustomer.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's registered email address.\n\nEmail associated with the customer account for which password reset is requested."}},"required":["email"],"description":"Password reset request data.\n\nContains email address to initiate password recovery workflow. System sends reset link to this email if account exists."},"IShoppingMallCustomer.IPasswordResetRequestResponse":{"type":"object","properties":{"message":{"type":"string","description":"Generic success message.\n\nSecurity-conscious message that doesn't reveal whether email exists: 'If an account exists with that email address, you will receive password reset instructions.'"}},"required":["message"],"description":"Password reset request confirmation.\n\nGeneric response for security, doesn't reveal whether email exists in system to prevent account enumeration."},"IShoppingMallCustomer.IPasswordReset":{"type":"object","properties":{"token":{"type":"string","description":"Password reset token from email.\n\nUnique token sent in reset email, valid for 1 hour."},"new_password":{"type":"string","minLength":8,"description":"New password for the account.\n\nMust meet security requirements: 8+ characters with uppercase, lowercase, number, and special character."}},"required":["token","new_password"],"description":"Password reset completion data.\n\nContains reset token from email and new password to complete password recovery."},"IShoppingMallCustomer.IPasswordResetResponse":{"type":"object","properties":{"message":{"type":"string","description":"Success confirmation message.\n\nConfirms password was successfully reset and sessions were invalidated."}},"required":["message"],"description":"Password reset success confirmation.\n\nIndicates password update completed successfully."},"IShoppingMallCustomer.IEmailVerification":{"type":"object","properties":{"token":{"type":"string","description":"Email verification token.\n\nUnique token from verification email, valid for 24 hours."}},"required":["token"],"description":"Email verification request data.\n\nContains verification token from registration email."},"IShoppingMallCustomer.IEmailVerificationResponse":{"type":"object","properties":{"message":{"type":"string","description":"Verification success message.\n\nConfirms email was verified and account is now active."}},"required":["message"],"description":"Email verification success response.\n\nConfirmation that email verification completed."},"IShoppingMallCustomer.IResendVerification":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's registered email.\n\nEmail address to resend verification link."}},"required":["email"],"description":"Resend verification email request.\n\nContains email for verification link resend."},"IShoppingMallCustomer.IResendVerificationResponse":{"type":"object","properties":{"message":{"type":"string","description":"Generic success message.\n\nSecurity message that doesn't reveal email existence."}},"required":["message"],"description":"Verification email resend confirmation.\n\nGeneric response for security."},"IShoppingMallCustomer.IPasswordChange":{"type":"object","properties":{"current_password":{"type":"string","description":"Current account password.\n\nRequired for verification before password change."},"new_password":{"type":"string","minLength":8,"description":"New password for the account.\n\nMust meet security requirements."}},"required":["current_password","new_password"],"description":"Password change request data.\n\nContains current password for verification and new password."},"IShoppingMallCustomer.IPasswordChangeResponse":{"type":"object","properties":{"message":{"type":"string","description":"Success message.\n\nConfirms password changed and sessions invalidated."}},"required":["message"],"description":"Password change confirmation.\n\nIndicates successful password update."},"IShoppingMallCustomer.ILogout":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Session refresh token to revoke.\n\nToken identifying the session to terminate."}},"required":["refresh_token"],"description":"Logout request data.\n\nContains refresh token of session to terminate."},"IShoppingMallCustomer.ILogoutResponse":{"type":"object","properties":{"message":{"type":"string","description":"Logout confirmation.\n\nConfirms session terminated successfully."}},"required":["message"],"description":"Logout success response.\n\nConfirmation of session termination."},"IShoppingMallCustomer.ILogoutAllResponse":{"type":"object","properties":{"message":{"type":"string","description":"Success message.\n\nConfirms all sessions terminated."},"sessions_revoked":{"type":"integer","description":"Count of revoked sessions.\n\nNumber of sessions that were terminated."}},"required":["message","sessions_revoked"],"description":"Logout all devices response.\n\nConfirms termination of all sessions with count."},"IShoppingMallSeller.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Seller email."},"password":{"type":"string","minLength":8,"description":"Seller password (plain text)."},"business_name":{"type":"string","description":"Business name."},"business_type":{"type":"string","description":"Business type."},"contact_person_name":{"type":"string","description":"Contact person."},"phone":{"type":"string","description":"Phone number."},"business_address":{"type":"string","description":"Business address."},"tax_id":{"type":"string","description":"Tax ID."}},"required":["email","password","business_name","business_type","contact_person_name","phone","business_address","tax_id"],"x-autobe-prisma-schema":"shopping_mall_sellers","description":"Seller registration request."},"IShoppingMallSeller.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Seller identifier."},"email":{"type":"string","format":"email","description":"Seller email."},"business_name":{"type":"string","description":"Business name."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","business_name","token"],"x-autobe-prisma-schema":"shopping_mall_sellers","description":"Seller authentication response."},"IShoppingMallSeller.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Seller's registered email."},"password":{"type":"string","description":"Account password."}},"required":["email","password"],"description":"Seller login credentials.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallSeller.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Seller's registered email address for password reset."}},"required":["email"],"description":"Password reset request for seller account."},"IShoppingMallSeller.IPasswordResetRequestResponse":{"type":"object","properties":{"message":{"type":"string","description":"Generic success confirmation message for security."}},"required":["message"],"description":"Password reset request confirmation."},"IShoppingMallSeller.IPasswordResetConfirm":{"type":"object","properties":{"token":{"type":"string","description":"Password reset token from email link."},"new_password":{"type":"string","minLength":8,"description":"New password meeting security requirements."}},"required":["token","new_password"],"description":"Password reset completion with token and new password."},"IShoppingMallSeller.IPasswordResetConfirmResponse":{"type":"object","properties":{"message":{"type":"string","description":"Password reset success confirmation."}},"required":["message"],"description":"Password reset completion confirmation."},"IShoppingMallSeller.IPasswordChange":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification."},"new_password":{"type":"string","minLength":8,"description":"New password meeting security requirements."}},"required":["current_password","new_password"],"description":"Seller password change request."},"IShoppingMallSeller.IPasswordChangeResponse":{"type":"object","properties":{"message":{"type":"string","description":"Password change success confirmation."}},"required":["message"],"description":"Password change completion confirmation."},"IShoppingMallSeller.IResendVerificationRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Seller email address for verification email resend."}},"required":["email"],"description":"Request to resend seller verification email."},"IShoppingMallSeller.IResendVerificationResponse":{"type":"object","properties":{"message":{"type":"string","description":"Verification email resend success confirmation."}},"required":["message"],"description":"Resend verification email confirmation."},"IShoppingMallSeller.IVerifyEmail":{"type":"object","properties":{"token":{"type":"string","description":"Email verification token from the verification link."}},"required":["token"],"description":"Email verification request with token."},"IShoppingMallSeller.IVerifyEmailResponse":{"type":"object","properties":{"message":{"type":"string","description":"Email verification success confirmation."}},"required":["message"],"description":"Email verification completion confirmation."},"IShoppingMallSeller.ISessionList":{"type":"object","properties":{"sessions":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSession"},"description":"Array of active seller sessions."},"total_count":{"type":"integer","description":"Total number of active sessions."}},"required":["sessions","total_count"],"description":"List of all active seller sessions with device and security information."},"IShoppingMallSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authentication session.\n\nThis UUID serves as the primary key for the session record and is used for session management operations such as revocation and detailed session retrieval."},"user_type":{"type":"string","description":"Type of user this session belongs to.\n\nDiscriminator field indicating whether this session belongs to a customer, seller, or admin. Values: 'customer', 'seller', 'admin'. Used to determine which user foreign key is populated."},"refresh_token_expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp for the refresh token.\n\nIndicates when the refresh token will expire and can no longer be used to generate new access tokens. Typically set to 30 days from session creation. Sessions with expired refresh tokens require re-authentication."},"ip_address":{"type":"string","description":"IP address from which the session was initiated.\n\nRecords the user's IP address at login time for security monitoring, fraud detection, and geographic analysis. Used to identify unusual login locations and support suspicious activity alerts."},"device_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detected device type from user agent parsing.\n\nIndicates whether the session originated from a mobile, tablet, or desktop device. Parsed from the user agent string to provide user-friendly device categorization in session management interfaces."},"device_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-friendly device name for session display.\n\nProvides human-readable device description such as 'Chrome on Windows', 'Safari on iPhone', or 'Firefox on Android'. Displayed in the active sessions list to help identify which device each session represents."},"browser_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser name parsed from user agent.\n\nIdentifies the web browser used for this session such as Chrome, Firefox, Safari, Edge, or other browsers. Useful for troubleshooting browser-specific issues and understanding user technology preferences."},"operating_system":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Operating system parsed from user agent.\n\nIndicates the operating system of the device used for login such as Windows, macOS, iOS, Android, or Linux. Provides additional device context and helps identify potential security issues or compatibility concerns."},"approximate_location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Approximate geographic location based on IP address.\n\nDerived from IP geolocation services, provides city and country information such as 'New York, US' or 'London, UK'. Helps users identify session locations and detect unauthorized access from unfamiliar geographic areas."},"is_revoked":{"type":"boolean","description":"Whether this session has been manually revoked.\n\nIndicates if the session has been terminated by the user or admin. Revoked sessions cannot be used for token refresh and are effectively logged out. When true, the session is no longer active."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was revoked.\n\nRecords the exact time when the session was manually terminated. Null if the session is still active. Used for security auditing and session lifecycle tracking."},"last_activity_at":{"type":"string","format":"date-time","description":"Timestamp of the last activity in this session.\n\nUpdated on each token refresh or important action. Used to track session usage and enforce the 30-day inactivity timeout rule. Sessions with last_activity_at older than 30 days are considered expired."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the session was created.\n\nRecords when the user logged in and established this session. Used to calculate session age and display login time in session management interfaces."}},"required":["id","user_type","refresh_token_expires_at","ip_address","is_revoked","last_activity_at","created_at"],"description":"Generic session information for detailed session view.\n\nProvides complete session information for detailed session inspection across all user types (customer, seller, admin). Used when retrieving specific session details by ID where comprehensive session data including device information, location, activity tracking, and revocation status is needed.\n\nThis type excludes the sensitive refresh_token field as it should never be exposed in response DTOs except during initial authentication (IAuthorized responses). The type includes all metadata necessary for security monitoring and session management while maintaining token security.","x-autobe-prisma-schema":"shopping_mall_sessions"},"IShoppingMallSeller.ISessionRevokeResponse":{"type":"object","description":"Confirmation response for successful seller session revocation.\n\nProvides confirmation that a specific seller session has been successfully revoked and terminated, including details about the revoked session for security transparency.","properties":{"message":{"type":"string","description":"Human-readable confirmation message such as 'Session revoked successfully'."},"revoked_session_id":{"type":"string","format":"uuid","description":"Unique identifier of the session that was revoked."},"device_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-friendly device name of the revoked session (e.g., 'Chrome on Windows')."}},"required":["message","revoked_session_id"]},"IShoppingMallSeller.ILogoutResponse":{"type":"object","properties":{"message":{"type":"string","description":"Logout success confirmation message."}},"required":["message"],"description":"Seller logout confirmation."},"IShoppingMallAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin email."},"password":{"type":"string","minLength":8,"description":"Admin password (plain text)."},"name":{"type":"string","description":"Admin name."},"role_level":{"type":"string","description":"Admin role."}},"required":["email","password","name","role_level"],"x-autobe-prisma-schema":"shopping_mall_admins","description":"Admin creation request."},"IShoppingMallAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin identifier."},"email":{"type":"string","format":"email","description":"Admin email."},"name":{"type":"string","description":"Admin name."},"role_level":{"type":"string","description":"Admin role."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","name","role_level","token"],"x-autobe-prisma-schema":"shopping_mall_admins","description":"Admin authentication response."},"IShoppingMallAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin email."},"password":{"type":"string","description":"Admin password."}},"required":["email","password"],"description":"Admin login credentials.","x-autobe-prisma-schema":"shopping_mall_admins"},"IShoppingMallAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token for generating new access token."}},"required":["refresh_token"],"description":"Token refresh request for admins."},"IShoppingMallAdmin.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin's registered email address."}},"required":["email"],"description":"Admin password reset request."},"IShoppingMallAdmin.IPasswordResetRequestResponse":{"type":"object","properties":{"message":{"type":"string","description":"Generic success confirmation message."}},"required":["message"],"description":"Password reset request confirmation."},"IShoppingMallAdmin.IPasswordReset":{"type":"object","properties":{"token":{"type":"string","description":"Password reset token from email."},"new_password":{"type":"string","minLength":8,"description":"New password meeting security requirements."}},"required":["token","new_password"],"description":"Admin password reset completion request."},"IShoppingMallAdmin.IPasswordResetResponse":{"type":"object","properties":{"message":{"type":"string","description":"Password reset success confirmation."}},"required":["message"],"description":"Password reset completion confirmation."},"IShoppingMallAdmin.IPasswordChange":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification."},"new_password":{"type":"string","minLength":8,"description":"New password meeting security requirements."}},"required":["current_password","new_password"],"description":"Admin password change request."},"IShoppingMallAdmin.IPasswordChangeResponse":{"type":"object","properties":{"message":{"type":"string","description":"Password change success confirmation."}},"required":["message"],"description":"Password change completion confirmation."},"IShoppingMallAdmin.ILogout":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token of the session to terminate."}},"required":["refresh_token"],"description":"Admin logout request."},"IShoppingMallAdmin.ILogoutResponse":{"type":"object","properties":{"message":{"type":"string","description":"Logout success confirmation."}},"required":["message"],"description":"Logout completion confirmation."},"IShoppingMallAdmin.IRevokeAllSessionsResponse":{"type":"object","properties":{"message":{"type":"string","description":"All sessions revocation confirmation."},"sessions_revoked":{"type":"integer","description":"Count of sessions that were revoked."}},"required":["message","sessions_revoked"],"description":"All sessions revocation confirmation with count."},"IShoppingMallSeller.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token for generating new access token."}},"required":["refresh_token"],"description":"Token refresh request for sellers."},"IShoppingMallAdmin.ISessionList":{"type":"object","properties":{"sessions":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdminSession"},"description":"Array of active admin sessions."},"total_count":{"type":"integer","description":"Total number of active sessions."}},"required":["sessions","total_count"],"description":"List of all active admin sessions."},"IShoppingMallAdmin.ISessionRevokeResponse":{"type":"object","properties":{"message":{"type":"string","description":"Session revocation success confirmation."}},"required":["message"],"description":"Session revocation confirmation."},"IShoppingMallSystemConfig.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page size."}},"required":[],"description":"System config search request."},"IShoppingMallSystemConfig":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier."},"config_key":{"type":"string","description":"Configuration key."},"config_value":{"type":"string","description":"Configuration value."},"description":{"type":"string","description":"Configuration description."}},"required":["id","config_key","config_value","description"],"description":"System configuration entry.","x-autobe-prisma-schema":"shopping_mall_system_configs"},"IShoppingMallSystemConfig.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_system_configs","properties":{"config_key":{"type":"string","description":"Key."},"config_value":{"type":"string","description":"Value."}},"required":["config_key","config_value"],"description":"Config creation."},"IShoppingMallSystemConfig.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_system_configs","properties":{"config_value":{"type":"string","description":"Value."}},"required":[],"description":"Config update."},"IShoppingMallChannel.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Channel search."},"IShoppingMallChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Channel identifier."},"channel_code":{"type":"string","description":"Channel code."},"channel_name":{"type":"string","description":"Channel name."}},"required":["id","channel_code","channel_name"],"description":"Sales channel.","x-autobe-prisma-schema":"shopping_mall_channels"},"IShoppingMallChannel.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_channels","properties":{"channel_code":{"type":"string","description":"Code."},"channel_name":{"type":"string","description":"Name."}},"required":["channel_code","channel_name"],"description":"Channel creation."},"IShoppingMallChannel.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_channels","properties":{"channel_name":{"type":"string","description":"Name."}},"required":[],"description":"Channel update."},"IShoppingMallEmailTemplate.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Template search."},"IShoppingMallEmailTemplate.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_email_templates","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"template_name":{"type":"string","description":"Name."}},"required":["id","template_name"],"description":"Template summary."},"IShoppingMallEmailTemplate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Template identifier."},"template_code":{"type":"string","description":"Template code."},"template_name":{"type":"string","description":"Template name."}},"required":["id","template_code","template_name"],"description":"Email template.","x-autobe-prisma-schema":"shopping_mall_email_templates"},"IShoppingMallEmailTemplate.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_email_templates","properties":{"template_code":{"type":"string","description":"Code."},"template_name":{"type":"string","description":"Name."}},"required":["template_code","template_name"],"description":"Template creation."},"IShoppingMallEmailTemplate.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_email_templates","properties":{"template_name":{"type":"string","description":"Name."}},"required":[],"description":"Template update."},"IShoppingMallCustomer.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Page size."}},"required":[],"description":"Customer search request parameters."},"IShoppingMallCustomer.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Customer identifier."},"email":{"type":"string","format":"email","description":"Email address."},"name":{"type":"string","description":"Full name."},"account_status":{"type":"string","description":"Account status."}},"required":["id","email","name","account_status"],"description":"Customer summary for list displays.","x-autobe-prisma-schema":"shopping_mall_customers"},"IShoppingMallCustomer":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique customer account identifier."},"email":{"type":"string","format":"email","description":"Customer's email address."},"name":{"type":"string","description":"Customer's full name."},"phone":{"type":"string","description":"Customer's phone number."},"account_status":{"type":"string","description":"Account status: active, suspended, deleted."},"email_verified":{"type":"boolean","description":"Email verification status."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Account last update timestamp."}},"required":["id","email","name","account_status","email_verified","created_at","updated_at"],"x-autobe-prisma-schema":"shopping_mall_customers","description":"Customer account entity.\n\nRepresents authenticated shopper accounts with profile information."},"IShoppingMallCustomer.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_customers","properties":{"name":{"type":"string","description":"Updated name."},"phone":{"type":"string","description":"Updated phone."},"account_status":{"type":"string","description":"Updated status."}},"required":[],"description":"Customer update payload."},"IShoppingMallCustomerSession.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"device_type":{"type":"string","description":"Filter by device type.\n\nValid values: mobile, tablet, desktop"},"start_date":{"type":"string","format":"date-time","description":"Filter sessions created after this timestamp."},"end_date":{"type":"string","format":"date-time","description":"Filter sessions created before this timestamp."}},"required":[],"description":"Search criteria for retrieving customer sessions.\n\nSupports filtering by device type and date ranges with pagination controls."},"IShoppingMallSeller.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."},"limit":{"type":"integer","description":"Limit."}},"required":[],"description":"Seller search."},"IShoppingMallSeller.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sellers","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"email":{"type":"string","format":"email","description":"Email."},"business_name":{"type":"string","description":"Business."}},"required":["id","email","business_name"],"description":"Seller summary."},"IShoppingMallSeller":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Seller account identifier."},"email":{"type":"string","format":"email","description":"Seller email address."},"business_name":{"type":"string","description":"Business name displayed to customers."},"business_type":{"type":"string","description":"Business entity type."},"contact_person_name":{"type":"string","description":"Primary contact name."},"phone":{"type":"string","description":"Business phone number."},"account_status":{"type":"string","description":"Account status."},"email_verified":{"type":"boolean","description":"Email verification status."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp."}},"required":["id","email","business_name","business_type","contact_person_name","phone","account_status","email_verified","created_at","updated_at"],"x-autobe-prisma-schema":"shopping_mall_sellers","description":"Seller account entity."},"IShoppingMallSeller.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sellers","properties":{"business_name":{"type":"string","description":"Name."}},"required":[],"description":"Seller update."},"IShoppingMallSeller.ILoginResponse":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sellers","properties":{"id":{"type":"string","format":"uuid","description":"Seller ID."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"Tokens."}},"required":["id","token"],"description":"Seller login response."},"IShoppingMallAdmin.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Admin search."},"IShoppingMallAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin account."},"email":{"type":"string","format":"email","description":"Admin's email address."},"name":{"type":"string","description":"Admin's full name."},"role_level":{"type":"string","description":"Admin role defining permission level.\n\nValid values: super_admin, order_manager, content_moderator, support_admin"},"is_active":{"type":"boolean","description":"Whether the admin account is currently active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created."}},"required":["id","email","name","role_level","is_active","created_at"],"description":"Summary information for admin accounts optimized for list displays.\n\nProvides essential admin identification, role, and status information for admin account management interfaces."},"IShoppingMallAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin identifier."},"email":{"type":"string","format":"email","description":"Admin email."},"name":{"type":"string","description":"Admin name."},"role_level":{"type":"string","description":"Admin role."},"is_active":{"type":"boolean","description":"Active status."},"email_verified":{"type":"boolean","description":"Email verified."},"mfa_enabled":{"type":"boolean","description":"MFA enabled."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp."}},"required":["id","email","name","role_level","is_active","email_verified","mfa_enabled","created_at","updated_at"],"x-autobe-prisma-schema":"shopping_mall_admins","description":"Admin account entity."},"IShoppingMallAdmin.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admins","properties":{"name":{"type":"string","description":"Name."}},"required":[],"description":"Admin update."},"IShoppingMallAdminSession.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"device_type":{"type":"string","description":"Filter by device type.\n\nValid values: mobile, tablet, desktop"},"start_date":{"type":"string","format":"date-time","description":"Filter sessions created after this timestamp."},"end_date":{"type":"string","format":"date-time","description":"Filter sessions created before this timestamp."}},"required":[],"description":"Search criteria for retrieving admin sessions.\n\nSupports filtering by device type and date ranges with pagination controls."},"IShoppingMallAddress.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Address search."},"IShoppingMallAddress":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Address identifier."},"recipient_name":{"type":"string","description":"Recipient name."},"phone_number":{"type":"string","description":"Phone number."},"address_line1":{"type":"string","description":"Street address."}},"required":["id","recipient_name","phone_number","address_line1"],"description":"Delivery address.","x-autobe-prisma-schema":"shopping_mall_addresses"},"IShoppingMallAddress.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_addresses","properties":{"recipient_name":{"type":"string","description":"Recipient."},"phone_number":{"type":"string","description":"Phone."},"address_line1":{"type":"string","description":"Street."},"city":{"type":"string","description":"City."},"state_province":{"type":"string","description":"State."},"postal_code":{"type":"string","description":"Postal."},"country":{"type":"string","description":"Country."}},"required":["recipient_name","phone_number","address_line1","city","state_province","postal_code","country"],"description":"Address creation."},"IShoppingMallAddress.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_addresses","properties":{"recipient_name":{"type":"string","description":"Recipient."},"city":{"type":"string","description":"City."}},"required":[],"description":"Address update."},"IShoppingMallCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Category search."},"IShoppingMallCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Category identifier."},"name":{"type":"string","description":"Category name."}},"required":["id","name"],"description":"Product category.","x-autobe-prisma-schema":"shopping_mall_categories"},"IShoppingMallCategory.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_categories","properties":{"name":{"type":"string","description":"Name."}},"required":["name"],"description":"Category creation."},"IShoppingMallCategory.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_categories","properties":{"name":{"type":"string","description":"Name."}},"required":[],"description":"Category update."},"IShoppingMallProduct.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Product search."},"IShoppingMallProduct.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_products","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"name":{"type":"string","description":"Name."}},"required":["id","name"],"description":"Product summary."},"IShoppingMallProduct":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Product identifier."},"name":{"type":"string","description":"Product name."},"description":{"type":"string","description":"Product description."}},"required":["id","name","description"],"description":"Product information.","x-autobe-prisma-schema":"shopping_mall_products"},"IShoppingMallProduct.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_products","properties":{"name":{"type":"string","description":"Name."},"base_price":{"type":"number","description":"Price."}},"required":["name","base_price"],"description":"Product creation."},"IShoppingMallProduct.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_products","properties":{"name":{"type":"string","description":"Name."}},"required":[],"description":"Product update."},"IShoppingMallSku.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"SKU search."},"IShoppingMallSku":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"SKU identifier."},"sku_code":{"type":"string","description":"SKU code."},"price":{"type":"number","description":"SKU price."}},"required":["id","sku_code","price"],"description":"Product SKU variant.","x-autobe-prisma-schema":"shopping_mall_skus"},"IShoppingMallSku.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_skus","properties":{"sku_code":{"type":"string","description":"Code."},"price":{"type":"number","description":"Price."}},"required":["sku_code","price"],"description":"SKU creation."},"IShoppingMallSku.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_skus","properties":{"price":{"type":"number","description":"Price."}},"required":[],"description":"SKU update."},"IShoppingMallProductImage.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"is_primary":{"type":"boolean","description":"Filter by primary image status."},"sku_id":{"type":"string","format":"uuid","description":"Filter by specific SKU variant."}},"required":[],"description":"Search criteria for retrieving product images.\n\nSupports filtering by primary status and SKU association."},"IShoppingMallProductImage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the product image."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product this image belongs to."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Specific SKU variant this image represents, if variant-specific."},"image_url":{"type":"string","description":"URL to the stored product image."},"display_order":{"type":"integer","description":"Order position for image gallery display.\n\nLower numbers appear first. First image (0) is main product image."},"is_primary":{"type":"boolean","description":"Whether this is the primary/main product image shown in listings."},"alt_text":{"type":"string","description":"Alternative text for accessibility and SEO."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the image was uploaded."}},"required":["id","shopping_mall_product_id","image_url","display_order","is_primary","created_at"],"description":"Product image entity for visual catalog display.\n\nRepresents uploaded product images with display ordering and variant association. Note: This table only has created_at, not updated_at.","x-autobe-prisma-schema":"shopping_mall_product_images"},"IShoppingMallProduct.IImageCreate":{"type":"object","properties":{"image_url":{"type":"string","description":"Image URL."}},"required":["image_url"],"description":"Image creation."},"IShoppingMallProduct.IImageUpdate":{"type":"object","properties":{"display_order":{"type":"integer","description":"Order."}},"required":[],"description":"Image update."},"IShoppingMallSkuColor.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"search":{"type":"string","description":"Search color names using partial matching."}},"required":[],"description":"Search criteria for retrieving SKU color variants.\n\nSupports text search on color names with pagination."},"IShoppingMallSkuColor":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the color variant."},"name":{"type":"string","description":"Color name displayed to customers.\n\nExamples: Navy Blue, Forest Green, Crimson Red."},"hex_code":{"type":"string","description":"Optional hex color code for visual swatch display.\n\nFormat: #RRGGBB for accurate color representation in UI."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the color variant was created."}},"required":["id","name","created_at"],"description":"SKU color variant attribute.\n\nRepresents a color option used for product variants. Note: This table only has created_at, not updated_at.","x-autobe-prisma-schema":"shopping_mall_sku_colors"},"IShoppingMallSkuColor.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_colors","properties":{"name":{"type":"string","description":"Name."}},"required":["name"],"description":"Color creation."},"IShoppingMallSkuColor.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_colors","properties":{"name":{"type":"string","description":"Name."}},"required":[],"description":"Color update."},"IShoppingMallSkuSize.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"category":{"type":"string","description":"Filter by size category.\n\nExamples: US Sizes, EU Sizes, One Size"}},"required":[],"description":"Search criteria for retrieving SKU size variants.\n\nSupports filtering by size category with pagination."},"IShoppingMallSkuSize":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_sizes","properties":{"id":{"type":"string","format":"uuid","description":"Size ID."},"value":{"type":"string","description":"Value."}},"required":["id","value"],"description":"Size variant."},"IShoppingMallSkuSize.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_sizes","properties":{"value":{"type":"string","description":"Value."}},"required":["value"],"description":"Size creation."},"IShoppingMallSkuSize.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_sizes","properties":{"value":{"type":"string","description":"Value."}},"required":[],"description":"Size update."},"IShoppingMallSkuOption.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"option_name":{"type":"string","description":"Filter by option name.\n\nExamples: Storage Capacity, Material Type"}},"required":[],"description":"Search criteria for retrieving SKU custom options.\n\nSupports filtering by option name with pagination."},"IShoppingMallSkuOption":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_options","properties":{"id":{"type":"string","format":"uuid","description":"Option ID."},"option_name":{"type":"string","description":"Name."},"option_value":{"type":"string","description":"Value."}},"required":["id","option_name","option_value"],"description":"Custom option."},"IShoppingMallSkuOption.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_options","properties":{"option_name":{"type":"string","description":"Name."},"option_value":{"type":"string","description":"Value."}},"required":["option_name","option_value"],"description":"Option creation."},"IShoppingMallSkuOption.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sku_options","properties":{"option_value":{"type":"string","description":"Value."}},"required":[],"description":"Option update."},"IShoppingMallInventoryTransaction.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"transaction_type":{"type":"string","description":"Filter by transaction type."},"transaction_status":{"type":"string","description":"Filter by transaction status."}},"required":[],"description":"Search criteria for retrieving inventory transactions.\n\nSupports filtering by type and status with pagination."},"IShoppingMallInventoryTransaction":{"type":"object","x-autobe-prisma-schema":"shopping_mall_inventory_transactions","properties":{"id":{"type":"string","format":"uuid","description":"Transaction ID."},"transaction_type":{"type":"string","description":"Type."}},"required":["id","transaction_type"],"description":"Inventory transaction."},"IShoppingMallCart":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Cart identifier."}},"required":["id"],"description":"Shopping cart.","x-autobe-prisma-schema":"shopping_mall_carts"},"IShoppingMallCartItem.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"seller_id":{"type":"string","format":"uuid","description":"Filter cart items by seller."}},"required":[],"description":"Search criteria for retrieving cart items.\n\nSupports filtering by seller with pagination."},"IShoppingMallCartItem":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"id":{"type":"string","format":"uuid","description":"Item ID."},"quantity":{"type":"integer","description":"Quantity."}},"required":["id","quantity"],"description":"Cart item."},"IShoppingMallCartItem.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"SKU ID."},"quantity":{"type":"integer","description":"Quantity."}},"required":["shopping_mall_sku_id","quantity"],"description":"Add to cart."},"IShoppingMallCartItem.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"quantity":{"type":"integer","description":"Quantity."}},"required":[],"description":"Update quantity."},"IShoppingMallWishlist.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Wishlist search."},"IShoppingMallWishlist.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlists","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"name":{"type":"string","description":"Name."}},"required":["id","name"],"description":"Wishlist summary."},"IShoppingMallWishlist":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Wishlist identifier."},"name":{"type":"string","description":"Wishlist name."}},"required":["id","name"],"description":"Customer wishlist.","x-autobe-prisma-schema":"shopping_mall_wishlists"},"IShoppingMallWishlist.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlists","properties":{"name":{"type":"string","description":"Name."}},"required":["name"],"description":"Wishlist creation."},"IShoppingMallWishlist.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlists","properties":{"name":{"type":"string","description":"Name."}},"required":[],"description":"Wishlist update."},"IShoppingMallWishlistItem.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."}},"required":[],"description":"Search criteria for retrieving wishlist items.\n\nSupports basic pagination for wishlist item lists."},"IShoppingMallWishlistItem":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlist_items","properties":{"id":{"type":"string","format":"uuid","description":"Item ID."},"created_at":{"type":"string","format":"date-time","description":"Created."}},"required":["id","created_at"],"description":"Wishlist item."},"IShoppingMallWishlistItem.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlist_items","properties":{"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"SKU ID."}},"required":["shopping_mall_sku_id"],"description":"Add to wishlist."},"IShoppingMallOrder.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Order search."},"IShoppingMallOrder.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_orders","properties":{"id":{"type":"string","format":"uuid","description":"Order ID."},"order_number":{"type":"string","description":"Order number."},"status":{"type":"string","description":"Status."}},"required":["id","order_number","status"],"description":"Order summary."},"IShoppingMallOrder":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Order identifier."},"order_number":{"type":"string","description":"Order number."},"status":{"type":"string","description":"Order status."}},"required":["id","order_number","status"],"description":"Customer order.","x-autobe-prisma-schema":"shopping_mall_orders"},"IShoppingMallOrder.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_orders","properties":{"delivery_address_id":{"type":"string","format":"uuid","description":"Address ID."},"payment_method_id":{"type":"string","format":"uuid","description":"Payment ID."},"shipping_method":{"type":"string","description":"Shipping."}},"required":["delivery_address_id","payment_method_id","shipping_method"],"description":"Order creation."},"IShoppingMallOrder.ICreateResponse":{"type":"object","properties":{"message":{"type":"string","description":"Message."},"order_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Order IDs."}},"required":["message","order_ids"],"description":"Order created."},"IShoppingMallOrder.ICancelRequest":{"type":"object","properties":{"cancellation_reason":{"type":"string","description":"Reason."}},"required":["cancellation_reason"],"description":"Cancel request."},"IShoppingMallOrder.ICancelResponse":{"type":"object","properties":{"cancellation_id":{"type":"string","format":"uuid","description":"Unique identifier of the created cancellation request record.\n\nThis ID references the shopping_mall_cancellations table entry that tracks the complete cancellation workflow including approval status, refund processing, and timeline information."},"order_id":{"type":"string","format":"uuid","description":"Unique identifier of the order being cancelled.\n\nReferences the shopping_mall_orders table record that contains the complete order information including items, pricing, delivery details, and current status."},"order_number":{"type":"string","description":"Human-readable order identifier displayed to customers.\n\nFormat: ORD-YYYYMMDD-NNNNNN (e.g., ORD-20251013-000001). This number is used for customer communication and order tracking throughout the platform."},"cancellation_status":{"type":"string","description":"Current status of the cancellation request workflow.\n\nValid values:\n- pending_approval: Request submitted, awaiting seller confirmation (for orders in confirmed/preparing_shipment states)\n- approved: Cancellation approved by seller or auto-approved, refund processing initiated\n- rejected: Seller rejected the cancellation request (customer notified with reason)\n- completed: Cancellation and refund fully processed, order marked as cancelled\n\nImmediate cancellations (for orders in early states like payment_confirmed or awaiting_seller_confirmation) are created with status 'approved' or 'completed' directly."},"refund_amount":{"type":"number","description":"Total amount to be refunded to the customer.\n\nTypically equals the order's total_amount including all items, shipping costs, and taxes. Calculated at the time of cancellation to ensure accurate refund processing through the payment gateway."},"refund_processed":{"type":"boolean","description":"Indicates whether the refund payment has been successfully processed to the customer's account.\n\nWhen true, the refund transaction has completed and funds have been returned to the customer's original payment method. When false, the refund is pending or in progress through the payment gateway."},"expected_refund_timeline":{"type":"string","description":"Human-readable description of when the customer can expect to receive their refund.\n\nTypically states '5-10 business days for credit/debit cards' or '24 hours for digital wallets'. Provides customer guidance on refund timing based on the original payment method used for the order."},"message":{"type":"string","description":"User-friendly confirmation message summarizing the cancellation status.\n\nExamples:\n- 'Your order has been cancelled successfully. You will receive a full refund within 5-10 business days.'\n- 'Your cancellation request has been submitted to the seller for approval. You will be notified of their decision within 24 hours.'\n- 'Your cancellation request is being processed. Refund will be issued shortly.'\n\nProvides immediate feedback to customers about the cancellation outcome and next steps."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the cancellation request was submitted by the customer.\n\nRecorded in ISO 8601 format with timezone information. Used for tracking cancellation request timing, enforcing seller response deadlines, and providing timeline information to customers."},"seller_response_deadline":{"type":"string","format":"date-time","description":"Deadline by which the seller must respond to the cancellation request.\n\nSet to 24 hours from requested_at timestamp for cancellations requiring seller approval. If the seller does not respond by this deadline, the cancellation is automatically approved per business rules. Null for immediate cancellations that do not require seller approval."}},"required":["cancellation_id","order_id","order_number","cancellation_status","refund_amount","refund_processed","message","requested_at"],"description":"Response confirming order cancellation request submission with workflow status and refund information.\n\nThis response provides customers with immediate feedback about their cancellation request, including whether the cancellation was processed immediately or requires seller approval. It contains essential information for tracking the cancellation workflow through completion and understanding when refunds will be received.\n\nFor immediate cancellations (orders in early states before seller confirmation), the response indicates the cancellation is approved or completed with refund processing initiated. For cancellations requiring approval (orders in confirmed or preparing_shipment states), the response shows pending_approval status and provides the seller response deadline.\n\nCustomers use this information to understand the cancellation outcome, track refund status, and know when to expect funds returned to their payment method. The response includes actionable timeline information and clear messaging about next steps in the cancellation and refund process."},"IShoppingMallOrder.IRefundCreate":{"type":"object","properties":{"refund_reason":{"type":"string","description":"Categorized reason for requesting the refund.\n\nValid values:\n- defective_damaged: Product arrived defective or was damaged during shipping\n- wrong_item: Wrong product or incorrect variant was delivered\n- does_not_match_description: Product does not match the listing description or images\n- changed_mind: Customer changed their mind about the purchase\n- found_better_price: Customer found the same product at a lower price elsewhere\n- quality_not_expected: Product quality did not meet customer expectations\n- other: Other reason not covered by predefined categories (requires detailed description)\n\nThe reason category helps sellers and admins quickly understand the refund request type and prioritize responses. Defective or incorrect item reasons typically receive faster approval."},"refund_description":{"type":"string","description":"Comprehensive customer explanation detailing why the refund is being requested.\n\nThis field provides detailed context beyond the categorized refund_reason, allowing customers to fully describe issues, defects, discrepancies, or concerns. The description should be specific and thorough to help reviewers understand the situation and make informed approval decisions.\n\nFor defective products, customers should describe the specific defect or damage. For wrong items, customers should explain what was received versus what was ordered. For quality issues, customers should detail how the product failed to meet expectations.\n\nMinimum character requirements ensure meaningful feedback rather than vague complaints. Detailed descriptions improve approval likelihood and help sellers identify product quality issues."},"refund_amount_requested":{"type":"number","description":"Monetary amount the customer is requesting to be refunded.\n\nFor full refunds, this typically equals the order's total_amount field including all items, shipping costs, and taxes. For partial refunds, this represents the specific amount being requested for particular issues or items.\n\nMust be a positive number greater than zero and cannot exceed the original order total_amount. The final approved refund amount may differ based on seller or admin review, particularly when sellers offer justified partial refunds."}},"required":["refund_reason","refund_description","refund_amount_requested"],"description":"Refund request creation data submitted by customers for delivered orders.\n\nCustomers use this request body when submitting refund requests for orders that have been delivered within the 30-day return window. The refund request initiates the approval workflow where sellers have 3 business days to respond before automatic approval occurs.\n\nThe request captures essential information for refund review including the categorized reason (enabling pattern analysis), detailed customer description (providing full context for reviewers), and requested refund amount (typically full order total but may be partial).\n\nThis information is evaluated by sellers first, who can approve full refunds, offer partial refunds with justification, or reject requests with detailed reasons. Rejected or disputed requests escalate to admin review for final binding decisions. The quality and completeness of the refund request data directly impacts approval likelihood and processing speed."},"IShoppingMallOrderStatusHistory.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"start_date":{"type":"string","format":"date-time","description":"Filter status changes after this timestamp."},"end_date":{"type":"string","format":"date-time","description":"Filter status changes before this timestamp."},"new_status":{"type":"string","description":"Filter by specific status value."}},"required":[],"description":"Search criteria for retrieving order status history.\n\nSupports filtering by date range and status with pagination."},"IShoppingMallOrderStatusHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the order status history record.\n\nThis primary key uniquely identifies each status transition event in the order lifecycle. Every status change creates a new history record with its own unique ID, enabling complete audit trail tracking and temporal analysis of order progression."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Reference to the order whose status changed.\n\nThis foreign key links the status history record to the specific order in the shopping_mall_orders table. All status transitions for a single order are tracked through multiple history records sharing this order reference, enabling complete lifecycle visibility."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Customer who triggered the status change if customer-initiated.\n\nThis optional foreign key references the shopping_mall_customers table and is populated when a customer action caused the status transition, such as order placement, cancellation requests, or delivery confirmation. Null when the change was triggered by seller, admin, or automated system processes."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Seller who triggered the status change if seller-initiated.\n\nThis optional foreign key references the shopping_mall_sellers table and is populated when a seller action caused the status transition, such as order confirmation, shipment updates, or seller-initiated cancellations. Null when the change was triggered by customer, admin, or automated system processes."},"shopping_mall_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin who triggered the status change if admin-initiated.\n\nThis optional foreign key references the shopping_mall_admins table and is populated when an administrator action caused the status transition, such as dispute resolution, manual order cancellations, or administrative status overrides. Null when the change was triggered by customer, seller, or automated system processes."},"previous_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Order status before this transition occurred.\n\nThis field captures the state the order was in immediately before this status change event. For the very first status history record when an order is created, this field is null since there was no previous status. For all subsequent transitions, this documents the source state of the transition, enabling validation of proper status lifecycle progression."},"new_status":{"type":"string","description":"Order status after this transition occurred.\n\nThis field captures the state the order transitioned into during this status change event. Valid values include pending_payment, payment_confirmed, awaiting_seller_confirmation, confirmed, processing, preparing_shipment, shipped, in_transit, out_for_delivery, delivered, completed, cancelled, refund_requested, refund_approved, refunded, and failed. This represents the destination state of the status transition and the current state after this history record was created."},"change_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Explanation for the status change event.\n\nThis optional field provides context about why the status transition occurred, such as 'payment_confirmed' for automated payment gateway callbacks, 'seller_shipped' for seller-initiated shipment updates, 'customer_cancelled' for customer cancellation requests, or 'auto_completed' for system-generated completion after delivery confirmation period. This reason helps administrators and users understand the cause of each status transition."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional details or context about the status change.\n\nThis optional free-text field allows actors (customers, sellers, admins) or the system to record supplementary information about the status transition. Examples include customer cancellation explanations, seller notes about shipment delays, admin comments on dispute resolution decisions, or system-generated error messages for failed transitions. This provides detailed context for audit trail and customer service purposes."},"is_system_generated":{"type":"boolean","description":"Indicates whether the status change was automatic or manually triggered.\n\nTrue indicates the status transition was triggered by automated system processes such as payment gateway callbacks, shipping carrier tracking updates, scheduled auto-completion workflows, or timeout-based auto-approvals. False indicates the transition was manually initiated by a user (customer, seller, or admin) through explicit action in the platform interface. This distinction is critical for analyzing workflow automation effectiveness and identifying manual intervention points."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this status change occurred.\n\nThis timestamp records the exact moment the status transition happened, providing precise temporal tracking for the order lifecycle. Combined with the new_status field, this enables calculation of time spent in each order state, fulfillment timeline analysis, and SLA compliance monitoring. The chronological sequence of created_at values across all history records for an order forms the complete timeline visualization."}},"required":["id","shopping_mall_order_id","new_status","is_system_generated","created_at"],"description":"Complete audit trail record of a single order status transition.\n\nThis entity represents one status change event in an order's lifecycle, documenting the transition from one state to another with complete context including who triggered the change, why it occurred, and when it happened. The shopping_mall_order_status_history table implements an append-only audit trail pattern, preserving every status transition for compliance, dispute resolution, and order lifecycle visibility.\n\nEach history record captures a snapshot of a status change event, including the source and destination statuses, the actor responsible for the change (customer, seller, admin, or system), the reason for the transition, and any additional explanatory notes. This comprehensive tracking enables reconstruction of the complete order journey from placement through fulfillment or cancellation.\n\nThe polymorphic actor pattern uses three optional foreign keys (shopping_mall_customer_id, shopping_mall_seller_id, shopping_mall_admin_id) where exactly one is populated based on who initiated the status change, or all are null for system-generated transitions. This design provides flexible actor tracking while maintaining referential integrity.\n\nStatus history records are immutable once created - they document historical events and should never be modified or deleted. This append-only pattern ensures audit trail integrity for compliance, dispute resolution, and forensic analysis of order processing issues.","x-autobe-prisma-schema":"shopping_mall_order_status_history"},"IShoppingMallOrderItem.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"item_status":{"type":"string","description":"Filter by item status."}},"required":[],"description":"Search criteria for retrieving order items.\n\nSupports filtering by item status with pagination."},"IShoppingMallOrderItem":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_items","properties":{"id":{"type":"string","format":"uuid","description":"Item ID."},"product_name":{"type":"string","description":"Product."},"quantity":{"type":"integer","description":"Quantity."}},"required":["id","product_name","quantity"],"description":"Order item."},"IShoppingMallShipment.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"shipment_status":{"type":"string","description":"Filter by shipment status."},"carrier_name":{"type":"string","description":"Filter by carrier name."}},"required":[],"description":"Search criteria for retrieving shipments.\n\nSupports filtering by status and carrier with pagination."},"IShoppingMallShipment":{"type":"object","x-autobe-prisma-schema":"shopping_mall_shipments","properties":{"id":{"type":"string","format":"uuid","description":"Shipment ID."},"tracking_number":{"type":"string","description":"Tracking."}},"required":["id","tracking_number"],"description":"Shipment."},"IShoppingMallShipment.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_shipments","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order ID."},"carrier_name":{"type":"string","description":"Carrier."},"tracking_number":{"type":"string","description":"Tracking."}},"required":["shopping_mall_order_id","carrier_name","tracking_number"],"description":"Shipment creation."},"IShoppingMallShipment.IUpdate":{"type":"object","properties":{"carrier_name":{"type":"string","description":"Shipping carrier name used for package transportation and delivery.\n\nThis field specifies the logistics company responsible for transporting the package from the seller to the customer. Common carrier names include national postal services, international courier services (FedEx, UPS, DHL), and regional/local delivery providers.\n\nUpdating the carrier name is useful when sellers need to correct initial carrier selection or when package routing changes due to carrier availability or service issues."},"tracking_number":{"type":"string","description":"Carrier tracking number for shipment tracking and status updates.\n\nThis unique identifier enables real-time package tracking through the carrier's tracking system. The tracking number format varies by carrier and is validated against carrier-specific patterns.\n\nUpdating the tracking number is necessary when correcting initially entered tracking information or when packages are rerouted and assigned new tracking identifiers by the carrier."},"shipping_method":{"type":"string","description":"Shipping service level used for this shipment.\n\nValid values include: standard (5-7 business days), express (2-3 business days), overnight (1 business day), or free_shipping (when order qualifies for free shipping promotion).\n\nThis field affects delivery timeline expectations and customer communication about when the package will arrive."},"shipment_status":{"type":"string","description":"Current processing and delivery status of the shipment.\n\nValid status values track the shipment lifecycle: label_created (shipping label generated but package not yet picked up), picked_up (carrier collected the package), in_transit (package moving through carrier network), out_for_delivery (package on delivery vehicle for final delivery), delivered (package successfully delivered to customer), exception (delivery issue or delay), failed_delivery (delivery attempt unsuccessful).\n\nSellers update this status as they receive updates from carriers or when manually tracking package progress. Status changes trigger customer notifications about their order delivery progress."},"estimated_delivery_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Carrier's estimated delivery date for the shipment.\n\nThis timestamp represents the expected delivery date provided by the shipping carrier, calculated based on the shipping method, origin location, destination address, and current package location in the carrier network.\n\nSellers can update this date when carriers revise delivery estimates due to delays, expedited processing, or changed delivery schedules. Updated delivery dates trigger customer notifications to manage delivery expectations."},"actual_delivery_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Actual confirmed delivery timestamp when package was delivered to customer.\n\nThis field is set when the carrier confirms successful package delivery, either through automated carrier API updates or manual seller confirmation. The actual delivery date is used for order completion workflows and payment release triggers.\n\nThis timestamp may differ from estimated_delivery_date due to early delivery, delays, or delivery exceptions that affect the actual delivery timeline."},"delivery_signature":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Delivery signature or proof of delivery information if provided by carrier.\n\nSome shipping methods require signature confirmation for package delivery. This field stores the signature data, delivery confirmation code, or proof of delivery reference provided by the carrier.\n\nDelivery signature information is particularly important for high-value shipments, age-restricted products, or deliveries requiring explicit recipient confirmation. It serves as evidence of successful delivery in case of delivery disputes."}},"required":[],"description":"Update payload for modifying shipment information and tracking details.\n\nThis type supports sellers updating shipping information after initial shipment creation, enabling correction of tracking numbers, updating carrier details, revising shipment status as packages move through delivery, and adjusting delivery estimates based on carrier updates.\n\nAll fields are optional to support partial updates. Sellers can update specific fields without providing all shipment information, allowing focused corrections and status updates throughout the delivery lifecycle.\n\nSellers use this update type when correcting initially entered tracking information, updating shipment status based on carrier notifications, adding delivery signatures or proof of delivery, revising estimated delivery dates when carrier schedules change, or changing shipping methods if packages are rerouted.","x-autobe-prisma-schema":"shopping_mall_shipments"},"IShoppingMallCancellation.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page."},"cancellation_status":{"type":"string","description":"Filter by cancellation workflow status."}},"required":[],"description":"Search criteria for retrieving cancellations.\n\nSupports filtering by status with pagination."},"IShoppingMallCancellation":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cancellations","properties":{"id":{"type":"string","format":"uuid","description":"Cancellation ID."},"cancellation_status":{"type":"string","description":"Status."}},"required":["id","cancellation_status"],"description":"Cancellation."},"IShoppingMallRefundRequest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve from the paginated refund request list. Must be a positive integer starting from 1. If null or omitted, defaults to page 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of records per page.\n\nControls how many refund request records are returned in a single page. Must be between 1 and 100. If null or omitted, uses platform default (typically 20). Larger limits reduce pagination requests but increase response size."},"refund_status":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Filter by refund workflow status.\n\nRestricts results to refund requests with specific status values. Valid values include: pending_review (newly submitted), pending_seller_response (awaiting seller action), approved (seller/admin approved), rejected (seller/admin rejected), processing (refund payment in progress), completed (refund fully processed). Multiple statuses can be specified to retrieve refunds in any of the listed states."},"order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific order identifier.\n\nRestricts results to refund requests associated with a particular order. Useful for viewing all refund requests related to a specific transaction."},"refund_reason":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Filter by refund reason categories.\n\nRestricts results to refund requests with specific reasons. Valid values: defective_damaged, wrong_item, does_not_match_description, changed_mind, found_better_price, quality_not_expected, other. Multiple reasons can be specified for inclusive filtering."},"requested_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by minimum request submission date.\n\nRestricts results to refund requests submitted on or after this timestamp. Used to find recent refunds or analyze refunds within specific time periods."},"requested_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by maximum request submission date.\n\nRestricts results to refund requests submitted on or before this timestamp. Combined with requested_at_from, creates a date range filter for temporal analysis."},"refund_amount_min":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Filter by minimum refund amount.\n\nRestricts results to refund requests with requested or approved amount greater than or equal to this value. Useful for identifying high-value refunds requiring additional scrutiny."},"refund_amount_max":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Filter by maximum refund amount.\n\nRestricts results to refund requests with requested or approved amount less than or equal to this value. Combined with refund_amount_min, creates amount range filtering."},"return_required":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by return requirement status.\n\nWhen true, returns only refund requests where product return is required. When false, returns refund requests not requiring product return (damaged items, small value, etc.). Null returns all refunds regardless of return requirement."},"sort_by":{"oneOf":[{"const":"requested_at"},{"const":"refund_amount"},{"const":"refund_status"},{"const":"seller_response_deadline"},{"type":"null"}],"description":"Field to sort results by.\n\nSpecifies which attribute to use for ordering results. Options include requested_at (submission date), refund_amount (refund value), refund_status (workflow state), seller_response_deadline (urgency). If null, defaults to requested_at descending (newest first)."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction.\n\nSpecifies ascending (asc) or descending (desc) order for the sort_by field. If null, defaults to descending for most fields to show recent/high-value items first."}},"required":[],"description":"Search and filter criteria for retrieving refund requests.\n\nProvides comprehensive filtering, sorting, and pagination parameters for querying the shopping_mall_refund_requests table. Enables customers to find their refund requests, sellers to manage pending approvals, and admins to oversee platform-wide refund operations.\n\nSupports role-based filtering where customers automatically filter to their own refunds through auth context, sellers filter to refunds for their products through auth context, and admins access all platform refunds. Multiple filter criteria can be combined for precise queries, such as finding all pending refunds over $100 submitted in the last 7 days.\n\nNote: customer_id and seller_id filtering is applied at the provider function level based on authenticated user context, not through request parameters."},"IShoppingMallRefundRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the refund request.\n\nPrimary key from shopping_mall_refund_requests table."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order for which refund is requested.\n\nForeign key reference to shopping_mall_orders table identifying the delivered order that the customer wants to refund."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Customer who submitted the refund request.\n\nForeign key reference to shopping_mall_customers table identifying the customer requesting the refund."},"reviewer_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Seller who reviewed the refund request.\n\nForeign key reference to shopping_mall_sellers table. Null if the seller has not yet reviewed the request or if admin reviewed without seller input."},"reviewer_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin who reviewed or overrode the refund decision.\n\nForeign key reference to shopping_mall_admins table. Populated when admin makes final decision on disputed refunds or overrides seller decisions."},"refund_reason":{"oneOf":[{"const":"defective_damaged"},{"const":"wrong_item"},{"const":"does_not_match_description"},{"const":"changed_mind"},{"const":"found_better_price"},{"const":"quality_not_expected"},{"const":"other"}],"description":"Categorized reason for the refund request.\n\nPredefined category selected by customer: defective_damaged (product defect or damage), wrong_item (incorrect product shipped), does_not_match_description (product differs from listing), changed_mind (customer preference), found_better_price (competitive pricing), quality_not_expected (quality below expectations), other (requires detailed explanation)."},"refund_description":{"type":"string","description":"Detailed explanation from customer about why refund is requested.\n\nCustomer's narrative describing the issue, providing context and justification for the refund request. This detailed explanation helps sellers and admins make informed decisions about refund approval."},"refund_amount_requested":{"type":"number","description":"Amount customer is requesting for refund.\n\nTypically the full order total, but can be partial refund amount in some cases. Represents the customer's desired refund amount."},"refund_amount_approved":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Amount approved by seller or admin, which can be partial refund.\n\nFinal approved refund amount after review. Can be less than requested amount for partial refund scenarios. Null if review has not been completed."},"refund_status":{"oneOf":[{"const":"pending_review"},{"const":"pending_seller_response"},{"const":"approved"},{"const":"rejected"},{"const":"processing"},{"const":"completed"}],"description":"Current workflow status of the refund request.\n\nTracks refund through approval workflow: pending_review (awaiting seller response), pending_seller_response (waiting for seller), approved (refund approved), rejected (denied), processing (payment being refunded), completed (refund finalized)."},"return_required":{"type":"boolean","description":"Whether customer must return the product for refund processing.\n\nWhen true, customer must ship product back and provide tracking before refund is processed. When false, refund proceeds without product return (defective items, low-value items)."},"return_tracking_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Tracking number for returned product shipment.\n\nProvided by customer when returning the product. Seller confirms receipt using this tracking before finalizing refund. Null if return not required or not yet shipped."},"review_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Notes from seller or admin during refund review.\n\nExplanation of the refund decision including justification for partial refunds, reasons for rejection, or approval conditions. Null if not yet reviewed."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when customer submitted the refund request.\n\nRecords when the refund request was initiated by the customer."},"seller_response_deadline":{"type":"string","format":"date-time","description":"Deadline for seller to respond to the refund request.\n\nCalculated as 3 business days from requested_at. If seller does not respond by this deadline, the refund is automatically approved per business rules."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when seller or admin reviewed the request.\n\nRecords when the refund decision was made. Null if still pending review."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when refund payment processing completed.\n\nRecords when the refund was fully processed and funds returned to customer. Null if refund not yet completed."}},"required":["id","shopping_mall_order_id","shopping_mall_customer_id","refund_reason","refund_description","refund_amount_requested","refund_status","return_required","requested_at","seller_response_deadline"],"description":"Complete refund request record with full workflow details.\n\nThis DTO represents a comprehensive refund request from the shopping_mall_refund_requests table, documenting the complete refund approval workflow from customer submission through seller/admin review to final refund processing.\n\nRefund requests are created when customers want to return delivered orders and receive payment reversal. The request captures why the customer wants a refund, how much they're requesting, and tracks the complete approval workflow including seller response deadlines, review decisions, return requirements, and payment processing status.\n\nThe workflow involves multiple actors: customers initiate requests, sellers review and approve/reject within 3 business days (or auto-approval), admins resolve disputes and make final binding decisions, and the system processes approved refunds through payment gateways.\n\nThis DTO is used for displaying complete refund request details to customers tracking their request status, to sellers reviewing and responding to refund requests, and to admins resolving disputes and monitoring refund operations across the platform.","x-autobe-prisma-schema":"shopping_mall_refund_requests"},"IShoppingMallRefundRequest.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_refund_requests","properties":{"refund_status":{"type":"string","description":"Status."}},"required":[],"description":"Refund update."},"IShoppingMallPaymentTransaction.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Transaction search."},"IShoppingMallPaymentTransaction.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_payment_transactions","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"amount":{"type":"number","description":"Amount."}},"required":["id","amount"],"description":"Transaction summary."},"IShoppingMallPaymentTransaction":{"type":"object","x-autobe-prisma-schema":"shopping_mall_payment_transactions","properties":{"id":{"type":"string","format":"uuid","description":"Transaction ID."},"amount":{"type":"number","description":"Amount."},"status":{"type":"string","description":"Status."}},"required":["id","amount","status"],"description":"Payment transaction."},"IShoppingMallPaymentMethod.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Method search."},"IShoppingMallPaymentMethod.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_payment_methods","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"payment_type":{"type":"string","description":"Type."}},"required":["id","payment_type"],"description":"Method summary."},"IShoppingMallPaymentMethod":{"type":"object","x-autobe-prisma-schema":"shopping_mall_payment_methods","properties":{"id":{"type":"string","format":"uuid","description":"Method ID."},"payment_type":{"type":"string","description":"Type."}},"required":["id","payment_type"],"description":"Payment method."},"IShoppingMallPaymentMethod.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_payment_methods","properties":{"payment_type":{"type":"string","description":"Type."},"gateway_token":{"type":"string","description":"Token."}},"required":["payment_type","gateway_token"],"description":"Method creation."},"IShoppingMallPaymentMethod.IUpdate":{"type":"object","properties":{"shopping_mall_billing_address_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Billing address associated with this payment method.\n\nReferences the shopping_mall_addresses table for complete billing address information. When provided, links the payment method to a specific saved address belonging to the customer. Null value indicates no specific billing address is associated.\n\nThe billing address must exist in the shopping_mall_addresses table and belong to the authenticated customer making the update. This ensures customers can only associate their own addresses with their payment methods."},"is_default":{"type":"boolean","description":"Whether this payment method should be set as the customer's default payment method.\n\nWhen set to true, the system automatically removes default status from any previously designated default payment method, ensuring only one payment method per customer is marked as default. The default payment method is pre-selected during checkout for customer convenience.\n\nDefault designation helps streamline the checkout process by automatically selecting the preferred payment method."},"card_expiry_month":{"oneOf":[{"type":"integer","minimum":1,"maximum":12},{"type":"null"}],"description":"Card expiration month for credit or debit cards.\n\nValid values range from 1 (January) to 12 (December). This field is applicable when updating expiration information for renewed credit or debit cards that maintain the same account number and gateway token.\n\nThe system validates that the month is within the valid range. When both expiry month and year are provided, the system validates the expiration date is in the future."},"card_expiry_year":{"oneOf":[{"type":"integer","minimum":2025},{"type":"null"}],"description":"Card expiration year for credit or debit cards.\n\nFour-digit year representing when the card expires. This field is applicable when updating expiration information for renewed credit or debit cards.\n\nThe system validates that the year is current or in the future to prevent invalid expiration dates. When combined with card_expiry_month, the complete expiration date is validated to ensure the card has not expired."},"nickname":{"oneOf":[{"type":"string","maxLength":50},{"type":"null"}],"description":"User-friendly label for the payment method.\n\nCustomers can assign memorable nicknames like 'My Visa', 'Work Card', 'Personal Account' to easily identify payment methods during checkout. Nicknames help organize multiple saved payment methods and improve the checkout experience.\n\nThis is an optional field that can be added, modified, or removed at any time."}},"required":[],"description":"Payment method update data for modifying saved payment instruments.\n\nThis DTO enables customers to update specific attributes of their saved payment methods including billing address association, default payment designation, card expiration dates for renewed cards, and display nicknames. All fields are optional, allowing partial updates to only the attributes that need modification.\n\nThe update operation enforces strict ownership validation, ensuring customers can only modify their own payment methods. When changing the default payment method, the system automatically manages default status across all payment methods to maintain data integrity with only one default per customer.\n\nThis update does not allow modification of the payment gateway token or core payment instrument identifier, as those would constitute creating a new payment method rather than updating an existing one.","x-autobe-prisma-schema":"shopping_mall_payment_methods"},"IShoppingMallRefund.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve. Page numbers start at 1. Used in combination with limit to implement offset-based pagination for navigating large result sets."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page.\n\nControls how many refund transaction records are returned in a single page. Maximum value is 100 to prevent excessive data transfer. Default value is typically 20-50 records per page."},"status":{"oneOf":[{"const":"pending"},{"const":"processing"},{"const":"completed"},{"const":"failed"},{"type":"null"}],"description":"Filter refund transactions by processing status.\n\nNarrows results to refunds in specific processing states. Valid values: pending (refund initiated but not yet processing), processing (refund being processed by payment gateway), completed (refund successfully processed and funds returned), failed (refund processing failed).\n\nNull or omitted means no status filtering - all statuses are included."},"refund_reason":{"oneOf":[{"const":"order_cancellation"},{"const":"defective_product"},{"const":"customer_request"},{"const":"wrong_item"},{"const":"policy_violation"},{"type":"null"}],"description":"Filter refunds by the reason for refund.\n\nNarrows results to refunds with specific reasons. Valid values: order_cancellation (refund due to cancelled order), defective_product (product was defective or damaged), customer_request (customer-initiated refund request), wrong_item (incorrect product delivered), policy_violation (admin-initiated refund for policy issues).\n\nNull or omitted means no reason filtering - all refund reasons are included."},"from_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date for filtering refunds by creation date.\n\nWhen provided, only refunds created on or after this timestamp are included in results. Used with to_date to define a date range for temporal filtering. Null or omitted means no start date filter."},"to_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date for filtering refunds by creation date.\n\nWhen provided, only refunds created on or before this timestamp are included in results. Used with from_date to define a date range for temporal filtering. Null or omitted means no end date filter."},"shopping_mall_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter refunds by specific order.\n\nWhen provided, returns only refunds associated with the specified order ID from the shopping_mall_orders table. Useful for viewing all refunds related to a particular order. Null or omitted means no order filtering."},"shopping_mall_payment_transaction_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter refunds by original payment transaction.\n\nWhen provided, returns only refunds associated with the specified payment transaction ID from the shopping_mall_payment_transactions table. Useful for financial reconciliation and tracking refunds for specific payments. Null or omitted means no payment transaction filtering."},"shopping_mall_refund_request_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter refunds by associated refund request.\n\nWhen provided, returns only refunds linked to the specified refund request ID from the shopping_mall_refund_requests table. Useful for tracking refund processing that originated from customer refund requests. Null or omitted means no refund request filtering."},"initiated_by_type":{"oneOf":[{"const":"customer"},{"const":"seller"},{"const":"admin"},{"const":"system"},{"type":"null"}],"description":"Filter refunds by the type of actor who initiated the refund.\n\nNarrows results based on who triggered the refund process. Valid values: customer (customer-initiated refund request), seller (seller-initiated refund for cancellation), admin (admin override or dispute resolution), system (automated refund processing).\n\nNull or omitted means no actor type filtering - refunds initiated by any actor are included."},"min_amount":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Minimum refund amount filter.\n\nWhen provided, only refunds with refund_amount greater than or equal to this value are included. Used with max_amount to define refund amount ranges for financial analysis. Null or omitted means no minimum amount filter."},"max_amount":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Maximum refund amount filter.\n\nWhen provided, only refunds with refund_amount less than or equal to this value are included. Used with min_amount to define refund amount ranges for identifying high-value or problematic refunds. Null or omitted means no maximum amount filter."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"refund_amount"},{"const":"completed_at"},{"const":"status"},{"type":"null"}],"description":"Field to sort results by.\n\nDetermines the ordering criterion for refund results. Valid values: created_at (refund initiation date), refund_amount (refund value), completed_at (refund completion date), status (processing status).\n\nDefault sorting is by created_at descending (newest refunds first) when null or omitted."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for results.\n\nControls whether results are sorted in ascending (asc) or descending (desc) order based on the sort_by field. Default is descending (desc) when null or omitted, showing most recent or highest values first."}},"required":[],"description":"Search and filter request for refund transactions.\n\nProvides comprehensive filtering, sorting, and pagination capabilities for retrieving refund transaction records from the shopping_mall_refunds table. This request type supports advanced search scenarios for customers tracking their refund history, sellers managing refund processing for their orders, and administrators overseeing platform-wide refund operations.\n\nAll filter parameters are optional, allowing flexible query construction from simple paginated lists to complex filtered searches by status, date ranges, order references, payment transaction references, refund request references, actor types, and refund amounts. The pagination parameters (page, limit) enable efficient retrieval of large refund datasets.\n\nRole-based access control is enforced at the business logic layer: customers see only their own refunds, sellers see refunds related to their products, and admins have unrestricted access to all platform refunds."},"IShoppingMallRefund":{"type":"object","x-autobe-prisma-schema":"shopping_mall_refunds","properties":{"id":{"type":"string","format":"uuid","description":"Refund ID."},"refund_amount":{"type":"number","description":"Amount."},"status":{"type":"string","description":"Status."}},"required":["id","refund_amount","status"],"description":"Refund."},"IShoppingMallSellerPayout.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Payout search."},"IShoppingMallSellerPayout":{"type":"object","x-autobe-prisma-schema":"shopping_mall_seller_payouts","properties":{"id":{"type":"string","format":"uuid","description":"Payout ID."},"net_payout_amount":{"type":"number","description":"Net amount."}},"required":["id","net_payout_amount"],"description":"Seller payout."},"IShoppingMallReview.IRequest":{"type":"object","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Filter reviews by specific product.\n\nReferences shopping_mall_products table. Returns only reviews for the specified product when provided."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Filter reviews by specific customer.\n\nReferences shopping_mall_customers table. Returns only reviews written by the specified customer when provided."},"rating":{"type":"integer","description":"Filter reviews by star rating level.\n\nReturns only reviews with the specified rating (1-5). Enables filtering to show only 5-star reviews, only 1-star reviews, etc.","minimum":1,"maximum":5},"status":{"type":"string","description":"Filter reviews by moderation status.\n\nValid values: pending_moderation, approved, rejected. Customers see only approved reviews; admins can filter by any status for moderation workflows."},"verified_purchase_only":{"type":"boolean","description":"Filter to show only verified purchase reviews.\n\nWhen true, returns only reviews where verified_purchase=true. Since all reviews are from verified purchases on this platform, this filter is always effectively true but included for API completeness."},"min_helpful_count":{"type":"integer","description":"Filter reviews with at least this many helpful votes.\n\nReturns reviews where helpful_count >= this value. Useful for finding highly-rated helpful reviews.","minimum":0},"created_after":{"type":"string","format":"date-time","description":"Filter reviews created after this timestamp.\n\nEnables date range filtering for recent reviews or reviews from specific time periods."},"created_before":{"type":"string","format":"date-time","description":"Filter reviews created before this timestamp.\n\nEnables date range filtering for older reviews or reviews from specific time periods."},"sort_by":{"type":"string","description":"Sort order for review results.\n\nSupported values:\n- most_recent: Newest reviews first (default)\n- most_helpful: Highest helpful count first\n- highest_rating: 5-star reviews first\n- lowest_rating: 1-star reviews first"},"page":{"type":"integer","description":"Page number for pagination (1-based).\n\nSpecifies which page of results to return. Defaults to 1 if not provided.","minimum":1},"limit":{"type":"integer","description":"Number of reviews per page.\n\nControls page size for pagination. Typical values range from 10-50. Default is 10 reviews per page.","minimum":1,"maximum":100}},"required":[],"description":"Search and filter parameters for retrieving product reviews.\n\nThis request DTO supports comprehensive review searching including filtering by product, customer, rating level, moderation status, helpfulness threshold, and date ranges. Pagination and sorting options enable efficient review browsing.\n\nCustomers use these filters to find relevant reviews when evaluating products. Sellers use them to monitor feedback on their products. Admins use them for moderation queue management.\n\nAll filter fields are optional, allowing flexible query construction from simple product review lists to complex filtered searches."},"IShoppingMallReview":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the product review.\n\nThis UUID serves as the primary key in the shopping_mall_reviews table and is used for all review-related operations including editing, deletion, and voting."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Customer who wrote this review (reviewer).\n\nReferences the shopping_mall_customers table. This foreign key establishes the review ownership and is used for authorization checks to ensure customers can only edit or delete their own reviews."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product being reviewed.\n\nReferences the shopping_mall_products table. Each review is associated with a specific product, and customers can submit only one review per product to prevent duplicate feedback."},"shopping_mall_sku_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Specific SKU variant reviewed (optional).\n\nReferences the shopping_mall_skus table. If provided, indicates the customer reviewed a specific color/size/option combination. Null means the review applies to the product generally rather than a specific variant."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order that enabled this verified purchase review.\n\nReferences the shopping_mall_orders table. This foreign key validates that the customer purchased and received the product, qualifying them to submit a verified review. Only customers with completed orders can review products."},"rating":{"type":"integer","description":"Star rating from 1 to 5 stars (required).\n\nRepresents the customer's satisfaction level: 5=Excellent, 4=Good, 3=Average, 2=Poor, 1=Terrible. This rating contributes to the product's aggregate rating displayed throughout the catalog and influences search ranking.","minimum":1,"maximum":5},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional review title or short summary.\n\nProvides a concise headline summarizing the customer's opinion. Limited to 100 characters. Helps other customers quickly understand the review's main point before reading the full text."},"review_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed review text.\n\nComprehensive written feedback about the product. Customers can submit rating-only reviews without text. When provided, must be at least 10 characters to ensure meaningful content, maximum 5000 characters. Validated for prohibited content including profanity and contact information."},"verified_purchase":{"type":"boolean","description":"Whether this review is from a verified purchase.\n\nAlways true in this platform since only customers who completed orders can review. This badge increases review credibility and helps customers identify authentic feedback from actual purchasers."},"status":{"type":"string","description":"Review moderation status.\n\nIndicates the current state in the moderation workflow:\n- pending_moderation: Awaiting admin approval\n- approved: Published and visible to customers\n- rejected: Violates platform policies\n\nAll reviews undergo moderation before publication to maintain quality standards."},"helpful_count":{"type":"integer","description":"Count of helpful votes.\n\nNumber of customers who found this review helpful. Aggregated from shopping_mall_review_helpfulness_votes where is_helpful is true. Higher helpful counts indicate more valuable reviews and influence 'Most Helpful' sorting."},"not_helpful_count":{"type":"integer","description":"Count of not-helpful votes.\n\nNumber of customers who marked this review as not helpful. Tracked internally for quality monitoring but not publicly displayed to avoid negative sentiment. Used by admins to identify potentially problematic reviews."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was originally submitted.\n\nRecords when the customer first created the review. Used for determining edit window eligibility (30 days from creation) and sorting reviews by recency."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last edited.\n\nShows when the review was last modified. Reviews with updated_at different from created_at display an 'edited' badge. Used for tracking review modification history."}},"required":["id","shopping_mall_customer_id","shopping_mall_product_id","shopping_mall_order_id","rating","verified_purchase","status","helpful_count","not_helpful_count","created_at","updated_at"],"description":"Complete product review entity with star rating and optional feedback.\n\nThis represents a customer's review of a product they purchased and received. Reviews can only be submitted by verified purchasers (customers with completed orders for the product), ensuring authentic feedback and building marketplace trust.\n\nEach review includes a mandatory star rating (1-5 scale) and optional written content (title and text). Customers can enhance reviews with up to 5 uploaded images. All reviews undergo moderation workflow before publication to maintain quality standards.\n\nReviews contribute to product aggregate ratings displayed throughout the catalog and influence search ranking. The helpfulness voting system allows customers to identify the most valuable reviews through community feedback.","x-autobe-prisma-schema":"shopping_mall_reviews"},"IShoppingMallReview.ICreate":{"type":"object","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product being reviewed.\n\nReferences the shopping_mall_products table. Identifies which product the customer is reviewing. The customer must have a completed order containing this product to be eligible to submit a review."},"shopping_mall_sku_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Specific SKU variant reviewed (optional).\n\nReferences the shopping_mall_skus table. If provided, indicates the customer is reviewing a specific color/size/option combination. If null, the review applies to the product generally."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order that enables this verified purchase review.\n\nReferences the shopping_mall_orders table. Must be a completed order (status='delivered') that contains the product being reviewed. This validates the customer's purchase eligibility."},"rating":{"type":"integer","description":"Star rating from 1 to 5 stars (required).\n\nMandatory field representing customer satisfaction: 5=Excellent, 4=Very Good, 3=Average, 2=Poor, 1=Terrible. Contributes to product aggregate rating.","minimum":1,"maximum":5},"title":{"type":"string","description":"Optional review title or short summary.\n\nProvides a concise headline for the review, maximum 100 characters. Helps other customers quickly understand the review's main point.","maxLength":100},"review_text":{"type":"string","description":"Optional detailed review text.\n\nComprehensive written feedback about the product. Minimum 10 characters when provided, maximum 5000 characters. Validated for prohibited content.","minLength":10,"maxLength":5000}},"required":["shopping_mall_product_id","shopping_mall_order_id","rating"],"description":"Review creation data transfer object for submitting new product reviews.\n\nThis DTO enables verified purchasers to submit product reviews with star ratings and optional written feedback. Only customers who have received products from completed orders can submit reviews.\n\nThe system validates that the customer has a delivered order containing the product, ensures the customer hasn't already reviewed the product (one review per customer per product), and checks that review content meets quality standards.\n\nAll submitted reviews enter moderation workflow with status 'pending_moderation' and require admin approval before publication. The verified_purchase flag is automatically set to true since only verified purchasers can access this endpoint.","x-autobe-prisma-schema":"shopping_mall_reviews"},"IShoppingMallReview.IUpdate":{"type":"object","properties":{"rating":{"type":"integer","description":"Updated star rating for the product on a 1-5 scale.\n\nThis represents the customer's revised satisfaction level with the product. Valid values are 1 (Terrible), 2 (Poor), 3 (Average), 4 (Very Good), and 5 (Excellent). The rating contributes to the product's aggregate rating calculation.\n\nChanging the rating triggers recalculation of the product's average rating and may affect the product's ranking in search results and category listings.","minimum":1,"maximum":5},"title":{"type":"string","description":"Updated short summary or headline for the product review.\n\nThis optional field provides a concise title that summarizes the customer's opinion or key point of their review. The title appears prominently in review displays and helps other customers quickly understand the review's main message.\n\nThe title is limited to 100 characters to maintain readability and ensure it displays properly across different devices and interfaces.","maxLength":100},"review_text":{"type":"string","description":"Updated detailed written feedback about the product.\n\nThis optional field contains the customer's comprehensive review text describing their experience with the product, its quality, performance, and any notable characteristics. While optional, detailed reviews provide valuable information to other customers.\n\nWhen provided, the review text must be at least 10 characters to ensure meaningful content and cannot exceed 5000 characters. The text is validated to prevent prohibited content including profanity, personal contact information, external URLs, and promotional material.","minLength":10,"maxLength":5000}},"required":[],"description":"Update data transfer object for modifying existing product reviews.\n\nThis DTO enables customers to edit their previously submitted reviews within the 30-day edit window as specified in the business requirements. All fields are optional, allowing customers to update only the aspects they wish to change.\n\nWhen a customer submits review updates, the modified content is re-submitted to the moderation workflow with status transitioning to 'pending_moderation'. This ensures that edited reviews maintain the same quality standards as new submissions.\n\nThe updated review will display an 'edited' badge showing the last modification date to maintain transparency. The edit history is preserved in audit logs accessible to administrators for moderation and dispute resolution purposes."},"IShoppingMallReview.IVote":{"type":"object","properties":{"is_helpful":{"type":"boolean","description":"Helpful?"}},"required":["is_helpful"],"description":"Helpfulness vote."},"IShoppingMallReviewHelpfulnessVote":{"type":"object","x-autobe-prisma-schema":"shopping_mall_review_helpfulness_votes","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the helpfulness vote record.\n\nThis UUID serves as the primary key and uniquely identifies each customer's vote on a review. The ID enables tracking and managing individual vote records, supporting vote updates when customers change their helpfulness assessment."},"is_helpful":{"type":"boolean","description":"Indicates whether the customer found the review helpful.\n\nTrue represents a 'Helpful' vote, signaling that the review provided valuable information for making purchase decisions. Helpful votes are aggregated and displayed publicly with the review.\n\nFalse represents a 'Not Helpful' vote, tracked internally but not publicly displayed to avoid negative sentiment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the helpfulness vote was originally cast.\n\nRecords when the customer first voted on the review's helpfulness, providing temporal context for vote activity and enabling analysis of voting patterns over time."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the helpfulness vote was last modified.\n\nTracks when customers changed their vote from 'helpful' to 'not helpful' or vice versa. When updated_at differs from created_at, it indicates the customer reconsidered their assessment."}},"required":["id","is_helpful","created_at","updated_at"],"description":"Helpfulness vote record for a product review.\n\nRepresents a customer's feedback on whether a specific product review was helpful. The voting system surfaces the most useful reviews by allowing community participation in identifying valuable feedback.\n\nEach vote uniquely associates a customer with a review and their helpfulness assessment. Helpful votes are displayed publicly and influence 'Most Helpful' sorting, while not-helpful votes are tracked internally for quality monitoring.\n\nSecurity note: Foreign keys to review and customer are excluded from this response DTO to prevent exposure of internal relationship IDs."},"IShoppingMallReviewImage.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination of review images.\n\nSpecifies which page of results to retrieve when browsing review images. Page numbers are 1-indexed, with 1 being the first page.\n\nDefaults to page 1 if not specified.","minimum":1},"limit":{"type":"integer","description":"Maximum number of review images to return per page.\n\nControls the page size for pagination. Since reviews can have up to 5 images as per business requirements, this limit typically ranges from 5 to 20.\n\nDefaults to 10 images per page if not specified.","minimum":1,"maximum":100},"sort":{"oneOf":[{"const":"display_order"},{"const":"created_at"},{"const":"created_at_desc"}],"description":"Sorting criteria for ordering review images.\n\nDetermines how images are ordered in results. Options include 'display_order' (default, showing images in author's intended sequence), 'created_at' for chronological ordering, or 'created_at_desc' for newest first.\n\nThe display_order sort respects the customer's intended image narrative sequence."}},"required":[],"description":"Request parameters for searching and filtering product review images.\n\nDefines pagination and sorting controls for retrieving customer-uploaded images associated with product reviews. Review images provide visual evidence for customer feedback.\n\nThis simplified request structure focuses on essential pagination and sorting, with the review ID coming from the path parameter rather than as a filter. Since the shopping_mall_review_images table only has basic fields (id, review_id, image_url, display_order, created_at), advanced filtering is not needed."},"IShoppingMallReviewImage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the review image."},"shopping_mall_review_id":{"type":"string","format":"uuid","description":"Parent review containing this image."},"image_url":{"type":"string","description":"Storage path or URL for the image."},"display_order":{"type":"integer","description":"Display position in gallery (1-based)."},"created_at":{"type":"string","format":"date-time","description":"When the image was uploaded."}},"required":["id","shopping_mall_review_id","image_url","display_order","created_at"],"description":"Customer-uploaded image attached to a product review.\n\nThis entity represents visual evidence and context images uploaded by customers with their reviews. Images enhance review credibility and help other customers visualize product quality and characteristics.","x-autobe-prisma-schema":"shopping_mall_review_images"},"IShoppingMallReviewImage.ICreate":{"type":"object","properties":{"image_url":{"type":"string","description":"Storage path or URL for the uploaded review image.\n\nThe system generates thumbnails and optimized versions for responsive display. Accepts JPEG, PNG, WebP formats with maximum 5MB file size."},"display_order":{"type":"integer","description":"Display position in the review image gallery.\n\n1-based index for ordering images. Customers can reorder images when editing reviews.","minimum":1}},"required":["image_url","display_order"],"description":"Review image upload data transfer object.\n\nThis DTO enables customers to upload visual evidence and context images with their product reviews. Up to 5 images can be uploaded per review in JPEG, PNG, or WebP formats with 5MB maximum per image.\n\nImages are particularly valuable for showcasing product quality, identifying defects in refund scenarios, and building trust through authentic customer photography.","x-autobe-prisma-schema":"shopping_mall_review_images"},"IShoppingMallSellerResponse.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page."}},"required":[],"description":"Response search."},"IShoppingMallSellerResponse.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_seller_responses","properties":{"id":{"type":"string","format":"uuid","description":"ID."},"response_text":{"type":"string","description":"Text."}},"required":["id","response_text"],"description":"Response summary."},"IShoppingMallSellerResponse":{"type":"object","x-autobe-prisma-schema":"shopping_mall_seller_responses","properties":{"id":{"type":"string","format":"uuid","description":"Response ID."},"response_text":{"type":"string","description":"Text."}},"required":["id","response_text"],"description":"Seller response."},"IShoppingMallSellerResponse.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_seller_responses","properties":{"shopping_mall_review_id":{"type":"string","format":"uuid","description":"Review ID."},"response_text":{"type":"string","description":"Text."}},"required":["shopping_mall_review_id","response_text"],"description":"Response creation."},"IShoppingMallSellerResponse.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_seller_responses","properties":{"response_text":{"type":"string","description":"Text."}},"required":[],"description":"Response update."},"IShoppingMallCustomerSession":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sessions","properties":{"id":{"type":"string","format":"uuid","description":"Session unique identifier."},"device_type":{"type":"string","description":"Device type: mobile, tablet, desktop."},"device_name":{"type":"string","description":"User-friendly device description."},"browser_name":{"type":"string","description":"Browser name."},"operating_system":{"type":"string","description":"Operating system."},"ip_address":{"type":"string","description":"IP address."},"approximate_location":{"type":"string","description":"Geographic location."},"created_at":{"type":"string","format":"date-time","description":"Login timestamp."},"last_activity_at":{"type":"string","format":"date-time","description":"Last activity."},"refresh_token_expires_at":{"type":"string","format":"date-time","description":"Token expiration."}},"required":["id","created_at","last_activity_at","refresh_token_expires_at"],"description":"Customer session information."},"IShoppingMallAdminSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin session."},"device_type":{"type":"string","description":"Device type: mobile, tablet, or desktop."},"device_name":{"type":"string","description":"User-friendly device name."},"browser_name":{"type":"string","description":"Browser name and version."},"operating_system":{"type":"string","description":"Operating system."},"approximate_location":{"type":"string","description":"Geographic location based on IP."},"ip_address":{"type":"string","description":"IP address of the session."},"created_at":{"type":"string","format":"date-time","description":"Session creation timestamp."},"last_activity_at":{"type":"string","format":"date-time","description":"Last activity timestamp."}},"required":["id","ip_address","created_at","last_activity_at"],"description":"Admin session details for security monitoring.","x-autobe-prisma-schema":"shopping_mall_sessions"}}}}