{"operations":[{"specification":"Guest user registration endpoint that creates a temporary guest account for browsing the discussion board platform. This operation allows unauthenticated visitors to establish a tracked session for analytics and potential conversion to full membership. Guest accounts are temporary, non-authenticated sessions that enable read-only access to public discussions while collecting basic metadata for conversion tracking and user experience optimization.","authorizationType":"join","description":"Creates a new guest session account for unauthenticated visitors to the discussion board platform. This endpoint enables temporary, non-authenticated access for browsing public discussions, topics, and content without requiring full registration. Guest accounts are tracked for analytics purposes, conversion metrics, and potential newsletter signups.\n\nGuest sessions are created with a unique session_id that identifies the visitor throughout their browsing experience. The system records optional metadata including email address (if guest subscribes to newsletter), IP address for security and geographic tracking, and user agent information for device type identification and compatibility analysis.\n\nUpon successful guest account creation, the system issues temporary JWT tokens (access token and refresh token) that enable tracked browsing sessions. The access token expires after 30 minutes and can be refreshed using the refresh token, which expires after 7 days. These tokens allow the platform to track guest engagement metrics including page views, visit duration, and content interests for conversion funnel analysis.\n\nGuest accounts are distinguished from full member accounts by their read-only privileges. Guests can view public discussions, browse categories, search content, and view user profiles, but cannot create topics, post replies, vote on content, or access member-only features. This limited access model encourages registration while providing value through content discovery.\n\nThe guest registration process supports the platform's growth strategy by enabling frictionless initial access while collecting data for conversion optimization. Guest email addresses can be used for targeted registration reminders and newsletter campaigns to convert visitors into active members.","summary":"Create temporary guest session for browsing public discussions","parameters":[],"requestBody":{"description":"Guest session creation information including optional email for newsletter signup and session tracking metadata","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"Authorized guest session with JWT access and refresh tokens for tracked browsing","typeName":"IDiscussionBoardGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Guest token refresh endpoint that renews expired access tokens using valid refresh tokens. This operation allows guests to maintain their browsing session without interruption by obtaining new access tokens. The refresh mechanism supports seamless long-term guest sessions for content exploration and conversion tracking.","authorizationType":"refresh","description":"Refreshes the JWT access token for guest users using a valid refresh token. This endpoint enables guests to maintain continuous browsing sessions without re-creating their guest account when the access token expires after 30 minutes.\n\nWhen a guest's access token expires, the client automatically sends the refresh token to this endpoint to obtain a new access token without disrupting the browsing experience. The system validates the refresh token's signature, expiration status, and revocation status before issuing new credentials.\n\nThe refresh token validation process checks that the token has not expired (7-day lifetime), has not been revoked through session termination, and corresponds to an active guest session record in the database. If validation succeeds, the system generates a fresh access token with updated expiration timestamp while maintaining the same guest session identity and metadata.\n\nThis refresh mechanism is critical for guest user experience, allowing extended browsing sessions for content exploration, research, and evaluation before committing to full registration. Guests can explore multiple discussion topics, search content, and navigate categories across multiple hours or days without authentication interruption.\n\nThe system may optionally implement refresh token rotation, where each refresh request generates both a new access token and a new refresh token, invalidating the old refresh token for enhanced security. This prevents refresh token reuse attacks while maintaining session continuity for legitimate guest users.\n\nIf the refresh token is invalid, expired, or revoked, the system returns an authentication error, prompting the guest to create a new guest session or register for a full member account to continue accessing the platform.","summary":"Refresh expired access token for guest browsing session","parameters":[],"requestBody":{"description":"Refresh token from the current guest session for obtaining new access token","typeName":"IDiscussionBoardGuest.IRefresh"},"responseBody":{"description":"New JWT access token with updated expiration for continued guest browsing","typeName":"IDiscussionBoardGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"Member registration endpoint that creates a new account and issues initial JWT authentication tokens. Members must provide a unique username, valid email address, and secure password meeting complexity requirements. Upon successful registration, the system creates the member account in pending verification status, sends an email verification link, and returns access and refresh tokens for immediate platform access. This operation is the entry point for new users to join the discussion board community.","authorizationType":"join","authorizationRole":null,"name":"join","path":"/auth/member/join","method":"post","summary":"Register new member account and issue initial JWT tokens","description":"Creates a new member account for the discussion board platform, allowing users to participate in economic and political discussions. This operation implements the registration workflow defined in the User Roles and Authentication requirements.\n\nThe registration process validates all input fields against business rules: username must be 3-30 characters (alphanumeric with hyphens and underscores), email must be unique and valid format, and password must meet security requirements (minimum 8 characters with uppercase, lowercase, number, and special character). The system checks username and email uniqueness across the discussion_board_members table to prevent duplicate accounts.\n\nUpon successful validation, the system creates a new member record with account_status set to 'pending_verification' and email_verified set to false. The password is hashed using bcrypt with cost factor 12 before storage in the password_hash field. The system generates a unique verification token and sends it to the provided email address, allowing the user to complete email verification within 24 hours.\n\nImmediately after account creation, the system generates JWT access and refresh tokens for the new member. The access token expires in 30 minutes and includes claims for userId, username, email, role (member), and permissions. The refresh token expires in 7 days (or 30 days if Remember Me is selected) and enables token renewal without re-authentication. These tokens are returned in the response, allowing the user to immediately access member features.\n\nThe operation sets initial default values for the member account: profile_visibility to 'public', activity_visibility to 'public', account_status to 'pending_verification', and is_active to true. Timestamps created_at and updated_at are set to the current time.\n\nThis endpoint is public (authorizationRole is null) as it must be accessible to unauthenticated users creating new accounts. After registration, users should verify their email to unlock full posting privileges, though basic browsing is available immediately with the issued tokens.","parameters":[],"requestBody":{"typeName":"IDiscussionBoardMember.ICreate","description":"Member registration information including username, email, password, and optional profile fields"},"responseBody":{"typeName":"IDiscussionBoardMember.IAuthorized","description":"Newly created member account information with JWT access and refresh tokens"},"prerequisites":[]},{"specification":"Member authentication endpoint that validates credentials and issues JWT access and refresh tokens for authenticated session access. Members provide their email (or username) and password. The system validates credentials against stored password hashes, checks account status and email verification, and generates new session tokens upon successful authentication. This operation enables returning members to access their accounts and participate in discussions.","authorizationType":"login","authorizationRole":null,"name":"login","path":"/auth/member/login","method":"post","summary":"Authenticate member and issue JWT access and refresh tokens","description":"Authenticates a registered member and creates a new authenticated session with JWT tokens. This operation implements the login workflow defined in the User Roles and Authentication requirements, providing secure access to the discussion board platform.\n\nThe authentication process validates the provided credentials (email or username and password) against the discussion_board_members table. The system retrieves the member record by email or username, then uses bcrypt to compare the submitted password with the stored password_hash. This cryptographic comparison ensures passwords are never transmitted or stored in plain text.\n\nBefore granting access, the system verifies multiple account eligibility criteria. First, it checks that the account exists and the password matches. Second, it verifies the email_verified field is true, as unverified accounts cannot log in per security requirements. Third, it checks the account_status field is 'active' (not 'suspended', 'banned', or 'deactivated'). If any validation fails, the system returns an error without revealing which specific check failed, preventing account enumeration attacks.\n\nThe system implements brute-force protection by tracking failed login attempts. After 5 consecutive failures within 15 minutes for the same account, the system temporarily locks the account for 30 minutes and sends a security notification email to the account owner. This is tracked through the discussion_board_login_history table with is_successful=false entries. During lockout, all login attempts are rejected with a message indicating the temporary restriction and remaining time.\n\nUpon successful authentication, the system creates a new session record in the discussion_board_sessions table with access_token_hash (hashed JWT access token), device_type and browser_info extracted from the user agent, ip_address and approximate location for security monitoring, and is_active set to true. The access token expires in 30 minutes (expires_at timestamp), while the refresh token in the related discussion_board_refresh_tokens table expires in 7 days (or 30 days if Remember Me is selected).\n\nThe system also records a successful login entry in discussion_board_login_history with is_successful=true, device information, IP address, and timestamp. This login history is displayed to users in their account security settings and used for detecting suspicious login patterns. The last_login_at and last_activity_at timestamps on the member record are updated to the current time.\n\nThe response returns both access and refresh tokens along with member account information including id, username, email, display_name, role ('member'), permissions array, reputation score from discussion_board_user_reputation table, and account metadata. The client stores the access token for API requests and the refresh token for obtaining new access tokens when the current one expires.\n\nThis endpoint is public (authorizationRole is null) as it must be accessible to unauthenticated users attempting to log in. After successful authentication, users can access all member features as defined in the permission matrix.","parameters":[],"requestBody":{"typeName":"IDiscussionBoardMember.ILogin","description":"Member login credentials including email or username and password"},"responseBody":{"typeName":"IDiscussionBoardMember.IAuthorized","description":"Authenticated member information with JWT access and refresh tokens for session management"},"prerequisites":[]},{"specification":"Token refresh endpoint that renews expired access tokens using valid refresh tokens without requiring re-authentication. Members submit their current refresh token, and the system validates it against stored token hashes in the discussion_board_refresh_tokens table. If valid and not revoked, the system generates a new access token (and optionally a new refresh token through token rotation) and returns them to the client. This enables continuous authenticated access without frequent password re-entry.","authorizationType":"refresh","authorizationRole":null,"name":"refresh","path":"/auth/member/refresh","method":"post","summary":"Refresh expired access tokens using valid refresh token","description":"Renews JWT access tokens for members without requiring password re-authentication. This operation implements the token refresh workflow defined in the User Roles and Authentication requirements, enabling seamless session continuation when access tokens expire.\n\nThe refresh process validates the submitted refresh token against records in the discussion_board_refresh_tokens table. The system first validates the token signature and structure, then hashes the token and searches for a matching refresh_token_hash in the database. For valid tokens, it checks the expires_at timestamp to ensure the token has not expired (standard 7-day expiration, or 30 days for Remember Me sessions), verifies the is_revoked flag is false, and confirms the associated session in discussion_board_sessions is still active (is_active=true).\n\nThe system then performs additional account validation by retrieving the member record through the session relationship. It verifies the account_status is 'active' (not suspended or banned), checks the deleted_at field is null (account not deleted), and confirms email_verified is true. If the account has been compromised or restricted since the refresh token was issued, the token refresh is denied and all tokens for that account may be revoked.\n\nUpon successful validation, the system generates a new access token with fresh 30-minute expiration, including updated claims for userId, username, email, role, and current permissions from the member record. The new access token reflects any role changes or permission updates that may have occurred since the original token was issued. The system optionally implements refresh token rotation by generating a new refresh token, marking the old refresh token as used (is_revoked=true with revoked_at timestamp), and creating a new refresh token record with fresh expiration.\n\nThe system updates the session's last_activity_at timestamp in the discussion_board_sessions table to track active session usage. This helps identify and clean up inactive sessions during session management. The member's last_activity_at timestamp is also updated to reflect continued platform engagement.\n\nIf the refresh token is invalid, expired, or revoked, the system returns an error requiring full re-authentication. This occurs when tokens expire naturally, when users log out (tokens added to revocation list), when passwords are changed (all tokens revoked), or when administrators terminate sessions for security reasons. The client must redirect to the login endpoint to obtain new tokens.\n\nThe response returns the new access token and optionally a new refresh token (if rotation is implemented), along with token expiration information and updated member session data. This allows clients to seamlessly continue authenticated API requests without user interruption.\n\nThis endpoint is public (authorizationRole is null) as it uses the refresh token itself as authentication. However, it requires a valid, non-expired, non-revoked refresh token to succeed. The endpoint is critical for maintaining continuous user sessions across the 30-minute access token lifecycle.","parameters":[],"requestBody":{"typeName":"IDiscussionBoardMember.IRefresh","description":"Refresh token request containing the current valid refresh token"},"responseBody":{"typeName":"IDiscussionBoardMember.IAuthorized","description":"New JWT access token and optionally rotated refresh token with updated expiration information"},"prerequisites":[]},{"specification":"This operation allows moderators to register for a new account and immediately receive JWT tokens for authentication. The registration process creates a new moderator account in the system, requiring the moderator to be appointed by an existing administrator. The operation validates the username, email, and password against business rules (username 3-30 characters alphanumeric with hyphens/underscores, email must be valid format and unique, password must meet complexity requirements including minimum 8 characters with uppercase, lowercase, number, and special character). Upon successful registration, the system generates both access tokens (30-minute expiration) and refresh tokens (7-30 day expiration) encoded as JWTs, hashes the password using bcrypt with cost factor 12, and returns the authorization response containing tokens and moderator profile information. This operation is public and does not require authentication since it creates new moderator accounts.","path":"/auth/moderator/join","method":"post","name":"join","authorizationType":"join","authorizationRole":null,"summary":"Register new moderator account and receive JWT tokens","description":"Creates a new moderator account in the discussion_board_moderators table after validating registration inputs against business rules. The registration requires unique username (3-30 characters, alphanumeric with hyphens/underscores), unique email address (valid format), and secure password meeting complexity requirements (minimum 8 characters with uppercase, lowercase, number, special character). The system hashes the password using bcrypt with cost factor 12 before storage, ensuring passwords are never stored in plain text.\n\nUpon successful registration, the operation generates JWT authentication tokens following the platform's token strategy. An access token with 30-minute expiration is created for immediate API authentication, along with a refresh token (7-30 day expiration) for obtaining new access tokens without re-authentication. Both tokens include the moderator's user ID, username, email, role designation, and granted permissions in the JWT payload.\n\nThe operation sets initial account status to 'pending_verification' until email verification completes, and email_verified to false. The appointed_by_admin_id references the administrator who initiated the moderator appointment. The system records the appointment timestamp, device information, and sets is_active to true for immediate moderation queue access.\n\nThis operation integrates with the authentication system defined in the User Roles and Authentication document, implementing role-based access control for moderators who inherit all member permissions plus moderation capabilities including content review, warning issuance, and temporary suspensions. Registration data is validated according to Business Rules and Validation requirements, and all security measures from Performance and Security requirements are enforced.\n\nThe response includes the complete moderator profile with role information, permission grants, and token credentials required for subsequent authenticated API operations. This operation is essential for moderator onboarding and represents the entry point for trusted community members to access moderation tools and maintain discourse standards across economic and political discussions.","parameters":[],"requestBody":{"typeName":"IDiscussionBoardModerator.ICreate","description":"Registration information including appointed administrator reference, unique username, verified email address, secure password meeting complexity requirements, optional display name and bio, and account configuration"},"responseBody":{"typeName":"IDiscussionBoardModerator.IAuthorized","description":"Authorization response containing JWT access token, refresh token, moderator profile information, role designation, granted permissions, and account status"},"prerequisites":[]},{"specification":"This operation authenticates existing moderators by validating their credentials (email/username and password) and issuing fresh JWT tokens for platform access. The login process verifies the moderator account exists in discussion_board_moderators table, confirms email verification is complete, validates the password hash matches using bcrypt comparison, checks the account is not suspended or banned, and ensures the account status is active. Upon successful authentication, the system generates new access tokens (30-minute expiration) and refresh tokens (7-30 day expiration) with the moderator's identity, role, and permissions encoded in the JWT payload. This operation implements security measures including rate limiting (5 failed attempts trigger 15-minute account lockout), CAPTCHA after 3 failures, and comprehensive login history logging with device information, IP address, and timestamps for security monitoring.","path":"/auth/moderator/login","method":"post","name":"login","authorizationType":"login","authorizationRole":null,"summary":"Authenticate moderator credentials and issue JWT tokens","description":"Validates moderator login credentials against the discussion_board_moderators table and issues JWT authentication tokens upon successful verification. The operation accepts either email address or username along with the password, retrieves the moderator account, and performs comprehensive validation checks before granting access.\n\nThe authentication process verifies multiple account state conditions from the Prisma schema: confirms the account exists in the moderators table, validates email_verified is true (required for moderation duties per schema), compares the submitted password against the stored password_hash using bcrypt constant-time comparison, checks account_status is 'active' (not suspended or deactivated), and ensures is_active is true (moderator privileges are enabled). Any failed validation results in authentication denial with appropriate error messaging.\n\nUpon successful credential validation, the system generates JWT tokens following the platform's authentication strategy defined in the User Roles and Authentication document. An access token with 30-minute expiration is created containing the moderator's user ID, username, email, role designation ('moderator'), and specific permissions array in the JWT payload. A refresh token with 7-30 day expiration (extended for 'Remember Me' functionality) is generated for obtaining new access tokens without re-authentication.\n\nThe operation creates a new session record in discussion_board_sessions table with the access_token_hash, device_type, browser_info, ip_address, approximate location, and activity timestamps. A corresponding refresh token record is created in discussion_board_refresh_tokens linked to the session. The login attempt is logged in discussion_board_login_history with success status, device information, and timestamp for security audit trail.\n\nSecurity measures are enforced per Performance and Security requirements: failed login attempts are tracked and trigger progressive protections including CAPTCHA after 3 failures and 15-minute account lockout after 5 failures within 15 minutes. The system logs all authentication events in discussion_board_security_logs for monitoring suspicious patterns like brute force attacks or credential stuffing attempts.\n\nThis operation is essential for moderator access to the moderation queue, content review tools, warning issuance capabilities, and user suspension features. Successful login enables moderators to perform their duties maintaining civil discourse standards across economic and political discussions as specified in the Moderation System requirements.","parameters":[],"requestBody":{"typeName":"IDiscussionBoardModerator.ILogin","description":"Login credentials containing email address or username and password for authentication, with optional 'remember me' flag for extended refresh token expiration"},"responseBody":{"typeName":"IDiscussionBoardModerator.IAuthorized","description":"Authorization response containing JWT access token, refresh token, moderator profile information, role designation, granted permissions, session details, and account status"},"prerequisites":[]},{"specification":"This operation allows clients to obtain a new access token using a valid refresh token without requiring the moderator to re-enter credentials. The refresh process validates the submitted refresh token against the discussion_board_refresh_tokens table, checks the token has not expired, verifies the token has not been revoked (is_revoked is false), confirms the associated session in discussion_board_sessions is still active, validates the moderator account remains in good standing (not suspended or banned), retrieves current moderator role and permissions, generates a fresh access token with 30-minute expiration, optionally implements refresh token rotation by generating a new refresh token, and returns the new token set. This operation is critical for maintaining seamless user experience during long sessions without forcing repeated login prompts when short-lived access tokens expire.","path":"/auth/moderator/refresh","method":"post","name":"refresh","authorizationType":"refresh","authorizationRole":null,"summary":"Refresh access token using valid refresh token","description":"Validates the provided refresh token and issues a new access token to maintain moderator session continuity without requiring credential re-entry. This operation is essential for user experience during extended moderation sessions, allowing seamless access token renewal when the 30-minute access token expires while the moderator is actively reviewing content in the moderation queue.\n\nThe refresh process performs comprehensive validation against the discussion_board_refresh_tokens table in the Prisma schema. The system verifies the submitted refresh_token_hash matches a stored token, confirms the token expires_at timestamp has not passed, validates is_revoked is false (token has not been invalidated), and retrieves the associated session from discussion_board_sessions via the discussion_board_session_id foreign key relationship. The session's is_active status must be true, and the session must not have been revoked (revoked_at is null).\n\nThrough the session relationship, the system accesses the moderator account from discussion_board_moderators table and validates account state: account_status must be 'active' (not suspended or deactivated), is_active must be true (moderator privileges enabled), and email_verified must be true. If the moderator account has been suspended, banned, or had privileges revoked since the refresh token was issued, the refresh operation fails and requires fresh authentication.\n\nUpon successful validation, the system generates a new JWT access token with 30-minute expiration containing the moderator's current user ID, username, email, role designation ('moderator'), and up-to-date permissions array reflecting any permission changes since original login. The new access token enables continued API authentication for moderation operations.\n\nThe operation may implement refresh token rotation as a security best practice: generating a new refresh token with extended expiration, marking the old refresh token as revoked by setting is_revoked to true and recording revoked_at timestamp, and returning both new access and refresh tokens. This rotation strategy limits the window of vulnerability if a refresh token is compromised.\n\nThe refresh operation updates the session's last_activity_at timestamp in discussion_board_sessions to track active moderation sessions. If the moderator account has last_activity_at tracking, this is also updated to reflect continued platform engagement. All token refresh events are logged in discussion_board_security_logs with event_type 'token_refreshed' for security monitoring and audit compliance.\n\nThis operation integrates with the JWT token management strategy defined in the User Roles and Authentication document, supporting the stateless authentication architecture while enabling long-lived sessions through refresh token mechanics. It prevents the poor user experience of frequent login prompts during active moderation work while maintaining security through short-lived access tokens and revocable refresh tokens.","parameters":[],"requestBody":{"typeName":"IDiscussionBoardModerator.IRefresh","description":"Refresh token request containing the current valid refresh token to be exchanged for a new access token"},"responseBody":{"typeName":"IDiscussionBoardModerator.IAuthorized","description":"Authorization response containing new JWT access token, optionally rotated refresh token, moderator profile information, role designation, and current permissions"},"prerequisites":[]},{"specification":"Administrator registration operation that creates a new administrator account with full platform control privileges. This operation is typically used by super administrators or during initial platform setup to onboard new administrative staff. The registration process includes email verification, strong password requirements, and automatic granting of administrator role privileges. New administrators receive credentials for accessing the administrative dashboard, user management tools, category management, system configuration, moderation oversight, and all platform operations. This operation differs from member/moderator registration by immediately assigning administrator-level permissions.","authorizationType":"join","description":"Creates a new administrator account with full platform control and administrative privileges. This operation is the entry point for onboarding new administrative staff who will manage the discussion board platform.\n\nThe registration process collects essential administrator credentials including username (3-30 characters, alphanumeric with hyphens and underscores), email address (must be unique and verifiable), and password meeting security requirements (minimum 8 characters with uppercase, lowercase, number, and special character). The username and email fields reference the discussion_board_administrators table schema which defines these as unique fields requiring verification.\n\nUpon successful registration, the system creates a new administrator record in the discussion_board_administrators table with account_status set to 'pending_verification' initially, and email_verified set to false. A verification email is sent to the provided email address containing a time-limited verification token. The administrator must verify their email before gaining full access to administrative functions.\n\nSecurity considerations for administrator registration include enhanced password requirements, potential IP whitelisting for administrator registration endpoints, and audit logging of all administrator account creation events in the discussion_board_audit_logs and discussion_board_security_logs tables. Administrator registration is a high-sensitivity operation that should be restricted or require approval from existing super administrators in production environments.\n\nThe response includes JWT tokens (access token and refresh token) following the authentication token structure defined in the discussion_board_sessions and discussion_board_refresh_tokens tables. The access token expires after 30 minutes and the refresh token expires after 7-30 days depending on 'Remember Me' preferences. These tokens enable the newly registered administrator to authenticate for subsequent administrative operations once email verification is complete.","summary":"Register a new administrator account with platform control privileges","parameters":[],"requestBody":{"description":"Administrator registration credentials including unique username, verified email address, and secure password meeting complexity requirements","typeName":"IDiscussionBoardAdministrator.ICreate"},"responseBody":{"description":"JWT authentication tokens (access and refresh) for the newly registered administrator account","typeName":"IDiscussionBoardAdministrator.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/administrator/join","method":"post"},{"specification":"Administrator login operation that authenticates existing administrator accounts and issues JWT tokens for accessing administrative functions. This operation validates administrator credentials (email/username and password) against the discussion_board_administrators table and generates session tokens for authenticated access. Login attempts are tracked in discussion_board_login_history for security monitoring and breach detection. Failed login attempts trigger account lockout protection after 5 consecutive failures within 15 minutes.","authorizationType":"login","description":"Authenticates an existing administrator account by validating credentials and issuing JWT access and refresh tokens for administrative session management.\n\nThe login process accepts either the administrator's unique email address or username along with their password. The system retrieves the administrator record from the discussion_board_administrators table, verifies the account exists and has account_status set to 'active', checks that email_verified is true, and validates the submitted password against the stored password_hash using bcrypt comparison with minimum cost factor 12.\n\nSecurity measures include comprehensive logging of all login attempts in the discussion_board_login_history table with fields capturing email_attempted, is_successful status, failure_reason for failed attempts, ip_address, device_type, browser_info, and location for security analysis. The system implements account lockout protection: after 5 consecutive failed login attempts within 15 minutes, the account is temporarily locked for 30 minutes and the administrator receives an email notification about the lockout event.\n\nUpon successful authentication, the system generates a new session record in the discussion_board_sessions table with discussion_board_administrator_id referencing the authenticated administrator, access_token_hash containing the hashed JWT access token, device_type, browser_info, ip_address, and location extracted from the request context. The session expires_at timestamp is set to 30 minutes from issuance for the access token. Simultaneously, a refresh token record is created in discussion_board_refresh_tokens with the session reference, refresh_token_hash, and expires_at set to 7-30 days based on Remember Me preference.\n\nThe response contains the JWT tokens following the IDiscussionBoardAdministrator.IAuthorized format, enabling the administrator to access protected administrative endpoints including user management, moderator appointment via the discussion_board_moderators table, category management in discussion_board_categories, system configuration, moderation oversight through discussion_board_moderation_actions, and comprehensive audit log access across discussion_board_audit_logs, discussion_board_security_logs, and discussion_board_moderation_audit_logs tables.","summary":"Authenticate administrator and issue access tokens","parameters":[],"requestBody":{"description":"Administrator login credentials containing email or username and password for authentication","typeName":"IDiscussionBoardAdministrator.ILogin"},"responseBody":{"description":"JWT authentication tokens for administrator session management","typeName":"IDiscussionBoardAdministrator.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/administrator/login","method":"post"},{"specification":"Token refresh operation that issues new JWT access tokens using valid refresh tokens without requiring re-authentication. This operation is essential for maintaining administrator sessions across extended periods without forcing frequent re-login. The refresh mechanism validates the existing refresh token from discussion_board_refresh_tokens table, verifies it has not expired or been revoked, confirms the associated administrator account in discussion_board_administrators is still active and not banned, and generates a new access token with updated expiration timestamp.","authorizationType":"refresh","description":"Renews the administrator's access token using a valid refresh token, extending the authenticated session without requiring credential re-entry.\n\nThe token refresh process accepts the current refresh token (typically stored in httpOnly cookie or secure storage) and validates it against the discussion_board_refresh_tokens table. The system verifies the refresh_token_hash matches an existing record, checks that is_revoked is false, confirms the expires_at timestamp has not passed (standard expiration is 7-30 days based on Remember Me preference), and validates the associated session in discussion_board_sessions is still active with is_active set to true.\n\nThe system retrieves the administrator account via the session's discussion_board_administrator_id foreign key, verifies the account_status is 'active' in the discussion_board_administrators table, and confirms the account has not been suspended or banned. Any account status changes (suspension, ban, role revocation) invalidate all existing tokens and prevent refresh token usage.\n\nUpon successful validation, the system generates a new JWT access token with expires_at set to 30 minutes from issuance, updates the session's last_activity_at timestamp in discussion_board_sessions to reflect ongoing administrator activity, and optionally implements refresh token rotation by generating a new refresh token and marking the old one as is_revoked true for enhanced security.\n\nThe response returns fresh JWT tokens in the IDiscussionBoardAdministrator.IAuthorized format containing the new access token and optionally a new refresh token if rotation is enabled. This mechanism enables administrators to maintain long-running authenticated sessions for administrative tasks without security degradation, while the relatively short access token lifetime (30 minutes) limits the window of vulnerability if a token is compromised.\n\nSecurity considerations include comprehensive logging of token refresh events in discussion_board_security_logs with event_type 'token_refresh', tracking ip_address and user_agent for anomaly detection, and implementing refresh token rotation policies that invalidate old refresh tokens after successful refresh operations to prevent token replay attacks.","summary":"Refresh administrator access token using valid refresh token","parameters":[],"requestBody":{"description":"Refresh token request containing the current valid refresh token for generating a new access token","typeName":"IDiscussionBoardAdministrator.IRefresh"},"responseBody":{"description":"New JWT authentication tokens with refreshed expiration timestamps","typeName":"IDiscussionBoardAdministrator.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/administrator/refresh","method":"post"},{"specification":"Administrator password reset request operation that initiates the secure password recovery workflow for administrators who have forgotten their credentials. This operation generates a cryptographically secure reset token, stores it in discussion_board_password_resets table with 15-minute expiration, and sends a password reset email to the administrator's verified email address. The operation implements security measures to prevent account enumeration by returning success messages regardless of whether the email exists in the system.","authorizationType":null,"description":"Initiates the password reset workflow for an administrator who has forgotten their password by generating a time-limited reset token and sending password reset instructions via email.\n\nThe password reset request process accepts the administrator's email address as the sole identifier. The system searches the discussion_board_administrators table for a matching email address, but implements enumeration protection by always returning a success message regardless of whether an account exists with that email, preventing attackers from determining which email addresses are registered administrators.\n\nIf a matching administrator account is found, the system generates a cryptographically random reset token (minimum 32 bytes for security) and creates a password reset record in the discussion_board_password_resets table. This record includes discussion_board_administrator_id referencing the administrator, reset_token_hash containing the hashed token (never storing plain tokens), email field for verification, is_used set to false, and expires_at timestamp set to 15 minutes from creation for security compliance.\n\nThe system sends a password reset email to the administrator's verified email address containing the unique reset link with the embedded token, expiration time warning (15 minutes), instructions that the link can only be used once, and security guidance to ignore the email if not requested. The email references the discussion_board_administrators table's email field for delivery.\n\nRate limiting is enforced to prevent abuse: maximum 3 reset requests per email address per hour, and maximum 10 reset requests per IP address per hour. Excessive reset requests are logged in discussion_board_security_logs with event_type 'password_reset_abuse' and severity 'medium' for security monitoring.\n\nThe operation always returns a success response stating \"If an account exists for that email, a password reset link has been sent\" to prevent revealing account existence while providing helpful guidance to legitimate administrators who may have mistyped their email address.","summary":"Request password reset for administrator account","parameters":[],"requestBody":{"description":"Password reset request containing the administrator's email address for token generation and delivery","typeName":"IDiscussionBoardAdministrator.IResetRequest"},"responseBody":{"description":"Confirmation response indicating password reset email was sent if account exists","typeName":"IDiscussionBoardAdministrator.IResetRequestResult"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/administrator/password/reset/request","method":"post"},{"specification":"Administrator password reset completion operation that validates the reset token and sets a new password for the administrator account. This operation receives the reset token from the email link, validates it against discussion_board_password_resets table, accepts the new password meeting security complexity requirements, updates the password_hash in discussion_board_administrators table, marks the reset token as used, and revokes all existing sessions to force re-authentication on all devices for security.","authorizationType":null,"description":"Completes the password reset workflow by validating the reset token and updating the administrator's password to a new secure value.\n\nThe password reset completion process accepts the reset token (from the email link query parameter) and the new password with confirmation. The system validates the token against the discussion_board_password_resets table by matching reset_token_hash, checking that is_used is false (token hasn't been consumed), verifying expires_at timestamp has not passed (15-minute validity window), and confirming discussion_board_administrator_id references an existing active administrator account.\n\nThe new password must meet all security requirements defined in the authentication documentation: minimum 8 characters length, at least one uppercase letter, one lowercase letter, one number, and one special character from the allowed set (!@#$%^&*()_+-=[]{}|;:,.<>?). The system validates the new password differs from the current password_hash to prevent password reuse, and checks against the common/breached password list to reject compromised passwords.\n\nUpon successful validation, the system hashes the new password using bcrypt with minimum cost factor 12 and updates the password_hash field in the discussion_board_administrators table for the referenced administrator account. The reset token is marked as is_used true and used_at timestamp is set to prevent token reuse, even if the token is still within the 15-minute validity window.\n\nCritical security measures include revoking all existing sessions for this administrator by setting is_active to false in all discussion_board_sessions records where discussion_board_administrator_id matches the affected account, and marking all associated refresh tokens in discussion_board_refresh_tokens as is_revoked true with revoked_at timestamp. This forces re-authentication on all devices, preventing session hijacking if the password reset was initiated due to account compromise.\n\nThe system sends a confirmation email to the administrator's email address from discussion_board_administrators table notifying them of the successful password change, including the timestamp, IP address, and device information from the password reset request. The email warns that if the administrator did not initiate this change, they should contact support immediately and includes a link to secure account recovery procedures.\n\nFinally, the operation logs the password reset event in discussion_board_security_logs with event_type 'password_reset_completed', severity 'high', ip_address, and metadata containing the administrator ID and timestamp for security audit trail compliance.","summary":"Complete password reset by validating token and setting new password","parameters":[],"requestBody":{"description":"Password reset completion data containing the reset token from email and new password meeting security requirements","typeName":"IDiscussionBoardAdministrator.IResetComplete"},"responseBody":{"description":"Confirmation response indicating successful password reset with instructions to log in","typeName":"IDiscussionBoardAdministrator.IResetCompleteResult"},"authorizationRole":null,"name":"completePasswordReset","prerequisites":[{"endpoint":{"path":"/auth/administrator/password/reset/request","method":"post"},"description":"Password reset request must be initiated first to generate a valid reset token that is required for completing the password reset process"}],"path":"/auth/administrator/password/reset/complete","method":"post"},{"specification":"Administrator password change operation for authenticated administrators who know their current password and want to update it. This operation requires the current password for verification, accepts a new password meeting security requirements, updates the password_hash in discussion_board_administrators table, revokes all existing sessions except the current one, and sends email notification about the password change. This differs from password reset which is used when the password is forgotten.","authorizationType":null,"description":"Allows an authenticated administrator to change their password by providing the current password for verification and submitting a new password meeting security complexity requirements.\n\nThe password change process requires the administrator to be authenticated with a valid JWT token containing administrator role privileges. The operation validates the current password against the password_hash field in the discussion_board_administrators table using bcrypt comparison to prevent unauthorized password changes if the session is compromised or the device is accessed by another person.\n\nThe new password must meet all security requirements: minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character. The system validates the new password differs from the current password_hash to enforce password rotation, checks the new password does not match any of the previous 3 passwords if password history is maintained, and verifies the new password is not in the common/breached password database.\n\nUpon successful validation, the system hashes the new password using bcrypt with minimum cost factor 12 and updates the password_hash field in the discussion_board_administrators table. To maintain session security, the system revokes all existing sessions in the discussion_board_sessions table by setting is_active to false for all sessions where discussion_board_administrator_id matches the current administrator, with the exception of the current session to prevent immediate logout.\n\nAll associated refresh tokens in discussion_board_refresh_tokens are marked as is_revoked true with revoked_at timestamp set, forcing re-authentication on all other devices (desktop, mobile, tablet sessions). This prevents potential attackers from maintaining access if the password change was initiated due to security concerns or suspected compromise.\n\nThe system sends a confirmation email to the administrator's email address from the discussion_board_administrators table notifying them of the password change, including timestamp, IP address from the request, device information, and a warning that if they did not make this change they should contact support immediately. The email includes a link to secure account recovery if unauthorized access is suspected.\n\nThe operation logs the password change event in discussion_board_security_logs with event_type 'password_changed', severity 'high', ip_address, user_agent, and metadata containing the administrator ID and timestamp. This creates a complete audit trail for security monitoring and compliance with the security logging requirements defined in the security documentation.","summary":"Change administrator password with current password verification","parameters":[],"requestBody":{"description":"Password change request containing current password for verification, new password, and new password confirmation","typeName":"IDiscussionBoardAdministrator.IChangePassword"},"responseBody":{"description":"Confirmation response indicating successful password change with session revocation notice","typeName":"IDiscussionBoardAdministrator.IChangePasswordResult"},"authorizationRole":"administrator","name":"changePassword","prerequisites":[],"path":"/auth/administrator/password/change","method":"post"},{"specification":"This operation retrieves a paginated, searchable, and filterable list of discussion board categories for browsing and selection purposes. It operates on the discussion_board_categories table from the Prisma schema. The operation supports advanced filtering by parent category relationships, active status, and hierarchical organization. Users can search categories by name and description, sort by display order or topic count, and apply filters to find specific category types (top-level economics/politics categories versus subcategories). This endpoint enables category browsing interfaces, category selection dropdowns during topic creation, and administrative category management views. The operation returns category summaries optimized for list displays including basic metadata, topic counts, and hierarchical relationships without deeply nested child category data.","path":"/discussionBoard/categories","method":"patch","summary":"Search and retrieve a filtered, paginated list of discussion board categories","description":"Retrieve a comprehensive, filtered list of discussion board categories from the discussion_board_categories table. This operation provides advanced search and filtering capabilities for discovering and organizing categories used to classify economic and political discussion topics.\n\nThe endpoint supports full-text search across category names and descriptions, enabling users to find relevant categories quickly. Users can filter categories by hierarchical level (top-level categories like Economics and Politics versus subcategories like Macroeconomics), active status (to show only currently available categories), and parent-child relationships to navigate the category taxonomy.\n\nSorting options include display_order (the default administrative ordering), topic_count (to identify most active categories), creation date, and alphabetical ordering. Pagination allows efficient browsing of the complete category catalog with configurable page sizes.\n\nThis operation serves multiple use cases across the platform. During topic creation, members use this endpoint to browse available categories and select the appropriate classification for their discussion. In category browsing interfaces, users explore the organizational structure to find discussions of interest. Administrators use filtered views to manage the category hierarchy, identify underutilized categories, and organize the platform's content taxonomy.\n\nThe response includes essential category metadata: unique identifier, name, slug (for URL-friendly routing), description, hierarchical position (parent_category_id), display ordering, active status, and topic count. The topic_count field provides immediate visibility into category usage and helps users identify where active discussions are occurring.\n\nSecurity considerations include public accessibility (guests and all authenticated roles can browse categories) since category information is non-sensitive organizational metadata. Rate limiting applies to prevent abuse, and response caching improves performance for this frequently accessed data.\n\nThis operation integrates closely with the Discussion Management requirements defined in 03-discussion-management.md, specifically the Category System Overview and Category Browsing sections. It enables the category-based content organization that is fundamental to the platform's structure for economic and political discourse.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for category retrieval","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of category summary information matching search and filter criteria","typeName":"IPageIDiscussionBoardCategory.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information for a single discussion board category identified by its unique ID. It operates on the discussion_board_categories table and returns comprehensive category data including hierarchical relationships, metadata, and statistics. The operation serves category detail pages, topic creation workflows (where users need to understand category scope before selecting), and administrative category management interfaces. Unlike the category list operation, this endpoint returns the complete category record with full description text, parent category details if applicable, and potentially aggregated statistics about category usage. The operation validates that the requested category exists and is accessible, returning detailed error messages for invalid category IDs or deleted categories.","path":"/discussionBoard/categories/{categoryId}","method":"get","summary":"Retrieve detailed information for a specific discussion board category by ID","description":"Retrieve complete details for a single discussion board category identified by the categoryId path parameter. This operation accesses the discussion_board_categories table to return comprehensive information about a specific category used to organize economic and political discussion topics.\n\nThe operation returns the full category record including all metadata fields: unique identifier, category name, URL-friendly slug, complete description text, hierarchical position (parent_category_id for subcategories), display ordering value, active status flag, and current topic count showing how many discussions are classified under this category.\n\nFor hierarchical categories (subcategories like Macroeconomics under Economics), the response includes the parent_category_id which clients can use to display breadcrumb navigation or hierarchical category paths. The description field contains the full category explanation (potentially several hundred characters) that helps users understand the category's scope and what types of discussions belong there.\n\nThe topic_count field provides real-time visibility into category usage, helping users identify active discussion areas and enabling administrators to monitor category health. The display_order field indicates the category's position in organized listings, supporting custom category ordering beyond alphabetical sorting.\n\nThis operation serves several critical use cases. During topic creation, users may click on a category to view its detailed description before confirming their selection, ensuring they choose the most appropriate category. Category detail pages display this information to users browsing the organizational structure. Administrative interfaces use this endpoint to load category data for editing and management workflows.\n\nSecurity and access control allow public visibility since category information is non-sensitive organizational metadata. Guests and all authenticated users can view category details. The operation validates that the requested category exists in the database, returning appropriate error responses for invalid UUIDs, non-existent categories, or soft-deleted categories (deleted_at is not null).\n\nPerformance expectations require sub-second response times for individual category retrieval, typically under 500 milliseconds. Caching strategies can optimize repeated requests for popular categories. The operation integrates with the category system requirements defined in 03-discussion-management.md, specifically supporting the Category Navigation and Category Structure sections.\n\nError handling includes specific responses for common failure scenarios: invalid UUID format in the categoryId parameter (400 Bad Request), category not found (404 Not Found), and soft-deleted categories that should not be displayed (404 Not Found or 410 Gone depending on implementation approach).","parameters":[{"name":"categoryId","description":"Unique identifier of the target discussion board category","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed information for the requested discussion board category","typeName":"IDiscussionBoardCategory"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[]},{"specification":"This operation enables administrators to create new discussion board categories for organizing topics related to Economics and Politics. Categories serve as the foundational organizational structure of the discussion board, providing the primary taxonomy for content classification. The operation creates a new category record in the discussion_board_categories table with administrator-defined properties including name, slug, description, display order, and active status. Categories can be top-level (Economics, Politics) or nested subcategories (Macroeconomics under Economics) by optionally specifying a parent category. This operation is essential for platform setup and ongoing content organization management as the discussion board evolves to accommodate new economic and political subject areas.","path":"/discussionBoard/administrator/categories","method":"post","summary":"Create a new discussion board category for organizing economic and political topics","description":"Creates a new category in the discussion board's organizational taxonomy. Categories provide the primary structure for organizing economic and political discussions, enabling users to browse topics by subject area and helping maintain clear content organization.\n\nThis operation is restricted to administrators who have the authority to define and manage the platform's content structure. The created category can be either a top-level category (such as Economics or Politics) or a subcategory nested under an existing parent category (such as Macroeconomics under Economics, or International Relations under Politics).\n\nThe category creation process validates that the category name is unique across all existing categories and that the slug (URL-friendly identifier) does not conflict with existing categories. If a parent category is specified, the system verifies that the parent exists and is active before creating the nested relationship.\n\nOnce created, the category becomes immediately available for selection when users create new discussion topics. The display_order field controls the position of this category in navigation menus and category lists, allowing administrators to prioritize important categories. The is_active flag allows administrators to temporarily disable categories without deletion, preserving existing topics while preventing new topic creation in that category.\n\nThe category's topic_count field is initialized to 0 and will be automatically incremented as topics are assigned to this category. This denormalized count supports efficient display of category activity levels without expensive aggregation queries.\n\nSecurity considerations include ensuring only administrators can create categories, preventing duplicate category names or slugs, and validating that parent_category_id references an existing, active category if provided. The operation maintains referential integrity and updates the category hierarchy relationships immediately.","parameters":[],"requestBody":{"description":"Category creation data including name, optional parent category, description, display order, and active status","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"The newly created category with all fields including generated ID, timestamps, and initial topic count","typeName":"IDiscussionBoardCategory"},"authorizationRole":"administrator","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation allows administrators to update existing discussion board category information including name, description, parent category relationship, display order, and active status. Categories are the foundational organizational structure of the discussion board, and this operation enables ongoing maintenance and refinement of the content taxonomy as the platform evolves. The operation targets a specific category identified by categoryId in the URL path and updates the category record in the discussion_board_categories table. Administrators can modify category properties, reorganize the category hierarchy by changing parent relationships, adjust display ordering, or temporarily deactivate categories. This operation is essential for maintaining an effective content organization system that adapts to user needs and emerging discussion topics in economics and politics.","path":"/discussionBoard/administrator/categories/{categoryId}","method":"put","summary":"Update an existing discussion board category's properties and hierarchy","description":"Updates an existing category's information in the discussion board's organizational taxonomy. This operation allows administrators to modify category properties including name, description, parent category relationship, display order, and active status.\n\nAdministrators use this operation to maintain and refine the category structure as the platform evolves. Common update scenarios include renaming categories for clarity, adjusting the category hierarchy by changing parent relationships, reordering categories to reflect priority or usage patterns, updating descriptions to better guide users, and activating or deactivating categories based on community needs.\n\nThe operation performs several critical validations before applying updates. If the category name is being changed, the system verifies that the new name is unique across all categories. If the slug is being updated, uniqueness is validated to prevent routing conflicts. When the parent_category_id is modified to create or change hierarchical relationships, the system verifies that the new parent category exists, is active, and that the change does not create circular references (a category cannot be its own ancestor).\n\nChanging the is_active status from true to false effectively hides the category from user-facing category selection interfaces while preserving all existing topics assigned to that category. This allows administrators to phase out categories gracefully without disrupting existing discussions. Reactivating a category (is_active from false to true) immediately makes it available for new topic creation again.\n\nThe display_order field can be modified to reposition categories in navigation menus and listing displays. Lower values appear first, allowing administrators to prioritize frequently used or strategically important categories.\n\nUpdating a category does not automatically update the updated_at timestamp of topics within that category, maintaining accurate topic modification history. The category's own updated_at timestamp is set to the current time when any field is modified.\n\nSecurity considerations include verifying administrator role authorization, preventing changes that would violate referential integrity (such as setting a parent that creates circular dependencies), and ensuring category uniqueness constraints are maintained. The operation logs all category modifications in the audit trail for administrative accountability.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated category information including name, description, parent category, display order, and active status","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated category with all modified fields and current timestamps","typeName":"IDiscussionBoardCategory"},"authorizationRole":"administrator","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/categories","method":"post"},"description":"Category must exist before it can be updated. The category identified by categoryId must be created first to establish the record that will be modified by the update operation."}]},{"specification":"This operation retrieves comprehensive information about a specific member user account by their unique identifier. It operates on the discussion_board_members table from the Prisma schema, returning privacy-filtered profile information, account status, activity statistics, and public profile fields. The operation respects user privacy settings (profile_visibility and activity_visibility fields) to determine what information is visible to the requesting user. This endpoint serves user profile pages, contributor identification in discussions, and user discovery features. The operation validates that the requested user exists and has not been soft-deleted, and applies appropriate privacy filtering based on the relationship between the requesting user and the profile owner. CRITICAL: The response DTO MUST exclude sensitive fields including email and password_hash.","path":"/discussionBoard/users/{userId}","method":"get","summary":"Retrieve privacy-filtered profile information for a specific discussion board member","description":"Retrieve comprehensive profile information for a single discussion board member identified by their unique UUID. This operation accesses the discussion_board_members table and returns privacy-controlled user profile data including username, display name, bio, avatar URL, location, website, account status, email verification status, profile and activity visibility settings, and activity timestamps (last login, last activity). The response also includes related reputation statistics and contribution counts when available.\n\n**CRITICAL SECURITY REQUIREMENT**: The response DTO MUST explicitly exclude the following sensitive fields from the discussion_board_members schema: `email` (authentication credential and PII), `password_hash` (authentication secret), and any other internal security fields. These fields must NEVER be exposed through this public API endpoint regardless of privacy settings.\n\nThe member user system represents registered, authenticated participants who form the core user base of the discussion board. Members can create topics, post replies, vote on content, customize profiles, and manage preferences. This endpoint provides the data necessary to display user profile pages, show author information on discussion posts, and support user discovery and networking features.\n\nPrivacy considerations are critical for this operation. The discussion_board_members table includes profile_visibility and activity_visibility fields that control what information is exposed. The operation applies the following privacy rules based on the Prisma schema:\n\n- If profile_visibility is 'public', all non-sensitive profile information is returned to any requester including unauthenticated guests\n- If profile_visibility is 'members_only', profile information is returned only to authenticated members, moderators, and administrators\n- If profile_visibility is 'private', only the profile owner (matching userId to authenticated user) can view full profile details; others see minimal public information (username and role badge only)\n- Email addresses are NEVER returned in the response regardless of privacy settings, as they are sensitive authentication credentials\n- Password hashes are NEVER returned under any circumstances\n- Activity statistics respect the activity_visibility field independently from profile visibility\n\nThe operation validates that the userId parameter is a valid UUID format and that the member exists in the database. If the member is not found, has been soft-deleted (deleted_at is not null), or the requesting user lacks permission due to privacy settings, the API returns an appropriate error response.\n\nThis endpoint integrates with the authentication system to determine the requesting user's role and identity for privacy enforcement. Unauthenticated requests (guests) receive only publicly visible data. Authenticated members see data according to privacy settings. Moderators and administrators may have elevated visibility for moderation and user management purposes, though email addresses and password hashes remain strictly protected.\n\nThe response includes account_status field from the schema which indicates whether the account is active, pending_verification, suspended, banned, or deactivated. This field helps explain why certain users may not be creating new content. The email_verified boolean indicates whether the user has completed email verification, which affects their posting privileges.\n\nActivity timestamps (last_login_at and last_activity_at) provide engagement indicators. The created_at field shows account age, which is often displayed as 'Member since [date]' on profile pages. These temporal fields help users assess contributor credibility and activity levels.","parameters":[{"name":"userId","description":"Unique identifier of the target member user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Privacy-filtered member profile information excluding sensitive fields (email, password_hash) with visibility based on profile settings","typeName":"IDiscussionBoardMember.IPublic"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of discussion board members with advanced search capabilities including filtering by username, display name, account status, reputation score ranges, registration date ranges, email verification status, and activity patterns. The operation supports complex queries to find members based on various criteria including username partial matching, display name searching, account status filtering, account creation date ranges, last activity timestamps, and reputation thresholds. This operation operates on the discussion_board_members table from the Prisma schema and provides comprehensive member search functionality for community discovery and user exploration purposes. Email addresses are supported as filter criteria but are NEVER included in response payloads for privacy protection.","path":"/discussionBoard/users","method":"patch","summary":"Search and retrieve a filtered, paginated list of discussion board members","description":"Retrieve a filtered and paginated list of discussion board members from the system. This operation provides advanced search capabilities for finding members based on multiple criteria including partial username matching, display name searching, account status filtering, registration date ranges, last activity timestamps, reputation score ranges, and email verification status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Results can be sorted by registration date, last login timestamp, last activity timestamp, username alphabetically, reputation score, or other relevant member attributes in ascending or descending order.\n\nSecurity considerations include appropriate filtering of sensitive member information based on the requesting user's authorization level. While this endpoint is public to support member discovery features, sensitive fields are strictly excluded from response payloads for privacy protection.\n\nCRITICAL PRIVACY PROTECTION: Email addresses, while supported as search filter criteria (email verification status filtering), are NEVER included in the response payload under any circumstances. The ISummary response type explicitly excludes the email field, password_hash, and all other private information to comply with privacy requirements and data protection regulations. Only public profile fields (username, display_name, bio, avatar_url, location, website, account_status, email_verified boolean flag, reputation score, registration date, last activity date) are included in search results. Full member details including email addresses are only accessible through authenticated single-member retrieval endpoints with appropriate ownership or administrative authorization.\n\nThis operation integrates with the discussion_board_members table as defined in the Prisma schema, incorporating all available member fields and relationships including reputation scores from the discussion_board_user_reputation table and engagement statistics. The response includes member summary information optimized for list displays with essential fields for member identification and basic profile information while strictly protecting private data.\n\nThe search functionality supports the platform's community discovery features, allowing users to find other members with shared interests in economic and political topics, identify active contributors, explore the community, and discover quality content creators. The public nature of this endpoint encourages community exploration while maintaining strict privacy boundaries.\n\nRate limiting is enforced according to the platform's business rules to prevent abuse of the search functionality. Guest users are limited to 20 searches per hour, while authenticated members have higher limits (100 searches per hour). Search queries are validated for length (1-200 characters) and sanitized to prevent injection attacks. Excessive search activity triggers temporary restrictions.\n\nThe operation returns paginated results with 25 members per page by default, configurable through request parameters up to a maximum of 100 members per page. Each member record in the response includes only public profile information: username, display name (if set), bio excerpt, account creation date, reputation score, account status, email verification status (boolean), role indicators, avatar URL, location, and website for display purposes. Private information including email addresses, password hashes, IP addresses, and detailed activity logs are completely excluded from all response payloads.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for member filtering including username/display name keywords, account status filters, email verification status, reputation ranges, date ranges, and sorting preferences","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of member summary information matching search criteria with public profile fields only (excludes email, password_hash, and private data)","typeName":"IPageIDiscussionBoardMember.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation updates an existing discussion board member's profile information including display name, bio, avatar URL, location, website, profile visibility settings, activity visibility settings, timezone, and language preferences. The operation requires the requesting user to be authenticated as the member being updated or have administrator privileges. Members can modify their own editable profile fields while administrators can update any member's profile information. The operation validates all input according to business rules defined in the requirements including field length constraints, URL format validation, and content quality checks. Profile updates are subject to rate limiting (5 updates per hour per user) to prevent abuse. Certain fields like username, email, and password are not editable through this endpoint and require separate dedicated operations due to their security implications.","path":"/discussionBoard/member/users/{userId}","method":"put","summary":"Update an existing discussion board member's profile information","description":"Update profile information for an existing discussion board member account. This operation allows authenticated members to modify their own profile details including display name, biographical information, avatar URL, location, website, visibility preferences, and localization settings. Administrators can update any member's profile for account management purposes.\n\nThe operation validates all profile updates according to comprehensive business rules defined in the requirements documentation. Display names must be between 1 and 50 characters and support Unicode for international users. Biographical information is limited to 500 characters and undergoes profanity filtering. Avatar URLs must be valid HTTP/HTTPS URLs with maximum length of 80,000 characters (VARCHAR limit in schema) and are validated for security. Location and website fields are optional and subject to length constraints (100 characters for location, 200 characters maximum for website URL).\n\nProfile visibility settings control how other users can view the member's profile and activity. The profile_visibility field supports three levels: public (visible to all including guests), members_only (visible only to authenticated users), and private (hidden from search and direct access). The activity_visibility field independently controls whether the member's discussion topics and replies are displayed on their profile page with the same three visibility levels. Privacy hierarchy is enforced - if profile visibility is private, activity visibility is automatically private as well.\n\nTimezone and language preferences affect how the platform displays timestamps and interface elements to the user. Timezone must be a valid IANA timezone identifier (e.g., 'America/New_York', 'Europe/London') and defaults to auto-detection from browser if not specified. Language must be an ISO 639-1 language code (e.g., 'en', 'es', 'de') with English as the default.\n\nRate limiting is strictly enforced to prevent profile update abuse. Members are limited to 5 profile updates per hour as defined in business rules, with exceeded limits resulting in temporary restrictions and clear error messaging indicating the cooldown period. Profile picture changes are separately limited to 3 changes per day. These limits do not apply to administrators performing account management tasks.\n\nCertain critical fields are intentionally excluded from this update operation due to security implications. Username cannot be changed after account creation to maintain discussion attribution integrity and prevent identity confusion. Email addresses require a separate verification workflow involving email confirmation to both old and new addresses to prevent account hijacking. Password changes go through a dedicated secure password update endpoint requiring current password verification for security. Account status and role assignments are restricted to administrator-only operations for security and privilege management.\n\nThe operation validates that the requesting user has permission to modify the specified member profile. Members can only update their own profiles (userId in path must match authenticated user's ID) unless they have administrator privileges. The system enforces this through JWT token validation and role-based access control, returning 403 Forbidden if a member attempts to modify another user's profile without appropriate authorization.\n\nUpon successful profile update, the system records the modification timestamp in the updated_at field, logs the profile change in discussion_board_audit_logs for audit purposes, and immediately reflects the changes across all user interface elements displaying the member's information. If the member has active sessions on multiple devices, profile changes propagate in real-time through WebSocket notifications or upon next page refresh, ensuring consistent profile display across all platforms.","parameters":[{"name":"userId","description":"Unique identifier of the target member whose profile is being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile information including display name, bio, avatar URL, location, website, visibility preferences, timezone, and language settings (excludes username, email, password, and account status which require separate operations)","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"Complete updated member profile information reflecting all applied changes (excludes password_hash and other sensitive fields)","typeName":"IDiscussionBoardMember"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation performs a hard delete of a user account from the discussion_board_members table. When a user account is deleted, the system permanently removes the member record along with all associated data including sessions, login history, password resets, topics, replies, votes, favorites, and other user-generated content. This operation is typically invoked when a user requests permanent account deletion or when an administrator needs to remove an account completely. The delete cascades to all related tables through foreign key constraints defined in the Prisma schema. This is an irreversible operation that should be used carefully, as it results in complete data removal from the database. Users should be warned about the permanent nature of this action before proceeding.","path":"/discussionBoard/administrator/users/{userId}","method":"delete","summary":"Permanently delete a user account and all associated data from the discussion board","description":"This operation permanently removes a user account from the discussion_board_members table along with all associated data. When executed, the system performs a hard delete that completely removes the member record from the database.\n\nThe deletion cascades to all related entities through the foreign key relationships defined in the Prisma schema. This includes all user sessions, login history, password reset tokens, discussion topics authored by the user, replies posted by the user, votes cast by the user, favorited topics, followed tags, watched topics, blocking relationships, reputation records, content reports submitted, moderation actions targeting the user, warnings, suspensions, any active bans, appeals, notifications, audit logs, and security logs associated with the user account.\n\nThis operation is irreversible and results in complete data loss for the user account. It should only be executed when a user explicitly requests permanent account deletion or when an administrator determines that complete account removal is necessary. Before executing this operation, the system should present clear warnings to the user about the permanent nature of the deletion and the inability to recover the account or data afterward.\n\nThis operation requires administrator privileges as it represents a critical account management function with permanent consequences. The userId parameter must correspond to an existing member in the discussion_board_members table. If the specified user does not exist, the operation will fail with an appropriate error message.","parameters":[{"name":"userId","description":"Unique identifier of the user account to be permanently deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of active sessions for a specific user from the discussion_board_sessions table. Users can view all their currently active sessions across different devices to monitor account security and identify any unauthorized access. The operation supports filtering by device type, browser information, location, and activity timeframe. It enables users to audit their login history and manage multi-device access by reviewing where and when they are logged in. Administrators may also use this operation to review session activity for security investigations or user support purposes. The response includes session metadata such as device type, browser information, IP address, approximate location, login timestamp, and last activity timestamp to help users identify each session.","path":"/discussionBoard/member/users/{userId}/sessions","method":"patch","summary":"Retrieve and filter active sessions for a specific user account","description":"This operation retrieves a comprehensive, filtered, and paginated list of active sessions for a specified user from the discussion_board_sessions table. Sessions represent active login instances across different devices and browsers, providing users with visibility into where their account is currently authenticated.\n\nThe operation supports advanced filtering capabilities to help users find specific sessions based on various criteria including device type (Desktop, Mobile, Tablet), browser information (Chrome, Firefox, Safari, etc.), approximate geographic location, IP address patterns, login timestamp ranges, and last activity timeframe. Users can search for sessions that meet multiple filter criteria simultaneously to identify specific login instances or detect suspicious activity.\n\nEach session record in the response includes comprehensive metadata to help users identify and assess their login instances. This includes the device type extracted from the user agent string, browser name and version information, the IP address from which the session was created, an approximate geographic location based on IP geolocation (city-level precision), the timestamp when the user logged in to create this session, the timestamp of the most recent activity in this session, the session's expiration timestamp, and whether the session is currently active or has been revoked.\n\nSecurity considerations are paramount in this operation. Users should only be able to access their own session data unless they have administrator privileges. The operation enforces strict authorization checks to ensure users cannot view another user's active sessions without proper permissions. Session data is sensitive as it reveals user behavior patterns, device usage, and location information. The response should present session data in a user-friendly format that makes it easy to identify unfamiliar or suspicious sessions.\n\nThe operation integrates with the multi-device session management functionality defined in the User Roles and Authentication document. It provides the data foundation for features like \"view active sessions,\" \"revoke this session,\" and \"revoke all other sessions.\" Users can use this information to make informed decisions about session management and account security.\n\nPagination is essential given that active users may have numerous historical session records. The response should include pagination metadata indicating the current page, total number of sessions matching the filters, and page size. Sorting options allow users to organize sessions by most recent activity, login timestamp, or other relevant criteria to quickly identify the sessions they're looking for.","parameters":[{"name":"userId","description":"Unique identifier of the user whose sessions are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter criteria and pagination parameters for retrieving user sessions including device type, location, activity timeframe, and sorting preferences","typeName":"IDiscussionBoardSession.IRequest"},"responseBody":{"description":"Paginated list of active and recent sessions for the specified user with detailed device, location, and activity metadata","typeName":"IPageIDiscussionBoardSession"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of active sessions for a specific user from the discussion_board_sessions table. Administrators can view all sessions for any user to support security investigations, user support requests, or account monitoring. The operation supports filtering by device type, browser information, location, and activity timeframe. It enables administrators to audit user login history and identify potential security issues such as unauthorized access or compromised accounts. The response includes session metadata such as device type, browser information, IP address, approximate location, login timestamp, and last activity timestamp to help administrators assess session legitimacy and security posture.","path":"/discussionBoard/administrator/users/{userId}/sessions","method":"patch","summary":"Retrieve and filter active sessions for any user account (administrator access)","description":"This operation retrieves a comprehensive, filtered, and paginated list of active sessions for any specified user from the discussion_board_sessions table. Unlike the member-scoped session retrieval, this administrator operation can access session data for any user on the platform to support security investigations, user support requests, and account monitoring.\n\nThe operation supports advanced filtering capabilities to help administrators find specific sessions based on various criteria including device type (Desktop, Mobile, Tablet), browser information (Chrome, Firefox, Safari, etc.), approximate geographic location, IP address patterns, login timestamp ranges, and last activity timeframe. Administrators can search for sessions that meet multiple filter criteria simultaneously to identify suspicious login patterns, unusual device usage, or potential account compromises.\n\nEach session record in the response includes comprehensive metadata essential for security assessment. This includes the device type extracted from the user agent string, browser name and version information, the IP address from which the session was created, an approximate geographic location based on IP geolocation (city-level precision), the timestamp when the user logged in to create this session, the timestamp of the most recent activity in this session, the session's expiration timestamp, and whether the session is currently active or has been revoked.\n\nSecurity considerations are critical for this administrative operation. Only users with administrator privileges can access this endpoint, as it provides visibility into any user's session data. This access is necessary for legitimate security investigations (detecting account takeovers, investigating suspicious activity patterns) and user support (helping users who report unauthorized access). However, the sensitive nature of session data requires that administrator access is logged in security audit trails.\n\nThe operation integrates with the multi-device session management functionality and administrator security tools defined in the User Roles and Authentication document. Administrators can use this data to assist users with session management issues, investigate security incidents, identify patterns of abuse or unauthorized access, and take appropriate action such as revoking suspicious sessions or implementing additional security measures for compromised accounts.\n\nPagination is essential given that users may have numerous historical session records, and administrators may be reviewing session data across multiple users. The response should include pagination metadata indicating the current page, total number of sessions matching the filters, and page size. Sorting options allow administrators to organize sessions by most recent activity, login timestamp, or other criteria to quickly identify relevant sessions for their investigation or support task.","parameters":[{"name":"userId","description":"Unique identifier of the user whose sessions are being retrieved by the administrator","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter criteria and pagination parameters for retrieving user sessions including device type, location, activity timeframe, and sorting preferences","typeName":"IDiscussionBoardSession.IRequest"},"responseBody":{"description":"Paginated list of active and recent sessions for the specified user with detailed device, location, and activity metadata","typeName":"IPageIDiscussionBoardSession"},"authorizationRole":"administrator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation allows authenticated users to revoke a specific active session, effectively logging out from a particular device. The operation is designed to support the multi-device session management requirement where users can view and terminate sessions across different devices (desktop, mobile, tablet). This is a critical security feature that enables users to remotely terminate sessions if they suspect unauthorized access or simply want to log out from a device they no longer have physical access to. The operation performs a hard delete by immediately invalidating the session's JWT tokens and removing the session record from the database, as there is no deleted_at column in the discussion_board_sessions table. This ensures the session cannot be used for any further authenticated requests.","path":"/discussionBoard/member/users/{userId}/sessions/{sessionId}","method":"delete","summary":"Revoke a specific user session to terminate access from a particular device","description":"This operation enables authenticated users to revoke a specific active session, effectively logging out from a particular device or browser. This functionality is essential for the multi-device session management system described in the User Roles and Authentication requirements, where users need the ability to view all their active sessions and selectively terminate sessions they no longer wish to keep active.\n\nWhen a session is revoked through this operation, the system immediately invalidates all associated JWT tokens (both access and refresh tokens) for that session, preventing any further authenticated requests using those tokens. The session record is permanently removed from the discussion_board_sessions table since the schema does not include a deleted_at column for soft deletion. The associated refresh token in the discussion_board_refresh_tokens table is also removed through the cascade delete relationship.\n\nThis operation is particularly important for security scenarios such as when a user suspects unauthorized access, wants to log out from a device they no longer have physical access to, or simply wants to terminate sessions on devices they are no longer using. The operation provides users with granular control over their active sessions across multiple devices.\n\nThe operation validates that the requesting user is either the owner of the session being revoked or has administrative privileges. Users can only revoke their own sessions unless they are administrators. The session must exist and be associated with the specified user ID before revocation can proceed.\n\nAfter successful revocation, the affected device will be immediately logged out upon its next authenticated request, as the JWT tokens will no longer be valid. The operation logs the session termination in the security audit trail for accountability and security monitoring purposes.","parameters":[{"name":"userId","description":"Unique identifier of the user who owns the session","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier of the specific session to revoke","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[]},{"specification":"This operation retrieves the comprehensive login history for a specific user, supporting security monitoring, account activity review, and suspicious activity detection. The operation accesses the discussion_board_login_history table which maintains an immutable audit trail of all login attempts including successful authentications and failed login attempts. The operation supports filtering, sorting, and pagination to help users and administrators review login patterns, detect unauthorized access attempts, and understand account security status. This is a PATCH operation because it requires a request body to specify complex search criteria including date ranges, success/failure filtering, IP address filtering, and pagination parameters.","path":"/discussionBoard/member/users/{userId}/loginHistory","method":"patch","summary":"Retrieve paginated and filtered login history for a specific user account","description":"This operation provides comprehensive access to a user's login history, which is maintained in the discussion_board_login_history table as an immutable audit trail of all authentication attempts. The login history includes both successful logins and failed authentication attempts, providing critical data for security monitoring and account activity review.\n\nThe login history captures detailed information about each login attempt including the email address used, whether the attempt was successful, failure reasons for unsuccessful attempts, IP address, device type, browser information, and approximate geographic location. This comprehensive data enables users to detect suspicious login activity, verify legitimate access patterns, and understand the security status of their account.\n\nUsers can access their own login history to monitor account security, identify unrecognized login attempts, and verify that only authorized devices have accessed their account. Administrators can access login history for any user to investigate security incidents, support account recovery requests, and analyze platform-wide authentication patterns.\n\nThe operation supports advanced filtering capabilities to help users find specific login events efficiently. Filters include date range selection to focus on recent activity or historical patterns, success/failure status to isolate failed login attempts that might indicate unauthorized access attempts, IP address filtering to track logins from specific locations, device type filtering to review activity by device category, and location-based filtering for geographic access patterns.\n\nPagination is implemented to handle users with extensive login histories efficiently, displaying 50 login records per page by default. The results are sorted by timestamp in descending order (most recent first) to prioritize current activity. This ordering helps users quickly identify their most recent login events and detect any unusual recent activity.\n\nThe operation validates that the requesting user is either the account owner reviewing their own login history or an administrator with privileges to access any user's security logs. This authorization check ensures that login history data, which contains sensitive security information including IP addresses and location data, is only accessible to authorized parties.\n\nThe response includes comprehensive login attempt details with all fields from the discussion_board_login_history table, enabling detailed security analysis and pattern recognition for both users and administrators.","parameters":[{"name":"userId","description":"Unique identifier of the user whose login history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, and pagination parameters for retrieving login history records","typeName":"IDiscussionBoardMember.ILoginHistoryRequest"},"responseBody":{"description":"Paginated list of login history records including successful and failed authentication attempts with device and location details","typeName":"IPageIDiscussionBoardLoginHistory"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of users that a specific member has blocked. The blocking mechanism prevents unwanted interactions by hiding blocked users' content and preventing their notifications. This operation operates on the discussion_board_blocked_users table and returns blocked user information including when they were blocked, optional block reasons, and basic user profile data from the blocked member. The operation supports filtering by date ranges, searching within blocked users, and sorting options. Users can only view their own blocked list (ownership verification required), while moderators and administrators can view any user's blocked list for moderation purposes. The response includes summary information about each blocked user to help the blocker remember why they blocked specific users and manage their block list effectively.","path":"/discussionBoard/member/users/{userId}/blockedUsers","method":"patch","summary":"Retrieve paginated list of blocked users for a specific member with filtering and search capabilities","description":"Retrieve a comprehensive, filtered list of users that a specific member has blocked on the discussion board platform. This operation provides members with visibility into their blocked user list, allowing them to review who they have blocked, when the blocks were created, and why users were blocked if reasons were provided.\n\nThe blocking system is a core privacy and user experience feature that allows members to control their interactions on the platform. When a user blocks another user, they no longer see that user's topics, replies, or receive notifications from them. This operation enables users to manage their block list by reviewing all current blocks with filtering, sorting, and search capabilities.\n\nSecurity considerations ensure that users can only access their own blocked user list unless they have moderator or administrator privileges. The operation validates that the requesting user matches the userId parameter or has elevated permissions. This prevents unauthorized access to other users' blocking relationships, which are considered private user preferences.\n\nThe response includes essential information about each blocked user including their username, display name, when they were blocked, and any reason provided during blocking. This helps users remember why they blocked specific individuals and make informed decisions about maintaining or removing blocks. The blocked user's basic profile information is included to provide context without requiring additional API calls.\n\nFiltering options support searching by username, filtering by date range (when blocks were created), and sorting by various criteria. Pagination ensures efficient handling of large block lists, with the standard 20 items per page. The operation respects the business rule maximum of 100 blocked users per account, so result sets will never exceed this limit.\n\nThe operation automatically filters out soft-deleted blocking relationships (where deleted_at is not null) to return only currently active blocks. This ensures users see only their current blocking relationships, not historical blocks that have been removed.\n\nThis operation integrates with the user profile and preferences system documented in the User Profiles and Preferences requirements, specifically the blocked users management functionality. It supports the privacy and user control principles central to the platform's design philosophy for managing interactions on sensitive political and economic discussions.","parameters":[{"name":"userId","description":"Unique identifier of the user whose blocked user list is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering parameters, and pagination options for retrieving the blocked users list","typeName":"IDiscussionBoardBlockedUser.IRequest"},"responseBody":{"description":"Paginated list of blocked users with summary information including usernames, block timestamps, and block reasons","typeName":"IPageIDiscussionBoardBlockedUser.ISummary"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation creates a new user blocking relationship where the authenticated member blocks another member to prevent unwanted interactions. The blocking operation operates on the discussion_board_blocked_users table and establishes a one-way blocking relationship. When user A blocks user B, user A will no longer see B's topics, replies, or receive notifications from B, while B can still see A's content (asymmetric blocking per requirements). The operation validates that the blocker is not attempting to block themselves, that the target user exists and is a valid member, that the blocker has not exceeded the maximum of 100 blocked users per account, and that a blocking relationship does not already exist between these users. The operation records the block timestamp, optional user-provided reason for accountability, and returns confirmation of the blocking action with the created block relationship details.","path":"/discussionBoard/member/users/{userId}/blockedUsers","method":"post","summary":"Create a new blocking relationship to block another user from interacting with the authenticated member","description":"Create a new user blocking relationship where the authenticated member blocks another member to prevent unwanted interactions and filter their content from the blocker's view. This operation implements the asymmetric blocking mechanism that is central to user privacy and control on the discussion board platform.\n\nBlocking is a critical user empowerment feature that allows members to curate their discussion board experience by removing disruptive, offensive, or simply unwanted interactions from specific users. When a member blocks another user, the blocker will no longer see the blocked user's discussion topics, replies, or receive any notifications from them. The blocking relationship is asymmetric, meaning that blocking user B does not prevent B from seeing A's content—only A's view is filtered.\n\nThe operation validates several critical business rules before creating the block. First, it verifies that the authenticated user matches the userId parameter to prevent unauthorized blocking on behalf of other users. Second, it checks that the user is not attempting to block themselves, which would be illogical and is explicitly prevented. Third, it validates that the target user exists and is a valid member account (not deleted or banned). Fourth, it enforces the platform's business rule limiting each member to a maximum of 100 blocked users to prevent abuse and maintain system performance. Finally, it checks that a blocking relationship does not already exist between these two users to prevent duplicate blocks.\n\nThe request body includes the target user's identifier (the user to be blocked) and an optional reason for the block. The reason field is optional but encouraged, as it helps the blocker remember why they blocked someone when reviewing their blocked users list later. It also provides context to support teams if a blocking relationship is reported as retaliatory or abusive, though blocks themselves are generally unrestricted user preferences.\n\nUpon successful block creation, the operation records the blocking relationship in the discussion_board_blocked_users table with the blocker's ID, blocked user's ID, optional reason, and current timestamp. The response returns the created block relationship including the blocked user's basic profile information (username, display name) to confirm which user was blocked. The blocked user does not receive any notification that they have been blocked, maintaining privacy for the blocker.\n\nIf a user previously blocked and then unblocked another user (creating a soft-deleted block record with deleted_at set), creating a new block establishes a fresh blocking relationship with a new record and timestamp. The system does not reuse soft-deleted block records.\n\nThis operation is essential for user safety and experience, particularly on a platform focused on potentially contentious political and economic discussions. It empowers users to create their own boundaries and filter out interactions that detract from their platform experience, reducing the need for moderator intervention in interpersonal conflicts. The blocking system is detailed in the User Profiles and Preferences requirements document under the blocked users management section.","parameters":[{"name":"userId","description":"Unique identifier of the user who is creating the block (the blocker)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information about the user to block including their identifier and optional reason for blocking","typeName":"IDiscussionBoardBlockedUser.ICreate"},"responseBody":{"description":"Created blocking relationship with details of the blocked user and block metadata","typeName":"IDiscussionBoardBlockedUser"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation removes a user blocking relationship by deleting the block record between the authenticating user and the specified blocked user. It operates on the discussion_board_blocked_users table from the Prisma schema. The operation validates that the blocker is the authenticated user (ensuring users can only unblock their own blocks, not others'), confirms the block relationship exists, and then permanently removes it from the database. This is a hard delete operation as the schema does not include a deleted_at column for the discussion_board_blocked_users table - the record is completely removed from the database. After successful deletion, the previously blocked user's content becomes visible again to the user who initiated the unblock, and notifications from the previously blocked user will resume according to the user's notification preferences.","path":"/discussionBoard/member/users/{userId}/blockedUsers/{blockedUserId}","method":"delete","summary":"Remove a user blocking relationship to unblock a previously blocked user","description":"Removes an existing user blocking relationship, allowing the authenticated user to once again see content from and receive notifications from the previously blocked user. This operation performs a hard delete on the discussion_board_blocked_users table, permanently removing the block record from the database.\n\nWhen a user unblocks another user, the system immediately restores visibility of the unblocked user's topics, replies, and other content throughout the platform. The user who performed the unblock will also resume receiving notifications from the previously blocked user according to their notification preference settings.\n\nThe operation validates that the authenticated user is the blocker (user_id matches blocker_id in the block record) to prevent users from removing other users' blocks. It also confirms that an active blocking relationship exists between the specified users before attempting deletion. If no block relationship exists, the operation returns an error indicating the block was not found.\n\nThis operation is part of the user privacy and interaction control features defined in the User Profiles and Preferences requirements. Users can manage their blocked users list through their profile settings, with a maximum of 100 blocked users per account. The business rules enforce a limit of 3 block/unblock cycles per user pair per day to prevent abuse of the blocking system.\n\nSecurity considerations include verifying the authenticated user's identity through JWT token validation and ensuring users cannot manipulate other users' blocking relationships. The operation enforces role-based access control where only the blocker themselves can remove their own blocks.\n\nAfter successful unblock, users may immediately see the previously blocked user's content in discussion threads and search results. The change takes effect instantly without requiring page refresh for real-time interfaces, though cached content may take a few moments to update.","parameters":[{"name":"userId","description":"Unique identifier of the authenticated user who is removing the block (the blocker)","schema":{"type":"string","format":"uuid"}},{"name":"blockedUserId","description":"Unique identifier of the user who is being unblocked (the blocked user)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/users/{userId}/blockedUsers","method":"post"},"description":"A blocking relationship must exist before it can be removed. The block must be created first to establish the relationship between the blocker and the blocked user in the discussion_board_blocked_users table."}]},{"specification":"This operation retrieves the complete reputation information for a specific user by querying the discussion_board_user_reputation table from the Prisma schema. Reputation represents a user's contribution quality as judged by the community through voting on their content. The operation returns aggregated reputation metrics including total score, breakdown by content type (topics vs replies), and vote statistics. This data is used for displaying user reputation on profiles, leaderboards, privilege unlocking, and reputation badges according to the tier thresholds defined in business requirements (0-99: New Contributor, 100-499: Active Member, 500-999: Valued Contributor, 1000-4999: Trusted Contributor, 5000+: Expert Contributor).","path":"/discussionBoard/users/{userId}/reputation","method":"get","summary":"Retrieve detailed reputation score and statistics for a specific user","description":"Retrieves comprehensive reputation information for the specified user from the discussion_board_user_reputation table. Reputation is an aggregated metric representing the quality of a user's contributions as determined by community voting on their discussion topics and replies.\n\nThe reputation system calculates scores using a weighted formula: (topic upvotes × 5) - (topic downvotes × 2) + (reply upvotes × 2) - (reply downvotes × 1). This weighting reflects that creating discussion topics requires more effort than posting replies, and thus earns more reputation points per vote. The response includes the total reputation score, separate scores for topics and replies, and the total upvotes and downvotes received across all the user's content.\n\nReputation serves multiple purposes within the platform's ecosystem. It provides social proof of contribution quality, enables reputation-based privilege unlocking (such as downvoting at 50 points, extended editing windows at 100 points, tag creation at 500 points), determines reputation tier badges displayed on user profiles and posts, and influences content ranking in search and discovery algorithms for high-reputation authors.\n\nThe reputation data is denormalized in the discussion_board_user_reputation table for performance, avoiding expensive vote aggregation queries on every profile view. The system updates reputation scores in real-time as votes are cast, changed, or removed on the user's content. This ensures the reputation display is always current and accurately reflects the user's standing in the community.\n\nSecurity considerations include validating that the requested user exists and that their profile visibility settings permit viewing reputation information. Public profiles show reputation to all users including guests, while members-only profiles restrict reputation visibility to authenticated users, and private profiles may hide reputation entirely based on user privacy preferences.\n\nThis operation integrates with the voting and engagement system documented in the Voting and Engagement requirements, the user profile system from the User Profiles and Preferences documentation, and supports the reputation-based privilege model defined in the Business Rules and Validation document.\n\nThe response provides all necessary data for displaying reputation badges, calculating tier levels, showing contribution statistics on user profiles, and determining if users have sufficient reputation for privilege-gated actions like downvoting or advanced tagging features.","parameters":[{"name":"userId","description":"Unique identifier of the user whose reputation information is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete reputation statistics including total score, vote breakdown, and content-specific scores","typeName":"IDiscussionBoardUserReputation"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation removes a user blocking relationship by setting the deleted_at timestamp on the block record between the authenticating user and the specified blocked user. It operates on the discussion_board_blocked_users table from the Prisma schema, which includes a deleted_at column supporting soft deletion. The operation validates that the blocker is the authenticated user (ensuring users can only unblock their own blocks, not others'), confirms the block relationship exists, and then performs a soft delete by setting the deleted_at timestamp to the current time. This preserves the blocking history for audit purposes while immediately restoring visibility of the previously blocked user's content and resuming notifications according to the user's notification preferences. Soft-deleted block records support a 30-day recovery window per platform policy before permanent cleanup.","path":"/discussionBoard/member/blockedUsers/{blockedUserId}","method":"delete","summary":"Remove a user blocking relationship to unblock a previously blocked user","description":"Removes an existing user blocking relationship by performing a soft delete on the discussion_board_blocked_users record, allowing the authenticated user to once again see content from and receive notifications from the previously blocked user. This operation sets the deleted_at timestamp to preserve the block history for audit purposes while immediately restoring content visibility.\n\nWhen a user unblocks another user, the system marks the blocking relationship as deleted by setting the deleted_at timestamp on the discussion_board_blocked_users record. This soft deletion approach preserves the historical record of the blocking relationship for audit trail and analytics purposes while immediately changing the user's experience. The previously blocked user's topics, replies, and other content become visible again throughout the platform, and the user who performed the unblock will resume receiving notifications from the previously blocked user according to their notification preference settings.\n\nThe operation uses the authenticated user's ID from the JWT token as the blocker_id when querying for the block record, eliminating the need for a userId path parameter and preventing authorization bypass vulnerabilities. The system validates that an active (non-deleted) blocking relationship exists between the authenticated user and the specified blocked user before attempting the soft delete. If no active block relationship exists, the operation returns an error indicating the block was not found.\n\nThis operation is part of the user privacy and interaction control features defined in the User Profiles and Preferences requirements. Users can manage their blocked users list through their profile settings, with a maximum of 100 blocked users per account. The business rules enforce a limit of 3 block/unblock cycles per user pair per day to prevent abuse of the blocking system. Soft-deleted block records are retained for 30 days to support recovery in case of accidental unblock or for audit purposes, after which they may be permanently removed during database cleanup operations.\n\nSecurity considerations include verifying the authenticated user's identity through JWT token validation and ensuring users cannot manipulate other users' blocking relationships. The operation enforces role-based access control where only the blocker themselves can remove their own blocks. The system checks that the deleted_at field is currently null (indicating an active block) before performing the soft delete to prevent duplicate operations.\n\nAfter successful soft delete, users may immediately see the previously blocked user's content in discussion threads and search results. The change takes effect instantly without requiring page refresh for real-time interfaces, though cached content may take a few moments to update. The discussion_board_blocked_users record remains in the database with deleted_at set to the current timestamp, supporting audit queries and preventing complete loss of blocking history.","parameters":[{"name":"blockedUserId","description":"Unique identifier of the user who is being unblocked (the blocked user)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/users/{userId}/blockedUsers","method":"post"},"description":"Blocking relationship must exist before it can be removed. The user must have previously blocked this user to unblock them."}]},{"specification":"This operation retrieves a paginated, filtered list of discussion topics that a specific user has favorited/bookmarked. It operates on the discussion_board_favorites table from the Prisma schema, joining with discussion_board_topics to return complete topic information for each favorited item. The operation supports advanced filtering and sorting to help users organize and discover their saved discussions. Users can search within favorites, filter by category or tags, and sort by various criteria including date favorited, topic activity, or vote score. This is essential for users who bookmark valuable discussions on economic and political topics for later reference, research, or continued engagement.","path":"/discussionBoard/member/users/{userId}/favorites","method":"patch","summary":"Retrieve a filtered, paginated list of discussion topics favorited by a specific user","description":"Retrieve a comprehensive, filtered, and paginated list of discussion topics that a user has bookmarked or favorited for later reference. This operation provides members with powerful tools to organize and rediscover their saved economic and political discussions.\n\nThe operation queries the discussion_board_favorites table, joining with discussion_board_topics to return complete topic information including title, content preview, category, tags, vote scores, reply counts, and author information. This enables users to maintain a personal library of valuable discussions they want to revisit.\n\nSecurity considerations include verifying that the requesting user has permission to view the specified user's favorites. By default, favorites are private (visible only to the owner), but users can optionally make their favorites public through privacy settings defined in the discussion_board_members table. The operation must respect the activity_visibility field when determining access permissions.\n\nThe operation supports comprehensive filtering options including search by topic title or content, filtering by category or tags, date range filtering (when favorited), and filtering by topic status (active, archived). This helps users efficiently locate specific favorited discussions within large bookmark collections.\n\nSorting capabilities include ordering by date favorited (newest first or oldest first), topic creation date, recent activity on the topic, vote score, or reply count. This flexibility allows users to organize their favorites based on different discovery and research needs.\n\nPagination is essential for users with extensive favorite collections, with configurable page sizes. The response includes pagination metadata (total count, page number, page size) to support client-side pagination controls.\n\nThis operation integrates with the voting and engagement system by including current vote scores and engagement metrics for each favorited topic. It also integrates with the discussion management system to provide complete topic metadata including category assignment, tag associations, and current topic status.","parameters":[{"name":"userId","description":"Unique identifier of the user whose favorited topics are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for retrieving user's favorited discussions","typeName":"IDiscussionBoardFavorite.IRequest"},"responseBody":{"description":"Paginated list of discussion topics favorited by the user, with complete topic information and engagement metrics","typeName":"IPageIDiscussionBoardTopic.ISummary"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topics must exist before they can be favorited by users"}]},{"specification":"This operation creates a new favorite/bookmark relationship between a user and a discussion topic. It operates on the discussion_board_favorites table in the Prisma schema, establishing a many-to-many relationship between discussion_board_members and discussion_board_topics. The operation validates that the topic exists, that the user has not already favorited it (enforcing the unique constraint), and that the user has permission to favorite topics (authenticated member only). Business rules limit users to reasonable numbers of favorites to prevent abuse, though the schema does not enforce a maximum count constraint. This operation is essential for users who want to save valuable economic and political discussions for later reference and maintain a personal collection of interesting topics.","path":"/discussionBoard/member/users/{userId}/favorites","method":"post","summary":"Add a discussion topic to a user's favorites/bookmarks collection","description":"Create a new favorite/bookmark record for a specific user on a discussion topic. This operation allows members to save important or interesting discussions on economic and political subjects for easy access and future reference.\n\nThe operation creates a record in the discussion_board_favorites table, establishing a relationship between the user (discussion_board_member_id) and a discussion topic (discussion_board_topic_id). Each favorite record captures when the bookmark was created, enabling chronological organization of saved content.\n\nSecurity considerations require verifying that the authenticated user matches the userId in the path parameter, preventing users from creating favorites on behalf of other users. The operation validates that the requesting user is a registered, authenticated member with active account status.\n\nThe operation validates that the target discussion topic exists in the discussion_board_topics table and is accessible to the user (not deleted, not restricted by permissions). It also enforces the unique constraint that prevents duplicate favorites - users cannot favorite the same topic multiple times.\n\nThe request body contains the topic_id of the discussion to be favorited. The operation performs referential integrity validation to ensure the topic_id references a valid, existing discussion topic. If the topic does not exist or has been deleted, the operation returns an appropriate error.\n\nBusiness rules from the requirements allow users to maintain unlimited favorites, though the platform may implement soft limits in the future. The operation supports soft deletion via the deleted_at timestamp field, allowing recovery of accidentally removed bookmarks within a recovery window.\n\nThe response returns the created favorite record including the unique favorite ID, topic information, and creation timestamp. This enables the client to immediately update the UI to reflect the favorited state and add the topic to the user's favorites collection.\n\nThis operation integrates with the engagement system by recording user interest in specific topics. Favorited topics may receive special treatment in personalized recommendations and notification preferences, allowing users to track updates on discussions they've explicitly bookmarked.","parameters":[{"name":"userId","description":"Unique identifier of the user who is favoriting the discussion topic","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information about the discussion topic to be added to user's favorites, including the topic identifier","typeName":"IDiscussionBoardFavorite.ICreate"},"responseBody":{"description":"Created favorite record with topic information and bookmark creation timestamp","typeName":"IDiscussionBoardFavorite"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be added to user's favorites collection"}]},{"specification":"This operation removes a favorite/bookmark from a user's saved discussion collection. It operates on the discussion_board_favorites table from the Prisma schema and allows users to unfavorite topics they previously bookmarked. The operation targets a specific favorite record by its unique identifier within the context of the authenticated user's favorites collection.","path":"/discussionBoard/member/users/{userId}/favorites/{favoriteId}","method":"delete","summary":"Remove a bookmarked discussion from user's favorites collection","description":"This operation allows authenticated users to remove a previously bookmarked discussion topic from their favorites collection. When a user unfavorites a topic, the favorite record is soft deleted from the discussion_board_favorites table, marking it with a deleted_at timestamp while preserving the record for potential recovery during the 30-day recovery window as specified in the platform policy.\n\nThe operation validates that the favorite record exists, belongs to the authenticated user, and has not already been deleted. Users can only delete their own favorites - attempting to delete another user's favorite will result in a permission error. The favoriteId parameter must reference a valid favorite record in the discussion_board_favorites table that is currently active (deleted_at is null).\n\nSecurity considerations include verifying that the authenticated user's ID matches the userId path parameter to prevent unauthorized deletion of other users' favorites. The operation respects the soft deletion pattern, setting the deleted_at timestamp rather than permanently removing the record from the database. This soft delete approach supports the platform's 30-day recovery window and maintains data integrity for audit purposes.\n\nThis operation is the inverse of creating a favorite and works in conjunction with the GET or PATCH endpoints that list favorited discussions. After successful deletion, the removed topic will no longer appear in the user's favorites list but can be favorited again if desired, as the system filters out records with non-null deleted_at timestamps in normal queries.\n\nUpon successful deletion, the operation returns no response body, following REST conventions for DELETE operations. The client should update the UI to reflect the removal of the bookmarked topic from the favorites collection. If the favorite record does not exist or has already been deleted, the operation should return an appropriate error response.","parameters":[{"name":"userId","description":"Unique identifier of the user whose favorite is being removed","schema":{"type":"string","format":"uuid"}},{"name":"favoriteId","description":"Unique identifier of the favorite record to be removed from the user's collection","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/users/{userId}/favorites","method":"post"},"description":"Favorite record must exist before it can be deleted. The favorite must be created first to establish the bookmark relationship between the user and a discussion topic."}]},{"specification":"This operation retrieves a paginated, filtered list of tags that a user is following for personalized content recommendations and notifications. It operates on the discussion_board_followed_tags table from the Prisma schema and supports complex queries with filtering, sorting, and pagination to help users manage their followed tag collection. Users can follow up to 50 tags per the business rules, and this operation provides efficient access to that collection.","path":"/discussionBoard/member/users/{userId}/followedTags","method":"patch","summary":"Search and retrieve user's followed tags with filtering and pagination","description":"This operation provides a comprehensive interface for retrieving and searching through the tags that a specific user is following. When users follow tags on the discussion board platform, they receive personalized content recommendations and notifications for new topics tagged with those tags. This endpoint allows users to view and manage their followed tag collection with advanced filtering and sorting capabilities.\n\nThe operation queries the discussion_board_followed_tags table from the Prisma schema, joining with the discussion_board_tags table to retrieve complete tag information including tag names, descriptions, status, and usage statistics. The search supports filtering by tag name, tag status (active, pending_review, disabled, merged), date ranges for when tags were followed, and sorting by various criteria including follow date, tag name, and tag popularity.\n\nSecurity considerations include verifying that the authenticated user's ID matches the userId path parameter to prevent unauthorized access to other users' followed tag collections. The operation respects the soft deletion pattern, filtering out followed_tags records where deleted_at is not null, ensuring only active follows are returned. Similarly, the operation should filter out tags where the tag itself has been deleted (tag.deleted_at is not null).\n\nThe response includes pagination metadata to handle users approaching the 50-tag follow limit efficiently. Each returned tag record includes essential information such as tag name, description, follow date (created_at from followed_tags), and optionally aggregated statistics from the mv_discussion_board_tag_statistics materialized view if available. The materialized view provides denormalized data including usage_count (number of topics with this tag), recent_usage_count, total_votes, and follower_count.\n\nThis operation integrates with the tag-based content discovery system, providing the foundation for personalized recommendations based on user interests. Users typically access this endpoint through their profile settings or tag management interface to review and potentially unfollow tags that are no longer relevant to their interests. The operation enables users to audit their followed tags and make informed decisions about which tags to continue following given the 50-tag maximum limit specified in the business rules.\n\nThe PATCH method is used instead of GET to support complex request body parameters for filtering and pagination, following the API design pattern established for list/search operations with advanced query capabilities.","parameters":[{"name":"userId","description":"Unique identifier of the user whose followed tags are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering options, sorting preferences, and pagination parameters for retrieving followed tags","typeName":"IDiscussionBoardFollowedTag.IRequest"},"responseBody":{"description":"Paginated list of tags the user is following with complete tag details, follow metadata, and optional usage statistics","typeName":"IPageIDiscussionBoardFollowedTag.ISummary"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/users/{userId}/followedTags","method":"post"},"description":"At least one followed tag relationship must exist before the user can retrieve their followed tags list. Users must follow tags first to have a collection to search and filter."}]},{"specification":"This operation allows authenticated members to follow a specific tag for personalized content discovery and notifications. When a member follows a tag, they receive notifications about new topics with that tag and see followed tags prioritized in their feed and recommendations. This operation operates on the discussion_board_followed_tags junction table and enforces the business rule limiting users to 50 followed tags maximum. The operation validates that the tag exists, the user is authenticated as a member, and the user has not already followed this tag. Following tags is a core engagement feature that enables users to customize their discussion board experience around their specific interests in economic and political topics.","path":"/discussionBoard/member/users/{userId}/followedTags","method":"post","summary":"Follow a tag for personalized content recommendations and notifications","description":"Create a new tag following relationship for an authenticated member. This endpoint allows users to follow specific tags to customize their discussion board experience and receive relevant content recommendations.\n\nWhen a member follows a tag, the system creates a record in the discussion_board_followed_tags table linking the user to the tag. The followed tag relationship enables several key features: prioritization of topics with that tag in the user's personalized recommendations, optional notifications when new topics are created with that tag, and display of followed tags in the user's profile for managing their interests.\n\nThe operation enforces important business constraints: members can follow a maximum of 50 tags as specified in the business rules document, preventing excessive tag following that could dilute the personalization benefits. The system validates that the tag being followed exists in the discussion_board_tags table and is in active status. The operation also prevents duplicate follows by checking existing relationships.\n\nThis operation integrates with the recommendation system and notification system to provide users with content discovery aligned with their declared interests in economic and political topics. Following tags is a key engagement mechanism that helps users navigate the growing repository of discussions efficiently.\n\nSecurity considerations include validating that the userId in the path matches the authenticated user's identity (users can only manage their own followed tags), ensuring the user has member role or higher, and preventing abuse through rate limiting on follow/unfollow actions.\n\nRelated operations that users typically perform in sequence include browsing available tags through tag search or tag cloud features, viewing topics with specific tags to determine interest, and managing their complete list of followed tags through their profile settings.","parameters":[{"name":"userId","description":"Unique identifier of the authenticated member who is following the tag","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information about the tag to follow, including the tag identifier and optional notification preferences","typeName":"IDiscussionBoardFollowedTag.ICreate"},"responseBody":{"description":"Created followed tag relationship with tag details, follow timestamp, and user's current followed tag count","typeName":"IDiscussionBoardFollowedTag"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/tags","method":"post"},"description":"Tag must exist in the system before a member can follow it. The tag creation operation ensures that the discussion_board_tag_id referenced in the follow request corresponds to a valid, active tag in the discussion_board_tags table."}]},{"specification":"This operation allows authenticated members to unfollow a previously followed tag, removing the tag following relationship and stopping related notifications and content prioritization. The operation removes the record from the discussion_board_followed_tags junction table through soft deletion (setting deleted_at timestamp) to preserve historical interest data while immediately stopping tag-related notifications and recommendation prioritization. The operation validates that the followed tag relationship exists and belongs to the requesting user before allowing removal. This is a core user preference management operation supporting the tag-based content discovery and personalization system.","path":"/discussionBoard/member/users/{userId}/followedTags/{followedTagId}","method":"delete","summary":"Unfollow a tag to stop receiving related notifications and content prioritization","description":"Remove an existing tag following relationship for an authenticated member. This endpoint allows users to unfollow tags they are no longer interested in, immediately stopping related notifications and content recommendations.\n\nWhen a member unfollows a tag, the system soft-deletes the corresponding record in the discussion_board_followed_tags table by setting the deleted_at timestamp. Soft deletion preserves historical user interest data for analytics and potential future personalization insights while immediately removing the tag from the user's active followed tags list. The unfollowed tag will no longer appear in the user's followed tags display, topics with that tag will no longer be prioritized in recommendations, and the user will stop receiving notifications about new topics with that tag.\n\nThe operation enforces important security and ownership constraints: users can only unfollow tags they themselves have followed (ownership validation), the followedTagId must correspond to an actual followed tag relationship in the database, and the userId in the path must match the authenticated user's identity. The system validates these constraints before processing the removal.\n\nThis operation supports the accidental unfollow recovery use case through the soft deletion pattern. If a user accidentally unfollows a tag, administrators or the user themselves (through a potential UI feature) could restore the relationship by clearing the deleted_at timestamp within the platform's 30-day soft deletion recovery window.\n\nThe operation integrates with the notification system to immediately stop queuing new notifications for the unfollowed tag, and with the recommendation algorithm to remove the tag from the user's interest profile. This ensures users see immediate effects when managing their followed tags.\n\nSecurity considerations include ownership verification (users cannot unfollow tags on behalf of other users), authentication validation (only authenticated members can unfollow tags), and audit trail creation (the soft deletion is logged with timestamp for user activity tracking).\n\nRelated operations that users typically perform include viewing their complete list of followed tags to decide which to unfollow, browsing tag statistics to discover new tags to follow as replacements, and adjusting notification preferences for remaining followed tags.","parameters":[{"name":"userId","description":"Unique identifier of the authenticated member who is unfollowing the tag","schema":{"type":"string","format":"uuid"}},{"name":"followedTagId","description":"Unique identifier of the followed tag relationship to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/tags","method":"post"},"description":"Tag must exist in the system as the foundation for the followed tag relationship that will be deleted. The tag creation establishes the discussion_board_tag referenced by the followed tag record."},{"endpoint":{"path":"/discussionBoard/member/users/{userId}/followedTags","method":"post"},"description":"Followed tag relationship must be created before it can be deleted. This operation establishes the discussion_board_followed_tags record that the delete operation will soft-delete by setting the deleted_at timestamp."}]},{"specification":"This operation retrieves a filtered and paginated list of discussion topics that a specific user is watching. It operates on the discussion_board_watched_topics table from the Prisma schema, joining with discussion_board_topics to provide comprehensive topic information. The operation supports complex filtering, searching, and sorting capabilities to help users manage their watched topics list efficiently. Users watch topics to receive notifications about new activity, and this operation allows them to view and manage all topics they're currently tracking.","path":"/discussionBoard/member/users/{userId}/watchedTopics","method":"patch","summary":"Retrieve a filtered, paginated list of discussion topics watched by a specific user","description":"Retrieve a comprehensive, filtered, and paginated list of all discussion topics that the specified user is currently watching. This operation provides users with full visibility into their watched topics, allowing them to manage which discussions they're tracking for updates and notifications.\n\nThe operation accesses the discussion_board_watched_topics table which maintains the many-to-many relationship between users and the topics they follow. Each watched topic record includes the last_read_at timestamp, enabling the system to identify which topics have new activity since the user last viewed them. This allows the API to return unread indicators and sort by topics with new activity.\n\nUsers can watch topics to receive notifications when new replies are posted, when discussions reach vote milestones, or when other significant activity occurs. This operation supports the watched topic notification workflow described in the Notification System requirements, allowing users to review all topics they're monitoring in one centralized view.\n\nThe operation supports comprehensive filtering options including category-based filtering (Economics, Politics, etc.), activity status (topics with new activity vs. fully read), date ranges for when topics were added to watch list, and text search across watched topic titles and content. Sorting options include most recent activity, newest watched topics first, alphabetical by title, and topics with unread activity prioritized.\n\nSecurity considerations include validating that the requesting user has permission to access the specified user's watched topics list. Users can only retrieve their own watched topics list unless they have moderator or administrator privileges. The operation respects privacy settings and only returns topics the user has permission to view based on topic visibility rules and content access controls.\n\nThis operation integrates with the discussion management system to retrieve full topic details including title, category, author, creation date, reply count, vote score, and last activity timestamp. It also incorporates the last_read_at timestamp from the watched_topics relationship to calculate and display unread indicators, showing users which watched topics have new activity requiring their attention.\n\nRelated API operations include POST /users/{userId}/watchedTopics to add new topics to the watch list, DELETE /users/{userId}/watchedTopics/{topicId} to remove topics from watch list, and PATCH /users/{userId}/watchedTopics/{topicId} to update last_read_at timestamp when user views a watched topic.","parameters":[{"name":"userId","description":"Unique identifier of the user whose watched topics are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sorting parameters for the watched topics list query","typeName":"IDiscussionBoardWatchedTopic.IRequest"},"responseBody":{"description":"Paginated list of watched discussion topics with metadata including unread indicators and last read timestamps","typeName":"IPageIDiscussionBoardWatchedTopic.ISummary"},"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topics must exist before they can be watched by users"}]},{"specification":"This operation adds a new discussion topic to the user's watched topics list. It operates on the discussion_board_watched_topics table from the Prisma schema, creating a new watch relationship between the user and the specified topic. When users watch topics, they receive notifications about new replies and activity based on their notification preferences defined in the discussion_board_notification_preferences table. This operation validates that the topic exists, is accessible to the user, and that the user is not already watching it.","path":"/discussionBoard/member/users/{userId}/watchedTopics","method":"post","summary":"Add a discussion topic to the user's watched topics list for activity notifications","description":"Create a new watch relationship that adds a discussion topic to the specified user's watched topics list. When users watch topics, they receive notifications about new activity including new replies, vote milestones, and other significant events based on their configured notification preferences.\n\nThis operation creates a record in the discussion_board_watched_topics table establishing the many-to-many relationship between the user (discussion_board_member_id) and the topic (discussion_board_topic_id). The operation initializes the last_read_at timestamp to the current time, indicating that the user has read all content up to this point, and future notifications will only be triggered by new activity occurring after this timestamp.\n\nThe watch topic feature serves multiple business purposes. First, it enables users to track ongoing discussions they're interested in without manually checking for updates. Second, it drives user engagement by delivering timely notifications when watched topics receive new replies or activity. Third, it supports the personalized recommendation system by identifying topics the user explicitly cares about, which informs content recommendation algorithms.\n\nThe operation validates several business rules before creating the watch relationship. It verifies that the specified topic exists in the discussion_board_topics table and is in an active state (not deleted, not archived). It confirms the user has permission to view the topic based on topic visibility rules and their role permissions. It checks that the user is not already watching this topic to prevent duplicate watch records. It enforces the business rule that users cannot watch their own topics (to prevent self-notification scenarios).\n\nSecurity considerations include authenticating the requesting user and validating they have permission to modify the specified user's watched topics. Users can only add topics to their own watch list unless they have administrator privileges. The operation respects content access controls, ensuring users can only watch topics they have permission to view based on their role and any content visibility restrictions.\n\nThe operation integrates with the notification system defined in the Notification System requirements document. After successfully adding a topic to the watch list, future notifications will be triggered according to the user's notification preferences in discussion_board_notification_preferences. Notification batching, quiet hours, and digest frequency settings all apply to watched topic notifications as specified in the requirements.\n\nRelated API operations include PATCH /users/{userId}/watchedTopics to retrieve the user's complete watched topics list, DELETE /users/{userId}/watchedTopics/{topicId} to remove topics from the watch list (unwatch), and PUT /users/{userId}/watchedTopics/{topicId}/read to update the last_read_at timestamp when the user views a watched topic to prevent notifications for already-seen content.","parameters":[{"name":"userId","description":"Unique identifier of the user who is adding a topic to their watch list","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information about the discussion topic to add to the user's watch list","typeName":"IDiscussionBoardWatchedTopic.ICreate"},"responseBody":{"description":"The newly created watched topic relationship with metadata including last read timestamp","typeName":"IDiscussionBoardWatchedTopic"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be added to a user's watched topics list"}]},{"specification":"This operation updates an existing watched topic subscription for a specific user, allowing modification of notification preferences and watch status for a discussion topic the user is actively monitoring. The operation operates on the discussion_board_watched_topics table from the Prisma schema, which tracks topics users watch for notifications on new activity (new replies, votes, etc.). The watched topic relationship enables users to receive updates about discussions they find particularly interesting or relevant to their economic and political interests. This operation supports updating the last_read_at timestamp to mark the topic as viewed, which is critical for determining if there is new activity since the user's last visit and displaying appropriate unread indicators. The operation requires the user to be authenticated as a member and to be the owner of the watched topic subscription being modified. The system validates that the watch relationship exists, belongs to the requesting user, and applies any business rules around watch management such as preventing updates to deleted or invalid watched topic records.","path":"/discussionBoard/member/users/{userId}/watchedTopics/{watchedTopicId}","method":"put","summary":"Update watched topic subscription settings and tracking information","description":"Update an existing watched topic subscription for a member, modifying watch preferences and activity tracking metadata. This operation allows users to update their watch relationship for a discussion topic they are monitoring for new replies, votes, and other activity updates.\n\nThe watched topics feature enables members to explicitly track discussions of interest and receive notifications when new activity occurs based on their configured notification preferences. Each watched topic record maintains a last_read_at timestamp that tracks when the user last viewed the topic, enabling the system to determine if new activity has occurred since their last visit and display appropriate unread indicators in the user interface.\n\nThis operation supports updating the last_read_at timestamp to mark the topic as recently viewed, which is the primary use case for this endpoint. When a user views a watched topic, the client application calls this endpoint to update the last_read_at field, ensuring accurate tracking of which activity is new versus already seen. This timestamp is essential for notification batching logic and unread badge calculations.\n\nSecurity considerations include verifying that the authenticated user owns the watched topic subscription they are attempting to modify. Users can only update their own watched topic records, not those belonging to other users. The system validates that the watch relationship exists and belongs to the requesting user before allowing any modifications.\n\nThis operation integrates with the notification system to ensure that watch preference changes immediately affect future notification generation. If a user updates their watch settings to disable notifications, the system respects this preference for subsequent activity on the watched topic.\n\nThe operation validates that the watched topic subscription exists and is active (not soft-deleted). If the watch relationship has been removed or the underlying topic has been deleted, the update operation fails with an appropriate error message directing the user to re-watch the topic if desired.","parameters":[{"name":"userId","description":"Unique identifier of the member who owns the watched topic subscription","schema":{"type":"string","format":"uuid"}},{"name":"watchedTopicId","description":"Unique identifier of the watched topic subscription to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the watched topic subscription including last read timestamp and watch status","typeName":"IDiscussionBoardWatchedTopic.IUpdate"},"responseBody":{"description":"Updated watched topic subscription with current watch settings and tracking metadata","typeName":"IDiscussionBoardWatchedTopic"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be watched and have its watch settings updated"},{"endpoint":{"path":"/discussionBoard/member/users/{userId}/watchedTopics","method":"post"},"description":"Watched topic subscription must be created before it can be updated with new tracking information"}]},{"specification":"This operation soft deletes a watched topic subscription by setting the deleted_at timestamp in the discussion_board_watched_topics table, marking the watch relationship as deleted while preserving the record for analytics and recovery purposes within the platform's 30-day recovery window. The operation allows users to unwatch discussion topics they no longer wish to monitor for new activity. The Prisma schema for discussion_board_watched_topics includes a deleted_at field that supports soft deletion, ensuring watch history is preserved for analytics while hiding the relationship from active user interfaces and stopping notification generation. The operation requires the user to be authenticated as a member and to be the owner of the watched topic subscription being deleted. The system validates that the watch relationship exists, belongs to the requesting user, and is currently active (not already deleted). After successful soft deletion, the user will no longer receive notifications about new activity on the unwatched topic, and the topic will be removed from their watched topics list in the user interface.","path":"/discussionBoard/member/users/{userId}/watchedTopics/{watchedTopicId}","method":"delete","summary":"Soft delete watched topic subscription to stop monitoring a discussion","description":"Soft delete an existing watched topic subscription for a member by setting the deleted_at timestamp, marking the watch relationship as deleted while preserving the record for potential recovery and analytics. This operation allows users to unwatch discussion topics they no longer wish to monitor, cleaning up their watched topics list and reducing notification volume.\n\nThe watched topics feature enables members to explicitly track discussions of interest and receive notifications when new replies, votes, or other activity occurs. When a user no longer finds a topic relevant or wishes to reduce their notification volume, they can unwatch the topic through this operation. Unwatching a topic immediately stops all future notifications about that topic's activity, respecting the user's preference to disengage from that particular discussion.\n\nThis operation performs a soft delete on the watched topic subscription by setting the deleted_at timestamp in the discussion_board_watched_topics table. The Prisma schema includes a deleted_at field specifically to support recovery of accidentally removed watch subscriptions. Soft deletion preserves the watch history for analytics purposes while hiding the relationship from active user interfaces and stopping notification generation.\n\nSecurity considerations include strict ownership validation to ensure users can only unwatch their own topic subscriptions, not those belonging to other users. The system verifies that the authenticated user's ID matches the user_id associated with the watched topic record before allowing deletion. This prevents unauthorized manipulation of other users' watch lists.\n\nThe operation validates that the watched topic subscription exists and is currently active (deleted_at is null) before proceeding with soft deletion. If the subscription has already been deleted or does not exist, the operation returns an appropriate error message. Users cannot delete watch subscriptions that belong to other users, even if they know the watched topic ID.\n\nAfter successful soft deletion, the watched topic is immediately removed from the user's watched topics list in the user interface. Any pending notifications for this topic that have not yet been delivered are cancelled or filtered to exclude this topic. The user will not receive any future notifications about activity on this topic unless they explicitly watch it again by creating a new watch subscription.\n\nThis operation integrates with the notification system by triggering cleanup of pending batched notifications that referenced this watched topic. If the user had notifications queued in an hourly or daily digest mentioning this topic, those notifications are filtered out to respect the user's decision to unwatch.\n\nThe soft deletion approach means that if a user accidentally unwatches a topic, administrators or the system can potentially restore the subscription within the 30-day recovery window defined in platform policies. The record remains in the database with deleted_at timestamp set, preserving the watch history for analytics and audit purposes while excluding it from active user queries and notification generation logic.","parameters":[{"name":"userId","description":"Unique identifier of the member who owns the watched topic subscription to delete","schema":{"type":"string","format":"uuid"}},{"name":"watchedTopicId","description":"Unique identifier of the watched topic subscription to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be watched and subsequently unwatched"},{"endpoint":{"path":"/discussionBoard/member/users/{userId}/watchedTopics","method":"post"},"description":"Watched topic subscription must exist before it can be deleted to unwatch the topic"}]},{"specification":"This operation retrieves the complete notification preference configuration for a specific user identified by their userId. It returns all granular notification settings controlling how and when the user receives various types of platform notifications including replies, mentions, votes, moderation actions, and system announcements. The operation accesses the discussion_board_notification_preferences table which stores comprehensive per-event-type notification controls for both in-app and email delivery channels, digest frequency settings, quiet hours configuration, and timezone preferences. This information enables users to understand their current notification configuration and provides the data necessary for the frontend notification settings interface.","path":"/discussionBoard/member/users/{userId}/notificationPreferences","method":"get","summary":"Retrieve notification preferences for a specific user","description":"Retrieves the comprehensive notification preference configuration for the user identified by the userId path parameter. This operation provides access to all notification settings that control how the user receives platform notifications across different event types and delivery channels.\n\nThe notification preferences system allows users granular control over which platform events trigger notifications and how those notifications are delivered. Users can independently configure in-app notifications and email notifications for each event type including replies to their topics, replies to their comments, @mentions, vote milestones on their content, moderation actions, watched topic updates, and system announcements.\n\nAdditionally, the preferences include digest mode configuration (realtime, hourly, daily, weekly) that controls notification batching frequency, quiet hours settings to suppress email notifications during user-specified time windows, and timezone configuration for accurate scheduling of digests and quiet hours enforcement.\n\nThis operation is essential for displaying the user's current notification settings in their profile settings interface and for the notification delivery system to determine how to deliver notifications to each user based on their individual preferences.\n\nAuthentication and authorization requirements ensure users can only access their own notification preferences unless they have elevated privileges (moderators and administrators may have broader access for support purposes).\n\nThe response includes all boolean flags for event-specific notification channels, digest frequency configuration, quiet hours settings, timezone information, and metadata timestamps indicating when preferences were last modified.","parameters":[{"name":"userId","description":"Unique identifier of the user whose notification preferences are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete notification preference configuration including all event-type settings, delivery channel controls, digest frequency, quiet hours, and timezone","typeName":"IDiscussionBoardMember.INotificationPreferences"},"authorizationRole":"member","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation updates the notification preference configuration for a specific user identified by their userId. It allows users to modify their notification settings including which events trigger notifications, which delivery channels to use (in-app and/or email), digest frequency settings, quiet hours configuration, and timezone preferences. The operation modifies the discussion_board_notification_preferences table which stores comprehensive per-event-type notification controls. Users submit their desired notification configuration and the system validates and persists the changes, immediately affecting future notification delivery behavior for that user.","path":"/discussionBoard/member/users/{userId}/notificationPreferences","method":"put","summary":"Update notification preferences for a specific user","description":"Updates the comprehensive notification preference configuration for the user identified by the userId path parameter. This operation allows users to customize how they receive platform notifications across all supported event types and delivery channels.\n\nThe notification preferences control system behavior for delivering notifications triggered by various platform events including replies to the user's topics, replies to their comments, @username mentions, vote milestones reached on their content, moderation actions affecting their account or content, updates to topics they are watching, and system-wide announcements from administrators.\n\nFor each event type, users can independently enable or disable in-app notifications (displayed in the notification center) and email notifications (sent to their registered email address). This granular control ensures users receive only the notifications they find valuable through their preferred channels.\n\nBeyond individual event configuration, users can configure digest mode to batch multiple notifications into periodic summaries (hourly, daily, or weekly) instead of receiving immediate real-time notifications. This prevents notification fatigue for highly active users while keeping them informed of platform activity.\n\nThe preferences also support quiet hours functionality, allowing users to define time windows during which email notifications are suppressed and queued for delivery when quiet hours end. This respects user time preferences and prevents notifications during sleep hours or focused work periods.\n\nTimezone configuration ensures digest delivery times and quiet hours are calculated correctly for the user's local time, providing a personalized notification experience that respects their geographic location and schedule.\n\nThe system validates all submitted preference values, ensures digest frequencies are valid options, validates quiet hours time formats, confirms timezone identifiers are valid IANA timezone strings, and verifies boolean flags are properly formatted. Upon successful validation, the system persists the updated preferences and immediately applies them to future notification delivery decisions for this user.\n\nAuthentication and authorization ensure users can only modify their own notification preferences. The operation enforces user ownership validation to prevent unauthorized preference modifications. Moderators and administrators may have broader access for support scenarios but standard members can only update their own settings.\n\nThe response confirms successful preference updates and returns the updated notification preference configuration, allowing the client to verify changes were applied correctly and update the user interface to reflect the new settings.","parameters":[{"name":"userId","description":"Unique identifier of the user whose notification preferences are being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification preference configuration including event-type toggles, digest settings, quiet hours, and timezone","typeName":"IDiscussionBoardMember.INotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference configuration reflecting the applied changes","typeName":"IDiscussionBoardMember.INotificationPreferences"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of notifications for a specific user. It operates on the discussion_board_notifications table from the Prisma schema and supports complex queries to find notifications based on various criteria including notification type, read status, date ranges, and related content. The operation allows users to search through their notification history with advanced filtering capabilities to find specific notifications or notification categories they are interested in reviewing.","path":"/discussionBoard/member/users/{userId}/notifications","method":"patch","summary":"Search and retrieve a filtered, paginated list of user notifications","description":"Retrieve a comprehensive, filtered, and paginated list of notifications for a specific user from the discussion board notification system. This operation provides advanced search and filtering capabilities for users to manage their notification history, find specific types of notifications, and review activity alerts across the platform.\n\nThe operation supports filtering by notification type (reply_to_topic, reply_to_comment, mention, vote_milestone, moderation_action, system_announcement, watched_topic_update, welcome), read status (read, unread, all), delivery channel (in-app, email), and date ranges. Users can search for notifications related to specific topics, replies, or triggering users, enabling efficient notification management and historical review.\n\nThis endpoint integrates with the discussion_board_notifications table as defined in the Prisma schema, accessing all notification fields including triggering users (members, moderators, administrators), related content (topics, replies, moderation actions), delivery status, and read tracking. The operation respects user privacy by only returning notifications that belong to the authenticated user identified by the userId path parameter.\n\nSecurity considerations include verifying that the authenticated user matches the userId path parameter to prevent unauthorized access to other users' notifications. The operation enforces ownership validation ensuring users can only access their own notification data. Rate limiting may be applied to prevent excessive notification queries, though typical user notification browsing patterns should fall well within acceptable limits.\n\nThe response includes paginated notification summaries optimized for notification center display, including notification type indicators, triggering user information, content previews, timestamps, read status, and deep links to related content. The operation supports sorting by creation date (newest first by default), notification type, or read status to help users organize their notification feed according to their preferences.\n\nThis operation is essential for the notification management user experience, allowing users to review their notification history, identify unread notifications, filter by activity type, and efficiently navigate to content that requires their attention. It complements the real-time notification delivery system by providing historical access and advanced management capabilities beyond the basic notification center view.","parameters":[{"name":"userId","description":"Unique identifier of the user whose notifications are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering user notifications including notification type, read status, date ranges, and sorting preferences","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification records matching the specified search criteria with summary information optimized for notification center display","typeName":"IPageIDiscussionBoardNotification.ISummary"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a single notification record by its unique identifier for a specific user. It operates on the discussion_board_notifications table from the Prisma schema and returns the complete notification details including triggering user information, related content references, delivery status, and all notification metadata. The operation validates that the notification belongs to the authenticated user to prevent unauthorized access to other users' notifications.","path":"/discussionBoard/member/users/{userId}/notifications/{notificationId}","method":"get","summary":"Retrieve detailed information for a specific user notification by ID","description":"Retrieve comprehensive details for a single notification record identified by notificationId belonging to the user identified by userId. This operation provides complete notification information including notification type, triggering event details, related content references, delivery channel status, and read tracking metadata.\n\nThe operation accesses the discussion_board_notifications table as defined in the Prisma schema, returning full notification data including all foreign key references to triggering users (members, moderators, administrators), related discussion content (topics, replies), associated moderation actions, and complete delivery status tracking for both in-app and email channels.\n\nWhen a notification is retrieved, the system returns detailed information about what triggered the notification, who performed the triggering action, what content is involved, and the notification's current state (read/unread, seen/unseen, delivery status). This enables rich notification display in user interfaces showing full context and allowing users to understand exactly what activity occurred and navigate directly to relevant content.\n\nSecurity validation ensures that the authenticated user matches the userId path parameter and that the requested notification actually belongs to that user. The operation prevents users from accessing notifications belonging to other users by validating the notification's user_id field against the authenticated user's identity before returning data. If the notification does not belong to the authenticated user or does not exist, appropriate error responses are returned.\n\nThis operation is typically used when a user clicks on a notification in their notification center to view full details, or when the system needs to mark a notification as read after user interaction. It may automatically update the is_read and read_at fields when accessed, depending on business logic implementation, though this read-tracking behavior is handled by backend application logic rather than specified in the API operation itself.\n\nThe detailed notification information enables the user interface to display rich notification cards showing the triggering user's profile information, preview of related content, action timestamps, and contextual navigation options. For moderation action notifications, this includes the full moderation reason and appeal process information. For reply notifications, this includes the reply preview and direct link to the conversation thread.","parameters":[{"name":"userId","description":"Unique identifier of the user who owns this notification","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the specific notification to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete notification details including triggering user, related content, delivery status, and all notification metadata","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the read status of a specific notification for a user in the discussion board platform. It operates on the discussion_board_notifications table from the Prisma schema. The operation allows users to mark individual notifications as read, which updates the is_read field and sets the read_at timestamp. This is essential for notification management, allowing users to track which platform events they have acknowledged. The operation validates that the notification belongs to the specified user before allowing the update, ensuring users can only modify their own notifications.","path":"/discussionBoard/member/users/{userId}/notifications/{notificationId}","method":"put","summary":"Update notification read status for a specific user notification","description":"Updates the read status of a specific notification in the user's notification center. This operation allows users to mark individual notifications as read, which updates both the is_read boolean flag and sets the read_at timestamp in the discussion_board_notifications table.\n\nThe operation validates that the notification belongs to the specified user before processing the update. This ensures users can only modify their own notifications and cannot manipulate other users' notification states. The system checks that the userId parameter matches the user_id field in the notification record.\n\nWhen a notification is marked as read, the is_read field is set to true and the read_at timestamp is set to the current time. This data is used throughout the platform to display unread notification counts in the notification center badge, filter notifications by read/unread status, and track user engagement with notifications.\n\nThe operation supports updating other notification properties beyond read status, such as is_seen (whether user viewed the notification in the list without clicking), allowing flexible notification state management. This enables the platform to distinguish between notifications that were merely displayed versus those the user actively engaged with.\n\nThis operation integrates with the notification system defined in the requirements, which specifies that notifications must track read/unread status, support user interaction through the notification center, and update badge counts in real-time as users mark notifications as read. The response confirms the update and returns the updated notification state for immediate UI reflection.","parameters":[{"name":"userId","description":"Unique identifier of the user who owns the notification","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification properties including read status and seen status","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"Updated notification record with current read status and timestamp","typeName":"IDiscussionBoardNotification"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist to generate topic-related notifications that users can then mark as read"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Discussion reply must exist to generate reply-related notifications that users can then mark as read"},{"endpoint":{"path":"/discussionBoard/member/votes","method":"post"},"description":"Vote must be cast to generate vote milestone notifications that users can then mark as read"}]},{"specification":"This operation permanently removes a specific notification from a user's notification history in the discussion board platform. It operates on the discussion_board_notifications table from the Prisma schema by setting the deleted_at timestamp to mark the notification as soft deleted. The operation validates that the notification belongs to the specified user before allowing deletion, ensuring users can only delete their own notifications. This supports the notification management workflow where users can clean up their notification history by removing notifications they no longer need to reference.","path":"/discussionBoard/member/users/{userId}/notifications/{notificationId}","method":"delete","summary":"Remove a specific notification from user's notification history","description":"Removes a specific notification from the user's notification center by marking it as deleted. This operation sets the deleted_at timestamp in the discussion_board_notifications table, implementing a soft deletion pattern that preserves notification data for audit purposes while hiding it from the user's view.\n\nThe operation first validates that the notification belongs to the specified user by checking that the userId parameter matches the user_id field in the notification record. This security check ensures users can only delete their own notifications and cannot manipulate other users' notification histories.\n\nAccording to the Prisma schema, the discussion_board_notifications table includes a deleted_at field, indicating this operation performs soft deletion rather than permanent removal. The soft-deleted notification is immediately hidden from the user's notification center and no longer appears in their notification list or contributes to the unread notification count badge. However, the record is retained in the database for the 90-day retention period specified in the notification system requirements.\n\nThis deletion capability supports the notification management features outlined in the requirements, which specify that users should be able to delete individual notifications and perform bulk deletion of read notifications. The operation provides users with control over their notification history, allowing them to maintain a clean, relevant notification center by removing outdated or unnecessary alerts.\n\nAfter successful deletion, the notification is immediately removed from all user-facing interfaces including the notification center dropdown, notification history page, and unread count calculations. The system recalculates the notification badge count to reflect the removal.","parameters":[{"name":"userId","description":"Unique identifier of the user who owns the notification","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the notification to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist to generate topic-related notifications that users can then delete from their notification history"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Discussion reply must exist to generate reply-related notifications that users can then delete from their notification history"},{"endpoint":{"path":"/discussionBoard/member/votes","method":"post"},"description":"Vote must be cast to generate vote milestone notifications that users can then delete from their notification history"}]},{"specification":"This operation retrieves a filtered, paginated, and sorted list of discussion topics from the economic and political discussion board platform. It operates on the discussion_board_topics table from the Prisma schema and supports comprehensive filtering by category, tags, vote scores, date ranges, author, status, and keyword search. The operation uses the PATCH method to accommodate complex search criteria in the request body. This is the primary mechanism for users to discover relevant economic and political discussions through advanced filtering and search capabilities. The operation supports public access (authorizationRole: null) as guests can browse public discussions without authentication, though personalized features require login.","path":"/discussionBoard/topics","method":"patch","summary":"Retrieve filtered and paginated list of discussion topics with advanced search capabilities","description":"Retrieve a comprehensive, filtered, and paginated list of discussion topics from the economic and political discussion board platform. This operation provides the primary mechanism for content discovery, allowing users to search, filter, sort, and browse discussions based on multiple criteria including keywords, categories, tags, vote scores, date ranges, author, and topic status.\n\nThe operation implements complex search and filtering functionality that goes beyond simple GET parameters, justifying the PATCH method for the request body. Users can combine multiple filters simultaneously to find highly specific discussions on economic and political topics. For example, users might search for \"inflation policy\" within the Economics category, tagged with \"monetary-policy\", created in the last 30 days, with at least 10 votes, sorted by recent activity.\n\nThis operation integrates with the discussion_board_topics table as defined in the Prisma schema, accessing fields including title, body, status, view_count, reply_count, is_pinned, created_at, and updated_at. It also joins with discussion_board_categories for category filtering, discussion_board_topic_tags and discussion_board_tags for tag-based filtering, and discussion_board_members for author information.\n\nThe search functionality implements full-text search across topic titles and body content using PostgreSQL's trigram indexing capabilities (as indicated by the gin_trgm_ops indexes in the schema). This enables efficient fuzzy matching and relevance-based ranking of search results. The operation enforces rate limiting of 30 searches per minute per user as specified in the business rules to prevent system abuse.\n\nSecurity considerations include appropriate filtering based on topic status and deleted_at timestamps. Deleted topics (deleted_at IS NOT NULL) are excluded from results for regular users but may be visible to moderators and administrators based on their roles. Topics with status 'active' are shown normally, while 'locked' and 'archived' topics are included with appropriate status indicators.\n\nThe response includes paginated results with topic summary information optimized for list displays. Each topic in the results includes essential metadata: title, author username, category name, creation date, reply count, view count, vote score, tags, and last activity timestamp. The pagination structure follows the platform standard of 25 topics per page as defined in the Discussion Management requirements.\n\nRelated API operations that might be used together with this endpoint include GET /discussionBoard/topics/{topicId} for viewing individual topic details after discovering them through this search operation. Users typically first execute this search/filter operation to get a list of relevant topics, then navigate to specific topics for detailed reading.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for retrieving discussion topics","typeName":"IDiscussionBoardTopic.IRequest"},"responseBody":{"description":"Paginated list of discussion topic summaries matching the search criteria and filters","typeName":"IPageIDiscussionBoardTopic.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a single discussion topic with complete details including the full topic content, author information, category, tags, vote scores, reply count, view count, and metadata. It operates on the discussion_board_topics table from the Prisma schema and uses the topicId path parameter to identify the specific topic to retrieve. This operation provides the detailed view that users access after discovering topics through the search/filter operation. The operation supports public access (authorizationRole: null) as guests can view individual discussion topics without authentication. When a topic is viewed, the system increments the view_count field (once per user per 24 hours per business rules) to track topic popularity.","path":"/discussionBoard/topics/{topicId}","method":"get","summary":"Retrieve detailed information for a specific discussion topic by ID","description":"Retrieve complete detailed information for a specific discussion topic identified by the topicId path parameter. This operation provides the full topic view that users access when they click on a topic from search results, category listings, or direct links. The operation returns comprehensive topic data including the complete title and body content, author details, category assignment, associated tags, engagement metrics (votes, views, replies), and current topic status.\n\nThis operation integrates directly with the discussion_board_topics table from the Prisma schema, accessing all fields including id, title, body, status, view_count, reply_count, is_pinned, created_at, updated_at, and deleted_at. The operation joins with discussion_board_categories to retrieve the full category information, discussion_board_members to get author details, and discussion_board_topic_tags to fetch all associated tags for the topic.\n\nSecurity and visibility considerations are critical for this operation. The system validates that the requested topic exists and has not been soft-deleted. Topics where deleted_at IS NOT NULL are excluded from regular user access and return 404 Not Found, while moderators and administrators can view deleted topics with appropriate indicators. Topics with status 'locked' or 'archived' remain visible to all users but display status badges and have restricted interaction capabilities.\n\nThe operation implements view count tracking per the business requirements: when any user views a topic, the system automatically increments the view_count field in the discussion_board_topics table as a side effect of this GET operation. The system counts only one view per user per 24-hour period to prevent artificial inflation. This tracking is handled internally by the backend service logic and does not require a separate API operation.\n\nThe detailed topic response includes author information from the discussion_board_members table such as username, display_name, avatar_url, and account_status. This allows users to see who created the topic and access their profile for more context about the author's contribution history and expertise.\n\nCategory information is fully expanded in the response, including the category name, slug, description, and parent category if applicable (for hierarchical category structures like Economics > Macroeconomics). This provides users with complete context about how the topic is organized within the platform's taxonomy.\n\nAll associated tags are retrieved through the discussion_board_topic_tags junction table and included in the response. Tags help users understand the topic's specific focus areas and enable tag-based discovery of related discussions. The response includes tag names and may include tag descriptions where available.\n\nEngagement metrics included in the response provide social proof and indicate discussion activity levels: view_count shows how many users have viewed the topic, reply_count indicates the level of discussion activity, and vote scores (calculated from related voting data) show community reception. The is_pinned field indicates whether moderators have featured this topic as particularly important or high-quality.\n\nTemporal information helps users understand topic timeline: created_at shows when the topic was first posted, updated_at reflects the last modification (either topic edit or new reply), enabling sorting by recent activity. If the topic has been edited, the response may include an edited indicator based on data from the discussion_board_edit_history table.\n\nThis operation must be executed before users can interact with a topic through replies, votes, or other engagement mechanisms. It provides the foundation for all topic-specific operations including operations for posting replies, voting, and bookmarking the topic.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed information about the requested discussion topic including content, author, category, tags, and engagement metrics","typeName":"IDiscussionBoardTopic"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be retrieved for viewing"}]},{"specification":"This operation creates a new discussion topic in the economic and political discussion board platform. It operates on the discussion_board_topics table from the Prisma schema. Members can create topics to initiate conversations on economic and political subjects. The operation requires authentication (member role) and validates all input according to business rules including title length (10-200 characters), body length (20-50,000 characters), mandatory category selection, and optional tags (up to 5 tags). The system enforces rate limits of 5 topics per hour and 20 topics per day per user to prevent spam. Upon successful creation, the topic receives a unique ID, is assigned to the specified category, and becomes immediately visible in the discussion board with an 'active' status.","path":"/discussionBoard/member/topics","method":"post","summary":"Create a new discussion topic on economic or political subjects","description":"Create a new discussion topic in the economic and political discussion board platform. This operation enables authenticated members to initiate conversations on economic and political subjects by providing a title, detailed body content, category assignment, and optional tags.\n\nThe operation validates all input according to comprehensive business rules defined in the platform requirements. The topic title must be between 10 and 200 characters and cannot consist entirely of uppercase letters or contain only special characters. The topic body must contain between 20 and 50,000 characters of meaningful content and supports Markdown formatting for rich text presentation. The system rejects topics with excessive URLs (more than 10) or content that consists of more than 80% URLs or special characters.\n\nCategory assignment is mandatory - each topic must be assigned to exactly one predefined category from the available options including Economics, Politics, Current Events, Policy Analysis, Economic Theory, Political Theory, International Relations, or Domestic Policy. This categorization enables efficient content organization and discovery. Tags are optional but limited to a maximum of 5 per topic, with each tag between 2-30 characters in length containing only alphanumeric characters, hyphens, and spaces.\n\nThe operation enforces strict rate limiting to prevent spam and abuse. Members can create a maximum of 5 topics per hour and 20 topics per day. New accounts less than 24 hours old are restricted to 3 topics per day. The system also implements duplicate content detection, rejecting topics identical to content the user posted within the last 24 hours.\n\nSecurity considerations include authentication verification through JWT tokens, permission validation ensuring the user has member role, and automated spam detection that flags or rejects content matching known spam patterns. Upon successful creation, the topic is assigned a unique UUID identifier, the author is recorded, creation and update timestamps are set, the status is set to 'active', and initial counters for view_count and reply_count are set to 0. The topic becomes immediately visible in the discussion board and searchable by other users.\n\nThis operation integrates with the notification system to send welcome notifications for first-time topic creators and may trigger notifications to users following the selected tags. The newly created topic appears in category browsing, search results, and recent activity feeds according to the platform's content discovery algorithms.","parameters":[],"requestBody":{"description":"Topic creation data including title, body content, category assignment, and optional tags","typeName":"IDiscussionBoardTopic.ICreate"},"responseBody":{"description":"The newly created discussion topic with all metadata including unique ID, author information, category, timestamps, and initial engagement metrics","typeName":"IDiscussionBoardTopic"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/categories","method":"post"},"description":"Category must exist before a topic can be assigned to it. The category_id in the topic creation request must reference a valid category from discussion_board_categories table."}]},{"specification":"This operation updates an existing discussion topic in the discussion_board_topics table. Topic authors can modify their own topics within specific time constraints and business rules. Members can edit topic title, body content, category assignment, and tags within 24 hours of creation. Users with 100+ reputation points receive an extended 7-day edit window. Moderators and administrators can edit any topic at any time. The operation validates that the user has permission to edit (is the author, moderator, or administrator), enforces time-based restrictions, validates all input according to the same rules as topic creation, and records edit history for transparency. When a topic has received more than 10 replies, the system locks the title to prevent confusion while allowing body edits.","path":"/discussionBoard/member/topics/{topicId}","method":"put","summary":"Update an existing discussion topic's content, category, or tags","description":"Update an existing discussion topic in the economic and political discussion board platform. This operation allows topic authors, moderators, and administrators to modify topic content including title, body, category assignment, and tags according to role-based permissions and time-based restrictions.\n\nPermission validation ensures that only authorized users can edit topics. Regular members can only edit their own topics, while moderators and administrators can edit any topic on the platform. The system enforces strict time-based editing windows to maintain discussion integrity: members have 24 hours from topic creation to make edits, with an extended 7-day window for members with 100+ reputation points. Moderators and administrators are exempt from time restrictions and can edit topics at any time.\n\nWhen a topic has received more than 10 replies, the system implements a title lock to prevent confusion in ongoing discussions. The title cannot be changed after this threshold to maintain context for participants, but the topic body, category, and tags remain editable within the allowed time window. This business rule ensures that active discussions maintain consistent identity while still allowing content refinement.\n\nAll edit operations undergo the same comprehensive validation as topic creation. The title must remain between 10-200 characters, cannot be all uppercase, and must contain at least 3 alphabetic characters. The body content must be between 20-50,000 characters and cannot exceed URL limits (maximum 10 URLs, less than 80% URL content). Category assignment must reference a valid, active category from the predefined list. Tags are validated for proper format (2-30 characters, alphanumeric with hyphens and spaces) and count (maximum 5 tags per topic).\n\nThe system automatically records all edits in the discussion_board_edit_history table for transparency and accountability. Each edit creates an immutable audit record containing snapshots of content before and after modification, the editor's identity, timestamp, and optional edit reason. When content has been edited more than 3 times, the system displays an 'edited' indicator to inform readers that the content has undergone multiple revisions.\n\nLocked topics (status='locked') prevent all editing except by administrators, maintaining discussion preservation for archived or finalized conversations. Deleted topics (soft deleted with deleted_at timestamp) cannot be edited and must be restored first. The operation updates the topic's updated_at timestamp to reflect the modification time, which affects the topic's position in 'recently active' and 'recently updated' sorting views.\n\nThis operation integrates with the notification system to alert users watching the topic that content has been modified. It also respects user blocking relationships, ensuring that edits to topics by blocked users remain invisible to users who have blocked the author.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated topic information including title, body, category, and tags","typeName":"IDiscussionBoardTopic.IUpdate"},"responseBody":{"description":"The updated discussion topic with refreshed metadata, timestamps, and edit indicators","typeName":"IDiscussionBoardTopic"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Topic must be created before it can be updated. The topicId path parameter must reference an existing topic in the discussion_board_topics table."},{"endpoint":{"path":"/discussionBoard/administrator/categories","method":"post"},"description":"Category must exist before a topic can be reassigned to it. The category_id in the update request must reference a valid category from discussion_board_categories table if the category is being changed."}]},{"specification":"This operation permanently deletes a discussion topic from the system. It operates on the discussion_board_topics table and requires careful permission validation. The operation should verify that the requesting user is either the topic author (within allowed deletion timeframe), a moderator, or an administrator. According to business rules, regular members can only delete their own topics within 1 hour of creation IF the topic has received 0 replies. Moderators and administrators can delete any topic at any time. When a topic is deleted, the system performs a soft deletion by setting the deleted_at timestamp, which hides the topic from regular users but preserves it for audit purposes. The deletion also affects related data including replies (which are hidden but preserved), votes, favorites, and watched topic subscriptions. This operation is critical for content lifecycle management and moderation enforcement.","path":"/discussionBoard/member/topics/{topicId}","method":"delete","summary":"Permanently delete a discussion topic from the system","description":"This operation permanently removes a discussion topic from the platform by performing a soft deletion that sets the deleted_at timestamp on the discussion_board_topics record. The deletion behavior varies based on the user's role and the topic's state.\n\nFor regular members (discussion_board_members), the ability to delete their own topics is restricted by business rules: they can only delete topics they authored within 1 hour of creation and only if the topic has received zero replies. This time-based restriction maintains discussion thread integrity and prevents authors from removing topics after community engagement has begun. When a member attempts to delete a topic outside these constraints, the system denies the request and explains the restriction.\n\nFor moderators (discussion_board_moderators) and administrators (discussion_board_administrators), topic deletion is permitted at any time regardless of the topic's age or reply count. This administrative capability supports content moderation, guideline enforcement, and platform management. Moderators typically delete topics that violate community guidelines, contain prohibited content, or represent spam.\n\nThe deletion process sets the deleted_at timestamp in the discussion_board_topics table rather than physically removing the record. This soft deletion approach preserves content for audit purposes, supports moderation review, and maintains database referential integrity. The Prisma schema shows that deleted topics remain in the database but are filtered from normal user queries. According to the data retention policies, soft-deleted content is retained for 30 days to support recovery in case of accidental deletion or successful moderation appeals.\n\nWhen a topic is deleted, the system handles associated data appropriately. All replies to the topic (discussion_board_replies records) are also hidden from public view through cascading soft deletion or visibility rules. Votes (discussion_board_votes), favorites (discussion_board_favorites), and watched topic subscriptions (discussion_board_watched_topics) on the deleted topic are preserved in the database but become inaccessible to regular users. The system creates an audit trail entry recording who deleted the topic, when it was deleted, and the reason (if provided by a moderator).\n\nSecurity considerations include validating that the requesting user has appropriate permissions based on their role and the topic ownership. The system must verify the user's authentication token, check role-based permissions from the permission matrix, validate topic ownership for member deletions, and enforce the time-based deletion window for members. Rate limiting does not typically apply to deletion operations since they cannot be spammed effectively.\n\nThis operation integrates with the moderation system when moderators or administrators perform deletions. The deletion may be associated with a moderation_action record that documents the violation and rationale. Users affected by moderator deletions receive notifications explaining the action and any appeals process available.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Topic must exist before it can be deleted"}]},{"specification":"This operation retrieves a paginated list of threaded replies for a specific discussion topic with advanced filtering, searching, and sorting capabilities. It operates on the discussion_board_replies table and supports complex queries to find replies based on various criteria including author, content text, vote scores, creation date, and threading depth. The operation returns replies in a structured format that preserves the threaded conversation hierarchy up to 10 levels deep as specified in business rules. Users can filter replies by specific authors, date ranges, minimum vote thresholds, and search within reply content. Sorting options include chronological order (oldest first for conversation flow), newest first, highest voted first, and threading depth. The response includes complete reply information with author details, vote counts, timestamps, depth level indicators, and edit history markers.","path":"/discussionBoard/topics/{topicId}/replies","method":"patch","summary":"Search and retrieve filtered, paginated replies for a discussion topic","description":"This operation retrieves a comprehensive list of replies for a specific discussion topic from the discussion_board_replies table, with advanced filtering, searching, sorting, and pagination capabilities. The operation is designed to support complex queries that help users navigate threaded conversations, find specific responses, and discover high-quality contributions within a discussion.\n\nThe Prisma schema shows that discussion_board_replies supports threaded conversations through the parent_reply_id self-referential relationship, with depth_level tracking to enforce the maximum threading depth of 10 levels specified in the business rules. Each reply belongs to exactly one discussion_board_topics record (via discussion_board_topic_id) and is authored by a discussion_board_members record (via discussion_board_member_id). This operation leverages these relationships to retrieve complete reply information including author details, threading context, and engagement metrics.\n\nAuthentication and authorization considerations vary by user role. Guests can view all public replies without authentication, providing read-only access to facilitate content discovery and encourage registration. Members, moderators, and administrators have the same read access but may see additional information based on their permissions. The operation respects content visibility rules, hiding replies marked as deleted (deleted_at timestamp set) from regular users while potentially showing them to moderators and administrators for audit purposes. Suspended or banned users' replies remain visible but may be flagged with moderation indicators.\n\nThe filtering capabilities support multiple dimensions. Users can filter by author to find all replies from specific contributors within the discussion. Date range filtering allows finding replies posted within specific timeframes, useful for tracking conversation evolution or finding recent updates. Vote score filtering surfaces highly-rated replies by applying minimum vote thresholds, helping users identify valuable contributions. Content search performs full-text search across reply content using the trigram index on the content column, enabling users to find specific arguments, data points, or references within long discussions. Depth level filtering allows users to focus on top-level replies or explore deeply nested conversations.\n\nThe sorting options reflect different user needs. Chronological sorting (oldest first) is the default and preserves natural conversation flow, making it easy to follow discussions as they developed. Newest first sorting helps users catch up on the latest responses in active discussions. Highest voted sorting surfaces the most valuable contributions as determined by community voting. Threading depth sorting allows exploring conversation structure by nesting level.\n\nPagination is essential for handling topics with hundreds or thousands of replies. The business rules specify displaying 50 replies per page when viewing topics, with pagination controls for navigating between pages. The response includes pagination metadata showing total reply count, current page number, total pages, and whether additional pages exist. This allows clients to implement pagination UI elements and load additional replies on demand.\n\nThe response structure includes complete reply information for rendering threaded discussions. Each reply contains the reply content (which may be Markdown formatted), author information (username, display_name, reputation, role), creation and update timestamps, depth level for visual indentation, parent reply ID for threading context, vote counts and net score, edit indicators showing if content was modified, and child reply counts for expanding nested threads. This comprehensive data enables rich client-side rendering of threaded discussions with proper visual hierarchy.\n\nPerformance considerations include efficient database querying using the indexed columns (discussion_board_topic_id, discussion_board_member_id, parent_reply_id) and the trigram GIN index on content for full-text search. The operation should return results within 2 seconds for typical queries per the performance requirements, with caching strategies for frequently accessed topic replies. Large result sets are paginated to prevent overwhelming clients with excessive data in a single response.\n\nIntegration with other systems includes the voting system to retrieve vote counts and calculate net scores, the user reputation system to include author reputation in reply data, the edit history tracking to show edit indicators and timestamps, and the moderation system to respect content visibility rules for deleted or hidden replies. The operation may also integrate with the blocked users system to filter out replies from users the requesting user has blocked.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic whose replies are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering parameters, sorting options, and pagination settings for retrieving topic replies","typeName":"IDiscussionBoardReply.IRequest"},"responseBody":{"description":"Paginated collection of discussion replies matching the search criteria, including reply content, author information, threading metadata, and vote statistics","typeName":"IPageIDiscussionBoardReply"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Topic must exist before replies can be retrieved"}]},{"specification":"This operation retrieves a specific reply within a discussion topic by its unique identifier. It operates on the discussion_board_replies table from the Prisma schema, providing complete information about a single reply including its content, author details, threading context, edit history status, and engagement metrics. This endpoint is essential for displaying individual replies when users navigate directly to specific comments, view reply permalinks, or need detailed information about a particular reply in the discussion thread. The operation supports the threaded discussion structure by providing parent and child relationship context, enabling clients to render the reply within its conversational hierarchy.","path":"/discussionBoard/topics/{topicId}/replies/{replyId}","method":"get","summary":"Retrieve detailed information about a specific reply within a discussion topic","description":"Retrieve comprehensive information about a specific reply within a discussion topic, including the reply content, author information, threading context, timestamps, and engagement metadata. This operation is fundamental for displaying individual replies when users follow direct links to specific comments, view reply permalinks shared externally, or navigate to particular replies within long discussion threads.\n\nThe operation accesses the discussion_board_replies table as defined in the Prisma schema, which supports threaded conversations up to 10 levels deep. Each reply contains content ranging from 1 to 10,000 characters with Markdown formatting support, and maintains relationships to both the parent topic and optionally a parent reply for nested threading. The response includes the reply's position in the thread hierarchy through the depth_level field, enabling proper display of conversational context.\n\nSecurity considerations include validating that the requested reply exists, belongs to the specified topic (topicId must match the reply's discussion_board_topic_id), and is accessible to the requesting user based on their role and the reply's deletion status. Guests and members can view active (non-deleted) replies, while moderators and administrators can access soft-deleted replies for audit purposes. The operation enforces content visibility rules ensuring users cannot access replies from topics they don't have permission to view.\n\nThe response provides complete author information including username, display name, role badge (member, moderator, administrator), and reputation score, enabling clients to render rich user attribution. Timestamps include creation time, last update time, and deletion time (if applicable), supporting edit history indicators and deleted content handling. The operation integrates with the voting and engagement system by providing a foundation for displaying vote counts and user vote states on individual replies.\n\nThis endpoint is frequently used in combination with the topic listing and search operations, as users discover topics through browsing or search and then navigate to specific replies of interest. It supports the platform's goal of maintaining organized, navigable discussions on economic and political topics by providing granular access to individual contributions within larger conversation threads.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic containing the reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the specific reply to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed reply information including content, author, threading context, and timestamps","typeName":"IDiscussionBoardReply"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before retrieving replies from it"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Reply must be created before it can be retrieved"}]},{"specification":"This operation creates a new reply to an existing discussion topic or nested reply within that topic. It operates on the discussion_board_replies table from the Prisma schema, supporting the platform's core threaded discussion functionality. Members post replies to contribute to economic and political discussions, respond to other users' points, and participate in community dialogue. The operation enforces business rules including content length constraints (1-10,000 characters), threading depth limits (maximum 10 levels), rate limiting (30 replies per hour, 200 per day per member), and validation that the parent topic is active and not locked or archived.","path":"/discussionBoard/member/topics/{topicId}/replies","method":"post","summary":"Create a new reply to a discussion topic or nested reply within the topic","description":"Create a new reply to an existing discussion topic, enabling members to participate in threaded conversations on economic and political subjects. This operation supports both top-level replies directly to the main topic and nested replies responding to other members' comments, maintaining the conversation hierarchy that facilitates organized, contextual discussions.\n\nThe operation creates records in the discussion_board_replies table as defined in the Prisma schema, which supports threaded conversations up to 10 levels deep through parent-child relationships. Reply content must be between 1 and 10,000 characters in length with Markdown formatting support for rich text expression. The system automatically calculates the depth_level based on the parent reply's depth to enforce the 10-level threading constraint defined in the discussion management requirements.\n\nSecurity and authorization considerations require that only authenticated members (not guests) can post replies, and the user's account must be in good standing (not suspended or banned). The operation validates that the target topic exists, belongs to the specified topicId parameter, and is in an active state that permits new replies. Locked topics prevent new replies except from administrators, and archived topics are read-only. The system enforces rate limiting rules of maximum 30 replies per hour and 200 replies per day per user to prevent spam, with additional cooldown periods if users post more than 3 replies to the same topic within 5 minutes.\n\nThe request body includes the reply content, optional parent_reply_id for nested replies, and any formatting preferences. When a reply is successfully created, the system increments the parent topic's reply_count, updates the topic's last_activity timestamp, and triggers notifications to relevant users (topic author for top-level replies, parent reply author for nested replies, or users mentioned with @username syntax). The response returns the complete newly created reply object including its assigned unique identifier, depth level, creation timestamp, and author information.\n\nThis operation integrates closely with the notification system documented in the notification requirements, triggering reply_to_topic or reply_to_comment notifications based on whether the reply is top-level or nested. It also respects user blocking relationships, preventing blocked users from seeing each other's replies in the thread display. Validation rules from the business rules document ensure content quality, prevent duplicate submissions, and maintain civil discourse standards for economic and political discussions.\n\nRelated operations that users typically combine with reply creation include viewing the parent topic to understand discussion context (GET /topics/{topicId}), retrieving the full reply thread for reference (GET /topics/{topicId}/replies), and editing the newly created reply within the allowed time window if corrections are needed (PUT /topics/{topicId}/replies/{replyId}). The threading structure enables complex multi-party discussions while maintaining clear conversation flow and context.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic to which the reply is being posted","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply content and threading information for creating a new discussion reply","typeName":"IDiscussionBoardReply.ICreate"},"responseBody":{"description":"Complete information about the newly created reply including assigned identifier and metadata","typeName":"IDiscussionBoardReply"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before replies can be posted to it"}]},{"specification":"This operation allows a member to update the content of their own reply within the allowed time window (1 hour for regular members, 24 hours for members with 100+ reputation). The operation is restricted to the original author of the reply or users with moderator/administrator privileges. The update operation modifies the reply content while preserving the reply structure, threading relationships, and maintaining an audit trail of the modification through the edit history system. This operation operates on the discussion_board_replies table from the Prisma schema and validates that the reply exists, belongs to the requesting user (or user has elevated privileges), and is within the editable time window based on user reputation and role. The operation enforces content validation rules including character length constraints (1-10,000 characters), URL limits, duplicate detection, and content quality checks.","path":"/discussionBoard/member/topics/{topicId}/replies/{replyId}","method":"put","summary":"Update a reply's content within allowed edit time window","description":"Updates the content of an existing reply to a discussion topic, subject to time-based editing restrictions and permission validation. This operation allows members to modify their own reply content within specific time constraints that vary based on user reputation: standard members can edit replies within 1 hour of posting, while members with 100+ reputation points have a 24-hour edit window. Moderators and administrators can edit any reply at any time without time restrictions.\n\nThe operation validates multiple business rules before allowing the update: it verifies the reply exists and belongs to the specified topic, confirms the requesting user is either the original author or has moderator/administrator privileges, checks that the edit is within the allowed time window based on the user's reputation score and role, and ensures the topic is not locked (which would prevent all editing except by administrators). Content validation applies the same rules as reply creation, including length constraints (1-10,000 characters), URL limits (maximum 5 URLs, flagged for review if exceeded), duplicate detection (rejecting identical content to previous replies by same user in same topic), and content quality checks (profanity filtering, spam pattern detection, prohibited content screening).\n\nWhen a reply is successfully updated, the system records the edit in the discussion_board_edit_history table, capturing the previous content, new content, optional edit reason, editor identity, and modification timestamp. This creates a comprehensive audit trail for transparency in discussions. The reply's updated_at timestamp is refreshed, and an 'Edited' indicator is displayed next to the reply showing when it was last modified. The parent topic's updated_at timestamp is also refreshed to reflect recent activity.\n\nSecurity and authorization considerations include validating the JWT token to confirm user identity, enforcing role-based permissions (members can only edit their own replies unless they have moderator/administrator roles), checking that the user account is not suspended or banned (suspended users cannot edit content), and respecting topic lock status (locked topics prevent editing except by administrators). The operation returns appropriate error responses for various failure scenarios: 404 if the topic or reply doesn't exist, 403 if the user lacks permission to edit the reply, 400 if the edit window has expired or content validation fails, and 423 if the topic is locked and user is not an administrator.\n\nThis operation integrates with the reputation system to determine edit window duration, the moderation system to respect content locks and user suspensions, the validation system to enforce content quality rules, and the edit history system to maintain transparency and auditability of content modifications.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic containing the reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated reply content and optional edit reason","typeName":"IDiscussionBoardReply.IUpdate"},"responseBody":{"description":"Updated reply with edit timestamp and indicator","typeName":"IDiscussionBoardReply"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before its replies can be updated"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Reply must be created before it can be updated"}]},{"specification":"This operation allows a member to delete their own reply within the allowed deletion time window (1 hour for standard members) if the reply has no child replies. The operation also permits moderators and administrators to delete any reply at any time without restrictions. Deletion uses soft delete by setting the deleted_at timestamp to preserve the reply for a 30-day recovery window, supporting platform data retention and recovery policies. When a reply with child replies is deleted, the content is replaced with '[deleted]' placeholder to maintain thread structure integrity. The operation operates on the discussion_board_replies table from the Prisma schema and validates that the reply exists, belongs to the requesting user (or user has elevated privileges), and meets deletion criteria based on time window and child reply presence.","path":"/discussionBoard/member/topics/{topicId}/replies/{replyId}","method":"delete","summary":"Mark a reply as deleted with soft delete to support recovery","description":"Marks a reply as deleted by setting the deleted_at timestamp, supporting a 30-day recovery window consistent with platform data retention policies. This operation allows members to delete their own replies within 1 hour of posting if the reply has no child replies, while moderators and administrators can delete any reply at any time without time restrictions. The operation uses soft delete to preserve data for potential recovery and maintain audit trail integrity.\n\nThe operation validates multiple conditions before allowing deletion: it verifies the reply exists and belongs to the specified topic, confirms the requesting user is either the original author within the deletion time window or has moderator/administrator privileges, checks that the topic is not locked (which would prevent deletion except by administrators), and examines whether the reply has any child replies that depend on it for thread structure.\n\nDeletion behavior uses soft delete in both scenarios by setting the deleted_at field to the current timestamp. If the reply has NO child replies, the system sets the deleted_at timestamp, decrements the parent topic's reply_count, updates the topic's updated_at timestamp, creates an audit log entry recording the deletion, and hides the reply from normal user views while preserving it in the database. If the reply HAS child replies, the system sets the deleted_at timestamp to mark deletion, replaces the content field with '[deleted]' placeholder text to maintain readability, maintains the reply's position in the thread hierarchy, preserves all child replies in their original structure, and ensures conversation flow remains understandable. After 30 days, permanently deleted records may be purged from the database as part of data retention policies.\n\nTime-based restrictions apply to member deletions: members can only delete their own replies within 1 hour of posting, after which the deletion option is removed to maintain discussion continuity and prevent retroactive content removal that could confuse ongoing conversations. Members with 100+ reputation points do not receive an extended deletion window—the 1-hour limit applies universally to all members regardless of reputation. However, moderators and administrators can delete any reply at any time as part of their content management responsibilities, and their deletions are logged in the moderation audit trail.\n\nWhen a reply is successfully deleted, the system sets the deleted_at timestamp, updates the parent topic's metadata to reflect the removed content, triggers a notification to the reply author if deletion was performed by a moderator (not for self-deletions), records the deletion in the audit trail with actor identity and timestamp, and returns a success confirmation. For moderator deletions, the action is logged in discussion_board_moderation_actions table with deletion reason and content snapshot.\n\nSecurity and authorization considerations include validating the JWT token to confirm user identity, enforcing role-based permissions (members can only delete their own replies within time window, moderators and administrators can delete any reply), checking that the user account is not suspended or banned, and respecting topic lock status (locked topics prevent deletion except by administrators). The operation returns appropriate error responses for various failure scenarios: 404 if the topic or reply doesn't exist, 403 if the user lacks permission to delete the reply, 400 if the deletion time window has expired for member self-deletion, and 423 if the topic is locked and user is not an administrator.\n\nThis operation integrates with the discussion management system to maintain reply counts and thread structure, the moderation system to log moderator deletions and respect content locks, the audit system to record all deletion events with actor and timestamp, and the notification system to alert users when their content is removed by moderators.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic containing the reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before its replies can be deleted"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Reply must be created before it can be deleted"}]},{"specification":"This operation retrieves the complete edit history for a specific discussion topic. It operates on the discussion_board_edit_history table where entity_type='topic' and entity_id matches the requested topicId. The endpoint provides transparency and accountability by showing all modifications made to a topic's content over time, including who made each edit, when it was made, what changed, and why. This supports community trust in discussions by making content evolution visible.","path":"/discussionBoard/topics/{topicId}/editHistory","method":"patch","summary":"Retrieve paginated edit history for a specific discussion topic","description":"Retrieve the complete edit history for a specific discussion topic, providing transparency into content modifications over time. This operation queries the discussion_board_edit_history table filtering for entity_type='topic' and entity_id matching the specified topicId parameter.\n\nThe edit history serves multiple critical purposes in maintaining platform integrity and user trust. For economic and political discussions where accuracy and context matter significantly, users need visibility into how discussion topics have evolved. Each edit record captures a snapshot of the content before and after modification, the editor's identity, the timestamp, and optionally the reason for the edit.\n\nThis operation supports pagination and filtering capabilities through the request body, allowing users to navigate through extensive edit histories efficiently. Users can filter by date ranges to see recent modifications or historical changes, sort by edit timestamp to understand content evolution chronologically, and search within edit history to find specific modifications.\n\nSecurity considerations include verifying that the topic exists and is accessible to the requesting user based on their role and the topic's visibility settings. While edit history is generally public for transparency, deleted or hidden topics may have restricted edit history access limited to moderators and administrators. The operation respects content visibility rules defined in the discussion management system.\n\nThe response includes comprehensive edit information: previous content state, new content state, editor information (username and role), edit timestamp, optional edit reason, and metadata about the edit context. This level of detail enables users to understand exactly how and why content changed, supporting informed discussion participation and content verification.\n\nRelated operations that work together with this endpoint include GET /topics/{topicId} to view the current topic state, and PATCH /topics to search for topics that might have interesting edit histories. The edit history complements the main discussion viewing experience by providing the temporal dimension of content evolution.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic whose edit history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, filtering, and sorting parameters for retrieving topic edit history","typeName":"IDiscussionBoardTopic.IEditHistoryRequest"},"responseBody":{"description":"Paginated list of edit history records showing content modifications over time","typeName":"IPageIDiscussionBoardEditHistory"},"authorizationRoles":[],"name":"editHistory","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Topic must exist before its edit history can be retrieved"}]},{"specification":"This operation retrieves the complete edit history for a specific reply within a discussion topic. It operates on the discussion_board_edit_history table where entity_type='reply' and entity_id matches the requested replyId. The endpoint provides transparency by showing all modifications made to a reply's content, including who edited it, when changes occurred, what content changed, and the reason for modifications. This supports accountability in threaded discussions and helps users track conversation evolution.","path":"/discussionBoard/topics/{topicId}/replies/{replyId}/editHistory","method":"patch","summary":"Retrieve paginated edit history for a specific discussion reply","description":"Retrieve the complete edit history for a specific reply within a discussion topic, providing full transparency into how reply content has been modified over time. This operation queries the discussion_board_edit_history table filtering for entity_type='reply' and entity_id matching the specified replyId parameter.\n\nEdit history for replies is crucial in threaded economic and political discussions where nuanced arguments develop over multiple exchanges. Users need to see how replies have evolved to understand the full context of conversations, especially when replies are edited after other users have responded to them. This prevents confusion and maintains the integrity of discussion threads.\n\nThe operation captures comprehensive edit information for each modification: the complete content snapshot before the edit, the complete content snapshot after the edit, the member who performed the edit (with their username and role), the precise timestamp of the modification, and any optional explanation the editor provided for why they made changes. This level of detail ensures users can track exactly how arguments or statements evolved.\n\nPagination support is essential since active replies in popular discussions may accumulate numerous edits. The request body allows filtering by date ranges (e.g., show only edits from the last week), sorting by edit timestamp (newest or oldest first), and limiting results per page. This enables efficient navigation through edit histories of various sizes.\n\nSecurity and access control considerations include verifying that both the topic and reply exist, that they are accessible to the requesting user based on visibility rules, and that the reply actually belongs to the specified topic (preventing unauthorized access to reply edit histories through topic ID manipulation). While edit histories are generally public for transparency in discussions, deleted or moderated content may have restricted edit history access limited to moderators, administrators, and the original author.\n\nThe operation integrates with the broader discussion management system by respecting content visibility rules, moderation status, and soft deletion states. If a reply has been deleted but is within the 30-day recovery window, its edit history remains accessible to authorized users (content author, moderators, administrators) for audit and potential restoration purposes.\n\nRelated operations include GET /topics/{topicId}/replies/{replyId} to view the current reply state, and PATCH /topics/{topicId}/replies to search replies within a topic. The edit history provides the temporal dimension that complements the current content view, enabling users to understand not just what a reply says now, but how it evolved to its current state.","parameters":[{"name":"topicId","description":"Unique identifier of the discussion topic containing the reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply whose edit history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, filtering, and sorting parameters for retrieving reply edit history","typeName":"IDiscussionBoardReply.IEditHistoryRequest"},"responseBody":{"description":"Paginated list of edit history records showing reply content modifications over time","typeName":"IPageIDiscussionBoardEditHistory"},"authorizationRoles":[],"name":"editHistory","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Topic must exist before reply edit history can be retrieved"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Reply must exist before its edit history can be retrieved"}]},{"specification":"This operation retrieves a filtered and paginated list of tags used throughout the discussion board platform. It operates on the discussion_board_tags table from the Prisma schema and supports complex queries to find tags based on various criteria including name search, status filtering, usage statistics, and creation date ranges. Tags are fundamental to the platform's content organization system, enabling users to categorize and discover discussions beyond the primary category structure. This operation supports the tag-based discovery and search functionality outlined in the Search and Discovery requirements document.","path":"/discussionBoard/tags","method":"patch","summary":"Search and retrieve a filtered, paginated list of discussion board tags","description":"Retrieve a filtered and paginated list of tags from the discussion board system. This operation provides advanced search capabilities for finding tags based on multiple criteria including partial name matching, tag status filtering, usage statistics, and creation date ranges.\n\nTags serve as a critical content organization mechanism in the discussion board, complementing the primary category structure. Each tag can be applied to multiple discussion topics (up to 5 tags per topic per business rules), and users can follow tags to receive notifications about new discussions with those tags. This operation supports tag browsing, popular tag discovery, and tag management workflows.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Users can sort tags by name (alphabetically), creation date, usage count (number of topics tagged), or recent usage count (trending tags). The search functionality includes partial text matching on tag names and descriptions using PostgreSQL full-text search with trigram indexing for performance.\n\nSecurity considerations include rate limiting for search operations (30 searches per minute per user for guests, higher limits for authenticated users). Tag visibility respects the tag status field - only active tags are visible to regular users, while moderators and administrators can view pending_review, disabled, and merged tags for management purposes.\n\nThis operation integrates with the discussion_board_tags table as defined in the Prisma schema (schema-05-engagement.prisma), incorporating tag properties including name, description, status, and timestamps. The response includes tag statistics aggregated from the mv_discussion_board_tag_statistics materialized view when available, providing usage_count, recent_usage_count, follower_count, and total_votes for each tag without expensive real-time aggregation.\n\nRelated operations that work together with this endpoint include GET /tags/{tagId} for retrieving detailed information about a specific tag, GET /topics for finding topics associated with selected tags, and PATCH /topics for advanced topic search that includes tag filtering. Users typically use this operation to discover popular tags, explore tag categories, and select tags for following or filtering discussion content.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for tag filtering including text search, status filtering, usage thresholds, and sorting preferences","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated list of tags matching search criteria with summary information including name, status, usage statistics, and metadata","typeName":"IPageIDiscussionBoardTag.ISummary"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves complete information about a single tag identified by its unique tagId path parameter. It operates on the discussion_board_tags table from the Prisma schema and returns comprehensive tag details including name, description, status, creation/update timestamps, and aggregated usage statistics. This operation supports tag detail views, tag management interfaces, and provides context for users deciding whether to follow a tag or filter discussions by it.","path":"/discussionBoard/tags/{tagId}","method":"get","summary":"Retrieve detailed information about a specific discussion board tag by ID","description":"Retrieve comprehensive information about a single tag from the discussion board system by specifying the tag's unique identifier in the path parameter. This operation returns complete tag details including metadata, statistics, and usage information.\n\nTags are user-generated labels that provide additional categorization beyond primary discussion categories. Each tag has properties including a unique name (2-30 characters, normalized to lowercase), an optional description explaining usage guidelines, and a status indicating its lifecycle state (active, pending_review, disabled, merged). Tags support cross-category content discovery, allowing users to find related discussions across Economics and Politics categories through shared tags.\n\nThe operation returns detailed tag information incorporating data from both the discussion_board_tags base table and the mv_discussion_board_tag_statistics materialized view. The statistics provide aggregated metrics including total usage count (number of topics tagged), recent usage count (topics tagged in last 7 days for trending analysis), follower count (users following the tag), and total votes (sum of all votes on tagged topics). These denormalized statistics enable efficient tag cloud generation and popular tag displays without expensive real-time aggregation queries.\n\nSecurity and visibility considerations ensure that tag access respects the tag status field. Active tags are visible to all users including guests. Tags with pending_review or disabled status are only visible to moderators and administrators. Merged tags may redirect to the canonical tag they were consolidated into. The operation validates that the specified tagId exists and returns appropriate error messages for non-existent or inaccessible tags.\n\nThis operation integrates with related tag functionality including following tags (users can subscribe to receive notifications about new topics with this tag), filtering discussions by tags (finding all topics associated with this tag), and tag management workflows (moderators reviewing and approving user-created tags). The tag detail view helps users understand tag meaning and appropriateness before applying it to their own discussion topics.\n\nRelated operations include PATCH /tags for searching and browsing all available tags, GET /topics for retrieving discussions associated with this tag through topic_tags junction table, and POST /tags/{tagId}/follow for users to subscribe to tag updates. This operation is commonly used when users click on a tag from a discussion topic to learn more about that tag before deciding to follow it or explore related discussions.","parameters":[{"name":"tagId","description":"Unique identifier of the target discussion board tag","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive tag information including name, description, status, usage statistics, follower count, and metadata","typeName":"IDiscussionBoardTag"},"authorizationRole":null,"authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/tags","method":"post"},"description":"Tag must be created before it can be retrieved by ID"}]},{"specification":"This operation allows administrators or moderators to create a new tag in the discussion board tag vocabulary system. Tags provide additional categorization beyond primary categories (Economics and Politics), enabling cross-category topic discovery and content organization. The operation validates that the tag name is unique, follows naming conventions (2-30 characters, alphanumeric with spaces and hyphens), and sets the appropriate initial status (pending_review for moderator-created tags, active for admin-created tags). According to the Prisma schema, the discussion_board_tags table includes fields: id, name (unique), description (optional), status (tag lifecycle: active, pending_review, disabled, merged), created_at, updated_at, and deleted_at. The tag creation process ensures only authorized users can add to the master tag vocabulary, maintaining tag quality and preventing tag spam. Newly created tags become available for use in topic creation workflows once their status is set to active.","path":"/discussionBoard/moderator/tags","method":"post","summary":"Create a new tag in the discussion board tag vocabulary for content categorization","description":"This operation creates a new tag entry in the discussion_board_tags table, enabling users to categorize and discover discussion topics through tag-based filtering and search. Tags serve as secondary organizational metadata complementing the primary category structure (Economics and Politics categories).\n\nThe tag creation process validates all input against business rules defined in the requirements. Tag names must be between 2 and 30 characters in length, contain only alphanumeric characters with spaces and hyphens, and be unique across the entire tag vocabulary. The system normalizes tag names to lowercase to ensure consistency and prevent duplicate tags with slight case variations.\n\nWhen a moderator creates a tag, the system sets the initial status to 'pending_review' to allow administrator oversight of the tag vocabulary. When an administrator creates a tag, the status is set directly to 'active', making it immediately available for use. This approval workflow maintains tag quality and prevents the proliferation of redundant or inappropriate tags.\n\nOptionally, the creator can provide a description field explaining what the tag represents and when to use it, helping users apply tags consistently across discussions. The description supports clear tag semantics and reduces confusion in tag application.\n\nUpon successful creation, the system generates a unique identifier, records creation and update timestamps, and returns the complete tag object. The new tag becomes searchable and available for suggestion in the topic creation interface once its status reaches 'active'.\n\nThis operation requires proper authentication and role-based authorization. Only users with moderator or administrator roles can create new tags, preventing tag spam from regular members while allowing community leaders to expand the tag vocabulary organically as discussion topics evolve.","parameters":[],"requestBody":{"description":"Tag creation data including required name and optional description","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"Created tag with unique identifier, normalized name, assigned status, and timestamps","typeName":"IDiscussionBoardTag"},"authorizationRole":"moderator","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation allows administrators or moderators to create a new tag in the discussion board tag vocabulary system. Tags provide additional categorization beyond primary categories (Economics and Politics), enabling cross-category topic discovery and content organization. The operation validates that the tag name is unique, follows naming conventions (2-30 characters, alphanumeric with spaces and hyphens), and sets the appropriate initial status (pending_review for moderator-created tags, active for admin-created tags). According to the Prisma schema, the discussion_board_tags table includes fields: id, name (unique), description (optional), status (tag lifecycle: active, pending_review, disabled, merged), created_at, updated_at, and deleted_at. The tag creation process ensures only authorized users can add to the master tag vocabulary, maintaining tag quality and preventing tag spam. Newly created tags become available for use in topic creation workflows once their status is set to active.","path":"/discussionBoard/administrator/tags","method":"post","summary":"Create a new tag in the discussion board tag vocabulary for content categorization","description":"This operation creates a new tag entry in the discussion_board_tags table, enabling users to categorize and discover discussion topics through tag-based filtering and search. Tags serve as secondary organizational metadata complementing the primary category structure (Economics and Politics categories).\n\nThe tag creation process validates all input against business rules defined in the requirements. Tag names must be between 2 and 30 characters in length, contain only alphanumeric characters with spaces and hyphens, and be unique across the entire tag vocabulary. The system normalizes tag names to lowercase to ensure consistency and prevent duplicate tags with slight case variations.\n\nWhen a moderator creates a tag, the system sets the initial status to 'pending_review' to allow administrator oversight of the tag vocabulary. When an administrator creates a tag, the status is set directly to 'active', making it immediately available for use. This approval workflow maintains tag quality and prevents the proliferation of redundant or inappropriate tags.\n\nOptionally, the creator can provide a description field explaining what the tag represents and when to use it, helping users apply tags consistently across discussions. The description supports clear tag semantics and reduces confusion in tag application.\n\nUpon successful creation, the system generates a unique identifier, records creation and update timestamps, and returns the complete tag object. The new tag becomes searchable and available for suggestion in the topic creation interface once its status reaches 'active'.\n\nThis operation requires proper authentication and role-based authorization. Only users with moderator or administrator roles can create new tags, preventing tag spam from regular members while allowing community leaders to expand the tag vocabulary organically as discussion topics evolve.","parameters":[],"requestBody":{"description":"Tag creation data including required name and optional description","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"Created tag with unique identifier, normalized name, assigned status, and timestamps","typeName":"IDiscussionBoardTag"},"authorizationRole":"administrator","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation allows moderators and administrators to update an existing tag in the discussion board tag vocabulary. Tag updates support modifying the tag name, description, and status to maintain tag quality and organize the tag taxonomy effectively. The operation validates that updated names remain unique, follow naming conventions, and do not conflict with existing tags. According to the Prisma schema, discussion_board_tags supports updates to: name (unique, 2-30 characters), description (optional explanatory text), and status (active, pending_review, disabled, merged). The update process preserves referential integrity with existing topic_tags associations and maintains the tag's identity through immutable UUID. Common use cases include renaming misspelled tags, adding descriptions to clarify tag semantics, changing status to disable inappropriate tags, or merging duplicate tags by updating status to 'merged'. The system records the update timestamp automatically to track tag evolution over time.","path":"/discussionBoard/moderator/tags/{tagId}","method":"put","summary":"Update an existing tag's name, description, or status in the discussion board","description":"This operation modifies an existing tag entry in the discussion_board_tags table, allowing moderators and administrators to maintain tag quality, clarify tag semantics, and manage the tag lifecycle. Tag updates are essential for evolving the tag vocabulary as community discussions develop and new topics emerge.\n\nThe tag update process supports modifying three core attributes: name, description, and status. When updating the tag name, the system validates that the new name meets all naming requirements (2-30 characters, alphanumeric with spaces and hyphens) and remains unique across the entire tag vocabulary. The system normalizes updated names to lowercase to maintain consistency with existing tag conventions.\n\nDescription updates allow moderators to clarify what a tag represents and provide guidance on when to use it. This helps users apply tags consistently and reduces ambiguity in tag semantics. Descriptions are optional but recommended for frequently used tags to improve user understanding.\n\nStatus updates control the tag lifecycle. Moderators can change status from 'pending_review' to 'active' to approve new tags for general use. Tags can be disabled by setting status to 'disabled', which hides them from tag selection interfaces while preserving existing tag associations on topics. Tags can be marked as 'merged' when consolidating duplicate or similar tags, indicating the tag has been superseded by another preferred tag.\n\nThe operation validates that the specified tag exists by checking the tagId path parameter against the discussion_board_tags table. If the tag is not found or has been soft-deleted (deleted_at is not null), the operation returns an appropriate error response.\n\nWhen a tag is successfully updated, the system automatically updates the updated_at timestamp to track when modifications occurred. This timestamp is used for audit trail and tracking tag evolution over time. Existing topic_tags associations are preserved—topics previously tagged with this tag maintain their associations even when the tag name or description changes.\n\nSecurity considerations include validating that the requesting user has moderator or administrator role privileges. The operation logs tag updates in the audit trail for accountability. Tag updates should be performed judiciously as they affect all topics currently using the tag.\n\nRelated operations that work in conjunction with tag updates include tag creation (POST /tags), tag-based topic discovery (GET /topics filtered by tags), and tag following (members tracking specific tags for personalized content). The tag update operation ensures the tag vocabulary remains accurate, organized, and aligned with community discussion patterns.","parameters":[{"name":"tagId","description":"Unique identifier of the tag to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated tag information including name, description, and status","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Updated tag with modified fields and updated timestamp","typeName":"IDiscussionBoardTag"},"authorizationRole":"moderator","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/tags","method":"post"},"description":"Tag must be created before it can be updated by moderators"}]},{"specification":"This operation allows moderators and administrators to update an existing tag in the discussion board tag vocabulary. Tag updates support modifying the tag name, description, and status to maintain tag quality and organize the tag taxonomy effectively. The operation validates that updated names remain unique, follow naming conventions, and do not conflict with existing tags. According to the Prisma schema, discussion_board_tags supports updates to: name (unique, 2-30 characters), description (optional explanatory text), and status (active, pending_review, disabled, merged). The update process preserves referential integrity with existing topic_tags associations and maintains the tag's identity through immutable UUID. Common use cases include renaming misspelled tags, adding descriptions to clarify tag semantics, changing status to disable inappropriate tags, or merging duplicate tags by updating status to 'merged'. The system records the update timestamp automatically to track tag evolution over time.","path":"/discussionBoard/administrator/tags/{tagId}","method":"put","summary":"Update an existing tag's name, description, or status in the discussion board","description":"This operation modifies an existing tag entry in the discussion_board_tags table, allowing moderators and administrators to maintain tag quality, clarify tag semantics, and manage the tag lifecycle. Tag updates are essential for evolving the tag vocabulary as community discussions develop and new topics emerge.\n\nThe tag update process supports modifying three core attributes: name, description, and status. When updating the tag name, the system validates that the new name meets all naming requirements (2-30 characters, alphanumeric with spaces and hyphens) and remains unique across the entire tag vocabulary. The system normalizes updated names to lowercase to maintain consistency with existing tag conventions.\n\nDescription updates allow moderators to clarify what a tag represents and provide guidance on when to use it. This helps users apply tags consistently and reduces ambiguity in tag semantics. Descriptions are optional but recommended for frequently used tags to improve user understanding.\n\nStatus updates control the tag lifecycle. Moderators can change status from 'pending_review' to 'active' to approve new tags for general use. Tags can be disabled by setting status to 'disabled', which hides them from tag selection interfaces while preserving existing tag associations on topics. Tags can be marked as 'merged' when consolidating duplicate or similar tags, indicating the tag has been superseded by another preferred tag.\n\nThe operation validates that the specified tag exists by checking the tagId path parameter against the discussion_board_tags table. If the tag is not found or has been soft-deleted (deleted_at is not null), the operation returns an appropriate error response.\n\nWhen a tag is successfully updated, the system automatically updates the updated_at timestamp to track when modifications occurred. This timestamp is used for audit trail and tracking tag evolution over time. Existing topic_tags associations are preserved—topics previously tagged with this tag maintain their associations even when the tag name or description changes.\n\nSecurity considerations include validating that the requesting user has moderator or administrator role privileges. The operation logs tag updates in the audit trail for accountability. Tag updates should be performed judiciously as they affect all topics currently using the tag.\n\nRelated operations that work in conjunction with tag updates include tag creation (POST /tags), tag-based topic discovery (GET /topics filtered by tags), and tag following (members tracking specific tags for personalized content). The tag update operation ensures the tag vocabulary remains accurate, organized, and aligned with community discussion patterns.","parameters":[{"name":"tagId","description":"Unique identifier of the tag to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated tag information including name, description, and status","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Updated tag with modified fields and updated timestamp","typeName":"IDiscussionBoardTag"},"authorizationRole":"administrator","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/tags","method":"post"},"description":"Tag must be created before it can be updated by administrators"}]},{"specification":"This operation performs a soft delete on a tag from the discussion board platform. It operates on the discussion_board_tags table from the Prisma schema by setting the deleted_at timestamp. Tags can only be deleted if they are not currently associated with any topics (verified through discussion_board_topic_tags junction table). This operation requires administrator privileges as it affects the platform's organizational structure. The deletion is a soft delete that marks the tag as deleted while preserving the record for audit purposes and potential recovery.","path":"/discussionBoard/administrator/tags/{tagId}","method":"delete","summary":"Soft delete a tag from the discussion board","description":"This operation performs a soft delete on a tag from the discussion board platform by setting the deleted_at timestamp in the discussion_board_tags table. The operation validates that the tag exists and is not currently in use before proceeding with the soft deletion.\n\nSecurity considerations require that only administrators can delete tags, as this affects the platform's organizational taxonomy and content categorization structure. The operation verifies administrator authentication through JWT token validation before processing the deletion request.\n\nThe deletion process checks whether the tag is currently associated with any discussion topics through the discussion_board_topic_tags junction table. If the tag is in use, the deletion is rejected to maintain referential integrity and prevent confusion from tags disappearing from active topics. Administrators must first remove or reassign the tag from all topics before deletion can proceed.\n\nThis is a soft deletion operation that marks the tag as deleted by setting the deleted_at timestamp while preserving the tag record in the database. The discussion_board_tags table in the Prisma schema includes a deleted_at field for soft deletion support. The tag is hidden from active use but preserved for audit trail and potential recovery within the platform's 30-day retention policy. Deleted tags can be recovered by administrators within the retention window if needed, or they are permanently removed after the retention period expires.\n\nRelated operations include browsing all tags to identify unused or redundant tags that are candidates for removal, and viewing tag usage information before making deletion decisions.","name":"erase","authorizationRoles":["administrator"],"parameters":[{"name":"tagId","description":"Unique identifier of the tag to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"administrator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/tags","method":"post"},"description":"Tag must exist before it can be deleted. The tag creation operation ensures the tagId references a valid tag record in the discussion_board_tags table."}]},{"specification":"This operation retrieves aggregated statistics for a specific tag from the mv_discussion_board_tag_statistics materialized view. It provides comprehensive usage metrics including total topic count, recent activity, vote engagement, and follower count. This read-only operation supports tag management decisions and helps users understand tag popularity and relevance in the discussion board ecosystem.","path":"/discussionBoard/tags/{tagId}/statistics","method":"get","summary":"Retrieve aggregated statistics for a specific discussion board tag","description":"This operation retrieves comprehensive statistical information about a specific tag from the mv_discussion_board_tag_statistics materialized view in the Prisma schema. The statistics provide valuable insights into tag usage patterns, popularity, and engagement metrics that help administrators manage the tag taxonomy and help users understand which tags are actively used in the community.\n\nThe operation returns aggregated data including the total number of topics currently tagged with this tag (usage_count), the number of topics tagged in the last 7 days (recent_usage_count) which identifies trending tags, the sum of all votes on topics with this tag (total_votes) indicating community engagement, and the number of users following this tag (follower_count) showing tag popularity. These metrics are pre-calculated in the materialized view for optimal performance.\n\nSecurity and access control considerations allow this endpoint to be publicly accessible since tag statistics are non-sensitive aggregate data that helps all users understand tag usage patterns. No authentication is required, making this information available to guests, members, moderators, and administrators alike. The read-only nature of this operation ensures data integrity.\n\nThe statistics data is refreshed periodically according to the platform's materialized view refresh schedule, so the returned metrics represent a recent snapshot rather than real-time values. The updated_at timestamp in the response indicates when the statistics were last recalculated, allowing consumers to understand data freshness.\n\nThis operation integrates with tag management workflows where administrators review tag usage before making decisions about tag consolidation, deletion, or promotion. It also supports tag discovery features where users browse popular and trending tags to find relevant discussions. The relationship to the base discussion_board_tags table is maintained through the discussion_board_tag_id foreign key in the materialized view.\n\nError handling includes validation that the specified tagId exists in the system. If the tag does not exist or has been deleted, the operation returns an appropriate error response. If statistics have not yet been calculated for a newly created tag, the operation may return zero values for all metrics.","name":"at","authorizationRoles":[],"parameters":[{"name":"tagId","description":"Unique identifier of the tag for which statistics are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregated statistical metrics for the specified tag including usage counts, engagement data, and trend indicators","typeName":"IDiscussionBoardTagStatistics"},"authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/tags","method":"post"},"description":"Tag must be created before its statistics can be retrieved. The tag creation operation ensures the tagId references a valid tag record that has corresponding statistics in the materialized view."}]},{"specification":"This operation allows authenticated members to cast a vote (upvote or downvote) on discussion content including topics and replies. It operates on the discussion_board_votes table from the Prisma schema and creates a new vote record when a member interacts with content they have not previously voted on. The operation validates that users can only vote once per content item and enforces reputation requirements (minimum 10 points for upvoting, 50 points for downvoting per business rules). The voting system is central to the platform's community-driven content curation, affecting content ranking algorithms and author reputation scores.","path":"/discussionBoard/member/votes","method":"post","summary":"Cast a vote (upvote or downvote) on discussion board content","description":"Create a new vote on a discussion topic or reply, recording the member's assessment of content quality. This operation is fundamental to the platform's community-driven content curation system, enabling members to collectively surface high-quality economic and political discussions while discouraging low-quality contributions.\n\nThe voting operation validates several business rules before accepting the vote. First, the system verifies that the user has sufficient reputation points - upvoting requires a minimum of 10 reputation points, while downvoting requires 50 reputation points to prevent abuse. Second, the system ensures users cannot vote on their own content (self-voting is prohibited). Third, the system enforces that each user can cast only one vote per content item, though votes can be changed or removed within a 5-minute window after casting.\n\nWhen a vote is successfully cast, the system records the vote in the discussion_board_votes table with the member ID, votable type (topic or reply), votable ID, and vote type (upvote or downvote). The vote immediately affects the content's net score (upvotes minus downvotes) which influences content ranking in the Hot, Top, and Controversial sorting algorithms. Additionally, the author of the voted content receives reputation points: +5 for topic upvotes, +2 for reply upvotes, -2 for topic downvotes, and -1 for reply downvotes.\n\nThe voting system integrates with the notification system, potentially triggering vote milestone notifications when content reaches 10, 25, 50, 100, or higher vote thresholds. Vote data also feeds into user reputation calculations tracked in the discussion_board_user_reputation table, enabling reputation-based privilege unlocking and leaderboard features.\n\nSecurity considerations include rate limiting (maximum 200 votes per hour per user) and suspicious pattern detection to prevent vote manipulation, vote rings, and coordinated voting attacks. The system logs vote patterns and may flag suspicious activity for moderator review. Suspended or banned users are prevented from casting votes during their restriction period.\n\nThis operation is essential for maintaining content quality on the platform, as it allows the community to collectively identify valuable economic and political discourse while suppressing spam, misinformation, and low-effort content.","parameters":[],"requestBody":{"description":"Vote casting information including the content being voted on and vote direction","typeName":"IDiscussionBoardVote.ICreate"},"responseBody":{"description":"Created vote record with voter information, content reference, and vote type","typeName":"IDiscussionBoardVote"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Topic must exist before it can be voted on. The votable_id references a topic that needs to be created first for topic votes."},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Reply must exist before it can be voted on. The votable_id references a reply that needs to be created first for reply votes."}]},{"specification":"This operation allows authenticated members to modify an existing vote they previously cast on discussion content. It operates on the discussion_board_votes table and enables users to change their vote direction (from upvote to downvote or vice versa) or remove their vote entirely within the allowed time constraints. The operation validates that only the original voter can modify their vote and enforces the 5-minute change window per business rules. Vote modifications immediately recalculate content scores and adjust author reputation accordingly.","path":"/discussionBoard/member/votes/{voteId}","method":"put","summary":"Update or remove an existing vote on discussion board content","description":"Modify an existing vote record to change vote direction (upvote to downvote or vice versa) or remove the vote entirely. This operation provides users with flexibility to reconsider their content assessment and correct accidental votes, supporting the platform's goal of accurate community-driven content curation.\n\nThe vote update operation enforces a critical time-based business rule: votes can only be changed or removed within 5 minutes of the original vote casting. After this window expires, votes are locked and cannot be modified to maintain content score stability and prevent strategic vote manipulation. This 5-minute grace period balances user flexibility with content integrity requirements.\n\nWhen a user updates their vote, the system validates several conditions. First, the system verifies that the vote record exists and belongs to the authenticated user - users cannot modify votes cast by others. Second, the system checks that the vote is still within the 5-minute modification window by comparing the current timestamp with the vote's created_at timestamp from the discussion_board_votes table. Third, the system ensures the user still has permission to vote (account not suspended, sufficient reputation points maintained).\n\nVote modifications trigger immediate recalculations throughout the platform. When a vote changes from upvote to downvote, the content's net score decreases by 2 points (removing +1 and adding -1). The author's reputation in the discussion_board_user_reputation table is adjusted accordingly, reversing the original reputation bonus and applying the new reputation change. If a vote is removed entirely (changed to null or neutral), the system removes the vote record and recalculates scores without that vote's contribution.\n\nThe operation integrates with the content ranking system, causing immediate updates to Hot, Top, and Controversial sorting algorithms. Vote changes may also affect whether content has reached vote milestone thresholds, potentially triggering or revoking vote milestone notifications sent through the discussion_board_notifications table.\n\nSecurity and anti-gaming measures apply to vote updates just as they do to initial vote casting. The system tracks vote change patterns and may flag users who repeatedly change votes in suspicious patterns (such as coordinating with vote rings or attempting to manipulate trending algorithms). Vote update actions are logged in the discussion_board_audit_logs table for fraud detection and pattern analysis.\n\nUsers attempting to modify votes after the 5-minute window receive a clear error message explaining the time restriction and encouraging them to leave their original vote in place or engage through replies instead. This helps users understand platform rules while maintaining content score integrity essential for fair community-driven content curation.","parameters":[{"name":"voteId","description":"Unique identifier of the vote record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated vote information including new vote direction or removal flag","typeName":"IDiscussionBoardVote.IUpdate"},"responseBody":{"description":"Updated vote record with modified vote type and updated timestamp","typeName":"IDiscussionBoardVote"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/votes","method":"post"},"description":"Vote must be created before it can be updated. The voteId references a vote record that must exist in the discussion_board_votes table."}]},{"specification":"This operation allows a member to remove their existing vote from a specific discussion content item (topic or reply). Vote removal is permitted within 5 minutes of the original vote being cast according to business rules. After successful removal, the vote record is permanently deleted from the database, the content's vote score is recalculated (decremented by 1 for upvote removal or incremented by 1 for downvote removal), and the content author's reputation is adjusted accordingly. This operation supports the voting system's flexibility by allowing users to retract their votes if they change their mind quickly after voting. The operation validates that the requesting user is the owner of the vote, that the vote exists and has not been deleted, and that the 5-minute change window has not expired. If the change window has expired, the vote is locked and cannot be removed. This operation is associated with the discussion_board_votes table in the Prisma schema.","path":"/discussionBoard/member/votes/{voteId}","method":"delete","summary":"Remove a member's vote from discussion content within the 5-minute change window","description":"This operation enables authenticated members to remove their previously cast votes from discussion topics or replies. Vote removal is a critical component of the voting and engagement system, providing users with the flexibility to retract their voting decisions within a limited time window.\n\nWhen a member successfully removes a vote, several cascading effects occur throughout the system. First, the vote record is permanently deleted from the discussion_board_votes table. Second, the content's net vote score is recalculated immediately - if an upvote is removed, the score decrements by 1; if a downvote is removed, the score increments by 1. Third, the content author's reputation is adjusted to reverse the reputation points that were originally awarded or deducted when the vote was cast. This ensures reputation accurately reflects current community assessment rather than historical voting patterns.\n\nSecurity and business rule enforcement are paramount in this operation. The system validates that the authenticated member is indeed the owner of the vote being removed - users cannot remove other users' votes. The operation checks that the vote exists and has not already been deleted (soft delete check via deleted_at column). Most critically, the operation enforces the 5-minute vote change window defined in business rules: votes can only be removed within 5 minutes of being cast. After this window expires, votes are locked permanently and cannot be changed or removed. This time constraint prevents vote manipulation and ensures voting stability for content ranking algorithms.\n\nThe operation integrates with multiple platform systems. It affects the voting and engagement system by modifying vote counts and rankings. It triggers reputation recalculation in the user reputation system, potentially affecting privilege unlocking if the reputation change crosses thresholds. It may trigger notifications if the vote removal causes the content to fall below a previously reached milestone. The operation respects the soft delete pattern used throughout the platform, checking the deleted_at column to ensure votes marked as deleted cannot be removed again.\n\nError scenarios are handled gracefully with clear user feedback. If the vote does not exist or does not belong to the requesting user, the operation returns a 404 Not Found or 403 Forbidden error. If the 5-minute change window has expired, the operation returns a 400 Bad Request with a message explaining that votes can only be removed within 5 minutes of casting. If the content associated with the vote has been deleted, the operation may also reject the removal request. All validation occurs server-side to prevent security vulnerabilities.\n\nThis operation supports the platform's philosophy of empowering users to control their engagement while maintaining voting integrity through time-based restrictions. It balances user flexibility (allowing quick vote retraction) with system stability (preventing long-term vote manipulation).","parameters":[{"name":"voteId","description":"Unique identifier of the vote to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/votes","method":"post"},"description":"Vote must exist before it can be removed. The vote record needs to be created first so that it can subsequently be deleted by the member who cast it."}]},{"specification":"This operation retrieves a filtered, paginated list of content reports from the moderation queue. Moderators and administrators use this operation to access reported content that requires review. The operation supports advanced filtering by report status (pending, under_review, resolved, dismissed), violation category (personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, other), severity level (critical, high, medium, low), assigned moderator, date range, and number of reports on the same content. Results are sorted by priority score (calculated based on severity, multiple reports, and time in queue) by default, with alternative sorting options including submission time, severity level, and report count. Pagination is provided with configurable page sizes. This operation enables efficient moderation queue management and content review workflows. The operation is associated with the discussion_board_reports table in the Prisma schema and integrates with content visibility, moderator assignment, and report resolution workflows.","path":"/discussionBoard/moderator/reports","method":"patch","summary":"Search and retrieve filtered moderation queue reports with pagination and priority sorting","description":"This operation provides moderators and administrators with comprehensive access to the content moderation queue, enabling efficient review and management of reported content. The moderation queue is the central workflow hub for maintaining community standards and enforcing guidelines for civil discourse on economic and political topics.\n\nThe operation supports sophisticated filtering capabilities essential for effective moderation queue management. Moderators can filter reports by current status (pending for unassigned reports, under_review for reports actively being investigated, resolved for completed reviews, or dismissed for reports determined to be without merit). Violation category filtering allows moderators to focus on specific types of guideline violations such as personal attacks, hate speech, misinformation, spam, offensive language, off-topic content, threats, doxxing, or trolling. Severity level filtering (critical, high, medium, low) enables prioritization of the most serious violations requiring immediate attention. Additional filters include assigned moderator (to view reports assigned to specific team members or unassigned reports), date range for investigating reports from specific time periods, and report count (number of times the same content has been reported by different users, indicating community consensus on violations).\n\nThe default sorting algorithm prioritizes reports using a composite score that considers severity level (critical violations appear first), multiple reports on the same content (community agreement elevates priority), and time in queue (older unresolved reports gradually increase in priority to ensure timely review). Alternative sorting options allow moderators to view the queue chronologically (oldest unresolved first, newest first), by severity only, or by report count. This flexible sorting ensures moderators can work through the queue efficiently while ensuring critical violations receive immediate attention.\n\nPagination controls enable moderators to navigate large moderation queues effectively. The operation returns comprehensive report information for each queue item including report ID, submission timestamp, content preview (first 100 characters of reported content), violation category and severity, number of reports on this content, current status, assigned moderator (if any), and time in queue. This information enables moderators to quickly assess reports and prioritize their review workflow.\n\nSecurity and permission enforcement are critical for this operation. Only users with moderator or administrator roles can access the moderation queue. Regular members cannot view reports or access moderation interfaces. When a moderator accesses the queue, they see all pending and under-review reports across the platform. Administrators have unrestricted access to the complete queue including resolved and dismissed reports for audit and oversight purposes. The operation respects role-based access control defined in the User Roles and Authentication requirements.\n\nThe operation integrates with multiple moderation workflow components. Report data references the discussion_board_reports table which contains foreign keys to reported content (discussion_board_topics or discussion_board_replies), the reporting user (discussion_board_members), and the assigned moderator (discussion_board_moderators). The operation provides the foundation for subsequent moderation actions including content review, warning issuance, content hiding or removal, user suspension, and report resolution. All data returned respects soft delete patterns, excluding reports with deleted_at timestamps unless explicitly requested by administrators for audit purposes.\n\nPerformance requirements mandate that the moderation queue loads within 2 seconds even with thousands of pending reports. Efficient database indexing on status, severity, assigned moderator, and creation timestamp columns supports rapid filtering and sorting. The operation uses pagination to limit result set sizes, preventing performance degradation as the report volume grows. Real-time updates are not required for this operation; moderators can refresh the queue manually to see newly submitted reports.\n\nThe operation supports the platform's commitment to transparent, fair, and timely content moderation. By providing powerful filtering and sorting tools, the system enables moderators to work through the queue efficiently, address critical violations immediately, and maintain consistent response times. The comprehensive report information displayed supports informed moderation decisions while the audit trail (created through subsequent moderation action operations) ensures accountability for all moderation activities.","parameters":[],"requestBody":{"description":"Search criteria, filters, pagination parameters, and sorting options for moderation queue reports","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated list of content reports with filtering applied, sorted by priority score or selected sorting option","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRoles":["moderator","administrator"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Reports must be created before they can be retrieved in the moderation queue. Members need to submit content reports that moderators can then search and filter."}]},{"specification":"This operation retrieves a filtered, paginated list of content reports from the moderation queue. Moderators and administrators use this operation to access reported content that requires review. The operation supports advanced filtering by report status (pending, under_review, resolved, dismissed), violation category (personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, other), severity level (critical, high, medium, low), assigned moderator, date range, and number of reports on the same content. Results are sorted by priority score (calculated based on severity, multiple reports, and time in queue) by default, with alternative sorting options including submission time, severity level, and report count. Pagination is provided with configurable page sizes. This operation enables efficient moderation queue management and content review workflows. The operation is associated with the discussion_board_reports table in the Prisma schema and integrates with content visibility, moderator assignment, and report resolution workflows.","path":"/discussionBoard/administrator/reports","method":"patch","summary":"Search and retrieve filtered moderation queue reports with pagination and priority sorting","description":"This operation provides moderators and administrators with comprehensive access to the content moderation queue, enabling efficient review and management of reported content. The moderation queue is the central workflow hub for maintaining community standards and enforcing guidelines for civil discourse on economic and political topics.\n\nThe operation supports sophisticated filtering capabilities essential for effective moderation queue management. Moderators can filter reports by current status (pending for unassigned reports, under_review for reports actively being investigated, resolved for completed reviews, or dismissed for reports determined to be without merit). Violation category filtering allows moderators to focus on specific types of guideline violations such as personal attacks, hate speech, misinformation, spam, offensive language, off-topic content, threats, doxxing, or trolling. Severity level filtering (critical, high, medium, low) enables prioritization of the most serious violations requiring immediate attention. Additional filters include assigned moderator (to view reports assigned to specific team members or unassigned reports), date range for investigating reports from specific time periods, and report count (number of times the same content has been reported by different users, indicating community consensus on violations).\n\nThe default sorting algorithm prioritizes reports using a composite score that considers severity level (critical violations appear first), multiple reports on the same content (community agreement elevates priority), and time in queue (older unresolved reports gradually increase in priority to ensure timely review). Alternative sorting options allow moderators to view the queue chronologically (oldest unresolved first, newest first), by severity only, or by report count. This flexible sorting ensures moderators can work through the queue efficiently while ensuring critical violations receive immediate attention.\n\nPagination controls enable moderators to navigate large moderation queues effectively. The operation returns comprehensive report information for each queue item including report ID, submission timestamp, content preview (first 100 characters of reported content), violation category and severity, number of reports on this content, current status, assigned moderator (if any), and time in queue. This information enables moderators to quickly assess reports and prioritize their review workflow.\n\nSecurity and permission enforcement are critical for this operation. Only users with moderator or administrator roles can access the moderation queue. Regular members cannot view reports or access moderation interfaces. When a moderator accesses the queue, they see all pending and under-review reports across the platform. Administrators have unrestricted access to the complete queue including resolved and dismissed reports for audit and oversight purposes. The operation respects role-based access control defined in the User Roles and Authentication requirements.\n\nThe operation integrates with multiple moderation workflow components. Report data references the discussion_board_reports table which contains foreign keys to reported content (discussion_board_topics or discussion_board_replies), the reporting user (discussion_board_members), and the assigned moderator (discussion_board_moderators). The operation provides the foundation for subsequent moderation actions including content review, warning issuance, content hiding or removal, user suspension, and report resolution. All data returned respects soft delete patterns, excluding reports with deleted_at timestamps unless explicitly requested by administrators for audit purposes.\n\nPerformance requirements mandate that the moderation queue loads within 2 seconds even with thousands of pending reports. Efficient database indexing on status, severity, assigned moderator, and creation timestamp columns supports rapid filtering and sorting. The operation uses pagination to limit result set sizes, preventing performance degradation as the report volume grows. Real-time updates are not required for this operation; moderators can refresh the queue manually to see newly submitted reports.\n\nThe operation supports the platform's commitment to transparent, fair, and timely content moderation. By providing powerful filtering and sorting tools, the system enables moderators to work through the queue efficiently, address critical violations immediately, and maintain consistent response times. The comprehensive report information displayed supports informed moderation decisions while the audit trail (created through subsequent moderation action operations) ensures accountability for all moderation activities.","parameters":[],"requestBody":{"description":"Search criteria, filters, pagination parameters, and sorting options for moderation queue reports","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated list of content reports with filtering applied, sorted by priority score or selected sorting option","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRoles":["moderator","administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Reports must be created before they can be retrieved and filtered in the moderation queue"}]},{"specification":"This operation retrieves a filtered, paginated list of content reports from the moderation queue. Moderators and administrators use this operation to access reported content that requires review. The operation supports advanced filtering by report status (pending, under_review, resolved, dismissed), violation category (personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, other), severity level (critical, high, medium, low), assigned moderator, date range, and number of reports on the same content. Results are sorted by priority score (calculated based on severity, multiple reports, and time in queue) by default, with alternative sorting options including submission time, severity level, and report count. Pagination is provided with configurable page sizes. This operation enables efficient moderation queue management and content review workflows. The operation is associated with the discussion_board_reports table in the Prisma schema and integrates with content visibility, moderator assignment, and report resolution workflows.","path":"/discussionBoard/reports","method":"patch","summary":"Search and retrieve filtered moderation queue reports with pagination and priority sorting","description":"This operation provides moderators and administrators with comprehensive access to the content moderation queue, enabling efficient review and management of reported content. The moderation queue is the central workflow hub for maintaining community standards and enforcing guidelines for civil discourse on economic and political topics.\n\nThe operation supports sophisticated filtering capabilities essential for effective moderation queue management. Moderators can filter reports by current status (pending for unassigned reports, under_review for reports actively being investigated, resolved for completed reviews, or dismissed for reports determined to be without merit). Violation category filtering allows moderators to focus on specific types of guideline violations such as personal attacks, hate speech, misinformation, spam, offensive language, off-topic content, threats, doxxing, or trolling. Severity level filtering (critical, high, medium, low) enables prioritization of the most serious violations requiring immediate attention. Additional filters include assigned moderator (to view reports assigned to specific team members or unassigned reports), date range for investigating reports from specific time periods, and report count (number of times the same content has been reported by different users, indicating community consensus on violations).\n\nThe default sorting algorithm prioritizes reports using a composite score that considers severity level (critical violations appear first), multiple reports on the same content (community agreement elevates priority), and time in queue (older unresolved reports gradually increase in priority to ensure timely review). Alternative sorting options allow moderators to view the queue chronologically (oldest unresolved first, newest first), by severity only, or by report count. This flexible sorting ensures moderators can work through the queue efficiently while ensuring critical violations receive immediate attention.\n\nPagination controls enable moderators to navigate large moderation queues effectively. The operation returns comprehensive report information for each queue item including report ID, submission timestamp, content preview (first 100 characters of reported content), violation category and severity, number of reports on this content, current status, assigned moderator (if any), and time in queue. This information enables moderators to quickly assess reports and prioritize their review workflow.\n\nSecurity and permission enforcement are critical for this operation. Only users with moderator or administrator roles can access the moderation queue. Regular members cannot view reports or access moderation interfaces. When a moderator accesses the queue, they see all pending and under-review reports across the platform. Administrators have unrestricted access to the complete queue including resolved and dismissed reports for audit and oversight purposes. The operation respects role-based access control defined in the User Roles and Authentication requirements.\n\nThe operation integrates with multiple moderation workflow components. Report data references the discussion_board_reports table which contains foreign keys to reported content (discussion_board_topics or discussion_board_replies), the reporting user (discussion_board_members), and the assigned moderator (discussion_board_moderators). The operation provides the foundation for subsequent moderation actions including content review, warning issuance, content hiding or removal, user suspension, and report resolution. All data returned respects soft delete patterns, excluding reports with deleted_at timestamps unless explicitly requested by administrators for audit purposes.\n\nPerformance requirements mandate that the moderation queue loads within 2 seconds even with thousands of pending reports. Efficient database indexing on status, severity, assigned moderator, and creation timestamp columns supports rapid filtering and sorting. The operation uses pagination to limit result set sizes, preventing performance degradation as the report volume grows. Real-time updates are not required for this operation; moderators can refresh the queue manually to see newly submitted reports.\n\nThe operation supports the platform's commitment to transparent, fair, and timely content moderation. By providing powerful filtering and sorting tools, the system enables moderators to work through the queue efficiently, address critical violations immediately, and maintain consistent response times. The comprehensive report information displayed supports informed moderation decisions while the audit trail (created through subsequent moderation action operations) ensures accountability for all moderation activities.","parameters":[],"requestBody":{"description":"Search criteria, filters, pagination parameters, and sorting options for moderation queue reports","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated list of content reports with filtering applied, sorted by priority score or selected sorting option","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRole":"moderator","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Reports must be created before they can be retrieved and filtered in the moderation queue"}]},{"specification":"This operation retrieves comprehensive details of a specific content report submitted by members flagging topics or replies that violate community guidelines. It operates on the discussion_board_reports table from the Prisma schema and provides complete report information including violation details, current status, moderator assignment, and resolution information. This endpoint is essential for moderators to review individual reports in the moderation queue workflow, examining the reported content context, violation categories, and any resolution actions taken.","path":"/discussionBoard/moderator/reports/{reportId}","method":"get","summary":"Retrieve detailed information about a specific content report","description":"Retrieve comprehensive information about a specific content report in the moderation system. This operation provides complete details of content reports submitted by members to flag topics or replies that violate community guidelines on the economic and political discussion board.\n\nThis endpoint is critical for the moderation workflow, allowing moderators to examine individual reports in detail before making moderation decisions. The returned data includes all information necessary to evaluate the violation, understand the context, and take appropriate action.\n\nThe operation retrieves data from the discussion_board_reports table as defined in the Prisma schema, incorporating all report fields including reporter information, reported content references, violation categorization, severity level, current status, assigned moderator, and resolution details. The response includes relationships to the reporter member, reported topic or reply, and assigned moderator for comprehensive context.\n\nSecurity considerations include role-based access control ensuring only moderators and administrators can view report details. The endpoint validates that the requesting user has appropriate permissions before returning sensitive moderation information. Reports contain information about community members and potentially offensive content, requiring careful access control.\n\nThis operation integrates with the moderation queue workflow where moderators review pending reports, assign themselves to reports, and ultimately resolve or dismiss reports after investigation. The detailed report information enables informed moderation decisions aligned with community guidelines and platform standards for civil economic and political discourse.\n\nExpected usage patterns include moderators viewing report details from the moderation queue and examining violation context before taking moderation actions such as hiding content, issuing warnings, or dismissing reports. The endpoint supports the comprehensive moderation system defined in the requirements, enabling transparent, accountable content governance.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete content report details including violation information, status, and resolution data","typeName":"IDiscussionBoardReport"},"authorizationRole":"moderator","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Content report must be created before it can be retrieved for moderation review"}]},{"specification":"This operation retrieves comprehensive details of a specific content report submitted by members flagging topics or replies that violate community guidelines. It operates on the discussion_board_reports table from the Prisma schema and provides complete report information including violation details, current status, moderator assignment, and resolution information. This endpoint is essential for administrators to review individual reports in the moderation queue workflow, examine reports for quality assurance, and support the appeals process where detailed report information aids decision review.","path":"/discussionBoard/administrator/reports/{reportId}","method":"get","summary":"Retrieve detailed information about a specific content report","description":"Retrieve comprehensive information about a specific content report in the moderation system. This operation provides complete details of content reports submitted by members to flag topics or replies that violate community guidelines on the economic and political discussion board.\n\nThis endpoint is critical for the moderation workflow, allowing administrators to examine individual reports in detail for quality assurance oversight, appeals processing, and comprehensive moderation review. The returned data includes all information necessary to evaluate the violation, understand the context, and review moderation decisions.\n\nThe operation retrieves data from the discussion_board_reports table as defined in the Prisma schema, incorporating all report fields including reporter information, reported content references, violation categorization, severity level, current status, assigned moderator, and resolution details. The response includes relationships to the reporter member, reported topic or reply, and assigned moderator for comprehensive context.\n\nSecurity considerations include role-based access control ensuring only administrators can access this administrative endpoint. The endpoint validates that the requesting user has administrator privileges before returning sensitive moderation information. Reports contain information about community members and potentially offensive content, requiring strict access control limited to administrative staff.\n\nThis operation integrates with the moderation oversight workflow where administrators review moderator decisions, handle appeals, and ensure consistent application of community guidelines. Administrators use this endpoint to examine report details when users appeal moderation decisions, to audit moderator performance, and to investigate complex or borderline violation cases.\n\nExpected usage patterns include administrators reviewing reports during appeal processes, conducting quality assurance on moderation decisions, investigating patterns of reports against specific users or content types, and supporting the transparent, accountable moderation system defined in platform requirements for maintaining civil discourse on economic and political topics.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete content report details including violation information, status, and resolution data","typeName":"IDiscussionBoardReport"},"authorizationRole":"administrator","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Content report must be created before it can be retrieved for administrative review"}]},{"specification":"This operation creates a new content report submitted by authenticated members to flag discussion topics or replies that violate community guidelines. It operates on the discussion_board_reports table from the Prisma schema and initiates the moderation workflow. Members provide the violation category, optional explanation, and reference to the reported content. The system validates the report, prevents duplicate submissions, and adds the report to the moderation queue for moderator review. This is the primary mechanism for community-driven content policing on the economic and political discussion board.","path":"/discussionBoard/member/reports","method":"post","summary":"Submit a new content report for moderation review","description":"Create a new content report flagging discussion topics or replies that violate community guidelines. This operation enables authenticated members to report inappropriate content, triggering the moderation workflow for platform content governance.\n\nThis endpoint is fundamental to the community-driven moderation system, allowing members to identify violations such as personal attacks, hate speech, misinformation, spam, offensive language, off-topic content, threats, doxxing, trolling, and other guideline violations. By reporting content, members actively participate in maintaining civil discourse standards on economic and political topics.\n\nThe operation creates a new record in the discussion_board_reports table with all necessary information for moderator review including the reporting member, reported content (either topic or reply), violation category, severity level, and optional explanatory context. The system automatically sets the report status to 'pending' and calculates severity level based on the violation category to prioritize the moderation queue appropriately.\n\nSecurity and validation considerations include verifying the reporting user is an authenticated member with sufficient reputation (minimum 25 reputation points required per business rules), ensuring the reported content exists and is accessible, preventing duplicate reports where the same user reports the same content multiple times within 24 hours, and enforcing rate limits of maximum 10 reports per hour and 50 reports per day per user to prevent report abuse.\n\nThe system validates that either reported_topic_id or reported_reply_id is provided (but not both), as reports target specific content items. The violation category must be one of the predefined categories: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, or other. When 'other' is selected, the reporter_explanation field becomes required with minimum 20 characters.\n\nUpon successful report creation, the content is added to the moderation queue where moderators can review, assign themselves, and take appropriate action. Reports with critical severity (hate_speech, threats, doxxing) may trigger automatic content hiding pending moderator review to protect the community from severe violations.\n\nThis operation integrates closely with the moderation system defined in the requirements, supporting the graduated enforcement approach and transparent moderation processes. Notifications are sent to moderators when new reports are submitted, particularly for high-severity violations requiring immediate attention.\n\nThe endpoint supports the platform's commitment to community-driven quality control while providing professional moderation infrastructure to address violations consistently and fairly. Member participation in reporting helps moderators identify violations efficiently and demonstrates community investment in maintaining discourse standards.","parameters":[],"requestBody":{"description":"Content report submission information including violation category, reported content reference, and optional explanation","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"Created content report with unique identifier and initial pending status","typeName":"IDiscussionBoardReport"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be reported for guideline violations. The reported_topic_id references a topic that needs to be created first."},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Discussion reply must exist before it can be reported for guideline violations. The reported_reply_id references a reply that needs to be created first."}]},{"specification":"This operation allows moderators and administrators to update an existing content report's status, assignment, and resolution details. It operates on the discussion_board_reports table from the Prisma schema. The operation is used when moderators review reported content, assign reports to themselves, add resolution notes, change report status from pending to under_review or resolved, and document the moderation decision. This supports the moderation queue workflow where reports progress through states as they are processed.","path":"/discussionBoard/moderator/reports/{reportId}","method":"put","summary":"Update an existing content report with review status, assignment, or resolution details","description":"Update an existing content report's details including status, moderator assignment, resolution notes, and dismissal reasons. This operation is used throughout the moderation workflow when moderators claim reports by assigning themselves, progress reports from pending to under_review status, resolve reports by adding resolution notes and marking them resolved, or dismiss false reports with explanatory dismissal reasons.\n\nThis operation directly modifies the discussion_board_reports table in the Prisma schema. The report being updated is identified by the reportId path parameter which corresponds to the discussion_board_reports.id field. Moderators can update the assigned_moderator_id to claim reports, change the status field through the workflow states (pending, under_review, resolved, dismissed), add resolution_notes explaining their decision, and provide dismissal_reason if the report is determined to be invalid.\n\nSecurity considerations require that only users with moderator or administrator roles can update reports. The system validates that the report exists before allowing updates, prevents status transitions that violate workflow logic (e.g., cannot go from resolved back to pending), and ensures resolution_notes or dismissal_reason are provided when required by the new status. All updates are logged in the moderation audit trail per the requirements.\n\nThis operation is typically used after moderators access the moderation queue (via PATCH /moderationActions) to retrieve pending reports, then update individual reports as they review content. Related operations include GET /reports/{reportId} to view full report details, and the moderation action creation flow that references the updated report.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated report information including status, assignment, and resolution details","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"Updated report record with current status and moderation details","typeName":"IDiscussionBoardReport"},"name":"update","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Content report must be created before it can be updated by moderators. The reportId path parameter references a report that needs to exist in the system."}]},{"specification":"This operation allows moderators and administrators to update an existing content report's status, assignment, and resolution details. It operates on the discussion_board_reports table from the Prisma schema. The operation is used when moderators review reported content, assign reports to themselves, add resolution notes, change report status from pending to under_review or resolved, and document the moderation decision. This supports the moderation queue workflow where reports progress through states as they are processed.","path":"/discussionBoard/administrator/reports/{reportId}","method":"put","summary":"Update an existing content report with review status, assignment, or resolution details","description":"Update an existing content report's details including status, moderator assignment, resolution notes, and dismissal reasons. This operation is used throughout the moderation workflow when moderators claim reports by assigning themselves, progress reports from pending to under_review status, resolve reports by adding resolution notes and marking them resolved, or dismiss false reports with explanatory dismissal reasons.\n\nThis operation directly modifies the discussion_board_reports table in the Prisma schema. The report being updated is identified by the reportId path parameter which corresponds to the discussion_board_reports.id field. Moderators can update the assigned_moderator_id to claim reports, change the status field through the workflow states (pending, under_review, resolved, dismissed), add resolution_notes explaining their decision, and provide dismissal_reason if the report is determined to be invalid.\n\nSecurity considerations require that only users with moderator or administrator roles can update reports. The system validates that the report exists before allowing updates, prevents status transitions that violate workflow logic (e.g., cannot go from resolved back to pending), and ensures resolution_notes or dismissal_reason are provided when required by the new status. All updates are logged in the moderation audit trail per the requirements.\n\nThis operation is typically used after moderators access the moderation queue (via PATCH /moderationActions) to retrieve pending reports, then update individual reports as they review content. Related operations include GET /reports/{reportId} to view full report details, and the moderation action creation flow that references the updated report.","parameters":[{"name":"reportId","description":"Unique identifier of the content report to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated report information including status, assignment, and resolution details","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"Updated report record with current status and moderation details","typeName":"IDiscussionBoardReport"},"name":"update","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the moderation queue displaying reports and moderation actions for moderator review. It operates on the discussion_board_reports and discussion_board_moderation_actions tables from the Prisma schema. The operation supports complex querying with filtering by status, severity, violation category, date ranges, and assigned moderator. It includes pagination for handling large volumes of reports and sorting options to prioritize critical violations. This is the primary interface for moderators to access pending reports requiring review.","path":"/discussionBoard/moderator/moderationActions","method":"patch","summary":"Retrieve filtered and paginated moderation queue for moderator review","description":"Retrieve a filtered and paginated list of content reports and moderation actions from the moderation queue. This operation provides moderators and administrators with comprehensive access to reports requiring review, including advanced filtering by status (pending, under_review, resolved, dismissed), severity level (critical, high, medium, low), violation category, assigned moderator, and date ranges. The operation supports complex search criteria to help moderators efficiently find and prioritize reports.\n\nThis operation queries the discussion_board_reports table from the Prisma schema, joining with related tables to provide complete context including reported content previews, reporter information, and existing moderation actions. The moderation queue displays reports with fields such as violation_category, severity_level, status, reporter_explanation, assigned_moderator_id, and resolution details. The system prioritizes critical severity violations (hate speech, threats, doxxing) at the top of the queue, followed by high severity violations, then reports with multiple flags from different users.\n\nSecurity considerations ensure only authenticated moderators and administrators can access the moderation queue. Moderators see all unassigned reports plus reports assigned to them, while administrators see all reports across all moderators. The operation implements the moderation workflow requirements where reports progress from pending to under_review when assigned, then to resolved or dismissed based on moderator decisions.\n\nThis operation integrates closely with PUT /reports/{reportId} which moderators use to update individual reports after reviewing them in this queue. The pagination and filtering capabilities ensure moderators can efficiently process high volumes of reports while prioritizing urgent violations. Response includes report metadata, content snapshots, reporter context, and suggested actions based on violation patterns.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for moderation queue retrieval","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions and reports matching the search criteria","typeName":"IPageIDiscussionBoardModerationAction"},"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the moderation queue displaying reports and moderation actions for moderator review. It operates on the discussion_board_reports and discussion_board_moderation_actions tables from the Prisma schema. The operation supports complex querying with filtering by status, severity, violation category, date ranges, and assigned moderator. It includes pagination for handling large volumes of reports and sorting options to prioritize critical violations. This is the primary interface for moderators to access pending reports requiring review.","path":"/discussionBoard/administrator/moderationActions","method":"patch","summary":"Retrieve filtered and paginated moderation queue for moderator review","description":"Retrieve a filtered and paginated list of content reports and moderation actions from the moderation queue. This operation provides moderators and administrators with comprehensive access to reports requiring review, including advanced filtering by status (pending, under_review, resolved, dismissed), severity level (critical, high, medium, low), violation category, assigned moderator, and date ranges. The operation supports complex search criteria to help moderators efficiently find and prioritize reports.\n\nThis operation queries the discussion_board_reports table from the Prisma schema, joining with related tables to provide complete context including reported content previews, reporter information, and existing moderation actions. The moderation queue displays reports with fields such as violation_category, severity_level, status, reporter_explanation, assigned_moderator_id, and resolution details. The system prioritizes critical severity violations (hate speech, threats, doxxing) at the top of the queue, followed by high severity violations, then reports with multiple flags from different users.\n\nSecurity considerations ensure only authenticated moderators and administrators can access the moderation queue. Moderators see all unassigned reports plus reports assigned to them, while administrators see all reports across all moderators. The operation implements the moderation workflow requirements where reports progress from pending to under_review when assigned, then to resolved or dismissed based on moderator decisions.\n\nThis operation integrates closely with PUT /reports/{reportId} which moderators use to update individual reports after reviewing them in this queue. The pagination and filtering capabilities ensure moderators can efficiently process high volumes of reports while prioritizing urgent violations. Response includes report metadata, content snapshots, reporter context, and suggested actions based on violation patterns.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for moderation queue retrieval","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions and reports matching the search criteria","typeName":"IPageIDiscussionBoardModerationAction"},"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific moderation action by its unique identifier. It operates on the discussion_board_moderation_actions table from the Prisma schema and provides comprehensive visibility into moderation decisions, enforcement actions, and their outcomes. This operation is essential for transparency, accountability, and the appeals process, allowing users to understand why specific moderation actions were taken against their content or account. Moderators and administrators use this to review past decisions, ensure consistency in enforcement, and investigate appeals. The operation returns complete details about the action including the moderator/administrator who performed it, the targeted user and content, the violation category, the rationale, timestamps, and whether the action was subsequently reversed on appeal.","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"get","summary":"Retrieve detailed information about a specific moderation action by ID","description":"Retrieve comprehensive details about a specific moderation action identified by its unique moderationActionId parameter. This operation provides complete visibility into moderation decisions made by moderators and administrators across the discussion board platform.\n\nThe operation returns detailed information from the discussion_board_moderation_actions table including the moderator or administrator who performed the action, the member who was targeted, the type of action taken (hide_content, delete_content, issue_warning, suspend_user, ban_user, restore_content, or dismiss_report), the reason and justification provided, the violation category, and timestamps tracking when the action occurred and whether it was subsequently reversed.\n\nThis operation is critical for moderation transparency and accountability. Users who receive moderation actions can view the details to understand what guideline was violated and why the action was taken. Moderators use this to review their own past decisions and ensure consistency in enforcement. Administrators access this information when reviewing appeals or investigating moderation patterns.\n\nThe response includes related entities such as the related report that triggered the action (if applicable), the specific content (topic or reply) that was moderated with preserved content snapshots, and information about any subsequent reversal if the action was overturned on appeal or administrative review.\n\nSecurity considerations include role-based access control where regular members can only view moderation actions that directly affect them or their content, moderators can view all moderation actions they performed or that occurred in their queue, and administrators have unrestricted access to all moderation action records for oversight and audit purposes.\n\nThis operation integrates with the appeals system where users reviewing moderation actions can initiate appeals if they believe the decision was unfair. It also supports the audit trail requirements by providing transparent access to the complete moderation action record including preserved content snapshots that cannot be altered after the fact.","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation action record with all details about the action, involved parties, and related content","typeName":"IDiscussionBoardModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/moderationActions","method":"post"},"description":"Moderation action must exist before it can be retrieved by ID"}]},{"specification":"This operation retrieves detailed information about a specific moderation action by its unique identifier. It operates on the discussion_board_moderation_actions table from the Prisma schema and provides comprehensive visibility into moderation decisions, enforcement actions, and their outcomes. This operation is essential for transparency, accountability, and the appeals process, allowing users to understand why specific moderation actions were taken against their content or account. Moderators and administrators use this to review past decisions, ensure consistency in enforcement, and investigate appeals. The operation returns complete details about the action including the moderator/administrator who performed it, the targeted user and content, the violation category, the rationale, timestamps, and whether the action was subsequently reversed on appeal.","path":"/discussionBoard/administrator/moderationActions/{moderationActionId}","method":"get","summary":"Retrieve detailed information about a specific moderation action by ID","description":"Retrieve comprehensive details about a specific moderation action identified by its unique moderationActionId parameter. This operation provides complete visibility into moderation decisions made by moderators and administrators across the discussion board platform.\n\nThe operation returns detailed information from the discussion_board_moderation_actions table including the moderator or administrator who performed the action, the member who was targeted, the type of action taken (hide_content, delete_content, issue_warning, suspend_user, ban_user, restore_content, or dismiss_report), the reason and justification provided, the violation category, and timestamps tracking when the action occurred and whether it was subsequently reversed.\n\nThis operation is critical for moderation transparency and accountability. Users who receive moderation actions can view the details to understand what guideline was violated and why the action was taken. Moderators use this to review their own past decisions and ensure consistency in enforcement. Administrators access this information when reviewing appeals or investigating moderation patterns.\n\nThe response includes related entities such as the related report that triggered the action (if applicable), the specific content (topic or reply) that was moderated with preserved content snapshots, and information about any subsequent reversal if the action was overturned on appeal or administrative review.\n\nSecurity considerations include role-based access control where regular members can only view moderation actions that directly affect them or their content, moderators can view all moderation actions they performed or that occurred in their queue, and administrators have unrestricted access to all moderation action records for oversight and audit purposes.\n\nThis operation integrates with the appeals system where users reviewing moderation actions can initiate appeals if they believe the decision was unfair. It also supports the audit trail requirements by providing transparent access to the complete moderation action record including preserved content snapshots that cannot be altered after the fact.","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation action record with all details about the action, involved parties, and related content","typeName":"IDiscussionBoardModerationAction"},"authorizationType":null,"authorizationRole":"administrator","name":"at","prerequisites":[]},{"specification":"This operation creates a new moderation action record when a moderator or administrator takes enforcement action against content or a user. It operates on the discussion_board_moderation_actions table from the Prisma schema and records the complete details of moderation decisions for accountability, transparency, and audit purposes. Moderation actions include hiding content, deleting content, issuing warnings, suspending users, banning users, restoring previously moderated content, and dismissing reports. This operation is invoked as part of the moderation workflow after a moderator reviews reported content in the moderation queue or when an administrator takes direct enforcement action. The operation captures who performed the action, what action was taken, why it was taken, which user and content were affected, and preserves a snapshot of the content state at the time of action. All moderation actions must include detailed reasoning (minimum 20 characters) to ensure accountability and support potential appeals. This operation integrates with the warnings, suspensions, and bans systems by creating the foundational moderation action record that those escalations reference.","path":"/discussionBoard/moderator/moderationActions","method":"post","summary":"Create a new moderation action record documenting moderator or administrator enforcement","description":"Create a comprehensive moderation action record when a moderator or administrator takes enforcement action against content or a user account on the discussion board platform. This operation records the complete details of moderation decisions including content removal, user warnings, suspensions, bans, content restoration, and report dismissals.\n\nThe operation operates on the discussion_board_moderation_actions table from the Prisma schema and is invoked as part of the moderation workflow. When a moderator reviews reported content in the moderation queue and determines that action is necessary, or when an administrator takes direct enforcement action, this operation creates the permanent audit record of that decision.\n\nRequired information includes the action_type (hide_content, delete_content, issue_warning, suspend_user, ban_user, restore_content, or dismiss_report), the target_member_id identifying the user affected by the action, and a detailed reason explaining the decision (minimum 20 characters for accountability). The operation also captures which moderator or administrator performed the action, the violation category if applicable, the related report that triggered the review (if action resulted from a report), and the specific content (topic or reply) that was moderated.\n\nCritically, the operation preserves a content_snapshot field that captures the exact state of the content at the time of moderation action. This immutable snapshot ensures that even if the user subsequently edits or deletes the content, the moderation decision can be reviewed and appealed based on what the content actually said at the time of the violation. This supports the appeals process and ensures moderation accountability.\n\nThe operation integrates with related moderation systems by creating the foundational moderation_action record that warnings, suspensions, and bans reference through their moderation_action_id foreign keys. This establishes the complete chain of evidence from initial report through moderation decision to enforcement action and potential appeal.\n\nSecurity considerations include strict role-based access control where only users with moderator or administrator roles can create moderation actions. The operation validates that the acting user has permission to moderate content and that the target user and content exist before creating the record. All moderation actions are immediately logged to the moderation audit trail for oversight.\n\nThe response returns the complete moderation action record with all fields populated, timestamps recorded, and relationships established. This allows the calling code to immediately create related records (warnings, suspensions) or trigger notifications to the affected user explaining what action was taken and why.\n\nValidation rules enforced include verifying the action_type is one of the allowed values, ensuring the reason meets minimum length requirements, confirming at least one of moderator_id or administrator_id is provided (identifying who performed the action), validating that content references exist if content-specific action is taken, and preserving accurate content snapshots for topics or replies being moderated.","parameters":[],"requestBody":{"description":"Moderation action creation data including action type, target user and content, violation details, and moderator reasoning","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"Newly created moderation action record with all details, timestamps, and generated identifiers","typeName":"IDiscussionBoardModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must be created before it can be subject to moderation action"},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"Discussion reply must be posted before it can be subject to moderation action"},{"endpoint":{"path":"/discussionBoard/member/reports","method":"post"},"description":"Content report must be submitted to trigger moderation review and action"}]},{"specification":"This operation creates a new moderation action record when a moderator or administrator takes enforcement action against content or a user. It operates on the discussion_board_moderation_actions table from the Prisma schema and records the complete details of moderation decisions for accountability, transparency, and audit purposes. Moderation actions include hiding content, deleting content, issuing warnings, suspending users, banning users, restoring previously moderated content, and dismissing reports. This operation is invoked as part of the moderation workflow after a moderator reviews reported content in the moderation queue or when an administrator takes direct enforcement action. The operation captures who performed the action, what action was taken, why it was taken, which user and content were affected, and preserves a snapshot of the content state at the time of action. All moderation actions must include detailed reasoning (minimum 20 characters) to ensure accountability and support potential appeals. This operation integrates with the warnings, suspensions, and bans systems by creating the foundational moderation action record that those escalations reference.","path":"/discussionBoard/administrator/moderationActions","method":"post","summary":"Create a new moderation action record documenting moderator or administrator enforcement","description":"Create a comprehensive moderation action record when a moderator or administrator takes enforcement action against content or a user account on the discussion board platform. This operation records the complete details of moderation decisions including content removal, user warnings, suspensions, bans, content restoration, and report dismissals.\n\nThe operation operates on the discussion_board_moderation_actions table from the Prisma schema and is invoked as part of the moderation workflow. When a moderator reviews reported content in the moderation queue and determines that action is necessary, or when an administrator takes direct enforcement action, this operation creates the permanent audit record of that decision.\n\nRequired information includes the action_type (hide_content, delete_content, issue_warning, suspend_user, ban_user, restore_content, or dismiss_report), the target_member_id identifying the user affected by the action, and a detailed reason explaining the decision (minimum 20 characters for accountability). The operation also captures which moderator or administrator performed the action, the violation category if applicable, the related report that triggered the review (if action resulted from a report), and the specific content (topic or reply) that was moderated.\n\nCritically, the operation preserves a content_snapshot field that captures the exact state of the content at the time of moderation action. This immutable snapshot ensures that even if the user subsequently edits or deletes the content, the moderation decision can be reviewed and appealed based on what the content actually said at the time of the violation. This supports the appeals process and ensures moderation accountability.\n\nThe operation integrates with related moderation systems by creating the foundational moderation_action record that warnings, suspensions, and bans reference through their moderation_action_id foreign keys. This establishes the complete chain of evidence from initial report through moderation decision to enforcement action and potential appeal.\n\nSecurity considerations include strict role-based access control where only users with moderator or administrator roles can create moderation actions. The operation validates that the acting user has permission to moderate content and that the target user and content exist before creating the record. All moderation actions are immediately logged to the moderation audit trail for oversight.\n\nThe response returns the complete moderation action record with all fields populated, timestamps recorded, and relationships established. This allows the calling code to immediately create related records (warnings, suspensions) or trigger notifications to the affected user explaining what action was taken and why.\n\nValidation rules enforced include verifying the action_type is one of the allowed values, ensuring the reason meets minimum length requirements, confirming at least one of moderator_id or administrator_id is provided (identifying who performed the action), validating that content references exist if content-specific action is taken, and preserving accurate content snapshots for topics or replies being moderated.","parameters":[],"requestBody":{"description":"Moderation action creation data including action type, target user and content, violation details, and moderator reasoning","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"Newly created moderation action record with all details, timestamps, and generated identifiers","typeName":"IDiscussionBoardModerationAction"},"authorizationType":null,"authorizationRole":"administrator","name":"create","prerequisites":[{"endpoint":{"path":"/auth/administrator/password/reset/request","method":"post"},"description":"Administrator account must exist before they can create moderation actions. The password reset request validates administrator email existence in the system."}]},{"specification":"This operation retrieves a filtered and paginated list of warnings issued to members for guideline violations. It operates on the discussion_board_warnings table from the Prisma schema. The operation supports comprehensive search and filtering capabilities to help administrators and moderators review warning history, track violation patterns, and monitor member behavior. This is essential for moderation oversight, identifying repeat offenders, and ensuring consistent enforcement of community guidelines across the economic and political discussion board platform.","path":"/discussionBoard/administrator/warnings","method":"patch","summary":"Search and retrieve a filtered, paginated list of member warnings","description":"Retrieve a filtered and paginated list of warnings issued to members for violations of community guidelines on the economic and political discussion board. This operation provides advanced search capabilities for finding warnings based on multiple criteria including warning level (first_warning, second_warning, final_warning), violation category, member identity, date ranges, and active status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Results can be sorted by issue date, expiration date, warning level, or violation severity to help moderators and administrators identify patterns in community guideline violations and track escalation of member behavior issues.\n\nSecurity considerations include restricting this endpoint to administrator and moderator roles only, as warning data contains sensitive moderation information. The response includes detailed warning information with references to the warned member, the content that triggered the warning, and moderator notes explaining the decision. This transparency supports fair moderation practices and enables effective appeals processing.\n\nThis operation integrates with the discussion_board_warnings table as defined in the Prisma schema, incorporating all warning fields including warning level, violation category, moderator notes, expiration dates, and active status. The response includes comprehensive warning details optimized for moderation review, tracking member violation history, and identifying users who may require escalated moderation actions.\n\nRelated operations include GET /warnings/{warningId} for retrieving individual warning details, and moderation action endpoints that may result in warning creation. This search operation is typically used by moderators to review warning history before taking additional moderation actions, and by administrators to monitor overall moderation quality and consistency.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for warning filtering including warning level, violation category, member ID, date ranges, active status, and sorting options","typeName":"IDiscussionBoardWarning.IRequest"},"responseBody":{"description":"Paginated list of warning records matching search criteria with detailed information including member identity, warning level, violation details, moderator notes, and expiration status","typeName":"IPageIDiscussionBoardWarning"},"authorizationType":null,"authorizationRole":"administrator","name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of warnings issued to members for guideline violations. It operates on the discussion_board_warnings table from the Prisma schema. The operation supports comprehensive search and filtering capabilities to help administrators and moderators review warning history, track violation patterns, and monitor member behavior. This is essential for moderation oversight, identifying repeat offenders, and ensuring consistent enforcement of community guidelines across the economic and political discussion board platform.","path":"/discussionBoard/moderator/warnings","method":"patch","summary":"Search and retrieve a filtered, paginated list of member warnings","description":"Retrieve a filtered and paginated list of warnings issued to members for violations of community guidelines on the economic and political discussion board. This operation provides advanced search capabilities for finding warnings based on multiple criteria including warning level (first_warning, second_warning, final_warning), violation category, member identity, date ranges, and active status.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Results can be sorted by issue date, expiration date, warning level, or violation severity to help moderators and administrators identify patterns in community guideline violations and track escalation of member behavior issues.\n\nSecurity considerations include restricting this endpoint to administrator and moderator roles only, as warning data contains sensitive moderation information. The response includes detailed warning information with references to the warned member, the content that triggered the warning, and moderator notes explaining the decision. This transparency supports fair moderation practices and enables effective appeals processing.\n\nThis operation integrates with the discussion_board_warnings table as defined in the Prisma schema, incorporating all warning fields including warning level, violation category, moderator notes, expiration dates, and active status. The response includes comprehensive warning details optimized for moderation review, tracking member violation history, and identifying users who may require escalated moderation actions.\n\nRelated operations include GET /warnings/{warningId} for retrieving individual warning details, and moderation action endpoints that may result in warning creation. This search operation is typically used by moderators to review warning history before taking additional moderation actions, and by administrators to monitor overall moderation quality and consistency.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for warning filtering including warning level, violation category, member ID, date ranges, active status, and sorting options","typeName":"IDiscussionBoardWarning.IRequest"},"responseBody":{"description":"Paginated list of warning records matching search criteria with detailed information including member identity, warning level, violation details, moderator notes, and expiration status","typeName":"IPageIDiscussionBoardWarning"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific warning issued to a member for guideline violations. It operates on the discussion_board_warnings table from the Prisma schema, accessing a single warning record by its unique identifier. The operation provides complete warning details including warning level, violation category, content references, moderator notes, expiration information, and appeal status. This is essential for moderation review, appeals processing, and transparency in enforcement actions.","path":"/discussionBoard/administrator/warnings/{warningId}","method":"get","summary":"Retrieve detailed information about a specific member warning","description":"Retrieve comprehensive details about a specific warning issued to a member for violating community guidelines on the economic and political discussion board platform. This operation accesses the discussion_board_warnings table to return complete information about a single warning record identified by its unique warning ID.\n\nThe response includes all warning details necessary for moderation review and appeals processing: the warning level (first_warning, second_warning, or final_warning) indicating escalation stage, the specific violation category that triggered the warning, complete moderator notes explaining the decision rationale, expiration date if applicable, and current active status. The warning record also references the member who received the warning, the specific content (topic or reply) that violated guidelines, and the moderation action that issued the warning.\n\nSecurity considerations restrict this endpoint to administrator and moderator roles, as warning details contain sensitive moderation information and member conduct history. The operation supports the appeals process by providing users and reviewing administrators with complete context about contested warnings. It also enables moderators to reference prior warnings when making escalation decisions for repeat violations.\n\nThis operation integrates with the discussion_board_warnings table as defined in the Prisma schema, incorporating relationships to discussion_board_members (warned user), discussion_board_moderation_actions (issuing action), discussion_board_topics and discussion_board_replies (violating content), and discussion_board_appeals (if warning was appealed). The comprehensive warning details support transparent moderation practices and fair enforcement of the three-tier warning escalation system defined in platform policies.\n\nRelated operations include PATCH /warnings for searching warning history, moderation action endpoints that create warnings, and appeal endpoints where users can contest warnings. This operation is frequently used before issuing additional warnings to the same member to determine appropriate escalation level, and during appeals review to provide complete context for administrative decisions.","parameters":[{"name":"warningId","description":"Unique identifier of the target warning record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed warning information including warning level, violation category, member identity, content references, moderator notes, expiration date, active status, and related appeals","typeName":"IDiscussionBoardWarning"},"authorizationType":null,"authorizationRole":"administrator","name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/moderationActions","method":"post"},"description":"Moderation action must be created first as it generates the warning record. The warning is created as part of the moderation workflow when a moderator takes enforcement action against a member for guideline violations."}]},{"specification":"This operation retrieves detailed information about a specific warning issued to a member for guideline violations. It operates on the discussion_board_warnings table from the Prisma schema, accessing a single warning record by its unique identifier. The operation provides complete warning details including warning level, violation category, content references, moderator notes, expiration information, and appeal status. This is essential for moderation review, appeals processing, and transparency in enforcement actions.","path":"/discussionBoard/moderator/warnings/{warningId}","method":"get","summary":"Retrieve detailed information about a specific member warning","description":"Retrieve comprehensive details about a specific warning issued to a member for violating community guidelines on the economic and political discussion board platform. This operation accesses the discussion_board_warnings table to return complete information about a single warning record identified by its unique warning ID.\n\nThe response includes all warning details necessary for moderation review and appeals processing: the warning level (first_warning, second_warning, or final_warning) indicating escalation stage, the specific violation category that triggered the warning, complete moderator notes explaining the decision rationale, expiration date if applicable, and current active status. The warning record also references the member who received the warning, the specific content (topic or reply) that violated guidelines, and the moderation action that issued the warning.\n\nSecurity considerations restrict this endpoint to administrator and moderator roles, as warning details contain sensitive moderation information and member conduct history. The operation supports the appeals process by providing users and reviewing administrators with complete context about contested warnings. It also enables moderators to reference prior warnings when making escalation decisions for repeat violations.\n\nThis operation integrates with the discussion_board_warnings table as defined in the Prisma schema, incorporating relationships to discussion_board_members (warned user), discussion_board_moderation_actions (issuing action), discussion_board_topics and discussion_board_replies (violating content), and discussion_board_appeals (if warning was appealed). The comprehensive warning details support transparent moderation practices and fair enforcement of the three-tier warning escalation system defined in platform policies.\n\nRelated operations include PATCH /warnings for searching warning history, moderation action endpoints that create warnings, and appeal endpoints where users can contest warnings. This operation is frequently used before issuing additional warnings to the same member to determine appropriate escalation level, and during appeals review to provide complete context for administrative decisions.","parameters":[{"name":"warningId","description":"Unique identifier of the target warning record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed warning information including warning level, violation category, member identity, content references, moderator notes, expiration date, active status, and related appeals","typeName":"IDiscussionBoardWarning"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of user suspensions from the discussion board moderation system. It operates on the discussion_board_suspensions table from the Prisma schema and supports complex queries to find suspensions based on various criteria including member ID, moderator ID, suspension status (active/expired), date ranges, duration, and early lift status. The operation is designed to support moderation oversight, suspension management workflows, and compliance reporting. Moderators and administrators use this endpoint to monitor suspension effectiveness, track member behavior patterns, and ensure consistent enforcement of community guidelines. The search supports filtering by suspension reason keywords, duration ranges, and temporal queries to identify patterns in disciplinary actions. Results include suspension details, associated member information, issuing moderator/administrator context, and current suspension status for comprehensive moderation tracking.","path":"/discussionBoard/moderator/suspensions","method":"patch","summary":"Search and retrieve a filtered, paginated list of user suspensions from the moderation system","description":"Retrieve a filtered and paginated list of user suspensions from the discussion board moderation system. This operation provides advanced search capabilities for finding suspensions based on multiple criteria including member identity, suspension status, duration, and timing characteristics.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Results can be sorted by suspension start date, end date, duration, or creation timestamp in ascending or descending order to support various moderation workflow needs.\n\nSecurity considerations include restricting access to moderators and administrators only, as suspension data contains sensitive moderation information. The operation enforces role-based permissions to ensure only authorized personnel can access suspension records and member disciplinary history.\n\nThis operation integrates with the discussion_board_suspensions table as defined in the Prisma schema, incorporating all available suspension fields including member references, moderator/administrator attribution, suspension reasons, duration calculations, active status tracking, and early lift information. The response includes suspension summary information optimized for moderation queue displays and oversight dashboards.\n\nFiltering capabilities support moderator performance analysis, member behavior tracking, suspension effectiveness evaluation, and compliance reporting. The search functionality helps administrators identify suspension patterns, monitor enforcement consistency, and ensure fair application of community guidelines across the platform.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for suspension filtering including member filters, status filters, date ranges, duration constraints, and moderator attribution","typeName":"IDiscussionBoardSuspension.IRequest"},"responseBody":{"description":"Paginated list of suspension summary information matching search criteria with member context, suspension details, and resolution status","typeName":"IPageIDiscussionBoardSuspension.ISummary"},"authorizationRoles":["moderator"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific user suspension identified by its unique suspension ID. It operates on the discussion_board_suspensions table from the Prisma schema and returns comprehensive suspension details including member information, suspension reason, duration, start and end dates, active status, early lift information, and associated moderation action context. The operation supports moderation oversight workflows where moderators and administrators need to review suspension details, verify suspension status, evaluate early lift requests, or investigate member disciplinary history. The returned data includes full suspension metadata necessary for moderation decision-making and appeals processing.","path":"/discussionBoard/moderator/suspensions/{suspensionId}","method":"get","summary":"Retrieve detailed information about a specific user suspension by ID","description":"Retrieve comprehensive details about a specific user suspension identified by its unique suspension ID from the discussion board moderation system. This operation returns complete suspension information including member context, suspension parameters, timing details, and resolution status.\n\nThe operation provides moderators and administrators with full visibility into individual suspension records necessary for oversight, appeals processing, and moderation quality assurance. The detailed suspension information includes the issuing moderator or administrator identity, suspension reason and justification, duration configuration, start and end timestamps, current active status, and early lift details if applicable.\n\nSecurity considerations restrict this operation to moderators and administrators only, as suspension details contain sensitive member disciplinary information and moderation rationale. The operation enforces role-based access control to ensure only authorized personnel can access detailed suspension records and member enforcement history.\n\nThis operation integrates with the discussion_board_suspensions table as defined in the Prisma schema, retrieving all suspension fields including member_id, moderation_action_id, moderator_id, administrator_id, suspension_reason, duration_days, start_date, end_date, is_active, lifted_early, lifted_at, lifted_reason, and timestamps. The response includes complete relational context through foreign key relationships to members, moderators, administrators, and moderation actions.\n\nThe operation supports critical moderation workflows including suspension verification before member restriction enforcement, appeals investigation requiring detailed suspension context, moderation performance reviews analyzing suspension appropriateness, and compliance reporting requiring complete suspension documentation. The detailed data enables informed decision-making for suspension modifications, early lift evaluations, and appeals adjudication.","parameters":[{"name":"suspensionId","description":"Unique identifier of the target suspension record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed suspension information including member context, suspension parameters, timing details, moderator attribution, and resolution status","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["moderator"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/suspensions","method":"post"},"description":"Suspension record must be created before it can be retrieved by ID"}]},{"specification":"This operation creates a new temporary account suspension for a member who has violated community guidelines. The suspension is issued by moderators as part of the graduated enforcement moderation workflow. Suspensions temporarily restrict the member's ability to create topics, post replies, and vote on content while still allowing them to read discussions and access their profile settings. The operation validates the target member exists, the issuing moderator has appropriate permissions, and the suspension duration is within allowed limits (1-30 days for moderators). Upon successful suspension creation, the system updates the member's account_status, invalidates their active sessions, and sends notification explaining the suspension reason, duration, and appeal process. This operation references the discussion_board_suspensions table and integrates with the moderation workflow defined in the requirements document.","path":"/discussionBoard/moderator/suspensions","method":"post","summary":"Create a new temporary account suspension for a member violating community guidelines","description":"Creates a new temporary suspension record that restricts a member's posting and engagement privileges for a specified duration. This operation is part of the graduated enforcement moderation system and can only be performed by moderators with appropriate permissions.\n\nThe suspension workflow involves validating the target member's existence and current account status, ensuring the issuing moderator has authority to suspend users, and verifying the suspension duration falls within allowed limits (1-30 days for moderators). The operation requires detailed suspension reasoning to maintain transparency and support potential appeals.\n\nWhen a suspension is created, the system immediately updates the member's account_status to 'suspended', calculates the end_date based on duration_days, marks the suspension as is_active=true, and invalidates all of the member's active JWT tokens to prevent continued platform interaction. The suspended member receives notifications through both in-app and email channels explaining the suspension reason, duration, expected restoration date, and information about the appeal process.\n\nThe suspension record is linked to a corresponding moderation_action record that provides complete audit trail including the original violation, moderator decision, and reasoning. This ensures accountability and supports the appeal review process where administrators can examine the complete context of the suspension decision.\n\nSecurity considerations include verifying the issuing moderator's role and permissions, preventing moderators from suspending administrators or other moderators, and ensuring suspension durations align with the severity of violations as defined in community guidelines. The operation enforces rate limiting to prevent abuse of moderation powers and logs all suspension creations in the moderation audit trail.\n\nThis operation integrates with the discussion_board_suspensions table from the Prisma schema, which tracks member_id (the suspended user), moderation_action_id (the triggering moderation action), moderator_id (who issued the suspension), suspension_reason (detailed explanation), duration_days (length of suspension), start_date and end_date (suspension period), is_active (current suspension status), and timestamps for creation and potential early lifting.","parameters":[],"requestBody":{"description":"Suspension creation information including target member, suspension duration, reason, and issuing moderator authority","typeName":"IDiscussionBoardSuspension.ICreate"},"responseBody":{"description":"Created suspension record with calculated end date, active status, and complete suspension details","typeName":"IDiscussionBoardSuspension"},"authorizationType":null,"authorizationRole":"moderator","name":"create","prerequisites":[]},{"specification":"This operation creates a new temporary account suspension for a member who has violated community guidelines. The suspension is issued by administrators as part of the graduated enforcement moderation workflow. Suspensions temporarily restrict the member's ability to create topics, post replies, and vote on content while still allowing them to read discussions and access their profile settings. The operation validates the target member exists, the issuing administrator has appropriate permissions, and the suspension duration is within allowed limits (1-365 days for administrators). Upon successful suspension creation, the system updates the member's account_status, invalidates their active sessions, and sends notification explaining the suspension reason, duration, and appeal process. This operation references the discussion_board_suspensions table and integrates with the moderation workflow defined in the requirements document.","path":"/discussionBoard/administrator/suspensions","method":"post","summary":"Create a new temporary account suspension for a member violating community guidelines","description":"Creates a new temporary suspension record that restricts a member's posting and engagement privileges for a specified duration. This operation is part of the graduated enforcement moderation system and can only be performed by administrators with appropriate permissions.\n\nThe suspension workflow involves validating the target member's existence and current account status, ensuring the issuing administrator has authority to suspend users, and verifying the suspension duration falls within allowed limits (1-365 days for administrators, allowing longer suspensions than moderators). The operation requires detailed suspension reasoning to maintain transparency and support potential appeals.\n\nWhen a suspension is created, the system immediately updates the member's account_status to 'suspended', calculates the end_date based on duration_days, marks the suspension as is_active=true, and invalidates all of the member's active JWT tokens to prevent continued platform interaction. The suspended member receives notifications through both in-app and email channels explaining the suspension reason, duration, expected restoration date, and information about the appeal process.\n\nThe suspension record is linked to a corresponding moderation_action record that provides complete audit trail including the original violation, administrator decision, and reasoning. This ensures accountability and supports the appeal review process where senior administrators can examine the complete context of the suspension decision.\n\nSecurity considerations include verifying the issuing administrator's role and permissions, preventing conflicts with existing suspensions, and ensuring suspension durations align with the severity of violations as defined in community guidelines. The operation enforces comprehensive logging in the moderation audit trail for full transparency and accountability.\n\nThis operation integrates with the discussion_board_suspensions table from the Prisma schema, which tracks member_id (the suspended user), moderation_action_id (the triggering moderation action), administrator_id (who issued the suspension), suspension_reason (detailed explanation), duration_days (length of suspension), start_date and end_date (suspension period), is_active (current suspension status), and timestamps for creation and potential early lifting.","parameters":[],"requestBody":{"description":"Suspension creation information including target member, suspension duration, reason, and issuing administrator authority","typeName":"IDiscussionBoardSuspension.ICreate"},"responseBody":{"description":"Created suspension record with calculated end date, active status, and complete suspension details","typeName":"IDiscussionBoardSuspension"},"authorizationType":null,"authorizationRole":"administrator","name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/moderationActions","method":"post"},"description":"Moderation action must be created first to establish the audit trail and justification for the suspension. This action documents the violation investigation, moderator decision, and enforcement rationale that leads to the suspension."}]},{"specification":"This operation updates an existing temporary account suspension, allowing moderators to modify suspension details such as lifting the suspension early, extending the suspension duration, or updating the suspension reason. The operation validates the suspension exists, the requesting moderator has authority to modify suspensions, and the requested changes are valid. When a suspension is lifted early, the system immediately restores the member's full privileges, invalidates the suspension's is_active status, records the lifted_at timestamp, and captures the lifted_reason for audit purposes. This operation references the discussion_board_suspensions table and supports the moderation appeal and review workflow where moderators may need to modify suspension terms after reviewing appeals or new evidence.","path":"/discussionBoard/moderator/suspensions/{suspensionId}","method":"put","summary":"Update an existing suspension record to modify duration, lift early, or change suspension details","description":"Modifies an existing temporary suspension record, primarily used to lift suspensions early after appeal approval, extend suspension duration for additional violations, or update suspension reasoning with additional context. This operation supports the moderation review and appeal workflow where moderators may need to adjust suspension terms.\n\nThe update workflow validates the suspension exists and is accessible for modification, verifies the requesting user has moderator permissions, and ensures the requested changes are valid and appropriate. Common update scenarios include lifting suspensions early after successful appeals, extending suspensions when new violations occur during the suspension period, and updating suspension reasons to reflect additional context or corrected information.\n\nWhen a suspension is lifted early (lifted_early=true), the system immediately updates the member's account_status back to 'active', sets is_active=false on the suspension record, records the lifted_at timestamp, captures the lifted_reason explanation, and sends notification to the suspended member informing them of their privilege restoration. The member regains immediate access to create topics, post replies, and vote on content.\n\nWhen a suspension duration is extended, the system recalculates the end_date based on the new duration_days value, updates the suspension_reason to include the extension justification, and sends updated notification to the member explaining the extension and new expected restoration date. This typically occurs when a suspended member attempts to circumvent the suspension or when additional violations are discovered.\n\nSecurity considerations include preventing moderators from modifying suspensions issued by administrators without proper authorization, ensuring all suspension modifications are logged in the moderation audit trail, verifying suspension changes align with community guideline severity levels, and maintaining referential integrity with the related moderation_action record.\n\nThe operation integrates with the discussion_board_suspensions table from the Prisma schema, updating fields such as suspension_reason, duration_days, end_date, is_active, lifted_early, lifted_at, lifted_reason, and updated_at timestamp. All modifications are tracked through the audit trail for transparency and appeal review purposes.","parameters":[{"name":"suspensionId","description":"Unique identifier of the suspension record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated suspension information including modified duration, lift status, or updated reasoning","typeName":"IDiscussionBoardSuspension.IUpdate"},"responseBody":{"description":"Updated suspension record reflecting all modifications with current active status","typeName":"IDiscussionBoardSuspension"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/suspensions","method":"post"},"description":"Suspension must be created before it can be updated. The suspension record must exist with the specified suspensionId to modify suspension details, lift early, or extend duration."}]},{"specification":"This operation updates an existing temporary account suspension, allowing administrators to modify suspension details such as lifting the suspension early, extending the suspension duration, or updating the suspension reason. The operation validates the suspension exists, the requesting administrator has authority to modify suspensions, and the requested changes are valid. When a suspension is lifted early, the system immediately restores the member's full privileges, invalidates the suspension's is_active status, records the lifted_at timestamp, and captures the lifted_reason for audit purposes. This operation references the discussion_board_suspensions table and supports the moderation appeal and review workflow where administrators may need to modify suspension terms after reviewing appeals or new evidence.","path":"/discussionBoard/administrator/suspensions/{suspensionId}","method":"put","summary":"Update an existing suspension record to modify duration, lift early, or change suspension details","description":"Modifies an existing temporary suspension record, primarily used to lift suspensions early after appeal approval, extend suspension duration for additional violations, or update suspension reasoning with additional context. This operation supports the moderation review and appeal workflow where administrators may need to adjust suspension terms.\n\nThe update workflow validates the suspension exists and is accessible for modification, verifies the requesting user has administrator permissions, and ensures the requested changes are valid and appropriate. Administrators have broader authority than moderators and can modify any suspension regardless of who issued it, including suspensions created by other administrators.\n\nCommon update scenarios include lifting suspensions early after successful appeals, extending suspensions when new violations occur during the suspension period, updating suspension reasons to reflect additional context or corrected information, and overriding moderator suspension decisions. Administrators can extend suspension durations up to 365 days compared to moderators' 30-day limit.\n\nWhen a suspension is lifted early (lifted_early=true), the system immediately updates the member's account_status back to 'active', sets is_active=false on the suspension record, records the lifted_at timestamp, captures the lifted_reason explanation, and sends notification to the suspended member informing them of their privilege restoration. The member regains immediate access to create topics, post replies, and vote on content.\n\nWhen a suspension duration is extended by an administrator, the system recalculates the end_date based on the new duration_days value, updates the suspension_reason to include the extension justification, updates the administrator_id field to reflect the modifying administrator, and sends updated notification to the member explaining the extension and new expected restoration date.\n\nSecurity considerations include logging all administrator suspension modifications in the moderation audit trail for accountability, ensuring suspension changes align with community guideline severity levels, maintaining referential integrity with the related moderation_action record, and preventing modification of suspensions that have already expired or been lifted.\n\nThe operation integrates with the discussion_board_suspensions table from the Prisma schema, updating fields such as suspension_reason, duration_days, end_date, is_active, lifted_early, lifted_at, lifted_reason, administrator_id, and updated_at timestamp. All modifications are tracked through the comprehensive audit trail for transparency, appeal review, and moderator performance evaluation.","parameters":[{"name":"suspensionId","description":"Unique identifier of the suspension record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated suspension information including modified duration, lift status, or updated reasoning","typeName":"IDiscussionBoardSuspension.IUpdate"},"responseBody":{"description":"Updated suspension record reflecting all modifications with current active status","typeName":"IDiscussionBoardSuspension"},"authorizationType":null,"authorizationRole":"administrator","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/suspensions","method":"post"},"description":"Suspension must be created before it can be updated or modified"}]},{"specification":"This operation retrieves a filtered, paginated list of permanent account bans from the discussion board platform. It operates on the discussion_board_bans table from the Prisma schema and provides administrators with comprehensive ban management and reporting capabilities. The operation supports advanced filtering by ban date ranges, administrator who issued the ban, appealability status, reversal status, and text search across ban reasons and violation summaries. This enables administrators to review ban history, analyze moderation patterns, track appeal outcomes, and generate ban statistics reports. The operation is restricted to administrators only as ban management is a critical platform governance function requiring highest-level access.","path":"/discussionBoard/administrator/bans","method":"patch","summary":"Search and retrieve a filtered, paginated list of permanent account bans for administrative review","description":"Retrieve a comprehensive, filtered, and paginated list of permanent account bans from the discussion board platform. This operation provides administrators with powerful search and filtering capabilities for ban management, moderation oversight, and compliance reporting.\n\nThis operation is essential for administrators to monitor ban enforcement patterns, review moderation decisions, track appeal outcomes, and ensure consistent application of community guidelines. The ban data includes the banned member details, issuing administrator, comprehensive ban reasoning, violation summaries, appealability status, and reversal information if the ban was overturned through the appeals process.\n\nSecurity considerations require this operation to be accessible only to users with administrator role, as permanent bans represent the most severe moderation action and require highest-level oversight. The operation integrates with the moderation system defined in the Moderation System requirements document and enforces role-based permissions as specified in the User Roles and Authentication document.\n\nThe underlying database entity is the discussion_board_bans table from the Prisma schema, which captures all permanent ban records including ban_reason, violation_summary, is_appealable flag, appeal_window_days, banned IP addresses and email addresses, reversal status (is_reversed), and complete audit trail with timestamps.\n\nFiltering capabilities support searching by date ranges, issuing administrator, appealability status, reversal status, and full-text search across ban reasons and violation summaries. Sorting options include most recent bans, oldest bans, and alphabetical by member username. Pagination ensures efficient handling of large ban datasets accumulated over time.\n\nThis operation works in conjunction with the ban detail retrieval operation (GET /bans/{banId}) to provide complete ban management functionality. Administrators typically use this search operation to identify patterns, review recent bans, and locate specific ban records before viewing full details.","parameters":[],"requestBody":{"description":"Search criteria, filtering options, and pagination parameters for ban records","typeName":"IDiscussionBoardBan.IRequest"},"responseBody":{"description":"Paginated list of permanent ban records matching search criteria with summary information","typeName":"IPageIDiscussionBoardBan.ISummary"},"authorizationRole":"administrator","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/bans","method":"post"},"description":"At least one ban must exist in the system before ban records can be searched and retrieved"}]},{"specification":"This operation retrieves complete details for a specific permanent account ban by its unique identifier. It operates on the discussion_board_bans table from the Prisma schema and provides administrators with comprehensive information about a single ban record including the banned member, issuing administrator, full ban reasoning, violation history, appealability status, appeal window information, banned contact information (IP address and email), reversal status if applicable, and complete timestamp audit trail. This operation supports administrative review of individual ban decisions, appeal processing, and moderation quality assurance.","path":"/discussionBoard/administrator/bans/{banId}","method":"get","summary":"Retrieve complete details of a specific permanent account ban by unique identifier","description":"Retrieve comprehensive information about a specific permanent account ban from the discussion board platform. This operation provides administrators with complete visibility into a single ban record, including all associated data, relationships, and audit information necessary for ban review, appeal processing, and moderation oversight.\n\nThe operation returns detailed information from the discussion_board_bans table including the banned member's account details, the administrator who issued the ban, the moderation action that initiated the ban, comprehensive ban justification (ban_reason with minimum 100 characters), complete violation summary documenting the pattern of violations leading to the permanent ban decision, appealability status (is_appealable flag), appeal window duration if applicable (appeal_window_days), contact information banned from re-registration (ip_address_banned and email_banned), and reversal information if the ban was overturned (is_reversed, reversed_at, reversal_reason).\n\nSecurity considerations restrict this operation to administrator role only, as permanent ban information contains sensitive moderation data and personally identifiable information requiring highest-level access control. The operation enforces role-based permissions as defined in the User Roles and Authentication requirements document.\n\nThe operation integrates with the moderation system specified in the Moderation System requirements document, providing access to the complete ban context including related moderation actions, violation history, and appeal records. This integration enables administrators to understand the full narrative of events leading to the permanent ban and any subsequent appeals or reversals.\n\nRelationship to other operations: Administrators typically access this operation after using the ban search operation (PATCH /bans) to locate specific ban records. The detailed ban information retrieved supports appeal review workflows, moderation quality audits, and compliance reporting. If the ban record has associated appeals, administrators can review appeal details to understand challenges to the ban decision.\n\nThe operation validates that the requested ban record exists and is accessible to the administrator. The ban identifier must be a valid UUID matching records in the discussion_board_bans table.","parameters":[{"name":"banId","description":"Unique identifier of the target permanent ban record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete permanent ban record with all relationships, violation details, and audit information","typeName":"IDiscussionBoardBan"},"authorizationRole":"administrator","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/administrator/bans","method":"post"},"description":"A ban record must be created before it can be retrieved by ID. The banId parameter references a ban that must exist in the discussion_board_bans table."}]},{"specification":"This operation enables administrators to permanently ban a member account from the discussion board platform. The ban operation represents the most severe moderation action, completely preventing platform access for users who have committed critical violations, repeated offenses after warnings and suspensions, or engaged in illegal activities. This operation is restricted to administrators only (moderators cannot issue permanent bans). The operation creates a ban record in the discussion_board_bans table, updates the member's account_status to 'banned', invalidates all active sessions, and records comprehensive audit information. The ban includes the option to mark it as appealable or non-appealable based on violation severity. For appealable bans, the system sets an appeal window (typically 30 days) during which the banned user can submit an appeal through a separate appeal process. The operation also captures the user's email address and optionally their IP address to prevent re-registration attempts. All ban actions are logged in moderation audit trails for accountability and transparency reporting.","path":"/discussionBoard/administrator/bans","method":"post","summary":"Permanently ban a member account from the discussion board platform","description":"This operation creates a permanent ban for a member account, representing the most severe moderation action available on the discussion board platform. Permanent bans completely prevent all platform access and are issued exclusively by administrators for critical violations, repeated offenses after escalating warnings and suspensions, or illegal activities that threaten platform integrity and user safety.\n\nWhen an administrator initiates a ban, the system creates a comprehensive ban record that includes the target member, the administrator issuing the ban, detailed justification (minimum 100 characters required), a summary of all violations leading to the ban, and whether the ban is appealable. The operation also captures the member's email address to prevent future account re-registration and optionally records their IP address for additional security measures.\n\nThe ban operation performs several critical actions: it updates the target member's account_status to 'banned' in the discussion_board_members table, invalidates all active JWT tokens and sessions for that user across all devices, creates a corresponding moderation_action record for audit purposes, and triggers notifications to the banned user explaining the decision. All user-generated content (topics and replies) is hidden from public view but preserved in the database for audit and potential legal requirements.\n\nBans can be marked as appealable or non-appealable based on violation severity. Appealable bans include an appeal window (typically 30 days) during which the banned user can submit a formal appeal for administrator review. Non-appealable bans are reserved for the most severe violations including illegal content, explicit threats of violence, doxxing, or repeated violations after previous ban appeals. The appealability determination and appeal window duration are specified in the request body.\n\nThis operation integrates with the broader moderation system defined in the moderation requirements document, ensuring that permanent bans follow the established graduated enforcement approach while providing the ultimate enforcement mechanism for protecting the community. All ban actions are logged in multiple audit tables (discussion_board_moderation_actions, discussion_board_moderation_audit_logs) to maintain complete accountability and support transparency reporting as specified in the moderation system requirements.\n\nSecurity considerations include validation that the requesting user has administrator role, prevention of administrators banning other administrators or themselves, comprehensive audit logging of all ban decisions, and preservation of content for legal compliance and potential appeals processes.","parameters":[],"requestBody":{"description":"Ban creation data including target member, justification, violation summary, and appealability settings","typeName":"IDiscussionBoardBan.ICreate"},"responseBody":{"description":"Complete ban record with all details, timestamps, and enforcement information","typeName":"IDiscussionBoardBan"},"authorizationType":null,"authorizationRole":"administrator","name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Member account must exist before it can be banned. The member_id parameter references a member who must have a registered account in the discussion_board_members table."},{"endpoint":{"path":"/discussionBoard/administrator/moderationActions","method":"post"},"description":"Moderation action must be created before issuing a ban. The moderation_action_id references a moderation action record that documents the investigation and decision leading to the permanent ban."}]},{"specification":"This operation enables members to search and retrieve appeals submitted for moderation decisions including warnings, suspensions, bans, and content removals. The appeal search operation provides comprehensive filtering and pagination capabilities to help members track their own appeal submissions. The operation queries the discussion_board_appeals table with support for filtering by appeal status (pending_review, under_review, approved, denied, modified), submission date ranges, and decision outcome. For regular members, the operation automatically restricts results to show only appeals submitted by the authenticated user, ensuring users can only view their own appeal history. Results include complete appeal details with related moderation action information, user explanations, administrator decisions, and timestamps tracking the entire appeal lifecycle from submission through review to final resolution.","path":"/discussionBoard/member/appeals","method":"patch","summary":"Search and retrieve own appeals for moderation decisions with filtering and pagination","description":"This operation retrieves a filtered and paginated list of appeals submitted by the authenticated member contesting their own moderation decisions on the discussion board platform. Appeals represent a critical component of the platform's fair and transparent moderation system, providing users with recourse when they believe moderation actions (warnings, suspensions, bans, or content removals) were issued unfairly or incorrectly.\n\nThe operation supports comprehensive search and filtering capabilities including filtering by appeal status (pending_review, under_review, approved, denied, modified), submission date ranges, decision outcome, and the type of moderation action being appealed (warning, suspension, ban, content removal). Users can sort results by submission date, review date, or status to organize their view of their appeal history.\n\nFor members accessing this endpoint, the operation implements strict access control by automatically filtering results to show only appeals submitted by the authenticated user. This ensures members can track their own appeal submissions, view decision outcomes, and understand the resolution of their contested moderation actions. Members use this endpoint to monitor the status of their appeals as they progress from pending_review through administrator review to final decisions.\n\nThe response includes complete appeal information for each result: the appeal explanation provided by the member (100-1000 characters), any additional evidence or context submitted, the current appeal status, the assigned reviewing administrator (if applicable), the administrator's decision (uphold, reverse, or modify), detailed decision reasoning, descriptions of any corrective actions taken for approved appeals (warning removal, suspension lift, account restoration), and complete timestamp tracking from submission through review to resolution.\n\nEach appeal result includes references to the underlying moderation action being contested, allowing members to view the complete context including the original violation, moderator reasoning, and the moderation history that led to the appeal. This comprehensive context helps members understand appeal decisions and learn from the moderation process.\n\nThe operation supports pagination for efficient handling when members have submitted multiple appeals over time, with configurable page sizes and navigation through multi-page result sets. Sorting options enable members to organize appeals by submission date, review status, or resolution outcome.\n\nSecurity and privacy considerations include automatic filtering that restricts members to viewing only their own appeals (cannot see other users' appeals), validation that the requesting user is authenticated with valid member role, protection of sensitive moderation details, and comprehensive audit logging of appeal searches for accountability as specified in the moderation audit requirements.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for appeal queries including status filters, date ranges, and sorting preferences","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated list of member's own appeals matching search criteria with complete appeal details, moderation context, and resolution information","typeName":"IPageIDiscussionBoardAppeal"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"This operation enables administrators to search and retrieve all appeals submitted across all users for moderation decisions including warnings, suspensions, bans, and content removals. The appeal search operation provides comprehensive filtering and pagination capabilities to help administrators manage and review the complete appeal queue across the entire platform. The operation queries the discussion_board_appeals table with support for filtering by appeal status (pending_review, under_review, approved, denied, modified), member who submitted the appeal, reviewing administrator, decision outcome, and date ranges. For administrators, the operation returns all appeals without member-based filtering, supporting the administrative appeal review workflow defined in the moderation system requirements. Results include complete appeal details with related moderation action information, user explanations, administrator decisions, and timestamps tracking the entire appeal lifecycle from submission through review to final resolution.","path":"/discussionBoard/administrator/appeals","method":"patch","summary":"Search and retrieve all appeals across all users for administrative review with filtering and pagination","description":"This operation retrieves a filtered and paginated list of all appeals submitted by any member contesting moderation decisions on the discussion board platform, providing administrators with complete visibility into the appeals queue. Appeals represent a critical component of the platform's fair and transparent moderation system, and this administrative endpoint enables comprehensive appeal management and review across the entire user base.\n\nThe operation supports comprehensive search and filtering capabilities including filtering by appeal status (pending_review, under_review, approved, denied, modified), submission date ranges, specific member who submitted the appeal, reviewing administrator assignment, decision outcome, and the type of moderation action being appealed (warning, suspension, ban, content removal). Administrators can sort results by submission date, review date, status, or member to organize their review workflow.\n\nFor administrators accessing this endpoint, the operation returns appeals across all users without member-based filtering, serving as the primary interface for the administrative appeal review queue. Administrators use this endpoint to identify pending appeals requiring review, track appeals currently under review by specific administrators, analyze appeal patterns and outcomes across the platform, and ensure timely processing of appeals within the target review timelines specified in moderation system requirements (7 days for warning appeals, 3 days for suspension appeals, 14 days for ban appeals).\n\nThe response includes complete appeal information for each result: the appeal explanation provided by the member (100-1000 characters), any additional evidence or context submitted, the current appeal status, the assigned reviewing administrator (if applicable), the administrator's decision (uphold, reverse, or modify), detailed decision reasoning, descriptions of any corrective actions taken for approved appeals (warning removal, suspension lift, account restoration), and complete timestamp tracking from submission through review to resolution.\n\nEach appeal result includes references to the underlying moderation action being contested, allowing administrators to view the complete context including the original violation, moderator reasoning, content snapshots, and the full moderation history that led to the appeal. This comprehensive context supports informed appeal decisions and maintains transparency throughout the appeals process.\n\nThe operation supports pagination for efficient handling of large appeal volumes across the entire platform, with configurable page sizes and navigation through multi-page result sets. Sorting options enable administrators to prioritize appeals by urgency (oldest pending first), recency (newest submissions first), assigned reviewer, or resolution status to organize their administrative workflow effectively.\n\nThis search operation integrates with the appeal submission workflow, the moderation action system, and the notification system to provide administrators with complete appeal management capabilities. When administrators review appeals and make decisions, they can access complete moderation context, user history, and relevant content to make fair, informed determinations. When appeals are approved and decisions are reversed, the system automatically triggers corrective actions and sends notifications to affected users.\n\nSecurity and privacy considerations include validation that the requesting user has administrator role with proper permissions to review all appeals, comprehensive audit logging of all administrative appeal searches and reviews for accountability and compliance reporting as specified in the moderation audit requirements, and appropriate handling of sensitive moderation information in responses.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for appeal queries including status filters, member filters, administrator assignment, date ranges, and sorting preferences","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated list of all appeals across all users matching search criteria with complete appeal details, moderation context, and resolution information","typeName":"IPageIDiscussionBoardAppeal"},"authorizationType":null,"authorizationRole":"administrator","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific appeal submission by its unique identifier. Appeals are submitted by users (discussion_board_members) to contest moderation decisions including warnings, suspensions, bans, or content removals. The operation accesses the discussion_board_appeals table to retrieve the appeal record along with related information about the original moderation action being appealed, the member who submitted the appeal, and the reviewing administrator if assigned. This endpoint is critical for the appeal review workflow, allowing administrators to examine appeal details, user explanations, and additional evidence before making a decision. It also enables members to check the status of their own appeal submissions.","path":"/discussionBoard/member/appeals/{appealId}","method":"get","summary":"Retrieve detailed information about a specific appeal submission","description":"This operation retrieves comprehensive details about a single appeal record identified by its unique appeal ID from the discussion_board_appeals table. Appeals represent formal challenges to moderation decisions and are a critical component of the platform's fair moderation system.\n\nThe appeal record includes the member who submitted the appeal, which moderation decision is being contested (warning, suspension, ban, or moderation action), the user's written explanation for why the decision should be reversed, any additional evidence provided, the current status of the appeal (pending_review, under_review, approved, denied, modified), and if resolved, the administrator's decision with detailed reasoning.\n\nThis endpoint serves multiple purposes depending on the authenticated user's role. Members can check the status and details of their own appeal submissions to track progress through the review process. Administrators use this endpoint to retrieve full appeal information when conducting reviews, examining the original moderation action context, user's arguments, and all relevant evidence before making a decision. Moderators may view appeals related to their moderation actions to understand user concerns and learn from reversed decisions.\n\nSecurity considerations include ensuring that members can only view their own appeals unless they have moderator or administrator privileges. The operation validates that the appeal exists and that the requesting user has appropriate permissions before returning sensitive moderation data. All appeal information, including user explanations and administrator decisions, must be handled with confidentiality.\n\nThe response includes complete details about the original moderation decision being appealed, allowing reviewers to understand the full context. This includes the moderation action type, target content snapshots, violation categories, and the original moderator's reasoning. For appeals of warnings, the warning level and expiration information is included. For suspension appeals, the suspension duration and dates are provided. For ban appeals, the ban reason and appealability status are included.\n\nRelated operations that work with appeals include POST /appeals for submitting new appeal requests, and administrator-specific endpoints for processing appeals and making decisions. This operation is typically used after a moderation action has been taken and the affected user wishes to contest the decision through the formal appeal process defined in the platform's moderation system requirements.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete appeal information including submission details, review status, and decision if resolved","typeName":"IDiscussionBoardAppeal"},"authorizationRole":"member","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation creates a new appeal submission allowing users to formally contest moderation decisions taken against them. When a member receives a warning, suspension, ban, or has their content removed by moderators, they have the right to appeal the decision if they believe it was unfair or incorrect. The operation accepts the appeal request containing the moderation decision being contested, the user's written explanation of why the decision should be reversed, and any additional evidence or context. The system validates that the appeal is submitted within the allowed appeal window, that the decision is appealable, that the user has not already appealed this decision, and that all required information is provided. Upon successful validation, the appeal record is created in the discussion_board_appeals table with pending_review status, administrators are notified of the new appeal, and the user receives confirmation of submission with expected review timeline.","path":"/discussionBoard/member/appeals","method":"post","summary":"Submit a new appeal to contest a moderation decision","description":"This operation enables members to exercise their right to appeal moderation decisions by submitting a formal appeal request to the discussion_board_appeals table. The appeal system is a cornerstone of fair and transparent content moderation, providing users with recourse when they believe a moderation action was taken in error or was disproportionate to the violation.\n\nMembers can appeal various types of moderation decisions including warnings (first, second, or final warnings from the discussion_board_warnings table), temporary suspensions (from discussion_board_suspensions), permanent bans (from discussion_board_bans if marked as appealable), and content removal decisions (from discussion_board_moderation_actions). Each appeal requires the user to provide a substantive written explanation between 100 and 1000 characters explaining why the decision should be reversed, along with optional additional evidence or context.\n\nThe operation performs comprehensive validation before creating the appeal record. It verifies that the moderation decision being appealed actually exists and belongs to the requesting user, that the decision is within the appeal window (typically 30 days from the moderation action), that the decision has not already been appealed (one appeal per decision), and that appealable bans are marked as appealable in the bans table. For non-appealable decisions such as bans for illegal content or severe threats, the system rejects the appeal submission with a clear explanation.\n\nUpon successful validation, the system creates a new appeal record capturing the appealed moderation action identifier (and specific IDs for appealed warnings, suspensions, or bans), the member's appeal explanation, any additional evidence provided, and sets the initial status to pending_review. The system generates a unique appeal ID and records the submission timestamp for tracking review timelines. Administrators are immediately notified of the new appeal submission through the notification system, adding it to their appeal review queue prioritized by submission time and appeal type urgency.\n\nThe user receives confirmation that their appeal was successfully submitted along with information about the expected review timeline (warnings: 7 days, suspensions: 3 days due to time-sensitive nature, bans: 14 days for thorough review). The confirmation includes the assigned appeal ID for reference and instructions on how to check appeal status.\n\nBusiness rules enforced during appeal submission include the requirement that the user must be the subject of the moderation action being appealed, that the appeal window has not closed (typically 30 days from the moderation action date), that the user has not exceeded the maximum of 5 active appeals at any time, and that the appeal explanation meets minimum quality standards (100-1000 characters, substantive content, not just personal attacks on moderators).\n\nThis operation integrates with the moderation system defined in the moderation requirements document, specifically implementing the appeal submission workflow. It relates to the GET /appeals/{appealId} operation which allows users to check their appeal status, and to administrator-specific appeal review endpoints where decisions are rendered. The appeal process is designed to balance user rights with efficient moderation, ensuring that legitimate appeals receive fair consideration while preventing abuse of the appeal system as a delay tactic.","parameters":[],"requestBody":{"description":"Appeal submission details including the moderation decision being contested and user's explanation","typeName":"IDiscussionBoardAppeal.ICreate"},"responseBody":{"description":"Created appeal record with assigned appeal ID and submission confirmation","typeName":"IDiscussionBoardAppeal"},"authorizationRole":"member","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/discussionBoard/moderator/moderationActions","method":"post"},"description":"Moderation action must exist before it can be appealed. The appealed_moderation_action_id references a moderation action that was taken against the member's content or account."}]},{"specification":"This operation allows members to update an existing appeal they have submitted contesting a moderation decision. Members can modify their appeal_explanation and additional_evidence fields to strengthen their case before an administrator reviews it. This operation operates on the discussion_board_appeals table and is only available while the appeal status is 'pending_review'. Once an appeal moves to 'under_review' or is resolved, it cannot be modified. The operation validates that the authenticated member is the original appellant and that the appeal is still in a modifiable state.","path":"/discussionBoard/member/appeals/{appealId}","method":"put","summary":"Update an existing appeal submission for a moderation decision","description":"This operation enables members to modify an existing appeal they submitted contesting a moderation decision including warnings, suspensions, bans, or content removals. Members can update their appeal_explanation and additional_evidence to provide stronger arguments or additional context before administrator review.\n\nThe operation strictly validates that the authenticated user is the original appellant who submitted the appeal and that the appeal remains in 'pending_review' status. Appeals that have progressed to 'under_review' or been resolved ('approved', 'denied', 'modified') cannot be edited to maintain the integrity of the review process and prevent manipulation after administrator engagement.\n\nSecurity considerations include verifying member ownership of the appeal, ensuring the appeal exists and is accessible, and preventing modifications to appeals outside the pending state. The operation updates the appeal record's appeal_explanation and additional_evidence fields while preserving the original submission timestamp and updating the updated_at timestamp to track modifications.\n\nValidation rules enforce that appeal_explanation remains between 100 and 1000 characters as required by business rules. The additional_evidence field is optional but must not exceed reasonable length limits if provided. The operation validates all input against the same constraints as appeal creation to maintain data quality.\n\nThis operation integrates with the moderation system by allowing users to strengthen their appeals before administrator review, supporting the platform's commitment to fair and transparent moderation. Users can refine their arguments and provide additional context that may influence the administrator's decision, supporting the appeals process defined in the moderation requirements.\n\nRelated operations include viewing appeal status and details (GET /appeals/{appealId}), creating new appeals (POST /appeals), and the administrator appeal review workflow. Users should consult their appeal status before attempting updates to ensure the appeal is still in a modifiable state.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated appeal information including modified explanation and additional evidence","typeName":"IDiscussionBoardAppeal.IUpdate"},"responseBody":{"description":"Updated appeal record with modified explanation and evidence","typeName":"IDiscussionBoardAppeal"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/appeals","method":"post"},"description":"Appeal must exist before it can be updated. The appeal record must be created first through the appeal submission process."}]},{"specification":"This operation retrieves filtered and paginated audit log entries for all significant system actions including topic creation, reply posting, content deletion, user profile changes, and administrative actions. It operates on the discussion_board_audit_logs table and provides administrators with comprehensive activity tracking for compliance, security analysis, and user activity monitoring. The operation supports complex filtering by user, action type, entity type, date range, and IP address to facilitate detailed audit investigations and reporting.","path":"/discussionBoard/administrator/audit/logs","method":"patch","summary":"Search and retrieve filtered, paginated audit log entries for system activity tracking","description":"This operation provides administrators with comprehensive access to the platform's audit trail, retrieving filtered and paginated records from the discussion_board_audit_logs table. The audit log captures all significant user and system actions across the platform including topic creation, reply posting, content editing and deletion, voting activity, user profile modifications, and administrative configuration changes. This operation is essential for compliance auditing, security incident investigation, user activity analysis, and platform governance.\n\nThe operation supports extensive filtering capabilities to help administrators locate specific audit events efficiently. Filters include user_id to track specific user activities, action_type to find particular operation categories (topic_created, reply_posted, vote_cast, profile_updated, content_deleted), entity_type and entity_id to investigate actions on specific platform entities, date range filtering for time-bound investigations, and IP address filtering for security analysis and fraud detection.\n\nSecurity considerations mandate that only users with the administrator role can access audit logs, as these records contain comprehensive platform activity data including deleted content snapshots, user behavioral patterns, and sensitive security information. The operation implements strict role-based access control and validates administrator authentication before returning any audit data.\n\nThe response includes detailed audit log entries with action descriptions, entity information, metadata JSON blobs containing before/after values and affected fields, IP addresses and user agents for security tracking, and precise timestamps for activity timeline reconstruction. Results are paginated to handle the large volume of audit data efficiently, with default page sizes optimized for administrative review workflows.\n\nThis operation integrates with the security monitoring system by providing the data foundation for detecting suspicious patterns, investigating security incidents, tracking moderation actions, and generating compliance reports. Administrators use this audit trail to verify platform integrity, investigate user complaints, analyze moderator performance, and ensure consistent policy enforcement.\n\nRelated operations include security log retrieval (PATCH /security/logs) for authentication-specific events, moderation audit log access (PATCH /moderation/audit-logs) for moderation-specific actions, and search history analysis (PATCH /search/history) for understanding user information needs. The general audit log provides the broadest activity view across all platform operations.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit log filtering including user, action type, entity type, date range, and IP address filters","typeName":"IDiscussionBoardAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching the specified search criteria with detailed action information","typeName":"IPageIDiscussionBoardAuditLog"},"authorizationRole":"administrator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of security audit log entries from the discussion board platform. Security logs track critical events including authentication attempts, permission denials, account lockouts, suspicious activities, rate limit violations, and potential security threats. The operation supports complex filtering by event type, severity level, date ranges, user identification, and IP addresses to enable security monitoring, incident investigation, and compliance auditing. This endpoint is restricted to administrators only given the sensitive security information contained in these logs.","path":"/discussionBoard/administrator/audit/security","method":"patch","summary":"Search and retrieve filtered security audit logs for monitoring and incident investigation","description":"Retrieve a comprehensive filtered and paginated list of security audit log entries from the discussion_board_security_logs table. This operation provides administrators with powerful search and analysis capabilities for investigating security incidents, monitoring authentication patterns, identifying suspicious activities, and maintaining security compliance.\n\nSecurity logs capture critical security-relevant events including successful and failed login attempts, account lockout incidents, permission denial events, rate limit violations, suspicious activity patterns, and potential security threats. Each log entry includes event type classification, severity assessment, IP address tracking, user agent information, descriptive context, and detailed metadata in JSON format.\n\nThe operation supports comprehensive filtering options including event type selection (login_success, login_failed, account_locked, permission_denied, suspicious_activity, rate_limit_exceeded), severity level filtering (low, medium, high, critical), date range queries for temporal analysis, user identification for account-specific investigation, and IP address tracking for identifying attack patterns or geographic threats.\n\nAdministrators use this endpoint for multiple critical security functions: investigating potential security breaches by analyzing failed login patterns, monitoring for brute force attacks through repeated failure analysis, identifying suspicious IP addresses showing attack behavior, analyzing rate limit violations to detect abuse patterns, tracking account lockout frequency to identify targeted accounts, generating security compliance reports for audit requirements, and performing incident response activities when security events are detected.\n\nSecurity considerations for this endpoint include strict administrator-only access given the sensitive nature of security event data, comprehensive audit logging of all security log access attempts to track who reviews security data, rate limiting to prevent excessive query load on security infrastructure, and careful filtering to prevent exposure of sensitive system internals or security mechanisms that could aid attackers.\n\nThe response includes paginated security log entries with full event details, filtering metadata showing applied search criteria, aggregated statistics for security event patterns, and sorting options by timestamp, severity level, or event type to facilitate different analysis workflows.","parameters":[],"requestBody":{"description":"Search criteria and filtering parameters for security audit log retrieval including event types, severity levels, date ranges, user filters, and IP address patterns","typeName":"IDiscussionBoardSecurityLog.IRequest"},"responseBody":{"description":"Paginated collection of security audit log entries matching the search criteria with event details, metadata, and timestamp information","typeName":"IPageIDiscussionBoardSecurityLog"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of moderation audit log entries from the discussion board platform. Moderation audit logs provide comprehensive accountability and transparency for all content governance activities including content removal, user warnings, suspensions, bans, and moderator interventions. The operation supports complex filtering by action type, moderator identity, target users, date ranges, and content references to enable moderator performance review, appeal investigations, and moderation quality assurance. This endpoint is restricted to administrators only to maintain moderation integrity and protect moderator privacy.","path":"/discussionBoard/administrator/audit/moderation","method":"patch","summary":"Search and retrieve filtered moderation audit logs for accountability and appeal investigation","description":"Retrieve a comprehensive filtered and paginated list of moderation audit log entries from the discussion_board_moderation_audit_logs table. This operation provides administrators with powerful tools for reviewing moderation decisions, investigating user appeals, monitoring moderator performance, and ensuring consistent application of community guidelines across the platform.\n\nModeration audit logs capture all moderation actions taken by moderators and administrators including content hiding and removal, user warnings, temporary suspensions, permanent bans, appeal approvals and denials, and automated moderation actions. Each log entry records the moderator or administrator identity who performed the action, the target user or content affected, comprehensive reasoning for the decision, preserved content snapshots for appeals investigation, and detailed metadata providing full context for the moderation event.\n\nThe operation supports extensive filtering capabilities including action type filtering (content_hidden, content_removed, warning_issued, user_suspended, user_banned, appeal_approved, appeal_denied), moderator identity filtering to review specific moderator's decisions, target user filtering for investigating moderation history of particular members, date range queries for temporal pattern analysis, content type filtering to focus on topic or reply moderation, and combined filters for complex audit queries.\n\nAdministrators rely on this endpoint for multiple critical moderation oversight functions: reviewing moderator decisions for quality assurance and consistency, investigating user appeals by examining original moderation context and reasoning, monitoring moderator performance through decision pattern analysis, identifying potential moderator bias or inconsistent application of guidelines, generating transparency reports showing moderation activity statistics, training new moderators by providing examples of past decisions, and resolving disputes about content removal or user sanctions.\n\nAccountability and transparency are paramount for this endpoint. The moderation audit trail serves as the authoritative record for all content governance activities, supporting the platform's commitment to fair and consistent moderation. All moderation actions are permanently logged with immutable records, moderator identities are tracked to enable performance review, comprehensive reasoning is required for all moderation decisions, content snapshots preserve the exact state at time of action, and metadata provides full context for understanding each moderation event.\n\nThe response includes paginated moderation audit entries with complete action details, filtering metadata showing applied search criteria, aggregated statistics for moderation patterns and trends, and sorting options by timestamp, action type, or moderator identity to support different audit and review workflows.\n\nIntegration with the appeals system is critical as this endpoint provides the foundational data for appeal investigations, allowing administrators to review original moderation decisions with full context, examine moderator reasoning, access preserved content snapshots, and make informed decisions on whether to uphold, reverse, or modify contested moderation actions.","parameters":[],"requestBody":{"description":"Search criteria and filtering parameters for moderation audit log retrieval including action types, moderator identifiers, target users, date ranges, and content references","typeName":"IDiscussionBoardModerationAuditLog.IRequest"},"responseBody":{"description":"Paginated collection of moderation audit log entries matching the search criteria with action details, moderator information, target data, and comprehensive context","typeName":"IPageIDiscussionBoardModerationAuditLog"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of search history records from the discussion_board_search_history table in the Prisma schema. The search history audit trail tracks all user search queries, applied filters, result counts, and user engagement with search results. This operation supports advanced filtering by user, date range, search query text patterns, result counts, and session identifiers. It is designed for administrators and analysts to understand search patterns, identify common queries, analyze zero-result searches, and improve search effectiveness. The operation implements comprehensive pagination with configurable page sizes and supports multiple sorting options including chronological order, result count, and query text alphabetically.","path":"/discussionBoard/administrator/audit/searches","method":"patch","summary":"Retrieve and filter paginated search history audit records for platform analytics","description":"Retrieve a comprehensive, filtered, and paginated list of search history audit records from the platform. This operation provides administrators and analysts with powerful tools to analyze user search behavior, identify popular queries, detect zero-result searches, and optimize search functionality for economic and political discussions.\n\nThe search history audit trail captures every search query performed on the platform, including the search text entered, filters applied (category, date range, tags, vote thresholds), number of results returned, which result was clicked, and session context. This rich dataset enables deep analysis of user information needs and search effectiveness.\n\nSecurity considerations ensure that only administrators can access the complete search history audit trail. Regular members cannot access other users' search histories to protect privacy. The operation respects data retention policies, typically showing search history from the last 90 days for performance and privacy reasons, though administrators may access extended historical data for compliance purposes.\n\nThe operation integrates with the discussion_board_search_history table from the Prisma schema, incorporating all available fields including user_id (nullable for guest searches), search_query (the actual text searched), filters_applied (JSON blob of filter parameters), results_count (number of results returned), clicked_result_id (nullable UUID of clicked result), session_id (nullable session tracking), and created_at timestamp.\n\nFiltering capabilities support complex queries to identify patterns such as frequently searched terms that return zero results (indicating content gaps), queries with high click-through rates (indicating good relevance), queries with low engagement (indicating poor search quality), and user-specific search behavior patterns. The response includes search query summaries optimized for analytics dashboards and reporting interfaces.\n\nThis operation is essential for continuous improvement of the search experience, identification of trending topics users are seeking, detection of search feature usage patterns, and data-driven decisions about content creation priorities based on unmet user information needs.","parameters":[],"requestBody":{"description":"Search criteria, filtering parameters, and pagination settings for retrieving search history audit records","typeName":"IDiscussionBoardSearchHistory.IRequest"},"responseBody":{"description":"Paginated list of search history audit records matching the specified filter criteria with comprehensive analytics metadata","typeName":"IPageIDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated visitors who can browse public discussions and view content but cannot post, comment, or interact with the platform. Guests have read-only access to encourage registration for participation.","kind":"guest"},{"name":"member","description":"Registered and authenticated users who can create discussion topics, post replies, edit their own content, vote on posts, and participate fully in economic and political discussions. Members represent the core user base of the platform.","kind":"member"},{"name":"moderator","description":"Trusted community members with elevated permissions to review flagged content, hide or remove inappropriate posts, warn or temporarily suspend users who violate community guidelines, and maintain civil discourse standards across economic and political discussions.","kind":"member"},{"name":"administrator","description":"System administrators with full platform control including user management, moderator appointment, category management, system configuration, access to all administrative functions, and ultimate authority over platform operations and policy enforcement.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIDiscussionBoardCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardLoginHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardLoginHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardBlockedUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardBlockedUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardTopic.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopic.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardFollowedTag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardFollowedTag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardWatchedTopic.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardWatchedTopic.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardReply":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReply"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardEditHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardEditHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardTag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationAction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardWarning"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardSuspension.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSuspension.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardBan.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardBan.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardAppeal":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAppeal"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardSecurityLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSecurityLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardModerationAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardSearchHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSearchHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Optional email address for newsletter signup.\n\nUsed for conversion tracking and marketing outreach. Not required for guest browsing."},"session_metadata":{"$ref":"#/components/schemas/IDiscussionBoardGuest.ISessionMetadata","description":"Optional session tracking metadata.\n\nCaptures IP address and user agent for analytics. Typically populated automatically by backend from request context."}},"required":[],"description":"Guest session creation request for temporary browsing access.\n\nGuests can optionally provide email for newsletter signup. Session metadata is typically captured server-side from request headers.","x-autobe-prisma-schema":"discussion_board_guests"},"IDiscussionBoardGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest session.\n\nGenerated upon guest account creation."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response for guest session with JWT tokens.\n\nReturned after successful guest registration, enabling tracked browsing sessions."},"IDiscussionBoardGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Current valid refresh token for obtaining new access token.\n\nMust be a non-expired, non-revoked refresh token from a previous guest session."}},"required":["refresh_token"],"description":"Refresh token request for renewing guest access tokens.\n\nContains the refresh token to be validated and exchanged for a new access token."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[a-zA-Z0-9_-]+$","description":"Unique username for account identification.\n\n3-30 characters, alphanumeric with hyphens and underscores. Immutable after account creation."},"email":{"type":"string","format":"email","description":"Email address for authentication and notifications.\n\nMust be unique and will require verification."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Password in plain text for account security.\n\nMust contain uppercase, lowercase, number, and special character. Backend hashes before storage."},"display_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":50},{"type":"null"}],"description":"Optional display name for public display.\n\nCan differ from username and be changed later."}},"required":["username","email","password"],"description":"Member registration information for creating new accounts.\n\nRequires unique username, verified email, and secure password meeting complexity requirements.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member.\n\nReferences discussion_board_members.id."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response for member authentication with JWT tokens.\n\nReturned after successful login, registration, or token refresh."},"IDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier."},"username":{"type":"string","description":"Unique username (3-30 characters)."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred public display name."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User biography (max 500 characters)."},"avatar_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Profile picture URL."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional geographic location."},"website":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional personal website URL."},"email_verified":{"type":"boolean","description":"Whether email has been verified."},"account_status":{"type":"string","description":"Account status: active, pending_verification, suspended, banned, deactivated."},"profile_visibility":{"type":"string","description":"Profile visibility setting: public, members_only, private."},"activity_visibility":{"type":"string","description":"Activity history visibility: public, members_only, private."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp."},"last_activity_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Most recent platform activity timestamp."}},"required":["id","username","email_verified","account_status","profile_visibility","activity_visibility","created_at"],"description":"Complete member account information excluding sensitive fields.\n\nEmail and password_hash are never included in responses.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardMember.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address or username for login.\n\nAccepts either the registered email or unique username."},"password":{"type":"string","description":"Password in plain text for authentication.\n\nValidated against stored password hash."}},"required":["email","password"],"description":"Login credentials for member authentication.\n\nContains email/username and password for credential validation."},"IDiscussionBoardMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Current valid refresh token.\n\nMust be non-expired and non-revoked."}},"required":["refresh_token"],"description":"Refresh token request for renewing member access tokens.\n\nContains the refresh token to exchange for new access token."},"IDiscussionBoardModerator.ICreate":{"type":"object","properties":{"appointed_by_admin_id":{"type":"string","format":"uuid","description":"Administrator who appointed this moderator.\n\nReferences discussion_board_administrators.id."},"username":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[a-zA-Z0-9_-]+$","description":"Unique username for moderator account.\n\n3-30 characters, alphanumeric with hyphens and underscores."},"email":{"type":"string","format":"email","description":"Email address for moderator authentication.\n\nMust be unique and will require verification."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Password in plain text.\n\nBackend hashes before storage using bcrypt cost factor 12."}},"required":["appointed_by_admin_id","username","email","password"],"description":"Moderator registration information for account creation.\n\nRequires appointing administrator reference and standard account credentials.","x-autobe-prisma-schema":"discussion_board_moderators"},"IDiscussionBoardModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated moderator."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response for moderator authentication.\n\nReturned after successful login, registration, or token refresh."},"IDiscussionBoardAdministrator.ICreate":{"type":"object","properties":{"username":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[a-zA-Z0-9_-]+$","description":"Unique username for administrator account."},"email":{"type":"string","format":"email","description":"Email address for administrator authentication."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Password in plain text for account security."}},"required":["username","email","password"],"description":"Administrator registration credentials.\n\nCreates new administrator account with platform control privileges.","x-autobe-prisma-schema":"discussion_board_administrators"},"IDiscussionBoardAdministrator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response for administrator authentication."},"IDiscussionBoardAdministrator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address or username for login."},"password":{"type":"string","description":"Password for authentication."}},"required":["email","password"],"description":"Login credentials for administrator authentication."},"IDiscussionBoardAdministrator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Current valid refresh token."}},"required":["refresh_token"],"description":"Refresh token request for administrator access renewal."},"IDiscussionBoardAdministrator.IResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for password reset.\n\nSystem sends reset token to this email if account exists."}},"required":["email"],"description":"Password reset request containing administrator email."},"IDiscussionBoardAdministrator.IResetRequestResult":{"type":"object","properties":{"message":{"type":"string","description":"Confirmation message about password reset email.\n\nAlways returns success message regardless of account existence for security."}},"required":["message"],"description":"Password reset request confirmation response."},"IDiscussionBoardAdministrator.IResetComplete":{"type":"object","properties":{"reset_token":{"type":"string","description":"Reset token from email link.\n\nValidated against stored token hash."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password meeting security requirements."},"new_password_confirm":{"type":"string","description":"Password confirmation.\n\nMust match new_password."}},"required":["reset_token","new_password","new_password_confirm"],"description":"Password reset completion data with token and new password."},"IDiscussionBoardAdministrator.IResetCompleteResult":{"type":"object","properties":{"message":{"type":"string","description":"Success confirmation message.\n\nInstructs user to log in with new password."}},"required":["message"],"description":"Password reset completion confirmation."},"IDiscussionBoardAdministrator.IChangePassword":{"type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification.\n\nPrevents unauthorized password changes."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password meeting security requirements."},"new_password_confirm":{"type":"string","description":"Password confirmation matching new_password."}},"required":["current_password","new_password","new_password_confirm"],"description":"Password change request with current password verification."},"IDiscussionBoardAdministrator.IChangePasswordResult":{"type":"object","properties":{"message":{"type":"string","description":"Success confirmation.\n\nNotifies about session revocation requiring re-login."}},"required":["message"],"description":"Password change confirmation response."},"IDiscussionBoardModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address or username for login."},"password":{"type":"string","description":"Password for authentication."}},"required":["email","password"],"description":"Login credentials for moderator authentication."},"IDiscussionBoardModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Current valid refresh token."}},"required":["refresh_token"],"description":"Refresh token request for moderator access renewal."},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve. Page numbering starts at 1. If not provided, defaults to page 1.\n\nUsed in conjunction with limit to implement pagination for large category lists."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of category records to return per page.\n\nControls page size for pagination. If not provided, defaults to 25 items per page. Maximum value is 100 to prevent excessive data transfer.\n\nAllows users to customize list density based on their preferences and use cases."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text search query for finding categories by name or description.\n\nSupports full-text search using PostgreSQL trigram indexing for fuzzy matching. Searches across category name and description fields.\n\nExample: 'macro' matches 'Macroeconomics' category."},"parent_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter categories by parent category relationship.\n\nWhen provided, returns only categories that are children of the specified parent category. When null or omitted, returns all categories regardless of hierarchy.\n\nUseful for navigating category hierarchy and displaying subcategories."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter categories by active status.\n\nWhen true, returns only active categories available for use. When false, returns only inactive categories. When null or omitted, returns all categories regardless of status.\n\nHelps administrators identify categories available for topic assignment versus disabled categories."},"sort_by":{"oneOf":[{"const":"display_order"},{"const":"topic_count"},{"const":"name"},{"const":"created_at"},{"type":"null"}],"description":"Field to sort results by.\n\nSupported values:\n- display_order: Administrative ordering (default)\n- topic_count: Number of topics in category (most active first)\n- name: Alphabetical ordering\n- created_at: Creation timestamp (newest first)\n\nIf not provided, defaults to display_order."},"sort_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for ordering results.\n\nSupported values:\n- asc: Ascending order (A-Z, 0-9, oldest-newest)\n- desc: Descending order (Z-A, 9-0, newest-oldest)\n\nIf not provided, defaults to ascending except for topic_count which defaults to descending."}},"required":[],"description":"Request parameters for searching and filtering discussion board categories with pagination and sorting.\n\nSupports advanced category discovery through text search, hierarchical filtering, status filtering, and multiple sorting options. Enables efficient category browsing for topic creation workflows, administrative category management, and category exploration interfaces."},"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the discussion board category.\n\nThis UUID serves as the primary key for category records and is used throughout the system for category references, topic categorization, and hierarchical relationships."},"name":{"type":"string","description":"Category name displayed throughout the platform.\n\nExamples include 'Economics', 'Macroeconomics', 'Politics', 'International Relations'. The name must be unique across all categories and is used in navigation menus, category selection interfaces, and content organization displays.\n\nLength constraint: 3-50 characters as defined in business rules."},"slug":{"type":"string","description":"URL-friendly identifier derived from the category name.\n\nUsed for clean, readable category URLs (e.g., '/category/macroeconomics'). Must be unique for proper routing. Lowercase alphanumeric with hyphens only."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the category's purpose and scope.\n\nHelps users understand what discussion topics belong in this category. Displayed on category pages and selection interfaces to guide appropriate category usage.\n\nOptional but recommended for user clarity in determining correct category assignment for their discussion topics."},"parent_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the parent category for hierarchical organization.\n\nNull for top-level categories (Economics, Politics). Contains UUID reference to parent category for subcategories (e.g., Macroeconomics references Economics as parent).\n\nEnables multi-level category taxonomy for organizing economic and political discussion topics into logical hierarchies."},"display_order":{"type":"integer","description":"Controls the order in which categories appear in listings and navigation menus.\n\nLower numbers appear first, enabling administrators to prioritize category display. For example, Economics=1, Politics=2 ensures Economics appears before Politics in category lists.\n\nAllows custom organization beyond alphabetical sorting."},"is_active":{"type":"boolean","description":"Indicates whether the category is currently visible and available for use.\n\nWhen true, the category appears in category selection interfaces and accepts new topic assignments. When false, the category is hidden from user-facing selection but existing topics remain accessible.\n\nAllows temporary disabling without deletion, supporting graceful category phase-out."},"topic_count":{"type":"integer","description":"Number of discussion topics currently assigned to this category.\n\nUpdated when topics are created or deleted. Used for displaying category activity levels and helping users identify active discussion areas.\n\nMaintained via application logic or database triggers. Default value is 0 for newly created categories."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the category was created in the system.\n\nUsed for audit trail and tracking category establishment history. Automatically set on record creation.\n\nProvides temporal context for category lifecycle management."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent modification to category information.\n\nRecords when name, description, status, display order, or other category properties were last changed. Used for audit trail and change tracking.\n\nAutomatically updated on record modification."}},"required":["id","name","slug","description","parent_category_id","display_order","is_active","topic_count","created_at","updated_at"],"description":"Complete representation of a discussion board category with full metadata and configuration.\n\nCategories provide the foundational organizational structure for classifying discussion topics into Economics and Politics domains, supporting hierarchical structures with parent-child relationships. This type includes all category properties for detailed viewing, administrative management, and category configuration.\n\nCategories enable users to browse organized discussions and administrators to manage the discussion board's organizational structure.","x-autobe-prisma-schema":"discussion_board_categories"},"IDiscussionBoardCategory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the discussion board category.\n\nThis UUID serves as the primary key for category records and is used throughout the system for category references, topic categorization, and hierarchical relationships."},"name":{"type":"string","description":"Category name displayed throughout the platform.\n\nExamples include 'Economics', 'Macroeconomics', 'Politics', 'International Relations'. The name must be unique across all categories and is used in navigation menus, category selection interfaces, and content organization displays.\n\nLength constraint: 3-50 characters as defined in business rules."},"slug":{"type":"string","description":"URL-friendly identifier derived from the category name.\n\nUsed for clean, readable category URLs (e.g., '/category/macroeconomics'). Must be unique for proper routing. Lowercase alphanumeric with hyphens only."},"parent_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the parent category for hierarchical organization.\n\nNull for top-level categories (Economics, Politics). Contains UUID reference to parent category for subcategories (e.g., Macroeconomics references Economics as parent).\n\nEnables multi-level category taxonomy for organizing economic and political discussion topics into logical hierarchies."},"display_order":{"type":"integer","description":"Controls the order in which categories appear in listings and navigation menus.\n\nLower numbers appear first, enabling administrators to prioritize category display. For example, Economics=1, Politics=2 ensures Economics appears before Politics in category lists.\n\nAllows custom organization beyond alphabetical sorting."},"is_active":{"type":"boolean","description":"Indicates whether the category is currently visible and available for use.\n\nWhen true, the category appears in category selection interfaces and accepts new topic assignments. When false, the category is hidden from user-facing selection but existing topics remain accessible.\n\nAllows temporary disabling without deletion, supporting graceful category phase-out."},"topic_count":{"type":"integer","description":"Number of discussion topics currently assigned to this category.\n\nUpdated when topics are created or deleted. Used for displaying category activity levels and helping users identify active discussion areas.\n\nMaintained via application logic or database triggers. Default value is 0 for newly created categories."}},"required":["id","name","slug","parent_category_id","display_order","is_active","topic_count"],"description":"Summary representation of a discussion board category optimized for list displays and category selection interfaces.\n\nThis type provides essential category information for category browsing, topic creation workflows, and navigation menus without the full detail required for category management. It includes the category's identity, name, hierarchical position, display configuration, and activity metrics.\n\nCategories provide the foundational organizational structure for classifying discussion topics into Economics and Politics domains, supporting hierarchical structures with parent-child relationships.","x-autobe-prisma-schema":"discussion_board_categories"},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":50,"description":"Category name to be displayed throughout the platform.\n\nMust be unique across all existing categories. Examples: 'Economics', 'Macroeconomics', 'Politics', 'International Relations'.\n\nLength: 3-50 characters as enforced by business rules."},"slug":{"type":"string","pattern":"^[a-z0-9-]+$","description":"URL-friendly identifier for the category.\n\nMust be lowercase alphanumeric with hyphens only. Must be unique across all categories for proper routing. Example: 'macroeconomics', 'international-relations'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the category's purpose and scope.\n\nHelps users understand what types of discussion topics belong in this category. Displayed on category pages and in selection interfaces.\n\nOptional but recommended for clarity in guiding users to appropriate category selection."},"parent_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to parent category for creating hierarchical structure.\n\nNull for top-level categories (Economics, Politics). Provide UUID of existing active parent category for subcategories.\n\nEnables multi-level taxonomy: Economics > Macroeconomics, Politics > International Relations."},"display_order":{"type":"integer","minimum":0,"description":"Position of this category in display listings.\n\nLower numbers appear first in navigation menus and category lists. Allows administrators to prioritize important categories.\n\nExample: Economics=1, Politics=2, Current Events=3"},"is_active":{"type":"boolean","description":"Whether the category should be immediately active and available for use.\n\nTrue makes the category visible in selection interfaces. False creates an inactive category that can be activated later.\n\nDefault recommendation: true for immediate availability."}},"required":["name","slug","display_order","is_active"],"description":"Input data for creating a new discussion board category.\n\nContains all required information to establish a new category in the organizational taxonomy including name, URL slug, optional parent relationship, display position, and active status.\n\nThis type is used by administrators during platform setup and ongoing content organization management to create new categories for Economics, Politics, and related subject areas.","x-autobe-prisma-schema":"discussion_board_categories"},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","minLength":3,"maxLength":50},{"type":"null"}],"description":"Updated category name if being modified.\n\nMust remain unique across all categories. If provided, must meet length requirements (3-50 characters).\n\nOmit this field if not changing the category name."},"slug":{"oneOf":[{"type":"string","pattern":"^[a-z0-9-]+$"},{"type":"null"}],"description":"Updated URL-friendly identifier if being modified.\n\nMust remain unique and follow slug format (lowercase alphanumeric with hyphens). Changing the slug affects category URLs.\n\nOmit this field if not changing the URL slug."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated category description if being modified.\n\nProvide new description text to clarify category purpose or null to clear existing description.\n\nOmit this field to keep current description unchanged."},"parent_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Updated parent category reference to reorganize hierarchy.\n\nProvide UUID of new parent category to change hierarchical position, or null to make this a top-level category. Must not create circular references.\n\nOmit this field to maintain current parent relationship."},"display_order":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Updated display position if being modified.\n\nLower numbers appear first in listings. Change this to reorder categories in navigation menus.\n\nOmit this field to maintain current display position."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Updated active status if being modified.\n\nSet to false to temporarily disable category without deletion. Set to true to reactivate a disabled category.\n\nOmit this field to maintain current active status."}},"required":[],"description":"Update data for modifying an existing discussion board category.\n\nAll fields are optional - only include fields that are being changed. Supports updating category name, slug, description, parent relationship, display order, and active status.\n\nEnables administrators to maintain and refine the category taxonomy as the platform evolves and discussion topics change.","x-autobe-prisma-schema":"discussion_board_categories"},"IDiscussionBoardMember.IPublic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier."},"username":{"type":"string","description":"Member username."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Public display name."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User biography."},"avatar_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Profile picture URL."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Geographic location."},"website":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Personal website URL."},"email_verified":{"type":"boolean","description":"Email verification status flag."},"account_status":{"type":"string","description":"Account status."},"created_at":{"type":"string","format":"date-time","description":"Registration date."},"last_activity_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Last activity timestamp."}},"required":["id","username","email_verified","account_status","created_at"],"description":"Public member profile excluding private fields.\n\nEmail and password_hash never included.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier."},"username":{"type":"string","description":"Member username."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name if set."},"avatar_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Profile picture URL."},"account_status":{"type":"string","description":"Account status indicator."},"created_at":{"type":"string","format":"date-time","description":"Registration date."}},"required":["id","username","account_status","created_at"],"description":"Member summary for list displays.\n\nExcludes email, password_hash, and detailed fields.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardMember.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string","minLength":1,"maxLength":200},{"type":"null"}],"description":"Search term for partial matching against username or display_name fields.\n\nSupports full-text search with trigram indexing for fuzzy matching. Minimum 1 character, maximum 200 characters."},"account_status":{"oneOf":[{"const":"active"},{"const":"pending_verification"},{"const":"suspended"},{"const":"banned"},{"const":"deactivated"},{"type":"null"}],"description":"Filter results by specific account status.\n\nRestricts results to members with the specified status. Options include: 'active' (normal operation), 'pending_verification' (email not verified), 'suspended' (temporary restriction), 'banned' (permanent block), or 'deactivated' (user-initiated)."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter results by email verification status.\n\nWhen true, returns only members who have verified their email. When false, returns only unverified members. Null returns all members regardless of verification status."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve, starting from 1. Used with limit to navigate large result sets. Defaults to 1 if not provided."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of records per page.\n\nSpecifies how many member records to return in a single page. Typical values: 10-100, default often 25. Maximum 100 to prevent excessive data transfer and maintain performance."}},"required":[],"description":"Member search and filter parameters.\n\nAll filters are optional, enabling both broad queries (all members) and targeted searches with multiple criteria. Pagination parameters control result set size and navigation."},"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"display_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":50},{"type":"null"}],"description":"Updated preferred display name for public presentation.\n\nReplaces the current display_name value if provided. Can differ from the immutable username and supports Unicode characters for international users. Length constraints: 1-50 characters."},"bio":{"oneOf":[{"type":"string","maxLength":500},{"type":"null"}],"description":"Updated user biography or about me section.\n\nReplaces the current bio value if provided. Plain text with auto-detected links, maximum 500 characters. Subject to profanity filtering per platform policies."},"avatar_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated URL to user's profile picture.\n\nReplaces the current avatar_url if provided. Must be valid HTTP/HTTPS URL. Null to remove current avatar and revert to default."},"location":{"oneOf":[{"type":"string","maxLength":100},{"type":"null"}],"description":"Updated optional geographic location displayed on profile.\n\nReplaces the current location value if provided. Maximum 100 characters, typically city/country format."},"website":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated personal website or blog URL.\n\nReplaces the current website value if provided. Must be valid HTTP/HTTPS URL, maximum 200 characters."},"profile_visibility":{"oneOf":[{"const":"public"},{"const":"members_only"},{"const":"private"},{"type":"null"}],"description":"Updated profile visibility setting controlling who can view the profile.\n\nOptions: 'public' (visible to all including guests), 'members_only' (authenticated users only), or 'private' (hidden from search and direct access)."},"activity_visibility":{"oneOf":[{"const":"public"},{"const":"members_only"},{"const":"private"},{"type":"null"}],"description":"Updated activity history visibility setting.\n\nControls visibility of the member's topics and replies on their profile. Independent from profile_visibility but constrained by privacy hierarchy (cannot be public if profile is private)."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated preferred timezone for timestamp display.\n\nIANA timezone identifier (e.g., 'America/New_York', 'Europe/London') used for displaying timestamps in the user's local time."},"language":{"oneOf":[{"type":"string","pattern":"^[a-z]{2}$"},{"type":"null"}],"description":"Updated preferred interface language.\n\nISO 639-1 language code (e.g., 'en', 'es', 'de') controlling interface element translations."}},"required":[],"description":"Member profile update data.\n\nAll fields optional to support partial updates. Excludes immutable fields (username) and security-critical fields (email, password) which require separate operations with verification workflows.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardMember.INotificationPreferences":{"type":"object","description":"Comprehensive notification preference configuration controlling how members receive platform notifications.\n\nThis schema represents the complete set of notification settings that control notification delivery across all supported event types and channels. Each notification event type (replies to topics, mentions, vote milestones, moderation actions, etc.) can be independently configured for in-app notifications and email notifications.\n\nAdditional preferences control notification batching through digest modes (realtime, hourly, daily, weekly), quiet hours to suppress email notifications during specified time windows, and timezone configuration for accurate scheduling.\n\nThese preferences are stored in the discussion_board_notification_preferences table with a one-to-one relationship to each member account.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification preferences record.\n\nThis primary key uniquely identifies the preference configuration record in the discussion_board_notification_preferences table."},"user_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who owns these notification preferences.\n\nReferences the discussion_board_members.id field establishing the one-to-one relationship between members and their notification configuration."},"reply_to_topic_in_app":{"type":"boolean","description":"Enable in-app notifications when someone replies to the user's discussion topic.\n\nWhen enabled, the user receives real-time in-app notifications displayed in the notification center when other members post replies to discussions they created.\n\nThis setting is enabled by default for new users as topic replies are highly relevant engagement events."},"reply_to_topic_email":{"type":"boolean","description":"Enable email notifications when someone replies to the user's discussion topic.\n\nWhen enabled, the user receives email notifications sent to their registered email address when other members post replies to discussions they created.\n\nThis setting is enabled by default for new users, subject to digest frequency and quiet hours configuration."},"reply_to_comment_in_app":{"type":"boolean","description":"Enable in-app notifications when someone replies to the user's comment in a discussion thread.\n\nWhen enabled, the user receives real-time in-app notifications when other members post nested replies responding to their comments within discussion threads.\n\nThis setting is enabled by default to support threaded conversation engagement."},"reply_to_comment_email":{"type":"boolean","description":"Enable email notifications when someone replies to the user's comment in a discussion thread.\n\nWhen enabled, the user receives email notifications when other members post nested replies to their comments, subject to batching and quiet hours rules.\n\nThis setting is enabled by default for active discussion participation."},"mention_in_app":{"type":"boolean","description":"Enable in-app notifications when the user is mentioned using @username syntax.\n\nWhen enabled, the user receives immediate in-app notifications when other members explicitly mention them in discussion topics or replies.\n\nThis setting is enabled by default as mentions represent direct engagement requiring user attention."},"mention_email":{"type":"boolean","description":"Enable email notifications when the user is mentioned using @username syntax.\n\nWhen enabled, the user receives email notifications when mentioned in discussions, ensuring they are alerted even when not actively browsing the platform.\n\nThis setting is enabled by default for high-priority engagement events."},"vote_milestone_in_app":{"type":"boolean","description":"Enable in-app notifications when the user's content reaches vote milestones.\n\nWhen enabled, the user receives in-app notifications when their topics or replies reach significant vote thresholds (10, 25, 50, 100, 250, 500 votes) indicating community recognition.\n\nThis setting is enabled by default (in-app only) to provide positive feedback without excessive emails."},"vote_milestone_email":{"type":"boolean","description":"Enable email notifications when the user's content reaches vote milestones.\n\nWhen enabled, the user receives email notifications for vote achievements, typically disabled by default to prevent email volume from engagement metrics.\n\nUsers can enable this to receive milestone celebration emails."},"moderation_action_in_app":{"type":"boolean","description":"Enable in-app notifications for moderation actions affecting the user's account or content.\n\nWhen enabled, the user receives in-app notifications when moderators take actions including content removal, warnings, suspensions, or bans.\n\nThis setting is enabled by default and should not be disabled as users must be informed of moderation actions."},"moderation_action_email":{"type":"boolean","description":"Enable email notifications for moderation actions affecting the user's account or content.\n\nWhen enabled, the user receives email notifications for all moderation actions, ensuring they are informed even when not browsing the platform.\n\nThis setting is enabled by default and is critical for transparency and due process in moderation."},"watched_topic_in_app":{"type":"boolean","description":"Enable in-app notifications for updates to discussion topics the user is watching.\n\nWhen enabled, the user receives in-app notifications when new replies or significant activity occurs on topics they have explicitly chosen to watch.\n\nThis setting is disabled by default until users explicitly watch topics."},"watched_topic_email":{"type":"boolean","description":"Enable email notifications for updates to discussion topics the user is watching.\n\nWhen enabled, the user receives email notifications for activity on watched topics, subject to batching rules to prevent excessive emails for highly active discussions.\n\nThis setting is disabled by default and enabled when users first watch a topic."},"system_announcement_in_app":{"type":"boolean","description":"Enable in-app notifications for system-wide announcements from administrators.\n\nWhen enabled, the user receives in-app notifications for important platform announcements including policy changes, new features, and system maintenance.\n\nThis setting is enabled by default to ensure users receive critical platform information."},"system_announcement_email":{"type":"boolean","description":"Enable email notifications for system-wide announcements from administrators.\n\nWhen enabled, the user receives email notifications for platform announcements, ensuring awareness of important changes even when not actively using the platform.\n\nThis setting is enabled by default for critical system communications."},"digest_frequency":{"oneOf":[{"const":"realtime","description":"Email notification batching frequency controlling how notifications are grouped and delivered.\n\nValid values:\n- realtime: Send each notification immediately as events occur\n- hourly: Batch notifications into hourly digest emails sent on the hour\n- daily: Combine all notifications into a daily digest sent at user's preferred time\n- weekly: Aggregate notifications into a weekly digest sent on user's preferred day\n\nDigest mode helps prevent notification fatigue by consolidating multiple alerts into periodic summaries, while realtime mode ensures immediate awareness of important events."},{"const":"hourly","description":"Email notification batching frequency controlling how notifications are grouped and delivered.\n\nValid values:\n- realtime: Send each notification immediately as events occur\n- hourly: Batch notifications into hourly digest emails sent on the hour\n- daily: Combine all notifications into a daily digest sent at user's preferred time\n- weekly: Aggregate notifications into a weekly digest sent on user's preferred day\n\nDigest mode helps prevent notification fatigue by consolidating multiple alerts into periodic summaries, while realtime mode ensures immediate awareness of important events."},{"const":"daily","description":"Email notification batching frequency controlling how notifications are grouped and delivered.\n\nValid values:\n- realtime: Send each notification immediately as events occur\n- hourly: Batch notifications into hourly digest emails sent on the hour\n- daily: Combine all notifications into a daily digest sent at user's preferred time\n- weekly: Aggregate notifications into a weekly digest sent on user's preferred day\n\nDigest mode helps prevent notification fatigue by consolidating multiple alerts into periodic summaries, while realtime mode ensures immediate awareness of important events."},{"const":"weekly","description":"Email notification batching frequency controlling how notifications are grouped and delivered.\n\nValid values:\n- realtime: Send each notification immediately as events occur\n- hourly: Batch notifications into hourly digest emails sent on the hour\n- daily: Combine all notifications into a daily digest sent at user's preferred time\n- weekly: Aggregate notifications into a weekly digest sent on user's preferred day\n\nDigest mode helps prevent notification fatigue by consolidating multiple alerts into periodic summaries, while realtime mode ensures immediate awareness of important events."}],"description":"Email notification batching frequency controlling how notifications are grouped and delivered.\n\nValid values:\n- realtime: Send each notification immediately as events occur\n- hourly: Batch notifications into hourly digest emails sent on the hour\n- daily: Combine all notifications into a daily digest sent at user's preferred time\n- weekly: Aggregate notifications into a weekly digest sent on user's preferred day\n\nDigest mode helps prevent notification fatigue by consolidating multiple alerts into periodic summaries, while realtime mode ensures immediate awareness of important events."},"quiet_hours_enabled":{"type":"boolean","description":"Whether quiet hours are active to suppress email notifications during specified time windows.\n\nWhen enabled, email notifications triggered during the quiet hours window are delayed and delivered as a batch when quiet hours end. This respects user sleep schedules and focused work periods.\n\nIn-app notifications are not affected by quiet hours as users can disable them separately if needed."},"quiet_hours_start":{"oneOf":[{"type":"string","pattern":"^([01]\\d|2[0-3]):[0-5]\\d$"},{"type":"null"}],"description":"Quiet hours start time in HH:mm format using 24-hour notation.\n\nExample values: \"22:00\" for 10 PM, \"01:30\" for 1:30 AM. This field is required when quiet_hours_enabled is true and null when quiet hours are disabled.\n\nThe start time is interpreted in the user's configured timezone for accurate local time calculation."},"quiet_hours_end":{"oneOf":[{"type":"string","pattern":"^([01]\\d|2[0-3]):[0-5]\\d$"},{"type":"null"}],"description":"Quiet hours end time in HH:mm format using 24-hour notation.\n\nExample values: \"07:00\" for 7 AM, \"09:30\" for 9:30 AM. This field is required when quiet_hours_enabled is true and null when quiet hours are disabled.\n\nEmail notifications queued during quiet hours are delivered when this end time is reached."},"timezone":{"type":"string","description":"User's timezone for digest scheduling and quiet hours calculation.\n\nMust be a valid IANA timezone identifier (e.g., 'America/New_York', 'Europe/London', 'Asia/Tokyo'). This ensures digest emails are sent at appropriate local times and quiet hours are enforced according to the user's actual location.\n\nThe timezone affects when daily/weekly digests are delivered and when quiet hours windows are calculated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification preferences record was initially created.\n\nTypically set when the user first registers their account, establishing default notification configuration that the user can subsequently customize."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification preferences were last modified by the user.\n\nUpdated whenever the user changes any notification setting, enabling tracking of preference evolution and audit trail for notification configuration changes."}},"required":["id","user_id","reply_to_topic_in_app","reply_to_topic_email","reply_to_comment_in_app","reply_to_comment_email","mention_in_app","mention_email","vote_milestone_in_app","vote_milestone_email","moderation_action_in_app","moderation_action_email","watched_topic_in_app","watched_topic_email","system_announcement_in_app","system_announcement_email","digest_frequency","quiet_hours_enabled","timezone","created_at","updated_at"],"x-autobe-prisma-schema":"discussion_board_notification_preferences"},"IDiscussionBoardMember.INotificationPreferences.IUpdate":{"type":"object","properties":{"reply_to_topic_in_app":{"type":"boolean","description":"Enable or disable in-app notifications when someone replies to the user's discussion topic.\n\nThis setting controls whether the user receives real-time notifications in the notification center when other members post replies to discussion topics they created. In-app notifications appear as badge counts and dropdown items in the platform interface.\n\nWhen enabled, users see immediate feedback about engagement with their topics, encouraging continued participation in discussions. When disabled, users will not be alerted through the in-app notification center about replies to their topics."},"reply_to_topic_email":{"type":"boolean","description":"Enable or disable email notifications when someone replies to the user's discussion topic.\n\nThis setting controls whether the user receives email notifications sent to their registered email address when other members post replies to discussion topics they created. Email notifications provide out-of-platform alerts that drive return visits.\n\nWhen enabled, users receive email alerts about topic engagement even when not actively using the platform. When disabled, users will not receive emails about replies to their topics, though in-app notifications may still be active if configured separately."},"reply_to_comment_in_app":{"type":"boolean","description":"Enable or disable in-app notifications when someone replies to the user's comment or reply.\n\nThis setting controls whether the user receives real-time notifications in the notification center when other members post direct replies to their comments within discussion threads. This supports threaded conversation engagement.\n\nWhen enabled, users stay informed about responses to their specific contributions in threaded discussions. When disabled, users will not be alerted through the in-app notification center about replies to their comments."},"reply_to_comment_email":{"type":"boolean","description":"Enable or disable email notifications when someone replies to the user's comment or reply.\n\nThis setting controls whether the user receives email notifications when other members post direct replies to their comments within discussion threads. Email alerts keep users engaged with ongoing conversations.\n\nWhen enabled, users receive email alerts about direct responses to their comments. When disabled, users will not receive emails about comment replies, though in-app notifications may still be active if configured separately."},"mention_in_app":{"type":"boolean","description":"Enable or disable in-app notifications when the user is mentioned with @username syntax.\n\nThis setting controls whether the user receives real-time notifications in the notification center when other members mention them using @username in discussion topics or replies. Mentions are direct engagement mechanisms that draw users into relevant conversations.\n\nWhen enabled, users are immediately alerted when they are referenced in discussions. When disabled, users will not receive in-app notifications for @mentions."},"mention_email":{"type":"boolean","description":"Enable or disable email notifications when the user is mentioned with @username syntax.\n\nThis setting controls whether the user receives email notifications when other members mention them using @username in discussion topics or replies. Email mention alerts ensure users don't miss being pulled into relevant discussions.\n\nWhen enabled, users receive email alerts when mentioned even when not actively using the platform. When disabled, users will not receive emails for @mentions."},"vote_milestone_in_app":{"type":"boolean","description":"Enable or disable in-app notifications when the user's content reaches vote milestones.\n\nThis setting controls whether the user receives notifications when their discussion topics or replies reach specific vote thresholds (10, 25, 50, 100, 250, 500 upvotes). Vote milestone notifications provide positive reinforcement for quality contributions.\n\nWhen enabled, users are celebrated for creating high-quality content that resonates with the community. When disabled, users will not receive milestone notifications."},"vote_milestone_email":{"type":"boolean","description":"Enable or disable email notifications when the user's content reaches vote milestones.\n\nThis setting controls whether the user receives email notifications when their discussion topics or replies reach specific vote thresholds. Email milestone notifications share achievement moments with users.\n\nWhen enabled, users receive email celebration of their content reaching vote milestones. When disabled, users will not receive emails for vote milestones."},"moderation_action_in_app":{"type":"boolean","description":"Enable or disable in-app notifications for moderation actions affecting the user's account or content.\n\nThis setting controls whether the user receives notifications when moderators take actions on their content (warnings, content removal, suspensions). Moderation notifications are critical for transparency and user rights.\n\nWhen enabled, users are immediately informed of moderation actions through the in-app notification center. This setting should typically remain enabled for fairness and transparency."},"moderation_action_email":{"type":"boolean","description":"Enable or disable email notifications for moderation actions affecting the user's account or content.\n\nThis setting controls whether the user receives email notifications when moderators take actions on their content (warnings, content removal, suspensions). Email notifications ensure users are informed of critical moderation events even when not actively using the platform.\n\nWhen enabled, users receive email alerts for moderation actions with complete context and appeal information. This setting should typically remain enabled for fairness."},"watched_topic_in_app":{"type":"boolean","description":"Enable or disable in-app notifications for updates to discussion topics the user is watching.\n\nThis setting controls whether the user receives notifications when new activity occurs on topics they have explicitly chosen to watch. Watched topic notifications keep users engaged with discussions they care about.\n\nWhen enabled, users receive in-app alerts about new replies, votes, or other activity on watched topics. When disabled, users must manually check watched topics for updates."},"watched_topic_email":{"type":"boolean","description":"Enable or disable email notifications for updates to discussion topics the user is watching.\n\nThis setting controls whether the user receives email notifications when new activity occurs on topics they are watching. Email alerts drive return visits for followed discussions.\n\nWhen enabled, users receive email updates about activity on watched topics. When disabled, users will not receive emails for watched topic updates."},"system_announcement_in_app":{"type":"boolean","description":"Enable or disable in-app notifications for system-wide announcements from administrators.\n\nThis setting controls whether the user receives notifications when administrators publish important platform announcements about policy changes, feature updates, or critical system information.\n\nWhen enabled, users stay informed about platform changes and important announcements. When disabled, users may miss important system communications."},"system_announcement_email":{"type":"boolean","description":"Enable or disable email notifications for system-wide announcements from administrators.\n\nThis setting controls whether the user receives email notifications for important platform announcements. Email ensures critical system information reaches users even when they are not actively using the platform.\n\nWhen enabled, users receive email alerts for system announcements. When disabled, users will not receive announcement emails."},"digest_frequency":{"oneOf":[{"const":"realtime","description":"Email notification batching frequency controlling how notifications are combined and delivered.\n\nThis setting determines whether email notifications are sent immediately (realtime) or batched into periodic digests (hourly, daily, weekly). Digest mode reduces email volume by combining multiple notifications into summary emails.\n\nValid values:\n- 'realtime': Send each notification immediately as events occur\n- 'hourly': Combine all notifications from the past hour into a single digest email\n- 'daily': Combine all notifications from the past 24 hours into a daily summary\n- 'weekly': Combine all notifications from the past week into a weekly digest\n\nDigest emails include summary counts, grouped notifications by type, and links to all mentioned content."},{"const":"hourly","description":"Email notification batching frequency controlling how notifications are combined and delivered.\n\nThis setting determines whether email notifications are sent immediately (realtime) or batched into periodic digests (hourly, daily, weekly). Digest mode reduces email volume by combining multiple notifications into summary emails.\n\nValid values:\n- 'realtime': Send each notification immediately as events occur\n- 'hourly': Combine all notifications from the past hour into a single digest email\n- 'daily': Combine all notifications from the past 24 hours into a daily summary\n- 'weekly': Combine all notifications from the past week into a weekly digest\n\nDigest emails include summary counts, grouped notifications by type, and links to all mentioned content."},{"const":"daily","description":"Email notification batching frequency controlling how notifications are combined and delivered.\n\nThis setting determines whether email notifications are sent immediately (realtime) or batched into periodic digests (hourly, daily, weekly). Digest mode reduces email volume by combining multiple notifications into summary emails.\n\nValid values:\n- 'realtime': Send each notification immediately as events occur\n- 'hourly': Combine all notifications from the past hour into a single digest email\n- 'daily': Combine all notifications from the past 24 hours into a daily summary\n- 'weekly': Combine all notifications from the past week into a weekly digest\n\nDigest emails include summary counts, grouped notifications by type, and links to all mentioned content."},{"const":"weekly","description":"Email notification batching frequency controlling how notifications are combined and delivered.\n\nThis setting determines whether email notifications are sent immediately (realtime) or batched into periodic digests (hourly, daily, weekly). Digest mode reduces email volume by combining multiple notifications into summary emails.\n\nValid values:\n- 'realtime': Send each notification immediately as events occur\n- 'hourly': Combine all notifications from the past hour into a single digest email\n- 'daily': Combine all notifications from the past 24 hours into a daily summary\n- 'weekly': Combine all notifications from the past week into a weekly digest\n\nDigest emails include summary counts, grouped notifications by type, and links to all mentioned content."}],"description":"Email notification batching frequency controlling how notifications are combined and delivered.\n\nThis setting determines whether email notifications are sent immediately (realtime) or batched into periodic digests (hourly, daily, weekly). Digest mode reduces email volume by combining multiple notifications into summary emails.\n\nValid values:\n- 'realtime': Send each notification immediately as events occur\n- 'hourly': Combine all notifications from the past hour into a single digest email\n- 'daily': Combine all notifications from the past 24 hours into a daily summary\n- 'weekly': Combine all notifications from the past week into a weekly digest\n\nDigest emails include summary counts, grouped notifications by type, and links to all mentioned content."},"quiet_hours_enabled":{"type":"boolean","description":"Whether quiet hours are active for suppressing email notifications during specified time windows.\n\nWhen enabled, email notifications triggered during the quiet hours window are delayed and delivered when quiet hours end. This respects user preferences for uninterrupted time during sleep hours or focused work periods.\n\nIn-app notifications are not affected by quiet hours and continue to be delivered in real-time."},"quiet_hours_start":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Quiet hours start time in HH:mm format (24-hour clock).\n\nDefines when the quiet hours window begins, during which email notifications are suppressed and queued for delivery when quiet hours end. This field is required when quiet_hours_enabled is true and should be null when quiet hours are disabled.\n\nExample values: '22:00' (10:00 PM), '23:30' (11:30 PM). The time is interpreted in the user's configured timezone."},"quiet_hours_end":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Quiet hours end time in HH:mm format (24-hour clock).\n\nDefines when the quiet hours window ends and delayed notifications are delivered. This field is required when quiet_hours_enabled is true and should be null when quiet hours are disabled.\n\nExample values: '07:00' (7:00 AM), '08:30' (8:30 AM). The time is interpreted in the user's configured timezone."},"timezone":{"type":"string","description":"User's timezone for digest scheduling and quiet hours calculation.\n\nIANA timezone identifier used to calculate when to deliver digest emails and enforce quiet hours windows in the user's local time. This ensures notification timing respects the user's geographic location and daily schedule.\n\nExamples: 'America/New_York', 'Europe/London', 'Asia/Tokyo', 'UTC'. The timezone must be a valid IANA timezone database identifier."}},"required":[],"description":"Update request for notification preference configuration allowing users to modify how they receive platform notifications.\n\nThis type contains all fields from the notification preferences configuration as optional properties, enabling partial updates where users can modify specific notification settings without affecting others. All boolean flags for event-specific notification channels can be toggled, digest frequency can be changed, quiet hours can be enabled or disabled with time window configuration, and timezone can be adjusted.\n\nThe update operation validates all provided values and applies changes atomically, updating the discussion_board_notification_preferences table record for the user. Omitted fields retain their current values, following standard partial update semantics.","x-autobe-prisma-schema":"discussion_board_notification_preferences"},"IDiscussionBoardMember.ILoginHistoryRequest":{"type":"object","properties":{"is_successful":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by authentication success or failure status.\n\nWhen true, returns only successful login attempts. When false, returns only failed authentication attempts. When null, returns all login attempts regardless of outcome. Useful for security analysis focusing on successful logins or investigating failed attempt patterns."},"failure_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by specific failure reason.\n\nAllows filtering for particular types of authentication failures such as 'incorrect_password', 'account_locked', 'account_suspended', 'email_not_verified', or 'account_not_found'. Helps identify specific security issues or user experience problems in the authentication flow."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by IP address or IP pattern.\n\nAllows filtering for login attempts from specific IP addresses or IP ranges. Supports partial matching for subnet-level analysis. Used for security investigations and identifying coordinated attack attempts from the same network."},"device_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by device type.\n\nAllows filtering for login attempts from specific device categories such as Desktop, Mobile, or Tablet. Helps users review access patterns by device and identify unfamiliar device types."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by geographic location.\n\nAllows filtering for login attempts from specific cities or countries. Supports partial matching to find attempts from a region. Useful for verifying expected login locations and detecting access from unusual geographic areas."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter login attempts after this timestamp.\n\nReturns only login attempts that occurred on or after the specified date and time. Useful for reviewing recent authentication activity or analyzing login patterns within specific time periods."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter login attempts before this timestamp.\n\nReturns only login attempts that occurred on or before the specified date and time. Combined with created_after, enables precise date range filtering for security investigations."},"sort_by":{"oneOf":[{"const":"created_at"},{"type":"null"}],"description":"Field to sort results by.\n\nCurrently supports 'created_at' to sort by login attempt timestamp. Default is 'created_at' to display login history chronologically."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for results.\n\nSpecifies ascending ('asc') or descending ('desc') order. Default is 'desc' to show most recent login attempts first, which is the typical use case for security monitoring."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number to retrieve.\n\nSpecifies which page of results to return. Page numbering starts at 1. When null, defaults to page 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of records per page.\n\nSpecifies how many login history records to return in a single page. Maximum 100 records per page. Default is 50 records per page for login history, providing sufficient detail without overwhelming the display."}},"required":[],"description":"Search and filter criteria for retrieving member login history.\n\nDefines the request parameters for searching, filtering, sorting, and paginating login history records. This request type supports the account security monitoring feature where users and administrators can review authentication attempts with filtering by success status, failure reasons, device information, geographic location, and time ranges.\n\nAll filter parameters are optional, allowing flexible queries from viewing all login history to highly targeted searches for specific security events. The combination of filters uses AND logic, meaning login attempts must match all specified criteria to be included in results."},"IDiscussionBoardSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the session.\n\nThis UUID serves as the primary key for the session record in the discussion_board_sessions table, uniquely identifying each authenticated session across the platform."},"discussion_board_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the member who owns this session.\n\nLinks to discussion_board_members.id. This field is null if the session belongs to a moderator or administrator. Only one of the three user type foreign keys (member_id, moderator_id, administrator_id) will be populated for any given session."},"discussion_board_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator who owns this session.\n\nLinks to discussion_board_moderators.id. This field is null if the session belongs to a member or administrator. Only one of the three user type foreign keys (member_id, moderator_id, administrator_id) will be populated for any given session."},"discussion_board_administrator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the administrator who owns this session.\n\nLinks to discussion_board_administrators.id. This field is null if the session belongs to a member or moderator. Only one of the three user type foreign keys (member_id, moderator_id, administrator_id) will be populated for any given session."},"device_type":{"type":"string","description":"Type of device used for this session.\n\nExamples include: Desktop, Mobile, Tablet. This information is extracted from the user agent string during session creation and helps users identify their active sessions across different devices."},"browser_info":{"type":"string","description":"Browser name and version information.\n\nExamples: Chrome 120.0, Firefox 121.0, Safari 17.0. Extracted from the user agent string during login, this information helps users recognize sessions from specific browsers and detect unfamiliar access patterns."},"ip_address":{"type":"string","description":"IP address from which the session was created.\n\nUsed for security monitoring, location approximation, and detecting suspicious login patterns. Combined with location information to help users verify legitimate access and identify unauthorized session creation."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Approximate geographic location based on IP address.\n\nProvides city-level precision, for example: 'New York, USA' or 'London, UK'. May be null if location cannot be determined from the IP address. Helps users identify unfamiliar login locations and detect unauthorized access from unexpected regions."},"is_active":{"type":"boolean","description":"Whether this session is currently active.\n\nFalse when the session has been revoked by user logout, password change, session expiration, or manual revocation. Active sessions can make authenticated API requests, while inactive sessions are denied access."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the access token expires.\n\nAccess tokens expire after 30 minutes from issuance. After expiration, the session must use its refresh token to obtain a new access token. This short expiration window enhances security by limiting the validity period of potentially compromised tokens."},"last_activity_at":{"type":"string","format":"date-time","description":"Timestamp of the last activity in this session.\n\nUpdated on each authenticated request made with this session's access token. Used to track session usage patterns, identify inactive sessions for cleanup, and display recent activity information to users reviewing their active sessions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the session was created.\n\nRecords when the user logged in and this session was established. Used for session age tracking, security auditing, and displaying login time information in the active sessions list."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was revoked.\n\nNull if the session is still active. Set when the user logs out, changes their password, or manually revokes the session from their account settings. Provides audit trail for session termination events."}},"required":["id","device_type","browser_info","ip_address","is_active","expires_at","last_activity_at","created_at"],"description":"Complete session information for an authenticated user.\n\nRepresents an active login session for a member, moderator, or administrator on the discussion board platform. Each session corresponds to a user authenticated on a specific device with associated JWT access and refresh tokens. Sessions track device information, geographic location, and activity timestamps for security monitoring and multi-device session management.\n\nUsers can view all their active sessions to monitor account security and identify unauthorized access. Sessions can be revoked individually to terminate access from specific devices, or all sessions can be revoked simultaneously when security events occur such as password changes.\n\nThis session model supports the platform's JWT-based authentication architecture with short-lived access tokens (30-minute expiration) and longer-lived refresh tokens (7-30 day expiration). Session records enable users to audit where they are logged in and maintain control over their account security across multiple devices.","x-autobe-prisma-schema":"discussion_board_sessions"},"IDiscussionBoardSession.IRequest":{"type":"object","properties":{"device_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter sessions by device type.\n\nAllows filtering for specific device categories such as Desktop, Mobile, or Tablet. When specified, returns only sessions created from matching device types. Useful for finding sessions on specific devices to manage or revoke them."},"browser_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter sessions by browser information.\n\nAllows filtering for sessions using specific browsers such as Chrome, Firefox, or Safari. Supports partial matching to find all sessions from a browser family. Helps users locate sessions from particular browsers."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter sessions by geographic location.\n\nAllows filtering for sessions from specific cities or countries. Supports partial matching to find sessions from a region. Useful for identifying sessions from unexpected geographic locations that may indicate unauthorized access."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter sessions by IP address or IP pattern.\n\nAllows filtering for sessions from specific IP addresses or IP ranges. Supports partial matching for subnet-level filtering. Used for security investigations and identifying multiple sessions from the same network."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter sessions by active status.\n\nWhen true, returns only currently active sessions. When false, returns only revoked or expired sessions. When null, returns all sessions regardless of status. Helps users distinguish between current logins and historical session data."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter sessions created after this timestamp.\n\nReturns only sessions created on or after the specified date and time. Useful for finding recent sessions or sessions within a specific timeframe."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter sessions created before this timestamp.\n\nReturns only sessions created on or before the specified date and time. Combined with created_after, enables date range filtering for session searches."},"last_activity_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter sessions with activity after this timestamp.\n\nReturns only sessions that had activity on or after the specified date and time. Helps identify recently active sessions versus dormant sessions."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"last_activity_at"},{"const":"expires_at"},{"type":"null"}],"description":"Field to sort results by.\n\nSupported values: 'created_at' (login time), 'last_activity_at' (recent activity), 'expires_at' (expiration time). Default is 'last_activity_at' to show most recently used sessions first."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for results.\n\nSpecifies ascending ('asc') or descending ('desc') order. Default is 'desc' to show newest or most recent items first."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number to retrieve.\n\nSpecifies which page of results to return. Page numbering starts at 1. When null, defaults to page 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of records per page.\n\nSpecifies how many session records to return in a single page. Maximum 100 records per page. When null, defaults to 20 records per page."}},"required":[],"description":"Search and filter criteria for retrieving user sessions.\n\nDefines the request parameters for searching, filtering, sorting, and paginating session records. This request type supports the multi-device session management feature where users can search through their active and historical sessions using various criteria including device type, location, activity timeframe, and session status.\n\nAll filter parameters are optional, allowing flexible queries from broad session listings to highly specific searches. The combination of filters uses AND logic, meaning sessions must match all specified criteria to be included in results."},"IDiscussionBoardLoginHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the login history record.\n\nThis UUID serves as the primary key for the login attempt audit entry in the discussion_board_login_history table, uniquely identifying each authentication attempt for security analysis and audit purposes."},"discussion_board_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the member account associated with this login attempt.\n\nLinks to discussion_board_members.id. Null if the login attempt was for a moderator or administrator account. This field identifies which member account was targeted by the authentication attempt, whether successful or failed."},"discussion_board_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator account associated with this login attempt.\n\nLinks to discussion_board_moderators.id. Null if the login attempt was for a member or administrator account. This field identifies which moderator account was targeted by the authentication attempt."},"discussion_board_administrator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the administrator account associated with this login attempt.\n\nLinks to discussion_board_administrators.id. Null if the login attempt was for a member or administrator account. This field identifies which administrator account was targeted by the authentication attempt."},"email_attempted":{"type":"string","description":"Email address used in the login attempt.\n\nStored for both successful and failed attempts to enable security analysis. Tracking failed login attempts with email addresses helps detect brute force attacks, credential stuffing attempts, and account enumeration attacks where attackers test email addresses to find valid accounts."},"is_successful":{"type":"boolean","description":"Whether the login attempt was successful.\n\nTrue indicates the credentials were valid and authentication succeeded, resulting in session creation. False indicates authentication failed due to incorrect password, account lockout, suspension, unverified email, or other authentication barriers."},"failure_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for login failure if the attempt was unsuccessful.\n\nNull for successful logins. Possible values include: 'incorrect_password' (wrong password provided), 'account_locked' (too many failed attempts), 'account_suspended' (user temporarily suspended), 'email_not_verified' (email verification incomplete), 'account_not_found' (invalid email), 'account_banned' (permanently banned account). Helps users and administrators understand authentication failures."},"ip_address":{"type":"string","description":"IP address from which the login attempt was made.\n\nCritical for security monitoring, geographic analysis, and identifying suspicious patterns. Administrators use IP addresses to detect coordinated attacks, identify compromised accounts accessed from unusual locations, and implement IP-based security measures."},"device_type":{"type":"string","description":"Type of device used for the login attempt.\n\nExamples: Desktop, Mobile, Tablet. Extracted from the user agent string to help users identify login attempts from specific device types and detect unfamiliar devices accessing their accounts."},"browser_info":{"type":"string","description":"Browser name and version information.\n\nExamples: Chrome 120.0, Firefox 121.0, Safari 17.0. Helps users identify login attempts from specific browsers and detect unfamiliar or suspicious browser usage patterns in their account activity."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Approximate geographic location based on IP address.\n\nProvides city-level precision such as 'London, UK' or 'New York, USA'. May be null if location cannot be determined from the IP address. Helps users verify that login attempts originated from expected geographic regions and identify unauthorized access from unusual locations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the login attempt occurred.\n\nRecords the exact moment of the authentication attempt. Used for security timeline analysis, identifying attack patterns over time, correlating multiple related login attempts, and displaying chronological login history to users for account security review."}},"required":["id","email_attempted","is_successful","ip_address","device_type","browser_info","created_at"],"description":"Comprehensive audit record of a login attempt.\n\nRepresents a single authentication attempt on the discussion board platform, capturing both successful logins and failed authentication attempts. The login history provides an immutable audit trail for security monitoring, breach detection, and user account activity review.\n\nEach login history entry records detailed information about the authentication attempt including the email address used, success/failure status, device and browser information, IP address, approximate geographic location, and failure reasons for unsuccessful attempts. This comprehensive logging enables detection of suspicious patterns such as brute force attacks, credential stuffing, and unauthorized access attempts.\n\nThe login history supports critical security features including account lockout protection after repeated failed attempts (5 failures within 15 minutes triggers 30-minute lockout), security alerts for logins from new devices or locations, and user-facing login history displays that help members monitor their account security.\n\nLogin history records are append-only and never modified, ensuring audit trail integrity. The system retains the last 30 days of login history for each user, providing sufficient data for security analysis while managing storage efficiently.","x-autobe-prisma-schema":"discussion_board_login_history"},"IDiscussionBoardBlockedUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the blocking relationship record.\n\nPrimary key from discussion_board_blocked_users table representing this specific block relationship."},"blocker":{"$ref":"#/components/schemas/IDiscussionBoardMember.IAuthorInfo","description":"Member who initiated the block.\n\nThe user who blocked another user and will no longer see that user's content or receive notifications from them."},"blocked":{"$ref":"#/components/schemas/IDiscussionBoardMember.IAuthorInfo","description":"Member who is being blocked.\n\nThe user whose content is hidden from the blocker. This user can still see the blocker's content as blocking is asymmetric."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user-provided reason for blocking this user.\n\nHelps the blocker remember why they blocked someone when reviewing their blocked users list. Also provides context to support teams if blocking is reported as abuse."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the block was created.\n\nUsed for tracking block duration and history."}},"required":["id","blocker","blocked","reason","created_at"],"description":"Complete information about a user blocking relationship.\n\nThis schema represents the full details of a blocking relationship between two members on the discussion board platform. It includes information about both the blocker and the blocked user, the optional reason for blocking, and complete timestamp metadata.\n\nBlocking relationships are stored in the discussion_board_blocked_users table and support asymmetric blocking where User A blocking User B prevents A from seeing B's content without affecting B's ability to see A's content. This privacy mechanism is essential for user experience on platforms discussing potentially contentious political and economic topics.\n\nThe complete blocking record is used in detailed views, blocking management interfaces, and when returning confirmation after creating or modifying blocks.","x-autobe-prisma-schema":"discussion_board_blocked_users"},"IDiscussionBoardBlockedUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the blocking relationship record.\n\nThis ID represents the specific block record in the discussion_board_blocked_users table, not the blocked user's account ID."},"blocked_user":{"$ref":"#/components/schemas/IDiscussionBoardMember.IBlockedUserInfo","description":"Information about the user who has been blocked.\n\nIncludes essential profile details of the blocked member to help the blocker identify and remember who they blocked."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user-provided reason for blocking this user.\n\nHelps the blocker remember why they blocked someone when reviewing their blocked users list. Also provides context to support teams if blocking is reported as abuse or retaliatory behavior."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the block was created.\n\nUsed for tracking block duration, sorting blocked users by recency, and understanding blocking relationship history."}},"required":["id","blocked_user","reason","created_at"],"description":"Summary information about a blocked user relationship optimized for list displays.\n\nThis schema represents a blocking relationship where one user (the blocker) has blocked another user (the blocked user) to prevent unwanted interactions. The summary includes essential information for displaying blocked users in the user's blocked list interface.\n\nBlocking is an asymmetric relationship - when User A blocks User B, User A no longer sees B's posts, replies, or receives notifications from B, but B can still see A's content. This privacy control is fundamental to user experience on the discussion board platform.\n\nThe summary format is optimized for the blocked users list view in user profile settings, showing who was blocked, when, and why, without requiring deep nested data about the blocked user's complete profile or activity.","x-autobe-prisma-schema":"discussion_board_blocked_users"},"IDiscussionBoardBlockedUser.ICreate":{"type":"object","properties":{"blocked_user_id":{"type":"string","format":"uuid","description":"Unique identifier of the member to be blocked.\n\nReferences discussion_board_members.id of the user the authenticated member wants to block. This user's content will become hidden from the blocker's view."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation for why the user is being blocked.\n\nHelps the blocker remember their reasoning when reviewing blocked users later. Also provides context to support teams if the blocking relationship is reported as retaliatory or abusive. Maximum length should be reasonable (e.g., 500 characters)."}},"required":["blocked_user_id"],"description":"Request data for creating a new user blocking relationship.\n\nThis schema contains the information needed to establish a block between the authenticated user (blocker) and another member (blocked user). The blocking mechanism is asymmetric - blocking User B means the blocker no longer sees B's content or receives B's notifications, but B can still see the blocker's content.\n\nThe blocker's identity is derived from the authenticated user's JWT token and userId path parameter, not from this request body. This prevents users from creating blocks on behalf of others.\n\nBusiness rules enforced during block creation include validating the target user exists and is a valid member account, preventing self-blocking, enforcing the maximum 100 blocked users per account limit, checking that a blocking relationship doesn't already exist between these users, and rate limiting to prevent block/unblock abuse.","x-autobe-prisma-schema":"discussion_board_blocked_users"},"IDiscussionBoardBlockedUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve. Defaults to page 1 if not provided."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of results per page.\n\nControls page size for pagination. Defaults to 20 if not provided. Maximum of 100 to prevent performance issues."},"username":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by blocked user's username.\n\nSearch for blocked users whose username contains this text (case-insensitive partial matching)."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by blocks created after this timestamp.\n\nUsed for date range filtering to find recently created blocks."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by blocks created before this timestamp.\n\nUsed for date range filtering to find older blocks."},"sort_by":{"oneOf":[{"const":"created_at_desc"},{"const":"created_at_asc"},{"const":"username_asc"},{"const":"username_desc"},{"type":"null"}],"description":"Sorting option for results.\n\nControls the order in which blocked users are returned. Defaults to created_at_desc (most recently blocked first)."}},"required":["page","limit","username","created_after","created_before","sort_by"],"description":"Request parameters for searching and filtering a user's blocked users list.\n\nThis schema defines the search criteria, filters, and pagination options for retrieving blocked user relationships. It supports finding specific blocked users by username, filtering by date ranges, and organizing results through various sorting options.\n\nThe request enables users to efficiently manage their blocked users list when approaching the 100-user maximum limit, search for specific blocked users, and review their blocking history organized by recency or alphabetically."},"IDiscussionBoardFavorite":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this favorite/bookmark relationship.\n\nThis is the primary key for the discussion_board_favorites table, uniquely identifying each instance where a member has bookmarked a discussion topic. The ID is system-generated upon favorite creation and remains immutable."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion topic that was favorited.\n\nReferences the discussion_board_topics table to identify which discussion was bookmarked. This enables retrieval of complete topic information when displaying the user's favorites list and supports navigation from favorites to the full discussion view."},"topic":{"$ref":"#/components/schemas/IDiscussionBoardTopic.ISummary","description":"Summary information about the favorited discussion topic including title, category, author, and engagement metrics.\n\nThis nested object provides essential topic details for displaying the user's favorites collection without requiring separate topic retrieval queries. The summary includes enough information to render favorites lists with meaningful context about each bookmarked discussion."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member added this topic to their favorites.\n\nRecords the exact moment the bookmark was created, enabling chronological organization of favorites, sorting by recently favorited topics, and tracking user engagement patterns over time. This timestamp helps users remember when they found discussions interesting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this favorite record was last modified.\n\nTracks any updates to the favorite relationship, though favorites are typically created or deleted rather than modified. Used for audit trail and maintaining data integrity across favorite management operations."}},"required":["id","discussion_board_topic_id","topic","created_at","updated_at"],"description":"Complete representation of a favorite/bookmark relationship between a member and a discussion topic.\n\nThis entity represents a saved bookmark where a user has marked a discussion topic as a favorite for later reference, continued engagement, or personal interest tracking. Favorites enable users to build personal libraries of valuable economic and political discussions they want to revisit.\n\nThe favorite relationship supports several key user experiences: quick access to saved discussions through the user's favorites collection, chronological organization showing when topics were bookmarked, and potential notification preferences for activity on favorited topics. Users can favorite topics they find particularly insightful, controversial, or relevant to their interests in economic and political subjects.\n\nThis entity integrates with the discussion management system by referencing topics, the user profile system through member ownership, and potentially the notification system if users opt to receive updates on favorited topic activity. The favorites collection is private by default but users can optionally make their favorites public through activity visibility settings.","x-autobe-prisma-schema":"discussion_board_favorites"},"IDiscussionBoardFavorite.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion topic to add to the user's favorites collection.\n\nThis field references the discussion_board_topics table and must correspond to an existing, accessible discussion topic that the user has permission to view. The topic cannot already be favorited by the same user due to the unique constraint on the member-topic pair.\n\nThe system validates that the referenced topic exists, is not deleted (deleted_at is null), and is accessible to the authenticated user based on topic visibility rules and content access controls."}},"required":["discussion_board_topic_id"],"description":"Request body for creating a new favorite/bookmark relationship between a user and a discussion topic.\n\nThis DTO represents the minimal information required to add a discussion topic to a user's favorites collection. When a member bookmarks a topic, they are expressing explicit interest in saving that economic or political discussion for easy access and future reference.\n\nThe creation process validates that the topic exists and is accessible, enforces the unique constraint preventing duplicate favorites of the same topic, and creates the favorite record with the current timestamp. The authenticated user's ID is derived from the JWT token and automatically set as the discussion_board_member_id, never accepted from the request body for security reasons.\n\nBusiness rules enforced during favorite creation include verifying the topic is not deleted, confirming the user has not already favorited this topic, and ensuring the user is an authenticated member with active account status. While the platform allows unlimited favorites in the initial implementation, soft limits may be introduced in future versions.","x-autobe-prisma-schema":"discussion_board_favorites"},"IDiscussionBoardFavorite.IRequest":{"type":"object","description":"Request parameters for searching and filtering a user's favorited discussion topics.\n\nSupports pagination and sorting to help users organize and discover their saved discussions on economic and political topics. Users can navigate their favorites collection with configurable page sizes and sort by various criteria including date favorited, topic activity, or vote score.\n\nThis request structure enables users to maintain a personal library of valuable discussions they want to revisit for research, reference, or continued engagement.","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination of favorite results.\n\nDetermines which page of results to return when the user's favorites collection spans multiple pages. Starts at 1 for the first page."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of favorite records to return per page.\n\nConfigurable page size allowing users to control result density. Default typically 20-25 items per page. Maximum 100 to prevent excessive data transfer."},"search":{"type":"string","description":"Keyword search within favorited topic titles and content.\n\nEnables users to find specific favorited discussions by searching across topic titles and body content. Supports full-text search for locating bookmarked discussions containing particular terms, arguments, or economic/political concepts."},"sort_by":{"oneOf":[{"const":"date_favorited_desc","description":"Sort by date favorited, newest bookmarks first"},{"const":"date_favorited_asc","description":"Sort by date favorited, oldest bookmarks first"},{"const":"topic_created_desc","description":"Sort by topic creation date, recently created topics first"},{"const":"topic_activity_desc","description":"Sort by topic recent activity, recently active topics first"},{"const":"vote_score_desc","description":"Sort by vote score, highest voted topics first"},{"const":"reply_count_desc","description":"Sort by reply count, most discussed topics first"}],"description":"Sorting criteria for organizing favorite results.\n\nOptions: date_favorited_desc (newest bookmarks first), date_favorited_asc (oldest bookmarks first), topic_created_desc (recently created topics first), topic_activity_desc (recently active topics first), vote_score_desc (highest voted topics first), reply_count_desc (most discussed topics first).\n\nDefault: date_favorited_desc for showing most recently bookmarked discussions."}},"required":[]},"IDiscussionBoardFollowedTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the followed tag relationship.\n\nThis UUID serves as the primary key for the followed tag record in the discussion_board_followed_tags table."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member who is following this tag.\n\nThis foreign key references the discussion_board_members.id field."},"discussion_board_tag_id":{"type":"string","format":"uuid","description":"Reference to the tag being followed by the member.\n\nThis foreign key references the discussion_board_tags.id field."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user started following this tag.\n\nUsed for sorting followed tags by recency and tracking user interest evolution over time."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the follow relationship was last modified.\n\nUsed for audit trail purposes and tracking changes to the follow relationship."}},"required":["id","discussion_board_member_id","discussion_board_tag_id","created_at","updated_at"],"description":"Complete followed tag relationship record with all metadata.\n\nThis DTO represents the full followed tag entity from the discussion_board_followed_tags table, including all relationship identifiers and timestamps. It is returned when creating a new followed tag relationship or when detailed follow metadata is needed.\n\nThe followed tag relationship enables personalized content discovery, optional notifications for new topics with followed tags, and tracking of user interests across economic and political discussions.","x-autobe-prisma-schema":"discussion_board_followed_tags"},"IDiscussionBoardFollowedTag.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the followed tag relationship.\n\nThis UUID serves as the primary key for the followed tag record in the discussion_board_followed_tags table. It uniquely identifies the relationship between a specific member and a tag they are following for personalized content recommendations and notifications."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member who is following this tag.\n\nThis foreign key references the discussion_board_members.id field, establishing the ownership of the tag follow relationship. The member receives personalized content recommendations and notifications for topics tagged with this tag based on their notification preferences."},"discussion_board_tag_id":{"type":"string","format":"uuid","description":"Reference to the tag being followed by the member.\n\nThis foreign key references the discussion_board_tags.id field, identifying which tag the member is tracking. The tag must exist in the tags table and be in active status for the follow relationship to remain functional."},"tag_name":{"type":"string","description":"Name of the tag being followed, normalized to lowercase for consistency.\n\nThe tag name is between 2 and 30 characters, containing alphanumeric characters with spaces and hyphens allowed. This is the display name shown in the user's followed tags list and must be unique across all tags in the platform."},"tag_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description explaining what this tag represents and when to use it.\n\nThis field helps users understand the tag's purpose and scope, supporting consistent tag application across discussions. The description is particularly valuable for followed tags as users review their interests and manage their tag subscriptions."},"tag_status":{"type":"string","description":"Current lifecycle status of the followed tag.\n\nThe status indicates whether the tag is active (available for use), pending_review (awaiting moderator approval), disabled (hidden from selection), or merged (consolidated into another tag). Following disabled or merged tags may result in reduced recommendations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user started following this tag.\n\nThis timestamp tracks when the follow relationship was established and is used for sorting the user's followed tags by recency. It helps users understand their interest evolution and manage tags they've been following for extended periods."},"usage_count":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of topics currently tagged with this tag across the platform.\n\nThis metric is aggregated from the discussion_board_topic_tags junction table and indicates tag popularity and relevance. Higher usage counts suggest active, well-established tags that are valuable to follow for content discovery."},"follower_count":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of users following this tag platform-wide.\n\nThis count is aggregated from the discussion_board_followed_tags table and indicates the tag's popularity among the community. High follower counts suggest tags that many users find valuable for tracking discussions in specific areas of economics or politics."}},"required":["id","discussion_board_member_id","discussion_board_tag_id","tag_name","tag_status","created_at"],"description":"Summary view of a tag that a member is following for personalized content recommendations.\n\nThis DTO represents the followed tag relationship in an optimized format for list displays, showing essential tag information and follow metadata. It includes tag identity, name, description, status, follow timestamp, and optional usage statistics from the materialized view.\n\nFollowed tags enable personalized content discovery by prioritizing discussions with these tags in recommendations, optionally triggering notifications for new topics with followed tags, and helping users track their areas of interest across economic and political discussions. Members can follow up to 50 tags per business rules.\n\nThis summary format is optimized for displaying the user's followed tags list in their profile settings, showing tag clouds of user interests, and managing tag subscriptions efficiently without loading complete tag details or all associated topics.","x-autobe-prisma-schema":"discussion_board_followed_tags"},"IDiscussionBoardFollowedTag.ICreate":{"type":"object","properties":{"discussion_board_tag_id":{"type":"string","format":"uuid","description":"Identifier of the tag to follow for personalized recommendations.\n\nThis field references an existing tag in the discussion_board_tags table. The tag must exist, be in active status, and not already be followed by the requesting user. Following a tag enables notifications for new topics with that tag and prioritization in content recommendations."}},"required":["discussion_board_tag_id"],"description":"Request body for creating a new tag following relationship.\n\nThis DTO contains the minimal information needed to establish a follow relationship between an authenticated member and a discussion board tag. The member ID is derived from the authenticated user context (JWT token) rather than the request body, preventing users from following tags on behalf of others.\n\nThe system validates that the member has not exceeded the maximum of 50 followed tags per the business rules before creating the relationship. The follow relationship enables personalized content discovery features including topic recommendations, optional notifications for new tagged topics, and interest tracking across economic and political discussions.","x-autobe-prisma-schema":"discussion_board_followed_tags"},"IDiscussionBoardFollowedTag.IRequest":{"type":"object","properties":{"tag_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search filter for tag name using partial text matching.\n\nWhen provided, filters followed tags to those whose names contain this search term (case-insensitive matching). Useful for finding specific tags in large followed tag collections approaching the 50-tag maximum limit."},"tag_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter followed tags by their current lifecycle status.\n\nValid values include: active (normal operational tags), pending_review (awaiting moderator approval), disabled (hidden from selection), merged (consolidated into another tag). Typically users filter to show only active tags."},"followed_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for followed tags added after this timestamp.\n\nUseful for finding recently followed tags or reviewing tags added within specific timeframes. Supports date range queries when combined with followed_before parameter."},"followed_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for followed tags added before this timestamp.\n\nUseful for finding older followed tags or reviewing tags from specific historical periods. Combines with followed_after for date range filtering."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort the followed tags results by.\n\nSupported values include: created_at (when tag was followed), tag_name (alphabetically), usage_count (tag popularity), follower_count (community interest). Default is typically created_at descending to show most recently followed tags first."},"sort_order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Direction for sorting the results.\n\nValid values: asc (ascending order), desc (descending order). Default is typically desc to show newest or highest values first depending on the sort_by field."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination of followed tags results.\n\nPage numbers start at 1. When null or omitted, defaults to page 1. Used in conjunction with limit to navigate through paginated result sets."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of followed tag records to return per page.\n\nAllowed values: 1-100 records per page. Default is typically 20 for efficient browsing. Given the 50-tag maximum per user, most users will see all results on a single page."}},"required":[],"description":"Request parameters for searching and filtering a user's followed tags collection.\n\nThis DTO defines the query capabilities for retrieving followed tags with pagination, filtering by tag properties and follow metadata, and sorting by various criteria. The request supports finding specific tags within a user's followed collection, organizing tags for display, and managing tag subscriptions.\n\nCommon use cases include: displaying the user's complete followed tags list in profile settings, searching for specific tags within the collection as it approaches the 50-tag limit, sorting tags by follow date to review interest evolution, and filtering by tag status to identify disabled or merged tags requiring attention."},"IDiscussionBoardWatchedTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the watched topic relationship."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member who is watching this topic."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Reference to the discussion topic being watched."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user started watching this topic."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the watch relationship was last modified."},"last_read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user last viewed this topic.\n\nUsed to determine if there is new activity since their last visit to show unread indicators and trigger notifications appropriately."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp enabling watch relationship recovery.\n\nWhen set, the watch subscription is marked as deleted but preserved for potential recovery within the 30-day recovery window. Null for active watch relationships."}},"required":["id","discussion_board_member_id","discussion_board_topic_id","created_at","updated_at"],"description":"Complete watched topic relationship record with all metadata.\n\nThis DTO represents the full watched topic entity from the discussion_board_watched_topics table, including all relationship identifiers, timestamps, and read tracking data. It is returned when creating a new watched topic subscription or updating watch settings.\n\nThe watched topic relationship enables users to receive notifications about new activity on discussions they're interested in, supporting sustained engagement with ongoing conversations on economic and political subjects.","x-autobe-prisma-schema":"discussion_board_watched_topics"},"IDiscussionBoardWatchedTopic.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the watched topic relationship.\n\nThis UUID serves as the primary key for the watched topic record in the discussion_board_watched_topics table. It uniquely identifies the subscription between a specific member and a topic they are monitoring for new activity."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member who is watching this topic.\n\nThis foreign key references the discussion_board_members.id field, establishing ownership of the watch subscription. The member receives notifications about new activity on this topic according to their notification preferences."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Reference to the discussion topic being watched.\n\nThis foreign key references the discussion_board_topics.id field, identifying which discussion the member is monitoring for new replies, votes, and other activity."},"topic_title":{"type":"string","description":"Title of the watched discussion topic.\n\nThe topic title (10-200 characters) provides immediate context about what discussion the user is watching. This is essential for displaying meaningful watched topics lists without requiring additional topic detail queries."},"topic_category":{"type":"string","description":"Category of the watched discussion topic.\n\nIndicates whether the watched topic is in Economics, Politics, or another category, helping users organize their watched topics by subject area and understand the distribution of their interests."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user started watching this topic.\n\nThis timestamp tracks when the watch relationship was established and is used for tracking watch duration and sorting watched topics by when they were added to the watch list."},"last_read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user last viewed this watched topic.\n\nThis field is critical for determining if there is new activity (replies, votes) since the user's last visit. When last_read_at is older than the topic's updated_at timestamp, the UI can show 'unread' or 'new activity' indicators to draw attention to topics requiring user review."},"has_unread_activity":{"type":"boolean","description":"Calculated indicator showing whether there is new activity since last read.\n\nTrue when the topic has been updated (new replies, votes, or edits) after the last_read_at timestamp. False when the user has viewed all current activity. This boolean enables efficient unread badge display without client-side timestamp comparison."},"topic_reply_count":{"type":"integer","description":"Current number of replies in the watched topic.\n\nThis count from the discussion_board_topics.reply_count field shows the discussion's activity level and helps users identify highly engaged topics in their watch list."},"topic_updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent activity on the watched topic.\n\nThis is the topic's updated_at field, which changes when new replies are posted or the topic is edited. Comparing this to last_read_at determines if there is unread activity requiring user attention."}},"required":["id","discussion_board_member_id","discussion_board_topic_id","topic_title","topic_category","created_at","has_unread_activity","topic_reply_count","topic_updated_at"],"description":"Summary view of a discussion topic that a member is watching for activity notifications.\n\nThis DTO represents the watched topic relationship in an optimized format for list displays, combining watch metadata with essential topic information. It includes watch relationship details, topic summary data, and calculated unread indicators to show users which watched topics require attention.\n\nWatched topics enable members to track ongoing discussions they find particularly interesting or relevant to their economic and political interests. When watched topics receive new replies, reach vote milestones, or have other significant activity, the system generates notifications based on the user's notification preferences.\n\nThis summary format is optimized for displaying the user's watched topics list, showing which topics have new unread activity, providing quick access to topic details, and enabling efficient management of watch subscriptions without loading complete topic content or all replies.","x-autobe-prisma-schema":"discussion_board_watched_topics"},"IDiscussionBoardWatchedTopic.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Identifier of the discussion topic to add to the watch list.\n\nThis field references an existing topic in the discussion_board_topics table. The topic must exist, be in active state (not deleted or archived), and not already be watched by the requesting user. Watching a topic enables notifications for new replies, votes, and other activity based on the user's notification preferences."}},"required":["discussion_board_topic_id"],"description":"Request body for creating a new watched topic subscription.\n\nThis DTO contains the minimal information needed to establish a watch relationship between an authenticated member and a discussion topic. The member ID is derived from the authenticated user context (JWT token) rather than the request body, preventing users from creating watch subscriptions on behalf of others.\n\nThe system initializes the last_read_at timestamp to the current time upon creation, indicating the user has read all content up to this point. Future notifications will only be triggered by new activity occurring after this timestamp.\n\nThe watch relationship supports the notification system's watched_topic_update notification type, enabling users to track ongoing discussions of interest without manually checking for updates.","x-autobe-prisma-schema":"discussion_board_watched_topics"},"IDiscussionBoardWatchedTopic.IUpdate":{"type":"object","properties":{"last_read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Updated timestamp indicating when the user last viewed this watched topic.\n\nSetting this field to the current time marks the topic as fully read, resetting the unread activity indicator. This is the primary use case for updating watched topics - tracking which activity is new versus already seen. The timestamp is compared against the topic's updated_at to determine if there is new activity requiring user attention."}},"required":[],"description":"Request body for updating watched topic subscription settings and tracking information.\n\nThis DTO supports updating the last_read_at timestamp to mark a watched topic as viewed, which is essential for accurate unread indicator calculations and notification batching logic. All fields are optional to allow partial updates.\n\nThe primary use case is updating last_read_at when a user views a watched topic, ensuring the system accurately tracks which activity is new versus already seen. This prevents duplicate notifications for content the user has already reviewed."},"IDiscussionBoardWatchedTopic.IRequest":{"type":"object","properties":{"has_unread_activity":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter watched topics by presence of new unread activity.\n\nWhen true, returns only watched topics with activity since the user's last_read_at timestamp. When false, returns only watched topics the user has fully reviewed. When null, returns all watched topics regardless of read status."},"category_filter":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter watched topics by their assigned category.\n\nAllows users to view only watched Economics topics, only Politics topics, or topics from other specific categories. Useful for organizing large watch lists by subject area."},"watched_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for topics watched after this timestamp.\n\nEnables finding recently added watched topics or reviewing topics added within specific timeframes. Supports date range queries when combined with watched_before parameter."},"watched_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for topics watched before this timestamp.\n\nEnables finding older watched topics or reviewing watch subscriptions from specific historical periods. Combines with watched_after for date range filtering."},"topic_title_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search within watched topic titles using text matching.\n\nPerforms partial, case-insensitive search across the titles of watched topics to help users locate specific discussions they are tracking. Useful for large watch lists."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort the watched topics results by.\n\nSupported values include: created_at (when watch was created), last_read_at (when user last viewed topic), topic_updated_at (most recent topic activity), topic_reply_count (discussion activity level). Default is typically topic_updated_at descending to show topics with newest activity first."},"sort_order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Direction for sorting the results.\n\nValid values: asc (ascending order), desc (descending order). Default is typically desc to prioritize topics with new unread activity or most recent watch additions."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination of watched topics results.\n\nPage numbers start at 1. When null or omitted, defaults to page 1. Used in conjunction with limit to navigate through paginated result sets."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of watched topic records to return per page.\n\nAllowed values: 1-100 records per page. Default is typically 20 for efficient browsing. Users with extensive watch lists benefit from pagination controls."}},"required":[],"description":"Request parameters for searching and filtering a user's watched topics collection.\n\nThis DTO defines the query capabilities for retrieving watched topics with pagination, filtering by unread status, topic properties, and watch metadata, and sorting by various criteria. The request supports finding topics with new activity, organizing watch lists for review, and managing topic subscriptions.\n\nCommon use cases include: displaying topics with unread activity to prioritize user attention, filtering watched topics by category to focus on Economics or Politics discussions, sorting by most recent topic activity to catch up on active discussions, and searching for specific watched topics by title within large watch collections."},"IDiscussionBoardNotification":{"type":"object","description":"Complete notification record representing platform events delivered to users.\n\nNotifications inform users about relevant activities including replies to their content, mentions, vote milestones, moderation actions, and system announcements. Each notification captures the triggering event, involved users, related content, delivery status, and read tracking metadata.\n\nNotifications support both in-app delivery through the notification center and email delivery based on user preferences. The notification system enables real-time engagement tracking and helps users stay informed about discussions they care about on economic and political topics.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this notification record.\n\nThe primary key uniquely identifies this notification across the platform and enables direct notification retrieval, status updates, and deletion operations."},"user_id":{"type":"string","format":"uuid","description":"Recipient user who receives this notification.\n\nReferences the discussion_board_members table identifying the member who should be notified about this event. The notification is delivered based on this user's notification preferences and quiet hours settings."},"triggering_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member whose action triggered this notification.\n\nReferences discussion_board_members for actions like posting replies, casting votes, or mentioning users. Null for moderator/administrator actions or system-generated notifications. Enables displaying who performed the action that generated this notification."},"triggering_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator whose action triggered this notification.\n\nReferences discussion_board_moderators for moderation actions like content removal or warnings. Null for member/administrator actions. Used for moderation action notifications to identify the moderator responsible."},"triggering_administrator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Administrator whose action triggered this notification.\n\nReferences discussion_board_administrators for administrative actions like system announcements or high-level moderation. Null for member/moderator actions. Identifies the administrator responsible for notifications involving administrative operations."},"related_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Discussion topic related to this notification.\n\nReferences discussion_board_topics for topic-related events like replies to user's topics or topic vote milestones. Null if notification is not topic-related. Enables navigation from notification to the relevant discussion topic."},"related_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Discussion reply related to this notification.\n\nReferences discussion_board_replies for reply-related events like responses to user's comments. Null if notification is not reply-related. Enables navigation from notification to the specific reply within a discussion thread."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderation action related to this notification.\n\nReferences discussion_board_moderation_actions for moderation event notifications like content removal, warnings, or suspensions. Null for non-moderation notifications. Provides context about enforcement actions affecting the user."},"notification_type":{"type":"string","description":"Classification of the notification event type.\n\nDefines what kind of platform activity triggered this notification. Valid values include: reply_to_topic (someone replied to user's topic), reply_to_comment (someone replied to user's comment), mention (user was mentioned with @username), vote_milestone (content reached vote threshold), moderation_action (enforcement action taken), system_announcement (platform-wide announcement), watched_topic_update (activity on watched topic), welcome (new user welcome message).\n\nThe notification type determines the notification template, icon, priority level, and default delivery preferences."},"title":{"type":"string","description":"Notification headline displayed to user.\n\nConcise summary of the notification event shown in notification lists and email subject lines. Examples: 'New reply to your topic', 'You were mentioned', 'Your post reached 50 upvotes', 'Moderation action on your content'.\n\nThe title provides immediate context about what happened without requiring the user to read the full message."},"message":{"type":"string","description":"Notification content preview or detailed message.\n\nProvides detailed information about the notification event, typically including content previews (first 200 characters of replies), moderation reasons for enforcement actions, milestone details for vote achievements, or announcement content for system messages.\n\nThe message gives users enough context to decide whether to click through to the full content or dismiss the notification."},"link_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Deep link URL to the relevant content.\n\nDirect navigation link to the specific topic, reply, profile, or page related to this notification. Null for notifications without specific target content like general system announcements.\n\nClicking the notification navigates the user to this URL, providing immediate access to the content or context requiring their attention."},"is_read":{"type":"boolean","description":"Whether user has marked this notification as read.\n\nTrue when user has clicked the notification or explicitly marked it as read through bulk actions. False for unread notifications that should contribute to the notification badge count and appear prominently in the notification center.\n\nThe read status determines notification styling and badge count calculations."},"is_seen":{"type":"boolean","description":"Whether user has viewed this notification in the notification center.\n\nTrue when user has opened the notification center and the notification was displayed, even if not clicked. False for completely unseen notifications.\n\nDistinguishes between notifications merely displayed versus those actively engaged with, supporting engagement analytics."},"delivered_in_app":{"type":"boolean","description":"Whether this notification was delivered through in-app notification center.\n\nTrue if notification was queued and delivered to the user's in-app notification interface. False if in-app delivery was disabled per user preferences or notification type settings.\n\nTracks which delivery channel was used for this notification event."},"delivered_via_email":{"type":"boolean","description":"Whether this notification was delivered via email.\n\nTrue if email notification was queued and sent to the user's registered email address. False if email delivery was disabled per user preferences, digest settings, or quiet hours configuration.\n\nTracks email delivery channel usage for this notification."},"email_sent_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when email notification was successfully sent.\n\nRecords the exact time the email was delivered to the mail server for the recipient. Null if email delivery was not attempted, failed, or is still pending in the queue.\n\nUsed for tracking email delivery latency and debugging email notification issues."},"email_delivery_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Email delivery status tracking.\n\nIndicates the current state of email delivery: queued (pending send), sent (successfully delivered to mail server), failed (delivery attempt failed), or bounced (recipient mail server rejected). Null if email delivery was not attempted.\n\nEnables monitoring email delivery reliability and identifying delivery issues requiring attention."},"email_failure_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for email delivery failure.\n\nDescribes why email delivery failed when email_delivery_status is failed or bounced. Common reasons include invalid email address, recipient mailbox full, mail server unreachable, or spam filter rejection. Null for successful deliveries.\n\nSupports troubleshooting email delivery issues and identifying user accounts with problematic email addresses."},"email_retry_count":{"type":"integer","description":"Number of email delivery retry attempts.\n\nTracks how many times the system attempted to deliver this email notification. Increments on each retry after initial delivery failure. Maximum 3 retries per platform requirements before marking delivery as permanently failed.\n\nEnables identifying persistent delivery problems and preventing infinite retry loops."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when user marked notification as read.\n\nRecords the exact time the user acknowledged this notification by clicking it or using mark-as-read functionality. Null if notification remains unread.\n\nSupports engagement analytics and helps users track which notifications they have reviewed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when notification was created.\n\nWhen the triggering event occurred and the notification was generated. Displayed as relative time in notification center for quick temporal context."}},"required":["id","notification_type","title","message","is_read","is_seen","read_at","created_at"],"x-autobe-prisma-schema":"discussion_board_notifications"},"IDiscussionBoardNotification.ISummary":{"type":"object","description":"Summary representation of a discussion board notification optimized for notification center list displays.\n\nThis type provides essential notification information for rendering notification lists in the UI without the full detail included in the complete notification entity. It includes the core identification fields, notification type and content, read status tracking, and delivery channel information needed for notification center interfaces.\n\nThe summary format is designed for efficient list rendering where users browse their notification history, check unread notifications, and quickly scan recent activity alerts. It excludes heavy relational data and detailed metadata that are only needed when viewing individual notification details.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification record.\n\nThis UUID serves as the primary key for the notification in the discussion_board_notifications table and is used for all notification-specific operations including marking as read, deleting, and retrieving detailed information."},"notification_type":{"type":"string","description":"Type of notification indicating what event triggered this alert.\n\nValid values include: reply_to_topic (someone replied to user's discussion topic), reply_to_comment (someone replied to user's comment), mention (user was mentioned with @username), vote_milestone (user's content reached vote threshold like 10, 25, 50, 100 votes), moderation_action (moderator took action on user's content or account), system_announcement (platform-wide announcement from administrators), watched_topic_update (new activity on a topic user is watching), welcome (new user welcome notification).\n\nThis field enables notification filtering and categorization in the notification center UI."},"title":{"type":"string","description":"Notification headline displayed to user in the notification center.\n\nProvides a concise summary of the notification event such as 'New reply to your topic', 'You were mentioned', or 'Your post reached 50 votes'. This title gives users immediate understanding of what happened without reading detailed content.\n\nDesigned for quick scanning in notification lists and mobile push notification previews."},"message":{"type":"string","description":"Notification content preview or detailed message.\n\nContains contextual information about the notification event such as the first 200 characters of a reply that was posted, the moderation action reason, or system announcement content. This preview helps users decide if they need to click through to view full details.\n\nLimited to 200 characters for efficiency in list displays while providing enough context for user decision-making."},"is_read":{"type":"boolean","description":"Whether the user has marked this notification as read.\n\nTrue indicates the user has acknowledged the notification by clicking on it or explicitly marking it as read. False indicates an unread notification that contributes to the notification center badge count.\n\nThis field drives the unread notification counter and visual distinction between read and unread items in the notification list."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created and queued for delivery.\n\nUsed for displaying notification age in the UI (e.g., '2 hours ago', '1 day ago') and for sorting notifications chronologically in the notification center. Recent notifications appear first to prioritize current activity.\n\nFormatted as ISO 8601 date-time string with timezone information for consistent cross-timezone display."}},"required":["id","notification_type","title","message","is_read","created_at"],"x-autobe-prisma-schema":"discussion_board_notifications"},"IDiscussionBoardNotification.IUpdate":{"type":"object","properties":{"is_read":{"type":"boolean","description":"Whether the notification has been marked as read by the user.\n\nThis field indicates that the user has acknowledged and reviewed the notification content. When set to true, the notification is considered read and will not contribute to the unread notification count badge displayed in the notification center.\n\nUpdating this field to true typically occurs when a user clicks on a notification to view its associated content or explicitly marks the notification as read through the notification center interface.\n\nThis field integrates with the notification management system to provide users with control over their notification read status and supports the platform's goal of maintaining an organized, actionable notification center."}},"required":[],"description":"Update data for modifying notification read status.\n\nThis interface represents the mutable properties of a notification that users can update through the notification management system. Members can modify notification state to track which notifications they have reviewed and acknowledged, supporting organized notification center workflows and accurate unread badge counts.\n\nThe update operation allows users to mark notifications as read when they have reviewed the content, supporting efficient notification queue management. The is_seen field is system-managed and updated automatically when notifications are displayed in the notification center, so it is not included in user-initiated update operations.\n\nAll update fields are optional, allowing clients to send partial updates that modify only the specific notification properties they need to change. This flexibility supports various notification interaction patterns including clicking notifications to mark as read and bulk operations that update multiple notification states simultaneously.\n\nThis interface integrates with the notification system requirements that specify users should be able to mark individual notifications as read, mark all notifications as read, and track notification engagement through the notification center interface.","x-autobe-prisma-schema":"discussion_board_notifications"},"IDiscussionBoardNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination of notification results.\n\nSpecifies which page of notifications to retrieve from the complete result set. Page numbering starts at 1. If not provided, defaults to page 1.\n\nExample: 1 for first page, 2 for second page, etc."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Maximum number of notification records to return per page.\n\nControls the page size for pagination, allowing users to adjust how many notifications are displayed at once. The default is typically 20 notifications per page. Maximum allowed is 100 to prevent excessive data transfer.\n\nSmaller page sizes improve initial load time, while larger page sizes reduce the number of requests needed to browse notification history."},"notification_type":{"oneOf":[{"const":"reply_to_topic"},{"const":"reply_to_comment"},{"const":"mention"},{"const":"vote_milestone"},{"const":"moderation_action"},{"const":"system_announcement"},{"const":"watched_topic_update"},{"const":"welcome"},{"type":"null"}],"description":"Filter notifications by specific event type.\n\nRestricts results to notifications of a particular type, helping users focus on specific kinds of platform activity. Valid types include reply_to_topic, reply_to_comment, mention, vote_milestone, moderation_action, system_announcement, watched_topic_update, and welcome.\n\nExample: 'reply_to_topic' shows only notifications about replies to user's topics. Null or omitted returns all notification types."},"is_read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter notifications by read status.\n\nWhen true, returns only notifications the user has marked as read. When false, returns only unread notifications. When null or omitted, returns all notifications regardless of read status.\n\nThis filter is essential for managing notification history, allowing users to focus on unread items requiring attention or review previously acknowledged notifications."},"delivered_in_app":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter notifications by in-app delivery channel status.\n\nWhen true, returns only notifications that were delivered through the in-app notification center. When false, returns only notifications not delivered in-app. When null or omitted, returns all notifications regardless of in-app delivery.\n\nHelps users understand which notifications were shown in the platform interface versus delivered through other channels."},"delivered_via_email":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter notifications by email delivery channel status.\n\nWhen true, returns only notifications that were delivered via email to the user's registered email address. When false, returns only notifications not delivered via email. When null or omitted, returns all notifications regardless of email delivery.\n\nHelps users identify which notifications triggered email communications and understand their email notification volume."},"date_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date for filtering notifications by creation timestamp.\n\nReturns only notifications created on or after this date. Used with date_to to define a date range for notification history review. When null or omitted, no lower bound is applied to the date filter.\n\nFormat: ISO 8601 date-time string (e.g., '2024-01-01T00:00:00Z')."},"date_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date for filtering notifications by creation timestamp.\n\nReturns only notifications created on or before this date. Used with date_from to define a date range for notification history review. When null or omitted, no upper bound is applied to the date filter.\n\nFormat: ISO 8601 date-time string (e.g., '2024-12-31T23:59:59Z')."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"notification_type"},{"const":"read_at"},{"type":"null"}],"description":"Field to sort notification results by.\n\nDetermines the ordering of notification results in the response. Valid options include created_at (chronological order), notification_type (grouped by event type), and read_at (when notifications were acknowledged).\n\nDefault sorting is by created_at in descending order (newest notifications first), which matches typical notification center user experience expectations."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for notification results.\n\nControls whether results are sorted in ascending (asc) or descending (desc) order based on the sort_by field. Descending order shows newest or most recent items first, while ascending shows oldest items first.\n\nDefault is 'desc' for created_at sorting to show newest notifications at the top of the list."},"related_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter notifications related to a specific discussion topic.\n\nReturns only notifications that reference the specified discussion topic ID, such as reply notifications for that topic, vote milestones on the topic, or watched topic updates. Helps users focus on notifications for a particular discussion.\n\nReferences discussion_board_topics.id. When null or omitted, does not filter by related topic."},"related_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter notifications related to a specific discussion reply.\n\nReturns only notifications that reference the specified reply ID, such as reply_to_comment notifications or vote milestones on specific replies. Helps users track notification activity for particular comments.\n\nReferences discussion_board_replies.id. When null or omitted, does not filter by related reply."},"triggering_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter notifications by the member who triggered the notification event.\n\nReturns only notifications caused by actions from a specific member, such as when that member replied to the user's content, voted on it, or mentioned the user. Helps track notification activity from specific contributors.\n\nReferences discussion_board_members.id. When null or omitted, does not filter by triggering member."}},"required":[],"description":"Search and filtering parameters for retrieving a user's notification history with pagination and sorting.\n\nThis request type supports complex queries to help users manage their notification center efficiently. Users can filter notifications by type to focus on specific events, by read status to find unread items requiring attention, by delivery channel to understand notification routing, by date ranges for temporal analysis, by related content to track specific discussions, and by triggering users to see activity from particular members.\n\nAll filter parameters are optional, allowing flexible query construction from simple (all notifications) to complex (unread reply notifications from the last week for a specific topic). The pagination parameters control result set size and navigation through large notification histories.\n\nThe operation respects the platform's 90-day notification retention policy, automatically filtering out notifications older than 90 days unless specifically queried by administrators for compliance purposes."},"IDiscussionBoardTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion topic.\n\nPrimary key from discussion_board_topics table used for all topic-specific operations."},"title":{"type":"string","description":"Topic title displayed throughout the platform.\n\nBetween 10 and 200 characters per business rules. The primary identifier users see when browsing discussions."},"body":{"type":"string","description":"Complete topic body content with Markdown formatting.\n\nBetween 20 and 50,000 characters. Contains the full discussion content with rich text formatting, paragraphs, lists, and inline code."},"category":{"$ref":"#/components/schemas/IDiscussionBoardCategory.ITopicCategory","description":"Category this topic is assigned to.\n\nProvides organizational context for the topic within the Economics/Politics taxonomy."},"author":{"$ref":"#/components/schemas/IDiscussionBoardMember.IAuthorInfo","description":"Member who created this topic.\n\nProvides author attribution and profile context."},"tags":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTag.ITopicTag"},"description":"Tags assigned to this topic for additional categorization.\n\nUp to 5 tags per topic per business rules. Tags enable cross-category discovery and content organization."},"status":{"oneOf":[{"const":"active","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), archived (old inactive), or soft deleted (deleted)."},{"const":"locked","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), archived (old inactive), or soft deleted (deleted)."},{"const":"archived","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), archived (old inactive), or soft deleted (deleted)."},{"const":"deleted","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), archived (old inactive), or soft deleted (deleted)."}],"description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), archived (old inactive), or soft deleted (deleted)."},"view_count":{"type":"integer","description":"Number of times this topic has been viewed.\n\nIncremented once per user per 24 hours. Provides popularity metrics."},"reply_count":{"type":"integer","description":"Total number of replies to this topic.\n\nIndicates discussion activity and engagement level."},"is_pinned":{"type":"boolean","description":"Whether this topic is pinned by moderators.\n\nPinned topics appear at the top of category listings."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the topic was created.\n\nUsed for sorting and displaying topic age."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the topic was last updated.\n\nReflects topic edits or new reply activity."}},"required":["id","title","body","category","author","tags","status","view_count","reply_count","is_pinned","created_at","updated_at"],"description":"Complete detailed information about a discussion topic.\n\nThis schema represents the full topic entity with all content, metadata, relationships, and engagement metrics. It includes the complete topic body (up to 50,000 characters), full category and author details, all associated tags, status information, and engagement statistics.\n\nThis comprehensive format is used when displaying individual topic detail pages where users read the full content and interact through replies, votes, and bookmarks. Unlike the summary format used for lists, this includes all topic data necessary for the complete reading and interaction experience.","x-autobe-prisma-schema":"discussion_board_topics"},"IDiscussionBoardTopic.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion topic.\n\nThis ID is used for navigating to the topic detail view, creating replies, voting, and all topic-specific operations."},"title":{"type":"string","description":"Topic title displayed in listings and search results.\n\nMust be between 10 and 200 characters. This is the primary identifier users see when browsing discussions."},"category":{"$ref":"#/components/schemas/IDiscussionBoardCategory.ITopicCategory","description":"Category this topic is assigned to for organizational purposes.\n\nProvides context about the topic's subject area (Economics, Politics, or subcategories). Each topic belongs to exactly one category."},"author":{"$ref":"#/components/schemas/IDiscussionBoardMember.IAuthorInfo","description":"Information about the member who created this topic.\n\nIncludes author identification and basic profile details for attribution and credibility assessment."},"status":{"oneOf":[{"const":"active","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), moved to archives (archived), or soft deleted (deleted). Status affects what interactions are permitted on the topic."},{"const":"locked","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), moved to archives (archived), or soft deleted (deleted). Status affects what interactions are permitted on the topic."},{"const":"archived","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), moved to archives (archived), or soft deleted (deleted). Status affects what interactions are permitted on the topic."},{"const":"deleted","description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), moved to archives (archived), or soft deleted (deleted). Status affects what interactions are permitted on the topic."}],"description":"Current operational status of the discussion topic.\n\nIndicates whether the topic is open for replies (active), read-only (locked), moved to archives (archived), or soft deleted (deleted). Status affects what interactions are permitted on the topic."},"view_count":{"type":"integer","description":"Number of times this topic has been viewed.\n\nIncremented once per user per 24 hours to prevent artificial inflation. Provides engagement metrics and indicates topic popularity."},"reply_count":{"type":"integer","description":"Total number of replies to this topic.\n\nUpdated when replies are created or deleted. Indicates discussion activity level and engagement depth."},"is_pinned":{"type":"boolean","description":"Whether this topic is pinned to the top of category listings.\n\nPinned topics are featured by moderators or administrators and appear above regular topics regardless of sorting option selected."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the topic was created.\n\nUsed for sorting by newest topics, displaying topic age, and tracking content timeline."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the topic was last updated.\n\nReflects either topic edits or new reply activity. Used for sorting by recent activity and identifying active discussions."}},"required":["id","title","category","author","status","view_count","reply_count","is_pinned","created_at","updated_at"],"description":"Summary information about a discussion topic optimized for list displays and search results.\n\nThis schema provides essential topic metadata for browsing interfaces including category listings, search results, trending topics, and user activity feeds. It includes enough information for users to identify topics of interest without the overhead of full topic content, which can be up to 50,000 characters.\n\nThe summary format balances information richness with performance, providing title, category, author, engagement metrics (views and replies), status indicators, and timestamps for sorting and filtering. Users can quickly scan topic summaries to find discussions they want to read in detail.\n\nThis summary schema is used in paginated topic lists, category browsing interfaces, search result displays, user profile activity feeds, and favorited topics collections throughout the discussion board platform.","x-autobe-prisma-schema":"discussion_board_topics"},"IDiscussionBoardTopic.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":10,"maxLength":200,"description":"Topic title between 10 and 200 characters.\n\nMust not consist entirely of uppercase letters or contain only special characters. Must contain at least 3 alphabetic characters. URLs are not allowed in titles."},"body":{"type":"string","minLength":20,"maxLength":50000,"description":"Topic body content between 20 and 50,000 characters.\n\nSupports Markdown formatting. Must not be identical to the title. Cannot contain more than 10 URLs or consist of more than 80% URLs/special characters."},"category_id":{"type":"string","format":"uuid","description":"Category assignment for topic organization.\n\nMust reference a valid category ID from discussion_board_categories. Exactly one category is required per topic."},"tag_ids":{"oneOf":[{"type":"array","items":{"type":"string","format":"uuid"},"maxItems":5},{"type":"null"}],"description":"Optional tags for additional topic categorization.\n\nUp to 5 tags can be assigned per topic per business rules. Each tag ID must reference a valid tag from discussion_board_tags."}},"required":["title","body","category_id","tag_ids"],"description":"Request data for creating a new discussion topic.\n\nThis schema contains all information required to create a new topic on the economic and political discussion board. The author is derived from the authenticated user's JWT token, not from this request body, preventing users from posting topics as other users.\n\nBusiness rules enforced during topic creation include comprehensive title and body validation, mandatory single category assignment, optional tag assignment (maximum 5 tags), rate limiting (5 topics per hour, 20 per day), duplicate content detection, spam pattern detection, and automated quality checks.\n\nThe category must be one of the predefined platform categories like Economics, Politics, Current Events, or their subcategories. Tags enable cross-category discovery and content organization beyond the primary category structure.","x-autobe-prisma-schema":"discussion_board_topics"},"IDiscussionBoardTopic.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","minLength":10,"maxLength":200},{"type":"null"}],"description":"Updated topic title between 10 and 200 characters.\n\nSubject to same validation as creation. Title edits are locked when topic has 10+ replies to prevent confusion in active discussions."},"body":{"oneOf":[{"type":"string","minLength":20,"maxLength":50000},{"type":"null"}],"description":"Updated topic body content between 20 and 50,000 characters.\n\nSupports Markdown formatting. Subject to same validation rules as creation including URL limits and content quality checks."},"category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Updated category assignment.\n\nMust reference a valid category from discussion_board_categories. Category changes are allowed within 1 hour of creation for authors, anytime for moderators/administrators."},"tag_ids":{"oneOf":[{"type":"array","items":{"type":"string","format":"uuid"},"maxItems":5},{"type":"null"}],"description":"Updated tag assignments.\n\nUp to 5 tags per topic. Each tag ID must reference a valid active tag from discussion_board_tags."}},"required":[],"description":"Request data for updating an existing discussion topic.\n\nAll fields are optional to support partial updates using the Partial<T> pattern. Only the fields provided in the request will be modified - omitted fields retain their current values. The update operation is subject to time-based restrictions and role-based permissions.\n\nMembers can edit their own topics within 24 hours of creation (extended to 7 days for members with 100+ reputation). Moderators and administrators can edit any topic at any time. When a topic has 10+ replies, the title becomes locked to prevent confusion, though the body remains editable.\n\nAll updates undergo the same validation as topic creation, and modifications are recorded in discussion_board_edit_history for transparency. The topic's updated_at timestamp is refreshed to reflect the modification.","x-autobe-prisma-schema":"discussion_board_topics"},"IDiscussionBoardTopic.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve. Defaults to page 1 if not provided."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of topics per page.\n\nControls page size for pagination. Default is 25 topics per page per business rules. Maximum of 100 to prevent performance issues."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Keyword search across topic titles and body content.\n\nFull-text search using PostgreSQL trigram indexing for fuzzy matching. Searches both title and body fields with relevance ranking."},"category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific category.\n\nRestricts results to topics assigned to this category ID from discussion_board_categories."},"tag_ids":{"oneOf":[{"type":"array","items":{"type":"string","format":"uuid"}},{"type":"null"}],"description":"Filter by one or more tags.\n\nRestricts results to topics tagged with at least one of the specified tag IDs. Uses OR logic for multiple tags."},"author_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by topic author.\n\nRestricts results to topics created by the specified member ID from discussion_board_members."},"status":{"oneOf":[{"const":"active"},{"const":"locked"},{"const":"archived"},{"const":"deleted"},{"type":"null"}],"description":"Filter by topic status.\n\nRestricts results to topics with the specified status. Active topics are open for replies, locked topics are read-only, archived topics are old inactive topics, and deleted topics are soft-deleted."},"min_votes":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum vote score filter.\n\nRestricts results to topics with net vote score greater than or equal to this value. Useful for finding highly-rated content."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by topics created after this timestamp.\n\nEnables date range filtering for recent discussions."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by topics created before this timestamp.\n\nEnables date range filtering for historical discussions."},"sort_by":{"oneOf":[{"const":"recent_activity"},{"const":"newest"},{"const":"most_replies"},{"const":"most_views"},{"const":"hot"},{"const":"top"},{"type":"null"}],"description":"Sorting option for results.\n\nControls result ordering: recent_activity (newest replies first, default), newest (recently created first), most_replies (highest reply count), most_views (highest view count), hot (trending algorithm), top (highest votes)."}},"required":[],"description":"Request parameters for searching and filtering discussion topics.\n\nThis comprehensive search schema supports the advanced topic discovery features defined in the Search and Discovery requirements. Users can combine multiple filters simultaneously to find highly specific discussions on economic and political topics.\n\nThe request enables complex queries such as searching for 'inflation policy' within the Economics category, tagged with specific tags, created in the last 30 days, with minimum vote thresholds, sorted by recent activity. The flexible filtering supports both casual browsing and targeted research workflows.\n\nAll filter fields are optional, allowing users to perform broad searches without filters or highly targeted searches with multiple criteria combined."},"IDiscussionBoardTopic.IEditHistoryRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of edit history records to retrieve. Page numbers start at 1 for the first page of results.\n\nUsed in conjunction with limit to implement efficient pagination through large edit history datasets."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of edit history records to return per page.\n\nControls the page size for pagination, allowing clients to request between 1 and 100 records per page. Smaller page sizes enable faster initial loads, while larger sizes reduce the total number of requests needed for reviewing extensive edit histories.\n\nDefault value is typically 20 records per page if not specified."},"start_date":{"type":"string","format":"date-time","description":"Filter edit history to records created on or after this date.\n\nEnables date range filtering to retrieve only edits that occurred after a specific timestamp. Useful for tracking recent modifications or investigating changes within a particular time period.\n\nAccepts ISO 8601 date-time format in UTC timezone."},"end_date":{"type":"string","format":"date-time","description":"Filter edit history to records created on or before this date.\n\nEnables date range filtering to retrieve only edits that occurred before a specific timestamp. Used in conjunction with start_date to define precise time windows for edit history investigation.\n\nAccepts ISO 8601 date-time format in UTC timezone."},"editor_member_id":{"type":"string","format":"uuid","description":"Filter edit history to modifications performed by a specific member.\n\nAllows filtering the edit history to show only edits made by a particular user, identified by their unique member ID. Useful for tracking a specific user's content modifications or investigating editing patterns.\n\nReferences the discussion_board_members table primary key."},"sort_by":{"oneOf":[{"const":"created_at_desc","description":"Sort order for edit history records.\n\nControls the ordering of edit history results. Available options include chronological sorting (newest edits first or oldest edits first) to understand content evolution over time.\n\ncreated_at_desc (default): Most recent edits appear first, useful for seeing the latest modifications.\n\ncreated_at_asc: Oldest edits appear first, useful for understanding the complete chronological evolution of content."},{"const":"created_at_asc","description":"Sort order for edit history records.\n\nControls the ordering of edit history results. Available options include chronological sorting (newest edits first or oldest edits first) to understand content evolution over time.\n\ncreated_at_desc (default): Most recent edits appear first, useful for seeing the latest modifications.\n\ncreated_at_asc: Oldest edits appear first, useful for understanding the complete chronological evolution of content."}],"description":"Sort order for edit history records.\n\nControls the ordering of edit history results. Available options include chronological sorting (newest edits first or oldest edits first) to understand content evolution over time.\n\ncreated_at_desc (default): Most recent edits appear first, useful for seeing the latest modifications.\n\ncreated_at_asc: Oldest edits appear first, useful for understanding the complete chronological evolution of content."}},"required":[],"description":"Request parameters for retrieving paginated and filtered edit history for a discussion topic.\n\nThis request type supports querying the discussion_board_edit_history table for modifications to specific discussion topics. Edit history provides transparency into content evolution, showing all changes made to topic titles and bodies over time with complete before/after snapshots.\n\nThe request enables flexible filtering by date ranges, specific editors, and sorting preferences. Pagination parameters control the volume of results returned, enabling efficient browsing of topics with extensive edit histories.\n\nThis request type is used with the PATCH /discussionBoard/topics/{topicId}/editHistory endpoint to retrieve the complete modification timeline for transparency and accountability in economic and political discussions."},"IDiscussionBoardReply":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this reply record.\n\nThis UUID serves as the primary key in the discussion_board_replies table and uniquely identifies this specific reply across the entire platform. Used for reply permalinks, edit operations, voting references, and moderation actions."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Reference to the discussion topic this reply belongs to.\n\nThis foreign key links the reply to its parent topic in the discussion_board_topics table. All replies are associated with exactly one topic, enabling topic-based reply retrieval and discussion thread organization."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member who authored this reply.\n\nThis foreign key links to the discussion_board_members table identifying the reply author. Used for displaying author information, enforcing edit permissions, and tracking user contributions."},"parent_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the parent reply this is responding to for threaded conversations.\n\nNull for top-level replies directly responding to the main topic. Contains the UUID of the parent reply for nested responses, enabling the hierarchical discussion structure. This self-referential relationship supports threading up to 10 levels deep."},"content":{"type":"string","description":"Reply content between 1 and 10,000 characters.\n\nThe actual reply message posted by the member, supporting Markdown formatting for rich text presentation. Content is validated for length constraints, URL limits, spam patterns, and community guideline compliance."},"depth_level":{"type":"integer","minimum":0,"maximum":10,"description":"Nesting depth of this reply in the thread hierarchy.\n\n0 for top-level replies directly to the topic, incrementing by 1 for each nested level. Maximum depth is 10 levels per business rules. This field enables proper visual indentation and enforces threading depth constraints."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was posted.\n\nAutomatically set when the reply is created. Used for chronological sorting, edit window validation, and activity tracking. Displayed to users to show reply age and conversation timeline."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was last edited.\n\nAutomatically updated whenever the reply content is modified. Used to display 'Edited' indicators and track content modification history. When updated_at differs significantly from created_at, the system shows an edit indicator to inform readers."}},"required":["id","discussion_board_topic_id","discussion_board_member_id","content","depth_level","created_at","updated_at"],"description":"Complete reply entity representing a member's response to a discussion topic or another reply.\n\nThis entity captures all information about a single reply in the threaded discussion system including content, authorship, threading relationships, timing metadata, and deletion status. Replies support the platform's core value proposition of enabling organized, threaded conversations on economic and political topics.\n\nReplies maintain hierarchical relationships through parent_reply_id and track their position in the conversation hierarchy through depth_level. The threading structure supports focused sub-discussions within broader topics while maintaining clear conversation context.\n\nEngagement metrics like vote counts are tracked separately in the discussion_board_votes table. Author information is retrieved through the discussion_board_member_id relationship. Edit history is maintained separately in the discussion_board_edit_history table for transparency.","x-autobe-prisma-schema":"discussion_board_replies"},"IDiscussionBoardReply.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Reference to the discussion topic this reply belongs to.\n\nThis field identifies the parent discussion topic in the discussion_board_topics table where this reply will be posted. Every reply must be associated with exactly one topic to maintain discussion organization and enable threaded conversation tracking.\n\nThe topic must exist, be in active status (not locked or archived), and be accessible to the authenticated member for the reply to be successfully created."},"parent_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the parent reply this is responding to for threaded conversations.\n\nFor top-level replies directly responding to the main topic, this field is null. For nested replies responding to other members' comments, this field contains the UUID of the parent reply from the discussion_board_replies table.\n\nThis self-referential relationship enables the threaded discussion structure supporting conversations up to 10 levels deep. The system automatically calculates the depth_level based on the parent reply's depth to enforce threading constraints."},"content":{"type":"string","minLength":1,"maxLength":10000,"description":"Reply text content between 1 and 10,000 characters.\n\nThis field contains the actual reply message posted by the member. Content supports Markdown formatting for rich text expression including headers, bold/italic text, lists, blockquotes, code blocks, and links.\n\nThe minimum length of 1 character allows short responses like 'Yes' or 'Agreed' while the maximum ensures replies remain focused. Content undergoes validation including URL limits (maximum 5 URLs), duplicate detection (rejecting identical content to previous replies by same user in same topic), spam pattern detection, and profanity filtering before acceptance."}},"required":["discussion_board_topic_id","content"],"description":"Request body for creating a new reply to a discussion topic or nested reply.\n\nThis DTO captures the essential information needed to post a reply in the threaded discussion system. Members provide the topic they're replying to, optionally the specific parent reply if creating a nested response, and the reply content with Markdown formatting support.\n\nThe creation process validates business rules including content length constraints, threading depth limits (maximum 10 levels), topic status (must be active, not locked or archived), and rate limiting (30 replies per hour, 200 per day per member). The authenticated member from the JWT token becomes the reply author automatically.\n\nAfter successful creation, the system increments the parent topic's reply_count, updates the topic's last activity timestamp, and triggers notifications to the topic author (for top-level replies) or parent reply author (for nested replies).","x-autobe-prisma-schema":"discussion_board_replies"},"IDiscussionBoardReply.IUpdate":{"type":"object","properties":{"content":{"type":"string","minLength":1,"maxLength":10000,"description":"Updated reply text content between 1 and 10,000 characters.\n\nThis field contains the modified reply message. Content supports Markdown formatting for rich text expression. The update undergoes the same validation as creation including URL limits, spam pattern detection, and profanity filtering.\n\nMembers can edit their own replies within 1 hour of posting (24 hours for members with 100+ reputation). Moderators and administrators can edit any reply at any time."}},"required":[],"description":"Request body for updating an existing reply's content.\n\nThis DTO allows members to modify their reply content within allowed edit time windows (1 hour for standard members, 24 hours for 100+ reputation members). All fields are optional following the Partial<T> pattern for updates.\n\nEdit validation enforces the same content quality rules as creation including character length constraints, URL limits, and spam detection. The system records edit history in discussion_board_edit_history table for transparency.","x-autobe-prisma-schema":"discussion_board_replies"},"IDiscussionBoardReply.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination of reply results.\n\nUsed to navigate through multiple pages of replies when a discussion topic has more than the per-page limit. Combined with limit to calculate offset for database queries."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of reply records to return per page.\n\nDefault is 50 replies per page as specified in discussion management requirements. Maximum allowed is 100 to prevent excessive data transfer and maintain response performance."},"author_username":{"type":"string","description":"Filter replies by specific author username.\n\nWhen provided, returns only replies posted by the member with this username. Supports finding all contributions from a particular user within a discussion thread."},"content_search":{"type":"string","minLength":1,"maxLength":200,"description":"Full-text search query across reply content.\n\nSearches within reply text using PostgreSQL trigram indexing for efficient fuzzy matching. Helps users find specific arguments, data points, or references within long discussion threads."},"min_vote_score":{"type":"integer","description":"Minimum net vote score threshold for filtering replies.\n\nReturns only replies with vote scores (upvotes minus downvotes) equal to or greater than this value. Useful for surfacing high-quality contributions as determined by community voting."},"created_after":{"type":"string","format":"date-time","description":"Filter replies created after this timestamp.\n\nISO 8601 formatted date-time. Returns only replies posted after this date, useful for finding recent updates or tracking conversation evolution over time."},"created_before":{"type":"string","format":"date-time","description":"Filter replies created before this timestamp.\n\nISO 8601 formatted date-time. Returns only replies posted before this date, useful for historical analysis or finding older responses in long-running discussions."},"min_depth_level":{"type":"integer","minimum":0,"maximum":10,"description":"Minimum threading depth level for reply filtering.\n\nDepth level indicates reply nesting: 0 for top-level replies to the topic, incrementing for each nested level. Maximum depth is 10 per business rules."},"max_depth_level":{"type":"integer","minimum":0,"maximum":10,"description":"Maximum threading depth level for reply filtering.\n\nAllows focusing on shallow replies or exploring deeply nested conversations. Combined with min_depth_level enables precise depth range filtering."},"parent_reply_id":{"type":"string","format":"uuid","description":"Filter to show only direct replies to a specific parent reply.\n\nWhen provided, returns only replies where parent_reply_id matches this UUID. Enables retrieving all children of a specific comment for thread expansion UI."},"sort_by":{"oneOf":[{"const":"created_at_asc","description":"Sorting order for reply results.\n\nOptions include chronological (created_at_asc for oldest first preserving conversation flow, created_at_desc for newest first), vote_score_desc for highest quality contributions first, and depth_level_asc for exploring threading structure."},{"const":"created_at_desc","description":"Sorting order for reply results.\n\nOptions include chronological (created_at_asc for oldest first preserving conversation flow, created_at_desc for newest first), vote_score_desc for highest quality contributions first, and depth_level_asc for exploring threading structure."},{"const":"vote_score_desc","description":"Sorting order for reply results.\n\nOptions include chronological (created_at_asc for oldest first preserving conversation flow, created_at_desc for newest first), vote_score_desc for highest quality contributions first, and depth_level_asc for exploring threading structure."},{"const":"depth_level_asc","description":"Sorting order for reply results.\n\nOptions include chronological (created_at_asc for oldest first preserving conversation flow, created_at_desc for newest first), vote_score_desc for highest quality contributions first, and depth_level_asc for exploring threading structure."}],"description":"Sorting order for reply results.\n\nOptions include chronological (created_at_asc for oldest first preserving conversation flow, created_at_desc for newest first), vote_score_desc for highest quality contributions first, and depth_level_asc for exploring threading structure."},"include_deleted":{"type":"boolean","description":"Whether to include soft-deleted replies in results.\n\nOnly available to moderators and administrators. When true, includes replies with non-null deleted_at timestamps for audit purposes."}},"required":[],"description":"Request parameters for searching and filtering discussion board replies.\n\nThis request type supports complex queries to help users navigate threaded conversations within discussion topics. Filtering options enable finding specific responses, discovering high-quality contributions, and exploring the threaded discussion structure up to 10 levels deep as specified in business requirements.\n\nThe request supports full-text content search using trigram indexing, author-based filtering, vote score thresholds, date range queries, and threading depth constraints. Sorting options accommodate different user needs including preserving natural conversation flow (chronological) and surfacing valuable contributions (by vote score).\n\nPagination parameters control result set size with default 50 replies per page as defined in discussion management requirements. The operation enforces search rate limits and validates all filter parameters before executing queries."},"IDiscussionBoardReply.IEditHistoryRequest":{"type":"object","description":"Request parameters for retrieving paginated and filtered edit history for a discussion reply.\n\nThis request type supports querying the discussion_board_edit_history table for modifications to specific discussion replies. Edit history provides transparency into how reply content has evolved, maintaining accountability and enabling users to track conversation changes.\n\nThe request enables flexible filtering by date ranges, specific editors, and sorting preferences. Pagination parameters control result volume, enabling efficient navigation through replies with multiple revisions.\n\nThis request type is used with the PATCH /discussionBoard/topics/{topicId}/replies/{replyId}/editHistory endpoint to retrieve the complete modification timeline for reply transparency in threaded economic and political discussions.","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of edit history records to retrieve. Page numbers start at 1 for the first page of results.\n\nUsed in conjunction with limit to implement efficient pagination through edit history datasets for replies."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of edit history records to return per page.\n\nControls the page size for pagination, allowing clients to request between 1 and 100 records per page. Enables balancing between initial load performance and total request count for reviewing reply edit histories.\n\nDefault value is typically 20 records per page if not specified."},"start_date":{"type":"string","format":"date-time","description":"Filter edit history to records created on or after this date.\n\nEnables date range filtering to retrieve only edits that occurred after a specific timestamp. Useful for tracking recent modifications to replies or investigating changes within particular discussion periods.\n\nAccepts ISO 8601 date-time format in UTC timezone."},"end_date":{"type":"string","format":"date-time","description":"Filter edit history to records created on or before this date.\n\nEnables date range filtering to retrieve only edits that occurred before a specific timestamp. Used in conjunction with start_date to define precise time windows for investigating reply modifications.\n\nAccepts ISO 8601 date-time format in UTC timezone."},"editor_member_id":{"type":"string","format":"uuid","description":"Filter edit history to modifications performed by a specific member.\n\nAllows filtering the edit history to show only edits made by a particular user, identified by their unique member ID. Useful for tracking a specific user's reply modifications or investigating editing behavior patterns.\n\nReferences the discussion_board_members table primary key."},"sort_by":{"oneOf":[{"const":"created_at_desc"},{"const":"created_at_asc"}],"description":"Sort order for edit history records.\n\nControls the ordering of edit history results. Available options include chronological sorting to understand how reply content evolved through successive modifications.\n\ncreated_at_desc (default): Most recent edits appear first, showing the latest modifications to the reply.\n\ncreated_at_asc: Oldest edits appear first, revealing the complete chronological evolution from original reply to current state."}},"required":[]},"IDiscussionBoardEditHistory":{"type":"object","description":"Complete edit history record tracking modifications to discussion topics and replies for transparency and accountability.\n\nThis entity captures comprehensive snapshots of content before and after each modification, maintaining an immutable audit trail of all edits made to discussion content. Edit history supports the platform's commitment to transparent discussions on economic and political topics by allowing users to see how arguments and statements have evolved over time.\n\nEach edit record preserves the complete previous and new content states, identifies who made the edit, records when the modification occurred, and optionally captures the editor's explanation for the change. This data enables users to track content evolution, verify the context of discussions, and ensure that edits don't fundamentally change the meaning of content after other users have responded.\n\nEdit history is particularly important for political and economic discussions where precision and context matter significantly. Users can review edit trails to understand how positions have evolved, verify that edits represent clarifications rather than reversals, and maintain trust in the integrity of ongoing debates.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the edit history record.\n\nThis UUID serves as the primary key in the discussion_board_edit_history table and uniquely identifies each edit event in the audit trail."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member who performed this edit.\n\nLinks to discussion_board_members.id to identify the user who modified the content. This attribution ensures accountability for all content modifications and enables tracking of editing patterns across users.\n\nRequired for audit trail and edit transparency in discussion contexts."},"entity_type":{"type":"string","description":"Type of entity that was edited.\n\nIndicates whether the edited content was a discussion topic or a reply. Valid values are 'topic' (for discussion_board_topics) and 'reply' (for discussion_board_replies).\n\nUsed in conjunction with entity_id to reference the specific content item that was modified through a polymorphic relationship pattern."},"entity_id":{"type":"string","format":"uuid","description":"Unique identifier of the edited entity.\n\nReferences either discussion_board_topics.id or discussion_board_replies.id depending on the entity_type value. This polymorphic reference allows the edit history table to track modifications to both topics and replies efficiently.\n\nCombined with entity_type, this field provides the complete reference to the edited content item."},"previous_content":{"type":"string","description":"Complete snapshot of content before the edit was applied.\n\nPreserves the exact state of the topic title/body or reply content as it existed prior to modification. This snapshot is critical for audit purposes, appeal investigations, and understanding content evolution over time.\n\nStored in its entirety regardless of length to maintain accurate historical records. Users can compare previous_content with new_content to see exactly what changed in each edit."},"new_content":{"type":"string","description":"Complete snapshot of content after the edit was applied.\n\nCaptures the modified state of the topic title/body or reply content following the edit. Shows what the content became after the user's modifications were saved.\n\nStored alongside previous_content to enable complete before-and-after comparison for transparency in discussions."},"edit_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation provided by the editor describing why the modification was made.\n\nProvides context for content changes, helping other users understand the purpose of edits. Common edit reasons include 'Fixed typo', 'Added additional context', 'Corrected factual error', or 'Clarified argument'.\n\nWhile optional, edit reasons are encouraged to maintain transparency in discussions and help readers understand whether edits represent minor corrections or substantive changes to arguments."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this edit occurred and the history record was created.\n\nRepresents the precise moment the content modification was saved. Used for displaying edit timestamps (e.g., 'Edited 3 hours ago'), sorting edit history chronologically, and enforcing time-based edit restrictions defined in business rules.\n\nFormatted as ISO 8601 date-time string with timezone information for accurate cross-timezone tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp marking when this edit history record was deleted.\n\nTypically null as edit history records are preserved for audit integrity. In rare cases where edit history must be removed (such as when content contains illegal material or personal identifying information), this timestamp marks the record as deleted while preserving it in the database.\n\nNull for all active edit history records. Non-null values indicate the record is hidden from normal queries but retained for administrative audit purposes."}},"required":["id","discussion_board_member_id","entity_type","entity_id","previous_content","new_content","created_at"],"x-autobe-prisma-schema":"discussion_board_edit_history"},"IDiscussionBoardTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the tag.\n\nThis UUID serves as the primary key for the tag record in the discussion_board_tags table and is used for referencing tags in topic associations, followed tags relationships, and tag statistics aggregations."},"name":{"type":"string","description":"Tag name normalized to lowercase for consistency.\n\nMust be unique across all tags in the platform. Length is between 2 and 30 characters, containing only alphanumeric characters with spaces and hyphens allowed. Used for tag display, tag search, and tag-based content filtering.\n\nExamples: 'monetary-policy', 'inflation', 'trade agreements', 'political theory'"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description explaining what this tag represents and when to use it.\n\nHelps users apply tags consistently across discussions and reduces ambiguity in tag semantics. Displayed in tag selection interfaces and tag detail pages to guide proper tag usage.\n\nProvides context for economic and political terminology that may have specific meanings in the discussion board context."},"status":{"type":"string","description":"Tag lifecycle status controlling tag availability and usage.\n\nPossible values:\n- 'active': Available for use in topic tagging and search\n- 'pending_review': Awaiting moderator approval before public availability\n- 'disabled': Hidden from selection but existing associations preserved\n- 'merged': Consolidated into another tag\n\nStatus changes affect tag visibility in selection interfaces and search results."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the tag was first created in the system.\n\nUsed for tracking tag evolution, identifying emerging tags, and analyzing tag creation patterns over time. Automatically set on record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the tag was last modified.\n\nReflects changes to name, description, or status. Used for audit trail and tracking tag maintenance activities. Automatically updated on record modification."}},"required":["id","name","status","created_at","updated_at"],"description":"Complete discussion board tag entity representing a categorization label for topics.\n\nTags provide additional organization beyond primary categories, enabling cross-category topic discovery and personalized content filtering. Tags are created through topic creation workflows and managed by moderators to maintain vocabulary quality.\n\nEach tag supports multiple discussion topics through the topic_tags junction table and can be followed by users for personalized recommendations and notifications.","x-autobe-prisma-schema":"discussion_board_tags"},"IDiscussionBoardTag.ISummary":{"type":"object","description":"Summary representation of a discussion board tag optimized for list displays and tag cloud visualizations.\n\nThis type provides essential tag information without full relational data, designed for efficient rendering in tag browsing interfaces, popular tags displays, and tag selection dropdowns during topic creation. The summary includes the core tag identity and status information necessary for users to understand tag purpose and relevance.\n\nTags serve as secondary organizational metadata complementing the primary category structure (Economics and Politics), enabling cross-category topic discovery and content personalization through tag following and filtering.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the tag.\n\nThis UUID serves as the primary key in the discussion_board_tags table and is used for all tag-related operations including tag following, topic tagging, and tag statistics retrieval."},"name":{"type":"string","description":"Tag name displayed throughout the platform, normalized to lowercase for consistency.\n\nTag names are unique across the entire tag vocabulary and must be between 2 and 30 characters in length, containing only alphanumeric characters, hyphens, and spaces. Examples include 'monetary-policy', 'fiscal stimulus', 'international trade', 'electoral systems'.\n\nThe normalized lowercase format ensures consistent tag matching and prevents duplicate tags with slight case variations."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation of what this tag represents and when to use it.\n\nDescriptions help users apply tags consistently across discussions and reduce ambiguity in tag semantics. Recommended for frequently used tags to improve user understanding and tag application quality.\n\nNull when no description has been provided for this tag."},"status":{"type":"string","description":"Tag lifecycle status indicating availability and management state.\n\nValid values:\n- 'active': Tag is available for use in topic creation and visible in tag browsing interfaces\n- 'pending_review': New tag awaiting moderator approval before becoming active\n- 'disabled': Tag is hidden from selection but existing tag associations are preserved\n- 'merged': Tag has been consolidated into another preferred tag\n\nThe status controls tag visibility in user-facing interfaces while preserving existing topic-tag associations for data integrity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the tag was first created in the system.\n\nUsed for tracking tag evolution, identifying emerging tags, and understanding the platform's tag vocabulary growth over time. Displayed in ISO 8601 format with timezone information."}},"required":["id","name","status","created_at"],"x-autobe-prisma-schema":"discussion_board_tags"},"IDiscussionBoardTag.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Tag name to be created, will be normalized to lowercase.\n\nMust be unique across all existing tags. Length between 2 and 30 characters, containing only alphanumeric characters with spaces and hyphens allowed.\n\nExamples: 'monetary-policy', 'fiscal stimulus', 'electoral systems', 'trade policy'"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description explaining what this tag represents and when to apply it.\n\nProviding a clear description helps users apply tags consistently and reduces tag duplication through similar but differently named tags. Recommended for tags covering complex economic or political concepts.\n\nThis description appears in tag selection interfaces and tag detail pages."}},"required":["name"],"description":"Tag creation request data for adding new categorization labels to the discussion board.\n\nWhen moderators or administrators create tags, the system validates uniqueness, normalizes the name to lowercase for consistency, and sets the initial status based on creator role (pending_review for moderators, active for administrators).\n\nTag creation expands the platform's content categorization vocabulary, enabling more granular topic organization and discovery for economic and political discussions.","x-autobe-prisma-schema":"discussion_board_tags"},"IDiscussionBoardTag.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated tag name to replace the existing name.\n\nMust remain unique across all tags and meet the same naming requirements (2-30 characters, alphanumeric with spaces and hyphens). Will be normalized to lowercase for consistency.\n\nRenaming tags is useful for correcting typos, improving clarity, or standardizing tag vocabulary across the platform."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated description explaining tag meaning and usage guidelines.\n\nCan be set to provide clearer guidance, updated to reflect evolved tag semantics, or set to null to remove description. Clear descriptions improve tag consistency and reduce confusion in tag application across economic and political discussions."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated tag lifecycle status.\n\nPossible values:\n- 'active': Make tag available for general use\n- 'pending_review': Mark tag for moderator review\n- 'disabled': Hide tag from selection while preserving existing associations\n- 'merged': Mark tag as consolidated into another tag\n\nStatus changes control tag visibility and availability for topic tagging."}},"required":[],"description":"Tag update request data for modifying existing tag properties.\n\nAll fields are optional - only provided fields are updated. Tag updates support renaming misspelled tags, adding or clarifying descriptions for better tag semantics, changing status to manage tag lifecycle (approve pending tags, disable inappropriate tags, merge duplicates), and maintaining the tag vocabulary as discussion topics evolve.\n\nExisting topic associations are preserved when tags are updated, ensuring content organization remains stable.","x-autobe-prisma-schema":"discussion_board_tags"},"IDiscussionBoardTag.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text search query for finding tags by name or description.\n\nSupports partial matching using PostgreSQL trigram indexing for fuzzy search. Searches across both tag name and description fields to help users discover relevant tags.\n\nExample: Searching 'monetary' finds tags like 'monetary-policy', 'monetary theory', etc."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter tags by lifecycle status.\n\nPossible values: 'active', 'pending_review', 'disabled', 'merged'. Regular users typically filter for 'active' tags only, while moderators and administrators can view all statuses for tag management.\n\nFiltering by status helps administrators identify tags needing review or cleanup."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter tags created on or after this timestamp.\n\nUseful for finding newly created tags, tracking tag vocabulary growth over time, and identifying emerging discussion topics."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter tags created on or before this timestamp.\n\nCombined with created_after, enables date range filtering for temporal tag analysis and identifying historical tag creation patterns."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort results by.\n\nSupported values:\n- 'name': Alphabetical by tag name\n- 'created_at': Chronological by creation date\n- 'usage_count': By number of topics tagged (requires join with statistics)\n- 'recent_usage': By trending activity\n\nDefault is typically 'name' for alphabetical browsing."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order direction.\n\nSupported values:\n- 'asc': Ascending order (A-Z, oldest first, lowest count first)\n- 'desc': Descending order (Z-A, newest first, highest count first)\n\nDefault is typically 'asc' for alphabetical sorts and 'desc' for usage-based sorts."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination, starting from 1.\n\nDetermines which page of results to return when the total result set exceeds the page size limit. Used with limit to implement efficient pagination through large tag vocabularies."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Maximum number of tags to return per page.\n\nTypically set to 20-50 for tag list views and tag clouds. Maximum allowed is 100 to prevent excessive data transfer. Combined with page parameter to implement pagination."}},"required":[],"description":"Search and filtering parameters for retrieving discussion board tags.\n\nSupports complex tag queries with text search across names and descriptions, status filtering for tag lifecycle management, date range filtering for temporal analysis, and flexible sorting options. All parameters are optional, allowing simple browsing (no filters) or highly specific tag searches.\n\nUsed by tag browsing interfaces, tag selection dropdowns, tag management dashboards, and tag discovery features."},"IDiscussionBoardTagStatistics":{"type":"object","description":"Aggregated statistics for a discussion board tag from the materialized view.\n\nThis type provides comprehensive usage metrics and engagement indicators derived from the mv_discussion_board_tag_statistics materialized view. Statistics are denormalized for performance, avoiding expensive real-time aggregation across multiple tables.\n\nUsed for tag cloud generation, popular tags displays, trending tag identification, and tag discovery features without impacting normalized base tables.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the tag statistics record.\n\nPrimary key in the mv_discussion_board_tag_statistics materialized view."},"discussion_board_tag_id":{"type":"string","format":"uuid","description":"Reference to the tag for which statistics are calculated.\n\nForeign key to discussion_board_tags.id."},"usage_count":{"type":"integer","description":"Total number of topics currently tagged with this tag.\n\nAggregated from the discussion_board_topic_tags junction table. Indicates overall tag popularity and helps users identify actively used tags.\n\nUsed for tag cloud size calculations and popular tags displays."},"recent_usage_count":{"type":"integer","description":"Number of topics tagged in the last 7 days.\n\nIndicates current tag momentum and identifies trending tags with increasing usage. Helps surface emerging topics and current discussion themes.\n\nUseful for 'trending tags' features and identifying topics gaining community attention."},"total_votes":{"type":"integer","description":"Sum of all votes (upvotes + downvotes) on topics with this tag.\n\nIndicates tag engagement level and community interest in topics associated with this tag. Higher total votes suggest active discussion and community engagement regardless of vote direction.\n\nUseful for identifying highly engaged tag categories."},"follower_count":{"type":"integer","description":"Number of users following this tag for personalized recommendations.\n\nAggregated from the discussion_board_followed_tags junction table. Indicates tag popularity and user interest in receiving notifications and recommendations for topics with this tag.\n\nHelps identify tags that users actively track for content discovery."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when these statistics were last recalculated.\n\nUsed for cache invalidation and refresh scheduling. Indicates data freshness for consumers who need to understand whether statistics represent current platform state or slightly stale cached data.\n\nMaterialized views are refreshed periodically rather than in real-time for performance optimization."}},"required":["id","discussion_board_tag_id","usage_count","recent_usage_count","total_votes","follower_count","updated_at"],"x-autobe-prisma-schema":"mv_discussion_board_tag_statistics"},"IDiscussionBoardVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the vote record.\n\nPrimary key enabling precise vote tracking, modification operations, and referential integrity across the voting system. Each vote cast receives a unique identifier for vote change workflows and fraud detection analysis."},"votable_type":{"oneOf":[{"const":"topic"},{"const":"reply"}],"description":"Type of content being voted on.\n\nDiscriminator indicating whether the vote targets a discussion topic or a threaded reply. Determines which content table the votable_id references in the polymorphic voting system."},"votable_id":{"type":"string","format":"uuid","description":"Unique identifier of the voted content.\n\nReferences either discussion_board_topics.id or discussion_board_replies.id based on votable_type. Establishes the vote-to-content relationship for ranking algorithms and reputation calculations."},"vote_type":{"oneOf":[{"const":"upvote"},{"const":"downvote"}],"description":"Vote direction indicating content assessment.\n\nUpvote signals valuable, well-reasoned contributions to economic or political discourse. Downvote indicates low-quality, off-topic, or unconstructive content. Direction affects content ranking and author reputation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was cast.\n\nImmutable creation timestamp used for enforcing the 5-minute vote change window, tracking voting velocity for fraud detection, and analyzing temporal voting patterns across the platform."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last vote modification.\n\nUpdated when users change vote direction within the 5-minute modification window. Tracks vote changes for audit trail and vote manipulation pattern analysis."}},"required":["id","votable_type","votable_id","vote_type","created_at","updated_at"],"description":"Vote record for community-driven content assessment.\n\nRepresents member votes on discussion topics and replies, forming the foundation of the platform's democratic content curation system. Votes drive content ranking algorithms (Hot, Top, Controversial), influence author reputation scores, and enable community-driven quality control for economic and political discourse.\n\nSECURITY: The discussion_board_member_id field from the Prisma schema is intentionally excluded from this response type. Vote ownership is managed server-side through JWT authentication and should never be exposed in responses to prevent unauthorized vote manipulation.\n\nVote records enforce business rules including self-voting prohibition, one vote per user per content item, time-limited modification windows (5 minutes), and rate limiting (200 votes/hour). The polymorphic design through votable_type/votable_id enables unified vote tracking across topics and replies without schema duplication.","x-autobe-prisma-schema":"discussion_board_votes"},"IDiscussionBoardVote.ICreate":{"type":"object","properties":{"votable_type":{"oneOf":[{"const":"topic"},{"const":"reply"}],"description":"Type of content being voted on.\n\nSpecifies whether the vote targets a discussion topic or threaded reply. This discriminator determines which content table (discussion_board_topics or discussion_board_replies) the votable_id references in the polymorphic voting system."},"votable_id":{"type":"string","format":"uuid","description":"Unique identifier of the content being voted on.\n\nReferences either discussion_board_topics.id or discussion_board_replies.id depending on votable_type. System validates content exists and is accessible before creating vote record."},"vote_type":{"oneOf":[{"const":"upvote"},{"const":"downvote"}],"description":"Direction of the vote being cast.\n\nUpvote indicates valuable, well-reasoned content contributing to discourse. Downvote signals low-quality, off-topic, or misleading content. Vote direction affects ranking algorithms and triggers reputation adjustments for content authors."}},"required":["votable_type","votable_id","vote_type"],"description":"Vote creation request for democratic content curation.\n\nEnables authenticated members to cast upvotes or downvotes on discussion topics and replies. The voting system is fundamental to community-driven quality control, surfacing valuable economic and political discourse while suppressing low-quality contributions.\n\nSECURITY: The discussion_board_member_id field is NOT included in this request type. Vote ownership is automatically captured from the authenticated user's JWT token server-side, preventing vote manipulation and ensuring vote attribution integrity.\n\nValidation enforces minimum reputation requirements (10 points for upvoting, 50 for downvoting), self-voting prohibition, single vote per user per content, and rate limits (200 votes/hour, 1,000/day). System validates referenced content exists and is accessible before accepting votes.","x-autobe-prisma-schema":"discussion_board_votes"},"IDiscussionBoardVote.IUpdate":{"type":"object","properties":{"vote_type":{"oneOf":[{"const":"upvote","description":"Change vote to upvote direction.\n\nRepresents member's positive assessment of content quality, indicating the contribution is valuable, well-reasoned, or constructive to the discussion."},{"const":"downvote","description":"Change vote to downvote direction.\n\nRepresents member's negative assessment of content quality, indicating the contribution is low-quality, off-topic, misleading, or does not contribute constructively."}],"description":"New vote direction when changing an existing vote.\n\nAllows members to change their vote from upvote to downvote or vice versa within the 5-minute modification window defined in business rules. Vote changes trigger immediate recalculation of content scores (change from upvote to downvote decrements net score by 2) and author reputation adjustments (reversing original reputation change and applying new change).\n\nThis field is optional because vote updates can also represent vote removal, where the vote record is deleted entirely rather than changed to a different direction. When present, must be different from the current vote_type to represent a meaningful vote change."}},"required":[],"description":"Update data for modifying an existing vote within the allowed time window.\n\nEnables members to change their vote direction (upvote to downvote or vice versa) within 5 minutes of the original vote casting per business rules. Vote modifications immediately affect content net scores and author reputation calculations, supporting dynamic community assessment of discussion quality.\n\nAll vote updates are validated against the time-based modification window. After 5 minutes from the original vote timestamp, votes are locked and cannot be changed. The system enforces that only the original voter can modify their own votes, preventing unauthorized vote manipulation. Vote changes are tracked for audit trail and pattern analysis.\n\nUpdate operations also support vote removal scenarios where members retract their vote entirely, returning to a neutral state. In removal cases, the vote record is deleted from the database rather than modified, and content scores and reputation are recalculated without that vote's contribution.","x-autobe-prisma-schema":"discussion_board_votes"},"IDiscussionBoardUserReputation":{"type":"object","description":"Aggregated reputation score representing a user's contribution quality as judged by the community through voting on their content.\n\nReputation is calculated using a weighted formula: (topic upvotes × 5) - (topic downvotes × 2) + (reply upvotes × 2) - (reply downvotes × 1). This weighting reflects that creating discussion topics requires more effort than posting replies.\n\nReputation serves multiple purposes: provides social proof of contribution quality, enables reputation-based privilege unlocking (downvoting at 50 points, extended editing at 100 points, tag creation at 500 points), determines reputation tier badges (New Contributor, Active Member, Valued Contributor, Trusted Contributor, Expert Contributor), and influences content ranking algorithms for high-reputation authors.\n\nThis denormalized data structure enables efficient reputation display on profiles, leaderboards, and privilege validation without expensive vote aggregation queries. Updated in real-time as votes are cast, changed, or removed on user content.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this reputation record.\n\nPrimary key enabling direct reputation record access and referential integrity across the system."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Reference to the member whose reputation is tracked.\n\nLinks to discussion_board_members.id, establishing one-to-one relationship between members and their reputation scores."},"total_score":{"type":"integer","description":"Total reputation score calculated from all votes on user's content.\n\nWeighted formula: (topic upvotes × 5) - (topic downvotes × 2) + (reply upvotes × 2) - (reply downvotes × 1). Used for leaderboards, privilege unlocking, and reputation tier determination.\n\nReputation tiers: 0-99 (New Contributor), 100-499 (Active Member), 500-999 (Valued Contributor), 1000-4999 (Trusted Contributor), 5000+ (Expert Contributor)."},"upvotes_received":{"type":"integer","description":"Total number of upvotes received across all user's topics and replies.\n\nUsed for reputation calculation and displaying user statistics. Represents community endorsement of the user's contributions to economic and political discussions."},"downvotes_received":{"type":"integer","description":"Total number of downvotes received across all user's topics and replies.\n\nUsed for reputation calculation and quality monitoring. Indicates content that the community found unhelpful, low-quality, or inappropriate."},"topics_score":{"type":"integer","description":"Reputation score derived from votes on user's topics only.\n\nAllows separate tracking of topic creation quality versus reply quality. Calculated as (topic upvotes × 5) - (topic downvotes × 2)."},"replies_score":{"type":"integer","description":"Reputation score derived from votes on user's replies only.\n\nAllows separate tracking of reply quality versus topic creation quality. Calculated as (reply upvotes × 2) - (reply downvotes × 1)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when reputation was last recalculated.\n\nUsed for cache invalidation and tracking reputation changes over time. Updated in real-time as votes are cast, changed, or removed on the user's content."}},"required":["id","discussion_board_member_id","total_score","upvotes_received","downvotes_received","topics_score","replies_score","updated_at"],"x-autobe-prisma-schema":"discussion_board_user_reputation"},"IDiscussionBoardReport":{"type":"object","description":"Complete representation of a content report submitted to flag guideline violations.\n\nThis type provides comprehensive report information including reporter details, reported content references, violation categorization, severity assessment, moderator assignment, resolution details, and complete audit trail. Used for moderation queue detailed views, appeal investigations, and moderation quality assurance.\n\nReports are the primary mechanism for community-driven content policing, enabling members to flag topics or replies that violate community standards for civil discourse on economic and political topics.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the content report.\n\nPrimary key in the discussion_board_reports table."},"reporter_member_id":{"type":"string","format":"uuid","description":"Reference to the member who submitted this report.\n\nForeign key to discussion_board_members.id. Used for tracking reporting patterns and preventing report abuse."},"reported_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the reported topic if violation is in a discussion topic.\n\nForeign key to discussion_board_topics.id. Null when reported content is a reply rather than a topic."},"reported_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the reported reply if violation is in a discussion reply.\n\nForeign key to discussion_board_replies.id. Null when reported content is a topic rather than a reply."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator assigned to review this report.\n\nForeign key to discussion_board_moderators.id. Null for unassigned pending reports. Set when moderator claims the report for review."},"violation_category":{"type":"string","description":"Category of guideline violation reported.\n\nValid values: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, other.\n\nDetermines severity assignment and moderator response urgency."},"severity_level":{"type":"string","description":"Severity level for moderation queue prioritization.\n\nValid values: critical, high, medium, low.\n\nAutomatically assigned based on violation category for queue ordering."},"reporter_explanation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional additional context from the reporter explaining the violation.\n\nMaximum 500 characters. Helps moderators understand the reporter's perspective and provides context beyond the violation category selection.\n\nRequired when violation category is 'other', optional for all other categories."},"status":{"type":"string","description":"Current status in the moderation workflow.\n\nValid values: pending, under_review, resolved, dismissed.\n\nTracks report progression from submission through review to final outcome."},"resolution_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Moderator's notes explaining the resolution decision.\n\nRequired when status changes to resolved or dismissed. Provides transparency for moderation decisions and supports appeal investigations.\n\nNull for pending or under_review reports."},"dismissal_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for dismissal if report was determined invalid.\n\nValid values: no_violation, within_guidelines, malicious_report, insufficient_evidence, other.\n\nRequired when status is dismissed. Null for all other statuses."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was resolved or dismissed by a moderator.\n\nNull for pending and under_review reports. Used for tracking moderator response times and measuring performance against target response times."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was submitted.\n\nUsed for time-in-queue calculations and prioritizing older reports."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the report was last updated.\n\nReflects status changes, moderator assignment, or resolution actions."}},"required":["id","reporter_member_id","violation_category","severity_level","status","created_at","updated_at"],"x-autobe-prisma-schema":"discussion_board_reports"},"IDiscussionBoardReport.ISummary":{"type":"object","description":"Summary representation of a content report optimized for moderation queue displays.\n\nThis type provides essential report information for moderators reviewing the moderation queue, including violation details, priority indicators, and current processing status. The summary enables efficient scanning of multiple reports to identify high-priority violations and manage moderation workflow.\n\nReports represent community-flagged content that potentially violates guidelines, supporting the platform's community-driven moderation approach.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the content report.\n\nPrimary key in the discussion_board_reports table."},"violation_category":{"type":"string","description":"Category of community guideline violation reported.\n\nValid values: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, other.\n\nDetermines report severity and moderator response urgency."},"severity_level":{"type":"string","description":"Severity level for moderation queue prioritization.\n\nValid values: critical, high, medium, low.\n\nAutomatically assigned based on violation category. Critical severity (hate_speech, threats, doxxing) requires immediate attention within 1 hour. High severity (personal_attack) targets 6-hour response. Medium severity (misinformation, offensive_language, trolling) targets 24-hour response. Low severity (spam, off_topic) targets 72-hour response."},"status":{"type":"string","description":"Current processing status in the moderation workflow.\n\nValid values: pending, under_review, resolved, dismissed.\n\nTracks report progression from submission through moderator review to final resolution."},"reporter_member_id":{"type":"string","format":"uuid","description":"Reference to the member who submitted this report.\n\nForeign key to discussion_board_members.id. Used for tracking reporting patterns and preventing report abuse."},"reported_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the reported topic if violation is in a discussion topic.\n\nForeign key to discussion_board_topics.id. Null when reported content is a reply rather than a topic."},"reported_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the reported reply if violation is in a discussion reply.\n\nForeign key to discussion_board_replies.id. Null when reported content is a topic rather than a reply."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator assigned to review this report.\n\nForeign key to discussion_board_moderators.id. Null when the report is pending and has not been claimed. Populated when a moderator assigns themselves or an administrator assigns the report.\n\nDisplays moderation workload distribution and report ownership in the queue."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was submitted.\n\nUsed for tracking time in queue, prioritizing older unresolved reports, and measuring moderation response times against platform targets.\n\nDisplayed in ISO 8601 format with timezone information."}},"required":["id","violation_category","severity_level","status","reporter_member_id","created_at"],"x-autobe-prisma-schema":"discussion_board_reports"},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reported_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the discussion topic being reported for guideline violations.\n\nProvide this field when reporting a topic. Exactly one of reported_topic_id or reported_reply_id must be specified, as reports target specific content items. The topic must exist in the discussion_board_topics table and be accessible to the reporter."},"reported_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the discussion reply being reported for guideline violations.\n\nProvide this field when reporting a reply within a discussion thread. Exactly one of reported_topic_id or reported_reply_id must be specified. The reply must exist in the discussion_board_replies table and be accessible to the reporter."},"violation_category":{"type":"string","description":"Category of community guideline violation being reported.\n\nRequired field that must be one of the predefined violation categories: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, or other. The selected category determines severity level and moderation queue priority. When selecting 'other', reporter_explanation becomes required with minimum 20 characters."},"reporter_explanation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional additional context explaining why the content violates community guidelines.\n\nThis field allows the reporting member to provide up to 500 characters of explanation supporting their report. It becomes required when violation_category is 'other' and must contain at least 20 characters in that case. Detailed explanations help moderators understand the concern and make informed decisions."}},"required":["violation_category"],"description":"Content report submission data for flagging topics or replies that violate community guidelines.\n\nThis request body captures the essential information needed to create a new content report and add it to the moderation queue. Members use this to report violations they encounter in economic and political discussions, triggering the professional moderation workflow.\n\nThe reporter's identity is derived from the authenticated user context and is not included in this request body. The system automatically sets reporter_member_id from the JWT token, preventing report submission on behalf of other users. Similarly, system-calculated fields like severity_level, status, and timestamps are generated server-side based on the violation_category and creation context.\n\nValidation ensures exactly one content reference is provided (either reported_topic_id or reported_reply_id), the violation_category is a valid predefined value, and the reporter_explanation meets length requirements when required. The system enforces rate limits (10 reports per hour, 50 per day) and prevents duplicate reports on the same content within 24 hours.","x-autobe-prisma-schema":"discussion_board_reports"},"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator claiming or being assigned to review this report.\n\nSet this field when a moderator takes ownership of a pending report by assigning themselves, or when administrators reassign reports to specific moderators. Assigning a moderator typically transitions the report status from 'pending' to 'under_review'."},"status":{"type":"string","description":"Updated workflow status of the content report.\n\nAllowed transitions vary based on current status and moderator actions. Valid values are: pending, under_review (when moderator assigns themselves), resolved (when moderator completes review and takes action), or dismissed (when moderator determines no violation occurred). Status changes should follow logical workflow progression."},"resolution_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Moderator's detailed explanation of the resolution decision.\n\nRequired when status is updated to 'resolved'. Minimum 20 characters to ensure adequate explanation for transparency and potential appeals. The resolution notes document what moderation action was taken (content hidden, user warned, etc.) and the reasoning behind the decision."},"dismissal_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for dismissing the report if no violation was found.\n\nRequired when status is updated to 'dismissed'. Valid values include: no_violation, within_guidelines, malicious_report, insufficient_evidence, or other. Helps reporting users understand why their report was not acted upon and supports moderation quality assurance."}},"required":[],"description":"Update payload for modifying content report status, assignment, and resolution details during moderation workflow.\n\nThis request body supports the moderation queue workflow where moderators claim reports, progress them through review stages, and ultimately resolve or dismiss them with appropriate documentation. All fields are optional to support partial updates at different workflow stages.\n\nModerators typically update reports in stages: first assigning themselves (setting assigned_moderator_id and status to 'under_review'), then completing review by updating status to 'resolved' or 'dismissed' with required resolution_notes or dismissal_reason respectively. The system validates that required explanations are provided when status changes to terminal states.\n\nThe update operation enforces business rules including requiring resolution_notes when marking resolved, requiring dismissal_reason when marking dismissed, preventing status transitions that violate workflow logic, and ensuring all moderator actions are logged in the audit trail for accountability.","x-autobe-prisma-schema":"discussion_board_reports"},"IDiscussionBoardReport.IRequest":{"type":"object","description":"Request parameters for searching and filtering content reports in the moderation queue.\n\nThis type defines comprehensive search criteria, filtering options, sorting preferences, and pagination parameters that moderators and administrators use to manage the content report queue efficiently. Supports prioritization workflows, queue organization, and targeted report searches.","properties":{"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter reports by processing status.\n\nValid values: pending, under_review, resolved, dismissed.\n\nModerators typically filter to 'pending' to find unclaimed reports or 'under_review' to track their active investigations."},"violation_category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter reports by violation type.\n\nValid values: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, other.\n\nAllows moderators to focus on specific violation types matching their expertise or priority areas."},"severity_level":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter reports by severity for prioritization.\n\nValid values: critical, high, medium, low.\n\nModerators can prioritize critical violations requiring immediate attention."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter reports by assigned moderator.\n\nUse specific moderator UUID to view their assigned reports, or null to find unassigned reports awaiting moderator assignment."},"from_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter reports submitted on or after this date.\n\nEnables date range filtering for temporal analysis of report patterns and moderation queue age."},"to_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter reports submitted on or before this date.\n\nCombines with from_date for complete date range filtering."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort results by: priority, created_at, severity_level.\n\nDefaults to priority score for efficient queue processing. Priority score considers severity level, time in queue, and violation patterns."},"sort_order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort direction: asc or desc.\n\nDefaults to desc for priority (highest priority first), asc for chronological (oldest first)."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination (1-based).\n\nDefaults to 1 if not specified."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of reports per page.\n\nDefaults to 25. Maximum 100 to prevent performance degradation."}},"required":[]},"IDiscussionBoardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this moderation action record.\n\nThis primary key uniquely identifies each moderation action in the discussion_board_moderation_actions table. It is used to reference this specific moderation action from related tables including warnings, suspensions, bans, and appeals.\n\nThe moderation action ID enables tracking the complete chain of enforcement from initial report through moderation decision to potential appeal and resolution."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator who performed this moderation action.\n\nIdentifies the moderator from the discussion_board_moderators table who took enforcement action. Nullable because some actions are performed by administrators rather than moderators.\n\nThis field supports moderator accountability, performance review, and audit trails showing which moderator made which decisions."},"administrator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the administrator who performed this moderation action.\n\nIdentifies the administrator from the discussion_board_administrators table who took enforcement action. Nullable because some actions are performed by moderators rather than administrators.\n\nAdministrators have broader authority than moderators and can perform all moderation actions including permanent bans and appeal reversals."},"target_member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who is the target of this moderation action.\n\nReferences the discussion_board_members table identifying which member is affected by the enforcement action. Required for all moderation actions whether content-specific or account-specific.\n\nThe target member receives notifications about actions taken and can view moderation decisions affecting them through their account history."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the content report that triggered this moderation action.\n\nLinks to the original report from discussion_board_reports table that prompted moderator review. Nullable for proactive moderation actions taken without user reports.\n\nThis linkage supports moderation transparency and enables reporters to see resolution outcomes."},"content_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the discussion topic that was subject to moderation.\n\nIdentifies which topic from discussion_board_topics table was moderated. Nullable for actions not targeting specific topic content.\n\nThis field enables reviewing moderation decisions in the context of the specific content and supports appeal investigations."},"content_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the discussion reply that was subject to moderation.\n\nIdentifies which reply from discussion_board_replies table was moderated. Nullable for actions not targeting specific reply content.\n\nImportant for maintaining context in threaded discussions and supporting appeals about specific content violations."},"action_type":{"oneOf":[{"const":"hide_content","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},{"const":"delete_content","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},{"const":"issue_warning","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},{"const":"suspend_user","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},{"const":"ban_user","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},{"const":"restore_content","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},{"const":"dismiss_report","description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."}],"description":"Type of moderation action performed.\n\nSpecifies the enforcement action taken by the moderator or administrator: hide_content (make invisible to regular users), delete_content (permanently remove from public view), issue_warning (formally warn user), suspend_user (temporarily restrict privileges), ban_user (permanently prevent access), restore_content (reverse previous removal), dismiss_report (determine no violation exists).\n\nEach action type triggers specific downstream effects including notifications, privilege changes, and content visibility modifications."},"reason":{"type":"string","description":"Detailed explanation of why this moderation action was taken.\n\nProvides comprehensive justification for the moderation decision with minimum 20 characters required for substantive explanations. Critical for transparency, accountability, and appeals processing.\n\nModerators explain what guideline was violated, how the content/behavior violated it, and why the specific enforcement action was appropriate. Shown to affected users and reviewed during appeals."},"violation_category":{"oneOf":[{"const":"personal_attack"},{"const":"hate_speech"},{"const":"misinformation"},{"const":"spam"},{"const":"offensive_language"},{"const":"off_topic"},{"const":"threats"},{"const":"doxxing"},{"const":"trolling"},{"const":"other"},{"type":"null"}],"description":"Category of guideline violation that prompted this action.\n\nCategorizes the violation type using standard categories: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, or other. Nullable for actions not involving guideline violations.\n\nCategorization supports consistent enforcement, pattern analysis, and identification of systemic issues."},"content_snapshot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preserved snapshot of content as it appeared when action was taken.\n\nCaptures complete content (topic body or reply content) at moderation moment, creating immutable record for appeals and audit. Nullable for actions not involving specific content.\n\nEnsures fair evaluation based on actual content state, prevents retroactive manipulation, and maintains audit integrity for legal compliance."},"is_reversed":{"type":"boolean","description":"Whether this moderation action was reversed on appeal or review.\n\nIndicates if the moderation decision was overturned after appeal or administrative review. False for original actions, true if subsequently reversed.\n\nReversals occur when appeals demonstrate the original decision was incorrect, providing transparency about moderation accuracy and supporting continuous improvement of moderation practices."},"reversed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the moderation action was reversed.\n\nRecords the exact moment when the action was overturned through appeal or administrative review. Nullable if the action has not been reversed.\n\nThis timestamp tracks the timeline of moderation decisions and their corrections, supporting audit trails and appeal processing workflows."},"reversal_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Explanation for why the moderation action was reversed.\n\nProvides detailed justification when a moderation decision is overturned, explaining what was incorrect about the original decision or what new information prompted the reversal. Nullable if action not reversed.\n\nReversal reasons support learning from moderation mistakes and maintaining transparency about decision corrections."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was performed.\n\nRecords the exact moment when the enforcement action was taken. This immutable timestamp is critical for audit trails, appeal window calculations, and understanding the timeline of moderation events.\n\nCreation timestamps enable sorting moderation actions chronologically and measuring moderation response times."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action record was last updated.\n\nTracks when modifications were made to the moderation action record, such as when reversals are applied or additional context is added. Updated automatically when any field changes.\n\nThis timestamp supports audit trails and helps administrators track the evolution of moderation decisions over time."}},"required":["id","target_member_id","action_type","reason","is_reversed","created_at","updated_at"],"description":"Complete moderation action record documenting enforcement actions taken by moderators or administrators.\n\nThis type represents the comprehensive moderation action entity from the discussion_board_moderation_actions table, serving as the central audit trail for all content governance activities. Each moderation action captures who performed the action, who was affected, what action was taken, why it was taken, which content was involved, and whether the decision was later reversed.\n\nModeration actions are immutable audit records that provide accountability for all enforcement decisions on the platform. They support the graduated enforcement approach where violations escalate from warnings to suspensions to bans, and enable the appeals process where users can contest decisions. All moderation actions are logged with complete context including content snapshots, detailed reasoning, and clear attribution to the acting moderator or administrator.\n\nThe moderation action entity integrates with related moderation tables including warnings (which reference the moderation action that issued them), suspensions (linked to their initiating moderation action), bans (connected to the action that enacted them), and appeals (which contest specific moderation actions). This relational structure provides complete traceability from initial report through enforcement to potential appeal and resolution.","x-autobe-prisma-schema":"discussion_board_moderation_actions"},"IDiscussionBoardModerationAction.ICreate":{"type":"object","properties":{"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the moderator who performed this moderation action.\n\nThis field identifies the moderator from the discussion_board_moderators table who took enforcement action against content or a user account. It is nullable because some moderation actions may be performed by administrators rather than moderators.\n\nWhen a moderator creates a moderation action, their moderator ID is recorded here for accountability and audit trail purposes. This enables tracking which moderator made which decisions, supporting moderator performance review and ensuring consistent enforcement of community guidelines.\n\nAt least one of moderator_id or administrator_id must be provided to identify who performed the action."},"administrator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the administrator who performed this moderation action.\n\nThis field identifies the administrator from the discussion_board_administrators table who took enforcement action against content or a user account. It is nullable because some moderation actions may be performed by moderators rather than administrators.\n\nWhen an administrator creates a moderation action, their administrator ID is recorded here for accountability and audit trail purposes. Administrators have broader authority than moderators and can perform all moderation actions including permanent bans.\n\nAt least one of moderator_id or administrator_id must be provided to identify who performed the action."},"target_member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who is the target of this moderation action.\n\nThis required field references the discussion_board_members table and identifies which member is affected by the moderation enforcement. Every moderation action must target a specific member, whether the action is content-specific (hiding a topic, removing a reply) or account-specific (issuing a warning, suspending access, or banning the account).\n\nThe target member receives notifications about the moderation action taken against them, including the reason and any available recourse through the appeals process. This field is essential for linking moderation actions to user accounts and maintaining complete moderation history for each member."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the content report that triggered this moderation action.\n\nThis optional field links the moderation action to the original report from the discussion_board_reports table that prompted the moderator review. It is nullable because some moderation actions may be taken proactively by moderators without a user-submitted report.\n\nWhen a moderation action results from a user report, this field establishes the connection between the report and the enforcement action taken. This linkage supports moderation transparency and enables users who submitted reports to see how their reports were resolved."},"content_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the discussion topic that was subject to moderation action.\n\nThis optional field identifies which topic from the discussion_board_topics table was moderated. It is nullable because not all moderation actions are content-specific (some target user accounts rather than specific content).\n\nWhen a moderation action involves a specific discussion topic (hiding it, removing it, or featuring it), this field captures which topic was affected. This enables administrators to review moderation decisions in the context of the specific content and supports appeal investigations."},"content_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the discussion reply that was subject to moderation action.\n\nThis optional field identifies which reply from the discussion_board_replies table was moderated. It is nullable because not all moderation actions are content-specific (some target user accounts or discussion topics rather than individual replies).\n\nWhen a moderation action involves a specific reply (hiding it, removing it, or flagging it), this field captures which reply was affected. This is important for maintaining context in threaded discussions and supporting appeals where users need to understand which specific content violated guidelines."},"action_type":{"oneOf":[{"const":"hide_content","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},{"const":"delete_content","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},{"const":"issue_warning","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},{"const":"suspend_user","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},{"const":"ban_user","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},{"const":"restore_content","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},{"const":"dismiss_report","description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."}],"description":"Type of moderation action being performed.\n\nThis required field specifies what enforcement action the moderator or administrator is taking. The action types form the vocabulary of available moderation interventions, ranging from content management to user account restrictions.\n\nAvailable action types include: hide_content (make content invisible to regular users while preserving for audit), delete_content (permanently remove content from public view), issue_warning (formally warn user about guideline violation), suspend_user (temporarily restrict posting privileges), ban_user (permanently prevent platform access), restore_content (reverse previous content removal), and dismiss_report (determine reported content does not violate guidelines).\n\nEach action type triggers different downstream effects including notification generation, user privilege changes, and content visibility modifications."},"reason":{"type":"string","description":"Detailed explanation of why this moderation action was taken.\n\nThis required field provides comprehensive justification for the moderation decision, with a minimum length of 20 characters to ensure substantive explanations. The reason is critical for moderation transparency, accountability, and supporting the appeals process.\n\nModerators must clearly explain what guideline was violated, how the content or behavior violated that guideline, and why the specific enforcement action was appropriate given the violation severity. The reason is shown to the affected user in moderation notifications and is reviewed by administrators during appeals processing.\n\nDetailed reasoning supports consistent moderation practices, helps users understand community standards, and enables fair evaluation of moderation decisions during appeals."},"violation_category":{"oneOf":[{"const":"personal_attack"},{"const":"hate_speech"},{"const":"misinformation"},{"const":"spam"},{"const":"offensive_language"},{"const":"off_topic"},{"const":"threats"},{"const":"doxxing"},{"const":"trolling"},{"const":"other"},{"type":"null"}],"description":"Category of guideline violation that prompted this moderation action.\n\nThis optional field categorizes the type of community guideline violation, using the same violation categories as content reports. It is nullable for actions that do not involve guideline violations (such as restoring content or dismissing reports).\n\nViolation categories include: personal_attack (direct insults or harassment), hate_speech (promoting hatred against groups), misinformation (deliberate false information), spam (repetitive or commercial content), offensive_language (profanity or vulgar expressions), off_topic (content unrelated to economics/politics), threats (explicit or implicit harm), doxxing (sharing private information), trolling (intentionally disruptive behavior), and other (violations not covered by standard categories).\n\nCategorizing violations supports consistent enforcement, enables pattern analysis across moderation decisions, and helps identify systemic issues or emerging violation types."},"content_snapshot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preserved snapshot of the content exactly as it appeared when the moderation action was taken.\n\nThis optional field captures the complete content (topic body or reply content) at the moment of moderation action, creating an immutable record for appeal review and audit purposes. It is nullable for actions that do not involve specific content (such as user suspensions without content reference).\n\nThe content snapshot is critical because it ensures that even if the user subsequently edits or deletes the content, the moderation decision can be fairly evaluated based on what the content actually said at the time of the violation. This protects both users and moderators during appeals by providing objective evidence of the content state.\n\nPreserving content snapshots supports transparent moderation, enables fair appeals processing, prevents retroactive content manipulation, and maintains audit integrity for legal and compliance requirements."}},"required":["target_member_id","action_type","reason"],"description":"Request body for creating a new moderation action record that documents enforcement actions taken by moderators or administrators.\n\nThis type defines the complete set of information required when moderators or administrators take enforcement actions including hiding content, deleting content, issuing warnings, suspending users, banning users, restoring previously moderated content, or dismissing user reports. The moderation action serves as the foundational audit record for all content governance activities.\n\nEach moderation action must identify who performed the action (moderator_id or administrator_id), which member is affected (target_member_id), what action was taken (action_type), and provide detailed justification (reason with minimum 20 characters). Optional fields link the action to related reports, specific content items, violation categories, and preserve content snapshots for appeals.\n\nThe moderation action creation integrates with the broader moderation workflow where reports are reviewed, decisions are made, enforcement is applied, and notifications are sent to affected users. All moderation actions are permanently logged for accountability, transparency reporting, and appeals processing.","x-autobe-prisma-schema":"discussion_board_moderation_actions"},"IDiscussionBoardModerationAction.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Filter by report status including pending (unassigned reports awaiting moderator review), under_review (reports actively being investigated by assigned moderators), resolved (completed reviews with moderation actions taken), or dismissed (reports determined to be without merit or false flags).\n\nThis filter helps moderators organize their workflow by viewing only reports in specific processing stages."},"severity":{"type":"string","description":"Filter by violation severity level for prioritizing critical content moderation needs.\n\nValues include critical (hate speech, threats, doxxing requiring immediate action), high (personal attacks, targeted harassment needing urgent response), medium (offensive language, misinformation, trolling for standard enforcement), or low (off-topic content, minor violations for educational approach).\n\nSeverity-based filtering enables moderators to triage the queue efficiently and address the most serious violations first."},"violation_category":{"type":"string","description":"Filter by specific violation category to focus moderation efforts on particular guideline violation types.\n\nCategories include personal_attack (direct insults targeting users), hate_speech (content promoting hatred against groups), misinformation (deliberate spread of false information), spam (repetitive or commercial content), offensive_language (profanity or vulgar expressions), off_topic (unrelated to economics/politics), threats (explicit or implicit harm threats), doxxing (sharing private information), trolling (intentionally disruptive behavior), or other (violations not covered by standard categories).\n\nThis enables specialized moderation workflows and helps moderators develop expertise in specific violation types."},"assigned_moderator_id":{"type":"string","format":"uuid","description":"Filter by the moderator assigned to review reports.\n\nThis UUID references the discussion_board_moderators table and allows filtering to view reports assigned to specific moderators, unassigned reports (null value), or reports in a particular moderator's queue.\n\nUseful for moderator performance tracking, workload balancing, and personal queue management."},"date_from":{"type":"string","format":"date-time","description":"Start date for filtering reports by submission timestamp.\n\nReturns only reports created on or after this ISO 8601 formatted date-time value. Used in combination with date_to to define specific time windows for report investigation or to focus on recent moderation activity."},"date_to":{"type":"string","format":"date-time","description":"End date for filtering reports by submission timestamp.\n\nReturns only reports created on or before this ISO 8601 formatted date-time value. Combined with date_from to analyze reports within specific timeframes or historical periods."},"report_count_min":{"type":"integer","description":"Minimum number of reports on the same content item.\n\nFilters to show only content that has been reported by multiple users (e.g., report_count_min: 3 shows content flagged by 3 or more different users).\n\nMultiple reports indicate community consensus about violations and help prioritize content that multiple users find problematic."},"page":{"type":"integer","description":"Page number for pagination of report results.\n\nDefaults to 1 if not specified. Used with limit to navigate through large moderation queues efficiently."},"limit":{"type":"integer","description":"Number of report records to return per page.\n\nDefaults to 20 items per page. Maximum allowed is typically 100 to prevent excessive data transfer. Controls the size of each paginated result set for moderation queue display."},"sort_by":{"type":"string","description":"Field to sort results by for organizing the moderation queue.\n\nOptions include priority (default composite score based on severity, multiple reports, and queue time), created_at (chronological submission order), severity (violation severity level), report_count (number of reports on same content), or updated_at (most recently modified reports).\n\nSorting helps moderators work through the queue efficiently with critical items appearing first."},"sort_order":{"type":"string","description":"Sort direction for organizing report results.\n\nValues are asc (ascending, oldest or lowest first) or desc (descending, newest or highest first).\n\nDefault is desc for priority and severity sorting to show critical items first, and can be reversed for chronological review workflows."}},"required":[],"description":"Search and filtering criteria for retrieving moderation queue reports with pagination and sorting.\n\nThis request type supports the moderation workflow by enabling moderators and administrators to efficiently locate and prioritize content reports requiring review. The filtering capabilities help moderators focus on specific violation types, severity levels, or time periods while the sorting and pagination controls enable efficient queue processing.\n\nThe flexible parameter combination supports various moderation workflows including reviewing all pending critical violations, monitoring specific moderators' queues, investigating reports from particular timeframes, and identifying content with multiple community reports indicating consensus violations."},"IDiscussionBoardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this warning record.\n\nThis UUID serves as the primary key for the warning and is used to reference this specific warning in appeal workflows, audit trails, and moderation review interfaces."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who received this warning.\n\nReferences the discussion_board_members table to identify which user account was issued this warning for guideline violations. This relationship enables tracking violation history and implementing the graduated warning escalation system."},"moderation_action_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderation action that issued this warning.\n\nReferences the discussion_board_moderation_actions table to link the warning to the complete moderation decision context including moderator reasoning, content snapshots, and violation categorization. This ensures every warning has a documented justification."},"content_topic_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the discussion topic that triggered this warning, if applicable.\n\nReferences the discussion_board_topics table when the warning resulted from a topic-level violation. Null when the warning was triggered by a reply violation or account-level behavior rather than a specific topic."},"content_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the discussion reply that triggered this warning, if applicable.\n\nReferences the discussion_board_replies table when the warning resulted from a reply-level violation. Null when the warning was triggered by a topic violation or account-level behavior rather than a specific reply."},"warning_level":{"type":"string","description":"Level of warning in the graduated escalation system.\n\nIndicates the severity stage in the three-tier warning system: 'first_warning' (initial educational violation), 'second_warning' (repeat violation with 7-day suspension), or 'final_warning' (third violation with 30-day suspension and permanent ban risk on next violation). The warning level determines consequences and expiration timelines."},"violation_category":{"type":"string","description":"Category of community guideline violation that prompted this warning.\n\nClassifies the violation type using standardized categories including personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, or other. This categorization enables pattern analysis and helps moderators apply consistent enforcement for similar violations."},"moderator_notes":{"type":"string","description":"Internal notes from the moderator explaining the warning decision and providing context.\n\nContains detailed explanation of why the warning was issued, including reference to specific guideline violations, context about the member's behavior, and any considerations that influenced the decision. These notes support appeal review, moderator accountability, and consistent enforcement. Minimum 20 characters required for meaningful documentation."},"expiration_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date when this warning expires and no longer counts toward escalation.\n\nFirst warnings expire after 90 days of good behavior, second warnings after 180 days. Final warnings may not expire or have extended expiration periods. Null for warnings that do not expire or for final warnings with indefinite active status. Expired warnings are removed from active status but retained in permanent history."},"is_active":{"type":"boolean","description":"Whether this warning is currently active and counts toward escalation thresholds.\n\nTrue for warnings within their expiration window that contribute to determining the appropriate warning level for future violations. False for expired warnings or warnings from accounts in good standing that have completed their warning period. Only active warnings affect escalation decisions."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this warning naturally expired without further violations.\n\nSet when the warning reaches its expiration_date and the member has maintained good standing throughout the warning period. Null for warnings that are still active or were superseded by account actions (suspension, ban) before natural expiration. This timestamp documents successful warning period completion."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the warning was issued to the member.\n\nRecords the exact moment the warning was created in the system, which serves as the baseline for calculating the expiration_date and tracking violation timeline. Used for audit trail and understanding the temporal progression of member disciplinary history."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the warning record was last modified.\n\nTracks when warning details were updated, such as status changes (active to expired), expiration date adjustments, or administrative corrections. Used for audit trail and tracking warning lifecycle modifications."}},"required":["id","member_id","moderation_action_id","warning_level","violation_category","moderator_notes","is_active","created_at","updated_at"],"description":"Complete warning record documenting a formal warning issued to a member for community guideline violations.\n\nWarnings represent formal notices in the graduated enforcement system designed to educate members about violations and encourage guideline compliance before escalating to suspensions or bans. The warning system implements a three-tier escalation approach where violations accumulate over time, with each level carrying progressively serious consequences.\n\nThis entity captures all information necessary for warning tracking, escalation logic, appeal processing, and moderation accountability. Warnings are issued by moderators through the moderation action workflow and become part of the member's permanent violation history even after expiration. The system uses active warnings to determine appropriate escalation levels for future violations.","x-autobe-prisma-schema":"discussion_board_warnings"},"IDiscussionBoardWarning.IRequest":{"type":"object","properties":{"warning_level":{"oneOf":[{"const":"first_warning"},{"const":"second_warning"},{"const":"final_warning"},{"type":"null"}],"description":"Filter by warning escalation level in the three-tier warning system.\n\nThis optional filter allows searching for warnings at specific escalation stages: first_warning (initial violation with educational focus), second_warning (repeat violation within warning period, includes 7-day suspension), or final_warning (third violation or severe single violation, includes 30-day suspension).\n\nFiltering by warning level helps administrators track user escalation patterns, identify members approaching ban thresholds, and analyze the distribution of violations across severity levels."},"violation_category":{"oneOf":[{"const":"personal_attack"},{"const":"hate_speech"},{"const":"misinformation"},{"const":"spam"},{"const":"offensive_language"},{"const":"off_topic"},{"const":"threats"},{"const":"doxxing"},{"const":"trolling"},{"const":"other"},{"type":"null"}],"description":"Filter by category of guideline violation that triggered the warning.\n\nThis optional filter restricts results to warnings for specific violation types: personal_attack, hate_speech, misinformation, spam, offensive_language, off_topic, threats, doxxing, trolling, or other.\n\nFiltering by violation category enables administrators to analyze which types of violations are most common, identify emerging moderation challenges, and ensure consistent enforcement across different violation types."},"member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific member who received warnings.\n\nThis optional filter restricts results to warnings issued to a particular member identified by their discussion_board_members table ID. Used to review an individual member's complete warning history and violation patterns.\n\nFiltering by member enables investigating specific user behavior, supporting moderation escalation decisions, and providing complete context during appeal reviews."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by warning active status.\n\nThis optional boolean filter distinguishes between currently active warnings (true) that count toward escalation and expired or resolved warnings (false) that no longer affect the user's standing.\n\nActive warnings are those within their expiration window (90 days for first warnings, 180 days for second warnings) that would escalate to higher warning levels if new violations occur. Filtering by active status helps identify members currently at risk of suspension or ban."},"start_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of date range filter for warning issue dates.\n\nThis optional filter specifies the earliest created_at timestamp for warnings to include in results. Used with end_date to define a date range query for temporal analysis of warning patterns.\n\nDate range filtering enables administrators to analyze warning trends over time, generate periodic reports, and investigate moderation patterns during specific timeframes."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of date range filter for warning issue dates.\n\nThis optional filter specifies the latest created_at timestamp for warnings to include in results. Used with start_date to define a date range query for temporal analysis.\n\nCombining start_date and end_date enables precise temporal queries for compliance reporting and trend analysis."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"expiration_date"},{"const":"warning_level"},{"const":"updated_at"},{"type":"null"}],"description":"Field to sort results by.\n\nSpecifies which field to use for ordering results: created_at (when warning was issued), expiration_date (when warning expires), warning_level (escalation stage), or updated_at (last modification time).\n\nDefault sorting is typically by created_at descending (newest first) to show recent warnings prominently."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for results.\n\nSpecifies ascending (asc) or descending (desc) order for the selected sort_by field. Default is descending for most date-based sorts to show most recent warnings first.\n\nCombining sort_by and sort_order provides flexible result ordering for different review workflows."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated results.\n\nSpecifies which page of results to retrieve, starting from 1. Used with limit to implement pagination for large warning datasets.\n\nDefault page is 1 if not specified."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of warning records per page.\n\nSpecifies how many warnings to return in a single page. Typical values range from 10 to 100, with default often 25 for administrative review interfaces.\n\nLimit controls result set size to balance comprehensive data access with performance and usability."}},"required":[],"description":"Search and filter criteria for retrieving warning records from the moderation system.\n\nThis request type defines all available search parameters and filtering options for querying the discussion_board_warnings table. It supports comprehensive warning history retrieval with multi-dimensional filtering by warning level, violation category, affected member, active status, and date ranges.\n\nAdministrators and moderators use this request structure to search warning history, identify members with multiple violations, analyze violation patterns, track warning effectiveness, and prepare for escalation decisions. The flexible filtering and sorting options support various moderation workflows including member behavior review, compliance reporting, and moderation quality assurance.\n\nAll filter parameters are optional, allowing both broad queries (all warnings) and highly specific searches (active final warnings for a specific member in a date range). The pagination parameters (page and limit) enable efficient handling of large warning datasets accumulated over time."},"IDiscussionBoardSuspension":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the suspension record.\n\nThis UUID serves as the primary key for the suspension in the discussion_board_suspensions table and is used to reference this specific suspension in API operations, audit logs, and appeal submissions."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who is suspended.\n\nReferences discussion_board_members.id to establish which user account is subject to this temporary restriction. The suspended member loses posting and voting privileges for the duration of the suspension."},"moderation_action_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderation action that initiated this suspension.\n\nReferences discussion_board_moderation_actions.id to maintain the complete audit trail from violation report through moderation decision to enforcement action. This relationship enables tracking the complete context of why the suspension was issued."},"moderator_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator who issued the suspension.\n\nReferences discussion_board_moderators.id when a moderator issued the suspension. Null if an administrator issued the suspension instead. This field supports moderator performance tracking and accountability."},"administrator_id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator who issued the suspension.\n\nReferences discussion_board_administrators.id when an administrator issued the suspension. Null if a moderator issued the suspension instead. Administrator suspensions may have longer durations than moderator suspensions."},"suspension_reason":{"type":"string","description":"Detailed explanation of why the member was suspended.\n\nThis comprehensive justification explains the specific guideline violations that led to the suspension. The reason is shown to the suspended user in their notification and must provide clear context for the enforcement action.\n\nTransparency in suspension reasoning supports the platform's commitment to fair moderation and enables users to understand what behavior led to the restriction."},"duration_days":{"type":"integer","description":"Length of the suspension in days.\n\nCommon durations include 1 day for minor violations with second warnings, 7 days for standard second warning suspensions, 14 days for elevated violations, and 30 days for final warning suspensions. Administrators can set custom durations between 1 and 365 days.\n\nThe duration determines the period during which the member cannot create topics, post replies, or vote on content, though they retain read access to discussions."},"start_date":{"type":"string","format":"date-time","description":"Timestamp when the suspension begins and restrictions take effect.\n\nThis is typically set to the current time when the suspension is created, immediately restricting the member's posting and voting privileges. The start_date marks the beginning of the suspension period calculated for the end_date."},"end_date":{"type":"string","format":"date-time","description":"Timestamp when the suspension expires and full privileges are automatically restored.\n\nCalculated by adding duration_days to start_date, this field determines when the system automatically restores the member's posting and voting capabilities. The member receives notification as the end_date approaches and upon privilege restoration."},"is_active":{"type":"boolean","description":"Whether this suspension is currently in effect.\n\nTrue indicates the suspension is active and the member's privileges are currently restricted. False indicates the suspension has expired naturally, was lifted early, or is otherwise no longer enforcing restrictions.\n\nThe system automatically sets is_active to false when the current time passes the end_date, triggering automatic privilege restoration."},"lifted_early":{"type":"boolean","description":"Whether the suspension was manually terminated before the scheduled end date.\n\nTrue indicates a moderator or administrator manually lifted the suspension, typically following a successful appeal or administrative review. False indicates the suspension followed its natural course to the scheduled end_date.\n\nEarly-lifted suspensions include lifted_at timestamp and lifted_reason explanation for audit purposes."},"lifted_at":{"type":"string","format":"date-time","description":"Timestamp when the suspension was manually lifted by a moderator or administrator.\n\nNull if the suspension was not lifted early and expired naturally at the end_date. Set when lifted_early is true, recording the exact moment privileges were restored ahead of schedule.\n\nThis timestamp is used for audit trail tracking and understanding the effective suspension duration compared to the originally scheduled duration."},"lifted_reason":{"type":"string","description":"Explanation for why the suspension was lifted before the scheduled end date.\n\nProvides transparency about early termination decisions, documenting the rationale for privilege restoration. Common reasons include appeal approval, administrative review determining excessive severity, or discovery of mitigating circumstances.\n\nNull if the suspension was not lifted early. Required when lifted_early is true to maintain accountability in moderation decisions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the suspension record was created in the system.\n\nMarks when the suspension was initially issued and the enforcement action was recorded in the discussion_board_suspensions table. Used for tracking suspension history timeline and audit purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the suspension record was last modified.\n\nUpdated whenever suspension details change including reason updates, duration extensions, or early lift actions. Used for audit trail tracking and understanding when suspension parameters were adjusted."}},"required":["id","member_id","moderation_action_id","suspension_reason","duration_days","start_date","end_date","is_active","lifted_early","created_at","updated_at"],"description":"Complete suspension record with all details about the temporary account restriction.\n\nThis schema represents the full suspension entity from the discussion_board_suspensions table, providing comprehensive information about temporary posting and voting restrictions applied to members who violated community guidelines.\n\nSuspensions are part of the graduated enforcement system, serving as an escalation from warnings before permanent bans. The suspension includes the issuing authority (moderator or administrator), detailed reasoning, duration configuration, timing information, active status tracking, and optional early lift details if the suspension was terminated before its scheduled end date.\n\nThe suspension record maintains relationships to the suspended member, the originating moderation action, and the moderator or administrator who issued it, providing complete accountability and audit trail for the enforcement decision.","x-autobe-prisma-schema":"discussion_board_suspensions"},"IDiscussionBoardSuspension.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the suspension record.\n\nThis UUID serves as the primary key for the suspension in the database and is used for referencing this specific suspension in administrative operations, appeals processing, and audit trail queries."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who is suspended.\n\nReferences the discussion_board_members table to identify which user account has been temporarily restricted from posting and engagement activities."},"member_username":{"type":"string","description":"Username of the suspended member for display purposes.\n\nProvides human-readable identification of the suspended user in moderation queue displays and administrative review interfaces."},"suspension_reason":{"type":"string","description":"Detailed explanation of why the member was suspended.\n\nProvides comprehensive context about the guideline violation or policy breach that resulted in this temporary account restriction. This reason is shown to the suspended user and used in appeals processing."},"duration_days":{"type":"integer","description":"Length of suspension in days.\n\nCommon durations include 1, 7, 14, or 30 days based on violation severity and member warning history. This determines how long the member's posting privileges remain restricted."},"start_date":{"type":"string","format":"date-time","description":"Timestamp when the suspension begins and restrictions take effect.\n\nMarks the precise moment when the member's posting privileges are revoked and temporary account restrictions are enforced."},"end_date":{"type":"string","format":"date-time","description":"Timestamp when the suspension expires and privileges are automatically restored.\n\nCalculated from start_date plus duration_days, this represents when the system will automatically reactivate the member's full participation capabilities."},"is_active":{"type":"boolean","description":"Whether this suspension is currently in effect.\n\nTrue if the current date is between start_date and end_date and the suspension has not been lifted early. False if the suspension has expired naturally or was manually lifted by moderators or administrators."},"lifted_early":{"type":"boolean","description":"Whether the suspension was manually lifted before the scheduled end date.\n\nTrue if a moderator or administrator terminated the suspension prematurely, typically after successful appeal or administrative review. False for suspensions that expired naturally or are still active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the suspension record was created in the system.\n\nIndicates when the moderation action was taken and the suspension was officially issued to the member."}},"required":["id","member_id","member_username","suspension_reason","duration_days","start_date","end_date","is_active","lifted_early","created_at"],"description":"Summary information about a temporary account suspension for list displays.\n\nProvides essential suspension details optimized for moderation queue views, administrative dashboards, and suspension management interfaces. Includes core suspension parameters, timing information, and current status without the complete related entity details.\n\nThis summary format is used in paginated suspension lists where administrators and moderators need to quickly scan suspension records, identify active restrictions, and assess suspension patterns across the platform.","x-autobe-prisma-schema":"discussion_board_suspensions"},"IDiscussionBoardSuspension.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member to be suspended.\n\nReferences the discussion_board_members.id of the user who will receive temporary posting and voting restrictions due to community guideline violations. The system validates that this member exists and is eligible for suspension (not already banned or deleted)."},"suspension_reason":{"type":"string","description":"Detailed explanation of why the member is being suspended.\n\nProvides comprehensive justification for the temporary account restriction, explaining the specific guideline violations, policy breaches, or behavioral issues that warranted suspension. This explanation will be shown to the suspended user and must be clear, specific, and reference applicable community guidelines. Required for transparency and to support potential appeals."},"duration_days":{"type":"integer","minimum":1,"maximum":30,"description":"Number of days the suspension will last.\n\nSpecifies the suspension duration in days. Moderators can issue suspensions from 1 to 30 days. Common durations include 1 day for minor violations, 7 days for standard second warning suspensions, 14 days for elevated violations, and 30 days for final warning suspensions. Administrators using the admin endpoint can issue longer suspensions up to 365 days for severe or repeated violations."}},"required":["member_id","suspension_reason","duration_days"],"description":"Request data for creating a new temporary account suspension.\n\nThis structure contains all necessary information for moderators and administrators to suspend a member's account temporarily as part of the graduated enforcement moderation workflow. The suspension restricts the member's ability to create topics, post replies, and vote on content while still allowing them to read discussions and access their profile settings.\n\nThe request identifies the member to suspend, provides detailed reasoning for transparency, and specifies the suspension duration. The issuing moderator or administrator is identified through authentication context (JWT token) rather than being included in the request body.\n\nCRITICAL SECURITY FIX: The moderation_action_id field has been REMOVED from this request DTO. The moderation action record should be created automatically by the backend service when the suspension is created, not provided by the client. This prevents manipulation of the audit trail and ensures proper moderation workflow where the system generates the comprehensive moderation action record linking the suspension to reports, content violations, and enforcement decisions.\n\nUpon successful creation, the system automatically creates the corresponding moderation action record, calculates the start_date (current time) and end_date (current time + duration_days), updates the member's account_status to 'suspended', invalidates all active sessions, and sends notifications explaining the suspension and appeal process.","x-autobe-prisma-schema":"discussion_board_suspensions"},"IDiscussionBoardSuspension.IUpdate":{"type":"object","properties":{"suspension_reason":{"type":"string","description":"Updated detailed explanation of why the member was suspended.\n\nThis field allows moderators and administrators to refine or add context to the original suspension justification. The updated reason is shown to the suspended user and becomes part of the permanent moderation audit trail.\n\nChanging the suspension reason may be necessary when new information comes to light, when clarifying the original decision for appeal purposes, or when extending a suspension due to additional violations."},"duration_days":{"type":"integer","description":"Updated length of suspension in days.\n\nModifying the duration allows administrators to extend suspensions when additional violations are discovered during the suspension period, or to reduce suspension length after successful appeal review. Common durations include 1, 7, 14, or 30 days based on violation severity.\n\nExtending the duration automatically recalculates the end_date timestamp. The suspension's is_active status and the member's restricted privileges remain in effect until the new end_date is reached."},"lifted_early":{"type":"boolean","description":"Whether the suspension should be terminated before the scheduled end date.\n\nSetting this to true immediately restores the member's full platform privileges including topic creation, reply posting, and voting capabilities. This is typically used when appeals are approved or when administrators determine the suspension should be lifted for other reasons.\n\nWhen lifted early, the system sets the lifted_at timestamp, updates the member's account_status back to 'active', and invalidates the suspension's is_active flag."},"lifted_reason":{"type":"string","description":"Explanation for why the suspension was lifted before the scheduled end date.\n\nThis field is required when lifted_early is set to true and provides transparency about why the suspension was terminated prematurely. Common reasons include successful appeal approval, administrative review determining the suspension was too severe, or discovery of mitigating circumstances.\n\nThe lifted reason is shown to the member when their privileges are restored and becomes part of the permanent moderation audit trail supporting transparency in moderation decisions."}},"required":[],"description":"Update data transfer object for modifying existing temporary suspension records.\n\nThis schema supports the suspension modification workflow where moderators and administrators can adjust suspension parameters, lift suspensions early after appeal approval, or extend suspension durations when additional violations occur. All fields are optional, allowing partial updates to specific suspension attributes.\n\nThe update operation integrates with the graduated enforcement moderation system defined in the Moderation System requirements, supporting fair and flexible suspension management. Modifications to suspensions are tracked through the updated_at timestamp and logged in the moderation audit trail for accountability.\n\nWhen suspensions are lifted early, the system immediately restores member privileges and sends notifications explaining the decision. When durations are extended, the member receives updated notifications with the new end date and reasoning.","x-autobe-prisma-schema":"discussion_board_suspensions"},"IDiscussionBoardSuspension.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter suspensions by specific member identifier.\n\nWhen provided, returns only suspensions issued to the specified member. Useful for reviewing a particular user's suspension history or verifying their current suspension status."},"moderator_id":{"type":"string","format":"uuid","description":"Filter suspensions by the moderator who issued them.\n\nWhen provided, returns only suspensions created by the specified moderator. Used for moderator performance review and enforcement pattern analysis."},"administrator_id":{"type":"string","format":"uuid","description":"Filter suspensions by the administrator who issued them.\n\nWhen provided, returns only suspensions created by the specified administrator. Used for administrative action tracking and oversight."},"is_active":{"type":"boolean","description":"Filter by current suspension active status.\n\nWhen true, returns only currently active suspensions. When false, returns only expired or lifted suspensions. When omitted, returns all suspensions regardless of active status."},"lifted_early":{"type":"boolean","description":"Filter by early lift status.\n\nWhen true, returns only suspensions that were manually lifted before their scheduled end date. When false, returns suspensions that expired naturally. When omitted, returns all suspensions."},"start_date_from":{"type":"string","format":"date-time","description":"Filter suspensions starting from this date or later.\n\nUsed to create date range queries for temporal analysis of suspension patterns."},"start_date_to":{"type":"string","format":"date-time","description":"Filter suspensions starting up to this date.\n\nCombines with start_date_from to create a date range filter for suspension analysis."},"duration_min":{"type":"integer","description":"Filter by minimum suspension duration in days.\n\nReturns only suspensions with duration_days greater than or equal to this value. Useful for identifying longer-term suspensions."},"duration_max":{"type":"integer","description":"Filter by maximum suspension duration in days.\n\nReturns only suspensions with duration_days less than or equal to this value. Useful for analyzing short-term versus extended suspensions."},"search":{"type":"string","description":"Full-text search across suspension reasons.\n\nSearches within the suspension_reason field to find suspensions related to specific violation types or keywords."},"sort":{"type":"string","description":"Sort field for ordering results.\n\nSupported values: start_date, end_date, duration_days, created_at. Determines which field to use for sorting the suspension list."},"order":{"oneOf":[{"const":"asc","description":"Sort direction for the specified sort field.\n\nDetermines whether results are sorted in ascending (oldest or lowest first) or descending (newest or highest first) order."},{"const":"desc","description":"Sort direction for the specified sort field.\n\nDetermines whether results are sorted in ascending (oldest or lowest first) or descending (newest or highest first) order."}],"description":"Sort direction for the specified sort field.\n\nDetermines whether results are sorted in ascending (oldest or lowest first) or descending (newest or highest first) order."},"page":{"type":"integer","description":"Page number to retrieve.\n\nSpecifies which page of results to return, starting from 1 for the first page."},"limit":{"type":"integer","description":"Number of suspension records per page.\n\nConfigures how many suspension summaries are returned in a single page. Common values are 25, 50, or 100 for administrative review."}},"required":[],"description":"Request parameters for searching and filtering user suspensions.\n\nProvides comprehensive query capabilities for retrieving suspension records based on multiple criteria including member identity, moderator attribution, active status, duration ranges, and temporal filters. Supports pagination and flexible sorting to enable efficient suspension management and moderation oversight workflows."},"IDiscussionBoardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key uniquely identifying this permanent ban record.\n\nThis identifier is used to reference the ban in administrative operations, appeal processes, and audit trail queries."},"member_id":{"type":"string","format":"uuid","description":"Reference to the member account that has been permanently banned.\n\nLinks to discussion_board_members.id representing the user who can no longer access the platform due to severe or repeated violations of community guidelines."},"administrator_id":{"type":"string","format":"uuid","description":"Reference to the administrator who issued this permanent ban.\n\nLinks to discussion_board_administrators.id representing the platform administrator who made the decision to permanently ban this member after thorough review of violations."},"moderation_action_id":{"type":"string","format":"uuid","description":"Reference to the moderation action that initiated this permanent ban.\n\nLinks to discussion_board_moderation_actions.id establishing the audit trail from violation investigation through moderation decision to permanent ban enforcement."},"ban_reason":{"type":"string","description":"Comprehensive justification explaining why this member was permanently banned from the platform.\n\nMust be at least 100 characters to ensure thorough documentation of the ban decision. This detailed explanation is provided to the banned user and supports the appeal review process if the ban is marked as appealable."},"violation_summary":{"type":"string","description":"Comprehensive summary documenting all violations and behavioral patterns that led to the permanent ban decision.\n\nProvides historical context of the member's violation history including prior warnings, suspensions, and the progression of policy violations that culminated in permanent account termination."},"is_appealable":{"type":"boolean","description":"Indicates whether the banned user is permitted to submit a formal appeal contesting this ban decision.\n\nAppeals are allowed for bans resulting from judgment calls or accumulated violations, but prohibited for severe violations including illegal content, explicit threats of violence, doxxing, or bans issued after previous appeal denials."},"appeal_window_days":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of days the banned user has to submit an appeal if the ban is marked as appealable.\n\nTypically set to 30 days for appealable bans. Null for non-appealable bans where the appeal process is not available. The appeal window begins from the ban creation timestamp."},"ip_address_banned":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address captured at the time of ban to help prevent re-registration attempts from the same network.\n\nUsed for additional security measures to detect and prevent banned users from creating new accounts. May be null if IP tracking was not available or not deemed necessary."},"email_banned":{"type":"string","format":"email","description":"Email address of the banned member that is prevented from future registration.\n\nThis email address is blocked from creating new accounts to prevent banned users from immediately re-registering. The platform's registration system checks against this banned email list."},"is_reversed":{"type":"boolean","description":"Indicates whether this ban was reversed after successful appeal or administrative review.\n\nWhen true, the ban decision was overturned and account access was restored to the previously banned member. This flag supports ban history tracking and moderation quality analysis."},"reversed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this ban was reversed and account access was restored.\n\nNull if the ban has not been reversed. Set when an appeal is approved or an administrator overturns the ban decision upon review."},"reversal_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Comprehensive explanation of why this ban was reversed.\n\nProvides context for the reversal decision including what evidence or arguments led to overturning the original ban. Required when is_reversed is true, null otherwise."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this permanent ban was issued and the member account was blocked from platform access.\n\nRepresents the exact moment the ban took effect and the member lost access to all platform features except viewing their ban notification."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this ban record was last modified.\n\nUpdated when ban details are changed, when reversal information is added after appeal approval, or when administrative corrections are made to ban documentation."}},"required":["id","member_id","administrator_id","moderation_action_id","ban_reason","violation_summary","is_appealable","email_banned","is_reversed","created_at","updated_at"],"description":"Represents a permanent account ban completely preventing platform access for members who have committed severe or repeated violations of community guidelines.\n\nPermanent bans are the most severe moderation action available on the discussion board platform, issued exclusively by administrators for critical violations including illegal content, explicit threats of violence, hate speech, doxxing, or repeated violations after escalating warnings and suspensions. Unlike temporary suspensions, bans completely block all platform access and prevent the user from viewing content, logging in, or participating in any capacity.\n\nBans may be appealable or non-appealable based on violation severity. Appealable bans allow users to submit formal appeals within a specified appeal window (typically 30 days), while non-appealable bans are reserved for the most egregious violations where no recourse is appropriate. When bans are appealable and successfully appealed, the is_reversed flag is set and the account access is restored.\n\nThe ban record captures comprehensive documentation including the specific violations, the administrator's detailed justification, the complete violation history leading to the ban, and security measures like banned email addresses and IP addresses to prevent re-registration. All ban decisions are logged in moderation audit trails supporting transparency and administrative oversight.","x-autobe-prisma-schema":"discussion_board_bans"},"IDiscussionBoardBan.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the permanent ban record.\n\nThis UUID serves as the primary key for the ban in the database and is used for referencing this specific ban in administrative operations, appeals processing, and audit trail queries."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who is permanently banned.\n\nReferences the discussion_board_members table to identify which user account has been completely prohibited from accessing the platform due to severe or repeated violations."},"member_username":{"type":"string","description":"Username of the banned member for display purposes.\n\nProvides human-readable identification of the banned user in moderation queue displays, administrative review interfaces, and ban management systems."},"administrator_id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator who issued the permanent ban.\n\nReferences the discussion_board_administrators table to track which platform administrator made the ban decision, ensuring accountability for this severe enforcement action."},"ban_reason":{"type":"string","description":"Comprehensive justification for the permanent ban.\n\nProvides detailed explanation of why permanent exclusion from the platform was necessary, citing specific violations, policy breaches, or patterns of behavior. Minimum 100 characters required to ensure thorough documentation of this severe action."},"is_appealable":{"type":"boolean","description":"Whether the banned user is permitted to submit an appeal.\n\nTrue for bans that allow appeals (accumulated violations, judgment-call violations, context-dependent violations). False for severe violations including illegal content, explicit threats, or repeated violations after prior ban appeals."},"is_reversed":{"type":"boolean","description":"Whether the ban was reversed after successful appeal or administrative review.\n\nTrue if the ban decision was overturned and the account was restored. False for active bans or bans that were upheld on appeal."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the ban was issued.\n\nIndicates when the administrator made the permanent ban decision and the member's account access was completely revoked."}},"required":["id","member_id","member_username","administrator_id","ban_reason","is_appealable","is_reversed","created_at"],"description":"Summary information about a permanent account ban for list displays.\n\nProvides essential ban details optimized for administrative ban management interfaces, moderation oversight dashboards, and ban history reviews. Includes core ban parameters, issuing authority, appealability status, and reversal tracking without the complete violation history or related entity details.\n\nThis summary format is used in paginated ban lists where administrators need to quickly scan permanent ban records, identify appealable bans, track ban reversals, and assess ban patterns across the platform for compliance reporting and moderation quality assurance.","x-autobe-prisma-schema":"discussion_board_bans"},"IDiscussionBoardBan.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member account to be permanently banned.\n\nReferences discussion_board_members.id. The target member must exist and cannot be an administrator or moderator. Administrators validate that the member account is active and that this action is appropriate given the violation severity."},"moderation_action_id":{"type":"string","format":"uuid","description":"Reference to the foundational moderation action record documenting the investigation and decision.\n\nLinks to discussion_board_moderation_actions.id which captures the complete audit trail including reports reviewed, violation analysis, and enforcement rationale."},"ban_reason":{"type":"string","minLength":100,"description":"Comprehensive justification for issuing this permanent ban.\n\nMust be at least 100 characters to ensure thorough documentation of the severe decision to permanently remove a member from the platform. This explanation is shown to the banned user and supports the appeals process."},"violation_summary":{"type":"string","description":"Detailed summary of all violations and behavioral patterns that led to the permanent ban decision.\n\nDocuments the complete violation history including prior warnings, suspensions, and the escalating pattern of guideline violations that necessitated permanent account termination."},"is_appealable":{"type":"boolean","description":"Whether the banned user is permitted to submit a formal appeal contesting this ban.\n\nSet to true for bans resulting from judgment calls or accumulated violations, allowing due process. Set to false for severe violations like illegal content, explicit threats, or repeated violations after previous appeals."},"appeal_window_days":{"oneOf":[{"type":"integer","minimum":1,"maximum":90},{"type":"null"}],"description":"Number of days the user has to submit an appeal if the ban is appealable.\n\nTypically set to 30 days for appealable bans. Must be null for non-appealable bans. The appeal window begins from the ban creation timestamp."},"ip_address_banned":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address to ban from future registration attempts.\n\nOptional security measure to help prevent re-registration. Captured from the member's recent session or login history. May be null if IP-based blocking is not required."},"email_banned":{"type":"string","format":"email","description":"Email address of the banned member that will be blocked from future account registration.\n\nThis email address cannot be used to create new accounts, preventing immediate account recreation by banned users. Required field for all bans."}},"required":["member_id","moderation_action_id","ban_reason","violation_summary","is_appealable","email_banned"],"description":"Request data for creating a new permanent account ban.\n\nContains all information necessary for an administrator to issue a permanent ban against a member account including the target member, comprehensive justification, violation history, and appeal configuration. The administrator's identity is captured from the authenticated request context, not from this request body.\n\nThis DTO excludes system-managed fields like id (auto-generated), created_at and updated_at timestamps (system-managed), is_reversed and reversal information (set through appeal processes, not at creation), and administrator_id (derived from authentication context).","x-autobe-prisma-schema":"discussion_board_bans"},"IDiscussionBoardBan.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter bans by specific member identifier.\n\nWhen provided, returns only the ban record for the specified member. Useful for verifying if a particular user is banned and reviewing their ban details."},"administrator_id":{"type":"string","format":"uuid","description":"Filter bans by the administrator who issued them.\n\nWhen provided, returns only bans created by the specified administrator. Used for administrative action tracking, performance review, and enforcement pattern analysis."},"is_appealable":{"type":"boolean","description":"Filter by ban appealability status.\n\nWhen true, returns only bans that allow appeals. When false, returns non-appealable bans for severe violations. When omitted, returns all bans regardless of appealability."},"is_reversed":{"type":"boolean","description":"Filter by ban reversal status.\n\nWhen true, returns only bans that were overturned on appeal. When false, returns active or upheld bans. When omitted, returns all bans regardless of reversal status."},"created_from":{"type":"string","format":"date-time","description":"Filter bans issued from this date or later.\n\nUsed to create date range queries for temporal analysis of ban patterns and enforcement trends."},"created_to":{"type":"string","format":"date-time","description":"Filter bans issued up to this date.\n\nCombines with created_from to create a date range filter for ban timeline analysis."},"search":{"type":"string","description":"Full-text search across ban reasons and violation summaries.\n\nSearches within the ban_reason and violation_summary fields to find bans related to specific violation types, policy breaches, or keywords."},"sort":{"type":"string","description":"Sort field for ordering results.\n\nSupported values: created_at, member_username, is_reversed. Determines which field to use for sorting the ban list."},"order":{"oneOf":[{"const":"asc","description":"Sort direction for the specified sort field.\n\nDetermines whether results are sorted in ascending (oldest or alphabetically first) or descending (newest or reverse alphabetical) order."},{"const":"desc","description":"Sort direction for the specified sort field.\n\nDetermines whether results are sorted in ascending (oldest or alphabetically first) or descending (newest or reverse alphabetical) order."}],"description":"Sort direction for the specified sort field.\n\nDetermines whether results are sorted in ascending (oldest or alphabetically first) or descending (newest or reverse alphabetical) order."},"page":{"type":"integer","description":"Page number to retrieve.\n\nSpecifies which page of results to return, starting from 1 for the first page."},"limit":{"type":"integer","description":"Number of ban records per page.\n\nConfigures how many ban summaries are returned in a single page. Common values are 25, 50, or 100 for administrative review and compliance reporting."}},"required":[],"description":"Request parameters for searching and filtering permanent account bans.\n\nProvides comprehensive query capabilities for retrieving ban records based on multiple criteria including member identity, issuing administrator, appealability status, reversal tracking, temporal filters, and full-text search across ban justifications. Supports pagination and flexible sorting to enable efficient ban management, moderation oversight, appeal processing, and compliance reporting workflows."},"IDiscussionBoardAppeal":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the appeal record.\n\nThis primary key uniquely identifies each appeal submission in the system and is used for referencing specific appeals in review workflows and status tracking."},"appeal_explanation":{"type":"string","description":"User's written explanation of why the moderation decision should be reversed.\n\nRequired text between 100 and 1000 characters where the member presents their case for why the moderation action was unfair, incorrect, or disproportionate. This substantive explanation is the core of the appeal and is reviewed by administrators when making decisions."},"additional_evidence":{"type":"string","description":"Optional additional context or evidence the user provides to support their appeal.\n\nSupplementary information, links to relevant discussions, or clarifying context that strengthens the appeal case. This field allows users to provide supporting details beyond the main explanation."},"status":{"type":"string","description":"Current status of the appeal in the review workflow.\n\nIndicates where the appeal is in the processing pipeline: pending_review (awaiting administrator assignment), under_review (actively being evaluated), approved (decision reversed), denied (original decision upheld), or modified (partial reversal with adjusted penalties)."},"decision":{"type":"string","description":"Administrator's decision on the appeal outcome.\n\nThe final ruling made by the reviewing administrator: uphold_original (deny appeal), reverse_decision (approve appeal), or modify_penalty (partial approval with adjusted consequences). Nullable until the appeal is resolved."},"decision_reasoning":{"type":"string","description":"Detailed explanation from administrator about why the appeal was approved, denied, or modified.\n\nRequired minimum 50-character explanation providing transparency about the administrator's decision-making process. This reasoning helps the appellant understand the outcome and demonstrates fair review procedures."},"corrective_action_taken":{"type":"string","description":"Description of any corrective actions taken if appeal was approved.\n\nDocuments specific remedial steps taken when an appeal is granted, such as content restoration, warning removal, suspension lift, ban reversal, or reputation adjustment. Nullable for denied appeals or when no action is required."},"submitted_at":{"type":"string","format":"date-time","description":"Timestamp when the user submitted the appeal.\n\nRecords the precise moment the appeal was created, used for tracking review timeline compliance with target response times (7 days for warnings, 3 days for suspensions, 14 days for bans)."},"reviewed_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator completed their review and made a decision.\n\nRecords when the appeal was resolved, used for measuring review processing time and ensuring compliance with appeal timeline requirements. Nullable until the appeal is decided."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the appeal record was created in the system.\n\nAuto-generated timestamp marking appeal creation, used for audit trail and chronological tracking of appeal submissions."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the appeal record was last modified.\n\nTracks the most recent update to the appeal, whether status changes, administrator assignment, decision recording, or appeal explanation updates by the member before review."}},"required":["id","appeal_explanation","status","submitted_at","created_at","updated_at"],"description":"Complete appeal record for members contesting moderation decisions.\n\nRepresents formal challenges to moderation actions including warnings, suspensions, bans, and content removals. Appeals provide users with recourse through administrator review when they believe moderation decisions were unfair or incorrect, supporting the platform's commitment to transparent and accountable content governance.\n\nThe appeal process allows members to present their case with detailed explanations and supporting evidence, which administrators review with full moderation context to uphold, reverse, or modify the original decision.","x-autobe-prisma-schema":"discussion_board_appeals"},"IDiscussionBoardAppeal.ICreate":{"type":"object","properties":{"appealed_moderation_action_id":{"type":"string","format":"uuid","description":"Moderation action being appealed.\n\nReferences discussion_board_moderation_actions.id of the specific moderation decision the user is contesting. Optional when the appeal targets a specific warning, suspension, or ban record directly."},"appealed_warning_id":{"type":"string","format":"uuid","description":"Warning being appealed.\n\nReferences discussion_board_warnings.id when the appeal contests a formal warning issued to the member. Optional when appealing other moderation decision types."},"appealed_suspension_id":{"type":"string","format":"uuid","description":"Suspension being appealed.\n\nReferences discussion_board_suspensions.id when the appeal contests a temporary account suspension. Optional when appealing other moderation decision types."},"appealed_ban_id":{"type":"string","format":"uuid","description":"Ban being appealed.\n\nReferences discussion_board_bans.id when the appeal contests a permanent account ban. Only applies to bans marked as appealable. Optional when appealing other moderation decision types."},"appeal_explanation":{"type":"string","description":"User's written explanation of why the moderation decision should be reversed.\n\nRequired substantive text between 100 and 1000 characters presenting the member's case for why the moderation action was unfair, incorrect, or disproportionate. Must provide meaningful arguments rather than personal attacks on moderators."},"additional_evidence":{"type":"string","description":"Optional additional context or evidence supporting the appeal.\n\nSupplementary information, references to relevant discussions, clarifying context, or other evidence that strengthens the appeal case beyond the main explanation."}},"required":["appeal_explanation"],"description":"Request body for creating a new appeal to contest a moderation decision.\n\nContains the moderation decision being appealed (warning, suspension, ban, or moderation action), the member's detailed written explanation of why the decision should be reversed, and optional supporting evidence. The creation request validates that the decision is appealable, within the appeal window, and has not already been appealed.","x-autobe-prisma-schema":"discussion_board_appeals"},"IDiscussionBoardAppeal.IUpdate":{"type":"object","properties":{"appeal_explanation":{"type":"string","description":"Updated written explanation of why the moderation decision should be reversed.\n\nRevised substantive text between 100 and 1000 characters allowing the member to strengthen their appeal arguments or provide additional context before administrator review. Must maintain quality standards."},"additional_evidence":{"type":"string","description":"Updated additional context or evidence supporting the appeal.\n\nRevised or expanded supplementary information that strengthens the appeal case. Members can add new evidence or clarify existing evidence before the appeal enters administrator review."}},"required":[],"description":"Request body for updating an existing appeal submission.\n\nAllows members to modify their appeal explanation and additional evidence while the appeal is in pending_review status. All fields are optional, enabling partial updates. Appeals cannot be modified once they enter under_review or resolved states.","x-autobe-prisma-schema":"discussion_board_appeals"},"IDiscussionBoardAppeal.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nSpecifies which page of results to retrieve from the filtered appeal list. Starts at 1 for the first page and increments for subsequent pages.\n\nUsed in conjunction with limit to navigate through large result sets of appeals submitted by members contesting moderation decisions."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of appeal records to return per page.\n\nControls the page size for pagination, allowing administrators to configure how many appeals are displayed at once. Default is typically 25 records per page.\n\nHigher limits reduce the number of page requests but increase response payload size. Maximum allowed is 100 appeals per page."},"status":{"type":"string","description":"Filter appeals by their current review status.\n\nAllows filtering the appeal list to show only appeals in specific workflow states including pending_review (newly submitted awaiting administrator assignment), under_review (actively being investigated by an administrator), approved (appeal granted with decision reversed), denied (appeal rejected with original decision upheld), or modified (partial appeal grant with adjusted penalties).\n\nSupports multiple status selection to view appeals in combined states."},"member_id":{"type":"string","format":"uuid","description":"Filter appeals by the member who submitted them.\n\nSpecifies the unique identifier of the member whose appeals should be retrieved. This filter restricts results to appeals submitted by a specific user.\n\nFor regular members accessing their own appeals, this filter is automatically applied to their user ID for security. For administrators, this filter enables reviewing all appeals from a specific member to analyze their moderation history."},"reviewing_administrator_id":{"type":"string","format":"uuid","description":"Filter appeals by the administrator assigned to review them.\n\nSpecifies the unique identifier of the administrator currently handling or who handled the appeal. This filter helps administrators track appeals assigned to specific team members.\n\nUseful for workload distribution analysis, reviewing specific administrator's appeal decisions, and identifying unassigned appeals (null value) that require assignment."},"decision":{"type":"string","description":"Filter appeals by the final decision outcome.\n\nAllows filtering by administrator decisions including uphold_original (original moderation decision maintained), reverse_decision (moderation action completely reversed), or modify_penalty (partial reversal with adjusted consequences).\n\nOnly applies to resolved appeals where a decision has been rendered. Pending and under-review appeals have null decision values."},"submitted_from":{"type":"string","format":"date-time","description":"Start date for filtering appeals by submission timestamp.\n\nSpecifies the beginning of the date range for appeal submissions. Only appeals submitted on or after this timestamp are included in results.\n\nUsed with submitted_to to create bounded date range queries for temporal analysis of appeal patterns."},"submitted_to":{"type":"string","format":"date-time","description":"End date for filtering appeals by submission timestamp.\n\nSpecifies the end of the date range for appeal submissions. Only appeals submitted on or before this timestamp are included in results.\n\nCombined with submitted_from to analyze appeals within specific time periods."},"sort_by":{"type":"string","description":"Field to sort appeal results by.\n\nSupports sorting by submitted_at (submission timestamp for chronological order), reviewed_at (review completion timestamp), status (workflow state), or decision (outcome type).\n\nDetermines the primary ordering criterion for result presentation."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for ordered results.\n\nSpecifies ascending (asc) or descending (desc) order for the sort_by field. Descending order shows newest or highest values first, while ascending shows oldest or lowest values first.\n\nDefault is typically descending for timestamp-based sorting to show most recent appeals first."},{"const":"desc","description":"Sort direction for ordered results.\n\nSpecifies ascending (asc) or descending (desc) order for the sort_by field. Descending order shows newest or highest values first, while ascending shows oldest or lowest values first.\n\nDefault is typically descending for timestamp-based sorting to show most recent appeals first."}],"description":"Sort direction for ordered results.\n\nSpecifies ascending (asc) or descending (desc) order for the sort_by field. Descending order shows newest or highest values first, while ascending shows oldest or lowest values first.\n\nDefault is typically descending for timestamp-based sorting to show most recent appeals first."}},"required":[],"description":"Request parameters for searching and filtering appeals submitted by members contesting moderation decisions.\n\nThis request structure supports comprehensive appeal queue management, enabling users to search their own appeal history and administrators to manage the complete appeal review workflow. The filtering and pagination capabilities ensure efficient navigation through appeal submissions while providing powerful search tools for finding specific appeals or analyzing appeal patterns.\n\nAll filter parameters are optional, allowing users to retrieve all appeals or apply selective criteria. Multiple filters can be combined to create highly specific queries such as finding all approved appeals submitted by a specific member within a date range."},"IDiscussionBoardAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary unique identifier of the audit log entry.\n\nThis UUID serves as the immutable primary key for each audit record in the discussion_board_audit_logs table, ensuring permanent traceability of all platform actions and system events."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the user who performed the logged action.\n\nReferences the discussion_board_members table to track which user initiated the action. Null for system-initiated events such as automated cleanup tasks, scheduled processes, or platform-initiated operations not attributable to specific users."},"action_type":{"type":"string","description":"Classification of the action that was performed.\n\nDescribes the type of operation executed, such as topic_created, reply_posted, vote_cast, profile_updated, content_deleted, category_modified, or other significant platform operations. Used for filtering audit logs by operation category and analyzing activity patterns."},"entity_type":{"type":"string","description":"Type of platform entity affected by the action.\n\nIndicates which database entity was the target of the operation, such as topic, reply, vote, user, category, tag, or other entity types. Used in combination with entity_id to identify the specific affected record."},"entity_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Universal identifier of the specific entity affected by the action.\n\nThis UUID references the particular record that was created, modified, or deleted. Used in combination with entity_type to uniquely identify the affected platform entity. Null for actions that don't target a specific entity record."},"description":{"type":"string","description":"Human-readable description of the action for audit review and reporting.\n\nProvides a clear, understandable explanation of what occurred in this audit event. Designed for administrator review, compliance reporting, and incident investigation. Describes the action in plain language suitable for audit documentation."},"metadata":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional structured context about the action in JSON format.\n\nContains supplementary information including before and after values for updates, affected field names, request parameters that triggered the action, and other contextual data useful for detailed audit analysis and forensic investigation."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the action was performed.\n\nCaptures the network source address for the action request. Essential for security analysis, geographic activity tracking, and identifying suspicious patterns. Null for system-initiated actions not originating from user requests."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string for device and platform tracking.\n\nRecords the User-Agent header from the HTTP request, enabling device type identification, browser compatibility analysis, and detection of automated tools or bots. Null for API actions or system-initiated events without HTTP context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit log entry was created.\n\nRecords the precise moment the logged action occurred. Immutable audit records have no updated_at field as they represent point-in-time events. Used for activity timeline reconstruction, temporal pattern analysis, and compliance reporting."}},"required":["id","action_type","entity_type","description","created_at"],"description":"Comprehensive audit trail record for significant platform actions and system events.\n\nEach audit log entry captures a complete record of user activities, administrative operations, and system events across the discussion board platform. These immutable records provide compliance support, security analysis capabilities, and user activity monitoring for platform governance.\n\nThe audit trail serves multiple critical functions including tracking content lifecycle events, monitoring user behavior patterns, investigating security incidents, supporting compliance auditing, and providing forensic data for dispute resolution.\n\nThis entity corresponds to the discussion_board_audit_logs table in the Prisma schema, which implements a comprehensive activity logging system for platform accountability and transparency.","x-autobe-prisma-schema":"discussion_board_audit_logs"},"IDiscussionBoardAuditLog.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter audit logs by specific user account.\n\nWhen provided, restricts results to actions performed by this user identifier. Enables user-specific activity tracking, behavioral analysis, and investigation of particular user's actions across the platform."},"action_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter audit logs by specific action type classification.\n\nRestricts results to actions matching the specified type such as topic_created, reply_posted, vote_cast, profile_updated, or content_deleted. Enables focused analysis of particular operation categories and activity pattern identification."},"entity_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter audit logs by affected entity type.\n\nRestricts results to actions affecting specific entity types such as topic, reply, vote, user, category, or tag. Supports investigation of operations on particular platform entities and entity lifecycle analysis."},"entity_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter audit logs by specific entity identifier.\n\nWhen provided with entity_type, restricts results to actions affecting a particular entity record. Enables complete activity timeline reconstruction for individual topics, replies, users, or other platform entities."},"start_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of date range filter for audit log entries.\n\nWhen provided, restricts results to actions occurring on or after this timestamp. Supports time-bound investigations, periodic compliance reporting, and historical activity analysis."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of date range filter for audit log entries.\n\nWhen provided, restricts results to actions occurring on or before this timestamp. Combined with start_date, enables precise temporal filtering for compliance audits and incident investigations."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter audit logs by source IP address or pattern.\n\nRestricts results to actions originating from IP addresses matching this value or pattern. Supports investigation of activity from specific network locations and identification of suspicious access patterns."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated audit log results.\n\nSpecifies which page of results to return in the paginated response. Page numbering starts at 1. When null or omitted, defaults to the first page."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of audit log entries per page.\n\nControls the page size for paginated results. Maximum 100 entries per page for performance. When null or omitted, applies a reasonable default (typically 25-50 records)."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort audit log results by.\n\nSpecifies which field to use for ordering results, such as created_at (default), action_type, entity_type, or user_id. Supports organizing audit data according to different investigation needs."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction for audit log results.\n\nSpecifies ascending (asc) or descending (desc) order for the sort_by field. Defaults to descending (newest first) when null or omitted, prioritizing recent activity for current operational monitoring."}},"required":[],"description":"Request parameters for searching and filtering general audit log entries.\n\nSupports comprehensive audit queries with multiple filtering dimensions including user accounts, action types, entity types, temporal ranges, and network sources. Pagination and sorting controls enable efficient navigation through audit datasets for compliance reporting and incident investigation."},"IDiscussionBoardSecurityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary unique identifier of the security log entry.\n\nThis UUID serves as the immutable primary key for each security audit record in the discussion_board_security_logs table, ensuring permanent traceability of all authentication events and security incidents."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the user associated with the security event.\n\nReferences the discussion_board_members table to track which user account is involved in the security event. Null for failed login attempts with invalid credentials where no valid user account could be identified or for system-level security events."},"event_type":{"type":"string","description":"Classification of the security event that occurred.\n\nDescribes the specific security-related action or incident, such as login_success, login_failed, account_locked, permission_denied, suspicious_activity, rate_limit_exceeded, token_refreshed, password_changed, or session_revoked. Critical for categorizing security events and identifying threat patterns."},"severity":{"type":"string","description":"Severity level assessment of the security event.\n\nIndicates the security impact level: low (routine events), medium (notable events requiring monitoring), high (potential security concerns), or critical (immediate security threats requiring response). Used for prioritizing security review and automated alerting thresholds."},"ip_address":{"type":"string","description":"IP address from which the security event originated.\n\nCaptures the network source address for all security events. Required field essential for security analysis, geographic threat identification, IP-based blocking decisions, and attack pattern recognition. Used to detect distributed attacks and identify suspicious access sources."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string for device fingerprinting.\n\nRecords the User-Agent header providing browser, operating system, and device information. Supports bot detection, device fingerprinting for security analysis, and identification of automated attack tools. Null for some automated system events without HTTP context."},"description":{"type":"string","description":"Human-readable explanation of the security event.\n\nProvides clear description of what security event occurred, suitable for incident review, security reporting, and administrator notifications. Designed for security analysts and compliance auditors to understand event significance without technical details."},"metadata":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional security event context and details in JSON format.\n\nContains structured supplementary information including failed login reasons, permission attempted during denial, threat indicators, attack signatures, and other contextual data needed for comprehensive security analysis and incident response."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the security event occurred and was logged.\n\nRecords the precise moment the security event happened. Immutable for audit integrity - security logs represent point-in-time events. Used for security timeline analysis, attack pattern identification, and correlation of related security events."}},"required":["id","event_type","severity","ip_address","description","created_at"],"description":"Security-specific audit trail record for authentication and access control events.\n\nEach security log entry captures critical security events including authentication attempts, permission violations, account lockouts, suspicious activities, and potential threats. These immutable records provide security monitoring, incident investigation, and compliance support for platform security governance.\n\nSecurity logs are essential for detecting attack patterns, investigating security incidents, monitoring authentication behavior, identifying potential account compromises, and generating security compliance reports.\n\nThis entity corresponds to the discussion_board_security_logs table in the Prisma schema, which implements comprehensive security event logging for platform protection and threat detection.","x-autobe-prisma-schema":"discussion_board_security_logs"},"IDiscussionBoardSecurityLog.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter security logs by specific user account.\n\nWhen provided, restricts results to security events associated with this user identifier, enabling account-specific security investigation, tracking authentication history for individual users, and analyzing user-specific threat patterns."},"event_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter security logs by specific event type classification.\n\nRestricts results to security events matching the specified type such as login_success, login_failed, account_locked, permission_denied, suspicious_activity, or rate_limit_exceeded. Enables focused analysis of particular security event categories."},"severity":{"oneOf":[{"const":"low"},{"const":"medium"},{"const":"high"},{"const":"critical"},{"type":"null"}],"description":"Filter security logs by severity level threshold.\n\nRestricts results to security events at or above the specified severity level (low, medium, high, critical). Supports prioritized security review, focusing on high-impact events requiring immediate attention."},"start_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of date range filter for security log entries.\n\nWhen provided, restricts results to security events occurring on or after this timestamp. Supports time-bound security investigations, periodic compliance reporting, and temporal threat pattern analysis."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of date range filter for security log entries.\n\nWhen provided, restricts results to security events occurring on or before this timestamp. Combined with start_date, enables precise temporal filtering for security incident investigation and compliance auditing."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter security logs by source IP address or pattern.\n\nRestricts results to security events originating from IP addresses matching this value or pattern. Supports investigation of attacks from specific network sources, geographic threat analysis, and identification of distributed attack patterns."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated security log results.\n\nSpecifies which page of results to return in the paginated response. Page numbering starts at 1. When null or omitted, defaults to the first page."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of security log entries per page.\n\nControls the page size for paginated results, allowing administrators to balance between comprehensive security views and query performance. Maximum 100 entries per page. When null or omitted, applies a reasonable default (typically 25-50)."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort security log results by.\n\nSpecifies which field to use for ordering results, such as created_at (default), event_type, severity, or ip_address. Supports organizing security data according to different investigation and analysis needs."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction for security log results.\n\nSpecifies ascending (asc) or descending (desc) order for the sort_by field. Defaults to descending (newest first) when null or omitted, prioritizing recent security events for current threat monitoring."}},"required":[],"description":"Request parameters for searching and filtering security audit log entries.\n\nSupports comprehensive security log queries with multiple filtering dimensions including user accounts, event types, severity levels, temporal ranges, and network sources. Pagination and sorting controls enable efficient navigation through security event datasets for incident investigation and compliance reporting."},"IDiscussionBoardModerationAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary unique identifier of the moderation audit log entry.\n\nThis UUID serves as the immutable primary key for each audit record in the discussion_board_moderation_audit_logs table, ensuring permanent traceability of all moderation actions taken on the platform."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the moderator who performed the moderation action.\n\nThis field references the discussion_board_moderators table and tracks which moderator took the logged action. Null for automated moderation actions performed by system algorithms rather than human moderators. Essential for moderator accountability and performance tracking."},"target_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the member user who was the target of the moderation action.\n\nThis field references the discussion_board_members table and indicates which user's content or account was affected by the moderation decision. Null for content-only actions that don't directly target a specific user account."},"action_type":{"type":"string","description":"Type of moderation action that was performed.\n\nDescribes the specific moderation intervention taken, such as content_hidden (making content invisible to regular users), content_removed (deleting content), warning_issued (formal warning to user), user_suspended (temporary account restriction), user_banned (permanent account block), appeal_approved (reversing prior decision), or appeal_denied (upholding original decision). Critical for categorizing moderation activities."},"target_content_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Universal identifier of the content affected by the moderation action.\n\nThis UUID references either a discussion topic or reply that was subject to moderation. Used in combination with target_content_type to identify the specific content entity. Null for user-level actions like suspensions or bans that don't target specific content."},"target_content_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of content that was affected by the moderation action.\n\nIndicates whether the target_content_id references a 'topic' from discussion_board_topics or a 'reply' from discussion_board_replies. Null for user-level moderation actions (suspensions, bans) that don't target specific content items."},"reason":{"type":"string","description":"Detailed explanation provided by the moderator for taking this action.\n\nRequired for all moderation actions to ensure transparency and accountability. Explains why the content violated guidelines or why the user action warranted moderation intervention. This explanation is critical for appeal processes and moderation quality reviews. Typically includes reference to specific community guideline violations."},"metadata":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional context and details about the moderation action in JSON format.\n\nContains structured supplementary information including original content snapshots before modification, violation category classification, previous warning history, action duration for temporary restrictions, and other contextual data needed for comprehensive audit review and appeals investigation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was performed and logged.\n\nRecords the precise moment the moderation intervention occurred. Immutable for audit integrity - moderation audit logs have no updated_at field as they represent point-in-time events. Used for temporal analysis of moderation patterns and incident investigation timelines."}},"required":["id","action_type","reason","created_at"],"description":"Comprehensive audit trail record for moderation actions on the discussion board platform.\n\nEach moderation audit log entry captures a complete record of content governance activities performed by moderators and administrators. These immutable audit records provide transparency, accountability, and support for appeals processing by documenting who took action, what action was taken, why it was necessary, and when it occurred.\n\nModeration audit logs are essential for maintaining platform integrity, enabling moderator performance reviews, investigating user appeals, and generating transparency reports. The audit trail ensures all content moderation decisions can be reviewed and validated against community guidelines.\n\nThis entity corresponds to the discussion_board_moderation_audit_logs table in the Prisma schema, which implements an append-only audit log pattern for permanent accountability.","x-autobe-prisma-schema":"discussion_board_moderation_audit_logs"},"IDiscussionBoardModerationAuditLog.IRequest":{"type":"object","properties":{"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the moderator who performed the actions.\n\nProvide a moderator UUID to retrieve only audit logs for actions taken by that specific moderator. Useful for reviewing individual moderator performance and decision patterns. Leave null to include actions from all moderators."},"target_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the member user who was targeted by moderation actions.\n\nProvide a member UUID to retrieve all moderation actions affecting that specific user. Essential for investigating user appeals and reviewing complete moderation history for individual members. Leave null to include actions targeting all users."},"action_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by specific type of moderation action.\n\nProvide an action type string (content_hidden, content_removed, warning_issued, user_suspended, user_banned, appeal_approved, appeal_denied) to retrieve only logs of that action category. Leave null to include all action types."},"target_content_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by type of content that was moderated.\n\nProvide 'topic' to see only moderation actions on discussion topics, or 'reply' for actions on discussion replies. Leave null to include both content types. Useful for analyzing moderation patterns specific to different content types."},"date_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for moderation actions occurring on or after this date.\n\nProvide a starting timestamp to retrieve only audit logs from this date forward. Used for time-bound audit investigations and periodic moderation reports. Leave null for no start date restriction."},"date_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for moderation actions occurring on or before this date.\n\nProvide an ending timestamp to retrieve only audit logs up to this date. Used with date_from for specific time period analysis. Leave null for no end date restriction."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination of search results.\n\nSpecifies which page of results to retrieve when the total result set exceeds the page size limit. Page numbering starts at 1. Leave null to default to page 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of audit log entries to return per page.\n\nControls the page size for pagination, with a maximum of 100 records per page for performance. Leave null to use the default page size of 20 entries."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort results by.\n\nSupported values include 'created_at' for chronological sorting, 'action_type' for grouping by action category, and 'moderator_id' for organizing by moderator. Leave null to default to created_at descending (newest first)."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for results.\n\nSpecify 'asc' for ascending order or 'desc' for descending order. Leave null to default to descending (newest first for timestamps, Z-A for text)."}},"required":[],"description":"Search and filtering criteria for retrieving moderation audit log entries.\n\nThis request structure supports complex queries for analyzing moderation actions, investigating appeals, reviewing moderator performance, and generating compliance reports. Administrators use these filters to locate specific moderation events, identify patterns in enforcement, and ensure consistent application of community guidelines.\n\nThe flexible filtering options enable temporal analysis (date ranges), actor analysis (specific moderators), target analysis (specific users or content types), and categorical analysis (action types). Combined with pagination and sorting, this supports efficient audit workflows for large-scale moderation oversight."},"IDiscussionBoardSearchHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary unique identifier of the search history record.\n\nThis UUID serves as the immutable primary key for each search query logged in the discussion_board_search_history table, enabling permanent tracking of user search behavior and platform search analytics."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the user who performed the search query.\n\nThis field references the discussion_board_members table for authenticated user searches, tracking which member executed the search. Null for guest user searches where the user was not logged in. Used for personalized search analytics and user behavior analysis."},"search_query":{"type":"string","description":"The actual search text entered by the user.\n\nCaptures the exact keywords, phrases, or search terms the user typed into the search interface. Used for search analytics, identifying popular queries, understanding user information needs, and improving search algorithms. Maximum 200 characters per business validation rules."},"filters_applied":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"JSON blob containing the search filters applied alongside the query.\n\nStructured data capturing filter parameters including category selections, date range restrictions, vote threshold minimums, tag filters, and other refinement criteria. Stored as JSON string for flexible filter parameter tracking. Null if no filters were applied beyond the basic search text."},"results_count":{"type":"integer","description":"Number of search results returned for this query.\n\nRecords how many discussion topics and replies matched the search criteria. Used to identify zero-result queries indicating content gaps, high-result queries that may need better filtering, and overall search effectiveness metrics. Zero values highlight opportunities for content creation or search improvement."},"clicked_result_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the search result item the user clicked on.\n\nCaptures which specific discussion topic or reply the user selected from search results, indicating search relevance and user satisfaction. References the UUID of the clicked content item. Null if the user did not click any search result, which may indicate poor search quality or users simply browsing."},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Session identifier tracking related searches within a browsing session.\n\nGroups multiple search queries from the same user session together for session-based search behavior analysis. Helps identify search refinement patterns and user exploration journeys. Null for isolated search queries not part of tracked sessions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the search query was executed.\n\nRecords the precise moment the user performed this search. Used for temporal analysis of search trends, identifying peak search activity periods, and understanding how user information needs evolve over time. Immutable as search history represents point-in-time events."}},"required":["id","search_query","results_count","created_at"],"description":"Historical record of user search queries on the discussion board platform.\n\nEach search history entry captures a complete search event including the query text, applied filters, result count, and user engagement. This audit trail enables search analytics, query improvement, personalized recommendations, and understanding of user information needs.\n\nSearch history supports both authenticated users and guests, tracking search behavior to improve search algorithms, identify trending topics users seek, detect zero-result queries indicating content gaps, and measure search effectiveness through click-through tracking.\n\nThis entity corresponds to the discussion_board_search_history table in the Prisma schema, which implements search query logging for platform analytics and continuous search optimization.","x-autobe-prisma-schema":"discussion_board_search_history"},"IDiscussionBoardSearchHistory.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific user who performed searches.\n\nProvide a member UUID to retrieve only search history for that specific user. Useful for analyzing individual user search behavior patterns. Leave null to include searches from all users (authenticated and guests)."},"search_query_keyword":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by keyword within search query text.\n\nProvide a text fragment to find all search queries containing that keyword. Uses partial matching to identify related searches. Leave null to not filter by query text content."},"min_results":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Filter for searches returning at least this many results.\n\nProvide a minimum result count to exclude low-result or zero-result searches. Useful for focusing on successful queries. Leave null for no minimum result threshold."},"max_results":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Filter for searches returning at most this many results.\n\nProvide a maximum result count to identify overly broad queries or specifically find zero-result searches (set to 0). Leave null for no maximum result threshold."},"has_clicked_result":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by whether user clicked any search result.\n\nSet to true to find only searches where users engaged with results (high relevance). Set to false to find searches with no clicks (potential poor relevance). Leave null to include both clicked and non-clicked searches."},"date_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for searches occurring on or after this date.\n\nProvide a starting timestamp to retrieve only search history from this date forward. Used for time-bound analytics and recent search trend analysis. Leave null for no start date restriction."},"date_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for searches occurring on or before this date.\n\nProvide an ending timestamp to retrieve only search history up to this date. Used with date_from for specific time period analysis. Leave null for no end date restriction."},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by specific user session identifier.\n\nProvide a session ID to retrieve all searches from a single browsing session. Useful for analyzing search refinement patterns within sessions. Leave null to include searches from all sessions."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination of search history results.\n\nSpecifies which page of results to retrieve when the total result set exceeds the page size limit. Page numbering starts at 1. Leave null to default to page 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of search history entries to return per page.\n\nControls the page size for pagination, with a maximum of 100 records per page for performance. Leave null to use the default page size of 20 entries."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort search history results by.\n\nSupported values include 'created_at' for chronological sorting, 'results_count' for result count ordering, and 'search_query' for alphabetical query sorting. Leave null to default to created_at descending (newest first)."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction for search history results.\n\nSpecify 'asc' for ascending order or 'desc' for descending order. Leave null to default to descending (newest first for timestamps)."}},"required":[],"description":"Search and filtering criteria for retrieving search history audit records.\n\nThis request structure enables administrators to perform complex analytics on user search behavior, identifying popular queries, zero-result searches, click-through patterns, and search effectiveness metrics. The flexible filtering options support temporal analysis, user-specific investigation, result count analysis, and engagement tracking.\n\nAdministrators use these filters to understand what users are searching for, improve search algorithms, identify content gaps, and optimize the discussion discovery experience."},"IDiscussionBoardGuest.ISessionMetadata":{"type":"object","properties":{"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address of the guest for analytics and security.\n\nIPv4 or IPv6 format. Used for geographic tracking and abuse prevention.\n\nTypically captured automatically by backend from request headers."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser user agent string for device identification.\n\nUsed for compatibility analysis and device type classification. Captured from HTTP headers.\n\nEnables understanding guest device usage patterns."}},"required":[],"description":"Session metadata for guest tracking and analytics.\n\nCaptures technical information about the guest's browsing session including IP address and user agent. Used for conversion funnel analysis and user experience optimization."},"IDiscussionBoardMember.IBlockedUserInfo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the blocked member account.\n\nReferences the discussion_board_members.id of the user who has been blocked."},"username":{"type":"string","description":"Unique username of the blocked member.\n\nDisplayed in the blocked users list to identify who has been blocked. Must be between 3-30 characters, alphanumeric with hyphens and underscores."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name of the blocked member if they have set one.\n\nThe user's preferred public name which may differ from their username. Helps with recognition when reviewing the blocked users list."},"avatar_url":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"URL to the blocked member's profile picture.\n\nDisplayed as visual identification in the blocked users list. May be a custom uploaded image or default avatar generated from username."}},"required":["id","username","display_name","avatar_url"],"description":"Essential profile information about a blocked member for display in blocked users lists.\n\nThis lightweight schema contains just enough information to identify and recognize blocked users without requiring the full member profile schema. It includes basic identity fields that help users remember who they blocked and why.\n\nThis information is derived from the discussion_board_members table but filtered to include only non-sensitive, publicly visible fields suitable for display in blocking relationship contexts.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardCategory.ITopicCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the category.\n\nReferences discussion_board_categories.id in the database."},"name":{"type":"string","description":"Category name displayed throughout the platform.\n\nExamples include 'Economics', 'Macroeconomics', 'Politics', 'International Relations'. Must be unique across all categories and between 3-50 characters."},"slug":{"type":"string","description":"URL-friendly identifier derived from category name.\n\nUsed for clean, readable category URLs (e.g., '/category/macroeconomics'). Lowercase alphanumeric with hyphens."}},"required":["id","name","slug"],"description":"Lightweight category information for display in topic summaries.\n\nThis schema provides essential category identification without the full category details like description, display order, or topic counts. It's optimized for inclusion in topic summary objects where only basic category context is needed.\n\nCategories are the foundational organizational structure for the discussion board, classifying topics into Economics and Politics domains with hierarchical subcategories.","x-autobe-prisma-schema":"discussion_board_categories"},"IDiscussionBoardMember.IAuthorInfo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member account.\n\nReferences discussion_board_members.id in the database."},"username":{"type":"string","description":"Unique username chosen during registration.\n\nImmutable after account creation. Between 3-30 characters, alphanumeric with hyphens and underscores. Used for @mentions and profile URLs."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's preferred public display name.\n\nCan differ from username and can be changed anytime. Between 1-50 characters, supports Unicode. Displayed alongside contributions."},"avatar_url":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"URL to user's profile picture.\n\nEither uploaded custom image or default avatar generated from username. Displayed next to user's posts and replies."}},"required":["id","username","display_name","avatar_url"],"description":"Essential author information for attribution in discussion content.\n\nThis lightweight schema provides the minimum author details needed for displaying attribution on topics and replies. It includes identity information and visual elements without the overhead of complete profile data, reputation scores, or activity statistics.\n\nThis schema is optimized for inclusion in topic and reply summaries where author attribution is necessary but full profile details are excessive.","x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardTag.ITopicTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the tag.\n\nReferences discussion_board_tags.id in the database."},"name":{"type":"string","description":"Tag name normalized to lowercase.\n\nBetween 2-30 characters, alphanumeric with spaces and hyphens. Used for display and search."}},"required":["id","name"],"description":"Lightweight tag information for display in topic contexts.\n\nThis minimal schema provides just the tag identifier and name without full tag details like description, status, or usage statistics. It's optimized for inclusion in topic objects where multiple tags may be listed and full tag metadata is unnecessary.\n\nTags provide additional categorization beyond primary categories, enabling users to find related discussions across different category boundaries.","x-autobe-prisma-schema":"discussion_board_tags"}}}}