import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdministrator } from "../../../../../../structures/IDiscussionBoardAdministrator";

/**
 * Request password reset for administrator account.
 *
 * Initiates the password reset workflow for an administrator who has forgotten
 * their password by generating a time-limited reset token and sending password
 * reset instructions via email.
 *
 * The password reset request process accepts the administrator's email address
 * as the sole identifier. The system searches the
 * discussion_board_administrators table for a matching email address, but
 * implements enumeration protection by always returning a success message
 * regardless of whether an account exists with that email, preventing attackers
 * from determining which email addresses are registered administrators.
 *
 * If a matching administrator account is found, the system generates a
 * cryptographically random reset token (minimum 32 bytes for security) and
 * creates a password reset record in the discussion_board_password_resets
 * table. This record includes discussion_board_administrator_id referencing the
 * administrator, reset_token_hash containing the hashed token (never storing
 * plain tokens), email field for verification, is_used set to false, and
 * expires_at timestamp set to 15 minutes from creation for security
 * compliance.
 *
 * The system sends a password reset email to the administrator's verified email
 * address containing the unique reset link with the embedded token, expiration
 * time warning (15 minutes), instructions that the link can only be used once,
 * and security guidance to ignore the email if not requested. The email
 * references the discussion_board_administrators table's email field for
 * delivery.
 *
 * Rate limiting is enforced to prevent abuse: maximum 3 reset requests per
 * email address per hour, and maximum 10 reset requests per IP address per
 * hour. Excessive reset requests are logged in discussion_board_security_logs
 * with event_type 'password_reset_abuse' and severity 'medium' for security
 * monitoring.
 *
 * The operation always returns a success response stating "If an account exists
 * for that email, a password reset link has been sent" to prevent revealing
 * account existence while providing helpful guidance to legitimate
 * administrators who may have mistyped their email address.
 *
 * @param props.connection
 * @param props.body Password reset request containing the administrator's email
 *   address for token generation and delivery
 * @path /auth/administrator/password/reset/request
 * @accessor api.functional.auth.administrator.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /**
     * Password reset request containing the administrator's email address
     * for token generation and delivery
     */
    body: IDiscussionBoardAdministrator.IResetRequest;
  };
  export type Body = IDiscussionBoardAdministrator.IResetRequest;
  export type Response = IDiscussionBoardAdministrator.IResetRequestResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/password/reset/request";
  export const random = (): IDiscussionBoardAdministrator.IResetRequestResult =>
    typia.random<IDiscussionBoardAdministrator.IResetRequestResult>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
