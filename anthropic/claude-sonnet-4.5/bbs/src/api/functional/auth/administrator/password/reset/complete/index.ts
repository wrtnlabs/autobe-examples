import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdministrator } from "../../../../../../structures/IDiscussionBoardAdministrator";

/**
 * Complete password reset by validating token and setting new password.
 *
 * Completes the password reset workflow by validating the reset token and
 * updating the administrator's password to a new secure value.
 *
 * The password reset completion process accepts the reset token (from the email
 * link query parameter) and the new password with confirmation. The system
 * validates the token against the discussion_board_password_resets table by
 * matching reset_token_hash, checking that is_used is false (token hasn't been
 * consumed), verifying expires_at timestamp has not passed (15-minute validity
 * window), and confirming discussion_board_administrator_id references an
 * existing active administrator account.
 *
 * The new password must meet all security requirements defined in the
 * authentication documentation: minimum 8 characters length, at least one
 * uppercase letter, one lowercase letter, one number, and one special character
 * from the allowed set (!@#$%^&*()_+-=[]{}|;:,.<>?). The system validates the
 * new password differs from the current password_hash to prevent password
 * reuse, and checks against the common/breached password list to reject
 * compromised passwords.
 *
 * Upon successful validation, the system hashes the new password using bcrypt
 * with minimum cost factor 12 and updates the password_hash field in the
 * discussion_board_administrators table for the referenced administrator
 * account. The reset token is marked as is_used true and used_at timestamp is
 * set to prevent token reuse, even if the token is still within the 15-minute
 * validity window.
 *
 * Critical security measures include revoking all existing sessions for this
 * administrator by setting is_active to false in all discussion_board_sessions
 * records where discussion_board_administrator_id matches the affected account,
 * and marking all associated refresh tokens in discussion_board_refresh_tokens
 * as is_revoked true with revoked_at timestamp. This forces re-authentication
 * on all devices, preventing session hijacking if the password reset was
 * initiated due to account compromise.
 *
 * The system sends a confirmation email to the administrator's email address
 * from discussion_board_administrators table notifying them of the successful
 * password change, including the timestamp, IP address, and device information
 * from the password reset request. The email warns that if the administrator
 * did not initiate this change, they should contact support immediately and
 * includes a link to secure account recovery procedures.
 *
 * Finally, the operation logs the password reset event in
 * discussion_board_security_logs with event_type 'password_reset_completed',
 * severity 'high', ip_address, and metadata containing the administrator ID and
 * timestamp for security audit trail compliance.
 *
 * @param props.connection
 * @param props.body Password reset completion data containing the reset token
 *   from email and new password meeting security requirements
 * @path /auth/administrator/password/reset/complete
 * @accessor api.functional.auth.administrator.password.reset.complete.completePasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function completePasswordReset(
  connection: IConnection,
  props: completePasswordReset.Props,
): Promise<completePasswordReset.Response> {
  return true === connection.simulate
    ? completePasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...completePasswordReset.METADATA,
          path: completePasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace completePasswordReset {
  export type Props = {
    /**
     * Password reset completion data containing the reset token from email
     * and new password meeting security requirements
     */
    body: IDiscussionBoardAdministrator.IResetComplete;
  };
  export type Body = IDiscussionBoardAdministrator.IResetComplete;
  export type Response = IDiscussionBoardAdministrator.IResetCompleteResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/password/reset/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/password/reset/complete";
  export const random =
    (): IDiscussionBoardAdministrator.IResetCompleteResult =>
      typia.random<IDiscussionBoardAdministrator.IResetCompleteResult>();
  export const simulate = (
    connection: IConnection,
    props: completePasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: completePasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
