import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardGuest } from "../../../structures/IDiscussionBoardGuest";

/**
 * Create temporary guest session for browsing public discussions.
 *
 * Creates a new guest session account for unauthenticated visitors to the
 * discussion board platform. This endpoint enables temporary, non-authenticated
 * access for browsing public discussions, topics, and content without requiring
 * full registration. Guest accounts are tracked for analytics purposes,
 * conversion metrics, and potential newsletter signups.
 *
 * Guest sessions are created with a unique session_id that identifies the
 * visitor throughout their browsing experience. The system records optional
 * metadata including email address (if guest subscribes to newsletter), IP
 * address for security and geographic tracking, and user agent information for
 * device type identification and compatibility analysis.
 *
 * Upon successful guest account creation, the system issues temporary JWT
 * tokens (access token and refresh token) that enable tracked browsing
 * sessions. The access token expires after 30 minutes and can be refreshed
 * using the refresh token, which expires after 7 days. These tokens allow the
 * platform to track guest engagement metrics including page views, visit
 * duration, and content interests for conversion funnel analysis.
 *
 * Guest accounts are distinguished from full member accounts by their read-only
 * privileges. Guests can view public discussions, browse categories, search
 * content, and view user profiles, but cannot create topics, post replies, vote
 * on content, or access member-only features. This limited access model
 * encourages registration while providing value through content discovery.
 *
 * The guest registration process supports the platform's growth strategy by
 * enabling frictionless initial access while collecting data for conversion
 * optimization. Guest email addresses can be used for targeted registration
 * reminders and newsletter campaigns to convert visitors into active members.
 *
 * @param props.connection
 * @param props.body Guest session creation information including optional email
 *   for newsletter signup and session tracking metadata
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Guest session creation information including optional email for
     * newsletter signup and session tracking metadata
     */
    body: IDiscussionBoardGuest.ICreate;
  };
  export type Body = IDiscussionBoardGuest.ICreate;
  export type Response = IDiscussionBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IDiscussionBoardGuest.IAuthorized =>
    typia.random<IDiscussionBoardGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh expired access token for guest browsing session.
 *
 * Refreshes the JWT access token for guest users using a valid refresh token.
 * This endpoint enables guests to maintain continuous browsing sessions without
 * re-creating their guest account when the access token expires after 30
 * minutes.
 *
 * When a guest's access token expires, the client automatically sends the
 * refresh token to this endpoint to obtain a new access token without
 * disrupting the browsing experience. The system validates the refresh token's
 * signature, expiration status, and revocation status before issuing new
 * credentials.
 *
 * The refresh token validation process checks that the token has not expired
 * (7-day lifetime), has not been revoked through session termination, and
 * corresponds to an active guest session record in the database. If validation
 * succeeds, the system generates a fresh access token with updated expiration
 * timestamp while maintaining the same guest session identity and metadata.
 *
 * This refresh mechanism is critical for guest user experience, allowing
 * extended browsing sessions for content exploration, research, and evaluation
 * before committing to full registration. Guests can explore multiple
 * discussion topics, search content, and navigate categories across multiple
 * hours or days without authentication interruption.
 *
 * The system may optionally implement refresh token rotation, where each
 * refresh request generates both a new access token and a new refresh token,
 * invalidating the old refresh token for enhanced security. This prevents
 * refresh token reuse attacks while maintaining session continuity for
 * legitimate guest users.
 *
 * If the refresh token is invalid, expired, or revoked, the system returns an
 * authentication error, prompting the guest to create a new guest session or
 * register for a full member account to continue accessing the platform.
 *
 * @param props.connection
 * @param props.body Refresh token from the current guest session for obtaining
 *   new access token
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh token from the current guest session for obtaining new access
     * token
     */
    body: IDiscussionBoardGuest.IRefresh;
  };
  export type Body = IDiscussionBoardGuest.IRefresh;
  export type Response = IDiscussionBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IDiscussionBoardGuest.IAuthorized =>
    typia.random<IDiscussionBoardGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
