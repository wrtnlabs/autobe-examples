import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardMember } from "../../../../../structures/IDiscussionBoardMember";
import { IPageIDiscussionBoardLoginHistory } from "../../../../../structures/IPageIDiscussionBoardLoginHistory";

/**
 * Retrieve paginated and filtered login history for a specific user account.
 *
 * This operation provides comprehensive access to a user's login history, which
 * is maintained in the discussion_board_login_history table as an immutable
 * audit trail of all authentication attempts. The login history includes both
 * successful logins and failed authentication attempts, providing critical data
 * for security monitoring and account activity review.
 *
 * The login history captures detailed information about each login attempt
 * including the email address used, whether the attempt was successful, failure
 * reasons for unsuccessful attempts, IP address, device type, browser
 * information, and approximate geographic location. This comprehensive data
 * enables users to detect suspicious login activity, verify legitimate access
 * patterns, and understand the security status of their account.
 *
 * Users can access their own login history to monitor account security,
 * identify unrecognized login attempts, and verify that only authorized devices
 * have accessed their account. Administrators can access login history for any
 * user to investigate security incidents, support account recovery requests,
 * and analyze platform-wide authentication patterns.
 *
 * The operation supports advanced filtering capabilities to help users find
 * specific login events efficiently. Filters include date range selection to
 * focus on recent activity or historical patterns, success/failure status to
 * isolate failed login attempts that might indicate unauthorized access
 * attempts, IP address filtering to track logins from specific locations,
 * device type filtering to review activity by device category, and
 * location-based filtering for geographic access patterns.
 *
 * Pagination is implemented to handle users with extensive login histories
 * efficiently, displaying 50 login records per page by default. The results are
 * sorted by timestamp in descending order (most recent first) to prioritize
 * current activity. This ordering helps users quickly identify their most
 * recent login events and detect any unusual recent activity.
 *
 * The operation validates that the requesting user is either the account owner
 * reviewing their own login history or an administrator with privileges to
 * access any user's security logs. This authorization check ensures that login
 * history data, which contains sensitive security information including IP
 * addresses and location data, is only accessible to authorized parties.
 *
 * The response includes comprehensive login attempt details with all fields
 * from the discussion_board_login_history table, enabling detailed security
 * analysis and pattern recognition for both users and administrators.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose login history is
 *   being retrieved
 * @param props.body Search criteria, filtering options, and pagination
 *   parameters for retrieving login history records
 * @path /discussionBoard/member/users/:userId/loginHistory
 * @accessor api.functional.discussionBoard.member.users.loginHistory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the user whose login history is being retrieved */
    userId: string & tags.Format<"uuid">;

    /**
     * Search criteria, filtering options, and pagination parameters for
     * retrieving login history records
     */
    body: IDiscussionBoardMember.ILoginHistoryRequest;
  };
  export type Body = IDiscussionBoardMember.ILoginHistoryRequest;
  export type Response = IPageIDiscussionBoardLoginHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/member/users/:userId/loginHistory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/users/${encodeURIComponent(props.userId ?? "null")}/loginHistory`;
  export const random = (): IPageIDiscussionBoardLoginHistory =>
    typia.random<IPageIDiscussionBoardLoginHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
