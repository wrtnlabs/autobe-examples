import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardMember } from "../../../../../structures/IDiscussionBoardMember";

/**
 * Retrieve notification preferences for a specific user.
 *
 * Retrieves the comprehensive notification preference configuration for the
 * user identified by the userId path parameter. This operation provides access
 * to all notification settings that control how the user receives platform
 * notifications across different event types and delivery channels.
 *
 * The notification preferences system allows users granular control over which
 * platform events trigger notifications and how those notifications are
 * delivered. Users can independently configure in-app notifications and email
 * notifications for each event type including replies to their topics, replies
 * to their comments, @mentions, vote milestones on their content, moderation
 * actions, watched topic updates, and system announcements.
 *
 * Additionally, the preferences include digest mode configuration (realtime,
 * hourly, daily, weekly) that controls notification batching frequency, quiet
 * hours settings to suppress email notifications during user-specified time
 * windows, and timezone configuration for accurate scheduling of digests and
 * quiet hours enforcement.
 *
 * This operation is essential for displaying the user's current notification
 * settings in their profile settings interface and for the notification
 * delivery system to determine how to deliver notifications to each user based
 * on their individual preferences.
 *
 * Authentication and authorization requirements ensure users can only access
 * their own notification preferences unless they have elevated privileges
 * (moderators and administrators may have broader access for support
 * purposes).
 *
 * The response includes all boolean flags for event-specific notification
 * channels, digest frequency configuration, quiet hours settings, timezone
 * information, and metadata timestamps indicating when preferences were last
 * modified.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose notification
 *   preferences are being retrieved
 * @path /discussionBoard/member/users/:userId/notificationPreferences
 * @accessor api.functional.discussionBoard.member.users.notificationPreferences.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the user whose notification preferences are
     * being retrieved
     */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardMember.INotificationPreferences;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/member/users/:userId/notificationPreferences",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/users/${encodeURIComponent(props.userId ?? "null")}/notificationPreferences`;
  export const random = (): IDiscussionBoardMember.INotificationPreferences =>
    typia.random<IDiscussionBoardMember.INotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification preferences for a specific user.
 *
 * Updates the comprehensive notification preference configuration for the user
 * identified by the userId path parameter. This operation allows users to
 * customize how they receive platform notifications across all supported event
 * types and delivery channels.
 *
 * The notification preferences control system behavior for delivering
 * notifications triggered by various platform events including replies to the
 * user's topics, replies to their comments, @username mentions, vote milestones
 * reached on their content, moderation actions affecting their account or
 * content, updates to topics they are watching, and system-wide announcements
 * from administrators.
 *
 * For each event type, users can independently enable or disable in-app
 * notifications (displayed in the notification center) and email notifications
 * (sent to their registered email address). This granular control ensures users
 * receive only the notifications they find valuable through their preferred
 * channels.
 *
 * Beyond individual event configuration, users can configure digest mode to
 * batch multiple notifications into periodic summaries (hourly, daily, or
 * weekly) instead of receiving immediate real-time notifications. This prevents
 * notification fatigue for highly active users while keeping them informed of
 * platform activity.
 *
 * The preferences also support quiet hours functionality, allowing users to
 * define time windows during which email notifications are suppressed and
 * queued for delivery when quiet hours end. This respects user time preferences
 * and prevents notifications during sleep hours or focused work periods.
 *
 * Timezone configuration ensures digest delivery times and quiet hours are
 * calculated correctly for the user's local time, providing a personalized
 * notification experience that respects their geographic location and
 * schedule.
 *
 * The system validates all submitted preference values, ensures digest
 * frequencies are valid options, validates quiet hours time formats, confirms
 * timezone identifiers are valid IANA timezone strings, and verifies boolean
 * flags are properly formatted. Upon successful validation, the system persists
 * the updated preferences and immediately applies them to future notification
 * delivery decisions for this user.
 *
 * Authentication and authorization ensure users can only modify their own
 * notification preferences. The operation enforces user ownership validation to
 * prevent unauthorized preference modifications. Moderators and administrators
 * may have broader access for support scenarios but standard members can only
 * update their own settings.
 *
 * The response confirms successful preference updates and returns the updated
 * notification preference configuration, allowing the client to verify changes
 * were applied correctly and update the user interface to reflect the new
 * settings.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose notification
 *   preferences are being updated
 * @param props.body Updated notification preference configuration including
 *   event-type toggles, digest settings, quiet hours, and timezone
 * @path /discussionBoard/member/users/:userId/notificationPreferences
 * @accessor api.functional.discussionBoard.member.users.notificationPreferences.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the user whose notification preferences are
     * being updated
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Updated notification preference configuration including event-type
     * toggles, digest settings, quiet hours, and timezone
     */
    body: IDiscussionBoardMember.INotificationPreferences.IUpdate;
  };
  export type Body = IDiscussionBoardMember.INotificationPreferences.IUpdate;
  export type Response = IDiscussionBoardMember.INotificationPreferences;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/users/:userId/notificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/users/${encodeURIComponent(props.userId ?? "null")}/notificationPreferences`;
  export const random = (): IDiscussionBoardMember.INotificationPreferences =>
    typia.random<IDiscussionBoardMember.INotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
