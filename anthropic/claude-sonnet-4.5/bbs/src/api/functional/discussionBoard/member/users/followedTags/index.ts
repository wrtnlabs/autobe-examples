import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardFollowedTag } from "../../../../../structures/IDiscussionBoardFollowedTag";
import { IPageIDiscussionBoardFollowedTag } from "../../../../../structures/IPageIDiscussionBoardFollowedTag";

/**
 * Follow a tag for personalized content recommendations and notifications.
 *
 * Create a new tag following relationship for an authenticated member. This
 * endpoint allows users to follow specific tags to customize their discussion
 * board experience and receive relevant content recommendations.
 *
 * When a member follows a tag, the system creates a record in the
 * discussion_board_followed_tags table linking the user to the tag. The
 * followed tag relationship enables several key features: prioritization of
 * topics with that tag in the user's personalized recommendations, optional
 * notifications when new topics are created with that tag, and display of
 * followed tags in the user's profile for managing their interests.
 *
 * The operation enforces important business constraints: members can follow a
 * maximum of 50 tags as specified in the business rules document, preventing
 * excessive tag following that could dilute the personalization benefits. The
 * system validates that the tag being followed exists in the
 * discussion_board_tags table and is in active status. The operation also
 * prevents duplicate follows by checking existing relationships.
 *
 * This operation integrates with the recommendation system and notification
 * system to provide users with content discovery aligned with their declared
 * interests in economic and political topics. Following tags is a key
 * engagement mechanism that helps users navigate the growing repository of
 * discussions efficiently.
 *
 * Security considerations include validating that the userId in the path
 * matches the authenticated user's identity (users can only manage their own
 * followed tags), ensuring the user has member role or higher, and preventing
 * abuse through rate limiting on follow/unfollow actions.
 *
 * Related operations that users typically perform in sequence include browsing
 * available tags through tag search or tag cloud features, viewing topics with
 * specific tags to determine interest, and managing their complete list of
 * followed tags through their profile settings.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the authenticated member who is
 *   following the tag
 * @param props.body Information about the tag to follow, including the tag
 *   identifier and optional notification preferences
 * @path /discussionBoard/member/users/:userId/followedTags
 * @accessor api.functional.discussionBoard.member.users.followedTags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the authenticated member who is following the
     * tag
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Information about the tag to follow, including the tag identifier and
     * optional notification preferences
     */
    body: IDiscussionBoardFollowedTag.ICreate;
  };
  export type Body = IDiscussionBoardFollowedTag.ICreate;
  export type Response = IDiscussionBoardFollowedTag;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/users/:userId/followedTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/users/${encodeURIComponent(props.userId ?? "null")}/followedTags`;
  export const random = (): IDiscussionBoardFollowedTag =>
    typia.random<IDiscussionBoardFollowedTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve user's followed tags with filtering and pagination.
 *
 * This operation provides a comprehensive interface for retrieving and
 * searching through the tags that a specific user is following. When users
 * follow tags on the discussion board platform, they receive personalized
 * content recommendations and notifications for new topics tagged with those
 * tags. This endpoint allows users to view and manage their followed tag
 * collection with advanced filtering and sorting capabilities.
 *
 * The operation queries the discussion_board_followed_tags table from the
 * Prisma schema, joining with the discussion_board_tags table to retrieve
 * complete tag information including tag names, descriptions, status, and usage
 * statistics. The search supports filtering by tag name, tag status (active,
 * pending_review, disabled, merged), date ranges for when tags were followed,
 * and sorting by various criteria including follow date, tag name, and tag
 * popularity.
 *
 * Security considerations include verifying that the authenticated user's ID
 * matches the userId path parameter to prevent unauthorized access to other
 * users' followed tag collections. The operation respects the soft deletion
 * pattern, filtering out followed_tags records where deleted_at is not null,
 * ensuring only active follows are returned. Similarly, the operation should
 * filter out tags where the tag itself has been deleted (tag.deleted_at is not
 * null).
 *
 * The response includes pagination metadata to handle users approaching the
 * 50-tag follow limit efficiently. Each returned tag record includes essential
 * information such as tag name, description, follow date (created_at from
 * followed_tags), and optionally aggregated statistics from the
 * mv_discussion_board_tag_statistics materialized view if available. The
 * materialized view provides denormalized data including usage_count (number of
 * topics with this tag), recent_usage_count, total_votes, and follower_count.
 *
 * This operation integrates with the tag-based content discovery system,
 * providing the foundation for personalized recommendations based on user
 * interests. Users typically access this endpoint through their profile
 * settings or tag management interface to review and potentially unfollow tags
 * that are no longer relevant to their interests. The operation enables users
 * to audit their followed tags and make informed decisions about which tags to
 * continue following given the 50-tag maximum limit specified in the business
 * rules.
 *
 * The PATCH method is used instead of GET to support complex request body
 * parameters for filtering and pagination, following the API design pattern
 * established for list/search operations with advanced query capabilities.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose followed tags are
 *   being retrieved
 * @param props.body Search criteria, filtering options, sorting preferences,
 *   and pagination parameters for retrieving followed tags
 * @path /discussionBoard/member/users/:userId/followedTags
 * @accessor api.functional.discussionBoard.member.users.followedTags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the user whose followed tags are being retrieved */
    userId: string & tags.Format<"uuid">;

    /**
     * Search criteria, filtering options, sorting preferences, and
     * pagination parameters for retrieving followed tags
     */
    body: IDiscussionBoardFollowedTag.IRequest;
  };
  export type Body = IDiscussionBoardFollowedTag.IRequest;
  export type Response = IPageIDiscussionBoardFollowedTag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/member/users/:userId/followedTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/users/${encodeURIComponent(props.userId ?? "null")}/followedTags`;
  export const random = (): IPageIDiscussionBoardFollowedTag.ISummary =>
    typia.random<IPageIDiscussionBoardFollowedTag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Unfollow a tag to stop receiving related notifications and content
 * prioritization.
 *
 * Remove an existing tag following relationship for an authenticated member.
 * This endpoint allows users to unfollow tags they are no longer interested in,
 * immediately stopping related notifications and content recommendations.
 *
 * When a member unfollows a tag, the system soft-deletes the corresponding
 * record in the discussion_board_followed_tags table by setting the deleted_at
 * timestamp. Soft deletion preserves historical user interest data for
 * analytics and potential future personalization insights while immediately
 * removing the tag from the user's active followed tags list. The unfollowed
 * tag will no longer appear in the user's followed tags display, topics with
 * that tag will no longer be prioritized in recommendations, and the user will
 * stop receiving notifications about new topics with that tag.
 *
 * The operation enforces important security and ownership constraints: users
 * can only unfollow tags they themselves have followed (ownership validation),
 * the followedTagId must correspond to an actual followed tag relationship in
 * the database, and the userId in the path must match the authenticated user's
 * identity. The system validates these constraints before processing the
 * removal.
 *
 * This operation supports the accidental unfollow recovery use case through the
 * soft deletion pattern. If a user accidentally unfollows a tag, administrators
 * or the user themselves (through a potential UI feature) could restore the
 * relationship by clearing the deleted_at timestamp within the platform's
 * 30-day soft deletion recovery window.
 *
 * The operation integrates with the notification system to immediately stop
 * queuing new notifications for the unfollowed tag, and with the recommendation
 * algorithm to remove the tag from the user's interest profile. This ensures
 * users see immediate effects when managing their followed tags.
 *
 * Security considerations include ownership verification (users cannot unfollow
 * tags on behalf of other users), authentication validation (only authenticated
 * members can unfollow tags), and audit trail creation (the soft deletion is
 * logged with timestamp for user activity tracking).
 *
 * Related operations that users typically perform include viewing their
 * complete list of followed tags to decide which to unfollow, browsing tag
 * statistics to discover new tags to follow as replacements, and adjusting
 * notification preferences for remaining followed tags.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the authenticated member who is
 *   unfollowing the tag
 * @param props.followedTagId Unique identifier of the followed tag relationship
 *   to remove
 * @path /discussionBoard/member/users/:userId/followedTags/:followedTagId
 * @accessor api.functional.discussionBoard.member.users.followedTags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the authenticated member who is unfollowing the
     * tag
     */
    userId: string & tags.Format<"uuid">;

    /** Unique identifier of the followed tag relationship to remove */
    followedTagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/users/:userId/followedTags/:followedTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/users/${encodeURIComponent(props.userId ?? "null")}/followedTags/${encodeURIComponent(props.followedTagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("followedTagId")(() => typia.assert(props.followedTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
