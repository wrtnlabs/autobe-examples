import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTopic } from "../../../../structures/IDiscussionBoardTopic";
export * as replies from "./replies/index";

/**
 * Create a new discussion topic on economic or political subjects.
 *
 * Create a new discussion topic in the economic and political discussion board
 * platform. This operation enables authenticated members to initiate
 * conversations on economic and political subjects by providing a title,
 * detailed body content, category assignment, and optional tags.
 *
 * The operation validates all input according to comprehensive business rules
 * defined in the platform requirements. The topic title must be between 10 and
 * 200 characters and cannot consist entirely of uppercase letters or contain
 * only special characters. The topic body must contain between 20 and 50,000
 * characters of meaningful content and supports Markdown formatting for rich
 * text presentation. The system rejects topics with excessive URLs (more than
 * 10) or content that consists of more than 80% URLs or special characters.
 *
 * Category assignment is mandatory - each topic must be assigned to exactly one
 * predefined category from the available options including Economics, Politics,
 * Current Events, Policy Analysis, Economic Theory, Political Theory,
 * International Relations, or Domestic Policy. This categorization enables
 * efficient content organization and discovery. Tags are optional but limited
 * to a maximum of 5 per topic, with each tag between 2-30 characters in length
 * containing only alphanumeric characters, hyphens, and spaces.
 *
 * The operation enforces strict rate limiting to prevent spam and abuse.
 * Members can create a maximum of 5 topics per hour and 20 topics per day. New
 * accounts less than 24 hours old are restricted to 3 topics per day. The
 * system also implements duplicate content detection, rejecting topics
 * identical to content the user posted within the last 24 hours.
 *
 * Security considerations include authentication verification through JWT
 * tokens, permission validation ensuring the user has member role, and
 * automated spam detection that flags or rejects content matching known spam
 * patterns. Upon successful creation, the topic is assigned a unique UUID
 * identifier, the author is recorded, creation and update timestamps are set,
 * the status is set to 'active', and initial counters for view_count and
 * reply_count are set to 0. The topic becomes immediately visible in the
 * discussion board and searchable by other users.
 *
 * This operation integrates with the notification system to send welcome
 * notifications for first-time topic creators and may trigger notifications to
 * users following the selected tags. The newly created topic appears in
 * category browsing, search results, and recent activity feeds according to the
 * platform's content discovery algorithms.
 *
 * @param props.connection
 * @param props.body Topic creation data including title, body content, category
 *   assignment, and optional tags
 * @path /discussionBoard/member/topics
 * @accessor api.functional.discussionBoard.member.topics.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Topic creation data including title, body content, category
     * assignment, and optional tags
     */
    body: IDiscussionBoardTopic.ICreate;
  };
  export type Body = IDiscussionBoardTopic.ICreate;
  export type Response = IDiscussionBoardTopic;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/topics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/member/topics";
  export const random = (): IDiscussionBoardTopic =>
    typia.random<IDiscussionBoardTopic>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing discussion topic's content, category, or tags.
 *
 * Update an existing discussion topic in the economic and political discussion
 * board platform. This operation allows topic authors, moderators, and
 * administrators to modify topic content including title, body, category
 * assignment, and tags according to role-based permissions and time-based
 * restrictions.
 *
 * Permission validation ensures that only authorized users can edit topics.
 * Regular members can only edit their own topics, while moderators and
 * administrators can edit any topic on the platform. The system enforces strict
 * time-based editing windows to maintain discussion integrity: members have 24
 * hours from topic creation to make edits, with an extended 7-day window for
 * members with 100+ reputation points. Moderators and administrators are exempt
 * from time restrictions and can edit topics at any time.
 *
 * When a topic has received more than 10 replies, the system implements a title
 * lock to prevent confusion in ongoing discussions. The title cannot be changed
 * after this threshold to maintain context for participants, but the topic
 * body, category, and tags remain editable within the allowed time window. This
 * business rule ensures that active discussions maintain consistent identity
 * while still allowing content refinement.
 *
 * All edit operations undergo the same comprehensive validation as topic
 * creation. The title must remain between 10-200 characters, cannot be all
 * uppercase, and must contain at least 3 alphabetic characters. The body
 * content must be between 20-50,000 characters and cannot exceed URL limits
 * (maximum 10 URLs, less than 80% URL content). Category assignment must
 * reference a valid, active category from the predefined list. Tags are
 * validated for proper format (2-30 characters, alphanumeric with hyphens and
 * spaces) and count (maximum 5 tags per topic).
 *
 * The system automatically records all edits in the
 * discussion_board_edit_history table for transparency and accountability. Each
 * edit creates an immutable audit record containing snapshots of content before
 * and after modification, the editor's identity, timestamp, and optional edit
 * reason. When content has been edited more than 3 times, the system displays
 * an 'edited' indicator to inform readers that the content has undergone
 * multiple revisions.
 *
 * Locked topics (status='locked') prevent all editing except by administrators,
 * maintaining discussion preservation for archived or finalized conversations.
 * Deleted topics (soft deleted with deleted_at timestamp) cannot be edited and
 * must be restored first. The operation updates the topic's updated_at
 * timestamp to reflect the modification time, which affects the topic's
 * position in 'recently active' and 'recently updated' sorting views.
 *
 * This operation integrates with the notification system to alert users
 * watching the topic that content has been modified. It also respects user
 * blocking relationships, ensuring that edits to topics by blocked users remain
 * invisible to users who have blocked the author.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the discussion topic to update
 * @param props.body Updated topic information including title, body, category,
 *   and tags
 * @path /discussionBoard/member/topics/:topicId
 * @accessor api.functional.discussionBoard.member.topics.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the discussion topic to update */
    topicId: string & tags.Format<"uuid">;

    /** Updated topic information including title, body, category, and tags */
    body: IDiscussionBoardTopic.IUpdate;
  };
  export type Body = IDiscussionBoardTopic.IUpdate;
  export type Response = IDiscussionBoardTopic;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/topics/:topicId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): IDiscussionBoardTopic =>
    typia.random<IDiscussionBoardTopic>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a discussion topic from the system.
 *
 * This operation permanently removes a discussion topic from the platform by
 * performing a soft deletion that sets the deleted_at timestamp on the
 * discussion_board_topics record. The deletion behavior varies based on the
 * user's role and the topic's state.
 *
 * For regular members (discussion_board_members), the ability to delete their
 * own topics is restricted by business rules: they can only delete topics they
 * authored within 1 hour of creation and only if the topic has received zero
 * replies. This time-based restriction maintains discussion thread integrity
 * and prevents authors from removing topics after community engagement has
 * begun. When a member attempts to delete a topic outside these constraints,
 * the system denies the request and explains the restriction.
 *
 * For moderators (discussion_board_moderators) and administrators
 * (discussion_board_administrators), topic deletion is permitted at any time
 * regardless of the topic's age or reply count. This administrative capability
 * supports content moderation, guideline enforcement, and platform management.
 * Moderators typically delete topics that violate community guidelines, contain
 * prohibited content, or represent spam.
 *
 * The deletion process sets the deleted_at timestamp in the
 * discussion_board_topics table rather than physically removing the record.
 * This soft deletion approach preserves content for audit purposes, supports
 * moderation review, and maintains database referential integrity. The Prisma
 * schema shows that deleted topics remain in the database but are filtered from
 * normal user queries. According to the data retention policies, soft-deleted
 * content is retained for 30 days to support recovery in case of accidental
 * deletion or successful moderation appeals.
 *
 * When a topic is deleted, the system handles associated data appropriately.
 * All replies to the topic (discussion_board_replies records) are also hidden
 * from public view through cascading soft deletion or visibility rules. Votes
 * (discussion_board_votes), favorites (discussion_board_favorites), and watched
 * topic subscriptions (discussion_board_watched_topics) on the deleted topic
 * are preserved in the database but become inaccessible to regular users. The
 * system creates an audit trail entry recording who deleted the topic, when it
 * was deleted, and the reason (if provided by a moderator).
 *
 * Security considerations include validating that the requesting user has
 * appropriate permissions based on their role and the topic ownership. The
 * system must verify the user's authentication token, check role-based
 * permissions from the permission matrix, validate topic ownership for member
 * deletions, and enforce the time-based deletion window for members. Rate
 * limiting does not typically apply to deletion operations since they cannot be
 * spammed effectively.
 *
 * This operation integrates with the moderation system when moderators or
 * administrators perform deletions. The deletion may be associated with a
 * moderation_action record that documents the violation and rationale. Users
 * affected by moderator deletions receive notifications explaining the action
 * and any appeals process available.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the discussion topic to be deleted
 * @path /discussionBoard/member/topics/:topicId
 * @accessor api.functional.discussionBoard.member.topics.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the discussion topic to be deleted */
    topicId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/topics/:topicId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
