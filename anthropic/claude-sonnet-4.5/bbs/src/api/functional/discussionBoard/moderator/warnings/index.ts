import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardWarning } from "../../../../structures/IDiscussionBoardWarning";
import { IPageIDiscussionBoardWarning } from "../../../../structures/IPageIDiscussionBoardWarning";

/**
 * Search and retrieve a filtered, paginated list of member warnings.
 *
 * Retrieve a filtered and paginated list of warnings issued to members for
 * violations of community guidelines on the economic and political discussion
 * board. This operation provides advanced search capabilities for finding
 * warnings based on multiple criteria including warning level (first_warning,
 * second_warning, final_warning), violation category, member identity, date
 * ranges, and active status.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Results can be sorted by issue date, expiration date,
 * warning level, or violation severity to help moderators and administrators
 * identify patterns in community guideline violations and track escalation of
 * member behavior issues.
 *
 * Security considerations include restricting this endpoint to administrator
 * and moderator roles only, as warning data contains sensitive moderation
 * information. The response includes detailed warning information with
 * references to the warned member, the content that triggered the warning, and
 * moderator notes explaining the decision. This transparency supports fair
 * moderation practices and enables effective appeals processing.
 *
 * This operation integrates with the discussion_board_warnings table as defined
 * in the Prisma schema, incorporating all warning fields including warning
 * level, violation category, moderator notes, expiration dates, and active
 * status. The response includes comprehensive warning details optimized for
 * moderation review, tracking member violation history, and identifying users
 * who may require escalated moderation actions.
 *
 * Related operations include GET /warnings/{warningId} for retrieving
 * individual warning details, and moderation action endpoints that may result
 * in warning creation. This search operation is typically used by moderators to
 * review warning history before taking additional moderation actions, and by
 * administrators to monitor overall moderation quality and consistency.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for warning
 *   filtering including warning level, violation category, member ID, date
 *   ranges, active status, and sorting options
 * @path /discussionBoard/moderator/warnings
 * @accessor api.functional.discussionBoard.moderator.warnings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for warning filtering
     * including warning level, violation category, member ID, date ranges,
     * active status, and sorting options
     */
    body: IDiscussionBoardWarning.IRequest;
  };
  export type Body = IDiscussionBoardWarning.IRequest;
  export type Response = IPageIDiscussionBoardWarning;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderator/warnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/warnings";
  export const random = (): IPageIDiscussionBoardWarning =>
    typia.random<IPageIDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific member warning.
 *
 * Retrieve comprehensive details about a specific warning issued to a member
 * for violating community guidelines on the economic and political discussion
 * board platform. This operation accesses the discussion_board_warnings table
 * to return complete information about a single warning record identified by
 * its unique warning ID.
 *
 * The response includes all warning details necessary for moderation review and
 * appeals processing: the warning level (first_warning, second_warning, or
 * final_warning) indicating escalation stage, the specific violation category
 * that triggered the warning, complete moderator notes explaining the decision
 * rationale, expiration date if applicable, and current active status. The
 * warning record also references the member who received the warning, the
 * specific content (topic or reply) that violated guidelines, and the
 * moderation action that issued the warning.
 *
 * Security considerations restrict this endpoint to administrator and moderator
 * roles, as warning details contain sensitive moderation information and member
 * conduct history. The operation supports the appeals process by providing
 * users and reviewing administrators with complete context about contested
 * warnings. It also enables moderators to reference prior warnings when making
 * escalation decisions for repeat violations.
 *
 * This operation integrates with the discussion_board_warnings table as defined
 * in the Prisma schema, incorporating relationships to discussion_board_members
 * (warned user), discussion_board_moderation_actions (issuing action),
 * discussion_board_topics and discussion_board_replies (violating content), and
 * discussion_board_appeals (if warning was appealed). The comprehensive warning
 * details support transparent moderation practices and fair enforcement of the
 * three-tier warning escalation system defined in platform policies.
 *
 * Related operations include PATCH /warnings for searching warning history,
 * moderation action endpoints that create warnings, and appeal endpoints where
 * users can contest warnings. This operation is frequently used before issuing
 * additional warnings to the same member to determine appropriate escalation
 * level, and during appeals review to provide complete context for
 * administrative decisions.
 *
 * @param props.connection
 * @param props.warningId Unique identifier of the target warning record
 * @path /discussionBoard/moderator/warnings/:warningId
 * @accessor api.functional.discussionBoard.moderator.warnings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target warning record */
    warningId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/warnings/:warningId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/warnings/${encodeURIComponent(props.warningId ?? "null")}`;
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("warningId")(() => typia.assert(props.warningId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
