import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTag } from "../../../../structures/IDiscussionBoardTag";

/**
 * Create a new tag in the discussion board tag vocabulary for content
 * categorization.
 *
 * This operation creates a new tag entry in the discussion_board_tags table,
 * enabling users to categorize and discover discussion topics through tag-based
 * filtering and search. Tags serve as secondary organizational metadata
 * complementing the primary category structure (Economics and Politics
 * categories).
 *
 * The tag creation process validates all input against business rules defined
 * in the requirements. Tag names must be between 2 and 30 characters in length,
 * contain only alphanumeric characters with spaces and hyphens, and be unique
 * across the entire tag vocabulary. The system normalizes tag names to
 * lowercase to ensure consistency and prevent duplicate tags with slight case
 * variations.
 *
 * When a moderator creates a tag, the system sets the initial status to
 * 'pending_review' to allow administrator oversight of the tag vocabulary. When
 * an administrator creates a tag, the status is set directly to 'active',
 * making it immediately available for use. This approval workflow maintains tag
 * quality and prevents the proliferation of redundant or inappropriate tags.
 *
 * Optionally, the creator can provide a description field explaining what the
 * tag represents and when to use it, helping users apply tags consistently
 * across discussions. The description supports clear tag semantics and reduces
 * confusion in tag application.
 *
 * Upon successful creation, the system generates a unique identifier, records
 * creation and update timestamps, and returns the complete tag object. The new
 * tag becomes searchable and available for suggestion in the topic creation
 * interface once its status reaches 'active'.
 *
 * This operation requires proper authentication and role-based authorization.
 * Only users with moderator or administrator roles can create new tags,
 * preventing tag spam from regular members while allowing community leaders to
 * expand the tag vocabulary organically as discussion topics evolve.
 *
 * @param props.connection
 * @param props.body Tag creation data including required name and optional
 *   description
 * @path /discussionBoard/moderator/tags
 * @accessor api.functional.discussionBoard.moderator.tags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Tag creation data including required name and optional description */
    body: IDiscussionBoardTag.ICreate;
  };
  export type Body = IDiscussionBoardTag.ICreate;
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/moderator/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/tags";
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing tag's name, description, or status in the discussion
 * board.
 *
 * This operation modifies an existing tag entry in the discussion_board_tags
 * table, allowing moderators and administrators to maintain tag quality,
 * clarify tag semantics, and manage the tag lifecycle. Tag updates are
 * essential for evolving the tag vocabulary as community discussions develop
 * and new topics emerge.
 *
 * The tag update process supports modifying three core attributes: name,
 * description, and status. When updating the tag name, the system validates
 * that the new name meets all naming requirements (2-30 characters,
 * alphanumeric with spaces and hyphens) and remains unique across the entire
 * tag vocabulary. The system normalizes updated names to lowercase to maintain
 * consistency with existing tag conventions.
 *
 * Description updates allow moderators to clarify what a tag represents and
 * provide guidance on when to use it. This helps users apply tags consistently
 * and reduces ambiguity in tag semantics. Descriptions are optional but
 * recommended for frequently used tags to improve user understanding.
 *
 * Status updates control the tag lifecycle. Moderators can change status from
 * 'pending_review' to 'active' to approve new tags for general use. Tags can be
 * disabled by setting status to 'disabled', which hides them from tag selection
 * interfaces while preserving existing tag associations on topics. Tags can be
 * marked as 'merged' when consolidating duplicate or similar tags, indicating
 * the tag has been superseded by another preferred tag.
 *
 * The operation validates that the specified tag exists by checking the tagId
 * path parameter against the discussion_board_tags table. If the tag is not
 * found or has been soft-deleted (deleted_at is not null), the operation
 * returns an appropriate error response.
 *
 * When a tag is successfully updated, the system automatically updates the
 * updated_at timestamp to track when modifications occurred. This timestamp is
 * used for audit trail and tracking tag evolution over time. Existing
 * topic_tags associations are preservedâ€”topics previously tagged with this tag
 * maintain their associations even when the tag name or description changes.
 *
 * Security considerations include validating that the requesting user has
 * moderator or administrator role privileges. The operation logs tag updates in
 * the audit trail for accountability. Tag updates should be performed
 * judiciously as they affect all topics currently using the tag.
 *
 * Related operations that work in conjunction with tag updates include tag
 * creation (POST /tags), tag-based topic discovery (GET /topics filtered by
 * tags), and tag following (members tracking specific tags for personalized
 * content). The tag update operation ensures the tag vocabulary remains
 * accurate, organized, and aligned with community discussion patterns.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the tag to update
 * @param props.body Updated tag information including name, description, and
 *   status
 * @path /discussionBoard/moderator/tags/:tagId
 * @accessor api.functional.discussionBoard.moderator.tags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the tag to update */
    tagId: string & tags.Format<"uuid">;

    /** Updated tag information including name, description, and status */
    body: IDiscussionBoardTag.IUpdate;
  };
  export type Body = IDiscussionBoardTag.IUpdate;
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderator/tags/:tagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderator/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
