import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTag } from "../../../structures/IDiscussionBoardTag";
import { IPageIDiscussionBoardTag } from "../../../structures/IPageIDiscussionBoardTag";
export * as statistics from "./statistics/index";

/**
 * Search and retrieve a filtered, paginated list of discussion board tags.
 *
 * Retrieve a filtered and paginated list of tags from the discussion board
 * system. This operation provides advanced search capabilities for finding tags
 * based on multiple criteria including partial name matching, tag status
 * filtering, usage statistics, and creation date ranges.
 *
 * Tags serve as a critical content organization mechanism in the discussion
 * board, complementing the primary category structure. Each tag can be applied
 * to multiple discussion topics (up to 5 tags per topic per business rules),
 * and users can follow tags to receive notifications about new discussions with
 * those tags. This operation supports tag browsing, popular tag discovery, and
 * tag management workflows.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Users can sort tags by name (alphabetically), creation
 * date, usage count (number of topics tagged), or recent usage count (trending
 * tags). The search functionality includes partial text matching on tag names
 * and descriptions using PostgreSQL full-text search with trigram indexing for
 * performance.
 *
 * Security considerations include rate limiting for search operations (30
 * searches per minute per user for guests, higher limits for authenticated
 * users). Tag visibility respects the tag status field - only active tags are
 * visible to regular users, while moderators and administrators can view
 * pending_review, disabled, and merged tags for management purposes.
 *
 * This operation integrates with the discussion_board_tags table as defined in
 * the Prisma schema (schema-05-engagement.prisma), incorporating tag properties
 * including name, description, status, and timestamps. The response includes
 * tag statistics aggregated from the mv_discussion_board_tag_statistics
 * materialized view when available, providing usage_count, recent_usage_count,
 * follower_count, and total_votes for each tag without expensive real-time
 * aggregation.
 *
 * Related operations that work together with this endpoint include GET
 * /tags/{tagId} for retrieving detailed information about a specific tag, GET
 * /topics for finding topics associated with selected tags, and PATCH /topics
 * for advanced topic search that includes tag filtering. Users typically use
 * this operation to discover popular tags, explore tag categories, and select
 * tags for following or filtering discussion content.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for tag filtering
 *   including text search, status filtering, usage thresholds, and sorting
 *   preferences
 * @path /discussionBoard/tags
 * @accessor api.functional.discussionBoard.tags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for tag filtering including
     * text search, status filtering, usage thresholds, and sorting
     * preferences
     */
    body: IDiscussionBoardTag.IRequest;
  };
  export type Body = IDiscussionBoardTag.IRequest;
  export type Response = IPageIDiscussionBoardTag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/tags";
  export const random = (): IPageIDiscussionBoardTag.ISummary =>
    typia.random<IPageIDiscussionBoardTag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific discussion board tag by ID.
 *
 * Retrieve comprehensive information about a single tag from the discussion
 * board system by specifying the tag's unique identifier in the path parameter.
 * This operation returns complete tag details including metadata, statistics,
 * and usage information.
 *
 * Tags are user-generated labels that provide additional categorization beyond
 * primary discussion categories. Each tag has properties including a unique
 * name (2-30 characters, normalized to lowercase), an optional description
 * explaining usage guidelines, and a status indicating its lifecycle state
 * (active, pending_review, disabled, merged). Tags support cross-category
 * content discovery, allowing users to find related discussions across
 * Economics and Politics categories through shared tags.
 *
 * The operation returns detailed tag information incorporating data from both
 * the discussion_board_tags base table and the
 * mv_discussion_board_tag_statistics materialized view. The statistics provide
 * aggregated metrics including total usage count (number of topics tagged),
 * recent usage count (topics tagged in last 7 days for trending analysis),
 * follower count (users following the tag), and total votes (sum of all votes
 * on tagged topics). These denormalized statistics enable efficient tag cloud
 * generation and popular tag displays without expensive real-time aggregation
 * queries.
 *
 * Security and visibility considerations ensure that tag access respects the
 * tag status field. Active tags are visible to all users including guests. Tags
 * with pending_review or disabled status are only visible to moderators and
 * administrators. Merged tags may redirect to the canonical tag they were
 * consolidated into. The operation validates that the specified tagId exists
 * and returns appropriate error messages for non-existent or inaccessible
 * tags.
 *
 * This operation integrates with related tag functionality including following
 * tags (users can subscribe to receive notifications about new topics with this
 * tag), filtering discussions by tags (finding all topics associated with this
 * tag), and tag management workflows (moderators reviewing and approving
 * user-created tags). The tag detail view helps users understand tag meaning
 * and appropriateness before applying it to their own discussion topics.
 *
 * Related operations include PATCH /tags for searching and browsing all
 * available tags, GET /topics for retrieving discussions associated with this
 * tag through topic_tags junction table, and POST /tags/{tagId}/follow for
 * users to subscribe to tag updates. This operation is commonly used when users
 * click on a tag from a discussion topic to learn more about that tag before
 * deciding to follow it or explore related discussions.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the target discussion board tag
 * @path /discussionBoard/tags/:tagId
 * @accessor api.functional.discussionBoard.tags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target discussion board tag */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
