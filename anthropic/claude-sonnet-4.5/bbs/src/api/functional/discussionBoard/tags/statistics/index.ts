import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTagStatistics } from "../../../../structures/IDiscussionBoardTagStatistics";

/**
 * Retrieve aggregated statistics for a specific discussion board tag.
 *
 * This operation retrieves comprehensive statistical information about a
 * specific tag from the mv_discussion_board_tag_statistics materialized view in
 * the Prisma schema. The statistics provide valuable insights into tag usage
 * patterns, popularity, and engagement metrics that help administrators manage
 * the tag taxonomy and help users understand which tags are actively used in
 * the community.
 *
 * The operation returns aggregated data including the total number of topics
 * currently tagged with this tag (usage_count), the number of topics tagged in
 * the last 7 days (recent_usage_count) which identifies trending tags, the sum
 * of all votes on topics with this tag (total_votes) indicating community
 * engagement, and the number of users following this tag (follower_count)
 * showing tag popularity. These metrics are pre-calculated in the materialized
 * view for optimal performance.
 *
 * Security and access control considerations allow this endpoint to be publicly
 * accessible since tag statistics are non-sensitive aggregate data that helps
 * all users understand tag usage patterns. No authentication is required,
 * making this information available to guests, members, moderators, and
 * administrators alike. The read-only nature of this operation ensures data
 * integrity.
 *
 * The statistics data is refreshed periodically according to the platform's
 * materialized view refresh schedule, so the returned metrics represent a
 * recent snapshot rather than real-time values. The updated_at timestamp in the
 * response indicates when the statistics were last recalculated, allowing
 * consumers to understand data freshness.
 *
 * This operation integrates with tag management workflows where administrators
 * review tag usage before making decisions about tag consolidation, deletion,
 * or promotion. It also supports tag discovery features where users browse
 * popular and trending tags to find relevant discussions. The relationship to
 * the base discussion_board_tags table is maintained through the
 * discussion_board_tag_id foreign key in the materialized view.
 *
 * Error handling includes validation that the specified tagId exists in the
 * system. If the tag does not exist or has been deleted, the operation returns
 * an appropriate error response. If statistics have not yet been calculated for
 * a newly created tag, the operation may return zero values for all metrics.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the tag for which statistics are
 *   requested
 * @path /discussionBoard/tags/:tagId/statistics
 * @accessor api.functional.discussionBoard.tags.statistics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the tag for which statistics are requested */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardTagStatistics;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/tags/:tagId/statistics",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/tags/${encodeURIComponent(props.tagId ?? "null")}/statistics`;
  export const random = (): IDiscussionBoardTagStatistics =>
    typia.random<IDiscussionBoardTagStatistics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
