import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardSearchHistory } from "../../../../../structures/IDiscussionBoardSearchHistory";
import { IPageIDiscussionBoardSearchHistory } from "../../../../../structures/IPageIDiscussionBoardSearchHistory";

/**
 * Retrieve and filter paginated search history audit records for platform
 * analytics.
 *
 * Retrieve a comprehensive, filtered, and paginated list of search history
 * audit records from the platform. This operation provides administrators and
 * analysts with powerful tools to analyze user search behavior, identify
 * popular queries, detect zero-result searches, and optimize search
 * functionality for economic and political discussions.
 *
 * The search history audit trail captures every search query performed on the
 * platform, including the search text entered, filters applied (category, date
 * range, tags, vote thresholds), number of results returned, which result was
 * clicked, and session context. This rich dataset enables deep analysis of user
 * information needs and search effectiveness.
 *
 * Security considerations ensure that only administrators can access the
 * complete search history audit trail. Regular members cannot access other
 * users' search histories to protect privacy. The operation respects data
 * retention policies, typically showing search history from the last 90 days
 * for performance and privacy reasons, though administrators may access
 * extended historical data for compliance purposes.
 *
 * The operation integrates with the discussion_board_search_history table from
 * the Prisma schema, incorporating all available fields including user_id
 * (nullable for guest searches), search_query (the actual text searched),
 * filters_applied (JSON blob of filter parameters), results_count (number of
 * results returned), clicked_result_id (nullable UUID of clicked result),
 * session_id (nullable session tracking), and created_at timestamp.
 *
 * Filtering capabilities support complex queries to identify patterns such as
 * frequently searched terms that return zero results (indicating content gaps),
 * queries with high click-through rates (indicating good relevance), queries
 * with low engagement (indicating poor search quality), and user-specific
 * search behavior patterns. The response includes search query summaries
 * optimized for analytics dashboards and reporting interfaces.
 *
 * This operation is essential for continuous improvement of the search
 * experience, identification of trending topics users are seeking, detection of
 * search feature usage patterns, and data-driven decisions about content
 * creation priorities based on unmet user information needs.
 *
 * @param props.connection
 * @param props.body Search criteria, filtering parameters, and pagination
 *   settings for retrieving search history audit records
 * @path /discussionBoard/administrator/audit/searches
 * @accessor api.functional.discussionBoard.administrator.audit.searches.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filtering parameters, and pagination settings for
     * retrieving search history audit records
     */
    body: IDiscussionBoardSearchHistory.IRequest;
  };
  export type Body = IDiscussionBoardSearchHistory.IRequest;
  export type Response = IPageIDiscussionBoardSearchHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/administrator/audit/searches",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/administrator/audit/searches";
  export const random = (): IPageIDiscussionBoardSearchHistory =>
    typia.random<IPageIDiscussionBoardSearchHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
