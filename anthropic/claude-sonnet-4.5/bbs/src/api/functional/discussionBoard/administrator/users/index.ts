import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as sessions from "./sessions/index";

/**
 * Permanently delete a user account and all associated data from the discussion
 * board.
 *
 * This operation permanently removes a user account from the
 * discussion_board_members table along with all associated data. When executed,
 * the system performs a hard delete that completely removes the member record
 * from the database.
 *
 * The deletion cascades to all related entities through the foreign key
 * relationships defined in the Prisma schema. This includes all user sessions,
 * login history, password reset tokens, discussion topics authored by the user,
 * replies posted by the user, votes cast by the user, favorited topics,
 * followed tags, watched topics, blocking relationships, reputation records,
 * content reports submitted, moderation actions targeting the user, warnings,
 * suspensions, any active bans, appeals, notifications, audit logs, and
 * security logs associated with the user account.
 *
 * This operation is irreversible and results in complete data loss for the user
 * account. It should only be executed when a user explicitly requests permanent
 * account deletion or when an administrator determines that complete account
 * removal is necessary. Before executing this operation, the system should
 * present clear warnings to the user about the permanent nature of the deletion
 * and the inability to recover the account or data afterward.
 *
 * This operation requires administrator privileges as it represents a critical
 * account management function with permanent consequences. The userId parameter
 * must correspond to an existing member in the discussion_board_members table.
 * If the specified user does not exist, the operation will fail with an
 * appropriate error message.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user account to be permanently
 *   deleted
 * @path /discussionBoard/administrator/users/:userId
 * @accessor api.functional.discussionBoard.administrator.users.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user account to be permanently deleted */
    userId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/administrator/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/administrator/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
