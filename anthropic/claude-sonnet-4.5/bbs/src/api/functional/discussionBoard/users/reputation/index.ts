import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardUserReputation } from "../../../../structures/IDiscussionBoardUserReputation";

/**
 * Retrieve detailed reputation score and statistics for a specific user.
 *
 * Retrieves comprehensive reputation information for the specified user from
 * the discussion_board_user_reputation table. Reputation is an aggregated
 * metric representing the quality of a user's contributions as determined by
 * community voting on their discussion topics and replies.
 *
 * The reputation system calculates scores using a weighted formula: (topic
 * upvotes × 5) - (topic downvotes × 2) + (reply upvotes × 2) - (reply downvotes
 * × 1). This weighting reflects that creating discussion topics requires more
 * effort than posting replies, and thus earns more reputation points per vote.
 * The response includes the total reputation score, separate scores for topics
 * and replies, and the total upvotes and downvotes received across all the
 * user's content.
 *
 * Reputation serves multiple purposes within the platform's ecosystem. It
 * provides social proof of contribution quality, enables reputation-based
 * privilege unlocking (such as downvoting at 50 points, extended editing
 * windows at 100 points, tag creation at 500 points), determines reputation
 * tier badges displayed on user profiles and posts, and influences content
 * ranking in search and discovery algorithms for high-reputation authors.
 *
 * The reputation data is denormalized in the discussion_board_user_reputation
 * table for performance, avoiding expensive vote aggregation queries on every
 * profile view. The system updates reputation scores in real-time as votes are
 * cast, changed, or removed on the user's content. This ensures the reputation
 * display is always current and accurately reflects the user's standing in the
 * community.
 *
 * Security considerations include validating that the requested user exists and
 * that their profile visibility settings permit viewing reputation information.
 * Public profiles show reputation to all users including guests, while
 * members-only profiles restrict reputation visibility to authenticated users,
 * and private profiles may hide reputation entirely based on user privacy
 * preferences.
 *
 * This operation integrates with the voting and engagement system documented in
 * the Voting and Engagement requirements, the user profile system from the User
 * Profiles and Preferences documentation, and supports the reputation-based
 * privilege model defined in the Business Rules and Validation document.
 *
 * The response provides all necessary data for displaying reputation badges,
 * calculating tier levels, showing contribution statistics on user profiles,
 * and determining if users have sufficient reputation for privilege-gated
 * actions like downvoting or advanced tagging features.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose reputation
 *   information is being retrieved
 * @path /discussionBoard/users/:userId/reputation
 * @accessor api.functional.discussionBoard.users.reputation.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the user whose reputation information is being
     * retrieved
     */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardUserReputation;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/users/:userId/reputation",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/users/${encodeURIComponent(props.userId ?? "null")}/reputation`;
  export const random = (): IDiscussionBoardUserReputation =>
    typia.random<IDiscussionBoardUserReputation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
