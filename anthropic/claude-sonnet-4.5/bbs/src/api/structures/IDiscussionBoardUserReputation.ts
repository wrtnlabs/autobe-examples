import { tags } from "typia";

/**
 * Aggregated reputation score representing a user's contribution quality as
 * judged by the community through voting on their content.
 *
 * Reputation is calculated using a weighted formula: (topic upvotes × 5) -
 * (topic downvotes × 2) + (reply upvotes × 2) - (reply downvotes × 1). This
 * weighting reflects that creating discussion topics requires more effort than
 * posting replies.
 *
 * Reputation serves multiple purposes: provides social proof of contribution
 * quality, enables reputation-based privilege unlocking (downvoting at 50
 * points, extended editing at 100 points, tag creation at 500 points),
 * determines reputation tier badges (New Contributor, Active Member, Valued
 * Contributor, Trusted Contributor, Expert Contributor), and influences content
 * ranking algorithms for high-reputation authors.
 *
 * This denormalized data structure enables efficient reputation display on
 * profiles, leaderboards, and privilege validation without expensive vote
 * aggregation queries. Updated in real-time as votes are cast, changed, or
 * removed on user content.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUserReputation = {
  /**
   * Unique identifier for this reputation record.
   *
   * Primary key enabling direct reputation record access and referential
   * integrity across the system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the member whose reputation is tracked.
   *
   * Links to discussion_board_members.id, establishing one-to-one
   * relationship between members and their reputation scores.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * Total reputation score calculated from all votes on user's content.
   *
   * Weighted formula: (topic upvotes × 5) - (topic downvotes × 2) + (reply
   * upvotes × 2) - (reply downvotes × 1). Used for leaderboards, privilege
   * unlocking, and reputation tier determination.
   *
   * Reputation tiers: 0-99 (New Contributor), 100-499 (Active Member),
   * 500-999 (Valued Contributor), 1000-4999 (Trusted Contributor), 5000+
   * (Expert Contributor).
   */
  total_score: number & tags.Type<"int32">;

  /**
   * Total number of upvotes received across all user's topics and replies.
   *
   * Used for reputation calculation and displaying user statistics.
   * Represents community endorsement of the user's contributions to economic
   * and political discussions.
   */
  upvotes_received: number & tags.Type<"int32">;

  /**
   * Total number of downvotes received across all user's topics and replies.
   *
   * Used for reputation calculation and quality monitoring. Indicates content
   * that the community found unhelpful, low-quality, or inappropriate.
   */
  downvotes_received: number & tags.Type<"int32">;

  /**
   * Reputation score derived from votes on user's topics only.
   *
   * Allows separate tracking of topic creation quality versus reply quality.
   * Calculated as (topic upvotes × 5) - (topic downvotes × 2).
   */
  topics_score: number & tags.Type<"int32">;

  /**
   * Reputation score derived from votes on user's replies only.
   *
   * Allows separate tracking of reply quality versus topic creation quality.
   * Calculated as (reply upvotes × 2) - (reply downvotes × 1).
   */
  replies_score: number & tags.Type<"int32">;

  /**
   * Timestamp when reputation was last recalculated.
   *
   * Used for cache invalidation and tracking reputation changes over time.
   * Updated in real-time as votes are cast, changed, or removed on the user's
   * content.
   */
  updated_at: string & tags.Format<"date-time">;
};
