import { tags } from "typia";

/**
 * Comprehensive audit trail record for significant platform actions and system
 * events.
 *
 * Each audit log entry captures a complete record of user activities,
 * administrative operations, and system events across the discussion board
 * platform. These immutable records provide compliance support, security
 * analysis capabilities, and user activity monitoring for platform governance.
 *
 * The audit trail serves multiple critical functions including tracking content
 * lifecycle events, monitoring user behavior patterns, investigating security
 * incidents, supporting compliance auditing, and providing forensic data for
 * dispute resolution.
 *
 * This entity corresponds to the discussion_board_audit_logs table in the
 * Prisma schema, which implements a comprehensive activity logging system for
 * platform accountability and transparency.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAuditLog = {
  /**
   * Primary unique identifier of the audit log entry.
   *
   * This UUID serves as the immutable primary key for each audit record in
   * the discussion_board_audit_logs table, ensuring permanent traceability of
   * all platform actions and system events.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the user who performed the logged action.
   *
   * References the discussion_board_members table to track which user
   * initiated the action. Null for system-initiated events such as automated
   * cleanup tasks, scheduled processes, or platform-initiated operations not
   * attributable to specific users.
   */
  user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Classification of the action that was performed.
   *
   * Describes the type of operation executed, such as topic_created,
   * reply_posted, vote_cast, profile_updated, content_deleted,
   * category_modified, or other significant platform operations. Used for
   * filtering audit logs by operation category and analyzing activity
   * patterns.
   */
  action_type: string;

  /**
   * Type of platform entity affected by the action.
   *
   * Indicates which database entity was the target of the operation, such as
   * topic, reply, vote, user, category, tag, or other entity types. Used in
   * combination with entity_id to identify the specific affected record.
   */
  entity_type: string;

  /**
   * Universal identifier of the specific entity affected by the action.
   *
   * This UUID references the particular record that was created, modified, or
   * deleted. Used in combination with entity_type to uniquely identify the
   * affected platform entity. Null for actions that don't target a specific
   * entity record.
   */
  entity_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Human-readable description of the action for audit review and reporting.
   *
   * Provides a clear, understandable explanation of what occurred in this
   * audit event. Designed for administrator review, compliance reporting, and
   * incident investigation. Describes the action in plain language suitable
   * for audit documentation.
   */
  description: string;

  /**
   * Additional structured context about the action in JSON format.
   *
   * Contains supplementary information including before and after values for
   * updates, affected field names, request parameters that triggered the
   * action, and other contextual data useful for detailed audit analysis and
   * forensic investigation.
   */
  metadata?: string | null | undefined;

  /**
   * IP address from which the action was performed.
   *
   * Captures the network source address for the action request. Essential for
   * security analysis, geographic activity tracking, and identifying
   * suspicious patterns. Null for system-initiated actions not originating
   * from user requests.
   */
  ip_address?: string | null | undefined;

  /**
   * Browser or client user agent string for device and platform tracking.
   *
   * Records the User-Agent header from the HTTP request, enabling device type
   * identification, browser compatibility analysis, and detection of
   * automated tools or bots. Null for API actions or system-initiated events
   * without HTTP context.
   */
  user_agent?: string | null | undefined;

  /**
   * Timestamp when the audit log entry was created.
   *
   * Records the precise moment the logged action occurred. Immutable audit
   * records have no updated_at field as they represent point-in-time events.
   * Used for activity timeline reconstruction, temporal pattern analysis, and
   * compliance reporting.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardAuditLog {
  /**
   * Request parameters for searching and filtering general audit log entries.
   *
   * Supports comprehensive audit queries with multiple filtering dimensions
   * including user accounts, action types, entity types, temporal ranges, and
   * network sources. Pagination and sorting controls enable efficient
   * navigation through audit datasets for compliance reporting and incident
   * investigation.
   */
  export type IRequest = {
    /**
     * Filter audit logs by specific user account.
     *
     * When provided, restricts results to actions performed by this user
     * identifier. Enables user-specific activity tracking, behavioral
     * analysis, and investigation of particular user's actions across the
     * platform.
     */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter audit logs by specific action type classification.
     *
     * Restricts results to actions matching the specified type such as
     * topic_created, reply_posted, vote_cast, profile_updated, or
     * content_deleted. Enables focused analysis of particular operation
     * categories and activity pattern identification.
     */
    action_type?: string | null | undefined;

    /**
     * Filter audit logs by affected entity type.
     *
     * Restricts results to actions affecting specific entity types such as
     * topic, reply, vote, user, category, or tag. Supports investigation of
     * operations on particular platform entities and entity lifecycle
     * analysis.
     */
    entity_type?: string | null | undefined;

    /**
     * Filter audit logs by specific entity identifier.
     *
     * When provided with entity_type, restricts results to actions
     * affecting a particular entity record. Enables complete activity
     * timeline reconstruction for individual topics, replies, users, or
     * other platform entities.
     */
    entity_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Start of date range filter for audit log entries.
     *
     * When provided, restricts results to actions occurring on or after
     * this timestamp. Supports time-bound investigations, periodic
     * compliance reporting, and historical activity analysis.
     */
    start_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End of date range filter for audit log entries.
     *
     * When provided, restricts results to actions occurring on or before
     * this timestamp. Combined with start_date, enables precise temporal
     * filtering for compliance audits and incident investigations.
     */
    end_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter audit logs by source IP address or pattern.
     *
     * Restricts results to actions originating from IP addresses matching
     * this value or pattern. Supports investigation of activity from
     * specific network locations and identification of suspicious access
     * patterns.
     */
    ip_address?: string | null | undefined;

    /**
     * Page number for paginated audit log results.
     *
     * Specifies which page of results to return in the paginated response.
     * Page numbering starts at 1. When null or omitted, defaults to the
     * first page.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of audit log entries per page.
     *
     * Controls the page size for paginated results. Maximum 100 entries per
     * page for performance. When null or omitted, applies a reasonable
     * default (typically 25-50 records).
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Field name to sort audit log results by.
     *
     * Specifies which field to use for ordering results, such as created_at
     * (default), action_type, entity_type, or user_id. Supports organizing
     * audit data according to different investigation needs.
     */
    sort_by?: string | null | undefined;

    /**
     * Sort order direction for audit log results.
     *
     * Specifies ascending (asc) or descending (desc) order for the sort_by
     * field. Defaults to descending (newest first) when null or omitted,
     * prioritizing recent activity for current operational monitoring.
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };
}
