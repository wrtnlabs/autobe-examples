import { tags } from "typia";

/**
 * Complete notification record representing platform events delivered to users.
 *
 * Notifications inform users about relevant activities including replies to
 * their content, mentions, vote milestones, moderation actions, and system
 * announcements. Each notification captures the triggering event, involved
 * users, related content, delivery status, and read tracking metadata.
 *
 * Notifications support both in-app delivery through the notification center
 * and email delivery based on user preferences. The notification system enables
 * real-time engagement tracking and helps users stay informed about discussions
 * they care about on economic and political topics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardNotification = {
  /**
   * Unique identifier for this notification record.
   *
   * The primary key uniquely identifies this notification across the platform
   * and enables direct notification retrieval, status updates, and deletion
   * operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Recipient user who receives this notification.
   *
   * References the discussion_board_members table identifying the member who
   * should be notified about this event. The notification is delivered based
   * on this user's notification preferences and quiet hours settings.
   */
  user_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Member whose action triggered this notification.
   *
   * References discussion_board_members for actions like posting replies,
   * casting votes, or mentioning users. Null for moderator/administrator
   * actions or system-generated notifications. Enables displaying who
   * performed the action that generated this notification.
   */
  triggering_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Moderator whose action triggered this notification.
   *
   * References discussion_board_moderators for moderation actions like
   * content removal or warnings. Null for member/administrator actions. Used
   * for moderation action notifications to identify the moderator
   * responsible.
   */
  triggering_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Administrator whose action triggered this notification.
   *
   * References discussion_board_administrators for administrative actions
   * like system announcements or high-level moderation. Null for
   * member/moderator actions. Identifies the administrator responsible for
   * notifications involving administrative operations.
   */
  triggering_administrator_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Discussion topic related to this notification.
   *
   * References discussion_board_topics for topic-related events like replies
   * to user's topics or topic vote milestones. Null if notification is not
   * topic-related. Enables navigation from notification to the relevant
   * discussion topic.
   */
  related_topic_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Discussion reply related to this notification.
   *
   * References discussion_board_replies for reply-related events like
   * responses to user's comments. Null if notification is not reply-related.
   * Enables navigation from notification to the specific reply within a
   * discussion thread.
   */
  related_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Moderation action related to this notification.
   *
   * References discussion_board_moderation_actions for moderation event
   * notifications like content removal, warnings, or suspensions. Null for
   * non-moderation notifications. Provides context about enforcement actions
   * affecting the user.
   */
  related_moderation_action_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Classification of the notification event type.
   *
   * Defines what kind of platform activity triggered this notification. Valid
   * values include: reply_to_topic (someone replied to user's topic),
   * reply_to_comment (someone replied to user's comment), mention (user was
   * mentioned with @username), vote_milestone (content reached vote
   * threshold), moderation_action (enforcement action taken),
   * system_announcement (platform-wide announcement), watched_topic_update
   * (activity on watched topic), welcome (new user welcome message).
   *
   * The notification type determines the notification template, icon,
   * priority level, and default delivery preferences.
   */
  notification_type: string;

  /**
   * Notification headline displayed to user.
   *
   * Concise summary of the notification event shown in notification lists and
   * email subject lines. Examples: 'New reply to your topic', 'You were
   * mentioned', 'Your post reached 50 upvotes', 'Moderation action on your
   * content'.
   *
   * The title provides immediate context about what happened without
   * requiring the user to read the full message.
   */
  title: string;

  /**
   * Notification content preview or detailed message.
   *
   * Provides detailed information about the notification event, typically
   * including content previews (first 200 characters of replies), moderation
   * reasons for enforcement actions, milestone details for vote achievements,
   * or announcement content for system messages.
   *
   * The message gives users enough context to decide whether to click through
   * to the full content or dismiss the notification.
   */
  message: string;

  /**
   * Deep link URL to the relevant content.
   *
   * Direct navigation link to the specific topic, reply, profile, or page
   * related to this notification. Null for notifications without specific
   * target content like general system announcements.
   *
   * Clicking the notification navigates the user to this URL, providing
   * immediate access to the content or context requiring their attention.
   */
  link_url?: string | null | undefined;

  /**
   * Whether user has marked this notification as read.
   *
   * True when user has clicked the notification or explicitly marked it as
   * read through bulk actions. False for unread notifications that should
   * contribute to the notification badge count and appear prominently in the
   * notification center.
   *
   * The read status determines notification styling and badge count
   * calculations.
   */
  is_read: boolean;

  /**
   * Whether user has viewed this notification in the notification center.
   *
   * True when user has opened the notification center and the notification
   * was displayed, even if not clicked. False for completely unseen
   * notifications.
   *
   * Distinguishes between notifications merely displayed versus those
   * actively engaged with, supporting engagement analytics.
   */
  is_seen: boolean;

  /**
   * Whether this notification was delivered through in-app notification
   * center.
   *
   * True if notification was queued and delivered to the user's in-app
   * notification interface. False if in-app delivery was disabled per user
   * preferences or notification type settings.
   *
   * Tracks which delivery channel was used for this notification event.
   */
  delivered_in_app?: boolean | undefined;

  /**
   * Whether this notification was delivered via email.
   *
   * True if email notification was queued and sent to the user's registered
   * email address. False if email delivery was disabled per user preferences,
   * digest settings, or quiet hours configuration.
   *
   * Tracks email delivery channel usage for this notification.
   */
  delivered_via_email?: boolean | undefined;

  /**
   * Timestamp when email notification was successfully sent.
   *
   * Records the exact time the email was delivered to the mail server for the
   * recipient. Null if email delivery was not attempted, failed, or is still
   * pending in the queue.
   *
   * Used for tracking email delivery latency and debugging email notification
   * issues.
   */
  email_sent_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Email delivery status tracking.
   *
   * Indicates the current state of email delivery: queued (pending send),
   * sent (successfully delivered to mail server), failed (delivery attempt
   * failed), or bounced (recipient mail server rejected). Null if email
   * delivery was not attempted.
   *
   * Enables monitoring email delivery reliability and identifying delivery
   * issues requiring attention.
   */
  email_delivery_status?: string | null | undefined;

  /**
   * Reason for email delivery failure.
   *
   * Describes why email delivery failed when email_delivery_status is failed
   * or bounced. Common reasons include invalid email address, recipient
   * mailbox full, mail server unreachable, or spam filter rejection. Null for
   * successful deliveries.
   *
   * Supports troubleshooting email delivery issues and identifying user
   * accounts with problematic email addresses.
   */
  email_failure_reason?: string | null | undefined;

  /**
   * Number of email delivery retry attempts.
   *
   * Tracks how many times the system attempted to deliver this email
   * notification. Increments on each retry after initial delivery failure.
   * Maximum 3 retries per platform requirements before marking delivery as
   * permanently failed.
   *
   * Enables identifying persistent delivery problems and preventing infinite
   * retry loops.
   */
  email_retry_count?: (number & tags.Type<"int32">) | undefined;

  /**
   * Timestamp when user marked notification as read.
   *
   * Records the exact time the user acknowledged this notification by
   * clicking it or using mark-as-read functionality. Null if notification
   * remains unread.
   *
   * Supports engagement analytics and helps users track which notifications
   * they have reviewed.
   */
  read_at: (string & tags.Format<"date-time">) | null;

  /**
   * Timestamp when notification was created.
   *
   * When the triggering event occurred and the notification was generated.
   * Displayed as relative time in notification center for quick temporal
   * context.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardNotification {
  /**
   * Summary representation of a discussion board notification optimized for
   * notification center list displays.
   *
   * This type provides essential notification information for rendering
   * notification lists in the UI without the full detail included in the
   * complete notification entity. It includes the core identification fields,
   * notification type and content, read status tracking, and delivery channel
   * information needed for notification center interfaces.
   *
   * The summary format is designed for efficient list rendering where users
   * browse their notification history, check unread notifications, and
   * quickly scan recent activity alerts. It excludes heavy relational data
   * and detailed metadata that are only needed when viewing individual
   * notification details.
   */
  export type ISummary = {
    /**
     * Unique identifier of the notification record.
     *
     * This UUID serves as the primary key for the notification in the
     * discussion_board_notifications table and is used for all
     * notification-specific operations including marking as read, deleting,
     * and retrieving detailed information.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Type of notification indicating what event triggered this alert.
     *
     * Valid values include: reply_to_topic (someone replied to user's
     * discussion topic), reply_to_comment (someone replied to user's
     * comment), mention (user was mentioned with @username), vote_milestone
     * (user's content reached vote threshold like 10, 25, 50, 100 votes),
     * moderation_action (moderator took action on user's content or
     * account), system_announcement (platform-wide announcement from
     * administrators), watched_topic_update (new activity on a topic user
     * is watching), welcome (new user welcome notification).
     *
     * This field enables notification filtering and categorization in the
     * notification center UI.
     */
    notification_type: string;

    /**
     * Notification headline displayed to user in the notification center.
     *
     * Provides a concise summary of the notification event such as 'New
     * reply to your topic', 'You were mentioned', or 'Your post reached 50
     * votes'. This title gives users immediate understanding of what
     * happened without reading detailed content.
     *
     * Designed for quick scanning in notification lists and mobile push
     * notification previews.
     */
    title: string;

    /**
     * Notification content preview or detailed message.
     *
     * Contains contextual information about the notification event such as
     * the first 200 characters of a reply that was posted, the moderation
     * action reason, or system announcement content. This preview helps
     * users decide if they need to click through to view full details.
     *
     * Limited to 200 characters for efficiency in list displays while
     * providing enough context for user decision-making.
     */
    message: string;

    /**
     * Whether the user has marked this notification as read.
     *
     * True indicates the user has acknowledged the notification by clicking
     * on it or explicitly marking it as read. False indicates an unread
     * notification that contributes to the notification center badge
     * count.
     *
     * This field drives the unread notification counter and visual
     * distinction between read and unread items in the notification list.
     */
    is_read: boolean;

    /**
     * Timestamp when the notification was created and queued for delivery.
     *
     * Used for displaying notification age in the UI (e.g., '2 hours ago',
     * '1 day ago') and for sorting notifications chronologically in the
     * notification center. Recent notifications appear first to prioritize
     * current activity.
     *
     * Formatted as ISO 8601 date-time string with timezone information for
     * consistent cross-timezone display.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Update data for modifying notification read status.
   *
   * This interface represents the mutable properties of a notification that
   * users can update through the notification management system. Members can
   * modify notification state to track which notifications they have reviewed
   * and acknowledged, supporting organized notification center workflows and
   * accurate unread badge counts.
   *
   * The update operation allows users to mark notifications as read when they
   * have reviewed the content, supporting efficient notification queue
   * management. The is_seen field is system-managed and updated automatically
   * when notifications are displayed in the notification center, so it is not
   * included in user-initiated update operations.
   *
   * All update fields are optional, allowing clients to send partial updates
   * that modify only the specific notification properties they need to
   * change. This flexibility supports various notification interaction
   * patterns including clicking notifications to mark as read and bulk
   * operations that update multiple notification states simultaneously.
   *
   * This interface integrates with the notification system requirements that
   * specify users should be able to mark individual notifications as read,
   * mark all notifications as read, and track notification engagement through
   * the notification center interface.
   */
  export type IUpdate = {
    /**
     * Whether the notification has been marked as read by the user.
     *
     * This field indicates that the user has acknowledged and reviewed the
     * notification content. When set to true, the notification is
     * considered read and will not contribute to the unread notification
     * count badge displayed in the notification center.
     *
     * Updating this field to true typically occurs when a user clicks on a
     * notification to view its associated content or explicitly marks the
     * notification as read through the notification center interface.
     *
     * This field integrates with the notification management system to
     * provide users with control over their notification read status and
     * supports the platform's goal of maintaining an organized, actionable
     * notification center.
     */
    is_read?: boolean | undefined;
  };

  /**
   * Search and filtering parameters for retrieving a user's notification
   * history with pagination and sorting.
   *
   * This request type supports complex queries to help users manage their
   * notification center efficiently. Users can filter notifications by type
   * to focus on specific events, by read status to find unread items
   * requiring attention, by delivery channel to understand notification
   * routing, by date ranges for temporal analysis, by related content to
   * track specific discussions, and by triggering users to see activity from
   * particular members.
   *
   * All filter parameters are optional, allowing flexible query construction
   * from simple (all notifications) to complex (unread reply notifications
   * from the last week for a specific topic). The pagination parameters
   * control result set size and navigation through large notification
   * histories.
   *
   * The operation respects the platform's 90-day notification retention
   * policy, automatically filtering out notifications older than 90 days
   * unless specifically queried by administrators for compliance purposes.
   */
  export type IRequest = {
    /**
     * Page number for pagination of notification results.
     *
     * Specifies which page of notifications to retrieve from the complete
     * result set. Page numbering starts at 1. If not provided, defaults to
     * page 1.
     *
     * Example: 1 for first page, 2 for second page, etc.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of notification records to return per page.
     *
     * Controls the page size for pagination, allowing users to adjust how
     * many notifications are displayed at once. The default is typically 20
     * notifications per page. Maximum allowed is 100 to prevent excessive
     * data transfer.
     *
     * Smaller page sizes improve initial load time, while larger page sizes
     * reduce the number of requests needed to browse notification history.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Filter notifications by specific event type.
     *
     * Restricts results to notifications of a particular type, helping
     * users focus on specific kinds of platform activity. Valid types
     * include reply_to_topic, reply_to_comment, mention, vote_milestone,
     * moderation_action, system_announcement, watched_topic_update, and
     * welcome.
     *
     * Example: 'reply_to_topic' shows only notifications about replies to
     * user's topics. Null or omitted returns all notification types.
     */
    notification_type?:
      | "reply_to_topic"
      | "reply_to_comment"
      | "mention"
      | "vote_milestone"
      | "moderation_action"
      | "system_announcement"
      | "watched_topic_update"
      | "welcome"
      | null
      | undefined;

    /**
     * Filter notifications by read status.
     *
     * When true, returns only notifications the user has marked as read.
     * When false, returns only unread notifications. When null or omitted,
     * returns all notifications regardless of read status.
     *
     * This filter is essential for managing notification history, allowing
     * users to focus on unread items requiring attention or review
     * previously acknowledged notifications.
     */
    is_read?: boolean | null | undefined;

    /**
     * Filter notifications by in-app delivery channel status.
     *
     * When true, returns only notifications that were delivered through the
     * in-app notification center. When false, returns only notifications
     * not delivered in-app. When null or omitted, returns all notifications
     * regardless of in-app delivery.
     *
     * Helps users understand which notifications were shown in the platform
     * interface versus delivered through other channels.
     */
    delivered_in_app?: boolean | null | undefined;

    /**
     * Filter notifications by email delivery channel status.
     *
     * When true, returns only notifications that were delivered via email
     * to the user's registered email address. When false, returns only
     * notifications not delivered via email. When null or omitted, returns
     * all notifications regardless of email delivery.
     *
     * Helps users identify which notifications triggered email
     * communications and understand their email notification volume.
     */
    delivered_via_email?: boolean | null | undefined;

    /**
     * Start date for filtering notifications by creation timestamp.
     *
     * Returns only notifications created on or after this date. Used with
     * date_to to define a date range for notification history review. When
     * null or omitted, no lower bound is applied to the date filter.
     *
     * Format: ISO 8601 date-time string (e.g., '2024-01-01T00:00:00Z').
     */
    date_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End date for filtering notifications by creation timestamp.
     *
     * Returns only notifications created on or before this date. Used with
     * date_from to define a date range for notification history review.
     * When null or omitted, no upper bound is applied to the date filter.
     *
     * Format: ISO 8601 date-time string (e.g., '2024-12-31T23:59:59Z').
     */
    date_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort notification results by.
     *
     * Determines the ordering of notification results in the response.
     * Valid options include created_at (chronological order),
     * notification_type (grouped by event type), and read_at (when
     * notifications were acknowledged).
     *
     * Default sorting is by created_at in descending order (newest
     * notifications first), which matches typical notification center user
     * experience expectations.
     */
    sort_by?: "created_at" | "notification_type" | "read_at" | null | undefined;

    /**
     * Sort direction for notification results.
     *
     * Controls whether results are sorted in ascending (asc) or descending
     * (desc) order based on the sort_by field. Descending order shows
     * newest or most recent items first, while ascending shows oldest items
     * first.
     *
     * Default is 'desc' for created_at sorting to show newest notifications
     * at the top of the list.
     */
    sort_order?: "asc" | "desc" | null | undefined;

    /**
     * Filter notifications related to a specific discussion topic.
     *
     * Returns only notifications that reference the specified discussion
     * topic ID, such as reply notifications for that topic, vote milestones
     * on the topic, or watched topic updates. Helps users focus on
     * notifications for a particular discussion.
     *
     * References discussion_board_topics.id. When null or omitted, does not
     * filter by related topic.
     */
    related_topic_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter notifications related to a specific discussion reply.
     *
     * Returns only notifications that reference the specified reply ID,
     * such as reply_to_comment notifications or vote milestones on specific
     * replies. Helps users track notification activity for particular
     * comments.
     *
     * References discussion_board_replies.id. When null or omitted, does
     * not filter by related reply.
     */
    related_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter notifications by the member who triggered the notification
     * event.
     *
     * Returns only notifications caused by actions from a specific member,
     * such as when that member replied to the user's content, voted on it,
     * or mentioned the user. Helps track notification activity from
     * specific contributors.
     *
     * References discussion_board_members.id. When null or omitted, does
     * not filter by triggering member.
     */
    triggering_member_id?: (string & tags.Format<"uuid">) | null | undefined;
  };
}
