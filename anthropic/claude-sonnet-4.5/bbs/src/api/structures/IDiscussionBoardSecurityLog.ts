import { tags } from "typia";

/**
 * Security-specific audit trail record for authentication and access control
 * events.
 *
 * Each security log entry captures critical security events including
 * authentication attempts, permission violations, account lockouts, suspicious
 * activities, and potential threats. These immutable records provide security
 * monitoring, incident investigation, and compliance support for platform
 * security governance.
 *
 * Security logs are essential for detecting attack patterns, investigating
 * security incidents, monitoring authentication behavior, identifying potential
 * account compromises, and generating security compliance reports.
 *
 * This entity corresponds to the discussion_board_security_logs table in the
 * Prisma schema, which implements comprehensive security event logging for
 * platform protection and threat detection.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSecurityLog = {
  /**
   * Primary unique identifier of the security log entry.
   *
   * This UUID serves as the immutable primary key for each security audit
   * record in the discussion_board_security_logs table, ensuring permanent
   * traceability of all authentication events and security incidents.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the user associated with the security event.
   *
   * References the discussion_board_members table to track which user account
   * is involved in the security event. Null for failed login attempts with
   * invalid credentials where no valid user account could be identified or
   * for system-level security events.
   */
  user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Classification of the security event that occurred.
   *
   * Describes the specific security-related action or incident, such as
   * login_success, login_failed, account_locked, permission_denied,
   * suspicious_activity, rate_limit_exceeded, token_refreshed,
   * password_changed, or session_revoked. Critical for categorizing security
   * events and identifying threat patterns.
   */
  event_type: string;

  /**
   * Severity level assessment of the security event.
   *
   * Indicates the security impact level: low (routine events), medium
   * (notable events requiring monitoring), high (potential security
   * concerns), or critical (immediate security threats requiring response).
   * Used for prioritizing security review and automated alerting thresholds.
   */
  severity: string;

  /**
   * IP address from which the security event originated.
   *
   * Captures the network source address for all security events. Required
   * field essential for security analysis, geographic threat identification,
   * IP-based blocking decisions, and attack pattern recognition. Used to
   * detect distributed attacks and identify suspicious access sources.
   */
  ip_address: string;

  /**
   * Browser or client user agent string for device fingerprinting.
   *
   * Records the User-Agent header providing browser, operating system, and
   * device information. Supports bot detection, device fingerprinting for
   * security analysis, and identification of automated attack tools. Null for
   * some automated system events without HTTP context.
   */
  user_agent?: string | null | undefined;

  /**
   * Human-readable explanation of the security event.
   *
   * Provides clear description of what security event occurred, suitable for
   * incident review, security reporting, and administrator notifications.
   * Designed for security analysts and compliance auditors to understand
   * event significance without technical details.
   */
  description: string;

  /**
   * Additional security event context and details in JSON format.
   *
   * Contains structured supplementary information including failed login
   * reasons, permission attempted during denial, threat indicators, attack
   * signatures, and other contextual data needed for comprehensive security
   * analysis and incident response.
   */
  metadata?: string | null | undefined;

  /**
   * Timestamp when the security event occurred and was logged.
   *
   * Records the precise moment the security event happened. Immutable for
   * audit integrity - security logs represent point-in-time events. Used for
   * security timeline analysis, attack pattern identification, and
   * correlation of related security events.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardSecurityLog {
  /**
   * Request parameters for searching and filtering security audit log
   * entries.
   *
   * Supports comprehensive security log queries with multiple filtering
   * dimensions including user accounts, event types, severity levels,
   * temporal ranges, and network sources. Pagination and sorting controls
   * enable efficient navigation through security event datasets for incident
   * investigation and compliance reporting.
   */
  export type IRequest = {
    /**
     * Filter security logs by specific user account.
     *
     * When provided, restricts results to security events associated with
     * this user identifier, enabling account-specific security
     * investigation, tracking authentication history for individual users,
     * and analyzing user-specific threat patterns.
     */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter security logs by specific event type classification.
     *
     * Restricts results to security events matching the specified type such
     * as login_success, login_failed, account_locked, permission_denied,
     * suspicious_activity, or rate_limit_exceeded. Enables focused analysis
     * of particular security event categories.
     */
    event_type?: string | null | undefined;

    /**
     * Filter security logs by severity level threshold.
     *
     * Restricts results to security events at or above the specified
     * severity level (low, medium, high, critical). Supports prioritized
     * security review, focusing on high-impact events requiring immediate
     * attention.
     */
    severity?: "low" | "medium" | "high" | "critical" | null | undefined;

    /**
     * Start of date range filter for security log entries.
     *
     * When provided, restricts results to security events occurring on or
     * after this timestamp. Supports time-bound security investigations,
     * periodic compliance reporting, and temporal threat pattern analysis.
     */
    start_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End of date range filter for security log entries.
     *
     * When provided, restricts results to security events occurring on or
     * before this timestamp. Combined with start_date, enables precise
     * temporal filtering for security incident investigation and compliance
     * auditing.
     */
    end_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter security logs by source IP address or pattern.
     *
     * Restricts results to security events originating from IP addresses
     * matching this value or pattern. Supports investigation of attacks
     * from specific network sources, geographic threat analysis, and
     * identification of distributed attack patterns.
     */
    ip_address?: string | null | undefined;

    /**
     * Page number for paginated security log results.
     *
     * Specifies which page of results to return in the paginated response.
     * Page numbering starts at 1. When null or omitted, defaults to the
     * first page.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of security log entries per page.
     *
     * Controls the page size for paginated results, allowing administrators
     * to balance between comprehensive security views and query
     * performance. Maximum 100 entries per page. When null or omitted,
     * applies a reasonable default (typically 25-50).
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Field name to sort security log results by.
     *
     * Specifies which field to use for ordering results, such as created_at
     * (default), event_type, severity, or ip_address. Supports organizing
     * security data according to different investigation and analysis
     * needs.
     */
    sort_by?: string | null | undefined;

    /**
     * Sort order direction for security log results.
     *
     * Specifies ascending (asc) or descending (desc) order for the sort_by
     * field. Defaults to descending (newest first) when null or omitted,
     * prioritizing recent security events for current threat monitoring.
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };
}
