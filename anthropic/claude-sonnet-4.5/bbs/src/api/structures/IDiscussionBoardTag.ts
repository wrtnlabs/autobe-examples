import { tags } from "typia";

/**
 * Complete discussion board tag entity representing a categorization label for
 * topics.
 *
 * Tags provide additional organization beyond primary categories, enabling
 * cross-category topic discovery and personalized content filtering. Tags are
 * created through topic creation workflows and managed by moderators to
 * maintain vocabulary quality.
 *
 * Each tag supports multiple discussion topics through the topic_tags junction
 * table and can be followed by users for personalized recommendations and
 * notifications.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardTag = {
  /**
   * Unique identifier for the tag.
   *
   * This UUID serves as the primary key for the tag record in the
   * discussion_board_tags table and is used for referencing tags in topic
   * associations, followed tags relationships, and tag statistics
   * aggregations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Tag name normalized to lowercase for consistency.
   *
   * Must be unique across all tags in the platform. Length is between 2 and
   * 30 characters, containing only alphanumeric characters with spaces and
   * hyphens allowed. Used for tag display, tag search, and tag-based content
   * filtering.
   *
   * Examples: 'monetary-policy', 'inflation', 'trade agreements', 'political
   * theory'
   */
  name: string;

  /**
   * Optional description explaining what this tag represents and when to use
   * it.
   *
   * Helps users apply tags consistently across discussions and reduces
   * ambiguity in tag semantics. Displayed in tag selection interfaces and tag
   * detail pages to guide proper tag usage.
   *
   * Provides context for economic and political terminology that may have
   * specific meanings in the discussion board context.
   */
  description?: string | null | undefined;

  /**
   * Tag lifecycle status controlling tag availability and usage.
   *
   * Possible values:
   *
   * - 'active': Available for use in topic tagging and search
   * - 'pending_review': Awaiting moderator approval before public availability
   * - 'disabled': Hidden from selection but existing associations preserved
   * - 'merged': Consolidated into another tag
   *
   * Status changes affect tag visibility in selection interfaces and search
   * results.
   */
  status: string;

  /**
   * Timestamp when the tag was first created in the system.
   *
   * Used for tracking tag evolution, identifying emerging tags, and analyzing
   * tag creation patterns over time. Automatically set on record creation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the tag was last modified.
   *
   * Reflects changes to name, description, or status. Used for audit trail
   * and tracking tag maintenance activities. Automatically updated on record
   * modification.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardTag {
  /**
   * Summary representation of a discussion board tag optimized for list
   * displays and tag cloud visualizations.
   *
   * This type provides essential tag information without full relational
   * data, designed for efficient rendering in tag browsing interfaces,
   * popular tags displays, and tag selection dropdowns during topic creation.
   * The summary includes the core tag identity and status information
   * necessary for users to understand tag purpose and relevance.
   *
   * Tags serve as secondary organizational metadata complementing the primary
   * category structure (Economics and Politics), enabling cross-category
   * topic discovery and content personalization through tag following and
   * filtering.
   */
  export type ISummary = {
    /**
     * Unique identifier of the tag.
     *
     * This UUID serves as the primary key in the discussion_board_tags
     * table and is used for all tag-related operations including tag
     * following, topic tagging, and tag statistics retrieval.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Tag name displayed throughout the platform, normalized to lowercase
     * for consistency.
     *
     * Tag names are unique across the entire tag vocabulary and must be
     * between 2 and 30 characters in length, containing only alphanumeric
     * characters, hyphens, and spaces. Examples include 'monetary-policy',
     * 'fiscal stimulus', 'international trade', 'electoral systems'.
     *
     * The normalized lowercase format ensures consistent tag matching and
     * prevents duplicate tags with slight case variations.
     */
    name: string;

    /**
     * Optional explanation of what this tag represents and when to use it.
     *
     * Descriptions help users apply tags consistently across discussions
     * and reduce ambiguity in tag semantics. Recommended for frequently
     * used tags to improve user understanding and tag application quality.
     *
     * Null when no description has been provided for this tag.
     */
    description?: string | null | undefined;

    /**
     * Tag lifecycle status indicating availability and management state.
     *
     * Valid values:
     *
     * - 'active': Tag is available for use in topic creation and visible in
     *   tag browsing interfaces
     * - 'pending_review': New tag awaiting moderator approval before becoming
     *   active
     * - 'disabled': Tag is hidden from selection but existing tag
     *   associations are preserved
     * - 'merged': Tag has been consolidated into another preferred tag
     *
     * The status controls tag visibility in user-facing interfaces while
     * preserving existing topic-tag associations for data integrity.
     */
    status: string;

    /**
     * Timestamp when the tag was first created in the system.
     *
     * Used for tracking tag evolution, identifying emerging tags, and
     * understanding the platform's tag vocabulary growth over time.
     * Displayed in ISO 8601 format with timezone information.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Tag creation request data for adding new categorization labels to the
   * discussion board.
   *
   * When moderators or administrators create tags, the system validates
   * uniqueness, normalizes the name to lowercase for consistency, and sets
   * the initial status based on creator role (pending_review for moderators,
   * active for administrators).
   *
   * Tag creation expands the platform's content categorization vocabulary,
   * enabling more granular topic organization and discovery for economic and
   * political discussions.
   */
  export type ICreate = {
    /**
     * Tag name to be created, will be normalized to lowercase.
     *
     * Must be unique across all existing tags. Length between 2 and 30
     * characters, containing only alphanumeric characters with spaces and
     * hyphens allowed.
     *
     * Examples: 'monetary-policy', 'fiscal stimulus', 'electoral systems',
     * 'trade policy'
     */
    name: string;

    /**
     * Optional description explaining what this tag represents and when to
     * apply it.
     *
     * Providing a clear description helps users apply tags consistently and
     * reduces tag duplication through similar but differently named tags.
     * Recommended for tags covering complex economic or political
     * concepts.
     *
     * This description appears in tag selection interfaces and tag detail
     * pages.
     */
    description?: string | null | undefined;
  };

  /**
   * Tag update request data for modifying existing tag properties.
   *
   * All fields are optional - only provided fields are updated. Tag updates
   * support renaming misspelled tags, adding or clarifying descriptions for
   * better tag semantics, changing status to manage tag lifecycle (approve
   * pending tags, disable inappropriate tags, merge duplicates), and
   * maintaining the tag vocabulary as discussion topics evolve.
   *
   * Existing topic associations are preserved when tags are updated, ensuring
   * content organization remains stable.
   */
  export type IUpdate = {
    /**
     * Updated tag name to replace the existing name.
     *
     * Must remain unique across all tags and meet the same naming
     * requirements (2-30 characters, alphanumeric with spaces and hyphens).
     * Will be normalized to lowercase for consistency.
     *
     * Renaming tags is useful for correcting typos, improving clarity, or
     * standardizing tag vocabulary across the platform.
     */
    name?: string | null | undefined;

    /**
     * Updated description explaining tag meaning and usage guidelines.
     *
     * Can be set to provide clearer guidance, updated to reflect evolved
     * tag semantics, or set to null to remove description. Clear
     * descriptions improve tag consistency and reduce confusion in tag
     * application across economic and political discussions.
     */
    description?: string | null | undefined;

    /**
     * Updated tag lifecycle status.
     *
     * Possible values:
     *
     * - 'active': Make tag available for general use
     * - 'pending_review': Mark tag for moderator review
     * - 'disabled': Hide tag from selection while preserving existing
     *   associations
     * - 'merged': Mark tag as consolidated into another tag
     *
     * Status changes control tag visibility and availability for topic
     * tagging.
     */
    status?: string | null | undefined;
  };

  /**
   * Search and filtering parameters for retrieving discussion board tags.
   *
   * Supports complex tag queries with text search across names and
   * descriptions, status filtering for tag lifecycle management, date range
   * filtering for temporal analysis, and flexible sorting options. All
   * parameters are optional, allowing simple browsing (no filters) or highly
   * specific tag searches.
   *
   * Used by tag browsing interfaces, tag selection dropdowns, tag management
   * dashboards, and tag discovery features.
   */
  export type IRequest = {
    /**
     * Text search query for finding tags by name or description.
     *
     * Supports partial matching using PostgreSQL trigram indexing for fuzzy
     * search. Searches across both tag name and description fields to help
     * users discover relevant tags.
     *
     * Example: Searching 'monetary' finds tags like 'monetary-policy',
     * 'monetary theory', etc.
     */
    search?: string | null | undefined;

    /**
     * Filter tags by lifecycle status.
     *
     * Possible values: 'active', 'pending_review', 'disabled', 'merged'.
     * Regular users typically filter for 'active' tags only, while
     * moderators and administrators can view all statuses for tag
     * management.
     *
     * Filtering by status helps administrators identify tags needing review
     * or cleanup.
     */
    status?: string | null | undefined;

    /**
     * Filter tags created on or after this timestamp.
     *
     * Useful for finding newly created tags, tracking tag vocabulary growth
     * over time, and identifying emerging discussion topics.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter tags created on or before this timestamp.
     *
     * Combined with created_after, enables date range filtering for
     * temporal tag analysis and identifying historical tag creation
     * patterns.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort results by.
     *
     * Supported values:
     *
     * - 'name': Alphabetical by tag name
     * - 'created_at': Chronological by creation date
     * - 'usage_count': By number of topics tagged (requires join with
     *   statistics)
     * - 'recent_usage': By trending activity
     *
     * Default is typically 'name' for alphabetical browsing.
     */
    sort_by?: string | null | undefined;

    /**
     * Sort order direction.
     *
     * Supported values:
     *
     * - 'asc': Ascending order (A-Z, oldest first, lowest count first)
     * - 'desc': Descending order (Z-A, newest first, highest count first)
     *
     * Default is typically 'asc' for alphabetical sorts and 'desc' for
     * usage-based sorts.
     */
    order?: string | null | undefined;

    /**
     * Page number for pagination, starting from 1.
     *
     * Determines which page of results to return when the total result set
     * exceeds the page size limit. Used with limit to implement efficient
     * pagination through large tag vocabularies.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of tags to return per page.
     *
     * Typically set to 20-50 for tag list views and tag clouds. Maximum
     * allowed is 100 to prevent excessive data transfer. Combined with page
     * parameter to implement pagination.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };

  /**
   * Lightweight tag information for display in topic contexts.
   *
   * This minimal schema provides just the tag identifier and name without
   * full tag details like description, status, or usage statistics. It's
   * optimized for inclusion in topic objects where multiple tags may be
   * listed and full tag metadata is unnecessary.
   *
   * Tags provide additional categorization beyond primary categories,
   * enabling users to find related discussions across different category
   * boundaries.
   */
  export type ITopicTag = {
    /**
     * Unique identifier of the tag.
     *
     * References discussion_board_tags.id in the database.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Tag name normalized to lowercase.
     *
     * Between 2-30 characters, alphanumeric with spaces and hyphens. Used
     * for display and search.
     */
    name: string;
  };
}
