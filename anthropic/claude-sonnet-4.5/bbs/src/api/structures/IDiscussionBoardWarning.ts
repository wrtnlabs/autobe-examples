import { tags } from "typia";

/**
 * Complete warning record documenting a formal warning issued to a member for
 * community guideline violations.
 *
 * Warnings represent formal notices in the graduated enforcement system
 * designed to educate members about violations and encourage guideline
 * compliance before escalating to suspensions or bans. The warning system
 * implements a three-tier escalation approach where violations accumulate over
 * time, with each level carrying progressively serious consequences.
 *
 * This entity captures all information necessary for warning tracking,
 * escalation logic, appeal processing, and moderation accountability. Warnings
 * are issued by moderators through the moderation action workflow and become
 * part of the member's permanent violation history even after expiration. The
 * system uses active warnings to determine appropriate escalation levels for
 * future violations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardWarning = {
  /**
   * Unique identifier for this warning record.
   *
   * This UUID serves as the primary key for the warning and is used to
   * reference this specific warning in appeal workflows, audit trails, and
   * moderation review interfaces.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the member who received this warning.
   *
   * References the discussion_board_members table to identify which user
   * account was issued this warning for guideline violations. This
   * relationship enables tracking violation history and implementing the
   * graduated warning escalation system.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the moderation action that issued this warning.
   *
   * References the discussion_board_moderation_actions table to link the
   * warning to the complete moderation decision context including moderator
   * reasoning, content snapshots, and violation categorization. This ensures
   * every warning has a documented justification.
   */
  moderation_action_id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the discussion topic that triggered this warning, if
   * applicable.
   *
   * References the discussion_board_topics table when the warning resulted
   * from a topic-level violation. Null when the warning was triggered by a
   * reply violation or account-level behavior rather than a specific topic.
   */
  content_topic_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Unique identifier of the discussion reply that triggered this warning, if
   * applicable.
   *
   * References the discussion_board_replies table when the warning resulted
   * from a reply-level violation. Null when the warning was triggered by a
   * topic violation or account-level behavior rather than a specific reply.
   */
  content_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Level of warning in the graduated escalation system.
   *
   * Indicates the severity stage in the three-tier warning system:
   * 'first_warning' (initial educational violation), 'second_warning' (repeat
   * violation with 7-day suspension), or 'final_warning' (third violation
   * with 30-day suspension and permanent ban risk on next violation). The
   * warning level determines consequences and expiration timelines.
   */
  warning_level: string;

  /**
   * Category of community guideline violation that prompted this warning.
   *
   * Classifies the violation type using standardized categories including
   * personal_attack, hate_speech, misinformation, spam, offensive_language,
   * off_topic, threats, doxxing, trolling, or other. This categorization
   * enables pattern analysis and helps moderators apply consistent
   * enforcement for similar violations.
   */
  violation_category: string;

  /**
   * Internal notes from the moderator explaining the warning decision and
   * providing context.
   *
   * Contains detailed explanation of why the warning was issued, including
   * reference to specific guideline violations, context about the member's
   * behavior, and any considerations that influenced the decision. These
   * notes support appeal review, moderator accountability, and consistent
   * enforcement. Minimum 20 characters required for meaningful
   * documentation.
   */
  moderator_notes: string;

  /**
   * Date when this warning expires and no longer counts toward escalation.
   *
   * First warnings expire after 90 days of good behavior, second warnings
   * after 180 days. Final warnings may not expire or have extended expiration
   * periods. Null for warnings that do not expire or for final warnings with
   * indefinite active status. Expired warnings are removed from active status
   * but retained in permanent history.
   */
  expiration_date?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Whether this warning is currently active and counts toward escalation
   * thresholds.
   *
   * True for warnings within their expiration window that contribute to
   * determining the appropriate warning level for future violations. False
   * for expired warnings or warnings from accounts in good standing that have
   * completed their warning period. Only active warnings affect escalation
   * decisions.
   */
  is_active: boolean;

  /**
   * Timestamp when this warning naturally expired without further violations.
   *
   * Set when the warning reaches its expiration_date and the member has
   * maintained good standing throughout the warning period. Null for warnings
   * that are still active or were superseded by account actions (suspension,
   * ban) before natural expiration. This timestamp documents successful
   * warning period completion.
   */
  expired_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the warning was issued to the member.
   *
   * Records the exact moment the warning was created in the system, which
   * serves as the baseline for calculating the expiration_date and tracking
   * violation timeline. Used for audit trail and understanding the temporal
   * progression of member disciplinary history.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the warning record was last modified.
   *
   * Tracks when warning details were updated, such as status changes (active
   * to expired), expiration date adjustments, or administrative corrections.
   * Used for audit trail and tracking warning lifecycle modifications.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardWarning {
  /**
   * Search and filter criteria for retrieving warning records from the
   * moderation system.
   *
   * This request type defines all available search parameters and filtering
   * options for querying the discussion_board_warnings table. It supports
   * comprehensive warning history retrieval with multi-dimensional filtering
   * by warning level, violation category, affected member, active status, and
   * date ranges.
   *
   * Administrators and moderators use this request structure to search
   * warning history, identify members with multiple violations, analyze
   * violation patterns, track warning effectiveness, and prepare for
   * escalation decisions. The flexible filtering and sorting options support
   * various moderation workflows including member behavior review, compliance
   * reporting, and moderation quality assurance.
   *
   * All filter parameters are optional, allowing both broad queries (all
   * warnings) and highly specific searches (active final warnings for a
   * specific member in a date range). The pagination parameters (page and
   * limit) enable efficient handling of large warning datasets accumulated
   * over time.
   */
  export type IRequest = {
    /**
     * Filter by warning escalation level in the three-tier warning system.
     *
     * This optional filter allows searching for warnings at specific
     * escalation stages: first_warning (initial violation with educational
     * focus), second_warning (repeat violation within warning period,
     * includes 7-day suspension), or final_warning (third violation or
     * severe single violation, includes 30-day suspension).
     *
     * Filtering by warning level helps administrators track user escalation
     * patterns, identify members approaching ban thresholds, and analyze
     * the distribution of violations across severity levels.
     */
    warning_level?:
      | "first_warning"
      | "second_warning"
      | "final_warning"
      | null
      | undefined;

    /**
     * Filter by category of guideline violation that triggered the warning.
     *
     * This optional filter restricts results to warnings for specific
     * violation types: personal_attack, hate_speech, misinformation, spam,
     * offensive_language, off_topic, threats, doxxing, trolling, or other.
     *
     * Filtering by violation category enables administrators to analyze
     * which types of violations are most common, identify emerging
     * moderation challenges, and ensure consistent enforcement across
     * different violation types.
     */
    violation_category?:
      | "personal_attack"
      | "hate_speech"
      | "misinformation"
      | "spam"
      | "offensive_language"
      | "off_topic"
      | "threats"
      | "doxxing"
      | "trolling"
      | "other"
      | null
      | undefined;

    /**
     * Filter by specific member who received warnings.
     *
     * This optional filter restricts results to warnings issued to a
     * particular member identified by their discussion_board_members table
     * ID. Used to review an individual member's complete warning history
     * and violation patterns.
     *
     * Filtering by member enables investigating specific user behavior,
     * supporting moderation escalation decisions, and providing complete
     * context during appeal reviews.
     */
    member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by warning active status.
     *
     * This optional boolean filter distinguishes between currently active
     * warnings (true) that count toward escalation and expired or resolved
     * warnings (false) that no longer affect the user's standing.
     *
     * Active warnings are those within their expiration window (90 days for
     * first warnings, 180 days for second warnings) that would escalate to
     * higher warning levels if new violations occur. Filtering by active
     * status helps identify members currently at risk of suspension or
     * ban.
     */
    is_active?: boolean | null | undefined;

    /**
     * Start of date range filter for warning issue dates.
     *
     * This optional filter specifies the earliest created_at timestamp for
     * warnings to include in results. Used with end_date to define a date
     * range query for temporal analysis of warning patterns.
     *
     * Date range filtering enables administrators to analyze warning trends
     * over time, generate periodic reports, and investigate moderation
     * patterns during specific timeframes.
     */
    start_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End of date range filter for warning issue dates.
     *
     * This optional filter specifies the latest created_at timestamp for
     * warnings to include in results. Used with start_date to define a date
     * range query for temporal analysis.
     *
     * Combining start_date and end_date enables precise temporal queries
     * for compliance reporting and trend analysis.
     */
    end_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort results by.
     *
     * Specifies which field to use for ordering results: created_at (when
     * warning was issued), expiration_date (when warning expires),
     * warning_level (escalation stage), or updated_at (last modification
     * time).
     *
     * Default sorting is typically by created_at descending (newest first)
     * to show recent warnings prominently.
     */
    sort_by?:
      | "created_at"
      | "expiration_date"
      | "warning_level"
      | "updated_at"
      | null
      | undefined;

    /**
     * Sort direction for results.
     *
     * Specifies ascending (asc) or descending (desc) order for the selected
     * sort_by field. Default is descending for most date-based sorts to
     * show most recent warnings first.
     *
     * Combining sort_by and sort_order provides flexible result ordering
     * for different review workflows.
     */
    sort_order?: "asc" | "desc" | null | undefined;

    /**
     * Page number for paginated results.
     *
     * Specifies which page of results to retrieve, starting from 1. Used
     * with limit to implement pagination for large warning datasets.
     *
     * Default page is 1 if not specified.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of warning records per page.
     *
     * Specifies how many warnings to return in a single page. Typical
     * values range from 10 to 100, with default often 25 for administrative
     * review interfaces.
     *
     * Limit controls result set size to balance comprehensive data access
     * with performance and usability.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };
}
