import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Complete member account information excluding sensitive fields.
 *
 * Email and password_hash are never included in responses.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardMember = {
  /** Unique member identifier. */
  id: string & tags.Format<"uuid">;

  /** Unique username (3-30 characters). */
  username: string;

  /** Preferred public display name. */
  display_name?: string | null | undefined;

  /** User biography (max 500 characters). */
  bio?: string | null | undefined;

  /** Profile picture URL. */
  avatar_url?: string | null | undefined;

  /** Optional geographic location. */
  location?: string | null | undefined;

  /** Optional personal website URL. */
  website?: string | null | undefined;

  /** Whether email has been verified. */
  email_verified: boolean;

  /**
   * Account status: active, pending_verification, suspended, banned,
   * deactivated.
   */
  account_status: string;

  /** Profile visibility setting: public, members_only, private. */
  profile_visibility: string;

  /** Activity history visibility: public, members_only, private. */
  activity_visibility: string;

  /** Account creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Most recent platform activity timestamp. */
  last_activity_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardMember {
  /**
   * Member registration information for creating new accounts.
   *
   * Requires unique username, verified email, and secure password meeting
   * complexity requirements.
   */
  export type ICreate = {
    /**
     * Unique username for account identification.
     *
     * 3-30 characters, alphanumeric with hyphens and underscores. Immutable
     * after account creation.
     */
    username: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[a-zA-Z0-9_-]+$">;

    /**
     * Email address for authentication and notifications.
     *
     * Must be unique and will require verification.
     */
    email: string & tags.Format<"email">;

    /**
     * Password in plain text for account security.
     *
     * Must contain uppercase, lowercase, number, and special character.
     * Backend hashes before storage.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;

    /**
     * Optional display name for public display.
     *
     * Can differ from username and be changed later.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<50>)
      | null
      | undefined;
  };

  /**
   * Authorization response for member authentication with JWT tokens.
   *
   * Returned after successful login, registration, or token refresh.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member.
     *
     * References discussion_board_members.id.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login credentials for member authentication.
   *
   * Contains email/username and password for credential validation.
   */
  export type ILogin = {
    /**
     * Email address or username for login.
     *
     * Accepts either the registered email or unique username.
     */
    email: string;

    /**
     * Password in plain text for authentication.
     *
     * Validated against stored password hash.
     */
    password: string;
  };

  /**
   * Refresh token request for renewing member access tokens.
   *
   * Contains the refresh token to exchange for new access token.
   */
  export type IRefresh = {
    /**
     * Current valid refresh token.
     *
     * Must be non-expired and non-revoked.
     */
    refresh_token: string;
  };

  /**
   * Public member profile excluding private fields.
   *
   * Email and password_hash never included.
   */
  export type IPublic = {
    /** Unique member identifier. */
    id: string & tags.Format<"uuid">;

    /** Member username. */
    username: string;

    /** Public display name. */
    display_name?: string | null | undefined;

    /** User biography. */
    bio?: string | null | undefined;

    /** Profile picture URL. */
    avatar_url?: string | null | undefined;

    /** Geographic location. */
    location?: string | null | undefined;

    /** Personal website URL. */
    website?: string | null | undefined;

    /** Email verification status flag. */
    email_verified: boolean;

    /** Account status. */
    account_status: string;

    /** Registration date. */
    created_at: string & tags.Format<"date-time">;

    /** Last activity timestamp. */
    last_activity_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Member summary for list displays.
   *
   * Excludes email, password_hash, and detailed fields.
   */
  export type ISummary = {
    /** Unique member identifier. */
    id: string & tags.Format<"uuid">;

    /** Member username. */
    username: string;

    /** Display name if set. */
    display_name?: string | null | undefined;

    /** Profile picture URL. */
    avatar_url?: string | null | undefined;

    /** Account status indicator. */
    account_status: string;

    /** Registration date. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Member search and filter parameters.
   *
   * All filters are optional, enabling both broad queries (all members) and
   * targeted searches with multiple criteria. Pagination parameters control
   * result set size and navigation.
   */
  export type IRequest = {
    /**
     * Search term for partial matching against username or display_name
     * fields.
     *
     * Supports full-text search with trigram indexing for fuzzy matching.
     * Minimum 1 character, maximum 200 characters.
     */
    search?:
      | (string & tags.MinLength<1> & tags.MaxLength<200>)
      | null
      | undefined;

    /**
     * Filter results by specific account status.
     *
     * Restricts results to members with the specified status. Options
     * include: 'active' (normal operation), 'pending_verification' (email
     * not verified), 'suspended' (temporary restriction), 'banned'
     * (permanent block), or 'deactivated' (user-initiated).
     */
    account_status?:
      | "active"
      | "pending_verification"
      | "suspended"
      | "banned"
      | "deactivated"
      | null
      | undefined;

    /**
     * Filter results by email verification status.
     *
     * When true, returns only members who have verified their email. When
     * false, returns only unverified members. Null returns all members
     * regardless of verification status.
     */
    email_verified?: boolean | null | undefined;

    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve, starting from 1. Used
     * with limit to navigate large result sets. Defaults to 1 if not
     * provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of records per page.
     *
     * Specifies how many member records to return in a single page. Typical
     * values: 10-100, default often 25. Maximum 100 to prevent excessive
     * data transfer and maintain performance.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };

  /**
   * Member profile update data.
   *
   * All fields optional to support partial updates. Excludes immutable fields
   * (username) and security-critical fields (email, password) which require
   * separate operations with verification workflows.
   */
  export type IUpdate = {
    /**
     * Updated preferred display name for public presentation.
     *
     * Replaces the current display_name value if provided. Can differ from
     * the immutable username and supports Unicode characters for
     * international users. Length constraints: 1-50 characters.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<50>)
      | null
      | undefined;

    /**
     * Updated user biography or about me section.
     *
     * Replaces the current bio value if provided. Plain text with
     * auto-detected links, maximum 500 characters. Subject to profanity
     * filtering per platform policies.
     */
    bio?: (string & tags.MaxLength<500>) | null | undefined;

    /**
     * Updated URL to user's profile picture.
     *
     * Replaces the current avatar_url if provided. Must be valid HTTP/HTTPS
     * URL. Null to remove current avatar and revert to default.
     */
    avatar_url?: string | null | undefined;

    /**
     * Updated optional geographic location displayed on profile.
     *
     * Replaces the current location value if provided. Maximum 100
     * characters, typically city/country format.
     */
    location?: (string & tags.MaxLength<100>) | null | undefined;

    /**
     * Updated personal website or blog URL.
     *
     * Replaces the current website value if provided. Must be valid
     * HTTP/HTTPS URL, maximum 200 characters.
     */
    website?: string | null | undefined;

    /**
     * Updated profile visibility setting controlling who can view the
     * profile.
     *
     * Options: 'public' (visible to all including guests), 'members_only'
     * (authenticated users only), or 'private' (hidden from search and
     * direct access).
     */
    profile_visibility?:
      | "public"
      | "members_only"
      | "private"
      | null
      | undefined;

    /**
     * Updated activity history visibility setting.
     *
     * Controls visibility of the member's topics and replies on their
     * profile. Independent from profile_visibility but constrained by
     * privacy hierarchy (cannot be public if profile is private).
     */
    activity_visibility?:
      | "public"
      | "members_only"
      | "private"
      | null
      | undefined;

    /**
     * Updated preferred timezone for timestamp display.
     *
     * IANA timezone identifier (e.g., 'America/New_York', 'Europe/London')
     * used for displaying timestamps in the user's local time.
     */
    timezone?: string | null | undefined;

    /**
     * Updated preferred interface language.
     *
     * ISO 639-1 language code (e.g., 'en', 'es', 'de') controlling
     * interface element translations.
     */
    language?: (string & tags.Pattern<"^[a-z]{2}$">) | null | undefined;
  };

  /**
   * Comprehensive notification preference configuration controlling how
   * members receive platform notifications.
   *
   * This schema represents the complete set of notification settings that
   * control notification delivery across all supported event types and
   * channels. Each notification event type (replies to topics, mentions, vote
   * milestones, moderation actions, etc.) can be independently configured for
   * in-app notifications and email notifications.
   *
   * Additional preferences control notification batching through digest modes
   * (realtime, hourly, daily, weekly), quiet hours to suppress email
   * notifications during specified time windows, and timezone configuration
   * for accurate scheduling.
   *
   * These preferences are stored in the
   * discussion_board_notification_preferences table with a one-to-one
   * relationship to each member account.
   */
  export type INotificationPreferences = {
    /**
     * Unique identifier of the notification preferences record.
     *
     * This primary key uniquely identifies the preference configuration
     * record in the discussion_board_notification_preferences table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the member who owns these notification
     * preferences.
     *
     * References the discussion_board_members.id field establishing the
     * one-to-one relationship between members and their notification
     * configuration.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Enable in-app notifications when someone replies to the user's
     * discussion topic.
     *
     * When enabled, the user receives real-time in-app notifications
     * displayed in the notification center when other members post replies
     * to discussions they created.
     *
     * This setting is enabled by default for new users as topic replies are
     * highly relevant engagement events.
     */
    reply_to_topic_in_app: boolean;

    /**
     * Enable email notifications when someone replies to the user's
     * discussion topic.
     *
     * When enabled, the user receives email notifications sent to their
     * registered email address when other members post replies to
     * discussions they created.
     *
     * This setting is enabled by default for new users, subject to digest
     * frequency and quiet hours configuration.
     */
    reply_to_topic_email: boolean;

    /**
     * Enable in-app notifications when someone replies to the user's
     * comment in a discussion thread.
     *
     * When enabled, the user receives real-time in-app notifications when
     * other members post nested replies responding to their comments within
     * discussion threads.
     *
     * This setting is enabled by default to support threaded conversation
     * engagement.
     */
    reply_to_comment_in_app: boolean;

    /**
     * Enable email notifications when someone replies to the user's comment
     * in a discussion thread.
     *
     * When enabled, the user receives email notifications when other
     * members post nested replies to their comments, subject to batching
     * and quiet hours rules.
     *
     * This setting is enabled by default for active discussion
     * participation.
     */
    reply_to_comment_email: boolean;

    /**
     * Enable in-app notifications when the user is mentioned using
     * @username syntax.
     *
     * When enabled, the user receives immediate in-app notifications when
     * other members explicitly mention them in discussion topics or
     * replies.
     *
     * This setting is enabled by default as mentions represent direct
     * engagement requiring user attention.
     */
    mention_in_app: boolean;

    /**
     * Enable email notifications when the user is mentioned using @username
     * syntax.
     *
     * When enabled, the user receives email notifications when mentioned in
     * discussions, ensuring they are alerted even when not actively
     * browsing the platform.
     *
     * This setting is enabled by default for high-priority engagement
     * events.
     */
    mention_email: boolean;

    /**
     * Enable in-app notifications when the user's content reaches vote
     * milestones.
     *
     * When enabled, the user receives in-app notifications when their
     * topics or replies reach significant vote thresholds (10, 25, 50, 100,
     * 250, 500 votes) indicating community recognition.
     *
     * This setting is enabled by default (in-app only) to provide positive
     * feedback without excessive emails.
     */
    vote_milestone_in_app: boolean;

    /**
     * Enable email notifications when the user's content reaches vote
     * milestones.
     *
     * When enabled, the user receives email notifications for vote
     * achievements, typically disabled by default to prevent email volume
     * from engagement metrics.
     *
     * Users can enable this to receive milestone celebration emails.
     */
    vote_milestone_email: boolean;

    /**
     * Enable in-app notifications for moderation actions affecting the
     * user's account or content.
     *
     * When enabled, the user receives in-app notifications when moderators
     * take actions including content removal, warnings, suspensions, or
     * bans.
     *
     * This setting is enabled by default and should not be disabled as
     * users must be informed of moderation actions.
     */
    moderation_action_in_app: boolean;

    /**
     * Enable email notifications for moderation actions affecting the
     * user's account or content.
     *
     * When enabled, the user receives email notifications for all
     * moderation actions, ensuring they are informed even when not browsing
     * the platform.
     *
     * This setting is enabled by default and is critical for transparency
     * and due process in moderation.
     */
    moderation_action_email: boolean;

    /**
     * Enable in-app notifications for updates to discussion topics the user
     * is watching.
     *
     * When enabled, the user receives in-app notifications when new replies
     * or significant activity occurs on topics they have explicitly chosen
     * to watch.
     *
     * This setting is disabled by default until users explicitly watch
     * topics.
     */
    watched_topic_in_app: boolean;

    /**
     * Enable email notifications for updates to discussion topics the user
     * is watching.
     *
     * When enabled, the user receives email notifications for activity on
     * watched topics, subject to batching rules to prevent excessive emails
     * for highly active discussions.
     *
     * This setting is disabled by default and enabled when users first
     * watch a topic.
     */
    watched_topic_email: boolean;

    /**
     * Enable in-app notifications for system-wide announcements from
     * administrators.
     *
     * When enabled, the user receives in-app notifications for important
     * platform announcements including policy changes, new features, and
     * system maintenance.
     *
     * This setting is enabled by default to ensure users receive critical
     * platform information.
     */
    system_announcement_in_app: boolean;

    /**
     * Enable email notifications for system-wide announcements from
     * administrators.
     *
     * When enabled, the user receives email notifications for platform
     * announcements, ensuring awareness of important changes even when not
     * actively using the platform.
     *
     * This setting is enabled by default for critical system
     * communications.
     */
    system_announcement_email: boolean;

    /**
     * Email notification batching frequency controlling how notifications
     * are grouped and delivered.
     *
     * Valid values:
     *
     * - Realtime: Send each notification immediately as events occur
     * - Hourly: Batch notifications into hourly digest emails sent on the
     *   hour
     * - Daily: Combine all notifications into a daily digest sent at user's
     *   preferred time
     * - Weekly: Aggregate notifications into a weekly digest sent on user's
     *   preferred day
     *
     * Digest mode helps prevent notification fatigue by consolidating
     * multiple alerts into periodic summaries, while realtime mode ensures
     * immediate awareness of important events.
     */
    digest_frequency: "realtime" | "hourly" | "daily" | "weekly";

    /**
     * Whether quiet hours are active to suppress email notifications during
     * specified time windows.
     *
     * When enabled, email notifications triggered during the quiet hours
     * window are delayed and delivered as a batch when quiet hours end.
     * This respects user sleep schedules and focused work periods.
     *
     * In-app notifications are not affected by quiet hours as users can
     * disable them separately if needed.
     */
    quiet_hours_enabled: boolean;

    /**
     * Quiet hours start time in HH:mm format using 24-hour notation.
     *
     * Example values: "22:00" for 10 PM, "01:30" for 1:30 AM. This field is
     * required when quiet_hours_enabled is true and null when quiet hours
     * are disabled.
     *
     * The start time is interpreted in the user's configured timezone for
     * accurate local time calculation.
     */
    quiet_hours_start?:
      | (string & tags.Pattern<"^([01]\\d|2[0-3]):[0-5]\\d$">)
      | null
      | undefined;

    /**
     * Quiet hours end time in HH:mm format using 24-hour notation.
     *
     * Example values: "07:00" for 7 AM, "09:30" for 9:30 AM. This field is
     * required when quiet_hours_enabled is true and null when quiet hours
     * are disabled.
     *
     * Email notifications queued during quiet hours are delivered when this
     * end time is reached.
     */
    quiet_hours_end?:
      | (string & tags.Pattern<"^([01]\\d|2[0-3]):[0-5]\\d$">)
      | null
      | undefined;

    /**
     * User's timezone for digest scheduling and quiet hours calculation.
     *
     * Must be a valid IANA timezone identifier (e.g., 'America/New_York',
     * 'Europe/London', 'Asia/Tokyo'). This ensures digest emails are sent
     * at appropriate local times and quiet hours are enforced according to
     * the user's actual location.
     *
     * The timezone affects when daily/weekly digests are delivered and when
     * quiet hours windows are calculated.
     */
    timezone: string;

    /**
     * Timestamp when the notification preferences record was initially
     * created.
     *
     * Typically set when the user first registers their account,
     * establishing default notification configuration that the user can
     * subsequently customize.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the notification preferences were last modified by the
     * user.
     *
     * Updated whenever the user changes any notification setting, enabling
     * tracking of preference evolution and audit trail for notification
     * configuration changes.
     */
    updated_at: string & tags.Format<"date-time">;
  };
  export namespace INotificationPreferences {
    /**
     * Update request for notification preference configuration allowing
     * users to modify how they receive platform notifications.
     *
     * This type contains all fields from the notification preferences
     * configuration as optional properties, enabling partial updates where
     * users can modify specific notification settings without affecting
     * others. All boolean flags for event-specific notification channels
     * can be toggled, digest frequency can be changed, quiet hours can be
     * enabled or disabled with time window configuration, and timezone can
     * be adjusted.
     *
     * The update operation validates all provided values and applies
     * changes atomically, updating the
     * discussion_board_notification_preferences table record for the user.
     * Omitted fields retain their current values, following standard
     * partial update semantics.
     */
    export type IUpdate = {
      /**
       * Enable or disable in-app notifications when someone replies to
       * the user's discussion topic.
       *
       * This setting controls whether the user receives real-time
       * notifications in the notification center when other members post
       * replies to discussion topics they created. In-app notifications
       * appear as badge counts and dropdown items in the platform
       * interface.
       *
       * When enabled, users see immediate feedback about engagement with
       * their topics, encouraging continued participation in discussions.
       * When disabled, users will not be alerted through the in-app
       * notification center about replies to their topics.
       */
      reply_to_topic_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications when someone replies to the
       * user's discussion topic.
       *
       * This setting controls whether the user receives email
       * notifications sent to their registered email address when other
       * members post replies to discussion topics they created. Email
       * notifications provide out-of-platform alerts that drive return
       * visits.
       *
       * When enabled, users receive email alerts about topic engagement
       * even when not actively using the platform. When disabled, users
       * will not receive emails about replies to their topics, though
       * in-app notifications may still be active if configured
       * separately.
       */
      reply_to_topic_email?: boolean | undefined;

      /**
       * Enable or disable in-app notifications when someone replies to
       * the user's comment or reply.
       *
       * This setting controls whether the user receives real-time
       * notifications in the notification center when other members post
       * direct replies to their comments within discussion threads. This
       * supports threaded conversation engagement.
       *
       * When enabled, users stay informed about responses to their
       * specific contributions in threaded discussions. When disabled,
       * users will not be alerted through the in-app notification center
       * about replies to their comments.
       */
      reply_to_comment_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications when someone replies to the
       * user's comment or reply.
       *
       * This setting controls whether the user receives email
       * notifications when other members post direct replies to their
       * comments within discussion threads. Email alerts keep users
       * engaged with ongoing conversations.
       *
       * When enabled, users receive email alerts about direct responses
       * to their comments. When disabled, users will not receive emails
       * about comment replies, though in-app notifications may still be
       * active if configured separately.
       */
      reply_to_comment_email?: boolean | undefined;

      /**
       * Enable or disable in-app notifications when the user is mentioned
       * with @username syntax.
       *
       * This setting controls whether the user receives real-time
       * notifications in the notification center when other members
       * mention them using @username in discussion topics or replies.
       * Mentions are direct engagement mechanisms that draw users into
       * relevant conversations.
       *
       * When enabled, users are immediately alerted when they are
       * referenced in discussions. When disabled, users will not receive
       * in-app notifications for @mentions.
       */
      mention_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications when the user is mentioned
       * with @username syntax.
       *
       * This setting controls whether the user receives email
       * notifications when other members mention them using @username in
       * discussion topics or replies. Email mention alerts ensure users
       * don't miss being pulled into relevant discussions.
       *
       * When enabled, users receive email alerts when mentioned even when
       * not actively using the platform. When disabled, users will not
       * receive emails for @mentions.
       */
      mention_email?: boolean | undefined;

      /**
       * Enable or disable in-app notifications when the user's content
       * reaches vote milestones.
       *
       * This setting controls whether the user receives notifications
       * when their discussion topics or replies reach specific vote
       * thresholds (10, 25, 50, 100, 250, 500 upvotes). Vote milestone
       * notifications provide positive reinforcement for quality
       * contributions.
       *
       * When enabled, users are celebrated for creating high-quality
       * content that resonates with the community. When disabled, users
       * will not receive milestone notifications.
       */
      vote_milestone_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications when the user's content
       * reaches vote milestones.
       *
       * This setting controls whether the user receives email
       * notifications when their discussion topics or replies reach
       * specific vote thresholds. Email milestone notifications share
       * achievement moments with users.
       *
       * When enabled, users receive email celebration of their content
       * reaching vote milestones. When disabled, users will not receive
       * emails for vote milestones.
       */
      vote_milestone_email?: boolean | undefined;

      /**
       * Enable or disable in-app notifications for moderation actions
       * affecting the user's account or content.
       *
       * This setting controls whether the user receives notifications
       * when moderators take actions on their content (warnings, content
       * removal, suspensions). Moderation notifications are critical for
       * transparency and user rights.
       *
       * When enabled, users are immediately informed of moderation
       * actions through the in-app notification center. This setting
       * should typically remain enabled for fairness and transparency.
       */
      moderation_action_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications for moderation actions
       * affecting the user's account or content.
       *
       * This setting controls whether the user receives email
       * notifications when moderators take actions on their content
       * (warnings, content removal, suspensions). Email notifications
       * ensure users are informed of critical moderation events even when
       * not actively using the platform.
       *
       * When enabled, users receive email alerts for moderation actions
       * with complete context and appeal information. This setting should
       * typically remain enabled for fairness.
       */
      moderation_action_email?: boolean | undefined;

      /**
       * Enable or disable in-app notifications for updates to discussion
       * topics the user is watching.
       *
       * This setting controls whether the user receives notifications
       * when new activity occurs on topics they have explicitly chosen to
       * watch. Watched topic notifications keep users engaged with
       * discussions they care about.
       *
       * When enabled, users receive in-app alerts about new replies,
       * votes, or other activity on watched topics. When disabled, users
       * must manually check watched topics for updates.
       */
      watched_topic_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications for updates to discussion
       * topics the user is watching.
       *
       * This setting controls whether the user receives email
       * notifications when new activity occurs on topics they are
       * watching. Email alerts drive return visits for followed
       * discussions.
       *
       * When enabled, users receive email updates about activity on
       * watched topics. When disabled, users will not receive emails for
       * watched topic updates.
       */
      watched_topic_email?: boolean | undefined;

      /**
       * Enable or disable in-app notifications for system-wide
       * announcements from administrators.
       *
       * This setting controls whether the user receives notifications
       * when administrators publish important platform announcements
       * about policy changes, feature updates, or critical system
       * information.
       *
       * When enabled, users stay informed about platform changes and
       * important announcements. When disabled, users may miss important
       * system communications.
       */
      system_announcement_in_app?: boolean | undefined;

      /**
       * Enable or disable email notifications for system-wide
       * announcements from administrators.
       *
       * This setting controls whether the user receives email
       * notifications for important platform announcements. Email ensures
       * critical system information reaches users even when they are not
       * actively using the platform.
       *
       * When enabled, users receive email alerts for system
       * announcements. When disabled, users will not receive announcement
       * emails.
       */
      system_announcement_email?: boolean | undefined;

      /**
       * Email notification batching frequency controlling how
       * notifications are combined and delivered.
       *
       * This setting determines whether email notifications are sent
       * immediately (realtime) or batched into periodic digests (hourly,
       * daily, weekly). Digest mode reduces email volume by combining
       * multiple notifications into summary emails.
       *
       * Valid values:
       *
       * - 'realtime': Send each notification immediately as events occur
       * - 'hourly': Combine all notifications from the past hour into a
       *   single digest email
       * - 'daily': Combine all notifications from the past 24 hours into a
       *   daily summary
       * - 'weekly': Combine all notifications from the past week into a
       *   weekly digest
       *
       * Digest emails include summary counts, grouped notifications by
       * type, and links to all mentioned content.
       */
      digest_frequency?: "realtime" | "hourly" | "daily" | "weekly" | undefined;

      /**
       * Whether quiet hours are active for suppressing email
       * notifications during specified time windows.
       *
       * When enabled, email notifications triggered during the quiet
       * hours window are delayed and delivered when quiet hours end. This
       * respects user preferences for uninterrupted time during sleep
       * hours or focused work periods.
       *
       * In-app notifications are not affected by quiet hours and continue
       * to be delivered in real-time.
       */
      quiet_hours_enabled?: boolean | undefined;

      /**
       * Quiet hours start time in HH:mm format (24-hour clock).
       *
       * Defines when the quiet hours window begins, during which email
       * notifications are suppressed and queued for delivery when quiet
       * hours end. This field is required when quiet_hours_enabled is
       * true and should be null when quiet hours are disabled.
       *
       * Example values: '22:00' (10:00 PM), '23:30' (11:30 PM). The time
       * is interpreted in the user's configured timezone.
       */
      quiet_hours_start?: string | null | undefined;

      /**
       * Quiet hours end time in HH:mm format (24-hour clock).
       *
       * Defines when the quiet hours window ends and delayed
       * notifications are delivered. This field is required when
       * quiet_hours_enabled is true and should be null when quiet hours
       * are disabled.
       *
       * Example values: '07:00' (7:00 AM), '08:30' (8:30 AM). The time is
       * interpreted in the user's configured timezone.
       */
      quiet_hours_end?: string | null | undefined;

      /**
       * User's timezone for digest scheduling and quiet hours
       * calculation.
       *
       * IANA timezone identifier used to calculate when to deliver digest
       * emails and enforce quiet hours windows in the user's local time.
       * This ensures notification timing respects the user's geographic
       * location and daily schedule.
       *
       * Examples: 'America/New_York', 'Europe/London', 'Asia/Tokyo',
       * 'UTC'. The timezone must be a valid IANA timezone database
       * identifier.
       */
      timezone?: string | undefined;
    };
  }

  /**
   * Search and filter criteria for retrieving member login history.
   *
   * Defines the request parameters for searching, filtering, sorting, and
   * paginating login history records. This request type supports the account
   * security monitoring feature where users and administrators can review
   * authentication attempts with filtering by success status, failure
   * reasons, device information, geographic location, and time ranges.
   *
   * All filter parameters are optional, allowing flexible queries from
   * viewing all login history to highly targeted searches for specific
   * security events. The combination of filters uses AND logic, meaning login
   * attempts must match all specified criteria to be included in results.
   */
  export type ILoginHistoryRequest = {
    /**
     * Filter by authentication success or failure status.
     *
     * When true, returns only successful login attempts. When false,
     * returns only failed authentication attempts. When null, returns all
     * login attempts regardless of outcome. Useful for security analysis
     * focusing on successful logins or investigating failed attempt
     * patterns.
     */
    is_successful?: boolean | null | undefined;

    /**
     * Filter by specific failure reason.
     *
     * Allows filtering for particular types of authentication failures such
     * as 'incorrect_password', 'account_locked', 'account_suspended',
     * 'email_not_verified', or 'account_not_found'. Helps identify specific
     * security issues or user experience problems in the authentication
     * flow.
     */
    failure_reason?: string | null | undefined;

    /**
     * Filter by IP address or IP pattern.
     *
     * Allows filtering for login attempts from specific IP addresses or IP
     * ranges. Supports partial matching for subnet-level analysis. Used for
     * security investigations and identifying coordinated attack attempts
     * from the same network.
     */
    ip_address?: string | null | undefined;

    /**
     * Filter by device type.
     *
     * Allows filtering for login attempts from specific device categories
     * such as Desktop, Mobile, or Tablet. Helps users review access
     * patterns by device and identify unfamiliar device types.
     */
    device_type?: string | null | undefined;

    /**
     * Filter by geographic location.
     *
     * Allows filtering for login attempts from specific cities or
     * countries. Supports partial matching to find attempts from a region.
     * Useful for verifying expected login locations and detecting access
     * from unusual geographic areas.
     */
    location?: string | null | undefined;

    /**
     * Filter login attempts after this timestamp.
     *
     * Returns only login attempts that occurred on or after the specified
     * date and time. Useful for reviewing recent authentication activity or
     * analyzing login patterns within specific time periods.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter login attempts before this timestamp.
     *
     * Returns only login attempts that occurred on or before the specified
     * date and time. Combined with created_after, enables precise date
     * range filtering for security investigations.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort results by.
     *
     * Currently supports 'created_at' to sort by login attempt timestamp.
     * Default is 'created_at' to display login history chronologically.
     */
    sort_by?: "created_at" | null | undefined;

    /**
     * Sort direction for results.
     *
     * Specifies ascending ('asc') or descending ('desc') order. Default is
     * 'desc' to show most recent login attempts first, which is the typical
     * use case for security monitoring.
     */
    sort_order?: "asc" | "desc" | null | undefined;

    /**
     * Page number to retrieve.
     *
     * Specifies which page of results to return. Page numbering starts at
     * 1. When null, defaults to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of records per page.
     *
     * Specifies how many login history records to return in a single page.
     * Maximum 100 records per page. Default is 50 records per page for
     * login history, providing sufficient detail without overwhelming the
     * display.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };

  /**
   * Essential profile information about a blocked member for display in
   * blocked users lists.
   *
   * This lightweight schema contains just enough information to identify and
   * recognize blocked users without requiring the full member profile schema.
   * It includes basic identity fields that help users remember who they
   * blocked and why.
   *
   * This information is derived from the discussion_board_members table but
   * filtered to include only non-sensitive, publicly visible fields suitable
   * for display in blocking relationship contexts.
   */
  export type IBlockedUserInfo = {
    /**
     * Unique identifier of the blocked member account.
     *
     * References the discussion_board_members.id of the user who has been
     * blocked.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique username of the blocked member.
     *
     * Displayed in the blocked users list to identify who has been blocked.
     * Must be between 3-30 characters, alphanumeric with hyphens and
     * underscores.
     */
    username: string;

    /**
     * Display name of the blocked member if they have set one.
     *
     * The user's preferred public name which may differ from their
     * username. Helps with recognition when reviewing the blocked users
     * list.
     */
    display_name: string | null;

    /**
     * URL to the blocked member's profile picture.
     *
     * Displayed as visual identification in the blocked users list. May be
     * a custom uploaded image or default avatar generated from username.
     */
    avatar_url: (string & tags.Format<"uri">) | null;
  };

  /**
   * Essential author information for attribution in discussion content.
   *
   * This lightweight schema provides the minimum author details needed for
   * displaying attribution on topics and replies. It includes identity
   * information and visual elements without the overhead of complete profile
   * data, reputation scores, or activity statistics.
   *
   * This schema is optimized for inclusion in topic and reply summaries where
   * author attribution is necessary but full profile details are excessive.
   */
  export type IAuthorInfo = {
    /**
     * Unique identifier of the member account.
     *
     * References discussion_board_members.id in the database.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique username chosen during registration.
     *
     * Immutable after account creation. Between 3-30 characters,
     * alphanumeric with hyphens and underscores. Used for @mentions and
     * profile URLs.
     */
    username: string;

    /**
     * User's preferred public display name.
     *
     * Can differ from username and can be changed anytime. Between 1-50
     * characters, supports Unicode. Displayed alongside contributions.
     */
    display_name: string | null;

    /**
     * URL to user's profile picture.
     *
     * Either uploaded custom image or default avatar generated from
     * username. Displayed next to user's posts and replies.
     */
    avatar_url: (string & tags.Format<"uri">) | null;
  };
}
