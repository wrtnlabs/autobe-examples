import { tags } from "typia";

/**
 * Comprehensive audit trail record for moderation actions on the discussion
 * board platform.
 *
 * Each moderation audit log entry captures a complete record of content
 * governance activities performed by moderators and administrators. These
 * immutable audit records provide transparency, accountability, and support for
 * appeals processing by documenting who took action, what action was taken, why
 * it was necessary, and when it occurred.
 *
 * Moderation audit logs are essential for maintaining platform integrity,
 * enabling moderator performance reviews, investigating user appeals, and
 * generating transparency reports. The audit trail ensures all content
 * moderation decisions can be reviewed and validated against community
 * guidelines.
 *
 * This entity corresponds to the discussion_board_moderation_audit_logs table
 * in the Prisma schema, which implements an append-only audit log pattern for
 * permanent accountability.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardModerationAuditLog = {
  /**
   * Primary unique identifier of the moderation audit log entry.
   *
   * This UUID serves as the immutable primary key for each audit record in
   * the discussion_board_moderation_audit_logs table, ensuring permanent
   * traceability of all moderation actions taken on the platform.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the moderator who performed the moderation action.
   *
   * This field references the discussion_board_moderators table and tracks
   * which moderator took the logged action. Null for automated moderation
   * actions performed by system algorithms rather than human moderators.
   * Essential for moderator accountability and performance tracking.
   */
  moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Identifier of the member user who was the target of the moderation
   * action.
   *
   * This field references the discussion_board_members table and indicates
   * which user's content or account was affected by the moderation decision.
   * Null for content-only actions that don't directly target a specific user
   * account.
   */
  target_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of moderation action that was performed.
   *
   * Describes the specific moderation intervention taken, such as
   * content_hidden (making content invisible to regular users),
   * content_removed (deleting content), warning_issued (formal warning to
   * user), user_suspended (temporary account restriction), user_banned
   * (permanent account block), appeal_approved (reversing prior decision), or
   * appeal_denied (upholding original decision). Critical for categorizing
   * moderation activities.
   */
  action_type: string;

  /**
   * Universal identifier of the content affected by the moderation action.
   *
   * This UUID references either a discussion topic or reply that was subject
   * to moderation. Used in combination with target_content_type to identify
   * the specific content entity. Null for user-level actions like suspensions
   * or bans that don't target specific content.
   */
  target_content_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of content that was affected by the moderation action.
   *
   * Indicates whether the target_content_id references a 'topic' from
   * discussion_board_topics or a 'reply' from discussion_board_replies. Null
   * for user-level moderation actions (suspensions, bans) that don't target
   * specific content items.
   */
  target_content_type?: string | null | undefined;

  /**
   * Detailed explanation provided by the moderator for taking this action.
   *
   * Required for all moderation actions to ensure transparency and
   * accountability. Explains why the content violated guidelines or why the
   * user action warranted moderation intervention. This explanation is
   * critical for appeal processes and moderation quality reviews. Typically
   * includes reference to specific community guideline violations.
   */
  reason: string;

  /**
   * Additional context and details about the moderation action in JSON
   * format.
   *
   * Contains structured supplementary information including original content
   * snapshots before modification, violation category classification,
   * previous warning history, action duration for temporary restrictions, and
   * other contextual data needed for comprehensive audit review and appeals
   * investigation.
   */
  metadata?: string | null | undefined;

  /**
   * Timestamp when the moderation action was performed and logged.
   *
   * Records the precise moment the moderation intervention occurred.
   * Immutable for audit integrity - moderation audit logs have no updated_at
   * field as they represent point-in-time events. Used for temporal analysis
   * of moderation patterns and incident investigation timelines.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardModerationAuditLog {
  /**
   * Search and filtering criteria for retrieving moderation audit log
   * entries.
   *
   * This request structure supports complex queries for analyzing moderation
   * actions, investigating appeals, reviewing moderator performance, and
   * generating compliance reports. Administrators use these filters to locate
   * specific moderation events, identify patterns in enforcement, and ensure
   * consistent application of community guidelines.
   *
   * The flexible filtering options enable temporal analysis (date ranges),
   * actor analysis (specific moderators), target analysis (specific users or
   * content types), and categorical analysis (action types). Combined with
   * pagination and sorting, this supports efficient audit workflows for
   * large-scale moderation oversight.
   */
  export type IRequest = {
    /**
     * Filter by the moderator who performed the actions.
     *
     * Provide a moderator UUID to retrieve only audit logs for actions
     * taken by that specific moderator. Useful for reviewing individual
     * moderator performance and decision patterns. Leave null to include
     * actions from all moderators.
     */
    moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by the member user who was targeted by moderation actions.
     *
     * Provide a member UUID to retrieve all moderation actions affecting
     * that specific user. Essential for investigating user appeals and
     * reviewing complete moderation history for individual members. Leave
     * null to include actions targeting all users.
     */
    target_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by specific type of moderation action.
     *
     * Provide an action type string (content_hidden, content_removed,
     * warning_issued, user_suspended, user_banned, appeal_approved,
     * appeal_denied) to retrieve only logs of that action category. Leave
     * null to include all action types.
     */
    action_type?: string | null | undefined;

    /**
     * Filter by type of content that was moderated.
     *
     * Provide 'topic' to see only moderation actions on discussion topics,
     * or 'reply' for actions on discussion replies. Leave null to include
     * both content types. Useful for analyzing moderation patterns specific
     * to different content types.
     */
    target_content_type?: string | null | undefined;

    /**
     * Filter for moderation actions occurring on or after this date.
     *
     * Provide a starting timestamp to retrieve only audit logs from this
     * date forward. Used for time-bound audit investigations and periodic
     * moderation reports. Leave null for no start date restriction.
     */
    date_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter for moderation actions occurring on or before this date.
     *
     * Provide an ending timestamp to retrieve only audit logs up to this
     * date. Used with date_from for specific time period analysis. Leave
     * null for no end date restriction.
     */
    date_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Page number for pagination of search results.
     *
     * Specifies which page of results to retrieve when the total result set
     * exceeds the page size limit. Page numbering starts at 1. Leave null
     * to default to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of audit log entries to return per page.
     *
     * Controls the page size for pagination, with a maximum of 100 records
     * per page for performance. Leave null to use the default page size of
     * 20 entries.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Field to sort results by.
     *
     * Supported values include 'created_at' for chronological sorting,
     * 'action_type' for grouping by action category, and 'moderator_id' for
     * organizing by moderator. Leave null to default to created_at
     * descending (newest first).
     */
    sort_by?: string | null | undefined;

    /**
     * Sort direction for results.
     *
     * Specify 'asc' for ascending order or 'desc' for descending order.
     * Leave null to default to descending (newest first for timestamps, Z-A
     * for text).
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };
}
