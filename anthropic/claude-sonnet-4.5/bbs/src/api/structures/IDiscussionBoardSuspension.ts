import { tags } from "typia";

/**
 * Complete suspension record with all details about the temporary account
 * restriction.
 *
 * This schema represents the full suspension entity from the
 * discussion_board_suspensions table, providing comprehensive information about
 * temporary posting and voting restrictions applied to members who violated
 * community guidelines.
 *
 * Suspensions are part of the graduated enforcement system, serving as an
 * escalation from warnings before permanent bans. The suspension includes the
 * issuing authority (moderator or administrator), detailed reasoning, duration
 * configuration, timing information, active status tracking, and optional early
 * lift details if the suspension was terminated before its scheduled end date.
 *
 * The suspension record maintains relationships to the suspended member, the
 * originating moderation action, and the moderator or administrator who issued
 * it, providing complete accountability and audit trail for the enforcement
 * decision.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSuspension = {
  /**
   * Unique identifier for the suspension record.
   *
   * This UUID serves as the primary key for the suspension in the
   * discussion_board_suspensions table and is used to reference this specific
   * suspension in API operations, audit logs, and appeal submissions.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the member who is suspended.
   *
   * References discussion_board_members.id to establish which user account is
   * subject to this temporary restriction. The suspended member loses posting
   * and voting privileges for the duration of the suspension.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the moderation action that initiated this
   * suspension.
   *
   * References discussion_board_moderation_actions.id to maintain the
   * complete audit trail from violation report through moderation decision to
   * enforcement action. This relationship enables tracking the complete
   * context of why the suspension was issued.
   */
  moderation_action_id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the moderator who issued the suspension.
   *
   * References discussion_board_moderators.id when a moderator issued the
   * suspension. Null if an administrator issued the suspension instead. This
   * field supports moderator performance tracking and accountability.
   */
  moderator_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Unique identifier of the administrator who issued the suspension.
   *
   * References discussion_board_administrators.id when an administrator
   * issued the suspension. Null if a moderator issued the suspension instead.
   * Administrator suspensions may have longer durations than moderator
   * suspensions.
   */
  administrator_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Detailed explanation of why the member was suspended.
   *
   * This comprehensive justification explains the specific guideline
   * violations that led to the suspension. The reason is shown to the
   * suspended user in their notification and must provide clear context for
   * the enforcement action.
   *
   * Transparency in suspension reasoning supports the platform's commitment
   * to fair moderation and enables users to understand what behavior led to
   * the restriction.
   */
  suspension_reason: string;

  /**
   * Length of the suspension in days.
   *
   * Common durations include 1 day for minor violations with second warnings,
   * 7 days for standard second warning suspensions, 14 days for elevated
   * violations, and 30 days for final warning suspensions. Administrators can
   * set custom durations between 1 and 365 days.
   *
   * The duration determines the period during which the member cannot create
   * topics, post replies, or vote on content, though they retain read access
   * to discussions.
   */
  duration_days: number & tags.Type<"int32">;

  /**
   * Timestamp when the suspension begins and restrictions take effect.
   *
   * This is typically set to the current time when the suspension is created,
   * immediately restricting the member's posting and voting privileges. The
   * start_date marks the beginning of the suspension period calculated for
   * the end_date.
   */
  start_date: string & tags.Format<"date-time">;

  /**
   * Timestamp when the suspension expires and full privileges are
   * automatically restored.
   *
   * Calculated by adding duration_days to start_date, this field determines
   * when the system automatically restores the member's posting and voting
   * capabilities. The member receives notification as the end_date approaches
   * and upon privilege restoration.
   */
  end_date: string & tags.Format<"date-time">;

  /**
   * Whether this suspension is currently in effect.
   *
   * True indicates the suspension is active and the member's privileges are
   * currently restricted. False indicates the suspension has expired
   * naturally, was lifted early, or is otherwise no longer enforcing
   * restrictions.
   *
   * The system automatically sets is_active to false when the current time
   * passes the end_date, triggering automatic privilege restoration.
   */
  is_active: boolean;

  /**
   * Whether the suspension was manually terminated before the scheduled end
   * date.
   *
   * True indicates a moderator or administrator manually lifted the
   * suspension, typically following a successful appeal or administrative
   * review. False indicates the suspension followed its natural course to the
   * scheduled end_date.
   *
   * Early-lifted suspensions include lifted_at timestamp and lifted_reason
   * explanation for audit purposes.
   */
  lifted_early: boolean;

  /**
   * Timestamp when the suspension was manually lifted by a moderator or
   * administrator.
   *
   * Null if the suspension was not lifted early and expired naturally at the
   * end_date. Set when lifted_early is true, recording the exact moment
   * privileges were restored ahead of schedule.
   *
   * This timestamp is used for audit trail tracking and understanding the
   * effective suspension duration compared to the originally scheduled
   * duration.
   */
  lifted_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Explanation for why the suspension was lifted before the scheduled end
   * date.
   *
   * Provides transparency about early termination decisions, documenting the
   * rationale for privilege restoration. Common reasons include appeal
   * approval, administrative review determining excessive severity, or
   * discovery of mitigating circumstances.
   *
   * Null if the suspension was not lifted early. Required when lifted_early
   * is true to maintain accountability in moderation decisions.
   */
  lifted_reason?: string | undefined;

  /**
   * Timestamp when the suspension record was created in the system.
   *
   * Marks when the suspension was initially issued and the enforcement action
   * was recorded in the discussion_board_suspensions table. Used for tracking
   * suspension history timeline and audit purposes.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the suspension record was last modified.
   *
   * Updated whenever suspension details change including reason updates,
   * duration extensions, or early lift actions. Used for audit trail tracking
   * and understanding when suspension parameters were adjusted.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardSuspension {
  /**
   * Summary information about a temporary account suspension for list
   * displays.
   *
   * Provides essential suspension details optimized for moderation queue
   * views, administrative dashboards, and suspension management interfaces.
   * Includes core suspension parameters, timing information, and current
   * status without the complete related entity details.
   *
   * This summary format is used in paginated suspension lists where
   * administrators and moderators need to quickly scan suspension records,
   * identify active restrictions, and assess suspension patterns across the
   * platform.
   */
  export type ISummary = {
    /**
     * Unique identifier of the suspension record.
     *
     * This UUID serves as the primary key for the suspension in the
     * database and is used for referencing this specific suspension in
     * administrative operations, appeals processing, and audit trail
     * queries.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the member who is suspended.
     *
     * References the discussion_board_members table to identify which user
     * account has been temporarily restricted from posting and engagement
     * activities.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Username of the suspended member for display purposes.
     *
     * Provides human-readable identification of the suspended user in
     * moderation queue displays and administrative review interfaces.
     */
    member_username: string;

    /**
     * Detailed explanation of why the member was suspended.
     *
     * Provides comprehensive context about the guideline violation or
     * policy breach that resulted in this temporary account restriction.
     * This reason is shown to the suspended user and used in appeals
     * processing.
     */
    suspension_reason: string;

    /**
     * Length of suspension in days.
     *
     * Common durations include 1, 7, 14, or 30 days based on violation
     * severity and member warning history. This determines how long the
     * member's posting privileges remain restricted.
     */
    duration_days: number & tags.Type<"int32">;

    /**
     * Timestamp when the suspension begins and restrictions take effect.
     *
     * Marks the precise moment when the member's posting privileges are
     * revoked and temporary account restrictions are enforced.
     */
    start_date: string & tags.Format<"date-time">;

    /**
     * Timestamp when the suspension expires and privileges are
     * automatically restored.
     *
     * Calculated from start_date plus duration_days, this represents when
     * the system will automatically reactivate the member's full
     * participation capabilities.
     */
    end_date: string & tags.Format<"date-time">;

    /**
     * Whether this suspension is currently in effect.
     *
     * True if the current date is between start_date and end_date and the
     * suspension has not been lifted early. False if the suspension has
     * expired naturally or was manually lifted by moderators or
     * administrators.
     */
    is_active: boolean;

    /**
     * Whether the suspension was manually lifted before the scheduled end
     * date.
     *
     * True if a moderator or administrator terminated the suspension
     * prematurely, typically after successful appeal or administrative
     * review. False for suspensions that expired naturally or are still
     * active.
     */
    lifted_early: boolean;

    /**
     * Timestamp when the suspension record was created in the system.
     *
     * Indicates when the moderation action was taken and the suspension was
     * officially issued to the member.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request data for creating a new temporary account suspension.
   *
   * This structure contains all necessary information for moderators and
   * administrators to suspend a member's account temporarily as part of the
   * graduated enforcement moderation workflow. The suspension restricts the
   * member's ability to create topics, post replies, and vote on content
   * while still allowing them to read discussions and access their profile
   * settings.
   *
   * The request identifies the member to suspend, provides detailed reasoning
   * for transparency, and specifies the suspension duration. The issuing
   * moderator or administrator is identified through authentication context
   * (JWT token) rather than being included in the request body.
   *
   * CRITICAL SECURITY FIX: The moderation_action_id field has been REMOVED
   * from this request DTO. The moderation action record should be created
   * automatically by the backend service when the suspension is created, not
   * provided by the client. This prevents manipulation of the audit trail and
   * ensures proper moderation workflow where the system generates the
   * comprehensive moderation action record linking the suspension to reports,
   * content violations, and enforcement decisions.
   *
   * Upon successful creation, the system automatically creates the
   * corresponding moderation action record, calculates the start_date
   * (current time) and end_date (current time + duration_days), updates the
   * member's account_status to 'suspended', invalidates all active sessions,
   * and sends notifications explaining the suspension and appeal process.
   */
  export type ICreate = {
    /**
     * Unique identifier of the member to be suspended.
     *
     * References the discussion_board_members.id of the user who will
     * receive temporary posting and voting restrictions due to community
     * guideline violations. The system validates that this member exists
     * and is eligible for suspension (not already banned or deleted).
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Detailed explanation of why the member is being suspended.
     *
     * Provides comprehensive justification for the temporary account
     * restriction, explaining the specific guideline violations, policy
     * breaches, or behavioral issues that warranted suspension. This
     * explanation will be shown to the suspended user and must be clear,
     * specific, and reference applicable community guidelines. Required for
     * transparency and to support potential appeals.
     */
    suspension_reason: string;

    /**
     * Number of days the suspension will last.
     *
     * Specifies the suspension duration in days. Moderators can issue
     * suspensions from 1 to 30 days. Common durations include 1 day for
     * minor violations, 7 days for standard second warning suspensions, 14
     * days for elevated violations, and 30 days for final warning
     * suspensions. Administrators using the admin endpoint can issue longer
     * suspensions up to 365 days for severe or repeated violations.
     */
    duration_days: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.Maximum<30>;
  };

  /**
   * Update data transfer object for modifying existing temporary suspension
   * records.
   *
   * This schema supports the suspension modification workflow where
   * moderators and administrators can adjust suspension parameters, lift
   * suspensions early after appeal approval, or extend suspension durations
   * when additional violations occur. All fields are optional, allowing
   * partial updates to specific suspension attributes.
   *
   * The update operation integrates with the graduated enforcement moderation
   * system defined in the Moderation System requirements, supporting fair and
   * flexible suspension management. Modifications to suspensions are tracked
   * through the updated_at timestamp and logged in the moderation audit trail
   * for accountability.
   *
   * When suspensions are lifted early, the system immediately restores member
   * privileges and sends notifications explaining the decision. When
   * durations are extended, the member receives updated notifications with
   * the new end date and reasoning.
   */
  export type IUpdate = {
    /**
     * Updated detailed explanation of why the member was suspended.
     *
     * This field allows moderators and administrators to refine or add
     * context to the original suspension justification. The updated reason
     * is shown to the suspended user and becomes part of the permanent
     * moderation audit trail.
     *
     * Changing the suspension reason may be necessary when new information
     * comes to light, when clarifying the original decision for appeal
     * purposes, or when extending a suspension due to additional
     * violations.
     */
    suspension_reason?: string | undefined;

    /**
     * Updated length of suspension in days.
     *
     * Modifying the duration allows administrators to extend suspensions
     * when additional violations are discovered during the suspension
     * period, or to reduce suspension length after successful appeal
     * review. Common durations include 1, 7, 14, or 30 days based on
     * violation severity.
     *
     * Extending the duration automatically recalculates the end_date
     * timestamp. The suspension's is_active status and the member's
     * restricted privileges remain in effect until the new end_date is
     * reached.
     */
    duration_days?: (number & tags.Type<"int32">) | undefined;

    /**
     * Whether the suspension should be terminated before the scheduled end
     * date.
     *
     * Setting this to true immediately restores the member's full platform
     * privileges including topic creation, reply posting, and voting
     * capabilities. This is typically used when appeals are approved or
     * when administrators determine the suspension should be lifted for
     * other reasons.
     *
     * When lifted early, the system sets the lifted_at timestamp, updates
     * the member's account_status back to 'active', and invalidates the
     * suspension's is_active flag.
     */
    lifted_early?: boolean | undefined;

    /**
     * Explanation for why the suspension was lifted before the scheduled
     * end date.
     *
     * This field is required when lifted_early is set to true and provides
     * transparency about why the suspension was terminated prematurely.
     * Common reasons include successful appeal approval, administrative
     * review determining the suspension was too severe, or discovery of
     * mitigating circumstances.
     *
     * The lifted reason is shown to the member when their privileges are
     * restored and becomes part of the permanent moderation audit trail
     * supporting transparency in moderation decisions.
     */
    lifted_reason?: string | undefined;
  };

  /**
   * Request parameters for searching and filtering user suspensions.
   *
   * Provides comprehensive query capabilities for retrieving suspension
   * records based on multiple criteria including member identity, moderator
   * attribution, active status, duration ranges, and temporal filters.
   * Supports pagination and flexible sorting to enable efficient suspension
   * management and moderation oversight workflows.
   */
  export type IRequest = {
    /**
     * Filter suspensions by specific member identifier.
     *
     * When provided, returns only suspensions issued to the specified
     * member. Useful for reviewing a particular user's suspension history
     * or verifying their current suspension status.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter suspensions by the moderator who issued them.
     *
     * When provided, returns only suspensions created by the specified
     * moderator. Used for moderator performance review and enforcement
     * pattern analysis.
     */
    moderator_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter suspensions by the administrator who issued them.
     *
     * When provided, returns only suspensions created by the specified
     * administrator. Used for administrative action tracking and
     * oversight.
     */
    administrator_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by current suspension active status.
     *
     * When true, returns only currently active suspensions. When false,
     * returns only expired or lifted suspensions. When omitted, returns all
     * suspensions regardless of active status.
     */
    is_active?: boolean | undefined;

    /**
     * Filter by early lift status.
     *
     * When true, returns only suspensions that were manually lifted before
     * their scheduled end date. When false, returns suspensions that
     * expired naturally. When omitted, returns all suspensions.
     */
    lifted_early?: boolean | undefined;

    /**
     * Filter suspensions starting from this date or later.
     *
     * Used to create date range queries for temporal analysis of suspension
     * patterns.
     */
    start_date_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter suspensions starting up to this date.
     *
     * Combines with start_date_from to create a date range filter for
     * suspension analysis.
     */
    start_date_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter by minimum suspension duration in days.
     *
     * Returns only suspensions with duration_days greater than or equal to
     * this value. Useful for identifying longer-term suspensions.
     */
    duration_min?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter by maximum suspension duration in days.
     *
     * Returns only suspensions with duration_days less than or equal to
     * this value. Useful for analyzing short-term versus extended
     * suspensions.
     */
    duration_max?: (number & tags.Type<"int32">) | undefined;

    /**
     * Full-text search across suspension reasons.
     *
     * Searches within the suspension_reason field to find suspensions
     * related to specific violation types or keywords.
     */
    search?: string | undefined;

    /**
     * Sort field for ordering results.
     *
     * Supported values: start_date, end_date, duration_days, created_at.
     * Determines which field to use for sorting the suspension list.
     */
    sort?: string | undefined;

    /**
     * Sort direction for the specified sort field.
     *
     * Determines whether results are sorted in ascending (oldest or lowest
     * first) or descending (newest or highest first) order.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Page number to retrieve.
     *
     * Specifies which page of results to return, starting from 1 for the
     * first page.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of suspension records per page.
     *
     * Configures how many suspension summaries are returned in a single
     * page. Common values are 25, 50, or 100 for administrative review.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };
}
