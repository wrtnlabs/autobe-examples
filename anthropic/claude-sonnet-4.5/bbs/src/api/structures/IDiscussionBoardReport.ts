import { tags } from "typia";

/**
 * Complete representation of a content report submitted to flag guideline
 * violations.
 *
 * This type provides comprehensive report information including reporter
 * details, reported content references, violation categorization, severity
 * assessment, moderator assignment, resolution details, and complete audit
 * trail. Used for moderation queue detailed views, appeal investigations, and
 * moderation quality assurance.
 *
 * Reports are the primary mechanism for community-driven content policing,
 * enabling members to flag topics or replies that violate community standards
 * for civil discourse on economic and political topics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardReport = {
  /**
   * Unique identifier of the content report.
   *
   * Primary key in the discussion_board_reports table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the member who submitted this report.
   *
   * Foreign key to discussion_board_members.id. Used for tracking reporting
   * patterns and preventing report abuse.
   */
  reporter_member_id: string & tags.Format<"uuid">;

  /**
   * Reference to the reported topic if violation is in a discussion topic.
   *
   * Foreign key to discussion_board_topics.id. Null when reported content is
   * a reply rather than a topic.
   */
  reported_topic_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reference to the reported reply if violation is in a discussion reply.
   *
   * Foreign key to discussion_board_replies.id. Null when reported content is
   * a topic rather than a reply.
   */
  reported_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reference to the moderator assigned to review this report.
   *
   * Foreign key to discussion_board_moderators.id. Null for unassigned
   * pending reports. Set when moderator claims the report for review.
   */
  assigned_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Category of guideline violation reported.
   *
   * Valid values: personal_attack, hate_speech, misinformation, spam,
   * offensive_language, off_topic, threats, doxxing, trolling, other.
   *
   * Determines severity assignment and moderator response urgency.
   */
  violation_category: string;

  /**
   * Severity level for moderation queue prioritization.
   *
   * Valid values: critical, high, medium, low.
   *
   * Automatically assigned based on violation category for queue ordering.
   */
  severity_level: string;

  /**
   * Optional additional context from the reporter explaining the violation.
   *
   * Maximum 500 characters. Helps moderators understand the reporter's
   * perspective and provides context beyond the violation category
   * selection.
   *
   * Required when violation category is 'other', optional for all other
   * categories.
   */
  reporter_explanation?: string | null | undefined;

  /**
   * Current status in the moderation workflow.
   *
   * Valid values: pending, under_review, resolved, dismissed.
   *
   * Tracks report progression from submission through review to final
   * outcome.
   */
  status: string;

  /**
   * Moderator's notes explaining the resolution decision.
   *
   * Required when status changes to resolved or dismissed. Provides
   * transparency for moderation decisions and supports appeal
   * investigations.
   *
   * Null for pending or under_review reports.
   */
  resolution_notes?: string | null | undefined;

  /**
   * Reason for dismissal if report was determined invalid.
   *
   * Valid values: no_violation, within_guidelines, malicious_report,
   * insufficient_evidence, other.
   *
   * Required when status is dismissed. Null for all other statuses.
   */
  dismissal_reason?: string | null | undefined;

  /**
   * Timestamp when the report was resolved or dismissed by a moderator.
   *
   * Null for pending and under_review reports. Used for tracking moderator
   * response times and measuring performance against target response times.
   */
  resolved_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the report was submitted.
   *
   * Used for time-in-queue calculations and prioritizing older reports.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the report was last updated.
   *
   * Reflects status changes, moderator assignment, or resolution actions.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardReport {
  /**
   * Summary representation of a content report optimized for moderation queue
   * displays.
   *
   * This type provides essential report information for moderators reviewing
   * the moderation queue, including violation details, priority indicators,
   * and current processing status. The summary enables efficient scanning of
   * multiple reports to identify high-priority violations and manage
   * moderation workflow.
   *
   * Reports represent community-flagged content that potentially violates
   * guidelines, supporting the platform's community-driven moderation
   * approach.
   */
  export type ISummary = {
    /**
     * Unique identifier of the content report.
     *
     * Primary key in the discussion_board_reports table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Category of community guideline violation reported.
     *
     * Valid values: personal_attack, hate_speech, misinformation, spam,
     * offensive_language, off_topic, threats, doxxing, trolling, other.
     *
     * Determines report severity and moderator response urgency.
     */
    violation_category: string;

    /**
     * Severity level for moderation queue prioritization.
     *
     * Valid values: critical, high, medium, low.
     *
     * Automatically assigned based on violation category. Critical severity
     * (hate_speech, threats, doxxing) requires immediate attention within 1
     * hour. High severity (personal_attack) targets 6-hour response. Medium
     * severity (misinformation, offensive_language, trolling) targets
     * 24-hour response. Low severity (spam, off_topic) targets 72-hour
     * response.
     */
    severity_level: string;

    /**
     * Current processing status in the moderation workflow.
     *
     * Valid values: pending, under_review, resolved, dismissed.
     *
     * Tracks report progression from submission through moderator review to
     * final resolution.
     */
    status: string;

    /**
     * Reference to the member who submitted this report.
     *
     * Foreign key to discussion_board_members.id. Used for tracking
     * reporting patterns and preventing report abuse.
     */
    reporter_member_id: string & tags.Format<"uuid">;

    /**
     * Reference to the reported topic if violation is in a discussion
     * topic.
     *
     * Foreign key to discussion_board_topics.id. Null when reported content
     * is a reply rather than a topic.
     */
    reported_topic_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Reference to the reported reply if violation is in a discussion
     * reply.
     *
     * Foreign key to discussion_board_replies.id. Null when reported
     * content is a topic rather than a reply.
     */
    reported_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Reference to the moderator assigned to review this report.
     *
     * Foreign key to discussion_board_moderators.id. Null when the report
     * is pending and has not been claimed. Populated when a moderator
     * assigns themselves or an administrator assigns the report.
     *
     * Displays moderation workload distribution and report ownership in the
     * queue.
     */
    assigned_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when the report was submitted.
     *
     * Used for tracking time in queue, prioritizing older unresolved
     * reports, and measuring moderation response times against platform
     * targets.
     *
     * Displayed in ISO 8601 format with timezone information.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Content report submission data for flagging topics or replies that
   * violate community guidelines.
   *
   * This request body captures the essential information needed to create a
   * new content report and add it to the moderation queue. Members use this
   * to report violations they encounter in economic and political
   * discussions, triggering the professional moderation workflow.
   *
   * The reporter's identity is derived from the authenticated user context
   * and is not included in this request body. The system automatically sets
   * reporter_member_id from the JWT token, preventing report submission on
   * behalf of other users. Similarly, system-calculated fields like
   * severity_level, status, and timestamps are generated server-side based on
   * the violation_category and creation context.
   *
   * Validation ensures exactly one content reference is provided (either
   * reported_topic_id or reported_reply_id), the violation_category is a
   * valid predefined value, and the reporter_explanation meets length
   * requirements when required. The system enforces rate limits (10 reports
   * per hour, 50 per day) and prevents duplicate reports on the same content
   * within 24 hours.
   */
  export type ICreate = {
    /**
     * Unique identifier of the discussion topic being reported for
     * guideline violations.
     *
     * Provide this field when reporting a topic. Exactly one of
     * reported_topic_id or reported_reply_id must be specified, as reports
     * target specific content items. The topic must exist in the
     * discussion_board_topics table and be accessible to the reporter.
     */
    reported_topic_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique identifier of the discussion reply being reported for
     * guideline violations.
     *
     * Provide this field when reporting a reply within a discussion thread.
     * Exactly one of reported_topic_id or reported_reply_id must be
     * specified. The reply must exist in the discussion_board_replies table
     * and be accessible to the reporter.
     */
    reported_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Category of community guideline violation being reported.
     *
     * Required field that must be one of the predefined violation
     * categories: personal_attack, hate_speech, misinformation, spam,
     * offensive_language, off_topic, threats, doxxing, trolling, or other.
     * The selected category determines severity level and moderation queue
     * priority. When selecting 'other', reporter_explanation becomes
     * required with minimum 20 characters.
     */
    violation_category: string;

    /**
     * Optional additional context explaining why the content violates
     * community guidelines.
     *
     * This field allows the reporting member to provide up to 500
     * characters of explanation supporting their report. It becomes
     * required when violation_category is 'other' and must contain at least
     * 20 characters in that case. Detailed explanations help moderators
     * understand the concern and make informed decisions.
     */
    reporter_explanation?: string | null | undefined;
  };

  /**
   * Update payload for modifying content report status, assignment, and
   * resolution details during moderation workflow.
   *
   * This request body supports the moderation queue workflow where moderators
   * claim reports, progress them through review stages, and ultimately
   * resolve or dismiss them with appropriate documentation. All fields are
   * optional to support partial updates at different workflow stages.
   *
   * Moderators typically update reports in stages: first assigning themselves
   * (setting assigned_moderator_id and status to 'under_review'), then
   * completing review by updating status to 'resolved' or 'dismissed' with
   * required resolution_notes or dismissal_reason respectively. The system
   * validates that required explanations are provided when status changes to
   * terminal states.
   *
   * The update operation enforces business rules including requiring
   * resolution_notes when marking resolved, requiring dismissal_reason when
   * marking dismissed, preventing status transitions that violate workflow
   * logic, and ensuring all moderator actions are logged in the audit trail
   * for accountability.
   */
  export type IUpdate = {
    /**
     * Reference to the moderator claiming or being assigned to review this
     * report.
     *
     * Set this field when a moderator takes ownership of a pending report
     * by assigning themselves, or when administrators reassign reports to
     * specific moderators. Assigning a moderator typically transitions the
     * report status from 'pending' to 'under_review'.
     */
    assigned_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Updated workflow status of the content report.
     *
     * Allowed transitions vary based on current status and moderator
     * actions. Valid values are: pending, under_review (when moderator
     * assigns themselves), resolved (when moderator completes review and
     * takes action), or dismissed (when moderator determines no violation
     * occurred). Status changes should follow logical workflow
     * progression.
     */
    status?: string | undefined;

    /**
     * Moderator's detailed explanation of the resolution decision.
     *
     * Required when status is updated to 'resolved'. Minimum 20 characters
     * to ensure adequate explanation for transparency and potential
     * appeals. The resolution notes document what moderation action was
     * taken (content hidden, user warned, etc.) and the reasoning behind
     * the decision.
     */
    resolution_notes?: string | null | undefined;

    /**
     * Reason for dismissing the report if no violation was found.
     *
     * Required when status is updated to 'dismissed'. Valid values include:
     * no_violation, within_guidelines, malicious_report,
     * insufficient_evidence, or other. Helps reporting users understand why
     * their report was not acted upon and supports moderation quality
     * assurance.
     */
    dismissal_reason?: string | null | undefined;
  };

  /**
   * Request parameters for searching and filtering content reports in the
   * moderation queue.
   *
   * This type defines comprehensive search criteria, filtering options,
   * sorting preferences, and pagination parameters that moderators and
   * administrators use to manage the content report queue efficiently.
   * Supports prioritization workflows, queue organization, and targeted
   * report searches.
   */
  export type IRequest = {
    /**
     * Filter reports by processing status.
     *
     * Valid values: pending, under_review, resolved, dismissed.
     *
     * Moderators typically filter to 'pending' to find unclaimed reports or
     * 'under_review' to track their active investigations.
     */
    status?: string | null | undefined;

    /**
     * Filter reports by violation type.
     *
     * Valid values: personal_attack, hate_speech, misinformation, spam,
     * offensive_language, off_topic, threats, doxxing, trolling, other.
     *
     * Allows moderators to focus on specific violation types matching their
     * expertise or priority areas.
     */
    violation_category?: string | null | undefined;

    /**
     * Filter reports by severity for prioritization.
     *
     * Valid values: critical, high, medium, low.
     *
     * Moderators can prioritize critical violations requiring immediate
     * attention.
     */
    severity_level?: string | null | undefined;

    /**
     * Filter reports by assigned moderator.
     *
     * Use specific moderator UUID to view their assigned reports, or null
     * to find unassigned reports awaiting moderator assignment.
     */
    assigned_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter reports submitted on or after this date.
     *
     * Enables date range filtering for temporal analysis of report patterns
     * and moderation queue age.
     */
    from_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter reports submitted on or before this date.
     *
     * Combines with from_date for complete date range filtering.
     */
    to_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort results by: priority, created_at, severity_level.
     *
     * Defaults to priority score for efficient queue processing. Priority
     * score considers severity level, time in queue, and violation
     * patterns.
     */
    sort_by?: string | null | undefined;

    /**
     * Sort direction: asc or desc.
     *
     * Defaults to desc for priority (highest priority first), asc for
     * chronological (oldest first).
     */
    sort_order?: string | null | undefined;

    /**
     * Page number for pagination (1-based).
     *
     * Defaults to 1 if not specified.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Number of reports per page.
     *
     * Defaults to 25. Maximum 100 to prevent performance degradation.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };
}
