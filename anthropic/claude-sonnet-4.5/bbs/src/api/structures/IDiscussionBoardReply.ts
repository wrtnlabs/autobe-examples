import { tags } from "typia";

/**
 * Complete reply entity representing a member's response to a discussion topic
 * or another reply.
 *
 * This entity captures all information about a single reply in the threaded
 * discussion system including content, authorship, threading relationships,
 * timing metadata, and deletion status. Replies support the platform's core
 * value proposition of enabling organized, threaded conversations on economic
 * and political topics.
 *
 * Replies maintain hierarchical relationships through parent_reply_id and track
 * their position in the conversation hierarchy through depth_level. The
 * threading structure supports focused sub-discussions within broader topics
 * while maintaining clear conversation context.
 *
 * Engagement metrics like vote counts are tracked separately in the
 * discussion_board_votes table. Author information is retrieved through the
 * discussion_board_member_id relationship. Edit history is maintained
 * separately in the discussion_board_edit_history table for transparency.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardReply = {
  /**
   * Unique identifier for this reply record.
   *
   * This UUID serves as the primary key in the discussion_board_replies table
   * and uniquely identifies this specific reply across the entire platform.
   * Used for reply permalinks, edit operations, voting references, and
   * moderation actions.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the discussion topic this reply belongs to.
   *
   * This foreign key links the reply to its parent topic in the
   * discussion_board_topics table. All replies are associated with exactly
   * one topic, enabling topic-based reply retrieval and discussion thread
   * organization.
   */
  discussion_board_topic_id: string & tags.Format<"uuid">;

  /**
   * Reference to the member who authored this reply.
   *
   * This foreign key links to the discussion_board_members table identifying
   * the reply author. Used for displaying author information, enforcing edit
   * permissions, and tracking user contributions.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent reply this is responding to for threaded
   * conversations.
   *
   * Null for top-level replies directly responding to the main topic.
   * Contains the UUID of the parent reply for nested responses, enabling the
   * hierarchical discussion structure. This self-referential relationship
   * supports threading up to 10 levels deep.
   */
  parent_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reply content between 1 and 10,000 characters.
   *
   * The actual reply message posted by the member, supporting Markdown
   * formatting for rich text presentation. Content is validated for length
   * constraints, URL limits, spam patterns, and community guideline
   * compliance.
   */
  content: string;

  /**
   * Nesting depth of this reply in the thread hierarchy.
   *
   * 0 for top-level replies directly to the topic, incrementing by 1 for each
   * nested level. Maximum depth is 10 levels per business rules. This field
   * enables proper visual indentation and enforces threading depth
   * constraints.
   */
  depth_level: number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<10>;

  /**
   * Timestamp when the reply was posted.
   *
   * Automatically set when the reply is created. Used for chronological
   * sorting, edit window validation, and activity tracking. Displayed to
   * users to show reply age and conversation timeline.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the reply was last edited.
   *
   * Automatically updated whenever the reply content is modified. Used to
   * display 'Edited' indicators and track content modification history. When
   * updated_at differs significantly from created_at, the system shows an
   * edit indicator to inform readers.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardReply {
  /**
   * Request body for creating a new reply to a discussion topic or nested
   * reply.
   *
   * This DTO captures the essential information needed to post a reply in the
   * threaded discussion system. Members provide the topic they're replying
   * to, optionally the specific parent reply if creating a nested response,
   * and the reply content with Markdown formatting support.
   *
   * The creation process validates business rules including content length
   * constraints, threading depth limits (maximum 10 levels), topic status
   * (must be active, not locked or archived), and rate limiting (30 replies
   * per hour, 200 per day per member). The authenticated member from the JWT
   * token becomes the reply author automatically.
   *
   * After successful creation, the system increments the parent topic's
   * reply_count, updates the topic's last activity timestamp, and triggers
   * notifications to the topic author (for top-level replies) or parent reply
   * author (for nested replies).
   */
  export type ICreate = {
    /**
     * Reference to the discussion topic this reply belongs to.
     *
     * This field identifies the parent discussion topic in the
     * discussion_board_topics table where this reply will be posted. Every
     * reply must be associated with exactly one topic to maintain
     * discussion organization and enable threaded conversation tracking.
     *
     * The topic must exist, be in active status (not locked or archived),
     * and be accessible to the authenticated member for the reply to be
     * successfully created.
     */
    discussion_board_topic_id: string & tags.Format<"uuid">;

    /**
     * Reference to the parent reply this is responding to for threaded
     * conversations.
     *
     * For top-level replies directly responding to the main topic, this
     * field is null. For nested replies responding to other members'
     * comments, this field contains the UUID of the parent reply from the
     * discussion_board_replies table.
     *
     * This self-referential relationship enables the threaded discussion
     * structure supporting conversations up to 10 levels deep. The system
     * automatically calculates the depth_level based on the parent reply's
     * depth to enforce threading constraints.
     */
    parent_reply_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Reply text content between 1 and 10,000 characters.
     *
     * This field contains the actual reply message posted by the member.
     * Content supports Markdown formatting for rich text expression
     * including headers, bold/italic text, lists, blockquotes, code blocks,
     * and links.
     *
     * The minimum length of 1 character allows short responses like 'Yes'
     * or 'Agreed' while the maximum ensures replies remain focused. Content
     * undergoes validation including URL limits (maximum 5 URLs), duplicate
     * detection (rejecting identical content to previous replies by same
     * user in same topic), spam pattern detection, and profanity filtering
     * before acceptance.
     */
    content: string & tags.MinLength<1> & tags.MaxLength<10000>;
  };

  /**
   * Request body for updating an existing reply's content.
   *
   * This DTO allows members to modify their reply content within allowed edit
   * time windows (1 hour for standard members, 24 hours for 100+ reputation
   * members). All fields are optional following the Partial<T> pattern for
   * updates.
   *
   * Edit validation enforces the same content quality rules as creation
   * including character length constraints, URL limits, and spam detection.
   * The system records edit history in discussion_board_edit_history table
   * for transparency.
   */
  export type IUpdate = {
    /**
     * Updated reply text content between 1 and 10,000 characters.
     *
     * This field contains the modified reply message. Content supports
     * Markdown formatting for rich text expression. The update undergoes
     * the same validation as creation including URL limits, spam pattern
     * detection, and profanity filtering.
     *
     * Members can edit their own replies within 1 hour of posting (24 hours
     * for members with 100+ reputation). Moderators and administrators can
     * edit any reply at any time.
     */
    content?: (string & tags.MinLength<1> & tags.MaxLength<10000>) | undefined;
  };

  /**
   * Request parameters for searching and filtering discussion board replies.
   *
   * This request type supports complex queries to help users navigate
   * threaded conversations within discussion topics. Filtering options enable
   * finding specific responses, discovering high-quality contributions, and
   * exploring the threaded discussion structure up to 10 levels deep as
   * specified in business requirements.
   *
   * The request supports full-text content search using trigram indexing,
   * author-based filtering, vote score thresholds, date range queries, and
   * threading depth constraints. Sorting options accommodate different user
   * needs including preserving natural conversation flow (chronological) and
   * surfacing valuable contributions (by vote score).
   *
   * Pagination parameters control result set size with default 50 replies per
   * page as defined in discussion management requirements. The operation
   * enforces search rate limits and validates all filter parameters before
   * executing queries.
   */
  export type IRequest = {
    /**
     * Page number for pagination of reply results.
     *
     * Used to navigate through multiple pages of replies when a discussion
     * topic has more than the per-page limit. Combined with limit to
     * calculate offset for database queries.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of reply records to return per page.
     *
     * Default is 50 replies per page as specified in discussion management
     * requirements. Maximum allowed is 100 to prevent excessive data
     * transfer and maintain response performance.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Filter replies by specific author username.
     *
     * When provided, returns only replies posted by the member with this
     * username. Supports finding all contributions from a particular user
     * within a discussion thread.
     */
    author_username?: string | undefined;

    /**
     * Full-text search query across reply content.
     *
     * Searches within reply text using PostgreSQL trigram indexing for
     * efficient fuzzy matching. Helps users find specific arguments, data
     * points, or references within long discussion threads.
     */
    content_search?:
      | (string & tags.MinLength<1> & tags.MaxLength<200>)
      | undefined;

    /**
     * Minimum net vote score threshold for filtering replies.
     *
     * Returns only replies with vote scores (upvotes minus downvotes) equal
     * to or greater than this value. Useful for surfacing high-quality
     * contributions as determined by community voting.
     */
    min_vote_score?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter replies created after this timestamp.
     *
     * ISO 8601 formatted date-time. Returns only replies posted after this
     * date, useful for finding recent updates or tracking conversation
     * evolution over time.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter replies created before this timestamp.
     *
     * ISO 8601 formatted date-time. Returns only replies posted before this
     * date, useful for historical analysis or finding older responses in
     * long-running discussions.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Minimum threading depth level for reply filtering.
     *
     * Depth level indicates reply nesting: 0 for top-level replies to the
     * topic, incrementing for each nested level. Maximum depth is 10 per
     * business rules.
     */
    min_depth_level?:
      | (number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<10>)
      | undefined;

    /**
     * Maximum threading depth level for reply filtering.
     *
     * Allows focusing on shallow replies or exploring deeply nested
     * conversations. Combined with min_depth_level enables precise depth
     * range filtering.
     */
    max_depth_level?:
      | (number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<10>)
      | undefined;

    /**
     * Filter to show only direct replies to a specific parent reply.
     *
     * When provided, returns only replies where parent_reply_id matches
     * this UUID. Enables retrieving all children of a specific comment for
     * thread expansion UI.
     */
    parent_reply_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Sorting order for reply results.
     *
     * Options include chronological (created_at_asc for oldest first
     * preserving conversation flow, created_at_desc for newest first),
     * vote_score_desc for highest quality contributions first, and
     * depth_level_asc for exploring threading structure.
     */
    sort_by?:
      | "created_at_asc"
      | "created_at_desc"
      | "vote_score_desc"
      | "depth_level_asc"
      | undefined;

    /**
     * Whether to include soft-deleted replies in results.
     *
     * Only available to moderators and administrators. When true, includes
     * replies with non-null deleted_at timestamps for audit purposes.
     */
    include_deleted?: boolean | undefined;
  };

  /**
   * Request parameters for retrieving paginated and filtered edit history for
   * a discussion reply.
   *
   * This request type supports querying the discussion_board_edit_history
   * table for modifications to specific discussion replies. Edit history
   * provides transparency into how reply content has evolved, maintaining
   * accountability and enabling users to track conversation changes.
   *
   * The request enables flexible filtering by date ranges, specific editors,
   * and sorting preferences. Pagination parameters control result volume,
   * enabling efficient navigation through replies with multiple revisions.
   *
   * This request type is used with the PATCH
   * /discussionBoard/topics/{topicId}/replies/{replyId}/editHistory endpoint
   * to retrieve the complete modification timeline for reply transparency in
   * threaded economic and political discussions.
   */
  export type IEditHistoryRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of edit history records to retrieve. Page
     * numbers start at 1 for the first page of results.
     *
     * Used in conjunction with limit to implement efficient pagination
     * through edit history datasets for replies.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of edit history records to return per page.
     *
     * Controls the page size for pagination, allowing clients to request
     * between 1 and 100 records per page. Enables balancing between initial
     * load performance and total request count for reviewing reply edit
     * histories.
     *
     * Default value is typically 20 records per page if not specified.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Filter edit history to records created on or after this date.
     *
     * Enables date range filtering to retrieve only edits that occurred
     * after a specific timestamp. Useful for tracking recent modifications
     * to replies or investigating changes within particular discussion
     * periods.
     *
     * Accepts ISO 8601 date-time format in UTC timezone.
     */
    start_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter edit history to records created on or before this date.
     *
     * Enables date range filtering to retrieve only edits that occurred
     * before a specific timestamp. Used in conjunction with start_date to
     * define precise time windows for investigating reply modifications.
     *
     * Accepts ISO 8601 date-time format in UTC timezone.
     */
    end_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter edit history to modifications performed by a specific member.
     *
     * Allows filtering the edit history to show only edits made by a
     * particular user, identified by their unique member ID. Useful for
     * tracking a specific user's reply modifications or investigating
     * editing behavior patterns.
     *
     * References the discussion_board_members table primary key.
     */
    editor_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Sort order for edit history records.
     *
     * Controls the ordering of edit history results. Available options
     * include chronological sorting to understand how reply content evolved
     * through successive modifications.
     *
     * Created_at_desc (default): Most recent edits appear first, showing
     * the latest modifications to the reply.
     *
     * Created_at_asc: Oldest edits appear first, revealing the complete
     * chronological evolution from original reply to current state.
     */
    sort_by?: "created_at_desc" | "created_at_asc" | undefined;
  };
}
