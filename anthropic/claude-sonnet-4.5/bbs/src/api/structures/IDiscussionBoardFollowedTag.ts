import { tags } from "typia";

/**
 * Complete followed tag relationship record with all metadata.
 *
 * This DTO represents the full followed tag entity from the
 * discussion_board_followed_tags table, including all relationship identifiers
 * and timestamps. It is returned when creating a new followed tag relationship
 * or when detailed follow metadata is needed.
 *
 * The followed tag relationship enables personalized content discovery,
 * optional notifications for new topics with followed tags, and tracking of
 * user interests across economic and political discussions.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardFollowedTag = {
  /**
   * Unique identifier for the followed tag relationship.
   *
   * This UUID serves as the primary key for the followed tag record in the
   * discussion_board_followed_tags table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the member who is following this tag.
   *
   * This foreign key references the discussion_board_members.id field.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * Reference to the tag being followed by the member.
   *
   * This foreign key references the discussion_board_tags.id field.
   */
  discussion_board_tag_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the user started following this tag.
   *
   * Used for sorting followed tags by recency and tracking user interest
   * evolution over time.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the follow relationship was last modified.
   *
   * Used for audit trail purposes and tracking changes to the follow
   * relationship.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardFollowedTag {
  /**
   * Summary view of a tag that a member is following for personalized content
   * recommendations.
   *
   * This DTO represents the followed tag relationship in an optimized format
   * for list displays, showing essential tag information and follow metadata.
   * It includes tag identity, name, description, status, follow timestamp,
   * and optional usage statistics from the materialized view.
   *
   * Followed tags enable personalized content discovery by prioritizing
   * discussions with these tags in recommendations, optionally triggering
   * notifications for new topics with followed tags, and helping users track
   * their areas of interest across economic and political discussions.
   * Members can follow up to 50 tags per business rules.
   *
   * This summary format is optimized for displaying the user's followed tags
   * list in their profile settings, showing tag clouds of user interests, and
   * managing tag subscriptions efficiently without loading complete tag
   * details or all associated topics.
   */
  export type ISummary = {
    /**
     * Unique identifier for the followed tag relationship.
     *
     * This UUID serves as the primary key for the followed tag record in
     * the discussion_board_followed_tags table. It uniquely identifies the
     * relationship between a specific member and a tag they are following
     * for personalized content recommendations and notifications.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Reference to the member who is following this tag.
     *
     * This foreign key references the discussion_board_members.id field,
     * establishing the ownership of the tag follow relationship. The member
     * receives personalized content recommendations and notifications for
     * topics tagged with this tag based on their notification preferences.
     */
    discussion_board_member_id: string & tags.Format<"uuid">;

    /**
     * Reference to the tag being followed by the member.
     *
     * This foreign key references the discussion_board_tags.id field,
     * identifying which tag the member is tracking. The tag must exist in
     * the tags table and be in active status for the follow relationship to
     * remain functional.
     */
    discussion_board_tag_id: string & tags.Format<"uuid">;

    /**
     * Name of the tag being followed, normalized to lowercase for
     * consistency.
     *
     * The tag name is between 2 and 30 characters, containing alphanumeric
     * characters with spaces and hyphens allowed. This is the display name
     * shown in the user's followed tags list and must be unique across all
     * tags in the platform.
     */
    tag_name: string;

    /**
     * Optional description explaining what this tag represents and when to
     * use it.
     *
     * This field helps users understand the tag's purpose and scope,
     * supporting consistent tag application across discussions. The
     * description is particularly valuable for followed tags as users
     * review their interests and manage their tag subscriptions.
     */
    tag_description?: string | null | undefined;

    /**
     * Current lifecycle status of the followed tag.
     *
     * The status indicates whether the tag is active (available for use),
     * pending_review (awaiting moderator approval), disabled (hidden from
     * selection), or merged (consolidated into another tag). Following
     * disabled or merged tags may result in reduced recommendations.
     */
    tag_status: string;

    /**
     * Timestamp when the user started following this tag.
     *
     * This timestamp tracks when the follow relationship was established
     * and is used for sorting the user's followed tags by recency. It helps
     * users understand their interest evolution and manage tags they've
     * been following for extended periods.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Number of topics currently tagged with this tag across the platform.
     *
     * This metric is aggregated from the discussion_board_topic_tags
     * junction table and indicates tag popularity and relevance. Higher
     * usage counts suggest active, well-established tags that are valuable
     * to follow for content discovery.
     */
    usage_count?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Number of users following this tag platform-wide.
     *
     * This count is aggregated from the discussion_board_followed_tags
     * table and indicates the tag's popularity among the community. High
     * follower counts suggest tags that many users find valuable for
     * tracking discussions in specific areas of economics or politics.
     */
    follower_count?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Request body for creating a new tag following relationship.
   *
   * This DTO contains the minimal information needed to establish a follow
   * relationship between an authenticated member and a discussion board tag.
   * The member ID is derived from the authenticated user context (JWT token)
   * rather than the request body, preventing users from following tags on
   * behalf of others.
   *
   * The system validates that the member has not exceeded the maximum of 50
   * followed tags per the business rules before creating the relationship.
   * The follow relationship enables personalized content discovery features
   * including topic recommendations, optional notifications for new tagged
   * topics, and interest tracking across economic and political discussions.
   */
  export type ICreate = {
    /**
     * Identifier of the tag to follow for personalized recommendations.
     *
     * This field references an existing tag in the discussion_board_tags
     * table. The tag must exist, be in active status, and not already be
     * followed by the requesting user. Following a tag enables
     * notifications for new topics with that tag and prioritization in
     * content recommendations.
     */
    discussion_board_tag_id: string & tags.Format<"uuid">;
  };

  /**
   * Request parameters for searching and filtering a user's followed tags
   * collection.
   *
   * This DTO defines the query capabilities for retrieving followed tags with
   * pagination, filtering by tag properties and follow metadata, and sorting
   * by various criteria. The request supports finding specific tags within a
   * user's followed collection, organizing tags for display, and managing tag
   * subscriptions.
   *
   * Common use cases include: displaying the user's complete followed tags
   * list in profile settings, searching for specific tags within the
   * collection as it approaches the 50-tag limit, sorting tags by follow date
   * to review interest evolution, and filtering by tag status to identify
   * disabled or merged tags requiring attention.
   */
  export type IRequest = {
    /**
     * Search filter for tag name using partial text matching.
     *
     * When provided, filters followed tags to those whose names contain
     * this search term (case-insensitive matching). Useful for finding
     * specific tags in large followed tag collections approaching the
     * 50-tag maximum limit.
     */
    tag_name?: string | null | undefined;

    /**
     * Filter followed tags by their current lifecycle status.
     *
     * Valid values include: active (normal operational tags),
     * pending_review (awaiting moderator approval), disabled (hidden from
     * selection), merged (consolidated into another tag). Typically users
     * filter to show only active tags.
     */
    tag_status?: string | null | undefined;

    /**
     * Filter for followed tags added after this timestamp.
     *
     * Useful for finding recently followed tags or reviewing tags added
     * within specific timeframes. Supports date range queries when combined
     * with followed_before parameter.
     */
    followed_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter for followed tags added before this timestamp.
     *
     * Useful for finding older followed tags or reviewing tags from
     * specific historical periods. Combines with followed_after for date
     * range filtering.
     */
    followed_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort the followed tags results by.
     *
     * Supported values include: created_at (when tag was followed),
     * tag_name (alphabetically), usage_count (tag popularity),
     * follower_count (community interest). Default is typically created_at
     * descending to show most recently followed tags first.
     */
    sort_by?: string | null | undefined;

    /**
     * Direction for sorting the results.
     *
     * Valid values: asc (ascending order), desc (descending order). Default
     * is typically desc to show newest or highest values first depending on
     * the sort_by field.
     */
    sort_order?: string | null | undefined;

    /**
     * Page number for pagination of followed tags results.
     *
     * Page numbers start at 1. When null or omitted, defaults to page 1.
     * Used in conjunction with limit to navigate through paginated result
     * sets.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of followed tag records to return per page.
     *
     * Allowed values: 1-100 records per page. Default is typically 20 for
     * efficient browsing. Given the 50-tag maximum per user, most users
     * will see all results on a single page.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };
}
