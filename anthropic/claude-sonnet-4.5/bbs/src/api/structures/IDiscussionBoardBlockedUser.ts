import { tags } from "typia";

import { IDiscussionBoardMember } from "./IDiscussionBoardMember";

/**
 * Complete information about a user blocking relationship.
 *
 * This schema represents the full details of a blocking relationship between
 * two members on the discussion board platform. It includes information about
 * both the blocker and the blocked user, the optional reason for blocking, and
 * complete timestamp metadata.
 *
 * Blocking relationships are stored in the discussion_board_blocked_users table
 * and support asymmetric blocking where User A blocking User B prevents A from
 * seeing B's content without affecting B's ability to see A's content. This
 * privacy mechanism is essential for user experience on platforms discussing
 * potentially contentious political and economic topics.
 *
 * The complete blocking record is used in detailed views, blocking management
 * interfaces, and when returning confirmation after creating or modifying
 * blocks.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardBlockedUser = {
  /**
   * Unique identifier of the blocking relationship record.
   *
   * Primary key from discussion_board_blocked_users table representing this
   * specific block relationship.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Member who initiated the block.
   *
   * The user who blocked another user and will no longer see that user's
   * content or receive notifications from them.
   */
  blocker: IDiscussionBoardMember.IAuthorInfo;

  /**
   * Member who is being blocked.
   *
   * The user whose content is hidden from the blocker. This user can still
   * see the blocker's content as blocking is asymmetric.
   */
  blocked: IDiscussionBoardMember.IAuthorInfo;

  /**
   * Optional user-provided reason for blocking this user.
   *
   * Helps the blocker remember why they blocked someone when reviewing their
   * blocked users list. Also provides context to support teams if blocking is
   * reported as abuse.
   */
  reason: string | null;

  /**
   * Timestamp when the block was created.
   *
   * Used for tracking block duration and history.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardBlockedUser {
  /**
   * Summary information about a blocked user relationship optimized for list
   * displays.
   *
   * This schema represents a blocking relationship where one user (the
   * blocker) has blocked another user (the blocked user) to prevent unwanted
   * interactions. The summary includes essential information for displaying
   * blocked users in the user's blocked list interface.
   *
   * Blocking is an asymmetric relationship - when User A blocks User B, User
   * A no longer sees B's posts, replies, or receives notifications from B,
   * but B can still see A's content. This privacy control is fundamental to
   * user experience on the discussion board platform.
   *
   * The summary format is optimized for the blocked users list view in user
   * profile settings, showing who was blocked, when, and why, without
   * requiring deep nested data about the blocked user's complete profile or
   * activity.
   */
  export type ISummary = {
    /**
     * Unique identifier of the blocking relationship record.
     *
     * This ID represents the specific block record in the
     * discussion_board_blocked_users table, not the blocked user's account
     * ID.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Information about the user who has been blocked.
     *
     * Includes essential profile details of the blocked member to help the
     * blocker identify and remember who they blocked.
     */
    blocked_user: IDiscussionBoardMember.IBlockedUserInfo;

    /**
     * Optional user-provided reason for blocking this user.
     *
     * Helps the blocker remember why they blocked someone when reviewing
     * their blocked users list. Also provides context to support teams if
     * blocking is reported as abuse or retaliatory behavior.
     */
    reason: string | null;

    /**
     * Timestamp when the block was created.
     *
     * Used for tracking block duration, sorting blocked users by recency,
     * and understanding blocking relationship history.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request data for creating a new user blocking relationship.
   *
   * This schema contains the information needed to establish a block between
   * the authenticated user (blocker) and another member (blocked user). The
   * blocking mechanism is asymmetric - blocking User B means the blocker no
   * longer sees B's content or receives B's notifications, but B can still
   * see the blocker's content.
   *
   * The blocker's identity is derived from the authenticated user's JWT token
   * and userId path parameter, not from this request body. This prevents
   * users from creating blocks on behalf of others.
   *
   * Business rules enforced during block creation include validating the
   * target user exists and is a valid member account, preventing
   * self-blocking, enforcing the maximum 100 blocked users per account limit,
   * checking that a blocking relationship doesn't already exist between these
   * users, and rate limiting to prevent block/unblock abuse.
   */
  export type ICreate = {
    /**
     * Unique identifier of the member to be blocked.
     *
     * References discussion_board_members.id of the user the authenticated
     * member wants to block. This user's content will become hidden from
     * the blocker's view.
     */
    blocked_user_id: string & tags.Format<"uuid">;

    /**
     * Optional explanation for why the user is being blocked.
     *
     * Helps the blocker remember their reasoning when reviewing blocked
     * users later. Also provides context to support teams if the blocking
     * relationship is reported as retaliatory or abusive. Maximum length
     * should be reasonable (e.g., 500 characters).
     */
    reason?: string | null | undefined;
  };

  /**
   * Request parameters for searching and filtering a user's blocked users
   * list.
   *
   * This schema defines the search criteria, filters, and pagination options
   * for retrieving blocked user relationships. It supports finding specific
   * blocked users by username, filtering by date ranges, and organizing
   * results through various sorting options.
   *
   * The request enables users to efficiently manage their blocked users list
   * when approaching the 100-user maximum limit, search for specific blocked
   * users, and review their blocking history organized by recency or
   * alphabetically.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve. Defaults to page 1 if
     * not provided.
     */
    page: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /**
     * Number of results per page.
     *
     * Controls page size for pagination. Defaults to 20 if not provided.
     * Maximum of 100 to prevent performance issues.
     */
    limit:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null;

    /**
     * Filter by blocked user's username.
     *
     * Search for blocked users whose username contains this text
     * (case-insensitive partial matching).
     */
    username: string | null;

    /**
     * Filter by blocks created after this timestamp.
     *
     * Used for date range filtering to find recently created blocks.
     */
    created_after: (string & tags.Format<"date-time">) | null;

    /**
     * Filter by blocks created before this timestamp.
     *
     * Used for date range filtering to find older blocks.
     */
    created_before: (string & tags.Format<"date-time">) | null;

    /**
     * Sorting option for results.
     *
     * Controls the order in which blocked users are returned. Defaults to
     * created_at_desc (most recently blocked first).
     */
    sort_by:
      | "created_at_desc"
      | "created_at_asc"
      | "username_asc"
      | "username_desc"
      | null;
  };
}
