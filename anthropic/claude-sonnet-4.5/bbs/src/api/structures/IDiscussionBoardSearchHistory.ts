import { tags } from "typia";

/**
 * Historical record of user search queries on the discussion board platform.
 *
 * Each search history entry captures a complete search event including the
 * query text, applied filters, result count, and user engagement. This audit
 * trail enables search analytics, query improvement, personalized
 * recommendations, and understanding of user information needs.
 *
 * Search history supports both authenticated users and guests, tracking search
 * behavior to improve search algorithms, identify trending topics users seek,
 * detect zero-result queries indicating content gaps, and measure search
 * effectiveness through click-through tracking.
 *
 * This entity corresponds to the discussion_board_search_history table in the
 * Prisma schema, which implements search query logging for platform analytics
 * and continuous search optimization.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSearchHistory = {
  /**
   * Primary unique identifier of the search history record.
   *
   * This UUID serves as the immutable primary key for each search query
   * logged in the discussion_board_search_history table, enabling permanent
   * tracking of user search behavior and platform search analytics.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the user who performed the search query.
   *
   * This field references the discussion_board_members table for
   * authenticated user searches, tracking which member executed the search.
   * Null for guest user searches where the user was not logged in. Used for
   * personalized search analytics and user behavior analysis.
   */
  user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The actual search text entered by the user.
   *
   * Captures the exact keywords, phrases, or search terms the user typed into
   * the search interface. Used for search analytics, identifying popular
   * queries, understanding user information needs, and improving search
   * algorithms. Maximum 200 characters per business validation rules.
   */
  search_query: string;

  /**
   * JSON blob containing the search filters applied alongside the query.
   *
   * Structured data capturing filter parameters including category
   * selections, date range restrictions, vote threshold minimums, tag
   * filters, and other refinement criteria. Stored as JSON string for
   * flexible filter parameter tracking. Null if no filters were applied
   * beyond the basic search text.
   */
  filters_applied?: string | null | undefined;

  /**
   * Number of search results returned for this query.
   *
   * Records how many discussion topics and replies matched the search
   * criteria. Used to identify zero-result queries indicating content gaps,
   * high-result queries that may need better filtering, and overall search
   * effectiveness metrics. Zero values highlight opportunities for content
   * creation or search improvement.
   */
  results_count: number & tags.Type<"int32">;

  /**
   * Identifier of the search result item the user clicked on.
   *
   * Captures which specific discussion topic or reply the user selected from
   * search results, indicating search relevance and user satisfaction.
   * References the UUID of the clicked content item. Null if the user did not
   * click any search result, which may indicate poor search quality or users
   * simply browsing.
   */
  clicked_result_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Session identifier tracking related searches within a browsing session.
   *
   * Groups multiple search queries from the same user session together for
   * session-based search behavior analysis. Helps identify search refinement
   * patterns and user exploration journeys. Null for isolated search queries
   * not part of tracked sessions.
   */
  session_id?: string | null | undefined;

  /**
   * Timestamp when the search query was executed.
   *
   * Records the precise moment the user performed this search. Used for
   * temporal analysis of search trends, identifying peak search activity
   * periods, and understanding how user information needs evolve over time.
   * Immutable as search history represents point-in-time events.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardSearchHistory {
  /**
   * Search and filtering criteria for retrieving search history audit
   * records.
   *
   * This request structure enables administrators to perform complex
   * analytics on user search behavior, identifying popular queries,
   * zero-result searches, click-through patterns, and search effectiveness
   * metrics. The flexible filtering options support temporal analysis,
   * user-specific investigation, result count analysis, and engagement
   * tracking.
   *
   * Administrators use these filters to understand what users are searching
   * for, improve search algorithms, identify content gaps, and optimize the
   * discussion discovery experience.
   */
  export type IRequest = {
    /**
     * Filter by specific user who performed searches.
     *
     * Provide a member UUID to retrieve only search history for that
     * specific user. Useful for analyzing individual user search behavior
     * patterns. Leave null to include searches from all users
     * (authenticated and guests).
     */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by keyword within search query text.
     *
     * Provide a text fragment to find all search queries containing that
     * keyword. Uses partial matching to identify related searches. Leave
     * null to not filter by query text content.
     */
    search_query_keyword?: string | null | undefined;

    /**
     * Filter for searches returning at least this many results.
     *
     * Provide a minimum result count to exclude low-result or zero-result
     * searches. Useful for focusing on successful queries. Leave null for
     * no minimum result threshold.
     */
    min_results?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | null
      | undefined;

    /**
     * Filter for searches returning at most this many results.
     *
     * Provide a maximum result count to identify overly broad queries or
     * specifically find zero-result searches (set to 0). Leave null for no
     * maximum result threshold.
     */
    max_results?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | null
      | undefined;

    /**
     * Filter by whether user clicked any search result.
     *
     * Set to true to find only searches where users engaged with results
     * (high relevance). Set to false to find searches with no clicks
     * (potential poor relevance). Leave null to include both clicked and
     * non-clicked searches.
     */
    has_clicked_result?: boolean | null | undefined;

    /**
     * Filter for searches occurring on or after this date.
     *
     * Provide a starting timestamp to retrieve only search history from
     * this date forward. Used for time-bound analytics and recent search
     * trend analysis. Leave null for no start date restriction.
     */
    date_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter for searches occurring on or before this date.
     *
     * Provide an ending timestamp to retrieve only search history up to
     * this date. Used with date_from for specific time period analysis.
     * Leave null for no end date restriction.
     */
    date_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by specific user session identifier.
     *
     * Provide a session ID to retrieve all searches from a single browsing
     * session. Useful for analyzing search refinement patterns within
     * sessions. Leave null to include searches from all sessions.
     */
    session_id?: string | null | undefined;

    /**
     * Page number for pagination of search history results.
     *
     * Specifies which page of results to retrieve when the total result set
     * exceeds the page size limit. Page numbering starts at 1. Leave null
     * to default to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of search history entries to return per page.
     *
     * Controls the page size for pagination, with a maximum of 100 records
     * per page for performance. Leave null to use the default page size of
     * 20 entries.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Field to sort search history results by.
     *
     * Supported values include 'created_at' for chronological sorting,
     * 'results_count' for result count ordering, and 'search_query' for
     * alphabetical query sorting. Leave null to default to created_at
     * descending (newest first).
     */
    sort_by?: string | null | undefined;

    /**
     * Sort direction for search history results.
     *
     * Specify 'asc' for ascending order or 'desc' for descending order.
     * Leave null to default to descending (newest first for timestamps).
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };
}
