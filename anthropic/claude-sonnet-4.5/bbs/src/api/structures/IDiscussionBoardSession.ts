import { tags } from "typia";

/**
 * Complete session information for an authenticated user.
 *
 * Represents an active login session for a member, moderator, or administrator
 * on the discussion board platform. Each session corresponds to a user
 * authenticated on a specific device with associated JWT access and refresh
 * tokens. Sessions track device information, geographic location, and activity
 * timestamps for security monitoring and multi-device session management.
 *
 * Users can view all their active sessions to monitor account security and
 * identify unauthorized access. Sessions can be revoked individually to
 * terminate access from specific devices, or all sessions can be revoked
 * simultaneously when security events occur such as password changes.
 *
 * This session model supports the platform's JWT-based authentication
 * architecture with short-lived access tokens (30-minute expiration) and
 * longer-lived refresh tokens (7-30 day expiration). Session records enable
 * users to audit where they are logged in and maintain control over their
 * account security across multiple devices.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSession = {
  /**
   * Unique identifier of the session.
   *
   * This UUID serves as the primary key for the session record in the
   * discussion_board_sessions table, uniquely identifying each authenticated
   * session across the platform.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the member who owns this session.
   *
   * Links to discussion_board_members.id. This field is null if the session
   * belongs to a moderator or administrator. Only one of the three user type
   * foreign keys (member_id, moderator_id, administrator_id) will be
   * populated for any given session.
   */
  discussion_board_member_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Reference to the moderator who owns this session.
   *
   * Links to discussion_board_moderators.id. This field is null if the
   * session belongs to a member or administrator. Only one of the three user
   * type foreign keys (member_id, moderator_id, administrator_id) will be
   * populated for any given session.
   */
  discussion_board_moderator_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Reference to the administrator who owns this session.
   *
   * Links to discussion_board_administrators.id. This field is null if the
   * session belongs to a member or moderator. Only one of the three user type
   * foreign keys (member_id, moderator_id, administrator_id) will be
   * populated for any given session.
   */
  discussion_board_administrator_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Type of device used for this session.
   *
   * Examples include: Desktop, Mobile, Tablet. This information is extracted
   * from the user agent string during session creation and helps users
   * identify their active sessions across different devices.
   */
  device_type: string;

  /**
   * Browser name and version information.
   *
   * Examples: Chrome 120.0, Firefox 121.0, Safari 17.0. Extracted from the
   * user agent string during login, this information helps users recognize
   * sessions from specific browsers and detect unfamiliar access patterns.
   */
  browser_info: string;

  /**
   * IP address from which the session was created.
   *
   * Used for security monitoring, location approximation, and detecting
   * suspicious login patterns. Combined with location information to help
   * users verify legitimate access and identify unauthorized session
   * creation.
   */
  ip_address: string;

  /**
   * Approximate geographic location based on IP address.
   *
   * Provides city-level precision, for example: 'New York, USA' or 'London,
   * UK'. May be null if location cannot be determined from the IP address.
   * Helps users identify unfamiliar login locations and detect unauthorized
   * access from unexpected regions.
   */
  location?: string | null | undefined;

  /**
   * Whether this session is currently active.
   *
   * False when the session has been revoked by user logout, password change,
   * session expiration, or manual revocation. Active sessions can make
   * authenticated API requests, while inactive sessions are denied access.
   */
  is_active: boolean;

  /**
   * Timestamp when the access token expires.
   *
   * Access tokens expire after 30 minutes from issuance. After expiration,
   * the session must use its refresh token to obtain a new access token. This
   * short expiration window enhances security by limiting the validity period
   * of potentially compromised tokens.
   */
  expires_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last activity in this session.
   *
   * Updated on each authenticated request made with this session's access
   * token. Used to track session usage patterns, identify inactive sessions
   * for cleanup, and display recent activity information to users reviewing
   * their active sessions.
   */
  last_activity_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the session was created.
   *
   * Records when the user logged in and this session was established. Used
   * for session age tracking, security auditing, and displaying login time
   * information in the active sessions list.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the session was revoked.
   *
   * Null if the session is still active. Set when the user logs out, changes
   * their password, or manually revokes the session from their account
   * settings. Provides audit trail for session termination events.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardSession {
  /**
   * Search and filter criteria for retrieving user sessions.
   *
   * Defines the request parameters for searching, filtering, sorting, and
   * paginating session records. This request type supports the multi-device
   * session management feature where users can search through their active
   * and historical sessions using various criteria including device type,
   * location, activity timeframe, and session status.
   *
   * All filter parameters are optional, allowing flexible queries from broad
   * session listings to highly specific searches. The combination of filters
   * uses AND logic, meaning sessions must match all specified criteria to be
   * included in results.
   */
  export type IRequest = {
    /**
     * Filter sessions by device type.
     *
     * Allows filtering for specific device categories such as Desktop,
     * Mobile, or Tablet. When specified, returns only sessions created from
     * matching device types. Useful for finding sessions on specific
     * devices to manage or revoke them.
     */
    device_type?: string | null | undefined;

    /**
     * Filter sessions by browser information.
     *
     * Allows filtering for sessions using specific browsers such as Chrome,
     * Firefox, or Safari. Supports partial matching to find all sessions
     * from a browser family. Helps users locate sessions from particular
     * browsers.
     */
    browser_info?: string | null | undefined;

    /**
     * Filter sessions by geographic location.
     *
     * Allows filtering for sessions from specific cities or countries.
     * Supports partial matching to find sessions from a region. Useful for
     * identifying sessions from unexpected geographic locations that may
     * indicate unauthorized access.
     */
    location?: string | null | undefined;

    /**
     * Filter sessions by IP address or IP pattern.
     *
     * Allows filtering for sessions from specific IP addresses or IP
     * ranges. Supports partial matching for subnet-level filtering. Used
     * for security investigations and identifying multiple sessions from
     * the same network.
     */
    ip_address?: string | null | undefined;

    /**
     * Filter sessions by active status.
     *
     * When true, returns only currently active sessions. When false,
     * returns only revoked or expired sessions. When null, returns all
     * sessions regardless of status. Helps users distinguish between
     * current logins and historical session data.
     */
    is_active?: boolean | null | undefined;

    /**
     * Filter sessions created after this timestamp.
     *
     * Returns only sessions created on or after the specified date and
     * time. Useful for finding recent sessions or sessions within a
     * specific timeframe.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter sessions created before this timestamp.
     *
     * Returns only sessions created on or before the specified date and
     * time. Combined with created_after, enables date range filtering for
     * session searches.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter sessions with activity after this timestamp.
     *
     * Returns only sessions that had activity on or after the specified
     * date and time. Helps identify recently active sessions versus dormant
     * sessions.
     */
    last_activity_after?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Field to sort results by.
     *
     * Supported values: 'created_at' (login time), 'last_activity_at'
     * (recent activity), 'expires_at' (expiration time). Default is
     * 'last_activity_at' to show most recently used sessions first.
     */
    sort_by?:
      | "created_at"
      | "last_activity_at"
      | "expires_at"
      | null
      | undefined;

    /**
     * Sort direction for results.
     *
     * Specifies ascending ('asc') or descending ('desc') order. Default is
     * 'desc' to show newest or most recent items first.
     */
    sort_order?: "asc" | "desc" | null | undefined;

    /**
     * Page number to retrieve.
     *
     * Specifies which page of results to return. Page numbering starts at
     * 1. When null, defaults to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of records per page.
     *
     * Specifies how many session records to return in a single page.
     * Maximum 100 records per page. When null, defaults to 20 records per
     * page.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };
}
