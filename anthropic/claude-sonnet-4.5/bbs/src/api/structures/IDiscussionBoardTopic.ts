import { tags } from "typia";

import { IDiscussionBoardCategory } from "./IDiscussionBoardCategory";
import { IDiscussionBoardMember } from "./IDiscussionBoardMember";
import { IDiscussionBoardTag } from "./IDiscussionBoardTag";

/**
 * Complete detailed information about a discussion topic.
 *
 * This schema represents the full topic entity with all content, metadata,
 * relationships, and engagement metrics. It includes the complete topic body
 * (up to 50,000 characters), full category and author details, all associated
 * tags, status information, and engagement statistics.
 *
 * This comprehensive format is used when displaying individual topic detail
 * pages where users read the full content and interact through replies, votes,
 * and bookmarks. Unlike the summary format used for lists, this includes all
 * topic data necessary for the complete reading and interaction experience.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardTopic = {
  /**
   * Unique identifier of the discussion topic.
   *
   * Primary key from discussion_board_topics table used for all
   * topic-specific operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Topic title displayed throughout the platform.
   *
   * Between 10 and 200 characters per business rules. The primary identifier
   * users see when browsing discussions.
   */
  title: string;

  /**
   * Complete topic body content with Markdown formatting.
   *
   * Between 20 and 50,000 characters. Contains the full discussion content
   * with rich text formatting, paragraphs, lists, and inline code.
   */
  body: string;

  /**
   * Category this topic is assigned to.
   *
   * Provides organizational context for the topic within the
   * Economics/Politics taxonomy.
   */
  category: IDiscussionBoardCategory.ITopicCategory;

  /**
   * Member who created this topic.
   *
   * Provides author attribution and profile context.
   */
  author: IDiscussionBoardMember.IAuthorInfo;

  /**
   * Tags assigned to this topic for additional categorization.
   *
   * Up to 5 tags per topic per business rules. Tags enable cross-category
   * discovery and content organization.
   */
  tags: IDiscussionBoardTag.ITopicTag[];

  /**
   * Current operational status of the discussion topic.
   *
   * Indicates whether the topic is open for replies (active), read-only
   * (locked), archived (old inactive), or soft deleted (deleted).
   */
  status: "active" | "locked" | "archived" | "deleted";

  /**
   * Number of times this topic has been viewed.
   *
   * Incremented once per user per 24 hours. Provides popularity metrics.
   */
  view_count: number & tags.Type<"int32">;

  /**
   * Total number of replies to this topic.
   *
   * Indicates discussion activity and engagement level.
   */
  reply_count: number & tags.Type<"int32">;

  /**
   * Whether this topic is pinned by moderators.
   *
   * Pinned topics appear at the top of category listings.
   */
  is_pinned: boolean;

  /**
   * Timestamp when the topic was created.
   *
   * Used for sorting and displaying topic age.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the topic was last updated.
   *
   * Reflects topic edits or new reply activity.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardTopic {
  /**
   * Summary information about a discussion topic optimized for list displays
   * and search results.
   *
   * This schema provides essential topic metadata for browsing interfaces
   * including category listings, search results, trending topics, and user
   * activity feeds. It includes enough information for users to identify
   * topics of interest without the overhead of full topic content, which can
   * be up to 50,000 characters.
   *
   * The summary format balances information richness with performance,
   * providing title, category, author, engagement metrics (views and
   * replies), status indicators, and timestamps for sorting and filtering.
   * Users can quickly scan topic summaries to find discussions they want to
   * read in detail.
   *
   * This summary schema is used in paginated topic lists, category browsing
   * interfaces, search result displays, user profile activity feeds, and
   * favorited topics collections throughout the discussion board platform.
   */
  export type ISummary = {
    /**
     * Unique identifier of the discussion topic.
     *
     * This ID is used for navigating to the topic detail view, creating
     * replies, voting, and all topic-specific operations.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Topic title displayed in listings and search results.
     *
     * Must be between 10 and 200 characters. This is the primary identifier
     * users see when browsing discussions.
     */
    title: string;

    /**
     * Category this topic is assigned to for organizational purposes.
     *
     * Provides context about the topic's subject area (Economics, Politics,
     * or subcategories). Each topic belongs to exactly one category.
     */
    category: IDiscussionBoardCategory.ITopicCategory;

    /**
     * Information about the member who created this topic.
     *
     * Includes author identification and basic profile details for
     * attribution and credibility assessment.
     */
    author: IDiscussionBoardMember.IAuthorInfo;

    /**
     * Current operational status of the discussion topic.
     *
     * Indicates whether the topic is open for replies (active), read-only
     * (locked), moved to archives (archived), or soft deleted (deleted).
     * Status affects what interactions are permitted on the topic.
     */
    status: "active" | "locked" | "archived" | "deleted";

    /**
     * Number of times this topic has been viewed.
     *
     * Incremented once per user per 24 hours to prevent artificial
     * inflation. Provides engagement metrics and indicates topic
     * popularity.
     */
    view_count: number & tags.Type<"int32">;

    /**
     * Total number of replies to this topic.
     *
     * Updated when replies are created or deleted. Indicates discussion
     * activity level and engagement depth.
     */
    reply_count: number & tags.Type<"int32">;

    /**
     * Whether this topic is pinned to the top of category listings.
     *
     * Pinned topics are featured by moderators or administrators and appear
     * above regular topics regardless of sorting option selected.
     */
    is_pinned: boolean;

    /**
     * Timestamp when the topic was created.
     *
     * Used for sorting by newest topics, displaying topic age, and tracking
     * content timeline.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the topic was last updated.
     *
     * Reflects either topic edits or new reply activity. Used for sorting
     * by recent activity and identifying active discussions.
     */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request data for creating a new discussion topic.
   *
   * This schema contains all information required to create a new topic on
   * the economic and political discussion board. The author is derived from
   * the authenticated user's JWT token, not from this request body,
   * preventing users from posting topics as other users.
   *
   * Business rules enforced during topic creation include comprehensive title
   * and body validation, mandatory single category assignment, optional tag
   * assignment (maximum 5 tags), rate limiting (5 topics per hour, 20 per
   * day), duplicate content detection, spam pattern detection, and automated
   * quality checks.
   *
   * The category must be one of the predefined platform categories like
   * Economics, Politics, Current Events, or their subcategories. Tags enable
   * cross-category discovery and content organization beyond the primary
   * category structure.
   */
  export type ICreate = {
    /**
     * Topic title between 10 and 200 characters.
     *
     * Must not consist entirely of uppercase letters or contain only
     * special characters. Must contain at least 3 alphabetic characters.
     * URLs are not allowed in titles.
     */
    title: string & tags.MinLength<10> & tags.MaxLength<200>;

    /**
     * Topic body content between 20 and 50,000 characters.
     *
     * Supports Markdown formatting. Must not be identical to the title.
     * Cannot contain more than 10 URLs or consist of more than 80%
     * URLs/special characters.
     */
    body: string & tags.MinLength<20> & tags.MaxLength<50000>;

    /**
     * Category assignment for topic organization.
     *
     * Must reference a valid category ID from discussion_board_categories.
     * Exactly one category is required per topic.
     */
    category_id: string & tags.Format<"uuid">;

    /**
     * Optional tags for additional topic categorization.
     *
     * Up to 5 tags can be assigned per topic per business rules. Each tag
     * ID must reference a valid tag from discussion_board_tags.
     */
    tag_ids: ((string & tags.Format<"uuid">)[] & tags.MaxItems<5>) | null;
  };

  /**
   * Request data for updating an existing discussion topic.
   *
   * All fields are optional to support partial updates using the Partial<T>
   * pattern. Only the fields provided in the request will be modified -
   * omitted fields retain their current values. The update operation is
   * subject to time-based restrictions and role-based permissions.
   *
   * Members can edit their own topics within 24 hours of creation (extended
   * to 7 days for members with 100+ reputation). Moderators and
   * administrators can edit any topic at any time. When a topic has 10+
   * replies, the title becomes locked to prevent confusion, though the body
   * remains editable.
   *
   * All updates undergo the same validation as topic creation, and
   * modifications are recorded in discussion_board_edit_history for
   * transparency. The topic's updated_at timestamp is refreshed to reflect
   * the modification.
   */
  export type IUpdate = {
    /**
     * Updated topic title between 10 and 200 characters.
     *
     * Subject to same validation as creation. Title edits are locked when
     * topic has 10+ replies to prevent confusion in active discussions.
     */
    title?:
      | (string & tags.MinLength<10> & tags.MaxLength<200>)
      | null
      | undefined;

    /**
     * Updated topic body content between 20 and 50,000 characters.
     *
     * Supports Markdown formatting. Subject to same validation rules as
     * creation including URL limits and content quality checks.
     */
    body?:
      | (string & tags.MinLength<20> & tags.MaxLength<50000>)
      | null
      | undefined;

    /**
     * Updated category assignment.
     *
     * Must reference a valid category from discussion_board_categories.
     * Category changes are allowed within 1 hour of creation for authors,
     * anytime for moderators/administrators.
     */
    category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Updated tag assignments.
     *
     * Up to 5 tags per topic. Each tag ID must reference a valid active tag
     * from discussion_board_tags.
     */
    tag_ids?:
      | ((string & tags.Format<"uuid">)[] & tags.MaxItems<5>)
      | null
      | undefined;
  };

  /**
   * Request parameters for searching and filtering discussion topics.
   *
   * This comprehensive search schema supports the advanced topic discovery
   * features defined in the Search and Discovery requirements. Users can
   * combine multiple filters simultaneously to find highly specific
   * discussions on economic and political topics.
   *
   * The request enables complex queries such as searching for 'inflation
   * policy' within the Economics category, tagged with specific tags, created
   * in the last 30 days, with minimum vote thresholds, sorted by recent
   * activity. The flexible filtering supports both casual browsing and
   * targeted research workflows.
   *
   * All filter fields are optional, allowing users to perform broad searches
   * without filters or highly targeted searches with multiple criteria
   * combined.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve. Defaults to page 1 if
     * not provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of topics per page.
     *
     * Controls page size for pagination. Default is 25 topics per page per
     * business rules. Maximum of 100 to prevent performance issues.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Keyword search across topic titles and body content.
     *
     * Full-text search using PostgreSQL trigram indexing for fuzzy
     * matching. Searches both title and body fields with relevance
     * ranking.
     */
    search?: string | null | undefined;

    /**
     * Filter by specific category.
     *
     * Restricts results to topics assigned to this category ID from
     * discussion_board_categories.
     */
    category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by one or more tags.
     *
     * Restricts results to topics tagged with at least one of the specified
     * tag IDs. Uses OR logic for multiple tags.
     */
    tag_ids?: (string & tags.Format<"uuid">)[] | null | undefined;

    /**
     * Filter by topic author.
     *
     * Restricts results to topics created by the specified member ID from
     * discussion_board_members.
     */
    author_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by topic status.
     *
     * Restricts results to topics with the specified status. Active topics
     * are open for replies, locked topics are read-only, archived topics
     * are old inactive topics, and deleted topics are soft-deleted.
     */
    status?: "active" | "locked" | "archived" | "deleted" | null | undefined;

    /**
     * Minimum vote score filter.
     *
     * Restricts results to topics with net vote score greater than or equal
     * to this value. Useful for finding highly-rated content.
     */
    min_votes?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Filter by topics created after this timestamp.
     *
     * Enables date range filtering for recent discussions.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by topics created before this timestamp.
     *
     * Enables date range filtering for historical discussions.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sorting option for results.
     *
     * Controls result ordering: recent_activity (newest replies first,
     * default), newest (recently created first), most_replies (highest
     * reply count), most_views (highest view count), hot (trending
     * algorithm), top (highest votes).
     */
    sort_by?:
      | "recent_activity"
      | "newest"
      | "most_replies"
      | "most_views"
      | "hot"
      | "top"
      | null
      | undefined;
  };

  /**
   * Request parameters for retrieving paginated and filtered edit history for
   * a discussion topic.
   *
   * This request type supports querying the discussion_board_edit_history
   * table for modifications to specific discussion topics. Edit history
   * provides transparency into content evolution, showing all changes made to
   * topic titles and bodies over time with complete before/after snapshots.
   *
   * The request enables flexible filtering by date ranges, specific editors,
   * and sorting preferences. Pagination parameters control the volume of
   * results returned, enabling efficient browsing of topics with extensive
   * edit histories.
   *
   * This request type is used with the PATCH
   * /discussionBoard/topics/{topicId}/editHistory endpoint to retrieve the
   * complete modification timeline for transparency and accountability in
   * economic and political discussions.
   */
  export type IEditHistoryRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of edit history records to retrieve. Page
     * numbers start at 1 for the first page of results.
     *
     * Used in conjunction with limit to implement efficient pagination
     * through large edit history datasets.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of edit history records to return per page.
     *
     * Controls the page size for pagination, allowing clients to request
     * between 1 and 100 records per page. Smaller page sizes enable faster
     * initial loads, while larger sizes reduce the total number of requests
     * needed for reviewing extensive edit histories.
     *
     * Default value is typically 20 records per page if not specified.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Filter edit history to records created on or after this date.
     *
     * Enables date range filtering to retrieve only edits that occurred
     * after a specific timestamp. Useful for tracking recent modifications
     * or investigating changes within a particular time period.
     *
     * Accepts ISO 8601 date-time format in UTC timezone.
     */
    start_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter edit history to records created on or before this date.
     *
     * Enables date range filtering to retrieve only edits that occurred
     * before a specific timestamp. Used in conjunction with start_date to
     * define precise time windows for edit history investigation.
     *
     * Accepts ISO 8601 date-time format in UTC timezone.
     */
    end_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter edit history to modifications performed by a specific member.
     *
     * Allows filtering the edit history to show only edits made by a
     * particular user, identified by their unique member ID. Useful for
     * tracking a specific user's content modifications or investigating
     * editing patterns.
     *
     * References the discussion_board_members table primary key.
     */
    editor_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Sort order for edit history records.
     *
     * Controls the ordering of edit history results. Available options
     * include chronological sorting (newest edits first or oldest edits
     * first) to understand content evolution over time.
     *
     * Created_at_desc (default): Most recent edits appear first, useful for
     * seeing the latest modifications.
     *
     * Created_at_asc: Oldest edits appear first, useful for understanding
     * the complete chronological evolution of content.
     */
    sort_by?: "created_at_desc" | "created_at_asc" | undefined;
  };
}
