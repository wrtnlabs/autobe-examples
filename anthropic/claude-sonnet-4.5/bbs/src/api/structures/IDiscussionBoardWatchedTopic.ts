import { tags } from "typia";

/**
 * Complete watched topic relationship record with all metadata.
 *
 * This DTO represents the full watched topic entity from the
 * discussion_board_watched_topics table, including all relationship
 * identifiers, timestamps, and read tracking data. It is returned when creating
 * a new watched topic subscription or updating watch settings.
 *
 * The watched topic relationship enables users to receive notifications about
 * new activity on discussions they're interested in, supporting sustained
 * engagement with ongoing conversations on economic and political subjects.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardWatchedTopic = {
  /** Unique identifier for the watched topic relationship. */
  id: string & tags.Format<"uuid">;

  /** Reference to the member who is watching this topic. */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /** Reference to the discussion topic being watched. */
  discussion_board_topic_id: string & tags.Format<"uuid">;

  /** Timestamp when the user started watching this topic. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the watch relationship was last modified. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user last viewed this topic.
   *
   * Used to determine if there is new activity since their last visit to show
   * unread indicators and trigger notifications appropriately.
   */
  last_read_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Soft delete timestamp enabling watch relationship recovery.
   *
   * When set, the watch subscription is marked as deleted but preserved for
   * potential recovery within the 30-day recovery window. Null for active
   * watch relationships.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardWatchedTopic {
  /**
   * Summary view of a discussion topic that a member is watching for activity
   * notifications.
   *
   * This DTO represents the watched topic relationship in an optimized format
   * for list displays, combining watch metadata with essential topic
   * information. It includes watch relationship details, topic summary data,
   * and calculated unread indicators to show users which watched topics
   * require attention.
   *
   * Watched topics enable members to track ongoing discussions they find
   * particularly interesting or relevant to their economic and political
   * interests. When watched topics receive new replies, reach vote
   * milestones, or have other significant activity, the system generates
   * notifications based on the user's notification preferences.
   *
   * This summary format is optimized for displaying the user's watched topics
   * list, showing which topics have new unread activity, providing quick
   * access to topic details, and enabling efficient management of watch
   * subscriptions without loading complete topic content or all replies.
   */
  export type ISummary = {
    /**
     * Unique identifier for the watched topic relationship.
     *
     * This UUID serves as the primary key for the watched topic record in
     * the discussion_board_watched_topics table. It uniquely identifies the
     * subscription between a specific member and a topic they are
     * monitoring for new activity.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Reference to the member who is watching this topic.
     *
     * This foreign key references the discussion_board_members.id field,
     * establishing ownership of the watch subscription. The member receives
     * notifications about new activity on this topic according to their
     * notification preferences.
     */
    discussion_board_member_id: string & tags.Format<"uuid">;

    /**
     * Reference to the discussion topic being watched.
     *
     * This foreign key references the discussion_board_topics.id field,
     * identifying which discussion the member is monitoring for new
     * replies, votes, and other activity.
     */
    discussion_board_topic_id: string & tags.Format<"uuid">;

    /**
     * Title of the watched discussion topic.
     *
     * The topic title (10-200 characters) provides immediate context about
     * what discussion the user is watching. This is essential for
     * displaying meaningful watched topics lists without requiring
     * additional topic detail queries.
     */
    topic_title: string;

    /**
     * Category of the watched discussion topic.
     *
     * Indicates whether the watched topic is in Economics, Politics, or
     * another category, helping users organize their watched topics by
     * subject area and understand the distribution of their interests.
     */
    topic_category: string;

    /**
     * Timestamp when the user started watching this topic.
     *
     * This timestamp tracks when the watch relationship was established and
     * is used for tracking watch duration and sorting watched topics by
     * when they were added to the watch list.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the user last viewed this watched topic.
     *
     * This field is critical for determining if there is new activity
     * (replies, votes) since the user's last visit. When last_read_at is
     * older than the topic's updated_at timestamp, the UI can show 'unread'
     * or 'new activity' indicators to draw attention to topics requiring
     * user review.
     */
    last_read_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Calculated indicator showing whether there is new activity since last
     * read.
     *
     * True when the topic has been updated (new replies, votes, or edits)
     * after the last_read_at timestamp. False when the user has viewed all
     * current activity. This boolean enables efficient unread badge display
     * without client-side timestamp comparison.
     */
    has_unread_activity: boolean;

    /**
     * Current number of replies in the watched topic.
     *
     * This count from the discussion_board_topics.reply_count field shows
     * the discussion's activity level and helps users identify highly
     * engaged topics in their watch list.
     */
    topic_reply_count: number & tags.Type<"int32">;

    /**
     * Timestamp of the most recent activity on the watched topic.
     *
     * This is the topic's updated_at field, which changes when new replies
     * are posted or the topic is edited. Comparing this to last_read_at
     * determines if there is unread activity requiring user attention.
     */
    topic_updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for creating a new watched topic subscription.
   *
   * This DTO contains the minimal information needed to establish a watch
   * relationship between an authenticated member and a discussion topic. The
   * member ID is derived from the authenticated user context (JWT token)
   * rather than the request body, preventing users from creating watch
   * subscriptions on behalf of others.
   *
   * The system initializes the last_read_at timestamp to the current time
   * upon creation, indicating the user has read all content up to this point.
   * Future notifications will only be triggered by new activity occurring
   * after this timestamp.
   *
   * The watch relationship supports the notification system's
   * watched_topic_update notification type, enabling users to track ongoing
   * discussions of interest without manually checking for updates.
   */
  export type ICreate = {
    /**
     * Identifier of the discussion topic to add to the watch list.
     *
     * This field references an existing topic in the
     * discussion_board_topics table. The topic must exist, be in active
     * state (not deleted or archived), and not already be watched by the
     * requesting user. Watching a topic enables notifications for new
     * replies, votes, and other activity based on the user's notification
     * preferences.
     */
    discussion_board_topic_id: string & tags.Format<"uuid">;
  };

  /**
   * Request body for updating watched topic subscription settings and
   * tracking information.
   *
   * This DTO supports updating the last_read_at timestamp to mark a watched
   * topic as viewed, which is essential for accurate unread indicator
   * calculations and notification batching logic. All fields are optional to
   * allow partial updates.
   *
   * The primary use case is updating last_read_at when a user views a watched
   * topic, ensuring the system accurately tracks which activity is new versus
   * already seen. This prevents duplicate notifications for content the user
   * has already reviewed.
   */
  export type IUpdate = {
    /**
     * Updated timestamp indicating when the user last viewed this watched
     * topic.
     *
     * Setting this field to the current time marks the topic as fully read,
     * resetting the unread activity indicator. This is the primary use case
     * for updating watched topics - tracking which activity is new versus
     * already seen. The timestamp is compared against the topic's
     * updated_at to determine if there is new activity requiring user
     * attention.
     */
    last_read_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request parameters for searching and filtering a user's watched topics
   * collection.
   *
   * This DTO defines the query capabilities for retrieving watched topics
   * with pagination, filtering by unread status, topic properties, and watch
   * metadata, and sorting by various criteria. The request supports finding
   * topics with new activity, organizing watch lists for review, and managing
   * topic subscriptions.
   *
   * Common use cases include: displaying topics with unread activity to
   * prioritize user attention, filtering watched topics by category to focus
   * on Economics or Politics discussions, sorting by most recent topic
   * activity to catch up on active discussions, and searching for specific
   * watched topics by title within large watch collections.
   */
  export type IRequest = {
    /**
     * Filter watched topics by presence of new unread activity.
     *
     * When true, returns only watched topics with activity since the user's
     * last_read_at timestamp. When false, returns only watched topics the
     * user has fully reviewed. When null, returns all watched topics
     * regardless of read status.
     */
    has_unread_activity?: boolean | null | undefined;

    /**
     * Filter watched topics by their assigned category.
     *
     * Allows users to view only watched Economics topics, only Politics
     * topics, or topics from other specific categories. Useful for
     * organizing large watch lists by subject area.
     */
    category_filter?: string | null | undefined;

    /**
     * Filter for topics watched after this timestamp.
     *
     * Enables finding recently added watched topics or reviewing topics
     * added within specific timeframes. Supports date range queries when
     * combined with watched_before parameter.
     */
    watched_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter for topics watched before this timestamp.
     *
     * Enables finding older watched topics or reviewing watch subscriptions
     * from specific historical periods. Combines with watched_after for
     * date range filtering.
     */
    watched_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Search within watched topic titles using text matching.
     *
     * Performs partial, case-insensitive search across the titles of
     * watched topics to help users locate specific discussions they are
     * tracking. Useful for large watch lists.
     */
    topic_title_search?: string | null | undefined;

    /**
     * Field to sort the watched topics results by.
     *
     * Supported values include: created_at (when watch was created),
     * last_read_at (when user last viewed topic), topic_updated_at (most
     * recent topic activity), topic_reply_count (discussion activity
     * level). Default is typically topic_updated_at descending to show
     * topics with newest activity first.
     */
    sort_by?: string | null | undefined;

    /**
     * Direction for sorting the results.
     *
     * Valid values: asc (ascending order), desc (descending order). Default
     * is typically desc to prioritize topics with new unread activity or
     * most recent watch additions.
     */
    sort_order?: string | null | undefined;

    /**
     * Page number for pagination of watched topics results.
     *
     * Page numbers start at 1. When null or omitted, defaults to page 1.
     * Used in conjunction with limit to navigate through paginated result
     * sets.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of watched topic records to return per page.
     *
     * Allowed values: 1-100 records per page. Default is typically 20 for
     * efficient browsing. Users with extensive watch lists benefit from
     * pagination controls.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;
  };
}
