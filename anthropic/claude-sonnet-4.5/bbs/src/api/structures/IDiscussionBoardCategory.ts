import { tags } from "typia";

/**
 * Complete representation of a discussion board category with full metadata and
 * configuration.
 *
 * Categories provide the foundational organizational structure for classifying
 * discussion topics into Economics and Politics domains, supporting
 * hierarchical structures with parent-child relationships. This type includes
 * all category properties for detailed viewing, administrative management, and
 * category configuration.
 *
 * Categories enable users to browse organized discussions and administrators to
 * manage the discussion board's organizational structure.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardCategory = {
  /**
   * Unique identifier for the discussion board category.
   *
   * This UUID serves as the primary key for category records and is used
   * throughout the system for category references, topic categorization, and
   * hierarchical relationships.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Category name displayed throughout the platform.
   *
   * Examples include 'Economics', 'Macroeconomics', 'Politics',
   * 'International Relations'. The name must be unique across all categories
   * and is used in navigation menus, category selection interfaces, and
   * content organization displays.
   *
   * Length constraint: 3-50 characters as defined in business rules.
   */
  name: string;

  /**
   * URL-friendly identifier derived from the category name.
   *
   * Used for clean, readable category URLs (e.g.,
   * '/category/macroeconomics'). Must be unique for proper routing. Lowercase
   * alphanumeric with hyphens only.
   */
  slug: string;

  /**
   * Detailed explanation of the category's purpose and scope.
   *
   * Helps users understand what discussion topics belong in this category.
   * Displayed on category pages and selection interfaces to guide appropriate
   * category usage.
   *
   * Optional but recommended for user clarity in determining correct category
   * assignment for their discussion topics.
   */
  description: string | null;

  /**
   * Reference to the parent category for hierarchical organization.
   *
   * Null for top-level categories (Economics, Politics). Contains UUID
   * reference to parent category for subcategories (e.g., Macroeconomics
   * references Economics as parent).
   *
   * Enables multi-level category taxonomy for organizing economic and
   * political discussion topics into logical hierarchies.
   */
  parent_category_id: (string & tags.Format<"uuid">) | null;

  /**
   * Controls the order in which categories appear in listings and navigation
   * menus.
   *
   * Lower numbers appear first, enabling administrators to prioritize
   * category display. For example, Economics=1, Politics=2 ensures Economics
   * appears before Politics in category lists.
   *
   * Allows custom organization beyond alphabetical sorting.
   */
  display_order: number & tags.Type<"int32">;

  /**
   * Indicates whether the category is currently visible and available for
   * use.
   *
   * When true, the category appears in category selection interfaces and
   * accepts new topic assignments. When false, the category is hidden from
   * user-facing selection but existing topics remain accessible.
   *
   * Allows temporary disabling without deletion, supporting graceful category
   * phase-out.
   */
  is_active: boolean;

  /**
   * Number of discussion topics currently assigned to this category.
   *
   * Updated when topics are created or deleted. Used for displaying category
   * activity levels and helping users identify active discussion areas.
   *
   * Maintained via application logic or database triggers. Default value is 0
   * for newly created categories.
   */
  topic_count: number & tags.Type<"int32">;

  /**
   * Timestamp when the category was created in the system.
   *
   * Used for audit trail and tracking category establishment history.
   * Automatically set on record creation.
   *
   * Provides temporal context for category lifecycle management.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the most recent modification to category information.
   *
   * Records when name, description, status, display order, or other category
   * properties were last changed. Used for audit trail and change tracking.
   *
   * Automatically updated on record modification.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardCategory {
  /**
   * Request parameters for searching and filtering discussion board
   * categories with pagination and sorting.
   *
   * Supports advanced category discovery through text search, hierarchical
   * filtering, status filtering, and multiple sorting options. Enables
   * efficient category browsing for topic creation workflows, administrative
   * category management, and category exploration interfaces.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve. Page numbering starts at
     * 1. If not provided, defaults to page 1.
     *
     * Used in conjunction with limit to implement pagination for large
     * category lists.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of category records to return per page.
     *
     * Controls page size for pagination. If not provided, defaults to 25
     * items per page. Maximum value is 100 to prevent excessive data
     * transfer.
     *
     * Allows users to customize list density based on their preferences and
     * use cases.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Text search query for finding categories by name or description.
     *
     * Supports full-text search using PostgreSQL trigram indexing for fuzzy
     * matching. Searches across category name and description fields.
     *
     * Example: 'macro' matches 'Macroeconomics' category.
     */
    search?: string | null | undefined;

    /**
     * Filter categories by parent category relationship.
     *
     * When provided, returns only categories that are children of the
     * specified parent category. When null or omitted, returns all
     * categories regardless of hierarchy.
     *
     * Useful for navigating category hierarchy and displaying
     * subcategories.
     */
    parent_category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter categories by active status.
     *
     * When true, returns only active categories available for use. When
     * false, returns only inactive categories. When null or omitted,
     * returns all categories regardless of status.
     *
     * Helps administrators identify categories available for topic
     * assignment versus disabled categories.
     */
    is_active?: boolean | null | undefined;

    /**
     * Field to sort results by.
     *
     * Supported values:
     *
     * - Display_order: Administrative ordering (default)
     * - Topic_count: Number of topics in category (most active first)
     * - Name: Alphabetical ordering
     * - Created_at: Creation timestamp (newest first)
     *
     * If not provided, defaults to display_order.
     */
    sort_by?:
      | "display_order"
      | "topic_count"
      | "name"
      | "created_at"
      | null
      | undefined;

    /**
     * Sort direction for ordering results.
     *
     * Supported values:
     *
     * - Asc: Ascending order (A-Z, 0-9, oldest-newest)
     * - Desc: Descending order (Z-A, 9-0, newest-oldest)
     *
     * If not provided, defaults to ascending except for topic_count which
     * defaults to descending.
     */
    sort_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Summary representation of a discussion board category optimized for list
   * displays and category selection interfaces.
   *
   * This type provides essential category information for category browsing,
   * topic creation workflows, and navigation menus without the full detail
   * required for category management. It includes the category's identity,
   * name, hierarchical position, display configuration, and activity
   * metrics.
   *
   * Categories provide the foundational organizational structure for
   * classifying discussion topics into Economics and Politics domains,
   * supporting hierarchical structures with parent-child relationships.
   */
  export type ISummary = {
    /**
     * Unique identifier for the discussion board category.
     *
     * This UUID serves as the primary key for category records and is used
     * throughout the system for category references, topic categorization,
     * and hierarchical relationships.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Category name displayed throughout the platform.
     *
     * Examples include 'Economics', 'Macroeconomics', 'Politics',
     * 'International Relations'. The name must be unique across all
     * categories and is used in navigation menus, category selection
     * interfaces, and content organization displays.
     *
     * Length constraint: 3-50 characters as defined in business rules.
     */
    name: string;

    /**
     * URL-friendly identifier derived from the category name.
     *
     * Used for clean, readable category URLs (e.g.,
     * '/category/macroeconomics'). Must be unique for proper routing.
     * Lowercase alphanumeric with hyphens only.
     */
    slug: string;

    /**
     * Reference to the parent category for hierarchical organization.
     *
     * Null for top-level categories (Economics, Politics). Contains UUID
     * reference to parent category for subcategories (e.g., Macroeconomics
     * references Economics as parent).
     *
     * Enables multi-level category taxonomy for organizing economic and
     * political discussion topics into logical hierarchies.
     */
    parent_category_id: (string & tags.Format<"uuid">) | null;

    /**
     * Controls the order in which categories appear in listings and
     * navigation menus.
     *
     * Lower numbers appear first, enabling administrators to prioritize
     * category display. For example, Economics=1, Politics=2 ensures
     * Economics appears before Politics in category lists.
     *
     * Allows custom organization beyond alphabetical sorting.
     */
    display_order: number & tags.Type<"int32">;

    /**
     * Indicates whether the category is currently visible and available for
     * use.
     *
     * When true, the category appears in category selection interfaces and
     * accepts new topic assignments. When false, the category is hidden
     * from user-facing selection but existing topics remain accessible.
     *
     * Allows temporary disabling without deletion, supporting graceful
     * category phase-out.
     */
    is_active: boolean;

    /**
     * Number of discussion topics currently assigned to this category.
     *
     * Updated when topics are created or deleted. Used for displaying
     * category activity levels and helping users identify active discussion
     * areas.
     *
     * Maintained via application logic or database triggers. Default value
     * is 0 for newly created categories.
     */
    topic_count: number & tags.Type<"int32">;
  };

  /**
   * Input data for creating a new discussion board category.
   *
   * Contains all required information to establish a new category in the
   * organizational taxonomy including name, URL slug, optional parent
   * relationship, display position, and active status.
   *
   * This type is used by administrators during platform setup and ongoing
   * content organization management to create new categories for Economics,
   * Politics, and related subject areas.
   */
  export type ICreate = {
    /**
     * Category name to be displayed throughout the platform.
     *
     * Must be unique across all existing categories. Examples: 'Economics',
     * 'Macroeconomics', 'Politics', 'International Relations'.
     *
     * Length: 3-50 characters as enforced by business rules.
     */
    name: string & tags.MinLength<3> & tags.MaxLength<50>;

    /**
     * URL-friendly identifier for the category.
     *
     * Must be lowercase alphanumeric with hyphens only. Must be unique
     * across all categories for proper routing. Example: 'macroeconomics',
     * 'international-relations'.
     */
    slug: string & tags.Pattern<"^[a-z0-9-]+$">;

    /**
     * Detailed explanation of the category's purpose and scope.
     *
     * Helps users understand what types of discussion topics belong in this
     * category. Displayed on category pages and in selection interfaces.
     *
     * Optional but recommended for clarity in guiding users to appropriate
     * category selection.
     */
    description?: string | null | undefined;

    /**
     * Reference to parent category for creating hierarchical structure.
     *
     * Null for top-level categories (Economics, Politics). Provide UUID of
     * existing active parent category for subcategories.
     *
     * Enables multi-level taxonomy: Economics > Macroeconomics, Politics >
     * International Relations.
     */
    parent_category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Position of this category in display listings.
     *
     * Lower numbers appear first in navigation menus and category lists.
     * Allows administrators to prioritize important categories.
     *
     * Example: Economics=1, Politics=2, Current Events=3
     */
    display_order: number & tags.Type<"int32"> & tags.Minimum<0>;

    /**
     * Whether the category should be immediately active and available for
     * use.
     *
     * True makes the category visible in selection interfaces. False
     * creates an inactive category that can be activated later.
     *
     * Default recommendation: true for immediate availability.
     */
    is_active: boolean;
  };

  /**
   * Update data for modifying an existing discussion board category.
   *
   * All fields are optional - only include fields that are being changed.
   * Supports updating category name, slug, description, parent relationship,
   * display order, and active status.
   *
   * Enables administrators to maintain and refine the category taxonomy as
   * the platform evolves and discussion topics change.
   */
  export type IUpdate = {
    /**
     * Updated category name if being modified.
     *
     * Must remain unique across all categories. If provided, must meet
     * length requirements (3-50 characters).
     *
     * Omit this field if not changing the category name.
     */
    name?: (string & tags.MinLength<3> & tags.MaxLength<50>) | null | undefined;

    /**
     * Updated URL-friendly identifier if being modified.
     *
     * Must remain unique and follow slug format (lowercase alphanumeric
     * with hyphens). Changing the slug affects category URLs.
     *
     * Omit this field if not changing the URL slug.
     */
    slug?: (string & tags.Pattern<"^[a-z0-9-]+$">) | null | undefined;

    /**
     * Updated category description if being modified.
     *
     * Provide new description text to clarify category purpose or null to
     * clear existing description.
     *
     * Omit this field to keep current description unchanged.
     */
    description?: string | null | undefined;

    /**
     * Updated parent category reference to reorganize hierarchy.
     *
     * Provide UUID of new parent category to change hierarchical position,
     * or null to make this a top-level category. Must not create circular
     * references.
     *
     * Omit this field to maintain current parent relationship.
     */
    parent_category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Updated display position if being modified.
     *
     * Lower numbers appear first in listings. Change this to reorder
     * categories in navigation menus.
     *
     * Omit this field to maintain current display position.
     */
    display_order?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | null
      | undefined;

    /**
     * Updated active status if being modified.
     *
     * Set to false to temporarily disable category without deletion. Set to
     * true to reactivate a disabled category.
     *
     * Omit this field to maintain current active status.
     */
    is_active?: boolean | null | undefined;
  };

  /**
   * Lightweight category information for display in topic summaries.
   *
   * This schema provides essential category identification without the full
   * category details like description, display order, or topic counts. It's
   * optimized for inclusion in topic summary objects where only basic
   * category context is needed.
   *
   * Categories are the foundational organizational structure for the
   * discussion board, classifying topics into Economics and Politics domains
   * with hierarchical subcategories.
   */
  export type ITopicCategory = {
    /**
     * Unique identifier of the category.
     *
     * References discussion_board_categories.id in the database.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Category name displayed throughout the platform.
     *
     * Examples include 'Economics', 'Macroeconomics', 'Politics',
     * 'International Relations'. Must be unique across all categories and
     * between 3-50 characters.
     */
    name: string;

    /**
     * URL-friendly identifier derived from category name.
     *
     * Used for clean, readable category URLs (e.g.,
     * '/category/macroeconomics'). Lowercase alphanumeric with hyphens.
     */
    slug: string;
  };
}
