import { tags } from "typia";

/**
 * Comprehensive audit record of a login attempt.
 *
 * Represents a single authentication attempt on the discussion board platform,
 * capturing both successful logins and failed authentication attempts. The
 * login history provides an immutable audit trail for security monitoring,
 * breach detection, and user account activity review.
 *
 * Each login history entry records detailed information about the
 * authentication attempt including the email address used, success/failure
 * status, device and browser information, IP address, approximate geographic
 * location, and failure reasons for unsuccessful attempts. This comprehensive
 * logging enables detection of suspicious patterns such as brute force attacks,
 * credential stuffing, and unauthorized access attempts.
 *
 * The login history supports critical security features including account
 * lockout protection after repeated failed attempts (5 failures within 15
 * minutes triggers 30-minute lockout), security alerts for logins from new
 * devices or locations, and user-facing login history displays that help
 * members monitor their account security.
 *
 * Login history records are append-only and never modified, ensuring audit
 * trail integrity. The system retains the last 30 days of login history for
 * each user, providing sufficient data for security analysis while managing
 * storage efficiently.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardLoginHistory = {
  /**
   * Unique identifier of the login history record.
   *
   * This UUID serves as the primary key for the login attempt audit entry in
   * the discussion_board_login_history table, uniquely identifying each
   * authentication attempt for security analysis and audit purposes.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the member account associated with this login attempt.
   *
   * Links to discussion_board_members.id. Null if the login attempt was for a
   * moderator or administrator account. This field identifies which member
   * account was targeted by the authentication attempt, whether successful or
   * failed.
   */
  discussion_board_member_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Reference to the moderator account associated with this login attempt.
   *
   * Links to discussion_board_moderators.id. Null if the login attempt was
   * for a member or administrator account. This field identifies which
   * moderator account was targeted by the authentication attempt.
   */
  discussion_board_moderator_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Reference to the administrator account associated with this login
   * attempt.
   *
   * Links to discussion_board_administrators.id. Null if the login attempt
   * was for a member or administrator account. This field identifies which
   * administrator account was targeted by the authentication attempt.
   */
  discussion_board_administrator_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Email address used in the login attempt.
   *
   * Stored for both successful and failed attempts to enable security
   * analysis. Tracking failed login attempts with email addresses helps
   * detect brute force attacks, credential stuffing attempts, and account
   * enumeration attacks where attackers test email addresses to find valid
   * accounts.
   */
  email_attempted: string;

  /**
   * Whether the login attempt was successful.
   *
   * True indicates the credentials were valid and authentication succeeded,
   * resulting in session creation. False indicates authentication failed due
   * to incorrect password, account lockout, suspension, unverified email, or
   * other authentication barriers.
   */
  is_successful: boolean;

  /**
   * Reason for login failure if the attempt was unsuccessful.
   *
   * Null for successful logins. Possible values include: 'incorrect_password'
   * (wrong password provided), 'account_locked' (too many failed attempts),
   * 'account_suspended' (user temporarily suspended), 'email_not_verified'
   * (email verification incomplete), 'account_not_found' (invalid email),
   * 'account_banned' (permanently banned account). Helps users and
   * administrators understand authentication failures.
   */
  failure_reason?: string | null | undefined;

  /**
   * IP address from which the login attempt was made.
   *
   * Critical for security monitoring, geographic analysis, and identifying
   * suspicious patterns. Administrators use IP addresses to detect
   * coordinated attacks, identify compromised accounts accessed from unusual
   * locations, and implement IP-based security measures.
   */
  ip_address: string;

  /**
   * Type of device used for the login attempt.
   *
   * Examples: Desktop, Mobile, Tablet. Extracted from the user agent string
   * to help users identify login attempts from specific device types and
   * detect unfamiliar devices accessing their accounts.
   */
  device_type: string;

  /**
   * Browser name and version information.
   *
   * Examples: Chrome 120.0, Firefox 121.0, Safari 17.0. Helps users identify
   * login attempts from specific browsers and detect unfamiliar or suspicious
   * browser usage patterns in their account activity.
   */
  browser_info: string;

  /**
   * Approximate geographic location based on IP address.
   *
   * Provides city-level precision such as 'London, UK' or 'New York, USA'.
   * May be null if location cannot be determined from the IP address. Helps
   * users verify that login attempts originated from expected geographic
   * regions and identify unauthorized access from unusual locations.
   */
  location?: string | null | undefined;

  /**
   * Timestamp when the login attempt occurred.
   *
   * Records the exact moment of the authentication attempt. Used for security
   * timeline analysis, identifying attack patterns over time, correlating
   * multiple related login attempts, and displaying chronological login
   * history to users for account security review.
   */
  created_at: string & tags.Format<"date-time">;
};
