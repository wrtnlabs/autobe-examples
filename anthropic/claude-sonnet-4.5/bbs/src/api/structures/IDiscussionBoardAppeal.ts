import { tags } from "typia";

/**
 * Complete appeal record for members contesting moderation decisions.
 *
 * Represents formal challenges to moderation actions including warnings,
 * suspensions, bans, and content removals. Appeals provide users with recourse
 * through administrator review when they believe moderation decisions were
 * unfair or incorrect, supporting the platform's commitment to transparent and
 * accountable content governance.
 *
 * The appeal process allows members to present their case with detailed
 * explanations and supporting evidence, which administrators review with full
 * moderation context to uphold, reverse, or modify the original decision.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAppeal = {
  /**
   * Unique identifier of the appeal record.
   *
   * This primary key uniquely identifies each appeal submission in the system
   * and is used for referencing specific appeals in review workflows and
   * status tracking.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's written explanation of why the moderation decision should be
   * reversed.
   *
   * Required text between 100 and 1000 characters where the member presents
   * their case for why the moderation action was unfair, incorrect, or
   * disproportionate. This substantive explanation is the core of the appeal
   * and is reviewed by administrators when making decisions.
   */
  appeal_explanation: string;

  /**
   * Optional additional context or evidence the user provides to support
   * their appeal.
   *
   * Supplementary information, links to relevant discussions, or clarifying
   * context that strengthens the appeal case. This field allows users to
   * provide supporting details beyond the main explanation.
   */
  additional_evidence?: string | undefined;

  /**
   * Current status of the appeal in the review workflow.
   *
   * Indicates where the appeal is in the processing pipeline: pending_review
   * (awaiting administrator assignment), under_review (actively being
   * evaluated), approved (decision reversed), denied (original decision
   * upheld), or modified (partial reversal with adjusted penalties).
   */
  status: string;

  /**
   * Administrator's decision on the appeal outcome.
   *
   * The final ruling made by the reviewing administrator: uphold_original
   * (deny appeal), reverse_decision (approve appeal), or modify_penalty
   * (partial approval with adjusted consequences). Nullable until the appeal
   * is resolved.
   */
  decision?: string | undefined;

  /**
   * Detailed explanation from administrator about why the appeal was
   * approved, denied, or modified.
   *
   * Required minimum 50-character explanation providing transparency about
   * the administrator's decision-making process. This reasoning helps the
   * appellant understand the outcome and demonstrates fair review
   * procedures.
   */
  decision_reasoning?: string | undefined;

  /**
   * Description of any corrective actions taken if appeal was approved.
   *
   * Documents specific remedial steps taken when an appeal is granted, such
   * as content restoration, warning removal, suspension lift, ban reversal,
   * or reputation adjustment. Nullable for denied appeals or when no action
   * is required.
   */
  corrective_action_taken?: string | undefined;

  /**
   * Timestamp when the user submitted the appeal.
   *
   * Records the precise moment the appeal was created, used for tracking
   * review timeline compliance with target response times (7 days for
   * warnings, 3 days for suspensions, 14 days for bans).
   */
  submitted_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the administrator completed their review and made a
   * decision.
   *
   * Records when the appeal was resolved, used for measuring review
   * processing time and ensuring compliance with appeal timeline
   * requirements. Nullable until the appeal is decided.
   */
  reviewed_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Timestamp when the appeal record was created in the system.
   *
   * Auto-generated timestamp marking appeal creation, used for audit trail
   * and chronological tracking of appeal submissions.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the appeal record was last modified.
   *
   * Tracks the most recent update to the appeal, whether status changes,
   * administrator assignment, decision recording, or appeal explanation
   * updates by the member before review.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardAppeal {
  /**
   * Request body for creating a new appeal to contest a moderation decision.
   *
   * Contains the moderation decision being appealed (warning, suspension,
   * ban, or moderation action), the member's detailed written explanation of
   * why the decision should be reversed, and optional supporting evidence.
   * The creation request validates that the decision is appealable, within
   * the appeal window, and has not already been appealed.
   */
  export type ICreate = {
    /**
     * Moderation action being appealed.
     *
     * References discussion_board_moderation_actions.id of the specific
     * moderation decision the user is contesting. Optional when the appeal
     * targets a specific warning, suspension, or ban record directly.
     */
    appealed_moderation_action_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Warning being appealed.
     *
     * References discussion_board_warnings.id when the appeal contests a
     * formal warning issued to the member. Optional when appealing other
     * moderation decision types.
     */
    appealed_warning_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Suspension being appealed.
     *
     * References discussion_board_suspensions.id when the appeal contests a
     * temporary account suspension. Optional when appealing other
     * moderation decision types.
     */
    appealed_suspension_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Ban being appealed.
     *
     * References discussion_board_bans.id when the appeal contests a
     * permanent account ban. Only applies to bans marked as appealable.
     * Optional when appealing other moderation decision types.
     */
    appealed_ban_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * User's written explanation of why the moderation decision should be
     * reversed.
     *
     * Required substantive text between 100 and 1000 characters presenting
     * the member's case for why the moderation action was unfair,
     * incorrect, or disproportionate. Must provide meaningful arguments
     * rather than personal attacks on moderators.
     */
    appeal_explanation: string;

    /**
     * Optional additional context or evidence supporting the appeal.
     *
     * Supplementary information, references to relevant discussions,
     * clarifying context, or other evidence that strengthens the appeal
     * case beyond the main explanation.
     */
    additional_evidence?: string | undefined;
  };

  /**
   * Request body for updating an existing appeal submission.
   *
   * Allows members to modify their appeal explanation and additional evidence
   * while the appeal is in pending_review status. All fields are optional,
   * enabling partial updates. Appeals cannot be modified once they enter
   * under_review or resolved states.
   */
  export type IUpdate = {
    /**
     * Updated written explanation of why the moderation decision should be
     * reversed.
     *
     * Revised substantive text between 100 and 1000 characters allowing the
     * member to strengthen their appeal arguments or provide additional
     * context before administrator review. Must maintain quality
     * standards.
     */
    appeal_explanation?: string | undefined;

    /**
     * Updated additional context or evidence supporting the appeal.
     *
     * Revised or expanded supplementary information that strengthens the
     * appeal case. Members can add new evidence or clarify existing
     * evidence before the appeal enters administrator review.
     */
    additional_evidence?: string | undefined;
  };

  /**
   * Request parameters for searching and filtering appeals submitted by
   * members contesting moderation decisions.
   *
   * This request structure supports comprehensive appeal queue management,
   * enabling users to search their own appeal history and administrators to
   * manage the complete appeal review workflow. The filtering and pagination
   * capabilities ensure efficient navigation through appeal submissions while
   * providing powerful search tools for finding specific appeals or analyzing
   * appeal patterns.
   *
   * All filter parameters are optional, allowing users to retrieve all
   * appeals or apply selective criteria. Multiple filters can be combined to
   * create highly specific queries such as finding all approved appeals
   * submitted by a specific member within a date range.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Specifies which page of results to retrieve from the filtered appeal
     * list. Starts at 1 for the first page and increments for subsequent
     * pages.
     *
     * Used in conjunction with limit to navigate through large result sets
     * of appeals submitted by members contesting moderation decisions.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of appeal records to return per page.
     *
     * Controls the page size for pagination, allowing administrators to
     * configure how many appeals are displayed at once. Default is
     * typically 25 records per page.
     *
     * Higher limits reduce the number of page requests but increase
     * response payload size. Maximum allowed is 100 appeals per page.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Filter appeals by their current review status.
     *
     * Allows filtering the appeal list to show only appeals in specific
     * workflow states including pending_review (newly submitted awaiting
     * administrator assignment), under_review (actively being investigated
     * by an administrator), approved (appeal granted with decision
     * reversed), denied (appeal rejected with original decision upheld), or
     * modified (partial appeal grant with adjusted penalties).
     *
     * Supports multiple status selection to view appeals in combined
     * states.
     */
    status?: string | undefined;

    /**
     * Filter appeals by the member who submitted them.
     *
     * Specifies the unique identifier of the member whose appeals should be
     * retrieved. This filter restricts results to appeals submitted by a
     * specific user.
     *
     * For regular members accessing their own appeals, this filter is
     * automatically applied to their user ID for security. For
     * administrators, this filter enables reviewing all appeals from a
     * specific member to analyze their moderation history.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter appeals by the administrator assigned to review them.
     *
     * Specifies the unique identifier of the administrator currently
     * handling or who handled the appeal. This filter helps administrators
     * track appeals assigned to specific team members.
     *
     * Useful for workload distribution analysis, reviewing specific
     * administrator's appeal decisions, and identifying unassigned appeals
     * (null value) that require assignment.
     */
    reviewing_administrator_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter appeals by the final decision outcome.
     *
     * Allows filtering by administrator decisions including uphold_original
     * (original moderation decision maintained), reverse_decision
     * (moderation action completely reversed), or modify_penalty (partial
     * reversal with adjusted consequences).
     *
     * Only applies to resolved appeals where a decision has been rendered.
     * Pending and under-review appeals have null decision values.
     */
    decision?: string | undefined;

    /**
     * Start date for filtering appeals by submission timestamp.
     *
     * Specifies the beginning of the date range for appeal submissions.
     * Only appeals submitted on or after this timestamp are included in
     * results.
     *
     * Used with submitted_to to create bounded date range queries for
     * temporal analysis of appeal patterns.
     */
    submitted_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End date for filtering appeals by submission timestamp.
     *
     * Specifies the end of the date range for appeal submissions. Only
     * appeals submitted on or before this timestamp are included in
     * results.
     *
     * Combined with submitted_from to analyze appeals within specific time
     * periods.
     */
    submitted_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field to sort appeal results by.
     *
     * Supports sorting by submitted_at (submission timestamp for
     * chronological order), reviewed_at (review completion timestamp),
     * status (workflow state), or decision (outcome type).
     *
     * Determines the primary ordering criterion for result presentation.
     */
    sort_by?: string | undefined;

    /**
     * Sort direction for ordered results.
     *
     * Specifies ascending (asc) or descending (desc) order for the sort_by
     * field. Descending order shows newest or highest values first, while
     * ascending shows oldest or lowest values first.
     *
     * Default is typically descending for timestamp-based sorting to show
     * most recent appeals first.
     */
    sort_order?: "asc" | "desc" | undefined;
  };
}
