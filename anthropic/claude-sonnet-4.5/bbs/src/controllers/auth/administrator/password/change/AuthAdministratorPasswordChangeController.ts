import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdministratorPasswordChange } from "../../../../../providers/postAuthAdministratorPasswordChange";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";

import { IDiscussionBoardAdministrator } from "../../../../../api/structures/IDiscussionBoardAdministrator";

@Controller("/auth/administrator/password/change")
export class AuthAdministratorPasswordChangeController {
  /**
   * Change administrator password with current password verification.
   *
   * Allows an authenticated administrator to change their password by providing
   * the current password for verification and submitting a new password meeting
   * security complexity requirements.
   *
   * The password change process requires the administrator to be authenticated
   * with a valid JWT token containing administrator role privileges. The
   * operation validates the current password against the password_hash field in
   * the discussion_board_administrators table using bcrypt comparison to
   * prevent unauthorized password changes if the session is compromised or the
   * device is accessed by another person.
   *
   * The new password must meet all security requirements: minimum 8 characters,
   * at least one uppercase letter, one lowercase letter, one number, and one
   * special character. The system validates the new password differs from the
   * current password_hash to enforce password rotation, checks the new password
   * does not match any of the previous 3 passwords if password history is
   * maintained, and verifies the new password is not in the common/breached
   * password database.
   *
   * Upon successful validation, the system hashes the new password using bcrypt
   * with minimum cost factor 12 and updates the password_hash field in the
   * discussion_board_administrators table. To maintain session security, the
   * system revokes all existing sessions in the discussion_board_sessions table
   * by setting is_active to false for all sessions where
   * discussion_board_administrator_id matches the current administrator, with
   * the exception of the current session to prevent immediate logout.
   *
   * All associated refresh tokens in discussion_board_refresh_tokens are marked
   * as is_revoked true with revoked_at timestamp set, forcing re-authentication
   * on all other devices (desktop, mobile, tablet sessions). This prevents
   * potential attackers from maintaining access if the password change was
   * initiated due to security concerns or suspected compromise.
   *
   * The system sends a confirmation email to the administrator's email address
   * from the discussion_board_administrators table notifying them of the
   * password change, including timestamp, IP address from the request, device
   * information, and a warning that if they did not make this change they
   * should contact support immediately. The email includes a link to secure
   * account recovery if unauthorized access is suspected.
   *
   * The operation logs the password change event in
   * discussion_board_security_logs with event_type 'password_changed', severity
   * 'high', ip_address, user_agent, and metadata containing the administrator
   * ID and timestamp. This creates a complete audit trail for security
   * monitoring and compliance with the security logging requirements defined in
   * the security documentation.
   *
   * @param connection
   * @param body Password change request containing current password for
   *   verification, new password, and new password confirmation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async changePassword(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussionBoardAdministrator.IChangePassword,
  ): Promise<IDiscussionBoardAdministrator.IChangePasswordResult> {
    try {
      return await postAuthAdministratorPasswordChange({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
