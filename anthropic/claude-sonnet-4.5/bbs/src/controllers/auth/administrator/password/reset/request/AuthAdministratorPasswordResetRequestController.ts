import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdministratorPasswordResetRequest } from "../../../../../../providers/postAuthAdministratorPasswordResetRequest";

import { IDiscussionBoardAdministrator } from "../../../../../../api/structures/IDiscussionBoardAdministrator";

@Controller("/auth/administrator/password/reset/request")
export class AuthAdministratorPasswordResetRequestController {
  /**
   * Request password reset for administrator account.
   *
   * Initiates the password reset workflow for an administrator who has
   * forgotten their password by generating a time-limited reset token and
   * sending password reset instructions via email.
   *
   * The password reset request process accepts the administrator's email
   * address as the sole identifier. The system searches the
   * discussion_board_administrators table for a matching email address, but
   * implements enumeration protection by always returning a success message
   * regardless of whether an account exists with that email, preventing
   * attackers from determining which email addresses are registered
   * administrators.
   *
   * If a matching administrator account is found, the system generates a
   * cryptographically random reset token (minimum 32 bytes for security) and
   * creates a password reset record in the discussion_board_password_resets
   * table. This record includes discussion_board_administrator_id referencing
   * the administrator, reset_token_hash containing the hashed token (never
   * storing plain tokens), email field for verification, is_used set to false,
   * and expires_at timestamp set to 15 minutes from creation for security
   * compliance.
   *
   * The system sends a password reset email to the administrator's verified
   * email address containing the unique reset link with the embedded token,
   * expiration time warning (15 minutes), instructions that the link can only
   * be used once, and security guidance to ignore the email if not requested.
   * The email references the discussion_board_administrators table's email
   * field for delivery.
   *
   * Rate limiting is enforced to prevent abuse: maximum 3 reset requests per
   * email address per hour, and maximum 10 reset requests per IP address per
   * hour. Excessive reset requests are logged in discussion_board_security_logs
   * with event_type 'password_reset_abuse' and severity 'medium' for security
   * monitoring.
   *
   * The operation always returns a success response stating "If an account
   * exists for that email, a password reset link has been sent" to prevent
   * revealing account existence while providing helpful guidance to legitimate
   * administrators who may have mistyped their email address.
   *
   * @param connection
   * @param body Password reset request containing the administrator's email
   *   address for token generation and delivery
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IDiscussionBoardAdministrator.IResetRequest,
  ): Promise<IDiscussionBoardAdministrator.IResetRequestResult> {
    try {
      return await postAuthAdministratorPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
