import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getDiscussionBoardUsersUserIdReputation } from "../../../../providers/getDiscussionBoardUsersUserIdReputation";

import { IDiscussionBoardUserReputation } from "../../../../api/structures/IDiscussionBoardUserReputation";

@Controller("/discussionBoard/users/:userId/reputation")
export class DiscussionboardUsersReputationController {
  /**
   * Retrieve detailed reputation score and statistics for a specific user.
   *
   * Retrieves comprehensive reputation information for the specified user from
   * the discussion_board_user_reputation table. Reputation is an aggregated
   * metric representing the quality of a user's contributions as determined by
   * community voting on their discussion topics and replies.
   *
   * The reputation system calculates scores using a weighted formula: (topic
   * upvotes × 5) - (topic downvotes × 2) + (reply upvotes × 2) - (reply
   * downvotes × 1). This weighting reflects that creating discussion topics
   * requires more effort than posting replies, and thus earns more reputation
   * points per vote. The response includes the total reputation score, separate
   * scores for topics and replies, and the total upvotes and downvotes received
   * across all the user's content.
   *
   * Reputation serves multiple purposes within the platform's ecosystem. It
   * provides social proof of contribution quality, enables reputation-based
   * privilege unlocking (such as downvoting at 50 points, extended editing
   * windows at 100 points, tag creation at 500 points), determines reputation
   * tier badges displayed on user profiles and posts, and influences content
   * ranking in search and discovery algorithms for high-reputation authors.
   *
   * The reputation data is denormalized in the discussion_board_user_reputation
   * table for performance, avoiding expensive vote aggregation queries on every
   * profile view. The system updates reputation scores in real-time as votes
   * are cast, changed, or removed on the user's content. This ensures the
   * reputation display is always current and accurately reflects the user's
   * standing in the community.
   *
   * Security considerations include validating that the requested user exists
   * and that their profile visibility settings permit viewing reputation
   * information. Public profiles show reputation to all users including guests,
   * while members-only profiles restrict reputation visibility to authenticated
   * users, and private profiles may hide reputation entirely based on user
   * privacy preferences.
   *
   * This operation integrates with the voting and engagement system documented
   * in the Voting and Engagement requirements, the user profile system from the
   * User Profiles and Preferences documentation, and supports the
   * reputation-based privilege model defined in the Business Rules and
   * Validation document.
   *
   * The response provides all necessary data for displaying reputation badges,
   * calculating tier levels, showing contribution statistics on user profiles,
   * and determining if users have sufficient reputation for privilege-gated
   * actions like downvoting or advanced tagging features.
   *
   * @param connection
   * @param userId Unique identifier of the user whose reputation information is
   *   being retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardUserReputation> {
    try {
      return await getDiscussionBoardUsersUserIdReputation({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
