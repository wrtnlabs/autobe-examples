import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardAdministratorSuspensions } from "../../../../providers/postDiscussionBoardAdministratorSuspensions";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { putDiscussionBoardAdministratorSuspensionsSuspensionId } from "../../../../providers/putDiscussionBoardAdministratorSuspensionsSuspensionId";

import { IDiscussionBoardSuspension } from "../../../../api/structures/IDiscussionBoardSuspension";

@Controller("/discussionBoard/administrator/suspensions")
export class DiscussionboardAdministratorSuspensionsController {
  /**
   * Create a new temporary account suspension for a member violating community
   * guidelines.
   *
   * Creates a new temporary suspension record that restricts a member's posting
   * and engagement privileges for a specified duration. This operation is part
   * of the graduated enforcement moderation system and can only be performed by
   * administrators with appropriate permissions.
   *
   * The suspension workflow involves validating the target member's existence
   * and current account status, ensuring the issuing administrator has
   * authority to suspend users, and verifying the suspension duration falls
   * within allowed limits (1-365 days for administrators, allowing longer
   * suspensions than moderators). The operation requires detailed suspension
   * reasoning to maintain transparency and support potential appeals.
   *
   * When a suspension is created, the system immediately updates the member's
   * account_status to 'suspended', calculates the end_date based on
   * duration_days, marks the suspension as is_active=true, and invalidates all
   * of the member's active JWT tokens to prevent continued platform
   * interaction. The suspended member receives notifications through both
   * in-app and email channels explaining the suspension reason, duration,
   * expected restoration date, and information about the appeal process.
   *
   * The suspension record is linked to a corresponding moderation_action record
   * that provides complete audit trail including the original violation,
   * administrator decision, and reasoning. This ensures accountability and
   * supports the appeal review process where senior administrators can examine
   * the complete context of the suspension decision.
   *
   * Security considerations include verifying the issuing administrator's role
   * and permissions, preventing conflicts with existing suspensions, and
   * ensuring suspension durations align with the severity of violations as
   * defined in community guidelines. The operation enforces comprehensive
   * logging in the moderation audit trail for full transparency and
   * accountability.
   *
   * This operation integrates with the discussion_board_suspensions table from
   * the Prisma schema, which tracks member_id (the suspended user),
   * moderation_action_id (the triggering moderation action), administrator_id
   * (who issued the suspension), suspension_reason (detailed explanation),
   * duration_days (length of suspension), start_date and end_date (suspension
   * period), is_active (current suspension status), and timestamps for creation
   * and potential early lifting.
   *
   * @param connection
   * @param body Suspension creation information including target member,
   *   suspension duration, reason, and issuing administrator authority
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussionBoardSuspension.ICreate,
  ): Promise<IDiscussionBoardSuspension> {
    try {
      return await postDiscussionBoardAdministratorSuspensions({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing suspension record to modify duration, lift early, or
   * change suspension details.
   *
   * Modifies an existing temporary suspension record, primarily used to lift
   * suspensions early after appeal approval, extend suspension duration for
   * additional violations, or update suspension reasoning with additional
   * context. This operation supports the moderation review and appeal workflow
   * where administrators may need to adjust suspension terms.
   *
   * The update workflow validates the suspension exists and is accessible for
   * modification, verifies the requesting user has administrator permissions,
   * and ensures the requested changes are valid and appropriate. Administrators
   * have broader authority than moderators and can modify any suspension
   * regardless of who issued it, including suspensions created by other
   * administrators.
   *
   * Common update scenarios include lifting suspensions early after successful
   * appeals, extending suspensions when new violations occur during the
   * suspension period, updating suspension reasons to reflect additional
   * context or corrected information, and overriding moderator suspension
   * decisions. Administrators can extend suspension durations up to 365 days
   * compared to moderators' 30-day limit.
   *
   * When a suspension is lifted early (lifted_early=true), the system
   * immediately updates the member's account_status back to 'active', sets
   * is_active=false on the suspension record, records the lifted_at timestamp,
   * captures the lifted_reason explanation, and sends notification to the
   * suspended member informing them of their privilege restoration. The member
   * regains immediate access to create topics, post replies, and vote on
   * content.
   *
   * When a suspension duration is extended by an administrator, the system
   * recalculates the end_date based on the new duration_days value, updates the
   * suspension_reason to include the extension justification, updates the
   * administrator_id field to reflect the modifying administrator, and sends
   * updated notification to the member explaining the extension and new
   * expected restoration date.
   *
   * Security considerations include logging all administrator suspension
   * modifications in the moderation audit trail for accountability, ensuring
   * suspension changes align with community guideline severity levels,
   * maintaining referential integrity with the related moderation_action
   * record, and preventing modification of suspensions that have already
   * expired or been lifted.
   *
   * The operation integrates with the discussion_board_suspensions table from
   * the Prisma schema, updating fields such as suspension_reason,
   * duration_days, end_date, is_active, lifted_early, lifted_at, lifted_reason,
   * administrator_id, and updated_at timestamp. All modifications are tracked
   * through the comprehensive audit trail for transparency, appeal review, and
   * moderator performance evaluation.
   *
   * @param connection
   * @param suspensionId Unique identifier of the suspension record to update
   * @param body Updated suspension information including modified duration,
   *   lift status, or updated reasoning
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":suspensionId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("suspensionId")
    suspensionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardSuspension.IUpdate,
  ): Promise<IDiscussionBoardSuspension> {
    try {
      return await putDiscussionBoardAdministratorSuspensionsSuspensionId({
        administrator,
        suspensionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
