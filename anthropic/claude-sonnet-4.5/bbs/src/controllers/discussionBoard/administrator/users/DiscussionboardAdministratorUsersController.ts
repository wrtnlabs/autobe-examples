import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteDiscussionBoardAdministratorUsersUserId } from "../../../../providers/deleteDiscussionBoardAdministratorUsersUserId";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

@Controller("/discussionBoard/administrator/users/:userId")
export class DiscussionboardAdministratorUsersController {
  /**
   * Permanently delete a user account and all associated data from the
   * discussion board.
   *
   * This operation permanently removes a user account from the
   * discussion_board_members table along with all associated data. When
   * executed, the system performs a hard delete that completely removes the
   * member record from the database.
   *
   * The deletion cascades to all related entities through the foreign key
   * relationships defined in the Prisma schema. This includes all user
   * sessions, login history, password reset tokens, discussion topics authored
   * by the user, replies posted by the user, votes cast by the user, favorited
   * topics, followed tags, watched topics, blocking relationships, reputation
   * records, content reports submitted, moderation actions targeting the user,
   * warnings, suspensions, any active bans, appeals, notifications, audit logs,
   * and security logs associated with the user account.
   *
   * This operation is irreversible and results in complete data loss for the
   * user account. It should only be executed when a user explicitly requests
   * permanent account deletion or when an administrator determines that
   * complete account removal is necessary. Before executing this operation, the
   * system should present clear warnings to the user about the permanent nature
   * of the deletion and the inability to recover the account or data
   * afterward.
   *
   * This operation requires administrator privileges as it represents a
   * critical account management function with permanent consequences. The
   * userId parameter must correspond to an existing member in the
   * discussion_board_members table. If the specified user does not exist, the
   * operation will fail with an appropriate error message.
   *
   * @param connection
   * @param userId Unique identifier of the user account to be permanently
   *   deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdministratorUsersUserId({
        administrator,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
