import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardAdministratorCategories } from "../../../../providers/postDiscussionBoardAdministratorCategories";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { putDiscussionBoardAdministratorCategoriesCategoryId } from "../../../../providers/putDiscussionBoardAdministratorCategoriesCategoryId";

import { IDiscussionBoardCategory } from "../../../../api/structures/IDiscussionBoardCategory";

@Controller("/discussionBoard/administrator/categories")
export class DiscussionboardAdministratorCategoriesController {
  /**
   * Create a new discussion board category for organizing economic and
   * political topics.
   *
   * Creates a new category in the discussion board's organizational taxonomy.
   * Categories provide the primary structure for organizing economic and
   * political discussions, enabling users to browse topics by subject area and
   * helping maintain clear content organization.
   *
   * This operation is restricted to administrators who have the authority to
   * define and manage the platform's content structure. The created category
   * can be either a top-level category (such as Economics or Politics) or a
   * subcategory nested under an existing parent category (such as
   * Macroeconomics under Economics, or International Relations under
   * Politics).
   *
   * The category creation process validates that the category name is unique
   * across all existing categories and that the slug (URL-friendly identifier)
   * does not conflict with existing categories. If a parent category is
   * specified, the system verifies that the parent exists and is active before
   * creating the nested relationship.
   *
   * Once created, the category becomes immediately available for selection when
   * users create new discussion topics. The display_order field controls the
   * position of this category in navigation menus and category lists, allowing
   * administrators to prioritize important categories. The is_active flag
   * allows administrators to temporarily disable categories without deletion,
   * preserving existing topics while preventing new topic creation in that
   * category.
   *
   * The category's topic_count field is initialized to 0 and will be
   * automatically incremented as topics are assigned to this category. This
   * denormalized count supports efficient display of category activity levels
   * without expensive aggregation queries.
   *
   * Security considerations include ensuring only administrators can create
   * categories, preventing duplicate category names or slugs, and validating
   * that parent_category_id references an existing, active category if
   * provided. The operation maintains referential integrity and updates the
   * category hierarchy relationships immediately.
   *
   * @param connection
   * @param body Category creation data including name, optional parent
   *   category, description, display order, and active status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussionBoardCategory.ICreate,
  ): Promise<IDiscussionBoardCategory> {
    try {
      return await postDiscussionBoardAdministratorCategories({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing discussion board category's properties and hierarchy.
   *
   * Updates an existing category's information in the discussion board's
   * organizational taxonomy. This operation allows administrators to modify
   * category properties including name, description, parent category
   * relationship, display order, and active status.
   *
   * Administrators use this operation to maintain and refine the category
   * structure as the platform evolves. Common update scenarios include renaming
   * categories for clarity, adjusting the category hierarchy by changing parent
   * relationships, reordering categories to reflect priority or usage patterns,
   * updating descriptions to better guide users, and activating or deactivating
   * categories based on community needs.
   *
   * The operation performs several critical validations before applying
   * updates. If the category name is being changed, the system verifies that
   * the new name is unique across all categories. If the slug is being updated,
   * uniqueness is validated to prevent routing conflicts. When the
   * parent_category_id is modified to create or change hierarchical
   * relationships, the system verifies that the new parent category exists, is
   * active, and that the change does not create circular references (a category
   * cannot be its own ancestor).
   *
   * Changing the is_active status from true to false effectively hides the
   * category from user-facing category selection interfaces while preserving
   * all existing topics assigned to that category. This allows administrators
   * to phase out categories gracefully without disrupting existing discussions.
   * Reactivating a category (is_active from false to true) immediately makes it
   * available for new topic creation again.
   *
   * The display_order field can be modified to reposition categories in
   * navigation menus and listing displays. Lower values appear first, allowing
   * administrators to prioritize frequently used or strategically important
   * categories.
   *
   * Updating a category does not automatically update the updated_at timestamp
   * of topics within that category, maintaining accurate topic modification
   * history. The category's own updated_at timestamp is set to the current time
   * when any field is modified.
   *
   * Security considerations include verifying administrator role authorization,
   * preventing changes that would violate referential integrity (such as
   * setting a parent that creates circular dependencies), and ensuring category
   * uniqueness constraints are maintained. The operation logs all category
   * modifications in the audit trail for administrative accountability.
   *
   * @param connection
   * @param categoryId Unique identifier of the category to update
   * @param body Updated category information including name, description,
   *   parent category, display order, and active status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardCategory.IUpdate,
  ): Promise<IDiscussionBoardCategory> {
    try {
      return await putDiscussionBoardAdministratorCategoriesCategoryId({
        administrator,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
