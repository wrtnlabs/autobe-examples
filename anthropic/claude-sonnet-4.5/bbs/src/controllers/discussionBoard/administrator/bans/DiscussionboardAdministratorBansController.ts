import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardAdministratorBans } from "../../../../providers/postDiscussionBoardAdministratorBans";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchDiscussionBoardAdministratorBans } from "../../../../providers/patchDiscussionBoardAdministratorBans";
import { getDiscussionBoardAdministratorBansBanId } from "../../../../providers/getDiscussionBoardAdministratorBansBanId";

import { IDiscussionBoardBan } from "../../../../api/structures/IDiscussionBoardBan";
import { IPageIDiscussionBoardBan } from "../../../../api/structures/IPageIDiscussionBoardBan";

@Controller("/discussionBoard/administrator/bans")
export class DiscussionboardAdministratorBansController {
  /**
   * Permanently ban a member account from the discussion board platform.
   *
   * This operation creates a permanent ban for a member account, representing
   * the most severe moderation action available on the discussion board
   * platform. Permanent bans completely prevent all platform access and are
   * issued exclusively by administrators for critical violations, repeated
   * offenses after escalating warnings and suspensions, or illegal activities
   * that threaten platform integrity and user safety.
   *
   * When an administrator initiates a ban, the system creates a comprehensive
   * ban record that includes the target member, the administrator issuing the
   * ban, detailed justification (minimum 100 characters required), a summary of
   * all violations leading to the ban, and whether the ban is appealable. The
   * operation also captures the member's email address to prevent future
   * account re-registration and optionally records their IP address for
   * additional security measures.
   *
   * The ban operation performs several critical actions: it updates the target
   * member's account_status to 'banned' in the discussion_board_members table,
   * invalidates all active JWT tokens and sessions for that user across all
   * devices, creates a corresponding moderation_action record for audit
   * purposes, and triggers notifications to the banned user explaining the
   * decision. All user-generated content (topics and replies) is hidden from
   * public view but preserved in the database for audit and potential legal
   * requirements.
   *
   * Bans can be marked as appealable or non-appealable based on violation
   * severity. Appealable bans include an appeal window (typically 30 days)
   * during which the banned user can submit a formal appeal for administrator
   * review. Non-appealable bans are reserved for the most severe violations
   * including illegal content, explicit threats of violence, doxxing, or
   * repeated violations after previous ban appeals. The appealability
   * determination and appeal window duration are specified in the request
   * body.
   *
   * This operation integrates with the broader moderation system defined in the
   * moderation requirements document, ensuring that permanent bans follow the
   * established graduated enforcement approach while providing the ultimate
   * enforcement mechanism for protecting the community. All ban actions are
   * logged in multiple audit tables (discussion_board_moderation_actions,
   * discussion_board_moderation_audit_logs) to maintain complete accountability
   * and support transparency reporting as specified in the moderation system
   * requirements.
   *
   * Security considerations include validation that the requesting user has
   * administrator role, prevention of administrators banning other
   * administrators or themselves, comprehensive audit logging of all ban
   * decisions, and preservation of content for legal compliance and potential
   * appeals processes.
   *
   * @param connection
   * @param body Ban creation data including target member, justification,
   *   violation summary, and appealability settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussionBoardBan.ICreate,
  ): Promise<IDiscussionBoardBan> {
    try {
      return await postDiscussionBoardAdministratorBans({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of permanent account bans
   * for administrative review.
   *
   * Retrieve a comprehensive, filtered, and paginated list of permanent account
   * bans from the discussion board platform. This operation provides
   * administrators with powerful search and filtering capabilities for ban
   * management, moderation oversight, and compliance reporting.
   *
   * This operation is essential for administrators to monitor ban enforcement
   * patterns, review moderation decisions, track appeal outcomes, and ensure
   * consistent application of community guidelines. The ban data includes the
   * banned member details, issuing administrator, comprehensive ban reasoning,
   * violation summaries, appealability status, and reversal information if the
   * ban was overturned through the appeals process.
   *
   * Security considerations require this operation to be accessible only to
   * users with administrator role, as permanent bans represent the most severe
   * moderation action and require highest-level oversight. The operation
   * integrates with the moderation system defined in the Moderation System
   * requirements document and enforces role-based permissions as specified in
   * the User Roles and Authentication document.
   *
   * The underlying database entity is the discussion_board_bans table from the
   * Prisma schema, which captures all permanent ban records including
   * ban_reason, violation_summary, is_appealable flag, appeal_window_days,
   * banned IP addresses and email addresses, reversal status (is_reversed), and
   * complete audit trail with timestamps.
   *
   * Filtering capabilities support searching by date ranges, issuing
   * administrator, appealability status, reversal status, and full-text search
   * across ban reasons and violation summaries. Sorting options include most
   * recent bans, oldest bans, and alphabetical by member username. Pagination
   * ensures efficient handling of large ban datasets accumulated over time.
   *
   * This operation works in conjunction with the ban detail retrieval operation
   * (GET /bans/{banId}) to provide complete ban management functionality.
   * Administrators typically use this search operation to identify patterns,
   * review recent bans, and locate specific ban records before viewing full
   * details.
   *
   * @param connection
   * @param body Search criteria, filtering options, and pagination parameters
   *   for ban records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussionBoardBan.IRequest,
  ): Promise<IPageIDiscussionBoardBan.ISummary> {
    try {
      return await patchDiscussionBoardAdministratorBans({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve complete details of a specific permanent account ban by unique
   * identifier.
   *
   * Retrieve comprehensive information about a specific permanent account ban
   * from the discussion board platform. This operation provides administrators
   * with complete visibility into a single ban record, including all associated
   * data, relationships, and audit information necessary for ban review, appeal
   * processing, and moderation oversight.
   *
   * The operation returns detailed information from the discussion_board_bans
   * table including the banned member's account details, the administrator who
   * issued the ban, the moderation action that initiated the ban, comprehensive
   * ban justification (ban_reason with minimum 100 characters), complete
   * violation summary documenting the pattern of violations leading to the
   * permanent ban decision, appealability status (is_appealable flag), appeal
   * window duration if applicable (appeal_window_days), contact information
   * banned from re-registration (ip_address_banned and email_banned), and
   * reversal information if the ban was overturned (is_reversed, reversed_at,
   * reversal_reason).
   *
   * Security considerations restrict this operation to administrator role only,
   * as permanent ban information contains sensitive moderation data and
   * personally identifiable information requiring highest-level access control.
   * The operation enforces role-based permissions as defined in the User Roles
   * and Authentication requirements document.
   *
   * The operation integrates with the moderation system specified in the
   * Moderation System requirements document, providing access to the complete
   * ban context including related moderation actions, violation history, and
   * appeal records. This integration enables administrators to understand the
   * full narrative of events leading to the permanent ban and any subsequent
   * appeals or reversals.
   *
   * Relationship to other operations: Administrators typically access this
   * operation after using the ban search operation (PATCH /bans) to locate
   * specific ban records. The detailed ban information retrieved supports
   * appeal review workflows, moderation quality audits, and compliance
   * reporting. If the ban record has associated appeals, administrators can
   * review appeal details to understand challenges to the ban decision.
   *
   * The operation validates that the requested ban record exists and is
   * accessible to the administrator. The ban identifier must be a valid UUID
   * matching records in the discussion_board_bans table.
   *
   * @param connection
   * @param banId Unique identifier of the target permanent ban record to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":banId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("banId")
    banId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardBan> {
    try {
      return await getDiscussionBoardAdministratorBansBanId({
        administrator,
        banId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
