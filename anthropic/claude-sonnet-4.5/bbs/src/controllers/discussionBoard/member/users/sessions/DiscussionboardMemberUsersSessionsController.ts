import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardMemberUsersUserIdSessions } from "../../../../../providers/patchDiscussionBoardMemberUsersUserIdSessions";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { deleteDiscussionBoardMemberUsersUserIdSessionsSessionId } from "../../../../../providers/deleteDiscussionBoardMemberUsersUserIdSessionsSessionId";

import { IPageIDiscussionBoardSession } from "../../../../../api/structures/IPageIDiscussionBoardSession";
import { IDiscussionBoardSession } from "../../../../../api/structures/IDiscussionBoardSession";

@Controller("/discussionBoard/member/users/:userId/sessions")
export class DiscussionboardMemberUsersSessionsController {
  /**
   * Retrieve and filter active sessions for a specific user account.
   *
   * This operation retrieves a comprehensive, filtered, and paginated list of
   * active sessions for a specified user from the discussion_board_sessions
   * table. Sessions represent active login instances across different devices
   * and browsers, providing users with visibility into where their account is
   * currently authenticated.
   *
   * The operation supports advanced filtering capabilities to help users find
   * specific sessions based on various criteria including device type (Desktop,
   * Mobile, Tablet), browser information (Chrome, Firefox, Safari, etc.),
   * approximate geographic location, IP address patterns, login timestamp
   * ranges, and last activity timeframe. Users can search for sessions that
   * meet multiple filter criteria simultaneously to identify specific login
   * instances or detect suspicious activity.
   *
   * Each session record in the response includes comprehensive metadata to help
   * users identify and assess their login instances. This includes the device
   * type extracted from the user agent string, browser name and version
   * information, the IP address from which the session was created, an
   * approximate geographic location based on IP geolocation (city-level
   * precision), the timestamp when the user logged in to create this session,
   * the timestamp of the most recent activity in this session, the session's
   * expiration timestamp, and whether the session is currently active or has
   * been revoked.
   *
   * Security considerations are paramount in this operation. Users should only
   * be able to access their own session data unless they have administrator
   * privileges. The operation enforces strict authorization checks to ensure
   * users cannot view another user's active sessions without proper
   * permissions. Session data is sensitive as it reveals user behavior
   * patterns, device usage, and location information. The response should
   * present session data in a user-friendly format that makes it easy to
   * identify unfamiliar or suspicious sessions.
   *
   * The operation integrates with the multi-device session management
   * functionality defined in the User Roles and Authentication document. It
   * provides the data foundation for features like "view active sessions,"
   * "revoke this session," and "revoke all other sessions." Users can use this
   * information to make informed decisions about session management and account
   * security.
   *
   * Pagination is essential given that active users may have numerous
   * historical session records. The response should include pagination metadata
   * indicating the current page, total number of sessions matching the filters,
   * and page size. Sorting options allow users to organize sessions by most
   * recent activity, login timestamp, or other relevant criteria to quickly
   * identify the sessions they're looking for.
   *
   * @param connection
   * @param userId Unique identifier of the user whose sessions are being
   *   retrieved
   * @param body Filter criteria and pagination parameters for retrieving user
   *   sessions including device type, location, activity timeframe, and sorting
   *   preferences
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardSession.IRequest,
  ): Promise<IPageIDiscussionBoardSession> {
    try {
      return await patchDiscussionBoardMemberUsersUserIdSessions({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke a specific user session to terminate access from a particular
   * device.
   *
   * This operation enables authenticated users to revoke a specific active
   * session, effectively logging out from a particular device or browser. This
   * functionality is essential for the multi-device session management system
   * described in the User Roles and Authentication requirements, where users
   * need the ability to view all their active sessions and selectively
   * terminate sessions they no longer wish to keep active.
   *
   * When a session is revoked through this operation, the system immediately
   * invalidates all associated JWT tokens (both access and refresh tokens) for
   * that session, preventing any further authenticated requests using those
   * tokens. The session record is permanently removed from the
   * discussion_board_sessions table since the schema does not include a
   * deleted_at column for soft deletion. The associated refresh token in the
   * discussion_board_refresh_tokens table is also removed through the cascade
   * delete relationship.
   *
   * This operation is particularly important for security scenarios such as
   * when a user suspects unauthorized access, wants to log out from a device
   * they no longer have physical access to, or simply wants to terminate
   * sessions on devices they are no longer using. The operation provides users
   * with granular control over their active sessions across multiple devices.
   *
   * The operation validates that the requesting user is either the owner of the
   * session being revoked or has administrative privileges. Users can only
   * revoke their own sessions unless they are administrators. The session must
   * exist and be associated with the specified user ID before revocation can
   * proceed.
   *
   * After successful revocation, the affected device will be immediately logged
   * out upon its next authenticated request, as the JWT tokens will no longer
   * be valid. The operation logs the session termination in the security audit
   * trail for accountability and security monitoring purposes.
   *
   * @param connection
   * @param userId Unique identifier of the user who owns the session
   * @param sessionId Unique identifier of the specific session to revoke
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sessionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardMemberUsersUserIdSessionsSessionId({
        member,
        userId,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
