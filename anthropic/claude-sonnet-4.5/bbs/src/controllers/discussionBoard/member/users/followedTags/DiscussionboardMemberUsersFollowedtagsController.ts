import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardMemberUsersUserIdFollowedTags } from "../../../../../providers/postDiscussionBoardMemberUsersUserIdFollowedTags";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchDiscussionBoardMemberUsersUserIdFollowedTags } from "../../../../../providers/patchDiscussionBoardMemberUsersUserIdFollowedTags";
import { deleteDiscussionBoardMemberUsersUserIdFollowedTagsFollowedTagId } from "../../../../../providers/deleteDiscussionBoardMemberUsersUserIdFollowedTagsFollowedTagId";

import { IDiscussionBoardFollowedTag } from "../../../../../api/structures/IDiscussionBoardFollowedTag";
import { IPageIDiscussionBoardFollowedTag } from "../../../../../api/structures/IPageIDiscussionBoardFollowedTag";

@Controller("/discussionBoard/member/users/:userId/followedTags")
export class DiscussionboardMemberUsersFollowedtagsController {
  /**
   * Follow a tag for personalized content recommendations and notifications.
   *
   * Create a new tag following relationship for an authenticated member. This
   * endpoint allows users to follow specific tags to customize their discussion
   * board experience and receive relevant content recommendations.
   *
   * When a member follows a tag, the system creates a record in the
   * discussion_board_followed_tags table linking the user to the tag. The
   * followed tag relationship enables several key features: prioritization of
   * topics with that tag in the user's personalized recommendations, optional
   * notifications when new topics are created with that tag, and display of
   * followed tags in the user's profile for managing their interests.
   *
   * The operation enforces important business constraints: members can follow a
   * maximum of 50 tags as specified in the business rules document, preventing
   * excessive tag following that could dilute the personalization benefits. The
   * system validates that the tag being followed exists in the
   * discussion_board_tags table and is in active status. The operation also
   * prevents duplicate follows by checking existing relationships.
   *
   * This operation integrates with the recommendation system and notification
   * system to provide users with content discovery aligned with their declared
   * interests in economic and political topics. Following tags is a key
   * engagement mechanism that helps users navigate the growing repository of
   * discussions efficiently.
   *
   * Security considerations include validating that the userId in the path
   * matches the authenticated user's identity (users can only manage their own
   * followed tags), ensuring the user has member role or higher, and preventing
   * abuse through rate limiting on follow/unfollow actions.
   *
   * Related operations that users typically perform in sequence include
   * browsing available tags through tag search or tag cloud features, viewing
   * topics with specific tags to determine interest, and managing their
   * complete list of followed tags through their profile settings.
   *
   * @param connection
   * @param userId Unique identifier of the authenticated member who is
   *   following the tag
   * @param body Information about the tag to follow, including the tag
   *   identifier and optional notification preferences
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardFollowedTag.ICreate,
  ): Promise<IDiscussionBoardFollowedTag> {
    try {
      return await postDiscussionBoardMemberUsersUserIdFollowedTags({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve user's followed tags with filtering and pagination.
   *
   * This operation provides a comprehensive interface for retrieving and
   * searching through the tags that a specific user is following. When users
   * follow tags on the discussion board platform, they receive personalized
   * content recommendations and notifications for new topics tagged with those
   * tags. This endpoint allows users to view and manage their followed tag
   * collection with advanced filtering and sorting capabilities.
   *
   * The operation queries the discussion_board_followed_tags table from the
   * Prisma schema, joining with the discussion_board_tags table to retrieve
   * complete tag information including tag names, descriptions, status, and
   * usage statistics. The search supports filtering by tag name, tag status
   * (active, pending_review, disabled, merged), date ranges for when tags were
   * followed, and sorting by various criteria including follow date, tag name,
   * and tag popularity.
   *
   * Security considerations include verifying that the authenticated user's ID
   * matches the userId path parameter to prevent unauthorized access to other
   * users' followed tag collections. The operation respects the soft deletion
   * pattern, filtering out followed_tags records where deleted_at is not null,
   * ensuring only active follows are returned. Similarly, the operation should
   * filter out tags where the tag itself has been deleted (tag.deleted_at is
   * not null).
   *
   * The response includes pagination metadata to handle users approaching the
   * 50-tag follow limit efficiently. Each returned tag record includes
   * essential information such as tag name, description, follow date
   * (created_at from followed_tags), and optionally aggregated statistics from
   * the mv_discussion_board_tag_statistics materialized view if available. The
   * materialized view provides denormalized data including usage_count (number
   * of topics with this tag), recent_usage_count, total_votes, and
   * follower_count.
   *
   * This operation integrates with the tag-based content discovery system,
   * providing the foundation for personalized recommendations based on user
   * interests. Users typically access this endpoint through their profile
   * settings or tag management interface to review and potentially unfollow
   * tags that are no longer relevant to their interests. The operation enables
   * users to audit their followed tags and make informed decisions about which
   * tags to continue following given the 50-tag maximum limit specified in the
   * business rules.
   *
   * The PATCH method is used instead of GET to support complex request body
   * parameters for filtering and pagination, following the API design pattern
   * established for list/search operations with advanced query capabilities.
   *
   * @param connection
   * @param userId Unique identifier of the user whose followed tags are being
   *   retrieved
   * @param body Search criteria, filtering options, sorting preferences, and
   *   pagination parameters for retrieving followed tags
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardFollowedTag.IRequest,
  ): Promise<IPageIDiscussionBoardFollowedTag.ISummary> {
    try {
      return await patchDiscussionBoardMemberUsersUserIdFollowedTags({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Unfollow a tag to stop receiving related notifications and content
   * prioritization.
   *
   * Remove an existing tag following relationship for an authenticated member.
   * This endpoint allows users to unfollow tags they are no longer interested
   * in, immediately stopping related notifications and content
   * recommendations.
   *
   * When a member unfollows a tag, the system soft-deletes the corresponding
   * record in the discussion_board_followed_tags table by setting the
   * deleted_at timestamp. Soft deletion preserves historical user interest data
   * for analytics and potential future personalization insights while
   * immediately removing the tag from the user's active followed tags list. The
   * unfollowed tag will no longer appear in the user's followed tags display,
   * topics with that tag will no longer be prioritized in recommendations, and
   * the user will stop receiving notifications about new topics with that tag.
   *
   * The operation enforces important security and ownership constraints: users
   * can only unfollow tags they themselves have followed (ownership
   * validation), the followedTagId must correspond to an actual followed tag
   * relationship in the database, and the userId in the path must match the
   * authenticated user's identity. The system validates these constraints
   * before processing the removal.
   *
   * This operation supports the accidental unfollow recovery use case through
   * the soft deletion pattern. If a user accidentally unfollows a tag,
   * administrators or the user themselves (through a potential UI feature)
   * could restore the relationship by clearing the deleted_at timestamp within
   * the platform's 30-day soft deletion recovery window.
   *
   * The operation integrates with the notification system to immediately stop
   * queuing new notifications for the unfollowed tag, and with the
   * recommendation algorithm to remove the tag from the user's interest
   * profile. This ensures users see immediate effects when managing their
   * followed tags.
   *
   * Security considerations include ownership verification (users cannot
   * unfollow tags on behalf of other users), authentication validation (only
   * authenticated members can unfollow tags), and audit trail creation (the
   * soft deletion is logged with timestamp for user activity tracking).
   *
   * Related operations that users typically perform include viewing their
   * complete list of followed tags to decide which to unfollow, browsing tag
   * statistics to discover new tags to follow as replacements, and adjusting
   * notification preferences for remaining followed tags.
   *
   * @param connection
   * @param userId Unique identifier of the authenticated member who is
   *   unfollowing the tag
   * @param followedTagId Unique identifier of the followed tag relationship to
   *   remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":followedTagId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("followedTagId")
    followedTagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardMemberUsersUserIdFollowedTagsFollowedTagId(
        {
          member,
          userId,
          followedTagId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
