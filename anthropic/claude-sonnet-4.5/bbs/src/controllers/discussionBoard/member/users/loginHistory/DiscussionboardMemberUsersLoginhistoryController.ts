import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardMemberUsersUserIdLoginHistory } from "../../../../../providers/patchDiscussionBoardMemberUsersUserIdLoginHistory";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IPageIDiscussionBoardLoginHistory } from "../../../../../api/structures/IPageIDiscussionBoardLoginHistory";
import { IDiscussionBoardMember } from "../../../../../api/structures/IDiscussionBoardMember";

@Controller("/discussionBoard/member/users/:userId/loginHistory")
export class DiscussionboardMemberUsersLoginhistoryController {
  /**
   * Retrieve paginated and filtered login history for a specific user account.
   *
   * This operation provides comprehensive access to a user's login history,
   * which is maintained in the discussion_board_login_history table as an
   * immutable audit trail of all authentication attempts. The login history
   * includes both successful logins and failed authentication attempts,
   * providing critical data for security monitoring and account activity
   * review.
   *
   * The login history captures detailed information about each login attempt
   * including the email address used, whether the attempt was successful,
   * failure reasons for unsuccessful attempts, IP address, device type, browser
   * information, and approximate geographic location. This comprehensive data
   * enables users to detect suspicious login activity, verify legitimate access
   * patterns, and understand the security status of their account.
   *
   * Users can access their own login history to monitor account security,
   * identify unrecognized login attempts, and verify that only authorized
   * devices have accessed their account. Administrators can access login
   * history for any user to investigate security incidents, support account
   * recovery requests, and analyze platform-wide authentication patterns.
   *
   * The operation supports advanced filtering capabilities to help users find
   * specific login events efficiently. Filters include date range selection to
   * focus on recent activity or historical patterns, success/failure status to
   * isolate failed login attempts that might indicate unauthorized access
   * attempts, IP address filtering to track logins from specific locations,
   * device type filtering to review activity by device category, and
   * location-based filtering for geographic access patterns.
   *
   * Pagination is implemented to handle users with extensive login histories
   * efficiently, displaying 50 login records per page by default. The results
   * are sorted by timestamp in descending order (most recent first) to
   * prioritize current activity. This ordering helps users quickly identify
   * their most recent login events and detect any unusual recent activity.
   *
   * The operation validates that the requesting user is either the account
   * owner reviewing their own login history or an administrator with privileges
   * to access any user's security logs. This authorization check ensures that
   * login history data, which contains sensitive security information including
   * IP addresses and location data, is only accessible to authorized parties.
   *
   * The response includes comprehensive login attempt details with all fields
   * from the discussion_board_login_history table, enabling detailed security
   * analysis and pattern recognition for both users and administrators.
   *
   * @param connection
   * @param userId Unique identifier of the user whose login history is being
   *   retrieved
   * @param body Search criteria, filtering options, and pagination parameters
   *   for retrieving login history records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardMember.ILoginHistoryRequest,
  ): Promise<IPageIDiscussionBoardLoginHistory> {
    try {
      return await patchDiscussionBoardMemberUsersUserIdLoginHistory({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
