import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardModeratorTags } from "../../../../providers/postDiscussionBoardModeratorTags";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { putDiscussionBoardModeratorTagsTagId } from "../../../../providers/putDiscussionBoardModeratorTagsTagId";

import { IDiscussionBoardTag } from "../../../../api/structures/IDiscussionBoardTag";

@Controller("/discussionBoard/moderator/tags")
export class DiscussionboardModeratorTagsController {
  /**
   * Create a new tag in the discussion board tag vocabulary for content
   * categorization.
   *
   * This operation creates a new tag entry in the discussion_board_tags table,
   * enabling users to categorize and discover discussion topics through
   * tag-based filtering and search. Tags serve as secondary organizational
   * metadata complementing the primary category structure (Economics and
   * Politics categories).
   *
   * The tag creation process validates all input against business rules defined
   * in the requirements. Tag names must be between 2 and 30 characters in
   * length, contain only alphanumeric characters with spaces and hyphens, and
   * be unique across the entire tag vocabulary. The system normalizes tag names
   * to lowercase to ensure consistency and prevent duplicate tags with slight
   * case variations.
   *
   * When a moderator creates a tag, the system sets the initial status to
   * 'pending_review' to allow administrator oversight of the tag vocabulary.
   * When an administrator creates a tag, the status is set directly to
   * 'active', making it immediately available for use. This approval workflow
   * maintains tag quality and prevents the proliferation of redundant or
   * inappropriate tags.
   *
   * Optionally, the creator can provide a description field explaining what the
   * tag represents and when to use it, helping users apply tags consistently
   * across discussions. The description supports clear tag semantics and
   * reduces confusion in tag application.
   *
   * Upon successful creation, the system generates a unique identifier, records
   * creation and update timestamps, and returns the complete tag object. The
   * new tag becomes searchable and available for suggestion in the topic
   * creation interface once its status reaches 'active'.
   *
   * This operation requires proper authentication and role-based authorization.
   * Only users with moderator or administrator roles can create new tags,
   * preventing tag spam from regular members while allowing community leaders
   * to expand the tag vocabulary organically as discussion topics evolve.
   *
   * @param connection
   * @param body Tag creation data including required name and optional
   *   description
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardTag.ICreate,
  ): Promise<IDiscussionBoardTag> {
    try {
      return await postDiscussionBoardModeratorTags({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing tag's name, description, or status in the discussion
   * board.
   *
   * This operation modifies an existing tag entry in the discussion_board_tags
   * table, allowing moderators and administrators to maintain tag quality,
   * clarify tag semantics, and manage the tag lifecycle. Tag updates are
   * essential for evolving the tag vocabulary as community discussions develop
   * and new topics emerge.
   *
   * The tag update process supports modifying three core attributes: name,
   * description, and status. When updating the tag name, the system validates
   * that the new name meets all naming requirements (2-30 characters,
   * alphanumeric with spaces and hyphens) and remains unique across the entire
   * tag vocabulary. The system normalizes updated names to lowercase to
   * maintain consistency with existing tag conventions.
   *
   * Description updates allow moderators to clarify what a tag represents and
   * provide guidance on when to use it. This helps users apply tags
   * consistently and reduces ambiguity in tag semantics. Descriptions are
   * optional but recommended for frequently used tags to improve user
   * understanding.
   *
   * Status updates control the tag lifecycle. Moderators can change status from
   * 'pending_review' to 'active' to approve new tags for general use. Tags can
   * be disabled by setting status to 'disabled', which hides them from tag
   * selection interfaces while preserving existing tag associations on topics.
   * Tags can be marked as 'merged' when consolidating duplicate or similar
   * tags, indicating the tag has been superseded by another preferred tag.
   *
   * The operation validates that the specified tag exists by checking the tagId
   * path parameter against the discussion_board_tags table. If the tag is not
   * found or has been soft-deleted (deleted_at is not null), the operation
   * returns an appropriate error response.
   *
   * When a tag is successfully updated, the system automatically updates the
   * updated_at timestamp to track when modifications occurred. This timestamp
   * is used for audit trail and tracking tag evolution over time. Existing
   * topic_tags associations are preservedâ€”topics previously tagged with this
   * tag maintain their associations even when the tag name or description
   * changes.
   *
   * Security considerations include validating that the requesting user has
   * moderator or administrator role privileges. The operation logs tag updates
   * in the audit trail for accountability. Tag updates should be performed
   * judiciously as they affect all topics currently using the tag.
   *
   * Related operations that work in conjunction with tag updates include tag
   * creation (POST /tags), tag-based topic discovery (GET /topics filtered by
   * tags), and tag following (members tracking specific tags for personalized
   * content). The tag update operation ensures the tag vocabulary remains
   * accurate, organized, and aligned with community discussion patterns.
   *
   * @param connection
   * @param tagId Unique identifier of the tag to update
   * @param body Updated tag information including name, description, and status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tagId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardTag.IUpdate,
  ): Promise<IDiscussionBoardTag> {
    try {
      return await putDiscussionBoardModeratorTagsTagId({
        moderator,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
