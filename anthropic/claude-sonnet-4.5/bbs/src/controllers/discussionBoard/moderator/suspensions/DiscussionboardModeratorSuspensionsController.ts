import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardModeratorSuspensions } from "../../../../providers/postDiscussionBoardModeratorSuspensions";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchDiscussionBoardModeratorSuspensions } from "../../../../providers/patchDiscussionBoardModeratorSuspensions";
import { getDiscussionBoardModeratorSuspensionsSuspensionId } from "../../../../providers/getDiscussionBoardModeratorSuspensionsSuspensionId";
import { putDiscussionBoardModeratorSuspensionsSuspensionId } from "../../../../providers/putDiscussionBoardModeratorSuspensionsSuspensionId";

import { IDiscussionBoardSuspension } from "../../../../api/structures/IDiscussionBoardSuspension";
import { IPageIDiscussionBoardSuspension } from "../../../../api/structures/IPageIDiscussionBoardSuspension";

@Controller("/discussionBoard/moderator/suspensions")
export class DiscussionboardModeratorSuspensionsController {
  /**
   * Create a new temporary account suspension for a member violating community
   * guidelines.
   *
   * Creates a new temporary suspension record that restricts a member's posting
   * and engagement privileges for a specified duration. This operation is part
   * of the graduated enforcement moderation system and can only be performed by
   * moderators with appropriate permissions.
   *
   * The suspension workflow involves validating the target member's existence
   * and current account status, ensuring the issuing moderator has authority to
   * suspend users, and verifying the suspension duration falls within allowed
   * limits (1-30 days for moderators). The operation requires detailed
   * suspension reasoning to maintain transparency and support potential
   * appeals.
   *
   * When a suspension is created, the system immediately updates the member's
   * account_status to 'suspended', calculates the end_date based on
   * duration_days, marks the suspension as is_active=true, and invalidates all
   * of the member's active JWT tokens to prevent continued platform
   * interaction. The suspended member receives notifications through both
   * in-app and email channels explaining the suspension reason, duration,
   * expected restoration date, and information about the appeal process.
   *
   * The suspension record is linked to a corresponding moderation_action record
   * that provides complete audit trail including the original violation,
   * moderator decision, and reasoning. This ensures accountability and supports
   * the appeal review process where administrators can examine the complete
   * context of the suspension decision.
   *
   * Security considerations include verifying the issuing moderator's role and
   * permissions, preventing moderators from suspending administrators or other
   * moderators, and ensuring suspension durations align with the severity of
   * violations as defined in community guidelines. The operation enforces rate
   * limiting to prevent abuse of moderation powers and logs all suspension
   * creations in the moderation audit trail.
   *
   * This operation integrates with the discussion_board_suspensions table from
   * the Prisma schema, which tracks member_id (the suspended user),
   * moderation_action_id (the triggering moderation action), moderator_id (who
   * issued the suspension), suspension_reason (detailed explanation),
   * duration_days (length of suspension), start_date and end_date (suspension
   * period), is_active (current suspension status), and timestamps for creation
   * and potential early lifting.
   *
   * @param connection
   * @param body Suspension creation information including target member,
   *   suspension duration, reason, and issuing moderator authority
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardSuspension.ICreate,
  ): Promise<IDiscussionBoardSuspension> {
    try {
      return await postDiscussionBoardModeratorSuspensions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of user suspensions from the
   * moderation system.
   *
   * Retrieve a filtered and paginated list of user suspensions from the
   * discussion board moderation system. This operation provides advanced search
   * capabilities for finding suspensions based on multiple criteria including
   * member identity, suspension status, duration, and timing characteristics.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and sorting options. Results can be sorted by suspension start date,
   * end date, duration, or creation timestamp in ascending or descending order
   * to support various moderation workflow needs.
   *
   * Security considerations include restricting access to moderators and
   * administrators only, as suspension data contains sensitive moderation
   * information. The operation enforces role-based permissions to ensure only
   * authorized personnel can access suspension records and member disciplinary
   * history.
   *
   * This operation integrates with the discussion_board_suspensions table as
   * defined in the Prisma schema, incorporating all available suspension fields
   * including member references, moderator/administrator attribution,
   * suspension reasons, duration calculations, active status tracking, and
   * early lift information. The response includes suspension summary
   * information optimized for moderation queue displays and oversight
   * dashboards.
   *
   * Filtering capabilities support moderator performance analysis, member
   * behavior tracking, suspension effectiveness evaluation, and compliance
   * reporting. The search functionality helps administrators identify
   * suspension patterns, monitor enforcement consistency, and ensure fair
   * application of community guidelines across the platform.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for suspension
   *   filtering including member filters, status filters, date ranges, duration
   *   constraints, and moderator attribution
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardSuspension.IRequest,
  ): Promise<IPageIDiscussionBoardSuspension.ISummary> {
    try {
      return await patchDiscussionBoardModeratorSuspensions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific user suspension by ID.
   *
   * Retrieve comprehensive details about a specific user suspension identified
   * by its unique suspension ID from the discussion board moderation system.
   * This operation returns complete suspension information including member
   * context, suspension parameters, timing details, and resolution status.
   *
   * The operation provides moderators and administrators with full visibility
   * into individual suspension records necessary for oversight, appeals
   * processing, and moderation quality assurance. The detailed suspension
   * information includes the issuing moderator or administrator identity,
   * suspension reason and justification, duration configuration, start and end
   * timestamps, current active status, and early lift details if applicable.
   *
   * Security considerations restrict this operation to moderators and
   * administrators only, as suspension details contain sensitive member
   * disciplinary information and moderation rationale. The operation enforces
   * role-based access control to ensure only authorized personnel can access
   * detailed suspension records and member enforcement history.
   *
   * This operation integrates with the discussion_board_suspensions table as
   * defined in the Prisma schema, retrieving all suspension fields including
   * member_id, moderation_action_id, moderator_id, administrator_id,
   * suspension_reason, duration_days, start_date, end_date, is_active,
   * lifted_early, lifted_at, lifted_reason, and timestamps. The response
   * includes complete relational context through foreign key relationships to
   * members, moderators, administrators, and moderation actions.
   *
   * The operation supports critical moderation workflows including suspension
   * verification before member restriction enforcement, appeals investigation
   * requiring detailed suspension context, moderation performance reviews
   * analyzing suspension appropriateness, and compliance reporting requiring
   * complete suspension documentation. The detailed data enables informed
   * decision-making for suspension modifications, early lift evaluations, and
   * appeals adjudication.
   *
   * @param connection
   * @param suspensionId Unique identifier of the target suspension record to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":suspensionId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("suspensionId")
    suspensionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardSuspension> {
    try {
      return await getDiscussionBoardModeratorSuspensionsSuspensionId({
        moderator,
        suspensionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing suspension record to modify duration, lift early, or
   * change suspension details.
   *
   * Modifies an existing temporary suspension record, primarily used to lift
   * suspensions early after appeal approval, extend suspension duration for
   * additional violations, or update suspension reasoning with additional
   * context. This operation supports the moderation review and appeal workflow
   * where moderators may need to adjust suspension terms.
   *
   * The update workflow validates the suspension exists and is accessible for
   * modification, verifies the requesting user has moderator permissions, and
   * ensures the requested changes are valid and appropriate. Common update
   * scenarios include lifting suspensions early after successful appeals,
   * extending suspensions when new violations occur during the suspension
   * period, and updating suspension reasons to reflect additional context or
   * corrected information.
   *
   * When a suspension is lifted early (lifted_early=true), the system
   * immediately updates the member's account_status back to 'active', sets
   * is_active=false on the suspension record, records the lifted_at timestamp,
   * captures the lifted_reason explanation, and sends notification to the
   * suspended member informing them of their privilege restoration. The member
   * regains immediate access to create topics, post replies, and vote on
   * content.
   *
   * When a suspension duration is extended, the system recalculates the
   * end_date based on the new duration_days value, updates the
   * suspension_reason to include the extension justification, and sends updated
   * notification to the member explaining the extension and new expected
   * restoration date. This typically occurs when a suspended member attempts to
   * circumvent the suspension or when additional violations are discovered.
   *
   * Security considerations include preventing moderators from modifying
   * suspensions issued by administrators without proper authorization, ensuring
   * all suspension modifications are logged in the moderation audit trail,
   * verifying suspension changes align with community guideline severity
   * levels, and maintaining referential integrity with the related
   * moderation_action record.
   *
   * The operation integrates with the discussion_board_suspensions table from
   * the Prisma schema, updating fields such as suspension_reason,
   * duration_days, end_date, is_active, lifted_early, lifted_at, lifted_reason,
   * and updated_at timestamp. All modifications are tracked through the audit
   * trail for transparency and appeal review purposes.
   *
   * @param connection
   * @param suspensionId Unique identifier of the suspension record to update
   * @param body Updated suspension information including modified duration,
   *   lift status, or updated reasoning
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":suspensionId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("suspensionId")
    suspensionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardSuspension.IUpdate,
  ): Promise<IDiscussionBoardSuspension> {
    try {
      return await putDiscussionBoardModeratorSuspensionsSuspensionId({
        moderator,
        suspensionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
