import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardModeratorWarnings } from "../../../../providers/patchDiscussionBoardModeratorWarnings";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getDiscussionBoardModeratorWarningsWarningId } from "../../../../providers/getDiscussionBoardModeratorWarningsWarningId";

import { IPageIDiscussionBoardWarning } from "../../../../api/structures/IPageIDiscussionBoardWarning";
import { IDiscussionBoardWarning } from "../../../../api/structures/IDiscussionBoardWarning";

@Controller("/discussionBoard/moderator/warnings")
export class DiscussionboardModeratorWarningsController {
  /**
   * Search and retrieve a filtered, paginated list of member warnings.
   *
   * Retrieve a filtered and paginated list of warnings issued to members for
   * violations of community guidelines on the economic and political discussion
   * board. This operation provides advanced search capabilities for finding
   * warnings based on multiple criteria including warning level (first_warning,
   * second_warning, final_warning), violation category, member identity, date
   * ranges, and active status.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and sorting options. Results can be sorted by issue date, expiration
   * date, warning level, or violation severity to help moderators and
   * administrators identify patterns in community guideline violations and
   * track escalation of member behavior issues.
   *
   * Security considerations include restricting this endpoint to administrator
   * and moderator roles only, as warning data contains sensitive moderation
   * information. The response includes detailed warning information with
   * references to the warned member, the content that triggered the warning,
   * and moderator notes explaining the decision. This transparency supports
   * fair moderation practices and enables effective appeals processing.
   *
   * This operation integrates with the discussion_board_warnings table as
   * defined in the Prisma schema, incorporating all warning fields including
   * warning level, violation category, moderator notes, expiration dates, and
   * active status. The response includes comprehensive warning details
   * optimized for moderation review, tracking member violation history, and
   * identifying users who may require escalated moderation actions.
   *
   * Related operations include GET /warnings/{warningId} for retrieving
   * individual warning details, and moderation action endpoints that may result
   * in warning creation. This search operation is typically used by moderators
   * to review warning history before taking additional moderation actions, and
   * by administrators to monitor overall moderation quality and consistency.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for warning filtering
   *   including warning level, violation category, member ID, date ranges,
   *   active status, and sorting options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardWarning.IRequest,
  ): Promise<IPageIDiscussionBoardWarning> {
    try {
      return await patchDiscussionBoardModeratorWarnings({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific member warning.
   *
   * Retrieve comprehensive details about a specific warning issued to a member
   * for violating community guidelines on the economic and political discussion
   * board platform. This operation accesses the discussion_board_warnings table
   * to return complete information about a single warning record identified by
   * its unique warning ID.
   *
   * The response includes all warning details necessary for moderation review
   * and appeals processing: the warning level (first_warning, second_warning,
   * or final_warning) indicating escalation stage, the specific violation
   * category that triggered the warning, complete moderator notes explaining
   * the decision rationale, expiration date if applicable, and current active
   * status. The warning record also references the member who received the
   * warning, the specific content (topic or reply) that violated guidelines,
   * and the moderation action that issued the warning.
   *
   * Security considerations restrict this endpoint to administrator and
   * moderator roles, as warning details contain sensitive moderation
   * information and member conduct history. The operation supports the appeals
   * process by providing users and reviewing administrators with complete
   * context about contested warnings. It also enables moderators to reference
   * prior warnings when making escalation decisions for repeat violations.
   *
   * This operation integrates with the discussion_board_warnings table as
   * defined in the Prisma schema, incorporating relationships to
   * discussion_board_members (warned user), discussion_board_moderation_actions
   * (issuing action), discussion_board_topics and discussion_board_replies
   * (violating content), and discussion_board_appeals (if warning was
   * appealed). The comprehensive warning details support transparent moderation
   * practices and fair enforcement of the three-tier warning escalation system
   * defined in platform policies.
   *
   * Related operations include PATCH /warnings for searching warning history,
   * moderation action endpoints that create warnings, and appeal endpoints
   * where users can contest warnings. This operation is frequently used before
   * issuing additional warnings to the same member to determine appropriate
   * escalation level, and during appeals review to provide complete context for
   * administrative decisions.
   *
   * @param connection
   * @param warningId Unique identifier of the target warning record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":warningId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("warningId")
    warningId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardWarning> {
    try {
      return await getDiscussionBoardModeratorWarningsWarningId({
        moderator,
        warningId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
