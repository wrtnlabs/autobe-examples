import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IDiscussionBoardAdministrator } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardAdministrator";
import type { IDiscussionBoardCategory } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardCategory";
import type { IDiscussionBoardMember } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardMember";
import type { IDiscussionBoardReply } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardReply";
import type { IDiscussionBoardTag } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardTag";
import type { IDiscussionBoardTopic } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardTopic";

/**
 * Test notification deletion authorization enforcement.
 *
 * This test validates that the notification deletion endpoint properly enforces
 * authorization rules by preventing users from deleting notifications belonging
 * to other users.
 *
 * NOTE: This test has significant limitations due to missing APIs:
 *
 * - No API exists to fetch/list user notifications
 * - Cannot retrieve the actual notification ID generated by reply events
 * - Must use generated UUID to test the authorization boundary
 *
 * Despite these limitations, the test validates:
 *
 * 1. Cross-user notification deletion attempts are rejected (403 or 404)
 * 2. Same-user notification deletion attempts succeed or fail appropriately
 * 3. The endpoint enforces userId parameter validation
 *
 * Workflow:
 *
 * 1. Create Member A (notification owner)
 * 2. Create Member B (unauthorized user)
 * 3. Create administrator for category setup
 * 4. Create discussion category
 * 5. Member A creates a topic
 * 6. Member B replies (would trigger notification for Member A)
 * 7. Test authorization by attempting deletions with different user contexts
 */
export async function test_api_notification_deletion_authorization_enforcement(
  connection: api.IConnection,
) {
  // Step 1: Register Member A (notification owner)
  const memberAEmail = typia.random<string & tags.Format<"email">>();
  const memberA = await api.functional.auth.member.join(connection, {
    body: {
      username: RandomGenerator.alphaNumeric(12),
      email: memberAEmail,
      password: "SecurePass123!@#",
      display_name: RandomGenerator.name(2),
    } satisfies IDiscussionBoardMember.ICreate,
  });
  typia.assert(memberA);

  // Step 2: Register Member B (unauthorized deletion attempter)
  const memberBEmail = typia.random<string & tags.Format<"email">>();
  const memberB = await api.functional.auth.member.join(connection, {
    body: {
      username: RandomGenerator.alphaNumeric(12),
      email: memberBEmail,
      password: "SecurePass456!@#",
      display_name: RandomGenerator.name(2),
    } satisfies IDiscussionBoardMember.ICreate,
  });
  typia.assert(memberB);

  // Step 3: Create administrator account
  const adminEmail = typia.random<string & tags.Format<"email">>();
  const admin = await api.functional.auth.administrator.join(connection, {
    body: {
      username: RandomGenerator.alphaNumeric(10),
      email: adminEmail,
      password: "AdminPass789!@#",
    } satisfies IDiscussionBoardAdministrator.ICreate,
  });
  typia.assert(admin);

  // Step 4: Create category (admin authentication automatically set by join)
  const category =
    await api.functional.discussionBoard.administrator.categories.create(
      connection,
      {
        body: {
          name: RandomGenerator.name(1),
          slug: RandomGenerator.alphaNumeric(8),
          description: RandomGenerator.paragraph({ sentences: 2 }),
          parent_category_id: null,
          display_order: 1,
          is_active: true,
        } satisfies IDiscussionBoardCategory.ICreate,
      },
    );
  typia.assert(category);

  // Step 5: Member A creates topic (re-authenticate as Member A)
  const memberAReauth = await api.functional.auth.member.join(connection, {
    body: {
      username: RandomGenerator.alphaNumeric(12),
      email: typia.random<string & tags.Format<"email">>(),
      password: "SecurePass999!@#",
      display_name: RandomGenerator.name(2),
    } satisfies IDiscussionBoardMember.ICreate,
  });
  typia.assert(memberAReauth);

  const topic = await api.functional.discussionBoard.member.topics.create(
    connection,
    {
      body: {
        title: RandomGenerator.paragraph({ sentences: 3 }),
        body: RandomGenerator.content({ paragraphs: 2 }),
        category_id: category.id,
        tag_ids: null,
      } satisfies IDiscussionBoardTopic.ICreate,
    },
  );
  typia.assert(topic);

  // Step 6: Member B replies to trigger notification (re-authenticate as Member B)
  const memberBReauth = await api.functional.auth.member.join(connection, {
    body: {
      username: RandomGenerator.alphaNumeric(12),
      email: typia.random<string & tags.Format<"email">>(),
      password: "SecurePass888!@#",
      display_name: RandomGenerator.name(2),
    } satisfies IDiscussionBoardMember.ICreate,
  });
  typia.assert(memberBReauth);

  const reply =
    await api.functional.discussionBoard.member.topics.replies.create(
      connection,
      {
        topicId: topic.id,
        body: {
          discussion_board_topic_id: topic.id,
          parent_reply_id: null,
          content: RandomGenerator.paragraph({ sentences: 4 }),
        } satisfies IDiscussionBoardReply.ICreate,
      },
    );
  typia.assert(reply);

  // Step 7: Test authorization enforcement
  // Generate a notification ID to test the authorization boundary
  const testNotificationId = typia.random<string & tags.Format<"uuid">>();

  // Test: Member B attempts to delete notification for Member A's user ID
  // This should fail because Member B is authenticated but trying to access Member A's notifications
  await TestValidator.error(
    "cross-user notification deletion should be rejected",
    async () => {
      await api.functional.discussionBoard.member.users.notifications.erase(
        connection,
        {
          userId: memberAReauth.id,
          notificationId: testNotificationId,
        },
      );
    },
  );

  // Step 8: Verify Member B can attempt deletion on their own user ID
  // This may fail with 404 (notification not found) which is expected
  await TestValidator.error(
    "deleting non-existent notification should fail",
    async () => {
      await api.functional.discussionBoard.member.users.notifications.erase(
        connection,
        {
          userId: memberBReauth.id,
          notificationId: testNotificationId,
        },
      );
    },
  );
}
