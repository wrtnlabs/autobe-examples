[{"id":"0199e5a5-5e28-744f-a658-93f98b8e4abf","type":"userMessage","contents":[{"type":"text","text":"I want to create a simple economic/political discussion board.\r\n\r\nSince I'm not familiar with programming, please write a requirements analysis report as you see fit."}],"created_at":"2025-10-15T02:14:04.072Z"},{"id":"0199e5a5-7254-7316-b5e7-a48efccd1184","type":"assistantMessage","text":"Thank you for your request. Based on your description of wanting a \"simple economic/political discussion board,\" I've interpreted this as a basic platform for users to create and participate in discussions centered around economic and political topics. Since you've asked me to write the requirements analysis report as I see fit, I'll proceed with generating a structured specifications document to capture the essential features and scope.\n\nTo do this, I'll now execute the Analyze Agent, which will process our conversation and create the requirements report. This focuses purely on business logic, core features, user stories, and functional specifications—nothing technical or implementation-focused at this stage. Once complete, I'll share the results with you for review and confirmation before we move to the next steps (like database design).\n\n","created_at":"2025-10-15T02:14:09.236Z","completed_at":"2025-10-15T02:14:10.607Z"},{"type":"analyze","id":"0199e5a8-1367-706b-a6b9-0858cc34dca6","instruction":"Create a simple discussion board centered on economic and political topics, allowing users to create topics for discussion and post responses, with basic user functionality.","prefix":"discussionBoard","roles":[{"name":"guestUser","description":"Unauthenticated visitors who can browse discussions but cannot post or comment","kind":"guest"},{"name":"registeredUser","description":"Authenticated users who can create discussions, post responses, and participate in conversations","kind":"member"},{"name":"moderator","description":"Administrators who can manage content, moderate discussions, and manage users","kind":"admin"}],"files":[{"reason":"Creating a table of contents for the economic/political discussion board project to provide navigation for all documentation.","filename":"00-toc.md","outline":["Table of Contents","Document Overview","Audience Guide"],"audience":"general","keyQuestions":["What documents are available in this project?","How are the documents organized?"],"detailLevel":"high-level overview","documentType":"service-overview","relatedDocuments":[],"constraints":["Must list all files with descriptive titles","Include developer autonomy note at end"],"content":"# Table of Contents\n\n## Document Listing\n\n1. **[Table of Contents](./00-toc.md)**  \n   Central navigation and overview of all project documentation\n\n2. **[Service Overview and Business Model](./01-discussionBoard-serviceOverview.md)**  \n   Business justification, market analysis, and value proposition for the discussion board\n\n3. **[User Roles and Authentication Framework](./02-discussionBoard-userRoles.md)**  \n   Complete user role definitions, authentication requirements, and permission hierarchies\n\n4. **[User Scenarios and Journeys](./03-discussionBoard-userScenarios.md)**  \n   Primary user workflows and interaction scenarios for the discussion platform\n\n5. **[User Interface Flows and Navigation](./04-discussionBoard-userFlows.md)**  \n   Detailed flow descriptions for user navigation and interaction patterns\n\n6. **[Business Rules and Validation Logic](./05-discussionBoard-businessRules.md)**  \n   Core operational rules, content policies, and business constraints\n\n7. **[Functional Requirements Specification](./06-discussionBoard-functionalRequirements.md)**  \n   Complete functional capabilities in business terms using standardized formats\n\n8. **[Non-Functional Requirements and Quality Standards](./07-discussionBoard-nonFunctionalRequirements.md)**  \n   Performance expectations, usability standards, and operational requirements\n\n9. **[Content Moderation and Administration Policies](./08-discussionBoard-contentModeration.md)**  \n   Moderation workflows, administrator tools, and content management processes\n\n10. **[Data Privacy and Compliance Framework](./09-discussionBoard-dataPrivacyCompliance.md)**  \n    Privacy policies, data handling requirements, and regulatory compliance standards\n\n11. **[Success Metrics and Evaluation Criteria](./10-discussionBoard-successMetrics.md)**  \n    Key performance indicators, success measurements, and project milestones\n\n## Document Overview\n\nThis section provides detailed explanations of each document's purpose, scope, and key content areas to help you understand what information is contained in each file.\n\n### Table of Contents (00-toc.md)\nProvides centralized navigation for the entire project documentation set. Contains document listings with descriptive titles, audience information, and high-level overviews of what each document covers. Serves as the entry point for understanding project structure and locating relevant information.\n\n### Service Overview and Business Model (01-discussionBoard-serviceOverview.md)\nDefines the fundamental business case for the economic/political discussion board platform. Includes market opportunity analysis, competitive positioning, target user demographics, value propositions, and strategic objectives. Establishes the \"why\" behind the service's existence.\n\n### User Roles and Authentication Framework (02-discussionBoard-userRoles.md)  \nDetails the complete user role structure including guest users, registered members, and moderators. Specifies authentication flows, permission matrices, and role assignment logic. Defines what actions each user type can perform and what capabilities they have within the platform.\n\n### User Scenarios and Journeys (03-discussionBoard-userScenarios.md)\nDocuments primary user workflows from perspective of guest visitors, registered users, and moderators. Covers discussion creation processes, comment interactions, search behaviors, and typical user paths through the system. Includes both successful scenarios and edge cases.\n\n### User Interface Flows and Navigation (04-discussionBoard-userFlows.md)\nDescribes detailed user experience flows for navigation, content creation, and interaction patterns. Maps out step-by-step processes for users to discover content, post discussions, respond to topics, and handle error situations. Focuses on conceptual user flows rather than technical implementations.\n\n### Business Rules and Validation Logic (05-discussionBoard-businessRules.md)\nSpecifies operational rules governing platform behavior including content validation requirements, user conduct standards, data integrity constraints, and business operational policies. Defines the foundational business logic that governs how the system operates.\n\n### Functional Requirements Specification (06-discussionBoard-functionalRequirements.md)\nComprehensive specification of platform capabilities using standardized EARS format. Details discussion management features, user interaction systems, search functionality, notification mechanisms, and all core business functions the platform must support.\n\n### Non-Functional Requirements and Quality Standards (07-discussionBoard-nonFunctionalRequirements.md)\nDefines performance expectations, usability standards, security requirements, scalability needs, and availability criteria from user experience perspective. Establishes quality benchmarks and operational standards the platform must meet.\n\n### Content Moderation and Administration Policies (08-discussionBoard-contentModeration.md)\nOutlines content moderation workflows, reporting systems, administrative tools, and violation handling processes. Details how moderators identify inappropriate content, what actions they can take, and escalation procedures for serious issues.\n\n### Data Privacy and Compliance Framework (09-discussionBoard-dataPrivacyCompliance.md)\nEstablishes data governance policies, privacy protection requirements, regulatory compliance standards, and data retention rules. Defines how user information is collected, processed, stored, and managed throughout its lifecycle.\n\n### Success Metrics and Evaluation Criteria (10-discussionBoard-successMetrics.md)\nDefines key performance indicators, success measurement methods, evaluation frameworks, and milestone tracking. Establishes how project success will be quantified and measured during and after implementation.\n\n## Audience Guide\n\nThis section identifies the primary target readers for each document and when they should consult the specific information.\n\n### For Business Stakeholders\n- **Service Overview and Business Model (01-discussionBoard-serviceOverview.md)** - Understanding market opportunity and strategic justification\n- **Success Metrics and Evaluation Criteria (10-discussionBoard-successMetrics.md)** - Tracking business impact and ROI\n- **Data Privacy and Compliance Framework (09-discussionBoard-dataPrivacyCompliance.md)** - Regulatory requirements and risk management\n- **Non-Functional Requirements (07-discussionBoard-nonFunctionalRequirements.md)** - Quality standards and performance expectations\n\n### For Product Managers\n- **User Scenarios and Journeys (03-discussionBoard-userScenarios.md)** - Understanding user needs and behaviors  \n- **User Interface Flows (04-discussionBoard-userFlows.md)** - Conceptual interaction design and user experience\n- **Functional Requirements Specification (06-discussionBoard-functionalRequirements.md)** - Complete feature set and capabilities\n\n### For Development Team\n- **User Roles and Authentication (02-discussionBoard-userRoles.md)** - Technical implementation of access controls\n- **Business Rules and Validation Logic (05-discussionBoard-businessRules.md)** - Core business logic implementation\n- **Content Moderation Policies (08-discussionBoard-contentModeration.md)** - Administrative tools and workflows\n- **Functional Requirements Specification (06-discussionBoard-functionalRequirements.md)** - Technical feature implementation\n\n### For General Project Reference\n- **Table of Contents (00-toc.md)** - All team members for document navigation and project structure understanding\n\nEach document is designed with specific audiences in mind but can be referenced by other stakeholders as needed for comprehensive project understanding.\n\n> *Developer Note: This document defines **business requirements only**. All technical implementations (architecture, APIs, database design, etc.) are at the discretion of the development team.*"},{"reason":"Defining the overall service concept including business model, goals, and value proposition for the economic/political discussion board.","filename":"01-discussionBoard-serviceOverview.md","outline":["Business Model and Objectives","Service Description","Target Market","Value Proposition","Competitive Analysis"],"audience":"business stakeholders","keyQuestions":["Why should this discussion board exist?","What problems does it solve?","Who are the primary users?","What makes it different from other forums?"],"detailLevel":"moderate detail","documentType":"business-model","relatedDocuments":["00-toc.md"],"constraints":["Must include business justification even if inferred","Focus on why this service matters"],"content":"# Service Overview for Economic/Political Discussion Board\n\n## Executive Summary\n\nThe Economic/Political Discussion Board is a digital platform designed to facilitate informed, respectful discussions on economic and political topics. This service addresses the growing need for quality dialogue in an era of polarized public discourse, providing users with a safe, moderated environment to share ideas, learn from diverse perspectives, and engage in meaningful conversations about critical societal issues.\n\nThe platform empowers users through user-generated content where individuals can create discussion topics and participate in threaded responses, supported by role-based access controls that ensure content quality and user safety. By focusing on economic and political themes, the service creates value through structured dialogue that promotes understanding and informed decision-making.\n\n## Business Model and Objectives\n\n### Why This Service Exists\n\nIn today's information-saturated environment, social media platforms often prioritize engagement over quality, leading to echo chambers and misinformation. Meanwhile, traditional forums lack modern features and community management tools. The Economic/Political Discussion Board fills this critical gap by providing a specialized platform where thoughtful discourse on economic and political matters can thrive.\n\nThe service exists because:\n\n- **Market Gap**: Many platforms struggle with toxic discussions; this service implements strict moderation and user behavior rules to maintain quality\n- **Educational Value**: Users can learn from experts and peers about complex economic and political concepts in a structured format\n- **Community Building**: Creates a network of informed citizens who regularly engage with civic and economic issues\n\n### Business Objectives\n\n1. **Foster Quality Dialogue**: Enable users to create and participate in discussions that advance understanding of economic and political topics\n2. **Build Engaged Community**: Establish a loyal user base through consistently high-quality interactions and content management\n3. **Sustain Platform Health**: Implement scalable moderation systems to manage growth while maintaining discussion quality\n4. **Generate Revenue**: Through targeted advertising related to relevant economic/political content and premium features\n5. **Promote Civic Education**: Contribute to better-informed public discourse on topics affecting society\n\n### Revenue Strategy\n\nThe platform employs a dual-revenue model:\n- **Advertising**: Display contextual advertisements from partners in economic/political spheres (think tanks, financial services, educational institutions)\n- **Premium Features**: Offer enhanced capabilities for power users or organizations, such as advanced analytics, moderator tools, or branded discussion groups\n- **Affiliate Partnerships**: Collaborate with media outlets and educational platforms for content syndication\n\n### Growth Plan\n\nInitial acquisition through targeted marketing to current social media users frustrated with platform quality. Retention through superior user experience and community building. Expansion to related domains like policy analysis and civic education partnerships.\n\n## Service Description\n\nThe Economic/Political Discussion Board provides a digital forum where authenticated users can create discussion topics related to economic and political subjects, and participate in threaded responses. The platform maintains discussion quality through user role hierarchies and moderation capabilities.\n\n### Core Features in Business Terms\n\n- **Discussion Creation**: Registered users can initiate new discussion topics with titles, descriptions, and initial content\n- **Response System**: Users can post replies to discussions, creating threaded conversations that maintain context\n- **User Authentication**: Secure login system with role-based access, protecting user privacy and platform integrity\n- **Content Moderation**: Administrators can review, approve, modify, or remove inappropriate content\n- **Search and Discovery**: Users can find relevant discussions through keyword searches and categorized browsing\n- **User Management**: Tools for registration, profile management, and behavior tracking\n\nWHEN a user submits a login request with valid credentials, THE system SHALL authenticate the user and provide access to their account functions.\n\nWHEN a registered user creates a new discussion topic, THE system SHALL validate the content and make it visible to the community.\n\n## Target Market\n\n### Primary User Segments\n\n1. **Informed Citizens**: Adults aged 25-55 with interest in economic and political issues, seeking thoughtful discussion beyond social media\n\n2. **Students and Researchers**: Academic users studying economics, political science, or related fields who need platforms for structured dialogue and information sharing\n\n3. **Policy Professionals**: Government employees, think tank members, and consultants who need to discuss current events and policy implications\n\n4. **Engaged Seniors**: Retirees with time and interest in civic topics, preferring moderated discussions over unfiltered media\n\n### User Demographics\n\n- Age: 25-65 years old\n- Education: College-educated or higher\n- Interests: Current events, economics, politics, policy\n- Tech Literacy: Comfortable with online forums and social platforms\n- Motivation: Learning, networking, influencing public opinion\n\n### Market Size Considerations\n\nThe U.S. alone has approximately 50 million adults who actively engage in online political discussions. Internationally, similar segments exist in democratic societies. Initial focus is U.S.-centric with expansion potential to other English-speaking markets.\n\n## Value Proposition\n\n### Core Value for Users\n\nThe Economic/Political Discussion Board offers unparalleled value by:\n\n- **Quality Over Quantity**: Prioritizing meaningful discussions rather than viral content\n- **Structured Conversations**: Threaded responses maintain context and enable deep analysis\n- **Diverse Perspectives**: Encouraging respectful exchange of varied viewpoints\n- **Expert Participation**: Attracting knowledgeable contributors who enhance discussion quality\n- **Privacy and Safety**: Protected environment free from harassment and misinformation\n- **Educational Focus**: Learning opportunities through structured economic and political topics\n\n### Differentiation Factors\n\n1. **Specialized Focus**: Unlike general forums, this platform centers on economic/political discourse exclusively\n2. **Superior Moderation**: Role-based system with clear escalation paths for content issues\n3. **Educational Mission**: Every discussion is designed to advance understanding and informed decision-making\n4. **Professional Standard**: Business-appropriate platform suitable for professional networking and research\n\nWHILE a user participates in discussions, THE system SHALL maintain conversation structure with proper threading and context preservation.\n\nWHEN inappropriate content is identified, THE system SHALL provide moderators with tools to review and take appropriate action.\n\n## Competitive Analysis\n\n### Similar Platforms\n\n1. **Reddit**: Broad-topic platform with subreddits for politics/economics; Strengths: Large user base; Weaknesses: Inconsistent moderation, content quality varies widely\n\n2. **Facebook Groups**: Community-focused; Strengths: Social familiarity; Weaknesses: Algorithm-driven content, limited structured discussion capabilities\n\n3. **Political Forums (Traditional)**: Strengths: Focused discussions; Weaknesses: Outdated interfaces, limited moderation tools, declining user bases\n\n4. **LinkedIn**: Professional networking; Strengths: Quality users; Weaknesses: Not optimized for open discussion, more networking than dialogue-focused\n\n### Competitive Advantages\n\n- **Specialized Focus**: Unlike general platforms, complete dedication to economic/political topics\n- **Superior Moderation**: Role-based system with clear escalation paths for content violations\n- **Quality Standards**: User behavior rules and content validation ensure consistent quality\n- **Professional Environment**: Attracts serious contributors, differentiating from casual social media\n- **Educational Framework**: Built-in structure for learning and knowledge sharing\n\n### Market Positioning\n\nPositioned as the \"premium alternative\" to Reddit and Facebook Groups for users who value quality over quantity. Targets the segment seeking professional-grade platforms for serious discussion of civic matters.\n\n## Future Considerations\n\n### Scalability Plans\n\nAs the platform grows, we plan to expand geographically while maintaining stringent quality standards. Technical architecture will support increased user load through modular design and API-based integrations.\n\n### Feature Roadmaps\n\nPotential enhancements include:\n- Interactive charts and data visualization for economic discussions\n- Expert verification systems for qualified contributors\n- Integration with news sources and fact-checking services\n- Mobile application for enhanced accessibility\n- Advanced search with natural language processing\n\n### Sustainability Goals\n\nThe platform aims to become self-sustaining within 24 months through targeted advertising and premium features. Long-term vision includes partnerships with educational institutions and policy organizations for co-branded content areas.\n\n### Risk Mitigation\n\nProactive moderation policies and user education initiatives will prevent the platform from devolving into the polarized echo chambers that plague other discussion platforms.\n\nThis service overview establishes the foundation for a platform that not only addresses market needs but also contributes positively to civic discourse in an increasingly divided world."},{"reason":"Defining user roles, authentication, and permission hierarchies for the discussion board platform.","filename":"02-discussionBoard-userRoles.md","outline":["User Role Overview","Authentication Requirements","Role Permissions","Permission Matrix","Role Assignment Logic"],"audience":"development team","keyQuestions":["What types of users will interact with the system?","What permissions does each role have?","How are roles distinguished?","How does authentication work?"],"detailLevel":"detailed specification","documentType":"user-story","relatedDocuments":["00-toc.md","01-discussionBoard-serviceOverview.md"],"constraints":["Define all roles with business terms only","Include complete authentication flows","Specify role hierarchies using guest/member/admin"],"content":"# User Roles and Authentication for Economic/Political Discussion Board\n\n## User Role Overview\n\nThe economic/political discussion board platform operates with three distinct user role categories, each serving specific purposes in facilitating community discussions while maintaining content quality and user safety. These roles establish the foundation for authentication and access control throughout the system.\n\n### Guest User Role\nThe guest user represents unauthenticated visitors who can explore the platform's content without requiring registration. This role is designed to allow potential members to browse discussions, assess the community, and decide whether to join. Guest users cannot participate actively but can view public content.\n\n### Registered User Role\nRegistered users are fully authenticated members who have completed the signup process with verified email. This role enables full participation in community discussions, including creating topics, posting replies, and engaging with other members. Registered users form the core active community and contribute to the platform's content generation.\n\n### Moderator Role\nModerators serve as administrators responsible for content management and community oversight. This elevated role includes all registered user capabilities plus additional permissions for monitoring discussions, managing inappropriate content, and assisting with user management. Moderators ensure the platform remains a safe and respectful environment for economic and political discussions.\n\nThe role hierarchy follows a graduated access model: guest users have read-only access, registered users have full participation rights, and moderators have supervisory responsibilities. This structure promotes natural user progression from observer to participant to guardian.\n\n## Authentication Requirements\n\n### Core Authentication Functions\n\nWHEN a user provides valid email and password credentials, THE discussion board SHALL authenticate the user and grant access to role-appropriate features.\n\nWHEN a user submits registration details including email, password, and optional display name, THE discussion board SHALL create a new registered user account pending email verification.\n\nTHE discussion board SHALL require unique email addresses for all user registrations to ensure account individuality.\n\nWHEN a user requests password reset with a valid email address, THE discussion board SHALL send a secure reset link to the provided email.\n\nWHEN a user clicks a password reset link within the valid timeframe, THE discussion board SHALL allow password update and confirm the change.\n\nTHE discussion board SHALL enforce password complexity requirements including minimum length and character diversity.\n\nWHEN a user selects logout, THE discussion board SHALL immediately terminate the current session and invalidate associated tokens.\n\nTHE discussion board SHALL implement automatic session expiration after configurable periods of inactivity.\n\nWHEN authentication fails due to incorrect credentials, THE discussion board SHALL increment login attempt counter and enforce temporary lockout after multiple failures.\n\nTHE discussion board SHALL support email verification process for new registrations within specified time window.\n\n### JWT Implementation for Sessions\n\nTHE discussion board SHALL use JSON Web Tokens (JWT) for maintaining authenticated sessions.\n\nTHE JWT access token SHALL have configurable expiration time not exceeding 15 minutes for security.\n\nTHE JWT refresh token SHALL have configurable expiration time not exceeding 7 days.\n\nTHE JWT token payload SHALL include userId, role, and permissions array to support role-based access control.\n\nWHEN JWT access token expires, THE discussion board SHALL require token refresh using valid refresh token.\n\nWHEN refresh token is invalid or expired, THE discussion board SHALL prompt for re-authentication.\n\n### Multi-Device Session Management\n\nTHE discussion board SHALL allow simultaneous sessions across multiple devices per user.\n\nWHEN a user logs out from one device, THE discussion board SHALL optionally invalidate all active sessions for enhanced security.\n\nTHE discussion board SHALL maintain session history for administrative review while respecting privacy constraints.\n\n## Role Permissions\n\n### Guest User Permissions\n\nGuest users operate with minimal access privileges designed to facilitate content discovery without risking community integrity.\n\nWHEN a guest user browses the discussion board, THE discussion board SHALL display public categories and topics without requiring authentication.\n\nWHEN a guest user attempts to view individual discussions, THE discussion board SHALL present the full content including all replies.\n\nWHEN a guest user tries to create a new topic, THE discussion board SHALL redirect to registration page with clear guidance.\n\nWHEN a guest user attempts to reply to existing discussions, THE discussion board SHALL prompt for account creation.\n\nWHEN a guest user searches platform content, THE discussion board SHALL return results with full text snippets.\n\nWHEN a guest user tries to access user profiles, THE discussion board SHALL limit display to public information only.\n\nWHEN a guest user views forum statistics, THE discussion board SHALL show aggregate metrics without personal data.\n\n### Registered User Permissions\n\nRegistered users receive comprehensive participation rights to engage actively in economic and political discussions.\n\nWHEN a registered user authenticates to the platform, THE discussion board SHALL provide full access to all publishing features.\n\nWHEN a registered user creates a new discussion topic, THE discussion board SHALL validate content and publish immediately.\n\nWHEN a registered user submits a reply to existing topics, THE discussion board SHALL associate the response with their account.\n\nWHEN a registered user edits their own posts within the allowed timeframe, THE discussion board SHALL update the content and log the modification.\n\nWHEN a registered user follows other users or topics, THE discussion board SHALL add items to their personal subscription list.\n\nWHEN a registered user accesses comprehensive search, THE discussion board SHALL include advanced filtering options.\n\nWHEN a registered user manages their profile settings, THE discussion board SHALL save preferences and display name changes.\n\nWHEN a registered user upvotes or downvotes content, THE discussion board SHALL record the interaction for community ranking.\n\n### Moderator Permissions\n\nModerators receive elevated privileges to maintain community standards while preserving basic user participation rights.\n\nWHEN a moderator authenticates to the platform, THE discussion board SHALL display administrative controls alongside standard features.\n\nWHEN a moderator identifies inappropriate content, THE system SHALL allow flagging and removal options.\n\nWHEN a moderator reviews flagged content, THE system SHALL provide moderators with content history and user information.\n\nWHEN a moderator approves or rejects moderation queue items, THE system SHALL update content visibility accordingly.\n\nWHEN a moderator needs to contact users privately, THE system SHALL provide secure messaging capabilities.\n\nWHEN a moderator creates site-wide announcements, THE system SHALL distribute them to all members.\n\nWHEN a moderator adjusts user roles within their permitted scope, THE system SHALL update permissions immediately.\n\nWHEN a moderator accesses administrative reports, THE system SHALL provide metrics on content and user activity.\n\n## Permission Matrix\n\nThe following matrix outlines specific permissions by user role. Permissions are explicitly defined for clear backend implementation:\n\n| Action/Category | Guest User | Registered User | Moderator |\n|----------------|------------|-----------------|-----------|\n| View public discussions | ✅ | ✅ | ✅ |\n| Search public content | ✅ | ✅ | ✅ |\n| View user profiles | ✅ (limited) | ✅ | ✅ |\n| View forum statistics | ✅ | ✅ | ✅ |\n| Create discussion topics | ❌ | ✅ | ✅ |\n| Reply to discussions | ❌ | ✅ | ✅ |\n| Edit own posts | ❌ | ✅ (within timeframe) | ✅ |\n| Follow users/topics | ❌ | ✅ | ✅ |\n| Upvote/downvote | ❌ | ✅ | ✅ |\n| Flag inappropriate content | ❌ | ✅ | ✅ |\n| Access advanced search | ❌ | ✅ | ✅ |\n| Delete own posts | ❌ | ❌ | ✅ (as moderator) |\n| Review flagged content | ❌ | ❌ | ✅ |\n| Remove user posts | ❌ | ❌ | ✅ |\n| Ban/spam accounts | ❌ | ❌ | ✅ |\n| Create announcements | ❌ | ❌ | ✅ |\n| View admin reports | ❌ | ❌ | ✅ |\n| Manage user roles | ❌ | ❌ | ✅ (limited) |\n\n### Permission Enforcement Rules\n\nTHE discussion board SHALL enforce role-based permissions through JWT payload verification.\n\nWHEN a user attempts an action without required permission, THE discussion board SHALL return appropriate error response.\n\nTHE discussion board SHALL log all permission denial attempts for security monitoring.\n\nWHEN role permissions change, THE discussion board SHALL invalidate existing tokens requiring re-authentication.\n\n## Role Assignment Logic\n\n### Initial Registration Role Assignment\n\nWHEN a user successfully completes registration and email verification, THE discussion board SHALL assign the \"registeredUser\" role automatically.\n\nWHEN a user registers with a valid email but delays email verification, THE discussion board SHALL maintain guest status until verification completes.\n\nWHEN a user attempts actions requiring registered status without verification, THE discussion board SHALL prompt for email verification.\n\n### Moderator Role Assignment\n\nWHEN the platform requires moderator intervention, THE discussion board SHALL support administrator-initiated role elevations.\n\nWHEN a moderator account is created by existing administrator, THE discussion board SHALL assign \"moderator\" role immediately after creation.\n\nWHEN a registered user requests moderator access, THE discussion board SHALL queue the request for administrative review.\n\n### Role Change Processes\n\nWHEN an administrator approves role change request, THE discussion board SHALL update user record and invalidate existing sessions.\n\nWHEN a moderator is demoted to registered user, THE discussion board SHALL remove moderator permissions and log the action.\n\nWHEN role changes occur, THE discussion board SHALL update permission matrices and notify affected users.\n\nTHE discussion board SHALL maintain audit trail of all role assignments and changes for compliance purposes.\n\n### Business Rules for Role Transitions\n\nTHE discussion board SHALL not allow direct role escalation by non-administrative users.\n\nWHEN role changes impact active sessions, THE discussion board SHALL require immediate re-authentication.\n\nTHE discussion board SHALL prevent role downgrades that would violate content ownership rules.\n\nWHEN multiple role changes occur within short timeframe, THE discussion board SHALL require additional administrative approval.\n\n```mermaid\ngraph LR\n    A[\"User Registers\"] --> B{\"Email Verified?\"}\n    B -->|No| C[\"Guest Status\"]\n    B -->|Yes| D[\"Registered User Role\"]\n    D --> E[\"Apply Core Permissions\"]\n    E --> F[\"Enable Full Participation\"]\n    F --> G[\"Monitor User Activity\"]\n    G --> H{\"Flagged Content?\"}\n    H -->|Yes| I[\"Eligible for Moderator Consideration\"]\n    H -->|No| J[\"Continue as Registered User\"]\n    I --> K[\"Administrator Review\"]\n    K --> L{\"Approved?\"}\n    L -->|Yes| M[\"Assign Moderator Role\"]\n    L -->|No| N[\"Maintain Current Role\"]\n    M --> O[\"Apply Elevated Permissions\"]\n```\n\nThis authentication and role structure provides a secure foundation for the economic/political discussion board while enabling appropriate user progression and community management capabilities.\n\nReferences:\n- [Business Model and Objectives](./01-discussionBoard-serviceOverview.md)\n- [Table of Contents](./00-toc.md)"},{"reason":"Documenting primary user scenarios and journeys for economic/political discussions.","filename":"03-discussionBoard-userScenarios.md","outline":["Primary User Scenarios","Discussion Creation Flow","Comment and Response Flows","Search and Discovery Scenarios","Edge Cases"],"audience":"product managers","keyQuestions":["How do users typically use the discussion board?","What are the key user journeys?","What scenarios need to be supported?"],"detailLevel":"detailed specification","documentType":"user-story","relatedDocuments":["00-toc.md","02-discussionBoard-userRoles.md"],"constraints":["Focus on user workflows in natural language","Include both happy path and edge cases","Describe interactions conceptually"],"content":"# User Scenarios for Discussion Board Platform\n\n## Introduction\n\nThis document outlines the primary user scenarios and journeys for the discussion board platform, focusing on economic and political topics. These scenarios describe how users interact with the system from a business perspective, detailing the workflows and decision points that occur during typical usage. The purpose is to provide a clear understanding of user experiences and workflows, serving as a foundation for product managers to ensure the platform meets user needs effectively.\n\n## Primary User Scenarios\n\n### Guest User Scenario\nAs an unauthenticated visitor browsing the discussion board, a guest user can explore discussions but has limited interaction capabilities. Typical activities include discovering trending topics, reading discussion threads, and learning about the community. Guests may encounter scenarios where they want to participate but must register first, or they may choose to remain anonymous for passive consumption of content.\n\n### Registered User Scenario  \nAs an authenticated member of the platform, a registered user actively participates in discussions. This user creates new discussion topics, posts responses to existing threads, and engages with other community members. Registered users can follow topics of interest, receive updates on discussions they've participated in, and build a reputation through their contributions. They may also report inappropriate content or moderate their own interactions.\n\n### Moderator Scenario\nAs a content administrator, moderators oversee the platform's discussions to ensure quality and compliance. Moderators review new and existing content, address reported violations, and manage user accounts when necessary. They handle edge cases such as spam, offensive material, or rule violations, making decisions about content approval, removal, or escalation to higher authorities.\n\n## Discussion Creation Flow\n\n### New Discussion Creation Journey\nWHEN a registered user wants to start a new economic or political discussion, THE system SHALL guide them through a straightforward creation process. First, the user accesses the create discussion interface from the main navigation. The system presents a form requiring discussion title, initial post content, and optional topic categorization. As the user writes their post, the system provides real-time feedback on character limits and formatting options.\n\nThe flow continues as the user selects appropriate tags from predefined categories like economics, politics, or specific current events. If the user attempts to submit without meeting basic requirements such as minimum content length, THE system SHALL prevent submission and display helpful guidance. Once all required fields are completed and validated, the submission is processed, and THE system SHALL immediately show the new discussion in the appropriate category, notifying the user of successful creation.\n\n### Category Selection Process\nFor choosing discussion categories, users follow these steps:\n1. Review available category options matching economic/political themes\n2. Select one or more relevant categories that best fit the discussion topic\n3. Optionally browse recent discussions in the selected category for context\n4. Confirm category selection before posting\n\n### Preview and Edit Phase\nBefore final submission, THE system SHALL offer a preview mode allowing users to see how their discussion appears to others. If changes are needed, users can return to edit mode; otherwise, they proceed to publish the discussion publicly.\n\n## Comment and Response Flows\n\n### Thread Participation Workflow\nWHEN users engage with an existing discussion, they can post responses or comments at different levels of the conversation. Starting from the main discussion page, users read through the initial post and existing responses. They can choose to reply directly to the main topic or respond to specific comments made by others. The system organizes responses hierarchically, showing reply relationships visually to maintain conversation flow.\n\nAs users draft their responses, THE system SHALL provide formatting tools and track character usage. If a post exceeds recommended length or contains potential policy violations, THE system SHALL alert the user with suggestions for improvement. Users can save drafts, collaborate on responses, or simply read without participating. When published, their contribution becomes immediately visible in the discussion thread.\n\n### Like and Share Interactions\nUsers can express engagement through various interaction types:\n- Liking posts to show agreement or appreciation\n- Sharing discussions to other platforms or inviting friends\n- Bookmarking threads for later review\n- Following other users whose contributions resonate with them\n\n### Moderation Trigger Points\nWHEN users report content during participation, THE system SHALL prompt them to select the reason for reporting and provide additional context. Moderators receive notifications, review the flagged content, and determine appropriate actions such as deletion, warning, or approval.\n\n## Search and Discovery Scenarios\n\n### Content Discovery Journey\nWHEN users want to find specific discussions, they use the search functionality to explore the platform's content. The search interface allows keyword searching across discussion titles, descriptions, and user names. Results display in chronological or relevance order, with filters for time period, category, and popularity. Users can browse results, preview discussion summaries, and navigate into full threads.\n\nFor browsing without specific queries, THE system SHALL present curated content feeds showing:\n- Trending discussions by engagement level\n- Recently active conversations\n- Recommendations based on user's reading history\n- Featured content highlighted by moderators\n\n### Advanced Filtering Scenario\nUsers can combine multiple filters:\n- Time filters (last hour, day, week, month)\n- Category filters (economics, politics, specific subtopics)\n- Status filters (active discussions, resolved topics, archived content)\n- User filters (discussions by specific contributors, following others)\n\n### Search Results Interaction\nWHEN viewing search results, users can:\n- Sort by newest, oldest, or most responded\n- Expand result previews to read summaries\n- Save search queries for future use\n- Follow topics that match their interests\n\n## Edge Cases\n\n### Anonymous Browsing Limits\nWHEN anonymous users attempt restricted actions like posting comments, THE system SHALL redirect them to registration with clear explanations of benefits. They can continue browsing but receive gentle prompts to create accounts for full participation.\n\n### Content Moderation Conflicts\nIn scenarios where users disagree with moderation decisions, they can appeal through a structured process. First, the original moderator reviews appeals, then escalated cases go to senior moderators. Users receive clear explanations of outcomes, and the system logs all interactions for transparency.\n\n### Technical Access Issues\nWHEN users experience connectivity problems during posting, THE system SHALL save incomplete drafts automatically and provide recovery options. Upon reconnection, users can resume their work without data loss, ensuring continuous participation.\n\n### High-Traffic Discussion Handling  \nDuring periods of intense discussion activity, such as major economic events or political developments, THE system SHALL prioritize content delivery while preventing server overload. Users may experience slight delays in updates, but THE system SHALL maintain functionality and provide status indicators about current activity levels.\n\n### User Account Recovery Scenarios\nWHEN registered users forget access credentials, THE system SHALL provide secure recovery through email verification. The process includes temporary access while maintaining full security, and users receive guidance throughout each step.\n\n### Community Growth Transitions\nAs the platform expands from small group discussions to larger community interactions, user scenarios adapt. New users receive guided introductions, while long-term members access advanced features like conversation archiving and contributor statistics.\n\n### Content Archiving and Preservation\nWHEN discussions become inactive but retain historical value, moderators can archive them for future reference. Users can still access archived content but may need pagination for very long threads, with clear indicators that content is preserved for posterity.\n\n```mermaid\ngraph LR\n  A[\"User Enters Discussion Board\"] --> B{\"Is User Authenticated?\"}\n  B -->|Yes| C[\"Access Full Features: Create Discussions, Comment, Moderate\"]\n  B -->|No| D[\"Browse as Guest: Read Only\"]\n  D --> E[\"Encounter Posting Restriction\"]\n  E --> F[\"System Prompts Registration\"]\n  F --> G{\"Does User Register?\"}\n  G -->|Yes| C\n  G -->|No| H[\"Continue Browsing Limited Content\"]\n \n  subgraph \"Discussion Creation Process\"\n    I[\"Access Create Interface\"] --> J[\"Fill Required Fields: Title, Content, Categories\"]\n    J --> K{\"Meets Requirements?\"}\n    K -->|Yes| L[\"Preview Discussion\"]\n    K -->|No| M[\"Display Helpful Errors\"]\n    M --> J\n    L --> N[\"Submit to Platform\"]\n    N --> O[\"Discussion Publishes Successfully\"]\n    O --> P[\"Receive Creation Confirmation\"]\n    L --> Q[\"Cancel and Discard\"]\n  end\n \n  subgraph \"Comment and Response Flows\"\n    R[\"User Views Discussion Thread\"] --> S[\"Read Main Post and Comments\"]\n    S --> T{\"Choose Interaction Type\"}\n    T -->|Reply| U[\"Select Response Level: Main Topic or Specific Comment\"]\n    T -->|Like/Share| V[\"Perform Quick Action\"]\n    T -->|Report| W[\"Flag Inappropriate Content\"]\n    T -->|Follow| X[\"Subscribe to Updates\"]\n \n    U --> Y[\"Draft Response with Formatting Tools\"]\n    Y --> Z{\"Valid Content?\"}\n    Z -->|Yes| AA[\"Publish Response\"]\n    Z -->|No| BB[\"Fix Issues with Guidance\"]\n    BB --> Y\n \n    W --> CC[\"Select Report Reason\"]\n    CC --> DD[\"Submit Report Details\"]\n    DD --> EE[\"Moderator Notification\"]\n \n    AA --> FF[\"Response Appears in Thread\"]\n \n    subgraph \"Search and Discovery Flow\"\n      GG[\"Initiate Search or Browse\"] --> HH[\"Enter Keywords or View Feeds\"]\n      HH --> II[\"Apply Filters: Time, Category, Status\"]\n      II --> JJ{\"Content of Interest?\"}\n      JJ -->|Yes| KK[\"Dive into Full Discussion\"]\n      JJ -->|No| LL[\"Refine Search Criteria\"]\n      LL --> GG\n    end\n  end\n```\n\nThese scenarios provide comprehensive coverage of user interactions within the discussion board platform, ensuring that product managers can effectively plan for user needs and system capabilities."},{"reason":"Outlining user interface flows and interaction patterns for the discussion board.","filename":"04-discussionBoard-userFlows.md","outline":["Navigation and Discovery Flows","Content Creation Flows","Interaction Flows","Authentication Flows","Error Handling Flows"],"audience":"general","keyQuestions":["How do users navigate between discussions?","What steps are involved in posting?","How are errors handled from user perspective?"],"detailLevel":"detailed specification","documentType":"user-flow","relatedDocuments":["00-toc.md","03-discussionBoard-userScenarios.md"],"constraints":["Describe flows in natural language","Focus on user experience concepts","Include decision points and alternatives"],"content":"# User Interface Flows and Navigation for Economic/Political Discussion Board\n\nThis document describes the detailed user interface flows and navigation patterns for the Economic/Political Discussion Board platform. These flows represent the business logic of user interactions from a conceptual perspective, focusing on the experience users encounter when navigating, creating content, and interacting with discussions. All flows are described in natural language terms that support backend implementation without specifying technical details.\n\n## Navigation and Discovery Flows\n\n### Primary Entry Points to Discussions\nWHEN users first visit the discussion board platform, THE system SHALL present a welcoming landing page with featured economic and political discussions prominently displayed. Users can immediately see trending topics, recent activity indicators, and clear navigation options to browse by category.\n\nWHEN users select the \"Browse Discussions\" option from the main menu, THE system SHALL display a paginated list of discussion topics sorted by most recent activity. Each topic shown SHALL include title, author name, creation date, response count, and a brief preview of the initial content. Users can scan through multiple pages using numbered pagination controls or jump to specific dates using a calendar selector.\n\nWHEN users access the platform during peak hours with high discussion activity, THE system SHALL maintain full responsiveness by implementing smart loading mechanisms that prioritize essential content delivery while preventing server overload.\n\n### Search Functionality Mechanisms\nWHEN users initiate a search for economic or political topics, THE system SHALL provide an intelligent search interface that supports keyword queries, topic category filters, and date range limitations. The search box SHALL offer autocomplete suggestions based on popular terms and previously searched topics to help users discover relevant content quickly.\n\nWHEN users enter specific economic terms like \"inflation rates\" or \"trade policy\", THE system SHALL return results that include discussions, responses, and user profiles with highlighting of matching terms. Results SHALL be ranked by relevance with options to re-sort by newest, oldest, or most active discussions.\n\nWHEN advanced users apply multiple filters such as category, date range, and author, THE system SHALL combine these criteria efficiently and provide a filter summary that users can modify incrementally without losing their search context.\n\n### Category Browsing Processes\nWHEN users select an economic or political category from the navigation menu, THE system SHALL display a curated view of discussions within that category, showing topic hierarchy, popularity indicators, and recent activity markers. Each category view SHALL include sub-category options for more granular browsing, such as \"Monetary Policy\" under the broader \"Economic\" category.\n\nWHEN users explore political categories like \"Election Policy\" or \"International Relations\", THE system SHALL present topics with appropriate depth indicators and user engagement metrics to help distinguish between casual discussions and in-depth policy analysis.\n\nWHEN categories have high volume with hundreds of topics, THE system SHALL implement progressive loading that displays initial results immediately while continuing to load additional content in the background.\n\n### Personal Dashboard Access\nWHEN registered users access their personal dashboard, THE system SHALL display customized content feeds including discussions they've started, responses they've received, topics they're following, and notifications of mentions. The dashboard SHALL organize information into clear sections with actionable buttons for quick navigation to specific discussions.\n\nWHEN users customize their dashboard preferences, THE system SHALL save their layout choices and content filtering options for future visits, creating a personalized experience that adapts to their economic and political discussion interests.\n\n## Content Creation Flows\n\n### Topic Creation Workflow\nWHEN registered users click the \"Create Discussion\" button from any page, THE system SHALL display a comprehensive form with fields for title, category selection, and detailed description. The form SHALL include real-time validation that checks title uniqueness, category appropriateness, and content length requirements before submission.\n\nWHEN users write their discussion content, THE system SHALL provide a rich text editor with formatting options for bold text, links, and basic structure while maintaining plain text accessibility. Users can preview their formatted content before publishing, ensuring the discussion appears as intended to other users.\n\nWHEN users attempt to publish a topic with insufficient content or inappropriate categories, THE system SHALL highlight validation errors with specific guidance on how to correct issues, allowing users to revise and resubmit without losing their work.\n\nWHEN publishing succeeds, THE system SHALL immediately display the new discussion in the appropriate category, send confirmation notifications, and provide options to share the link with other users.\n\n### Response Posting Process\nWHEN users read a discussion topic and choose to respond, THE system SHALL position a response form at the bottom of the thread or inline with specific comments they want to address. The response form SHALL include character counters, draft saving options, and preview functionality to ensure quality contributions.\n\nWHEN users submit responses, THE system SHALL validate content for appropriateness, length, and structure before adding it to the discussion thread. Successful responses SHALL appear immediately in the conversation flow with proper threading that maintains discussion context.\n\nWHEN users participate in active discussions with multiple simultaneous responses, THE system SHALL handle submission gracefully by queuing responses if needed and providing clear feedback about posting status.\n\n### Draft Saving Mechanisms\nWHEN users create content that takes significant time, THE system SHALL automatically save drafts periodically to prevent work loss from browser crashes or session interruptions. Users can access their saved drafts from a dedicated section and resume editing at any time.\n\nWHEN users abandon a draft, THE system SHALL maintain it in their draft folder for a specified period, allowing recovery of accidentally closed work.\n\n### Preview and Editing Capabilities\nWHEN users create or edit content, THE system SHALL offer preview modes that show how their discussion or response will appear to other users. This includes rendering of links, formatting, and any embedded media previews.\n\nWHEN registered users edit their existing posts within the allowed timeframe, THE system SHALL maintain edit history and indicate edited content with timestamps, preserving discussion integrity.\n\n## Interaction Flows\n\n### Voting and Reaction Systems\nWHEN users encounter valuable economic or political insights, THE system SHALL provide upvote and downvote controls for discussions and individual responses. Each user can vote once per content item, with votes updating in real-time to reflect community sentiment.\n\nWHEN users vote on content, THE system SHALL recalculate popularity rankings and refresh displays accordingly, ensuring that high-quality contributions rise to visibility in category listings.\n\nWHEN users change their votes, THE system SHALL allow modifications within reasonable timeframes and update all related counts appropriately.\n\n### Following Users/Topics Features\nWHEN users discover interesting contributors or discussion topics, THE system SHALL enable following functionality that creates personalized notification feeds. Following a topic SHALL add it to a personalized feed that shows new responses and activity updates.\n\nWHEN users follow other members, THE system SHALL include their new discussions and responses in activity feeds, helping users track contributions from valued community members without overwhelming notifications.\n\nWHEN following becomes extensive, THE system SHALL organize followed content into manageable feeds with filtering options by category or user relationship type.\n\n### Sharing and Bookmarking Options\nWHEN users find noteworthy economic or political discussions, THE system SHALL provide sharing tools for external platforms and bookmarking for personal reference. Sharing SHALL generate shortened links with descriptive text that encourages participation from external audiences.\n\nWHEN users bookmark content, THE system SHALL organize bookmarks by category with search functionality, allowing easy retrieval of saved discussions for future reference.\n\nWHEN shared links bring new visitors to discussions, THE system SHALL track referral sources and provide users with feedback about sharing impact.\n\n### Notification Preferences\nWHEN users customize their notification settings, THE system SHALL provide granular controls for email, in-platform alerts, and push notifications. Users can specify preferences for new responses, mentions, topic updates, and moderator actions based on content categories.\n\nWHEN notification volume increases during major economic events, THE system SHALL batch similar notifications and provide digest options to prevent inbox overload.\n\n## Authentication Flows\n\n### Login and Registration Sequences\nWHEN guests initiate registration, THE system SHALL guide them through a step-by-step process that collects essential information and verifies email addresses. The registration flow SHALL include clear explanations of platform purpose and community guidelines to set appropriate expectations.\n\nWHEN users complete registration, THE system SHALL send verification emails with clear instructions and provide immediate access to limited browsing while awaiting confirmation.\n\nWHEN registered users log in, THE system SHALL authenticate credentials and redirect to their intended destination or personal dashboard with smooth transition.\n\n### Password Recovery Processes\nWHEN users forget their credentials, THE system SHALL provide secure recovery through email verification that doesn't expose account details. Recovery links SHALL expire after reasonable timeframes to maintain security.\n\nWHEN users reset passwords, THE system SHALL enforce strength requirements and provide guidance for creating secure credentials.\n\n### Session Management\nWHEN users remain active on the platform, THE system SHALL maintain sessions with reasonable timeouts that balance security with user convenience. Session management SHALL support multiple device access while allowing users to log out remotely if needed.\n\nWHEN sessions expire unexpectedly, THE system SHALL preserve user context and provide re-authentication that returns them to their previous activity.\n\n### Role-Based Access Transitions\nWHEN moderators access administrative functions, THE system SHALL provide clear visual indicators of their elevated capabilities. Transitions between guest, registered user, and moderator views SHALL maintain context and provide clear navigation paths back to standard user functions.\n\n## Error Handling Flows\n\n### Form Validation Feedback\nWHEN users submit forms with invalid data, THE system SHALL highlight specific fields with descriptive error messages that explain requirements and suggest corrections. Validation feedback SHALL prevent incorrect submissions while guiding users toward successful completion.\n\nWHEN users encounter persistent validation issues, THE system SHALL provide contextual help options that explain platform rules and best practices.\n\n### Connection Error Recoveries\nWHEN network interruptions occur during user interactions, THE system SHALL automatically save user input and provide resumption options when connection restores. Error recovery SHALL minimize work loss and provide clear status indicators about connection state.\n\nWHEN offline functionality is available, THE system SHALL allow basic browsing and composition of contributions for submission when connectivity returns.\n\n### Permission Denied Scenarios\nWHEN users attempt actions beyond their access level, THE system SHALL display clear explanations of permission requirements and provide paths to appropriate actions. Permission messages SHALL be educational rather than simply restrictive, helping users understand how to participate appropriately.\n\nWHEN guest users encounter registered-only features, THE system SHALL present registration benefits and streamlined signup options that preserve their current activity intent.\n\n### Data Loss Prevention\nWHEN users face potential data loss situations, THE system SHALL implement automatic saving and recovery mechanisms that preserve their work. Clear indicators SHALL inform users about save status and recovery options available to them.\n\nWHEN system errors occur, THE system SHALL provide graceful degradation that maintains user progress and offers clear reporting options for technical support.\n\n```mermaid\ngraph LR\n    A[\"User Accesses Platform\"] --> B{\"Authentication Status?\"}\n    B -->|Guest| C[\"Display Public Browse Interface\"]\n    B -->|Registered| D[\"Show Personal Dashboard\"]\n    D --> E[\"Access Full Features: Create, Comment, Interact\"]\n    C --> F[\"Prompt Registration for Advanced Features\"]\n    F --> G{\"Choose to Register?\"}\n    G -->|Yes| H[\"Registration Flow\"]\n    G -->|No| I[\"Continue Limited Browsing\"]\n    E --> J[\"Content Creation Flows\"]\n    J --> K[\"Topic/Response Creation\"]\n    K --> L[\"Preview and Validation\"]\n    L --> M[\"Publish to Community\"]\n    M --> N[\"Immediate Display and Notifications\"]\n```\n\n```mermaid\ngraph LR\n    O[\"User Searches Content\"] --> P[\"Enter Keywords/Filters\"]\n    P --> Q[\"Query Processing\"]\n    Q --> R[\"Results Ranking: Relevance/Date/Activity\"]\n    R --> S[\"Display with Highlights\"]\n    S --> T{\"Results Satisfactory?\"}\n    T -->|Yes| U[\"Browse/Dive into Topics\"]\n    T -->|No| V[\"Refine Search Criteria\"]\n    V --> W[\"Apply New Filters\"]\n    W --> Q\n    U --> X[\"Read Discussion Thread\"]\n    X --> Y[\"Participate: Vote, Comment, Share\"]\n    Y --> Z[\"Generate Activity Updates\"]\n    Z --> AA[\"Community Feedback Loop\"]\n```\n\nThis comprehensive flow specification ensures that users experience intuitive and reliable navigation throughout the economic/political discussion board, supporting both casual browsing and active participation in meaningful discussions."},{"reason":"Defining business logic, validation rules, and operational rules for the discussion board.","filename":"05-discussionBoard-businessRules.md","outline":["Content Validation Rules","User Behavior Rules","Moderation Rules","Data Integrity Rules","Operational Constraints"],"audience":"development team","keyQuestions":["What rules govern content creation?","What validation is needed?","How are violations handled?","What operational rules apply?"],"detailLevel":"detailed specification","documentType":"requirement","relatedDocuments":["00-toc.md","02-discussionBoard-userRoles.md","04-discussionBoard-userFlows.md"],"constraints":["Define rules in business terms only","Include all validation logic conceptually","Cover content moderation policies"],"content":"# Business Rules Specification for Economic and Political Discussion Board\n\n## Executive Summary\n\nThis document defines the comprehensive business logic, validation rules, and operational constraints governing the economic and political discussion board system. These rules ensure consistent content quality, user behavior standards, and data integrity while supporting moderated community interactions. All specifications focus on business requirements and user experience outcomes rather than technical implementation details.\n\n## Content Validation Rules\n\n### Discussion Topic Validation\n\nWHEN a user attempts to create a discussion topic, THE system SHALL validate the topic title meets minimum length requirements of 10 characters and maximum length of 200 characters.\n\nWHEN a user submits a topic title, THE system SHALL reject titles containing prohibited words or phrases defined in the content policy.\n\nWHEN a topic is submitted without a valid title, THE system SHALL return a validation error indicating the title requirement.\n\nWHEN a topic body is submitted, THE system SHALL ensure it contains at least 50 characters and does not exceed 10,000 characters.\n\nIF the topic category selection is not one of the predefined economic or political categories, THEN THE system SHALL reject the submission with a category validation error.\n\n### Response and Comment Validation\n\nWHEN a user posts a response to a discussion topic, THE system SHALL validate the response content contains meaningful text of at least 20 characters.\n\nWHEN a response includes links, THE system SHALL validate that all URLs follow standard HTTP/HTTPS formats.\n\nWHEN a comment is submitted that consists primarily of repeated characters or symbols, THE system SHALL reject it as spam content.\n\nIF a response contains more than 3 external links, THEN THE system SHALL mark it for moderator review before public display.\n\n### Content Format and Structure Rules\n\nTHE system SHALL enforce plain text or basic markup formatting only for discussion content, excluding executable code or scripts.\n\nWHEN content parsing detects HTML tags or script elements, THE system SHALL sanitize or reject the content automatically.\n\nTHE system SHALL preserve line breaks and paragraph formatting in discussion content during display.\n\n## User Behavior Rules\n\n### Authentication and Activity Tracking\n\nWHEN a guest user attempts to create content, THE system SHALL redirect to the registration or login process.\n\nWHILE a user is authenticated, THE system SHALL track their posting frequency to prevent abuse patterns.\n\nIF a user posts more than 5 new topics within a 24-hour period, THEN THE system SHALL temporarily restrict new topic creation for that user.\n\n### Interaction and Reputation Rules\n\nWHEN a user votes up or down on a discussion, THE system SHALL prevent users from voting on their own content.\n\nTHE system SHALL limit each user to one vote per discussion topic or response.\n\nWHEN users report abusive content, THE system SHALL accumulate reports and escalate to moderators when threshold of 3 reports is reached.\n\nIF a user accumulates more than 10 reports within a 7-day period, THEN THE system SHALL temporarily suspend their commenting privileges.\n\n### Account Management Behavior\n\nWHEN a user changes their display name, THE system SHALL prevent names containing offensive language or impersonating other users.\n\nTHE system SHALL allow users to edit their posts within 30 minutes of initial publication.\n\nWHEN users delete their own content, THE system SHALL mark it as deleted rather than removing it permanently from the database.\n\n## Moderation Rules\n\n### Content Review Process\n\nWHEN new discussion topics are submitted, THE system SHALL hold them in pending status for moderator approval before making them publicly visible.\n\nWHILE a topic is in pending status, THE system SHALL display a \"under review\" message to the author.\n\nTHE moderators SHALL have 24 hours to review pending content, after which unapproved content escalates.\n\nWHEN moderators approve content, THE system SHALL immediately make it visible in the discussion feed and notify the author.\n\n### Violation Handling Procedures\n\nIF content violates community guidelines regarding hate speech or misinformation, THEN THE system SHALL allow moderators to remove the content and warn the user.\n\nWHEN users receive their first warning, THE system SHALL send a notification explaining the violation and community standards.\n\nIF users receive three warnings within 30 days, THEN THE system SHALL suspend their account for 7 days.\n\nWHEN accounts are suspended, THE system SHALL prevent all posting and commenting activities until suspension period ends.\n\n### Appeal and Resolution Process\n\nWHEN users appeal moderation decisions, THE system SHALL provide a form for submitting evidence and reasons.\n\nTHE moderators SHALL review appeals within 48 hours and communicate final decisions via email.\n\nWHEN appeals are denied, THE system SHALL provide clear reasoning and potential paths for reinstatement.\n\n## Data Integrity Rules\n\n### Unique Content Management\n\nTHE system SHALL prevent duplicate discussion topics with identical or nearly identical titles.\n\nWHEN duplicate content is detected, THE system SHALL redirect users to the existing discussion instead of creating new ones.\n\n### Historical Data Preservation\n\nWHEN content is moderated or removed, THE system SHALL maintain audit logs of the original content and moderation actions.\n\nTHE system SHALL preserve all discussion threads and responses even when authors delete their accounts.\n\nWHEN discussions expire based on activity rules, THE system SHALL archive them rather than delete them.\n\n### Relationship Integrity\n\nTHE system SHALL maintain proper linking between discussion topics, responses, and user accounts.\n\nWHEN user accounts are modified, THE system SHALL update all associated content attribution automatically.\n\nTHE system SHALL prevent orphaned responses that exist without associated parent discussions.\n\n## Operational Constraints\n\n### Content Lifecycle Management\n\nTHE system SHALL retire inactive discussions with no responses after 90 days by moving them to an archive category.\n\nWHEN discussions receive significant activity (more than 50 responses), THE system SHALL pin them to featured sections.\n\nTHE system SHALL limit each discussion to a maximum of 500 direct responses to maintain usability.\n\n### Performance and Volume Constraints\n\nWHEN search queries return more than 100 results, THE system SHALL paginate the results with 25 items per page.\n\nTHE system SHALL limit API requests from individual users to 60 per minute to prevent system overload.\n\nWHEN peak usage exceeds server capacity, THE system SHALL implement automatic throttling based on user priority.\n\n### Business Hours and Support\n\nTHE moderator team SHALL respond to flagged content within 12 business hours.\n\nWHEN users contact support, THE system SHALL provide estimated response times of 24-48 business hours.\n\nTHE system SHALL operate 24/7 but schedule maintenance windows only during low-usage hours (2:00-4:00 AM local time).\n\n## Conclusion\n\nThese business rules establish a framework for maintaining quality discourse while enabling free expression within the economic and political discussion board. The validation and moderation processes described above balance automation with human oversight to create a trustworthy platform. All rules are designed to scale with user growth while maintaining clear boundaries on acceptable behavior.\n\nImplementation of these rules requires careful consideration of user experience impacts and transparent communication of community guidelines. The rules serve as the foundation for building trust and engagement within the user community."},{"reason":"Specifying functional requirements for the discussion board in natural language.","filename":"06-discussionBoard-functionalRequirements.md","outline":["Discussion Management Requirements","User Management Requirements","Content Interaction Requirements","Search and Filtering Requirements","Notification Requirements"],"audience":"development team","keyQuestions":["What core features must the board have?","What user interactions should be supported?","What search capabilities are needed?"],"detailLevel":"detailed specification","documentType":"requirement","relatedDocuments":["00-toc.md","03-discussionBoard-userScenarios.md","05-discussionBoard-businessRules.md"],"constraints":["Use EARS format for all requirements","Focus on business logic not technical implementation","Include comprehensive functional specifications"],"content":"# Discussion Board Functional Requirements\n\n## Introduction\n\nThis document defines the functional requirements for the Simple Economic/Political Discussion Board system. The platform enables users to engage in discussions on economic and political topics through topics and responses. The requirements are specified using natural language and the EARS (Easy Approach to Requirements Syntax) format where applicable, ensuring clarity for backend developers. All requirements focus on business logic, user interactions, and validation rules without specifying technical implementation details.\n\nThe discussion board operates as a business service that fosters informed discussions on economic and political issues. Users can be anonymous visitors browsing content, registered members creating and participating in discussions, or moderators managing the platform.\n\nBusiness objectives include:\n- Providing a space for civil discourse on economic and political topics\n- Enabling user-generated content with moderation to maintain quality\n- Supporting user registration, authentication, and role-based access\n- Delivering real-time search and filtering capabilities for content discovery\n- Implementing notifications to keep users engaged with relevant discussions\n\nSYSTEM ROLES:\n- Guest users: Can browse discussions but cannot post or interact\n- Registered users: Can create topics, post responses, and moderate their own content\n- Moderators: Can manage all content and users beyond basic post management\n\nThese requirements ensure the system meets user expectations for functionality while maintaining data integrity and appropriate access controls.\n\nFor detailed user scenarios that inform these requirements, refer to the [User Scenarios Document](./03-discussionBoard-userScenarios.md).\nFor the underlying business rules governing these functions, refer to the [Business Rules Document](./05-discussionBoard-businessRules.md).\n\nAll requirements in this document are expressed in natural language or EARS format to avoid ambiguity.\n\n## Discussion Management Requirements\n\nDiscussion management encompasses the creation, display, and organization of discussion topics. Topics serve as the primary containers for economic and political discussions, allowing users to initiate conversations on specific subjects.\n\n### Topic Creation\nWHEN a user attempts to create a discussion topic, THE system SHALL validate the topic title meets minimum length requirements of 10 characters and maximum length of 200 characters.\nWHEN the user submits the topic, THE system SHALL validate the input format and uniqueness.  \nIF the topic title is empty or exceeds 200 characters, THEN THE system SHALL prevent submission and display appropriate error message.  \nIF the topic description exceeds 1000 characters, THEN THE system SHALL truncate the content or prevent submission.  \nWHEN a topic is successfully created, THE system SHALL assign it a unique identifier, timestamp the creation, and associate it with the creator's account.  \n\nWHEN a user creates a topic without authentication, THE system SHALL redirect to login with a message about registration requirements.\nWHEN a registered user submits a topic with invalid characters, THE system SHALL display specific validation errors for each field.\nWHEN the topic content contains prohibited content, THE system SHALL flag it for moderator review before publishing.\n\n### Topic Display\nTHE discussion board SHALL display topics in reverse chronological order (newest first) on the main page.  \nWHEN a guest or registered user views the topic list, THE system SHALL show topic title, creator name, creation date, response count, and last activity timestamp.  \nWHEN a user selects a topic, THE system SHALL display the full topic content including all responses in chronological order.  \nIF a topic has no responses, THE system SHALL indicate this status clearly.  \n\nWHEN a topic has more than 50 responses, THE system SHALL paginate responses with 20 per page and navigation controls.\nWHEN users load a topic page, THE system SHALL track the view count in real-time.\nWHEN a topic becomes locked by moderators, THE system SHALL display a visual indicator that no new responses are allowed.\n\n### Topic Categories\nTHE discussion board SHALL support predefined categories for economic and political topics (Economics, Politics, Policy, Finance, International).  \nWHEN creating a topic, THE system SHALL require category selection to organize discussions.  \nWHEN browsing topics, THE system SHALL provide category filtering options.  \nWHEN a category has no topics, THE system SHALL indicate empty state appropriately.  \n\nWHEN users filter by multiple categories, THE system SHALL show topics matching any selected category with clear filter indicators.\nWHEN moderators move a topic to a different category, THE system SHALL update the category association and notify followers of the change.\n\n### Topic Moderation\nWHEN a user (topic creator or moderator) requests topic deletion, THE system SHALL mark the topic and all associated responses as deleted (soft delete).  \nWHEN a moderator locks a topic, THE system SHALL prevent new responses while allowing existing content to remain visible.  \nWHEN a moderator pins a topic, THE system SHALL display it at the top of category listings.  \nWHEN a moderator moves a topic between categories, THE system SHALL update category associations and refresh display.  \n\nTHE discussion board SHALL enforce content policies for topics, validating that titles and descriptions contain appropriate language and are relevant to economic/political themes.\n\nWHEN moderators review new topics, THE system SHALL provide tools to approve, reject, or edit before publication.\nWHEN a topic is rejected, THE system SHALL send the creator an explanation with re-submission guidelines.\nWHEN moderators edit inappropriate content, THE system SHALL log the changes with timestamps and moderator identity.\n\n### Topic Statistics\nWHEN a topic is viewed, THE system SHALL track and display view counts.  \nWHEN a topic receives responses, THE system SHALL update and display response counts.  \nWHEN users interact with topics (view, respond), THE system SHALL maintain activity timestamps for sorting and discovery.\n\nWHEN data is requested for analytics, THE system SHALL provide aggregate statistics without individual user identification.\nWHEN topics reach milestone response counts, THE system SHALL automatically highlight them in featured sections.\n\n## User Management Requirements\n\nUser management covers registration, authentication, and profile management for participants in the discussion board.\n\n### User Registration\nWHEN a guest initiates registration, THE system SHALL collect email, password, and optional username.  \nWHEN a user registers with an existing email, THE system SHALL reject the registration with an appropriate error message.  \nWHEN the registration is submitted, THE system SHALL validate email format and password strength.  \nIF validation fails, THE system SHALL display specific error messages for each invalid field.  \nWHEN registration succeeds, THE system SHALL create the user account, send a verification email, and assign registered user role.  \n\nWHEN a user fails email verification within 7 days, THE system SHALL send reminder notifications.\nWHEN a password meets minimum strength (8 characters, mixed case, numbers), THE system SHALL accept it.\nWHEN usernames are provided, THE system SHALL validate uniqueness and length (3-30 characters).\n\n### Authentication\nWHEN a registered user submits login credentials, THE system SHALL verify email/password combination.  \nIF credentials are valid, THE system SHALL authenticate the user session and redirect to appropriate dashboard.  \nIF credentials are invalid, THE system SHALL display error message and track login attempts.  \nWHEN an authenticated user logs out, THE system SHALL terminate the session and redirect to public landing page.  \nTHE system SHALL maintain user sessions with appropriate timeout policies.\n\nWHEN users request password reset, THE system SHALL send secure reset links valid for 24 hours.\nWHEN sessions expire due to inactivity (after 2 hours), THE system SHALL require re-authentication.\nWHEN brute force attempts are detected (5 failed logins), THE system SHALL temporarily lock the account for 30 minutes.\n\n### Profile Management\nWHEN a registered user accesses their profile, THE system SHALL display personal information (username, email, join date, post count).  \nWHEN the user edits profile, THE system SHALL validate changes including unique username and valid email format.  \nWHEN a user changes password, THE system SHALL require current password verification and enforce strength requirements.  \nTHE system SHALL allow users to delete their account with confirmation, marking all content as anonymous.\n\nWHEN users view their contribution history, THE system SHALL show all topics and responses with edit history.\nWHEN account deletion is requested, THE system SHALL require confirmation and provide data export options.\n\n### Role Management\nTHE discussion board SHALL support three user types: guest, registered user, and moderator.  \nWHEN a registered user is promoted to moderator, THE system SHALL update role permissions and display administrative tools.  \nWHEN a moderator demotes a user, THE system SHALL validate authority and notify affected user.  \nTHE system SHALL prevent guests from accessing member-only features while enforcing role-based restrictions.\n\nWHEN moderators are promoted from registered users, THE system SHALL provide role-specific training through the interface.\nWHEN unauthorized role changes are attempted, THE system SHALL log security violations and notify administrators.\nWHEN role downgrades occur, THE system SHALL remove inaccessible features from the user interface.\n\n```mermaid\ngraph LR\n  A[\"Guest User\"] --> B{\"Is User Authenticated?\"}\n  B -->|Yes| C[\"Access Full Features: Create Discussions, Comment, Moderate\"]\n  C --> D[\"Create Topic\"] --> E[\"Post Response\"] --> F[\"Moderate Content\"]\n  B -->|No| G[\"Browse as Guest: Read Only\"]\n  G --> H[\"View Topics\"] --> I[\"Read Responses\"] --> J[\"Search Content\"]\n  K[\"User Registers\"] --> L[\"Validate Email/Password\"] --> M[\"Send Verification\"] --> N[\"Assign Registered Role\"]\n  O[\"Mod Promotion Request\"] --> P[\"Admin Review\"] --> Q[\"Grant Moderator Role\"]\n  Q --> R[\"Show Admin Tools\"]\n```\n\n## Content Interaction Requirements\n\nContent interaction defines how users engage with topics through responses, voting, and sharing functionality.\n\n### Response Creation\nWHEN a registered user views a topic, THE system SHALL provide a response creation form with text area and submission controls.  \nWHEN the user submits a response, THE system SHALL validate content length (maximum 2000 characters) and format.  \nIF the response is empty or too long, THE system SHALL prevent submission and show error message.  \nWHEN response is accepted, THE system SHALL add it to the topic in chronological order, associate with user, and timestamp the submission.\n\nWHEN responses contain inappropriate language, THE system SHALL automatically flag them for moderation review.\nWHEN users attempt to post responses to locked topics, THE system SHALL display an error explaining the restriction.\nWHEN responses are submitted during high-traffic periods, THE system SHALL confirm submission within 5 seconds.\n\n### Response Display\nWHEN displaying topic responses, THE system SHALL show author name, content, create date, edit indicator, and action buttons.  \nWHEN responses exceed display limit, THE system SHALL paginate content with navigation controls.  \nWHEN a user edits their response, THE system SHALL allow modifications within 30 minutes of posting, preserving edit history.\n\nWHEN response threads become nested, THE system SHALL visually indent sub-responses for clarity.\nWHEN users report responses, THE system SHALL show the action button with clear labeling.\nWHEN moderators approve edited responses, THE system SHALL display edit history in a collapsible format.\n\n### Content Voting\nWHEN registered users view responses, THE system SHALL provide upvote/downvote controls per response.  \nWHEN a vote is cast, THE system SHALL update vote counts and prevent multiple votes from same user.  \nTHE system SHALL display vote totals publicly for each response, affecting response ordering.\n\nWHEN users attempt to vote on their own responses, THE system SHALL prevent the action and display a message.\nWHEN vote manipulation is detected, THE system SHALL reset affected vote counts and flag for investigation.\nWHEN sorting by popularity, THE system SHALL calculate scores based on vote totals minus time decay.\n\n### Content Reporting\nWHEN a user reports inappropriate content, THE system SHALL collect report reason and notify moderators.  \nWHEN moderators review reports, THE system SHALL provide tools to approve, delete, or dismiss the report.  \nWHEN content is deleted by moderator, THE system SHALL remove it from public view and notify originator.\n\nWHEN reports accumulate (3+ for same content), THE system SHALL automatically hide the content pending review.\nWHEN users report spam repeatedly, THE system SHALL implement cooldown periods between reports.\nWHEN reports are dismissed, THE system SHALL notify reporters with explanation.\n\n```mermaid\ngraph LR\n  A[\"User Submits Response\"] --> B[\"Validate Content\"]\n  B -->|Valid| C[\"Save Response\"]\n  C --> D[\"Add to Topic\"]\n  D --> E[\"Sort Chronologically\"]\n  B -->|Invalid| F[\"Show Error\"]\n  F --> A\n  G[\"User Votes on Response\"] --> H{\"Already Voted?\"}\n  H -->|Yes| I[\"Prevent Vote\"]\n  H -->|No| J[\"Record Vote\"]\n  J --> K[\"Update Counts\"]\n  L[\"User Reports Content\"] --> M[\"Collect Reason\"] --> N[\"Queue for Moderation\"]\n  N --> O[\"Moderator Review\"] --> P[\"Take Action\"]\n  P --> Q[\"Delete/Hide Content\"] --> R[\"Notify User\"]\n  P --> S[\"Dismiss Report\"]\n```\n\n## Search and Filtering Requirements\n\nSearch and filtering enable users to discover relevant economic and political discussions effectively.\n\n### Basic Search\nWHEN a user enters search terms, THE system SHALL search within topic titles, descriptions, and response content.  \nTHE system SHALL return results ranked by relevance, displaying matching topics with highlighted terms.  \nWHEN no results match, THE system SHALL suggest alternative searches or show \"no results\" message.  \nTHE system SHALL perform search instantly for common query types, supporting partial matches.\n\nWHEN search terms contain special characters, THE system SHALL handle them appropriately for accurate results.\nWHEN users search quoted phrases, THE system SHALL treat them as exact matches.\nWHEN search performance degrades, THE system SHALL prioritize recent and popular content in results.\n\n### Category Filtering\nWHEN users browse topics, THE system SHALL offer category filters (Economics, Politics, Policy, Finance, International).  \nWHEN multiple categories are selected, THE system SHALL show topics matching any selected category.  \nTHE system SHALL display active filters with clear removal options.\n\nWHEN category combinations are complex, THE system SHALL provide AND/OR logic selection.\nWHEN new categories are added, THE system SHALL automatically include them in filter options.\n\n### Response Search\nWHEN searching within a topic, THE system SHALL filter responses containing the search terms.  \nWHEN search terms are found, THE system SHALL highlight matching text and show response context.\n\nWHEN intra-topic search finds no matches, THE system SHALL suggest expanding search to related topics.\nWHEN response search is performed, THE system SHALL maintain topic context while showing only matching responses.\n\n### Advanced Filtering\nWHEN users apply filters, THE system SHALL support combinations of category, date range, author, and popularity criteria.  \nWHEN filters are applied, THE system SHALL show filter summary and allow incremental modifications.  \nTHE system SHALL provide quick filter presets like \"Recent Discussions\" and \"Popular Topics\".\n\nWHEN advanced filters are applied, THE system SHALL cache results for 5 minutes to improve performance.\nWHEN filter combinations return no results, THE system SHALL suggest filter relaxation options.\n\n```mermaid\ngraph LR\n  A[\"User Enters Search\"] --> B[\"Process Query\"]\n  B --> C[\"Search Topics & Responses\"]\n  C --> D[\"Rank by Relevance\"]\n  D --> E[\"Display Results with Highlights\"]\n  E --> F{\"Results Found?\"}\n  F -->|Yes| G[\"Show Matching Content\"]\n  F -->|No| H[\"Show Suggestions\"]\n  I[\"User Applies Filters\"] --> J[\"Select Criteria\"]\n  J --> K[\"Apply Category/Date/Author Filters\"]\n  K --> L[\"Combine with Search\"]\n  L --> M[\"Show Filtered Results\"]\n  M --> N[\"Display Filter Summary\"]\n  O[\"Quick Presets\"] --> P[\"Recent/Popular Filters\"]\n  P --> Q[\"Apply Preset Criteria\"]\n  Q --> M\n```\n\n## Notification Requirements\n\nNotifications keep users informed about discussions and interactions relevant to their interests.\n\n### Notification Types\nWHEN a topic receives a new response, THE system SHALL notify the topic creator and recent responders.  \nWHEN a user is mentioned in a response, THE system SHALL send direct notification to the mentioned user.  \nWHEN a moderator takes action on user content, THE system SHALL notify the content author.  \nWHEN a user's content is voted highly, THE system SHALL consider sending recognition notifications.\n\nWHEN users follow specific users, THE system SHALL notify them of those users' activities.\nWHEN topics reach popularity thresholds, THE system SHALL notify interested users.\nWHEN responses receive significant votes, THE system SHALL send engagement notifications.\n\n### Notification Preferences\nWHEN a registered user configures settings, THE system SHALL allow enabling/disabling different notification types.  \nTHE system SHALL support notification delivery through in-platform alerts and email options.  \nWHEN users opt out, THE system SHALL respect preferences and avoid sending unwanted notifications.\n\nWHEN users configure granular preferences, THE system SHALL allow different settings for mentions vs. responses.\nWHEN notification preferences change, THE system SHALL immediately apply them to future events.\nWHEN email delivery fails, THE system SHALL fallback to in-platform notifications.\n\n### Notification Display\nWHEN users access the platform, THE system SHALL show recent notifications in a dedicated panel.  \nWHEN notifications accumulate unread, THE system SHALL indicate count with visual indicators.  \nWHEN users mark notifications read, THE system SHALL update status and potentially archive old notifications.\n\nWHEN notifications exceed 50 unread, THE system SHALL group them by type and show summaries.\nWHEN users access notification history, THE system SHALL provide date-ordered archive view.\n\n```mermaid\ngraph LR\n  A[\"Event Occurs\"] --> B[\"Check User Preferences\"]\n  B -->|Enabled| C[\"Create Notification\"]\n  B -->|Disabled| D[\"Skip Notification\"]\n  C --> E[\"Determine Delivery Method\"]\n  E --> F[\"Send In-Platform Alert\"]\n  E --> G[\"Send Email Notification\"]  \n  H[\"User Views Notifications\"] --> I[\"Display in Panel\"]\n  I --> J[\"Show Unread Count\"]\n  J --> K[\"Mark as Read\"]\n  K --> L[\"Update Status\"]\n```\n\n## Requirements Validation Summary\n\nThe following table summarizes key validation rules across all functional areas:\n\n| Requirement Area | Key Validations | Business Rules |\n|------------------|-----------------|---------------|\n| Discussion Management | Title length 10-200 chars, description max 1000 chars, category selection, uniqueness check, content policies | Economic/political theme relevance, moderator approval workflow, view tracking, statistics aggregation |\n| User Management | Email format validation, password strength (8+ chars, mixed case, numbers), username uniqueness 3-30 chars, role hierarchy enforcement | Account creation with email verification, session management, profile editing with validation, secure authentication with brute force protection |\n| Content Interaction | Response max 2000 chars, voting uniqueness per user, reporting with reasons, edit within 30 minutes | Authorship verification, inappropriate content flagging, response nesting logic, voting manipulation detection, moderation workflow |\n| Search/Filtering | Query processing with spelling tolerance, category multi-selection, date range filtering, popularity sorting | Relevance ranking algorithm, real-time indexing, filter combination logic, performance optimization for large result sets |\n| Notifications | Delivery preference enforcement, mention detection, vote threshold monitoring, moderation action notification | User activity tracking, preference-based delivery, notification history management, spam prevention measures |\n\nAll requirements maintain consistency with the [User Scenarios Document](./03-discussionBoard-userScenarios.md) and [Business Rules Document](./05-discussionBoard-businessRules.md), forming a complete specification for discussion board functionality.\n\nWHEN implementing these requirements, THE system SHALL ensure all user interactions are secured through proper authentication and authorization.\nWHEN performance monitoring shows bottlenecks, THE system SHALL optimize based on usage patterns.\nWHEN new features are requested, THE system SHALL validate them against these functional requirements before addition.\n\nThe system SHALL operate continuously with all specified functions working as described, supporting economic and political discussions with appropriate user management and content controls. Business expansion including mobile access, API integrations, and advanced moderation tools SHALL build upon these foundational requirements."},{"reason":"Defining performance expectations and quality requirements from user experience perspective.","filename":"07-discussionBoard-nonFunctionalRequirements.md","outline":["Performance Expectations","Usability Requirements","Security Considerations","Scalability Requirements","Availability Standards"],"audience":"business stakeholders","keyQuestions":["How fast should the system respond?","What usability standards apply?","How secure must the platform be?"],"detailLevel":"moderate detail","documentType":"requirement","relatedDocuments":["00-toc.md","06-discussionBoard-functionalRequirements.md"],"constraints":["Express requirements in user experience terms","Include measurable criteria where possible","Focus on business impact not technical metrics"],"content":"# Non-Functional Requirements for Discussion Board Platform\n\n## Overview\n\nThis document outlines the non-functional requirements for the economic/political discussion board platform. These requirements focus on the quality attributes that ensure positive user experience and reliable platform operation. While functional requirements define what the system does, these non-functional requirements specify how well the system performs those functions from a user perspective.\n\nAll requirements are expressed in natural language using user experience terms, with measurable criteria where applicable. These specifications support the platform's business objective to provide a reliable, efficient forum for thoughtful economic and political discussions.\n\nWHEN users first access the discussion board, THE system SHALL present a clean, professional interface that clearly indicates the platform's purpose for economic and political discourse.\n\nTHE platform SHALL maintain consistent performance standards across different devices and connection speeds to ensure equitable access to civic discussions.\n\n## Performance Expectations\n\nPerformance requirements define the speed and responsiveness characteristics that users expect from the discussion board. These expectations ensure that the platform supports natural conversation flow and prevents frustration that could discourage participation in important discussions.\n\nTHE discussion board SHALL load discussion threads instantly for registered users when selected from the main page.\n\nWHEN a user submits a new discussion topic, THE system SHALL process and display the posting within 2 seconds.\n\nWHEN users browse discussion categories, THE system SHALL display the next page of topics within 1 second after scrolling or clicking.\n\nTHE search functionality SHALL return results for common economic and political terms within 1.5 seconds.\n\nWHEN users switch between reading discussion threads and returning to topic lists, THE system SHALL maintain their previous position instantly without refreshing the entire page.\n\nIF a discussion thread contains more than 20 responses, THE system SHALL progressively load additional responses as users scroll, ensuring the scroll experience remains smooth.\n\nTHE notification system SHALL deliver real-time alerts for new responses in discussions users are following, with notifications appearing instantly.\n\nWHEN a user posts responses during high-traffic periods, THE system SHALL confirm posting success within 3 seconds even under heavy concurrent discussion activity.\n\nWHEN users perform bulk actions like marking multiple discussions as read, THE system SHALL complete operations within 5 seconds per 50 items.\n\nTHE discussion board SHALL maintain response times of under 3 seconds for 95% of all user interactions, including page loads, search queries, and content submissions.\n\nIF search queries become complex with multiple filters, THE system SHALL continue returning results within 3 seconds maximum.\n\nTHE platform SHALL prioritize discussion loading performance during peak economic announcement periods, maintaining sub-second response times for critical user actions.\n\nIF users experience connection issues, THE system SHALL automatically resume operations once connectivity returns without data loss.\n\n## Usability Requirements\n\nUsability requirements ensure that the discussion board feels intuitive and accessible to all participants, from occasional visitors to active discussion contributors. These standards promote widespread adoption and comfortable use across diverse user backgrounds.\n\nTHE discussion board interface SHALL present content clearly using font sizes and colors that accommodate users with moderate vision limitations.\n\nWHEN users first visit the platform, THE system SHALL provide clear navigation paths to both browsing existing discussions and participating as a registered user.\n\nTHE registration process SHALL require no more than 3 steps to complete and SHALL guide users through each field with helpful hints.\n\nWHEN users encounter form errors during posting, THE system SHALL highlight specific issues and provide actionable guidance for correction.\n\nTHE search interface SHALL support natural language queries like \"trade policy discussions\" without requiring complex Boolean operators.\n\nIF users accidentally navigate away from an unfinished discussion post, THE system SHALL preserve their draft content for at least 24 hours.\n\nTHE platform SHALL present discussion threads in chronological order with clear visual indicators for the most recent responses.\n\nWHEN users respond to multiple discussion threads simultaneously, THE system SHALL maintain separate draft states for each conversation.\n\nTHE moderation tools SHALL be accessible to authorized users through clear, consistently located controls without cluttering the main discussion interface.\n\nWHEN users access discussion threads from search results, THE system SHALL highlight the search terms in the content to provide immediate context.\n\nTHE platform SHALL provide keyboard navigation support for all major functions to accommodate users with motor disabilities.\n\nWHEN users make interface customization choices like theme selection, THE system SHALL remember preferences across sessions and device changes.\n\nTHE discussion board SHALL prevent accidental navigation away from lengthy post compositions by displaying confirmation dialogs when unsaved changes exist.\n\nIF users spend more than 30 seconds composing a response, THE system SHALL automatically save drafts at 5-minute intervals.\n\nTHE platform SHALL provide clear feedback for all user actions, including loading states, success confirmations, and error messages with resolution guidance.\n\n## Security Considerations\n\nSecurity requirements address user trust and confidence in participating in sensitive economic and political discussions. These standards ensure participants feel safe sharing their perspectives without fear of inappropriate exposure or misuse of their information.\n\nWHEN users register accounts, THE system SHALL validate and protect their personal information against unauthorized access.\n\nTHE platform SHALL use clear visual indicators to show when discussions are moderated versus open participation.\n\nIF suspicious activity is detected during account creation, THE system SHALL implement additional verification steps without discouraging legitimate users.\n\nWHEN users log out of their accounts, THE system SHALL immediately terminate their access session across all devices.\n\nTHE discussion board SHALL maintain a clear privacy policy explaining how user contributions may be used for discussion purposes only.\n\nWHEN users delete their own discussions or responses, THE system SHALL permanently remove the content within reasonable timeframes.\n\nTHE platform SHALL provide users with control over their notification preferences to prevent unwanted communication.\n\nIF users report inappropriate content, THE system SHALL respond with acknowledgment within 24 hours and investigation within 3 business days.\n\nTHE discussion board SHALL protect against automated spam posting that could flood political discussion threads.\n\nWHEN users change their passwords, THE system SHALL enforce complexity requirements and prevent reuse of previous passwords.\n\nTHE platform SHALL implement rate limiting for all user actions to prevent abuse while allowing normal discussion participation.\n\nIF users receive multiple login failure attempts, THE system SHALL temporarily lock the account and provide clear unlock procedures.\n\nTHE discussion board SHALL provide secure password recovery mechanisms that don't expose user information during the reset process.\n\nWHEN handling sensitive user data like email addresses, THE system SHALL encrypt the information both in transit and at rest.\n\nTHE platform SHALL log security events for audit purposes while protecting individual user privacy in log contents.\n\nIF a security breach is detected, THE system SHALL notify affected users within 24 hours and provide guidance on protective measures.\n\n## Scalability Requirements\n\nScalability requirements ensure the platform can accommodate growing discussion participation and increased public interest in economic and political topics. These standards support the business goal of becoming an important forum for civic discourse.\n\nWHEN discussion interest surges during major economic events, THE system SHALL handle increased simultaneous users without degrading response times.\n\nTHE platform SHALL accommodate growing numbers of discussion threads and responses over time without requiring users to navigate more complex structures.\n\nIF daily active discussions triple during major political events, THE system SHALL maintain performance standards for all participants.\n\nTHE storage capacity SHALL scale to support discussion threads that grow to thousands of responses each.\n\nWHEN user registration rates increase rapidly, THE system SHALL process new accounts without delays that could discourage participation.\n\nTHE search capabilities SHALL remain fast even as the total content database grows significantly.\n\nTHE platform SHALL support increased moderator workloads during periods of high discussion activity without requiring additional interface complexity.\n\nWHEN discussion threads exceed 500 responses, THE system SHALL organize responses into logical groupings or sub-threads to maintain readability.\n\nTHE platform SHALL support concurrent discussions on multiple economic topics during major news events without performance degradation.\n\nIF user growth reaches 10,000 monthly active participants, THE system SHALL maintain all established performance benchmarks.\n\nWHEN search volume increases dramatically, THE system SHALL continue providing relevant results within established time limits.\n\nTHE discussion board SHALL scale media content handling as users share economic charts and political graphics in discussions.\n\nDuring peak engagement periods, THE system SHALL prioritize core discussion functionality over advanced features to ensure basic platform access.\n\n## Availability Standards\n\nAvailability requirements define the platform's reliability and accessibility to ensure consistent access for ongoing discussions. These standards address the expectation that important political conversations should remain accessible when participants need them.\n\nTHE discussion board SHALL be available for access 99.5% of the time annually.\n\nWHEN planned maintenance occurs, THE system SHALL notify users in advance through the platform interface.\n\nIF unexpected outages occur, THE system SHALL restore access within 4 hours.\n\nTHE platform SHALL handle peak usage periods during major economic announcements without becoming unavailable.\n\nWHEN users attempt to access the platform during high demand, THE system SHALL queue requests fairly rather than denying access arbitrarily.\n\nTHE search functionality SHALL remain operational during traffic surges when discussion submission may be temporarily limited.\n\nRegistered users SHALL continue to access their account settings and previous discussions even during maintenance periods.\n\nTHE notification system SHALL attempt redelivery if initial attempts fail rather than permanently losing alerts.\n\nWHEN the platform experiences temporary unavailability, THE system SHALL provide status updates and estimated restoration times.\n\nTHE discussion board SHALL maintain data integrity during any service interruptions to prevent loss of user-generated content.\n\nIF system capacity is reached during peak periods, THE system SHALL gracefully limit new registrations while maintaining access for existing users.\n\nDuring scheduled maintenance windows, THE system SHALL maintain read-only access to existing discussions for continuity.\n\nTHE platform SHALL provide backup access methods, such as mobile-optimized views, during periods of high demand.\n\n## Success Criteria and Measurement\n\nThe platform's success in meeting these non-functional requirements will be measured through user satisfaction metrics and operational monitoring. Business stakeholders should monitor these indicators quarterly to ensure the discussion board evolves to maintain high quality standards.\n\nWHEN performance standards are not met, THE system SHALL provide alternative access methods to prevent complete loss of discussion capability.\n\nTHE platform documentation SHALL be updated annually to reflect evolving user expectations and technological possibilities.\n\nBusiness monitoring of response times, user complaints, and participation rates SHALL guide investment in quality improvements.\n\nEconomic and political discussions represent important civic engagement opportunities. This platform must provide the reliability and usability that participants expect from critical communication tools. Regular review of these non-functional requirements against actual user experience metrics will ensure the discussion board remains a trusted forum for thoughtful discourse.\n\nWHEN users experience performance issues, THE system SHALL collect feedback and use it to identify specific improvement requirements.\n\nTHE platform SHALL conduct quarterly user experience surveys to measure satisfaction with non-functional aspects like speed and accessibility.\n\nBusiness stakeholders SHALL review automated monitoring data monthly to identify trends that require attention before they impact users.\n\nWHEN new user devices or accessibility needs emerge, THE system SHALL adapt non-functional requirements to maintain inclusive design.\n\nThe platform's non-functional success will be continuously validated through automated testing and user feedback loops to ensure the discussion board remains responsive and reliable as discussion volumes grow."},{"reason":"Analyzing and planning content moderation scenarios and administrator workflows.","filename":"08-discussionBoard-contentModeration.md","outline":["Moderation Objectives","Content Review Workflows","Reporting Mechanisms","Administrative Actions","Violation Handling"],"audience":"development team","keyQuestions":["How is inappropriate content handled?","What administrative tools are needed?","How do moderators work?","What escalation processes exist?"],"detailLevel":"detailed specification","documentType":"business-model","relatedDocuments":["00-toc.md","02-discussionBoard-userRoles.md","07-discussionBoard-nonFunctionalRequirements.md"],"constraints":["Define moderation policies in business terms","Include workflows for admin actions","Specify escalation processes"],"content":"# Content Moderation and Administration Framework for Discussion Board\n\n## Executive Summary\n\nThis document establishes the comprehensive business requirements for content moderation within the economic and political discussion board platform. The moderation system ensures quality discourse while protecting users from harmful content, implementing scalable workflows that balance human oversight with automated tools. All specifications focus on business logic and user experience outcomes rather than technical implementation details.\n\nThe platform operates as a moderated community space for economic and political discussions, requiring robust moderation capabilities to maintain quality and safety standards. Moderators serve as administrators with escalated privileges to manage content, enforce policies, and handle violations, supporting the business goal of fostering informed, respectful conversations on civic matters.\n\nWHEN inappropriate content is submitted to the platform, THE moderation system SHALL detect and handle violations through graduated enforcement processes.\n\nWHILE users participate in discussions, THE platform SHALL maintain moderation capabilities that promote constructive dialogue and prevent harm.\n\n## Moderation Objectives\n\n### Business Goals for Content Moderation\n\nWHEN the discussion board launches, THE moderation system SHALL establish trust by immediately handling inappropriate content submissions.\n\nWHEN community standards are established, THE moderation system SHALL clearly communicate rules to prevent violations and guide proper behavior.\n\nWHEN moderators review content, THE platform SHALL provide efficient tools to maintain high-quality discussions without excessive overhead.\n\nWHEN users report violations, THE moderation system SHALL respond promptly to address concerns and maintain community health.\n\n### Content Policy Framework\n\nWHEN defining content policies, THE platform SHALL prohibit speech that incites violence, discrimination, or direct threats against individuals.\n\nWHEN economic or political content is submitted, THE platform SHALL allow vigorous debate while prohibiting misinformation that could cause harm.\n\nWHEN users submit content, THE moderation system SHALL validate against published community guidelines before public visibility.\n\nWHEN content violates standards, THE platform SHALL implement clear escalation procedures ranging from warnings to account restrictions.\n\nWHEN defining moderation policies, THE system SHALL address spam content that floods discussion threads with irrelevant material.\n\nWHEN moderating user interactions, THE system SHALL prevent harassment through consistent enforcement of behavioral standards.\n\n### Quality Assurance Standards\n\nWHEN assessing discussion quality, THE moderation system SHALL promote content that advances understanding of economic and political issues.\n\nWHEN evaluating content value, THE moderators SHALL prioritize substantive contributions over emotional outbursts.\n\nWHEN reviewing submission appropriateness, THE system SHALL consider cultural sensitivity and community standards specific to economic/political discourse.\n\n## User Role Responsibilities in Moderation\n\n### Guest User Moderation Participation\n\nWHEN guest users encounter inappropriate content, THE platform SHALL provide clear reporting mechanisms accessible without registration requirements.\n\nTHE guest users SHALL be able to flag content for review without creating accounts, contributing to community safety efforts.\n\nWHEN guest reports are submitted, THE moderation system SHALL process them with equal priority to registered user reports.\n\n### Registered User Moderation Roles\n\nWHEN registered users report suspected violations, THE moderation system SHALL acknowledge their reports within 2 hours and provide status updates.\n\nWHEN registered users participate actively, THE platform SHALL recognize consistent positive behavior with potential promotion to moderator status.\n\nWHEN users submit content that receives multiple reports, THE moderation system SHALL notify the submitter of concerns with opportunities for revision.\n\n### Moderator Privileges and Duties\n\nWHEN moderators authenticate to access administrative tools, THE platform SHALL verify their elevated role permissions.\n\nTHE moderators SHALL have authority to review all pending content submissions within designated timeframes.\n\nWHEN moderators identify policy violations, THE platform SHALL provide tools to remove content, warn users, or escalate serious issues.\n\nTHE moderators SHALL monitor discussion trends to identify emerging problematic patterns and adjust moderation strategies accordingly.\n\nWHEN moderators make public announcements, THE platform SHALL clearly identify their moderator status to maintain transparency.\n\n### Administrative Authority Structure\n\nWHEN platform administrators define moderation policies, THE system SHALL allow configurable thresholds and violation categories.\n\nTHE administrators SHALL access system-wide reports showing moderation effectiveness and content trends.\n\nWHEN administrative decisions override moderator actions, THE platform SHALL log justifications for audit purposes.\n\nTHE administrators SHALL establish moderator training requirements and performance evaluation processes.\n\n## Content Review Workflows\n\n### Discussion Topic Approval Process\n\nWHEN a user submits a new discussion topic, THE moderation system SHALL immediately place it in pending status for review.\n\nTHE topic approval queue SHALL display submissions chronologically with clear categorization by time and subject matter.\n\nWHEN moderators review pending topics, THE system SHALL show submission details including author information, content preview, and applicable policy checks.\n\nTHE moderators SHALL select from approval options: immediate publish, request revisions, reject with reasoning.\n\nWHEN topics receive revision requests, THE system SHALL notify authors with specific guidance for improvement and allow single resubmission.\n\nWHEN approved topics are published, THE moderation system SHALL timestamp the approval and associate moderator responsibility.\n\nTHE approval process SHALL complete within 24 hours for submitted topics, with automatic approval after delay for non-critical categories.\n\n### Response Comment Moderation\n\nWHEN users submit replies to existing discussions, THE platform SHALL initially publish them while monitoring for automated flags.\n\nTHE automated content scanner SHALL check for violations including spam patterns, prohibited words, and link abuse.\n\nWHEN automated flags trigger, THE system SHALL move content to high-priority review queue for immediate attention.\n\nWHEN moderators review flagged responses, THE system SHALL provide context showing the parent discussion and recent interaction history.\n\nWHEN responses are deemed appropriate, THE moderators SHALL clear flags and restore normal visibility.\n\nWHEN responses violate policies, THE moderators SHALL remove inappropriate content and notify submitters of violations.\n\nTHE moderation system SHALL log all response review actions with timestamps and moderator identification.\n\n### Automated Content Scanning Rules\n\nWHEN submissions contain excessive capital letters (more than 70% caps), THE scanner SHALL flag for review as potential shouting.\n\nWHEN links exceed reasonable limits (more than 3 external URLs), THE system SHALL require moderator approval before publication.\n\nWHEN content matches known spam patterns like repeated phrases or promotional material, THE automated system SHALL hold submissions.\n\nWHEN detecting impersonation attempts, THE scanner SHALL compare against user profiles and flag suspicious accounts.\n\nTHE automated scanner SHALL run in real-time for all submissions while allowing moderators to adjust sensitivity levels.\n\n## Reporting Mechanisms\n\n### User Flagging Interface\n\nWHEN users identify problematic content, THE platform SHALL present intuitive flagging buttons prominently displayed with each discussion element.\n\nTHE flagging interface SHALL include categorized reason options: spam/irrelevant, harassment/bullying, misleading information, inappropriate content.\n\nWHEN users select flagging reasons, THE system SHALL request optional context explanation to assist moderator review.\n\nTHE flagging system SHALL allow multiple simultaneous reports against the same content with automatic accumulation.\n\nWHEN users flag content, THE platform SHALL immediately acknowledge receipt without revealing moderation details.\n\nTHE flagging tools SHALL be accessible to both registered users and guests, ensuring universal reporting capability.\n\n### Moderator Report Review Process\n\nWHEN reports are received, THE moderation dashboard SHALL categorize by urgency and display accumulated report counts.\n\nTHE moderator workflow SHALL prioritize reports based on volume and content sensitivity ratings.\n\nWHEN reviewing reported content, THE system SHALL display the original content with highlighted concerns from reporter explanations.\n\nTHE moderators SHALL access user history showing previous violations and account standing when evaluating reports.\n\nWHEN resolving reports, THE moderators SHALL select resolution codes: valid violation, invalid report, requiring further investigation.\n\nTHE system SHALL notify reporters of resolution outcomes while protecting moderator and user privacy.\n\n### Escalation Protocols\n\nWHEN reports cannot be resolved at moderator level, THE system SHALL escalate to administrative review with detailed context.\n\nTHE escalation process SHALL occur automatically after predetermined report thresholds or discretionary moderator requests.\n\nWHEN escalated cases reach administrators, THE system SHALL provide complete investigation history and recommended actions.\n\nTHE administrators SHALL make final determinations with options including policy changes, account suspensions, or legal referrals.\n\nWHEN escalations result in policy modifications, THE system SHALL update automated rules and notify moderators.\n\n### Report Analytics and Trends\n\nWHEN analyzing report patterns, THE moderation system SHALL generate weekly summaries showing violation categories and resolution rates.\n\nTHE platform SHALL track report accuracy by comparing flagged content against final moderation decisions.\n\nWHEN identifying report abuse (egregious false reporting), THE system SHALL implement temporary reporting restrictions.\n\nTHE analytics SHALL inform moderator training priorities and policy adjustment recommendations.\n\n## Administrative Actions\n\n### Content Management Tools\n\nWHEN moderators need to remove inappropriate content, THE platform SHALL provide one-click removal with automatic archiving.\n\nTHE removal tools SHALL differentiate between temporary hiding and permanent deletion based on violation severity.\n\nWHEN content is removed, THE system SHALL generate standardized notification templates to inform submitters.\n\nTHE administrative interface SHALL allow bulk operations for managing multiple related violations efficiently.\n\nWHEN implementing content locks, THE moderators SHALL prevent further contributions to specific discussion threads.\n\nTHE restoration tools SHALL allow moderators to recover accidentally removed content with audit trails.\n\n### User Management Capabilities\n\nWHEN managing user accounts, THE moderators SHALL access comprehensive user profiles showing contribution history and violation records.\n\nTHE warning system SHALL send graduated notices: first warning, final warning, account suspension.\n\nWHEN implementing suspensions, THE system SHALL provide duration options ranging from 24 hours to permanent bans.\n\nTHE reinstatement process SHALL require users to acknowledge violations and demonstrate corrective behavior.\n\nWHEN permanently banning accounts, THE administrators SHALL document rationale and prevent new account creation from banned sources.\n\n### System Configuration Controls\n\nWHEN adjusting moderation policies, THE administrators SHALL modify violation thresholds and category definitions through administrative interfaces.\n\nTHE configuration system SHALL allow custom rule sets for different discussion categories (economic vs political topics).\n\nWHEN implementing emergency moderation (egasing system during content storms), THE administrators SHALL activate heightened review requirements.\n\nTHE configuration changes SHALL maintain audit logs for policy evolution tracking.\n\n### Announcement and Communication Tools\n\nWHEN moderators need to communicate with users, THE system SHALL provide secure messaging tools for individual and group notifications.\n\nTHE announcement system SHALL allow posting site-wide notices with priority levels and expiration dates.\n\nWHEN communicating policy changes, THE administrators SHALL distribute updates through multiple channels including in-platform alerts.\n\nTHE communication tools SHALL track delivery confirmation and user acknowledgment where applicable.\n\n## Violation Handling Procedures\n\n### Warning and Enforcement Framework\n\nWHEN users receive first violations, THE moderation system SHALL send detailed education explaining the specific rule violated and expected behavior.\n\nTHE warning emails SHALL include links to complete community guidelines and examples of acceptable content.\n\nWHEN users accumulate second violations, THE system SHALL impose temporary restrictions with clear reinstatement criteria.\n\nTHE enforcement shall follow three-strike system: 1st violation = warning, 2nd violation = suspension, 3rd violation = potential ban.\n\n### Suspension and Reinstatement Rules\n\nWHEN accounts are suspended, THE platform SHALL prevent all posting, commenting, and account modifications during suspension period.\n\nTHE suspension notices SHALL specify duration, violations documented, and steps required for good standing restoration.\n\nWHILE suspended, THE users SHALL retain access to view content and understand community expectations.\n\nWHEN reinstatement occurs, THE system SHALL automatically restore all privileges with probationary monitoring for 30 days.\n\nTHE reinstatement process SHALL require positive contribution demonstrations and moderator approval.\n\n### Permanent Ban Procedures\n\nWHEN implementing permanent bans, THE administrators SHALL conduct final review considering violation severity and user history.\n\nTHE ban notifications SHALL explain appeal processes and any applicable waiting periods.\n\nWHEN users appeal bans, THE system SHALL provide structured forms for submitting evidence and demonstrating rehabilitation.\n\nTHE appeal process SHALL be reviewed by escalated administrator panels with documented decisions provided within 7 business days.\n\nWHEN appeals are denied, THE ban SHALL remain permanent unless significant circumstances change.\n\n### Process Flow Documentation\n\n```mermaid\ngraph LR\n    A[\"Content Submitted\"] --> B{\"Automated Scan\"}\n    B -->|Clean| C[\"Published Immediately\"]\n    B -->|Flagged| D[\"Pending Review\"]\n    D --> E{\"Moderator Review\"}\n    E -->|Approved| C\n    E -->|Rejected| F[\"Violation Warning\"]\n    C --> G{\"User Reports?\"}\n    G -->|Yes| E\n    G -->|No| H[\"Active in Discussion\"]\n    F --> I[\"Track Violations\"]\n    I --> J{\"Strike Count\"}\n    J -->|First Strike| K[\"Educational Warning\"]\n    J -->|Second Strike| L[\"Temporary Suspension\"]\n    J -->|Third Strike| M[\"Permanent Ban\"]\n    K --> N[\"Reinstatement Process\"]\n    L --> N\n    N --> O{\"Appeal Approved?\"}\n    O -->|Yes| P[\"Restore Access\"]\n    O -->|No| Q[\"Maintain Restrictions\"]\n```\n\n### Violation Categories and Handling\n\nWHEN spam content floods discussions, THE moderation system SHALL remove multiple instances and warn account holders.\n\nWHEN harassment occurs between users, THE moderators SHALL mediate conflicts through private communications before public actions.\n\nWHEN misinformation spreads, THE system SHALL prioritize fact-checking assistance over immediate removal if content appears genuine.\n\nWHEN hate speech appears, THE platform SHALL remove immediately without appeals and ban responsible accounts.\n\nWHEN copyright infringement involves external materials, THE system SHALL require removal upon verified claims.\n\nWHEN users violate through coordinated attacks, THE administrators SHALL implement network-level protections.\n\n### Monitoring and Audit Requirements\n\nWHEN violations occur, THE moderation system SHALL maintain complete audit trails for legal and operational purposes.\n\nTHE audit logs SHALL include timestamps, moderator actions, original content, and resolution rationales.\n\nWHEN regulators request moderation records, THE administrators SHALL provide documented compliance with privacy protections.\n\nTHE audit system SHALL support automated reporting for violation trends and effectiveness metrics.\n\n### Training and Support Requirements\n\nWHEN moderators join the team, THE platform SHALL provide comprehensive training on community standards and moderation tools.\n\nTHE ongoing education SHALL include monthly updates on emerging violations and policy changes.\n\nWHEN moderators need guidance, THE system SHALL offer internal support channels and decision guidance resources.\n\nTHE training program SHALL include practice scenarios and performance feedback mechanisms.\n\n### Performance Metrics and Quality Assurance\n\nWHEN measuring moderation effectiveness, THE platform SHALL track response times, accuracy rates, and user satisfaction scores.\n\nTHE quality assurance process SHALL include regular moderator evaluations and calibration sessions.\n\nWHEN identifying inefficiencies, THE system SHALL implement tool improvements and process optimizations.\n\nTHE performance metrics SHALL guide resource allocation and scaling decisions.\n\n## Business Rules and Validation Requirements\n\n### Content Standards Enforcement\n\nWHEN enforcing content quality, THE moderation system SHALL prioritize substantive economic and political discussions over casual conversations.\n\nTHE system SHALL validate that topics contribute meaningfully to civic education rather than purely entertaining purposes.\n\nWHEN balancing free speech with safety, THE moderators SHALL err on the side of prevention while respecting platform guidelines.\n\n### User Behavior Expectations\n\nWHEN defining community behavior, THE platform SHALL establish clear rules for respectful disagreement on polarizing topics.\n\nTHE users SHALL engage constructively even when topics involve controversial economic policies or political positions.\n\nWHEN conflicts arise, THE system SHALL encourage resolution through moderators rather than direct user confrontations.\n\n### Data Integrity in Moderation\n\nWHEN maintaining moderation records, THE system SHALL protect user privacy while preserving necessary audit information.\n\nTHE moderation data SHALL be segregated from regular platform analytics to limit privacy risk exposure.\n\nWHEN processing personal data during investigations, THE moderators SHALL follow privacy-by-design principles.\n\n### Scalability Considerations\n\nWHEN discussion volume increases, THE moderation system SHALL scale through automated tools and expanded moderator teams.\n\nTHE workflows SHALL remain efficient during high-activity periods without sacrificing quality control.\n\nWHEN system capacity is exceeded, THE platform SHALL implement temporary measures like delayed publishing during peak times.\n\n## Conclusion\n\nThis framework establishes the comprehensive business requirements for content moderation on the economic/political discussion board. The system provides balanced approaches to maintaining quality discourse while protecting users and enabling vigorous debate on important civic matters. The moderation processes scale with platform growth while maintaining consistent standards and efficient enforcement mechanisms. All business logic focuses on user experience outcomes and community health while providing clear escalation paths and accountability structures.\n\nWHEN implementing these requirements, THE development team SHALL ensure moderation tools integrate seamlessly with existing platform features while maintaining operational efficiency and user trust.\n\nTHE moderation system SHALL evolve based on community feedback and emerging challenges in online economic/political discourse.\n\nReferences:\n- [Table of Contents](./00-toc.md)\n- [User Roles and Authentication](./02-discussionBoard-userRoles.md)\n- [Non-Functional Requirements](./07-discussionBoard-nonFunctionalRequirements.md)"},{"reason":"Defining data governance, privacy requirements, and compliance standards.","filename":"09-discussionBoard-dataPrivacyCompliance.md","outline":["Data Privacy Principles","User Data Handling","Compliance Requirements","Data Retention Policies","Security Measures"],"audience":"business stakeholders","keyQuestions":["How is user data protected?","What privacy laws apply?","How long is data retained?","What security measures are needed?"],"detailLevel":"moderate detail","documentType":"requirement","relatedDocuments":["00-toc.md","07-discussionBoard-nonFunctionalRequirements.md"],"constraints":["Include GDPR-compliant data handling","Focus on business compliance not technical controls","Specify data lifecycle management"],"content":"# Data Privacy and Compliance Framework for Economic/Political Discussion Board\n\nThis document establishes the business requirements for data privacy compliance in the economic/political discussion board platform. It defines how user personal data must be collected, processed, stored, and protected throughout its lifecycle, ensuring compliance with privacy regulations while maintaining user trust and platform usability.\n\nThe requirements focus on business logic and user experience, specifying what the system must do to protect privacy rights without dictating technical implementation details such as specific encryption methods or database schemas.\n\n## Data Privacy Principles\n\nThe discussion board operates on principles of minimal data collection and user control over personal information. User privacy is paramount, with all data practices designed to protect individual rights while enabling meaningful economic and political discussions.\n\nWHEN a user registers for the discussion board, THE system SHALL collect only essential information required for account creation and community participation.\n\nWHILE users are active on the platform, THE system SHALL minimize data collection to necessary elements for discussion features.\n\nIF users request data minimization, THEN THE system SHALL remove non-essential personal data from user profiles.\n\n### Transparent Data Practices\n\nUsers must have clear visibility into how their data is used. The platform must provide understandable explanations of data practices, allowing users to make informed decisions about their participation.\n\nTHE system SHALL display clear privacy explanations during registration and account management.\n\nWHEN users access their account settings, THE system SHALL provide easy-to-understand descriptions of data usage.\n\nIF users have questions about privacy practices, THEN THE system SHALL provide contact methods for privacy inquiries.\n\n## User Data Handling\n\n### Personal Data Categories\n\nThe platform handles several categories of personal data, each with specific business rules for collection, usage, and retention.\n\nWHEN users register accounts, THE system SHALL collect email addresses as the primary identifier.\n\nWHILE users create discussions or comments, THE system SHALL associate content with user identifiers, not personal contact information.\n\nIF users choose to provide optional profile information, THEN THE system SHALL store it separately from core account data.\n\n### Data Processing Rules\n\nAll personal data processing must serve legitimate business purposes related to platform operation and user experience. Processing activities must be necessary and proportionate.\n\nTHE system SHALL process user data only for purposes of account management, content moderation, and platform improvement.\n\nWHEN collecting user feedback or analytics, THE system SHALL anonymize data wherever possible.\n\nIF data is shared with third parties, THEN THE system SHALL obtain explicit user consent and provide clear disclosure.\n\n### Data Transfer Principles\n\nUser data transfers occur only when necessary for platform functionality, with appropriate safeguards to maintain privacy standards.\n\nWHEN users upload content, THE system SHALL secure data in transit and at rest.\n\nWHILE data is transferred within the platform infrastructure, THE system SHALL maintain user privacy protections.\n\nIF cross-border data transfers are required, THEN THE system SHALL implement adequate protection measures.\n\n## Compliance Requirements\n\n### Applicable Privacy Frameworks\n\nThe platform must comply with relevant privacy regulations, particularly those applicable to users accessing from different jurisdictions. Compliance requirements include GDPR for European users and similar privacy frameworks.\n\nTHE system SHALL comply with GDPR requirements for users located in or accessing from the European Economic Area.\n\nWHEN processing personal data of California residents, THE system SHALL adhere to CCPA privacy requirements.\n\nIF users are from other regulated jurisdictions, THEN THE system SHALL apply equivalent privacy protections.\n\n### Consent Management\n\nUser consent must be specific, informed, and easily withdrawable for different data processing activities. The platform must track consent status for each user.\n\nWHEN users register, THE system SHALL obtain affirmative consent for account data processing.\n\nWHILE users participate in discussions, THE system SHALL respect their privacy preferences for public profile visibility.\n\nIF users withdraw consent, THEN THE system SHALL cease processing and delete data where applicable.\n\n### Data Subject Rights\n\nThe platform must support comprehensive user rights regarding their personal data, including access, correction, and deletion capabilities.\n\nTHE system SHALL provide users with access to their personal data upon request.\n\nWHEN users identify inaccuracies, THE system SHALL allow data correction through account settings.\n\nIF users request data deletion, THEN THE system SHALL anonymize or remove their data while preserving public discussion contributions.\n\n## Data Retention Policies\n\n### Account Data Retention\n\nPersonal account data has different retention periods based on account status and legal requirements. Data retention must balance business needs with privacy protection.\n\nWHILE users maintain active accounts, THE system SHALL retain personal data for account management purposes.\n\nAFTER account closure, THE system SHALL retain minimal data for legal compliance and fraud prevention for specified periods.\n\nIF users request account deletion, THEN THE system SHALL initiate data removal procedures within required timeframes.\n\n### Content Data Retention\n\nDiscussion content and user-generated material retain longer for preserving platform value, but with appropriate de-identification measures.\n\nTHE system SHALL retain discussion content indefinitely for maintaining community knowledge and discussions.\n\nWHEN content is associated with users, THE system SHALL separate identifiable data from published content.\n\nIF legal requirements mandate content removal, THEN THE system SHALL de-identify affected content while preserving discussion flow.\n\n### Audit Data Retention\n\nSystem logs and access records necessary for security and compliance audits must be retained for appropriate periods.\n\nTHE system SHALL retain audit logs for security monitoring and compliance verification.\n\nWHILE maintaining operational security, THE system SHALL minimize audit data retention to necessary periods.\n\nIF audit data contains personal information, THEN THE system SHALL implement additional protection measures.\n\n## Security Measures\n\n### Access Control Requirements\n\nUser data must be protected through appropriate access controls, ensuring that only authorized parties can view or modify personal information.\n\nWHEN users access account settings, THE system SHALL verify their identity through secure authentication.\n\nWHILE processing personal data, THE system SHALL restrict access to authorized personnel and processes.\n\nIF unauthorized access attempts occur, THEN THE system SHALL implement automatic security responses.\n\n### Data Protection in Transit\n\nAll data transmission must use secure channels to prevent interception or modification during movement between systems or users.\n\nTHE system SHALL encrypt all personal data during transmission over public networks.\n\nWHEN users submit sensitive information, THE system SHALL use secure communication protocols.\n\nIF data transfers involve third parties, THEN THE system SHALL require equivalent security standards.\n\n### Incident Response Framework\n\nThe platform must have procedures for responding to privacy incidents, including breach notification and data recovery measures.\n\nWHEN a potential data breach is detected, THE system SHALL activate incident response procedures.\n\nWHILE investigating security incidents, THE system SHALL minimize data exposure and protect affected users.\n\nIF a breach involves personal data, THEN THE system SHALL notify affected users and relevant authorities within required timeframes.\n\n## Data Lifecycle Management\n\nThe complete data lifecycle from collection through destruction must follow privacy-preserving principles, with clear business rules for each phase.\n\n### Data Collection Phase\n\nCollection activities must be purposeful and limited to necessary information for platform services.\n\nWHEN collecting user information, THE system SHALL limit collection to data required for the specific service being provided.\n\nWHILE users interact with the platform, THE system SHALL avoid collecting surplus personal information.\n\nIF additional data collection becomes necessary, THEN THE system SHALL obtain fresh user consent.\n\n### Data Processing and Storage\n\nData must be processed and stored in ways that maintain privacy and enable appropriate business functions.\n\nTHE system SHALL process data only for legitimate business purposes defined in user agreements.\n\nWHEN storing personal data, THE system SHALL implement separation of concerns between different data types.\n\nWHILE data is stored, THE system SHALL maintain complete records of processing activities for audit purposes.\n\n### Data Usage and Sharing\n\nData usage must respect user expectations and consent, with strict limitations on sharing for business purposes.\n\nIF the platform shares user data, THEN THE system SHALL do so only with explicit consent and clear business necessity.\n\nWHEN providing analytics or reporting, THE system SHALL use anonymized or aggregated data.\n\nWHILE developing platform features, THE system SHALL protect user privacy in testing and development activities.\n\n### Data Disposal Process\n\nWhen data is no longer needed, it must be securely and completely removed from all systems and backups.\n\nWHEN retention periods expire, THE system SHALL initiate secure data deletion procedures.\n\nWHILE processing deletion requests, THE system SHALL remove data from all storage locations and backups.\n\nIF data cannot be completely removed due to technical constraints, THEN THE system SHALL ensure permanent de-identification.\n\n## User Rights and Responsibilities\n\n### User Data Access Rights\n\nUsers have comprehensive rights to view, modify, and control their personal information within the platform.\n\nTHE system SHALL provide users with tools to view all collected personal data.\n\nWHEN users request data export, THE system SHALL provide their information in portable formats.\n\nIF users discover incorrect data, THEN THE system SHALL offer correction mechanisms through account interfaces.\n\n### Privacy Communication Obligations\n\nThe platform must maintain clear channels for users to exercise their privacy rights and receive privacy-related information.\n\nWHEN privacy policies change, THE system SHALL notify users of significant changes.\n\nWHILE users participate in the platform, THE system SHALL provide accessible privacy information and contact methods.\n\nIF users have privacy concerns, THEN THE system SHALL respond promptly and professionally.\n\n### User Responsibilities\n\nWhile the platform bears primary responsibility for data protection, users have responsibilities to protect their own privacy.\n\nWHEN using platform features, THE system SHALL remind users of their responsibility to protect account credentials.\n\nWHILE participating in discussions, THE system SHALL guide users on appropriate personal information sharing.\n\nIF users share sensitive information publicly, THEN THE system SHALL provide warnings about privacy risks.\n\n## Compliance Monitoring and Reporting\n\n### Ongoing Compliance Verification\n\nThe platform must continuously monitor compliance with privacy requirements through both automated and manual processes.\n\nTHE system SHALL monitor data handling practices for ongoing compliance with privacy regulations.\n\nWHEN new privacy requirements emerge, THE system SHALL assess impact and implement necessary changes.\n\nWHILE operating the platform, THE system SHALL maintain compliance documentation for audit purposes.\n\n### Privacy Impact Assessments\n\nSignificant changes to data practices require systematic privacy impact analysis to identify and mitigate risks.\n\nWHEN introducing new features involving personal data, THE system SHALL conduct privacy impact assessments.\n\nWHILE planning data collection changes, THE system SHALL evaluate privacy implications beforehand.\n\nIF assessment identifies high risks, THEN THE system SHALL implement additional protective measures.\n\n### Regulatory Reporting Obligations\n\nThe platform must report privacy compliance status and incidents to relevant authorities as required.\n\nWHEN privacy incidents occur, THE system SHALL report to regulatory bodies within mandated timeframes.\n\nWHILE maintaining compliance, THE system SHALL prepare annual privacy compliance reports.\n\nIF users request privacy violation reporting, THEN THE system SHALL provide comprehensive incident disclosure.\n\n## Conclusion\n\nThis data privacy and compliance framework establishes comprehensive business requirements for protecting user information in the economic/political discussion board. The framework balances legal compliance with user experience, ensuring the platform can operate successfully while maintaining trust through transparent and responsible data practices.\n\nThe requirements provide clear guidance for backend developers to implement privacy controls without dictating technical specifications, allowing flexibility in implementation while ensuring all privacy obligations are met. Regular review and updates to this framework will ensure continued compliance as privacy regulations evolve.\n\nReferences:\n- [Data Privacy Principles and User Data Handling](./09-discussionBoard-dataPrivacyCompliance.md)\n- [Functional Requirements Specification](./06-discussionBoard-functionalRequirements.md)\n- [Business Rules and Validation Logic](./05-discussionBoard-businessRules.md)"},{"reason":"Creating success criteria and measurement strategies for the discussion board platform.","filename":"10-discussionBoard-successMetrics.md","outline":["Success Objectives","Key Performance Indicators","Measurement Methods","Milestones","Evaluation Framework"],"audience":"business stakeholders","keyQuestions":["How will success be measured?","What KPIs matter most?","How often should metrics be reviewed?","What constitutes project success?"],"detailLevel":"moderate detail","documentType":"business-model","relatedDocuments":["00-toc.md","01-discussionBoard-serviceOverview.md"],"constraints":["Define measurable success criteria","Include business impact metrics","Plan evaluation methods"],"content":"# Success Metrics for Economic/Political Discussion Board\n\nTHE discussion board platform SHALL achieve measurable success through defined business objectives and performance indicators.\n\n## Success Objectives\n\n### Business Growth Success\nWHEN the discussion board is launched, THE platform SHALL establish a sustainable user base and content creation ecosystem within the economic and political discussion community.\n\n### Community Engagement Success\nWHEN users participate in discussions, THE platform SHALL foster meaningful conversations and knowledge sharing among economic and political enthusiasts.\n\n### Content Quality Success\nWHEN content is moderated and curated, THE platform SHALL maintain high-quality discussions that contribute to informed economic and political discourse.\n\n### Operational Sustainability Success\nWHEN the platform operates continuously, THE system SHALL demonstrate reliable performance and effective content management practices.\n\n## Key Performance Indicators\n\n### User Acquisition Metrics\n- **Monthly Active Users (MAU)**: Track unique registered users who participate in discussions\n- **User Registration Rate**: Measure daily/weekly registrations of new discussion board members\n- **User Retention Rate**: Calculate percentage of users returning within 30 days\n- **Growth Rate Target**: Achieve 15% monthly user growth in first year\n- **Engagement Rate**: Percentage of registered users who post comments or create topics monthly\n\n### Content Generation Metrics\n- **Daily Discussion Topics**: Average number of new economic/political topics created per day\n- **Comment Volume**: Total responses and replies generated weekly\n- **Topic Quality Score**: Average rating of discussion topics based on community feedback\n- **Content-to-Noise Ratio**: Percentage of high-quality discussions versus low-value posts\n\n### Community Health Metrics\n- **Response Time**: Average time for community members to respond to new topics\n- **Topic Lifespan**: Average duration discussions remain active\n- **User Satisfaction Score**: Community sentiment measured through optional feedback surveys\n- **Cross-Topic Participation**: Users engaging across multiple economic/political discussion categories\n\n### Moderation Effectiveness Metrics\n- **Moderation Response Time**: Average time to review and approve/reject user-generated content\n- **Content Approval Rate**: Percentage of submissions that pass moderation\n- **Report Resolution Time**: Average time to address user-reported violations\n- **Moderator Efficiency Score**: Topics reviewed per moderator per hour\n\n```mermaid\ngraph LR\n  A[\"User Acquisition\"] --> B{\"Registration Rate\"}\n  A --> C[\"MAU Growth\"]\n  A --> D[\"Retention Rate\"]\n  E[\"Content Generation\"] --> F[\"Daily Topics\"]\n  E --> G[\"Comment Volume\"]\n  E --> H[\"Quality Score\"]\n  I[\"Community Health\"] --> J[\"Response Time\"]\n  I --> K[\"Satisfaction Score\"]\n  I --> L[\"Participation Rate\"]\n  M[\"Moderation Effectiveness\"] --> N[\"Response Time\"]\n  M --> O[\"Approval Rate\"]\n  M --> P[\"Resolution Rate\"]\n```\n\n## Measurement Methods\n\n### Data Collection Framework\nWHEN tracking performance metrics, THE system SHALL collect data through automated and manual methods that provide accurate business insights.\n\n### Automated Metrics Tracking\n- **User Activity Monitoring**: System logs track login sessions, page views, and interaction timestamps\n- **Content Analytics**: Automated counting of topics, comments, and engagement patterns\n- **Performance Logging**: System captures response times and error rates\n- **Moderation Workflow Tracking**: Automated logging of approval/rejection actions\n\n### User Feedback Collection\n- **Regular Surveys**: Monthly surveys asking users about satisfaction and platform value\n- **Feedback Widgets**: In-platform feedback buttons for immediate user input\n- **Community Polls**: Discussion-based polls to gauge topic preferences\n- **Exit Surveys**: Optional surveys when users deactivate accounts\n\n### Quality Assessment Methods\n- **Content Rating System**: Users can upvote/downvote discussions and comments\n- **Expert Review**: Economic/political subject matter experts periodically review content\n- **Moderation Reports**: Detailed reports of content violations and handling\n- **Peer Review Process**: Community leaders evaluating discussion quality\n\n### Reporting Schedule\n- **Daily Reports**: Automated summaries of user activity and content creation\n- **Weekly Reports**: Detailed engagement and moderation statistics\n- **Monthly Reports**: Comprehensive performance reviews with trend analysis\n- **Quarterly Reviews**: In-depth business impact analysis with stakeholder presentations\n\n```mermaid\ngraph LR\n  Q[\"Data Sources\"] --> R[\"System Logs\"]\n  Q --> S[\"User Surveys\"]\n  Q --> T[\"Content Ratings\"]\n  U[\"Collection Methods\"] --> V[\"Automated Tracking\"]\n  U --> W[\"Feedback Widgets\"]\n  U --> X[\"Manual Reviews\"]\n  Y[\"Analysis Tools\"] --> Z[\"Dashboard Views\"]\n  Y --> AA[\"Weekly Reports\"]\n  Y --> BB[\"Trend Analysis\"]\n```\n\n## Milestones\n\n### Launch Phase Milestones (Months 1-3)\n- **Week 1**: Achieve 100 registered users and 20 discussion topics\n- **Month 1**: Reach 1,000 total page views and 50 active discussions\n- **Month 2**: Establish 200 registered users with 80% weekly retention\n- **Month 3**: Generate 500 comments across 100 unique topics\n\n### Growth Phase Milestones (Months 4-6)\n- **Month 4**: Attain 500 registered users participating regularly\n- **Month 5**: Achieve 1,000 monthly active users\n- **Month 6**: Establish 10 high-quality discussion categories with consistent activity\n\n### Maturity Phase Milestones (Months 7-12)\n- **Month 9**: Reach 2,500 registered users with 15% monthly growth\n- **Month 12**: Maintain 5,000 monthly active users with 85% retention rate\n\n### Ongoing Operational Milestones\n- **Content Quality**: Achieve 90% approval rate for new submissions\n- **Response Time**: Maintain average 2-hour response to new topics\n- **Moderation Efficiency**: Resolve 95% of reported issues within 24 hours\n\n## Evaluation Framework\n\n### Success Assessment Criteria\nWHEN evaluating platform performance, THE system SHALL use multiple evaluation methods to determine business success and identify improvement areas.\n\n### Quantitative Evaluation\n- **KPI Achievement Scoring**: Each metric receives a score based on target attainment\n- **Trend Analysis**: Compare current performance against historical baselines\n- **Benchmarking**: Compare against industry standards for discussion platforms\n- **ROI Assessment**: Measure business value created versus platform costs\n\n### Qualitative Evaluation\n- **User Experience Reviews**: Regular assessment of user satisfaction and engagement\n- **Content Quality Analysis**: Expert evaluation of discussion depth and relevance\n- **Community Health Indicators**: Assessment of toxic vs. constructive interactions\n- **Business Impact Studies**: Analysis of how discussions influence economic/political awareness\n\n### Review Cadence\n- **Weekly Reviews**: Quick checks of key metrics and immediate issue identification\n- **Monthly Reviews**: Detailed performance analysis with stakeholder reporting\n- **Quarterly Reviews**: Comprehensive business review with strategic planning\n- **Annual Reviews**: Complete evaluation with goal setting for next year\n\n### Intervention Triggers\nWHEN performance falls below established thresholds, THE platform SHALL implement targeted improvements based on metric analysis.\n\n### Escalation Protocols\n- **Minor Issues**: 80-90% of targets met triggers monitoring and minor adjustments\n- **Significant Issues**: 70-80% of targets met requires detailed investigation and action plans\n- **Critical Issues**: Below 70% performance triggers immediate interventions and resource allocation\n\n### Continuous Improvement Process\n- **Feedback Integration**: User and stakeholder input incorporated into platform updates\n- **A/B Testing**: New features tested against success metrics\n- **Iterative Refinement**: Platform improvements based on actual usage patterns\n- **Benchmark Updates**: Regular review of industry standards and competitor performance\n\n```mermaid\ngraph LR\n  CC[\"Evaluation Criteria\"] --> DD[\"Quantitative Metrics\"]\n  CC --> EE[\"Qualitative Assessment\"]\n  FF[\"Review Processes\"] --> GG[\"Weekly Checks\"]\n  FF --> HH[\"Monthly Analysis\"]\n  FF --> II[\"Quarterly Planning\"]\n  JJ[\"Intervention\"] --> KK[\"Minor Adjustments\"]\n  JJ --> LL[\"Major Changes\"]\n  JJ --> MM[\"Critical Actions\"]\n  NN[\"Continuous Improvement\"] --> OO[\"Feedback Loop\"]\n  NN --> PP[\"Testing Process\"]\n  NN --> QQ[\"Benchmark Updates\"]\n```"}],"created_at":"2025-10-15T02:14:10.634Z","completed_at":"2025-10-15T02:17:01.543Z","step":0},{"id":"0199e5a8-13f9-717c-97bf-6a67e9a6e922","type":"userMessage","contents":[{"type":"text","text":"Design the database schema."}],"created_at":"2025-10-15T02:17:01.689Z"},{"id":"0199e5a8-263e-7478-b891-605a39078ab5","type":"assistantMessage","text":"Understood. Based on our previous requirements analysis, which defined a simple discussion board allowing users to create topics and post responses in economic and political categories, I'll now proceed with designing the database schema. This step involves generating a Prisma schema file and Entity-Relationship Diagram (ERD) documentation tailored to the core entities (like users, topics, and posts) and their relationships.\n\nTo do this, I'll execute the Prisma Agent, which will create the database structure based on the analyzed specifications. This focuses purely on database design elements such as entity attributes, relationships, constraints, and indexing—without touching on APIs or business logic. Once completed, I'll review the results with you before moving forward (to API interfaces, if desired).\n\n","created_at":"2025-10-15T02:17:06.366Z","completed_at":"2025-10-15T02:17:07.890Z"},{"type":"prisma","id":"0199e5aa-de6b-736d-a630-221e359e32fb","instruction":"Design database schema for a discussion board with users creating topics and posts, including categories for economic and political topics.","schemas":{"schema-02-actors.prisma":"/// Guest users who can browse public content without authentication. They\n/// provide anonymous access to discussion board content with basic tracking\n/// for session management and user experience monitoring.\n///\n/// @namespace Actors\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_guest_users {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// IP address of the guest user for anonymous session tracking and security\n  /// monitoring.\n  ip_address String\n  \n  /// Browser user agent string for compatibility and analytics purposes.\n  user_agent String\n  \n  /// Temporary session identifier for tracking guest user interactions across\n  /// page views.\n  session_token String?\n  \n  /// Timestamp of the guest user's last activity on the platform.\n  last_accessed_at DateTime @db.Timestamptz\n  \n  /// Timestamp when the guest user session was first recorded.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when the guest user session data was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft delete timestamp for guest user tracking, allowing data retention\n  /// for analytics while marking inactive sessions.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  @@index([last_accessed_at])\n  @@index([created_at])\n}\n\n/// Registered users who have completed authentication and can fully\n/// participate in discussion board activities. They can create content,\n/// respond to discussions, vote, and access member-only features with proper\n/// account management.\n///\n/// @namespace Actors\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_registered_users {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// User's email address for authentication and notifications, must be unique\n  /// across the platform.\n  email String\n  \n  /// Hashed password for secure user authentication, stored as encrypted\n  /// string.\n  password_hash String\n  \n  /// Optional display name shown in discussions and profiles, can be changed\n  /// by the user.\n  display_name String?\n  \n  /// Indicates whether the user's email address has been verified through\n  /// confirmation process.\n  email_verified Boolean\n  \n  /// Timestamp of the user's most recent successful login.\n  last_login_at DateTime? @db.Timestamptz\n  \n  /// Timestamp when the user account was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when the user account information was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft delete timestamp for user accounts, preserving content attribution\n  /// while removing access.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  discussion_board_moderators discussion_board_moderators?\n  discussion_board_topics discussion_board_topics[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_notifications discussion_board_notifications[]\n  discussion_board_reports discussion_board_reports[]\n  \n  @@unique([email])\n  @@index([created_at])\n  @@index([updated_at])\n  @@index([last_login_at])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// Moderators who have elevated permissions to manage content, users, and\n/// platform operations. They inherit registered user capabilities while\n/// adding administrative tools and oversight responsibilities through\n/// reference to their underlying user account. References {@link\n/// discussion_board_registered_users.id} for authentication and profile\n/// information.\n///\n/// @namespace Actors\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_moderators {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Reference to the registered user account this moderator inherits from.\n  /// {@link discussion_board_registered_users.id}.\n  discussion_board_registered_user_id String @db.Uuid\n  \n  /// Timestamp when the user was promoted to moderator role.\n  promoted_at DateTime @db.Timestamptz\n  \n  /// Indicates whether the moderator account is currently active with full\n  /// permissions.\n  is_active_moderator Boolean\n  \n  /// Internal notes for moderator management and performance tracking.\n  moderation_notes String?\n  \n  /// Timestamp when the moderator account was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when the moderator account information was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft delete timestamp for moderator accounts, maintaining audit trail\n  /// while removing active permissions.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  user discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_moderators_discussion_board_registere_b8cd55ae\")\n  \n  discussion_board_reports discussion_board_reports[]\n  \n  @@unique([discussion_board_registered_user_id], map: \"discussion_board_moderators_discussion_board_registere_043e5f99\")\n  \n  @@index([discussion_board_registered_user_id], map: \"discussion_board_moderators_discussion_board_registere_e1582541\")\n  @@index([created_at])\n  @@index([updated_at])\n  @@index([promoted_at])\n}","schema-03-discussions.prisma":"/// Category system for organizing economic and political discussion topics\n/// into themed groups, enabling filtered browsing and content organization.\n///\n/// @namespace Discussions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_categories {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Category name for economic or political themes (e.g., 'Economics',\n  /// 'Politics', 'Policy').\n  name String\n  \n  /// Detailed description of the category's focus area and acceptable topics\n  /// within it.\n  description String?\n  \n  /// Unique business identifier for the category, used for URL generation and\n  /// API filtering.\n  code String\n  \n  /// Timestamp when the category was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp of the last update to the category.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft delete timestamp for category removal without data loss.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  discussion_board_topics discussion_board_topics[]\n  \n  @@unique([name])\n  @@unique([code])\n  @@index([created_at])\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// Core discussion topics created by registered users, serving as containers\n/// for economic and political conversations that can be moderated and\n/// locked.\n///\n/// @namespace Discussions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_topics {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Category this topic belongs to. {@link discussion_board_categories.id}.\n  discussion_board_category_id String @db.Uuid\n  \n  /// Creator of this topic. {@link discussion_board_registered_users.id}.\n  discussion_board_registered_user_id String @db.Uuid\n  \n  /// Topic title that summarizes the economic or political discussion.\n  title String\n  \n  /// Initial post content explaining the topic and starting the discussion.\n  body String\n  \n  /// Unique business identifier generated for the topic URL and referencing.\n  code String\n  \n  /// Current status of the topic (active/locked).\n  status String\n  \n  /// Timestamp when the topic was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp of the last update to the topic.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft delete timestamp for topic removal without losing discussion history.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  category discussion_board_categories @relation(fields: [discussion_board_category_id], references: [id], onDelete: Cascade)\n  author discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_topics_discussion_board_registered_us_9b1dd718\")\n  \n  discussion_board_comments discussion_board_comments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_notifications discussion_board_notifications[]\n  \n  @@unique([code])\n  @@index([discussion_board_category_id, created_at], map: \"discussion_board_topics_discussion_board_category_id_c_2706e440\")\n  @@index([discussion_board_registered_user_id, created_at], map: \"discussion_board_topics_discussion_board_registered_us_df30a1cc\")\n  @@index([status, created_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// Threaded responses to discussion topics, allowing registered users to\n/// participate in economic and political conversations with reply\n/// hierarchies.\n///\n/// @namespace Discussions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_comments {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Topic this comment belongs to. {@link discussion_board_topics.id}.\n  discussion_board_topic_id String @db.Uuid\n  \n  /// Author of this comment. {@link discussion_board_registered_users.id}.\n  discussion_board_registered_user_id String @db.Uuid\n  \n  /// Parent comment if this is a reply in the thread. {@link\n  /// discussion_board_comments.id}.\n  parent_discussion_board_comment_id String? @db.Uuid\n  \n  /// Comment text content contributing to the discussion.\n  body String\n  \n  /// Unique business identifier for the comment, used for referencing and\n  /// permalinks.\n  code String\n  \n  /// Whether this comment is marked as deleted but preserved for discussion\n  /// context.\n  is_deleted Boolean\n  \n  /// Timestamp when the comment was posted.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp of the last edit to the comment.\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  topic discussion_board_topics @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)\n  author discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_comments_discussion_board_registered__07a48c4a\")\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_discussion_board_comment_id], references: [id], onDelete: Cascade, map: \"discussion_board_comments_parent_discussion_board_comm_fceae89d\")\n  \n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_notifications discussion_board_notifications[]\n  \n  @@unique([code])\n  @@index([discussion_board_topic_id, created_at], map: \"discussion_board_comments_discussion_board_topic_id_cr_71c789c8\")\n  @@index([discussion_board_registered_user_id, created_at], map: \"discussion_board_comments_discussion_board_registered__3a6dfa5d\")\n  @@index([parent_discussion_board_comment_id, created_at], map: \"discussion_board_comments_parent_discussion_board_comm_5112fd2a\")\n  @@index([is_deleted, created_at])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","schema-04-interactions.prisma":"/// User voting interactions on discussion topics and comments, enabling\n/// community-driven content quality assessment and popularity rankings. This\n/// table captures upvote/downvote actions to promote high-quality economic\n/// and political discussions while maintaining audit trails of user\n/// engagement.\n///\n/// @namespace Interactions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_votes {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Voted user's discussion_board_registered_users.id\n  discussion_board_registered_user_id String @db.Uuid\n  \n  /// Target topic's discussion_board_topics.id\n  discussion_board_topic_id String? @db.Uuid\n  \n  /// Target comment's discussion_board_comments.id\n  discussion_board_comment_id String? @db.Uuid\n  \n  /// Type of vote (upvote or downvote) indicating user sentiment and\n  /// contribution quality.\n  vote_type String\n  \n  /// Timestamp when the vote was cast to track user engagement timing.\n  created_at DateTime @db.Timestamptz\n  \n  /// Last modification timestamp for audit purposes.\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  user discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade)\n  topic discussion_board_topics? @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  \n  @@unique([discussion_board_registered_user_id, discussion_board_topic_id], map: \"discussion_board_votes_discussion_board_registered_use_7960250b\")\n  @@unique([discussion_board_registered_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_registered_use_a59e7d88\")\n  @@index([discussion_board_topic_id])\n  @@index([discussion_board_comment_id])\n  @@index([created_at])\n}\n\n/// User notification system for discussion board activities, including new\n/// comments, votes, and system announcements. This table manages\n/// personalized alerts to keep registered users engaged with relevant\n/// economic and political topic discussions, supporting both real-time and\n/// digest delivery options.\n///\n/// @namespace Interactions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_notifications {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Recipient user's discussion_board_registered_users.id\n  discussion_board_registered_user_id String @db.Uuid\n  \n  /// Related topic's discussion_board_topics.id\n  discussion_board_topic_id String? @db.Uuid\n  \n  /// Related comment's discussion_board_comments.id\n  discussion_board_comment_id String? @db.Uuid\n  \n  /// Category of notification (comment_reply, topic_update, vote_received,\n  /// moderation_action, system_announcement) to organize user alerts by\n  /// importance.\n  notification_type String\n  \n  /// Brief descriptive title for the notification displayed in user interfaces.\n  title String\n  \n  /// Detailed notification content providing context and actionable\n  /// information about discussion activities.\n  message String\n  \n  /// Whether the user has viewed this notification to enable unread count\n  /// tracking.\n  is_read Boolean\n  \n  /// Timestamp when the notification was generated to maintain chronological\n  /// order.\n  created_at DateTime @db.Timestamptz\n  \n  /// Last modification timestamp for status updates.\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  user discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_notifications_discussion_board_regist_e84e525a\")\n  topic discussion_board_topics? @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  \n  @@index([discussion_board_registered_user_id, is_read], map: \"discussion_board_notifications_discussion_board_regist_9eeac15a\")\n  @@index([discussion_board_topic_id])\n  @@index([discussion_board_comment_id])\n  @@index([notification_type])\n  @@index([created_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([message(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","schema-05-moderation.prisma":"/// User-generated reports on content that may violate community standards in\n/// economic and political discussions. This table captures detailed\n/// information about reported content, including the reporter, reported\n/// item, reason, and moderation status. {@link discussion_board_topics}\n/// {@link discussion_board_comments}\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_reports {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// Reporter's {@link discussion_board_registered_users.id} who submitted the\n  /// report.\n  reporter_id String @db.Uuid\n  \n  /// Assigned moderator's {@link discussion_board_moderators.id} handling this\n  /// report.\n  assigned_moderator_id String? @db.Uuid\n  \n  /// Type of content being reported (topic or comment).\n  reported_content_type String\n  \n  /// ID of the reported topic or comment.\n  reported_content_id String @db.Uuid\n  \n  /// Reason for the report (spam, inappropriate, harassment, etc.).\n  reason String\n  \n  /// Detailed description of the reported issue.\n  description String?\n  \n  /// Current status of the report (pending, in_review, resolved, dismissed).\n  status String\n  \n  /// Resolution details provided by the moderator.\n  resolution String?\n  \n  /// Timestamp when the report was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when the report was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  reporter discussion_board_registered_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  assignedModerator discussion_board_moderators? @relation(fields: [assigned_moderator_id], references: [id], onDelete: Cascade)\n  \n  @@index([status])\n  @@index([reporter_id, created_at])\n  @@index([assigned_moderator_id, status])\n}","main.prisma":"generator client {\n  provider        = \"prisma-client-js\"\n  engineType      = \"client\"\n  previewFeatures = [\"postgresqlExtensions\", \"views\"]\n}\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pg_trgm]\n}\ngenerator markdown {\n  provider = \"prisma-markdown\"\n  output   = \"../../docs/ERD.md\"\n}"},"result":{"success":true,"data":{"files":[{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"discussion_board_guest_users","description":"Guest users who can browse public content without authentication. They provide anonymous access to discussion board content with basic tracking for session management and user experience monitoring.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"ip_address","type":"string","description":"IP address of the guest user for anonymous session tracking and security monitoring.","nullable":false},{"name":"user_agent","type":"string","description":"Browser user agent string for compatibility and analytics purposes.","nullable":false},{"name":"session_token","type":"string","description":"Temporary session identifier for tracking guest user interactions across page views.","nullable":true},{"name":"last_accessed_at","type":"datetime","description":"Timestamp of the guest user's last activity on the platform.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the guest user session was first recorded.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the guest user session data was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp for guest user tracking, allowing data retention for analytics while marking inactive sessions.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["last_accessed_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"discussion_board_registered_users","description":"Registered users who have completed authentication and can fully participate in discussion board activities. They can create content, respond to discussions, vote, and access member-only features with proper account management.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"User's email address for authentication and notifications, must be unique across the platform.","nullable":false},{"name":"password_hash","type":"string","description":"Hashed password for secure user authentication, stored as encrypted string.","nullable":false},{"name":"display_name","type":"string","description":"Optional display name shown in discussions and profiles, can be changed by the user.","nullable":true},{"name":"email_verified","type":"boolean","description":"Indicates whether the user's email address has been verified through confirmation process.","nullable":false},{"name":"last_login_at","type":"datetime","description":"Timestamp of the user's most recent successful login.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the user account was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the user account information was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp for user accounts, preserving content attribution while removing access.","nullable":true}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]},{"fieldNames":["last_login_at"]}],"ginIndexes":[{"fieldName":"display_name"}]},{"name":"discussion_board_moderators","description":"Moderators who have elevated permissions to manage content, users, and platform operations. They inherit registered user capabilities while adding administrative tools and oversight responsibilities through reference to their underlying user account. References {@link discussion_board_registered_users.id} for authentication and profile information.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"discussion_board_registered_user_id","type":"uuid","description":"Reference to the registered user account this moderator inherits from. {@link discussion_board_registered_users.id}.","relation":{"name":"user","targetModel":"discussion_board_registered_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"promoted_at","type":"datetime","description":"Timestamp when the user was promoted to moderator role.","nullable":false},{"name":"is_active_moderator","type":"boolean","description":"Indicates whether the moderator account is currently active with full permissions.","nullable":false},{"name":"moderation_notes","type":"string","description":"Internal notes for moderator management and performance tracking.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the moderator account was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the moderator account information was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp for moderator accounts, maintaining audit trail while removing active permissions.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["discussion_board_registered_user_id"]},{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]},{"fieldNames":["promoted_at"]}],"ginIndexes":[]}]},{"filename":"schema-03-discussions.prisma","namespace":"Discussions","models":[{"name":"discussion_board_categories","description":"Category system for organizing economic and political discussion topics into themed groups, enabling filtered browsing and content organization.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"Category name for economic or political themes (e.g., 'Economics', 'Politics', 'Policy').","nullable":false},{"name":"description","type":"string","description":"Detailed description of the category's focus area and acceptable topics within it.","nullable":true},{"name":"code","type":"string","description":"Unique business identifier for the category, used for URL generation and API filtering.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the category was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of the last update to the category.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp for category removal without data loss.","nullable":true}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true},{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"description"}]},{"name":"discussion_board_topics","description":"Core discussion topics created by registered users, serving as containers for economic and political conversations that can be moderated and locked.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"discussion_board_category_id","type":"uuid","description":"Category this topic belongs to. {@link discussion_board_categories.id}.","relation":{"name":"category","targetModel":"discussion_board_categories"},"unique":false,"nullable":false},{"name":"discussion_board_registered_user_id","type":"uuid","description":"Creator of this topic. {@link discussion_board_registered_users.id}.","relation":{"name":"author","targetModel":"discussion_board_registered_users"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Topic title that summarizes the economic or political discussion.","nullable":false},{"name":"body","type":"string","description":"Initial post content explaining the topic and starting the discussion.","nullable":false},{"name":"code","type":"string","description":"Unique business identifier generated for the topic URL and referencing.","nullable":false},{"name":"status","type":"string","description":"Current status of the topic (active/locked).","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the topic was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of the last update to the topic.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp for topic removal without losing discussion history.","nullable":true}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["discussion_board_category_id","created_at"]},{"fieldNames":["discussion_board_registered_user_id","created_at"]},{"fieldNames":["status","created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}]},{"name":"discussion_board_comments","description":"Threaded responses to discussion topics, allowing registered users to participate in economic and political conversations with reply hierarchies.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"discussion_board_topic_id","type":"uuid","description":"Topic this comment belongs to. {@link discussion_board_topics.id}.","relation":{"name":"topic","targetModel":"discussion_board_topics"},"unique":false,"nullable":false},{"name":"discussion_board_registered_user_id","type":"uuid","description":"Author of this comment. {@link discussion_board_registered_users.id}.","relation":{"name":"author","targetModel":"discussion_board_registered_users"},"unique":false,"nullable":false},{"name":"parent_discussion_board_comment_id","type":"uuid","description":"Parent comment if this is a reply in the thread. {@link discussion_board_comments.id}.","relation":{"name":"parent","targetModel":"discussion_board_comments","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"body","type":"string","description":"Comment text content contributing to the discussion.","nullable":false},{"name":"code","type":"string","description":"Unique business identifier for the comment, used for referencing and permalinks.","nullable":false},{"name":"is_deleted","type":"boolean","description":"Whether this comment is marked as deleted but preserved for discussion context.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the comment was posted.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of the last edit to the comment.","nullable":false}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["discussion_board_topic_id","created_at"]},{"fieldNames":["discussion_board_registered_user_id","created_at"]},{"fieldNames":["parent_discussion_board_comment_id","created_at"]},{"fieldNames":["is_deleted","created_at"]}],"ginIndexes":[{"fieldName":"body"}]}]},{"filename":"schema-04-interactions.prisma","namespace":"Interactions","models":[{"name":"discussion_board_votes","description":"User voting interactions on discussion topics and comments, enabling community-driven content quality assessment and popularity rankings. This table captures upvote/downvote actions to promote high-quality economic and political discussions while maintaining audit trails of user engagement.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"discussion_board_registered_user_id","type":"uuid","description":"Voted user's discussion_board_registered_users.id","relation":{"name":"user","targetModel":"discussion_board_registered_users"},"unique":false,"nullable":false},{"name":"discussion_board_topic_id","type":"uuid","description":"Target topic's discussion_board_topics.id","relation":{"name":"topic","targetModel":"discussion_board_topics"},"unique":false,"nullable":true},{"name":"discussion_board_comment_id","type":"uuid","description":"Target comment's discussion_board_comments.id","relation":{"name":"comment","targetModel":"discussion_board_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"vote_type","type":"string","description":"Type of vote (upvote or downvote) indicating user sentiment and contribution quality.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the vote was cast to track user engagement timing.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp for audit purposes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["discussion_board_registered_user_id","discussion_board_topic_id"],"unique":true},{"fieldNames":["discussion_board_registered_user_id","discussion_board_comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["discussion_board_topic_id"]},{"fieldNames":["discussion_board_comment_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"discussion_board_notifications","description":"User notification system for discussion board activities, including new comments, votes, and system announcements. This table manages personalized alerts to keep registered users engaged with relevant economic and political topic discussions, supporting both real-time and digest delivery options.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"discussion_board_registered_user_id","type":"uuid","description":"Recipient user's discussion_board_registered_users.id","relation":{"name":"user","targetModel":"discussion_board_registered_users"},"unique":false,"nullable":false},{"name":"discussion_board_topic_id","type":"uuid","description":"Related topic's discussion_board_topics.id","relation":{"name":"topic","targetModel":"discussion_board_topics"},"unique":false,"nullable":true},{"name":"discussion_board_comment_id","type":"uuid","description":"Related comment's discussion_board_comments.id","relation":{"name":"comment","targetModel":"discussion_board_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"notification_type","type":"string","description":"Category of notification (comment_reply, topic_update, vote_received, moderation_action, system_announcement) to organize user alerts by importance.","nullable":false},{"name":"title","type":"string","description":"Brief descriptive title for the notification displayed in user interfaces.","nullable":false},{"name":"message","type":"string","description":"Detailed notification content providing context and actionable information about discussion activities.","nullable":false},{"name":"is_read","type":"boolean","description":"Whether the user has viewed this notification to enable unread count tracking.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the notification was generated to maintain chronological order.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification timestamp for status updates.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["discussion_board_registered_user_id","is_read"]},{"fieldNames":["discussion_board_topic_id"]},{"fieldNames":["discussion_board_comment_id"]},{"fieldNames":["notification_type"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"message"}]}]},{"filename":"schema-05-moderation.prisma","namespace":"Moderation","models":[{"name":"discussion_board_reports","description":"User-generated reports on content that may violate community standards in economic and political discussions. This table captures detailed information about reported content, including the reporter, reported item, reason, and moderation status. {@link discussion_board_topics} {@link discussion_board_comments}","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reporter_id","type":"uuid","description":"Reporter's {@link discussion_board_registered_users.id} who submitted the report.","relation":{"name":"reporter","targetModel":"discussion_board_registered_users"},"unique":false,"nullable":false},{"name":"assigned_moderator_id","type":"uuid","description":"Assigned moderator's {@link discussion_board_moderators.id} handling this report.","relation":{"name":"assignedModerator","targetModel":"discussion_board_moderators"},"unique":false,"nullable":true}],"plainFields":[{"name":"reported_content_type","type":"string","description":"Type of content being reported (topic or comment).","nullable":false},{"name":"reported_content_id","type":"uuid","description":"ID of the reported topic or comment.","nullable":false},{"name":"reason","type":"string","description":"Reason for the report (spam, inappropriate, harassment, etc.).","nullable":false},{"name":"description","type":"string","description":"Detailed description of the reported issue.","nullable":true},{"name":"status","type":"string","description":"Current status of the report (pending, in_review, resolved, dismissed).","nullable":false},{"name":"resolution","type":"string","description":"Resolution details provided by the moderator.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the report was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the report was last updated.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["status"]},{"fieldNames":["reporter_id","created_at"]},{"fieldNames":["assigned_moderator_id","status"]}],"ginIndexes":[]}]}]}},"compiled":{"type":"success","schemas":{"schema-02-actors.prisma":"/// Guest users who can browse public content without authentication. They\n/// provide anonymous access to discussion board content with basic tracking\n/// for session management and user experience monitoring.\n///\n/// @namespace Actors\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_guest_users {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// IP address of the guest user for anonymous session tracking and security\n  /// monitoring.\n  ip_address String\n\n  /// Browser user agent string for compatibility and analytics purposes.\n  user_agent String\n\n  /// Temporary session identifier for tracking guest user interactions across\n  /// page views.\n  session_token String?\n\n  /// Timestamp of the guest user's last activity on the platform.\n  last_accessed_at DateTime @db.Timestamptz\n\n  /// Timestamp when the guest user session was first recorded.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp when the guest user session data was last updated.\n  updated_at DateTime @db.Timestamptz\n\n  /// Soft delete timestamp for guest user tracking, allowing data retention\n  /// for analytics while marking inactive sessions.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  @@index([last_accessed_at])\n  @@index([created_at])\n}\n\n/// Registered users who have completed authentication and can fully\n/// participate in discussion board activities. They can create content,\n/// respond to discussions, vote, and access member-only features with proper\n/// account management.\n///\n/// @namespace Actors\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_registered_users {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// User's email address for authentication and notifications, must be unique\n  /// across the platform.\n  email String\n\n  /// Hashed password for secure user authentication, stored as encrypted\n  /// string.\n  password_hash String\n\n  /// Optional display name shown in discussions and profiles, can be changed\n  /// by the user.\n  display_name String?\n\n  /// Indicates whether the user's email address has been verified through\n  /// confirmation process.\n  email_verified Boolean\n\n  /// Timestamp of the user's most recent successful login.\n  last_login_at DateTime? @db.Timestamptz\n\n  /// Timestamp when the user account was created.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp when the user account information was last updated.\n  updated_at DateTime @db.Timestamptz\n\n  /// Soft delete timestamp for user accounts, preserving content attribution\n  /// while removing access.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  discussion_board_moderators    discussion_board_moderators?\n  discussion_board_topics        discussion_board_topics[]\n  discussion_board_comments      discussion_board_comments[]\n  discussion_board_votes         discussion_board_votes[]\n  discussion_board_notifications discussion_board_notifications[]\n  discussion_board_reports       discussion_board_reports[]\n\n  @@unique([email])\n  @@index([created_at])\n  @@index([updated_at])\n  @@index([last_login_at])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// Moderators who have elevated permissions to manage content, users, and\n/// platform operations. They inherit registered user capabilities while\n/// adding administrative tools and oversight responsibilities through\n/// reference to their underlying user account. References {@link\n/// discussion_board_registered_users.id} for authentication and profile\n/// information.\n///\n/// @namespace Actors\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_moderators {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Reference to the registered user account this moderator inherits from.\n  /// {@link discussion_board_registered_users.id}.\n  discussion_board_registered_user_id String @db.Uuid\n\n  /// Timestamp when the user was promoted to moderator role.\n  promoted_at DateTime @db.Timestamptz\n\n  /// Indicates whether the moderator account is currently active with full\n  /// permissions.\n  is_active_moderator Boolean\n\n  /// Internal notes for moderator management and performance tracking.\n  moderation_notes String?\n\n  /// Timestamp when the moderator account was created.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp when the moderator account information was last updated.\n  updated_at DateTime @db.Timestamptz\n\n  /// Soft delete timestamp for moderator accounts, maintaining audit trail\n  /// while removing active permissions.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  user discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_moderators_discussion_board_registere_b8cd55ae\")\n\n  discussion_board_reports discussion_board_reports[]\n\n  @@unique([discussion_board_registered_user_id], map: \"discussion_board_moderators_discussion_board_registere_043e5f99\")\n  @@index([discussion_board_registered_user_id], map: \"discussion_board_moderators_discussion_board_registere_e1582541\")\n  @@index([created_at])\n  @@index([updated_at])\n  @@index([promoted_at])\n}\n","schema-03-discussions.prisma":"/// Category system for organizing economic and political discussion topics\n/// into themed groups, enabling filtered browsing and content organization.\n///\n/// @namespace Discussions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_categories {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Category name for economic or political themes (e.g., 'Economics',\n  /// 'Politics', 'Policy').\n  name String\n\n  /// Detailed description of the category's focus area and acceptable topics\n  /// within it.\n  description String?\n\n  /// Unique business identifier for the category, used for URL generation and\n  /// API filtering.\n  code String\n\n  /// Timestamp when the category was created.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp of the last update to the category.\n  updated_at DateTime @db.Timestamptz\n\n  /// Soft delete timestamp for category removal without data loss.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  discussion_board_topics discussion_board_topics[]\n\n  @@unique([name])\n  @@unique([code])\n  @@index([created_at])\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// Core discussion topics created by registered users, serving as containers\n/// for economic and political conversations that can be moderated and\n/// locked.\n///\n/// @namespace Discussions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_topics {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Category this topic belongs to. {@link discussion_board_categories.id}.\n  discussion_board_category_id String @db.Uuid\n\n  /// Creator of this topic. {@link discussion_board_registered_users.id}.\n  discussion_board_registered_user_id String @db.Uuid\n\n  /// Topic title that summarizes the economic or political discussion.\n  title String\n\n  /// Initial post content explaining the topic and starting the discussion.\n  body String\n\n  /// Unique business identifier generated for the topic URL and referencing.\n  code String\n\n  /// Current status of the topic (active/locked).\n  status String\n\n  /// Timestamp when the topic was created.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp of the last update to the topic.\n  updated_at DateTime @db.Timestamptz\n\n  /// Soft delete timestamp for topic removal without losing discussion history.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  category discussion_board_categories       @relation(fields: [discussion_board_category_id], references: [id], onDelete: Cascade)\n  author   discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_topics_discussion_board_registered_us_9b1dd718\")\n\n  discussion_board_comments      discussion_board_comments[]\n  discussion_board_votes         discussion_board_votes[]\n  discussion_board_notifications discussion_board_notifications[]\n\n  @@unique([code])\n  @@index([discussion_board_category_id, created_at], map: \"discussion_board_topics_discussion_board_category_id_c_2706e440\")\n  @@index([discussion_board_registered_user_id, created_at], map: \"discussion_board_topics_discussion_board_registered_us_df30a1cc\")\n  @@index([status, created_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// Threaded responses to discussion topics, allowing registered users to\n/// participate in economic and political conversations with reply\n/// hierarchies.\n///\n/// @namespace Discussions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_comments {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Topic this comment belongs to. {@link discussion_board_topics.id}.\n  discussion_board_topic_id String @db.Uuid\n\n  /// Author of this comment. {@link discussion_board_registered_users.id}.\n  discussion_board_registered_user_id String @db.Uuid\n\n  /// Parent comment if this is a reply in the thread. {@link\n  /// discussion_board_comments.id}.\n  parent_discussion_board_comment_id String? @db.Uuid\n\n  /// Comment text content contributing to the discussion.\n  body String\n\n  /// Unique business identifier for the comment, used for referencing and\n  /// permalinks.\n  code String\n\n  /// Whether this comment is marked as deleted but preserved for discussion\n  /// context.\n  is_deleted Boolean\n\n  /// Timestamp when the comment was posted.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp of the last edit to the comment.\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  topic  discussion_board_topics           @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)\n  author discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_comments_discussion_board_registered__07a48c4a\")\n  parent discussion_board_comments?        @relation(\"recursive\", fields: [parent_discussion_board_comment_id], references: [id], onDelete: Cascade, map: \"discussion_board_comments_parent_discussion_board_comm_fceae89d\")\n\n  recursive                      discussion_board_comments[]      @relation(\"recursive\")\n  discussion_board_votes         discussion_board_votes[]\n  discussion_board_notifications discussion_board_notifications[]\n\n  @@unique([code])\n  @@index([discussion_board_topic_id, created_at], map: \"discussion_board_comments_discussion_board_topic_id_cr_71c789c8\")\n  @@index([discussion_board_registered_user_id, created_at], map: \"discussion_board_comments_discussion_board_registered__3a6dfa5d\")\n  @@index([parent_discussion_board_comment_id, created_at], map: \"discussion_board_comments_parent_discussion_board_comm_5112fd2a\")\n  @@index([is_deleted, created_at])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","schema-04-interactions.prisma":"/// User voting interactions on discussion topics and comments, enabling\n/// community-driven content quality assessment and popularity rankings. This\n/// table captures upvote/downvote actions to promote high-quality economic\n/// and political discussions while maintaining audit trails of user\n/// engagement.\n///\n/// @namespace Interactions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_votes {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Voted user's discussion_board_registered_users.id\n  discussion_board_registered_user_id String @db.Uuid\n\n  /// Target topic's discussion_board_topics.id\n  discussion_board_topic_id String? @db.Uuid\n\n  /// Target comment's discussion_board_comments.id\n  discussion_board_comment_id String? @db.Uuid\n\n  /// Type of vote (upvote or downvote) indicating user sentiment and\n  /// contribution quality.\n  vote_type String\n\n  /// Timestamp when the vote was cast to track user engagement timing.\n  created_at DateTime @db.Timestamptz\n\n  /// Last modification timestamp for audit purposes.\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  user    discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade)\n  topic   discussion_board_topics?          @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments?        @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n\n  @@unique([discussion_board_registered_user_id, discussion_board_topic_id], map: \"discussion_board_votes_discussion_board_registered_use_7960250b\")\n  @@unique([discussion_board_registered_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_registered_use_a59e7d88\")\n  @@index([discussion_board_topic_id])\n  @@index([discussion_board_comment_id])\n  @@index([created_at])\n}\n\n/// User notification system for discussion board activities, including new\n/// comments, votes, and system announcements. This table manages\n/// personalized alerts to keep registered users engaged with relevant\n/// economic and political topic discussions, supporting both real-time and\n/// digest delivery options.\n///\n/// @namespace Interactions\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_notifications {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Recipient user's discussion_board_registered_users.id\n  discussion_board_registered_user_id String @db.Uuid\n\n  /// Related topic's discussion_board_topics.id\n  discussion_board_topic_id String? @db.Uuid\n\n  /// Related comment's discussion_board_comments.id\n  discussion_board_comment_id String? @db.Uuid\n\n  /// Category of notification (comment_reply, topic_update, vote_received,\n  /// moderation_action, system_announcement) to organize user alerts by\n  /// importance.\n  notification_type String\n\n  /// Brief descriptive title for the notification displayed in user interfaces.\n  title String\n\n  /// Detailed notification content providing context and actionable\n  /// information about discussion activities.\n  message String\n\n  /// Whether the user has viewed this notification to enable unread count\n  /// tracking.\n  is_read Boolean\n\n  /// Timestamp when the notification was generated to maintain chronological\n  /// order.\n  created_at DateTime @db.Timestamptz\n\n  /// Last modification timestamp for status updates.\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  user    discussion_board_registered_users @relation(fields: [discussion_board_registered_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_notifications_discussion_board_regist_e84e525a\")\n  topic   discussion_board_topics?          @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments?        @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n\n  @@index([discussion_board_registered_user_id, is_read], map: \"discussion_board_notifications_discussion_board_regist_9eeac15a\")\n  @@index([discussion_board_topic_id])\n  @@index([discussion_board_comment_id])\n  @@index([notification_type])\n  @@index([created_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([message(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","schema-05-moderation.prisma":"/// User-generated reports on content that may violate community standards in\n/// economic and political discussions. This table captures detailed\n/// information about reported content, including the reporter, reported\n/// item, reason, and moderation status. {@link discussion_board_topics}\n/// {@link discussion_board_comments}\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_reports {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n\n  /// Reporter's {@link discussion_board_registered_users.id} who submitted the\n  /// report.\n  reporter_id String @db.Uuid\n\n  /// Assigned moderator's {@link discussion_board_moderators.id} handling this\n  /// report.\n  assigned_moderator_id String? @db.Uuid\n\n  /// Type of content being reported (topic or comment).\n  reported_content_type String\n\n  /// ID of the reported topic or comment.\n  reported_content_id String @db.Uuid\n\n  /// Reason for the report (spam, inappropriate, harassment, etc.).\n  reason String\n\n  /// Detailed description of the reported issue.\n  description String?\n\n  /// Current status of the report (pending, in_review, resolved, dismissed).\n  status String\n\n  /// Resolution details provided by the moderator.\n  resolution String?\n\n  /// Timestamp when the report was created.\n  created_at DateTime @db.Timestamptz\n\n  /// Timestamp when the report was last updated.\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  reporter          discussion_board_registered_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  assignedModerator discussion_board_moderators?      @relation(fields: [assigned_moderator_id], references: [id], onDelete: Cascade)\n\n  @@index([status])\n  @@index([reporter_id, created_at])\n  @@index([assigned_moderator_id, status])\n}\n","main.prisma":"generator client {\n  provider        = \"prisma-client-js\"\n  engineType      = \"client\"\n  previewFeatures = [\"postgresqlExtensions\", \"views\"]\n}\n\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pg_trgm]\n}\n\ngenerator markdown {\n  provider = \"prisma-markdown\"\n  output   = \"../../docs/ERD.md\"\n}\n"},"nodeModules":{"node_modules/.prisma/client/client.d.ts":"export * from \"./index\"","node_modules/.prisma/client/default.d.ts":"export * from \"./index\"","node_modules/.prisma/client/edge.d.ts":"export * from \"./default\"","node_modules/.prisma/client/index.d.ts":"\n/**\n * Client\n**/\n\nimport * as runtime from './runtime/client.js';\nimport $Types = runtime.Types // general types\nimport $Public = runtime.Types.Public\nimport $Utils = runtime.Types.Utils\nimport $Extensions = runtime.Types.Extensions\nimport $Result = runtime.Types.Result\n\nexport type PrismaPromise<T> = $Public.PrismaPromise<T>\n\n\n/**\n * Model discussion_board_guest_users\n * Guest users who can browse public content without authentication. They\n * provide anonymous access to discussion board content with basic tracking\n * for session management and user experience monitoring.\n * \n * @namespace Actors\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_guest_users = $Result.DefaultSelection<Prisma.$discussion_board_guest_usersPayload>\n/**\n * Model discussion_board_registered_users\n * Registered users who have completed authentication and can fully\n * participate in discussion board activities. They can create content,\n * respond to discussions, vote, and access member-only features with proper\n * account management.\n * \n * @namespace Actors\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_registered_users = $Result.DefaultSelection<Prisma.$discussion_board_registered_usersPayload>\n/**\n * Model discussion_board_moderators\n * Moderators who have elevated permissions to manage content, users, and\n * platform operations. They inherit registered user capabilities while\n * adding administrative tools and oversight responsibilities through\n * reference to their underlying user account. References {@link\n * discussion_board_registered_users.id} for authentication and profile\n * information.\n * \n * @namespace Actors\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_moderators = $Result.DefaultSelection<Prisma.$discussion_board_moderatorsPayload>\n/**\n * Model discussion_board_categories\n * Category system for organizing economic and political discussion topics\n * into themed groups, enabling filtered browsing and content organization.\n * \n * @namespace Discussions\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_categories = $Result.DefaultSelection<Prisma.$discussion_board_categoriesPayload>\n/**\n * Model discussion_board_topics\n * Core discussion topics created by registered users, serving as containers\n * for economic and political conversations that can be moderated and\n * locked.\n * \n * @namespace Discussions\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_topics = $Result.DefaultSelection<Prisma.$discussion_board_topicsPayload>\n/**\n * Model discussion_board_comments\n * Threaded responses to discussion topics, allowing registered users to\n * participate in economic and political conversations with reply\n * hierarchies.\n * \n * @namespace Discussions\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_comments = $Result.DefaultSelection<Prisma.$discussion_board_commentsPayload>\n/**\n * Model discussion_board_votes\n * User voting interactions on discussion topics and comments, enabling\n * community-driven content quality assessment and popularity rankings. This\n * table captures upvote/downvote actions to promote high-quality economic\n * and political discussions while maintaining audit trails of user\n * engagement.\n * \n * @namespace Interactions\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_votes = $Result.DefaultSelection<Prisma.$discussion_board_votesPayload>\n/**\n * Model discussion_board_notifications\n * User notification system for discussion board activities, including new\n * comments, votes, and system announcements. This table manages\n * personalized alerts to keep registered users engaged with relevant\n * economic and political topic discussions, supporting both real-time and\n * digest delivery options.\n * \n * @namespace Interactions\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_notifications = $Result.DefaultSelection<Prisma.$discussion_board_notificationsPayload>\n/**\n * Model discussion_board_reports\n * User-generated reports on content that may violate community standards in\n * economic and political discussions. This table captures detailed\n * information about reported content, including the reporter, reported\n * item, reason, and moderation status. {@link discussion_board_topics}\n * {@link discussion_board_comments}\n * \n * @namespace Moderation\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussion_board_reports = $Result.DefaultSelection<Prisma.$discussion_board_reportsPayload>\n\n/**\n * ##  Prisma Client ʲˢ\n *\n * Type-safe database client for TypeScript & Node.js\n * @example\n * ```\n * const prisma = new PrismaClient()\n * // Fetch zero or more Discussion_board_guest_users\n * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findMany()\n * ```\n *\n *\n * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n */\nexport class PrismaClient<\n  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,\n  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,\n  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs\n> {\n  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }\n\n    /**\n   * ##  Prisma Client ʲˢ\n   *\n   * Type-safe database client for TypeScript & Node.js\n   * @example\n   * ```\n   * const prisma = new PrismaClient()\n   * // Fetch zero or more Discussion_board_guest_users\n   * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findMany()\n   * ```\n   *\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n   */\n\n  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);\n  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;\n\n  /**\n   * Connect with the database\n   */\n  $connect(): $Utils.JsPromise<void>;\n\n  /**\n   * Disconnect from the database\n   */\n  $disconnect(): $Utils.JsPromise<void>;\n\n/**\n   * Executes a prepared raw query and returns the number of affected rows.\n   * @example\n   * ```\n   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;\n\n  /**\n   * Executes a raw query and returns the number of affected rows.\n   * Susceptible to SQL injections, see documentation.\n   * @example\n   * ```\n   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;\n\n  /**\n   * Performs a prepared raw query and returns the `SELECT` data.\n   * @example\n   * ```\n   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;\n\n  /**\n   * Performs a raw query and returns the `SELECT` data.\n   * Susceptible to SQL injections, see documentation.\n   * @example\n   * ```\n   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;\n\n\n  /**\n   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.\n   * @example\n   * ```\n   * const [george, bob, alice] = await prisma.$transaction([\n   *   prisma.user.create({ data: { name: 'George' } }),\n   *   prisma.user.create({ data: { name: 'Bob' } }),\n   *   prisma.user.create({ data: { name: 'Alice' } }),\n   * ])\n   * ```\n   * \n   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).\n   */\n  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>\n\n  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>\n\n\n  $extends: $Extensions.ExtendsHook<\"extends\", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {\n    extArgs: ExtArgs\n  }>>\n\n      /**\n   * `prisma.discussion_board_guest_users`: Exposes CRUD operations for the **discussion_board_guest_users** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_guest_users\n    * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findMany()\n    * ```\n    */\n  get discussion_board_guest_users(): Prisma.discussion_board_guest_usersDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_registered_users`: Exposes CRUD operations for the **discussion_board_registered_users** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_registered_users\n    * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findMany()\n    * ```\n    */\n  get discussion_board_registered_users(): Prisma.discussion_board_registered_usersDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_moderators`: Exposes CRUD operations for the **discussion_board_moderators** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_moderators\n    * const discussion_board_moderators = await prisma.discussion_board_moderators.findMany()\n    * ```\n    */\n  get discussion_board_moderators(): Prisma.discussion_board_moderatorsDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_categories`: Exposes CRUD operations for the **discussion_board_categories** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_categories\n    * const discussion_board_categories = await prisma.discussion_board_categories.findMany()\n    * ```\n    */\n  get discussion_board_categories(): Prisma.discussion_board_categoriesDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_topics`: Exposes CRUD operations for the **discussion_board_topics** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_topics\n    * const discussion_board_topics = await prisma.discussion_board_topics.findMany()\n    * ```\n    */\n  get discussion_board_topics(): Prisma.discussion_board_topicsDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_comments`: Exposes CRUD operations for the **discussion_board_comments** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_comments\n    * const discussion_board_comments = await prisma.discussion_board_comments.findMany()\n    * ```\n    */\n  get discussion_board_comments(): Prisma.discussion_board_commentsDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_votes`: Exposes CRUD operations for the **discussion_board_votes** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_votes\n    * const discussion_board_votes = await prisma.discussion_board_votes.findMany()\n    * ```\n    */\n  get discussion_board_votes(): Prisma.discussion_board_votesDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_notifications`: Exposes CRUD operations for the **discussion_board_notifications** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_notifications\n    * const discussion_board_notifications = await prisma.discussion_board_notifications.findMany()\n    * ```\n    */\n  get discussion_board_notifications(): Prisma.discussion_board_notificationsDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussion_board_reports`: Exposes CRUD operations for the **discussion_board_reports** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussion_board_reports\n    * const discussion_board_reports = await prisma.discussion_board_reports.findMany()\n    * ```\n    */\n  get discussion_board_reports(): Prisma.discussion_board_reportsDelegate<ExtArgs, ClientOptions>;\n}\n\nexport namespace Prisma {\n  export import DMMF = runtime.DMMF\n\n  export type PrismaPromise<T> = $Public.PrismaPromise<T>\n\n  /**\n   * Validator\n   */\n  export import validator = runtime.Public.validator\n\n  /**\n   * Prisma Errors\n   */\n  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError\n  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError\n  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError\n  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError\n  export import PrismaClientValidationError = runtime.PrismaClientValidationError\n\n  /**\n   * Re-export of sql-template-tag\n   */\n  export import sql = runtime.sqltag\n  export import empty = runtime.empty\n  export import join = runtime.join\n  export import raw = runtime.raw\n  export import Sql = runtime.Sql\n\n\n\n  /**\n   * Decimal.js\n   */\n  export import Decimal = runtime.Decimal\n\n  export type DecimalJsLike = runtime.DecimalJsLike\n\n  /**\n   * Metrics\n   */\n  export type Metrics = runtime.Metrics\n  export type Metric<T> = runtime.Metric<T>\n  export type MetricHistogram = runtime.MetricHistogram\n  export type MetricHistogramBucket = runtime.MetricHistogramBucket\n\n  /**\n  * Extensions\n  */\n  export import Extension = $Extensions.UserArgs\n  export import getExtensionContext = runtime.Extensions.getExtensionContext\n  export import Args = $Public.Args\n  export import Payload = $Public.Payload\n  export import Result = $Public.Result\n  export import Exact = $Public.Exact\n\n  /**\n   * Prisma Client JS version: local\n   * Query Engine version: local\n   */\n  export type PrismaVersion = {\n    client: string\n  }\n\n  export const prismaVersion: PrismaVersion\n\n  /**\n   * Utility Types\n   */\n\n\n  export import JsonObject = runtime.JsonObject\n  export import JsonArray = runtime.JsonArray\n  export import JsonValue = runtime.JsonValue\n  export import InputJsonObject = runtime.InputJsonObject\n  export import InputJsonArray = runtime.InputJsonArray\n  export import InputJsonValue = runtime.InputJsonValue\n\n  /**\n   * Types of the values used to represent different kinds of `null` values when working with JSON fields.\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  namespace NullTypes {\n    /**\n    * Type of `Prisma.DbNull`.\n    *\n    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.\n    *\n    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n    */\n    class DbNull {\n      private DbNull: never\n      private constructor()\n    }\n\n    /**\n    * Type of `Prisma.JsonNull`.\n    *\n    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.\n    *\n    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n    */\n    class JsonNull {\n      private JsonNull: never\n      private constructor()\n    }\n\n    /**\n    * Type of `Prisma.AnyNull`.\n    *\n    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.\n    *\n    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n    */\n    class AnyNull {\n      private AnyNull: never\n      private constructor()\n    }\n  }\n\n  /**\n   * Helper for filtering JSON entries that have `null` on the database (empty on the db)\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  export const DbNull: NullTypes.DbNull\n\n  /**\n   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  export const JsonNull: NullTypes.JsonNull\n\n  /**\n   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  export const AnyNull: NullTypes.AnyNull\n\n  type SelectAndInclude = {\n    select: any\n    include: any\n  }\n\n  type SelectAndOmit = {\n    select: any\n    omit: any\n  }\n\n  /**\n   * Get the type of the value, that the Promise holds.\n   */\n  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;\n\n  /**\n   * Get the return type of a function which returns a Promise.\n   */\n  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>\n\n  /**\n   * From T, pick a set of properties whose keys are in the union K\n   */\n  type Prisma__Pick<T, K extends keyof T> = {\n      [P in K]: T[P];\n  };\n\n\n  export type Enumerable<T> = T | Array<T>;\n\n  export type RequiredKeys<T> = {\n    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K\n  }[keyof T]\n\n  export type TruthyKeys<T> = keyof {\n    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K\n  }\n\n  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>\n\n  /**\n   * Subset\n   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection\n   */\n  export type Subset<T, U> = {\n    [key in keyof T]: key extends keyof U ? T[key] : never;\n  };\n\n  /**\n   * SelectSubset\n   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.\n   * Additionally, it validates, if both select and include are present. If the case, it errors.\n   */\n  export type SelectSubset<T, U> = {\n    [key in keyof T]: key extends keyof U ? T[key] : never\n  } &\n    (T extends SelectAndInclude\n      ? 'Please either choose `select` or `include`.'\n      : T extends SelectAndOmit\n        ? 'Please either choose `select` or `omit`.'\n        : {})\n\n  /**\n   * Subset + Intersection\n   * @desc From `T` pick properties that exist in `U` and intersect `K`\n   */\n  export type SubsetIntersection<T, U, K> = {\n    [key in keyof T]: key extends keyof U ? T[key] : never\n  } &\n    K\n\n  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\n\n  /**\n   * XOR is needed to have a real mutually exclusive union type\n   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types\n   */\n  type XOR<T, U> =\n    T extends object ?\n    U extends object ?\n      (Without<T, U> & U) | (Without<U, T> & T)\n    : U : T\n\n\n  /**\n   * Is T a Record?\n   */\n  type IsObject<T extends any> = T extends Array<any>\n  ? False\n  : T extends Date\n  ? False\n  : T extends Uint8Array\n  ? False\n  : T extends BigInt\n  ? False\n  : T extends object\n  ? True\n  : False\n\n\n  /**\n   * If it's T[], return T\n   */\n  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T\n\n  /**\n   * From ts-toolbelt\n   */\n\n  type __Either<O extends object, K extends Key> = Omit<O, K> &\n    {\n      // Merge all but K\n      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities\n    }[K]\n\n  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>\n\n  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>\n\n  type _Either<\n    O extends object,\n    K extends Key,\n    strict extends Boolean\n  > = {\n    1: EitherStrict<O, K>\n    0: EitherLoose<O, K>\n  }[strict]\n\n  type Either<\n    O extends object,\n    K extends Key,\n    strict extends Boolean = 1\n  > = O extends unknown ? _Either<O, K, strict> : never\n\n  export type Union = any\n\n  type PatchUndefined<O extends object, O1 extends object> = {\n    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]\n  } & {}\n\n  /** Helper Types for \"Merge\" **/\n  export type IntersectOf<U extends Union> = (\n    U extends unknown ? (k: U) => void : never\n  ) extends (k: infer I) => void\n    ? I\n    : never\n\n  export type Overwrite<O extends object, O1 extends object> = {\n      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];\n  } & {};\n\n  type _Merge<U extends object> = IntersectOf<Overwrite<U, {\n      [K in keyof U]-?: At<U, K>;\n  }>>;\n\n  type Key = string | number | symbol;\n  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;\n  type AtStrict<O extends object, K extends Key> = O[K & keyof O];\n  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;\n  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {\n      1: AtStrict<O, K>;\n      0: AtLoose<O, K>;\n  }[strict];\n\n  export type ComputeRaw<A extends any> = A extends Function ? A : {\n    [K in keyof A]: A[K];\n  } & {};\n\n  export type OptionalFlat<O> = {\n    [K in keyof O]?: O[K];\n  } & {};\n\n  type _Record<K extends keyof any, T> = {\n    [P in K]: T;\n  };\n\n  // cause typescript not to expand types and preserve names\n  type NoExpand<T> = T extends unknown ? T : never;\n\n  // this type assumes the passed object is entirely optional\n  type AtLeast<O extends object, K extends string> = NoExpand<\n    O extends unknown\n    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)\n      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O\n    : never>;\n\n  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;\n\n  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;\n  /** End Helper Types for \"Merge\" **/\n\n  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;\n\n  /**\n  A [[Boolean]]\n  */\n  export type Boolean = True | False\n\n  // /**\n  // 1\n  // */\n  export type True = 1\n\n  /**\n  0\n  */\n  export type False = 0\n\n  export type Not<B extends Boolean> = {\n    0: 1\n    1: 0\n  }[B]\n\n  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]\n    ? 0 // anything `never` is false\n    : A1 extends A2\n    ? 1\n    : 0\n\n  export type Has<U extends Union, U1 extends Union> = Not<\n    Extends<Exclude<U1, U>, U1>\n  >\n\n  export type Or<B1 extends Boolean, B2 extends Boolean> = {\n    0: {\n      0: 0\n      1: 1\n    }\n    1: {\n      0: 1\n      1: 1\n    }\n  }[B1][B2]\n\n  export type Keys<U extends Union> = U extends unknown ? keyof U : never\n\n  type Cast<A, B> = A extends B ? A : B;\n\n  export const type: unique symbol;\n\n\n\n  /**\n   * Used by group by\n   */\n\n  export type GetScalarType<T, O> = O extends object ? {\n    [P in keyof T]: P extends keyof O\n      ? O[P]\n      : never\n  } : never\n\n  type FieldPaths<\n    T,\n    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>\n  > = IsObject<T> extends True ? U : T\n\n  type GetHavingFields<T> = {\n    [K in keyof T]: Or<\n      Or<Extends<'OR', K>, Extends<'AND', K>>,\n      Extends<'NOT', K>\n    > extends True\n      ? // infer is only needed to not hit TS limit\n        // based on the brilliant idea of Pierre-Antoine Mills\n        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437\n        T[K] extends infer TK\n        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>\n        : never\n      : {} extends FieldPaths<T[K]>\n      ? never\n      : K\n  }[keyof T]\n\n  /**\n   * Convert tuple to union\n   */\n  type _TupleToUnion<T> = T extends (infer E)[] ? E : never\n  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>\n  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T\n\n  /**\n   * Like `Pick`, but additionally can also accept an array of keys\n   */\n  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>\n\n  /**\n   * Exclude all keys with underscores\n   */\n  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T\n\n\n  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>\n\n  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>\n\n\n  export const ModelName: {\n    discussion_board_guest_users: 'discussion_board_guest_users',\n    discussion_board_registered_users: 'discussion_board_registered_users',\n    discussion_board_moderators: 'discussion_board_moderators',\n    discussion_board_categories: 'discussion_board_categories',\n    discussion_board_topics: 'discussion_board_topics',\n    discussion_board_comments: 'discussion_board_comments',\n    discussion_board_votes: 'discussion_board_votes',\n    discussion_board_notifications: 'discussion_board_notifications',\n    discussion_board_reports: 'discussion_board_reports'\n  };\n\n  export type ModelName = (typeof ModelName)[keyof typeof ModelName]\n\n\n  export type Datasources = {\n    db?: Datasource\n  }\n\n  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {\n    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>\n  }\n\n  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {\n    globalOmitOptions: {\n      omit: GlobalOmitOptions\n    }\n    meta: {\n      modelProps: \"discussion_board_guest_users\" | \"discussion_board_registered_users\" | \"discussion_board_moderators\" | \"discussion_board_categories\" | \"discussion_board_topics\" | \"discussion_board_comments\" | \"discussion_board_votes\" | \"discussion_board_notifications\" | \"discussion_board_reports\"\n      txIsolationLevel: Prisma.TransactionIsolationLevel\n    }\n    model: {\n      discussion_board_guest_users: {\n        payload: Prisma.$discussion_board_guest_usersPayload<ExtArgs>\n        fields: Prisma.discussion_board_guest_usersFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_guest_usersFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_guest_usersFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_guest_usersFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_guest_usersFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_guest_usersFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_guest_usersCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_guest_usersCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_guest_usersCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_guest_usersDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_guest_usersUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_guest_usersDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_guest_usersUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_guest_usersUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_guest_usersUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_guest_usersPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_guest_usersAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_guest_users>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_guest_usersGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_guest_usersGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_guest_usersCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_guest_usersCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_registered_users: {\n        payload: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n        fields: Prisma.discussion_board_registered_usersFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_registered_usersFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_registered_usersFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_registered_usersFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_registered_usersFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_registered_usersFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_registered_usersCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_registered_usersCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_registered_usersCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_registered_usersDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_registered_usersUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_registered_usersDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_registered_usersUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_registered_usersUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_registered_usersUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_registered_usersPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_registered_usersAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_registered_users>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_registered_usersGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_registered_usersGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_registered_usersCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_registered_usersCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_moderators: {\n        payload: Prisma.$discussion_board_moderatorsPayload<ExtArgs>\n        fields: Prisma.discussion_board_moderatorsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_moderatorsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_moderatorsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_moderatorsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_moderatorsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_moderatorsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_moderatorsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_moderatorsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_moderatorsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_moderatorsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_moderatorsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_moderatorsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_moderatorsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_moderatorsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_moderatorsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_moderatorsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_moderatorsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_moderators>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_moderatorsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_moderatorsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_moderatorsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_moderatorsCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_categories: {\n        payload: Prisma.$discussion_board_categoriesPayload<ExtArgs>\n        fields: Prisma.discussion_board_categoriesFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_categoriesFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_categoriesFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_categoriesFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_categoriesFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_categoriesFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_categoriesCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_categoriesCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_categoriesCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_categoriesDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_categoriesUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_categoriesDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_categoriesUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_categoriesUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_categoriesUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_categoriesPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_categoriesAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_categories>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_categoriesGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_categoriesGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_categoriesCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_categoriesCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_topics: {\n        payload: Prisma.$discussion_board_topicsPayload<ExtArgs>\n        fields: Prisma.discussion_board_topicsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_topicsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_topicsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_topicsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_topicsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_topicsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_topicsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_topicsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_topicsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_topicsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_topicsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_topicsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_topicsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_topicsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_topicsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_topicsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_topicsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_topics>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_topicsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_topicsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_topicsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_topicsCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_comments: {\n        payload: Prisma.$discussion_board_commentsPayload<ExtArgs>\n        fields: Prisma.discussion_board_commentsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_commentsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_commentsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_commentsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_commentsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_commentsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_commentsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_commentsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_commentsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_commentsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_commentsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_commentsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_commentsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_commentsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_commentsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_commentsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_commentsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_comments>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_commentsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_commentsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_commentsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_commentsCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_votes: {\n        payload: Prisma.$discussion_board_votesPayload<ExtArgs>\n        fields: Prisma.discussion_board_votesFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_votesFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_votesFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_votesFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_votesFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_votesFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_votesCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_votesCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_votesCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_votesDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_votesUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_votesDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_votesUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_votesUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_votesUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_votesPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_votesAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_votes>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_votesGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_votesGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_votesCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_votesCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_notifications: {\n        payload: Prisma.$discussion_board_notificationsPayload<ExtArgs>\n        fields: Prisma.discussion_board_notificationsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_notificationsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_notificationsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_notificationsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_notificationsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_notificationsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_notificationsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_notificationsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_notificationsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_notificationsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_notificationsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_notificationsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_notificationsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_notificationsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_notificationsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_notificationsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_notificationsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_notifications>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_notificationsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_notificationsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_notificationsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_notificationsCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussion_board_reports: {\n        payload: Prisma.$discussion_board_reportsPayload<ExtArgs>\n        fields: Prisma.discussion_board_reportsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussion_board_reportsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussion_board_reportsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussion_board_reportsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussion_board_reportsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>\n          }\n          findMany: {\n            args: Prisma.discussion_board_reportsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>[]\n          }\n          create: {\n            args: Prisma.discussion_board_reportsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>\n          }\n          createMany: {\n            args: Prisma.discussion_board_reportsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussion_board_reportsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussion_board_reportsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>\n          }\n          update: {\n            args: Prisma.discussion_board_reportsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussion_board_reportsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussion_board_reportsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussion_board_reportsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussion_board_reportsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussion_board_reportsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussion_board_reportsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussion_board_reports>\n          }\n          groupBy: {\n            args: Prisma.discussion_board_reportsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_reportsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussion_board_reportsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussion_board_reportsCountAggregateOutputType> | number\n          }\n        }\n      }\n    }\n  } & {\n    other: {\n      payload: any\n      operations: {\n        $executeRaw: {\n          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],\n          result: any\n        }\n        $executeRawUnsafe: {\n          args: [query: string, ...values: any[]],\n          result: any\n        }\n        $queryRaw: {\n          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],\n          result: any\n        }\n        $queryRawUnsafe: {\n          args: [query: string, ...values: any[]],\n          result: any\n        }\n      }\n    }\n  }\n  export const defineExtension: $Extensions.ExtendsHook<\"define\", Prisma.TypeMapCb, $Extensions.DefaultArgs>\n  export type DefaultPrismaClient = PrismaClient\n  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'\n  export interface PrismaClientOptions {\n    /**\n     * Overwrites the datasource url from your schema.prisma file\n     */\n    datasources?: Datasources\n    /**\n     * Overwrites the datasource url from your schema.prisma file\n     */\n    datasourceUrl?: string\n    /**\n     * @default \"colorless\"\n     */\n    errorFormat?: ErrorFormat\n    /**\n     * @example\n     * ```\n     * // Shorthand for `emit: 'stdout'`\n     * log: ['query', 'info', 'warn', 'error']\n     * \n     * // Emit as events only\n     * log: [\n     *   { emit: 'event', level: 'query' },\n     *   { emit: 'event', level: 'info' },\n     *   { emit: 'event', level: 'warn' }\n     *   { emit: 'event', level: 'error' }\n     * ]\n     * \n     * / Emit as events and log to stdout\n     * og: [\n     *  { emit: 'stdout', level: 'query' },\n     *  { emit: 'stdout', level: 'info' },\n     *  { emit: 'stdout', level: 'warn' }\n     *  { emit: 'stdout', level: 'error' }\n     * \n     * ```\n     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).\n     */\n    log?: (LogLevel | LogDefinition)[]\n    /**\n     * The default values for transactionOptions\n     * maxWait ?= 2000\n     * timeout ?= 5000\n     */\n    transactionOptions?: {\n      maxWait?: number\n      timeout?: number\n      isolationLevel?: Prisma.TransactionIsolationLevel\n    }\n    /**\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`\n     */\n    adapter?: runtime.SqlDriverAdapterFactory | null\n    /**\n     * Global configuration for omitting model fields by default.\n     * \n     * @example\n     * ```\n     * const prisma = new PrismaClient({\n     *   omit: {\n     *     user: {\n     *       password: true\n     *     }\n     *   }\n     * })\n     * ```\n     */\n    omit?: Prisma.GlobalOmitConfig\n  }\n  export type GlobalOmitConfig = {\n    discussion_board_guest_users?: discussion_board_guest_usersOmit\n    discussion_board_registered_users?: discussion_board_registered_usersOmit\n    discussion_board_moderators?: discussion_board_moderatorsOmit\n    discussion_board_categories?: discussion_board_categoriesOmit\n    discussion_board_topics?: discussion_board_topicsOmit\n    discussion_board_comments?: discussion_board_commentsOmit\n    discussion_board_votes?: discussion_board_votesOmit\n    discussion_board_notifications?: discussion_board_notificationsOmit\n    discussion_board_reports?: discussion_board_reportsOmit\n  }\n\n  /* Types for Logging */\n  export type LogLevel = 'info' | 'query' | 'warn' | 'error'\n  export type LogDefinition = {\n    level: LogLevel\n    emit: 'stdout' | 'event'\n  }\n\n  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;\n\n  export type GetLogType<T> = CheckIsLogLevel<\n    T extends LogDefinition ? T['level'] : T\n  >;\n\n  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>\n    ? GetLogType<T[number]>\n    : never;\n\n  export type QueryEvent = {\n    timestamp: Date\n    query: string\n    params: string\n    duration: number\n    target: string\n  }\n\n  export type LogEvent = {\n    timestamp: Date\n    message: string\n    target: string\n  }\n  /* End Types for Logging */\n\n\n  export type PrismaAction =\n    | 'findUnique'\n    | 'findUniqueOrThrow'\n    | 'findMany'\n    | 'findFirst'\n    | 'findFirstOrThrow'\n    | 'create'\n    | 'createMany'\n    | 'createManyAndReturn'\n    | 'update'\n    | 'updateMany'\n    | 'updateManyAndReturn'\n    | 'upsert'\n    | 'delete'\n    | 'deleteMany'\n    | 'executeRaw'\n    | 'queryRaw'\n    | 'aggregate'\n    | 'count'\n    | 'runCommandRaw'\n    | 'findRaw'\n    | 'groupBy'\n\n  // tested in getLogLevel.test.ts\n  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;\n\n  /**\n   * `PrismaClient` proxy available in interactive transactions.\n   */\n  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>\n\n  export type Datasource = {\n    url?: string\n  }\n\n  /**\n   * Count Types\n   */\n\n\n  /**\n   * Count Type Discussion_board_registered_usersCountOutputType\n   */\n\n  export type Discussion_board_registered_usersCountOutputType = {\n    discussion_board_topics: number\n    discussion_board_comments: number\n    discussion_board_votes: number\n    discussion_board_notifications: number\n    discussion_board_reports: number\n  }\n\n  export type Discussion_board_registered_usersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussion_board_topics?: boolean | Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_topicsArgs\n    discussion_board_comments?: boolean | Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_commentsArgs\n    discussion_board_votes?: boolean | Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_votesArgs\n    discussion_board_notifications?: boolean | Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_notificationsArgs\n    discussion_board_reports?: boolean | Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_reportsArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussion_board_registered_usersCountOutputType without action\n   */\n  export type Discussion_board_registered_usersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussion_board_registered_usersCountOutputType\n     */\n    select?: Discussion_board_registered_usersCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussion_board_registered_usersCountOutputType without action\n   */\n  export type Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_topicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_topicsWhereInput\n  }\n\n  /**\n   * Discussion_board_registered_usersCountOutputType without action\n   */\n  export type Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_commentsWhereInput\n  }\n\n  /**\n   * Discussion_board_registered_usersCountOutputType without action\n   */\n  export type Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_votesWhereInput\n  }\n\n  /**\n   * Discussion_board_registered_usersCountOutputType without action\n   */\n  export type Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_notificationsWhereInput\n  }\n\n  /**\n   * Discussion_board_registered_usersCountOutputType without action\n   */\n  export type Discussion_board_registered_usersCountOutputTypeCountDiscussion_board_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_reportsWhereInput\n  }\n\n\n  /**\n   * Count Type Discussion_board_moderatorsCountOutputType\n   */\n\n  export type Discussion_board_moderatorsCountOutputType = {\n    discussion_board_reports: number\n  }\n\n  export type Discussion_board_moderatorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussion_board_reports?: boolean | Discussion_board_moderatorsCountOutputTypeCountDiscussion_board_reportsArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussion_board_moderatorsCountOutputType without action\n   */\n  export type Discussion_board_moderatorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussion_board_moderatorsCountOutputType\n     */\n    select?: Discussion_board_moderatorsCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussion_board_moderatorsCountOutputType without action\n   */\n  export type Discussion_board_moderatorsCountOutputTypeCountDiscussion_board_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_reportsWhereInput\n  }\n\n\n  /**\n   * Count Type Discussion_board_categoriesCountOutputType\n   */\n\n  export type Discussion_board_categoriesCountOutputType = {\n    discussion_board_topics: number\n  }\n\n  export type Discussion_board_categoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussion_board_topics?: boolean | Discussion_board_categoriesCountOutputTypeCountDiscussion_board_topicsArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussion_board_categoriesCountOutputType without action\n   */\n  export type Discussion_board_categoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussion_board_categoriesCountOutputType\n     */\n    select?: Discussion_board_categoriesCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussion_board_categoriesCountOutputType without action\n   */\n  export type Discussion_board_categoriesCountOutputTypeCountDiscussion_board_topicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_topicsWhereInput\n  }\n\n\n  /**\n   * Count Type Discussion_board_topicsCountOutputType\n   */\n\n  export type Discussion_board_topicsCountOutputType = {\n    discussion_board_comments: number\n    discussion_board_votes: number\n    discussion_board_notifications: number\n  }\n\n  export type Discussion_board_topicsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussion_board_comments?: boolean | Discussion_board_topicsCountOutputTypeCountDiscussion_board_commentsArgs\n    discussion_board_votes?: boolean | Discussion_board_topicsCountOutputTypeCountDiscussion_board_votesArgs\n    discussion_board_notifications?: boolean | Discussion_board_topicsCountOutputTypeCountDiscussion_board_notificationsArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussion_board_topicsCountOutputType without action\n   */\n  export type Discussion_board_topicsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussion_board_topicsCountOutputType\n     */\n    select?: Discussion_board_topicsCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussion_board_topicsCountOutputType without action\n   */\n  export type Discussion_board_topicsCountOutputTypeCountDiscussion_board_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_commentsWhereInput\n  }\n\n  /**\n   * Discussion_board_topicsCountOutputType without action\n   */\n  export type Discussion_board_topicsCountOutputTypeCountDiscussion_board_votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_votesWhereInput\n  }\n\n  /**\n   * Discussion_board_topicsCountOutputType without action\n   */\n  export type Discussion_board_topicsCountOutputTypeCountDiscussion_board_notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_notificationsWhereInput\n  }\n\n\n  /**\n   * Count Type Discussion_board_commentsCountOutputType\n   */\n\n  export type Discussion_board_commentsCountOutputType = {\n    recursive: number\n    discussion_board_votes: number\n    discussion_board_notifications: number\n  }\n\n  export type Discussion_board_commentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    recursive?: boolean | Discussion_board_commentsCountOutputTypeCountRecursiveArgs\n    discussion_board_votes?: boolean | Discussion_board_commentsCountOutputTypeCountDiscussion_board_votesArgs\n    discussion_board_notifications?: boolean | Discussion_board_commentsCountOutputTypeCountDiscussion_board_notificationsArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussion_board_commentsCountOutputType without action\n   */\n  export type Discussion_board_commentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussion_board_commentsCountOutputType\n     */\n    select?: Discussion_board_commentsCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussion_board_commentsCountOutputType without action\n   */\n  export type Discussion_board_commentsCountOutputTypeCountRecursiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_commentsWhereInput\n  }\n\n  /**\n   * Discussion_board_commentsCountOutputType without action\n   */\n  export type Discussion_board_commentsCountOutputTypeCountDiscussion_board_votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_votesWhereInput\n  }\n\n  /**\n   * Discussion_board_commentsCountOutputType without action\n   */\n  export type Discussion_board_commentsCountOutputTypeCountDiscussion_board_notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_notificationsWhereInput\n  }\n\n\n  /**\n   * Models\n   */\n\n  /**\n   * Model discussion_board_guest_users\n   */\n\n  export type AggregateDiscussion_board_guest_users = {\n    _count: Discussion_board_guest_usersCountAggregateOutputType | null\n    _min: Discussion_board_guest_usersMinAggregateOutputType | null\n    _max: Discussion_board_guest_usersMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_guest_usersMinAggregateOutputType = {\n    id: string | null\n    ip_address: string | null\n    user_agent: string | null\n    session_token: string | null\n    last_accessed_at: Date | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_guest_usersMaxAggregateOutputType = {\n    id: string | null\n    ip_address: string | null\n    user_agent: string | null\n    session_token: string | null\n    last_accessed_at: Date | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_guest_usersCountAggregateOutputType = {\n    id: number\n    ip_address: number\n    user_agent: number\n    session_token: number\n    last_accessed_at: number\n    created_at: number\n    updated_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_guest_usersMinAggregateInputType = {\n    id?: true\n    ip_address?: true\n    user_agent?: true\n    session_token?: true\n    last_accessed_at?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_guest_usersMaxAggregateInputType = {\n    id?: true\n    ip_address?: true\n    user_agent?: true\n    session_token?: true\n    last_accessed_at?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_guest_usersCountAggregateInputType = {\n    id?: true\n    ip_address?: true\n    user_agent?: true\n    session_token?: true\n    last_accessed_at?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_guest_usersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_guest_users to aggregate.\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_guest_users to fetch.\n     */\n    orderBy?: discussion_board_guest_usersOrderByWithRelationInput | discussion_board_guest_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_guest_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_guest_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_guest_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_guest_users\n    **/\n    _count?: true | Discussion_board_guest_usersCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_guest_usersMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_guest_usersMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_guest_usersAggregateType<T extends Discussion_board_guest_usersAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_guest_users]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_guest_users[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_guest_users[P]>\n  }\n\n\n\n\n  export type discussion_board_guest_usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_guest_usersWhereInput\n    orderBy?: discussion_board_guest_usersOrderByWithAggregationInput | discussion_board_guest_usersOrderByWithAggregationInput[]\n    by: Discussion_board_guest_usersScalarFieldEnum[] | Discussion_board_guest_usersScalarFieldEnum\n    having?: discussion_board_guest_usersScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_guest_usersCountAggregateInputType | true\n    _min?: Discussion_board_guest_usersMinAggregateInputType\n    _max?: Discussion_board_guest_usersMaxAggregateInputType\n  }\n\n  export type Discussion_board_guest_usersGroupByOutputType = {\n    id: string\n    ip_address: string\n    user_agent: string\n    session_token: string | null\n    last_accessed_at: Date\n    created_at: Date\n    updated_at: Date\n    deleted_at: Date | null\n    _count: Discussion_board_guest_usersCountAggregateOutputType | null\n    _min: Discussion_board_guest_usersMinAggregateOutputType | null\n    _max: Discussion_board_guest_usersMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_guest_usersGroupByPayload<T extends discussion_board_guest_usersGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_guest_usersGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_guest_usersGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_guest_usersGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_guest_usersGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_guest_usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    ip_address?: boolean\n    user_agent?: boolean\n    session_token?: boolean\n    last_accessed_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_guest_users\"]>\n\n  export type discussion_board_guest_usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    ip_address?: boolean\n    user_agent?: boolean\n    session_token?: boolean\n    last_accessed_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_guest_users\"]>\n\n  export type discussion_board_guest_usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    ip_address?: boolean\n    user_agent?: boolean\n    session_token?: boolean\n    last_accessed_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_guest_users\"]>\n\n  export type discussion_board_guest_usersSelectScalar = {\n    id?: boolean\n    ip_address?: boolean\n    user_agent?: boolean\n    session_token?: boolean\n    last_accessed_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussion_board_guest_usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"ip_address\" | \"user_agent\" | \"session_token\" | \"last_accessed_at\" | \"created_at\" | \"updated_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussion_board_guest_users\"]>\n\n  export type $discussion_board_guest_usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_guest_users\"\n    objects: {}\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * IP address of the guest user for anonymous session tracking and security\n       * monitoring.\n       */\n      ip_address: string\n      /**\n       * Browser user agent string for compatibility and analytics purposes.\n       */\n      user_agent: string\n      /**\n       * Temporary session identifier for tracking guest user interactions across\n       * page views.\n       */\n      session_token: string | null\n      /**\n       * Timestamp of the guest user's last activity on the platform.\n       */\n      last_accessed_at: Date\n      /**\n       * Timestamp when the guest user session was first recorded.\n       */\n      created_at: Date\n      /**\n       * Timestamp when the guest user session data was last updated.\n       */\n      updated_at: Date\n      /**\n       * Soft delete timestamp for guest user tracking, allowing data retention\n       * for analytics while marking inactive sessions.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussion_board_guest_users\"]>\n    composites: {}\n  }\n\n  type discussion_board_guest_usersGetPayload<S extends boolean | null | undefined | discussion_board_guest_usersDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_guest_usersPayload, S>\n\n  type discussion_board_guest_usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_guest_usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_guest_usersCountAggregateInputType | true\n    }\n\n  export interface discussion_board_guest_usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_guest_users'], meta: { name: 'discussion_board_guest_users' } }\n    /**\n     * Find zero or one Discussion_board_guest_users that matches the filter.\n     * @param {discussion_board_guest_usersFindUniqueArgs} args - Arguments to find a Discussion_board_guest_users\n     * @example\n     * // Get one Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_guest_usersFindUniqueArgs>(args: SelectSubset<T, discussion_board_guest_usersFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_guest_users that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_guest_usersFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_guest_users\n     * @example\n     * // Get one Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_guest_usersFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_guest_usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_guest_users that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_guest_usersFindFirstArgs} args - Arguments to find a Discussion_board_guest_users\n     * @example\n     * // Get one Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_guest_usersFindFirstArgs>(args?: SelectSubset<T, discussion_board_guest_usersFindFirstArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_guest_users that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_guest_usersFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_guest_users\n     * @example\n     * // Get one Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_guest_usersFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_guest_usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_guest_users that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_guest_usersFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findMany()\n     * \n     * // Get first 10 Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_guest_usersWithIdOnly = await prisma.discussion_board_guest_users.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_guest_usersFindManyArgs>(args?: SelectSubset<T, discussion_board_guest_usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_guest_users.\n     * @param {discussion_board_guest_usersCreateArgs} args - Arguments to create a Discussion_board_guest_users.\n     * @example\n     * // Create one Discussion_board_guest_users\n     * const Discussion_board_guest_users = await prisma.discussion_board_guest_users.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_guest_users\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_guest_usersCreateArgs>(args: SelectSubset<T, discussion_board_guest_usersCreateArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_guest_users.\n     * @param {discussion_board_guest_usersCreateManyArgs} args - Arguments to create many Discussion_board_guest_users.\n     * @example\n     * // Create many Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_guest_usersCreateManyArgs>(args?: SelectSubset<T, discussion_board_guest_usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_guest_users and returns the data saved in the database.\n     * @param {discussion_board_guest_usersCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_guest_users.\n     * @example\n     * // Create many Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_guest_users and only return the `id`\n     * const discussion_board_guest_usersWithIdOnly = await prisma.discussion_board_guest_users.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_guest_usersCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_guest_usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_guest_users.\n     * @param {discussion_board_guest_usersDeleteArgs} args - Arguments to delete one Discussion_board_guest_users.\n     * @example\n     * // Delete one Discussion_board_guest_users\n     * const Discussion_board_guest_users = await prisma.discussion_board_guest_users.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_guest_users\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_guest_usersDeleteArgs>(args: SelectSubset<T, discussion_board_guest_usersDeleteArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_guest_users.\n     * @param {discussion_board_guest_usersUpdateArgs} args - Arguments to update one Discussion_board_guest_users.\n     * @example\n     * // Update one Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_guest_usersUpdateArgs>(args: SelectSubset<T, discussion_board_guest_usersUpdateArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_guest_users.\n     * @param {discussion_board_guest_usersDeleteManyArgs} args - Arguments to filter Discussion_board_guest_users to delete.\n     * @example\n     * // Delete a few Discussion_board_guest_users\n     * const { count } = await prisma.discussion_board_guest_users.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_guest_usersDeleteManyArgs>(args?: SelectSubset<T, discussion_board_guest_usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_guest_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_guest_usersUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_guest_usersUpdateManyArgs>(args: SelectSubset<T, discussion_board_guest_usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_guest_users and returns the data updated in the database.\n     * @param {discussion_board_guest_usersUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_guest_users.\n     * @example\n     * // Update many Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_guest_users and only return the `id`\n     * const discussion_board_guest_usersWithIdOnly = await prisma.discussion_board_guest_users.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_guest_usersUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_guest_usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_guest_users.\n     * @param {discussion_board_guest_usersUpsertArgs} args - Arguments to update or create a Discussion_board_guest_users.\n     * @example\n     * // Update or create a Discussion_board_guest_users\n     * const discussion_board_guest_users = await prisma.discussion_board_guest_users.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_guest_users\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_guest_users we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_guest_usersUpsertArgs>(args: SelectSubset<T, discussion_board_guest_usersUpsertArgs<ExtArgs>>): Prisma__discussion_board_guest_usersClient<$Result.GetResult<Prisma.$discussion_board_guest_usersPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_guest_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_guest_usersCountArgs} args - Arguments to filter Discussion_board_guest_users to count.\n     * @example\n     * // Count the number of Discussion_board_guest_users\n     * const count = await prisma.discussion_board_guest_users.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_guest_users we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_guest_usersCountArgs>(\n      args?: Subset<T, discussion_board_guest_usersCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_guest_usersCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_guest_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_guest_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_guest_usersAggregateArgs>(args: Subset<T, Discussion_board_guest_usersAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_guest_usersAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_guest_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_guest_usersGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_guest_usersGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_guest_usersGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_guest_usersGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_guest_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_guest_usersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_guest_users model\n   */\n  readonly fields: discussion_board_guest_usersFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_guest_users.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_guest_usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_guest_users model\n   */\n  interface discussion_board_guest_usersFieldRefs {\n    readonly id: FieldRef<\"discussion_board_guest_users\", 'String'>\n    readonly ip_address: FieldRef<\"discussion_board_guest_users\", 'String'>\n    readonly user_agent: FieldRef<\"discussion_board_guest_users\", 'String'>\n    readonly session_token: FieldRef<\"discussion_board_guest_users\", 'String'>\n    readonly last_accessed_at: FieldRef<\"discussion_board_guest_users\", 'DateTime'>\n    readonly created_at: FieldRef<\"discussion_board_guest_users\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_guest_users\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussion_board_guest_users\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_guest_users findUnique\n   */\n  export type discussion_board_guest_usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_guest_users to fetch.\n     */\n    where: discussion_board_guest_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_guest_users findUniqueOrThrow\n   */\n  export type discussion_board_guest_usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_guest_users to fetch.\n     */\n    where: discussion_board_guest_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_guest_users findFirst\n   */\n  export type discussion_board_guest_usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_guest_users to fetch.\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_guest_users to fetch.\n     */\n    orderBy?: discussion_board_guest_usersOrderByWithRelationInput | discussion_board_guest_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_guest_users.\n     */\n    cursor?: discussion_board_guest_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_guest_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_guest_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_guest_users.\n     */\n    distinct?: Discussion_board_guest_usersScalarFieldEnum | Discussion_board_guest_usersScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_guest_users findFirstOrThrow\n   */\n  export type discussion_board_guest_usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_guest_users to fetch.\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_guest_users to fetch.\n     */\n    orderBy?: discussion_board_guest_usersOrderByWithRelationInput | discussion_board_guest_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_guest_users.\n     */\n    cursor?: discussion_board_guest_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_guest_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_guest_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_guest_users.\n     */\n    distinct?: Discussion_board_guest_usersScalarFieldEnum | Discussion_board_guest_usersScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_guest_users findMany\n   */\n  export type discussion_board_guest_usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_guest_users to fetch.\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_guest_users to fetch.\n     */\n    orderBy?: discussion_board_guest_usersOrderByWithRelationInput | discussion_board_guest_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_guest_users.\n     */\n    cursor?: discussion_board_guest_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_guest_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_guest_users.\n     */\n    skip?: number\n    distinct?: Discussion_board_guest_usersScalarFieldEnum | Discussion_board_guest_usersScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_guest_users create\n   */\n  export type discussion_board_guest_usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_guest_users.\n     */\n    data: XOR<discussion_board_guest_usersCreateInput, discussion_board_guest_usersUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_guest_users createMany\n   */\n  export type discussion_board_guest_usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_guest_users.\n     */\n    data: discussion_board_guest_usersCreateManyInput | discussion_board_guest_usersCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_guest_users createManyAndReturn\n   */\n  export type discussion_board_guest_usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_guest_users.\n     */\n    data: discussion_board_guest_usersCreateManyInput | discussion_board_guest_usersCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_guest_users update\n   */\n  export type discussion_board_guest_usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_guest_users.\n     */\n    data: XOR<discussion_board_guest_usersUpdateInput, discussion_board_guest_usersUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_guest_users to update.\n     */\n    where: discussion_board_guest_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_guest_users updateMany\n   */\n  export type discussion_board_guest_usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_guest_users.\n     */\n    data: XOR<discussion_board_guest_usersUpdateManyMutationInput, discussion_board_guest_usersUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_guest_users to update\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * Limit how many discussion_board_guest_users to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_guest_users updateManyAndReturn\n   */\n  export type discussion_board_guest_usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_guest_users.\n     */\n    data: XOR<discussion_board_guest_usersUpdateManyMutationInput, discussion_board_guest_usersUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_guest_users to update\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * Limit how many discussion_board_guest_users to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_guest_users upsert\n   */\n  export type discussion_board_guest_usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_guest_users to update in case it exists.\n     */\n    where: discussion_board_guest_usersWhereUniqueInput\n    /**\n     * In case the discussion_board_guest_users found by the `where` argument doesn't exist, create a new discussion_board_guest_users with this data.\n     */\n    create: XOR<discussion_board_guest_usersCreateInput, discussion_board_guest_usersUncheckedCreateInput>\n    /**\n     * In case the discussion_board_guest_users was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_guest_usersUpdateInput, discussion_board_guest_usersUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_guest_users delete\n   */\n  export type discussion_board_guest_usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n    /**\n     * Filter which discussion_board_guest_users to delete.\n     */\n    where: discussion_board_guest_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_guest_users deleteMany\n   */\n  export type discussion_board_guest_usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_guest_users to delete\n     */\n    where?: discussion_board_guest_usersWhereInput\n    /**\n     * Limit how many discussion_board_guest_users to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_guest_users without action\n   */\n  export type discussion_board_guest_usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_guest_users\n     */\n    select?: discussion_board_guest_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_guest_users\n     */\n    omit?: discussion_board_guest_usersOmit<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_registered_users\n   */\n\n  export type AggregateDiscussion_board_registered_users = {\n    _count: Discussion_board_registered_usersCountAggregateOutputType | null\n    _min: Discussion_board_registered_usersMinAggregateOutputType | null\n    _max: Discussion_board_registered_usersMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_registered_usersMinAggregateOutputType = {\n    id: string | null\n    email: string | null\n    password_hash: string | null\n    display_name: string | null\n    email_verified: boolean | null\n    last_login_at: Date | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_registered_usersMaxAggregateOutputType = {\n    id: string | null\n    email: string | null\n    password_hash: string | null\n    display_name: string | null\n    email_verified: boolean | null\n    last_login_at: Date | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_registered_usersCountAggregateOutputType = {\n    id: number\n    email: number\n    password_hash: number\n    display_name: number\n    email_verified: number\n    last_login_at: number\n    created_at: number\n    updated_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_registered_usersMinAggregateInputType = {\n    id?: true\n    email?: true\n    password_hash?: true\n    display_name?: true\n    email_verified?: true\n    last_login_at?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_registered_usersMaxAggregateInputType = {\n    id?: true\n    email?: true\n    password_hash?: true\n    display_name?: true\n    email_verified?: true\n    last_login_at?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_registered_usersCountAggregateInputType = {\n    id?: true\n    email?: true\n    password_hash?: true\n    display_name?: true\n    email_verified?: true\n    last_login_at?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_registered_usersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_registered_users to aggregate.\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_registered_users to fetch.\n     */\n    orderBy?: discussion_board_registered_usersOrderByWithRelationInput | discussion_board_registered_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_registered_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_registered_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_registered_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_registered_users\n    **/\n    _count?: true | Discussion_board_registered_usersCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_registered_usersMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_registered_usersMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_registered_usersAggregateType<T extends Discussion_board_registered_usersAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_registered_users]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_registered_users[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_registered_users[P]>\n  }\n\n\n\n\n  export type discussion_board_registered_usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_registered_usersWhereInput\n    orderBy?: discussion_board_registered_usersOrderByWithAggregationInput | discussion_board_registered_usersOrderByWithAggregationInput[]\n    by: Discussion_board_registered_usersScalarFieldEnum[] | Discussion_board_registered_usersScalarFieldEnum\n    having?: discussion_board_registered_usersScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_registered_usersCountAggregateInputType | true\n    _min?: Discussion_board_registered_usersMinAggregateInputType\n    _max?: Discussion_board_registered_usersMaxAggregateInputType\n  }\n\n  export type Discussion_board_registered_usersGroupByOutputType = {\n    id: string\n    email: string\n    password_hash: string\n    display_name: string | null\n    email_verified: boolean\n    last_login_at: Date | null\n    created_at: Date\n    updated_at: Date\n    deleted_at: Date | null\n    _count: Discussion_board_registered_usersCountAggregateOutputType | null\n    _min: Discussion_board_registered_usersMinAggregateOutputType | null\n    _max: Discussion_board_registered_usersMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_registered_usersGroupByPayload<T extends discussion_board_registered_usersGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_registered_usersGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_registered_usersGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_registered_usersGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_registered_usersGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_registered_usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    display_name?: boolean\n    email_verified?: boolean\n    last_login_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    discussion_board_moderators?: boolean | discussion_board_registered_users$discussion_board_moderatorsArgs<ExtArgs>\n    discussion_board_topics?: boolean | discussion_board_registered_users$discussion_board_topicsArgs<ExtArgs>\n    discussion_board_comments?: boolean | discussion_board_registered_users$discussion_board_commentsArgs<ExtArgs>\n    discussion_board_votes?: boolean | discussion_board_registered_users$discussion_board_votesArgs<ExtArgs>\n    discussion_board_notifications?: boolean | discussion_board_registered_users$discussion_board_notificationsArgs<ExtArgs>\n    discussion_board_reports?: boolean | discussion_board_registered_users$discussion_board_reportsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_registered_usersCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_registered_users\"]>\n\n  export type discussion_board_registered_usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    display_name?: boolean\n    email_verified?: boolean\n    last_login_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_registered_users\"]>\n\n  export type discussion_board_registered_usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    display_name?: boolean\n    email_verified?: boolean\n    last_login_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_registered_users\"]>\n\n  export type discussion_board_registered_usersSelectScalar = {\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    display_name?: boolean\n    email_verified?: boolean\n    last_login_at?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussion_board_registered_usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"email\" | \"password_hash\" | \"display_name\" | \"email_verified\" | \"last_login_at\" | \"created_at\" | \"updated_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussion_board_registered_users\"]>\n  export type discussion_board_registered_usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussion_board_moderators?: boolean | discussion_board_registered_users$discussion_board_moderatorsArgs<ExtArgs>\n    discussion_board_topics?: boolean | discussion_board_registered_users$discussion_board_topicsArgs<ExtArgs>\n    discussion_board_comments?: boolean | discussion_board_registered_users$discussion_board_commentsArgs<ExtArgs>\n    discussion_board_votes?: boolean | discussion_board_registered_users$discussion_board_votesArgs<ExtArgs>\n    discussion_board_notifications?: boolean | discussion_board_registered_users$discussion_board_notificationsArgs<ExtArgs>\n    discussion_board_reports?: boolean | discussion_board_registered_users$discussion_board_reportsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_registered_usersCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_registered_usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n  export type discussion_board_registered_usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n\n  export type $discussion_board_registered_usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_registered_users\"\n    objects: {\n      discussion_board_moderators: Prisma.$discussion_board_moderatorsPayload<ExtArgs> | null\n      discussion_board_topics: Prisma.$discussion_board_topicsPayload<ExtArgs>[]\n      discussion_board_comments: Prisma.$discussion_board_commentsPayload<ExtArgs>[]\n      discussion_board_votes: Prisma.$discussion_board_votesPayload<ExtArgs>[]\n      discussion_board_notifications: Prisma.$discussion_board_notificationsPayload<ExtArgs>[]\n      discussion_board_reports: Prisma.$discussion_board_reportsPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * User's email address for authentication and notifications, must be unique\n       * across the platform.\n       */\n      email: string\n      /**\n       * Hashed password for secure user authentication, stored as encrypted\n       * string.\n       */\n      password_hash: string\n      /**\n       * Optional display name shown in discussions and profiles, can be changed\n       * by the user.\n       */\n      display_name: string | null\n      /**\n       * Indicates whether the user's email address has been verified through\n       * confirmation process.\n       */\n      email_verified: boolean\n      /**\n       * Timestamp of the user's most recent successful login.\n       */\n      last_login_at: Date | null\n      /**\n       * Timestamp when the user account was created.\n       */\n      created_at: Date\n      /**\n       * Timestamp when the user account information was last updated.\n       */\n      updated_at: Date\n      /**\n       * Soft delete timestamp for user accounts, preserving content attribution\n       * while removing access.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussion_board_registered_users\"]>\n    composites: {}\n  }\n\n  type discussion_board_registered_usersGetPayload<S extends boolean | null | undefined | discussion_board_registered_usersDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_registered_usersPayload, S>\n\n  type discussion_board_registered_usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_registered_usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_registered_usersCountAggregateInputType | true\n    }\n\n  export interface discussion_board_registered_usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_registered_users'], meta: { name: 'discussion_board_registered_users' } }\n    /**\n     * Find zero or one Discussion_board_registered_users that matches the filter.\n     * @param {discussion_board_registered_usersFindUniqueArgs} args - Arguments to find a Discussion_board_registered_users\n     * @example\n     * // Get one Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_registered_usersFindUniqueArgs>(args: SelectSubset<T, discussion_board_registered_usersFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_registered_users that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_registered_usersFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_registered_users\n     * @example\n     * // Get one Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_registered_usersFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_registered_usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_registered_users that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_registered_usersFindFirstArgs} args - Arguments to find a Discussion_board_registered_users\n     * @example\n     * // Get one Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_registered_usersFindFirstArgs>(args?: SelectSubset<T, discussion_board_registered_usersFindFirstArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_registered_users that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_registered_usersFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_registered_users\n     * @example\n     * // Get one Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_registered_usersFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_registered_usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_registered_users that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_registered_usersFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findMany()\n     * \n     * // Get first 10 Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_registered_usersWithIdOnly = await prisma.discussion_board_registered_users.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_registered_usersFindManyArgs>(args?: SelectSubset<T, discussion_board_registered_usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_registered_users.\n     * @param {discussion_board_registered_usersCreateArgs} args - Arguments to create a Discussion_board_registered_users.\n     * @example\n     * // Create one Discussion_board_registered_users\n     * const Discussion_board_registered_users = await prisma.discussion_board_registered_users.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_registered_users\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_registered_usersCreateArgs>(args: SelectSubset<T, discussion_board_registered_usersCreateArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_registered_users.\n     * @param {discussion_board_registered_usersCreateManyArgs} args - Arguments to create many Discussion_board_registered_users.\n     * @example\n     * // Create many Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_registered_usersCreateManyArgs>(args?: SelectSubset<T, discussion_board_registered_usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_registered_users and returns the data saved in the database.\n     * @param {discussion_board_registered_usersCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_registered_users.\n     * @example\n     * // Create many Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_registered_users and only return the `id`\n     * const discussion_board_registered_usersWithIdOnly = await prisma.discussion_board_registered_users.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_registered_usersCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_registered_usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_registered_users.\n     * @param {discussion_board_registered_usersDeleteArgs} args - Arguments to delete one Discussion_board_registered_users.\n     * @example\n     * // Delete one Discussion_board_registered_users\n     * const Discussion_board_registered_users = await prisma.discussion_board_registered_users.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_registered_users\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_registered_usersDeleteArgs>(args: SelectSubset<T, discussion_board_registered_usersDeleteArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_registered_users.\n     * @param {discussion_board_registered_usersUpdateArgs} args - Arguments to update one Discussion_board_registered_users.\n     * @example\n     * // Update one Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_registered_usersUpdateArgs>(args: SelectSubset<T, discussion_board_registered_usersUpdateArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_registered_users.\n     * @param {discussion_board_registered_usersDeleteManyArgs} args - Arguments to filter Discussion_board_registered_users to delete.\n     * @example\n     * // Delete a few Discussion_board_registered_users\n     * const { count } = await prisma.discussion_board_registered_users.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_registered_usersDeleteManyArgs>(args?: SelectSubset<T, discussion_board_registered_usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_registered_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_registered_usersUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_registered_usersUpdateManyArgs>(args: SelectSubset<T, discussion_board_registered_usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_registered_users and returns the data updated in the database.\n     * @param {discussion_board_registered_usersUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_registered_users.\n     * @example\n     * // Update many Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_registered_users and only return the `id`\n     * const discussion_board_registered_usersWithIdOnly = await prisma.discussion_board_registered_users.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_registered_usersUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_registered_usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_registered_users.\n     * @param {discussion_board_registered_usersUpsertArgs} args - Arguments to update or create a Discussion_board_registered_users.\n     * @example\n     * // Update or create a Discussion_board_registered_users\n     * const discussion_board_registered_users = await prisma.discussion_board_registered_users.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_registered_users\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_registered_users we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_registered_usersUpsertArgs>(args: SelectSubset<T, discussion_board_registered_usersUpsertArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_registered_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_registered_usersCountArgs} args - Arguments to filter Discussion_board_registered_users to count.\n     * @example\n     * // Count the number of Discussion_board_registered_users\n     * const count = await prisma.discussion_board_registered_users.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_registered_users we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_registered_usersCountArgs>(\n      args?: Subset<T, discussion_board_registered_usersCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_registered_usersCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_registered_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_registered_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_registered_usersAggregateArgs>(args: Subset<T, Discussion_board_registered_usersAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_registered_usersAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_registered_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_registered_usersGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_registered_usersGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_registered_usersGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_registered_usersGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_registered_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_registered_usersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_registered_users model\n   */\n  readonly fields: discussion_board_registered_usersFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_registered_users.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_registered_usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    discussion_board_moderators<T extends discussion_board_registered_users$discussion_board_moderatorsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_users$discussion_board_moderatorsArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussion_board_topics<T extends discussion_board_registered_users$discussion_board_topicsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_users$discussion_board_topicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_comments<T extends discussion_board_registered_users$discussion_board_commentsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_users$discussion_board_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_votes<T extends discussion_board_registered_users$discussion_board_votesArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_users$discussion_board_votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_notifications<T extends discussion_board_registered_users$discussion_board_notificationsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_users$discussion_board_notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_reports<T extends discussion_board_registered_users$discussion_board_reportsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_users$discussion_board_reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_registered_users model\n   */\n  interface discussion_board_registered_usersFieldRefs {\n    readonly id: FieldRef<\"discussion_board_registered_users\", 'String'>\n    readonly email: FieldRef<\"discussion_board_registered_users\", 'String'>\n    readonly password_hash: FieldRef<\"discussion_board_registered_users\", 'String'>\n    readonly display_name: FieldRef<\"discussion_board_registered_users\", 'String'>\n    readonly email_verified: FieldRef<\"discussion_board_registered_users\", 'Boolean'>\n    readonly last_login_at: FieldRef<\"discussion_board_registered_users\", 'DateTime'>\n    readonly created_at: FieldRef<\"discussion_board_registered_users\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_registered_users\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussion_board_registered_users\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_registered_users findUnique\n   */\n  export type discussion_board_registered_usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_registered_users to fetch.\n     */\n    where: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_registered_users findUniqueOrThrow\n   */\n  export type discussion_board_registered_usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_registered_users to fetch.\n     */\n    where: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_registered_users findFirst\n   */\n  export type discussion_board_registered_usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_registered_users to fetch.\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_registered_users to fetch.\n     */\n    orderBy?: discussion_board_registered_usersOrderByWithRelationInput | discussion_board_registered_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_registered_users.\n     */\n    cursor?: discussion_board_registered_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_registered_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_registered_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_registered_users.\n     */\n    distinct?: Discussion_board_registered_usersScalarFieldEnum | Discussion_board_registered_usersScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users findFirstOrThrow\n   */\n  export type discussion_board_registered_usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_registered_users to fetch.\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_registered_users to fetch.\n     */\n    orderBy?: discussion_board_registered_usersOrderByWithRelationInput | discussion_board_registered_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_registered_users.\n     */\n    cursor?: discussion_board_registered_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_registered_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_registered_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_registered_users.\n     */\n    distinct?: Discussion_board_registered_usersScalarFieldEnum | Discussion_board_registered_usersScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users findMany\n   */\n  export type discussion_board_registered_usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_registered_users to fetch.\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_registered_users to fetch.\n     */\n    orderBy?: discussion_board_registered_usersOrderByWithRelationInput | discussion_board_registered_usersOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_registered_users.\n     */\n    cursor?: discussion_board_registered_usersWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_registered_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_registered_users.\n     */\n    skip?: number\n    distinct?: Discussion_board_registered_usersScalarFieldEnum | Discussion_board_registered_usersScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users create\n   */\n  export type discussion_board_registered_usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_registered_users.\n     */\n    data: XOR<discussion_board_registered_usersCreateInput, discussion_board_registered_usersUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_registered_users createMany\n   */\n  export type discussion_board_registered_usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_registered_users.\n     */\n    data: discussion_board_registered_usersCreateManyInput | discussion_board_registered_usersCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_registered_users createManyAndReturn\n   */\n  export type discussion_board_registered_usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_registered_users.\n     */\n    data: discussion_board_registered_usersCreateManyInput | discussion_board_registered_usersCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_registered_users update\n   */\n  export type discussion_board_registered_usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_registered_users.\n     */\n    data: XOR<discussion_board_registered_usersUpdateInput, discussion_board_registered_usersUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_registered_users to update.\n     */\n    where: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_registered_users updateMany\n   */\n  export type discussion_board_registered_usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_registered_users.\n     */\n    data: XOR<discussion_board_registered_usersUpdateManyMutationInput, discussion_board_registered_usersUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_registered_users to update\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * Limit how many discussion_board_registered_users to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_registered_users updateManyAndReturn\n   */\n  export type discussion_board_registered_usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_registered_users.\n     */\n    data: XOR<discussion_board_registered_usersUpdateManyMutationInput, discussion_board_registered_usersUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_registered_users to update\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * Limit how many discussion_board_registered_users to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_registered_users upsert\n   */\n  export type discussion_board_registered_usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_registered_users to update in case it exists.\n     */\n    where: discussion_board_registered_usersWhereUniqueInput\n    /**\n     * In case the discussion_board_registered_users found by the `where` argument doesn't exist, create a new discussion_board_registered_users with this data.\n     */\n    create: XOR<discussion_board_registered_usersCreateInput, discussion_board_registered_usersUncheckedCreateInput>\n    /**\n     * In case the discussion_board_registered_users was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_registered_usersUpdateInput, discussion_board_registered_usersUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_registered_users delete\n   */\n  export type discussion_board_registered_usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_registered_users to delete.\n     */\n    where: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_registered_users deleteMany\n   */\n  export type discussion_board_registered_usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_registered_users to delete\n     */\n    where?: discussion_board_registered_usersWhereInput\n    /**\n     * Limit how many discussion_board_registered_users to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_registered_users.discussion_board_moderators\n   */\n  export type discussion_board_registered_users$discussion_board_moderatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    where?: discussion_board_moderatorsWhereInput\n  }\n\n  /**\n   * discussion_board_registered_users.discussion_board_topics\n   */\n  export type discussion_board_registered_users$discussion_board_topicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    where?: discussion_board_topicsWhereInput\n    orderBy?: discussion_board_topicsOrderByWithRelationInput | discussion_board_topicsOrderByWithRelationInput[]\n    cursor?: discussion_board_topicsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_topicsScalarFieldEnum | Discussion_board_topicsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users.discussion_board_comments\n   */\n  export type discussion_board_registered_users$discussion_board_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    where?: discussion_board_commentsWhereInput\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    cursor?: discussion_board_commentsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_commentsScalarFieldEnum | Discussion_board_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users.discussion_board_votes\n   */\n  export type discussion_board_registered_users$discussion_board_votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    where?: discussion_board_votesWhereInput\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    cursor?: discussion_board_votesWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_votesScalarFieldEnum | Discussion_board_votesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users.discussion_board_notifications\n   */\n  export type discussion_board_registered_users$discussion_board_notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    where?: discussion_board_notificationsWhereInput\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_notificationsScalarFieldEnum | Discussion_board_notificationsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users.discussion_board_reports\n   */\n  export type discussion_board_registered_users$discussion_board_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    where?: discussion_board_reportsWhereInput\n    orderBy?: discussion_board_reportsOrderByWithRelationInput | discussion_board_reportsOrderByWithRelationInput[]\n    cursor?: discussion_board_reportsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_reportsScalarFieldEnum | Discussion_board_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_registered_users without action\n   */\n  export type discussion_board_registered_usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_registered_users\n     */\n    select?: discussion_board_registered_usersSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_registered_users\n     */\n    omit?: discussion_board_registered_usersOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_registered_usersInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_moderators\n   */\n\n  export type AggregateDiscussion_board_moderators = {\n    _count: Discussion_board_moderatorsCountAggregateOutputType | null\n    _min: Discussion_board_moderatorsMinAggregateOutputType | null\n    _max: Discussion_board_moderatorsMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_moderatorsMinAggregateOutputType = {\n    id: string | null\n    discussion_board_registered_user_id: string | null\n    promoted_at: Date | null\n    is_active_moderator: boolean | null\n    moderation_notes: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_moderatorsMaxAggregateOutputType = {\n    id: string | null\n    discussion_board_registered_user_id: string | null\n    promoted_at: Date | null\n    is_active_moderator: boolean | null\n    moderation_notes: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_moderatorsCountAggregateOutputType = {\n    id: number\n    discussion_board_registered_user_id: number\n    promoted_at: number\n    is_active_moderator: number\n    moderation_notes: number\n    created_at: number\n    updated_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_moderatorsMinAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    promoted_at?: true\n    is_active_moderator?: true\n    moderation_notes?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_moderatorsMaxAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    promoted_at?: true\n    is_active_moderator?: true\n    moderation_notes?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_moderatorsCountAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    promoted_at?: true\n    is_active_moderator?: true\n    moderation_notes?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_moderatorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_moderators to aggregate.\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_moderators to fetch.\n     */\n    orderBy?: discussion_board_moderatorsOrderByWithRelationInput | discussion_board_moderatorsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_moderatorsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_moderators.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_moderators\n    **/\n    _count?: true | Discussion_board_moderatorsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_moderatorsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_moderatorsMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_moderatorsAggregateType<T extends Discussion_board_moderatorsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_moderators]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_moderators[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_moderators[P]>\n  }\n\n\n\n\n  export type discussion_board_moderatorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_moderatorsWhereInput\n    orderBy?: discussion_board_moderatorsOrderByWithAggregationInput | discussion_board_moderatorsOrderByWithAggregationInput[]\n    by: Discussion_board_moderatorsScalarFieldEnum[] | Discussion_board_moderatorsScalarFieldEnum\n    having?: discussion_board_moderatorsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_moderatorsCountAggregateInputType | true\n    _min?: Discussion_board_moderatorsMinAggregateInputType\n    _max?: Discussion_board_moderatorsMaxAggregateInputType\n  }\n\n  export type Discussion_board_moderatorsGroupByOutputType = {\n    id: string\n    discussion_board_registered_user_id: string\n    promoted_at: Date\n    is_active_moderator: boolean\n    moderation_notes: string | null\n    created_at: Date\n    updated_at: Date\n    deleted_at: Date | null\n    _count: Discussion_board_moderatorsCountAggregateOutputType | null\n    _min: Discussion_board_moderatorsMinAggregateOutputType | null\n    _max: Discussion_board_moderatorsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_moderatorsGroupByPayload<T extends discussion_board_moderatorsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_moderatorsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_moderatorsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_moderatorsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_moderatorsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_moderatorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    promoted_at?: boolean\n    is_active_moderator?: boolean\n    moderation_notes?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    discussion_board_reports?: boolean | discussion_board_moderators$discussion_board_reportsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_moderatorsCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_moderators\"]>\n\n  export type discussion_board_moderatorsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    promoted_at?: boolean\n    is_active_moderator?: boolean\n    moderation_notes?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_moderators\"]>\n\n  export type discussion_board_moderatorsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    promoted_at?: boolean\n    is_active_moderator?: boolean\n    moderation_notes?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_moderators\"]>\n\n  export type discussion_board_moderatorsSelectScalar = {\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    promoted_at?: boolean\n    is_active_moderator?: boolean\n    moderation_notes?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussion_board_moderatorsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"discussion_board_registered_user_id\" | \"promoted_at\" | \"is_active_moderator\" | \"moderation_notes\" | \"created_at\" | \"updated_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussion_board_moderators\"]>\n  export type discussion_board_moderatorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    discussion_board_reports?: boolean | discussion_board_moderators$discussion_board_reportsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_moderatorsCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_moderatorsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_moderatorsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }\n\n  export type $discussion_board_moderatorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_moderators\"\n    objects: {\n      user: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n      discussion_board_reports: Prisma.$discussion_board_reportsPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Reference to the registered user account this moderator inherits from.\n       * {@link discussion_board_registered_users.id}.\n       */\n      discussion_board_registered_user_id: string\n      /**\n       * Timestamp when the user was promoted to moderator role.\n       */\n      promoted_at: Date\n      /**\n       * Indicates whether the moderator account is currently active with full\n       * permissions.\n       */\n      is_active_moderator: boolean\n      /**\n       * Internal notes for moderator management and performance tracking.\n       */\n      moderation_notes: string | null\n      /**\n       * Timestamp when the moderator account was created.\n       */\n      created_at: Date\n      /**\n       * Timestamp when the moderator account information was last updated.\n       */\n      updated_at: Date\n      /**\n       * Soft delete timestamp for moderator accounts, maintaining audit trail\n       * while removing active permissions.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussion_board_moderators\"]>\n    composites: {}\n  }\n\n  type discussion_board_moderatorsGetPayload<S extends boolean | null | undefined | discussion_board_moderatorsDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_moderatorsPayload, S>\n\n  type discussion_board_moderatorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_moderatorsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_moderatorsCountAggregateInputType | true\n    }\n\n  export interface discussion_board_moderatorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_moderators'], meta: { name: 'discussion_board_moderators' } }\n    /**\n     * Find zero or one Discussion_board_moderators that matches the filter.\n     * @param {discussion_board_moderatorsFindUniqueArgs} args - Arguments to find a Discussion_board_moderators\n     * @example\n     * // Get one Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_moderatorsFindUniqueArgs>(args: SelectSubset<T, discussion_board_moderatorsFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_moderators that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_moderatorsFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_moderators\n     * @example\n     * // Get one Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_moderatorsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_moderatorsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_moderators that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_moderatorsFindFirstArgs} args - Arguments to find a Discussion_board_moderators\n     * @example\n     * // Get one Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_moderatorsFindFirstArgs>(args?: SelectSubset<T, discussion_board_moderatorsFindFirstArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_moderators that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_moderatorsFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_moderators\n     * @example\n     * // Get one Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_moderatorsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_moderatorsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_moderators that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_moderatorsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.findMany()\n     * \n     * // Get first 10 Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_moderatorsWithIdOnly = await prisma.discussion_board_moderators.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_moderatorsFindManyArgs>(args?: SelectSubset<T, discussion_board_moderatorsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_moderators.\n     * @param {discussion_board_moderatorsCreateArgs} args - Arguments to create a Discussion_board_moderators.\n     * @example\n     * // Create one Discussion_board_moderators\n     * const Discussion_board_moderators = await prisma.discussion_board_moderators.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_moderators\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_moderatorsCreateArgs>(args: SelectSubset<T, discussion_board_moderatorsCreateArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_moderators.\n     * @param {discussion_board_moderatorsCreateManyArgs} args - Arguments to create many Discussion_board_moderators.\n     * @example\n     * // Create many Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_moderatorsCreateManyArgs>(args?: SelectSubset<T, discussion_board_moderatorsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_moderators and returns the data saved in the database.\n     * @param {discussion_board_moderatorsCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_moderators.\n     * @example\n     * // Create many Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_moderators and only return the `id`\n     * const discussion_board_moderatorsWithIdOnly = await prisma.discussion_board_moderators.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_moderatorsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_moderatorsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_moderators.\n     * @param {discussion_board_moderatorsDeleteArgs} args - Arguments to delete one Discussion_board_moderators.\n     * @example\n     * // Delete one Discussion_board_moderators\n     * const Discussion_board_moderators = await prisma.discussion_board_moderators.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_moderators\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_moderatorsDeleteArgs>(args: SelectSubset<T, discussion_board_moderatorsDeleteArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_moderators.\n     * @param {discussion_board_moderatorsUpdateArgs} args - Arguments to update one Discussion_board_moderators.\n     * @example\n     * // Update one Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_moderatorsUpdateArgs>(args: SelectSubset<T, discussion_board_moderatorsUpdateArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_moderators.\n     * @param {discussion_board_moderatorsDeleteManyArgs} args - Arguments to filter Discussion_board_moderators to delete.\n     * @example\n     * // Delete a few Discussion_board_moderators\n     * const { count } = await prisma.discussion_board_moderators.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_moderatorsDeleteManyArgs>(args?: SelectSubset<T, discussion_board_moderatorsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_moderators.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_moderatorsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_moderatorsUpdateManyArgs>(args: SelectSubset<T, discussion_board_moderatorsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_moderators and returns the data updated in the database.\n     * @param {discussion_board_moderatorsUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_moderators.\n     * @example\n     * // Update many Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_moderators and only return the `id`\n     * const discussion_board_moderatorsWithIdOnly = await prisma.discussion_board_moderators.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_moderatorsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_moderatorsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_moderators.\n     * @param {discussion_board_moderatorsUpsertArgs} args - Arguments to update or create a Discussion_board_moderators.\n     * @example\n     * // Update or create a Discussion_board_moderators\n     * const discussion_board_moderators = await prisma.discussion_board_moderators.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_moderators\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_moderators we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_moderatorsUpsertArgs>(args: SelectSubset<T, discussion_board_moderatorsUpsertArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_moderators.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_moderatorsCountArgs} args - Arguments to filter Discussion_board_moderators to count.\n     * @example\n     * // Count the number of Discussion_board_moderators\n     * const count = await prisma.discussion_board_moderators.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_moderators we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_moderatorsCountArgs>(\n      args?: Subset<T, discussion_board_moderatorsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_moderatorsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_moderators.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_moderatorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_moderatorsAggregateArgs>(args: Subset<T, Discussion_board_moderatorsAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_moderatorsAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_moderators.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_moderatorsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_moderatorsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_moderatorsGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_moderatorsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_moderatorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_moderatorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_moderators model\n   */\n  readonly fields: discussion_board_moderatorsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_moderators.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_moderatorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user<T extends discussion_board_registered_usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_usersDefaultArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    discussion_board_reports<T extends discussion_board_moderators$discussion_board_reportsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_moderators$discussion_board_reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_moderators model\n   */\n  interface discussion_board_moderatorsFieldRefs {\n    readonly id: FieldRef<\"discussion_board_moderators\", 'String'>\n    readonly discussion_board_registered_user_id: FieldRef<\"discussion_board_moderators\", 'String'>\n    readonly promoted_at: FieldRef<\"discussion_board_moderators\", 'DateTime'>\n    readonly is_active_moderator: FieldRef<\"discussion_board_moderators\", 'Boolean'>\n    readonly moderation_notes: FieldRef<\"discussion_board_moderators\", 'String'>\n    readonly created_at: FieldRef<\"discussion_board_moderators\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_moderators\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussion_board_moderators\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_moderators findUnique\n   */\n  export type discussion_board_moderatorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_moderators to fetch.\n     */\n    where: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_moderators findUniqueOrThrow\n   */\n  export type discussion_board_moderatorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_moderators to fetch.\n     */\n    where: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_moderators findFirst\n   */\n  export type discussion_board_moderatorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_moderators to fetch.\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_moderators to fetch.\n     */\n    orderBy?: discussion_board_moderatorsOrderByWithRelationInput | discussion_board_moderatorsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_moderators.\n     */\n    cursor?: discussion_board_moderatorsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_moderators.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_moderators.\n     */\n    distinct?: Discussion_board_moderatorsScalarFieldEnum | Discussion_board_moderatorsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_moderators findFirstOrThrow\n   */\n  export type discussion_board_moderatorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_moderators to fetch.\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_moderators to fetch.\n     */\n    orderBy?: discussion_board_moderatorsOrderByWithRelationInput | discussion_board_moderatorsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_moderators.\n     */\n    cursor?: discussion_board_moderatorsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_moderators.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_moderators.\n     */\n    distinct?: Discussion_board_moderatorsScalarFieldEnum | Discussion_board_moderatorsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_moderators findMany\n   */\n  export type discussion_board_moderatorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_moderators to fetch.\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_moderators to fetch.\n     */\n    orderBy?: discussion_board_moderatorsOrderByWithRelationInput | discussion_board_moderatorsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_moderators.\n     */\n    cursor?: discussion_board_moderatorsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_moderators.\n     */\n    skip?: number\n    distinct?: Discussion_board_moderatorsScalarFieldEnum | Discussion_board_moderatorsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_moderators create\n   */\n  export type discussion_board_moderatorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_moderators.\n     */\n    data: XOR<discussion_board_moderatorsCreateInput, discussion_board_moderatorsUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_moderators createMany\n   */\n  export type discussion_board_moderatorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_moderators.\n     */\n    data: discussion_board_moderatorsCreateManyInput | discussion_board_moderatorsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_moderators createManyAndReturn\n   */\n  export type discussion_board_moderatorsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_moderators.\n     */\n    data: discussion_board_moderatorsCreateManyInput | discussion_board_moderatorsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_moderators update\n   */\n  export type discussion_board_moderatorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_moderators.\n     */\n    data: XOR<discussion_board_moderatorsUpdateInput, discussion_board_moderatorsUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_moderators to update.\n     */\n    where: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_moderators updateMany\n   */\n  export type discussion_board_moderatorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_moderators.\n     */\n    data: XOR<discussion_board_moderatorsUpdateManyMutationInput, discussion_board_moderatorsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_moderators to update\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * Limit how many discussion_board_moderators to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_moderators updateManyAndReturn\n   */\n  export type discussion_board_moderatorsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_moderators.\n     */\n    data: XOR<discussion_board_moderatorsUpdateManyMutationInput, discussion_board_moderatorsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_moderators to update\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * Limit how many discussion_board_moderators to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_moderators upsert\n   */\n  export type discussion_board_moderatorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_moderators to update in case it exists.\n     */\n    where: discussion_board_moderatorsWhereUniqueInput\n    /**\n     * In case the discussion_board_moderators found by the `where` argument doesn't exist, create a new discussion_board_moderators with this data.\n     */\n    create: XOR<discussion_board_moderatorsCreateInput, discussion_board_moderatorsUncheckedCreateInput>\n    /**\n     * In case the discussion_board_moderators was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_moderatorsUpdateInput, discussion_board_moderatorsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_moderators delete\n   */\n  export type discussion_board_moderatorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_moderators to delete.\n     */\n    where: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_moderators deleteMany\n   */\n  export type discussion_board_moderatorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_moderators to delete\n     */\n    where?: discussion_board_moderatorsWhereInput\n    /**\n     * Limit how many discussion_board_moderators to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_moderators.discussion_board_reports\n   */\n  export type discussion_board_moderators$discussion_board_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    where?: discussion_board_reportsWhereInput\n    orderBy?: discussion_board_reportsOrderByWithRelationInput | discussion_board_reportsOrderByWithRelationInput[]\n    cursor?: discussion_board_reportsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_reportsScalarFieldEnum | Discussion_board_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_moderators without action\n   */\n  export type discussion_board_moderatorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_categories\n   */\n\n  export type AggregateDiscussion_board_categories = {\n    _count: Discussion_board_categoriesCountAggregateOutputType | null\n    _min: Discussion_board_categoriesMinAggregateOutputType | null\n    _max: Discussion_board_categoriesMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_categoriesMinAggregateOutputType = {\n    id: string | null\n    name: string | null\n    description: string | null\n    code: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_categoriesMaxAggregateOutputType = {\n    id: string | null\n    name: string | null\n    description: string | null\n    code: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_categoriesCountAggregateOutputType = {\n    id: number\n    name: number\n    description: number\n    code: number\n    created_at: number\n    updated_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_categoriesMinAggregateInputType = {\n    id?: true\n    name?: true\n    description?: true\n    code?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_categoriesMaxAggregateInputType = {\n    id?: true\n    name?: true\n    description?: true\n    code?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_categoriesCountAggregateInputType = {\n    id?: true\n    name?: true\n    description?: true\n    code?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_categoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_categories to aggregate.\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_categories to fetch.\n     */\n    orderBy?: discussion_board_categoriesOrderByWithRelationInput | discussion_board_categoriesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_categoriesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_categories.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_categories\n    **/\n    _count?: true | Discussion_board_categoriesCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_categoriesMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_categoriesMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_categoriesAggregateType<T extends Discussion_board_categoriesAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_categories]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_categories[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_categories[P]>\n  }\n\n\n\n\n  export type discussion_board_categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_categoriesWhereInput\n    orderBy?: discussion_board_categoriesOrderByWithAggregationInput | discussion_board_categoriesOrderByWithAggregationInput[]\n    by: Discussion_board_categoriesScalarFieldEnum[] | Discussion_board_categoriesScalarFieldEnum\n    having?: discussion_board_categoriesScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_categoriesCountAggregateInputType | true\n    _min?: Discussion_board_categoriesMinAggregateInputType\n    _max?: Discussion_board_categoriesMaxAggregateInputType\n  }\n\n  export type Discussion_board_categoriesGroupByOutputType = {\n    id: string\n    name: string\n    description: string | null\n    code: string\n    created_at: Date\n    updated_at: Date\n    deleted_at: Date | null\n    _count: Discussion_board_categoriesCountAggregateOutputType | null\n    _min: Discussion_board_categoriesMinAggregateOutputType | null\n    _max: Discussion_board_categoriesMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_categoriesGroupByPayload<T extends discussion_board_categoriesGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_categoriesGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_categoriesGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_categoriesGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_categoriesGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    description?: boolean\n    code?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    discussion_board_topics?: boolean | discussion_board_categories$discussion_board_topicsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_categoriesCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_categories\"]>\n\n  export type discussion_board_categoriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    description?: boolean\n    code?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_categories\"]>\n\n  export type discussion_board_categoriesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    description?: boolean\n    code?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }, ExtArgs[\"result\"][\"discussion_board_categories\"]>\n\n  export type discussion_board_categoriesSelectScalar = {\n    id?: boolean\n    name?: boolean\n    description?: boolean\n    code?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussion_board_categoriesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"name\" | \"description\" | \"code\" | \"created_at\" | \"updated_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussion_board_categories\"]>\n  export type discussion_board_categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussion_board_topics?: boolean | discussion_board_categories$discussion_board_topicsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_categoriesCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_categoriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n  export type discussion_board_categoriesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n\n  export type $discussion_board_categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_categories\"\n    objects: {\n      discussion_board_topics: Prisma.$discussion_board_topicsPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Category name for economic or political themes (e.g., 'Economics',\n       * 'Politics', 'Policy').\n       */\n      name: string\n      /**\n       * Detailed description of the category's focus area and acceptable topics\n       * within it.\n       */\n      description: string | null\n      /**\n       * Unique business identifier for the category, used for URL generation and\n       * API filtering.\n       */\n      code: string\n      /**\n       * Timestamp when the category was created.\n       */\n      created_at: Date\n      /**\n       * Timestamp of the last update to the category.\n       */\n      updated_at: Date\n      /**\n       * Soft delete timestamp for category removal without data loss.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussion_board_categories\"]>\n    composites: {}\n  }\n\n  type discussion_board_categoriesGetPayload<S extends boolean | null | undefined | discussion_board_categoriesDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_categoriesPayload, S>\n\n  type discussion_board_categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_categoriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_categoriesCountAggregateInputType | true\n    }\n\n  export interface discussion_board_categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_categories'], meta: { name: 'discussion_board_categories' } }\n    /**\n     * Find zero or one Discussion_board_categories that matches the filter.\n     * @param {discussion_board_categoriesFindUniqueArgs} args - Arguments to find a Discussion_board_categories\n     * @example\n     * // Get one Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_categoriesFindUniqueArgs>(args: SelectSubset<T, discussion_board_categoriesFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_categories that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_categoriesFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_categories\n     * @example\n     * // Get one Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_categoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_categoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_categories that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_categoriesFindFirstArgs} args - Arguments to find a Discussion_board_categories\n     * @example\n     * // Get one Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_categoriesFindFirstArgs>(args?: SelectSubset<T, discussion_board_categoriesFindFirstArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_categories that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_categoriesFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_categories\n     * @example\n     * // Get one Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_categoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_categoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_categories that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_categoriesFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.findMany()\n     * \n     * // Get first 10 Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_categoriesWithIdOnly = await prisma.discussion_board_categories.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_categoriesFindManyArgs>(args?: SelectSubset<T, discussion_board_categoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_categories.\n     * @param {discussion_board_categoriesCreateArgs} args - Arguments to create a Discussion_board_categories.\n     * @example\n     * // Create one Discussion_board_categories\n     * const Discussion_board_categories = await prisma.discussion_board_categories.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_categories\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_categoriesCreateArgs>(args: SelectSubset<T, discussion_board_categoriesCreateArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_categories.\n     * @param {discussion_board_categoriesCreateManyArgs} args - Arguments to create many Discussion_board_categories.\n     * @example\n     * // Create many Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_categoriesCreateManyArgs>(args?: SelectSubset<T, discussion_board_categoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_categories and returns the data saved in the database.\n     * @param {discussion_board_categoriesCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_categories.\n     * @example\n     * // Create many Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_categories and only return the `id`\n     * const discussion_board_categoriesWithIdOnly = await prisma.discussion_board_categories.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_categoriesCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_categoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_categories.\n     * @param {discussion_board_categoriesDeleteArgs} args - Arguments to delete one Discussion_board_categories.\n     * @example\n     * // Delete one Discussion_board_categories\n     * const Discussion_board_categories = await prisma.discussion_board_categories.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_categories\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_categoriesDeleteArgs>(args: SelectSubset<T, discussion_board_categoriesDeleteArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_categories.\n     * @param {discussion_board_categoriesUpdateArgs} args - Arguments to update one Discussion_board_categories.\n     * @example\n     * // Update one Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_categoriesUpdateArgs>(args: SelectSubset<T, discussion_board_categoriesUpdateArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_categories.\n     * @param {discussion_board_categoriesDeleteManyArgs} args - Arguments to filter Discussion_board_categories to delete.\n     * @example\n     * // Delete a few Discussion_board_categories\n     * const { count } = await prisma.discussion_board_categories.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_categoriesDeleteManyArgs>(args?: SelectSubset<T, discussion_board_categoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_categories.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_categoriesUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_categoriesUpdateManyArgs>(args: SelectSubset<T, discussion_board_categoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_categories and returns the data updated in the database.\n     * @param {discussion_board_categoriesUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_categories.\n     * @example\n     * // Update many Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_categories and only return the `id`\n     * const discussion_board_categoriesWithIdOnly = await prisma.discussion_board_categories.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_categoriesUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_categoriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_categories.\n     * @param {discussion_board_categoriesUpsertArgs} args - Arguments to update or create a Discussion_board_categories.\n     * @example\n     * // Update or create a Discussion_board_categories\n     * const discussion_board_categories = await prisma.discussion_board_categories.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_categories\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_categories we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_categoriesUpsertArgs>(args: SelectSubset<T, discussion_board_categoriesUpsertArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_categories.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_categoriesCountArgs} args - Arguments to filter Discussion_board_categories to count.\n     * @example\n     * // Count the number of Discussion_board_categories\n     * const count = await prisma.discussion_board_categories.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_categories we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_categoriesCountArgs>(\n      args?: Subset<T, discussion_board_categoriesCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_categoriesCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_categories.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_categoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_categoriesAggregateArgs>(args: Subset<T, Discussion_board_categoriesAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_categoriesAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_categories.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_categoriesGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_categoriesGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_categoriesGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_categoriesGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_categoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_categories model\n   */\n  readonly fields: discussion_board_categoriesFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_categories.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    discussion_board_topics<T extends discussion_board_categories$discussion_board_topicsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_categories$discussion_board_topicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_categories model\n   */\n  interface discussion_board_categoriesFieldRefs {\n    readonly id: FieldRef<\"discussion_board_categories\", 'String'>\n    readonly name: FieldRef<\"discussion_board_categories\", 'String'>\n    readonly description: FieldRef<\"discussion_board_categories\", 'String'>\n    readonly code: FieldRef<\"discussion_board_categories\", 'String'>\n    readonly created_at: FieldRef<\"discussion_board_categories\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_categories\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussion_board_categories\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_categories findUnique\n   */\n  export type discussion_board_categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_categories to fetch.\n     */\n    where: discussion_board_categoriesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_categories findUniqueOrThrow\n   */\n  export type discussion_board_categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_categories to fetch.\n     */\n    where: discussion_board_categoriesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_categories findFirst\n   */\n  export type discussion_board_categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_categories to fetch.\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_categories to fetch.\n     */\n    orderBy?: discussion_board_categoriesOrderByWithRelationInput | discussion_board_categoriesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_categories.\n     */\n    cursor?: discussion_board_categoriesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_categories.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_categories.\n     */\n    distinct?: Discussion_board_categoriesScalarFieldEnum | Discussion_board_categoriesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_categories findFirstOrThrow\n   */\n  export type discussion_board_categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_categories to fetch.\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_categories to fetch.\n     */\n    orderBy?: discussion_board_categoriesOrderByWithRelationInput | discussion_board_categoriesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_categories.\n     */\n    cursor?: discussion_board_categoriesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_categories.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_categories.\n     */\n    distinct?: Discussion_board_categoriesScalarFieldEnum | Discussion_board_categoriesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_categories findMany\n   */\n  export type discussion_board_categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_categories to fetch.\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_categories to fetch.\n     */\n    orderBy?: discussion_board_categoriesOrderByWithRelationInput | discussion_board_categoriesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_categories.\n     */\n    cursor?: discussion_board_categoriesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_categories.\n     */\n    skip?: number\n    distinct?: Discussion_board_categoriesScalarFieldEnum | Discussion_board_categoriesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_categories create\n   */\n  export type discussion_board_categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_categories.\n     */\n    data: XOR<discussion_board_categoriesCreateInput, discussion_board_categoriesUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_categories createMany\n   */\n  export type discussion_board_categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_categories.\n     */\n    data: discussion_board_categoriesCreateManyInput | discussion_board_categoriesCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_categories createManyAndReturn\n   */\n  export type discussion_board_categoriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_categories.\n     */\n    data: discussion_board_categoriesCreateManyInput | discussion_board_categoriesCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_categories update\n   */\n  export type discussion_board_categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_categories.\n     */\n    data: XOR<discussion_board_categoriesUpdateInput, discussion_board_categoriesUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_categories to update.\n     */\n    where: discussion_board_categoriesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_categories updateMany\n   */\n  export type discussion_board_categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_categories.\n     */\n    data: XOR<discussion_board_categoriesUpdateManyMutationInput, discussion_board_categoriesUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_categories to update\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * Limit how many discussion_board_categories to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_categories updateManyAndReturn\n   */\n  export type discussion_board_categoriesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_categories.\n     */\n    data: XOR<discussion_board_categoriesUpdateManyMutationInput, discussion_board_categoriesUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_categories to update\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * Limit how many discussion_board_categories to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_categories upsert\n   */\n  export type discussion_board_categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_categories to update in case it exists.\n     */\n    where: discussion_board_categoriesWhereUniqueInput\n    /**\n     * In case the discussion_board_categories found by the `where` argument doesn't exist, create a new discussion_board_categories with this data.\n     */\n    create: XOR<discussion_board_categoriesCreateInput, discussion_board_categoriesUncheckedCreateInput>\n    /**\n     * In case the discussion_board_categories was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_categoriesUpdateInput, discussion_board_categoriesUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_categories delete\n   */\n  export type discussion_board_categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_categories to delete.\n     */\n    where: discussion_board_categoriesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_categories deleteMany\n   */\n  export type discussion_board_categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_categories to delete\n     */\n    where?: discussion_board_categoriesWhereInput\n    /**\n     * Limit how many discussion_board_categories to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_categories.discussion_board_topics\n   */\n  export type discussion_board_categories$discussion_board_topicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    where?: discussion_board_topicsWhereInput\n    orderBy?: discussion_board_topicsOrderByWithRelationInput | discussion_board_topicsOrderByWithRelationInput[]\n    cursor?: discussion_board_topicsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_topicsScalarFieldEnum | Discussion_board_topicsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_categories without action\n   */\n  export type discussion_board_categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_categories\n     */\n    select?: discussion_board_categoriesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_categories\n     */\n    omit?: discussion_board_categoriesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_categoriesInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_topics\n   */\n\n  export type AggregateDiscussion_board_topics = {\n    _count: Discussion_board_topicsCountAggregateOutputType | null\n    _min: Discussion_board_topicsMinAggregateOutputType | null\n    _max: Discussion_board_topicsMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_topicsMinAggregateOutputType = {\n    id: string | null\n    discussion_board_category_id: string | null\n    discussion_board_registered_user_id: string | null\n    title: string | null\n    body: string | null\n    code: string | null\n    status: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_topicsMaxAggregateOutputType = {\n    id: string | null\n    discussion_board_category_id: string | null\n    discussion_board_registered_user_id: string | null\n    title: string | null\n    body: string | null\n    code: string | null\n    status: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussion_board_topicsCountAggregateOutputType = {\n    id: number\n    discussion_board_category_id: number\n    discussion_board_registered_user_id: number\n    title: number\n    body: number\n    code: number\n    status: number\n    created_at: number\n    updated_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_topicsMinAggregateInputType = {\n    id?: true\n    discussion_board_category_id?: true\n    discussion_board_registered_user_id?: true\n    title?: true\n    body?: true\n    code?: true\n    status?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_topicsMaxAggregateInputType = {\n    id?: true\n    discussion_board_category_id?: true\n    discussion_board_registered_user_id?: true\n    title?: true\n    body?: true\n    code?: true\n    status?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussion_board_topicsCountAggregateInputType = {\n    id?: true\n    discussion_board_category_id?: true\n    discussion_board_registered_user_id?: true\n    title?: true\n    body?: true\n    code?: true\n    status?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_topicsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_topics to aggregate.\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_topics to fetch.\n     */\n    orderBy?: discussion_board_topicsOrderByWithRelationInput | discussion_board_topicsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_topicsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_topics from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_topics.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_topics\n    **/\n    _count?: true | Discussion_board_topicsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_topicsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_topicsMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_topicsAggregateType<T extends Discussion_board_topicsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_topics]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_topics[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_topics[P]>\n  }\n\n\n\n\n  export type discussion_board_topicsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_topicsWhereInput\n    orderBy?: discussion_board_topicsOrderByWithAggregationInput | discussion_board_topicsOrderByWithAggregationInput[]\n    by: Discussion_board_topicsScalarFieldEnum[] | Discussion_board_topicsScalarFieldEnum\n    having?: discussion_board_topicsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_topicsCountAggregateInputType | true\n    _min?: Discussion_board_topicsMinAggregateInputType\n    _max?: Discussion_board_topicsMaxAggregateInputType\n  }\n\n  export type Discussion_board_topicsGroupByOutputType = {\n    id: string\n    discussion_board_category_id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date\n    updated_at: Date\n    deleted_at: Date | null\n    _count: Discussion_board_topicsCountAggregateOutputType | null\n    _min: Discussion_board_topicsMinAggregateOutputType | null\n    _max: Discussion_board_topicsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_topicsGroupByPayload<T extends discussion_board_topicsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_topicsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_topicsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_topicsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_topicsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_topicsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_category_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    title?: boolean\n    body?: boolean\n    code?: boolean\n    status?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    category?: boolean | discussion_board_categoriesDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    discussion_board_comments?: boolean | discussion_board_topics$discussion_board_commentsArgs<ExtArgs>\n    discussion_board_votes?: boolean | discussion_board_topics$discussion_board_votesArgs<ExtArgs>\n    discussion_board_notifications?: boolean | discussion_board_topics$discussion_board_notificationsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_topicsCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_topics\"]>\n\n  export type discussion_board_topicsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_category_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    title?: boolean\n    body?: boolean\n    code?: boolean\n    status?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    category?: boolean | discussion_board_categoriesDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_topics\"]>\n\n  export type discussion_board_topicsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_category_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    title?: boolean\n    body?: boolean\n    code?: boolean\n    status?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    category?: boolean | discussion_board_categoriesDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_topics\"]>\n\n  export type discussion_board_topicsSelectScalar = {\n    id?: boolean\n    discussion_board_category_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    title?: boolean\n    body?: boolean\n    code?: boolean\n    status?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussion_board_topicsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"discussion_board_category_id\" | \"discussion_board_registered_user_id\" | \"title\" | \"body\" | \"code\" | \"status\" | \"created_at\" | \"updated_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussion_board_topics\"]>\n  export type discussion_board_topicsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    category?: boolean | discussion_board_categoriesDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    discussion_board_comments?: boolean | discussion_board_topics$discussion_board_commentsArgs<ExtArgs>\n    discussion_board_votes?: boolean | discussion_board_topics$discussion_board_votesArgs<ExtArgs>\n    discussion_board_notifications?: boolean | discussion_board_topics$discussion_board_notificationsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_topicsCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_topicsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    category?: boolean | discussion_board_categoriesDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_topicsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    category?: boolean | discussion_board_categoriesDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n  }\n\n  export type $discussion_board_topicsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_topics\"\n    objects: {\n      category: Prisma.$discussion_board_categoriesPayload<ExtArgs>\n      author: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n      discussion_board_comments: Prisma.$discussion_board_commentsPayload<ExtArgs>[]\n      discussion_board_votes: Prisma.$discussion_board_votesPayload<ExtArgs>[]\n      discussion_board_notifications: Prisma.$discussion_board_notificationsPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Category this topic belongs to. {@link discussion_board_categories.id}.\n       */\n      discussion_board_category_id: string\n      /**\n       * Creator of this topic. {@link discussion_board_registered_users.id}.\n       */\n      discussion_board_registered_user_id: string\n      /**\n       * Topic title that summarizes the economic or political discussion.\n       */\n      title: string\n      /**\n       * Initial post content explaining the topic and starting the discussion.\n       */\n      body: string\n      /**\n       * Unique business identifier generated for the topic URL and referencing.\n       */\n      code: string\n      /**\n       * Current status of the topic (active/locked).\n       */\n      status: string\n      /**\n       * Timestamp when the topic was created.\n       */\n      created_at: Date\n      /**\n       * Timestamp of the last update to the topic.\n       */\n      updated_at: Date\n      /**\n       * Soft delete timestamp for topic removal without losing discussion history.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussion_board_topics\"]>\n    composites: {}\n  }\n\n  type discussion_board_topicsGetPayload<S extends boolean | null | undefined | discussion_board_topicsDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_topicsPayload, S>\n\n  type discussion_board_topicsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_topicsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_topicsCountAggregateInputType | true\n    }\n\n  export interface discussion_board_topicsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_topics'], meta: { name: 'discussion_board_topics' } }\n    /**\n     * Find zero or one Discussion_board_topics that matches the filter.\n     * @param {discussion_board_topicsFindUniqueArgs} args - Arguments to find a Discussion_board_topics\n     * @example\n     * // Get one Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_topicsFindUniqueArgs>(args: SelectSubset<T, discussion_board_topicsFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_topics that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_topicsFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_topics\n     * @example\n     * // Get one Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_topicsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_topicsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_topics that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_topicsFindFirstArgs} args - Arguments to find a Discussion_board_topics\n     * @example\n     * // Get one Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_topicsFindFirstArgs>(args?: SelectSubset<T, discussion_board_topicsFindFirstArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_topics that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_topicsFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_topics\n     * @example\n     * // Get one Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_topicsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_topicsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_topics that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_topicsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.findMany()\n     * \n     * // Get first 10 Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_topicsWithIdOnly = await prisma.discussion_board_topics.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_topicsFindManyArgs>(args?: SelectSubset<T, discussion_board_topicsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_topics.\n     * @param {discussion_board_topicsCreateArgs} args - Arguments to create a Discussion_board_topics.\n     * @example\n     * // Create one Discussion_board_topics\n     * const Discussion_board_topics = await prisma.discussion_board_topics.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_topics\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_topicsCreateArgs>(args: SelectSubset<T, discussion_board_topicsCreateArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_topics.\n     * @param {discussion_board_topicsCreateManyArgs} args - Arguments to create many Discussion_board_topics.\n     * @example\n     * // Create many Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_topicsCreateManyArgs>(args?: SelectSubset<T, discussion_board_topicsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_topics and returns the data saved in the database.\n     * @param {discussion_board_topicsCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_topics.\n     * @example\n     * // Create many Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_topics and only return the `id`\n     * const discussion_board_topicsWithIdOnly = await prisma.discussion_board_topics.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_topicsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_topicsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_topics.\n     * @param {discussion_board_topicsDeleteArgs} args - Arguments to delete one Discussion_board_topics.\n     * @example\n     * // Delete one Discussion_board_topics\n     * const Discussion_board_topics = await prisma.discussion_board_topics.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_topics\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_topicsDeleteArgs>(args: SelectSubset<T, discussion_board_topicsDeleteArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_topics.\n     * @param {discussion_board_topicsUpdateArgs} args - Arguments to update one Discussion_board_topics.\n     * @example\n     * // Update one Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_topicsUpdateArgs>(args: SelectSubset<T, discussion_board_topicsUpdateArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_topics.\n     * @param {discussion_board_topicsDeleteManyArgs} args - Arguments to filter Discussion_board_topics to delete.\n     * @example\n     * // Delete a few Discussion_board_topics\n     * const { count } = await prisma.discussion_board_topics.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_topicsDeleteManyArgs>(args?: SelectSubset<T, discussion_board_topicsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_topics.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_topicsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_topicsUpdateManyArgs>(args: SelectSubset<T, discussion_board_topicsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_topics and returns the data updated in the database.\n     * @param {discussion_board_topicsUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_topics.\n     * @example\n     * // Update many Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_topics and only return the `id`\n     * const discussion_board_topicsWithIdOnly = await prisma.discussion_board_topics.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_topicsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_topicsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_topics.\n     * @param {discussion_board_topicsUpsertArgs} args - Arguments to update or create a Discussion_board_topics.\n     * @example\n     * // Update or create a Discussion_board_topics\n     * const discussion_board_topics = await prisma.discussion_board_topics.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_topics\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_topics we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_topicsUpsertArgs>(args: SelectSubset<T, discussion_board_topicsUpsertArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_topics.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_topicsCountArgs} args - Arguments to filter Discussion_board_topics to count.\n     * @example\n     * // Count the number of Discussion_board_topics\n     * const count = await prisma.discussion_board_topics.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_topics we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_topicsCountArgs>(\n      args?: Subset<T, discussion_board_topicsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_topicsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_topics.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_topicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_topicsAggregateArgs>(args: Subset<T, Discussion_board_topicsAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_topicsAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_topics.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_topicsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_topicsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_topicsGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_topicsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_topicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_topicsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_topics model\n   */\n  readonly fields: discussion_board_topicsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_topics.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_topicsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    category<T extends discussion_board_categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_categoriesDefaultArgs<ExtArgs>>): Prisma__discussion_board_categoriesClient<$Result.GetResult<Prisma.$discussion_board_categoriesPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    author<T extends discussion_board_registered_usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_usersDefaultArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    discussion_board_comments<T extends discussion_board_topics$discussion_board_commentsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_topics$discussion_board_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_votes<T extends discussion_board_topics$discussion_board_votesArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_topics$discussion_board_votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_notifications<T extends discussion_board_topics$discussion_board_notificationsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_topics$discussion_board_notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_topics model\n   */\n  interface discussion_board_topicsFieldRefs {\n    readonly id: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly discussion_board_category_id: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly discussion_board_registered_user_id: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly title: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly body: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly code: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly status: FieldRef<\"discussion_board_topics\", 'String'>\n    readonly created_at: FieldRef<\"discussion_board_topics\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_topics\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussion_board_topics\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_topics findUnique\n   */\n  export type discussion_board_topicsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_topics to fetch.\n     */\n    where: discussion_board_topicsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_topics findUniqueOrThrow\n   */\n  export type discussion_board_topicsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_topics to fetch.\n     */\n    where: discussion_board_topicsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_topics findFirst\n   */\n  export type discussion_board_topicsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_topics to fetch.\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_topics to fetch.\n     */\n    orderBy?: discussion_board_topicsOrderByWithRelationInput | discussion_board_topicsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_topics.\n     */\n    cursor?: discussion_board_topicsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_topics from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_topics.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_topics.\n     */\n    distinct?: Discussion_board_topicsScalarFieldEnum | Discussion_board_topicsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_topics findFirstOrThrow\n   */\n  export type discussion_board_topicsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_topics to fetch.\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_topics to fetch.\n     */\n    orderBy?: discussion_board_topicsOrderByWithRelationInput | discussion_board_topicsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_topics.\n     */\n    cursor?: discussion_board_topicsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_topics from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_topics.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_topics.\n     */\n    distinct?: Discussion_board_topicsScalarFieldEnum | Discussion_board_topicsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_topics findMany\n   */\n  export type discussion_board_topicsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_topics to fetch.\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_topics to fetch.\n     */\n    orderBy?: discussion_board_topicsOrderByWithRelationInput | discussion_board_topicsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_topics.\n     */\n    cursor?: discussion_board_topicsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_topics from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_topics.\n     */\n    skip?: number\n    distinct?: Discussion_board_topicsScalarFieldEnum | Discussion_board_topicsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_topics create\n   */\n  export type discussion_board_topicsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_topics.\n     */\n    data: XOR<discussion_board_topicsCreateInput, discussion_board_topicsUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_topics createMany\n   */\n  export type discussion_board_topicsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_topics.\n     */\n    data: discussion_board_topicsCreateManyInput | discussion_board_topicsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_topics createManyAndReturn\n   */\n  export type discussion_board_topicsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_topics.\n     */\n    data: discussion_board_topicsCreateManyInput | discussion_board_topicsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_topics update\n   */\n  export type discussion_board_topicsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_topics.\n     */\n    data: XOR<discussion_board_topicsUpdateInput, discussion_board_topicsUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_topics to update.\n     */\n    where: discussion_board_topicsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_topics updateMany\n   */\n  export type discussion_board_topicsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_topics.\n     */\n    data: XOR<discussion_board_topicsUpdateManyMutationInput, discussion_board_topicsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_topics to update\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * Limit how many discussion_board_topics to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_topics updateManyAndReturn\n   */\n  export type discussion_board_topicsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_topics.\n     */\n    data: XOR<discussion_board_topicsUpdateManyMutationInput, discussion_board_topicsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_topics to update\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * Limit how many discussion_board_topics to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_topics upsert\n   */\n  export type discussion_board_topicsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_topics to update in case it exists.\n     */\n    where: discussion_board_topicsWhereUniqueInput\n    /**\n     * In case the discussion_board_topics found by the `where` argument doesn't exist, create a new discussion_board_topics with this data.\n     */\n    create: XOR<discussion_board_topicsCreateInput, discussion_board_topicsUncheckedCreateInput>\n    /**\n     * In case the discussion_board_topics was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_topicsUpdateInput, discussion_board_topicsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_topics delete\n   */\n  export type discussion_board_topicsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_topics to delete.\n     */\n    where: discussion_board_topicsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_topics deleteMany\n   */\n  export type discussion_board_topicsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_topics to delete\n     */\n    where?: discussion_board_topicsWhereInput\n    /**\n     * Limit how many discussion_board_topics to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_topics.discussion_board_comments\n   */\n  export type discussion_board_topics$discussion_board_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    where?: discussion_board_commentsWhereInput\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    cursor?: discussion_board_commentsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_commentsScalarFieldEnum | Discussion_board_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_topics.discussion_board_votes\n   */\n  export type discussion_board_topics$discussion_board_votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    where?: discussion_board_votesWhereInput\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    cursor?: discussion_board_votesWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_votesScalarFieldEnum | Discussion_board_votesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_topics.discussion_board_notifications\n   */\n  export type discussion_board_topics$discussion_board_notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    where?: discussion_board_notificationsWhereInput\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_notificationsScalarFieldEnum | Discussion_board_notificationsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_topics without action\n   */\n  export type discussion_board_topicsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_comments\n   */\n\n  export type AggregateDiscussion_board_comments = {\n    _count: Discussion_board_commentsCountAggregateOutputType | null\n    _min: Discussion_board_commentsMinAggregateOutputType | null\n    _max: Discussion_board_commentsMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_commentsMinAggregateOutputType = {\n    id: string | null\n    discussion_board_topic_id: string | null\n    discussion_board_registered_user_id: string | null\n    parent_discussion_board_comment_id: string | null\n    body: string | null\n    code: string | null\n    is_deleted: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_commentsMaxAggregateOutputType = {\n    id: string | null\n    discussion_board_topic_id: string | null\n    discussion_board_registered_user_id: string | null\n    parent_discussion_board_comment_id: string | null\n    body: string | null\n    code: string | null\n    is_deleted: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_commentsCountAggregateOutputType = {\n    id: number\n    discussion_board_topic_id: number\n    discussion_board_registered_user_id: number\n    parent_discussion_board_comment_id: number\n    body: number\n    code: number\n    is_deleted: number\n    created_at: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_commentsMinAggregateInputType = {\n    id?: true\n    discussion_board_topic_id?: true\n    discussion_board_registered_user_id?: true\n    parent_discussion_board_comment_id?: true\n    body?: true\n    code?: true\n    is_deleted?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_commentsMaxAggregateInputType = {\n    id?: true\n    discussion_board_topic_id?: true\n    discussion_board_registered_user_id?: true\n    parent_discussion_board_comment_id?: true\n    body?: true\n    code?: true\n    is_deleted?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_commentsCountAggregateInputType = {\n    id?: true\n    discussion_board_topic_id?: true\n    discussion_board_registered_user_id?: true\n    parent_discussion_board_comment_id?: true\n    body?: true\n    code?: true\n    is_deleted?: true\n    created_at?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_commentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_comments to aggregate.\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_comments to fetch.\n     */\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_comments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_comments\n    **/\n    _count?: true | Discussion_board_commentsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_commentsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_commentsMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_commentsAggregateType<T extends Discussion_board_commentsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_comments]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_comments[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_comments[P]>\n  }\n\n\n\n\n  export type discussion_board_commentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_commentsWhereInput\n    orderBy?: discussion_board_commentsOrderByWithAggregationInput | discussion_board_commentsOrderByWithAggregationInput[]\n    by: Discussion_board_commentsScalarFieldEnum[] | Discussion_board_commentsScalarFieldEnum\n    having?: discussion_board_commentsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_commentsCountAggregateInputType | true\n    _min?: Discussion_board_commentsMinAggregateInputType\n    _max?: Discussion_board_commentsMaxAggregateInputType\n  }\n\n  export type Discussion_board_commentsGroupByOutputType = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date\n    updated_at: Date\n    _count: Discussion_board_commentsCountAggregateOutputType | null\n    _min: Discussion_board_commentsMinAggregateOutputType | null\n    _max: Discussion_board_commentsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_commentsGroupByPayload<T extends discussion_board_commentsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_commentsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_commentsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_commentsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_commentsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_commentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    parent_discussion_board_comment_id?: boolean\n    body?: boolean\n    code?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    topic?: boolean | discussion_board_topicsDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    parent?: boolean | discussion_board_comments$parentArgs<ExtArgs>\n    recursive?: boolean | discussion_board_comments$recursiveArgs<ExtArgs>\n    discussion_board_votes?: boolean | discussion_board_comments$discussion_board_votesArgs<ExtArgs>\n    discussion_board_notifications?: boolean | discussion_board_comments$discussion_board_notificationsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_commentsCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_comments\"]>\n\n  export type discussion_board_commentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    parent_discussion_board_comment_id?: boolean\n    body?: boolean\n    code?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    topic?: boolean | discussion_board_topicsDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    parent?: boolean | discussion_board_comments$parentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_comments\"]>\n\n  export type discussion_board_commentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    parent_discussion_board_comment_id?: boolean\n    body?: boolean\n    code?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    topic?: boolean | discussion_board_topicsDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    parent?: boolean | discussion_board_comments$parentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_comments\"]>\n\n  export type discussion_board_commentsSelectScalar = {\n    id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_registered_user_id?: boolean\n    parent_discussion_board_comment_id?: boolean\n    body?: boolean\n    code?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussion_board_commentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"discussion_board_topic_id\" | \"discussion_board_registered_user_id\" | \"parent_discussion_board_comment_id\" | \"body\" | \"code\" | \"is_deleted\" | \"created_at\" | \"updated_at\", ExtArgs[\"result\"][\"discussion_board_comments\"]>\n  export type discussion_board_commentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    topic?: boolean | discussion_board_topicsDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    parent?: boolean | discussion_board_comments$parentArgs<ExtArgs>\n    recursive?: boolean | discussion_board_comments$recursiveArgs<ExtArgs>\n    discussion_board_votes?: boolean | discussion_board_comments$discussion_board_votesArgs<ExtArgs>\n    discussion_board_notifications?: boolean | discussion_board_comments$discussion_board_notificationsArgs<ExtArgs>\n    _count?: boolean | Discussion_board_commentsCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussion_board_commentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    topic?: boolean | discussion_board_topicsDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    parent?: boolean | discussion_board_comments$parentArgs<ExtArgs>\n  }\n  export type discussion_board_commentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    topic?: boolean | discussion_board_topicsDefaultArgs<ExtArgs>\n    author?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    parent?: boolean | discussion_board_comments$parentArgs<ExtArgs>\n  }\n\n  export type $discussion_board_commentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_comments\"\n    objects: {\n      topic: Prisma.$discussion_board_topicsPayload<ExtArgs>\n      author: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n      parent: Prisma.$discussion_board_commentsPayload<ExtArgs> | null\n      recursive: Prisma.$discussion_board_commentsPayload<ExtArgs>[]\n      discussion_board_votes: Prisma.$discussion_board_votesPayload<ExtArgs>[]\n      discussion_board_notifications: Prisma.$discussion_board_notificationsPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Topic this comment belongs to. {@link discussion_board_topics.id}.\n       */\n      discussion_board_topic_id: string\n      /**\n       * Author of this comment. {@link discussion_board_registered_users.id}.\n       */\n      discussion_board_registered_user_id: string\n      /**\n       * Parent comment if this is a reply in the thread. {@link\n       * discussion_board_comments.id}.\n       */\n      parent_discussion_board_comment_id: string | null\n      /**\n       * Comment text content contributing to the discussion.\n       */\n      body: string\n      /**\n       * Unique business identifier for the comment, used for referencing and\n       * permalinks.\n       */\n      code: string\n      /**\n       * Whether this comment is marked as deleted but preserved for discussion\n       * context.\n       */\n      is_deleted: boolean\n      /**\n       * Timestamp when the comment was posted.\n       */\n      created_at: Date\n      /**\n       * Timestamp of the last edit to the comment.\n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussion_board_comments\"]>\n    composites: {}\n  }\n\n  type discussion_board_commentsGetPayload<S extends boolean | null | undefined | discussion_board_commentsDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_commentsPayload, S>\n\n  type discussion_board_commentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_commentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_commentsCountAggregateInputType | true\n    }\n\n  export interface discussion_board_commentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_comments'], meta: { name: 'discussion_board_comments' } }\n    /**\n     * Find zero or one Discussion_board_comments that matches the filter.\n     * @param {discussion_board_commentsFindUniqueArgs} args - Arguments to find a Discussion_board_comments\n     * @example\n     * // Get one Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_commentsFindUniqueArgs>(args: SelectSubset<T, discussion_board_commentsFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_comments that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_commentsFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_comments\n     * @example\n     * // Get one Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_commentsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_commentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_comments that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_commentsFindFirstArgs} args - Arguments to find a Discussion_board_comments\n     * @example\n     * // Get one Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_commentsFindFirstArgs>(args?: SelectSubset<T, discussion_board_commentsFindFirstArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_comments that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_commentsFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_comments\n     * @example\n     * // Get one Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_commentsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_commentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_comments that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_commentsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.findMany()\n     * \n     * // Get first 10 Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_commentsWithIdOnly = await prisma.discussion_board_comments.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_commentsFindManyArgs>(args?: SelectSubset<T, discussion_board_commentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_comments.\n     * @param {discussion_board_commentsCreateArgs} args - Arguments to create a Discussion_board_comments.\n     * @example\n     * // Create one Discussion_board_comments\n     * const Discussion_board_comments = await prisma.discussion_board_comments.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_comments\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_commentsCreateArgs>(args: SelectSubset<T, discussion_board_commentsCreateArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_comments.\n     * @param {discussion_board_commentsCreateManyArgs} args - Arguments to create many Discussion_board_comments.\n     * @example\n     * // Create many Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_commentsCreateManyArgs>(args?: SelectSubset<T, discussion_board_commentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_comments and returns the data saved in the database.\n     * @param {discussion_board_commentsCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_comments.\n     * @example\n     * // Create many Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_comments and only return the `id`\n     * const discussion_board_commentsWithIdOnly = await prisma.discussion_board_comments.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_commentsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_commentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_comments.\n     * @param {discussion_board_commentsDeleteArgs} args - Arguments to delete one Discussion_board_comments.\n     * @example\n     * // Delete one Discussion_board_comments\n     * const Discussion_board_comments = await prisma.discussion_board_comments.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_comments\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_commentsDeleteArgs>(args: SelectSubset<T, discussion_board_commentsDeleteArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_comments.\n     * @param {discussion_board_commentsUpdateArgs} args - Arguments to update one Discussion_board_comments.\n     * @example\n     * // Update one Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_commentsUpdateArgs>(args: SelectSubset<T, discussion_board_commentsUpdateArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_comments.\n     * @param {discussion_board_commentsDeleteManyArgs} args - Arguments to filter Discussion_board_comments to delete.\n     * @example\n     * // Delete a few Discussion_board_comments\n     * const { count } = await prisma.discussion_board_comments.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_commentsDeleteManyArgs>(args?: SelectSubset<T, discussion_board_commentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_commentsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_commentsUpdateManyArgs>(args: SelectSubset<T, discussion_board_commentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_comments and returns the data updated in the database.\n     * @param {discussion_board_commentsUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_comments.\n     * @example\n     * // Update many Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_comments and only return the `id`\n     * const discussion_board_commentsWithIdOnly = await prisma.discussion_board_comments.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_commentsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_commentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_comments.\n     * @param {discussion_board_commentsUpsertArgs} args - Arguments to update or create a Discussion_board_comments.\n     * @example\n     * // Update or create a Discussion_board_comments\n     * const discussion_board_comments = await prisma.discussion_board_comments.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_comments\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_comments we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_commentsUpsertArgs>(args: SelectSubset<T, discussion_board_commentsUpsertArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_commentsCountArgs} args - Arguments to filter Discussion_board_comments to count.\n     * @example\n     * // Count the number of Discussion_board_comments\n     * const count = await prisma.discussion_board_comments.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_comments we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_commentsCountArgs>(\n      args?: Subset<T, discussion_board_commentsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_commentsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_commentsAggregateArgs>(args: Subset<T, Discussion_board_commentsAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_commentsAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_commentsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_commentsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_commentsGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_commentsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_commentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_comments model\n   */\n  readonly fields: discussion_board_commentsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_comments.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_commentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    topic<T extends discussion_board_topicsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_topicsDefaultArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    author<T extends discussion_board_registered_usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_usersDefaultArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    parent<T extends discussion_board_comments$parentArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_comments$parentArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    recursive<T extends discussion_board_comments$recursiveArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_comments$recursiveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_votes<T extends discussion_board_comments$discussion_board_votesArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_comments$discussion_board_votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussion_board_notifications<T extends discussion_board_comments$discussion_board_notificationsArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_comments$discussion_board_notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_comments model\n   */\n  interface discussion_board_commentsFieldRefs {\n    readonly id: FieldRef<\"discussion_board_comments\", 'String'>\n    readonly discussion_board_topic_id: FieldRef<\"discussion_board_comments\", 'String'>\n    readonly discussion_board_registered_user_id: FieldRef<\"discussion_board_comments\", 'String'>\n    readonly parent_discussion_board_comment_id: FieldRef<\"discussion_board_comments\", 'String'>\n    readonly body: FieldRef<\"discussion_board_comments\", 'String'>\n    readonly code: FieldRef<\"discussion_board_comments\", 'String'>\n    readonly is_deleted: FieldRef<\"discussion_board_comments\", 'Boolean'>\n    readonly created_at: FieldRef<\"discussion_board_comments\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_comments\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_comments findUnique\n   */\n  export type discussion_board_commentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_comments to fetch.\n     */\n    where: discussion_board_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_comments findUniqueOrThrow\n   */\n  export type discussion_board_commentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_comments to fetch.\n     */\n    where: discussion_board_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_comments findFirst\n   */\n  export type discussion_board_commentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_comments to fetch.\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_comments to fetch.\n     */\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_comments.\n     */\n    cursor?: discussion_board_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_comments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_comments.\n     */\n    distinct?: Discussion_board_commentsScalarFieldEnum | Discussion_board_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_comments findFirstOrThrow\n   */\n  export type discussion_board_commentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_comments to fetch.\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_comments to fetch.\n     */\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_comments.\n     */\n    cursor?: discussion_board_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_comments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_comments.\n     */\n    distinct?: Discussion_board_commentsScalarFieldEnum | Discussion_board_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_comments findMany\n   */\n  export type discussion_board_commentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_comments to fetch.\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_comments to fetch.\n     */\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_comments.\n     */\n    cursor?: discussion_board_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_comments.\n     */\n    skip?: number\n    distinct?: Discussion_board_commentsScalarFieldEnum | Discussion_board_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_comments create\n   */\n  export type discussion_board_commentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_comments.\n     */\n    data: XOR<discussion_board_commentsCreateInput, discussion_board_commentsUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_comments createMany\n   */\n  export type discussion_board_commentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_comments.\n     */\n    data: discussion_board_commentsCreateManyInput | discussion_board_commentsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_comments createManyAndReturn\n   */\n  export type discussion_board_commentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_comments.\n     */\n    data: discussion_board_commentsCreateManyInput | discussion_board_commentsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_comments update\n   */\n  export type discussion_board_commentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_comments.\n     */\n    data: XOR<discussion_board_commentsUpdateInput, discussion_board_commentsUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_comments to update.\n     */\n    where: discussion_board_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_comments updateMany\n   */\n  export type discussion_board_commentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_comments.\n     */\n    data: XOR<discussion_board_commentsUpdateManyMutationInput, discussion_board_commentsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_comments to update\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * Limit how many discussion_board_comments to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_comments updateManyAndReturn\n   */\n  export type discussion_board_commentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_comments.\n     */\n    data: XOR<discussion_board_commentsUpdateManyMutationInput, discussion_board_commentsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_comments to update\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * Limit how many discussion_board_comments to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_comments upsert\n   */\n  export type discussion_board_commentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_comments to update in case it exists.\n     */\n    where: discussion_board_commentsWhereUniqueInput\n    /**\n     * In case the discussion_board_comments found by the `where` argument doesn't exist, create a new discussion_board_comments with this data.\n     */\n    create: XOR<discussion_board_commentsCreateInput, discussion_board_commentsUncheckedCreateInput>\n    /**\n     * In case the discussion_board_comments was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_commentsUpdateInput, discussion_board_commentsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_comments delete\n   */\n  export type discussion_board_commentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_comments to delete.\n     */\n    where: discussion_board_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_comments deleteMany\n   */\n  export type discussion_board_commentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_comments to delete\n     */\n    where?: discussion_board_commentsWhereInput\n    /**\n     * Limit how many discussion_board_comments to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_comments.parent\n   */\n  export type discussion_board_comments$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    where?: discussion_board_commentsWhereInput\n  }\n\n  /**\n   * discussion_board_comments.recursive\n   */\n  export type discussion_board_comments$recursiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    where?: discussion_board_commentsWhereInput\n    orderBy?: discussion_board_commentsOrderByWithRelationInput | discussion_board_commentsOrderByWithRelationInput[]\n    cursor?: discussion_board_commentsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_commentsScalarFieldEnum | Discussion_board_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_comments.discussion_board_votes\n   */\n  export type discussion_board_comments$discussion_board_votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    where?: discussion_board_votesWhereInput\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    cursor?: discussion_board_votesWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_votesScalarFieldEnum | Discussion_board_votesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_comments.discussion_board_notifications\n   */\n  export type discussion_board_comments$discussion_board_notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    where?: discussion_board_notificationsWhereInput\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussion_board_notificationsScalarFieldEnum | Discussion_board_notificationsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_comments without action\n   */\n  export type discussion_board_commentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_votes\n   */\n\n  export type AggregateDiscussion_board_votes = {\n    _count: Discussion_board_votesCountAggregateOutputType | null\n    _min: Discussion_board_votesMinAggregateOutputType | null\n    _max: Discussion_board_votesMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_votesMinAggregateOutputType = {\n    id: string | null\n    discussion_board_registered_user_id: string | null\n    discussion_board_topic_id: string | null\n    discussion_board_comment_id: string | null\n    vote_type: string | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_votesMaxAggregateOutputType = {\n    id: string | null\n    discussion_board_registered_user_id: string | null\n    discussion_board_topic_id: string | null\n    discussion_board_comment_id: string | null\n    vote_type: string | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_votesCountAggregateOutputType = {\n    id: number\n    discussion_board_registered_user_id: number\n    discussion_board_topic_id: number\n    discussion_board_comment_id: number\n    vote_type: number\n    created_at: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_votesMinAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    discussion_board_topic_id?: true\n    discussion_board_comment_id?: true\n    vote_type?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_votesMaxAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    discussion_board_topic_id?: true\n    discussion_board_comment_id?: true\n    vote_type?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_votesCountAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    discussion_board_topic_id?: true\n    discussion_board_comment_id?: true\n    vote_type?: true\n    created_at?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_votesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_votes to aggregate.\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_votes to fetch.\n     */\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_votesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_votes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_votes.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_votes\n    **/\n    _count?: true | Discussion_board_votesCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_votesMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_votesMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_votesAggregateType<T extends Discussion_board_votesAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_votes]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_votes[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_votes[P]>\n  }\n\n\n\n\n  export type discussion_board_votesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_votesWhereInput\n    orderBy?: discussion_board_votesOrderByWithAggregationInput | discussion_board_votesOrderByWithAggregationInput[]\n    by: Discussion_board_votesScalarFieldEnum[] | Discussion_board_votesScalarFieldEnum\n    having?: discussion_board_votesScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_votesCountAggregateInputType | true\n    _min?: Discussion_board_votesMinAggregateInputType\n    _max?: Discussion_board_votesMaxAggregateInputType\n  }\n\n  export type Discussion_board_votesGroupByOutputType = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id: string | null\n    discussion_board_comment_id: string | null\n    vote_type: string\n    created_at: Date\n    updated_at: Date\n    _count: Discussion_board_votesCountAggregateOutputType | null\n    _min: Discussion_board_votesMinAggregateOutputType | null\n    _max: Discussion_board_votesMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_votesGroupByPayload<T extends discussion_board_votesGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_votesGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_votesGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_votesGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_votesGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_votesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    vote_type?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_votes$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_votes$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_votes\"]>\n\n  export type discussion_board_votesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    vote_type?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_votes$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_votes$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_votes\"]>\n\n  export type discussion_board_votesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    vote_type?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_votes$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_votes$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_votes\"]>\n\n  export type discussion_board_votesSelectScalar = {\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    vote_type?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussion_board_votesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"discussion_board_registered_user_id\" | \"discussion_board_topic_id\" | \"discussion_board_comment_id\" | \"vote_type\" | \"created_at\" | \"updated_at\", ExtArgs[\"result\"][\"discussion_board_votes\"]>\n  export type discussion_board_votesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_votes$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_votes$commentArgs<ExtArgs>\n  }\n  export type discussion_board_votesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_votes$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_votes$commentArgs<ExtArgs>\n  }\n  export type discussion_board_votesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_votes$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_votes$commentArgs<ExtArgs>\n  }\n\n  export type $discussion_board_votesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_votes\"\n    objects: {\n      user: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n      topic: Prisma.$discussion_board_topicsPayload<ExtArgs> | null\n      comment: Prisma.$discussion_board_commentsPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Voted user's discussion_board_registered_users.id\n       */\n      discussion_board_registered_user_id: string\n      /**\n       * Target topic's discussion_board_topics.id\n       */\n      discussion_board_topic_id: string | null\n      /**\n       * Target comment's discussion_board_comments.id\n       */\n      discussion_board_comment_id: string | null\n      /**\n       * Type of vote (upvote or downvote) indicating user sentiment and\n       * contribution quality.\n       */\n      vote_type: string\n      /**\n       * Timestamp when the vote was cast to track user engagement timing.\n       */\n      created_at: Date\n      /**\n       * Last modification timestamp for audit purposes.\n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussion_board_votes\"]>\n    composites: {}\n  }\n\n  type discussion_board_votesGetPayload<S extends boolean | null | undefined | discussion_board_votesDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_votesPayload, S>\n\n  type discussion_board_votesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_votesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_votesCountAggregateInputType | true\n    }\n\n  export interface discussion_board_votesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_votes'], meta: { name: 'discussion_board_votes' } }\n    /**\n     * Find zero or one Discussion_board_votes that matches the filter.\n     * @param {discussion_board_votesFindUniqueArgs} args - Arguments to find a Discussion_board_votes\n     * @example\n     * // Get one Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_votesFindUniqueArgs>(args: SelectSubset<T, discussion_board_votesFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_votes that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_votesFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_votes\n     * @example\n     * // Get one Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_votesFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_votesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_votes that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_votesFindFirstArgs} args - Arguments to find a Discussion_board_votes\n     * @example\n     * // Get one Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_votesFindFirstArgs>(args?: SelectSubset<T, discussion_board_votesFindFirstArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_votes that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_votesFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_votes\n     * @example\n     * // Get one Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_votesFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_votesFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_votes that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_votesFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.findMany()\n     * \n     * // Get first 10 Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_votesWithIdOnly = await prisma.discussion_board_votes.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_votesFindManyArgs>(args?: SelectSubset<T, discussion_board_votesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_votes.\n     * @param {discussion_board_votesCreateArgs} args - Arguments to create a Discussion_board_votes.\n     * @example\n     * // Create one Discussion_board_votes\n     * const Discussion_board_votes = await prisma.discussion_board_votes.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_votes\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_votesCreateArgs>(args: SelectSubset<T, discussion_board_votesCreateArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_votes.\n     * @param {discussion_board_votesCreateManyArgs} args - Arguments to create many Discussion_board_votes.\n     * @example\n     * // Create many Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_votesCreateManyArgs>(args?: SelectSubset<T, discussion_board_votesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_votes and returns the data saved in the database.\n     * @param {discussion_board_votesCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_votes.\n     * @example\n     * // Create many Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_votes and only return the `id`\n     * const discussion_board_votesWithIdOnly = await prisma.discussion_board_votes.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_votesCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_votesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_votes.\n     * @param {discussion_board_votesDeleteArgs} args - Arguments to delete one Discussion_board_votes.\n     * @example\n     * // Delete one Discussion_board_votes\n     * const Discussion_board_votes = await prisma.discussion_board_votes.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_votes\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_votesDeleteArgs>(args: SelectSubset<T, discussion_board_votesDeleteArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_votes.\n     * @param {discussion_board_votesUpdateArgs} args - Arguments to update one Discussion_board_votes.\n     * @example\n     * // Update one Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_votesUpdateArgs>(args: SelectSubset<T, discussion_board_votesUpdateArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_votes.\n     * @param {discussion_board_votesDeleteManyArgs} args - Arguments to filter Discussion_board_votes to delete.\n     * @example\n     * // Delete a few Discussion_board_votes\n     * const { count } = await prisma.discussion_board_votes.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_votesDeleteManyArgs>(args?: SelectSubset<T, discussion_board_votesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_votes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_votesUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_votesUpdateManyArgs>(args: SelectSubset<T, discussion_board_votesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_votes and returns the data updated in the database.\n     * @param {discussion_board_votesUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_votes.\n     * @example\n     * // Update many Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_votes and only return the `id`\n     * const discussion_board_votesWithIdOnly = await prisma.discussion_board_votes.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_votesUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_votesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_votes.\n     * @param {discussion_board_votesUpsertArgs} args - Arguments to update or create a Discussion_board_votes.\n     * @example\n     * // Update or create a Discussion_board_votes\n     * const discussion_board_votes = await prisma.discussion_board_votes.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_votes\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_votes we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_votesUpsertArgs>(args: SelectSubset<T, discussion_board_votesUpsertArgs<ExtArgs>>): Prisma__discussion_board_votesClient<$Result.GetResult<Prisma.$discussion_board_votesPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_votes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_votesCountArgs} args - Arguments to filter Discussion_board_votes to count.\n     * @example\n     * // Count the number of Discussion_board_votes\n     * const count = await prisma.discussion_board_votes.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_votes we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_votesCountArgs>(\n      args?: Subset<T, discussion_board_votesCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_votesCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_votes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_votesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_votesAggregateArgs>(args: Subset<T, Discussion_board_votesAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_votesAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_votes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_votesGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_votesGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_votesGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_votesGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_votesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_votesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_votes model\n   */\n  readonly fields: discussion_board_votesFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_votes.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_votesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user<T extends discussion_board_registered_usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_usersDefaultArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    topic<T extends discussion_board_votes$topicArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_votes$topicArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    comment<T extends discussion_board_votes$commentArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_votes$commentArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_votes model\n   */\n  interface discussion_board_votesFieldRefs {\n    readonly id: FieldRef<\"discussion_board_votes\", 'String'>\n    readonly discussion_board_registered_user_id: FieldRef<\"discussion_board_votes\", 'String'>\n    readonly discussion_board_topic_id: FieldRef<\"discussion_board_votes\", 'String'>\n    readonly discussion_board_comment_id: FieldRef<\"discussion_board_votes\", 'String'>\n    readonly vote_type: FieldRef<\"discussion_board_votes\", 'String'>\n    readonly created_at: FieldRef<\"discussion_board_votes\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_votes\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_votes findUnique\n   */\n  export type discussion_board_votesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_votes to fetch.\n     */\n    where: discussion_board_votesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_votes findUniqueOrThrow\n   */\n  export type discussion_board_votesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_votes to fetch.\n     */\n    where: discussion_board_votesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_votes findFirst\n   */\n  export type discussion_board_votesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_votes to fetch.\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_votes to fetch.\n     */\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_votes.\n     */\n    cursor?: discussion_board_votesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_votes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_votes.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_votes.\n     */\n    distinct?: Discussion_board_votesScalarFieldEnum | Discussion_board_votesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_votes findFirstOrThrow\n   */\n  export type discussion_board_votesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_votes to fetch.\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_votes to fetch.\n     */\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_votes.\n     */\n    cursor?: discussion_board_votesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_votes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_votes.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_votes.\n     */\n    distinct?: Discussion_board_votesScalarFieldEnum | Discussion_board_votesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_votes findMany\n   */\n  export type discussion_board_votesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_votes to fetch.\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_votes to fetch.\n     */\n    orderBy?: discussion_board_votesOrderByWithRelationInput | discussion_board_votesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_votes.\n     */\n    cursor?: discussion_board_votesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_votes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_votes.\n     */\n    skip?: number\n    distinct?: Discussion_board_votesScalarFieldEnum | Discussion_board_votesScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_votes create\n   */\n  export type discussion_board_votesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_votes.\n     */\n    data: XOR<discussion_board_votesCreateInput, discussion_board_votesUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_votes createMany\n   */\n  export type discussion_board_votesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_votes.\n     */\n    data: discussion_board_votesCreateManyInput | discussion_board_votesCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_votes createManyAndReturn\n   */\n  export type discussion_board_votesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_votes.\n     */\n    data: discussion_board_votesCreateManyInput | discussion_board_votesCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_votes update\n   */\n  export type discussion_board_votesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_votes.\n     */\n    data: XOR<discussion_board_votesUpdateInput, discussion_board_votesUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_votes to update.\n     */\n    where: discussion_board_votesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_votes updateMany\n   */\n  export type discussion_board_votesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_votes.\n     */\n    data: XOR<discussion_board_votesUpdateManyMutationInput, discussion_board_votesUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_votes to update\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * Limit how many discussion_board_votes to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_votes updateManyAndReturn\n   */\n  export type discussion_board_votesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_votes.\n     */\n    data: XOR<discussion_board_votesUpdateManyMutationInput, discussion_board_votesUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_votes to update\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * Limit how many discussion_board_votes to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_votes upsert\n   */\n  export type discussion_board_votesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_votes to update in case it exists.\n     */\n    where: discussion_board_votesWhereUniqueInput\n    /**\n     * In case the discussion_board_votes found by the `where` argument doesn't exist, create a new discussion_board_votes with this data.\n     */\n    create: XOR<discussion_board_votesCreateInput, discussion_board_votesUncheckedCreateInput>\n    /**\n     * In case the discussion_board_votes was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_votesUpdateInput, discussion_board_votesUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_votes delete\n   */\n  export type discussion_board_votesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_votes to delete.\n     */\n    where: discussion_board_votesWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_votes deleteMany\n   */\n  export type discussion_board_votesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_votes to delete\n     */\n    where?: discussion_board_votesWhereInput\n    /**\n     * Limit how many discussion_board_votes to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_votes.topic\n   */\n  export type discussion_board_votes$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    where?: discussion_board_topicsWhereInput\n  }\n\n  /**\n   * discussion_board_votes.comment\n   */\n  export type discussion_board_votes$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    where?: discussion_board_commentsWhereInput\n  }\n\n  /**\n   * discussion_board_votes without action\n   */\n  export type discussion_board_votesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_votes\n     */\n    select?: discussion_board_votesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_votes\n     */\n    omit?: discussion_board_votesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_votesInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_notifications\n   */\n\n  export type AggregateDiscussion_board_notifications = {\n    _count: Discussion_board_notificationsCountAggregateOutputType | null\n    _min: Discussion_board_notificationsMinAggregateOutputType | null\n    _max: Discussion_board_notificationsMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_notificationsMinAggregateOutputType = {\n    id: string | null\n    discussion_board_registered_user_id: string | null\n    discussion_board_topic_id: string | null\n    discussion_board_comment_id: string | null\n    notification_type: string | null\n    title: string | null\n    message: string | null\n    is_read: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_notificationsMaxAggregateOutputType = {\n    id: string | null\n    discussion_board_registered_user_id: string | null\n    discussion_board_topic_id: string | null\n    discussion_board_comment_id: string | null\n    notification_type: string | null\n    title: string | null\n    message: string | null\n    is_read: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_notificationsCountAggregateOutputType = {\n    id: number\n    discussion_board_registered_user_id: number\n    discussion_board_topic_id: number\n    discussion_board_comment_id: number\n    notification_type: number\n    title: number\n    message: number\n    is_read: number\n    created_at: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_notificationsMinAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    discussion_board_topic_id?: true\n    discussion_board_comment_id?: true\n    notification_type?: true\n    title?: true\n    message?: true\n    is_read?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_notificationsMaxAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    discussion_board_topic_id?: true\n    discussion_board_comment_id?: true\n    notification_type?: true\n    title?: true\n    message?: true\n    is_read?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_notificationsCountAggregateInputType = {\n    id?: true\n    discussion_board_registered_user_id?: true\n    discussion_board_topic_id?: true\n    discussion_board_comment_id?: true\n    notification_type?: true\n    title?: true\n    message?: true\n    is_read?: true\n    created_at?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_notificationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_notifications to aggregate.\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_notifications to fetch.\n     */\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_notifications.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_notifications\n    **/\n    _count?: true | Discussion_board_notificationsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_notificationsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_notificationsMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_notificationsAggregateType<T extends Discussion_board_notificationsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_notifications]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_notifications[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_notifications[P]>\n  }\n\n\n\n\n  export type discussion_board_notificationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_notificationsWhereInput\n    orderBy?: discussion_board_notificationsOrderByWithAggregationInput | discussion_board_notificationsOrderByWithAggregationInput[]\n    by: Discussion_board_notificationsScalarFieldEnum[] | Discussion_board_notificationsScalarFieldEnum\n    having?: discussion_board_notificationsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_notificationsCountAggregateInputType | true\n    _min?: Discussion_board_notificationsMinAggregateInputType\n    _max?: Discussion_board_notificationsMaxAggregateInputType\n  }\n\n  export type Discussion_board_notificationsGroupByOutputType = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id: string | null\n    discussion_board_comment_id: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date\n    updated_at: Date\n    _count: Discussion_board_notificationsCountAggregateOutputType | null\n    _min: Discussion_board_notificationsMinAggregateOutputType | null\n    _max: Discussion_board_notificationsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_notificationsGroupByPayload<T extends discussion_board_notificationsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_notificationsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_notificationsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_notificationsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_notificationsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_notificationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    notification_type?: boolean\n    title?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_notifications$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_notifications$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_notifications\"]>\n\n  export type discussion_board_notificationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    notification_type?: boolean\n    title?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_notifications$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_notifications$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_notifications\"]>\n\n  export type discussion_board_notificationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    notification_type?: boolean\n    title?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_notifications$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_notifications$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_notifications\"]>\n\n  export type discussion_board_notificationsSelectScalar = {\n    id?: boolean\n    discussion_board_registered_user_id?: boolean\n    discussion_board_topic_id?: boolean\n    discussion_board_comment_id?: boolean\n    notification_type?: boolean\n    title?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussion_board_notificationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"discussion_board_registered_user_id\" | \"discussion_board_topic_id\" | \"discussion_board_comment_id\" | \"notification_type\" | \"title\" | \"message\" | \"is_read\" | \"created_at\" | \"updated_at\", ExtArgs[\"result\"][\"discussion_board_notifications\"]>\n  export type discussion_board_notificationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_notifications$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_notifications$commentArgs<ExtArgs>\n  }\n  export type discussion_board_notificationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_notifications$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_notifications$commentArgs<ExtArgs>\n  }\n  export type discussion_board_notificationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    topic?: boolean | discussion_board_notifications$topicArgs<ExtArgs>\n    comment?: boolean | discussion_board_notifications$commentArgs<ExtArgs>\n  }\n\n  export type $discussion_board_notificationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_notifications\"\n    objects: {\n      user: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n      topic: Prisma.$discussion_board_topicsPayload<ExtArgs> | null\n      comment: Prisma.$discussion_board_commentsPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Recipient user's discussion_board_registered_users.id\n       */\n      discussion_board_registered_user_id: string\n      /**\n       * Related topic's discussion_board_topics.id\n       */\n      discussion_board_topic_id: string | null\n      /**\n       * Related comment's discussion_board_comments.id\n       */\n      discussion_board_comment_id: string | null\n      /**\n       * Category of notification (comment_reply, topic_update, vote_received,\n       * moderation_action, system_announcement) to organize user alerts by\n       * importance.\n       */\n      notification_type: string\n      /**\n       * Brief descriptive title for the notification displayed in user interfaces.\n       */\n      title: string\n      /**\n       * Detailed notification content providing context and actionable\n       * information about discussion activities.\n       */\n      message: string\n      /**\n       * Whether the user has viewed this notification to enable unread count\n       * tracking.\n       */\n      is_read: boolean\n      /**\n       * Timestamp when the notification was generated to maintain chronological\n       * order.\n       */\n      created_at: Date\n      /**\n       * Last modification timestamp for status updates.\n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussion_board_notifications\"]>\n    composites: {}\n  }\n\n  type discussion_board_notificationsGetPayload<S extends boolean | null | undefined | discussion_board_notificationsDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_notificationsPayload, S>\n\n  type discussion_board_notificationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_notificationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_notificationsCountAggregateInputType | true\n    }\n\n  export interface discussion_board_notificationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_notifications'], meta: { name: 'discussion_board_notifications' } }\n    /**\n     * Find zero or one Discussion_board_notifications that matches the filter.\n     * @param {discussion_board_notificationsFindUniqueArgs} args - Arguments to find a Discussion_board_notifications\n     * @example\n     * // Get one Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_notificationsFindUniqueArgs>(args: SelectSubset<T, discussion_board_notificationsFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_notifications that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_notificationsFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_notifications\n     * @example\n     * // Get one Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_notificationsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_notificationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_notifications that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_notificationsFindFirstArgs} args - Arguments to find a Discussion_board_notifications\n     * @example\n     * // Get one Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_notificationsFindFirstArgs>(args?: SelectSubset<T, discussion_board_notificationsFindFirstArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_notifications that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_notificationsFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_notifications\n     * @example\n     * // Get one Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_notificationsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_notificationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_notifications that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_notificationsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.findMany()\n     * \n     * // Get first 10 Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_notificationsWithIdOnly = await prisma.discussion_board_notifications.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_notificationsFindManyArgs>(args?: SelectSubset<T, discussion_board_notificationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_notifications.\n     * @param {discussion_board_notificationsCreateArgs} args - Arguments to create a Discussion_board_notifications.\n     * @example\n     * // Create one Discussion_board_notifications\n     * const Discussion_board_notifications = await prisma.discussion_board_notifications.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_notifications\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_notificationsCreateArgs>(args: SelectSubset<T, discussion_board_notificationsCreateArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_notifications.\n     * @param {discussion_board_notificationsCreateManyArgs} args - Arguments to create many Discussion_board_notifications.\n     * @example\n     * // Create many Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_notificationsCreateManyArgs>(args?: SelectSubset<T, discussion_board_notificationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_notifications and returns the data saved in the database.\n     * @param {discussion_board_notificationsCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_notifications.\n     * @example\n     * // Create many Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_notifications and only return the `id`\n     * const discussion_board_notificationsWithIdOnly = await prisma.discussion_board_notifications.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_notificationsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_notificationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_notifications.\n     * @param {discussion_board_notificationsDeleteArgs} args - Arguments to delete one Discussion_board_notifications.\n     * @example\n     * // Delete one Discussion_board_notifications\n     * const Discussion_board_notifications = await prisma.discussion_board_notifications.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_notifications\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_notificationsDeleteArgs>(args: SelectSubset<T, discussion_board_notificationsDeleteArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_notifications.\n     * @param {discussion_board_notificationsUpdateArgs} args - Arguments to update one Discussion_board_notifications.\n     * @example\n     * // Update one Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_notificationsUpdateArgs>(args: SelectSubset<T, discussion_board_notificationsUpdateArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_notifications.\n     * @param {discussion_board_notificationsDeleteManyArgs} args - Arguments to filter Discussion_board_notifications to delete.\n     * @example\n     * // Delete a few Discussion_board_notifications\n     * const { count } = await prisma.discussion_board_notifications.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_notificationsDeleteManyArgs>(args?: SelectSubset<T, discussion_board_notificationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_notifications.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_notificationsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_notificationsUpdateManyArgs>(args: SelectSubset<T, discussion_board_notificationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_notifications and returns the data updated in the database.\n     * @param {discussion_board_notificationsUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_notifications.\n     * @example\n     * // Update many Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_notifications and only return the `id`\n     * const discussion_board_notificationsWithIdOnly = await prisma.discussion_board_notifications.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_notificationsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_notificationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_notifications.\n     * @param {discussion_board_notificationsUpsertArgs} args - Arguments to update or create a Discussion_board_notifications.\n     * @example\n     * // Update or create a Discussion_board_notifications\n     * const discussion_board_notifications = await prisma.discussion_board_notifications.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_notifications\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_notifications we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_notificationsUpsertArgs>(args: SelectSubset<T, discussion_board_notificationsUpsertArgs<ExtArgs>>): Prisma__discussion_board_notificationsClient<$Result.GetResult<Prisma.$discussion_board_notificationsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_notifications.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_notificationsCountArgs} args - Arguments to filter Discussion_board_notifications to count.\n     * @example\n     * // Count the number of Discussion_board_notifications\n     * const count = await prisma.discussion_board_notifications.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_notifications we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_notificationsCountArgs>(\n      args?: Subset<T, discussion_board_notificationsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_notificationsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_notifications.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_notificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_notificationsAggregateArgs>(args: Subset<T, Discussion_board_notificationsAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_notificationsAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_notifications.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_notificationsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_notificationsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_notificationsGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_notificationsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_notificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_notificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_notifications model\n   */\n  readonly fields: discussion_board_notificationsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_notifications.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_notificationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user<T extends discussion_board_registered_usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_usersDefaultArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    topic<T extends discussion_board_notifications$topicArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_notifications$topicArgs<ExtArgs>>): Prisma__discussion_board_topicsClient<$Result.GetResult<Prisma.$discussion_board_topicsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    comment<T extends discussion_board_notifications$commentArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_notifications$commentArgs<ExtArgs>>): Prisma__discussion_board_commentsClient<$Result.GetResult<Prisma.$discussion_board_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_notifications model\n   */\n  interface discussion_board_notificationsFieldRefs {\n    readonly id: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly discussion_board_registered_user_id: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly discussion_board_topic_id: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly discussion_board_comment_id: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly notification_type: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly title: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly message: FieldRef<\"discussion_board_notifications\", 'String'>\n    readonly is_read: FieldRef<\"discussion_board_notifications\", 'Boolean'>\n    readonly created_at: FieldRef<\"discussion_board_notifications\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_notifications\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_notifications findUnique\n   */\n  export type discussion_board_notificationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_notifications to fetch.\n     */\n    where: discussion_board_notificationsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_notifications findUniqueOrThrow\n   */\n  export type discussion_board_notificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_notifications to fetch.\n     */\n    where: discussion_board_notificationsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_notifications findFirst\n   */\n  export type discussion_board_notificationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_notifications to fetch.\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_notifications to fetch.\n     */\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_notifications.\n     */\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_notifications.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_notifications.\n     */\n    distinct?: Discussion_board_notificationsScalarFieldEnum | Discussion_board_notificationsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_notifications findFirstOrThrow\n   */\n  export type discussion_board_notificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_notifications to fetch.\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_notifications to fetch.\n     */\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_notifications.\n     */\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_notifications.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_notifications.\n     */\n    distinct?: Discussion_board_notificationsScalarFieldEnum | Discussion_board_notificationsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_notifications findMany\n   */\n  export type discussion_board_notificationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_notifications to fetch.\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_notifications to fetch.\n     */\n    orderBy?: discussion_board_notificationsOrderByWithRelationInput | discussion_board_notificationsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_notifications.\n     */\n    cursor?: discussion_board_notificationsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_notifications.\n     */\n    skip?: number\n    distinct?: Discussion_board_notificationsScalarFieldEnum | Discussion_board_notificationsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_notifications create\n   */\n  export type discussion_board_notificationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_notifications.\n     */\n    data: XOR<discussion_board_notificationsCreateInput, discussion_board_notificationsUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_notifications createMany\n   */\n  export type discussion_board_notificationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_notifications.\n     */\n    data: discussion_board_notificationsCreateManyInput | discussion_board_notificationsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_notifications createManyAndReturn\n   */\n  export type discussion_board_notificationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_notifications.\n     */\n    data: discussion_board_notificationsCreateManyInput | discussion_board_notificationsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_notifications update\n   */\n  export type discussion_board_notificationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_notifications.\n     */\n    data: XOR<discussion_board_notificationsUpdateInput, discussion_board_notificationsUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_notifications to update.\n     */\n    where: discussion_board_notificationsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_notifications updateMany\n   */\n  export type discussion_board_notificationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_notifications.\n     */\n    data: XOR<discussion_board_notificationsUpdateManyMutationInput, discussion_board_notificationsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_notifications to update\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * Limit how many discussion_board_notifications to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_notifications updateManyAndReturn\n   */\n  export type discussion_board_notificationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_notifications.\n     */\n    data: XOR<discussion_board_notificationsUpdateManyMutationInput, discussion_board_notificationsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_notifications to update\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * Limit how many discussion_board_notifications to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_notifications upsert\n   */\n  export type discussion_board_notificationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_notifications to update in case it exists.\n     */\n    where: discussion_board_notificationsWhereUniqueInput\n    /**\n     * In case the discussion_board_notifications found by the `where` argument doesn't exist, create a new discussion_board_notifications with this data.\n     */\n    create: XOR<discussion_board_notificationsCreateInput, discussion_board_notificationsUncheckedCreateInput>\n    /**\n     * In case the discussion_board_notifications was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_notificationsUpdateInput, discussion_board_notificationsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_notifications delete\n   */\n  export type discussion_board_notificationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_notifications to delete.\n     */\n    where: discussion_board_notificationsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_notifications deleteMany\n   */\n  export type discussion_board_notificationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_notifications to delete\n     */\n    where?: discussion_board_notificationsWhereInput\n    /**\n     * Limit how many discussion_board_notifications to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_notifications.topic\n   */\n  export type discussion_board_notifications$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_topics\n     */\n    select?: discussion_board_topicsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_topics\n     */\n    omit?: discussion_board_topicsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_topicsInclude<ExtArgs> | null\n    where?: discussion_board_topicsWhereInput\n  }\n\n  /**\n   * discussion_board_notifications.comment\n   */\n  export type discussion_board_notifications$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_comments\n     */\n    select?: discussion_board_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_comments\n     */\n    omit?: discussion_board_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_commentsInclude<ExtArgs> | null\n    where?: discussion_board_commentsWhereInput\n  }\n\n  /**\n   * discussion_board_notifications without action\n   */\n  export type discussion_board_notificationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_notifications\n     */\n    select?: discussion_board_notificationsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_notifications\n     */\n    omit?: discussion_board_notificationsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_notificationsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussion_board_reports\n   */\n\n  export type AggregateDiscussion_board_reports = {\n    _count: Discussion_board_reportsCountAggregateOutputType | null\n    _min: Discussion_board_reportsMinAggregateOutputType | null\n    _max: Discussion_board_reportsMaxAggregateOutputType | null\n  }\n\n  export type Discussion_board_reportsMinAggregateOutputType = {\n    id: string | null\n    reporter_id: string | null\n    assigned_moderator_id: string | null\n    reported_content_type: string | null\n    reported_content_id: string | null\n    reason: string | null\n    description: string | null\n    status: string | null\n    resolution: string | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_reportsMaxAggregateOutputType = {\n    id: string | null\n    reporter_id: string | null\n    assigned_moderator_id: string | null\n    reported_content_type: string | null\n    reported_content_id: string | null\n    reason: string | null\n    description: string | null\n    status: string | null\n    resolution: string | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussion_board_reportsCountAggregateOutputType = {\n    id: number\n    reporter_id: number\n    assigned_moderator_id: number\n    reported_content_type: number\n    reported_content_id: number\n    reason: number\n    description: number\n    status: number\n    resolution: number\n    created_at: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussion_board_reportsMinAggregateInputType = {\n    id?: true\n    reporter_id?: true\n    assigned_moderator_id?: true\n    reported_content_type?: true\n    reported_content_id?: true\n    reason?: true\n    description?: true\n    status?: true\n    resolution?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_reportsMaxAggregateInputType = {\n    id?: true\n    reporter_id?: true\n    assigned_moderator_id?: true\n    reported_content_type?: true\n    reported_content_id?: true\n    reason?: true\n    description?: true\n    status?: true\n    resolution?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussion_board_reportsCountAggregateInputType = {\n    id?: true\n    reporter_id?: true\n    assigned_moderator_id?: true\n    reported_content_type?: true\n    reported_content_id?: true\n    reason?: true\n    description?: true\n    status?: true\n    resolution?: true\n    created_at?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussion_board_reportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_reports to aggregate.\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_reports to fetch.\n     */\n    orderBy?: discussion_board_reportsOrderByWithRelationInput | discussion_board_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussion_board_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_reports.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussion_board_reports\n    **/\n    _count?: true | Discussion_board_reportsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussion_board_reportsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussion_board_reportsMaxAggregateInputType\n  }\n\n  export type GetDiscussion_board_reportsAggregateType<T extends Discussion_board_reportsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussion_board_reports]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussion_board_reports[P]>\n      : GetScalarType<T[P], AggregateDiscussion_board_reports[P]>\n  }\n\n\n\n\n  export type discussion_board_reportsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussion_board_reportsWhereInput\n    orderBy?: discussion_board_reportsOrderByWithAggregationInput | discussion_board_reportsOrderByWithAggregationInput[]\n    by: Discussion_board_reportsScalarFieldEnum[] | Discussion_board_reportsScalarFieldEnum\n    having?: discussion_board_reportsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussion_board_reportsCountAggregateInputType | true\n    _min?: Discussion_board_reportsMinAggregateInputType\n    _max?: Discussion_board_reportsMaxAggregateInputType\n  }\n\n  export type Discussion_board_reportsGroupByOutputType = {\n    id: string\n    reporter_id: string\n    assigned_moderator_id: string | null\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description: string | null\n    status: string\n    resolution: string | null\n    created_at: Date\n    updated_at: Date\n    _count: Discussion_board_reportsCountAggregateOutputType | null\n    _min: Discussion_board_reportsMinAggregateOutputType | null\n    _max: Discussion_board_reportsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussion_board_reportsGroupByPayload<T extends discussion_board_reportsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussion_board_reportsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussion_board_reportsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussion_board_reportsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussion_board_reportsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussion_board_reportsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    reporter_id?: boolean\n    assigned_moderator_id?: boolean\n    reported_content_type?: boolean\n    reported_content_id?: boolean\n    reason?: boolean\n    description?: boolean\n    status?: boolean\n    resolution?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    reporter?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    assignedModerator?: boolean | discussion_board_reports$assignedModeratorArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_reports\"]>\n\n  export type discussion_board_reportsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    reporter_id?: boolean\n    assigned_moderator_id?: boolean\n    reported_content_type?: boolean\n    reported_content_id?: boolean\n    reason?: boolean\n    description?: boolean\n    status?: boolean\n    resolution?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    reporter?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    assignedModerator?: boolean | discussion_board_reports$assignedModeratorArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_reports\"]>\n\n  export type discussion_board_reportsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    reporter_id?: boolean\n    assigned_moderator_id?: boolean\n    reported_content_type?: boolean\n    reported_content_id?: boolean\n    reason?: boolean\n    description?: boolean\n    status?: boolean\n    resolution?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    reporter?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    assignedModerator?: boolean | discussion_board_reports$assignedModeratorArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussion_board_reports\"]>\n\n  export type discussion_board_reportsSelectScalar = {\n    id?: boolean\n    reporter_id?: boolean\n    assigned_moderator_id?: boolean\n    reported_content_type?: boolean\n    reported_content_id?: boolean\n    reason?: boolean\n    description?: boolean\n    status?: boolean\n    resolution?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussion_board_reportsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"reporter_id\" | \"assigned_moderator_id\" | \"reported_content_type\" | \"reported_content_id\" | \"reason\" | \"description\" | \"status\" | \"resolution\" | \"created_at\" | \"updated_at\", ExtArgs[\"result\"][\"discussion_board_reports\"]>\n  export type discussion_board_reportsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    reporter?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    assignedModerator?: boolean | discussion_board_reports$assignedModeratorArgs<ExtArgs>\n  }\n  export type discussion_board_reportsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    reporter?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    assignedModerator?: boolean | discussion_board_reports$assignedModeratorArgs<ExtArgs>\n  }\n  export type discussion_board_reportsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    reporter?: boolean | discussion_board_registered_usersDefaultArgs<ExtArgs>\n    assignedModerator?: boolean | discussion_board_reports$assignedModeratorArgs<ExtArgs>\n  }\n\n  export type $discussion_board_reportsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussion_board_reports\"\n    objects: {\n      reporter: Prisma.$discussion_board_registered_usersPayload<ExtArgs>\n      assignedModerator: Prisma.$discussion_board_moderatorsPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key.\n       */\n      id: string\n      /**\n       * Reporter's {@link discussion_board_registered_users.id} who submitted the\n       * report.\n       */\n      reporter_id: string\n      /**\n       * Assigned moderator's {@link discussion_board_moderators.id} handling this\n       * report.\n       */\n      assigned_moderator_id: string | null\n      /**\n       * Type of content being reported (topic or comment).\n       */\n      reported_content_type: string\n      /**\n       * ID of the reported topic or comment.\n       */\n      reported_content_id: string\n      /**\n       * Reason for the report (spam, inappropriate, harassment, etc.).\n       */\n      reason: string\n      /**\n       * Detailed description of the reported issue.\n       */\n      description: string | null\n      /**\n       * Current status of the report (pending, in_review, resolved, dismissed).\n       */\n      status: string\n      /**\n       * Resolution details provided by the moderator.\n       */\n      resolution: string | null\n      /**\n       * Timestamp when the report was created.\n       */\n      created_at: Date\n      /**\n       * Timestamp when the report was last updated.\n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussion_board_reports\"]>\n    composites: {}\n  }\n\n  type discussion_board_reportsGetPayload<S extends boolean | null | undefined | discussion_board_reportsDefaultArgs> = $Result.GetResult<Prisma.$discussion_board_reportsPayload, S>\n\n  type discussion_board_reportsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussion_board_reportsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussion_board_reportsCountAggregateInputType | true\n    }\n\n  export interface discussion_board_reportsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussion_board_reports'], meta: { name: 'discussion_board_reports' } }\n    /**\n     * Find zero or one Discussion_board_reports that matches the filter.\n     * @param {discussion_board_reportsFindUniqueArgs} args - Arguments to find a Discussion_board_reports\n     * @example\n     * // Get one Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussion_board_reportsFindUniqueArgs>(args: SelectSubset<T, discussion_board_reportsFindUniqueArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussion_board_reports that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussion_board_reportsFindUniqueOrThrowArgs} args - Arguments to find a Discussion_board_reports\n     * @example\n     * // Get one Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussion_board_reportsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussion_board_reportsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_reports that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_reportsFindFirstArgs} args - Arguments to find a Discussion_board_reports\n     * @example\n     * // Get one Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussion_board_reportsFindFirstArgs>(args?: SelectSubset<T, discussion_board_reportsFindFirstArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussion_board_reports that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_reportsFindFirstOrThrowArgs} args - Arguments to find a Discussion_board_reports\n     * @example\n     * // Get one Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussion_board_reportsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussion_board_reportsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussion_board_reports that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_reportsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.findMany()\n     * \n     * // Get first 10 Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussion_board_reportsWithIdOnly = await prisma.discussion_board_reports.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussion_board_reportsFindManyArgs>(args?: SelectSubset<T, discussion_board_reportsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussion_board_reports.\n     * @param {discussion_board_reportsCreateArgs} args - Arguments to create a Discussion_board_reports.\n     * @example\n     * // Create one Discussion_board_reports\n     * const Discussion_board_reports = await prisma.discussion_board_reports.create({\n     *   data: {\n     *     // ... data to create a Discussion_board_reports\n     *   }\n     * })\n     * \n     */\n    create<T extends discussion_board_reportsCreateArgs>(args: SelectSubset<T, discussion_board_reportsCreateArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussion_board_reports.\n     * @param {discussion_board_reportsCreateManyArgs} args - Arguments to create many Discussion_board_reports.\n     * @example\n     * // Create many Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussion_board_reportsCreateManyArgs>(args?: SelectSubset<T, discussion_board_reportsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussion_board_reports and returns the data saved in the database.\n     * @param {discussion_board_reportsCreateManyAndReturnArgs} args - Arguments to create many Discussion_board_reports.\n     * @example\n     * // Create many Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussion_board_reports and only return the `id`\n     * const discussion_board_reportsWithIdOnly = await prisma.discussion_board_reports.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussion_board_reportsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussion_board_reportsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussion_board_reports.\n     * @param {discussion_board_reportsDeleteArgs} args - Arguments to delete one Discussion_board_reports.\n     * @example\n     * // Delete one Discussion_board_reports\n     * const Discussion_board_reports = await prisma.discussion_board_reports.delete({\n     *   where: {\n     *     // ... filter to delete one Discussion_board_reports\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussion_board_reportsDeleteArgs>(args: SelectSubset<T, discussion_board_reportsDeleteArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussion_board_reports.\n     * @param {discussion_board_reportsUpdateArgs} args - Arguments to update one Discussion_board_reports.\n     * @example\n     * // Update one Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussion_board_reportsUpdateArgs>(args: SelectSubset<T, discussion_board_reportsUpdateArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussion_board_reports.\n     * @param {discussion_board_reportsDeleteManyArgs} args - Arguments to filter Discussion_board_reports to delete.\n     * @example\n     * // Delete a few Discussion_board_reports\n     * const { count } = await prisma.discussion_board_reports.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussion_board_reportsDeleteManyArgs>(args?: SelectSubset<T, discussion_board_reportsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_reportsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussion_board_reportsUpdateManyArgs>(args: SelectSubset<T, discussion_board_reportsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussion_board_reports and returns the data updated in the database.\n     * @param {discussion_board_reportsUpdateManyAndReturnArgs} args - Arguments to update many Discussion_board_reports.\n     * @example\n     * // Update many Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussion_board_reports and only return the `id`\n     * const discussion_board_reportsWithIdOnly = await prisma.discussion_board_reports.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussion_board_reportsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussion_board_reportsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussion_board_reports.\n     * @param {discussion_board_reportsUpsertArgs} args - Arguments to update or create a Discussion_board_reports.\n     * @example\n     * // Update or create a Discussion_board_reports\n     * const discussion_board_reports = await prisma.discussion_board_reports.upsert({\n     *   create: {\n     *     // ... data to create a Discussion_board_reports\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussion_board_reports we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussion_board_reportsUpsertArgs>(args: SelectSubset<T, discussion_board_reportsUpsertArgs<ExtArgs>>): Prisma__discussion_board_reportsClient<$Result.GetResult<Prisma.$discussion_board_reportsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussion_board_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_reportsCountArgs} args - Arguments to filter Discussion_board_reports to count.\n     * @example\n     * // Count the number of Discussion_board_reports\n     * const count = await prisma.discussion_board_reports.count({\n     *   where: {\n     *     // ... the filter for the Discussion_board_reports we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussion_board_reportsCountArgs>(\n      args?: Subset<T, discussion_board_reportsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussion_board_reportsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussion_board_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussion_board_reportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussion_board_reportsAggregateArgs>(args: Subset<T, Discussion_board_reportsAggregateArgs>): Prisma.PrismaPromise<GetDiscussion_board_reportsAggregateType<T>>\n\n    /**\n     * Group by Discussion_board_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussion_board_reportsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussion_board_reportsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussion_board_reportsGroupByArgs['orderBy'] }\n        : { orderBy?: discussion_board_reportsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussion_board_reportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussion_board_reportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussion_board_reports model\n   */\n  readonly fields: discussion_board_reportsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussion_board_reports.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussion_board_reportsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    reporter<T extends discussion_board_registered_usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_registered_usersDefaultArgs<ExtArgs>>): Prisma__discussion_board_registered_usersClient<$Result.GetResult<Prisma.$discussion_board_registered_usersPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    assignedModerator<T extends discussion_board_reports$assignedModeratorArgs<ExtArgs> = {}>(args?: Subset<T, discussion_board_reports$assignedModeratorArgs<ExtArgs>>): Prisma__discussion_board_moderatorsClient<$Result.GetResult<Prisma.$discussion_board_moderatorsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussion_board_reports model\n   */\n  interface discussion_board_reportsFieldRefs {\n    readonly id: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly reporter_id: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly assigned_moderator_id: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly reported_content_type: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly reported_content_id: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly reason: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly description: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly status: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly resolution: FieldRef<\"discussion_board_reports\", 'String'>\n    readonly created_at: FieldRef<\"discussion_board_reports\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussion_board_reports\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussion_board_reports findUnique\n   */\n  export type discussion_board_reportsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_reports to fetch.\n     */\n    where: discussion_board_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_reports findUniqueOrThrow\n   */\n  export type discussion_board_reportsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_reports to fetch.\n     */\n    where: discussion_board_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_reports findFirst\n   */\n  export type discussion_board_reportsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_reports to fetch.\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_reports to fetch.\n     */\n    orderBy?: discussion_board_reportsOrderByWithRelationInput | discussion_board_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_reports.\n     */\n    cursor?: discussion_board_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_reports.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_reports.\n     */\n    distinct?: Discussion_board_reportsScalarFieldEnum | Discussion_board_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_reports findFirstOrThrow\n   */\n  export type discussion_board_reportsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_reports to fetch.\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_reports to fetch.\n     */\n    orderBy?: discussion_board_reportsOrderByWithRelationInput | discussion_board_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussion_board_reports.\n     */\n    cursor?: discussion_board_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_reports.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussion_board_reports.\n     */\n    distinct?: Discussion_board_reportsScalarFieldEnum | Discussion_board_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_reports findMany\n   */\n  export type discussion_board_reportsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussion_board_reports to fetch.\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussion_board_reports to fetch.\n     */\n    orderBy?: discussion_board_reportsOrderByWithRelationInput | discussion_board_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussion_board_reports.\n     */\n    cursor?: discussion_board_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussion_board_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussion_board_reports.\n     */\n    skip?: number\n    distinct?: Discussion_board_reportsScalarFieldEnum | Discussion_board_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussion_board_reports create\n   */\n  export type discussion_board_reportsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussion_board_reports.\n     */\n    data: XOR<discussion_board_reportsCreateInput, discussion_board_reportsUncheckedCreateInput>\n  }\n\n  /**\n   * discussion_board_reports createMany\n   */\n  export type discussion_board_reportsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussion_board_reports.\n     */\n    data: discussion_board_reportsCreateManyInput | discussion_board_reportsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussion_board_reports createManyAndReturn\n   */\n  export type discussion_board_reportsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussion_board_reports.\n     */\n    data: discussion_board_reportsCreateManyInput | discussion_board_reportsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_reports update\n   */\n  export type discussion_board_reportsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussion_board_reports.\n     */\n    data: XOR<discussion_board_reportsUpdateInput, discussion_board_reportsUncheckedUpdateInput>\n    /**\n     * Choose, which discussion_board_reports to update.\n     */\n    where: discussion_board_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_reports updateMany\n   */\n  export type discussion_board_reportsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussion_board_reports.\n     */\n    data: XOR<discussion_board_reportsUpdateManyMutationInput, discussion_board_reportsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_reports to update\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * Limit how many discussion_board_reports to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_reports updateManyAndReturn\n   */\n  export type discussion_board_reportsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussion_board_reports.\n     */\n    data: XOR<discussion_board_reportsUpdateManyMutationInput, discussion_board_reportsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussion_board_reports to update\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * Limit how many discussion_board_reports to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussion_board_reports upsert\n   */\n  export type discussion_board_reportsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussion_board_reports to update in case it exists.\n     */\n    where: discussion_board_reportsWhereUniqueInput\n    /**\n     * In case the discussion_board_reports found by the `where` argument doesn't exist, create a new discussion_board_reports with this data.\n     */\n    create: XOR<discussion_board_reportsCreateInput, discussion_board_reportsUncheckedCreateInput>\n    /**\n     * In case the discussion_board_reports was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussion_board_reportsUpdateInput, discussion_board_reportsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussion_board_reports delete\n   */\n  export type discussion_board_reportsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n    /**\n     * Filter which discussion_board_reports to delete.\n     */\n    where: discussion_board_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussion_board_reports deleteMany\n   */\n  export type discussion_board_reportsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussion_board_reports to delete\n     */\n    where?: discussion_board_reportsWhereInput\n    /**\n     * Limit how many discussion_board_reports to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussion_board_reports.assignedModerator\n   */\n  export type discussion_board_reports$assignedModeratorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_moderators\n     */\n    select?: discussion_board_moderatorsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_moderators\n     */\n    omit?: discussion_board_moderatorsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_moderatorsInclude<ExtArgs> | null\n    where?: discussion_board_moderatorsWhereInput\n  }\n\n  /**\n   * discussion_board_reports without action\n   */\n  export type discussion_board_reportsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussion_board_reports\n     */\n    select?: discussion_board_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussion_board_reports\n     */\n    omit?: discussion_board_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussion_board_reportsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Enums\n   */\n\n  export const TransactionIsolationLevel: {\n    ReadUncommitted: 'ReadUncommitted',\n    ReadCommitted: 'ReadCommitted',\n    RepeatableRead: 'RepeatableRead',\n    Serializable: 'Serializable'\n  };\n\n  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]\n\n\n  export const Discussion_board_guest_usersScalarFieldEnum: {\n    id: 'id',\n    ip_address: 'ip_address',\n    user_agent: 'user_agent',\n    session_token: 'session_token',\n    last_accessed_at: 'last_accessed_at',\n    created_at: 'created_at',\n    updated_at: 'updated_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussion_board_guest_usersScalarFieldEnum = (typeof Discussion_board_guest_usersScalarFieldEnum)[keyof typeof Discussion_board_guest_usersScalarFieldEnum]\n\n\n  export const Discussion_board_registered_usersScalarFieldEnum: {\n    id: 'id',\n    email: 'email',\n    password_hash: 'password_hash',\n    display_name: 'display_name',\n    email_verified: 'email_verified',\n    last_login_at: 'last_login_at',\n    created_at: 'created_at',\n    updated_at: 'updated_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussion_board_registered_usersScalarFieldEnum = (typeof Discussion_board_registered_usersScalarFieldEnum)[keyof typeof Discussion_board_registered_usersScalarFieldEnum]\n\n\n  export const Discussion_board_moderatorsScalarFieldEnum: {\n    id: 'id',\n    discussion_board_registered_user_id: 'discussion_board_registered_user_id',\n    promoted_at: 'promoted_at',\n    is_active_moderator: 'is_active_moderator',\n    moderation_notes: 'moderation_notes',\n    created_at: 'created_at',\n    updated_at: 'updated_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussion_board_moderatorsScalarFieldEnum = (typeof Discussion_board_moderatorsScalarFieldEnum)[keyof typeof Discussion_board_moderatorsScalarFieldEnum]\n\n\n  export const Discussion_board_categoriesScalarFieldEnum: {\n    id: 'id',\n    name: 'name',\n    description: 'description',\n    code: 'code',\n    created_at: 'created_at',\n    updated_at: 'updated_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussion_board_categoriesScalarFieldEnum = (typeof Discussion_board_categoriesScalarFieldEnum)[keyof typeof Discussion_board_categoriesScalarFieldEnum]\n\n\n  export const Discussion_board_topicsScalarFieldEnum: {\n    id: 'id',\n    discussion_board_category_id: 'discussion_board_category_id',\n    discussion_board_registered_user_id: 'discussion_board_registered_user_id',\n    title: 'title',\n    body: 'body',\n    code: 'code',\n    status: 'status',\n    created_at: 'created_at',\n    updated_at: 'updated_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussion_board_topicsScalarFieldEnum = (typeof Discussion_board_topicsScalarFieldEnum)[keyof typeof Discussion_board_topicsScalarFieldEnum]\n\n\n  export const Discussion_board_commentsScalarFieldEnum: {\n    id: 'id',\n    discussion_board_topic_id: 'discussion_board_topic_id',\n    discussion_board_registered_user_id: 'discussion_board_registered_user_id',\n    parent_discussion_board_comment_id: 'parent_discussion_board_comment_id',\n    body: 'body',\n    code: 'code',\n    is_deleted: 'is_deleted',\n    created_at: 'created_at',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussion_board_commentsScalarFieldEnum = (typeof Discussion_board_commentsScalarFieldEnum)[keyof typeof Discussion_board_commentsScalarFieldEnum]\n\n\n  export const Discussion_board_votesScalarFieldEnum: {\n    id: 'id',\n    discussion_board_registered_user_id: 'discussion_board_registered_user_id',\n    discussion_board_topic_id: 'discussion_board_topic_id',\n    discussion_board_comment_id: 'discussion_board_comment_id',\n    vote_type: 'vote_type',\n    created_at: 'created_at',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussion_board_votesScalarFieldEnum = (typeof Discussion_board_votesScalarFieldEnum)[keyof typeof Discussion_board_votesScalarFieldEnum]\n\n\n  export const Discussion_board_notificationsScalarFieldEnum: {\n    id: 'id',\n    discussion_board_registered_user_id: 'discussion_board_registered_user_id',\n    discussion_board_topic_id: 'discussion_board_topic_id',\n    discussion_board_comment_id: 'discussion_board_comment_id',\n    notification_type: 'notification_type',\n    title: 'title',\n    message: 'message',\n    is_read: 'is_read',\n    created_at: 'created_at',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussion_board_notificationsScalarFieldEnum = (typeof Discussion_board_notificationsScalarFieldEnum)[keyof typeof Discussion_board_notificationsScalarFieldEnum]\n\n\n  export const Discussion_board_reportsScalarFieldEnum: {\n    id: 'id',\n    reporter_id: 'reporter_id',\n    assigned_moderator_id: 'assigned_moderator_id',\n    reported_content_type: 'reported_content_type',\n    reported_content_id: 'reported_content_id',\n    reason: 'reason',\n    description: 'description',\n    status: 'status',\n    resolution: 'resolution',\n    created_at: 'created_at',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussion_board_reportsScalarFieldEnum = (typeof Discussion_board_reportsScalarFieldEnum)[keyof typeof Discussion_board_reportsScalarFieldEnum]\n\n\n  export const SortOrder: {\n    asc: 'asc',\n    desc: 'desc'\n  };\n\n  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]\n\n\n  export const QueryMode: {\n    default: 'default',\n    insensitive: 'insensitive'\n  };\n\n  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]\n\n\n  export const NullsOrder: {\n    first: 'first',\n    last: 'last'\n  };\n\n  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]\n\n\n  /**\n   * Field references\n   */\n\n\n  /**\n   * Reference to a field of type 'String'\n   */\n  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>\n    \n\n\n  /**\n   * Reference to a field of type 'String[]'\n   */\n  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>\n    \n\n\n  /**\n   * Reference to a field of type 'DateTime'\n   */\n  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>\n    \n\n\n  /**\n   * Reference to a field of type 'DateTime[]'\n   */\n  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>\n    \n\n\n  /**\n   * Reference to a field of type 'Boolean'\n   */\n  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>\n    \n\n\n  /**\n   * Reference to a field of type 'Int'\n   */\n  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>\n    \n\n\n  /**\n   * Reference to a field of type 'Int[]'\n   */\n  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>\n    \n  /**\n   * Deep Input Types\n   */\n\n\n  export type discussion_board_guest_usersWhereInput = {\n    AND?: discussion_board_guest_usersWhereInput | discussion_board_guest_usersWhereInput[]\n    OR?: discussion_board_guest_usersWhereInput[]\n    NOT?: discussion_board_guest_usersWhereInput | discussion_board_guest_usersWhereInput[]\n    id?: UuidFilter<\"discussion_board_guest_users\"> | string\n    ip_address?: StringFilter<\"discussion_board_guest_users\"> | string\n    user_agent?: StringFilter<\"discussion_board_guest_users\"> | string\n    session_token?: StringNullableFilter<\"discussion_board_guest_users\"> | string | null\n    last_accessed_at?: DateTimeFilter<\"discussion_board_guest_users\"> | Date | string\n    created_at?: DateTimeFilter<\"discussion_board_guest_users\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_guest_users\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_guest_users\"> | Date | string | null\n  }\n\n  export type discussion_board_guest_usersOrderByWithRelationInput = {\n    id?: SortOrder\n    ip_address?: SortOrder\n    user_agent?: SortOrder\n    session_token?: SortOrderInput | SortOrder\n    last_accessed_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n  }\n\n  export type discussion_board_guest_usersWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussion_board_guest_usersWhereInput | discussion_board_guest_usersWhereInput[]\n    OR?: discussion_board_guest_usersWhereInput[]\n    NOT?: discussion_board_guest_usersWhereInput | discussion_board_guest_usersWhereInput[]\n    ip_address?: StringFilter<\"discussion_board_guest_users\"> | string\n    user_agent?: StringFilter<\"discussion_board_guest_users\"> | string\n    session_token?: StringNullableFilter<\"discussion_board_guest_users\"> | string | null\n    last_accessed_at?: DateTimeFilter<\"discussion_board_guest_users\"> | Date | string\n    created_at?: DateTimeFilter<\"discussion_board_guest_users\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_guest_users\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_guest_users\"> | Date | string | null\n  }, \"id\">\n\n  export type discussion_board_guest_usersOrderByWithAggregationInput = {\n    id?: SortOrder\n    ip_address?: SortOrder\n    user_agent?: SortOrder\n    session_token?: SortOrderInput | SortOrder\n    last_accessed_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussion_board_guest_usersCountOrderByAggregateInput\n    _max?: discussion_board_guest_usersMaxOrderByAggregateInput\n    _min?: discussion_board_guest_usersMinOrderByAggregateInput\n  }\n\n  export type discussion_board_guest_usersScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_guest_usersScalarWhereWithAggregatesInput | discussion_board_guest_usersScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_guest_usersScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_guest_usersScalarWhereWithAggregatesInput | discussion_board_guest_usersScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_guest_users\"> | string\n    ip_address?: StringWithAggregatesFilter<\"discussion_board_guest_users\"> | string\n    user_agent?: StringWithAggregatesFilter<\"discussion_board_guest_users\"> | string\n    session_token?: StringNullableWithAggregatesFilter<\"discussion_board_guest_users\"> | string | null\n    last_accessed_at?: DateTimeWithAggregatesFilter<\"discussion_board_guest_users\"> | Date | string\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_guest_users\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_guest_users\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussion_board_guest_users\"> | Date | string | null\n  }\n\n  export type discussion_board_registered_usersWhereInput = {\n    AND?: discussion_board_registered_usersWhereInput | discussion_board_registered_usersWhereInput[]\n    OR?: discussion_board_registered_usersWhereInput[]\n    NOT?: discussion_board_registered_usersWhereInput | discussion_board_registered_usersWhereInput[]\n    id?: UuidFilter<\"discussion_board_registered_users\"> | string\n    email?: StringFilter<\"discussion_board_registered_users\"> | string\n    password_hash?: StringFilter<\"discussion_board_registered_users\"> | string\n    display_name?: StringNullableFilter<\"discussion_board_registered_users\"> | string | null\n    email_verified?: BoolFilter<\"discussion_board_registered_users\"> | boolean\n    last_login_at?: DateTimeNullableFilter<\"discussion_board_registered_users\"> | Date | string | null\n    created_at?: DateTimeFilter<\"discussion_board_registered_users\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_registered_users\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_registered_users\"> | Date | string | null\n    discussion_board_moderators?: XOR<Discussion_board_moderatorsNullableScalarRelationFilter, discussion_board_moderatorsWhereInput> | null\n    discussion_board_topics?: Discussion_board_topicsListRelationFilter\n    discussion_board_comments?: Discussion_board_commentsListRelationFilter\n    discussion_board_votes?: Discussion_board_votesListRelationFilter\n    discussion_board_notifications?: Discussion_board_notificationsListRelationFilter\n    discussion_board_reports?: Discussion_board_reportsListRelationFilter\n  }\n\n  export type discussion_board_registered_usersOrderByWithRelationInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    display_name?: SortOrderInput | SortOrder\n    email_verified?: SortOrder\n    last_login_at?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    discussion_board_moderators?: discussion_board_moderatorsOrderByWithRelationInput\n    discussion_board_topics?: discussion_board_topicsOrderByRelationAggregateInput\n    discussion_board_comments?: discussion_board_commentsOrderByRelationAggregateInput\n    discussion_board_votes?: discussion_board_votesOrderByRelationAggregateInput\n    discussion_board_notifications?: discussion_board_notificationsOrderByRelationAggregateInput\n    discussion_board_reports?: discussion_board_reportsOrderByRelationAggregateInput\n  }\n\n  export type discussion_board_registered_usersWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    email?: string\n    AND?: discussion_board_registered_usersWhereInput | discussion_board_registered_usersWhereInput[]\n    OR?: discussion_board_registered_usersWhereInput[]\n    NOT?: discussion_board_registered_usersWhereInput | discussion_board_registered_usersWhereInput[]\n    password_hash?: StringFilter<\"discussion_board_registered_users\"> | string\n    display_name?: StringNullableFilter<\"discussion_board_registered_users\"> | string | null\n    email_verified?: BoolFilter<\"discussion_board_registered_users\"> | boolean\n    last_login_at?: DateTimeNullableFilter<\"discussion_board_registered_users\"> | Date | string | null\n    created_at?: DateTimeFilter<\"discussion_board_registered_users\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_registered_users\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_registered_users\"> | Date | string | null\n    discussion_board_moderators?: XOR<Discussion_board_moderatorsNullableScalarRelationFilter, discussion_board_moderatorsWhereInput> | null\n    discussion_board_topics?: Discussion_board_topicsListRelationFilter\n    discussion_board_comments?: Discussion_board_commentsListRelationFilter\n    discussion_board_votes?: Discussion_board_votesListRelationFilter\n    discussion_board_notifications?: Discussion_board_notificationsListRelationFilter\n    discussion_board_reports?: Discussion_board_reportsListRelationFilter\n  }, \"id\" | \"email\">\n\n  export type discussion_board_registered_usersOrderByWithAggregationInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    display_name?: SortOrderInput | SortOrder\n    email_verified?: SortOrder\n    last_login_at?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussion_board_registered_usersCountOrderByAggregateInput\n    _max?: discussion_board_registered_usersMaxOrderByAggregateInput\n    _min?: discussion_board_registered_usersMinOrderByAggregateInput\n  }\n\n  export type discussion_board_registered_usersScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_registered_usersScalarWhereWithAggregatesInput | discussion_board_registered_usersScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_registered_usersScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_registered_usersScalarWhereWithAggregatesInput | discussion_board_registered_usersScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_registered_users\"> | string\n    email?: StringWithAggregatesFilter<\"discussion_board_registered_users\"> | string\n    password_hash?: StringWithAggregatesFilter<\"discussion_board_registered_users\"> | string\n    display_name?: StringNullableWithAggregatesFilter<\"discussion_board_registered_users\"> | string | null\n    email_verified?: BoolWithAggregatesFilter<\"discussion_board_registered_users\"> | boolean\n    last_login_at?: DateTimeNullableWithAggregatesFilter<\"discussion_board_registered_users\"> | Date | string | null\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_registered_users\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_registered_users\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussion_board_registered_users\"> | Date | string | null\n  }\n\n  export type discussion_board_moderatorsWhereInput = {\n    AND?: discussion_board_moderatorsWhereInput | discussion_board_moderatorsWhereInput[]\n    OR?: discussion_board_moderatorsWhereInput[]\n    NOT?: discussion_board_moderatorsWhereInput | discussion_board_moderatorsWhereInput[]\n    id?: UuidFilter<\"discussion_board_moderators\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_moderators\"> | string\n    promoted_at?: DateTimeFilter<\"discussion_board_moderators\"> | Date | string\n    is_active_moderator?: BoolFilter<\"discussion_board_moderators\"> | boolean\n    moderation_notes?: StringNullableFilter<\"discussion_board_moderators\"> | string | null\n    created_at?: DateTimeFilter<\"discussion_board_moderators\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_moderators\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_moderators\"> | Date | string | null\n    user?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    discussion_board_reports?: Discussion_board_reportsListRelationFilter\n  }\n\n  export type discussion_board_moderatorsOrderByWithRelationInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    promoted_at?: SortOrder\n    is_active_moderator?: SortOrder\n    moderation_notes?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    user?: discussion_board_registered_usersOrderByWithRelationInput\n    discussion_board_reports?: discussion_board_reportsOrderByRelationAggregateInput\n  }\n\n  export type discussion_board_moderatorsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    discussion_board_registered_user_id?: string\n    AND?: discussion_board_moderatorsWhereInput | discussion_board_moderatorsWhereInput[]\n    OR?: discussion_board_moderatorsWhereInput[]\n    NOT?: discussion_board_moderatorsWhereInput | discussion_board_moderatorsWhereInput[]\n    promoted_at?: DateTimeFilter<\"discussion_board_moderators\"> | Date | string\n    is_active_moderator?: BoolFilter<\"discussion_board_moderators\"> | boolean\n    moderation_notes?: StringNullableFilter<\"discussion_board_moderators\"> | string | null\n    created_at?: DateTimeFilter<\"discussion_board_moderators\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_moderators\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_moderators\"> | Date | string | null\n    user?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    discussion_board_reports?: Discussion_board_reportsListRelationFilter\n  }, \"id\" | \"discussion_board_registered_user_id\">\n\n  export type discussion_board_moderatorsOrderByWithAggregationInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    promoted_at?: SortOrder\n    is_active_moderator?: SortOrder\n    moderation_notes?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussion_board_moderatorsCountOrderByAggregateInput\n    _max?: discussion_board_moderatorsMaxOrderByAggregateInput\n    _min?: discussion_board_moderatorsMinOrderByAggregateInput\n  }\n\n  export type discussion_board_moderatorsScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_moderatorsScalarWhereWithAggregatesInput | discussion_board_moderatorsScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_moderatorsScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_moderatorsScalarWhereWithAggregatesInput | discussion_board_moderatorsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_moderators\"> | string\n    discussion_board_registered_user_id?: UuidWithAggregatesFilter<\"discussion_board_moderators\"> | string\n    promoted_at?: DateTimeWithAggregatesFilter<\"discussion_board_moderators\"> | Date | string\n    is_active_moderator?: BoolWithAggregatesFilter<\"discussion_board_moderators\"> | boolean\n    moderation_notes?: StringNullableWithAggregatesFilter<\"discussion_board_moderators\"> | string | null\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_moderators\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_moderators\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussion_board_moderators\"> | Date | string | null\n  }\n\n  export type discussion_board_categoriesWhereInput = {\n    AND?: discussion_board_categoriesWhereInput | discussion_board_categoriesWhereInput[]\n    OR?: discussion_board_categoriesWhereInput[]\n    NOT?: discussion_board_categoriesWhereInput | discussion_board_categoriesWhereInput[]\n    id?: UuidFilter<\"discussion_board_categories\"> | string\n    name?: StringFilter<\"discussion_board_categories\"> | string\n    description?: StringNullableFilter<\"discussion_board_categories\"> | string | null\n    code?: StringFilter<\"discussion_board_categories\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_categories\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_categories\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_categories\"> | Date | string | null\n    discussion_board_topics?: Discussion_board_topicsListRelationFilter\n  }\n\n  export type discussion_board_categoriesOrderByWithRelationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrderInput | SortOrder\n    code?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    discussion_board_topics?: discussion_board_topicsOrderByRelationAggregateInput\n  }\n\n  export type discussion_board_categoriesWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    name?: string\n    code?: string\n    AND?: discussion_board_categoriesWhereInput | discussion_board_categoriesWhereInput[]\n    OR?: discussion_board_categoriesWhereInput[]\n    NOT?: discussion_board_categoriesWhereInput | discussion_board_categoriesWhereInput[]\n    description?: StringNullableFilter<\"discussion_board_categories\"> | string | null\n    created_at?: DateTimeFilter<\"discussion_board_categories\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_categories\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_categories\"> | Date | string | null\n    discussion_board_topics?: Discussion_board_topicsListRelationFilter\n  }, \"id\" | \"name\" | \"code\">\n\n  export type discussion_board_categoriesOrderByWithAggregationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrderInput | SortOrder\n    code?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussion_board_categoriesCountOrderByAggregateInput\n    _max?: discussion_board_categoriesMaxOrderByAggregateInput\n    _min?: discussion_board_categoriesMinOrderByAggregateInput\n  }\n\n  export type discussion_board_categoriesScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_categoriesScalarWhereWithAggregatesInput | discussion_board_categoriesScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_categoriesScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_categoriesScalarWhereWithAggregatesInput | discussion_board_categoriesScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_categories\"> | string\n    name?: StringWithAggregatesFilter<\"discussion_board_categories\"> | string\n    description?: StringNullableWithAggregatesFilter<\"discussion_board_categories\"> | string | null\n    code?: StringWithAggregatesFilter<\"discussion_board_categories\"> | string\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_categories\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_categories\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussion_board_categories\"> | Date | string | null\n  }\n\n  export type discussion_board_topicsWhereInput = {\n    AND?: discussion_board_topicsWhereInput | discussion_board_topicsWhereInput[]\n    OR?: discussion_board_topicsWhereInput[]\n    NOT?: discussion_board_topicsWhereInput | discussion_board_topicsWhereInput[]\n    id?: UuidFilter<\"discussion_board_topics\"> | string\n    discussion_board_category_id?: UuidFilter<\"discussion_board_topics\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_topics\"> | string\n    title?: StringFilter<\"discussion_board_topics\"> | string\n    body?: StringFilter<\"discussion_board_topics\"> | string\n    code?: StringFilter<\"discussion_board_topics\"> | string\n    status?: StringFilter<\"discussion_board_topics\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_topics\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_topics\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_topics\"> | Date | string | null\n    category?: XOR<Discussion_board_categoriesScalarRelationFilter, discussion_board_categoriesWhereInput>\n    author?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    discussion_board_comments?: Discussion_board_commentsListRelationFilter\n    discussion_board_votes?: Discussion_board_votesListRelationFilter\n    discussion_board_notifications?: Discussion_board_notificationsListRelationFilter\n  }\n\n  export type discussion_board_topicsOrderByWithRelationInput = {\n    id?: SortOrder\n    discussion_board_category_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    status?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    category?: discussion_board_categoriesOrderByWithRelationInput\n    author?: discussion_board_registered_usersOrderByWithRelationInput\n    discussion_board_comments?: discussion_board_commentsOrderByRelationAggregateInput\n    discussion_board_votes?: discussion_board_votesOrderByRelationAggregateInput\n    discussion_board_notifications?: discussion_board_notificationsOrderByRelationAggregateInput\n  }\n\n  export type discussion_board_topicsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    code?: string\n    AND?: discussion_board_topicsWhereInput | discussion_board_topicsWhereInput[]\n    OR?: discussion_board_topicsWhereInput[]\n    NOT?: discussion_board_topicsWhereInput | discussion_board_topicsWhereInput[]\n    discussion_board_category_id?: UuidFilter<\"discussion_board_topics\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_topics\"> | string\n    title?: StringFilter<\"discussion_board_topics\"> | string\n    body?: StringFilter<\"discussion_board_topics\"> | string\n    status?: StringFilter<\"discussion_board_topics\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_topics\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_topics\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_topics\"> | Date | string | null\n    category?: XOR<Discussion_board_categoriesScalarRelationFilter, discussion_board_categoriesWhereInput>\n    author?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    discussion_board_comments?: Discussion_board_commentsListRelationFilter\n    discussion_board_votes?: Discussion_board_votesListRelationFilter\n    discussion_board_notifications?: Discussion_board_notificationsListRelationFilter\n  }, \"id\" | \"code\">\n\n  export type discussion_board_topicsOrderByWithAggregationInput = {\n    id?: SortOrder\n    discussion_board_category_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    status?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussion_board_topicsCountOrderByAggregateInput\n    _max?: discussion_board_topicsMaxOrderByAggregateInput\n    _min?: discussion_board_topicsMinOrderByAggregateInput\n  }\n\n  export type discussion_board_topicsScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_topicsScalarWhereWithAggregatesInput | discussion_board_topicsScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_topicsScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_topicsScalarWhereWithAggregatesInput | discussion_board_topicsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_topics\"> | string\n    discussion_board_category_id?: UuidWithAggregatesFilter<\"discussion_board_topics\"> | string\n    discussion_board_registered_user_id?: UuidWithAggregatesFilter<\"discussion_board_topics\"> | string\n    title?: StringWithAggregatesFilter<\"discussion_board_topics\"> | string\n    body?: StringWithAggregatesFilter<\"discussion_board_topics\"> | string\n    code?: StringWithAggregatesFilter<\"discussion_board_topics\"> | string\n    status?: StringWithAggregatesFilter<\"discussion_board_topics\"> | string\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_topics\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_topics\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussion_board_topics\"> | Date | string | null\n  }\n\n  export type discussion_board_commentsWhereInput = {\n    AND?: discussion_board_commentsWhereInput | discussion_board_commentsWhereInput[]\n    OR?: discussion_board_commentsWhereInput[]\n    NOT?: discussion_board_commentsWhereInput | discussion_board_commentsWhereInput[]\n    id?: UuidFilter<\"discussion_board_comments\"> | string\n    discussion_board_topic_id?: UuidFilter<\"discussion_board_comments\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_comments\"> | string\n    parent_discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_comments\"> | string | null\n    body?: StringFilter<\"discussion_board_comments\"> | string\n    code?: StringFilter<\"discussion_board_comments\"> | string\n    is_deleted?: BoolFilter<\"discussion_board_comments\"> | boolean\n    created_at?: DateTimeFilter<\"discussion_board_comments\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_comments\"> | Date | string\n    topic?: XOR<Discussion_board_topicsScalarRelationFilter, discussion_board_topicsWhereInput>\n    author?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    parent?: XOR<Discussion_board_commentsNullableScalarRelationFilter, discussion_board_commentsWhereInput> | null\n    recursive?: Discussion_board_commentsListRelationFilter\n    discussion_board_votes?: Discussion_board_votesListRelationFilter\n    discussion_board_notifications?: Discussion_board_notificationsListRelationFilter\n  }\n\n  export type discussion_board_commentsOrderByWithRelationInput = {\n    id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    parent_discussion_board_comment_id?: SortOrderInput | SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    topic?: discussion_board_topicsOrderByWithRelationInput\n    author?: discussion_board_registered_usersOrderByWithRelationInput\n    parent?: discussion_board_commentsOrderByWithRelationInput\n    recursive?: discussion_board_commentsOrderByRelationAggregateInput\n    discussion_board_votes?: discussion_board_votesOrderByRelationAggregateInput\n    discussion_board_notifications?: discussion_board_notificationsOrderByRelationAggregateInput\n  }\n\n  export type discussion_board_commentsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    code?: string\n    AND?: discussion_board_commentsWhereInput | discussion_board_commentsWhereInput[]\n    OR?: discussion_board_commentsWhereInput[]\n    NOT?: discussion_board_commentsWhereInput | discussion_board_commentsWhereInput[]\n    discussion_board_topic_id?: UuidFilter<\"discussion_board_comments\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_comments\"> | string\n    parent_discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_comments\"> | string | null\n    body?: StringFilter<\"discussion_board_comments\"> | string\n    is_deleted?: BoolFilter<\"discussion_board_comments\"> | boolean\n    created_at?: DateTimeFilter<\"discussion_board_comments\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_comments\"> | Date | string\n    topic?: XOR<Discussion_board_topicsScalarRelationFilter, discussion_board_topicsWhereInput>\n    author?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    parent?: XOR<Discussion_board_commentsNullableScalarRelationFilter, discussion_board_commentsWhereInput> | null\n    recursive?: Discussion_board_commentsListRelationFilter\n    discussion_board_votes?: Discussion_board_votesListRelationFilter\n    discussion_board_notifications?: Discussion_board_notificationsListRelationFilter\n  }, \"id\" | \"code\">\n\n  export type discussion_board_commentsOrderByWithAggregationInput = {\n    id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    parent_discussion_board_comment_id?: SortOrderInput | SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussion_board_commentsCountOrderByAggregateInput\n    _max?: discussion_board_commentsMaxOrderByAggregateInput\n    _min?: discussion_board_commentsMinOrderByAggregateInput\n  }\n\n  export type discussion_board_commentsScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_commentsScalarWhereWithAggregatesInput | discussion_board_commentsScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_commentsScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_commentsScalarWhereWithAggregatesInput | discussion_board_commentsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_comments\"> | string\n    discussion_board_topic_id?: UuidWithAggregatesFilter<\"discussion_board_comments\"> | string\n    discussion_board_registered_user_id?: UuidWithAggregatesFilter<\"discussion_board_comments\"> | string\n    parent_discussion_board_comment_id?: UuidNullableWithAggregatesFilter<\"discussion_board_comments\"> | string | null\n    body?: StringWithAggregatesFilter<\"discussion_board_comments\"> | string\n    code?: StringWithAggregatesFilter<\"discussion_board_comments\"> | string\n    is_deleted?: BoolWithAggregatesFilter<\"discussion_board_comments\"> | boolean\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_comments\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_comments\"> | Date | string\n  }\n\n  export type discussion_board_votesWhereInput = {\n    AND?: discussion_board_votesWhereInput | discussion_board_votesWhereInput[]\n    OR?: discussion_board_votesWhereInput[]\n    NOT?: discussion_board_votesWhereInput | discussion_board_votesWhereInput[]\n    id?: UuidFilter<\"discussion_board_votes\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_votes\"> | string\n    discussion_board_topic_id?: UuidNullableFilter<\"discussion_board_votes\"> | string | null\n    discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_votes\"> | string | null\n    vote_type?: StringFilter<\"discussion_board_votes\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_votes\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_votes\"> | Date | string\n    user?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    topic?: XOR<Discussion_board_topicsNullableScalarRelationFilter, discussion_board_topicsWhereInput> | null\n    comment?: XOR<Discussion_board_commentsNullableScalarRelationFilter, discussion_board_commentsWhereInput> | null\n  }\n\n  export type discussion_board_votesOrderByWithRelationInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrderInput | SortOrder\n    discussion_board_comment_id?: SortOrderInput | SortOrder\n    vote_type?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    user?: discussion_board_registered_usersOrderByWithRelationInput\n    topic?: discussion_board_topicsOrderByWithRelationInput\n    comment?: discussion_board_commentsOrderByWithRelationInput\n  }\n\n  export type discussion_board_votesWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    discussion_board_registered_user_id_discussion_board_topic_id?: discussion_board_votesDiscussion_board_registered_user_idDiscussion_board_topic_idCompoundUniqueInput\n    discussion_board_registered_user_id_discussion_board_comment_id?: discussion_board_votesDiscussion_board_registered_user_idDiscussion_board_comment_idCompoundUniqueInput\n    AND?: discussion_board_votesWhereInput | discussion_board_votesWhereInput[]\n    OR?: discussion_board_votesWhereInput[]\n    NOT?: discussion_board_votesWhereInput | discussion_board_votesWhereInput[]\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_votes\"> | string\n    discussion_board_topic_id?: UuidNullableFilter<\"discussion_board_votes\"> | string | null\n    discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_votes\"> | string | null\n    vote_type?: StringFilter<\"discussion_board_votes\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_votes\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_votes\"> | Date | string\n    user?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    topic?: XOR<Discussion_board_topicsNullableScalarRelationFilter, discussion_board_topicsWhereInput> | null\n    comment?: XOR<Discussion_board_commentsNullableScalarRelationFilter, discussion_board_commentsWhereInput> | null\n  }, \"id\" | \"discussion_board_registered_user_id_discussion_board_topic_id\" | \"discussion_board_registered_user_id_discussion_board_comment_id\">\n\n  export type discussion_board_votesOrderByWithAggregationInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrderInput | SortOrder\n    discussion_board_comment_id?: SortOrderInput | SortOrder\n    vote_type?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussion_board_votesCountOrderByAggregateInput\n    _max?: discussion_board_votesMaxOrderByAggregateInput\n    _min?: discussion_board_votesMinOrderByAggregateInput\n  }\n\n  export type discussion_board_votesScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_votesScalarWhereWithAggregatesInput | discussion_board_votesScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_votesScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_votesScalarWhereWithAggregatesInput | discussion_board_votesScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_votes\"> | string\n    discussion_board_registered_user_id?: UuidWithAggregatesFilter<\"discussion_board_votes\"> | string\n    discussion_board_topic_id?: UuidNullableWithAggregatesFilter<\"discussion_board_votes\"> | string | null\n    discussion_board_comment_id?: UuidNullableWithAggregatesFilter<\"discussion_board_votes\"> | string | null\n    vote_type?: StringWithAggregatesFilter<\"discussion_board_votes\"> | string\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_votes\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_votes\"> | Date | string\n  }\n\n  export type discussion_board_notificationsWhereInput = {\n    AND?: discussion_board_notificationsWhereInput | discussion_board_notificationsWhereInput[]\n    OR?: discussion_board_notificationsWhereInput[]\n    NOT?: discussion_board_notificationsWhereInput | discussion_board_notificationsWhereInput[]\n    id?: UuidFilter<\"discussion_board_notifications\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_notifications\"> | string\n    discussion_board_topic_id?: UuidNullableFilter<\"discussion_board_notifications\"> | string | null\n    discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_notifications\"> | string | null\n    notification_type?: StringFilter<\"discussion_board_notifications\"> | string\n    title?: StringFilter<\"discussion_board_notifications\"> | string\n    message?: StringFilter<\"discussion_board_notifications\"> | string\n    is_read?: BoolFilter<\"discussion_board_notifications\"> | boolean\n    created_at?: DateTimeFilter<\"discussion_board_notifications\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_notifications\"> | Date | string\n    user?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    topic?: XOR<Discussion_board_topicsNullableScalarRelationFilter, discussion_board_topicsWhereInput> | null\n    comment?: XOR<Discussion_board_commentsNullableScalarRelationFilter, discussion_board_commentsWhereInput> | null\n  }\n\n  export type discussion_board_notificationsOrderByWithRelationInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrderInput | SortOrder\n    discussion_board_comment_id?: SortOrderInput | SortOrder\n    notification_type?: SortOrder\n    title?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    user?: discussion_board_registered_usersOrderByWithRelationInput\n    topic?: discussion_board_topicsOrderByWithRelationInput\n    comment?: discussion_board_commentsOrderByWithRelationInput\n  }\n\n  export type discussion_board_notificationsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussion_board_notificationsWhereInput | discussion_board_notificationsWhereInput[]\n    OR?: discussion_board_notificationsWhereInput[]\n    NOT?: discussion_board_notificationsWhereInput | discussion_board_notificationsWhereInput[]\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_notifications\"> | string\n    discussion_board_topic_id?: UuidNullableFilter<\"discussion_board_notifications\"> | string | null\n    discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_notifications\"> | string | null\n    notification_type?: StringFilter<\"discussion_board_notifications\"> | string\n    title?: StringFilter<\"discussion_board_notifications\"> | string\n    message?: StringFilter<\"discussion_board_notifications\"> | string\n    is_read?: BoolFilter<\"discussion_board_notifications\"> | boolean\n    created_at?: DateTimeFilter<\"discussion_board_notifications\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_notifications\"> | Date | string\n    user?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    topic?: XOR<Discussion_board_topicsNullableScalarRelationFilter, discussion_board_topicsWhereInput> | null\n    comment?: XOR<Discussion_board_commentsNullableScalarRelationFilter, discussion_board_commentsWhereInput> | null\n  }, \"id\">\n\n  export type discussion_board_notificationsOrderByWithAggregationInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrderInput | SortOrder\n    discussion_board_comment_id?: SortOrderInput | SortOrder\n    notification_type?: SortOrder\n    title?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussion_board_notificationsCountOrderByAggregateInput\n    _max?: discussion_board_notificationsMaxOrderByAggregateInput\n    _min?: discussion_board_notificationsMinOrderByAggregateInput\n  }\n\n  export type discussion_board_notificationsScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_notificationsScalarWhereWithAggregatesInput | discussion_board_notificationsScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_notificationsScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_notificationsScalarWhereWithAggregatesInput | discussion_board_notificationsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_notifications\"> | string\n    discussion_board_registered_user_id?: UuidWithAggregatesFilter<\"discussion_board_notifications\"> | string\n    discussion_board_topic_id?: UuidNullableWithAggregatesFilter<\"discussion_board_notifications\"> | string | null\n    discussion_board_comment_id?: UuidNullableWithAggregatesFilter<\"discussion_board_notifications\"> | string | null\n    notification_type?: StringWithAggregatesFilter<\"discussion_board_notifications\"> | string\n    title?: StringWithAggregatesFilter<\"discussion_board_notifications\"> | string\n    message?: StringWithAggregatesFilter<\"discussion_board_notifications\"> | string\n    is_read?: BoolWithAggregatesFilter<\"discussion_board_notifications\"> | boolean\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_notifications\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_notifications\"> | Date | string\n  }\n\n  export type discussion_board_reportsWhereInput = {\n    AND?: discussion_board_reportsWhereInput | discussion_board_reportsWhereInput[]\n    OR?: discussion_board_reportsWhereInput[]\n    NOT?: discussion_board_reportsWhereInput | discussion_board_reportsWhereInput[]\n    id?: UuidFilter<\"discussion_board_reports\"> | string\n    reporter_id?: UuidFilter<\"discussion_board_reports\"> | string\n    assigned_moderator_id?: UuidNullableFilter<\"discussion_board_reports\"> | string | null\n    reported_content_type?: StringFilter<\"discussion_board_reports\"> | string\n    reported_content_id?: UuidFilter<\"discussion_board_reports\"> | string\n    reason?: StringFilter<\"discussion_board_reports\"> | string\n    description?: StringNullableFilter<\"discussion_board_reports\"> | string | null\n    status?: StringFilter<\"discussion_board_reports\"> | string\n    resolution?: StringNullableFilter<\"discussion_board_reports\"> | string | null\n    created_at?: DateTimeFilter<\"discussion_board_reports\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_reports\"> | Date | string\n    reporter?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    assignedModerator?: XOR<Discussion_board_moderatorsNullableScalarRelationFilter, discussion_board_moderatorsWhereInput> | null\n  }\n\n  export type discussion_board_reportsOrderByWithRelationInput = {\n    id?: SortOrder\n    reporter_id?: SortOrder\n    assigned_moderator_id?: SortOrderInput | SortOrder\n    reported_content_type?: SortOrder\n    reported_content_id?: SortOrder\n    reason?: SortOrder\n    description?: SortOrderInput | SortOrder\n    status?: SortOrder\n    resolution?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    reporter?: discussion_board_registered_usersOrderByWithRelationInput\n    assignedModerator?: discussion_board_moderatorsOrderByWithRelationInput\n  }\n\n  export type discussion_board_reportsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussion_board_reportsWhereInput | discussion_board_reportsWhereInput[]\n    OR?: discussion_board_reportsWhereInput[]\n    NOT?: discussion_board_reportsWhereInput | discussion_board_reportsWhereInput[]\n    reporter_id?: UuidFilter<\"discussion_board_reports\"> | string\n    assigned_moderator_id?: UuidNullableFilter<\"discussion_board_reports\"> | string | null\n    reported_content_type?: StringFilter<\"discussion_board_reports\"> | string\n    reported_content_id?: UuidFilter<\"discussion_board_reports\"> | string\n    reason?: StringFilter<\"discussion_board_reports\"> | string\n    description?: StringNullableFilter<\"discussion_board_reports\"> | string | null\n    status?: StringFilter<\"discussion_board_reports\"> | string\n    resolution?: StringNullableFilter<\"discussion_board_reports\"> | string | null\n    created_at?: DateTimeFilter<\"discussion_board_reports\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_reports\"> | Date | string\n    reporter?: XOR<Discussion_board_registered_usersScalarRelationFilter, discussion_board_registered_usersWhereInput>\n    assignedModerator?: XOR<Discussion_board_moderatorsNullableScalarRelationFilter, discussion_board_moderatorsWhereInput> | null\n  }, \"id\">\n\n  export type discussion_board_reportsOrderByWithAggregationInput = {\n    id?: SortOrder\n    reporter_id?: SortOrder\n    assigned_moderator_id?: SortOrderInput | SortOrder\n    reported_content_type?: SortOrder\n    reported_content_id?: SortOrder\n    reason?: SortOrder\n    description?: SortOrderInput | SortOrder\n    status?: SortOrder\n    resolution?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussion_board_reportsCountOrderByAggregateInput\n    _max?: discussion_board_reportsMaxOrderByAggregateInput\n    _min?: discussion_board_reportsMinOrderByAggregateInput\n  }\n\n  export type discussion_board_reportsScalarWhereWithAggregatesInput = {\n    AND?: discussion_board_reportsScalarWhereWithAggregatesInput | discussion_board_reportsScalarWhereWithAggregatesInput[]\n    OR?: discussion_board_reportsScalarWhereWithAggregatesInput[]\n    NOT?: discussion_board_reportsScalarWhereWithAggregatesInput | discussion_board_reportsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussion_board_reports\"> | string\n    reporter_id?: UuidWithAggregatesFilter<\"discussion_board_reports\"> | string\n    assigned_moderator_id?: UuidNullableWithAggregatesFilter<\"discussion_board_reports\"> | string | null\n    reported_content_type?: StringWithAggregatesFilter<\"discussion_board_reports\"> | string\n    reported_content_id?: UuidWithAggregatesFilter<\"discussion_board_reports\"> | string\n    reason?: StringWithAggregatesFilter<\"discussion_board_reports\"> | string\n    description?: StringNullableWithAggregatesFilter<\"discussion_board_reports\"> | string | null\n    status?: StringWithAggregatesFilter<\"discussion_board_reports\"> | string\n    resolution?: StringNullableWithAggregatesFilter<\"discussion_board_reports\"> | string | null\n    created_at?: DateTimeWithAggregatesFilter<\"discussion_board_reports\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussion_board_reports\"> | Date | string\n  }\n\n  export type discussion_board_guest_usersCreateInput = {\n    id: string\n    ip_address: string\n    user_agent: string\n    session_token?: string | null\n    last_accessed_at: Date | string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_guest_usersUncheckedCreateInput = {\n    id: string\n    ip_address: string\n    user_agent: string\n    session_token?: string | null\n    last_accessed_at: Date | string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_guest_usersUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ip_address?: StringFieldUpdateOperationsInput | string\n    user_agent?: StringFieldUpdateOperationsInput | string\n    session_token?: NullableStringFieldUpdateOperationsInput | string | null\n    last_accessed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_guest_usersUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ip_address?: StringFieldUpdateOperationsInput | string\n    user_agent?: StringFieldUpdateOperationsInput | string\n    session_token?: NullableStringFieldUpdateOperationsInput | string | null\n    last_accessed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_guest_usersCreateManyInput = {\n    id: string\n    ip_address: string\n    user_agent: string\n    session_token?: string | null\n    last_accessed_at: Date | string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_guest_usersUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ip_address?: StringFieldUpdateOperationsInput | string\n    user_agent?: StringFieldUpdateOperationsInput | string\n    session_token?: NullableStringFieldUpdateOperationsInput | string | null\n    last_accessed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_guest_usersUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ip_address?: StringFieldUpdateOperationsInput | string\n    user_agent?: StringFieldUpdateOperationsInput | string\n    session_token?: NullableStringFieldUpdateOperationsInput | string | null\n    last_accessed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_registered_usersCreateInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersCreateManyInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_registered_usersUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_moderatorsCreateInput = {\n    id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_moderatorsInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutAssignedModeratorInput\n  }\n\n  export type discussion_board_moderatorsUncheckedCreateInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutAssignedModeratorInput\n  }\n\n  export type discussion_board_moderatorsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_moderatorsNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutAssignedModeratorNestedInput\n  }\n\n  export type discussion_board_moderatorsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutAssignedModeratorNestedInput\n  }\n\n  export type discussion_board_moderatorsCreateManyInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_moderatorsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_moderatorsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_categoriesCreateInput = {\n    id: string\n    name: string\n    description?: string | null\n    code: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutCategoryInput\n  }\n\n  export type discussion_board_categoriesUncheckedCreateInput = {\n    id: string\n    name: string\n    description?: string | null\n    code: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutCategoryInput\n  }\n\n  export type discussion_board_categoriesUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    code?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutCategoryNestedInput\n  }\n\n  export type discussion_board_categoriesUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    code?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutCategoryNestedInput\n  }\n\n  export type discussion_board_categoriesCreateManyInput = {\n    id: string\n    name: string\n    description?: string | null\n    code: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_categoriesUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    code?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_categoriesUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    code?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_topicsCreateInput = {\n    id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    category: discussion_board_categoriesCreateNestedOneWithoutDiscussion_board_topicsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_topicsInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateInput = {\n    id: string\n    discussion_board_category_id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    category?: discussion_board_categoriesUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsCreateManyInput = {\n    id: string\n    discussion_board_category_id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_topicsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_topicsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_commentsCreateInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput\n    parent?: discussion_board_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussion_board_commentsCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    parent?: discussion_board_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussion_board_commentsUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsCreateManyInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_commentsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesCreateInput = {\n    id: string\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_votesInput\n    topic?: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_votesInput\n    comment?: discussion_board_commentsCreateNestedOneWithoutDiscussion_board_votesInput\n  }\n\n  export type discussion_board_votesUncheckedCreateInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_votesNestedInput\n    topic?: discussion_board_topicsUpdateOneWithoutDiscussion_board_votesNestedInput\n    comment?: discussion_board_commentsUpdateOneWithoutDiscussion_board_votesNestedInput\n  }\n\n  export type discussion_board_votesUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesCreateManyInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsCreateInput = {\n    id: string\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_notificationsInput\n    topic?: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_notificationsInput\n    comment?: discussion_board_commentsCreateNestedOneWithoutDiscussion_board_notificationsInput\n  }\n\n  export type discussion_board_notificationsUncheckedCreateInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_notificationsNestedInput\n    topic?: discussion_board_topicsUpdateOneWithoutDiscussion_board_notificationsNestedInput\n    comment?: discussion_board_commentsUpdateOneWithoutDiscussion_board_notificationsNestedInput\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsCreateManyInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsCreateInput = {\n    id: string\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    reporter: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_reportsInput\n    assignedModerator?: discussion_board_moderatorsCreateNestedOneWithoutDiscussion_board_reportsInput\n  }\n\n  export type discussion_board_reportsUncheckedCreateInput = {\n    id: string\n    reporter_id: string\n    assigned_moderator_id?: string | null\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_reportsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    reporter?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_reportsNestedInput\n    assignedModerator?: discussion_board_moderatorsUpdateOneWithoutDiscussion_board_reportsNestedInput\n  }\n\n  export type discussion_board_reportsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reporter_id?: StringFieldUpdateOperationsInput | string\n    assigned_moderator_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsCreateManyInput = {\n    id: string\n    reporter_id: string\n    assigned_moderator_id?: string | null\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_reportsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reporter_id?: StringFieldUpdateOperationsInput | string\n    assigned_moderator_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type UuidFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidFilter<$PrismaModel> | string\n  }\n\n  export type StringFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringFilter<$PrismaModel> | string\n  }\n\n  export type StringNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type DateTimeFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeFilter<$PrismaModel> | Date | string\n  }\n\n  export type DateTimeNullableFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null\n  }\n\n  export type SortOrderInput = {\n    sort: SortOrder\n    nulls?: NullsOrder\n  }\n\n  export type discussion_board_guest_usersCountOrderByAggregateInput = {\n    id?: SortOrder\n    ip_address?: SortOrder\n    user_agent?: SortOrder\n    session_token?: SortOrder\n    last_accessed_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_guest_usersMaxOrderByAggregateInput = {\n    id?: SortOrder\n    ip_address?: SortOrder\n    user_agent?: SortOrder\n    session_token?: SortOrder\n    last_accessed_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_guest_usersMinOrderByAggregateInput = {\n    id?: SortOrder\n    ip_address?: SortOrder\n    user_agent?: SortOrder\n    session_token?: SortOrder\n    last_accessed_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type UuidWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type StringWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedDateTimeFilter<$PrismaModel>\n    _max?: NestedDateTimeFilter<$PrismaModel>\n  }\n\n  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedDateTimeNullableFilter<$PrismaModel>\n    _max?: NestedDateTimeNullableFilter<$PrismaModel>\n  }\n\n  export type BoolFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolFilter<$PrismaModel> | boolean\n  }\n\n  export type Discussion_board_moderatorsNullableScalarRelationFilter = {\n    is?: discussion_board_moderatorsWhereInput | null\n    isNot?: discussion_board_moderatorsWhereInput | null\n  }\n\n  export type Discussion_board_topicsListRelationFilter = {\n    every?: discussion_board_topicsWhereInput\n    some?: discussion_board_topicsWhereInput\n    none?: discussion_board_topicsWhereInput\n  }\n\n  export type Discussion_board_commentsListRelationFilter = {\n    every?: discussion_board_commentsWhereInput\n    some?: discussion_board_commentsWhereInput\n    none?: discussion_board_commentsWhereInput\n  }\n\n  export type Discussion_board_votesListRelationFilter = {\n    every?: discussion_board_votesWhereInput\n    some?: discussion_board_votesWhereInput\n    none?: discussion_board_votesWhereInput\n  }\n\n  export type Discussion_board_notificationsListRelationFilter = {\n    every?: discussion_board_notificationsWhereInput\n    some?: discussion_board_notificationsWhereInput\n    none?: discussion_board_notificationsWhereInput\n  }\n\n  export type Discussion_board_reportsListRelationFilter = {\n    every?: discussion_board_reportsWhereInput\n    some?: discussion_board_reportsWhereInput\n    none?: discussion_board_reportsWhereInput\n  }\n\n  export type discussion_board_topicsOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussion_board_commentsOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussion_board_votesOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussion_board_notificationsOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussion_board_reportsOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussion_board_registered_usersCountOrderByAggregateInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    display_name?: SortOrder\n    email_verified?: SortOrder\n    last_login_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_registered_usersMaxOrderByAggregateInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    display_name?: SortOrder\n    email_verified?: SortOrder\n    last_login_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_registered_usersMinOrderByAggregateInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    display_name?: SortOrder\n    email_verified?: SortOrder\n    last_login_at?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type BoolWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedBoolFilter<$PrismaModel>\n    _max?: NestedBoolFilter<$PrismaModel>\n  }\n\n  export type Discussion_board_registered_usersScalarRelationFilter = {\n    is?: discussion_board_registered_usersWhereInput\n    isNot?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_moderatorsCountOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    promoted_at?: SortOrder\n    is_active_moderator?: SortOrder\n    moderation_notes?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_moderatorsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    promoted_at?: SortOrder\n    is_active_moderator?: SortOrder\n    moderation_notes?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_moderatorsMinOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    promoted_at?: SortOrder\n    is_active_moderator?: SortOrder\n    moderation_notes?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_categoriesCountOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrder\n    code?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_categoriesMaxOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrder\n    code?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_categoriesMinOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrder\n    code?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type Discussion_board_categoriesScalarRelationFilter = {\n    is?: discussion_board_categoriesWhereInput\n    isNot?: discussion_board_categoriesWhereInput\n  }\n\n  export type discussion_board_topicsCountOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_category_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    status?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_topicsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_category_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    status?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussion_board_topicsMinOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_category_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    status?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type UuidNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type Discussion_board_topicsScalarRelationFilter = {\n    is?: discussion_board_topicsWhereInput\n    isNot?: discussion_board_topicsWhereInput\n  }\n\n  export type Discussion_board_commentsNullableScalarRelationFilter = {\n    is?: discussion_board_commentsWhereInput | null\n    isNot?: discussion_board_commentsWhereInput | null\n  }\n\n  export type discussion_board_commentsCountOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    parent_discussion_board_comment_id?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_commentsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    parent_discussion_board_comment_id?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_commentsMinOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    parent_discussion_board_comment_id?: SortOrder\n    body?: SortOrder\n    code?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type Discussion_board_topicsNullableScalarRelationFilter = {\n    is?: discussion_board_topicsWhereInput | null\n    isNot?: discussion_board_topicsWhereInput | null\n  }\n\n  export type discussion_board_votesDiscussion_board_registered_user_idDiscussion_board_topic_idCompoundUniqueInput = {\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id: string\n  }\n\n  export type discussion_board_votesDiscussion_board_registered_user_idDiscussion_board_comment_idCompoundUniqueInput = {\n    discussion_board_registered_user_id: string\n    discussion_board_comment_id: string\n  }\n\n  export type discussion_board_votesCountOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_comment_id?: SortOrder\n    vote_type?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_votesMaxOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_comment_id?: SortOrder\n    vote_type?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_votesMinOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_comment_id?: SortOrder\n    vote_type?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_notificationsCountOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_comment_id?: SortOrder\n    notification_type?: SortOrder\n    title?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_notificationsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_comment_id?: SortOrder\n    notification_type?: SortOrder\n    title?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_notificationsMinOrderByAggregateInput = {\n    id?: SortOrder\n    discussion_board_registered_user_id?: SortOrder\n    discussion_board_topic_id?: SortOrder\n    discussion_board_comment_id?: SortOrder\n    notification_type?: SortOrder\n    title?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_reportsCountOrderByAggregateInput = {\n    id?: SortOrder\n    reporter_id?: SortOrder\n    assigned_moderator_id?: SortOrder\n    reported_content_type?: SortOrder\n    reported_content_id?: SortOrder\n    reason?: SortOrder\n    description?: SortOrder\n    status?: SortOrder\n    resolution?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_reportsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    reporter_id?: SortOrder\n    assigned_moderator_id?: SortOrder\n    reported_content_type?: SortOrder\n    reported_content_id?: SortOrder\n    reason?: SortOrder\n    description?: SortOrder\n    status?: SortOrder\n    resolution?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussion_board_reportsMinOrderByAggregateInput = {\n    id?: SortOrder\n    reporter_id?: SortOrder\n    assigned_moderator_id?: SortOrder\n    reported_content_type?: SortOrder\n    reported_content_id?: SortOrder\n    reason?: SortOrder\n    description?: SortOrder\n    status?: SortOrder\n    resolution?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type StringFieldUpdateOperationsInput = {\n    set?: string\n  }\n\n  export type NullableStringFieldUpdateOperationsInput = {\n    set?: string | null\n  }\n\n  export type DateTimeFieldUpdateOperationsInput = {\n    set?: Date | string\n  }\n\n  export type NullableDateTimeFieldUpdateOperationsInput = {\n    set?: Date | string | null\n  }\n\n  export type discussion_board_moderatorsCreateNestedOneWithoutUserInput = {\n    create?: XOR<discussion_board_moderatorsCreateWithoutUserInput, discussion_board_moderatorsUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussion_board_moderatorsCreateOrConnectWithoutUserInput\n    connect?: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  export type discussion_board_topicsCreateNestedManyWithoutAuthorInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutAuthorInput, discussion_board_topicsUncheckedCreateWithoutAuthorInput> | discussion_board_topicsCreateWithoutAuthorInput[] | discussion_board_topicsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutAuthorInput | discussion_board_topicsCreateOrConnectWithoutAuthorInput[]\n    createMany?: discussion_board_topicsCreateManyAuthorInputEnvelope\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n  }\n\n  export type discussion_board_commentsCreateNestedManyWithoutAuthorInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutAuthorInput, discussion_board_commentsUncheckedCreateWithoutAuthorInput> | discussion_board_commentsCreateWithoutAuthorInput[] | discussion_board_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutAuthorInput | discussion_board_commentsCreateOrConnectWithoutAuthorInput[]\n    createMany?: discussion_board_commentsCreateManyAuthorInputEnvelope\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n  }\n\n  export type discussion_board_votesCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussion_board_votesCreateWithoutUserInput, discussion_board_votesUncheckedCreateWithoutUserInput> | discussion_board_votesCreateWithoutUserInput[] | discussion_board_votesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutUserInput | discussion_board_votesCreateOrConnectWithoutUserInput[]\n    createMany?: discussion_board_votesCreateManyUserInputEnvelope\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n  }\n\n  export type discussion_board_notificationsCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutUserInput, discussion_board_notificationsUncheckedCreateWithoutUserInput> | discussion_board_notificationsCreateWithoutUserInput[] | discussion_board_notificationsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutUserInput | discussion_board_notificationsCreateOrConnectWithoutUserInput[]\n    createMany?: discussion_board_notificationsCreateManyUserInputEnvelope\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n  }\n\n  export type discussion_board_reportsCreateNestedManyWithoutReporterInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutReporterInput, discussion_board_reportsUncheckedCreateWithoutReporterInput> | discussion_board_reportsCreateWithoutReporterInput[] | discussion_board_reportsUncheckedCreateWithoutReporterInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutReporterInput | discussion_board_reportsCreateOrConnectWithoutReporterInput[]\n    createMany?: discussion_board_reportsCreateManyReporterInputEnvelope\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n  }\n\n  export type discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput = {\n    create?: XOR<discussion_board_moderatorsCreateWithoutUserInput, discussion_board_moderatorsUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussion_board_moderatorsCreateOrConnectWithoutUserInput\n    connect?: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutAuthorInput, discussion_board_topicsUncheckedCreateWithoutAuthorInput> | discussion_board_topicsCreateWithoutAuthorInput[] | discussion_board_topicsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutAuthorInput | discussion_board_topicsCreateOrConnectWithoutAuthorInput[]\n    createMany?: discussion_board_topicsCreateManyAuthorInputEnvelope\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n  }\n\n  export type discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutAuthorInput, discussion_board_commentsUncheckedCreateWithoutAuthorInput> | discussion_board_commentsCreateWithoutAuthorInput[] | discussion_board_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutAuthorInput | discussion_board_commentsCreateOrConnectWithoutAuthorInput[]\n    createMany?: discussion_board_commentsCreateManyAuthorInputEnvelope\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n  }\n\n  export type discussion_board_votesUncheckedCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussion_board_votesCreateWithoutUserInput, discussion_board_votesUncheckedCreateWithoutUserInput> | discussion_board_votesCreateWithoutUserInput[] | discussion_board_votesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutUserInput | discussion_board_votesCreateOrConnectWithoutUserInput[]\n    createMany?: discussion_board_votesCreateManyUserInputEnvelope\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n  }\n\n  export type discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutUserInput, discussion_board_notificationsUncheckedCreateWithoutUserInput> | discussion_board_notificationsCreateWithoutUserInput[] | discussion_board_notificationsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutUserInput | discussion_board_notificationsCreateOrConnectWithoutUserInput[]\n    createMany?: discussion_board_notificationsCreateManyUserInputEnvelope\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n  }\n\n  export type discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutReporterInput, discussion_board_reportsUncheckedCreateWithoutReporterInput> | discussion_board_reportsCreateWithoutReporterInput[] | discussion_board_reportsUncheckedCreateWithoutReporterInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutReporterInput | discussion_board_reportsCreateOrConnectWithoutReporterInput[]\n    createMany?: discussion_board_reportsCreateManyReporterInputEnvelope\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n  }\n\n  export type BoolFieldUpdateOperationsInput = {\n    set?: boolean\n  }\n\n  export type discussion_board_moderatorsUpdateOneWithoutUserNestedInput = {\n    create?: XOR<discussion_board_moderatorsCreateWithoutUserInput, discussion_board_moderatorsUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussion_board_moderatorsCreateOrConnectWithoutUserInput\n    upsert?: discussion_board_moderatorsUpsertWithoutUserInput\n    disconnect?: discussion_board_moderatorsWhereInput | boolean\n    delete?: discussion_board_moderatorsWhereInput | boolean\n    connect?: discussion_board_moderatorsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_moderatorsUpdateToOneWithWhereWithoutUserInput, discussion_board_moderatorsUpdateWithoutUserInput>, discussion_board_moderatorsUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussion_board_topicsUpdateManyWithoutAuthorNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutAuthorInput, discussion_board_topicsUncheckedCreateWithoutAuthorInput> | discussion_board_topicsCreateWithoutAuthorInput[] | discussion_board_topicsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutAuthorInput | discussion_board_topicsCreateOrConnectWithoutAuthorInput[]\n    upsert?: discussion_board_topicsUpsertWithWhereUniqueWithoutAuthorInput | discussion_board_topicsUpsertWithWhereUniqueWithoutAuthorInput[]\n    createMany?: discussion_board_topicsCreateManyAuthorInputEnvelope\n    set?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    disconnect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    delete?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    update?: discussion_board_topicsUpdateWithWhereUniqueWithoutAuthorInput | discussion_board_topicsUpdateWithWhereUniqueWithoutAuthorInput[]\n    updateMany?: discussion_board_topicsUpdateManyWithWhereWithoutAuthorInput | discussion_board_topicsUpdateManyWithWhereWithoutAuthorInput[]\n    deleteMany?: discussion_board_topicsScalarWhereInput | discussion_board_topicsScalarWhereInput[]\n  }\n\n  export type discussion_board_commentsUpdateManyWithoutAuthorNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutAuthorInput, discussion_board_commentsUncheckedCreateWithoutAuthorInput> | discussion_board_commentsCreateWithoutAuthorInput[] | discussion_board_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutAuthorInput | discussion_board_commentsCreateOrConnectWithoutAuthorInput[]\n    upsert?: discussion_board_commentsUpsertWithWhereUniqueWithoutAuthorInput | discussion_board_commentsUpsertWithWhereUniqueWithoutAuthorInput[]\n    createMany?: discussion_board_commentsCreateManyAuthorInputEnvelope\n    set?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    disconnect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    delete?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    update?: discussion_board_commentsUpdateWithWhereUniqueWithoutAuthorInput | discussion_board_commentsUpdateWithWhereUniqueWithoutAuthorInput[]\n    updateMany?: discussion_board_commentsUpdateManyWithWhereWithoutAuthorInput | discussion_board_commentsUpdateManyWithWhereWithoutAuthorInput[]\n    deleteMany?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n  }\n\n  export type discussion_board_votesUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussion_board_votesCreateWithoutUserInput, discussion_board_votesUncheckedCreateWithoutUserInput> | discussion_board_votesCreateWithoutUserInput[] | discussion_board_votesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutUserInput | discussion_board_votesCreateOrConnectWithoutUserInput[]\n    upsert?: discussion_board_votesUpsertWithWhereUniqueWithoutUserInput | discussion_board_votesUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussion_board_votesCreateManyUserInputEnvelope\n    set?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    disconnect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    delete?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    update?: discussion_board_votesUpdateWithWhereUniqueWithoutUserInput | discussion_board_votesUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussion_board_votesUpdateManyWithWhereWithoutUserInput | discussion_board_votesUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n  }\n\n  export type discussion_board_notificationsUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutUserInput, discussion_board_notificationsUncheckedCreateWithoutUserInput> | discussion_board_notificationsCreateWithoutUserInput[] | discussion_board_notificationsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutUserInput | discussion_board_notificationsCreateOrConnectWithoutUserInput[]\n    upsert?: discussion_board_notificationsUpsertWithWhereUniqueWithoutUserInput | discussion_board_notificationsUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussion_board_notificationsCreateManyUserInputEnvelope\n    set?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    disconnect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    delete?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    update?: discussion_board_notificationsUpdateWithWhereUniqueWithoutUserInput | discussion_board_notificationsUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussion_board_notificationsUpdateManyWithWhereWithoutUserInput | discussion_board_notificationsUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n  }\n\n  export type discussion_board_reportsUpdateManyWithoutReporterNestedInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutReporterInput, discussion_board_reportsUncheckedCreateWithoutReporterInput> | discussion_board_reportsCreateWithoutReporterInput[] | discussion_board_reportsUncheckedCreateWithoutReporterInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutReporterInput | discussion_board_reportsCreateOrConnectWithoutReporterInput[]\n    upsert?: discussion_board_reportsUpsertWithWhereUniqueWithoutReporterInput | discussion_board_reportsUpsertWithWhereUniqueWithoutReporterInput[]\n    createMany?: discussion_board_reportsCreateManyReporterInputEnvelope\n    set?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    disconnect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    delete?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    update?: discussion_board_reportsUpdateWithWhereUniqueWithoutReporterInput | discussion_board_reportsUpdateWithWhereUniqueWithoutReporterInput[]\n    updateMany?: discussion_board_reportsUpdateManyWithWhereWithoutReporterInput | discussion_board_reportsUpdateManyWithWhereWithoutReporterInput[]\n    deleteMany?: discussion_board_reportsScalarWhereInput | discussion_board_reportsScalarWhereInput[]\n  }\n\n  export type discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput = {\n    create?: XOR<discussion_board_moderatorsCreateWithoutUserInput, discussion_board_moderatorsUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussion_board_moderatorsCreateOrConnectWithoutUserInput\n    upsert?: discussion_board_moderatorsUpsertWithoutUserInput\n    disconnect?: discussion_board_moderatorsWhereInput | boolean\n    delete?: discussion_board_moderatorsWhereInput | boolean\n    connect?: discussion_board_moderatorsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_moderatorsUpdateToOneWithWhereWithoutUserInput, discussion_board_moderatorsUpdateWithoutUserInput>, discussion_board_moderatorsUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutAuthorInput, discussion_board_topicsUncheckedCreateWithoutAuthorInput> | discussion_board_topicsCreateWithoutAuthorInput[] | discussion_board_topicsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutAuthorInput | discussion_board_topicsCreateOrConnectWithoutAuthorInput[]\n    upsert?: discussion_board_topicsUpsertWithWhereUniqueWithoutAuthorInput | discussion_board_topicsUpsertWithWhereUniqueWithoutAuthorInput[]\n    createMany?: discussion_board_topicsCreateManyAuthorInputEnvelope\n    set?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    disconnect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    delete?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    update?: discussion_board_topicsUpdateWithWhereUniqueWithoutAuthorInput | discussion_board_topicsUpdateWithWhereUniqueWithoutAuthorInput[]\n    updateMany?: discussion_board_topicsUpdateManyWithWhereWithoutAuthorInput | discussion_board_topicsUpdateManyWithWhereWithoutAuthorInput[]\n    deleteMany?: discussion_board_topicsScalarWhereInput | discussion_board_topicsScalarWhereInput[]\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutAuthorInput, discussion_board_commentsUncheckedCreateWithoutAuthorInput> | discussion_board_commentsCreateWithoutAuthorInput[] | discussion_board_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutAuthorInput | discussion_board_commentsCreateOrConnectWithoutAuthorInput[]\n    upsert?: discussion_board_commentsUpsertWithWhereUniqueWithoutAuthorInput | discussion_board_commentsUpsertWithWhereUniqueWithoutAuthorInput[]\n    createMany?: discussion_board_commentsCreateManyAuthorInputEnvelope\n    set?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    disconnect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    delete?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    update?: discussion_board_commentsUpdateWithWhereUniqueWithoutAuthorInput | discussion_board_commentsUpdateWithWhereUniqueWithoutAuthorInput[]\n    updateMany?: discussion_board_commentsUpdateManyWithWhereWithoutAuthorInput | discussion_board_commentsUpdateManyWithWhereWithoutAuthorInput[]\n    deleteMany?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussion_board_votesCreateWithoutUserInput, discussion_board_votesUncheckedCreateWithoutUserInput> | discussion_board_votesCreateWithoutUserInput[] | discussion_board_votesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutUserInput | discussion_board_votesCreateOrConnectWithoutUserInput[]\n    upsert?: discussion_board_votesUpsertWithWhereUniqueWithoutUserInput | discussion_board_votesUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussion_board_votesCreateManyUserInputEnvelope\n    set?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    disconnect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    delete?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    update?: discussion_board_votesUpdateWithWhereUniqueWithoutUserInput | discussion_board_votesUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussion_board_votesUpdateManyWithWhereWithoutUserInput | discussion_board_votesUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutUserInput, discussion_board_notificationsUncheckedCreateWithoutUserInput> | discussion_board_notificationsCreateWithoutUserInput[] | discussion_board_notificationsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutUserInput | discussion_board_notificationsCreateOrConnectWithoutUserInput[]\n    upsert?: discussion_board_notificationsUpsertWithWhereUniqueWithoutUserInput | discussion_board_notificationsUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussion_board_notificationsCreateManyUserInputEnvelope\n    set?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    disconnect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    delete?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    update?: discussion_board_notificationsUpdateWithWhereUniqueWithoutUserInput | discussion_board_notificationsUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussion_board_notificationsUpdateManyWithWhereWithoutUserInput | discussion_board_notificationsUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n  }\n\n  export type discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutReporterInput, discussion_board_reportsUncheckedCreateWithoutReporterInput> | discussion_board_reportsCreateWithoutReporterInput[] | discussion_board_reportsUncheckedCreateWithoutReporterInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutReporterInput | discussion_board_reportsCreateOrConnectWithoutReporterInput[]\n    upsert?: discussion_board_reportsUpsertWithWhereUniqueWithoutReporterInput | discussion_board_reportsUpsertWithWhereUniqueWithoutReporterInput[]\n    createMany?: discussion_board_reportsCreateManyReporterInputEnvelope\n    set?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    disconnect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    delete?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    update?: discussion_board_reportsUpdateWithWhereUniqueWithoutReporterInput | discussion_board_reportsUpdateWithWhereUniqueWithoutReporterInput[]\n    updateMany?: discussion_board_reportsUpdateManyWithWhereWithoutReporterInput | discussion_board_reportsUpdateManyWithWhereWithoutReporterInput[]\n    deleteMany?: discussion_board_reportsScalarWhereInput | discussion_board_reportsScalarWhereInput[]\n  }\n\n  export type discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_moderatorsInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_moderatorsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_moderatorsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  export type discussion_board_reportsCreateNestedManyWithoutAssignedModeratorInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput> | discussion_board_reportsCreateWithoutAssignedModeratorInput[] | discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput | discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput[]\n    createMany?: discussion_board_reportsCreateManyAssignedModeratorInputEnvelope\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n  }\n\n  export type discussion_board_reportsUncheckedCreateNestedManyWithoutAssignedModeratorInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput> | discussion_board_reportsCreateWithoutAssignedModeratorInput[] | discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput | discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput[]\n    createMany?: discussion_board_reportsCreateManyAssignedModeratorInputEnvelope\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n  }\n\n  export type discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_moderatorsNestedInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_moderatorsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_moderatorsInput\n    upsert?: discussion_board_registered_usersUpsertWithoutDiscussion_board_moderatorsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n    update?: XOR<XOR<discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUpdateWithoutDiscussion_board_moderatorsInput>, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_moderatorsInput>\n  }\n\n  export type discussion_board_reportsUpdateManyWithoutAssignedModeratorNestedInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput> | discussion_board_reportsCreateWithoutAssignedModeratorInput[] | discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput | discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput[]\n    upsert?: discussion_board_reportsUpsertWithWhereUniqueWithoutAssignedModeratorInput | discussion_board_reportsUpsertWithWhereUniqueWithoutAssignedModeratorInput[]\n    createMany?: discussion_board_reportsCreateManyAssignedModeratorInputEnvelope\n    set?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    disconnect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    delete?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    update?: discussion_board_reportsUpdateWithWhereUniqueWithoutAssignedModeratorInput | discussion_board_reportsUpdateWithWhereUniqueWithoutAssignedModeratorInput[]\n    updateMany?: discussion_board_reportsUpdateManyWithWhereWithoutAssignedModeratorInput | discussion_board_reportsUpdateManyWithWhereWithoutAssignedModeratorInput[]\n    deleteMany?: discussion_board_reportsScalarWhereInput | discussion_board_reportsScalarWhereInput[]\n  }\n\n  export type discussion_board_reportsUncheckedUpdateManyWithoutAssignedModeratorNestedInput = {\n    create?: XOR<discussion_board_reportsCreateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput> | discussion_board_reportsCreateWithoutAssignedModeratorInput[] | discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput[]\n    connectOrCreate?: discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput | discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput[]\n    upsert?: discussion_board_reportsUpsertWithWhereUniqueWithoutAssignedModeratorInput | discussion_board_reportsUpsertWithWhereUniqueWithoutAssignedModeratorInput[]\n    createMany?: discussion_board_reportsCreateManyAssignedModeratorInputEnvelope\n    set?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    disconnect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    delete?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    connect?: discussion_board_reportsWhereUniqueInput | discussion_board_reportsWhereUniqueInput[]\n    update?: discussion_board_reportsUpdateWithWhereUniqueWithoutAssignedModeratorInput | discussion_board_reportsUpdateWithWhereUniqueWithoutAssignedModeratorInput[]\n    updateMany?: discussion_board_reportsUpdateManyWithWhereWithoutAssignedModeratorInput | discussion_board_reportsUpdateManyWithWhereWithoutAssignedModeratorInput[]\n    deleteMany?: discussion_board_reportsScalarWhereInput | discussion_board_reportsScalarWhereInput[]\n  }\n\n  export type discussion_board_topicsCreateNestedManyWithoutCategoryInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutCategoryInput, discussion_board_topicsUncheckedCreateWithoutCategoryInput> | discussion_board_topicsCreateWithoutCategoryInput[] | discussion_board_topicsUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutCategoryInput | discussion_board_topicsCreateOrConnectWithoutCategoryInput[]\n    createMany?: discussion_board_topicsCreateManyCategoryInputEnvelope\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n  }\n\n  export type discussion_board_topicsUncheckedCreateNestedManyWithoutCategoryInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutCategoryInput, discussion_board_topicsUncheckedCreateWithoutCategoryInput> | discussion_board_topicsCreateWithoutCategoryInput[] | discussion_board_topicsUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutCategoryInput | discussion_board_topicsCreateOrConnectWithoutCategoryInput[]\n    createMany?: discussion_board_topicsCreateManyCategoryInputEnvelope\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n  }\n\n  export type discussion_board_topicsUpdateManyWithoutCategoryNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutCategoryInput, discussion_board_topicsUncheckedCreateWithoutCategoryInput> | discussion_board_topicsCreateWithoutCategoryInput[] | discussion_board_topicsUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutCategoryInput | discussion_board_topicsCreateOrConnectWithoutCategoryInput[]\n    upsert?: discussion_board_topicsUpsertWithWhereUniqueWithoutCategoryInput | discussion_board_topicsUpsertWithWhereUniqueWithoutCategoryInput[]\n    createMany?: discussion_board_topicsCreateManyCategoryInputEnvelope\n    set?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    disconnect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    delete?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    update?: discussion_board_topicsUpdateWithWhereUniqueWithoutCategoryInput | discussion_board_topicsUpdateWithWhereUniqueWithoutCategoryInput[]\n    updateMany?: discussion_board_topicsUpdateManyWithWhereWithoutCategoryInput | discussion_board_topicsUpdateManyWithWhereWithoutCategoryInput[]\n    deleteMany?: discussion_board_topicsScalarWhereInput | discussion_board_topicsScalarWhereInput[]\n  }\n\n  export type discussion_board_topicsUncheckedUpdateManyWithoutCategoryNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutCategoryInput, discussion_board_topicsUncheckedCreateWithoutCategoryInput> | discussion_board_topicsCreateWithoutCategoryInput[] | discussion_board_topicsUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutCategoryInput | discussion_board_topicsCreateOrConnectWithoutCategoryInput[]\n    upsert?: discussion_board_topicsUpsertWithWhereUniqueWithoutCategoryInput | discussion_board_topicsUpsertWithWhereUniqueWithoutCategoryInput[]\n    createMany?: discussion_board_topicsCreateManyCategoryInputEnvelope\n    set?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    disconnect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    delete?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    connect?: discussion_board_topicsWhereUniqueInput | discussion_board_topicsWhereUniqueInput[]\n    update?: discussion_board_topicsUpdateWithWhereUniqueWithoutCategoryInput | discussion_board_topicsUpdateWithWhereUniqueWithoutCategoryInput[]\n    updateMany?: discussion_board_topicsUpdateManyWithWhereWithoutCategoryInput | discussion_board_topicsUpdateManyWithWhereWithoutCategoryInput[]\n    deleteMany?: discussion_board_topicsScalarWhereInput | discussion_board_topicsScalarWhereInput[]\n  }\n\n  export type discussion_board_categoriesCreateNestedOneWithoutDiscussion_board_topicsInput = {\n    create?: XOR<discussion_board_categoriesCreateWithoutDiscussion_board_topicsInput, discussion_board_categoriesUncheckedCreateWithoutDiscussion_board_topicsInput>\n    connectOrCreate?: discussion_board_categoriesCreateOrConnectWithoutDiscussion_board_topicsInput\n    connect?: discussion_board_categoriesWhereUniqueInput\n  }\n\n  export type discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_topicsInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_topicsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_topicsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  export type discussion_board_commentsCreateNestedManyWithoutTopicInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutTopicInput, discussion_board_commentsUncheckedCreateWithoutTopicInput> | discussion_board_commentsCreateWithoutTopicInput[] | discussion_board_commentsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutTopicInput | discussion_board_commentsCreateOrConnectWithoutTopicInput[]\n    createMany?: discussion_board_commentsCreateManyTopicInputEnvelope\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n  }\n\n  export type discussion_board_votesCreateNestedManyWithoutTopicInput = {\n    create?: XOR<discussion_board_votesCreateWithoutTopicInput, discussion_board_votesUncheckedCreateWithoutTopicInput> | discussion_board_votesCreateWithoutTopicInput[] | discussion_board_votesUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutTopicInput | discussion_board_votesCreateOrConnectWithoutTopicInput[]\n    createMany?: discussion_board_votesCreateManyTopicInputEnvelope\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n  }\n\n  export type discussion_board_notificationsCreateNestedManyWithoutTopicInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutTopicInput, discussion_board_notificationsUncheckedCreateWithoutTopicInput> | discussion_board_notificationsCreateWithoutTopicInput[] | discussion_board_notificationsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutTopicInput | discussion_board_notificationsCreateOrConnectWithoutTopicInput[]\n    createMany?: discussion_board_notificationsCreateManyTopicInputEnvelope\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n  }\n\n  export type discussion_board_commentsUncheckedCreateNestedManyWithoutTopicInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutTopicInput, discussion_board_commentsUncheckedCreateWithoutTopicInput> | discussion_board_commentsCreateWithoutTopicInput[] | discussion_board_commentsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutTopicInput | discussion_board_commentsCreateOrConnectWithoutTopicInput[]\n    createMany?: discussion_board_commentsCreateManyTopicInputEnvelope\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n  }\n\n  export type discussion_board_votesUncheckedCreateNestedManyWithoutTopicInput = {\n    create?: XOR<discussion_board_votesCreateWithoutTopicInput, discussion_board_votesUncheckedCreateWithoutTopicInput> | discussion_board_votesCreateWithoutTopicInput[] | discussion_board_votesUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutTopicInput | discussion_board_votesCreateOrConnectWithoutTopicInput[]\n    createMany?: discussion_board_votesCreateManyTopicInputEnvelope\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n  }\n\n  export type discussion_board_notificationsUncheckedCreateNestedManyWithoutTopicInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutTopicInput, discussion_board_notificationsUncheckedCreateWithoutTopicInput> | discussion_board_notificationsCreateWithoutTopicInput[] | discussion_board_notificationsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutTopicInput | discussion_board_notificationsCreateOrConnectWithoutTopicInput[]\n    createMany?: discussion_board_notificationsCreateManyTopicInputEnvelope\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n  }\n\n  export type discussion_board_categoriesUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput = {\n    create?: XOR<discussion_board_categoriesCreateWithoutDiscussion_board_topicsInput, discussion_board_categoriesUncheckedCreateWithoutDiscussion_board_topicsInput>\n    connectOrCreate?: discussion_board_categoriesCreateOrConnectWithoutDiscussion_board_topicsInput\n    upsert?: discussion_board_categoriesUpsertWithoutDiscussion_board_topicsInput\n    connect?: discussion_board_categoriesWhereUniqueInput\n    update?: XOR<XOR<discussion_board_categoriesUpdateToOneWithWhereWithoutDiscussion_board_topicsInput, discussion_board_categoriesUpdateWithoutDiscussion_board_topicsInput>, discussion_board_categoriesUncheckedUpdateWithoutDiscussion_board_topicsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_topicsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_topicsInput\n    upsert?: discussion_board_registered_usersUpsertWithoutDiscussion_board_topicsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n    update?: XOR<XOR<discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUpdateWithoutDiscussion_board_topicsInput>, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_topicsInput>\n  }\n\n  export type discussion_board_commentsUpdateManyWithoutTopicNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutTopicInput, discussion_board_commentsUncheckedCreateWithoutTopicInput> | discussion_board_commentsCreateWithoutTopicInput[] | discussion_board_commentsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutTopicInput | discussion_board_commentsCreateOrConnectWithoutTopicInput[]\n    upsert?: discussion_board_commentsUpsertWithWhereUniqueWithoutTopicInput | discussion_board_commentsUpsertWithWhereUniqueWithoutTopicInput[]\n    createMany?: discussion_board_commentsCreateManyTopicInputEnvelope\n    set?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    disconnect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    delete?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    update?: discussion_board_commentsUpdateWithWhereUniqueWithoutTopicInput | discussion_board_commentsUpdateWithWhereUniqueWithoutTopicInput[]\n    updateMany?: discussion_board_commentsUpdateManyWithWhereWithoutTopicInput | discussion_board_commentsUpdateManyWithWhereWithoutTopicInput[]\n    deleteMany?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n  }\n\n  export type discussion_board_votesUpdateManyWithoutTopicNestedInput = {\n    create?: XOR<discussion_board_votesCreateWithoutTopicInput, discussion_board_votesUncheckedCreateWithoutTopicInput> | discussion_board_votesCreateWithoutTopicInput[] | discussion_board_votesUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutTopicInput | discussion_board_votesCreateOrConnectWithoutTopicInput[]\n    upsert?: discussion_board_votesUpsertWithWhereUniqueWithoutTopicInput | discussion_board_votesUpsertWithWhereUniqueWithoutTopicInput[]\n    createMany?: discussion_board_votesCreateManyTopicInputEnvelope\n    set?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    disconnect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    delete?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    update?: discussion_board_votesUpdateWithWhereUniqueWithoutTopicInput | discussion_board_votesUpdateWithWhereUniqueWithoutTopicInput[]\n    updateMany?: discussion_board_votesUpdateManyWithWhereWithoutTopicInput | discussion_board_votesUpdateManyWithWhereWithoutTopicInput[]\n    deleteMany?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n  }\n\n  export type discussion_board_notificationsUpdateManyWithoutTopicNestedInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutTopicInput, discussion_board_notificationsUncheckedCreateWithoutTopicInput> | discussion_board_notificationsCreateWithoutTopicInput[] | discussion_board_notificationsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutTopicInput | discussion_board_notificationsCreateOrConnectWithoutTopicInput[]\n    upsert?: discussion_board_notificationsUpsertWithWhereUniqueWithoutTopicInput | discussion_board_notificationsUpsertWithWhereUniqueWithoutTopicInput[]\n    createMany?: discussion_board_notificationsCreateManyTopicInputEnvelope\n    set?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    disconnect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    delete?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    update?: discussion_board_notificationsUpdateWithWhereUniqueWithoutTopicInput | discussion_board_notificationsUpdateWithWhereUniqueWithoutTopicInput[]\n    updateMany?: discussion_board_notificationsUpdateManyWithWhereWithoutTopicInput | discussion_board_notificationsUpdateManyWithWhereWithoutTopicInput[]\n    deleteMany?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyWithoutTopicNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutTopicInput, discussion_board_commentsUncheckedCreateWithoutTopicInput> | discussion_board_commentsCreateWithoutTopicInput[] | discussion_board_commentsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutTopicInput | discussion_board_commentsCreateOrConnectWithoutTopicInput[]\n    upsert?: discussion_board_commentsUpsertWithWhereUniqueWithoutTopicInput | discussion_board_commentsUpsertWithWhereUniqueWithoutTopicInput[]\n    createMany?: discussion_board_commentsCreateManyTopicInputEnvelope\n    set?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    disconnect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    delete?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    update?: discussion_board_commentsUpdateWithWhereUniqueWithoutTopicInput | discussion_board_commentsUpdateWithWhereUniqueWithoutTopicInput[]\n    updateMany?: discussion_board_commentsUpdateManyWithWhereWithoutTopicInput | discussion_board_commentsUpdateManyWithWhereWithoutTopicInput[]\n    deleteMany?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyWithoutTopicNestedInput = {\n    create?: XOR<discussion_board_votesCreateWithoutTopicInput, discussion_board_votesUncheckedCreateWithoutTopicInput> | discussion_board_votesCreateWithoutTopicInput[] | discussion_board_votesUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutTopicInput | discussion_board_votesCreateOrConnectWithoutTopicInput[]\n    upsert?: discussion_board_votesUpsertWithWhereUniqueWithoutTopicInput | discussion_board_votesUpsertWithWhereUniqueWithoutTopicInput[]\n    createMany?: discussion_board_votesCreateManyTopicInputEnvelope\n    set?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    disconnect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    delete?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    update?: discussion_board_votesUpdateWithWhereUniqueWithoutTopicInput | discussion_board_votesUpdateWithWhereUniqueWithoutTopicInput[]\n    updateMany?: discussion_board_votesUpdateManyWithWhereWithoutTopicInput | discussion_board_votesUpdateManyWithWhereWithoutTopicInput[]\n    deleteMany?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyWithoutTopicNestedInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutTopicInput, discussion_board_notificationsUncheckedCreateWithoutTopicInput> | discussion_board_notificationsCreateWithoutTopicInput[] | discussion_board_notificationsUncheckedCreateWithoutTopicInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutTopicInput | discussion_board_notificationsCreateOrConnectWithoutTopicInput[]\n    upsert?: discussion_board_notificationsUpsertWithWhereUniqueWithoutTopicInput | discussion_board_notificationsUpsertWithWhereUniqueWithoutTopicInput[]\n    createMany?: discussion_board_notificationsCreateManyTopicInputEnvelope\n    set?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    disconnect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    delete?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    update?: discussion_board_notificationsUpdateWithWhereUniqueWithoutTopicInput | discussion_board_notificationsUpdateWithWhereUniqueWithoutTopicInput[]\n    updateMany?: discussion_board_notificationsUpdateManyWithWhereWithoutTopicInput | discussion_board_notificationsUpdateManyWithWhereWithoutTopicInput[]\n    deleteMany?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n  }\n\n  export type discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutDiscussion_board_commentsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_commentsInput>\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutDiscussion_board_commentsInput\n    connect?: discussion_board_topicsWhereUniqueInput\n  }\n\n  export type discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_commentsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_commentsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  export type discussion_board_commentsCreateNestedOneWithoutRecursiveInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutRecursiveInput, discussion_board_commentsUncheckedCreateWithoutRecursiveInput>\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutRecursiveInput\n    connect?: discussion_board_commentsWhereUniqueInput\n  }\n\n  export type discussion_board_commentsCreateNestedManyWithoutParentInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutParentInput, discussion_board_commentsUncheckedCreateWithoutParentInput> | discussion_board_commentsCreateWithoutParentInput[] | discussion_board_commentsUncheckedCreateWithoutParentInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutParentInput | discussion_board_commentsCreateOrConnectWithoutParentInput[]\n    createMany?: discussion_board_commentsCreateManyParentInputEnvelope\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n  }\n\n  export type discussion_board_votesCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussion_board_votesCreateWithoutCommentInput, discussion_board_votesUncheckedCreateWithoutCommentInput> | discussion_board_votesCreateWithoutCommentInput[] | discussion_board_votesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutCommentInput | discussion_board_votesCreateOrConnectWithoutCommentInput[]\n    createMany?: discussion_board_votesCreateManyCommentInputEnvelope\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n  }\n\n  export type discussion_board_notificationsCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutCommentInput, discussion_board_notificationsUncheckedCreateWithoutCommentInput> | discussion_board_notificationsCreateWithoutCommentInput[] | discussion_board_notificationsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutCommentInput | discussion_board_notificationsCreateOrConnectWithoutCommentInput[]\n    createMany?: discussion_board_notificationsCreateManyCommentInputEnvelope\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n  }\n\n  export type discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutParentInput, discussion_board_commentsUncheckedCreateWithoutParentInput> | discussion_board_commentsCreateWithoutParentInput[] | discussion_board_commentsUncheckedCreateWithoutParentInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutParentInput | discussion_board_commentsCreateOrConnectWithoutParentInput[]\n    createMany?: discussion_board_commentsCreateManyParentInputEnvelope\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n  }\n\n  export type discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussion_board_votesCreateWithoutCommentInput, discussion_board_votesUncheckedCreateWithoutCommentInput> | discussion_board_votesCreateWithoutCommentInput[] | discussion_board_votesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutCommentInput | discussion_board_votesCreateOrConnectWithoutCommentInput[]\n    createMany?: discussion_board_votesCreateManyCommentInputEnvelope\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n  }\n\n  export type discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutCommentInput, discussion_board_notificationsUncheckedCreateWithoutCommentInput> | discussion_board_notificationsCreateWithoutCommentInput[] | discussion_board_notificationsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutCommentInput | discussion_board_notificationsCreateOrConnectWithoutCommentInput[]\n    createMany?: discussion_board_notificationsCreateManyCommentInputEnvelope\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n  }\n\n  export type discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutDiscussion_board_commentsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_commentsInput>\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutDiscussion_board_commentsInput\n    upsert?: discussion_board_topicsUpsertWithoutDiscussion_board_commentsInput\n    connect?: discussion_board_topicsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_topicsUpdateToOneWithWhereWithoutDiscussion_board_commentsInput, discussion_board_topicsUpdateWithoutDiscussion_board_commentsInput>, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_commentsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_commentsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_commentsInput\n    upsert?: discussion_board_registered_usersUpsertWithoutDiscussion_board_commentsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n    update?: XOR<XOR<discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUpdateWithoutDiscussion_board_commentsInput>, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_commentsInput>\n  }\n\n  export type discussion_board_commentsUpdateOneWithoutRecursiveNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutRecursiveInput, discussion_board_commentsUncheckedCreateWithoutRecursiveInput>\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutRecursiveInput\n    upsert?: discussion_board_commentsUpsertWithoutRecursiveInput\n    disconnect?: discussion_board_commentsWhereInput | boolean\n    delete?: discussion_board_commentsWhereInput | boolean\n    connect?: discussion_board_commentsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_commentsUpdateToOneWithWhereWithoutRecursiveInput, discussion_board_commentsUpdateWithoutRecursiveInput>, discussion_board_commentsUncheckedUpdateWithoutRecursiveInput>\n  }\n\n  export type discussion_board_commentsUpdateManyWithoutParentNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutParentInput, discussion_board_commentsUncheckedCreateWithoutParentInput> | discussion_board_commentsCreateWithoutParentInput[] | discussion_board_commentsUncheckedCreateWithoutParentInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutParentInput | discussion_board_commentsCreateOrConnectWithoutParentInput[]\n    upsert?: discussion_board_commentsUpsertWithWhereUniqueWithoutParentInput | discussion_board_commentsUpsertWithWhereUniqueWithoutParentInput[]\n    createMany?: discussion_board_commentsCreateManyParentInputEnvelope\n    set?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    disconnect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    delete?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    update?: discussion_board_commentsUpdateWithWhereUniqueWithoutParentInput | discussion_board_commentsUpdateWithWhereUniqueWithoutParentInput[]\n    updateMany?: discussion_board_commentsUpdateManyWithWhereWithoutParentInput | discussion_board_commentsUpdateManyWithWhereWithoutParentInput[]\n    deleteMany?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n  }\n\n  export type discussion_board_votesUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussion_board_votesCreateWithoutCommentInput, discussion_board_votesUncheckedCreateWithoutCommentInput> | discussion_board_votesCreateWithoutCommentInput[] | discussion_board_votesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutCommentInput | discussion_board_votesCreateOrConnectWithoutCommentInput[]\n    upsert?: discussion_board_votesUpsertWithWhereUniqueWithoutCommentInput | discussion_board_votesUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussion_board_votesCreateManyCommentInputEnvelope\n    set?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    disconnect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    delete?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    update?: discussion_board_votesUpdateWithWhereUniqueWithoutCommentInput | discussion_board_votesUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussion_board_votesUpdateManyWithWhereWithoutCommentInput | discussion_board_votesUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n  }\n\n  export type discussion_board_notificationsUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutCommentInput, discussion_board_notificationsUncheckedCreateWithoutCommentInput> | discussion_board_notificationsCreateWithoutCommentInput[] | discussion_board_notificationsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutCommentInput | discussion_board_notificationsCreateOrConnectWithoutCommentInput[]\n    upsert?: discussion_board_notificationsUpsertWithWhereUniqueWithoutCommentInput | discussion_board_notificationsUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussion_board_notificationsCreateManyCommentInputEnvelope\n    set?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    disconnect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    delete?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    update?: discussion_board_notificationsUpdateWithWhereUniqueWithoutCommentInput | discussion_board_notificationsUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussion_board_notificationsUpdateManyWithWhereWithoutCommentInput | discussion_board_notificationsUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutParentInput, discussion_board_commentsUncheckedCreateWithoutParentInput> | discussion_board_commentsCreateWithoutParentInput[] | discussion_board_commentsUncheckedCreateWithoutParentInput[]\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutParentInput | discussion_board_commentsCreateOrConnectWithoutParentInput[]\n    upsert?: discussion_board_commentsUpsertWithWhereUniqueWithoutParentInput | discussion_board_commentsUpsertWithWhereUniqueWithoutParentInput[]\n    createMany?: discussion_board_commentsCreateManyParentInputEnvelope\n    set?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    disconnect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    delete?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    connect?: discussion_board_commentsWhereUniqueInput | discussion_board_commentsWhereUniqueInput[]\n    update?: discussion_board_commentsUpdateWithWhereUniqueWithoutParentInput | discussion_board_commentsUpdateWithWhereUniqueWithoutParentInput[]\n    updateMany?: discussion_board_commentsUpdateManyWithWhereWithoutParentInput | discussion_board_commentsUpdateManyWithWhereWithoutParentInput[]\n    deleteMany?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussion_board_votesCreateWithoutCommentInput, discussion_board_votesUncheckedCreateWithoutCommentInput> | discussion_board_votesCreateWithoutCommentInput[] | discussion_board_votesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_votesCreateOrConnectWithoutCommentInput | discussion_board_votesCreateOrConnectWithoutCommentInput[]\n    upsert?: discussion_board_votesUpsertWithWhereUniqueWithoutCommentInput | discussion_board_votesUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussion_board_votesCreateManyCommentInputEnvelope\n    set?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    disconnect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    delete?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    connect?: discussion_board_votesWhereUniqueInput | discussion_board_votesWhereUniqueInput[]\n    update?: discussion_board_votesUpdateWithWhereUniqueWithoutCommentInput | discussion_board_votesUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussion_board_votesUpdateManyWithWhereWithoutCommentInput | discussion_board_votesUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussion_board_notificationsCreateWithoutCommentInput, discussion_board_notificationsUncheckedCreateWithoutCommentInput> | discussion_board_notificationsCreateWithoutCommentInput[] | discussion_board_notificationsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussion_board_notificationsCreateOrConnectWithoutCommentInput | discussion_board_notificationsCreateOrConnectWithoutCommentInput[]\n    upsert?: discussion_board_notificationsUpsertWithWhereUniqueWithoutCommentInput | discussion_board_notificationsUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussion_board_notificationsCreateManyCommentInputEnvelope\n    set?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    disconnect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    delete?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    connect?: discussion_board_notificationsWhereUniqueInput | discussion_board_notificationsWhereUniqueInput[]\n    update?: discussion_board_notificationsUpdateWithWhereUniqueWithoutCommentInput | discussion_board_notificationsUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussion_board_notificationsUpdateManyWithWhereWithoutCommentInput | discussion_board_notificationsUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n  }\n\n  export type discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_votesInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_votesInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_votesInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_votesInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  export type discussion_board_topicsCreateNestedOneWithoutDiscussion_board_votesInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutDiscussion_board_votesInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_votesInput>\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutDiscussion_board_votesInput\n    connect?: discussion_board_topicsWhereUniqueInput\n  }\n\n  export type discussion_board_commentsCreateNestedOneWithoutDiscussion_board_votesInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutDiscussion_board_votesInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_votesInput>\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutDiscussion_board_votesInput\n    connect?: discussion_board_commentsWhereUniqueInput\n  }\n\n  export type discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_votesNestedInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_votesInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_votesInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_votesInput\n    upsert?: discussion_board_registered_usersUpsertWithoutDiscussion_board_votesInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n    update?: XOR<XOR<discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_votesInput, discussion_board_registered_usersUpdateWithoutDiscussion_board_votesInput>, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_topicsUpdateOneWithoutDiscussion_board_votesNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutDiscussion_board_votesInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_votesInput>\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutDiscussion_board_votesInput\n    upsert?: discussion_board_topicsUpsertWithoutDiscussion_board_votesInput\n    disconnect?: discussion_board_topicsWhereInput | boolean\n    delete?: discussion_board_topicsWhereInput | boolean\n    connect?: discussion_board_topicsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_topicsUpdateToOneWithWhereWithoutDiscussion_board_votesInput, discussion_board_topicsUpdateWithoutDiscussion_board_votesInput>, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_commentsUpdateOneWithoutDiscussion_board_votesNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutDiscussion_board_votesInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_votesInput>\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutDiscussion_board_votesInput\n    upsert?: discussion_board_commentsUpsertWithoutDiscussion_board_votesInput\n    disconnect?: discussion_board_commentsWhereInput | boolean\n    delete?: discussion_board_commentsWhereInput | boolean\n    connect?: discussion_board_commentsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_commentsUpdateToOneWithWhereWithoutDiscussion_board_votesInput, discussion_board_commentsUpdateWithoutDiscussion_board_votesInput>, discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_notificationsInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_notificationsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  export type discussion_board_topicsCreateNestedOneWithoutDiscussion_board_notificationsInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutDiscussion_board_notificationsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutDiscussion_board_notificationsInput\n    connect?: discussion_board_topicsWhereUniqueInput\n  }\n\n  export type discussion_board_commentsCreateNestedOneWithoutDiscussion_board_notificationsInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutDiscussion_board_notificationsInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutDiscussion_board_notificationsInput\n    connect?: discussion_board_commentsWhereUniqueInput\n  }\n\n  export type discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_notificationsNestedInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_notificationsInput\n    upsert?: discussion_board_registered_usersUpsertWithoutDiscussion_board_notificationsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n    update?: XOR<XOR<discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUpdateWithoutDiscussion_board_notificationsInput>, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_topicsUpdateOneWithoutDiscussion_board_notificationsNestedInput = {\n    create?: XOR<discussion_board_topicsCreateWithoutDiscussion_board_notificationsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    connectOrCreate?: discussion_board_topicsCreateOrConnectWithoutDiscussion_board_notificationsInput\n    upsert?: discussion_board_topicsUpsertWithoutDiscussion_board_notificationsInput\n    disconnect?: discussion_board_topicsWhereInput | boolean\n    delete?: discussion_board_topicsWhereInput | boolean\n    connect?: discussion_board_topicsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_topicsUpdateToOneWithWhereWithoutDiscussion_board_notificationsInput, discussion_board_topicsUpdateWithoutDiscussion_board_notificationsInput>, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_commentsUpdateOneWithoutDiscussion_board_notificationsNestedInput = {\n    create?: XOR<discussion_board_commentsCreateWithoutDiscussion_board_notificationsInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    connectOrCreate?: discussion_board_commentsCreateOrConnectWithoutDiscussion_board_notificationsInput\n    upsert?: discussion_board_commentsUpsertWithoutDiscussion_board_notificationsInput\n    disconnect?: discussion_board_commentsWhereInput | boolean\n    delete?: discussion_board_commentsWhereInput | boolean\n    connect?: discussion_board_commentsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_commentsUpdateToOneWithWhereWithoutDiscussion_board_notificationsInput, discussion_board_commentsUpdateWithoutDiscussion_board_notificationsInput>, discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_reportsInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_reportsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_reportsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n  }\n\n  export type discussion_board_moderatorsCreateNestedOneWithoutDiscussion_board_reportsInput = {\n    create?: XOR<discussion_board_moderatorsCreateWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUncheckedCreateWithoutDiscussion_board_reportsInput>\n    connectOrCreate?: discussion_board_moderatorsCreateOrConnectWithoutDiscussion_board_reportsInput\n    connect?: discussion_board_moderatorsWhereUniqueInput\n  }\n\n  export type discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_reportsNestedInput = {\n    create?: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_reportsInput>\n    connectOrCreate?: discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_reportsInput\n    upsert?: discussion_board_registered_usersUpsertWithoutDiscussion_board_reportsInput\n    connect?: discussion_board_registered_usersWhereUniqueInput\n    update?: XOR<XOR<discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUpdateWithoutDiscussion_board_reportsInput>, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_reportsInput>\n  }\n\n  export type discussion_board_moderatorsUpdateOneWithoutDiscussion_board_reportsNestedInput = {\n    create?: XOR<discussion_board_moderatorsCreateWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUncheckedCreateWithoutDiscussion_board_reportsInput>\n    connectOrCreate?: discussion_board_moderatorsCreateOrConnectWithoutDiscussion_board_reportsInput\n    upsert?: discussion_board_moderatorsUpsertWithoutDiscussion_board_reportsInput\n    disconnect?: discussion_board_moderatorsWhereInput | boolean\n    delete?: discussion_board_moderatorsWhereInput | boolean\n    connect?: discussion_board_moderatorsWhereUniqueInput\n    update?: XOR<XOR<discussion_board_moderatorsUpdateToOneWithWhereWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUpdateWithoutDiscussion_board_reportsInput>, discussion_board_moderatorsUncheckedUpdateWithoutDiscussion_board_reportsInput>\n  }\n\n  export type NestedUuidFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidFilter<$PrismaModel> | string\n  }\n\n  export type NestedStringFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringFilter<$PrismaModel> | string\n  }\n\n  export type NestedStringNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type NestedDateTimeFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeFilter<$PrismaModel> | Date | string\n  }\n\n  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null\n  }\n\n  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type NestedIntFilter<$PrismaModel = never> = {\n    equals?: number | IntFieldRefInput<$PrismaModel>\n    in?: number[] | ListIntFieldRefInput<$PrismaModel>\n    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>\n    lt?: number | IntFieldRefInput<$PrismaModel>\n    lte?: number | IntFieldRefInput<$PrismaModel>\n    gt?: number | IntFieldRefInput<$PrismaModel>\n    gte?: number | IntFieldRefInput<$PrismaModel>\n    not?: NestedIntFilter<$PrismaModel> | number\n  }\n\n  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type NestedIntNullableFilter<$PrismaModel = never> = {\n    equals?: number | IntFieldRefInput<$PrismaModel> | null\n    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null\n    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null\n    lt?: number | IntFieldRefInput<$PrismaModel>\n    lte?: number | IntFieldRefInput<$PrismaModel>\n    gt?: number | IntFieldRefInput<$PrismaModel>\n    gte?: number | IntFieldRefInput<$PrismaModel>\n    not?: NestedIntNullableFilter<$PrismaModel> | number | null\n  }\n\n  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedDateTimeFilter<$PrismaModel>\n    _max?: NestedDateTimeFilter<$PrismaModel>\n  }\n\n  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedDateTimeNullableFilter<$PrismaModel>\n    _max?: NestedDateTimeNullableFilter<$PrismaModel>\n  }\n\n  export type NestedBoolFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolFilter<$PrismaModel> | boolean\n  }\n\n  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedBoolFilter<$PrismaModel>\n    _max?: NestedBoolFilter<$PrismaModel>\n  }\n\n  export type NestedUuidNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type discussion_board_moderatorsCreateWithoutUserInput = {\n    id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutAssignedModeratorInput\n  }\n\n  export type discussion_board_moderatorsUncheckedCreateWithoutUserInput = {\n    id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutAssignedModeratorInput\n  }\n\n  export type discussion_board_moderatorsCreateOrConnectWithoutUserInput = {\n    where: discussion_board_moderatorsWhereUniqueInput\n    create: XOR<discussion_board_moderatorsCreateWithoutUserInput, discussion_board_moderatorsUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussion_board_topicsCreateWithoutAuthorInput = {\n    id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    category: discussion_board_categoriesCreateNestedOneWithoutDiscussion_board_topicsInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateWithoutAuthorInput = {\n    id: string\n    discussion_board_category_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsCreateOrConnectWithoutAuthorInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    create: XOR<discussion_board_topicsCreateWithoutAuthorInput, discussion_board_topicsUncheckedCreateWithoutAuthorInput>\n  }\n\n  export type discussion_board_topicsCreateManyAuthorInputEnvelope = {\n    data: discussion_board_topicsCreateManyAuthorInput | discussion_board_topicsCreateManyAuthorInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_commentsCreateWithoutAuthorInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput\n    parent?: discussion_board_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussion_board_commentsCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateWithoutAuthorInput = {\n    id: string\n    discussion_board_topic_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsCreateOrConnectWithoutAuthorInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    create: XOR<discussion_board_commentsCreateWithoutAuthorInput, discussion_board_commentsUncheckedCreateWithoutAuthorInput>\n  }\n\n  export type discussion_board_commentsCreateManyAuthorInputEnvelope = {\n    data: discussion_board_commentsCreateManyAuthorInput | discussion_board_commentsCreateManyAuthorInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_votesCreateWithoutUserInput = {\n    id: string\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n    topic?: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_votesInput\n    comment?: discussion_board_commentsCreateNestedOneWithoutDiscussion_board_votesInput\n  }\n\n  export type discussion_board_votesUncheckedCreateWithoutUserInput = {\n    id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesCreateOrConnectWithoutUserInput = {\n    where: discussion_board_votesWhereUniqueInput\n    create: XOR<discussion_board_votesCreateWithoutUserInput, discussion_board_votesUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussion_board_votesCreateManyUserInputEnvelope = {\n    data: discussion_board_votesCreateManyUserInput | discussion_board_votesCreateManyUserInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_notificationsCreateWithoutUserInput = {\n    id: string\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic?: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_notificationsInput\n    comment?: discussion_board_commentsCreateNestedOneWithoutDiscussion_board_notificationsInput\n  }\n\n  export type discussion_board_notificationsUncheckedCreateWithoutUserInput = {\n    id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsCreateOrConnectWithoutUserInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    create: XOR<discussion_board_notificationsCreateWithoutUserInput, discussion_board_notificationsUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussion_board_notificationsCreateManyUserInputEnvelope = {\n    data: discussion_board_notificationsCreateManyUserInput | discussion_board_notificationsCreateManyUserInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_reportsCreateWithoutReporterInput = {\n    id: string\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    assignedModerator?: discussion_board_moderatorsCreateNestedOneWithoutDiscussion_board_reportsInput\n  }\n\n  export type discussion_board_reportsUncheckedCreateWithoutReporterInput = {\n    id: string\n    assigned_moderator_id?: string | null\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_reportsCreateOrConnectWithoutReporterInput = {\n    where: discussion_board_reportsWhereUniqueInput\n    create: XOR<discussion_board_reportsCreateWithoutReporterInput, discussion_board_reportsUncheckedCreateWithoutReporterInput>\n  }\n\n  export type discussion_board_reportsCreateManyReporterInputEnvelope = {\n    data: discussion_board_reportsCreateManyReporterInput | discussion_board_reportsCreateManyReporterInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_moderatorsUpsertWithoutUserInput = {\n    update: XOR<discussion_board_moderatorsUpdateWithoutUserInput, discussion_board_moderatorsUncheckedUpdateWithoutUserInput>\n    create: XOR<discussion_board_moderatorsCreateWithoutUserInput, discussion_board_moderatorsUncheckedCreateWithoutUserInput>\n    where?: discussion_board_moderatorsWhereInput\n  }\n\n  export type discussion_board_moderatorsUpdateToOneWithWhereWithoutUserInput = {\n    where?: discussion_board_moderatorsWhereInput\n    data: XOR<discussion_board_moderatorsUpdateWithoutUserInput, discussion_board_moderatorsUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussion_board_moderatorsUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutAssignedModeratorNestedInput\n  }\n\n  export type discussion_board_moderatorsUncheckedUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutAssignedModeratorNestedInput\n  }\n\n  export type discussion_board_topicsUpsertWithWhereUniqueWithoutAuthorInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    update: XOR<discussion_board_topicsUpdateWithoutAuthorInput, discussion_board_topicsUncheckedUpdateWithoutAuthorInput>\n    create: XOR<discussion_board_topicsCreateWithoutAuthorInput, discussion_board_topicsUncheckedCreateWithoutAuthorInput>\n  }\n\n  export type discussion_board_topicsUpdateWithWhereUniqueWithoutAuthorInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    data: XOR<discussion_board_topicsUpdateWithoutAuthorInput, discussion_board_topicsUncheckedUpdateWithoutAuthorInput>\n  }\n\n  export type discussion_board_topicsUpdateManyWithWhereWithoutAuthorInput = {\n    where: discussion_board_topicsScalarWhereInput\n    data: XOR<discussion_board_topicsUpdateManyMutationInput, discussion_board_topicsUncheckedUpdateManyWithoutAuthorInput>\n  }\n\n  export type discussion_board_topicsScalarWhereInput = {\n    AND?: discussion_board_topicsScalarWhereInput | discussion_board_topicsScalarWhereInput[]\n    OR?: discussion_board_topicsScalarWhereInput[]\n    NOT?: discussion_board_topicsScalarWhereInput | discussion_board_topicsScalarWhereInput[]\n    id?: UuidFilter<\"discussion_board_topics\"> | string\n    discussion_board_category_id?: UuidFilter<\"discussion_board_topics\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_topics\"> | string\n    title?: StringFilter<\"discussion_board_topics\"> | string\n    body?: StringFilter<\"discussion_board_topics\"> | string\n    code?: StringFilter<\"discussion_board_topics\"> | string\n    status?: StringFilter<\"discussion_board_topics\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_topics\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_topics\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussion_board_topics\"> | Date | string | null\n  }\n\n  export type discussion_board_commentsUpsertWithWhereUniqueWithoutAuthorInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    update: XOR<discussion_board_commentsUpdateWithoutAuthorInput, discussion_board_commentsUncheckedUpdateWithoutAuthorInput>\n    create: XOR<discussion_board_commentsCreateWithoutAuthorInput, discussion_board_commentsUncheckedCreateWithoutAuthorInput>\n  }\n\n  export type discussion_board_commentsUpdateWithWhereUniqueWithoutAuthorInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    data: XOR<discussion_board_commentsUpdateWithoutAuthorInput, discussion_board_commentsUncheckedUpdateWithoutAuthorInput>\n  }\n\n  export type discussion_board_commentsUpdateManyWithWhereWithoutAuthorInput = {\n    where: discussion_board_commentsScalarWhereInput\n    data: XOR<discussion_board_commentsUpdateManyMutationInput, discussion_board_commentsUncheckedUpdateManyWithoutAuthorInput>\n  }\n\n  export type discussion_board_commentsScalarWhereInput = {\n    AND?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n    OR?: discussion_board_commentsScalarWhereInput[]\n    NOT?: discussion_board_commentsScalarWhereInput | discussion_board_commentsScalarWhereInput[]\n    id?: UuidFilter<\"discussion_board_comments\"> | string\n    discussion_board_topic_id?: UuidFilter<\"discussion_board_comments\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_comments\"> | string\n    parent_discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_comments\"> | string | null\n    body?: StringFilter<\"discussion_board_comments\"> | string\n    code?: StringFilter<\"discussion_board_comments\"> | string\n    is_deleted?: BoolFilter<\"discussion_board_comments\"> | boolean\n    created_at?: DateTimeFilter<\"discussion_board_comments\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_comments\"> | Date | string\n  }\n\n  export type discussion_board_votesUpsertWithWhereUniqueWithoutUserInput = {\n    where: discussion_board_votesWhereUniqueInput\n    update: XOR<discussion_board_votesUpdateWithoutUserInput, discussion_board_votesUncheckedUpdateWithoutUserInput>\n    create: XOR<discussion_board_votesCreateWithoutUserInput, discussion_board_votesUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussion_board_votesUpdateWithWhereUniqueWithoutUserInput = {\n    where: discussion_board_votesWhereUniqueInput\n    data: XOR<discussion_board_votesUpdateWithoutUserInput, discussion_board_votesUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussion_board_votesUpdateManyWithWhereWithoutUserInput = {\n    where: discussion_board_votesScalarWhereInput\n    data: XOR<discussion_board_votesUpdateManyMutationInput, discussion_board_votesUncheckedUpdateManyWithoutUserInput>\n  }\n\n  export type discussion_board_votesScalarWhereInput = {\n    AND?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n    OR?: discussion_board_votesScalarWhereInput[]\n    NOT?: discussion_board_votesScalarWhereInput | discussion_board_votesScalarWhereInput[]\n    id?: UuidFilter<\"discussion_board_votes\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_votes\"> | string\n    discussion_board_topic_id?: UuidNullableFilter<\"discussion_board_votes\"> | string | null\n    discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_votes\"> | string | null\n    vote_type?: StringFilter<\"discussion_board_votes\"> | string\n    created_at?: DateTimeFilter<\"discussion_board_votes\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_votes\"> | Date | string\n  }\n\n  export type discussion_board_notificationsUpsertWithWhereUniqueWithoutUserInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    update: XOR<discussion_board_notificationsUpdateWithoutUserInput, discussion_board_notificationsUncheckedUpdateWithoutUserInput>\n    create: XOR<discussion_board_notificationsCreateWithoutUserInput, discussion_board_notificationsUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussion_board_notificationsUpdateWithWhereUniqueWithoutUserInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    data: XOR<discussion_board_notificationsUpdateWithoutUserInput, discussion_board_notificationsUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussion_board_notificationsUpdateManyWithWhereWithoutUserInput = {\n    where: discussion_board_notificationsScalarWhereInput\n    data: XOR<discussion_board_notificationsUpdateManyMutationInput, discussion_board_notificationsUncheckedUpdateManyWithoutUserInput>\n  }\n\n  export type discussion_board_notificationsScalarWhereInput = {\n    AND?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n    OR?: discussion_board_notificationsScalarWhereInput[]\n    NOT?: discussion_board_notificationsScalarWhereInput | discussion_board_notificationsScalarWhereInput[]\n    id?: UuidFilter<\"discussion_board_notifications\"> | string\n    discussion_board_registered_user_id?: UuidFilter<\"discussion_board_notifications\"> | string\n    discussion_board_topic_id?: UuidNullableFilter<\"discussion_board_notifications\"> | string | null\n    discussion_board_comment_id?: UuidNullableFilter<\"discussion_board_notifications\"> | string | null\n    notification_type?: StringFilter<\"discussion_board_notifications\"> | string\n    title?: StringFilter<\"discussion_board_notifications\"> | string\n    message?: StringFilter<\"discussion_board_notifications\"> | string\n    is_read?: BoolFilter<\"discussion_board_notifications\"> | boolean\n    created_at?: DateTimeFilter<\"discussion_board_notifications\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_notifications\"> | Date | string\n  }\n\n  export type discussion_board_reportsUpsertWithWhereUniqueWithoutReporterInput = {\n    where: discussion_board_reportsWhereUniqueInput\n    update: XOR<discussion_board_reportsUpdateWithoutReporterInput, discussion_board_reportsUncheckedUpdateWithoutReporterInput>\n    create: XOR<discussion_board_reportsCreateWithoutReporterInput, discussion_board_reportsUncheckedCreateWithoutReporterInput>\n  }\n\n  export type discussion_board_reportsUpdateWithWhereUniqueWithoutReporterInput = {\n    where: discussion_board_reportsWhereUniqueInput\n    data: XOR<discussion_board_reportsUpdateWithoutReporterInput, discussion_board_reportsUncheckedUpdateWithoutReporterInput>\n  }\n\n  export type discussion_board_reportsUpdateManyWithWhereWithoutReporterInput = {\n    where: discussion_board_reportsScalarWhereInput\n    data: XOR<discussion_board_reportsUpdateManyMutationInput, discussion_board_reportsUncheckedUpdateManyWithoutReporterInput>\n  }\n\n  export type discussion_board_reportsScalarWhereInput = {\n    AND?: discussion_board_reportsScalarWhereInput | discussion_board_reportsScalarWhereInput[]\n    OR?: discussion_board_reportsScalarWhereInput[]\n    NOT?: discussion_board_reportsScalarWhereInput | discussion_board_reportsScalarWhereInput[]\n    id?: UuidFilter<\"discussion_board_reports\"> | string\n    reporter_id?: UuidFilter<\"discussion_board_reports\"> | string\n    assigned_moderator_id?: UuidNullableFilter<\"discussion_board_reports\"> | string | null\n    reported_content_type?: StringFilter<\"discussion_board_reports\"> | string\n    reported_content_id?: UuidFilter<\"discussion_board_reports\"> | string\n    reason?: StringFilter<\"discussion_board_reports\"> | string\n    description?: StringNullableFilter<\"discussion_board_reports\"> | string | null\n    status?: StringFilter<\"discussion_board_reports\"> | string\n    resolution?: StringNullableFilter<\"discussion_board_reports\"> | string | null\n    created_at?: DateTimeFilter<\"discussion_board_reports\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussion_board_reports\"> | Date | string\n  }\n\n  export type discussion_board_registered_usersCreateWithoutDiscussion_board_moderatorsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_moderatorsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_moderatorsInput = {\n    where: discussion_board_registered_usersWhereUniqueInput\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_moderatorsInput>\n  }\n\n  export type discussion_board_reportsCreateWithoutAssignedModeratorInput = {\n    id: string\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    reporter: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_reportsInput\n  }\n\n  export type discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput = {\n    id: string\n    reporter_id: string\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_reportsCreateOrConnectWithoutAssignedModeratorInput = {\n    where: discussion_board_reportsWhereUniqueInput\n    create: XOR<discussion_board_reportsCreateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput>\n  }\n\n  export type discussion_board_reportsCreateManyAssignedModeratorInputEnvelope = {\n    data: discussion_board_reportsCreateManyAssignedModeratorInput | discussion_board_reportsCreateManyAssignedModeratorInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_registered_usersUpsertWithoutDiscussion_board_moderatorsInput = {\n    update: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_moderatorsInput>\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_moderatorsInput>\n    where?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_moderatorsInput = {\n    where?: discussion_board_registered_usersWhereInput\n    data: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_moderatorsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_moderatorsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateWithoutDiscussion_board_moderatorsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_moderatorsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_reportsUpsertWithWhereUniqueWithoutAssignedModeratorInput = {\n    where: discussion_board_reportsWhereUniqueInput\n    update: XOR<discussion_board_reportsUpdateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedUpdateWithoutAssignedModeratorInput>\n    create: XOR<discussion_board_reportsCreateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedCreateWithoutAssignedModeratorInput>\n  }\n\n  export type discussion_board_reportsUpdateWithWhereUniqueWithoutAssignedModeratorInput = {\n    where: discussion_board_reportsWhereUniqueInput\n    data: XOR<discussion_board_reportsUpdateWithoutAssignedModeratorInput, discussion_board_reportsUncheckedUpdateWithoutAssignedModeratorInput>\n  }\n\n  export type discussion_board_reportsUpdateManyWithWhereWithoutAssignedModeratorInput = {\n    where: discussion_board_reportsScalarWhereInput\n    data: XOR<discussion_board_reportsUpdateManyMutationInput, discussion_board_reportsUncheckedUpdateManyWithoutAssignedModeratorInput>\n  }\n\n  export type discussion_board_topicsCreateWithoutCategoryInput = {\n    id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_topicsInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateWithoutCategoryInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsCreateOrConnectWithoutCategoryInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    create: XOR<discussion_board_topicsCreateWithoutCategoryInput, discussion_board_topicsUncheckedCreateWithoutCategoryInput>\n  }\n\n  export type discussion_board_topicsCreateManyCategoryInputEnvelope = {\n    data: discussion_board_topicsCreateManyCategoryInput | discussion_board_topicsCreateManyCategoryInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_topicsUpsertWithWhereUniqueWithoutCategoryInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    update: XOR<discussion_board_topicsUpdateWithoutCategoryInput, discussion_board_topicsUncheckedUpdateWithoutCategoryInput>\n    create: XOR<discussion_board_topicsCreateWithoutCategoryInput, discussion_board_topicsUncheckedCreateWithoutCategoryInput>\n  }\n\n  export type discussion_board_topicsUpdateWithWhereUniqueWithoutCategoryInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    data: XOR<discussion_board_topicsUpdateWithoutCategoryInput, discussion_board_topicsUncheckedUpdateWithoutCategoryInput>\n  }\n\n  export type discussion_board_topicsUpdateManyWithWhereWithoutCategoryInput = {\n    where: discussion_board_topicsScalarWhereInput\n    data: XOR<discussion_board_topicsUpdateManyMutationInput, discussion_board_topicsUncheckedUpdateManyWithoutCategoryInput>\n  }\n\n  export type discussion_board_categoriesCreateWithoutDiscussion_board_topicsInput = {\n    id: string\n    name: string\n    description?: string | null\n    code: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_categoriesUncheckedCreateWithoutDiscussion_board_topicsInput = {\n    id: string\n    name: string\n    description?: string | null\n    code: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_categoriesCreateOrConnectWithoutDiscussion_board_topicsInput = {\n    where: discussion_board_categoriesWhereUniqueInput\n    create: XOR<discussion_board_categoriesCreateWithoutDiscussion_board_topicsInput, discussion_board_categoriesUncheckedCreateWithoutDiscussion_board_topicsInput>\n  }\n\n  export type discussion_board_registered_usersCreateWithoutDiscussion_board_topicsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsCreateNestedOneWithoutUserInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_topicsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_topicsInput = {\n    where: discussion_board_registered_usersWhereUniqueInput\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_topicsInput>\n  }\n\n  export type discussion_board_commentsCreateWithoutTopicInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput\n    parent?: discussion_board_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussion_board_commentsCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateWithoutTopicInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsCreateOrConnectWithoutTopicInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    create: XOR<discussion_board_commentsCreateWithoutTopicInput, discussion_board_commentsUncheckedCreateWithoutTopicInput>\n  }\n\n  export type discussion_board_commentsCreateManyTopicInputEnvelope = {\n    data: discussion_board_commentsCreateManyTopicInput | discussion_board_commentsCreateManyTopicInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_votesCreateWithoutTopicInput = {\n    id: string\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_votesInput\n    comment?: discussion_board_commentsCreateNestedOneWithoutDiscussion_board_votesInput\n  }\n\n  export type discussion_board_votesUncheckedCreateWithoutTopicInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_comment_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesCreateOrConnectWithoutTopicInput = {\n    where: discussion_board_votesWhereUniqueInput\n    create: XOR<discussion_board_votesCreateWithoutTopicInput, discussion_board_votesUncheckedCreateWithoutTopicInput>\n  }\n\n  export type discussion_board_votesCreateManyTopicInputEnvelope = {\n    data: discussion_board_votesCreateManyTopicInput | discussion_board_votesCreateManyTopicInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_notificationsCreateWithoutTopicInput = {\n    id: string\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_notificationsInput\n    comment?: discussion_board_commentsCreateNestedOneWithoutDiscussion_board_notificationsInput\n  }\n\n  export type discussion_board_notificationsUncheckedCreateWithoutTopicInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_comment_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsCreateOrConnectWithoutTopicInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    create: XOR<discussion_board_notificationsCreateWithoutTopicInput, discussion_board_notificationsUncheckedCreateWithoutTopicInput>\n  }\n\n  export type discussion_board_notificationsCreateManyTopicInputEnvelope = {\n    data: discussion_board_notificationsCreateManyTopicInput | discussion_board_notificationsCreateManyTopicInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_categoriesUpsertWithoutDiscussion_board_topicsInput = {\n    update: XOR<discussion_board_categoriesUpdateWithoutDiscussion_board_topicsInput, discussion_board_categoriesUncheckedUpdateWithoutDiscussion_board_topicsInput>\n    create: XOR<discussion_board_categoriesCreateWithoutDiscussion_board_topicsInput, discussion_board_categoriesUncheckedCreateWithoutDiscussion_board_topicsInput>\n    where?: discussion_board_categoriesWhereInput\n  }\n\n  export type discussion_board_categoriesUpdateToOneWithWhereWithoutDiscussion_board_topicsInput = {\n    where?: discussion_board_categoriesWhereInput\n    data: XOR<discussion_board_categoriesUpdateWithoutDiscussion_board_topicsInput, discussion_board_categoriesUncheckedUpdateWithoutDiscussion_board_topicsInput>\n  }\n\n  export type discussion_board_categoriesUpdateWithoutDiscussion_board_topicsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    code?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_categoriesUncheckedUpdateWithoutDiscussion_board_topicsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    code?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_registered_usersUpsertWithoutDiscussion_board_topicsInput = {\n    update: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_topicsInput>\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_topicsInput>\n    where?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_topicsInput = {\n    where?: discussion_board_registered_usersWhereInput\n    data: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_topicsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_topicsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateWithoutDiscussion_board_topicsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUpdateOneWithoutUserNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_topicsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_commentsUpsertWithWhereUniqueWithoutTopicInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    update: XOR<discussion_board_commentsUpdateWithoutTopicInput, discussion_board_commentsUncheckedUpdateWithoutTopicInput>\n    create: XOR<discussion_board_commentsCreateWithoutTopicInput, discussion_board_commentsUncheckedCreateWithoutTopicInput>\n  }\n\n  export type discussion_board_commentsUpdateWithWhereUniqueWithoutTopicInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    data: XOR<discussion_board_commentsUpdateWithoutTopicInput, discussion_board_commentsUncheckedUpdateWithoutTopicInput>\n  }\n\n  export type discussion_board_commentsUpdateManyWithWhereWithoutTopicInput = {\n    where: discussion_board_commentsScalarWhereInput\n    data: XOR<discussion_board_commentsUpdateManyMutationInput, discussion_board_commentsUncheckedUpdateManyWithoutTopicInput>\n  }\n\n  export type discussion_board_votesUpsertWithWhereUniqueWithoutTopicInput = {\n    where: discussion_board_votesWhereUniqueInput\n    update: XOR<discussion_board_votesUpdateWithoutTopicInput, discussion_board_votesUncheckedUpdateWithoutTopicInput>\n    create: XOR<discussion_board_votesCreateWithoutTopicInput, discussion_board_votesUncheckedCreateWithoutTopicInput>\n  }\n\n  export type discussion_board_votesUpdateWithWhereUniqueWithoutTopicInput = {\n    where: discussion_board_votesWhereUniqueInput\n    data: XOR<discussion_board_votesUpdateWithoutTopicInput, discussion_board_votesUncheckedUpdateWithoutTopicInput>\n  }\n\n  export type discussion_board_votesUpdateManyWithWhereWithoutTopicInput = {\n    where: discussion_board_votesScalarWhereInput\n    data: XOR<discussion_board_votesUpdateManyMutationInput, discussion_board_votesUncheckedUpdateManyWithoutTopicInput>\n  }\n\n  export type discussion_board_notificationsUpsertWithWhereUniqueWithoutTopicInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    update: XOR<discussion_board_notificationsUpdateWithoutTopicInput, discussion_board_notificationsUncheckedUpdateWithoutTopicInput>\n    create: XOR<discussion_board_notificationsCreateWithoutTopicInput, discussion_board_notificationsUncheckedCreateWithoutTopicInput>\n  }\n\n  export type discussion_board_notificationsUpdateWithWhereUniqueWithoutTopicInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    data: XOR<discussion_board_notificationsUpdateWithoutTopicInput, discussion_board_notificationsUncheckedUpdateWithoutTopicInput>\n  }\n\n  export type discussion_board_notificationsUpdateManyWithWhereWithoutTopicInput = {\n    where: discussion_board_notificationsScalarWhereInput\n    data: XOR<discussion_board_notificationsUpdateManyMutationInput, discussion_board_notificationsUncheckedUpdateManyWithoutTopicInput>\n  }\n\n  export type discussion_board_topicsCreateWithoutDiscussion_board_commentsInput = {\n    id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    category: discussion_board_categoriesCreateNestedOneWithoutDiscussion_board_topicsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_topicsInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateWithoutDiscussion_board_commentsInput = {\n    id: string\n    discussion_board_category_id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsCreateOrConnectWithoutDiscussion_board_commentsInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    create: XOR<discussion_board_topicsCreateWithoutDiscussion_board_commentsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_commentsInput>\n  }\n\n  export type discussion_board_registered_usersCreateWithoutDiscussion_board_commentsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_commentsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_commentsInput = {\n    where: discussion_board_registered_usersWhereUniqueInput\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_commentsInput>\n  }\n\n  export type discussion_board_commentsCreateWithoutRecursiveInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput\n    parent?: discussion_board_commentsCreateNestedOneWithoutRecursiveInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateWithoutRecursiveInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsCreateOrConnectWithoutRecursiveInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    create: XOR<discussion_board_commentsCreateWithoutRecursiveInput, discussion_board_commentsUncheckedCreateWithoutRecursiveInput>\n  }\n\n  export type discussion_board_commentsCreateWithoutParentInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput\n    recursive?: discussion_board_commentsCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateWithoutParentInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsCreateOrConnectWithoutParentInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    create: XOR<discussion_board_commentsCreateWithoutParentInput, discussion_board_commentsUncheckedCreateWithoutParentInput>\n  }\n\n  export type discussion_board_commentsCreateManyParentInputEnvelope = {\n    data: discussion_board_commentsCreateManyParentInput | discussion_board_commentsCreateManyParentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_votesCreateWithoutCommentInput = {\n    id: string\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_votesInput\n    topic?: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_votesInput\n  }\n\n  export type discussion_board_votesUncheckedCreateWithoutCommentInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesCreateOrConnectWithoutCommentInput = {\n    where: discussion_board_votesWhereUniqueInput\n    create: XOR<discussion_board_votesCreateWithoutCommentInput, discussion_board_votesUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussion_board_votesCreateManyCommentInputEnvelope = {\n    data: discussion_board_votesCreateManyCommentInput | discussion_board_votesCreateManyCommentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_notificationsCreateWithoutCommentInput = {\n    id: string\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_notificationsInput\n    topic?: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_notificationsInput\n  }\n\n  export type discussion_board_notificationsUncheckedCreateWithoutCommentInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsCreateOrConnectWithoutCommentInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    create: XOR<discussion_board_notificationsCreateWithoutCommentInput, discussion_board_notificationsUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussion_board_notificationsCreateManyCommentInputEnvelope = {\n    data: discussion_board_notificationsCreateManyCommentInput | discussion_board_notificationsCreateManyCommentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussion_board_topicsUpsertWithoutDiscussion_board_commentsInput = {\n    update: XOR<discussion_board_topicsUpdateWithoutDiscussion_board_commentsInput, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_commentsInput>\n    create: XOR<discussion_board_topicsCreateWithoutDiscussion_board_commentsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_commentsInput>\n    where?: discussion_board_topicsWhereInput\n  }\n\n  export type discussion_board_topicsUpdateToOneWithWhereWithoutDiscussion_board_commentsInput = {\n    where?: discussion_board_topicsWhereInput\n    data: XOR<discussion_board_topicsUpdateWithoutDiscussion_board_commentsInput, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_commentsInput>\n  }\n\n  export type discussion_board_topicsUpdateWithoutDiscussion_board_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    category?: discussion_board_categoriesUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_registered_usersUpsertWithoutDiscussion_board_commentsInput = {\n    update: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_commentsInput>\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_commentsInput>\n    where?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_commentsInput = {\n    where?: discussion_board_registered_usersWhereInput\n    data: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_commentsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_commentsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateWithoutDiscussion_board_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_commentsUpsertWithoutRecursiveInput = {\n    update: XOR<discussion_board_commentsUpdateWithoutRecursiveInput, discussion_board_commentsUncheckedUpdateWithoutRecursiveInput>\n    create: XOR<discussion_board_commentsCreateWithoutRecursiveInput, discussion_board_commentsUncheckedCreateWithoutRecursiveInput>\n    where?: discussion_board_commentsWhereInput\n  }\n\n  export type discussion_board_commentsUpdateToOneWithWhereWithoutRecursiveInput = {\n    where?: discussion_board_commentsWhereInput\n    data: XOR<discussion_board_commentsUpdateWithoutRecursiveInput, discussion_board_commentsUncheckedUpdateWithoutRecursiveInput>\n  }\n\n  export type discussion_board_commentsUpdateWithoutRecursiveInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    parent?: discussion_board_commentsUpdateOneWithoutRecursiveNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateWithoutRecursiveInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUpsertWithWhereUniqueWithoutParentInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    update: XOR<discussion_board_commentsUpdateWithoutParentInput, discussion_board_commentsUncheckedUpdateWithoutParentInput>\n    create: XOR<discussion_board_commentsCreateWithoutParentInput, discussion_board_commentsUncheckedCreateWithoutParentInput>\n  }\n\n  export type discussion_board_commentsUpdateWithWhereUniqueWithoutParentInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    data: XOR<discussion_board_commentsUpdateWithoutParentInput, discussion_board_commentsUncheckedUpdateWithoutParentInput>\n  }\n\n  export type discussion_board_commentsUpdateManyWithWhereWithoutParentInput = {\n    where: discussion_board_commentsScalarWhereInput\n    data: XOR<discussion_board_commentsUpdateManyMutationInput, discussion_board_commentsUncheckedUpdateManyWithoutParentInput>\n  }\n\n  export type discussion_board_votesUpsertWithWhereUniqueWithoutCommentInput = {\n    where: discussion_board_votesWhereUniqueInput\n    update: XOR<discussion_board_votesUpdateWithoutCommentInput, discussion_board_votesUncheckedUpdateWithoutCommentInput>\n    create: XOR<discussion_board_votesCreateWithoutCommentInput, discussion_board_votesUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussion_board_votesUpdateWithWhereUniqueWithoutCommentInput = {\n    where: discussion_board_votesWhereUniqueInput\n    data: XOR<discussion_board_votesUpdateWithoutCommentInput, discussion_board_votesUncheckedUpdateWithoutCommentInput>\n  }\n\n  export type discussion_board_votesUpdateManyWithWhereWithoutCommentInput = {\n    where: discussion_board_votesScalarWhereInput\n    data: XOR<discussion_board_votesUpdateManyMutationInput, discussion_board_votesUncheckedUpdateManyWithoutCommentInput>\n  }\n\n  export type discussion_board_notificationsUpsertWithWhereUniqueWithoutCommentInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    update: XOR<discussion_board_notificationsUpdateWithoutCommentInput, discussion_board_notificationsUncheckedUpdateWithoutCommentInput>\n    create: XOR<discussion_board_notificationsCreateWithoutCommentInput, discussion_board_notificationsUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussion_board_notificationsUpdateWithWhereUniqueWithoutCommentInput = {\n    where: discussion_board_notificationsWhereUniqueInput\n    data: XOR<discussion_board_notificationsUpdateWithoutCommentInput, discussion_board_notificationsUncheckedUpdateWithoutCommentInput>\n  }\n\n  export type discussion_board_notificationsUpdateManyWithWhereWithoutCommentInput = {\n    where: discussion_board_notificationsScalarWhereInput\n    data: XOR<discussion_board_notificationsUpdateManyMutationInput, discussion_board_notificationsUncheckedUpdateManyWithoutCommentInput>\n  }\n\n  export type discussion_board_registered_usersCreateWithoutDiscussion_board_votesInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutAuthorInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_votesInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_votesInput = {\n    where: discussion_board_registered_usersWhereUniqueInput\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_votesInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_topicsCreateWithoutDiscussion_board_votesInput = {\n    id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    category: discussion_board_categoriesCreateNestedOneWithoutDiscussion_board_topicsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_topicsInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateWithoutDiscussion_board_votesInput = {\n    id: string\n    discussion_board_category_id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsCreateOrConnectWithoutDiscussion_board_votesInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    create: XOR<discussion_board_topicsCreateWithoutDiscussion_board_votesInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_commentsCreateWithoutDiscussion_board_votesInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput\n    parent?: discussion_board_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussion_board_commentsCreateNestedManyWithoutParentInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateWithoutDiscussion_board_votesInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsCreateOrConnectWithoutDiscussion_board_votesInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    create: XOR<discussion_board_commentsCreateWithoutDiscussion_board_votesInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_registered_usersUpsertWithoutDiscussion_board_votesInput = {\n    update: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_votesInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_votesInput>\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_votesInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_votesInput>\n    where?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_votesInput = {\n    where?: discussion_board_registered_usersWhereInput\n    data: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_votesInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_registered_usersUpdateWithoutDiscussion_board_votesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutAuthorNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_votesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_topicsUpsertWithoutDiscussion_board_votesInput = {\n    update: XOR<discussion_board_topicsUpdateWithoutDiscussion_board_votesInput, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_votesInput>\n    create: XOR<discussion_board_topicsCreateWithoutDiscussion_board_votesInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_votesInput>\n    where?: discussion_board_topicsWhereInput\n  }\n\n  export type discussion_board_topicsUpdateToOneWithWhereWithoutDiscussion_board_votesInput = {\n    where?: discussion_board_topicsWhereInput\n    data: XOR<discussion_board_topicsUpdateWithoutDiscussion_board_votesInput, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_topicsUpdateWithoutDiscussion_board_votesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    category?: discussion_board_categoriesUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_votesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_commentsUpsertWithoutDiscussion_board_votesInput = {\n    update: XOR<discussion_board_commentsUpdateWithoutDiscussion_board_votesInput, discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_votesInput>\n    create: XOR<discussion_board_commentsCreateWithoutDiscussion_board_votesInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_votesInput>\n    where?: discussion_board_commentsWhereInput\n  }\n\n  export type discussion_board_commentsUpdateToOneWithWhereWithoutDiscussion_board_votesInput = {\n    where?: discussion_board_commentsWhereInput\n    data: XOR<discussion_board_commentsUpdateWithoutDiscussion_board_votesInput, discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_votesInput>\n  }\n\n  export type discussion_board_commentsUpdateWithoutDiscussion_board_votesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    parent?: discussion_board_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussion_board_commentsUpdateManyWithoutParentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_votesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_registered_usersCreateWithoutDiscussion_board_notificationsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_notificationsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_reports?: discussion_board_reportsUncheckedCreateNestedManyWithoutReporterInput\n  }\n\n  export type discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_notificationsInput = {\n    where: discussion_board_registered_usersWhereUniqueInput\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_topicsCreateWithoutDiscussion_board_notificationsInput = {\n    id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    category: discussion_board_categoriesCreateNestedOneWithoutDiscussion_board_topicsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_topicsInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsUncheckedCreateWithoutDiscussion_board_notificationsInput = {\n    id: string\n    discussion_board_category_id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutTopicInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutTopicInput\n  }\n\n  export type discussion_board_topicsCreateOrConnectWithoutDiscussion_board_notificationsInput = {\n    where: discussion_board_topicsWhereUniqueInput\n    create: XOR<discussion_board_topicsCreateWithoutDiscussion_board_notificationsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_commentsCreateWithoutDiscussion_board_notificationsInput = {\n    id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    topic: discussion_board_topicsCreateNestedOneWithoutDiscussion_board_commentsInput\n    author: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_commentsInput\n    parent?: discussion_board_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussion_board_commentsCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsUncheckedCreateWithoutDiscussion_board_notificationsInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussion_board_commentsUncheckedCreateNestedManyWithoutParentInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutCommentInput\n  }\n\n  export type discussion_board_commentsCreateOrConnectWithoutDiscussion_board_notificationsInput = {\n    where: discussion_board_commentsWhereUniqueInput\n    create: XOR<discussion_board_commentsCreateWithoutDiscussion_board_notificationsInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_registered_usersUpsertWithoutDiscussion_board_notificationsInput = {\n    update: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    where?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_notificationsInput = {\n    where?: discussion_board_registered_usersWhereInput\n    data: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_notificationsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateWithoutDiscussion_board_notificationsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_notificationsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_reports?: discussion_board_reportsUncheckedUpdateManyWithoutReporterNestedInput\n  }\n\n  export type discussion_board_topicsUpsertWithoutDiscussion_board_notificationsInput = {\n    update: XOR<discussion_board_topicsUpdateWithoutDiscussion_board_notificationsInput, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n    create: XOR<discussion_board_topicsCreateWithoutDiscussion_board_notificationsInput, discussion_board_topicsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    where?: discussion_board_topicsWhereInput\n  }\n\n  export type discussion_board_topicsUpdateToOneWithWhereWithoutDiscussion_board_notificationsInput = {\n    where?: discussion_board_topicsWhereInput\n    data: XOR<discussion_board_topicsUpdateWithoutDiscussion_board_notificationsInput, discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_topicsUpdateWithoutDiscussion_board_notificationsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    category?: discussion_board_categoriesUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateWithoutDiscussion_board_notificationsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_commentsUpsertWithoutDiscussion_board_notificationsInput = {\n    update: XOR<discussion_board_commentsUpdateWithoutDiscussion_board_notificationsInput, discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n    create: XOR<discussion_board_commentsCreateWithoutDiscussion_board_notificationsInput, discussion_board_commentsUncheckedCreateWithoutDiscussion_board_notificationsInput>\n    where?: discussion_board_commentsWhereInput\n  }\n\n  export type discussion_board_commentsUpdateToOneWithWhereWithoutDiscussion_board_notificationsInput = {\n    where?: discussion_board_commentsWhereInput\n    data: XOR<discussion_board_commentsUpdateWithoutDiscussion_board_notificationsInput, discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_notificationsInput>\n  }\n\n  export type discussion_board_commentsUpdateWithoutDiscussion_board_notificationsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    parent?: discussion_board_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussion_board_commentsUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateWithoutDiscussion_board_notificationsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_registered_usersCreateWithoutDiscussion_board_reportsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsCreateNestedManyWithoutUserInput\n  }\n\n  export type discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_reportsInput = {\n    id: string\n    email: string\n    password_hash: string\n    display_name?: string | null\n    email_verified: boolean\n    last_login_at?: Date | string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedCreateNestedOneWithoutUserInput\n    discussion_board_topics?: discussion_board_topicsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_comments?: discussion_board_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussion_board_votes?: discussion_board_votesUncheckedCreateNestedManyWithoutUserInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedCreateNestedManyWithoutUserInput\n  }\n\n  export type discussion_board_registered_usersCreateOrConnectWithoutDiscussion_board_reportsInput = {\n    where: discussion_board_registered_usersWhereUniqueInput\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_reportsInput>\n  }\n\n  export type discussion_board_moderatorsCreateWithoutDiscussion_board_reportsInput = {\n    id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussion_board_registered_usersCreateNestedOneWithoutDiscussion_board_moderatorsInput\n  }\n\n  export type discussion_board_moderatorsUncheckedCreateWithoutDiscussion_board_reportsInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    promoted_at: Date | string\n    is_active_moderator: boolean\n    moderation_notes?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_moderatorsCreateOrConnectWithoutDiscussion_board_reportsInput = {\n    where: discussion_board_moderatorsWhereUniqueInput\n    create: XOR<discussion_board_moderatorsCreateWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUncheckedCreateWithoutDiscussion_board_reportsInput>\n  }\n\n  export type discussion_board_registered_usersUpsertWithoutDiscussion_board_reportsInput = {\n    update: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_reportsInput>\n    create: XOR<discussion_board_registered_usersCreateWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUncheckedCreateWithoutDiscussion_board_reportsInput>\n    where?: discussion_board_registered_usersWhereInput\n  }\n\n  export type discussion_board_registered_usersUpdateToOneWithWhereWithoutDiscussion_board_reportsInput = {\n    where?: discussion_board_registered_usersWhereInput\n    data: XOR<discussion_board_registered_usersUpdateWithoutDiscussion_board_reportsInput, discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_reportsInput>\n  }\n\n  export type discussion_board_registered_usersUpdateWithoutDiscussion_board_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutUserNestedInput\n  }\n\n  export type discussion_board_registered_usersUncheckedUpdateWithoutDiscussion_board_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    display_name?: NullableStringFieldUpdateOperationsInput | string | null\n    email_verified?: BoolFieldUpdateOperationsInput | boolean\n    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_moderators?: discussion_board_moderatorsUncheckedUpdateOneWithoutUserNestedInput\n    discussion_board_topics?: discussion_board_topicsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutUserNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutUserNestedInput\n  }\n\n  export type discussion_board_moderatorsUpsertWithoutDiscussion_board_reportsInput = {\n    update: XOR<discussion_board_moderatorsUpdateWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUncheckedUpdateWithoutDiscussion_board_reportsInput>\n    create: XOR<discussion_board_moderatorsCreateWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUncheckedCreateWithoutDiscussion_board_reportsInput>\n    where?: discussion_board_moderatorsWhereInput\n  }\n\n  export type discussion_board_moderatorsUpdateToOneWithWhereWithoutDiscussion_board_reportsInput = {\n    where?: discussion_board_moderatorsWhereInput\n    data: XOR<discussion_board_moderatorsUpdateWithoutDiscussion_board_reportsInput, discussion_board_moderatorsUncheckedUpdateWithoutDiscussion_board_reportsInput>\n  }\n\n  export type discussion_board_moderatorsUpdateWithoutDiscussion_board_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_moderatorsNestedInput\n  }\n\n  export type discussion_board_moderatorsUncheckedUpdateWithoutDiscussion_board_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    promoted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    is_active_moderator?: BoolFieldUpdateOperationsInput | boolean\n    moderation_notes?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_topicsCreateManyAuthorInput = {\n    id: string\n    discussion_board_category_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_commentsCreateManyAuthorInput = {\n    id: string\n    discussion_board_topic_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesCreateManyUserInput = {\n    id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsCreateManyUserInput = {\n    id: string\n    discussion_board_topic_id?: string | null\n    discussion_board_comment_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_reportsCreateManyReporterInput = {\n    id: string\n    assigned_moderator_id?: string | null\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_topicsUpdateWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    category?: discussion_board_categoriesUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateManyWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_commentsUpdateWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    parent?: discussion_board_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussion_board_commentsUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneWithoutDiscussion_board_votesNestedInput\n    comment?: discussion_board_commentsUpdateOneWithoutDiscussion_board_votesNestedInput\n  }\n\n  export type discussion_board_votesUncheckedUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneWithoutDiscussion_board_notificationsNestedInput\n    comment?: discussion_board_commentsUpdateOneWithoutDiscussion_board_notificationsNestedInput\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsUpdateWithoutReporterInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    assignedModerator?: discussion_board_moderatorsUpdateOneWithoutDiscussion_board_reportsNestedInput\n  }\n\n  export type discussion_board_reportsUncheckedUpdateWithoutReporterInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_moderator_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsUncheckedUpdateManyWithoutReporterInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_moderator_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsCreateManyAssignedModeratorInput = {\n    id: string\n    reporter_id: string\n    reported_content_type: string\n    reported_content_id: string\n    reason: string\n    description?: string | null\n    status: string\n    resolution?: string | null\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_reportsUpdateWithoutAssignedModeratorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    reporter?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_reportsNestedInput\n  }\n\n  export type discussion_board_reportsUncheckedUpdateWithoutAssignedModeratorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reporter_id?: StringFieldUpdateOperationsInput | string\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_reportsUncheckedUpdateManyWithoutAssignedModeratorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reporter_id?: StringFieldUpdateOperationsInput | string\n    reported_content_type?: StringFieldUpdateOperationsInput | string\n    reported_content_id?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    status?: StringFieldUpdateOperationsInput | string\n    resolution?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_topicsCreateManyCategoryInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    title: string\n    body: string\n    code: string\n    status: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussion_board_topicsUpdateWithoutCategoryInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_topicsNestedInput\n    discussion_board_comments?: discussion_board_commentsUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateWithoutCategoryInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussion_board_comments?: discussion_board_commentsUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutTopicNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutTopicNestedInput\n  }\n\n  export type discussion_board_topicsUncheckedUpdateManyWithoutCategoryInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    status?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussion_board_commentsCreateManyTopicInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    parent_discussion_board_comment_id?: string | null\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesCreateManyTopicInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_comment_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsCreateManyTopicInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_comment_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_commentsUpdateWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    parent?: discussion_board_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussion_board_commentsUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    parent_discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUpdateWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_votesNestedInput\n    comment?: discussion_board_commentsUpdateOneWithoutDiscussion_board_votesNestedInput\n  }\n\n  export type discussion_board_votesUncheckedUpdateWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUpdateWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_notificationsNestedInput\n    comment?: discussion_board_commentsUpdateOneWithoutDiscussion_board_notificationsNestedInput\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyWithoutTopicInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_commentsCreateManyParentInput = {\n    id: string\n    discussion_board_topic_id: string\n    discussion_board_registered_user_id: string\n    body: string\n    code: string\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_votesCreateManyCommentInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    vote_type: string\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_notificationsCreateManyCommentInput = {\n    id: string\n    discussion_board_registered_user_id: string\n    discussion_board_topic_id?: string | null\n    notification_type: string\n    title: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussion_board_commentsUpdateWithoutParentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    topic?: discussion_board_topicsUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    author?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_commentsNestedInput\n    recursive?: discussion_board_commentsUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateWithoutParentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussion_board_commentsUncheckedUpdateManyWithoutParentNestedInput\n    discussion_board_votes?: discussion_board_votesUncheckedUpdateManyWithoutCommentNestedInput\n    discussion_board_notifications?: discussion_board_notificationsUncheckedUpdateManyWithoutCommentNestedInput\n  }\n\n  export type discussion_board_commentsUncheckedUpdateManyWithoutParentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    code?: StringFieldUpdateOperationsInput | string\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_votesNestedInput\n    topic?: discussion_board_topicsUpdateOneWithoutDiscussion_board_votesNestedInput\n  }\n\n  export type discussion_board_votesUncheckedUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_votesUncheckedUpdateManyWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    vote_type?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    user?: discussion_board_registered_usersUpdateOneRequiredWithoutDiscussion_board_notificationsNestedInput\n    topic?: discussion_board_topicsUpdateOneWithoutDiscussion_board_notificationsNestedInput\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussion_board_notificationsUncheckedUpdateManyWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    discussion_board_registered_user_id?: StringFieldUpdateOperationsInput | string\n    discussion_board_topic_id?: NullableStringFieldUpdateOperationsInput | string | null\n    notification_type?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n\n\n  /**\n   * Batch Payload for updateMany & deleteMany & createMany\n   */\n\n  export type BatchPayload = {\n    count: number\n  }\n\n  /**\n   * DMMF\n   */\n  export const dmmf: runtime.BaseDMMF\n}","node_modules/.prisma/client/runtime/client.d.ts":"/**\r\n * @param this\r\n */\r\ndeclare function $extends(this: Client, extension: ExtensionArgs | ((client: Client) => Client)): Client;\r\n\r\ndeclare type AccelerateEngineConfig = {\r\n    inlineSchema: EngineConfig['inlineSchema'];\r\n    inlineSchemaHash: EngineConfig['inlineSchemaHash'];\r\n    env: EngineConfig['env'];\r\n    generator?: {\r\n        previewFeatures: string[];\r\n    };\r\n    inlineDatasources: EngineConfig['inlineDatasources'];\r\n    overrideDatasources: EngineConfig['overrideDatasources'];\r\n    clientVersion: EngineConfig['clientVersion'];\r\n    engineVersion: EngineConfig['engineVersion'];\r\n    logEmitter: EngineConfig['logEmitter'];\r\n    logQueries?: EngineConfig['logQueries'];\r\n    logLevel?: EngineConfig['logLevel'];\r\n    tracingHelper: EngineConfig['tracingHelper'];\r\n    accelerateUtils?: AccelerateUtils;\r\n};\r\n\r\n/**\r\n * A stripped down interface of `fetch` that `@prisma/extension-accelerate`\r\n * relies on. It must be in sync with the corresponding definition in the\r\n * Accelerate extension.\r\n *\r\n * This is the actual interface exposed by the extension. We can't use the\r\n * custom fetch function provided by it as normal fetch because the API is\r\n * different. Notably, `headers` must be an object and not a `Headers`\r\n * instance, and `url` must be a `string` and not a `URL`.\r\n *\r\n * The return type is `Response` but we can't specify this in an exported type\r\n * because it would end up referencing external types from `@types/node` or DOM\r\n * which can fail typechecking depending on TypeScript configuration in a user's\r\n * project.\r\n */\r\ndeclare type AccelerateExtensionFetch = (url: string, options: {\r\n    body?: string;\r\n    method?: string;\r\n    headers: Record<string, string>;\r\n}) => Promise<unknown>;\r\n\r\ndeclare type AccelerateExtensionFetchDecorator = (fetch: AccelerateExtensionFetch) => AccelerateExtensionFetch;\r\n\r\ndeclare type AccelerateUtils = EngineConfig['accelerateUtils'];\r\n\r\nexport declare type Action = keyof typeof DMMF_2.ModelAction | 'executeRaw' | 'queryRaw' | 'runCommandRaw';\r\n\r\ndeclare type ActiveConnectorType = Exclude<ConnectorType, 'postgres' | 'prisma+postgres'>;\r\n\r\n/**\r\n * An interface that exposes some basic information about the\r\n * adapter like its name and provider type.\r\n */\r\ndeclare interface AdapterInfo {\r\n    readonly provider: Provider;\r\n    readonly adapterName: (typeof officialPrismaAdapters)[number] | (string & {});\r\n}\r\n\r\nexport declare type Aggregate = '_count' | '_max' | '_min' | '_avg' | '_sum';\r\n\r\nexport declare type AllModelsToStringIndex<TypeMap extends TypeMapDef, Args extends Record<string, any>, K extends PropertyKey> = Args extends {\r\n    [P in K]: {\r\n        $allModels: infer AllModels;\r\n    };\r\n} ? {\r\n    [P in K]: Record<TypeMap['meta']['modelProps'], AllModels>;\r\n} : {};\r\n\r\ndeclare class AnyNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare type ApplyOmit<T, OmitConfig> = Compute<{\r\n    [K in keyof T as OmitValue<OmitConfig, K> extends true ? never : K]: T[K];\r\n}>;\r\n\r\nexport declare type Args<T, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            operations: {\r\n                [K in F]: {\r\n                    args: any;\r\n                };\r\n            };\r\n        };\r\n    };\r\n} ? T[symbol]['types']['operations'][F]['args'] : any;\r\n\r\nexport declare type Args_3<T, F extends Operation> = Args<T, F>;\r\n\r\ndeclare type ArgScalarType = 'string' | 'int' | 'bigint' | 'float' | 'decimal' | 'boolean' | 'enum' | 'uuid' | 'json' | 'datetime' | 'bytes' | 'unknown';\r\n\r\ndeclare type ArgType = {\r\n    scalarType: ArgScalarType;\r\n    dbType?: string;\r\n    arity: Arity;\r\n};\r\n\r\ndeclare type Arity = 'scalar' | 'list';\r\n\r\n/**\r\n * Attributes is a map from string to attribute values.\r\n *\r\n * Note: only the own enumerable keys are counted as valid attribute keys.\r\n */\r\ndeclare interface Attributes {\r\n    [attributeKey: string]: AttributeValue | undefined;\r\n}\r\n\r\n/**\r\n * Attribute values may be any non-nullish primitive value except an object.\r\n *\r\n * null or undefined attribute values are invalid and will result in undefined behavior.\r\n */\r\ndeclare type AttributeValue = string | number | boolean | Array<null | undefined | string> | Array<null | undefined | number> | Array<null | undefined | boolean>;\r\n\r\nexport declare type BaseDMMF = {\r\n    readonly datamodel: Omit<DMMF_2.Datamodel, 'indexes'>;\r\n};\r\n\r\ndeclare type BatchArgs = {\r\n    queries: BatchQuery[];\r\n    transaction?: {\r\n        isolationLevel?: IsolationLevel_2;\r\n    };\r\n};\r\n\r\ndeclare type BatchInternalParams = {\r\n    requests: RequestParams[];\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare type BatchQuery = {\r\n    model: string | undefined;\r\n    operation: string;\r\n    args: JsArgs | RawQueryArgs;\r\n};\r\n\r\ndeclare type BatchQueryEngineResult<T> = QueryEngineResultData<T> | Error;\r\n\r\ndeclare type BatchQueryOptionsCb = (args: BatchQueryOptionsCbArgs) => Promise<any>;\r\n\r\ndeclare type BatchQueryOptionsCbArgs = {\r\n    args: BatchArgs;\r\n    query: (args: BatchArgs, __internalParams?: BatchInternalParams) => Promise<unknown[]>;\r\n    __internalParams: BatchInternalParams;\r\n};\r\n\r\ndeclare type BatchResponse = MultiBatchResponse | CompactedBatchResponse;\r\n\r\ndeclare type BatchTransactionOptions = {\r\n    isolationLevel?: Transaction_2.IsolationLevel;\r\n};\r\n\r\ndeclare interface BinaryTargetsEnvValue {\r\n    fromEnvVar: string | null;\r\n    value: string;\r\n    native?: boolean;\r\n}\r\n\r\nexport declare type Call<F extends Fn, P> = (F & {\r\n    params: P;\r\n})['returns'];\r\n\r\ndeclare interface CallSite {\r\n    getLocation(): LocationInFile | null;\r\n}\r\n\r\nexport declare type Cast<A, W> = A extends W ? A : W;\r\n\r\ndeclare type Client = ReturnType<typeof getPrismaClient> extends new () => infer T ? T : never;\r\n\r\nexport declare type ClientArg = {\r\n    [MethodName in string]: unknown;\r\n};\r\n\r\nexport declare type ClientArgs = {\r\n    client: ClientArg;\r\n};\r\n\r\nexport declare type ClientBuiltInProp = keyof DynamicClientExtensionThisBuiltin<never, never, never>;\r\n\r\nexport declare type ClientOptionDef = undefined | {\r\n    [K in string]: any;\r\n};\r\n\r\nexport declare type ClientOtherOps = {\r\n    $queryRaw<T = unknown>(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise<T>;\r\n    $queryRawTyped<T>(query: TypedSql<unknown[], T>): PrismaPromise<T[]>;\r\n    $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;\r\n    $executeRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise<number>;\r\n    $executeRawUnsafe(query: string, ...values: any[]): PrismaPromise<number>;\r\n    $runCommandRaw(command: InputJsonObject): PrismaPromise<JsonObject>;\r\n};\r\n\r\ndeclare type ColumnType = (typeof ColumnTypeEnum)[keyof typeof ColumnTypeEnum];\r\n\r\ndeclare const ColumnTypeEnum: {\r\n    readonly Int32: 0;\r\n    readonly Int64: 1;\r\n    readonly Float: 2;\r\n    readonly Double: 3;\r\n    readonly Numeric: 4;\r\n    readonly Boolean: 5;\r\n    readonly Character: 6;\r\n    readonly Text: 7;\r\n    readonly Date: 8;\r\n    readonly Time: 9;\r\n    readonly DateTime: 10;\r\n    readonly Json: 11;\r\n    readonly Enum: 12;\r\n    readonly Bytes: 13;\r\n    readonly Set: 14;\r\n    readonly Uuid: 15;\r\n    readonly Int32Array: 64;\r\n    readonly Int64Array: 65;\r\n    readonly FloatArray: 66;\r\n    readonly DoubleArray: 67;\r\n    readonly NumericArray: 68;\r\n    readonly BooleanArray: 69;\r\n    readonly CharacterArray: 70;\r\n    readonly TextArray: 71;\r\n    readonly DateArray: 72;\r\n    readonly TimeArray: 73;\r\n    readonly DateTimeArray: 74;\r\n    readonly JsonArray: 75;\r\n    readonly EnumArray: 76;\r\n    readonly BytesArray: 77;\r\n    readonly UuidArray: 78;\r\n    readonly UnknownNumber: 128;\r\n};\r\n\r\ndeclare type CompactedBatchResponse = {\r\n    type: 'compacted';\r\n    plan: QueryPlanNode;\r\n    arguments: Record<string, {}>[];\r\n    nestedSelection: string[];\r\n    keys: string[];\r\n    expectNonEmpty: boolean;\r\n};\r\n\r\ndeclare type CompilerWasmLoadingConfig = {\r\n    /**\r\n     * WASM-bindgen runtime for corresponding module\r\n     */\r\n    getRuntime: () => Promise<{\r\n        __wbg_set_wasm(exports: unknown): void;\r\n        QueryCompiler: QueryCompilerConstructor;\r\n    }>;\r\n    /**\r\n     * Loads the raw wasm module for the wasm compiler engine. This configuration is\r\n     * generated specifically for each type of client, eg. Node.js client and Edge\r\n     * clients will have different implementations.\r\n     * @remarks this is a callback on purpose, we only load the wasm if needed.\r\n     * @remarks only used by ClientEngine\r\n     */\r\n    getQueryCompilerWasmModule: () => Promise<unknown>;\r\n};\r\n\r\nexport declare type Compute<T> = T extends Function ? T : {\r\n    [K in keyof T]: T[K];\r\n} & unknown;\r\n\r\nexport declare type ComputeDeep<T> = T extends Function ? T : {\r\n    [K in keyof T]: ComputeDeep<T[K]>;\r\n} & unknown;\r\n\r\ndeclare type ComputedField = {\r\n    name: string;\r\n    needs: string[];\r\n    compute: ResultArgsFieldCompute;\r\n};\r\n\r\ndeclare type ComputedFieldsMap = {\r\n    [fieldName: string]: ComputedField;\r\n};\r\n\r\ndeclare type ConnectionInfo = {\r\n    schemaName?: string;\r\n    maxBindValues?: number;\r\n    supportsRelationJoins: boolean;\r\n};\r\n\r\ndeclare type ConnectorType = 'mysql' | 'mongodb' | 'sqlite' | 'postgresql' | 'postgres' | 'prisma+postgres' | 'sqlserver' | 'cockroachdb';\r\n\r\ndeclare interface Context {\r\n    /**\r\n     * Get a value from the context.\r\n     *\r\n     * @param key key which identifies a context value\r\n     */\r\n    getValue(key: symbol): unknown;\r\n    /**\r\n     * Create a new context which inherits from this context and has\r\n     * the given key set to the given value.\r\n     *\r\n     * @param key context key for which to set the value\r\n     * @param value value to set for the given key\r\n     */\r\n    setValue(key: symbol, value: unknown): Context;\r\n    /**\r\n     * Return a new context which inherits from this context but does\r\n     * not contain a value for the given key.\r\n     *\r\n     * @param key context key for which to clear a value\r\n     */\r\n    deleteValue(key: symbol): Context;\r\n}\r\n\r\ndeclare type Context_2<T> = T extends {\r\n    [K: symbol]: {\r\n        ctx: infer C;\r\n    };\r\n} ? C & T & {\r\n    /**\r\n     * @deprecated Use `$name` instead.\r\n     */\r\n    name?: string;\r\n    $name?: string;\r\n    $parent?: unknown;\r\n} : T & {\r\n    /**\r\n     * @deprecated Use `$name` instead.\r\n     */\r\n    name?: string;\r\n    $name?: string;\r\n    $parent?: unknown;\r\n};\r\n\r\nexport declare type Count<O> = {\r\n    [K in keyof O]: Count<number>;\r\n} & {};\r\n\r\nexport declare function createParam(name: string): Param<unknown, string>;\r\n\r\ndeclare class DataLoader<T = unknown> {\r\n    private options;\r\n    batches: {\r\n        [key: string]: Job[];\r\n    };\r\n    private tickActive;\r\n    constructor(options: DataLoaderOptions<T>);\r\n    request(request: T): Promise<any>;\r\n    private dispatchBatches;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare type DataLoaderOptions<T> = {\r\n    singleLoader: (request: T) => Promise<any>;\r\n    batchLoader: (request: T[]) => Promise<any[]>;\r\n    batchBy: (request: T) => string | undefined;\r\n    batchOrder: (requestA: T, requestB: T) => number;\r\n};\r\n\r\ndeclare type Datamodel = ReadonlyDeep_2<{\r\n    models: Model[];\r\n    enums: DatamodelEnum[];\r\n    types: Model[];\r\n    indexes: Index[];\r\n}>;\r\n\r\ndeclare type DatamodelEnum = ReadonlyDeep_2<{\r\n    name: string;\r\n    values: EnumValue[];\r\n    dbName?: string | null;\r\n    documentation?: string;\r\n}>;\r\n\r\ndeclare function datamodelEnumToSchemaEnum(datamodelEnum: DatamodelEnum): SchemaEnum;\r\n\r\ndeclare type DataRule = {\r\n    type: 'rowCountEq';\r\n    args: number;\r\n} | {\r\n    type: 'rowCountNeq';\r\n    args: number;\r\n} | {\r\n    type: 'affectedRowCountEq';\r\n    args: number;\r\n} | {\r\n    type: 'never';\r\n};\r\n\r\ndeclare type Datasource = {\r\n    url?: string;\r\n};\r\n\r\ndeclare type Datasources = {\r\n    [name in string]: Datasource;\r\n};\r\n\r\ndeclare class DbNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare const Debug: typeof debugCreate & {\r\n    enable(namespace: any): void;\r\n    disable(): any;\r\n    enabled(namespace: string): boolean;\r\n    log: (...args: string[]) => void;\r\n    formatters: {};\r\n};\r\n\r\n/**\r\n * Create a new debug instance with the given namespace.\r\n *\r\n * @example\r\n * ```ts\r\n * import Debug from '@prisma/debug'\r\n * const debug = Debug('prisma:client')\r\n * debug('Hello World')\r\n * ```\r\n */\r\ndeclare function debugCreate(namespace: string): ((...args: any[]) => void) & {\r\n    color: string;\r\n    enabled: boolean;\r\n    namespace: string;\r\n    log: (...args: string[]) => void;\r\n    extend: () => void;\r\n};\r\n\r\nexport declare function Decimal(n: Decimal.Value): Decimal;\r\n\r\nexport declare namespace Decimal {\r\n    export type Constructor = typeof Decimal;\r\n    export type Instance = Decimal;\r\n    export type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n    export type Modulo = Rounding | 9;\r\n    export type Value = string | number | Decimal;\r\n\r\n    // http://mikemcl.github.io/decimal.js/#constructor-properties\r\n    export interface Config {\r\n        precision?: number;\r\n        rounding?: Rounding;\r\n        toExpNeg?: number;\r\n        toExpPos?: number;\r\n        minE?: number;\r\n        maxE?: number;\r\n        crypto?: boolean;\r\n        modulo?: Modulo;\r\n        defaults?: boolean;\r\n    }\r\n}\r\n\r\nexport declare class Decimal {\r\n    readonly d: number[];\r\n    readonly e: number;\r\n    readonly s: number;\r\n\r\n    constructor(n: Decimal.Value);\r\n\r\n    absoluteValue(): Decimal;\r\n    abs(): Decimal;\r\n\r\n    ceil(): Decimal;\r\n\r\n    clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n\r\n    comparedTo(n: Decimal.Value): number;\r\n    cmp(n: Decimal.Value): number;\r\n\r\n    cosine(): Decimal;\r\n    cos(): Decimal;\r\n\r\n    cubeRoot(): Decimal;\r\n    cbrt(): Decimal;\r\n\r\n    decimalPlaces(): number;\r\n    dp(): number;\r\n\r\n    dividedBy(n: Decimal.Value): Decimal;\r\n    div(n: Decimal.Value): Decimal;\r\n\r\n    dividedToIntegerBy(n: Decimal.Value): Decimal;\r\n    divToInt(n: Decimal.Value): Decimal;\r\n\r\n    equals(n: Decimal.Value): boolean;\r\n    eq(n: Decimal.Value): boolean;\r\n\r\n    floor(): Decimal;\r\n\r\n    greaterThan(n: Decimal.Value): boolean;\r\n    gt(n: Decimal.Value): boolean;\r\n\r\n    greaterThanOrEqualTo(n: Decimal.Value): boolean;\r\n    gte(n: Decimal.Value): boolean;\r\n\r\n    hyperbolicCosine(): Decimal;\r\n    cosh(): Decimal;\r\n\r\n    hyperbolicSine(): Decimal;\r\n    sinh(): Decimal;\r\n\r\n    hyperbolicTangent(): Decimal;\r\n    tanh(): Decimal;\r\n\r\n    inverseCosine(): Decimal;\r\n    acos(): Decimal;\r\n\r\n    inverseHyperbolicCosine(): Decimal;\r\n    acosh(): Decimal;\r\n\r\n    inverseHyperbolicSine(): Decimal;\r\n    asinh(): Decimal;\r\n\r\n    inverseHyperbolicTangent(): Decimal;\r\n    atanh(): Decimal;\r\n\r\n    inverseSine(): Decimal;\r\n    asin(): Decimal;\r\n\r\n    inverseTangent(): Decimal;\r\n    atan(): Decimal;\r\n\r\n    isFinite(): boolean;\r\n\r\n    isInteger(): boolean;\r\n    isInt(): boolean;\r\n\r\n    isNaN(): boolean;\r\n\r\n    isNegative(): boolean;\r\n    isNeg(): boolean;\r\n\r\n    isPositive(): boolean;\r\n    isPos(): boolean;\r\n\r\n    isZero(): boolean;\r\n\r\n    lessThan(n: Decimal.Value): boolean;\r\n    lt(n: Decimal.Value): boolean;\r\n\r\n    lessThanOrEqualTo(n: Decimal.Value): boolean;\r\n    lte(n: Decimal.Value): boolean;\r\n\r\n    logarithm(n?: Decimal.Value): Decimal;\r\n    log(n?: Decimal.Value): Decimal;\r\n\r\n    minus(n: Decimal.Value): Decimal;\r\n    sub(n: Decimal.Value): Decimal;\r\n\r\n    modulo(n: Decimal.Value): Decimal;\r\n    mod(n: Decimal.Value): Decimal;\r\n\r\n    naturalExponential(): Decimal;\r\n    exp(): Decimal;\r\n\r\n    naturalLogarithm(): Decimal;\r\n    ln(): Decimal;\r\n\r\n    negated(): Decimal;\r\n    neg(): Decimal;\r\n\r\n    plus(n: Decimal.Value): Decimal;\r\n    add(n: Decimal.Value): Decimal;\r\n\r\n    precision(includeZeros?: boolean): number;\r\n    sd(includeZeros?: boolean): number;\r\n\r\n    round(): Decimal;\r\n\r\n    sine() : Decimal;\r\n    sin() : Decimal;\r\n\r\n    squareRoot(): Decimal;\r\n    sqrt(): Decimal;\r\n\r\n    tangent() : Decimal;\r\n    tan() : Decimal;\r\n\r\n    times(n: Decimal.Value): Decimal;\r\n    mul(n: Decimal.Value) : Decimal;\r\n\r\n    toBinary(significantDigits?: number): string;\r\n    toBinary(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toDecimalPlaces(decimalPlaces?: number): Decimal;\r\n    toDecimalPlaces(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n    toDP(decimalPlaces?: number): Decimal;\r\n    toDP(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toExponential(decimalPlaces?: number): string;\r\n    toExponential(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFixed(decimalPlaces?: number): string;\r\n    toFixed(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFraction(max_denominator?: Decimal.Value): Decimal[];\r\n\r\n    toHexadecimal(significantDigits?: number): string;\r\n    toHexadecimal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n    toHex(significantDigits?: number): string;\r\n    toHex(significantDigits: number, rounding?: Decimal.Rounding): string;\r\n\r\n    toJSON(): string;\r\n\r\n    toNearest(n: Decimal.Value, rounding?: Decimal.Rounding): Decimal;\r\n\r\n    toNumber(): number;\r\n\r\n    toOctal(significantDigits?: number): string;\r\n    toOctal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toPower(n: Decimal.Value): Decimal;\r\n    pow(n: Decimal.Value): Decimal;\r\n\r\n    toPrecision(significantDigits?: number): string;\r\n    toPrecision(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toSignificantDigits(significantDigits?: number): Decimal;\r\n    toSignificantDigits(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n    toSD(significantDigits?: number): Decimal;\r\n    toSD(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toString(): string;\r\n\r\n    truncated(): Decimal;\r\n    trunc(): Decimal;\r\n\r\n    valueOf(): string;\r\n\r\n    static abs(n: Decimal.Value): Decimal;\r\n    static acos(n: Decimal.Value): Decimal;\r\n    static acosh(n: Decimal.Value): Decimal;\r\n    static add(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static asin(n: Decimal.Value): Decimal;\r\n    static asinh(n: Decimal.Value): Decimal;\r\n    static atan(n: Decimal.Value): Decimal;\r\n    static atanh(n: Decimal.Value): Decimal;\r\n    static atan2(y: Decimal.Value, x: Decimal.Value): Decimal;\r\n    static cbrt(n: Decimal.Value): Decimal;\r\n    static ceil(n: Decimal.Value): Decimal;\r\n    static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    static clone(object?: Decimal.Config): Decimal.Constructor;\r\n    static config(object: Decimal.Config): Decimal.Constructor;\r\n    static cos(n: Decimal.Value): Decimal;\r\n    static cosh(n: Decimal.Value): Decimal;\r\n    static div(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static exp(n: Decimal.Value): Decimal;\r\n    static floor(n: Decimal.Value): Decimal;\r\n    static hypot(...n: Decimal.Value[]): Decimal;\r\n    static isDecimal(object: any): object is Decimal;\r\n    static ln(n: Decimal.Value): Decimal;\r\n    static log(n: Decimal.Value, base?: Decimal.Value): Decimal;\r\n    static log2(n: Decimal.Value): Decimal;\r\n    static log10(n: Decimal.Value): Decimal;\r\n    static max(...n: Decimal.Value[]): Decimal;\r\n    static min(...n: Decimal.Value[]): Decimal;\r\n    static mod(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static mul(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static noConflict(): Decimal.Constructor;   // Browser only\r\n    static pow(base: Decimal.Value, exponent: Decimal.Value): Decimal;\r\n    static random(significantDigits?: number): Decimal;\r\n    static round(n: Decimal.Value): Decimal;\r\n    static set(object: Decimal.Config): Decimal.Constructor;\r\n    static sign(n: Decimal.Value): number;\r\n    static sin(n: Decimal.Value): Decimal;\r\n    static sinh(n: Decimal.Value): Decimal;\r\n    static sqrt(n: Decimal.Value): Decimal;\r\n    static sub(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static sum(...n: Decimal.Value[]): Decimal;\r\n    static tan(n: Decimal.Value): Decimal;\r\n    static tanh(n: Decimal.Value): Decimal;\r\n    static trunc(n: Decimal.Value): Decimal;\r\n\r\n    static readonly default?: Decimal.Constructor;\r\n    static readonly Decimal?: Decimal.Constructor;\r\n\r\n    static readonly precision: number;\r\n    static readonly rounding: Decimal.Rounding;\r\n    static readonly toExpNeg: number;\r\n    static readonly toExpPos: number;\r\n    static readonly minE: number;\r\n    static readonly maxE: number;\r\n    static readonly crypto: boolean;\r\n    static readonly modulo: Decimal.Modulo;\r\n\r\n    static readonly ROUND_UP: 0;\r\n    static readonly ROUND_DOWN: 1;\r\n    static readonly ROUND_CEIL: 2;\r\n    static readonly ROUND_FLOOR: 3;\r\n    static readonly ROUND_HALF_UP: 4;\r\n    static readonly ROUND_HALF_DOWN: 5;\r\n    static readonly ROUND_HALF_EVEN: 6;\r\n    static readonly ROUND_HALF_CEIL: 7;\r\n    static readonly ROUND_HALF_FLOOR: 8;\r\n    static readonly EUCLID: 9;\r\n}\r\n\r\n/**\r\n * Interface for any Decimal.js-like library\r\n * Allows us to accept Decimal.js from different\r\n * versions and some compatible alternatives\r\n */\r\nexport declare interface DecimalJsLike {\r\n    d: number[];\r\n    e: number;\r\n    s: number;\r\n    toFixed(): string;\r\n}\r\n\r\nexport declare type DefaultArgs = InternalArgs<{}, {}, {}, {}>;\r\n\r\nexport declare type DefaultSelection<Payload extends OperationPayload, Args = {}, GlobalOmitOptions = {}> = Args extends {\r\n    omit: infer LocalOmit;\r\n} ? ApplyOmit<UnwrapPayload<{\r\n    default: Payload;\r\n}>['default'], PatchFlat<LocalOmit, ExtractGlobalOmit<GlobalOmitOptions, Uncapitalize<Payload['name']>>>> : ApplyOmit<UnwrapPayload<{\r\n    default: Payload;\r\n}>['default'], ExtractGlobalOmit<GlobalOmitOptions, Uncapitalize<Payload['name']>>>;\r\n\r\nexport declare function defineDmmfProperty(target: object, runtimeDataModel: RuntimeDataModel): void;\r\n\r\ndeclare function defineExtension(ext: ExtensionArgs | ((client: Client) => Client)): (client: Client) => Client;\r\n\r\ndeclare const denylist: readonly [\"$connect\", \"$disconnect\", \"$on\", \"$transaction\", \"$extends\"];\r\n\r\ndeclare type Deprecation = ReadonlyDeep_2<{\r\n    sinceVersion: string;\r\n    reason: string;\r\n    plannedRemovalVersion?: string;\r\n}>;\r\n\r\ndeclare type DeserializedResponse = Array<Record<string, unknown>>;\r\n\r\nexport declare function deserializeJsonResponse(result: unknown): unknown;\r\n\r\nexport declare function deserializeRawResult(response: RawResponse): DeserializedResponse;\r\n\r\nexport declare type DevTypeMapDef = {\r\n    meta: {\r\n        modelProps: string;\r\n    };\r\n    model: {\r\n        [Model in PropertyKey]: {\r\n            [Operation in PropertyKey]: DevTypeMapFnDef;\r\n        };\r\n    };\r\n    other: {\r\n        [Operation in PropertyKey]: DevTypeMapFnDef;\r\n    };\r\n};\r\n\r\nexport declare type DevTypeMapFnDef = {\r\n    args: any;\r\n    result: any;\r\n    payload: OperationPayload;\r\n};\r\n\r\nexport declare namespace DMMF {\r\n    export {\r\n        datamodelEnumToSchemaEnum,\r\n        Document_2 as Document,\r\n        Mappings,\r\n        OtherOperationMappings,\r\n        DatamodelEnum,\r\n        SchemaEnum,\r\n        EnumValue,\r\n        Datamodel,\r\n        uniqueIndex,\r\n        PrimaryKey,\r\n        Model,\r\n        FieldKind,\r\n        FieldNamespace,\r\n        FieldLocation,\r\n        Field,\r\n        FieldDefault,\r\n        FieldDefaultScalar,\r\n        Index,\r\n        IndexType,\r\n        IndexField,\r\n        SortOrder,\r\n        Schema,\r\n        Query,\r\n        QueryOutput,\r\n        TypeRef,\r\n        InputTypeRef,\r\n        SchemaArg,\r\n        OutputType,\r\n        SchemaField,\r\n        OutputTypeRef,\r\n        Deprecation,\r\n        InputType,\r\n        FieldRefType,\r\n        FieldRefAllowType,\r\n        ModelMapping,\r\n        ModelAction\r\n    }\r\n}\r\n\r\ndeclare namespace DMMF_2 {\r\n    export {\r\n        datamodelEnumToSchemaEnum,\r\n        Document_2 as Document,\r\n        Mappings,\r\n        OtherOperationMappings,\r\n        DatamodelEnum,\r\n        SchemaEnum,\r\n        EnumValue,\r\n        Datamodel,\r\n        uniqueIndex,\r\n        PrimaryKey,\r\n        Model,\r\n        FieldKind,\r\n        FieldNamespace,\r\n        FieldLocation,\r\n        Field,\r\n        FieldDefault,\r\n        FieldDefaultScalar,\r\n        Index,\r\n        IndexType,\r\n        IndexField,\r\n        SortOrder,\r\n        Schema,\r\n        Query,\r\n        QueryOutput,\r\n        TypeRef,\r\n        InputTypeRef,\r\n        SchemaArg,\r\n        OutputType,\r\n        SchemaField,\r\n        OutputTypeRef,\r\n        Deprecation,\r\n        InputType,\r\n        FieldRefType,\r\n        FieldRefAllowType,\r\n        ModelMapping,\r\n        ModelAction\r\n    }\r\n}\r\n\r\nexport declare function dmmfToRuntimeDataModel(dmmfDataModel: DMMF_2.Datamodel): RuntimeDataModel;\r\n\r\ndeclare type Document_2 = ReadonlyDeep_2<{\r\n    datamodel: Datamodel;\r\n    schema: Schema;\r\n    mappings: Mappings;\r\n}>;\r\n\r\n/**\r\n * A generic driver adapter factory that allows the user to instantiate a\r\n * driver adapter. The query and result types are specific to the adapter.\r\n */\r\ndeclare interface DriverAdapterFactory<Query, Result> extends AdapterInfo {\r\n    /**\r\n     * Instantiate a driver adapter.\r\n     */\r\n    connect(): Promise<Queryable<Query, Result>>;\r\n}\r\n\r\ndeclare type DynamicArgType = ArgType | {\r\n    arity: 'tuple';\r\n    elements: ArgType[];\r\n};\r\n\r\n/** Client */\r\nexport declare type DynamicClientExtensionArgs<C_, TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof C_]: unknown;\r\n} & {\r\n    [K: symbol]: {\r\n        ctx: Optional<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList> & {\r\n            $parent: Optional<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList>;\r\n        };\r\n    };\r\n};\r\n\r\nexport declare type DynamicClientExtensionThis<TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof ExtArgs['client']]: Return<ExtArgs['client'][P]>;\r\n} & {\r\n    [P in Exclude<TypeMap['meta']['modelProps'], keyof ExtArgs['client']>]: DynamicModelExtensionThis<TypeMap, ModelKey<TypeMap, P>, ExtArgs>;\r\n} & {\r\n    [P in Exclude<keyof TypeMap['other']['operations'], keyof ExtArgs['client']>]: P extends keyof ClientOtherOps ? ClientOtherOps[P] : never;\r\n} & {\r\n    [P in Exclude<ClientBuiltInProp, keyof ExtArgs['client']>]: DynamicClientExtensionThisBuiltin<TypeMap, TypeMapCb, ExtArgs>[P];\r\n} & {\r\n    [K: symbol]: {\r\n        types: TypeMap['other'];\r\n    };\r\n};\r\n\r\nexport declare type DynamicClientExtensionThisBuiltin<TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    $extends: ExtendsHook<'extends', TypeMapCb, ExtArgs, Call<TypeMapCb, {\r\n        extArgs: ExtArgs;\r\n    }>>;\r\n    $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: {\r\n        isolationLevel?: TypeMap['meta']['txIsolationLevel'];\r\n    }): Promise<UnwrapTuple<P>>;\r\n    $transaction<R>(fn: (client: Omit<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList>) => Promise<R>, options?: {\r\n        maxWait?: number;\r\n        timeout?: number;\r\n        isolationLevel?: TypeMap['meta']['txIsolationLevel'];\r\n    }): Promise<R>;\r\n    $disconnect(): Promise<void>;\r\n    $connect(): Promise<void>;\r\n};\r\n\r\n/** Model */\r\nexport declare type DynamicModelExtensionArgs<M_, TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [K in keyof M_]: K extends '$allModels' ? {\r\n        [P in keyof M_[K]]?: unknown;\r\n    } & {\r\n        [K: symbol]: {};\r\n    } : K extends TypeMap['meta']['modelProps'] ? {\r\n        [P in keyof M_[K]]?: unknown;\r\n    } & {\r\n        [K: symbol]: {\r\n            ctx: DynamicModelExtensionThis<TypeMap, ModelKey<TypeMap, K>, ExtArgs> & {\r\n                $parent: DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>;\r\n            } & {\r\n                $name: ModelKey<TypeMap, K>;\r\n            } & {\r\n                /**\r\n                 * @deprecated Use `$name` instead.\r\n                 */\r\n                name: ModelKey<TypeMap, K>;\r\n            };\r\n        };\r\n    } : never;\r\n};\r\n\r\nexport declare type DynamicModelExtensionFluentApi<TypeMap extends TypeMapDef, M extends PropertyKey, P extends PropertyKey, Null> = {\r\n    [K in keyof TypeMap['model'][M]['payload']['objects']]: <A>(args?: Exact<A, Path<TypeMap['model'][M]['operations'][P]['args']['select'], [K]>>) => PrismaPromise<Path<DynamicModelExtensionFnResultBase<TypeMap, M, {\r\n        select: {\r\n            [P in K]: A;\r\n        };\r\n    }, P>, [K]> | Null> & DynamicModelExtensionFluentApi<TypeMap, (TypeMap['model'][M]['payload']['objects'][K] & {})['name'], P, Null | Select<TypeMap['model'][M]['payload']['objects'][K], null>>;\r\n};\r\n\r\nexport declare type DynamicModelExtensionFnResult<TypeMap extends TypeMapDef, M extends PropertyKey, A, P extends PropertyKey, Null> = P extends FluentOperation ? DynamicModelExtensionFluentApi<TypeMap, M, P, Null> & PrismaPromise<DynamicModelExtensionFnResultBase<TypeMap, M, A, P> | Null> : PrismaPromise<DynamicModelExtensionFnResultBase<TypeMap, M, A, P>>;\r\n\r\nexport declare type DynamicModelExtensionFnResultBase<TypeMap extends TypeMapDef, M extends PropertyKey, A, P extends PropertyKey> = GetResult<TypeMap['model'][M]['payload'], A, P & Operation, TypeMap['globalOmitOptions']>;\r\n\r\nexport declare type DynamicModelExtensionFnResultNull<P extends PropertyKey> = P extends 'findUnique' | 'findFirst' ? null : never;\r\n\r\nexport declare type DynamicModelExtensionOperationFn<TypeMap extends TypeMapDef, M extends PropertyKey, P extends PropertyKey> = {} extends TypeMap['model'][M]['operations'][P]['args'] ? <A extends TypeMap['model'][M]['operations'][P]['args']>(args?: Exact<A, TypeMap['model'][M]['operations'][P]['args']>) => DynamicModelExtensionFnResult<TypeMap, M, A, P, DynamicModelExtensionFnResultNull<P>> : <A extends TypeMap['model'][M]['operations'][P]['args']>(args: Exact<A, TypeMap['model'][M]['operations'][P]['args']>) => DynamicModelExtensionFnResult<TypeMap, M, A, P, DynamicModelExtensionFnResultNull<P>>;\r\n\r\nexport declare type DynamicModelExtensionThis<TypeMap extends TypeMapDef, M extends PropertyKey, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof ExtArgs['model'][Uncapitalize<M & string>]]: Return<ExtArgs['model'][Uncapitalize<M & string>][P]>;\r\n} & {\r\n    [P in Exclude<keyof TypeMap['model'][M]['operations'], keyof ExtArgs['model'][Uncapitalize<M & string>]>]: DynamicModelExtensionOperationFn<TypeMap, M, P>;\r\n} & {\r\n    [P in Exclude<'fields', keyof ExtArgs['model'][Uncapitalize<M & string>]>]: TypeMap['model'][M]['fields'];\r\n} & {\r\n    [K: symbol]: {\r\n        types: TypeMap['model'][M];\r\n    };\r\n};\r\n\r\n/** Query */\r\nexport declare type DynamicQueryExtensionArgs<Q_, TypeMap extends TypeMapDef> = {\r\n    [K in keyof Q_]: K extends '$allOperations' ? (args: {\r\n        model?: string;\r\n        operation: string;\r\n        args: any;\r\n        query: (args: any) => PrismaPromise<any>;\r\n    }) => Promise<any> : K extends '$allModels' ? {\r\n        [P in keyof Q_[K] | keyof TypeMap['model'][keyof TypeMap['model']]['operations'] | '$allOperations']?: P extends '$allOperations' ? DynamicQueryExtensionCb<TypeMap, 'model', keyof TypeMap['model'], keyof TypeMap['model'][keyof TypeMap['model']]['operations']> : P extends keyof TypeMap['model'][keyof TypeMap['model']]['operations'] ? DynamicQueryExtensionCb<TypeMap, 'model', keyof TypeMap['model'], P> : never;\r\n    } : K extends TypeMap['meta']['modelProps'] ? {\r\n        [P in keyof Q_[K] | keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations'] | '$allOperations']?: P extends '$allOperations' ? DynamicQueryExtensionCb<TypeMap, 'model', ModelKey<TypeMap, K>, keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations']> : P extends keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations'] ? DynamicQueryExtensionCb<TypeMap, 'model', ModelKey<TypeMap, K>, P> : never;\r\n    } : K extends keyof TypeMap['other']['operations'] ? DynamicQueryExtensionCb<[TypeMap], 0, 'other', K> : never;\r\n};\r\n\r\nexport declare type DynamicQueryExtensionCb<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = <A extends DynamicQueryExtensionCbArgs<TypeMap, _0, _1, _2>>(args: A) => Promise<TypeMap[_0][_1][_2]['result']>;\r\n\r\nexport declare type DynamicQueryExtensionCbArgs<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = (_1 extends unknown ? _2 extends unknown ? {\r\n    args: DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>;\r\n    model: _0 extends 0 ? undefined : _1;\r\n    operation: _2;\r\n    query: <A extends DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>>(args: A) => PrismaPromise<TypeMap[_0][_1]['operations'][_2]['result']>;\r\n} : never : never) & {\r\n    query: (args: DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>) => PrismaPromise<TypeMap[_0][_1]['operations'][_2]['result']>;\r\n};\r\n\r\nexport declare type DynamicQueryExtensionCbArgsArgs<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = _2 extends '$queryRaw' | '$executeRaw' ? Sql : TypeMap[_0][_1]['operations'][_2]['args'];\r\n\r\n/** Result */\r\nexport declare type DynamicResultExtensionArgs<R_, TypeMap extends TypeMapDef> = {\r\n    [K in keyof R_]: {\r\n        [P in keyof R_[K]]?: {\r\n            needs?: DynamicResultExtensionNeeds<TypeMap, ModelKey<TypeMap, K>, R_[K][P]>;\r\n            compute(data: DynamicResultExtensionData<TypeMap, ModelKey<TypeMap, K>, R_[K][P]>): any;\r\n        };\r\n    };\r\n};\r\n\r\nexport declare type DynamicResultExtensionData<TypeMap extends TypeMapDef, M extends PropertyKey, S> = GetFindResult<TypeMap['model'][M]['payload'], {\r\n    select: S;\r\n}, {}>;\r\n\r\nexport declare type DynamicResultExtensionNeeds<TypeMap extends TypeMapDef, M extends PropertyKey, S> = {\r\n    [K in keyof S]: K extends keyof TypeMap['model'][M]['payload']['scalars'] ? S[K] : never;\r\n} & {\r\n    [N in keyof TypeMap['model'][M]['payload']['scalars']]?: boolean;\r\n};\r\n\r\n/**\r\n * Placeholder value for \"no text\".\r\n */\r\nexport declare const empty: Sql;\r\n\r\nexport declare type EmptyToUnknown<T> = T;\r\n\r\ndeclare interface Engine<InteractiveTransactionPayload = unknown> {\r\n    /** The name of the engine. This is meant to be consumed externally */\r\n    readonly name: string;\r\n    onBeforeExit(callback: () => Promise<void>): void;\r\n    start(): Promise<void>;\r\n    stop(): Promise<void>;\r\n    version(forceRun?: boolean): Promise<string> | string;\r\n    request<T>(query: JsonQuery, options: RequestOptions<InteractiveTransactionPayload>): Promise<QueryEngineResultData<T>>;\r\n    requestBatch<T>(queries: JsonQuery[], options: RequestBatchOptions<InteractiveTransactionPayload>): Promise<BatchQueryEngineResult<T>[]>;\r\n    transaction(action: 'start', headers: Transaction_2.TransactionHeaders, options: Transaction_2.Options): Promise<Transaction_2.InteractiveTransactionInfo<unknown>>;\r\n    transaction(action: 'commit', headers: Transaction_2.TransactionHeaders, info: Transaction_2.InteractiveTransactionInfo<unknown>): Promise<void>;\r\n    transaction(action: 'rollback', headers: Transaction_2.TransactionHeaders, info: Transaction_2.InteractiveTransactionInfo<unknown>): Promise<void>;\r\n    metrics(options: MetricsOptionsJson): Promise<Metrics>;\r\n    metrics(options: MetricsOptionsPrometheus): Promise<string>;\r\n    applyPendingMigrations(): Promise<void>;\r\n}\r\n\r\ndeclare interface EngineConfig {\r\n    cwd: string;\r\n    dirname: string;\r\n    enableDebugLogs?: boolean;\r\n    allowTriggerPanic?: boolean;\r\n    prismaPath?: string;\r\n    generator?: GeneratorConfig;\r\n    /**\r\n     * @remarks this field is used internally by Policy, do not rename or remove\r\n     */\r\n    overrideDatasources: Datasources;\r\n    showColors?: boolean;\r\n    logQueries?: boolean;\r\n    logLevel?: 'info' | 'warn';\r\n    env: Record<string, string>;\r\n    flags?: string[];\r\n    clientVersion: string;\r\n    engineVersion: string;\r\n    previewFeatures?: string[];\r\n    engineEndpoint?: string;\r\n    activeProvider?: string;\r\n    logEmitter: LogEmitter;\r\n    transactionOptions: Transaction_2.Options;\r\n    /**\r\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`.\r\n     * If set, this is only used in the library engine, and all queries would be performed through it,\r\n     * rather than Prisma's Rust drivers.\r\n     * @remarks only used by LibraryEngine.ts\r\n     */\r\n    adapter?: SqlDriverAdapterFactory;\r\n    /**\r\n     * The contents of the schema encoded into a string\r\n     */\r\n    inlineSchema: string;\r\n    /**\r\n     * The contents of the datasource url saved in a string\r\n     * @remarks only used by DataProxyEngine.ts\r\n     * @remarks this field is used internally by Policy, do not rename or remove\r\n     */\r\n    inlineDatasources: GetPrismaClientConfig['inlineDatasources'];\r\n    /**\r\n     * The string hash that was produced for a given schema\r\n     * @remarks only used by DataProxyEngine.ts\r\n     */\r\n    inlineSchemaHash: string;\r\n    /**\r\n     * The helper for interaction with OTEL tracing\r\n     * @remarks enabling is determined by the client and @prisma/instrumentation package\r\n     */\r\n    tracingHelper: TracingHelper;\r\n    /**\r\n     * Information about whether we have not found a schema.prisma file in the\r\n     * default location, and that we fell back to finding the schema.prisma file\r\n     * in the current working directory. This usually means it has been bundled.\r\n     */\r\n    isBundled?: boolean;\r\n    /**\r\n     * Web Assembly module loading configuration\r\n     */\r\n    engineWasm?: EngineWasmLoadingConfig;\r\n    compilerWasm?: CompilerWasmLoadingConfig;\r\n    /**\r\n     * Allows Accelerate to use runtime utilities from the client. These are\r\n     * necessary for the AccelerateEngine to function correctly.\r\n     */\r\n    accelerateUtils?: {\r\n        resolveDatasourceUrl: typeof resolveDatasourceUrl;\r\n        getBatchRequestPayload: typeof getBatchRequestPayload;\r\n        prismaGraphQLToJSError: typeof prismaGraphQLToJSError;\r\n        PrismaClientUnknownRequestError: typeof PrismaClientUnknownRequestError;\r\n        PrismaClientInitializationError: typeof PrismaClientInitializationError;\r\n        PrismaClientKnownRequestError: typeof PrismaClientKnownRequestError;\r\n        debug: (...args: any[]) => void;\r\n        engineVersion: string;\r\n        clientVersion: string;\r\n    };\r\n}\r\n\r\ndeclare type EngineEvent<E extends EngineEventType> = E extends QueryEventType ? QueryEvent : LogEvent;\r\n\r\ndeclare type EngineEventType = QueryEventType | LogEventType;\r\n\r\ndeclare type EngineSpan = {\r\n    id: EngineSpanId;\r\n    parentId: string | null;\r\n    name: string;\r\n    startTime: HrTime;\r\n    endTime: HrTime;\r\n    kind: EngineSpanKind;\r\n    attributes?: Record<string, unknown>;\r\n    links?: EngineSpanId[];\r\n};\r\n\r\ndeclare type EngineSpanId = string;\r\n\r\ndeclare type EngineSpanKind = 'client' | 'internal';\r\n\r\ndeclare type EngineWasmLoadingConfig = {\r\n    /**\r\n     * WASM-bindgen runtime for corresponding module\r\n     */\r\n    getRuntime: () => Promise<{\r\n        __wbg_set_wasm(exports: unknown): void;\r\n        QueryEngine: QueryEngineConstructor;\r\n    }>;\r\n    /**\r\n     * Loads the raw wasm module for the wasm query engine. This configuration is\r\n     * generated specifically for each type of client, eg. Node.js client and Edge\r\n     * clients will have different implementations.\r\n     * @remarks this is a callback on purpose, we only load the wasm if needed.\r\n     * @remarks only used by LibraryEngine\r\n     */\r\n    getQueryEngineWasmModule: () => Promise<unknown>;\r\n};\r\n\r\ndeclare type EnumValue = ReadonlyDeep_2<{\r\n    name: string;\r\n    dbName: string | null;\r\n}>;\r\n\r\ndeclare type EnvPaths = {\r\n    rootEnvPath: string | null;\r\n    schemaEnvPath: string | undefined;\r\n};\r\n\r\ndeclare interface EnvValue {\r\n    fromEnvVar: null | string;\r\n    value: null | string;\r\n}\r\n\r\nexport declare type Equals<A, B> = (<T>() => T extends A ? 1 : 2) extends (<T>() => T extends B ? 1 : 2) ? 1 : 0;\r\n\r\ndeclare type Error_2 = MappedError & {\r\n    originalCode?: string;\r\n    originalMessage?: string;\r\n};\r\n\r\ndeclare type ErrorCapturingFunction<T> = T extends (...args: infer A) => Promise<infer R> ? (...args: A) => Promise<Result_4<ErrorCapturingInterface<R>>> : T extends (...args: infer A) => infer R ? (...args: A) => Result_4<ErrorCapturingInterface<R>> : T;\r\n\r\ndeclare type ErrorCapturingInterface<T> = {\r\n    [K in keyof T]: ErrorCapturingFunction<T[K]>;\r\n};\r\n\r\ndeclare interface ErrorCapturingSqlDriverAdapter extends ErrorCapturingInterface<SqlDriverAdapter> {\r\n    readonly errorRegistry: ErrorRegistry;\r\n}\r\n\r\ndeclare type ErrorFormat = 'pretty' | 'colorless' | 'minimal';\r\n\r\ndeclare type ErrorRecord = {\r\n    error: unknown;\r\n};\r\n\r\ndeclare interface ErrorRegistry {\r\n    consumeError(id: number): ErrorRecord | undefined;\r\n}\r\n\r\ndeclare interface ErrorWithBatchIndex {\r\n    batchRequestIdx?: number;\r\n}\r\n\r\ndeclare type EventCallback<E extends ExtendedEventType> = [E] extends ['beforeExit'] ? () => Promise<void> : [E] extends [LogLevel] ? (event: EngineEvent<E>) => void : never;\r\n\r\nexport declare type Exact<A, W> = (A extends unknown ? (W extends A ? {\r\n    [K in keyof A]: Exact<A[K], W[K]>;\r\n} : W) : never) | (A extends Narrowable ? A : never);\r\n\r\n/**\r\n * Defines Exception.\r\n *\r\n * string or an object with one of (message or name or code) and optional stack\r\n */\r\ndeclare type Exception = ExceptionWithCode | ExceptionWithMessage | ExceptionWithName | string;\r\n\r\ndeclare interface ExceptionWithCode {\r\n    code: string | number;\r\n    name?: string;\r\n    message?: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare interface ExceptionWithMessage {\r\n    code?: string | number;\r\n    message: string;\r\n    name?: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare interface ExceptionWithName {\r\n    code?: string | number;\r\n    message?: string;\r\n    name: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare type ExtendedEventType = LogLevel | 'beforeExit';\r\n\r\ndeclare type ExtendedSpanOptions = SpanOptions & {\r\n    /** The name of the span */\r\n    name: string;\r\n    internal?: boolean;\r\n    /** Whether it propagates context (?=true) */\r\n    active?: boolean;\r\n    /** The context to append the span to */\r\n    context?: Context;\r\n};\r\n\r\n/** $extends, defineExtension */\r\nexport declare interface ExtendsHook<Variant extends 'extends' | 'define', TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>, TypeMap extends TypeMapDef = Call<TypeMapCb, {\r\n    extArgs: ExtArgs;\r\n}>> {\r\n    extArgs: ExtArgs;\r\n    <R_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels']?: unknown;\r\n    }, R, M_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels']?: unknown;\r\n    }, M, Q_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels' | keyof TypeMap['other']['operations'] | '$allOperations']?: unknown;\r\n    }, C_ extends {\r\n        [K in string]?: unknown;\r\n    }, C, Args extends InternalArgs = InternalArgs<R, M, {}, C>, MergedArgs extends InternalArgs = MergeExtArgs<TypeMap, ExtArgs, Args>>(extension: ((client: DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>) => {\r\n        $extends: {\r\n            extArgs: Args;\r\n        };\r\n    }) | {\r\n        name?: string;\r\n        query?: DynamicQueryExtensionArgs<Q_, TypeMap>;\r\n        result?: DynamicResultExtensionArgs<R_, TypeMap> & R;\r\n        model?: DynamicModelExtensionArgs<M_, TypeMap, TypeMapCb, ExtArgs> & M;\r\n        client?: DynamicClientExtensionArgs<C_, TypeMap, TypeMapCb, ExtArgs> & C;\r\n    }): {\r\n        extends: DynamicClientExtensionThis<Call<TypeMapCb, {\r\n            extArgs: MergedArgs;\r\n        }>, TypeMapCb, MergedArgs>;\r\n        define: (client: any) => {\r\n            $extends: {\r\n                extArgs: Args;\r\n            };\r\n        };\r\n    }[Variant];\r\n}\r\n\r\nexport declare type ExtensionArgs = Optional<RequiredExtensionArgs>;\r\n\r\ndeclare namespace Extensions {\r\n    export {\r\n        defineExtension,\r\n        getExtensionContext\r\n    }\r\n}\r\nexport { Extensions }\r\n\r\ndeclare namespace Extensions_2 {\r\n    export {\r\n        InternalArgs,\r\n        DefaultArgs,\r\n        GetPayloadResultExtensionKeys,\r\n        GetPayloadResultExtensionObject,\r\n        GetPayloadResult,\r\n        GetSelect,\r\n        GetOmit,\r\n        DynamicQueryExtensionArgs,\r\n        DynamicQueryExtensionCb,\r\n        DynamicQueryExtensionCbArgs,\r\n        DynamicQueryExtensionCbArgsArgs,\r\n        DynamicResultExtensionArgs,\r\n        DynamicResultExtensionNeeds,\r\n        DynamicResultExtensionData,\r\n        DynamicModelExtensionArgs,\r\n        DynamicModelExtensionThis,\r\n        DynamicModelExtensionOperationFn,\r\n        DynamicModelExtensionFnResult,\r\n        DynamicModelExtensionFnResultBase,\r\n        DynamicModelExtensionFluentApi,\r\n        DynamicModelExtensionFnResultNull,\r\n        DynamicClientExtensionArgs,\r\n        DynamicClientExtensionThis,\r\n        ClientBuiltInProp,\r\n        DynamicClientExtensionThisBuiltin,\r\n        ExtendsHook,\r\n        MergeExtArgs,\r\n        AllModelsToStringIndex,\r\n        TypeMapDef,\r\n        DevTypeMapDef,\r\n        DevTypeMapFnDef,\r\n        ClientOptionDef,\r\n        ClientOtherOps,\r\n        TypeMapCbDef,\r\n        ModelKey,\r\n        RequiredExtensionArgs as UserArgs\r\n    }\r\n}\r\n\r\nexport declare type ExtractGlobalOmit<Options, ModelName extends string> = Options extends {\r\n    omit: {\r\n        [K in ModelName]: infer GlobalOmit;\r\n    };\r\n} ? GlobalOmit : {};\r\n\r\ndeclare type Field = ReadonlyDeep_2<{\r\n    kind: FieldKind;\r\n    name: string;\r\n    isRequired: boolean;\r\n    isList: boolean;\r\n    isUnique: boolean;\r\n    isId: boolean;\r\n    isReadOnly: boolean;\r\n    isGenerated?: boolean;\r\n    isUpdatedAt?: boolean;\r\n    /**\r\n     * Describes the data type in the same the way it is defined in the Prisma schema:\r\n     * BigInt, Boolean, Bytes, DateTime, Decimal, Float, Int, JSON, String, $ModelName\r\n     */\r\n    type: string;\r\n    /**\r\n     * Native database type, if specified.\r\n     * For example, `@db.VarChar(191)` is encoded as `['VarChar', ['191']]`,\r\n     * `@db.Text` is encoded as `['Text', []]`.\r\n     */\r\n    nativeType?: [string, string[]] | null;\r\n    dbName?: string | null;\r\n    hasDefaultValue: boolean;\r\n    default?: FieldDefault | FieldDefaultScalar | FieldDefaultScalar[];\r\n    relationFromFields?: string[];\r\n    relationToFields?: string[];\r\n    relationOnDelete?: string;\r\n    relationOnUpdate?: string;\r\n    relationName?: string;\r\n    documentation?: string;\r\n}>;\r\n\r\ndeclare type FieldDefault = ReadonlyDeep_2<{\r\n    name: string;\r\n    args: Array<string | number>;\r\n}>;\r\n\r\ndeclare type FieldDefaultScalar = string | boolean | number;\r\n\r\ndeclare type FieldInitializer = {\r\n    type: 'value';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'lastInsertId';\r\n};\r\n\r\ndeclare type FieldKind = 'scalar' | 'object' | 'enum' | 'unsupported';\r\n\r\ndeclare type FieldLocation = 'scalar' | 'inputObjectTypes' | 'outputObjectTypes' | 'enumTypes' | 'fieldRefTypes';\r\n\r\ndeclare type FieldNamespace = 'model' | 'prisma';\r\n\r\ndeclare type FieldOperation = {\r\n    type: 'set';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'add';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'subtract';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'multiply';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'divide';\r\n    value: PrismaValue;\r\n};\r\n\r\n/**\r\n * A reference to a specific field of a specific model\r\n */\r\nexport declare interface FieldRef<Model, FieldType> {\r\n    readonly modelName: Model;\r\n    readonly name: string;\r\n    readonly typeName: FieldType;\r\n    readonly isList: boolean;\r\n}\r\n\r\ndeclare type FieldRefAllowType = TypeRef<'scalar' | 'enumTypes'>;\r\n\r\ndeclare type FieldRefType = ReadonlyDeep_2<{\r\n    name: string;\r\n    allowTypes: FieldRefAllowType[];\r\n    fields: SchemaArg[];\r\n}>;\r\n\r\ndeclare type FieldScalarType = {\r\n    type: 'string' | 'int' | 'bigint' | 'float' | 'boolean' | 'json' | 'object' | 'datetime' | 'decimal' | 'unsupported';\r\n} | {\r\n    type: 'enum';\r\n    name: string;\r\n} | {\r\n    type: 'bytes';\r\n    encoding: 'array' | 'base64' | 'hex';\r\n};\r\n\r\ndeclare type FieldType = {\r\n    arity: Arity;\r\n} & FieldScalarType;\r\n\r\ndeclare type FluentOperation = 'findUnique' | 'findUniqueOrThrow' | 'findFirst' | 'findFirstOrThrow' | 'create' | 'update' | 'upsert' | 'delete';\r\n\r\nexport declare interface Fn<Params = unknown, Returns = unknown> {\r\n    params: Params;\r\n    returns: Returns;\r\n}\r\n\r\ndeclare type Fragment = {\r\n    type: 'stringChunk';\r\n    chunk: string;\r\n} | {\r\n    type: 'parameter';\r\n} | {\r\n    type: 'parameterTuple';\r\n} | {\r\n    type: 'parameterTupleList';\r\n    itemPrefix: string;\r\n    itemSeparator: string;\r\n    itemSuffix: string;\r\n    groupSeparator: string;\r\n};\r\n\r\ndeclare interface GeneratorConfig {\r\n    name: string;\r\n    output: EnvValue | null;\r\n    isCustomOutput?: boolean;\r\n    provider: EnvValue;\r\n    config: {\r\n        /** `output` is a reserved name and will only be available directly at `generator.output` */\r\n        output?: never;\r\n        /** `provider` is a reserved name and will only be available directly at `generator.provider` */\r\n        provider?: never;\r\n        /** `binaryTargets` is a reserved name and will only be available directly at `generator.binaryTargets` */\r\n        binaryTargets?: never;\r\n        /** `previewFeatures` is a reserved name and will only be available directly at `generator.previewFeatures` */\r\n        previewFeatures?: never;\r\n    } & {\r\n        [key: string]: string | string[] | undefined;\r\n    };\r\n    binaryTargets: BinaryTargetsEnvValue[];\r\n    previewFeatures: string[];\r\n    envPaths?: EnvPaths;\r\n    sourceFilePath: string;\r\n}\r\n\r\nexport declare type GetAggregateResult<P extends OperationPayload, A> = {\r\n    [K in keyof A as K extends Aggregate ? K : never]: K extends '_count' ? A[K] extends true ? number : Count<A[K]> : {\r\n        [J in keyof A[K] & string]: P['scalars'][J] | null;\r\n    };\r\n};\r\n\r\ndeclare function getBatchRequestPayload(batch: JsonQuery[], transaction?: TransactionOptions_2<unknown>): QueryEngineBatchRequest;\r\n\r\nexport declare type GetBatchResult = {\r\n    count: number;\r\n};\r\n\r\nexport declare type GetCountResult<A> = A extends {\r\n    select: infer S;\r\n} ? (S extends true ? number : Count<S>) : number;\r\n\r\ndeclare function getExtensionContext<T>(that: T): Context_2<T>;\r\n\r\nexport declare type GetFindResult<P extends OperationPayload, A, GlobalOmitOptions> = Equals<A, any> extends 1 ? DefaultSelection<P, A, GlobalOmitOptions> : A extends {\r\n    select: infer S extends object;\r\n} & Record<string, unknown> | {\r\n    include: infer I extends object;\r\n} & Record<string, unknown> ? {\r\n    [K in keyof S | keyof I as (S & I)[K] extends false | undefined | Skip | null ? never : K]: (S & I)[K] extends object ? P extends SelectablePayloadFields<K, (infer O)[]> ? O extends OperationPayload ? GetFindResult<O, (S & I)[K], GlobalOmitOptions>[] : never : P extends SelectablePayloadFields<K, infer O | null> ? O extends OperationPayload ? GetFindResult<O, (S & I)[K], GlobalOmitOptions> | SelectField<P, K> & null : never : K extends '_count' ? Count<GetFindResult<P, (S & I)[K], GlobalOmitOptions>> : never : P extends SelectablePayloadFields<K, (infer O)[]> ? O extends OperationPayload ? DefaultSelection<O, {}, GlobalOmitOptions>[] : never : P extends SelectablePayloadFields<K, infer O | null> ? O extends OperationPayload ? DefaultSelection<O, {}, GlobalOmitOptions> | SelectField<P, K> & null : never : P extends {\r\n        scalars: {\r\n            [k in K]: infer O;\r\n        };\r\n    } ? O : K extends '_count' ? Count<P['objects']> : never;\r\n} & (A extends {\r\n    include: any;\r\n} & Record<string, unknown> ? DefaultSelection<P, A & {\r\n    omit: A['omit'];\r\n}, GlobalOmitOptions> : unknown) : DefaultSelection<P, A, GlobalOmitOptions>;\r\n\r\nexport declare type GetGroupByResult<P extends OperationPayload, A> = A extends {\r\n    by: string[];\r\n} ? Array<GetAggregateResult<P, A> & {\r\n    [K in A['by'][number]]: P['scalars'][K];\r\n}> : A extends {\r\n    by: string;\r\n} ? Array<GetAggregateResult<P, A> & {\r\n    [K in A['by']]: P['scalars'][K];\r\n}> : {}[];\r\n\r\nexport declare type GetOmit<BaseKeys extends string, R extends InternalArgs['result'][string], ExtraType = never> = {\r\n    [K in (string extends keyof R ? never : keyof R) | BaseKeys]?: boolean | ExtraType;\r\n};\r\n\r\nexport declare type GetPayloadResult<Base extends Record<any, any>, R extends InternalArgs['result'][string]> = Omit<Base, GetPayloadResultExtensionKeys<R>> & GetPayloadResultExtensionObject<R>;\r\n\r\nexport declare type GetPayloadResultExtensionKeys<R extends InternalArgs['result'][string], KR extends keyof R = string extends keyof R ? never : keyof R> = KR;\r\n\r\nexport declare type GetPayloadResultExtensionObject<R extends InternalArgs['result'][string]> = {\r\n    [K in GetPayloadResultExtensionKeys<R>]: R[K] extends () => {\r\n        compute: (...args: any) => infer C;\r\n    } ? C : never;\r\n};\r\n\r\nexport declare function getPrismaClient(config: GetPrismaClientConfig): {\r\n    new (optionsArg?: PrismaClientOptions): {\r\n        _originalClient: any;\r\n        _runtimeDataModel: RuntimeDataModel;\r\n        _requestHandler: RequestHandler;\r\n        _connectionPromise?: Promise<any> | undefined;\r\n        _disconnectionPromise?: Promise<any> | undefined;\r\n        _engineConfig: EngineConfig;\r\n        _accelerateEngineConfig: AccelerateEngineConfig;\r\n        _clientVersion: string;\r\n        _errorFormat: ErrorFormat;\r\n        _tracingHelper: TracingHelper;\r\n        _previewFeatures: string[];\r\n        _activeProvider: string;\r\n        _globalOmit?: GlobalOmitOptions | undefined;\r\n        _extensions: MergedExtensionsList;\r\n        /**\r\n         * @remarks This is used internally by Policy, do not rename or remove\r\n         */\r\n        _engine: Engine;\r\n        /**\r\n         * A fully constructed/applied Client that references the parent\r\n         * PrismaClient. This is used for Client extensions only.\r\n         */\r\n        _appliedParent: any;\r\n        _createPrismaPromise: PrismaPromiseFactory;\r\n        $on<E extends ExtendedEventType>(eventType: E, callback: EventCallback<E>): any;\r\n        $connect(): Promise<void>;\r\n        /**\r\n         * Disconnect from the database\r\n         */\r\n        $disconnect(): Promise<void>;\r\n        /**\r\n         * Executes a raw query and always returns a number\r\n         */\r\n        $executeRawInternal(transaction: PrismaPromiseTransaction | undefined, clientMethod: string, args: RawQueryArgs, middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>): Promise<number>;\r\n        /**\r\n         * Executes a raw query provided through a safe tag function\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $executeRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Unsafe counterpart of `$executeRaw` that is susceptible to SQL injections\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $executeRawUnsafe(query: string, ...values: RawValue[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Executes a raw command only for MongoDB\r\n         *\r\n         * @param command\r\n         * @returns\r\n         */\r\n        $runCommandRaw(command: Record<string, JsInputValue>): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Executes a raw query and returns selected data\r\n         */\r\n        $queryRawInternal(transaction: PrismaPromiseTransaction | undefined, clientMethod: string, args: RawQueryArgs, middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>): Promise<any>;\r\n        /**\r\n         * Executes a raw query provided through a safe tag function\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $queryRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Counterpart to $queryRaw, that returns strongly typed results\r\n         * @param typedSql\r\n         */\r\n        $queryRawTyped(typedSql: UnknownTypedSql): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Unsafe counterpart of `$queryRaw` that is susceptible to SQL injections\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $queryRawUnsafe(query: string, ...values: RawValue[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Execute a batch of requests in a transaction\r\n         * @param requests\r\n         * @param options\r\n         */\r\n        _transactionWithArray({ promises, options, }: {\r\n            promises: Array<PrismaPromise_2<any>>;\r\n            options?: BatchTransactionOptions;\r\n        }): Promise<any>;\r\n        /**\r\n         * Perform a long-running transaction\r\n         * @param callback\r\n         * @param options\r\n         * @returns\r\n         */\r\n        _transactionWithCallback({ callback, options, }: {\r\n            callback: (client: Client) => Promise<unknown>;\r\n            options?: Options;\r\n        }): Promise<unknown>;\r\n        _createItxClient(transaction: PrismaPromiseInteractiveTransaction): Client;\r\n        /**\r\n         * Execute queries within a transaction\r\n         * @param input a callback or a query list\r\n         * @param options to set timeouts (callback)\r\n         * @returns\r\n         */\r\n        $transaction(input: any, options?: any): Promise<any>;\r\n        /**\r\n         * Runs the middlewares over params before executing a request\r\n         * @param internalParams\r\n         * @returns\r\n         */\r\n        _request(internalParams: InternalRequestParams): Promise<any>;\r\n        _executeRequest({ args, clientMethod, dataPath, callsite, action, model, argsMapper, transaction, unpacker, otelParentCtx, customDataProxyFetch, }: InternalRequestParams): Promise<any>;\r\n        $metrics: MetricsClient;\r\n        /**\r\n         * Shortcut for checking a preview flag\r\n         * @param feature preview flag\r\n         * @returns\r\n         */\r\n        _hasPreviewFlag(feature: string): boolean;\r\n        $applyPendingMigrations(): Promise<void>;\r\n        $extends: typeof $extends;\r\n        readonly [Symbol.toStringTag]: string;\r\n    };\r\n};\r\n\r\n/**\r\n * Config that is stored into the generated client. When the generated client is\r\n * loaded, this same config is passed to {@link getPrismaClient} which creates a\r\n * closure with that config around a non-instantiated [[PrismaClient]].\r\n */\r\nexport declare type GetPrismaClientConfig = {\r\n    runtimeDataModel: RuntimeDataModel;\r\n    generator?: GeneratorConfig;\r\n    relativeEnvPaths?: {\r\n        rootEnvPath?: string | null;\r\n        schemaEnvPath?: string | null;\r\n    };\r\n    relativePath: string;\r\n    dirname: string;\r\n    clientVersion: string;\r\n    engineVersion: string;\r\n    datasourceNames: string[];\r\n    activeProvider: ActiveConnectorType;\r\n    /**\r\n     * The contents of the schema encoded into a string\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineSchema: string;\r\n    /**\r\n     * A special env object just for the data proxy edge runtime.\r\n     * Allows bundlers to inject their own env variables (Vercel).\r\n     * Allows platforms to declare global variables as env (Workers).\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    injectableEdgeEnv?: () => LoadedEnv;\r\n    /**\r\n     * The contents of the datasource url saved in a string.\r\n     * This can either be an env var name or connection string.\r\n     * It is needed by the client to connect to the Data Proxy.\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineDatasources: {\r\n        [name in string]: {\r\n            url: EnvValue;\r\n        };\r\n    };\r\n    /**\r\n     * The string hash that was produced for a given schema\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineSchemaHash: string;\r\n    /**\r\n     * A marker to indicate that the client was not generated via `prisma\r\n     * generate` but was generated via `generate --postinstall` script instead.\r\n     * @remarks used to error for Vercel/Netlify for schema caching issues\r\n     */\r\n    postinstall?: boolean;\r\n    /**\r\n     * Information about the CI where the Prisma Client has been generated. The\r\n     * name of the CI environment is stored at generation time because CI\r\n     * information is not always available at runtime. Moreover, the edge client\r\n     * has no notion of environment variables, so this works around that.\r\n     * @remarks used to error for Vercel/Netlify for schema caching issues\r\n     */\r\n    ciName?: string;\r\n    /**\r\n     * Information about whether we have not found a schema.prisma file in the\r\n     * default location, and that we fell back to finding the schema.prisma file\r\n     * in the current working directory. This usually means it has been bundled.\r\n     */\r\n    isBundled?: boolean;\r\n    /**\r\n     * A boolean that is `false` when the client was generated with --no-engine. At\r\n     * runtime, this means the client will be bound to be using the Data Proxy.\r\n     */\r\n    copyEngine?: boolean;\r\n    /**\r\n     * Optional wasm loading configuration\r\n     */\r\n    engineWasm?: EngineWasmLoadingConfig;\r\n    compilerWasm?: CompilerWasmLoadingConfig;\r\n};\r\n\r\nexport declare type GetResult<Payload extends OperationPayload, Args, OperationName extends Operation = 'findUniqueOrThrow', GlobalOmitOptions = {}> = {\r\n    findUnique: GetFindResult<Payload, Args, GlobalOmitOptions> | null;\r\n    findUniqueOrThrow: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    findFirst: GetFindResult<Payload, Args, GlobalOmitOptions> | null;\r\n    findFirstOrThrow: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    findMany: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    create: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    createMany: GetBatchResult;\r\n    createManyAndReturn: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    update: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    updateMany: GetBatchResult;\r\n    updateManyAndReturn: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    upsert: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    delete: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    deleteMany: GetBatchResult;\r\n    aggregate: GetAggregateResult<Payload, Args>;\r\n    count: GetCountResult<Args>;\r\n    groupBy: GetGroupByResult<Payload, Args>;\r\n    $queryRaw: unknown;\r\n    $queryRawTyped: unknown;\r\n    $executeRaw: number;\r\n    $queryRawUnsafe: unknown;\r\n    $executeRawUnsafe: number;\r\n    $runCommandRaw: JsonObject;\r\n    findRaw: JsonObject;\r\n    aggregateRaw: JsonObject;\r\n}[OperationName];\r\n\r\nexport declare function getRuntime(): GetRuntimeOutput;\r\n\r\ndeclare type GetRuntimeOutput = {\r\n    id: RuntimeName;\r\n    prettyName: string;\r\n    isEdge: boolean;\r\n};\r\n\r\nexport declare type GetSelect<Base extends Record<any, any>, R extends InternalArgs['result'][string], KR extends keyof R = string extends keyof R ? never : keyof R> = {\r\n    [K in KR | keyof Base]?: K extends KR ? boolean : Base[K];\r\n};\r\n\r\ndeclare type GlobalOmitOptions = {\r\n    [modelName: string]: {\r\n        [fieldName: string]: boolean;\r\n    };\r\n};\r\n\r\ndeclare type HandleErrorParams = {\r\n    args: JsArgs;\r\n    error: any;\r\n    clientMethod: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    modelName?: string;\r\n    globalOmit?: GlobalOmitOptions;\r\n};\r\n\r\ndeclare type HrTime = [number, number];\r\n\r\n/**\r\n * Defines High-Resolution Time.\r\n *\r\n * The first number, HrTime[0], is UNIX Epoch time in seconds since 00:00:00 UTC on 1 January 1970.\r\n * The second number, HrTime[1], represents the partial second elapsed since Unix Epoch time represented by first number in nanoseconds.\r\n * For example, 2021-01-01T12:30:10.150Z in UNIX Epoch time in milliseconds is represented as 1609504210150.\r\n * The first number is calculated by converting and truncating the Epoch time in milliseconds to seconds:\r\n * HrTime[0] = Math.trunc(1609504210150 / 1000) = 1609504210.\r\n * The second number is calculated by converting the digits after the decimal point of the subtraction, (1609504210150 / 1000) - HrTime[0], to nanoseconds:\r\n * HrTime[1] = Number((1609504210.150 - HrTime[0]).toFixed(9)) * 1e9 = 150000000.\r\n * This is represented in HrTime format as [1609504210, 150000000].\r\n */\r\ndeclare type HrTime_2 = [number, number];\r\n\r\ndeclare type Index = ReadonlyDeep_2<{\r\n    model: string;\r\n    type: IndexType;\r\n    isDefinedOnField: boolean;\r\n    name?: string;\r\n    dbName?: string;\r\n    algorithm?: string;\r\n    clustered?: boolean;\r\n    fields: IndexField[];\r\n}>;\r\n\r\ndeclare type IndexField = ReadonlyDeep_2<{\r\n    name: string;\r\n    sortOrder?: SortOrder;\r\n    length?: number;\r\n    operatorClass?: string;\r\n}>;\r\n\r\ndeclare type IndexType = 'id' | 'normal' | 'unique' | 'fulltext';\r\n\r\ndeclare type InMemoryOps = {\r\n    pagination: Pagination | null;\r\n    distinct: string[] | null;\r\n    reverse: boolean;\r\n    linkingFields: string[] | null;\r\n    nested: Record<string, InMemoryOps>;\r\n};\r\n\r\n/**\r\n * Matches a JSON array.\r\n * Unlike \\`JsonArray\\`, readonly arrays are assignable to this type.\r\n */\r\nexport declare interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {\r\n}\r\n\r\n/**\r\n * Matches a JSON object.\r\n * Unlike \\`JsonObject\\`, this type allows undefined and read-only properties.\r\n */\r\nexport declare type InputJsonObject = {\r\n    readonly [Key in string]?: InputJsonValue | null;\r\n};\r\n\r\n/**\r\n * Matches any valid value that can be used as an input for operations like\r\n * create and update as the value of a JSON field. Unlike \\`JsonValue\\`, this\r\n * type allows read-only arrays and read-only object properties and disallows\r\n * \\`null\\` at the top level.\r\n *\r\n * \\`null\\` cannot be used as the value of a JSON field because its meaning\r\n * would be ambiguous. Use \\`Prisma.JsonNull\\` to store the JSON null value or\r\n * \\`Prisma.DbNull\\` to clear the JSON value and set the field to the database\r\n * NULL value instead.\r\n *\r\n * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values\r\n */\r\nexport declare type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | {\r\n    toJSON(): unknown;\r\n};\r\n\r\ndeclare type InputType = ReadonlyDeep_2<{\r\n    name: string;\r\n    constraints: {\r\n        maxNumFields: number | null;\r\n        minNumFields: number | null;\r\n        fields?: string[];\r\n    };\r\n    meta?: {\r\n        source?: string;\r\n        grouping?: string;\r\n    };\r\n    fields: SchemaArg[];\r\n}>;\r\n\r\ndeclare type InputTypeRef = TypeRef<'scalar' | 'inputObjectTypes' | 'enumTypes' | 'fieldRefTypes'>;\r\n\r\ndeclare type InteractiveTransactionInfo<Payload = unknown> = {\r\n    /**\r\n     * Transaction ID returned by the query engine.\r\n     */\r\n    id: string;\r\n    /**\r\n     * Arbitrary payload the meaning of which depends on the `Engine` implementation.\r\n     * For example, `DataProxyEngine` needs to associate different API endpoints with transactions.\r\n     * In `LibraryEngine` and `BinaryEngine` it is currently not used.\r\n     */\r\n    payload: Payload;\r\n};\r\n\r\ndeclare type InteractiveTransactionOptions<Payload> = Transaction_2.InteractiveTransactionInfo<Payload>;\r\n\r\nexport declare type InternalArgs<R = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, M = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, Q = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, C = {\r\n    [K in string]: unknown;\r\n}> = {\r\n    result: {\r\n        [K in keyof R]: {\r\n            [P in keyof R[K]]: () => R[K][P];\r\n        };\r\n    };\r\n    model: {\r\n        [K in keyof M]: {\r\n            [P in keyof M[K]]: () => M[K][P];\r\n        };\r\n    };\r\n    query: {\r\n        [K in keyof Q]: {\r\n            [P in keyof Q[K]]: () => Q[K][P];\r\n        };\r\n    };\r\n    client: {\r\n        [K in keyof C]: () => C[K];\r\n    };\r\n};\r\n\r\ndeclare type InternalRequestParams = {\r\n    /**\r\n     * The original client method being called.\r\n     * Even though the rootField / operation can be changed,\r\n     * this method stays as it is, as it's what the user's\r\n     * code looks like\r\n     */\r\n    clientMethod: string;\r\n    /**\r\n     * Name of js model that triggered the request. Might be used\r\n     * for warnings or error messages\r\n     */\r\n    jsModelName?: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    unpacker?: Unpacker;\r\n    otelParentCtx?: Context;\r\n    /** Used to \"desugar\" a user input into an \"expanded\" one */\r\n    argsMapper?: (args?: UserArgs_2) => UserArgs_2;\r\n    /** Used to convert args for middleware and back */\r\n    middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>;\r\n    /** Used for Accelerate client extension via Data Proxy */\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n} & Omit<QueryMiddlewareParams, 'runInTransaction'>;\r\n\r\ndeclare type IsolationLevel = 'READ UNCOMMITTED' | 'READ COMMITTED' | 'REPEATABLE READ' | 'SNAPSHOT' | 'SERIALIZABLE';\r\n\r\ndeclare type IsolationLevel_2 = 'ReadUncommitted' | 'ReadCommitted' | 'RepeatableRead' | 'Snapshot' | 'Serializable';\r\n\r\ndeclare function isSkip(value: unknown): value is Skip;\r\n\r\nexport declare function isTypedSql(value: unknown): value is UnknownTypedSql;\r\n\r\nexport declare type ITXClientDenyList = (typeof denylist)[number];\r\n\r\nexport declare const itxClientDenyList: readonly (string | symbol)[];\r\n\r\ndeclare interface Job {\r\n    resolve: (data: any) => void;\r\n    reject: (data: any) => void;\r\n    request: any;\r\n}\r\n\r\n/**\r\n * Create a SQL query for a list of values.\r\n */\r\nexport declare function join(values: readonly RawValue[], separator?: string, prefix?: string, suffix?: string): Sql;\r\n\r\ndeclare type JoinExpression = {\r\n    child: QueryPlanNode;\r\n    on: [left: string, right: string][];\r\n    parentField: string;\r\n    isRelationUnique: boolean;\r\n};\r\n\r\nexport declare type JsArgs = {\r\n    select?: Selection_2;\r\n    include?: Selection_2;\r\n    omit?: Omission;\r\n    [argName: string]: JsInputValue;\r\n};\r\n\r\nexport declare type JsInputValue = null | undefined | string | number | boolean | bigint | Uint8Array | Date | DecimalJsLike | ObjectEnumValue | RawParameters | JsonConvertible | FieldRef<string, unknown> | JsInputValue[] | Skip | {\r\n    [key: string]: JsInputValue;\r\n};\r\n\r\ndeclare type JsonArgumentValue = number | string | boolean | null | RawTaggedValue | JsonArgumentValue[] | {\r\n    [key: string]: JsonArgumentValue;\r\n};\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches a JSON array.\r\n */\r\nexport declare interface JsonArray extends Array<JsonValue> {\r\n}\r\n\r\nexport declare type JsonBatchQuery = {\r\n    batch: JsonQuery[];\r\n    transaction?: {\r\n        isolationLevel?: IsolationLevel_2;\r\n    };\r\n};\r\n\r\nexport declare interface JsonConvertible {\r\n    toJSON(): unknown;\r\n}\r\n\r\ndeclare type JsonFieldSelection = {\r\n    arguments?: Record<string, JsonArgumentValue> | RawTaggedValue;\r\n    selection: JsonSelectionSet;\r\n};\r\n\r\ndeclare class JsonNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches a JSON object.\r\n * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from.\r\n */\r\nexport declare type JsonObject = {\r\n    [Key in string]?: JsonValue;\r\n};\r\n\r\nexport declare type JsonQuery = {\r\n    modelName?: string;\r\n    action: JsonQueryAction;\r\n    query: JsonFieldSelection;\r\n};\r\n\r\ndeclare type JsonQueryAction = 'findUnique' | 'findUniqueOrThrow' | 'findFirst' | 'findFirstOrThrow' | 'findMany' | 'createOne' | 'createMany' | 'createManyAndReturn' | 'updateOne' | 'updateMany' | 'updateManyAndReturn' | 'deleteOne' | 'deleteMany' | 'upsertOne' | 'aggregate' | 'groupBy' | 'executeRaw' | 'queryRaw' | 'runCommandRaw' | 'findRaw' | 'aggregateRaw';\r\n\r\ndeclare type JsonSelectionSet = {\r\n    $scalars?: boolean;\r\n    $composites?: boolean;\r\n} & {\r\n    [fieldName: string]: boolean | JsonFieldSelection;\r\n};\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches any valid JSON value.\r\n */\r\nexport declare type JsonValue = string | number | boolean | JsonObject | JsonArray | null;\r\n\r\nexport declare type JsOutputValue = null | string | number | boolean | bigint | Uint8Array | Date | Decimal | JsOutputValue[] | {\r\n    [key: string]: JsOutputValue;\r\n};\r\n\r\nexport declare type JsPromise<T> = Promise<T> & {};\r\n\r\ndeclare type KnownErrorParams = {\r\n    code: string;\r\n    clientVersion: string;\r\n    meta?: Record<string, unknown>;\r\n    batchRequestIdx?: number;\r\n};\r\n\r\n/**\r\n * A pointer from the current {@link Span} to another span in the same trace or\r\n * in a different trace.\r\n * Few examples of Link usage.\r\n * 1. Batch Processing: A batch of elements may contain elements associated\r\n *    with one or more traces/spans. Since there can only be one parent\r\n *    SpanContext, Link is used to keep reference to SpanContext of all\r\n *    elements in the batch.\r\n * 2. Public Endpoint: A SpanContext in incoming client request on a public\r\n *    endpoint is untrusted from service provider perspective. In such case it\r\n *    is advisable to start a new trace with appropriate sampling decision.\r\n *    However, it is desirable to associate incoming SpanContext to new trace\r\n *    initiated on service provider side so two traces (from Client and from\r\n *    Service Provider) can be correlated.\r\n */\r\ndeclare interface Link {\r\n    /** The {@link SpanContext} of a linked span. */\r\n    context: SpanContext;\r\n    /** A set of {@link SpanAttributes} on the link. */\r\n    attributes?: SpanAttributes;\r\n    /** Count of attributes of the link that were dropped due to collection limits */\r\n    droppedAttributesCount?: number;\r\n}\r\n\r\ndeclare type LoadedEnv = {\r\n    message?: string;\r\n    parsed: {\r\n        [x: string]: string;\r\n    };\r\n} | undefined;\r\n\r\ndeclare type LocationInFile = {\r\n    fileName: string;\r\n    lineNumber: number | null;\r\n    columnNumber: number | null;\r\n};\r\n\r\ndeclare type LogDefinition = {\r\n    level: LogLevel;\r\n    emit: 'stdout' | 'event';\r\n};\r\n\r\n/**\r\n * Typings for the events we emit.\r\n *\r\n * @remarks\r\n * If this is updated, our edge runtime shim needs to be updated as well.\r\n */\r\ndeclare type LogEmitter = {\r\n    on<E extends EngineEventType>(event: E, listener: (event: EngineEvent<E>) => void): LogEmitter;\r\n    emit(event: QueryEventType, payload: QueryEvent): boolean;\r\n    emit(event: LogEventType, payload: LogEvent): boolean;\r\n};\r\n\r\ndeclare type LogEvent = {\r\n    timestamp: Date;\r\n    message: string;\r\n    target: string;\r\n};\r\n\r\ndeclare type LogEventType = 'info' | 'warn' | 'error';\r\n\r\ndeclare type LogLevel = 'info' | 'query' | 'warn' | 'error';\r\n\r\n/**\r\n * Generates more strict variant of an enum which, unlike regular enum,\r\n * throws on non-existing property access. This can be useful in following situations:\r\n * - we have an API, that accepts both `undefined` and `SomeEnumType` as an input\r\n * - enum values are generated dynamically from DMMF.\r\n *\r\n * In that case, if using normal enums and no compile-time typechecking, using non-existing property\r\n * will result in `undefined` value being used, which will be accepted. Using strict enum\r\n * in this case will help to have a runtime exception, telling you that you are probably doing something wrong.\r\n *\r\n * Note: if you need to check for existence of a value in the enum you can still use either\r\n * `in` operator or `hasOwnProperty` function.\r\n *\r\n * @param definition\r\n * @returns\r\n */\r\nexport declare function makeStrictEnum<T extends Record<PropertyKey, string | number>>(definition: T): T;\r\n\r\nexport declare function makeTypedQueryFactory(sql: string): (...values: any[]) => TypedSql<any[], unknown>;\r\n\r\ndeclare type MappedError = {\r\n    kind: 'GenericJs';\r\n    id: number;\r\n} | {\r\n    kind: 'UnsupportedNativeDataType';\r\n    type: string;\r\n} | {\r\n    kind: 'InvalidIsolationLevel';\r\n    level: string;\r\n} | {\r\n    kind: 'LengthMismatch';\r\n    column?: string;\r\n} | {\r\n    kind: 'UniqueConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'NullConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'ForeignKeyConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'DatabaseNotReachable';\r\n    host?: string;\r\n    port?: number;\r\n} | {\r\n    kind: 'DatabaseDoesNotExist';\r\n    db?: string;\r\n} | {\r\n    kind: 'DatabaseAlreadyExists';\r\n    db?: string;\r\n} | {\r\n    kind: 'DatabaseAccessDenied';\r\n    db?: string;\r\n} | {\r\n    kind: 'ConnectionClosed';\r\n} | {\r\n    kind: 'TlsConnectionError';\r\n    reason: string;\r\n} | {\r\n    kind: 'AuthenticationFailed';\r\n    user?: string;\r\n} | {\r\n    kind: 'TransactionWriteConflict';\r\n} | {\r\n    kind: 'TableDoesNotExist';\r\n    table?: string;\r\n} | {\r\n    kind: 'ColumnNotFound';\r\n    column?: string;\r\n} | {\r\n    kind: 'TooManyConnections';\r\n    cause: string;\r\n} | {\r\n    kind: 'ValueOutOfRange';\r\n    cause: string;\r\n} | {\r\n    kind: 'MissingFullTextSearchIndex';\r\n} | {\r\n    kind: 'SocketTimeout';\r\n} | {\r\n    kind: 'InconsistentColumnData';\r\n    cause: string;\r\n} | {\r\n    kind: 'TransactionAlreadyClosed';\r\n    cause: string;\r\n} | {\r\n    kind: 'postgres';\r\n    code: string;\r\n    severity: string;\r\n    message: string;\r\n    detail: string | undefined;\r\n    column: string | undefined;\r\n    hint: string | undefined;\r\n} | {\r\n    kind: 'mysql';\r\n    code: number;\r\n    message: string;\r\n    state: string;\r\n} | {\r\n    kind: 'sqlite';\r\n    /**\r\n     * Sqlite extended error code: https://www.sqlite.org/rescode.html\r\n     */\r\n    extendedCode: number;\r\n    message: string;\r\n} | {\r\n    kind: 'mssql';\r\n    code: number;\r\n    message: string;\r\n};\r\n\r\ndeclare type Mappings = ReadonlyDeep_2<{\r\n    modelOperations: ModelMapping[];\r\n    otherOperations: {\r\n        read: string[];\r\n        write: string[];\r\n    };\r\n}>;\r\n\r\n/**\r\n * Class that holds the list of all extensions, applied to particular instance,\r\n * as well as resolved versions of the components that need to apply on\r\n * different levels. Main idea of this class: avoid re-resolving as much of the\r\n * stuff as possible when new extensions are added while also delaying the\r\n * resolve until the point it is actually needed. For example, computed fields\r\n * of the model won't be resolved unless the model is actually queried. Neither\r\n * adding extensions with `client` component only cause other components to\r\n * recompute.\r\n */\r\ndeclare class MergedExtensionsList {\r\n    private head?;\r\n    private constructor();\r\n    static empty(): MergedExtensionsList;\r\n    static single(extension: ExtensionArgs): MergedExtensionsList;\r\n    isEmpty(): boolean;\r\n    append(extension: ExtensionArgs): MergedExtensionsList;\r\n    getAllComputedFields(dmmfModelName: string): ComputedFieldsMap | undefined;\r\n    getAllClientExtensions(): ClientArg | undefined;\r\n    getAllModelExtensions(dmmfModelName: string): ModelArg | undefined;\r\n    getAllQueryCallbacks(jsModelName: string, operation: string): any;\r\n    getAllBatchQueryCallbacks(): BatchQueryOptionsCb[];\r\n}\r\n\r\nexport declare type MergeExtArgs<TypeMap extends TypeMapDef, ExtArgs extends Record<any, any>, Args extends Record<any, any>> = ComputeDeep<ExtArgs & Args & AllModelsToStringIndex<TypeMap, Args, 'result'> & AllModelsToStringIndex<TypeMap, Args, 'model'>>;\r\n\r\nexport declare type Metric<T> = {\r\n    key: string;\r\n    value: T;\r\n    labels: Record<string, string>;\r\n    description: string;\r\n};\r\n\r\nexport declare type MetricHistogram = {\r\n    buckets: MetricHistogramBucket[];\r\n    sum: number;\r\n    count: number;\r\n};\r\n\r\nexport declare type MetricHistogramBucket = [maxValue: number, count: number];\r\n\r\nexport declare type Metrics = {\r\n    counters: Metric<number>[];\r\n    gauges: Metric<number>[];\r\n    histograms: Metric<MetricHistogram>[];\r\n};\r\n\r\nexport declare class MetricsClient {\r\n    private _client;\r\n    constructor(client: Client);\r\n    /**\r\n     * Returns all metrics gathered up to this point in prometheus format.\r\n     * Result of this call can be exposed directly to prometheus scraping endpoint\r\n     *\r\n     * @param options\r\n     * @returns\r\n     */\r\n    prometheus(options?: MetricsOptions): Promise<string>;\r\n    /**\r\n     * Returns all metrics gathered up to this point in prometheus format.\r\n     *\r\n     * @param options\r\n     * @returns\r\n     */\r\n    json(options?: MetricsOptions): Promise<Metrics>;\r\n}\r\n\r\ndeclare type MetricsOptions = {\r\n    /**\r\n     * Labels to add to every metrics in key-value format\r\n     */\r\n    globalLabels?: Record<string, string>;\r\n};\r\n\r\ndeclare type MetricsOptionsCommon = {\r\n    globalLabels?: Record<string, string>;\r\n};\r\n\r\ndeclare type MetricsOptionsJson = {\r\n    format: 'json';\r\n} & MetricsOptionsCommon;\r\n\r\ndeclare type MetricsOptionsPrometheus = {\r\n    format: 'prometheus';\r\n} & MetricsOptionsCommon;\r\n\r\ndeclare type MiddlewareArgsMapper<RequestArgs, MiddlewareArgs> = {\r\n    requestArgsToMiddlewareArgs(requestArgs: RequestArgs): MiddlewareArgs;\r\n    middlewareArgsToRequestArgs(middlewareArgs: MiddlewareArgs): RequestArgs;\r\n};\r\n\r\ndeclare type Model = ReadonlyDeep_2<{\r\n    name: string;\r\n    dbName: string | null;\r\n    schema: string | null;\r\n    fields: Field[];\r\n    uniqueFields: string[][];\r\n    uniqueIndexes: uniqueIndex[];\r\n    documentation?: string;\r\n    primaryKey: PrimaryKey | null;\r\n    isGenerated?: boolean;\r\n}>;\r\n\r\ndeclare enum ModelAction {\r\n    findUnique = \"findUnique\",\r\n    findUniqueOrThrow = \"findUniqueOrThrow\",\r\n    findFirst = \"findFirst\",\r\n    findFirstOrThrow = \"findFirstOrThrow\",\r\n    findMany = \"findMany\",\r\n    create = \"create\",\r\n    createMany = \"createMany\",\r\n    createManyAndReturn = \"createManyAndReturn\",\r\n    update = \"update\",\r\n    updateMany = \"updateMany\",\r\n    updateManyAndReturn = \"updateManyAndReturn\",\r\n    upsert = \"upsert\",\r\n    delete = \"delete\",\r\n    deleteMany = \"deleteMany\",\r\n    groupBy = \"groupBy\",\r\n    count = \"count\",// TODO: count does not actually exist in DMMF\r\n    aggregate = \"aggregate\",\r\n    findRaw = \"findRaw\",\r\n    aggregateRaw = \"aggregateRaw\"\r\n}\r\n\r\nexport declare type ModelArg = {\r\n    [MethodName in string]: unknown;\r\n};\r\n\r\nexport declare type ModelArgs = {\r\n    model: {\r\n        [ModelName in string]: ModelArg;\r\n    };\r\n};\r\n\r\nexport declare type ModelKey<TypeMap extends TypeMapDef, M extends PropertyKey> = M extends keyof TypeMap['model'] ? M : Capitalize<M & string>;\r\n\r\ndeclare type ModelMapping = ReadonlyDeep_2<{\r\n    model: string;\r\n    plural: string;\r\n    findUnique?: string | null;\r\n    findUniqueOrThrow?: string | null;\r\n    findFirst?: string | null;\r\n    findFirstOrThrow?: string | null;\r\n    findMany?: string | null;\r\n    create?: string | null;\r\n    createMany?: string | null;\r\n    createManyAndReturn?: string | null;\r\n    update?: string | null;\r\n    updateMany?: string | null;\r\n    updateManyAndReturn?: string | null;\r\n    upsert?: string | null;\r\n    delete?: string | null;\r\n    deleteMany?: string | null;\r\n    aggregate?: string | null;\r\n    groupBy?: string | null;\r\n    count?: string | null;\r\n    findRaw?: string | null;\r\n    aggregateRaw?: string | null;\r\n}>;\r\n\r\nexport declare type ModelQueryOptionsCb = (args: ModelQueryOptionsCbArgs) => Promise<any>;\r\n\r\nexport declare type ModelQueryOptionsCbArgs = {\r\n    model: string;\r\n    operation: string;\r\n    args: JsArgs;\r\n    query: (args: JsArgs) => Promise<unknown>;\r\n};\r\n\r\ndeclare type MultiBatchResponse = {\r\n    type: 'multi';\r\n    plans: QueryPlanNode[];\r\n};\r\n\r\nexport declare type NameArgs = {\r\n    name?: string;\r\n};\r\n\r\nexport declare type Narrow<A> = {\r\n    [K in keyof A]: A[K] extends Function ? A[K] : Narrow<A[K]>;\r\n} | (A extends Narrowable ? A : never);\r\n\r\nexport declare type Narrowable = string | number | bigint | boolean | [];\r\n\r\nexport declare type NeverToUnknown<T> = [T] extends [never] ? unknown : T;\r\n\r\ndeclare class NullTypesEnumValue extends ObjectEnumValue {\r\n    _getNamespace(): string;\r\n}\r\n\r\n/**\r\n * Base class for unique values of object-valued enums.\r\n */\r\nexport declare abstract class ObjectEnumValue {\r\n    constructor(arg?: symbol);\r\n    abstract _getNamespace(): string;\r\n    _getName(): string;\r\n    toString(): string;\r\n}\r\n\r\nexport declare const objectEnumValues: {\r\n    classes: {\r\n        DbNull: typeof DbNull;\r\n        JsonNull: typeof JsonNull;\r\n        AnyNull: typeof AnyNull;\r\n    };\r\n    instances: {\r\n        DbNull: DbNull;\r\n        JsonNull: JsonNull;\r\n        AnyNull: AnyNull;\r\n    };\r\n};\r\n\r\ndeclare const officialPrismaAdapters: readonly [\"@prisma/adapter-planetscale\", \"@prisma/adapter-neon\", \"@prisma/adapter-libsql\", \"@prisma/adapter-better-sqlite3\", \"@prisma/adapter-d1\", \"@prisma/adapter-pg\", \"@prisma/adapter-mssql\", \"@prisma/adapter-mariadb\"];\r\n\r\nexport declare type Omission = Record<string, boolean | Skip>;\r\n\r\ndeclare type Omit_2<T, K extends string | number | symbol> = {\r\n    [P in keyof T as P extends K ? never : P]: T[P];\r\n};\r\nexport { Omit_2 as Omit }\r\n\r\nexport declare type OmitValue<Omit, Key> = Key extends keyof Omit ? Omit[Key] : false;\r\n\r\nexport declare type Operation = 'findFirst' | 'findFirstOrThrow' | 'findUnique' | 'findUniqueOrThrow' | 'findMany' | 'create' | 'createMany' | 'createManyAndReturn' | 'update' | 'updateMany' | 'updateManyAndReturn' | 'upsert' | 'delete' | 'deleteMany' | 'aggregate' | 'count' | 'groupBy' | '$queryRaw' | '$executeRaw' | '$queryRawUnsafe' | '$executeRawUnsafe' | 'findRaw' | 'aggregateRaw' | '$runCommandRaw';\r\n\r\nexport declare type OperationPayload = {\r\n    name: string;\r\n    scalars: {\r\n        [ScalarName in string]: unknown;\r\n    };\r\n    objects: {\r\n        [ObjectName in string]: unknown;\r\n    };\r\n    composites: {\r\n        [CompositeName in string]: unknown;\r\n    };\r\n};\r\n\r\nexport declare type Optional<O, K extends keyof any = keyof O> = {\r\n    [P in K & keyof O]?: O[P];\r\n} & {\r\n    [P in Exclude<keyof O, K>]: O[P];\r\n};\r\n\r\nexport declare type OptionalFlat<T> = {\r\n    [K in keyof T]?: T[K];\r\n};\r\n\r\nexport declare type OptionalKeys<O> = {\r\n    [K in keyof O]-?: {} extends Pick_2<O, K> ? K : never;\r\n}[keyof O];\r\n\r\ndeclare type Options = {\r\n    /** Timeout for starting the transaction */\r\n    maxWait?: number;\r\n    /** Timeout for the transaction body */\r\n    timeout?: number;\r\n    /** Transaction isolation level */\r\n    isolationLevel?: IsolationLevel_2;\r\n};\r\n\r\ndeclare type Options_2 = {\r\n    clientVersion: string;\r\n};\r\n\r\nexport declare type Or<A extends 1 | 0, B extends 1 | 0> = {\r\n    0: {\r\n        0: 0;\r\n        1: 1;\r\n    };\r\n    1: {\r\n        0: 1;\r\n        1: 1;\r\n    };\r\n}[A][B];\r\n\r\ndeclare type OtherOperationMappings = ReadonlyDeep_2<{\r\n    read: string[];\r\n    write: string[];\r\n}>;\r\n\r\ndeclare type OutputType = ReadonlyDeep_2<{\r\n    name: string;\r\n    fields: SchemaField[];\r\n}>;\r\n\r\ndeclare type OutputTypeRef = TypeRef<'scalar' | 'outputObjectTypes' | 'enumTypes'>;\r\n\r\ndeclare type Pagination = {\r\n    cursor: Record<string, PrismaValue> | null;\r\n    take: number | null;\r\n    skip: number | null;\r\n};\r\n\r\nexport declare function Param<$Type, $Value extends string>(name: $Value): Param<$Type, $Value>;\r\n\r\nexport declare type Param<out $Type, $Value extends string> = {\r\n    readonly name: $Value;\r\n};\r\n\r\nexport declare type PatchFlat<O1, O2> = O1 & Omit_2<O2, keyof O1>;\r\n\r\nexport declare type Path<O, P, Default = never> = O extends unknown ? P extends [infer K, ...infer R] ? K extends keyof O ? Path<O[K], R> : Default : O : never;\r\n\r\nexport declare type Payload<T, F extends Operation = never> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            payload: any;\r\n        };\r\n    };\r\n} ? T[symbol]['types']['payload'] : any;\r\n\r\nexport declare type PayloadToResult<P, O extends Record_2<any, any> = RenameAndNestPayloadKeys<P>> = {\r\n    [K in keyof O]?: O[K][K] extends any[] ? PayloadToResult<O[K][K][number]>[] : O[K][K] extends object ? PayloadToResult<O[K][K]> : O[K][K];\r\n};\r\n\r\ndeclare type Pick_2<T, K extends string | number | symbol> = {\r\n    [P in keyof T as P extends K ? P : never]: T[P];\r\n};\r\nexport { Pick_2 as Pick }\r\n\r\ndeclare interface PlaceholderFormat {\r\n    prefix: string;\r\n    hasNumbering: boolean;\r\n}\r\n\r\ndeclare type PrimaryKey = ReadonlyDeep_2<{\r\n    name: string | null;\r\n    fields: string[];\r\n}>;\r\n\r\nexport declare class PrismaClientInitializationError extends Error {\r\n    clientVersion: string;\r\n    errorCode?: string;\r\n    retryable?: boolean;\r\n    constructor(message: string, clientVersion: string, errorCode?: string);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientKnownRequestError extends Error implements ErrorWithBatchIndex {\r\n    code: string;\r\n    meta?: Record<string, unknown>;\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n    constructor(message: string, { code, clientVersion, meta, batchRequestIdx }: KnownErrorParams);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare type PrismaClientOptions = {\r\n    /**\r\n     * Overwrites the primary datasource url from your schema.prisma file\r\n     */\r\n    datasourceUrl?: string;\r\n    /**\r\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale.\r\n     */\r\n    adapter?: SqlDriverAdapterFactory | null;\r\n    /**\r\n     * Overwrites the datasource url from your schema.prisma file\r\n     */\r\n    datasources?: Datasources;\r\n    /**\r\n     * @default \"colorless\"\r\n     */\r\n    errorFormat?: ErrorFormat;\r\n    /**\r\n     * The default values for Transaction options\r\n     * maxWait ?= 2000\r\n     * timeout ?= 5000\r\n     */\r\n    transactionOptions?: Transaction_2.Options;\r\n    /**\r\n     * @example\r\n     * \\`\\`\\`\r\n     * // Defaults to stdout\r\n     * log: ['query', 'info', 'warn']\r\n     *\r\n     * // Emit as events\r\n     * log: [\r\n     *  { emit: 'stdout', level: 'query' },\r\n     *  { emit: 'stdout', level: 'info' },\r\n     *  { emit: 'stdout', level: 'warn' }\r\n     * ]\r\n     * \\`\\`\\`\r\n     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).\r\n     */\r\n    log?: Array<LogLevel | LogDefinition>;\r\n    omit?: GlobalOmitOptions;\r\n    /**\r\n     * @internal\r\n     * You probably don't want to use this. \\`__internal\\` is used by internal tooling.\r\n     */\r\n    __internal?: {\r\n        debug?: boolean;\r\n        engine?: {\r\n            cwd?: string;\r\n            binaryPath?: string;\r\n            endpoint?: string;\r\n            allowTriggerPanic?: boolean;\r\n        };\r\n        /** This can be used for testing purposes */\r\n        configOverride?: (config: GetPrismaClientConfig) => GetPrismaClientConfig;\r\n    };\r\n};\r\n\r\nexport declare class PrismaClientRustPanicError extends Error {\r\n    clientVersion: string;\r\n    constructor(message: string, clientVersion: string);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientUnknownRequestError extends Error implements ErrorWithBatchIndex {\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n    constructor(message: string, { clientVersion, batchRequestIdx }: UnknownErrorParams);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientValidationError extends Error {\r\n    name: string;\r\n    clientVersion: string;\r\n    constructor(message: string, { clientVersion }: Options_2);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare function prismaGraphQLToJSError({ error, user_facing_error }: RequestError, clientVersion: string, activeProvider: string): PrismaClientKnownRequestError | PrismaClientUnknownRequestError;\r\n\r\ndeclare type PrismaOperationSpec<TArgs, TAction = string> = {\r\n    args: TArgs;\r\n    action: TAction;\r\n    model: string;\r\n};\r\n\r\nexport declare interface PrismaPromise<T> extends Promise<T> {\r\n    [Symbol.toStringTag]: 'PrismaPromise';\r\n}\r\n\r\n/**\r\n * Prisma's `Promise` that is backwards-compatible. All additions on top of the\r\n * original `Promise` are optional so that it can be backwards-compatible.\r\n * @see [[createPrismaPromise]]\r\n */\r\ndeclare interface PrismaPromise_2<TResult, TSpec extends PrismaOperationSpec<unknown> = any> extends Promise<TResult> {\r\n    get spec(): TSpec;\r\n    /**\r\n     * Extension of the original `.then` function\r\n     * @param onfulfilled same as regular promises\r\n     * @param onrejected same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    then<R1 = TResult, R2 = never>(onfulfilled?: (value: TResult) => R1 | PromiseLike<R1>, onrejected?: (error: unknown) => R2 | PromiseLike<R2>, transaction?: PrismaPromiseTransaction): Promise<R1 | R2>;\r\n    /**\r\n     * Extension of the original `.catch` function\r\n     * @param onrejected same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    catch<R = never>(onrejected?: ((reason: any) => R | PromiseLike<R>) | undefined | null, transaction?: PrismaPromiseTransaction): Promise<TResult | R>;\r\n    /**\r\n     * Extension of the original `.finally` function\r\n     * @param onfinally same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    finally(onfinally?: (() => void) | undefined | null, transaction?: PrismaPromiseTransaction): Promise<TResult>;\r\n    /**\r\n     * Called when executing a batch of regular tx\r\n     * @param transaction transaction options for batch tx\r\n     */\r\n    requestTransaction?(transaction: PrismaPromiseBatchTransaction): PromiseLike<unknown>;\r\n}\r\n\r\ndeclare type PrismaPromiseBatchTransaction = {\r\n    kind: 'batch';\r\n    id: number;\r\n    isolationLevel?: IsolationLevel_2;\r\n    index: number;\r\n    lock: PromiseLike<void>;\r\n};\r\n\r\ndeclare type PrismaPromiseCallback = (transaction?: PrismaPromiseTransaction) => Promise<unknown>;\r\n\r\n/**\r\n * Creates a [[PrismaPromise]]. It is Prisma's implementation of `Promise` which\r\n * is essentially a proxy for `Promise`. All the transaction-compatible client\r\n * methods return one, this allows for pre-preparing queries without executing\r\n * them until `.then` is called. It's the foundation of Prisma's query batching.\r\n * @param callback that will be wrapped within our promise implementation\r\n * @see [[PrismaPromise]]\r\n * @returns\r\n */\r\ndeclare type PrismaPromiseFactory = <T extends PrismaOperationSpec<unknown>>(callback: PrismaPromiseCallback, op?: T) => PrismaPromise_2<unknown>;\r\n\r\ndeclare type PrismaPromiseInteractiveTransaction<PayloadType = unknown> = {\r\n    kind: 'itx';\r\n    id: string;\r\n    payload: PayloadType;\r\n};\r\n\r\ndeclare type PrismaPromiseTransaction<PayloadType = unknown> = PrismaPromiseBatchTransaction | PrismaPromiseInteractiveTransaction<PayloadType>;\r\n\r\ndeclare type PrismaValue = string | boolean | number | PrismaValue[] | null | Record<string, unknown> | PrismaValuePlaceholder | PrismaValueGenerator;\r\n\r\ndeclare type PrismaValueGenerator = {\r\n    prisma__type: 'generatorCall';\r\n    prisma__value: {\r\n        name: string;\r\n        args: PrismaValue[];\r\n    };\r\n};\r\n\r\ndeclare type PrismaValuePlaceholder = {\r\n    prisma__type: 'param';\r\n    prisma__value: {\r\n        name: string;\r\n        type: string;\r\n    };\r\n};\r\n\r\nexport declare const PrivateResultType: unique symbol;\r\n\r\ndeclare type Provider = 'mysql' | 'postgres' | 'sqlite' | 'sqlserver';\r\n\r\ndeclare namespace Public {\r\n    export {\r\n        validator\r\n    }\r\n}\r\nexport { Public }\r\n\r\ndeclare namespace Public_2 {\r\n    export {\r\n        Args,\r\n        Result,\r\n        Payload,\r\n        PrismaPromise,\r\n        Operation,\r\n        Exact\r\n    }\r\n}\r\n\r\ndeclare type Query = ReadonlyDeep_2<{\r\n    name: string;\r\n    args: SchemaArg[];\r\n    output: QueryOutput;\r\n}>;\r\n\r\ndeclare interface Queryable<Query, Result> extends AdapterInfo {\r\n    /**\r\n     * Execute a query and return its result.\r\n     */\r\n    queryRaw(params: Query): Promise<Result>;\r\n    /**\r\n     * Execute a query and return the number of affected rows.\r\n     */\r\n    executeRaw(params: Query): Promise<number>;\r\n}\r\n\r\ndeclare type QueryCompiler = {\r\n    compile(request: string): {};\r\n    compileBatch(batchRequest: string): BatchResponse;\r\n    free(): void;\r\n};\r\n\r\ndeclare interface QueryCompilerConstructor {\r\n    new (options: QueryCompilerOptions): QueryCompiler;\r\n}\r\n\r\ndeclare type QueryCompilerOptions = {\r\n    datamodel: string;\r\n    provider: Provider;\r\n    connectionInfo: ConnectionInfo;\r\n};\r\n\r\ndeclare type QueryEngineBatchGraphQLRequest = {\r\n    batch: QueryEngineRequest[];\r\n    transaction?: boolean;\r\n    isolationLevel?: IsolationLevel_2;\r\n};\r\n\r\ndeclare type QueryEngineBatchRequest = QueryEngineBatchGraphQLRequest | JsonBatchQuery;\r\n\r\ndeclare type QueryEngineConfig = {\r\n    datamodel: string;\r\n    configDir: string;\r\n    logQueries: boolean;\r\n    ignoreEnvVarErrors: boolean;\r\n    datasourceOverrides: Record<string, string>;\r\n    env: Record<string, string | undefined>;\r\n    logLevel: QueryEngineLogLevel;\r\n    engineProtocol: QueryEngineProtocol;\r\n    enableTracing: boolean;\r\n};\r\n\r\ndeclare interface QueryEngineConstructor {\r\n    new (config: QueryEngineConfig, logger: (log: string) => void, adapter?: ErrorCapturingSqlDriverAdapter): QueryEngineInstance;\r\n}\r\n\r\ndeclare type QueryEngineInstance = {\r\n    connect(headers: string, requestId: string): Promise<void>;\r\n    disconnect(headers: string, requestId: string): Promise<void>;\r\n    /**\r\n     * Frees any resources allocated by the engine's WASM instance. This method is automatically created by WASM bindgen.\r\n     * Noop for other engines.\r\n     */\r\n    free?(): void;\r\n    /**\r\n     * @param requestStr JSON.stringified `QueryEngineRequest | QueryEngineBatchRequest`\r\n     * @param headersStr JSON.stringified `QueryEngineRequestHeaders`\r\n     */\r\n    query(requestStr: string, headersStr: string, transactionId: string | undefined, requestId: string): Promise<string>;\r\n    sdlSchema?(): Promise<string>;\r\n    startTransaction(options: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    commitTransaction(id: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    rollbackTransaction(id: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    metrics?(options: string): Promise<string>;\r\n    applyPendingMigrations?(): Promise<void>;\r\n    trace(requestId: string): Promise<string | null>;\r\n};\r\n\r\ndeclare type QueryEngineLogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\r\n\r\ndeclare type QueryEngineProtocol = 'graphql' | 'json';\r\n\r\ndeclare type QueryEngineRequest = {\r\n    query: string;\r\n    variables: Object;\r\n};\r\n\r\ndeclare type QueryEngineResultData<T> = {\r\n    data: T;\r\n};\r\n\r\ndeclare type QueryEvent = {\r\n    timestamp: Date;\r\n    query: string;\r\n    params: string;\r\n    duration: number;\r\n    target: string;\r\n};\r\n\r\ndeclare type QueryEventType = 'query';\r\n\r\ndeclare type QueryIntrospectionBuiltinType = 'int' | 'bigint' | 'float' | 'double' | 'string' | 'enum' | 'bytes' | 'bool' | 'char' | 'decimal' | 'json' | 'xml' | 'uuid' | 'datetime' | 'date' | 'time' | 'int-array' | 'bigint-array' | 'float-array' | 'double-array' | 'string-array' | 'char-array' | 'bytes-array' | 'bool-array' | 'decimal-array' | 'json-array' | 'xml-array' | 'uuid-array' | 'datetime-array' | 'date-array' | 'time-array' | 'null' | 'unknown';\r\n\r\ndeclare type QueryMiddlewareParams = {\r\n    /** The model this is executed on */\r\n    model?: string;\r\n    /** The action that is being handled */\r\n    action: Action;\r\n    /** TODO what is this */\r\n    dataPath: string[];\r\n    /** TODO what is this */\r\n    runInTransaction: boolean;\r\n    args?: UserArgs_2;\r\n};\r\n\r\nexport declare type QueryOptions = {\r\n    query: {\r\n        [ModelName in string]: {\r\n            [ModelAction in string]: ModelQueryOptionsCb;\r\n        } | QueryOptionsCb;\r\n    };\r\n};\r\n\r\nexport declare type QueryOptionsCb = (args: QueryOptionsCbArgs) => Promise<any>;\r\n\r\nexport declare type QueryOptionsCbArgs = {\r\n    model?: string;\r\n    operation: string;\r\n    args: JsArgs | RawQueryArgs;\r\n    query: (args: JsArgs | RawQueryArgs) => Promise<unknown>;\r\n};\r\n\r\ndeclare type QueryOutput = ReadonlyDeep_2<{\r\n    name: string;\r\n    isRequired: boolean;\r\n    isList: boolean;\r\n}>;\r\n\r\ndeclare type QueryPlanBinding = {\r\n    name: string;\r\n    expr: QueryPlanNode;\r\n};\r\n\r\ndeclare type QueryPlanDbQuery = {\r\n    type: 'rawSql';\r\n    sql: string;\r\n    args: PrismaValue[];\r\n    argTypes: ArgType[];\r\n} | {\r\n    type: 'templateSql';\r\n    fragments: Fragment[];\r\n    placeholderFormat: PlaceholderFormat;\r\n    args: PrismaValue[];\r\n    argTypes: DynamicArgType[];\r\n    chunkable: boolean;\r\n};\r\n\r\ndeclare type QueryPlanNode = {\r\n    type: 'value';\r\n    args: PrismaValue;\r\n} | {\r\n    type: 'seq';\r\n    args: QueryPlanNode[];\r\n} | {\r\n    type: 'get';\r\n    args: {\r\n        name: string;\r\n    };\r\n} | {\r\n    type: 'let';\r\n    args: {\r\n        bindings: QueryPlanBinding[];\r\n        expr: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'getFirstNonEmpty';\r\n    args: {\r\n        names: string[];\r\n    };\r\n} | {\r\n    type: 'query';\r\n    args: QueryPlanDbQuery;\r\n} | {\r\n    type: 'execute';\r\n    args: QueryPlanDbQuery;\r\n} | {\r\n    type: 'reverse';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'sum';\r\n    args: QueryPlanNode[];\r\n} | {\r\n    type: 'concat';\r\n    args: QueryPlanNode[];\r\n} | {\r\n    type: 'unique';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'required';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'join';\r\n    args: {\r\n        parent: QueryPlanNode;\r\n        children: JoinExpression[];\r\n    };\r\n} | {\r\n    type: 'mapField';\r\n    args: {\r\n        field: string;\r\n        records: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'transaction';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'dataMap';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        structure: ResultNode;\r\n        enums: Record<string, Record<string, string>>;\r\n    };\r\n} | {\r\n    type: 'validate';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        rules: DataRule[];\r\n    } & ValidationError;\r\n} | {\r\n    type: 'if';\r\n    args: {\r\n        value: QueryPlanNode;\r\n        rule: DataRule;\r\n        then: QueryPlanNode;\r\n        else: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'unit';\r\n} | {\r\n    type: 'diff';\r\n    args: {\r\n        from: QueryPlanNode;\r\n        to: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'initializeRecord';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        fields: Record<string, FieldInitializer>;\r\n    };\r\n} | {\r\n    type: 'mapRecord';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        fields: Record<string, FieldOperation>;\r\n    };\r\n} | {\r\n    type: 'process';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        operations: InMemoryOps;\r\n    };\r\n};\r\n\r\n/**\r\n * Create raw SQL statement.\r\n */\r\nexport declare function raw(value: string): Sql;\r\n\r\nexport declare type RawParameters = {\r\n    __prismaRawParameters__: true;\r\n    values: string;\r\n};\r\n\r\nexport declare type RawQueryArgs = Sql | UnknownTypedSql | [query: string, ...values: RawValue[]];\r\n\r\ndeclare type RawResponse = {\r\n    columns: string[];\r\n    types: QueryIntrospectionBuiltinType[];\r\n    rows: unknown[][];\r\n};\r\n\r\ndeclare type RawTaggedValue = {\r\n    $type: 'Raw';\r\n    value: unknown;\r\n};\r\n\r\n/**\r\n * Supported value or SQL instance.\r\n */\r\nexport declare type RawValue = Value | Sql;\r\n\r\nexport declare type ReadonlyDeep<T> = {\r\n    readonly [K in keyof T]: ReadonlyDeep<T[K]>;\r\n};\r\n\r\ndeclare type ReadonlyDeep_2<O> = {\r\n    +readonly [K in keyof O]: ReadonlyDeep_2<O[K]>;\r\n};\r\n\r\ndeclare type Record_2<T extends string | number | symbol, U> = {\r\n    [P in T]: U;\r\n};\r\nexport { Record_2 as Record }\r\n\r\nexport declare type RenameAndNestPayloadKeys<P> = {\r\n    [K in keyof P as K extends 'scalars' | 'objects' | 'composites' ? keyof P[K] : never]: P[K];\r\n};\r\n\r\ndeclare type RequestBatchOptions<InteractiveTransactionPayload> = {\r\n    transaction?: TransactionOptions_2<InteractiveTransactionPayload>;\r\n    traceparent?: string;\r\n    numTry?: number;\r\n    containsWrite: boolean;\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare interface RequestError {\r\n    error: string;\r\n    user_facing_error: {\r\n        is_panic: boolean;\r\n        message: string;\r\n        meta?: Record<string, unknown>;\r\n        error_code?: string;\r\n        batch_request_idx?: number;\r\n    };\r\n}\r\n\r\ndeclare class RequestHandler {\r\n    client: Client;\r\n    dataloader: DataLoader<RequestParams>;\r\n    private logEmitter?;\r\n    constructor(client: Client, logEmitter?: LogEmitter);\r\n    request(params: RequestParams): Promise<any>;\r\n    mapQueryEngineResult({ dataPath, unpacker }: RequestParams, response: QueryEngineResultData<any>): any;\r\n    /**\r\n     * Handles the error and logs it, logging the error is done synchronously waiting for the event\r\n     * handlers to finish.\r\n     */\r\n    handleAndLogRequestError(params: HandleErrorParams): never;\r\n    handleRequestError({ error, clientMethod, callsite, transaction, args, modelName, globalOmit, }: HandleErrorParams): never;\r\n    sanitizeMessage(message: any): any;\r\n    unpack(data: unknown, dataPath: string[], unpacker?: Unpacker): any;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare type RequestOptions<InteractiveTransactionPayload> = {\r\n    traceparent?: string;\r\n    numTry?: number;\r\n    interactiveTransaction?: InteractiveTransactionOptions<InteractiveTransactionPayload>;\r\n    isWrite: boolean;\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare type RequestParams = {\r\n    modelName?: string;\r\n    action: Action;\r\n    protocolQuery: JsonQuery;\r\n    dataPath: string[];\r\n    clientMethod: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    extensions: MergedExtensionsList;\r\n    args?: any;\r\n    headers?: Record<string, string>;\r\n    unpacker?: Unpacker;\r\n    otelParentCtx?: Context;\r\n    otelChildCtx?: Context;\r\n    globalOmit?: GlobalOmitOptions;\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare type RequiredExtensionArgs = NameArgs & ResultArgs & ModelArgs & ClientArgs & QueryOptions;\r\nexport { RequiredExtensionArgs }\r\nexport { RequiredExtensionArgs as UserArgs }\r\n\r\nexport declare type RequiredKeys<O> = {\r\n    [K in keyof O]-?: {} extends Pick_2<O, K> ? never : K;\r\n}[keyof O];\r\n\r\ndeclare function resolveDatasourceUrl({ inlineDatasources, overrideDatasources, env, clientVersion, }: {\r\n    inlineDatasources: GetPrismaClientConfig['inlineDatasources'];\r\n    overrideDatasources: Datasources;\r\n    env: Record<string, string | undefined>;\r\n    clientVersion: string;\r\n}): string;\r\n\r\nexport declare type Result<T, A, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            payload: any;\r\n        };\r\n    };\r\n} ? GetResult<T[symbol]['types']['payload'], A, F> : GetResult<{\r\n    composites: {};\r\n    objects: {};\r\n    scalars: {};\r\n    name: '';\r\n}, {}, F>;\r\n\r\nexport declare type Result_2<T, A, F extends Operation> = Result<T, A, F>;\r\n\r\ndeclare namespace Result_3 {\r\n    export {\r\n        Count,\r\n        GetFindResult,\r\n        SelectablePayloadFields,\r\n        SelectField,\r\n        DefaultSelection,\r\n        UnwrapPayload,\r\n        ApplyOmit,\r\n        OmitValue,\r\n        GetCountResult,\r\n        Aggregate,\r\n        GetAggregateResult,\r\n        GetBatchResult,\r\n        GetGroupByResult,\r\n        GetResult,\r\n        ExtractGlobalOmit\r\n    }\r\n}\r\n\r\ndeclare type Result_4<T> = {\r\n    map<U>(fn: (value: T) => U): Result_4<U>;\r\n    flatMap<U>(fn: (value: T) => Result_4<U>): Result_4<U>;\r\n} & ({\r\n    readonly ok: true;\r\n    readonly value: T;\r\n} | {\r\n    readonly ok: false;\r\n    readonly error: Error_2;\r\n});\r\n\r\nexport declare type ResultArg = {\r\n    [FieldName in string]: ResultFieldDefinition;\r\n};\r\n\r\nexport declare type ResultArgs = {\r\n    result: {\r\n        [ModelName in string]: ResultArg;\r\n    };\r\n};\r\n\r\nexport declare type ResultArgsFieldCompute = (model: any) => unknown;\r\n\r\nexport declare type ResultFieldDefinition = {\r\n    needs?: {\r\n        [FieldName in string]: boolean;\r\n    };\r\n    compute: ResultArgsFieldCompute;\r\n};\r\n\r\ndeclare type ResultNode = {\r\n    type: 'affectedRows';\r\n} | {\r\n    type: 'object';\r\n    fields: Record<string, ResultNode>;\r\n    serializedName: string | null;\r\n    skipNulls: boolean;\r\n} | {\r\n    type: 'field';\r\n    dbName: string;\r\n    fieldType: FieldType;\r\n};\r\n\r\nexport declare type Return<T> = T extends (...args: any[]) => infer R ? R : T;\r\n\r\nexport declare type RuntimeDataModel = {\r\n    readonly models: Record<string, RuntimeModel>;\r\n    readonly enums: Record<string, RuntimeEnum>;\r\n    readonly types: Record<string, RuntimeModel>;\r\n};\r\n\r\ndeclare type RuntimeEnum = Omit<DMMF_2.DatamodelEnum, 'name'>;\r\n\r\ndeclare type RuntimeModel = Omit<DMMF_2.Model, 'name'>;\r\n\r\ndeclare type RuntimeName = 'workerd' | 'deno' | 'netlify' | 'node' | 'bun' | 'edge-light' | '';\r\n\r\ndeclare type Schema = ReadonlyDeep_2<{\r\n    rootQueryType?: string;\r\n    rootMutationType?: string;\r\n    inputObjectTypes: {\r\n        model?: InputType[];\r\n        prisma?: InputType[];\r\n    };\r\n    outputObjectTypes: {\r\n        model: OutputType[];\r\n        prisma: OutputType[];\r\n    };\r\n    enumTypes: {\r\n        model?: SchemaEnum[];\r\n        prisma: SchemaEnum[];\r\n    };\r\n    fieldRefTypes: {\r\n        prisma?: FieldRefType[];\r\n    };\r\n}>;\r\n\r\ndeclare type SchemaArg = ReadonlyDeep_2<{\r\n    name: string;\r\n    comment?: string;\r\n    isNullable: boolean;\r\n    isRequired: boolean;\r\n    inputTypes: InputTypeRef[];\r\n    requiresOtherFields?: string[];\r\n    deprecation?: Deprecation;\r\n}>;\r\n\r\ndeclare type SchemaEnum = ReadonlyDeep_2<{\r\n    name: string;\r\n    values: string[];\r\n}>;\r\n\r\ndeclare type SchemaField = ReadonlyDeep_2<{\r\n    name: string;\r\n    isNullable?: boolean;\r\n    outputType: OutputTypeRef;\r\n    args: SchemaArg[];\r\n    deprecation?: Deprecation;\r\n    documentation?: string;\r\n}>;\r\n\r\nexport declare type Select<T, U> = T extends U ? T : never;\r\n\r\nexport declare type SelectablePayloadFields<K extends PropertyKey, O> = {\r\n    objects: {\r\n        [k in K]: O;\r\n    };\r\n} | {\r\n    composites: {\r\n        [k in K]: O;\r\n    };\r\n};\r\n\r\nexport declare type SelectField<P extends SelectablePayloadFields<any, any>, K extends PropertyKey> = P extends {\r\n    objects: Record<K, any>;\r\n} ? P['objects'][K] : P extends {\r\n    composites: Record<K, any>;\r\n} ? P['composites'][K] : never;\r\n\r\ndeclare type Selection_2 = Record<string, boolean | Skip | JsArgs>;\r\nexport { Selection_2 as Selection }\r\n\r\nexport declare function serializeJsonQuery({ modelName, action, args, runtimeDataModel, extensions, callsite, clientMethod, errorFormat, clientVersion, previewFeatures, globalOmit, }: SerializeParams): JsonQuery;\r\n\r\ndeclare type SerializeParams = {\r\n    runtimeDataModel: RuntimeDataModel;\r\n    modelName?: string;\r\n    action: Action;\r\n    args?: JsArgs;\r\n    extensions?: MergedExtensionsList;\r\n    callsite?: CallSite;\r\n    clientMethod: string;\r\n    clientVersion: string;\r\n    errorFormat: ErrorFormat;\r\n    previewFeatures: string[];\r\n    globalOmit?: GlobalOmitOptions;\r\n};\r\n\r\ndeclare class Skip {\r\n    constructor(param?: symbol);\r\n    ifUndefined<T>(value: T | undefined): T | Skip;\r\n}\r\n\r\nexport declare const skip: Skip;\r\n\r\ndeclare type SortOrder = 'asc' | 'desc';\r\n\r\n/**\r\n * An interface that represents a span. A span represents a single operation\r\n * within a trace. Examples of span might include remote procedure calls or a\r\n * in-process function calls to sub-components. A Trace has a single, top-level\r\n * \"root\" Span that in turn may have zero or more child Spans, which in turn\r\n * may have children.\r\n *\r\n * Spans are created by the {@link Tracer.startSpan} method.\r\n */\r\ndeclare interface Span {\r\n    /**\r\n     * Returns the {@link SpanContext} object associated with this Span.\r\n     *\r\n     * Get an immutable, serializable identifier for this span that can be used\r\n     * to create new child spans. Returned SpanContext is usable even after the\r\n     * span ends.\r\n     *\r\n     * @returns the SpanContext object associated with this Span.\r\n     */\r\n    spanContext(): SpanContext;\r\n    /**\r\n     * Sets an attribute to the span.\r\n     *\r\n     * Sets a single Attribute with the key and value passed as arguments.\r\n     *\r\n     * @param key the key for this attribute.\r\n     * @param value the value for this attribute. Setting a value null or\r\n     *              undefined is invalid and will result in undefined behavior.\r\n     */\r\n    setAttribute(key: string, value: SpanAttributeValue): this;\r\n    /**\r\n     * Sets attributes to the span.\r\n     *\r\n     * @param attributes the attributes that will be added.\r\n     *                   null or undefined attribute values\r\n     *                   are invalid and will result in undefined behavior.\r\n     */\r\n    setAttributes(attributes: SpanAttributes): this;\r\n    /**\r\n     * Adds an event to the Span.\r\n     *\r\n     * @param name the name of the event.\r\n     * @param [attributesOrStartTime] the attributes that will be added; these are\r\n     *     associated with this event. Can be also a start time\r\n     *     if type is {@type TimeInput} and 3rd param is undefined\r\n     * @param [startTime] start time of the event.\r\n     */\r\n    addEvent(name: string, attributesOrStartTime?: SpanAttributes | TimeInput, startTime?: TimeInput): this;\r\n    /**\r\n     * Adds a single link to the span.\r\n     *\r\n     * Links added after the creation will not affect the sampling decision.\r\n     * It is preferred span links be added at span creation.\r\n     *\r\n     * @param link the link to add.\r\n     */\r\n    addLink(link: Link): this;\r\n    /**\r\n     * Adds multiple links to the span.\r\n     *\r\n     * Links added after the creation will not affect the sampling decision.\r\n     * It is preferred span links be added at span creation.\r\n     *\r\n     * @param links the links to add.\r\n     */\r\n    addLinks(links: Link[]): this;\r\n    /**\r\n     * Sets a status to the span. If used, this will override the default Span\r\n     * status. Default is {@link SpanStatusCode.UNSET}. SetStatus overrides the value\r\n     * of previous calls to SetStatus on the Span.\r\n     *\r\n     * @param status the SpanStatus to set.\r\n     */\r\n    setStatus(status: SpanStatus): this;\r\n    /**\r\n     * Updates the Span name.\r\n     *\r\n     * This will override the name provided via {@link Tracer.startSpan}.\r\n     *\r\n     * Upon this update, any sampling behavior based on Span name will depend on\r\n     * the implementation.\r\n     *\r\n     * @param name the Span name.\r\n     */\r\n    updateName(name: string): this;\r\n    /**\r\n     * Marks the end of Span execution.\r\n     *\r\n     * Call to End of a Span MUST not have any effects on child spans. Those may\r\n     * still be running and can be ended later.\r\n     *\r\n     * Do not return `this`. The Span generally should not be used after it\r\n     * is ended so chaining is not desired in this context.\r\n     *\r\n     * @param [endTime] the time to set as Span's end time. If not provided,\r\n     *     use the current time as the span's end time.\r\n     */\r\n    end(endTime?: TimeInput): void;\r\n    /**\r\n     * Returns the flag whether this span will be recorded.\r\n     *\r\n     * @returns true if this Span is active and recording information like events\r\n     *     with the `AddEvent` operation and attributes using `setAttributes`.\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Sets exception as a span event\r\n     * @param exception the exception the only accepted values are string or Error\r\n     * @param [time] the time to set as Span's event time. If not provided,\r\n     *     use the current time.\r\n     */\r\n    recordException(exception: Exception, time?: TimeInput): void;\r\n}\r\n\r\n/**\r\n * @deprecated please use {@link Attributes}\r\n */\r\ndeclare type SpanAttributes = Attributes;\r\n\r\n/**\r\n * @deprecated please use {@link AttributeValue}\r\n */\r\ndeclare type SpanAttributeValue = AttributeValue;\r\n\r\ndeclare type SpanCallback<R> = (span?: Span, context?: Context) => R;\r\n\r\n/**\r\n * A SpanContext represents the portion of a {@link Span} which must be\r\n * serialized and propagated along side of a {@link Baggage}.\r\n */\r\ndeclare interface SpanContext {\r\n    /**\r\n     * The ID of the trace that this span belongs to. It is worldwide unique\r\n     * with practically sufficient probability by being made as 16 randomly\r\n     * generated bytes, encoded as a 32 lowercase hex characters corresponding to\r\n     * 128 bits.\r\n     */\r\n    traceId: string;\r\n    /**\r\n     * The ID of the Span. It is globally unique with practically sufficient\r\n     * probability by being made as 8 randomly generated bytes, encoded as a 16\r\n     * lowercase hex characters corresponding to 64 bits.\r\n     */\r\n    spanId: string;\r\n    /**\r\n     * Only true if the SpanContext was propagated from a remote parent.\r\n     */\r\n    isRemote?: boolean;\r\n    /**\r\n     * Trace flags to propagate.\r\n     *\r\n     * It is represented as 1 byte (bitmap). Bit to represent whether trace is\r\n     * sampled or not. When set, the least significant bit documents that the\r\n     * caller may have recorded trace data. A caller who does not record trace\r\n     * data out-of-band leaves this flag unset.\r\n     *\r\n     * see {@link TraceFlags} for valid flag values.\r\n     */\r\n    traceFlags: number;\r\n    /**\r\n     * Tracing-system-specific info to propagate.\r\n     *\r\n     * The tracestate field value is a `list` as defined below. The `list` is a\r\n     * series of `list-members` separated by commas `,`, and a list-member is a\r\n     * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\r\n     * surrounding `list-members` are ignored. There can be a maximum of 32\r\n     * `list-members` in a `list`.\r\n     * More Info: https://www.w3.org/TR/trace-context/#tracestate-field\r\n     *\r\n     * Examples:\r\n     *     Single tracing system (generic format):\r\n     *         tracestate: rojo=00f067aa0ba902b7\r\n     *     Multiple tracing systems (with different formatting):\r\n     *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE\r\n     */\r\n    traceState?: TraceState;\r\n}\r\n\r\ndeclare enum SpanKind {\r\n    /** Default value. Indicates that the span is used internally. */\r\n    INTERNAL = 0,\r\n    /**\r\n     * Indicates that the span covers server-side handling of an RPC or other\r\n     * remote request.\r\n     */\r\n    SERVER = 1,\r\n    /**\r\n     * Indicates that the span covers the client-side wrapper around an RPC or\r\n     * other remote request.\r\n     */\r\n    CLIENT = 2,\r\n    /**\r\n     * Indicates that the span describes producer sending a message to a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    PRODUCER = 3,\r\n    /**\r\n     * Indicates that the span describes consumer receiving a message from a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    CONSUMER = 4\r\n}\r\n\r\n/**\r\n * Options needed for span creation\r\n */\r\ndeclare interface SpanOptions {\r\n    /**\r\n     * The SpanKind of a span\r\n     * @default {@link SpanKind.INTERNAL}\r\n     */\r\n    kind?: SpanKind;\r\n    /** A span's attributes */\r\n    attributes?: SpanAttributes;\r\n    /** {@link Link}s span to other spans */\r\n    links?: Link[];\r\n    /** A manually specified start time for the created `Span` object. */\r\n    startTime?: TimeInput;\r\n    /** The new span should be a root span. (Ignore parent from context). */\r\n    root?: boolean;\r\n}\r\n\r\ndeclare interface SpanStatus {\r\n    /** The status code of this message. */\r\n    code: SpanStatusCode;\r\n    /** A developer-facing error message. */\r\n    message?: string;\r\n}\r\n\r\n/**\r\n * An enumeration of status codes.\r\n */\r\ndeclare enum SpanStatusCode {\r\n    /**\r\n     * The default status.\r\n     */\r\n    UNSET = 0,\r\n    /**\r\n     * The operation has been validated by an Application developer or\r\n     * Operator to have completed successfully.\r\n     */\r\n    OK = 1,\r\n    /**\r\n     * The operation contains an error.\r\n     */\r\n    ERROR = 2\r\n}\r\n\r\n/**\r\n * A SQL instance can be nested within each other to build SQL strings.\r\n */\r\nexport declare class Sql {\r\n    readonly values: Value[];\r\n    readonly strings: string[];\r\n    constructor(rawStrings: readonly string[], rawValues: readonly RawValue[]);\r\n    get sql(): string;\r\n    get statement(): string;\r\n    get text(): string;\r\n    inspect(): {\r\n        sql: string;\r\n        statement: string;\r\n        text: string;\r\n        values: unknown[];\r\n    };\r\n}\r\n\r\ndeclare interface SqlDriverAdapter extends SqlQueryable {\r\n    /**\r\n     * Execute multiple SQL statements separated by semicolon.\r\n     */\r\n    executeScript(script: string): Promise<void>;\r\n    /**\r\n     * Start new transaction.\r\n     */\r\n    startTransaction(isolationLevel?: IsolationLevel): Promise<Transaction>;\r\n    /**\r\n     * Optional method that returns extra connection info\r\n     */\r\n    getConnectionInfo?(): ConnectionInfo;\r\n    /**\r\n     * Dispose of the connection and release any resources.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport declare interface SqlDriverAdapterFactory extends DriverAdapterFactory<SqlQuery, SqlResultSet> {\r\n    connect(): Promise<SqlDriverAdapter>;\r\n}\r\n\r\ndeclare type SqlQuery = {\r\n    sql: string;\r\n    args: Array<unknown>;\r\n    argTypes: Array<ArgType>;\r\n};\r\n\r\ndeclare interface SqlQueryable extends Queryable<SqlQuery, SqlResultSet> {\r\n}\r\n\r\ndeclare interface SqlResultSet {\r\n    /**\r\n     * List of column types appearing in a database query, in the same order as `columnNames`.\r\n     * They are used within the Query Engine to convert values from JS to Quaint values.\r\n     */\r\n    columnTypes: Array<ColumnType>;\r\n    /**\r\n     * List of column names appearing in a database query, in the same order as `columnTypes`.\r\n     */\r\n    columnNames: Array<string>;\r\n    /**\r\n     * List of rows retrieved from a database query.\r\n     * Each row is a list of values, whose length matches `columnNames` and `columnTypes`.\r\n     */\r\n    rows: Array<Array<unknown>>;\r\n    /**\r\n     * The last ID of an `INSERT` statement, if any.\r\n     * This is required for `AUTO_INCREMENT` columns in databases based on MySQL and SQLite.\r\n     */\r\n    lastInsertId?: string;\r\n}\r\n\r\n/**\r\n * Create a SQL object from a template string.\r\n */\r\nexport declare function sqltag(strings: readonly string[], ...values: readonly RawValue[]): Sql;\r\n\r\n/**\r\n * Defines TimeInput.\r\n *\r\n * hrtime, epoch milliseconds, performance.now() or Date\r\n */\r\ndeclare type TimeInput = HrTime_2 | number | Date;\r\n\r\nexport declare type ToTuple<T> = T extends any[] ? T : [T];\r\n\r\ndeclare interface TraceState {\r\n    /**\r\n     * Create a new TraceState which inherits from this TraceState and has the\r\n     * given key set.\r\n     * The new entry will always be added in the front of the list of states.\r\n     *\r\n     * @param key key of the TraceState entry.\r\n     * @param value value of the TraceState entry.\r\n     */\r\n    set(key: string, value: string): TraceState;\r\n    /**\r\n     * Return a new TraceState which inherits from this TraceState but does not\r\n     * contain the given key.\r\n     *\r\n     * @param key the key for the TraceState entry to be removed.\r\n     */\r\n    unset(key: string): TraceState;\r\n    /**\r\n     * Returns the value to which the specified key is mapped, or `undefined` if\r\n     * this map contains no mapping for the key.\r\n     *\r\n     * @param key with which the specified value is to be associated.\r\n     * @returns the value to which the specified key is mapped, or `undefined` if\r\n     *     this map contains no mapping for the key.\r\n     */\r\n    get(key: string): string | undefined;\r\n    /**\r\n     * Serializes the TraceState to a `list` as defined below. The `list` is a\r\n     * series of `list-members` separated by commas `,`, and a list-member is a\r\n     * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\r\n     * surrounding `list-members` are ignored. There can be a maximum of 32\r\n     * `list-members` in a `list`.\r\n     *\r\n     * @returns the serialized string.\r\n     */\r\n    serialize(): string;\r\n}\r\n\r\ndeclare interface TracingHelper {\r\n    isEnabled(): boolean;\r\n    getTraceParent(context?: Context): string;\r\n    dispatchEngineSpans(spans: EngineSpan[]): void;\r\n    getActiveContext(): Context | undefined;\r\n    runInChildSpan<R>(nameOrOptions: string | ExtendedSpanOptions, callback: SpanCallback<R>): R;\r\n}\r\n\r\ndeclare interface Transaction extends AdapterInfo, SqlQueryable {\r\n    /**\r\n     * Transaction options.\r\n     */\r\n    readonly options: TransactionOptions;\r\n    /**\r\n     * Commit the transaction.\r\n     */\r\n    commit(): Promise<void>;\r\n    /**\r\n     * Roll back the transaction.\r\n     */\r\n    rollback(): Promise<void>;\r\n}\r\n\r\ndeclare namespace Transaction_2 {\r\n    export {\r\n        Options,\r\n        IsolationLevel_2 as IsolationLevel,\r\n        InteractiveTransactionInfo,\r\n        TransactionHeaders\r\n    }\r\n}\r\n\r\ndeclare type TransactionHeaders = {\r\n    traceparent?: string;\r\n};\r\n\r\ndeclare type TransactionOptions = {\r\n    usePhantomQuery: boolean;\r\n};\r\n\r\ndeclare type TransactionOptions_2<InteractiveTransactionPayload> = {\r\n    kind: 'itx';\r\n    options: InteractiveTransactionOptions<InteractiveTransactionPayload>;\r\n} | {\r\n    kind: 'batch';\r\n    options: BatchTransactionOptions;\r\n};\r\n\r\nexport declare class TypedSql<Values extends readonly unknown[], Result> {\r\n    [PrivateResultType]: Result;\r\n    constructor(sql: string, values: Values);\r\n    get sql(): string;\r\n    get values(): Values;\r\n}\r\n\r\nexport declare type TypeMapCbDef = Fn<{\r\n    extArgs: InternalArgs;\r\n}, TypeMapDef>;\r\n\r\n/** Shared */\r\nexport declare type TypeMapDef = Record<any, any>;\r\n\r\ndeclare type TypeRef<AllowedLocations extends FieldLocation> = {\r\n    isList: boolean;\r\n    type: string;\r\n    location: AllowedLocations;\r\n    namespace?: FieldNamespace;\r\n};\r\n\r\ndeclare namespace Types {\r\n    export {\r\n        Result_3 as Result,\r\n        Extensions_2 as Extensions,\r\n        Utils,\r\n        Public_2 as Public,\r\n        isSkip,\r\n        Skip,\r\n        skip,\r\n        UnknownTypedSql,\r\n        OperationPayload as Payload\r\n    }\r\n}\r\nexport { Types }\r\n\r\ndeclare type uniqueIndex = ReadonlyDeep_2<{\r\n    name: string;\r\n    fields: string[];\r\n}>;\r\n\r\ndeclare type UnknownErrorParams = {\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n};\r\n\r\nexport declare type UnknownTypedSql = TypedSql<unknown[], unknown>;\r\n\r\ndeclare type Unpacker = (data: any) => any;\r\n\r\nexport declare type UnwrapPayload<P> = {} extends P ? unknown : {\r\n    [K in keyof P]: P[K] extends {\r\n        scalars: infer S;\r\n        composites: infer C;\r\n    }[] ? Array<S & UnwrapPayload<C>> : P[K] extends {\r\n        scalars: infer S;\r\n        composites: infer C;\r\n    } | null ? S & UnwrapPayload<C> | Select<P[K], null> : never;\r\n};\r\n\r\nexport declare type UnwrapPromise<P> = P extends Promise<infer R> ? R : P;\r\n\r\nexport declare type UnwrapTuple<Tuple extends readonly unknown[]> = {\r\n    [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>;\r\n};\r\n\r\n/**\r\n * Input that flows from the user into the Client.\r\n */\r\ndeclare type UserArgs_2 = any;\r\n\r\ndeclare namespace Utils {\r\n    export {\r\n        EmptyToUnknown,\r\n        NeverToUnknown,\r\n        PatchFlat,\r\n        Omit_2 as Omit,\r\n        Pick_2 as Pick,\r\n        ComputeDeep,\r\n        Compute,\r\n        OptionalFlat,\r\n        ReadonlyDeep,\r\n        Narrowable,\r\n        Narrow,\r\n        Exact,\r\n        Cast,\r\n        Record_2 as Record,\r\n        UnwrapPromise,\r\n        UnwrapTuple,\r\n        Path,\r\n        Fn,\r\n        Call,\r\n        RequiredKeys,\r\n        OptionalKeys,\r\n        Optional,\r\n        Return,\r\n        ToTuple,\r\n        RenameAndNestPayloadKeys,\r\n        PayloadToResult,\r\n        Select,\r\n        Equals,\r\n        Or,\r\n        JsPromise\r\n    }\r\n}\r\n\r\ndeclare type ValidationError = {\r\n    error_identifier: 'RELATION_VIOLATION';\r\n    context: {\r\n        relation: string;\r\n        modelA: string;\r\n        modelB: string;\r\n    };\r\n} | {\r\n    error_identifier: 'MISSING_RELATED_RECORD';\r\n    context: {\r\n        model: string;\r\n        relation: string;\r\n        relationType: string;\r\n        operation: string;\r\n        neededFor?: string;\r\n    };\r\n} | {\r\n    error_identifier: 'MISSING_RECORD';\r\n    context: {\r\n        operation: string;\r\n    };\r\n} | {\r\n    error_identifier: 'INCOMPLETE_CONNECT_INPUT';\r\n    context: {\r\n        expectedRows: number;\r\n    };\r\n} | {\r\n    error_identifier: 'INCOMPLETE_CONNECT_OUTPUT';\r\n    context: {\r\n        expectedRows: number;\r\n        relation: string;\r\n        relationType: string;\r\n    };\r\n} | {\r\n    error_identifier: 'RECORDS_NOT_CONNECTED';\r\n    context: {\r\n        relation: string;\r\n        parent: string;\r\n        child: string;\r\n    };\r\n};\r\n\r\ndeclare function validator<V>(): <S>(select: Exact<S, V>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation>(client: C, model: M, operation: O): <S>(select: Exact<S, Args<C[M], O>>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation, P extends keyof Args<C[M], O>>(client: C, model: M, operation: O, prop: P): <S>(select: Exact<S, Args<C[M], O>[P]>) => S;\r\n\r\n/**\r\n * Values supported by SQL engine.\r\n */\r\nexport declare type Value = unknown;\r\n\r\nexport declare function warnEnvConflicts(envPaths: any): void;\r\n\r\nexport declare const warnOnce: (key: string, message: string, ...args: unknown[]) => void;\r\n\r\nexport { }\r\n","node_modules/.prisma/client/runtime/index-browser.d.ts":"declare class AnyNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\ndeclare type Args<T, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            operations: {\r\n                [K in F]: {\r\n                    args: any;\r\n                };\r\n            };\r\n        };\r\n    };\r\n} ? T[symbol]['types']['operations'][F]['args'] : any;\r\n\r\ndeclare class DbNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare function Decimal(n: Decimal.Value): Decimal;\r\n\r\nexport declare namespace Decimal {\r\n    export type Constructor = typeof Decimal;\r\n    export type Instance = Decimal;\r\n    export type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n    export type Modulo = Rounding | 9;\r\n    export type Value = string | number | Decimal;\r\n\r\n    // http://mikemcl.github.io/decimal.js/#constructor-properties\r\n    export interface Config {\r\n        precision?: number;\r\n        rounding?: Rounding;\r\n        toExpNeg?: number;\r\n        toExpPos?: number;\r\n        minE?: number;\r\n        maxE?: number;\r\n        crypto?: boolean;\r\n        modulo?: Modulo;\r\n        defaults?: boolean;\r\n    }\r\n}\r\n\r\nexport declare class Decimal {\r\n    readonly d: number[];\r\n    readonly e: number;\r\n    readonly s: number;\r\n\r\n    constructor(n: Decimal.Value);\r\n\r\n    absoluteValue(): Decimal;\r\n    abs(): Decimal;\r\n\r\n    ceil(): Decimal;\r\n\r\n    clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n\r\n    comparedTo(n: Decimal.Value): number;\r\n    cmp(n: Decimal.Value): number;\r\n\r\n    cosine(): Decimal;\r\n    cos(): Decimal;\r\n\r\n    cubeRoot(): Decimal;\r\n    cbrt(): Decimal;\r\n\r\n    decimalPlaces(): number;\r\n    dp(): number;\r\n\r\n    dividedBy(n: Decimal.Value): Decimal;\r\n    div(n: Decimal.Value): Decimal;\r\n\r\n    dividedToIntegerBy(n: Decimal.Value): Decimal;\r\n    divToInt(n: Decimal.Value): Decimal;\r\n\r\n    equals(n: Decimal.Value): boolean;\r\n    eq(n: Decimal.Value): boolean;\r\n\r\n    floor(): Decimal;\r\n\r\n    greaterThan(n: Decimal.Value): boolean;\r\n    gt(n: Decimal.Value): boolean;\r\n\r\n    greaterThanOrEqualTo(n: Decimal.Value): boolean;\r\n    gte(n: Decimal.Value): boolean;\r\n\r\n    hyperbolicCosine(): Decimal;\r\n    cosh(): Decimal;\r\n\r\n    hyperbolicSine(): Decimal;\r\n    sinh(): Decimal;\r\n\r\n    hyperbolicTangent(): Decimal;\r\n    tanh(): Decimal;\r\n\r\n    inverseCosine(): Decimal;\r\n    acos(): Decimal;\r\n\r\n    inverseHyperbolicCosine(): Decimal;\r\n    acosh(): Decimal;\r\n\r\n    inverseHyperbolicSine(): Decimal;\r\n    asinh(): Decimal;\r\n\r\n    inverseHyperbolicTangent(): Decimal;\r\n    atanh(): Decimal;\r\n\r\n    inverseSine(): Decimal;\r\n    asin(): Decimal;\r\n\r\n    inverseTangent(): Decimal;\r\n    atan(): Decimal;\r\n\r\n    isFinite(): boolean;\r\n\r\n    isInteger(): boolean;\r\n    isInt(): boolean;\r\n\r\n    isNaN(): boolean;\r\n\r\n    isNegative(): boolean;\r\n    isNeg(): boolean;\r\n\r\n    isPositive(): boolean;\r\n    isPos(): boolean;\r\n\r\n    isZero(): boolean;\r\n\r\n    lessThan(n: Decimal.Value): boolean;\r\n    lt(n: Decimal.Value): boolean;\r\n\r\n    lessThanOrEqualTo(n: Decimal.Value): boolean;\r\n    lte(n: Decimal.Value): boolean;\r\n\r\n    logarithm(n?: Decimal.Value): Decimal;\r\n    log(n?: Decimal.Value): Decimal;\r\n\r\n    minus(n: Decimal.Value): Decimal;\r\n    sub(n: Decimal.Value): Decimal;\r\n\r\n    modulo(n: Decimal.Value): Decimal;\r\n    mod(n: Decimal.Value): Decimal;\r\n\r\n    naturalExponential(): Decimal;\r\n    exp(): Decimal;\r\n\r\n    naturalLogarithm(): Decimal;\r\n    ln(): Decimal;\r\n\r\n    negated(): Decimal;\r\n    neg(): Decimal;\r\n\r\n    plus(n: Decimal.Value): Decimal;\r\n    add(n: Decimal.Value): Decimal;\r\n\r\n    precision(includeZeros?: boolean): number;\r\n    sd(includeZeros?: boolean): number;\r\n\r\n    round(): Decimal;\r\n\r\n    sine() : Decimal;\r\n    sin() : Decimal;\r\n\r\n    squareRoot(): Decimal;\r\n    sqrt(): Decimal;\r\n\r\n    tangent() : Decimal;\r\n    tan() : Decimal;\r\n\r\n    times(n: Decimal.Value): Decimal;\r\n    mul(n: Decimal.Value) : Decimal;\r\n\r\n    toBinary(significantDigits?: number): string;\r\n    toBinary(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toDecimalPlaces(decimalPlaces?: number): Decimal;\r\n    toDecimalPlaces(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n    toDP(decimalPlaces?: number): Decimal;\r\n    toDP(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toExponential(decimalPlaces?: number): string;\r\n    toExponential(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFixed(decimalPlaces?: number): string;\r\n    toFixed(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFraction(max_denominator?: Decimal.Value): Decimal[];\r\n\r\n    toHexadecimal(significantDigits?: number): string;\r\n    toHexadecimal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n    toHex(significantDigits?: number): string;\r\n    toHex(significantDigits: number, rounding?: Decimal.Rounding): string;\r\n\r\n    toJSON(): string;\r\n\r\n    toNearest(n: Decimal.Value, rounding?: Decimal.Rounding): Decimal;\r\n\r\n    toNumber(): number;\r\n\r\n    toOctal(significantDigits?: number): string;\r\n    toOctal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toPower(n: Decimal.Value): Decimal;\r\n    pow(n: Decimal.Value): Decimal;\r\n\r\n    toPrecision(significantDigits?: number): string;\r\n    toPrecision(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toSignificantDigits(significantDigits?: number): Decimal;\r\n    toSignificantDigits(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n    toSD(significantDigits?: number): Decimal;\r\n    toSD(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toString(): string;\r\n\r\n    truncated(): Decimal;\r\n    trunc(): Decimal;\r\n\r\n    valueOf(): string;\r\n\r\n    static abs(n: Decimal.Value): Decimal;\r\n    static acos(n: Decimal.Value): Decimal;\r\n    static acosh(n: Decimal.Value): Decimal;\r\n    static add(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static asin(n: Decimal.Value): Decimal;\r\n    static asinh(n: Decimal.Value): Decimal;\r\n    static atan(n: Decimal.Value): Decimal;\r\n    static atanh(n: Decimal.Value): Decimal;\r\n    static atan2(y: Decimal.Value, x: Decimal.Value): Decimal;\r\n    static cbrt(n: Decimal.Value): Decimal;\r\n    static ceil(n: Decimal.Value): Decimal;\r\n    static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    static clone(object?: Decimal.Config): Decimal.Constructor;\r\n    static config(object: Decimal.Config): Decimal.Constructor;\r\n    static cos(n: Decimal.Value): Decimal;\r\n    static cosh(n: Decimal.Value): Decimal;\r\n    static div(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static exp(n: Decimal.Value): Decimal;\r\n    static floor(n: Decimal.Value): Decimal;\r\n    static hypot(...n: Decimal.Value[]): Decimal;\r\n    static isDecimal(object: any): object is Decimal;\r\n    static ln(n: Decimal.Value): Decimal;\r\n    static log(n: Decimal.Value, base?: Decimal.Value): Decimal;\r\n    static log2(n: Decimal.Value): Decimal;\r\n    static log10(n: Decimal.Value): Decimal;\r\n    static max(...n: Decimal.Value[]): Decimal;\r\n    static min(...n: Decimal.Value[]): Decimal;\r\n    static mod(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static mul(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static noConflict(): Decimal.Constructor;   // Browser only\r\n    static pow(base: Decimal.Value, exponent: Decimal.Value): Decimal;\r\n    static random(significantDigits?: number): Decimal;\r\n    static round(n: Decimal.Value): Decimal;\r\n    static set(object: Decimal.Config): Decimal.Constructor;\r\n    static sign(n: Decimal.Value): number;\r\n    static sin(n: Decimal.Value): Decimal;\r\n    static sinh(n: Decimal.Value): Decimal;\r\n    static sqrt(n: Decimal.Value): Decimal;\r\n    static sub(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static sum(...n: Decimal.Value[]): Decimal;\r\n    static tan(n: Decimal.Value): Decimal;\r\n    static tanh(n: Decimal.Value): Decimal;\r\n    static trunc(n: Decimal.Value): Decimal;\r\n\r\n    static readonly default?: Decimal.Constructor;\r\n    static readonly Decimal?: Decimal.Constructor;\r\n\r\n    static readonly precision: number;\r\n    static readonly rounding: Decimal.Rounding;\r\n    static readonly toExpNeg: number;\r\n    static readonly toExpPos: number;\r\n    static readonly minE: number;\r\n    static readonly maxE: number;\r\n    static readonly crypto: boolean;\r\n    static readonly modulo: Decimal.Modulo;\r\n\r\n    static readonly ROUND_UP: 0;\r\n    static readonly ROUND_DOWN: 1;\r\n    static readonly ROUND_CEIL: 2;\r\n    static readonly ROUND_FLOOR: 3;\r\n    static readonly ROUND_HALF_UP: 4;\r\n    static readonly ROUND_HALF_DOWN: 5;\r\n    static readonly ROUND_HALF_EVEN: 6;\r\n    static readonly ROUND_HALF_CEIL: 7;\r\n    static readonly ROUND_HALF_FLOOR: 8;\r\n    static readonly EUCLID: 9;\r\n}\r\n\r\ndeclare type Exact<A, W> = (A extends unknown ? (W extends A ? {\r\n    [K in keyof A]: Exact<A[K], W[K]>;\r\n} : W) : never) | (A extends Narrowable ? A : never);\r\n\r\nexport declare function getRuntime(): GetRuntimeOutput;\r\n\r\ndeclare type GetRuntimeOutput = {\r\n    id: RuntimeName;\r\n    prettyName: string;\r\n    isEdge: boolean;\r\n};\r\n\r\ndeclare class JsonNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\n/**\r\n * Generates more strict variant of an enum which, unlike regular enum,\r\n * throws on non-existing property access. This can be useful in following situations:\r\n * - we have an API, that accepts both `undefined` and `SomeEnumType` as an input\r\n * - enum values are generated dynamically from DMMF.\r\n *\r\n * In that case, if using normal enums and no compile-time typechecking, using non-existing property\r\n * will result in `undefined` value being used, which will be accepted. Using strict enum\r\n * in this case will help to have a runtime exception, telling you that you are probably doing something wrong.\r\n *\r\n * Note: if you need to check for existence of a value in the enum you can still use either\r\n * `in` operator or `hasOwnProperty` function.\r\n *\r\n * @param definition\r\n * @returns\r\n */\r\nexport declare function makeStrictEnum<T extends Record<PropertyKey, string | number>>(definition: T): T;\r\n\r\ndeclare type Narrowable = string | number | bigint | boolean | [];\r\n\r\ndeclare class NullTypesEnumValue extends ObjectEnumValue {\r\n    _getNamespace(): string;\r\n}\r\n\r\n/**\r\n * Base class for unique values of object-valued enums.\r\n */\r\ndeclare abstract class ObjectEnumValue {\r\n    constructor(arg?: symbol);\r\n    abstract _getNamespace(): string;\r\n    _getName(): string;\r\n    toString(): string;\r\n}\r\n\r\nexport declare const objectEnumValues: {\r\n    classes: {\r\n        DbNull: typeof DbNull;\r\n        JsonNull: typeof JsonNull;\r\n        AnyNull: typeof AnyNull;\r\n    };\r\n    instances: {\r\n        DbNull: DbNull;\r\n        JsonNull: JsonNull;\r\n        AnyNull: AnyNull;\r\n    };\r\n};\r\n\r\ndeclare type Operation = 'findFirst' | 'findFirstOrThrow' | 'findUnique' | 'findUniqueOrThrow' | 'findMany' | 'create' | 'createMany' | 'createManyAndReturn' | 'update' | 'updateMany' | 'updateManyAndReturn' | 'upsert' | 'delete' | 'deleteMany' | 'aggregate' | 'count' | 'groupBy' | '$queryRaw' | '$executeRaw' | '$queryRawUnsafe' | '$executeRawUnsafe' | 'findRaw' | 'aggregateRaw' | '$runCommandRaw';\r\n\r\ndeclare namespace Public {\r\n    export {\r\n        validator\r\n    }\r\n}\r\nexport { Public }\r\n\r\ndeclare type RuntimeName = 'workerd' | 'deno' | 'netlify' | 'node' | 'bun' | 'edge-light' | '';\r\n\r\ndeclare function validator<V>(): <S>(select: Exact<S, V>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation>(client: C, model: M, operation: O): <S>(select: Exact<S, Args<C[M], O>>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation, P extends keyof Args<C[M], O>>(client: C, model: M, operation: O, prop: P): <S>(select: Exact<S, Args<C[M], O>[P]>) => S;\r\n\r\nexport { }\r\n","node_modules/.prisma/client/runtime/library.d.ts":"/**\r\n * @param this\r\n */\r\ndeclare function $extends(this: Client, extension: ExtensionArgs | ((client: Client) => Client)): Client;\r\n\r\ndeclare type AccelerateEngineConfig = {\r\n    inlineSchema: EngineConfig['inlineSchema'];\r\n    inlineSchemaHash: EngineConfig['inlineSchemaHash'];\r\n    env: EngineConfig['env'];\r\n    generator?: {\r\n        previewFeatures: string[];\r\n    };\r\n    inlineDatasources: EngineConfig['inlineDatasources'];\r\n    overrideDatasources: EngineConfig['overrideDatasources'];\r\n    clientVersion: EngineConfig['clientVersion'];\r\n    engineVersion: EngineConfig['engineVersion'];\r\n    logEmitter: EngineConfig['logEmitter'];\r\n    logQueries?: EngineConfig['logQueries'];\r\n    logLevel?: EngineConfig['logLevel'];\r\n    tracingHelper: EngineConfig['tracingHelper'];\r\n    accelerateUtils?: AccelerateUtils;\r\n};\r\n\r\n/**\r\n * A stripped down interface of `fetch` that `@prisma/extension-accelerate`\r\n * relies on. It must be in sync with the corresponding definition in the\r\n * Accelerate extension.\r\n *\r\n * This is the actual interface exposed by the extension. We can't use the\r\n * custom fetch function provided by it as normal fetch because the API is\r\n * different. Notably, `headers` must be an object and not a `Headers`\r\n * instance, and `url` must be a `string` and not a `URL`.\r\n *\r\n * The return type is `Response` but we can't specify this in an exported type\r\n * because it would end up referencing external types from `@types/node` or DOM\r\n * which can fail typechecking depending on TypeScript configuration in a user's\r\n * project.\r\n */\r\ndeclare type AccelerateExtensionFetch = (url: string, options: {\r\n    body?: string;\r\n    method?: string;\r\n    headers: Record<string, string>;\r\n}) => Promise<unknown>;\r\n\r\ndeclare type AccelerateExtensionFetchDecorator = (fetch: AccelerateExtensionFetch) => AccelerateExtensionFetch;\r\n\r\ndeclare type AccelerateUtils = EngineConfig['accelerateUtils'];\r\n\r\nexport declare type Action = keyof typeof DMMF_2.ModelAction | 'executeRaw' | 'queryRaw' | 'runCommandRaw';\r\n\r\ndeclare type ActiveConnectorType = Exclude<ConnectorType, 'postgres' | 'prisma+postgres'>;\r\n\r\n/**\r\n * An interface that exposes some basic information about the\r\n * adapter like its name and provider type.\r\n */\r\ndeclare interface AdapterInfo {\r\n    readonly provider: Provider;\r\n    readonly adapterName: (typeof officialPrismaAdapters)[number] | (string & {});\r\n}\r\n\r\nexport declare type Aggregate = '_count' | '_max' | '_min' | '_avg' | '_sum';\r\n\r\nexport declare type AllModelsToStringIndex<TypeMap extends TypeMapDef, Args extends Record<string, any>, K extends PropertyKey> = Args extends {\r\n    [P in K]: {\r\n        $allModels: infer AllModels;\r\n    };\r\n} ? {\r\n    [P in K]: Record<TypeMap['meta']['modelProps'], AllModels>;\r\n} : {};\r\n\r\ndeclare class AnyNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare type ApplyOmit<T, OmitConfig> = Compute<{\r\n    [K in keyof T as OmitValue<OmitConfig, K> extends true ? never : K]: T[K];\r\n}>;\r\n\r\nexport declare type Args<T, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            operations: {\r\n                [K in F]: {\r\n                    args: any;\r\n                };\r\n            };\r\n        };\r\n    };\r\n} ? T[symbol]['types']['operations'][F]['args'] : any;\r\n\r\nexport declare type Args_3<T, F extends Operation> = Args<T, F>;\r\n\r\ndeclare type ArgScalarType = 'string' | 'int' | 'bigint' | 'float' | 'decimal' | 'boolean' | 'enum' | 'uuid' | 'json' | 'datetime' | 'bytes' | 'unknown';\r\n\r\ndeclare type ArgType = {\r\n    scalarType: ArgScalarType;\r\n    dbType?: string;\r\n    arity: Arity;\r\n};\r\n\r\ndeclare type Arity = 'scalar' | 'list';\r\n\r\n/**\r\n * Attributes is a map from string to attribute values.\r\n *\r\n * Note: only the own enumerable keys are counted as valid attribute keys.\r\n */\r\ndeclare interface Attributes {\r\n    [attributeKey: string]: AttributeValue | undefined;\r\n}\r\n\r\n/**\r\n * Attribute values may be any non-nullish primitive value except an object.\r\n *\r\n * null or undefined attribute values are invalid and will result in undefined behavior.\r\n */\r\ndeclare type AttributeValue = string | number | boolean | Array<null | undefined | string> | Array<null | undefined | number> | Array<null | undefined | boolean>;\r\n\r\nexport declare type BaseDMMF = {\r\n    readonly datamodel: Omit<DMMF_2.Datamodel, 'indexes'>;\r\n};\r\n\r\ndeclare type BatchArgs = {\r\n    queries: BatchQuery[];\r\n    transaction?: {\r\n        isolationLevel?: IsolationLevel_2;\r\n    };\r\n};\r\n\r\ndeclare type BatchInternalParams = {\r\n    requests: RequestParams[];\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare type BatchQuery = {\r\n    model: string | undefined;\r\n    operation: string;\r\n    args: JsArgs | RawQueryArgs;\r\n};\r\n\r\ndeclare type BatchQueryEngineResult<T> = QueryEngineResultData<T> | Error;\r\n\r\ndeclare type BatchQueryOptionsCb = (args: BatchQueryOptionsCbArgs) => Promise<any>;\r\n\r\ndeclare type BatchQueryOptionsCbArgs = {\r\n    args: BatchArgs;\r\n    query: (args: BatchArgs, __internalParams?: BatchInternalParams) => Promise<unknown[]>;\r\n    __internalParams: BatchInternalParams;\r\n};\r\n\r\ndeclare type BatchResponse = MultiBatchResponse | CompactedBatchResponse;\r\n\r\ndeclare type BatchTransactionOptions = {\r\n    isolationLevel?: Transaction_2.IsolationLevel;\r\n};\r\n\r\ndeclare interface BinaryTargetsEnvValue {\r\n    fromEnvVar: string | null;\r\n    value: string;\r\n    native?: boolean;\r\n}\r\n\r\nexport declare type Call<F extends Fn, P> = (F & {\r\n    params: P;\r\n})['returns'];\r\n\r\ndeclare interface CallSite {\r\n    getLocation(): LocationInFile | null;\r\n}\r\n\r\nexport declare type Cast<A, W> = A extends W ? A : W;\r\n\r\ndeclare type Client = ReturnType<typeof getPrismaClient> extends new () => infer T ? T : never;\r\n\r\nexport declare type ClientArg = {\r\n    [MethodName in string]: unknown;\r\n};\r\n\r\nexport declare type ClientArgs = {\r\n    client: ClientArg;\r\n};\r\n\r\nexport declare type ClientBuiltInProp = keyof DynamicClientExtensionThisBuiltin<never, never, never>;\r\n\r\nexport declare type ClientOptionDef = undefined | {\r\n    [K in string]: any;\r\n};\r\n\r\nexport declare type ClientOtherOps = {\r\n    $queryRaw<T = unknown>(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise<T>;\r\n    $queryRawTyped<T>(query: TypedSql<unknown[], T>): PrismaPromise<T[]>;\r\n    $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;\r\n    $executeRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise<number>;\r\n    $executeRawUnsafe(query: string, ...values: any[]): PrismaPromise<number>;\r\n    $runCommandRaw(command: InputJsonObject): PrismaPromise<JsonObject>;\r\n};\r\n\r\ndeclare type ColumnType = (typeof ColumnTypeEnum)[keyof typeof ColumnTypeEnum];\r\n\r\ndeclare const ColumnTypeEnum: {\r\n    readonly Int32: 0;\r\n    readonly Int64: 1;\r\n    readonly Float: 2;\r\n    readonly Double: 3;\r\n    readonly Numeric: 4;\r\n    readonly Boolean: 5;\r\n    readonly Character: 6;\r\n    readonly Text: 7;\r\n    readonly Date: 8;\r\n    readonly Time: 9;\r\n    readonly DateTime: 10;\r\n    readonly Json: 11;\r\n    readonly Enum: 12;\r\n    readonly Bytes: 13;\r\n    readonly Set: 14;\r\n    readonly Uuid: 15;\r\n    readonly Int32Array: 64;\r\n    readonly Int64Array: 65;\r\n    readonly FloatArray: 66;\r\n    readonly DoubleArray: 67;\r\n    readonly NumericArray: 68;\r\n    readonly BooleanArray: 69;\r\n    readonly CharacterArray: 70;\r\n    readonly TextArray: 71;\r\n    readonly DateArray: 72;\r\n    readonly TimeArray: 73;\r\n    readonly DateTimeArray: 74;\r\n    readonly JsonArray: 75;\r\n    readonly EnumArray: 76;\r\n    readonly BytesArray: 77;\r\n    readonly UuidArray: 78;\r\n    readonly UnknownNumber: 128;\r\n};\r\n\r\ndeclare type CompactedBatchResponse = {\r\n    type: 'compacted';\r\n    plan: QueryPlanNode;\r\n    arguments: Record<string, {}>[];\r\n    nestedSelection: string[];\r\n    keys: string[];\r\n    expectNonEmpty: boolean;\r\n};\r\n\r\ndeclare type CompilerWasmLoadingConfig = {\r\n    /**\r\n     * WASM-bindgen runtime for corresponding module\r\n     */\r\n    getRuntime: () => Promise<{\r\n        __wbg_set_wasm(exports: unknown): void;\r\n        QueryCompiler: QueryCompilerConstructor;\r\n    }>;\r\n    /**\r\n     * Loads the raw wasm module for the wasm compiler engine. This configuration is\r\n     * generated specifically for each type of client, eg. Node.js client and Edge\r\n     * clients will have different implementations.\r\n     * @remarks this is a callback on purpose, we only load the wasm if needed.\r\n     * @remarks only used by ClientEngine\r\n     */\r\n    getQueryCompilerWasmModule: () => Promise<unknown>;\r\n};\r\n\r\nexport declare type Compute<T> = T extends Function ? T : {\r\n    [K in keyof T]: T[K];\r\n} & unknown;\r\n\r\nexport declare type ComputeDeep<T> = T extends Function ? T : {\r\n    [K in keyof T]: ComputeDeep<T[K]>;\r\n} & unknown;\r\n\r\ndeclare type ComputedField = {\r\n    name: string;\r\n    needs: string[];\r\n    compute: ResultArgsFieldCompute;\r\n};\r\n\r\ndeclare type ComputedFieldsMap = {\r\n    [fieldName: string]: ComputedField;\r\n};\r\n\r\ndeclare type ConnectionInfo = {\r\n    schemaName?: string;\r\n    maxBindValues?: number;\r\n    supportsRelationJoins: boolean;\r\n};\r\n\r\ndeclare type ConnectorType = 'mysql' | 'mongodb' | 'sqlite' | 'postgresql' | 'postgres' | 'prisma+postgres' | 'sqlserver' | 'cockroachdb';\r\n\r\ndeclare interface Context {\r\n    /**\r\n     * Get a value from the context.\r\n     *\r\n     * @param key key which identifies a context value\r\n     */\r\n    getValue(key: symbol): unknown;\r\n    /**\r\n     * Create a new context which inherits from this context and has\r\n     * the given key set to the given value.\r\n     *\r\n     * @param key context key for which to set the value\r\n     * @param value value to set for the given key\r\n     */\r\n    setValue(key: symbol, value: unknown): Context;\r\n    /**\r\n     * Return a new context which inherits from this context but does\r\n     * not contain a value for the given key.\r\n     *\r\n     * @param key context key for which to clear a value\r\n     */\r\n    deleteValue(key: symbol): Context;\r\n}\r\n\r\ndeclare type Context_2<T> = T extends {\r\n    [K: symbol]: {\r\n        ctx: infer C;\r\n    };\r\n} ? C & T & {\r\n    /**\r\n     * @deprecated Use `$name` instead.\r\n     */\r\n    name?: string;\r\n    $name?: string;\r\n    $parent?: unknown;\r\n} : T & {\r\n    /**\r\n     * @deprecated Use `$name` instead.\r\n     */\r\n    name?: string;\r\n    $name?: string;\r\n    $parent?: unknown;\r\n};\r\n\r\nexport declare type Count<O> = {\r\n    [K in keyof O]: Count<number>;\r\n} & {};\r\n\r\nexport declare function createParam(name: string): Param<unknown, string>;\r\n\r\ndeclare class DataLoader<T = unknown> {\r\n    private options;\r\n    batches: {\r\n        [key: string]: Job[];\r\n    };\r\n    private tickActive;\r\n    constructor(options: DataLoaderOptions<T>);\r\n    request(request: T): Promise<any>;\r\n    private dispatchBatches;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare type DataLoaderOptions<T> = {\r\n    singleLoader: (request: T) => Promise<any>;\r\n    batchLoader: (request: T[]) => Promise<any[]>;\r\n    batchBy: (request: T) => string | undefined;\r\n    batchOrder: (requestA: T, requestB: T) => number;\r\n};\r\n\r\ndeclare type Datamodel = ReadonlyDeep_2<{\r\n    models: Model[];\r\n    enums: DatamodelEnum[];\r\n    types: Model[];\r\n    indexes: Index[];\r\n}>;\r\n\r\ndeclare type DatamodelEnum = ReadonlyDeep_2<{\r\n    name: string;\r\n    values: EnumValue[];\r\n    dbName?: string | null;\r\n    documentation?: string;\r\n}>;\r\n\r\ndeclare function datamodelEnumToSchemaEnum(datamodelEnum: DatamodelEnum): SchemaEnum;\r\n\r\ndeclare type DataRule = {\r\n    type: 'rowCountEq';\r\n    args: number;\r\n} | {\r\n    type: 'rowCountNeq';\r\n    args: number;\r\n} | {\r\n    type: 'affectedRowCountEq';\r\n    args: number;\r\n} | {\r\n    type: 'never';\r\n};\r\n\r\ndeclare type Datasource = {\r\n    url?: string;\r\n};\r\n\r\ndeclare type Datasources = {\r\n    [name in string]: Datasource;\r\n};\r\n\r\ndeclare class DbNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare const Debug: typeof debugCreate & {\r\n    enable(namespace: any): void;\r\n    disable(): any;\r\n    enabled(namespace: string): boolean;\r\n    log: (...args: string[]) => void;\r\n    formatters: {};\r\n};\r\n\r\n/**\r\n * Create a new debug instance with the given namespace.\r\n *\r\n * @example\r\n * ```ts\r\n * import Debug from '@prisma/debug'\r\n * const debug = Debug('prisma:client')\r\n * debug('Hello World')\r\n * ```\r\n */\r\ndeclare function debugCreate(namespace: string): ((...args: any[]) => void) & {\r\n    color: string;\r\n    enabled: boolean;\r\n    namespace: string;\r\n    log: (...args: string[]) => void;\r\n    extend: () => void;\r\n};\r\n\r\nexport declare function Decimal(n: Decimal.Value): Decimal;\r\n\r\nexport declare namespace Decimal {\r\n    export type Constructor = typeof Decimal;\r\n    export type Instance = Decimal;\r\n    export type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n    export type Modulo = Rounding | 9;\r\n    export type Value = string | number | Decimal;\r\n\r\n    // http://mikemcl.github.io/decimal.js/#constructor-properties\r\n    export interface Config {\r\n        precision?: number;\r\n        rounding?: Rounding;\r\n        toExpNeg?: number;\r\n        toExpPos?: number;\r\n        minE?: number;\r\n        maxE?: number;\r\n        crypto?: boolean;\r\n        modulo?: Modulo;\r\n        defaults?: boolean;\r\n    }\r\n}\r\n\r\nexport declare class Decimal {\r\n    readonly d: number[];\r\n    readonly e: number;\r\n    readonly s: number;\r\n\r\n    constructor(n: Decimal.Value);\r\n\r\n    absoluteValue(): Decimal;\r\n    abs(): Decimal;\r\n\r\n    ceil(): Decimal;\r\n\r\n    clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n\r\n    comparedTo(n: Decimal.Value): number;\r\n    cmp(n: Decimal.Value): number;\r\n\r\n    cosine(): Decimal;\r\n    cos(): Decimal;\r\n\r\n    cubeRoot(): Decimal;\r\n    cbrt(): Decimal;\r\n\r\n    decimalPlaces(): number;\r\n    dp(): number;\r\n\r\n    dividedBy(n: Decimal.Value): Decimal;\r\n    div(n: Decimal.Value): Decimal;\r\n\r\n    dividedToIntegerBy(n: Decimal.Value): Decimal;\r\n    divToInt(n: Decimal.Value): Decimal;\r\n\r\n    equals(n: Decimal.Value): boolean;\r\n    eq(n: Decimal.Value): boolean;\r\n\r\n    floor(): Decimal;\r\n\r\n    greaterThan(n: Decimal.Value): boolean;\r\n    gt(n: Decimal.Value): boolean;\r\n\r\n    greaterThanOrEqualTo(n: Decimal.Value): boolean;\r\n    gte(n: Decimal.Value): boolean;\r\n\r\n    hyperbolicCosine(): Decimal;\r\n    cosh(): Decimal;\r\n\r\n    hyperbolicSine(): Decimal;\r\n    sinh(): Decimal;\r\n\r\n    hyperbolicTangent(): Decimal;\r\n    tanh(): Decimal;\r\n\r\n    inverseCosine(): Decimal;\r\n    acos(): Decimal;\r\n\r\n    inverseHyperbolicCosine(): Decimal;\r\n    acosh(): Decimal;\r\n\r\n    inverseHyperbolicSine(): Decimal;\r\n    asinh(): Decimal;\r\n\r\n    inverseHyperbolicTangent(): Decimal;\r\n    atanh(): Decimal;\r\n\r\n    inverseSine(): Decimal;\r\n    asin(): Decimal;\r\n\r\n    inverseTangent(): Decimal;\r\n    atan(): Decimal;\r\n\r\n    isFinite(): boolean;\r\n\r\n    isInteger(): boolean;\r\n    isInt(): boolean;\r\n\r\n    isNaN(): boolean;\r\n\r\n    isNegative(): boolean;\r\n    isNeg(): boolean;\r\n\r\n    isPositive(): boolean;\r\n    isPos(): boolean;\r\n\r\n    isZero(): boolean;\r\n\r\n    lessThan(n: Decimal.Value): boolean;\r\n    lt(n: Decimal.Value): boolean;\r\n\r\n    lessThanOrEqualTo(n: Decimal.Value): boolean;\r\n    lte(n: Decimal.Value): boolean;\r\n\r\n    logarithm(n?: Decimal.Value): Decimal;\r\n    log(n?: Decimal.Value): Decimal;\r\n\r\n    minus(n: Decimal.Value): Decimal;\r\n    sub(n: Decimal.Value): Decimal;\r\n\r\n    modulo(n: Decimal.Value): Decimal;\r\n    mod(n: Decimal.Value): Decimal;\r\n\r\n    naturalExponential(): Decimal;\r\n    exp(): Decimal;\r\n\r\n    naturalLogarithm(): Decimal;\r\n    ln(): Decimal;\r\n\r\n    negated(): Decimal;\r\n    neg(): Decimal;\r\n\r\n    plus(n: Decimal.Value): Decimal;\r\n    add(n: Decimal.Value): Decimal;\r\n\r\n    precision(includeZeros?: boolean): number;\r\n    sd(includeZeros?: boolean): number;\r\n\r\n    round(): Decimal;\r\n\r\n    sine() : Decimal;\r\n    sin() : Decimal;\r\n\r\n    squareRoot(): Decimal;\r\n    sqrt(): Decimal;\r\n\r\n    tangent() : Decimal;\r\n    tan() : Decimal;\r\n\r\n    times(n: Decimal.Value): Decimal;\r\n    mul(n: Decimal.Value) : Decimal;\r\n\r\n    toBinary(significantDigits?: number): string;\r\n    toBinary(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toDecimalPlaces(decimalPlaces?: number): Decimal;\r\n    toDecimalPlaces(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n    toDP(decimalPlaces?: number): Decimal;\r\n    toDP(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toExponential(decimalPlaces?: number): string;\r\n    toExponential(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFixed(decimalPlaces?: number): string;\r\n    toFixed(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFraction(max_denominator?: Decimal.Value): Decimal[];\r\n\r\n    toHexadecimal(significantDigits?: number): string;\r\n    toHexadecimal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n    toHex(significantDigits?: number): string;\r\n    toHex(significantDigits: number, rounding?: Decimal.Rounding): string;\r\n\r\n    toJSON(): string;\r\n\r\n    toNearest(n: Decimal.Value, rounding?: Decimal.Rounding): Decimal;\r\n\r\n    toNumber(): number;\r\n\r\n    toOctal(significantDigits?: number): string;\r\n    toOctal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toPower(n: Decimal.Value): Decimal;\r\n    pow(n: Decimal.Value): Decimal;\r\n\r\n    toPrecision(significantDigits?: number): string;\r\n    toPrecision(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toSignificantDigits(significantDigits?: number): Decimal;\r\n    toSignificantDigits(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n    toSD(significantDigits?: number): Decimal;\r\n    toSD(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toString(): string;\r\n\r\n    truncated(): Decimal;\r\n    trunc(): Decimal;\r\n\r\n    valueOf(): string;\r\n\r\n    static abs(n: Decimal.Value): Decimal;\r\n    static acos(n: Decimal.Value): Decimal;\r\n    static acosh(n: Decimal.Value): Decimal;\r\n    static add(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static asin(n: Decimal.Value): Decimal;\r\n    static asinh(n: Decimal.Value): Decimal;\r\n    static atan(n: Decimal.Value): Decimal;\r\n    static atanh(n: Decimal.Value): Decimal;\r\n    static atan2(y: Decimal.Value, x: Decimal.Value): Decimal;\r\n    static cbrt(n: Decimal.Value): Decimal;\r\n    static ceil(n: Decimal.Value): Decimal;\r\n    static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    static clone(object?: Decimal.Config): Decimal.Constructor;\r\n    static config(object: Decimal.Config): Decimal.Constructor;\r\n    static cos(n: Decimal.Value): Decimal;\r\n    static cosh(n: Decimal.Value): Decimal;\r\n    static div(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static exp(n: Decimal.Value): Decimal;\r\n    static floor(n: Decimal.Value): Decimal;\r\n    static hypot(...n: Decimal.Value[]): Decimal;\r\n    static isDecimal(object: any): object is Decimal;\r\n    static ln(n: Decimal.Value): Decimal;\r\n    static log(n: Decimal.Value, base?: Decimal.Value): Decimal;\r\n    static log2(n: Decimal.Value): Decimal;\r\n    static log10(n: Decimal.Value): Decimal;\r\n    static max(...n: Decimal.Value[]): Decimal;\r\n    static min(...n: Decimal.Value[]): Decimal;\r\n    static mod(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static mul(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static noConflict(): Decimal.Constructor;   // Browser only\r\n    static pow(base: Decimal.Value, exponent: Decimal.Value): Decimal;\r\n    static random(significantDigits?: number): Decimal;\r\n    static round(n: Decimal.Value): Decimal;\r\n    static set(object: Decimal.Config): Decimal.Constructor;\r\n    static sign(n: Decimal.Value): number;\r\n    static sin(n: Decimal.Value): Decimal;\r\n    static sinh(n: Decimal.Value): Decimal;\r\n    static sqrt(n: Decimal.Value): Decimal;\r\n    static sub(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static sum(...n: Decimal.Value[]): Decimal;\r\n    static tan(n: Decimal.Value): Decimal;\r\n    static tanh(n: Decimal.Value): Decimal;\r\n    static trunc(n: Decimal.Value): Decimal;\r\n\r\n    static readonly default?: Decimal.Constructor;\r\n    static readonly Decimal?: Decimal.Constructor;\r\n\r\n    static readonly precision: number;\r\n    static readonly rounding: Decimal.Rounding;\r\n    static readonly toExpNeg: number;\r\n    static readonly toExpPos: number;\r\n    static readonly minE: number;\r\n    static readonly maxE: number;\r\n    static readonly crypto: boolean;\r\n    static readonly modulo: Decimal.Modulo;\r\n\r\n    static readonly ROUND_UP: 0;\r\n    static readonly ROUND_DOWN: 1;\r\n    static readonly ROUND_CEIL: 2;\r\n    static readonly ROUND_FLOOR: 3;\r\n    static readonly ROUND_HALF_UP: 4;\r\n    static readonly ROUND_HALF_DOWN: 5;\r\n    static readonly ROUND_HALF_EVEN: 6;\r\n    static readonly ROUND_HALF_CEIL: 7;\r\n    static readonly ROUND_HALF_FLOOR: 8;\r\n    static readonly EUCLID: 9;\r\n}\r\n\r\n/**\r\n * Interface for any Decimal.js-like library\r\n * Allows us to accept Decimal.js from different\r\n * versions and some compatible alternatives\r\n */\r\nexport declare interface DecimalJsLike {\r\n    d: number[];\r\n    e: number;\r\n    s: number;\r\n    toFixed(): string;\r\n}\r\n\r\nexport declare type DefaultArgs = InternalArgs<{}, {}, {}, {}>;\r\n\r\nexport declare type DefaultSelection<Payload extends OperationPayload, Args = {}, GlobalOmitOptions = {}> = Args extends {\r\n    omit: infer LocalOmit;\r\n} ? ApplyOmit<UnwrapPayload<{\r\n    default: Payload;\r\n}>['default'], PatchFlat<LocalOmit, ExtractGlobalOmit<GlobalOmitOptions, Uncapitalize<Payload['name']>>>> : ApplyOmit<UnwrapPayload<{\r\n    default: Payload;\r\n}>['default'], ExtractGlobalOmit<GlobalOmitOptions, Uncapitalize<Payload['name']>>>;\r\n\r\nexport declare function defineDmmfProperty(target: object, runtimeDataModel: RuntimeDataModel): void;\r\n\r\ndeclare function defineExtension(ext: ExtensionArgs | ((client: Client) => Client)): (client: Client) => Client;\r\n\r\ndeclare const denylist: readonly [\"$connect\", \"$disconnect\", \"$on\", \"$transaction\", \"$extends\"];\r\n\r\ndeclare type Deprecation = ReadonlyDeep_2<{\r\n    sinceVersion: string;\r\n    reason: string;\r\n    plannedRemovalVersion?: string;\r\n}>;\r\n\r\ndeclare type DeserializedResponse = Array<Record<string, unknown>>;\r\n\r\nexport declare function deserializeJsonResponse(result: unknown): unknown;\r\n\r\nexport declare function deserializeRawResult(response: RawResponse): DeserializedResponse;\r\n\r\nexport declare type DevTypeMapDef = {\r\n    meta: {\r\n        modelProps: string;\r\n    };\r\n    model: {\r\n        [Model in PropertyKey]: {\r\n            [Operation in PropertyKey]: DevTypeMapFnDef;\r\n        };\r\n    };\r\n    other: {\r\n        [Operation in PropertyKey]: DevTypeMapFnDef;\r\n    };\r\n};\r\n\r\nexport declare type DevTypeMapFnDef = {\r\n    args: any;\r\n    result: any;\r\n    payload: OperationPayload;\r\n};\r\n\r\nexport declare namespace DMMF {\r\n    export {\r\n        datamodelEnumToSchemaEnum,\r\n        Document_2 as Document,\r\n        Mappings,\r\n        OtherOperationMappings,\r\n        DatamodelEnum,\r\n        SchemaEnum,\r\n        EnumValue,\r\n        Datamodel,\r\n        uniqueIndex,\r\n        PrimaryKey,\r\n        Model,\r\n        FieldKind,\r\n        FieldNamespace,\r\n        FieldLocation,\r\n        Field,\r\n        FieldDefault,\r\n        FieldDefaultScalar,\r\n        Index,\r\n        IndexType,\r\n        IndexField,\r\n        SortOrder,\r\n        Schema,\r\n        Query,\r\n        QueryOutput,\r\n        TypeRef,\r\n        InputTypeRef,\r\n        SchemaArg,\r\n        OutputType,\r\n        SchemaField,\r\n        OutputTypeRef,\r\n        Deprecation,\r\n        InputType,\r\n        FieldRefType,\r\n        FieldRefAllowType,\r\n        ModelMapping,\r\n        ModelAction\r\n    }\r\n}\r\n\r\ndeclare namespace DMMF_2 {\r\n    export {\r\n        datamodelEnumToSchemaEnum,\r\n        Document_2 as Document,\r\n        Mappings,\r\n        OtherOperationMappings,\r\n        DatamodelEnum,\r\n        SchemaEnum,\r\n        EnumValue,\r\n        Datamodel,\r\n        uniqueIndex,\r\n        PrimaryKey,\r\n        Model,\r\n        FieldKind,\r\n        FieldNamespace,\r\n        FieldLocation,\r\n        Field,\r\n        FieldDefault,\r\n        FieldDefaultScalar,\r\n        Index,\r\n        IndexType,\r\n        IndexField,\r\n        SortOrder,\r\n        Schema,\r\n        Query,\r\n        QueryOutput,\r\n        TypeRef,\r\n        InputTypeRef,\r\n        SchemaArg,\r\n        OutputType,\r\n        SchemaField,\r\n        OutputTypeRef,\r\n        Deprecation,\r\n        InputType,\r\n        FieldRefType,\r\n        FieldRefAllowType,\r\n        ModelMapping,\r\n        ModelAction\r\n    }\r\n}\r\n\r\nexport declare function dmmfToRuntimeDataModel(dmmfDataModel: DMMF_2.Datamodel): RuntimeDataModel;\r\n\r\ndeclare type Document_2 = ReadonlyDeep_2<{\r\n    datamodel: Datamodel;\r\n    schema: Schema;\r\n    mappings: Mappings;\r\n}>;\r\n\r\n/**\r\n * A generic driver adapter factory that allows the user to instantiate a\r\n * driver adapter. The query and result types are specific to the adapter.\r\n */\r\ndeclare interface DriverAdapterFactory<Query, Result> extends AdapterInfo {\r\n    /**\r\n     * Instantiate a driver adapter.\r\n     */\r\n    connect(): Promise<Queryable<Query, Result>>;\r\n}\r\n\r\ndeclare type DynamicArgType = ArgType | {\r\n    arity: 'tuple';\r\n    elements: ArgType[];\r\n};\r\n\r\n/** Client */\r\nexport declare type DynamicClientExtensionArgs<C_, TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof C_]: unknown;\r\n} & {\r\n    [K: symbol]: {\r\n        ctx: Optional<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList> & {\r\n            $parent: Optional<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList>;\r\n        };\r\n    };\r\n};\r\n\r\nexport declare type DynamicClientExtensionThis<TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof ExtArgs['client']]: Return<ExtArgs['client'][P]>;\r\n} & {\r\n    [P in Exclude<TypeMap['meta']['modelProps'], keyof ExtArgs['client']>]: DynamicModelExtensionThis<TypeMap, ModelKey<TypeMap, P>, ExtArgs>;\r\n} & {\r\n    [P in Exclude<keyof TypeMap['other']['operations'], keyof ExtArgs['client']>]: P extends keyof ClientOtherOps ? ClientOtherOps[P] : never;\r\n} & {\r\n    [P in Exclude<ClientBuiltInProp, keyof ExtArgs['client']>]: DynamicClientExtensionThisBuiltin<TypeMap, TypeMapCb, ExtArgs>[P];\r\n} & {\r\n    [K: symbol]: {\r\n        types: TypeMap['other'];\r\n    };\r\n};\r\n\r\nexport declare type DynamicClientExtensionThisBuiltin<TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    $extends: ExtendsHook<'extends', TypeMapCb, ExtArgs, Call<TypeMapCb, {\r\n        extArgs: ExtArgs;\r\n    }>>;\r\n    $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: {\r\n        isolationLevel?: TypeMap['meta']['txIsolationLevel'];\r\n    }): Promise<UnwrapTuple<P>>;\r\n    $transaction<R>(fn: (client: Omit<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList>) => Promise<R>, options?: {\r\n        maxWait?: number;\r\n        timeout?: number;\r\n        isolationLevel?: TypeMap['meta']['txIsolationLevel'];\r\n    }): Promise<R>;\r\n    $disconnect(): Promise<void>;\r\n    $connect(): Promise<void>;\r\n};\r\n\r\n/** Model */\r\nexport declare type DynamicModelExtensionArgs<M_, TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [K in keyof M_]: K extends '$allModels' ? {\r\n        [P in keyof M_[K]]?: unknown;\r\n    } & {\r\n        [K: symbol]: {};\r\n    } : K extends TypeMap['meta']['modelProps'] ? {\r\n        [P in keyof M_[K]]?: unknown;\r\n    } & {\r\n        [K: symbol]: {\r\n            ctx: DynamicModelExtensionThis<TypeMap, ModelKey<TypeMap, K>, ExtArgs> & {\r\n                $parent: DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>;\r\n            } & {\r\n                $name: ModelKey<TypeMap, K>;\r\n            } & {\r\n                /**\r\n                 * @deprecated Use `$name` instead.\r\n                 */\r\n                name: ModelKey<TypeMap, K>;\r\n            };\r\n        };\r\n    } : never;\r\n};\r\n\r\nexport declare type DynamicModelExtensionFluentApi<TypeMap extends TypeMapDef, M extends PropertyKey, P extends PropertyKey, Null> = {\r\n    [K in keyof TypeMap['model'][M]['payload']['objects']]: <A>(args?: Exact<A, Path<TypeMap['model'][M]['operations'][P]['args']['select'], [K]>>) => PrismaPromise<Path<DynamicModelExtensionFnResultBase<TypeMap, M, {\r\n        select: {\r\n            [P in K]: A;\r\n        };\r\n    }, P>, [K]> | Null> & DynamicModelExtensionFluentApi<TypeMap, (TypeMap['model'][M]['payload']['objects'][K] & {})['name'], P, Null | Select<TypeMap['model'][M]['payload']['objects'][K], null>>;\r\n};\r\n\r\nexport declare type DynamicModelExtensionFnResult<TypeMap extends TypeMapDef, M extends PropertyKey, A, P extends PropertyKey, Null> = P extends FluentOperation ? DynamicModelExtensionFluentApi<TypeMap, M, P, Null> & PrismaPromise<DynamicModelExtensionFnResultBase<TypeMap, M, A, P> | Null> : PrismaPromise<DynamicModelExtensionFnResultBase<TypeMap, M, A, P>>;\r\n\r\nexport declare type DynamicModelExtensionFnResultBase<TypeMap extends TypeMapDef, M extends PropertyKey, A, P extends PropertyKey> = GetResult<TypeMap['model'][M]['payload'], A, P & Operation, TypeMap['globalOmitOptions']>;\r\n\r\nexport declare type DynamicModelExtensionFnResultNull<P extends PropertyKey> = P extends 'findUnique' | 'findFirst' ? null : never;\r\n\r\nexport declare type DynamicModelExtensionOperationFn<TypeMap extends TypeMapDef, M extends PropertyKey, P extends PropertyKey> = {} extends TypeMap['model'][M]['operations'][P]['args'] ? <A extends TypeMap['model'][M]['operations'][P]['args']>(args?: Exact<A, TypeMap['model'][M]['operations'][P]['args']>) => DynamicModelExtensionFnResult<TypeMap, M, A, P, DynamicModelExtensionFnResultNull<P>> : <A extends TypeMap['model'][M]['operations'][P]['args']>(args: Exact<A, TypeMap['model'][M]['operations'][P]['args']>) => DynamicModelExtensionFnResult<TypeMap, M, A, P, DynamicModelExtensionFnResultNull<P>>;\r\n\r\nexport declare type DynamicModelExtensionThis<TypeMap extends TypeMapDef, M extends PropertyKey, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof ExtArgs['model'][Uncapitalize<M & string>]]: Return<ExtArgs['model'][Uncapitalize<M & string>][P]>;\r\n} & {\r\n    [P in Exclude<keyof TypeMap['model'][M]['operations'], keyof ExtArgs['model'][Uncapitalize<M & string>]>]: DynamicModelExtensionOperationFn<TypeMap, M, P>;\r\n} & {\r\n    [P in Exclude<'fields', keyof ExtArgs['model'][Uncapitalize<M & string>]>]: TypeMap['model'][M]['fields'];\r\n} & {\r\n    [K: symbol]: {\r\n        types: TypeMap['model'][M];\r\n    };\r\n};\r\n\r\n/** Query */\r\nexport declare type DynamicQueryExtensionArgs<Q_, TypeMap extends TypeMapDef> = {\r\n    [K in keyof Q_]: K extends '$allOperations' ? (args: {\r\n        model?: string;\r\n        operation: string;\r\n        args: any;\r\n        query: (args: any) => PrismaPromise<any>;\r\n    }) => Promise<any> : K extends '$allModels' ? {\r\n        [P in keyof Q_[K] | keyof TypeMap['model'][keyof TypeMap['model']]['operations'] | '$allOperations']?: P extends '$allOperations' ? DynamicQueryExtensionCb<TypeMap, 'model', keyof TypeMap['model'], keyof TypeMap['model'][keyof TypeMap['model']]['operations']> : P extends keyof TypeMap['model'][keyof TypeMap['model']]['operations'] ? DynamicQueryExtensionCb<TypeMap, 'model', keyof TypeMap['model'], P> : never;\r\n    } : K extends TypeMap['meta']['modelProps'] ? {\r\n        [P in keyof Q_[K] | keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations'] | '$allOperations']?: P extends '$allOperations' ? DynamicQueryExtensionCb<TypeMap, 'model', ModelKey<TypeMap, K>, keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations']> : P extends keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations'] ? DynamicQueryExtensionCb<TypeMap, 'model', ModelKey<TypeMap, K>, P> : never;\r\n    } : K extends keyof TypeMap['other']['operations'] ? DynamicQueryExtensionCb<[TypeMap], 0, 'other', K> : never;\r\n};\r\n\r\nexport declare type DynamicQueryExtensionCb<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = <A extends DynamicQueryExtensionCbArgs<TypeMap, _0, _1, _2>>(args: A) => Promise<TypeMap[_0][_1][_2]['result']>;\r\n\r\nexport declare type DynamicQueryExtensionCbArgs<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = (_1 extends unknown ? _2 extends unknown ? {\r\n    args: DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>;\r\n    model: _0 extends 0 ? undefined : _1;\r\n    operation: _2;\r\n    query: <A extends DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>>(args: A) => PrismaPromise<TypeMap[_0][_1]['operations'][_2]['result']>;\r\n} : never : never) & {\r\n    query: (args: DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>) => PrismaPromise<TypeMap[_0][_1]['operations'][_2]['result']>;\r\n};\r\n\r\nexport declare type DynamicQueryExtensionCbArgsArgs<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = _2 extends '$queryRaw' | '$executeRaw' ? Sql : TypeMap[_0][_1]['operations'][_2]['args'];\r\n\r\n/** Result */\r\nexport declare type DynamicResultExtensionArgs<R_, TypeMap extends TypeMapDef> = {\r\n    [K in keyof R_]: {\r\n        [P in keyof R_[K]]?: {\r\n            needs?: DynamicResultExtensionNeeds<TypeMap, ModelKey<TypeMap, K>, R_[K][P]>;\r\n            compute(data: DynamicResultExtensionData<TypeMap, ModelKey<TypeMap, K>, R_[K][P]>): any;\r\n        };\r\n    };\r\n};\r\n\r\nexport declare type DynamicResultExtensionData<TypeMap extends TypeMapDef, M extends PropertyKey, S> = GetFindResult<TypeMap['model'][M]['payload'], {\r\n    select: S;\r\n}, {}>;\r\n\r\nexport declare type DynamicResultExtensionNeeds<TypeMap extends TypeMapDef, M extends PropertyKey, S> = {\r\n    [K in keyof S]: K extends keyof TypeMap['model'][M]['payload']['scalars'] ? S[K] : never;\r\n} & {\r\n    [N in keyof TypeMap['model'][M]['payload']['scalars']]?: boolean;\r\n};\r\n\r\n/**\r\n * Placeholder value for \"no text\".\r\n */\r\nexport declare const empty: Sql;\r\n\r\nexport declare type EmptyToUnknown<T> = T;\r\n\r\ndeclare interface Engine<InteractiveTransactionPayload = unknown> {\r\n    /** The name of the engine. This is meant to be consumed externally */\r\n    readonly name: string;\r\n    onBeforeExit(callback: () => Promise<void>): void;\r\n    start(): Promise<void>;\r\n    stop(): Promise<void>;\r\n    version(forceRun?: boolean): Promise<string> | string;\r\n    request<T>(query: JsonQuery, options: RequestOptions<InteractiveTransactionPayload>): Promise<QueryEngineResultData<T>>;\r\n    requestBatch<T>(queries: JsonQuery[], options: RequestBatchOptions<InteractiveTransactionPayload>): Promise<BatchQueryEngineResult<T>[]>;\r\n    transaction(action: 'start', headers: Transaction_2.TransactionHeaders, options: Transaction_2.Options): Promise<Transaction_2.InteractiveTransactionInfo<unknown>>;\r\n    transaction(action: 'commit', headers: Transaction_2.TransactionHeaders, info: Transaction_2.InteractiveTransactionInfo<unknown>): Promise<void>;\r\n    transaction(action: 'rollback', headers: Transaction_2.TransactionHeaders, info: Transaction_2.InteractiveTransactionInfo<unknown>): Promise<void>;\r\n    metrics(options: MetricsOptionsJson): Promise<Metrics>;\r\n    metrics(options: MetricsOptionsPrometheus): Promise<string>;\r\n    applyPendingMigrations(): Promise<void>;\r\n}\r\n\r\ndeclare interface EngineConfig {\r\n    cwd: string;\r\n    dirname: string;\r\n    enableDebugLogs?: boolean;\r\n    allowTriggerPanic?: boolean;\r\n    prismaPath?: string;\r\n    generator?: GeneratorConfig;\r\n    /**\r\n     * @remarks this field is used internally by Policy, do not rename or remove\r\n     */\r\n    overrideDatasources: Datasources;\r\n    showColors?: boolean;\r\n    logQueries?: boolean;\r\n    logLevel?: 'info' | 'warn';\r\n    env: Record<string, string>;\r\n    flags?: string[];\r\n    clientVersion: string;\r\n    engineVersion: string;\r\n    previewFeatures?: string[];\r\n    engineEndpoint?: string;\r\n    activeProvider?: string;\r\n    logEmitter: LogEmitter;\r\n    transactionOptions: Transaction_2.Options;\r\n    /**\r\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`.\r\n     * If set, this is only used in the library engine, and all queries would be performed through it,\r\n     * rather than Prisma's Rust drivers.\r\n     * @remarks only used by LibraryEngine.ts\r\n     */\r\n    adapter?: SqlDriverAdapterFactory;\r\n    /**\r\n     * The contents of the schema encoded into a string\r\n     */\r\n    inlineSchema: string;\r\n    /**\r\n     * The contents of the datasource url saved in a string\r\n     * @remarks only used by DataProxyEngine.ts\r\n     * @remarks this field is used internally by Policy, do not rename or remove\r\n     */\r\n    inlineDatasources: GetPrismaClientConfig['inlineDatasources'];\r\n    /**\r\n     * The string hash that was produced for a given schema\r\n     * @remarks only used by DataProxyEngine.ts\r\n     */\r\n    inlineSchemaHash: string;\r\n    /**\r\n     * The helper for interaction with OTEL tracing\r\n     * @remarks enabling is determined by the client and @prisma/instrumentation package\r\n     */\r\n    tracingHelper: TracingHelper;\r\n    /**\r\n     * Information about whether we have not found a schema.prisma file in the\r\n     * default location, and that we fell back to finding the schema.prisma file\r\n     * in the current working directory. This usually means it has been bundled.\r\n     */\r\n    isBundled?: boolean;\r\n    /**\r\n     * Web Assembly module loading configuration\r\n     */\r\n    engineWasm?: EngineWasmLoadingConfig;\r\n    compilerWasm?: CompilerWasmLoadingConfig;\r\n    /**\r\n     * Allows Accelerate to use runtime utilities from the client. These are\r\n     * necessary for the AccelerateEngine to function correctly.\r\n     */\r\n    accelerateUtils?: {\r\n        resolveDatasourceUrl: typeof resolveDatasourceUrl;\r\n        getBatchRequestPayload: typeof getBatchRequestPayload;\r\n        prismaGraphQLToJSError: typeof prismaGraphQLToJSError;\r\n        PrismaClientUnknownRequestError: typeof PrismaClientUnknownRequestError;\r\n        PrismaClientInitializationError: typeof PrismaClientInitializationError;\r\n        PrismaClientKnownRequestError: typeof PrismaClientKnownRequestError;\r\n        debug: (...args: any[]) => void;\r\n        engineVersion: string;\r\n        clientVersion: string;\r\n    };\r\n}\r\n\r\ndeclare type EngineEvent<E extends EngineEventType> = E extends QueryEventType ? QueryEvent : LogEvent;\r\n\r\ndeclare type EngineEventType = QueryEventType | LogEventType;\r\n\r\ndeclare type EngineSpan = {\r\n    id: EngineSpanId;\r\n    parentId: string | null;\r\n    name: string;\r\n    startTime: HrTime;\r\n    endTime: HrTime;\r\n    kind: EngineSpanKind;\r\n    attributes?: Record<string, unknown>;\r\n    links?: EngineSpanId[];\r\n};\r\n\r\ndeclare type EngineSpanId = string;\r\n\r\ndeclare type EngineSpanKind = 'client' | 'internal';\r\n\r\ndeclare type EngineWasmLoadingConfig = {\r\n    /**\r\n     * WASM-bindgen runtime for corresponding module\r\n     */\r\n    getRuntime: () => Promise<{\r\n        __wbg_set_wasm(exports: unknown): void;\r\n        QueryEngine: QueryEngineConstructor;\r\n    }>;\r\n    /**\r\n     * Loads the raw wasm module for the wasm query engine. This configuration is\r\n     * generated specifically for each type of client, eg. Node.js client and Edge\r\n     * clients will have different implementations.\r\n     * @remarks this is a callback on purpose, we only load the wasm if needed.\r\n     * @remarks only used by LibraryEngine\r\n     */\r\n    getQueryEngineWasmModule: () => Promise<unknown>;\r\n};\r\n\r\ndeclare type EnumValue = ReadonlyDeep_2<{\r\n    name: string;\r\n    dbName: string | null;\r\n}>;\r\n\r\ndeclare type EnvPaths = {\r\n    rootEnvPath: string | null;\r\n    schemaEnvPath: string | undefined;\r\n};\r\n\r\ndeclare interface EnvValue {\r\n    fromEnvVar: null | string;\r\n    value: null | string;\r\n}\r\n\r\nexport declare type Equals<A, B> = (<T>() => T extends A ? 1 : 2) extends (<T>() => T extends B ? 1 : 2) ? 1 : 0;\r\n\r\ndeclare type Error_2 = MappedError & {\r\n    originalCode?: string;\r\n    originalMessage?: string;\r\n};\r\n\r\ndeclare type ErrorCapturingFunction<T> = T extends (...args: infer A) => Promise<infer R> ? (...args: A) => Promise<Result_4<ErrorCapturingInterface<R>>> : T extends (...args: infer A) => infer R ? (...args: A) => Result_4<ErrorCapturingInterface<R>> : T;\r\n\r\ndeclare type ErrorCapturingInterface<T> = {\r\n    [K in keyof T]: ErrorCapturingFunction<T[K]>;\r\n};\r\n\r\ndeclare interface ErrorCapturingSqlDriverAdapter extends ErrorCapturingInterface<SqlDriverAdapter> {\r\n    readonly errorRegistry: ErrorRegistry;\r\n}\r\n\r\ndeclare type ErrorFormat = 'pretty' | 'colorless' | 'minimal';\r\n\r\ndeclare type ErrorRecord = {\r\n    error: unknown;\r\n};\r\n\r\ndeclare interface ErrorRegistry {\r\n    consumeError(id: number): ErrorRecord | undefined;\r\n}\r\n\r\ndeclare interface ErrorWithBatchIndex {\r\n    batchRequestIdx?: number;\r\n}\r\n\r\ndeclare type EventCallback<E extends ExtendedEventType> = [E] extends ['beforeExit'] ? () => Promise<void> : [E] extends [LogLevel] ? (event: EngineEvent<E>) => void : never;\r\n\r\nexport declare type Exact<A, W> = (A extends unknown ? (W extends A ? {\r\n    [K in keyof A]: Exact<A[K], W[K]>;\r\n} : W) : never) | (A extends Narrowable ? A : never);\r\n\r\n/**\r\n * Defines Exception.\r\n *\r\n * string or an object with one of (message or name or code) and optional stack\r\n */\r\ndeclare type Exception = ExceptionWithCode | ExceptionWithMessage | ExceptionWithName | string;\r\n\r\ndeclare interface ExceptionWithCode {\r\n    code: string | number;\r\n    name?: string;\r\n    message?: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare interface ExceptionWithMessage {\r\n    code?: string | number;\r\n    message: string;\r\n    name?: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare interface ExceptionWithName {\r\n    code?: string | number;\r\n    message?: string;\r\n    name: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare type ExtendedEventType = LogLevel | 'beforeExit';\r\n\r\ndeclare type ExtendedSpanOptions = SpanOptions & {\r\n    /** The name of the span */\r\n    name: string;\r\n    internal?: boolean;\r\n    /** Whether it propagates context (?=true) */\r\n    active?: boolean;\r\n    /** The context to append the span to */\r\n    context?: Context;\r\n};\r\n\r\n/** $extends, defineExtension */\r\nexport declare interface ExtendsHook<Variant extends 'extends' | 'define', TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>, TypeMap extends TypeMapDef = Call<TypeMapCb, {\r\n    extArgs: ExtArgs;\r\n}>> {\r\n    extArgs: ExtArgs;\r\n    <R_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels']?: unknown;\r\n    }, R, M_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels']?: unknown;\r\n    }, M, Q_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels' | keyof TypeMap['other']['operations'] | '$allOperations']?: unknown;\r\n    }, C_ extends {\r\n        [K in string]?: unknown;\r\n    }, C, Args extends InternalArgs = InternalArgs<R, M, {}, C>, MergedArgs extends InternalArgs = MergeExtArgs<TypeMap, ExtArgs, Args>>(extension: ((client: DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>) => {\r\n        $extends: {\r\n            extArgs: Args;\r\n        };\r\n    }) | {\r\n        name?: string;\r\n        query?: DynamicQueryExtensionArgs<Q_, TypeMap>;\r\n        result?: DynamicResultExtensionArgs<R_, TypeMap> & R;\r\n        model?: DynamicModelExtensionArgs<M_, TypeMap, TypeMapCb, ExtArgs> & M;\r\n        client?: DynamicClientExtensionArgs<C_, TypeMap, TypeMapCb, ExtArgs> & C;\r\n    }): {\r\n        extends: DynamicClientExtensionThis<Call<TypeMapCb, {\r\n            extArgs: MergedArgs;\r\n        }>, TypeMapCb, MergedArgs>;\r\n        define: (client: any) => {\r\n            $extends: {\r\n                extArgs: Args;\r\n            };\r\n        };\r\n    }[Variant];\r\n}\r\n\r\nexport declare type ExtensionArgs = Optional<RequiredExtensionArgs>;\r\n\r\ndeclare namespace Extensions {\r\n    export {\r\n        defineExtension,\r\n        getExtensionContext\r\n    }\r\n}\r\nexport { Extensions }\r\n\r\ndeclare namespace Extensions_2 {\r\n    export {\r\n        InternalArgs,\r\n        DefaultArgs,\r\n        GetPayloadResultExtensionKeys,\r\n        GetPayloadResultExtensionObject,\r\n        GetPayloadResult,\r\n        GetSelect,\r\n        GetOmit,\r\n        DynamicQueryExtensionArgs,\r\n        DynamicQueryExtensionCb,\r\n        DynamicQueryExtensionCbArgs,\r\n        DynamicQueryExtensionCbArgsArgs,\r\n        DynamicResultExtensionArgs,\r\n        DynamicResultExtensionNeeds,\r\n        DynamicResultExtensionData,\r\n        DynamicModelExtensionArgs,\r\n        DynamicModelExtensionThis,\r\n        DynamicModelExtensionOperationFn,\r\n        DynamicModelExtensionFnResult,\r\n        DynamicModelExtensionFnResultBase,\r\n        DynamicModelExtensionFluentApi,\r\n        DynamicModelExtensionFnResultNull,\r\n        DynamicClientExtensionArgs,\r\n        DynamicClientExtensionThis,\r\n        ClientBuiltInProp,\r\n        DynamicClientExtensionThisBuiltin,\r\n        ExtendsHook,\r\n        MergeExtArgs,\r\n        AllModelsToStringIndex,\r\n        TypeMapDef,\r\n        DevTypeMapDef,\r\n        DevTypeMapFnDef,\r\n        ClientOptionDef,\r\n        ClientOtherOps,\r\n        TypeMapCbDef,\r\n        ModelKey,\r\n        RequiredExtensionArgs as UserArgs\r\n    }\r\n}\r\n\r\nexport declare type ExtractGlobalOmit<Options, ModelName extends string> = Options extends {\r\n    omit: {\r\n        [K in ModelName]: infer GlobalOmit;\r\n    };\r\n} ? GlobalOmit : {};\r\n\r\ndeclare type Field = ReadonlyDeep_2<{\r\n    kind: FieldKind;\r\n    name: string;\r\n    isRequired: boolean;\r\n    isList: boolean;\r\n    isUnique: boolean;\r\n    isId: boolean;\r\n    isReadOnly: boolean;\r\n    isGenerated?: boolean;\r\n    isUpdatedAt?: boolean;\r\n    /**\r\n     * Describes the data type in the same the way it is defined in the Prisma schema:\r\n     * BigInt, Boolean, Bytes, DateTime, Decimal, Float, Int, JSON, String, $ModelName\r\n     */\r\n    type: string;\r\n    /**\r\n     * Native database type, if specified.\r\n     * For example, `@db.VarChar(191)` is encoded as `['VarChar', ['191']]`,\r\n     * `@db.Text` is encoded as `['Text', []]`.\r\n     */\r\n    nativeType?: [string, string[]] | null;\r\n    dbName?: string | null;\r\n    hasDefaultValue: boolean;\r\n    default?: FieldDefault | FieldDefaultScalar | FieldDefaultScalar[];\r\n    relationFromFields?: string[];\r\n    relationToFields?: string[];\r\n    relationOnDelete?: string;\r\n    relationOnUpdate?: string;\r\n    relationName?: string;\r\n    documentation?: string;\r\n}>;\r\n\r\ndeclare type FieldDefault = ReadonlyDeep_2<{\r\n    name: string;\r\n    args: Array<string | number>;\r\n}>;\r\n\r\ndeclare type FieldDefaultScalar = string | boolean | number;\r\n\r\ndeclare type FieldInitializer = {\r\n    type: 'value';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'lastInsertId';\r\n};\r\n\r\ndeclare type FieldKind = 'scalar' | 'object' | 'enum' | 'unsupported';\r\n\r\ndeclare type FieldLocation = 'scalar' | 'inputObjectTypes' | 'outputObjectTypes' | 'enumTypes' | 'fieldRefTypes';\r\n\r\ndeclare type FieldNamespace = 'model' | 'prisma';\r\n\r\ndeclare type FieldOperation = {\r\n    type: 'set';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'add';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'subtract';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'multiply';\r\n    value: PrismaValue;\r\n} | {\r\n    type: 'divide';\r\n    value: PrismaValue;\r\n};\r\n\r\n/**\r\n * A reference to a specific field of a specific model\r\n */\r\nexport declare interface FieldRef<Model, FieldType> {\r\n    readonly modelName: Model;\r\n    readonly name: string;\r\n    readonly typeName: FieldType;\r\n    readonly isList: boolean;\r\n}\r\n\r\ndeclare type FieldRefAllowType = TypeRef<'scalar' | 'enumTypes'>;\r\n\r\ndeclare type FieldRefType = ReadonlyDeep_2<{\r\n    name: string;\r\n    allowTypes: FieldRefAllowType[];\r\n    fields: SchemaArg[];\r\n}>;\r\n\r\ndeclare type FieldScalarType = {\r\n    type: 'string' | 'int' | 'bigint' | 'float' | 'boolean' | 'json' | 'object' | 'datetime' | 'decimal' | 'unsupported';\r\n} | {\r\n    type: 'enum';\r\n    name: string;\r\n} | {\r\n    type: 'bytes';\r\n    encoding: 'array' | 'base64' | 'hex';\r\n};\r\n\r\ndeclare type FieldType = {\r\n    arity: Arity;\r\n} & FieldScalarType;\r\n\r\ndeclare type FluentOperation = 'findUnique' | 'findUniqueOrThrow' | 'findFirst' | 'findFirstOrThrow' | 'create' | 'update' | 'upsert' | 'delete';\r\n\r\nexport declare interface Fn<Params = unknown, Returns = unknown> {\r\n    params: Params;\r\n    returns: Returns;\r\n}\r\n\r\ndeclare type Fragment = {\r\n    type: 'stringChunk';\r\n    chunk: string;\r\n} | {\r\n    type: 'parameter';\r\n} | {\r\n    type: 'parameterTuple';\r\n} | {\r\n    type: 'parameterTupleList';\r\n    itemPrefix: string;\r\n    itemSeparator: string;\r\n    itemSuffix: string;\r\n    groupSeparator: string;\r\n};\r\n\r\ndeclare interface GeneratorConfig {\r\n    name: string;\r\n    output: EnvValue | null;\r\n    isCustomOutput?: boolean;\r\n    provider: EnvValue;\r\n    config: {\r\n        /** `output` is a reserved name and will only be available directly at `generator.output` */\r\n        output?: never;\r\n        /** `provider` is a reserved name and will only be available directly at `generator.provider` */\r\n        provider?: never;\r\n        /** `binaryTargets` is a reserved name and will only be available directly at `generator.binaryTargets` */\r\n        binaryTargets?: never;\r\n        /** `previewFeatures` is a reserved name and will only be available directly at `generator.previewFeatures` */\r\n        previewFeatures?: never;\r\n    } & {\r\n        [key: string]: string | string[] | undefined;\r\n    };\r\n    binaryTargets: BinaryTargetsEnvValue[];\r\n    previewFeatures: string[];\r\n    envPaths?: EnvPaths;\r\n    sourceFilePath: string;\r\n}\r\n\r\nexport declare type GetAggregateResult<P extends OperationPayload, A> = {\r\n    [K in keyof A as K extends Aggregate ? K : never]: K extends '_count' ? A[K] extends true ? number : Count<A[K]> : {\r\n        [J in keyof A[K] & string]: P['scalars'][J] | null;\r\n    };\r\n};\r\n\r\ndeclare function getBatchRequestPayload(batch: JsonQuery[], transaction?: TransactionOptions_2<unknown>): QueryEngineBatchRequest;\r\n\r\nexport declare type GetBatchResult = {\r\n    count: number;\r\n};\r\n\r\nexport declare type GetCountResult<A> = A extends {\r\n    select: infer S;\r\n} ? (S extends true ? number : Count<S>) : number;\r\n\r\ndeclare function getExtensionContext<T>(that: T): Context_2<T>;\r\n\r\nexport declare type GetFindResult<P extends OperationPayload, A, GlobalOmitOptions> = Equals<A, any> extends 1 ? DefaultSelection<P, A, GlobalOmitOptions> : A extends {\r\n    select: infer S extends object;\r\n} & Record<string, unknown> | {\r\n    include: infer I extends object;\r\n} & Record<string, unknown> ? {\r\n    [K in keyof S | keyof I as (S & I)[K] extends false | undefined | Skip | null ? never : K]: (S & I)[K] extends object ? P extends SelectablePayloadFields<K, (infer O)[]> ? O extends OperationPayload ? GetFindResult<O, (S & I)[K], GlobalOmitOptions>[] : never : P extends SelectablePayloadFields<K, infer O | null> ? O extends OperationPayload ? GetFindResult<O, (S & I)[K], GlobalOmitOptions> | SelectField<P, K> & null : never : K extends '_count' ? Count<GetFindResult<P, (S & I)[K], GlobalOmitOptions>> : never : P extends SelectablePayloadFields<K, (infer O)[]> ? O extends OperationPayload ? DefaultSelection<O, {}, GlobalOmitOptions>[] : never : P extends SelectablePayloadFields<K, infer O | null> ? O extends OperationPayload ? DefaultSelection<O, {}, GlobalOmitOptions> | SelectField<P, K> & null : never : P extends {\r\n        scalars: {\r\n            [k in K]: infer O;\r\n        };\r\n    } ? O : K extends '_count' ? Count<P['objects']> : never;\r\n} & (A extends {\r\n    include: any;\r\n} & Record<string, unknown> ? DefaultSelection<P, A & {\r\n    omit: A['omit'];\r\n}, GlobalOmitOptions> : unknown) : DefaultSelection<P, A, GlobalOmitOptions>;\r\n\r\nexport declare type GetGroupByResult<P extends OperationPayload, A> = A extends {\r\n    by: string[];\r\n} ? Array<GetAggregateResult<P, A> & {\r\n    [K in A['by'][number]]: P['scalars'][K];\r\n}> : A extends {\r\n    by: string;\r\n} ? Array<GetAggregateResult<P, A> & {\r\n    [K in A['by']]: P['scalars'][K];\r\n}> : {}[];\r\n\r\nexport declare type GetOmit<BaseKeys extends string, R extends InternalArgs['result'][string], ExtraType = never> = {\r\n    [K in (string extends keyof R ? never : keyof R) | BaseKeys]?: boolean | ExtraType;\r\n};\r\n\r\nexport declare type GetPayloadResult<Base extends Record<any, any>, R extends InternalArgs['result'][string]> = Omit<Base, GetPayloadResultExtensionKeys<R>> & GetPayloadResultExtensionObject<R>;\r\n\r\nexport declare type GetPayloadResultExtensionKeys<R extends InternalArgs['result'][string], KR extends keyof R = string extends keyof R ? never : keyof R> = KR;\r\n\r\nexport declare type GetPayloadResultExtensionObject<R extends InternalArgs['result'][string]> = {\r\n    [K in GetPayloadResultExtensionKeys<R>]: R[K] extends () => {\r\n        compute: (...args: any) => infer C;\r\n    } ? C : never;\r\n};\r\n\r\nexport declare function getPrismaClient(config: GetPrismaClientConfig): {\r\n    new (optionsArg?: PrismaClientOptions): {\r\n        _originalClient: any;\r\n        _runtimeDataModel: RuntimeDataModel;\r\n        _requestHandler: RequestHandler;\r\n        _connectionPromise?: Promise<any> | undefined;\r\n        _disconnectionPromise?: Promise<any> | undefined;\r\n        _engineConfig: EngineConfig;\r\n        _accelerateEngineConfig: AccelerateEngineConfig;\r\n        _clientVersion: string;\r\n        _errorFormat: ErrorFormat;\r\n        _tracingHelper: TracingHelper;\r\n        _previewFeatures: string[];\r\n        _activeProvider: string;\r\n        _globalOmit?: GlobalOmitOptions | undefined;\r\n        _extensions: MergedExtensionsList;\r\n        /**\r\n         * @remarks This is used internally by Policy, do not rename or remove\r\n         */\r\n        _engine: Engine;\r\n        /**\r\n         * A fully constructed/applied Client that references the parent\r\n         * PrismaClient. This is used for Client extensions only.\r\n         */\r\n        _appliedParent: any;\r\n        _createPrismaPromise: PrismaPromiseFactory;\r\n        $on<E extends ExtendedEventType>(eventType: E, callback: EventCallback<E>): any;\r\n        $connect(): Promise<void>;\r\n        /**\r\n         * Disconnect from the database\r\n         */\r\n        $disconnect(): Promise<void>;\r\n        /**\r\n         * Executes a raw query and always returns a number\r\n         */\r\n        $executeRawInternal(transaction: PrismaPromiseTransaction | undefined, clientMethod: string, args: RawQueryArgs, middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>): Promise<number>;\r\n        /**\r\n         * Executes a raw query provided through a safe tag function\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $executeRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Unsafe counterpart of `$executeRaw` that is susceptible to SQL injections\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $executeRawUnsafe(query: string, ...values: RawValue[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Executes a raw command only for MongoDB\r\n         *\r\n         * @param command\r\n         * @returns\r\n         */\r\n        $runCommandRaw(command: Record<string, JsInputValue>): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Executes a raw query and returns selected data\r\n         */\r\n        $queryRawInternal(transaction: PrismaPromiseTransaction | undefined, clientMethod: string, args: RawQueryArgs, middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>): Promise<any>;\r\n        /**\r\n         * Executes a raw query provided through a safe tag function\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $queryRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Counterpart to $queryRaw, that returns strongly typed results\r\n         * @param typedSql\r\n         */\r\n        $queryRawTyped(typedSql: UnknownTypedSql): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Unsafe counterpart of `$queryRaw` that is susceptible to SQL injections\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $queryRawUnsafe(query: string, ...values: RawValue[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Execute a batch of requests in a transaction\r\n         * @param requests\r\n         * @param options\r\n         */\r\n        _transactionWithArray({ promises, options, }: {\r\n            promises: Array<PrismaPromise_2<any>>;\r\n            options?: BatchTransactionOptions;\r\n        }): Promise<any>;\r\n        /**\r\n         * Perform a long-running transaction\r\n         * @param callback\r\n         * @param options\r\n         * @returns\r\n         */\r\n        _transactionWithCallback({ callback, options, }: {\r\n            callback: (client: Client) => Promise<unknown>;\r\n            options?: Options;\r\n        }): Promise<unknown>;\r\n        _createItxClient(transaction: PrismaPromiseInteractiveTransaction): Client;\r\n        /**\r\n         * Execute queries within a transaction\r\n         * @param input a callback or a query list\r\n         * @param options to set timeouts (callback)\r\n         * @returns\r\n         */\r\n        $transaction(input: any, options?: any): Promise<any>;\r\n        /**\r\n         * Runs the middlewares over params before executing a request\r\n         * @param internalParams\r\n         * @returns\r\n         */\r\n        _request(internalParams: InternalRequestParams): Promise<any>;\r\n        _executeRequest({ args, clientMethod, dataPath, callsite, action, model, argsMapper, transaction, unpacker, otelParentCtx, customDataProxyFetch, }: InternalRequestParams): Promise<any>;\r\n        $metrics: MetricsClient;\r\n        /**\r\n         * Shortcut for checking a preview flag\r\n         * @param feature preview flag\r\n         * @returns\r\n         */\r\n        _hasPreviewFlag(feature: string): boolean;\r\n        $applyPendingMigrations(): Promise<void>;\r\n        $extends: typeof $extends;\r\n        readonly [Symbol.toStringTag]: string;\r\n    };\r\n};\r\n\r\n/**\r\n * Config that is stored into the generated client. When the generated client is\r\n * loaded, this same config is passed to {@link getPrismaClient} which creates a\r\n * closure with that config around a non-instantiated [[PrismaClient]].\r\n */\r\nexport declare type GetPrismaClientConfig = {\r\n    runtimeDataModel: RuntimeDataModel;\r\n    generator?: GeneratorConfig;\r\n    relativeEnvPaths?: {\r\n        rootEnvPath?: string | null;\r\n        schemaEnvPath?: string | null;\r\n    };\r\n    relativePath: string;\r\n    dirname: string;\r\n    clientVersion: string;\r\n    engineVersion: string;\r\n    datasourceNames: string[];\r\n    activeProvider: ActiveConnectorType;\r\n    /**\r\n     * The contents of the schema encoded into a string\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineSchema: string;\r\n    /**\r\n     * A special env object just for the data proxy edge runtime.\r\n     * Allows bundlers to inject their own env variables (Vercel).\r\n     * Allows platforms to declare global variables as env (Workers).\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    injectableEdgeEnv?: () => LoadedEnv;\r\n    /**\r\n     * The contents of the datasource url saved in a string.\r\n     * This can either be an env var name or connection string.\r\n     * It is needed by the client to connect to the Data Proxy.\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineDatasources: {\r\n        [name in string]: {\r\n            url: EnvValue;\r\n        };\r\n    };\r\n    /**\r\n     * The string hash that was produced for a given schema\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineSchemaHash: string;\r\n    /**\r\n     * A marker to indicate that the client was not generated via `prisma\r\n     * generate` but was generated via `generate --postinstall` script instead.\r\n     * @remarks used to error for Vercel/Netlify for schema caching issues\r\n     */\r\n    postinstall?: boolean;\r\n    /**\r\n     * Information about the CI where the Prisma Client has been generated. The\r\n     * name of the CI environment is stored at generation time because CI\r\n     * information is not always available at runtime. Moreover, the edge client\r\n     * has no notion of environment variables, so this works around that.\r\n     * @remarks used to error for Vercel/Netlify for schema caching issues\r\n     */\r\n    ciName?: string;\r\n    /**\r\n     * Information about whether we have not found a schema.prisma file in the\r\n     * default location, and that we fell back to finding the schema.prisma file\r\n     * in the current working directory. This usually means it has been bundled.\r\n     */\r\n    isBundled?: boolean;\r\n    /**\r\n     * A boolean that is `false` when the client was generated with --no-engine. At\r\n     * runtime, this means the client will be bound to be using the Data Proxy.\r\n     */\r\n    copyEngine?: boolean;\r\n    /**\r\n     * Optional wasm loading configuration\r\n     */\r\n    engineWasm?: EngineWasmLoadingConfig;\r\n    compilerWasm?: CompilerWasmLoadingConfig;\r\n};\r\n\r\nexport declare type GetResult<Payload extends OperationPayload, Args, OperationName extends Operation = 'findUniqueOrThrow', GlobalOmitOptions = {}> = {\r\n    findUnique: GetFindResult<Payload, Args, GlobalOmitOptions> | null;\r\n    findUniqueOrThrow: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    findFirst: GetFindResult<Payload, Args, GlobalOmitOptions> | null;\r\n    findFirstOrThrow: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    findMany: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    create: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    createMany: GetBatchResult;\r\n    createManyAndReturn: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    update: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    updateMany: GetBatchResult;\r\n    updateManyAndReturn: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    upsert: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    delete: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    deleteMany: GetBatchResult;\r\n    aggregate: GetAggregateResult<Payload, Args>;\r\n    count: GetCountResult<Args>;\r\n    groupBy: GetGroupByResult<Payload, Args>;\r\n    $queryRaw: unknown;\r\n    $queryRawTyped: unknown;\r\n    $executeRaw: number;\r\n    $queryRawUnsafe: unknown;\r\n    $executeRawUnsafe: number;\r\n    $runCommandRaw: JsonObject;\r\n    findRaw: JsonObject;\r\n    aggregateRaw: JsonObject;\r\n}[OperationName];\r\n\r\nexport declare function getRuntime(): GetRuntimeOutput;\r\n\r\ndeclare type GetRuntimeOutput = {\r\n    id: RuntimeName;\r\n    prettyName: string;\r\n    isEdge: boolean;\r\n};\r\n\r\nexport declare type GetSelect<Base extends Record<any, any>, R extends InternalArgs['result'][string], KR extends keyof R = string extends keyof R ? never : keyof R> = {\r\n    [K in KR | keyof Base]?: K extends KR ? boolean : Base[K];\r\n};\r\n\r\ndeclare type GlobalOmitOptions = {\r\n    [modelName: string]: {\r\n        [fieldName: string]: boolean;\r\n    };\r\n};\r\n\r\ndeclare type HandleErrorParams = {\r\n    args: JsArgs;\r\n    error: any;\r\n    clientMethod: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    modelName?: string;\r\n    globalOmit?: GlobalOmitOptions;\r\n};\r\n\r\ndeclare type HrTime = [number, number];\r\n\r\n/**\r\n * Defines High-Resolution Time.\r\n *\r\n * The first number, HrTime[0], is UNIX Epoch time in seconds since 00:00:00 UTC on 1 January 1970.\r\n * The second number, HrTime[1], represents the partial second elapsed since Unix Epoch time represented by first number in nanoseconds.\r\n * For example, 2021-01-01T12:30:10.150Z in UNIX Epoch time in milliseconds is represented as 1609504210150.\r\n * The first number is calculated by converting and truncating the Epoch time in milliseconds to seconds:\r\n * HrTime[0] = Math.trunc(1609504210150 / 1000) = 1609504210.\r\n * The second number is calculated by converting the digits after the decimal point of the subtraction, (1609504210150 / 1000) - HrTime[0], to nanoseconds:\r\n * HrTime[1] = Number((1609504210.150 - HrTime[0]).toFixed(9)) * 1e9 = 150000000.\r\n * This is represented in HrTime format as [1609504210, 150000000].\r\n */\r\ndeclare type HrTime_2 = [number, number];\r\n\r\ndeclare type Index = ReadonlyDeep_2<{\r\n    model: string;\r\n    type: IndexType;\r\n    isDefinedOnField: boolean;\r\n    name?: string;\r\n    dbName?: string;\r\n    algorithm?: string;\r\n    clustered?: boolean;\r\n    fields: IndexField[];\r\n}>;\r\n\r\ndeclare type IndexField = ReadonlyDeep_2<{\r\n    name: string;\r\n    sortOrder?: SortOrder;\r\n    length?: number;\r\n    operatorClass?: string;\r\n}>;\r\n\r\ndeclare type IndexType = 'id' | 'normal' | 'unique' | 'fulltext';\r\n\r\ndeclare type InMemoryOps = {\r\n    pagination: Pagination | null;\r\n    distinct: string[] | null;\r\n    reverse: boolean;\r\n    linkingFields: string[] | null;\r\n    nested: Record<string, InMemoryOps>;\r\n};\r\n\r\n/**\r\n * Matches a JSON array.\r\n * Unlike \\`JsonArray\\`, readonly arrays are assignable to this type.\r\n */\r\nexport declare interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {\r\n}\r\n\r\n/**\r\n * Matches a JSON object.\r\n * Unlike \\`JsonObject\\`, this type allows undefined and read-only properties.\r\n */\r\nexport declare type InputJsonObject = {\r\n    readonly [Key in string]?: InputJsonValue | null;\r\n};\r\n\r\n/**\r\n * Matches any valid value that can be used as an input for operations like\r\n * create and update as the value of a JSON field. Unlike \\`JsonValue\\`, this\r\n * type allows read-only arrays and read-only object properties and disallows\r\n * \\`null\\` at the top level.\r\n *\r\n * \\`null\\` cannot be used as the value of a JSON field because its meaning\r\n * would be ambiguous. Use \\`Prisma.JsonNull\\` to store the JSON null value or\r\n * \\`Prisma.DbNull\\` to clear the JSON value and set the field to the database\r\n * NULL value instead.\r\n *\r\n * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values\r\n */\r\nexport declare type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | {\r\n    toJSON(): unknown;\r\n};\r\n\r\ndeclare type InputType = ReadonlyDeep_2<{\r\n    name: string;\r\n    constraints: {\r\n        maxNumFields: number | null;\r\n        minNumFields: number | null;\r\n        fields?: string[];\r\n    };\r\n    meta?: {\r\n        source?: string;\r\n        grouping?: string;\r\n    };\r\n    fields: SchemaArg[];\r\n}>;\r\n\r\ndeclare type InputTypeRef = TypeRef<'scalar' | 'inputObjectTypes' | 'enumTypes' | 'fieldRefTypes'>;\r\n\r\ndeclare type InteractiveTransactionInfo<Payload = unknown> = {\r\n    /**\r\n     * Transaction ID returned by the query engine.\r\n     */\r\n    id: string;\r\n    /**\r\n     * Arbitrary payload the meaning of which depends on the `Engine` implementation.\r\n     * For example, `DataProxyEngine` needs to associate different API endpoints with transactions.\r\n     * In `LibraryEngine` and `BinaryEngine` it is currently not used.\r\n     */\r\n    payload: Payload;\r\n};\r\n\r\ndeclare type InteractiveTransactionOptions<Payload> = Transaction_2.InteractiveTransactionInfo<Payload>;\r\n\r\nexport declare type InternalArgs<R = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, M = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, Q = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, C = {\r\n    [K in string]: unknown;\r\n}> = {\r\n    result: {\r\n        [K in keyof R]: {\r\n            [P in keyof R[K]]: () => R[K][P];\r\n        };\r\n    };\r\n    model: {\r\n        [K in keyof M]: {\r\n            [P in keyof M[K]]: () => M[K][P];\r\n        };\r\n    };\r\n    query: {\r\n        [K in keyof Q]: {\r\n            [P in keyof Q[K]]: () => Q[K][P];\r\n        };\r\n    };\r\n    client: {\r\n        [K in keyof C]: () => C[K];\r\n    };\r\n};\r\n\r\ndeclare type InternalRequestParams = {\r\n    /**\r\n     * The original client method being called.\r\n     * Even though the rootField / operation can be changed,\r\n     * this method stays as it is, as it's what the user's\r\n     * code looks like\r\n     */\r\n    clientMethod: string;\r\n    /**\r\n     * Name of js model that triggered the request. Might be used\r\n     * for warnings or error messages\r\n     */\r\n    jsModelName?: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    unpacker?: Unpacker;\r\n    otelParentCtx?: Context;\r\n    /** Used to \"desugar\" a user input into an \"expanded\" one */\r\n    argsMapper?: (args?: UserArgs_2) => UserArgs_2;\r\n    /** Used to convert args for middleware and back */\r\n    middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>;\r\n    /** Used for Accelerate client extension via Data Proxy */\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n} & Omit<QueryMiddlewareParams, 'runInTransaction'>;\r\n\r\ndeclare type IsolationLevel = 'READ UNCOMMITTED' | 'READ COMMITTED' | 'REPEATABLE READ' | 'SNAPSHOT' | 'SERIALIZABLE';\r\n\r\ndeclare type IsolationLevel_2 = 'ReadUncommitted' | 'ReadCommitted' | 'RepeatableRead' | 'Snapshot' | 'Serializable';\r\n\r\ndeclare function isSkip(value: unknown): value is Skip;\r\n\r\nexport declare function isTypedSql(value: unknown): value is UnknownTypedSql;\r\n\r\nexport declare type ITXClientDenyList = (typeof denylist)[number];\r\n\r\nexport declare const itxClientDenyList: readonly (string | symbol)[];\r\n\r\ndeclare interface Job {\r\n    resolve: (data: any) => void;\r\n    reject: (data: any) => void;\r\n    request: any;\r\n}\r\n\r\n/**\r\n * Create a SQL query for a list of values.\r\n */\r\nexport declare function join(values: readonly RawValue[], separator?: string, prefix?: string, suffix?: string): Sql;\r\n\r\ndeclare type JoinExpression = {\r\n    child: QueryPlanNode;\r\n    on: [left: string, right: string][];\r\n    parentField: string;\r\n    isRelationUnique: boolean;\r\n};\r\n\r\nexport declare type JsArgs = {\r\n    select?: Selection_2;\r\n    include?: Selection_2;\r\n    omit?: Omission;\r\n    [argName: string]: JsInputValue;\r\n};\r\n\r\nexport declare type JsInputValue = null | undefined | string | number | boolean | bigint | Uint8Array | Date | DecimalJsLike | ObjectEnumValue | RawParameters | JsonConvertible | FieldRef<string, unknown> | JsInputValue[] | Skip | {\r\n    [key: string]: JsInputValue;\r\n};\r\n\r\ndeclare type JsonArgumentValue = number | string | boolean | null | RawTaggedValue | JsonArgumentValue[] | {\r\n    [key: string]: JsonArgumentValue;\r\n};\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches a JSON array.\r\n */\r\nexport declare interface JsonArray extends Array<JsonValue> {\r\n}\r\n\r\nexport declare type JsonBatchQuery = {\r\n    batch: JsonQuery[];\r\n    transaction?: {\r\n        isolationLevel?: IsolationLevel_2;\r\n    };\r\n};\r\n\r\nexport declare interface JsonConvertible {\r\n    toJSON(): unknown;\r\n}\r\n\r\ndeclare type JsonFieldSelection = {\r\n    arguments?: Record<string, JsonArgumentValue> | RawTaggedValue;\r\n    selection: JsonSelectionSet;\r\n};\r\n\r\ndeclare class JsonNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches a JSON object.\r\n * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from.\r\n */\r\nexport declare type JsonObject = {\r\n    [Key in string]?: JsonValue;\r\n};\r\n\r\nexport declare type JsonQuery = {\r\n    modelName?: string;\r\n    action: JsonQueryAction;\r\n    query: JsonFieldSelection;\r\n};\r\n\r\ndeclare type JsonQueryAction = 'findUnique' | 'findUniqueOrThrow' | 'findFirst' | 'findFirstOrThrow' | 'findMany' | 'createOne' | 'createMany' | 'createManyAndReturn' | 'updateOne' | 'updateMany' | 'updateManyAndReturn' | 'deleteOne' | 'deleteMany' | 'upsertOne' | 'aggregate' | 'groupBy' | 'executeRaw' | 'queryRaw' | 'runCommandRaw' | 'findRaw' | 'aggregateRaw';\r\n\r\ndeclare type JsonSelectionSet = {\r\n    $scalars?: boolean;\r\n    $composites?: boolean;\r\n} & {\r\n    [fieldName: string]: boolean | JsonFieldSelection;\r\n};\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches any valid JSON value.\r\n */\r\nexport declare type JsonValue = string | number | boolean | JsonObject | JsonArray | null;\r\n\r\nexport declare type JsOutputValue = null | string | number | boolean | bigint | Uint8Array | Date | Decimal | JsOutputValue[] | {\r\n    [key: string]: JsOutputValue;\r\n};\r\n\r\nexport declare type JsPromise<T> = Promise<T> & {};\r\n\r\ndeclare type KnownErrorParams = {\r\n    code: string;\r\n    clientVersion: string;\r\n    meta?: Record<string, unknown>;\r\n    batchRequestIdx?: number;\r\n};\r\n\r\n/**\r\n * A pointer from the current {@link Span} to another span in the same trace or\r\n * in a different trace.\r\n * Few examples of Link usage.\r\n * 1. Batch Processing: A batch of elements may contain elements associated\r\n *    with one or more traces/spans. Since there can only be one parent\r\n *    SpanContext, Link is used to keep reference to SpanContext of all\r\n *    elements in the batch.\r\n * 2. Public Endpoint: A SpanContext in incoming client request on a public\r\n *    endpoint is untrusted from service provider perspective. In such case it\r\n *    is advisable to start a new trace with appropriate sampling decision.\r\n *    However, it is desirable to associate incoming SpanContext to new trace\r\n *    initiated on service provider side so two traces (from Client and from\r\n *    Service Provider) can be correlated.\r\n */\r\ndeclare interface Link {\r\n    /** The {@link SpanContext} of a linked span. */\r\n    context: SpanContext;\r\n    /** A set of {@link SpanAttributes} on the link. */\r\n    attributes?: SpanAttributes;\r\n    /** Count of attributes of the link that were dropped due to collection limits */\r\n    droppedAttributesCount?: number;\r\n}\r\n\r\ndeclare type LoadedEnv = {\r\n    message?: string;\r\n    parsed: {\r\n        [x: string]: string;\r\n    };\r\n} | undefined;\r\n\r\ndeclare type LocationInFile = {\r\n    fileName: string;\r\n    lineNumber: number | null;\r\n    columnNumber: number | null;\r\n};\r\n\r\ndeclare type LogDefinition = {\r\n    level: LogLevel;\r\n    emit: 'stdout' | 'event';\r\n};\r\n\r\n/**\r\n * Typings for the events we emit.\r\n *\r\n * @remarks\r\n * If this is updated, our edge runtime shim needs to be updated as well.\r\n */\r\ndeclare type LogEmitter = {\r\n    on<E extends EngineEventType>(event: E, listener: (event: EngineEvent<E>) => void): LogEmitter;\r\n    emit(event: QueryEventType, payload: QueryEvent): boolean;\r\n    emit(event: LogEventType, payload: LogEvent): boolean;\r\n};\r\n\r\ndeclare type LogEvent = {\r\n    timestamp: Date;\r\n    message: string;\r\n    target: string;\r\n};\r\n\r\ndeclare type LogEventType = 'info' | 'warn' | 'error';\r\n\r\ndeclare type LogLevel = 'info' | 'query' | 'warn' | 'error';\r\n\r\n/**\r\n * Generates more strict variant of an enum which, unlike regular enum,\r\n * throws on non-existing property access. This can be useful in following situations:\r\n * - we have an API, that accepts both `undefined` and `SomeEnumType` as an input\r\n * - enum values are generated dynamically from DMMF.\r\n *\r\n * In that case, if using normal enums and no compile-time typechecking, using non-existing property\r\n * will result in `undefined` value being used, which will be accepted. Using strict enum\r\n * in this case will help to have a runtime exception, telling you that you are probably doing something wrong.\r\n *\r\n * Note: if you need to check for existence of a value in the enum you can still use either\r\n * `in` operator or `hasOwnProperty` function.\r\n *\r\n * @param definition\r\n * @returns\r\n */\r\nexport declare function makeStrictEnum<T extends Record<PropertyKey, string | number>>(definition: T): T;\r\n\r\nexport declare function makeTypedQueryFactory(sql: string): (...values: any[]) => TypedSql<any[], unknown>;\r\n\r\ndeclare type MappedError = {\r\n    kind: 'GenericJs';\r\n    id: number;\r\n} | {\r\n    kind: 'UnsupportedNativeDataType';\r\n    type: string;\r\n} | {\r\n    kind: 'InvalidIsolationLevel';\r\n    level: string;\r\n} | {\r\n    kind: 'LengthMismatch';\r\n    column?: string;\r\n} | {\r\n    kind: 'UniqueConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'NullConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'ForeignKeyConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'DatabaseNotReachable';\r\n    host?: string;\r\n    port?: number;\r\n} | {\r\n    kind: 'DatabaseDoesNotExist';\r\n    db?: string;\r\n} | {\r\n    kind: 'DatabaseAlreadyExists';\r\n    db?: string;\r\n} | {\r\n    kind: 'DatabaseAccessDenied';\r\n    db?: string;\r\n} | {\r\n    kind: 'ConnectionClosed';\r\n} | {\r\n    kind: 'TlsConnectionError';\r\n    reason: string;\r\n} | {\r\n    kind: 'AuthenticationFailed';\r\n    user?: string;\r\n} | {\r\n    kind: 'TransactionWriteConflict';\r\n} | {\r\n    kind: 'TableDoesNotExist';\r\n    table?: string;\r\n} | {\r\n    kind: 'ColumnNotFound';\r\n    column?: string;\r\n} | {\r\n    kind: 'TooManyConnections';\r\n    cause: string;\r\n} | {\r\n    kind: 'ValueOutOfRange';\r\n    cause: string;\r\n} | {\r\n    kind: 'MissingFullTextSearchIndex';\r\n} | {\r\n    kind: 'SocketTimeout';\r\n} | {\r\n    kind: 'InconsistentColumnData';\r\n    cause: string;\r\n} | {\r\n    kind: 'TransactionAlreadyClosed';\r\n    cause: string;\r\n} | {\r\n    kind: 'postgres';\r\n    code: string;\r\n    severity: string;\r\n    message: string;\r\n    detail: string | undefined;\r\n    column: string | undefined;\r\n    hint: string | undefined;\r\n} | {\r\n    kind: 'mysql';\r\n    code: number;\r\n    message: string;\r\n    state: string;\r\n} | {\r\n    kind: 'sqlite';\r\n    /**\r\n     * Sqlite extended error code: https://www.sqlite.org/rescode.html\r\n     */\r\n    extendedCode: number;\r\n    message: string;\r\n} | {\r\n    kind: 'mssql';\r\n    code: number;\r\n    message: string;\r\n};\r\n\r\ndeclare type Mappings = ReadonlyDeep_2<{\r\n    modelOperations: ModelMapping[];\r\n    otherOperations: {\r\n        read: string[];\r\n        write: string[];\r\n    };\r\n}>;\r\n\r\n/**\r\n * Class that holds the list of all extensions, applied to particular instance,\r\n * as well as resolved versions of the components that need to apply on\r\n * different levels. Main idea of this class: avoid re-resolving as much of the\r\n * stuff as possible when new extensions are added while also delaying the\r\n * resolve until the point it is actually needed. For example, computed fields\r\n * of the model won't be resolved unless the model is actually queried. Neither\r\n * adding extensions with `client` component only cause other components to\r\n * recompute.\r\n */\r\ndeclare class MergedExtensionsList {\r\n    private head?;\r\n    private constructor();\r\n    static empty(): MergedExtensionsList;\r\n    static single(extension: ExtensionArgs): MergedExtensionsList;\r\n    isEmpty(): boolean;\r\n    append(extension: ExtensionArgs): MergedExtensionsList;\r\n    getAllComputedFields(dmmfModelName: string): ComputedFieldsMap | undefined;\r\n    getAllClientExtensions(): ClientArg | undefined;\r\n    getAllModelExtensions(dmmfModelName: string): ModelArg | undefined;\r\n    getAllQueryCallbacks(jsModelName: string, operation: string): any;\r\n    getAllBatchQueryCallbacks(): BatchQueryOptionsCb[];\r\n}\r\n\r\nexport declare type MergeExtArgs<TypeMap extends TypeMapDef, ExtArgs extends Record<any, any>, Args extends Record<any, any>> = ComputeDeep<ExtArgs & Args & AllModelsToStringIndex<TypeMap, Args, 'result'> & AllModelsToStringIndex<TypeMap, Args, 'model'>>;\r\n\r\nexport declare type Metric<T> = {\r\n    key: string;\r\n    value: T;\r\n    labels: Record<string, string>;\r\n    description: string;\r\n};\r\n\r\nexport declare type MetricHistogram = {\r\n    buckets: MetricHistogramBucket[];\r\n    sum: number;\r\n    count: number;\r\n};\r\n\r\nexport declare type MetricHistogramBucket = [maxValue: number, count: number];\r\n\r\nexport declare type Metrics = {\r\n    counters: Metric<number>[];\r\n    gauges: Metric<number>[];\r\n    histograms: Metric<MetricHistogram>[];\r\n};\r\n\r\nexport declare class MetricsClient {\r\n    private _client;\r\n    constructor(client: Client);\r\n    /**\r\n     * Returns all metrics gathered up to this point in prometheus format.\r\n     * Result of this call can be exposed directly to prometheus scraping endpoint\r\n     *\r\n     * @param options\r\n     * @returns\r\n     */\r\n    prometheus(options?: MetricsOptions): Promise<string>;\r\n    /**\r\n     * Returns all metrics gathered up to this point in prometheus format.\r\n     *\r\n     * @param options\r\n     * @returns\r\n     */\r\n    json(options?: MetricsOptions): Promise<Metrics>;\r\n}\r\n\r\ndeclare type MetricsOptions = {\r\n    /**\r\n     * Labels to add to every metrics in key-value format\r\n     */\r\n    globalLabels?: Record<string, string>;\r\n};\r\n\r\ndeclare type MetricsOptionsCommon = {\r\n    globalLabels?: Record<string, string>;\r\n};\r\n\r\ndeclare type MetricsOptionsJson = {\r\n    format: 'json';\r\n} & MetricsOptionsCommon;\r\n\r\ndeclare type MetricsOptionsPrometheus = {\r\n    format: 'prometheus';\r\n} & MetricsOptionsCommon;\r\n\r\ndeclare type MiddlewareArgsMapper<RequestArgs, MiddlewareArgs> = {\r\n    requestArgsToMiddlewareArgs(requestArgs: RequestArgs): MiddlewareArgs;\r\n    middlewareArgsToRequestArgs(middlewareArgs: MiddlewareArgs): RequestArgs;\r\n};\r\n\r\ndeclare type Model = ReadonlyDeep_2<{\r\n    name: string;\r\n    dbName: string | null;\r\n    schema: string | null;\r\n    fields: Field[];\r\n    uniqueFields: string[][];\r\n    uniqueIndexes: uniqueIndex[];\r\n    documentation?: string;\r\n    primaryKey: PrimaryKey | null;\r\n    isGenerated?: boolean;\r\n}>;\r\n\r\ndeclare enum ModelAction {\r\n    findUnique = \"findUnique\",\r\n    findUniqueOrThrow = \"findUniqueOrThrow\",\r\n    findFirst = \"findFirst\",\r\n    findFirstOrThrow = \"findFirstOrThrow\",\r\n    findMany = \"findMany\",\r\n    create = \"create\",\r\n    createMany = \"createMany\",\r\n    createManyAndReturn = \"createManyAndReturn\",\r\n    update = \"update\",\r\n    updateMany = \"updateMany\",\r\n    updateManyAndReturn = \"updateManyAndReturn\",\r\n    upsert = \"upsert\",\r\n    delete = \"delete\",\r\n    deleteMany = \"deleteMany\",\r\n    groupBy = \"groupBy\",\r\n    count = \"count\",// TODO: count does not actually exist in DMMF\r\n    aggregate = \"aggregate\",\r\n    findRaw = \"findRaw\",\r\n    aggregateRaw = \"aggregateRaw\"\r\n}\r\n\r\nexport declare type ModelArg = {\r\n    [MethodName in string]: unknown;\r\n};\r\n\r\nexport declare type ModelArgs = {\r\n    model: {\r\n        [ModelName in string]: ModelArg;\r\n    };\r\n};\r\n\r\nexport declare type ModelKey<TypeMap extends TypeMapDef, M extends PropertyKey> = M extends keyof TypeMap['model'] ? M : Capitalize<M & string>;\r\n\r\ndeclare type ModelMapping = ReadonlyDeep_2<{\r\n    model: string;\r\n    plural: string;\r\n    findUnique?: string | null;\r\n    findUniqueOrThrow?: string | null;\r\n    findFirst?: string | null;\r\n    findFirstOrThrow?: string | null;\r\n    findMany?: string | null;\r\n    create?: string | null;\r\n    createMany?: string | null;\r\n    createManyAndReturn?: string | null;\r\n    update?: string | null;\r\n    updateMany?: string | null;\r\n    updateManyAndReturn?: string | null;\r\n    upsert?: string | null;\r\n    delete?: string | null;\r\n    deleteMany?: string | null;\r\n    aggregate?: string | null;\r\n    groupBy?: string | null;\r\n    count?: string | null;\r\n    findRaw?: string | null;\r\n    aggregateRaw?: string | null;\r\n}>;\r\n\r\nexport declare type ModelQueryOptionsCb = (args: ModelQueryOptionsCbArgs) => Promise<any>;\r\n\r\nexport declare type ModelQueryOptionsCbArgs = {\r\n    model: string;\r\n    operation: string;\r\n    args: JsArgs;\r\n    query: (args: JsArgs) => Promise<unknown>;\r\n};\r\n\r\ndeclare type MultiBatchResponse = {\r\n    type: 'multi';\r\n    plans: QueryPlanNode[];\r\n};\r\n\r\nexport declare type NameArgs = {\r\n    name?: string;\r\n};\r\n\r\nexport declare type Narrow<A> = {\r\n    [K in keyof A]: A[K] extends Function ? A[K] : Narrow<A[K]>;\r\n} | (A extends Narrowable ? A : never);\r\n\r\nexport declare type Narrowable = string | number | bigint | boolean | [];\r\n\r\nexport declare type NeverToUnknown<T> = [T] extends [never] ? unknown : T;\r\n\r\ndeclare class NullTypesEnumValue extends ObjectEnumValue {\r\n    _getNamespace(): string;\r\n}\r\n\r\n/**\r\n * Base class for unique values of object-valued enums.\r\n */\r\nexport declare abstract class ObjectEnumValue {\r\n    constructor(arg?: symbol);\r\n    abstract _getNamespace(): string;\r\n    _getName(): string;\r\n    toString(): string;\r\n}\r\n\r\nexport declare const objectEnumValues: {\r\n    classes: {\r\n        DbNull: typeof DbNull;\r\n        JsonNull: typeof JsonNull;\r\n        AnyNull: typeof AnyNull;\r\n    };\r\n    instances: {\r\n        DbNull: DbNull;\r\n        JsonNull: JsonNull;\r\n        AnyNull: AnyNull;\r\n    };\r\n};\r\n\r\ndeclare const officialPrismaAdapters: readonly [\"@prisma/adapter-planetscale\", \"@prisma/adapter-neon\", \"@prisma/adapter-libsql\", \"@prisma/adapter-better-sqlite3\", \"@prisma/adapter-d1\", \"@prisma/adapter-pg\", \"@prisma/adapter-mssql\", \"@prisma/adapter-mariadb\"];\r\n\r\nexport declare type Omission = Record<string, boolean | Skip>;\r\n\r\ndeclare type Omit_2<T, K extends string | number | symbol> = {\r\n    [P in keyof T as P extends K ? never : P]: T[P];\r\n};\r\nexport { Omit_2 as Omit }\r\n\r\nexport declare type OmitValue<Omit, Key> = Key extends keyof Omit ? Omit[Key] : false;\r\n\r\nexport declare type Operation = 'findFirst' | 'findFirstOrThrow' | 'findUnique' | 'findUniqueOrThrow' | 'findMany' | 'create' | 'createMany' | 'createManyAndReturn' | 'update' | 'updateMany' | 'updateManyAndReturn' | 'upsert' | 'delete' | 'deleteMany' | 'aggregate' | 'count' | 'groupBy' | '$queryRaw' | '$executeRaw' | '$queryRawUnsafe' | '$executeRawUnsafe' | 'findRaw' | 'aggregateRaw' | '$runCommandRaw';\r\n\r\nexport declare type OperationPayload = {\r\n    name: string;\r\n    scalars: {\r\n        [ScalarName in string]: unknown;\r\n    };\r\n    objects: {\r\n        [ObjectName in string]: unknown;\r\n    };\r\n    composites: {\r\n        [CompositeName in string]: unknown;\r\n    };\r\n};\r\n\r\nexport declare type Optional<O, K extends keyof any = keyof O> = {\r\n    [P in K & keyof O]?: O[P];\r\n} & {\r\n    [P in Exclude<keyof O, K>]: O[P];\r\n};\r\n\r\nexport declare type OptionalFlat<T> = {\r\n    [K in keyof T]?: T[K];\r\n};\r\n\r\nexport declare type OptionalKeys<O> = {\r\n    [K in keyof O]-?: {} extends Pick_2<O, K> ? K : never;\r\n}[keyof O];\r\n\r\ndeclare type Options = {\r\n    /** Timeout for starting the transaction */\r\n    maxWait?: number;\r\n    /** Timeout for the transaction body */\r\n    timeout?: number;\r\n    /** Transaction isolation level */\r\n    isolationLevel?: IsolationLevel_2;\r\n};\r\n\r\ndeclare type Options_2 = {\r\n    clientVersion: string;\r\n};\r\n\r\nexport declare type Or<A extends 1 | 0, B extends 1 | 0> = {\r\n    0: {\r\n        0: 0;\r\n        1: 1;\r\n    };\r\n    1: {\r\n        0: 1;\r\n        1: 1;\r\n    };\r\n}[A][B];\r\n\r\ndeclare type OtherOperationMappings = ReadonlyDeep_2<{\r\n    read: string[];\r\n    write: string[];\r\n}>;\r\n\r\ndeclare type OutputType = ReadonlyDeep_2<{\r\n    name: string;\r\n    fields: SchemaField[];\r\n}>;\r\n\r\ndeclare type OutputTypeRef = TypeRef<'scalar' | 'outputObjectTypes' | 'enumTypes'>;\r\n\r\ndeclare type Pagination = {\r\n    cursor: Record<string, PrismaValue> | null;\r\n    take: number | null;\r\n    skip: number | null;\r\n};\r\n\r\nexport declare function Param<$Type, $Value extends string>(name: $Value): Param<$Type, $Value>;\r\n\r\nexport declare type Param<out $Type, $Value extends string> = {\r\n    readonly name: $Value;\r\n};\r\n\r\nexport declare type PatchFlat<O1, O2> = O1 & Omit_2<O2, keyof O1>;\r\n\r\nexport declare type Path<O, P, Default = never> = O extends unknown ? P extends [infer K, ...infer R] ? K extends keyof O ? Path<O[K], R> : Default : O : never;\r\n\r\nexport declare type Payload<T, F extends Operation = never> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            payload: any;\r\n        };\r\n    };\r\n} ? T[symbol]['types']['payload'] : any;\r\n\r\nexport declare type PayloadToResult<P, O extends Record_2<any, any> = RenameAndNestPayloadKeys<P>> = {\r\n    [K in keyof O]?: O[K][K] extends any[] ? PayloadToResult<O[K][K][number]>[] : O[K][K] extends object ? PayloadToResult<O[K][K]> : O[K][K];\r\n};\r\n\r\ndeclare type Pick_2<T, K extends string | number | symbol> = {\r\n    [P in keyof T as P extends K ? P : never]: T[P];\r\n};\r\nexport { Pick_2 as Pick }\r\n\r\ndeclare interface PlaceholderFormat {\r\n    prefix: string;\r\n    hasNumbering: boolean;\r\n}\r\n\r\ndeclare type PrimaryKey = ReadonlyDeep_2<{\r\n    name: string | null;\r\n    fields: string[];\r\n}>;\r\n\r\nexport declare class PrismaClientInitializationError extends Error {\r\n    clientVersion: string;\r\n    errorCode?: string;\r\n    retryable?: boolean;\r\n    constructor(message: string, clientVersion: string, errorCode?: string);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientKnownRequestError extends Error implements ErrorWithBatchIndex {\r\n    code: string;\r\n    meta?: Record<string, unknown>;\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n    constructor(message: string, { code, clientVersion, meta, batchRequestIdx }: KnownErrorParams);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare type PrismaClientOptions = {\r\n    /**\r\n     * Overwrites the primary datasource url from your schema.prisma file\r\n     */\r\n    datasourceUrl?: string;\r\n    /**\r\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale.\r\n     */\r\n    adapter?: SqlDriverAdapterFactory | null;\r\n    /**\r\n     * Overwrites the datasource url from your schema.prisma file\r\n     */\r\n    datasources?: Datasources;\r\n    /**\r\n     * @default \"colorless\"\r\n     */\r\n    errorFormat?: ErrorFormat;\r\n    /**\r\n     * The default values for Transaction options\r\n     * maxWait ?= 2000\r\n     * timeout ?= 5000\r\n     */\r\n    transactionOptions?: Transaction_2.Options;\r\n    /**\r\n     * @example\r\n     * \\`\\`\\`\r\n     * // Defaults to stdout\r\n     * log: ['query', 'info', 'warn']\r\n     *\r\n     * // Emit as events\r\n     * log: [\r\n     *  { emit: 'stdout', level: 'query' },\r\n     *  { emit: 'stdout', level: 'info' },\r\n     *  { emit: 'stdout', level: 'warn' }\r\n     * ]\r\n     * \\`\\`\\`\r\n     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).\r\n     */\r\n    log?: Array<LogLevel | LogDefinition>;\r\n    omit?: GlobalOmitOptions;\r\n    /**\r\n     * @internal\r\n     * You probably don't want to use this. \\`__internal\\` is used by internal tooling.\r\n     */\r\n    __internal?: {\r\n        debug?: boolean;\r\n        engine?: {\r\n            cwd?: string;\r\n            binaryPath?: string;\r\n            endpoint?: string;\r\n            allowTriggerPanic?: boolean;\r\n        };\r\n        /** This can be used for testing purposes */\r\n        configOverride?: (config: GetPrismaClientConfig) => GetPrismaClientConfig;\r\n    };\r\n};\r\n\r\nexport declare class PrismaClientRustPanicError extends Error {\r\n    clientVersion: string;\r\n    constructor(message: string, clientVersion: string);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientUnknownRequestError extends Error implements ErrorWithBatchIndex {\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n    constructor(message: string, { clientVersion, batchRequestIdx }: UnknownErrorParams);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientValidationError extends Error {\r\n    name: string;\r\n    clientVersion: string;\r\n    constructor(message: string, { clientVersion }: Options_2);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare function prismaGraphQLToJSError({ error, user_facing_error }: RequestError, clientVersion: string, activeProvider: string): PrismaClientKnownRequestError | PrismaClientUnknownRequestError;\r\n\r\ndeclare type PrismaOperationSpec<TArgs, TAction = string> = {\r\n    args: TArgs;\r\n    action: TAction;\r\n    model: string;\r\n};\r\n\r\nexport declare interface PrismaPromise<T> extends Promise<T> {\r\n    [Symbol.toStringTag]: 'PrismaPromise';\r\n}\r\n\r\n/**\r\n * Prisma's `Promise` that is backwards-compatible. All additions on top of the\r\n * original `Promise` are optional so that it can be backwards-compatible.\r\n * @see [[createPrismaPromise]]\r\n */\r\ndeclare interface PrismaPromise_2<TResult, TSpec extends PrismaOperationSpec<unknown> = any> extends Promise<TResult> {\r\n    get spec(): TSpec;\r\n    /**\r\n     * Extension of the original `.then` function\r\n     * @param onfulfilled same as regular promises\r\n     * @param onrejected same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    then<R1 = TResult, R2 = never>(onfulfilled?: (value: TResult) => R1 | PromiseLike<R1>, onrejected?: (error: unknown) => R2 | PromiseLike<R2>, transaction?: PrismaPromiseTransaction): Promise<R1 | R2>;\r\n    /**\r\n     * Extension of the original `.catch` function\r\n     * @param onrejected same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    catch<R = never>(onrejected?: ((reason: any) => R | PromiseLike<R>) | undefined | null, transaction?: PrismaPromiseTransaction): Promise<TResult | R>;\r\n    /**\r\n     * Extension of the original `.finally` function\r\n     * @param onfinally same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    finally(onfinally?: (() => void) | undefined | null, transaction?: PrismaPromiseTransaction): Promise<TResult>;\r\n    /**\r\n     * Called when executing a batch of regular tx\r\n     * @param transaction transaction options for batch tx\r\n     */\r\n    requestTransaction?(transaction: PrismaPromiseBatchTransaction): PromiseLike<unknown>;\r\n}\r\n\r\ndeclare type PrismaPromiseBatchTransaction = {\r\n    kind: 'batch';\r\n    id: number;\r\n    isolationLevel?: IsolationLevel_2;\r\n    index: number;\r\n    lock: PromiseLike<void>;\r\n};\r\n\r\ndeclare type PrismaPromiseCallback = (transaction?: PrismaPromiseTransaction) => Promise<unknown>;\r\n\r\n/**\r\n * Creates a [[PrismaPromise]]. It is Prisma's implementation of `Promise` which\r\n * is essentially a proxy for `Promise`. All the transaction-compatible client\r\n * methods return one, this allows for pre-preparing queries without executing\r\n * them until `.then` is called. It's the foundation of Prisma's query batching.\r\n * @param callback that will be wrapped within our promise implementation\r\n * @see [[PrismaPromise]]\r\n * @returns\r\n */\r\ndeclare type PrismaPromiseFactory = <T extends PrismaOperationSpec<unknown>>(callback: PrismaPromiseCallback, op?: T) => PrismaPromise_2<unknown>;\r\n\r\ndeclare type PrismaPromiseInteractiveTransaction<PayloadType = unknown> = {\r\n    kind: 'itx';\r\n    id: string;\r\n    payload: PayloadType;\r\n};\r\n\r\ndeclare type PrismaPromiseTransaction<PayloadType = unknown> = PrismaPromiseBatchTransaction | PrismaPromiseInteractiveTransaction<PayloadType>;\r\n\r\ndeclare type PrismaValue = string | boolean | number | PrismaValue[] | null | Record<string, unknown> | PrismaValuePlaceholder | PrismaValueGenerator;\r\n\r\ndeclare type PrismaValueGenerator = {\r\n    prisma__type: 'generatorCall';\r\n    prisma__value: {\r\n        name: string;\r\n        args: PrismaValue[];\r\n    };\r\n};\r\n\r\ndeclare type PrismaValuePlaceholder = {\r\n    prisma__type: 'param';\r\n    prisma__value: {\r\n        name: string;\r\n        type: string;\r\n    };\r\n};\r\n\r\nexport declare const PrivateResultType: unique symbol;\r\n\r\ndeclare type Provider = 'mysql' | 'postgres' | 'sqlite' | 'sqlserver';\r\n\r\ndeclare namespace Public {\r\n    export {\r\n        validator\r\n    }\r\n}\r\nexport { Public }\r\n\r\ndeclare namespace Public_2 {\r\n    export {\r\n        Args,\r\n        Result,\r\n        Payload,\r\n        PrismaPromise,\r\n        Operation,\r\n        Exact\r\n    }\r\n}\r\n\r\ndeclare type Query = ReadonlyDeep_2<{\r\n    name: string;\r\n    args: SchemaArg[];\r\n    output: QueryOutput;\r\n}>;\r\n\r\ndeclare interface Queryable<Query, Result> extends AdapterInfo {\r\n    /**\r\n     * Execute a query and return its result.\r\n     */\r\n    queryRaw(params: Query): Promise<Result>;\r\n    /**\r\n     * Execute a query and return the number of affected rows.\r\n     */\r\n    executeRaw(params: Query): Promise<number>;\r\n}\r\n\r\ndeclare type QueryCompiler = {\r\n    compile(request: string): {};\r\n    compileBatch(batchRequest: string): BatchResponse;\r\n    free(): void;\r\n};\r\n\r\ndeclare interface QueryCompilerConstructor {\r\n    new (options: QueryCompilerOptions): QueryCompiler;\r\n}\r\n\r\ndeclare type QueryCompilerOptions = {\r\n    datamodel: string;\r\n    provider: Provider;\r\n    connectionInfo: ConnectionInfo;\r\n};\r\n\r\ndeclare type QueryEngineBatchGraphQLRequest = {\r\n    batch: QueryEngineRequest[];\r\n    transaction?: boolean;\r\n    isolationLevel?: IsolationLevel_2;\r\n};\r\n\r\ndeclare type QueryEngineBatchRequest = QueryEngineBatchGraphQLRequest | JsonBatchQuery;\r\n\r\ndeclare type QueryEngineConfig = {\r\n    datamodel: string;\r\n    configDir: string;\r\n    logQueries: boolean;\r\n    ignoreEnvVarErrors: boolean;\r\n    datasourceOverrides: Record<string, string>;\r\n    env: Record<string, string | undefined>;\r\n    logLevel: QueryEngineLogLevel;\r\n    engineProtocol: QueryEngineProtocol;\r\n    enableTracing: boolean;\r\n};\r\n\r\ndeclare interface QueryEngineConstructor {\r\n    new (config: QueryEngineConfig, logger: (log: string) => void, adapter?: ErrorCapturingSqlDriverAdapter): QueryEngineInstance;\r\n}\r\n\r\ndeclare type QueryEngineInstance = {\r\n    connect(headers: string, requestId: string): Promise<void>;\r\n    disconnect(headers: string, requestId: string): Promise<void>;\r\n    /**\r\n     * Frees any resources allocated by the engine's WASM instance. This method is automatically created by WASM bindgen.\r\n     * Noop for other engines.\r\n     */\r\n    free?(): void;\r\n    /**\r\n     * @param requestStr JSON.stringified `QueryEngineRequest | QueryEngineBatchRequest`\r\n     * @param headersStr JSON.stringified `QueryEngineRequestHeaders`\r\n     */\r\n    query(requestStr: string, headersStr: string, transactionId: string | undefined, requestId: string): Promise<string>;\r\n    sdlSchema?(): Promise<string>;\r\n    startTransaction(options: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    commitTransaction(id: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    rollbackTransaction(id: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    metrics?(options: string): Promise<string>;\r\n    applyPendingMigrations?(): Promise<void>;\r\n    trace(requestId: string): Promise<string | null>;\r\n};\r\n\r\ndeclare type QueryEngineLogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\r\n\r\ndeclare type QueryEngineProtocol = 'graphql' | 'json';\r\n\r\ndeclare type QueryEngineRequest = {\r\n    query: string;\r\n    variables: Object;\r\n};\r\n\r\ndeclare type QueryEngineResultData<T> = {\r\n    data: T;\r\n};\r\n\r\ndeclare type QueryEvent = {\r\n    timestamp: Date;\r\n    query: string;\r\n    params: string;\r\n    duration: number;\r\n    target: string;\r\n};\r\n\r\ndeclare type QueryEventType = 'query';\r\n\r\ndeclare type QueryIntrospectionBuiltinType = 'int' | 'bigint' | 'float' | 'double' | 'string' | 'enum' | 'bytes' | 'bool' | 'char' | 'decimal' | 'json' | 'xml' | 'uuid' | 'datetime' | 'date' | 'time' | 'int-array' | 'bigint-array' | 'float-array' | 'double-array' | 'string-array' | 'char-array' | 'bytes-array' | 'bool-array' | 'decimal-array' | 'json-array' | 'xml-array' | 'uuid-array' | 'datetime-array' | 'date-array' | 'time-array' | 'null' | 'unknown';\r\n\r\ndeclare type QueryMiddlewareParams = {\r\n    /** The model this is executed on */\r\n    model?: string;\r\n    /** The action that is being handled */\r\n    action: Action;\r\n    /** TODO what is this */\r\n    dataPath: string[];\r\n    /** TODO what is this */\r\n    runInTransaction: boolean;\r\n    args?: UserArgs_2;\r\n};\r\n\r\nexport declare type QueryOptions = {\r\n    query: {\r\n        [ModelName in string]: {\r\n            [ModelAction in string]: ModelQueryOptionsCb;\r\n        } | QueryOptionsCb;\r\n    };\r\n};\r\n\r\nexport declare type QueryOptionsCb = (args: QueryOptionsCbArgs) => Promise<any>;\r\n\r\nexport declare type QueryOptionsCbArgs = {\r\n    model?: string;\r\n    operation: string;\r\n    args: JsArgs | RawQueryArgs;\r\n    query: (args: JsArgs | RawQueryArgs) => Promise<unknown>;\r\n};\r\n\r\ndeclare type QueryOutput = ReadonlyDeep_2<{\r\n    name: string;\r\n    isRequired: boolean;\r\n    isList: boolean;\r\n}>;\r\n\r\ndeclare type QueryPlanBinding = {\r\n    name: string;\r\n    expr: QueryPlanNode;\r\n};\r\n\r\ndeclare type QueryPlanDbQuery = {\r\n    type: 'rawSql';\r\n    sql: string;\r\n    args: PrismaValue[];\r\n    argTypes: ArgType[];\r\n} | {\r\n    type: 'templateSql';\r\n    fragments: Fragment[];\r\n    placeholderFormat: PlaceholderFormat;\r\n    args: PrismaValue[];\r\n    argTypes: DynamicArgType[];\r\n    chunkable: boolean;\r\n};\r\n\r\ndeclare type QueryPlanNode = {\r\n    type: 'value';\r\n    args: PrismaValue;\r\n} | {\r\n    type: 'seq';\r\n    args: QueryPlanNode[];\r\n} | {\r\n    type: 'get';\r\n    args: {\r\n        name: string;\r\n    };\r\n} | {\r\n    type: 'let';\r\n    args: {\r\n        bindings: QueryPlanBinding[];\r\n        expr: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'getFirstNonEmpty';\r\n    args: {\r\n        names: string[];\r\n    };\r\n} | {\r\n    type: 'query';\r\n    args: QueryPlanDbQuery;\r\n} | {\r\n    type: 'execute';\r\n    args: QueryPlanDbQuery;\r\n} | {\r\n    type: 'reverse';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'sum';\r\n    args: QueryPlanNode[];\r\n} | {\r\n    type: 'concat';\r\n    args: QueryPlanNode[];\r\n} | {\r\n    type: 'unique';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'required';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'join';\r\n    args: {\r\n        parent: QueryPlanNode;\r\n        children: JoinExpression[];\r\n    };\r\n} | {\r\n    type: 'mapField';\r\n    args: {\r\n        field: string;\r\n        records: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'transaction';\r\n    args: QueryPlanNode;\r\n} | {\r\n    type: 'dataMap';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        structure: ResultNode;\r\n        enums: Record<string, Record<string, string>>;\r\n    };\r\n} | {\r\n    type: 'validate';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        rules: DataRule[];\r\n    } & ValidationError;\r\n} | {\r\n    type: 'if';\r\n    args: {\r\n        value: QueryPlanNode;\r\n        rule: DataRule;\r\n        then: QueryPlanNode;\r\n        else: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'unit';\r\n} | {\r\n    type: 'diff';\r\n    args: {\r\n        from: QueryPlanNode;\r\n        to: QueryPlanNode;\r\n    };\r\n} | {\r\n    type: 'initializeRecord';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        fields: Record<string, FieldInitializer>;\r\n    };\r\n} | {\r\n    type: 'mapRecord';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        fields: Record<string, FieldOperation>;\r\n    };\r\n} | {\r\n    type: 'process';\r\n    args: {\r\n        expr: QueryPlanNode;\r\n        operations: InMemoryOps;\r\n    };\r\n};\r\n\r\n/**\r\n * Create raw SQL statement.\r\n */\r\nexport declare function raw(value: string): Sql;\r\n\r\nexport declare type RawParameters = {\r\n    __prismaRawParameters__: true;\r\n    values: string;\r\n};\r\n\r\nexport declare type RawQueryArgs = Sql | UnknownTypedSql | [query: string, ...values: RawValue[]];\r\n\r\ndeclare type RawResponse = {\r\n    columns: string[];\r\n    types: QueryIntrospectionBuiltinType[];\r\n    rows: unknown[][];\r\n};\r\n\r\ndeclare type RawTaggedValue = {\r\n    $type: 'Raw';\r\n    value: unknown;\r\n};\r\n\r\n/**\r\n * Supported value or SQL instance.\r\n */\r\nexport declare type RawValue = Value | Sql;\r\n\r\nexport declare type ReadonlyDeep<T> = {\r\n    readonly [K in keyof T]: ReadonlyDeep<T[K]>;\r\n};\r\n\r\ndeclare type ReadonlyDeep_2<O> = {\r\n    +readonly [K in keyof O]: ReadonlyDeep_2<O[K]>;\r\n};\r\n\r\ndeclare type Record_2<T extends string | number | symbol, U> = {\r\n    [P in T]: U;\r\n};\r\nexport { Record_2 as Record }\r\n\r\nexport declare type RenameAndNestPayloadKeys<P> = {\r\n    [K in keyof P as K extends 'scalars' | 'objects' | 'composites' ? keyof P[K] : never]: P[K];\r\n};\r\n\r\ndeclare type RequestBatchOptions<InteractiveTransactionPayload> = {\r\n    transaction?: TransactionOptions_2<InteractiveTransactionPayload>;\r\n    traceparent?: string;\r\n    numTry?: number;\r\n    containsWrite: boolean;\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare interface RequestError {\r\n    error: string;\r\n    user_facing_error: {\r\n        is_panic: boolean;\r\n        message: string;\r\n        meta?: Record<string, unknown>;\r\n        error_code?: string;\r\n        batch_request_idx?: number;\r\n    };\r\n}\r\n\r\ndeclare class RequestHandler {\r\n    client: Client;\r\n    dataloader: DataLoader<RequestParams>;\r\n    private logEmitter?;\r\n    constructor(client: Client, logEmitter?: LogEmitter);\r\n    request(params: RequestParams): Promise<any>;\r\n    mapQueryEngineResult({ dataPath, unpacker }: RequestParams, response: QueryEngineResultData<any>): any;\r\n    /**\r\n     * Handles the error and logs it, logging the error is done synchronously waiting for the event\r\n     * handlers to finish.\r\n     */\r\n    handleAndLogRequestError(params: HandleErrorParams): never;\r\n    handleRequestError({ error, clientMethod, callsite, transaction, args, modelName, globalOmit, }: HandleErrorParams): never;\r\n    sanitizeMessage(message: any): any;\r\n    unpack(data: unknown, dataPath: string[], unpacker?: Unpacker): any;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare type RequestOptions<InteractiveTransactionPayload> = {\r\n    traceparent?: string;\r\n    numTry?: number;\r\n    interactiveTransaction?: InteractiveTransactionOptions<InteractiveTransactionPayload>;\r\n    isWrite: boolean;\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare type RequestParams = {\r\n    modelName?: string;\r\n    action: Action;\r\n    protocolQuery: JsonQuery;\r\n    dataPath: string[];\r\n    clientMethod: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    extensions: MergedExtensionsList;\r\n    args?: any;\r\n    headers?: Record<string, string>;\r\n    unpacker?: Unpacker;\r\n    otelParentCtx?: Context;\r\n    otelChildCtx?: Context;\r\n    globalOmit?: GlobalOmitOptions;\r\n    customDataProxyFetch?: AccelerateExtensionFetchDecorator;\r\n};\r\n\r\ndeclare type RequiredExtensionArgs = NameArgs & ResultArgs & ModelArgs & ClientArgs & QueryOptions;\r\nexport { RequiredExtensionArgs }\r\nexport { RequiredExtensionArgs as UserArgs }\r\n\r\nexport declare type RequiredKeys<O> = {\r\n    [K in keyof O]-?: {} extends Pick_2<O, K> ? never : K;\r\n}[keyof O];\r\n\r\ndeclare function resolveDatasourceUrl({ inlineDatasources, overrideDatasources, env, clientVersion, }: {\r\n    inlineDatasources: GetPrismaClientConfig['inlineDatasources'];\r\n    overrideDatasources: Datasources;\r\n    env: Record<string, string | undefined>;\r\n    clientVersion: string;\r\n}): string;\r\n\r\nexport declare type Result<T, A, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            payload: any;\r\n        };\r\n    };\r\n} ? GetResult<T[symbol]['types']['payload'], A, F> : GetResult<{\r\n    composites: {};\r\n    objects: {};\r\n    scalars: {};\r\n    name: '';\r\n}, {}, F>;\r\n\r\nexport declare type Result_2<T, A, F extends Operation> = Result<T, A, F>;\r\n\r\ndeclare namespace Result_3 {\r\n    export {\r\n        Count,\r\n        GetFindResult,\r\n        SelectablePayloadFields,\r\n        SelectField,\r\n        DefaultSelection,\r\n        UnwrapPayload,\r\n        ApplyOmit,\r\n        OmitValue,\r\n        GetCountResult,\r\n        Aggregate,\r\n        GetAggregateResult,\r\n        GetBatchResult,\r\n        GetGroupByResult,\r\n        GetResult,\r\n        ExtractGlobalOmit\r\n    }\r\n}\r\n\r\ndeclare type Result_4<T> = {\r\n    map<U>(fn: (value: T) => U): Result_4<U>;\r\n    flatMap<U>(fn: (value: T) => Result_4<U>): Result_4<U>;\r\n} & ({\r\n    readonly ok: true;\r\n    readonly value: T;\r\n} | {\r\n    readonly ok: false;\r\n    readonly error: Error_2;\r\n});\r\n\r\nexport declare type ResultArg = {\r\n    [FieldName in string]: ResultFieldDefinition;\r\n};\r\n\r\nexport declare type ResultArgs = {\r\n    result: {\r\n        [ModelName in string]: ResultArg;\r\n    };\r\n};\r\n\r\nexport declare type ResultArgsFieldCompute = (model: any) => unknown;\r\n\r\nexport declare type ResultFieldDefinition = {\r\n    needs?: {\r\n        [FieldName in string]: boolean;\r\n    };\r\n    compute: ResultArgsFieldCompute;\r\n};\r\n\r\ndeclare type ResultNode = {\r\n    type: 'affectedRows';\r\n} | {\r\n    type: 'object';\r\n    fields: Record<string, ResultNode>;\r\n    serializedName: string | null;\r\n    skipNulls: boolean;\r\n} | {\r\n    type: 'field';\r\n    dbName: string;\r\n    fieldType: FieldType;\r\n};\r\n\r\nexport declare type Return<T> = T extends (...args: any[]) => infer R ? R : T;\r\n\r\nexport declare type RuntimeDataModel = {\r\n    readonly models: Record<string, RuntimeModel>;\r\n    readonly enums: Record<string, RuntimeEnum>;\r\n    readonly types: Record<string, RuntimeModel>;\r\n};\r\n\r\ndeclare type RuntimeEnum = Omit<DMMF_2.DatamodelEnum, 'name'>;\r\n\r\ndeclare type RuntimeModel = Omit<DMMF_2.Model, 'name'>;\r\n\r\ndeclare type RuntimeName = 'workerd' | 'deno' | 'netlify' | 'node' | 'bun' | 'edge-light' | '';\r\n\r\ndeclare type Schema = ReadonlyDeep_2<{\r\n    rootQueryType?: string;\r\n    rootMutationType?: string;\r\n    inputObjectTypes: {\r\n        model?: InputType[];\r\n        prisma?: InputType[];\r\n    };\r\n    outputObjectTypes: {\r\n        model: OutputType[];\r\n        prisma: OutputType[];\r\n    };\r\n    enumTypes: {\r\n        model?: SchemaEnum[];\r\n        prisma: SchemaEnum[];\r\n    };\r\n    fieldRefTypes: {\r\n        prisma?: FieldRefType[];\r\n    };\r\n}>;\r\n\r\ndeclare type SchemaArg = ReadonlyDeep_2<{\r\n    name: string;\r\n    comment?: string;\r\n    isNullable: boolean;\r\n    isRequired: boolean;\r\n    inputTypes: InputTypeRef[];\r\n    requiresOtherFields?: string[];\r\n    deprecation?: Deprecation;\r\n}>;\r\n\r\ndeclare type SchemaEnum = ReadonlyDeep_2<{\r\n    name: string;\r\n    values: string[];\r\n}>;\r\n\r\ndeclare type SchemaField = ReadonlyDeep_2<{\r\n    name: string;\r\n    isNullable?: boolean;\r\n    outputType: OutputTypeRef;\r\n    args: SchemaArg[];\r\n    deprecation?: Deprecation;\r\n    documentation?: string;\r\n}>;\r\n\r\nexport declare type Select<T, U> = T extends U ? T : never;\r\n\r\nexport declare type SelectablePayloadFields<K extends PropertyKey, O> = {\r\n    objects: {\r\n        [k in K]: O;\r\n    };\r\n} | {\r\n    composites: {\r\n        [k in K]: O;\r\n    };\r\n};\r\n\r\nexport declare type SelectField<P extends SelectablePayloadFields<any, any>, K extends PropertyKey> = P extends {\r\n    objects: Record<K, any>;\r\n} ? P['objects'][K] : P extends {\r\n    composites: Record<K, any>;\r\n} ? P['composites'][K] : never;\r\n\r\ndeclare type Selection_2 = Record<string, boolean | Skip | JsArgs>;\r\nexport { Selection_2 as Selection }\r\n\r\nexport declare function serializeJsonQuery({ modelName, action, args, runtimeDataModel, extensions, callsite, clientMethod, errorFormat, clientVersion, previewFeatures, globalOmit, }: SerializeParams): JsonQuery;\r\n\r\ndeclare type SerializeParams = {\r\n    runtimeDataModel: RuntimeDataModel;\r\n    modelName?: string;\r\n    action: Action;\r\n    args?: JsArgs;\r\n    extensions?: MergedExtensionsList;\r\n    callsite?: CallSite;\r\n    clientMethod: string;\r\n    clientVersion: string;\r\n    errorFormat: ErrorFormat;\r\n    previewFeatures: string[];\r\n    globalOmit?: GlobalOmitOptions;\r\n};\r\n\r\ndeclare class Skip {\r\n    constructor(param?: symbol);\r\n    ifUndefined<T>(value: T | undefined): T | Skip;\r\n}\r\n\r\nexport declare const skip: Skip;\r\n\r\ndeclare type SortOrder = 'asc' | 'desc';\r\n\r\n/**\r\n * An interface that represents a span. A span represents a single operation\r\n * within a trace. Examples of span might include remote procedure calls or a\r\n * in-process function calls to sub-components. A Trace has a single, top-level\r\n * \"root\" Span that in turn may have zero or more child Spans, which in turn\r\n * may have children.\r\n *\r\n * Spans are created by the {@link Tracer.startSpan} method.\r\n */\r\ndeclare interface Span {\r\n    /**\r\n     * Returns the {@link SpanContext} object associated with this Span.\r\n     *\r\n     * Get an immutable, serializable identifier for this span that can be used\r\n     * to create new child spans. Returned SpanContext is usable even after the\r\n     * span ends.\r\n     *\r\n     * @returns the SpanContext object associated with this Span.\r\n     */\r\n    spanContext(): SpanContext;\r\n    /**\r\n     * Sets an attribute to the span.\r\n     *\r\n     * Sets a single Attribute with the key and value passed as arguments.\r\n     *\r\n     * @param key the key for this attribute.\r\n     * @param value the value for this attribute. Setting a value null or\r\n     *              undefined is invalid and will result in undefined behavior.\r\n     */\r\n    setAttribute(key: string, value: SpanAttributeValue): this;\r\n    /**\r\n     * Sets attributes to the span.\r\n     *\r\n     * @param attributes the attributes that will be added.\r\n     *                   null or undefined attribute values\r\n     *                   are invalid and will result in undefined behavior.\r\n     */\r\n    setAttributes(attributes: SpanAttributes): this;\r\n    /**\r\n     * Adds an event to the Span.\r\n     *\r\n     * @param name the name of the event.\r\n     * @param [attributesOrStartTime] the attributes that will be added; these are\r\n     *     associated with this event. Can be also a start time\r\n     *     if type is {@type TimeInput} and 3rd param is undefined\r\n     * @param [startTime] start time of the event.\r\n     */\r\n    addEvent(name: string, attributesOrStartTime?: SpanAttributes | TimeInput, startTime?: TimeInput): this;\r\n    /**\r\n     * Adds a single link to the span.\r\n     *\r\n     * Links added after the creation will not affect the sampling decision.\r\n     * It is preferred span links be added at span creation.\r\n     *\r\n     * @param link the link to add.\r\n     */\r\n    addLink(link: Link): this;\r\n    /**\r\n     * Adds multiple links to the span.\r\n     *\r\n     * Links added after the creation will not affect the sampling decision.\r\n     * It is preferred span links be added at span creation.\r\n     *\r\n     * @param links the links to add.\r\n     */\r\n    addLinks(links: Link[]): this;\r\n    /**\r\n     * Sets a status to the span. If used, this will override the default Span\r\n     * status. Default is {@link SpanStatusCode.UNSET}. SetStatus overrides the value\r\n     * of previous calls to SetStatus on the Span.\r\n     *\r\n     * @param status the SpanStatus to set.\r\n     */\r\n    setStatus(status: SpanStatus): this;\r\n    /**\r\n     * Updates the Span name.\r\n     *\r\n     * This will override the name provided via {@link Tracer.startSpan}.\r\n     *\r\n     * Upon this update, any sampling behavior based on Span name will depend on\r\n     * the implementation.\r\n     *\r\n     * @param name the Span name.\r\n     */\r\n    updateName(name: string): this;\r\n    /**\r\n     * Marks the end of Span execution.\r\n     *\r\n     * Call to End of a Span MUST not have any effects on child spans. Those may\r\n     * still be running and can be ended later.\r\n     *\r\n     * Do not return `this`. The Span generally should not be used after it\r\n     * is ended so chaining is not desired in this context.\r\n     *\r\n     * @param [endTime] the time to set as Span's end time. If not provided,\r\n     *     use the current time as the span's end time.\r\n     */\r\n    end(endTime?: TimeInput): void;\r\n    /**\r\n     * Returns the flag whether this span will be recorded.\r\n     *\r\n     * @returns true if this Span is active and recording information like events\r\n     *     with the `AddEvent` operation and attributes using `setAttributes`.\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Sets exception as a span event\r\n     * @param exception the exception the only accepted values are string or Error\r\n     * @param [time] the time to set as Span's event time. If not provided,\r\n     *     use the current time.\r\n     */\r\n    recordException(exception: Exception, time?: TimeInput): void;\r\n}\r\n\r\n/**\r\n * @deprecated please use {@link Attributes}\r\n */\r\ndeclare type SpanAttributes = Attributes;\r\n\r\n/**\r\n * @deprecated please use {@link AttributeValue}\r\n */\r\ndeclare type SpanAttributeValue = AttributeValue;\r\n\r\ndeclare type SpanCallback<R> = (span?: Span, context?: Context) => R;\r\n\r\n/**\r\n * A SpanContext represents the portion of a {@link Span} which must be\r\n * serialized and propagated along side of a {@link Baggage}.\r\n */\r\ndeclare interface SpanContext {\r\n    /**\r\n     * The ID of the trace that this span belongs to. It is worldwide unique\r\n     * with practically sufficient probability by being made as 16 randomly\r\n     * generated bytes, encoded as a 32 lowercase hex characters corresponding to\r\n     * 128 bits.\r\n     */\r\n    traceId: string;\r\n    /**\r\n     * The ID of the Span. It is globally unique with practically sufficient\r\n     * probability by being made as 8 randomly generated bytes, encoded as a 16\r\n     * lowercase hex characters corresponding to 64 bits.\r\n     */\r\n    spanId: string;\r\n    /**\r\n     * Only true if the SpanContext was propagated from a remote parent.\r\n     */\r\n    isRemote?: boolean;\r\n    /**\r\n     * Trace flags to propagate.\r\n     *\r\n     * It is represented as 1 byte (bitmap). Bit to represent whether trace is\r\n     * sampled or not. When set, the least significant bit documents that the\r\n     * caller may have recorded trace data. A caller who does not record trace\r\n     * data out-of-band leaves this flag unset.\r\n     *\r\n     * see {@link TraceFlags} for valid flag values.\r\n     */\r\n    traceFlags: number;\r\n    /**\r\n     * Tracing-system-specific info to propagate.\r\n     *\r\n     * The tracestate field value is a `list` as defined below. The `list` is a\r\n     * series of `list-members` separated by commas `,`, and a list-member is a\r\n     * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\r\n     * surrounding `list-members` are ignored. There can be a maximum of 32\r\n     * `list-members` in a `list`.\r\n     * More Info: https://www.w3.org/TR/trace-context/#tracestate-field\r\n     *\r\n     * Examples:\r\n     *     Single tracing system (generic format):\r\n     *         tracestate: rojo=00f067aa0ba902b7\r\n     *     Multiple tracing systems (with different formatting):\r\n     *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE\r\n     */\r\n    traceState?: TraceState;\r\n}\r\n\r\ndeclare enum SpanKind {\r\n    /** Default value. Indicates that the span is used internally. */\r\n    INTERNAL = 0,\r\n    /**\r\n     * Indicates that the span covers server-side handling of an RPC or other\r\n     * remote request.\r\n     */\r\n    SERVER = 1,\r\n    /**\r\n     * Indicates that the span covers the client-side wrapper around an RPC or\r\n     * other remote request.\r\n     */\r\n    CLIENT = 2,\r\n    /**\r\n     * Indicates that the span describes producer sending a message to a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    PRODUCER = 3,\r\n    /**\r\n     * Indicates that the span describes consumer receiving a message from a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    CONSUMER = 4\r\n}\r\n\r\n/**\r\n * Options needed for span creation\r\n */\r\ndeclare interface SpanOptions {\r\n    /**\r\n     * The SpanKind of a span\r\n     * @default {@link SpanKind.INTERNAL}\r\n     */\r\n    kind?: SpanKind;\r\n    /** A span's attributes */\r\n    attributes?: SpanAttributes;\r\n    /** {@link Link}s span to other spans */\r\n    links?: Link[];\r\n    /** A manually specified start time for the created `Span` object. */\r\n    startTime?: TimeInput;\r\n    /** The new span should be a root span. (Ignore parent from context). */\r\n    root?: boolean;\r\n}\r\n\r\ndeclare interface SpanStatus {\r\n    /** The status code of this message. */\r\n    code: SpanStatusCode;\r\n    /** A developer-facing error message. */\r\n    message?: string;\r\n}\r\n\r\n/**\r\n * An enumeration of status codes.\r\n */\r\ndeclare enum SpanStatusCode {\r\n    /**\r\n     * The default status.\r\n     */\r\n    UNSET = 0,\r\n    /**\r\n     * The operation has been validated by an Application developer or\r\n     * Operator to have completed successfully.\r\n     */\r\n    OK = 1,\r\n    /**\r\n     * The operation contains an error.\r\n     */\r\n    ERROR = 2\r\n}\r\n\r\n/**\r\n * A SQL instance can be nested within each other to build SQL strings.\r\n */\r\nexport declare class Sql {\r\n    readonly values: Value[];\r\n    readonly strings: string[];\r\n    constructor(rawStrings: readonly string[], rawValues: readonly RawValue[]);\r\n    get sql(): string;\r\n    get statement(): string;\r\n    get text(): string;\r\n    inspect(): {\r\n        sql: string;\r\n        statement: string;\r\n        text: string;\r\n        values: unknown[];\r\n    };\r\n}\r\n\r\ndeclare interface SqlDriverAdapter extends SqlQueryable {\r\n    /**\r\n     * Execute multiple SQL statements separated by semicolon.\r\n     */\r\n    executeScript(script: string): Promise<void>;\r\n    /**\r\n     * Start new transaction.\r\n     */\r\n    startTransaction(isolationLevel?: IsolationLevel): Promise<Transaction>;\r\n    /**\r\n     * Optional method that returns extra connection info\r\n     */\r\n    getConnectionInfo?(): ConnectionInfo;\r\n    /**\r\n     * Dispose of the connection and release any resources.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport declare interface SqlDriverAdapterFactory extends DriverAdapterFactory<SqlQuery, SqlResultSet> {\r\n    connect(): Promise<SqlDriverAdapter>;\r\n}\r\n\r\ndeclare type SqlQuery = {\r\n    sql: string;\r\n    args: Array<unknown>;\r\n    argTypes: Array<ArgType>;\r\n};\r\n\r\ndeclare interface SqlQueryable extends Queryable<SqlQuery, SqlResultSet> {\r\n}\r\n\r\ndeclare interface SqlResultSet {\r\n    /**\r\n     * List of column types appearing in a database query, in the same order as `columnNames`.\r\n     * They are used within the Query Engine to convert values from JS to Quaint values.\r\n     */\r\n    columnTypes: Array<ColumnType>;\r\n    /**\r\n     * List of column names appearing in a database query, in the same order as `columnTypes`.\r\n     */\r\n    columnNames: Array<string>;\r\n    /**\r\n     * List of rows retrieved from a database query.\r\n     * Each row is a list of values, whose length matches `columnNames` and `columnTypes`.\r\n     */\r\n    rows: Array<Array<unknown>>;\r\n    /**\r\n     * The last ID of an `INSERT` statement, if any.\r\n     * This is required for `AUTO_INCREMENT` columns in databases based on MySQL and SQLite.\r\n     */\r\n    lastInsertId?: string;\r\n}\r\n\r\n/**\r\n * Create a SQL object from a template string.\r\n */\r\nexport declare function sqltag(strings: readonly string[], ...values: readonly RawValue[]): Sql;\r\n\r\n/**\r\n * Defines TimeInput.\r\n *\r\n * hrtime, epoch milliseconds, performance.now() or Date\r\n */\r\ndeclare type TimeInput = HrTime_2 | number | Date;\r\n\r\nexport declare type ToTuple<T> = T extends any[] ? T : [T];\r\n\r\ndeclare interface TraceState {\r\n    /**\r\n     * Create a new TraceState which inherits from this TraceState and has the\r\n     * given key set.\r\n     * The new entry will always be added in the front of the list of states.\r\n     *\r\n     * @param key key of the TraceState entry.\r\n     * @param value value of the TraceState entry.\r\n     */\r\n    set(key: string, value: string): TraceState;\r\n    /**\r\n     * Return a new TraceState which inherits from this TraceState but does not\r\n     * contain the given key.\r\n     *\r\n     * @param key the key for the TraceState entry to be removed.\r\n     */\r\n    unset(key: string): TraceState;\r\n    /**\r\n     * Returns the value to which the specified key is mapped, or `undefined` if\r\n     * this map contains no mapping for the key.\r\n     *\r\n     * @param key with which the specified value is to be associated.\r\n     * @returns the value to which the specified key is mapped, or `undefined` if\r\n     *     this map contains no mapping for the key.\r\n     */\r\n    get(key: string): string | undefined;\r\n    /**\r\n     * Serializes the TraceState to a `list` as defined below. The `list` is a\r\n     * series of `list-members` separated by commas `,`, and a list-member is a\r\n     * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\r\n     * surrounding `list-members` are ignored. There can be a maximum of 32\r\n     * `list-members` in a `list`.\r\n     *\r\n     * @returns the serialized string.\r\n     */\r\n    serialize(): string;\r\n}\r\n\r\ndeclare interface TracingHelper {\r\n    isEnabled(): boolean;\r\n    getTraceParent(context?: Context): string;\r\n    dispatchEngineSpans(spans: EngineSpan[]): void;\r\n    getActiveContext(): Context | undefined;\r\n    runInChildSpan<R>(nameOrOptions: string | ExtendedSpanOptions, callback: SpanCallback<R>): R;\r\n}\r\n\r\ndeclare interface Transaction extends AdapterInfo, SqlQueryable {\r\n    /**\r\n     * Transaction options.\r\n     */\r\n    readonly options: TransactionOptions;\r\n    /**\r\n     * Commit the transaction.\r\n     */\r\n    commit(): Promise<void>;\r\n    /**\r\n     * Roll back the transaction.\r\n     */\r\n    rollback(): Promise<void>;\r\n}\r\n\r\ndeclare namespace Transaction_2 {\r\n    export {\r\n        Options,\r\n        IsolationLevel_2 as IsolationLevel,\r\n        InteractiveTransactionInfo,\r\n        TransactionHeaders\r\n    }\r\n}\r\n\r\ndeclare type TransactionHeaders = {\r\n    traceparent?: string;\r\n};\r\n\r\ndeclare type TransactionOptions = {\r\n    usePhantomQuery: boolean;\r\n};\r\n\r\ndeclare type TransactionOptions_2<InteractiveTransactionPayload> = {\r\n    kind: 'itx';\r\n    options: InteractiveTransactionOptions<InteractiveTransactionPayload>;\r\n} | {\r\n    kind: 'batch';\r\n    options: BatchTransactionOptions;\r\n};\r\n\r\nexport declare class TypedSql<Values extends readonly unknown[], Result> {\r\n    [PrivateResultType]: Result;\r\n    constructor(sql: string, values: Values);\r\n    get sql(): string;\r\n    get values(): Values;\r\n}\r\n\r\nexport declare type TypeMapCbDef = Fn<{\r\n    extArgs: InternalArgs;\r\n}, TypeMapDef>;\r\n\r\n/** Shared */\r\nexport declare type TypeMapDef = Record<any, any>;\r\n\r\ndeclare type TypeRef<AllowedLocations extends FieldLocation> = {\r\n    isList: boolean;\r\n    type: string;\r\n    location: AllowedLocations;\r\n    namespace?: FieldNamespace;\r\n};\r\n\r\ndeclare namespace Types {\r\n    export {\r\n        Result_3 as Result,\r\n        Extensions_2 as Extensions,\r\n        Utils,\r\n        Public_2 as Public,\r\n        isSkip,\r\n        Skip,\r\n        skip,\r\n        UnknownTypedSql,\r\n        OperationPayload as Payload\r\n    }\r\n}\r\nexport { Types }\r\n\r\ndeclare type uniqueIndex = ReadonlyDeep_2<{\r\n    name: string;\r\n    fields: string[];\r\n}>;\r\n\r\ndeclare type UnknownErrorParams = {\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n};\r\n\r\nexport declare type UnknownTypedSql = TypedSql<unknown[], unknown>;\r\n\r\ndeclare type Unpacker = (data: any) => any;\r\n\r\nexport declare type UnwrapPayload<P> = {} extends P ? unknown : {\r\n    [K in keyof P]: P[K] extends {\r\n        scalars: infer S;\r\n        composites: infer C;\r\n    }[] ? Array<S & UnwrapPayload<C>> : P[K] extends {\r\n        scalars: infer S;\r\n        composites: infer C;\r\n    } | null ? S & UnwrapPayload<C> | Select<P[K], null> : never;\r\n};\r\n\r\nexport declare type UnwrapPromise<P> = P extends Promise<infer R> ? R : P;\r\n\r\nexport declare type UnwrapTuple<Tuple extends readonly unknown[]> = {\r\n    [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>;\r\n};\r\n\r\n/**\r\n * Input that flows from the user into the Client.\r\n */\r\ndeclare type UserArgs_2 = any;\r\n\r\ndeclare namespace Utils {\r\n    export {\r\n        EmptyToUnknown,\r\n        NeverToUnknown,\r\n        PatchFlat,\r\n        Omit_2 as Omit,\r\n        Pick_2 as Pick,\r\n        ComputeDeep,\r\n        Compute,\r\n        OptionalFlat,\r\n        ReadonlyDeep,\r\n        Narrowable,\r\n        Narrow,\r\n        Exact,\r\n        Cast,\r\n        Record_2 as Record,\r\n        UnwrapPromise,\r\n        UnwrapTuple,\r\n        Path,\r\n        Fn,\r\n        Call,\r\n        RequiredKeys,\r\n        OptionalKeys,\r\n        Optional,\r\n        Return,\r\n        ToTuple,\r\n        RenameAndNestPayloadKeys,\r\n        PayloadToResult,\r\n        Select,\r\n        Equals,\r\n        Or,\r\n        JsPromise\r\n    }\r\n}\r\n\r\ndeclare type ValidationError = {\r\n    error_identifier: 'RELATION_VIOLATION';\r\n    context: {\r\n        relation: string;\r\n        modelA: string;\r\n        modelB: string;\r\n    };\r\n} | {\r\n    error_identifier: 'MISSING_RELATED_RECORD';\r\n    context: {\r\n        model: string;\r\n        relation: string;\r\n        relationType: string;\r\n        operation: string;\r\n        neededFor?: string;\r\n    };\r\n} | {\r\n    error_identifier: 'MISSING_RECORD';\r\n    context: {\r\n        operation: string;\r\n    };\r\n} | {\r\n    error_identifier: 'INCOMPLETE_CONNECT_INPUT';\r\n    context: {\r\n        expectedRows: number;\r\n    };\r\n} | {\r\n    error_identifier: 'INCOMPLETE_CONNECT_OUTPUT';\r\n    context: {\r\n        expectedRows: number;\r\n        relation: string;\r\n        relationType: string;\r\n    };\r\n} | {\r\n    error_identifier: 'RECORDS_NOT_CONNECTED';\r\n    context: {\r\n        relation: string;\r\n        parent: string;\r\n        child: string;\r\n    };\r\n};\r\n\r\ndeclare function validator<V>(): <S>(select: Exact<S, V>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation>(client: C, model: M, operation: O): <S>(select: Exact<S, Args<C[M], O>>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation, P extends keyof Args<C[M], O>>(client: C, model: M, operation: O, prop: P): <S>(select: Exact<S, Args<C[M], O>[P]>) => S;\r\n\r\n/**\r\n * Values supported by SQL engine.\r\n */\r\nexport declare type Value = unknown;\r\n\r\nexport declare function warnEnvConflicts(envPaths: any): void;\r\n\r\nexport declare const warnOnce: (key: string, message: string, ...args: unknown[]) => void;\r\n\r\nexport { }\r\n","node_modules/.prisma/client/wasm.d.ts":"export * from \"./default\"","node_modules/@prisma/client/index.d.ts":"export * from '.prisma/client/default'"},"document":"# Prisma Markdown\n\n> Generated by [`prisma-markdown`](https://github.com/samchon/prisma-markdown)\n\n- [Actors](#actors)\n- [Discussions](#discussions)\n- [Interactions](#interactions)\n- [Moderation](#moderation)\n\n## Actors\n\n```mermaid\nerDiagram\n\"discussion_board_guest_users\" {\n  String id PK\n  String ip_address\n  String user_agent\n  String session_token \"nullable\"\n  DateTime last_accessed_at\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_registered_users\" {\n  String id PK\n  String email UK\n  String password_hash\n  String display_name \"nullable\"\n  Boolean email_verified\n  DateTime last_login_at \"nullable\"\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_moderators\" {\n  String id PK\n  String discussion_board_registered_user_id FK,UK\n  DateTime promoted_at\n  Boolean is_active_moderator\n  String moderation_notes \"nullable\"\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_moderators\" |o--|| \"discussion_board_registered_users\" : user\n```\n\n### `discussion_board_guest_users`\n\nGuest users who can browse public content without authentication. They\nprovide anonymous access to discussion board content with basic tracking\nfor session management and user experience monitoring.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `ip_address`\n  > IP address of the guest user for anonymous session tracking and security\n  > monitoring.\n- `user_agent`: Browser user agent string for compatibility and analytics purposes.\n- `session_token`\n  > Temporary session identifier for tracking guest user interactions across\n  > page views.\n- `last_accessed_at`: Timestamp of the guest user's last activity on the platform.\n- `created_at`: Timestamp when the guest user session was first recorded.\n- `updated_at`: Timestamp when the guest user session data was last updated.\n- `deleted_at`\n  > Soft delete timestamp for guest user tracking, allowing data retention\n  > for analytics while marking inactive sessions.\n\n### `discussion_board_registered_users`\n\nRegistered users who have completed authentication and can fully\nparticipate in discussion board activities. They can create content,\nrespond to discussions, vote, and access member-only features with proper\naccount management.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `email`\n  > User's email address for authentication and notifications, must be unique\n  > across the platform.\n- `password_hash`\n  > Hashed password for secure user authentication, stored as encrypted\n  > string.\n- `display_name`\n  > Optional display name shown in discussions and profiles, can be changed\n  > by the user.\n- `email_verified`\n  > Indicates whether the user's email address has been verified through\n  > confirmation process.\n- `last_login_at`: Timestamp of the user's most recent successful login.\n- `created_at`: Timestamp when the user account was created.\n- `updated_at`: Timestamp when the user account information was last updated.\n- `deleted_at`\n  > Soft delete timestamp for user accounts, preserving content attribution\n  > while removing access.\n\n### `discussion_board_moderators`\n\nModerators who have elevated permissions to manage content, users, and\nplatform operations. They inherit registered user capabilities while\nadding administrative tools and oversight responsibilities through\nreference to their underlying user account. References {@link\ndiscussion_board_registered_users.id} for authentication and profile\ninformation.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `discussion_board_registered_user_id`\n  > Reference to the registered user account this moderator inherits from.\n  > [discussion_board_registered_users.id](#discussion_board_registered_users).\n- `promoted_at`: Timestamp when the user was promoted to moderator role.\n- `is_active_moderator`\n  > Indicates whether the moderator account is currently active with full\n  > permissions.\n- `moderation_notes`: Internal notes for moderator management and performance tracking.\n- `created_at`: Timestamp when the moderator account was created.\n- `updated_at`: Timestamp when the moderator account information was last updated.\n- `deleted_at`\n  > Soft delete timestamp for moderator accounts, maintaining audit trail\n  > while removing active permissions.\n\n## Discussions\n\n```mermaid\nerDiagram\n\"discussion_board_categories\" {\n  String id PK\n  String name UK\n  String description \"nullable\"\n  String code UK\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_topics\" {\n  String id PK\n  String discussion_board_category_id FK\n  String discussion_board_registered_user_id FK\n  String title\n  String body\n  String code UK\n  String status\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_comments\" {\n  String id PK\n  String discussion_board_topic_id FK\n  String discussion_board_registered_user_id FK\n  String parent_discussion_board_comment_id FK \"nullable\"\n  String body\n  String code UK\n  Boolean is_deleted\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussion_board_topics\" }o--|| \"discussion_board_categories\" : category\n\"discussion_board_comments\" }o--|| \"discussion_board_topics\" : topic\n\"discussion_board_comments\" }o--o| \"discussion_board_comments\" : parent\n```\n\n### `discussion_board_categories`\n\nCategory system for organizing economic and political discussion topics\ninto themed groups, enabling filtered browsing and content organization.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `name`\n  > Category name for economic or political themes (e.g., 'Economics',\n  > 'Politics', 'Policy').\n- `description`\n  > Detailed description of the category's focus area and acceptable topics\n  > within it.\n- `code`\n  > Unique business identifier for the category, used for URL generation and\n  > API filtering.\n- `created_at`: Timestamp when the category was created.\n- `updated_at`: Timestamp of the last update to the category.\n- `deleted_at`: Soft delete timestamp for category removal without data loss.\n\n### `discussion_board_topics`\n\nCore discussion topics created by registered users, serving as containers\nfor economic and political conversations that can be moderated and\nlocked.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `discussion_board_category_id`: Category this topic belongs to. [discussion_board_categories.id](#discussion_board_categories).\n- `discussion_board_registered_user_id`: Creator of this topic. [discussion_board_registered_users.id](#discussion_board_registered_users).\n- `title`: Topic title that summarizes the economic or political discussion.\n- `body`: Initial post content explaining the topic and starting the discussion.\n- `code`: Unique business identifier generated for the topic URL and referencing.\n- `status`: Current status of the topic (active/locked).\n- `created_at`: Timestamp when the topic was created.\n- `updated_at`: Timestamp of the last update to the topic.\n- `deleted_at`: Soft delete timestamp for topic removal without losing discussion history.\n\n### `discussion_board_comments`\n\nThreaded responses to discussion topics, allowing registered users to\nparticipate in economic and political conversations with reply\nhierarchies.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `discussion_board_topic_id`: Topic this comment belongs to. [discussion_board_topics.id](#discussion_board_topics).\n- `discussion_board_registered_user_id`: Author of this comment. [discussion_board_registered_users.id](#discussion_board_registered_users).\n- `parent_discussion_board_comment_id`\n  > Parent comment if this is a reply in the thread. {@link\n  > discussion_board_comments.id}.\n- `body`: Comment text content contributing to the discussion.\n- `code`\n  > Unique business identifier for the comment, used for referencing and\n  > permalinks.\n- `is_deleted`\n  > Whether this comment is marked as deleted but preserved for discussion\n  > context.\n- `created_at`: Timestamp when the comment was posted.\n- `updated_at`: Timestamp of the last edit to the comment.\n\n## Interactions\n\n```mermaid\nerDiagram\n\"discussion_board_votes\" {\n  String id PK\n  String discussion_board_registered_user_id FK\n  String discussion_board_topic_id FK \"nullable\"\n  String discussion_board_comment_id FK \"nullable\"\n  String vote_type\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussion_board_notifications\" {\n  String id PK\n  String discussion_board_registered_user_id FK\n  String discussion_board_topic_id FK \"nullable\"\n  String discussion_board_comment_id FK \"nullable\"\n  String notification_type\n  String title\n  String message\n  Boolean is_read\n  DateTime created_at\n  DateTime updated_at\n}\n```\n\n### `discussion_board_votes`\n\nUser voting interactions on discussion topics and comments, enabling\ncommunity-driven content quality assessment and popularity rankings. This\ntable captures upvote/downvote actions to promote high-quality economic\nand political discussions while maintaining audit trails of user\nengagement.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `discussion_board_registered_user_id`: Voted user's discussion_board_registered_users.id\n- `discussion_board_topic_id`: Target topic's discussion_board_topics.id\n- `discussion_board_comment_id`: Target comment's discussion_board_comments.id\n- `vote_type`\n  > Type of vote (upvote or downvote) indicating user sentiment and\n  > contribution quality.\n- `created_at`: Timestamp when the vote was cast to track user engagement timing.\n- `updated_at`: Last modification timestamp for audit purposes.\n\n### `discussion_board_notifications`\n\nUser notification system for discussion board activities, including new\ncomments, votes, and system announcements. This table manages\npersonalized alerts to keep registered users engaged with relevant\neconomic and political topic discussions, supporting both real-time and\ndigest delivery options.\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `discussion_board_registered_user_id`: Recipient user's discussion_board_registered_users.id\n- `discussion_board_topic_id`: Related topic's discussion_board_topics.id\n- `discussion_board_comment_id`: Related comment's discussion_board_comments.id\n- `notification_type`\n  > Category of notification (comment_reply, topic_update, vote_received,\n  > moderation_action, system_announcement) to organize user alerts by\n  > importance.\n- `title`: Brief descriptive title for the notification displayed in user interfaces.\n- `message`\n  > Detailed notification content providing context and actionable\n  > information about discussion activities.\n- `is_read`\n  > Whether the user has viewed this notification to enable unread count\n  > tracking.\n- `created_at`\n  > Timestamp when the notification was generated to maintain chronological\n  > order.\n- `updated_at`: Last modification timestamp for status updates.\n\n## Moderation\n\n```mermaid\nerDiagram\n\"discussion_board_reports\" {\n  String id PK\n  String reporter_id FK\n  String assigned_moderator_id FK \"nullable\"\n  String reported_content_type\n  String reported_content_id\n  String reason\n  String description \"nullable\"\n  String status\n  String resolution \"nullable\"\n  DateTime created_at\n  DateTime updated_at\n}\n```\n\n### `discussion_board_reports`\n\nUser-generated reports on content that may violate community standards in\neconomic and political discussions. This table captures detailed\ninformation about reported content, including the reporter, reported\nitem, reason, and moderation status. [discussion_board_topics](#discussion_board_topics)\n[discussion_board_comments](#discussion_board_comments)\n\nProperties as follows:\n\n- `id`: Primary Key.\n- `reporter_id`\n  > Reporter's [discussion_board_registered_users.id](#discussion_board_registered_users) who submitted the\n  > report.\n- `assigned_moderator_id`\n  > Assigned moderator's [discussion_board_moderators.id](#discussion_board_moderators) handling this\n  > report.\n- `reported_content_type`: Type of content being reported (topic or comment).\n- `reported_content_id`: ID of the reported topic or comment.\n- `reason`: Reason for the report (spam, inappropriate, harassment, etc.).\n- `description`: Detailed description of the reported issue.\n- `status`: Current status of the report (pending, in_review, resolved, dismissed).\n- `resolution`: Resolution details provided by the moderator.\n- `created_at`: Timestamp when the report was created.\n- `updated_at`: Timestamp when the report was last updated.\n","diagrams":{"Actors":"```mermaid\nerDiagram\n\"discussion_board_guest_users\" {\n  String id PK\n  String ip_address\n  String user_agent\n  String session_token \"nullable\"\n  DateTime last_accessed_at\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_registered_users\" {\n  String id PK\n  String email UK\n  String password_hash\n  String display_name \"nullable\"\n  Boolean email_verified\n  DateTime last_login_at \"nullable\"\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_moderators\" {\n  String id PK\n  String discussion_board_registered_user_id FK,UK\n  DateTime promoted_at\n  Boolean is_active_moderator\n  String moderation_notes \"nullable\"\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_moderators\" |o--|| \"discussion_board_registered_users\" : user\n```","Discussions":"```mermaid\nerDiagram\n\"discussion_board_categories\" {\n  String id PK\n  String name UK\n  String description \"nullable\"\n  String code UK\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_topics\" {\n  String id PK\n  String discussion_board_category_id FK\n  String discussion_board_registered_user_id FK\n  String title\n  String body\n  String code UK\n  String status\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussion_board_comments\" {\n  String id PK\n  String discussion_board_topic_id FK\n  String discussion_board_registered_user_id FK\n  String parent_discussion_board_comment_id FK \"nullable\"\n  String body\n  String code UK\n  Boolean is_deleted\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussion_board_topics\" }o--|| \"discussion_board_categories\" : category\n\"discussion_board_comments\" }o--|| \"discussion_board_topics\" : topic\n\"discussion_board_comments\" }o--o| \"discussion_board_comments\" : parent\n```","Interactions":"```mermaid\nerDiagram\n\"discussion_board_votes\" {\n  String id PK\n  String discussion_board_registered_user_id FK\n  String discussion_board_topic_id FK \"nullable\"\n  String discussion_board_comment_id FK \"nullable\"\n  String vote_type\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussion_board_notifications\" {\n  String id PK\n  String discussion_board_registered_user_id FK\n  String discussion_board_topic_id FK \"nullable\"\n  String discussion_board_comment_id FK \"nullable\"\n  String notification_type\n  String title\n  String message\n  Boolean is_read\n  DateTime created_at\n  DateTime updated_at\n}\n```","Moderation":"```mermaid\nerDiagram\n\"discussion_board_reports\" {\n  String id PK\n  String reporter_id FK\n  String assigned_moderator_id FK \"nullable\"\n  String reported_content_type\n  String reported_content_id\n  String reason\n  String description \"nullable\"\n  String status\n  String resolution \"nullable\"\n  DateTime created_at\n  DateTime updated_at\n}\n```"}},"created_at":"2025-10-15T02:17:07.903Z","completed_at":"2025-10-15T02:20:04.587Z","step":0}]