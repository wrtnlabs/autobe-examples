import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListUserTodoItems } from "../../../../providers/postTodoListUserTodoItems";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patchTodoListUserTodoItems } from "../../../../providers/patchTodoListUserTodoItems";
import { getTodoListUserTodoItemsTodoItemId } from "../../../../providers/getTodoListUserTodoItemsTodoItemId";
import { putTodoListUserTodoItemsTodoItemId } from "../../../../providers/putTodoListUserTodoItemsTodoItemId";
import { deleteTodoListUserTodoItemsTodoItemId } from "../../../../providers/deleteTodoListUserTodoItemsTodoItemId";

import { ITodoListTodoItem } from "../../../../api/structures/ITodoListTodoItem";
import { IPageITodoListTodoItem } from "../../../../api/structures/IPageITodoListTodoItem";

@Controller("/todoList/user/todoItems")
export class TodolistUserTodoitemsController {
  /**
   * Create a new Todo item for the authenticated user.
   *
   * This operation creates a new Todo item associated with the currently
   * authenticated user. It validates that the content is not empty and creates
   * the item in the database with a unique identifier.
   *
   * The operation is designed to be user-centric, ensuring that Todo items are
   * created with proper ownership and validation. The request body contains the
   * necessary details for creating the Todo item, including the content.
   *
   * Upon successful creation, the operation returns the newly created Todo item
   * with its details, including the unique identifier, content, and completion
   * status.
   *
   * Security considerations include validating user authentication and ensuring
   * that the request is processed with the correct user context. The operation
   * follows standard error handling practices, returning appropriate error
   * messages for invalid requests or server errors.
   *
   * @param connection
   * @param body Details for creating a new Todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTodoItem.ICreate,
  ): Promise<ITodoListTodoItem> {
    try {
      return await postTodoListUserTodoItems({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get filtered Todo items list.
   *
   * This operation retrieves a list of Todo items based on the search criteria
   * provided in the request body. It supports filtering, sorting, and
   * pagination. The response includes a paginated list of Todo items with their
   * details.
   *
   * @param connection
   * @param body Search criteria for filtering Todo items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTodoItem.IRequest,
  ): Promise<IPageITodoListTodoItem.ISummary> {
    try {
      return await patchTodoListUserTodoItems({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get Todo item by ID.
   *
   * This operation retrieves a specific Todo item identified by its ID. It
   * returns the detailed information of the Todo item if found.
   *
   * @param connection
   * @param todoItemId ID of the Todo item to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":todoItemId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoItemId")
    todoItemId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTodoItem> {
    try {
      return await getTodoListUserTodoItemsTodoItemId({
        user,
        todoItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing Todo item.
   *
   * This operation updates an existing Todo item identified by its unique ID.
   * It requires the user to be authenticated and authorized to modify the Todo
   * item. The request body contains the updated details for the Todo item.
   *
   * The operation is designed to be granular, allowing users to update specific
   * attributes of their Todo items. It includes validation to ensure that the
   * Todo item exists and that the user has the necessary permissions to update
   * it.
   *
   * Upon successful update, the operation returns the updated Todo item with
   * its new details, including the unique identifier, content, and completion
   * status.
   *
   * Security considerations include validating user authentication, checking
   * ownership or permissions for the Todo item, and ensuring that the request
   * is processed with the correct user context. The operation follows standard
   * error handling practices, returning appropriate error messages for invalid
   * requests, unauthorized access, or server errors.
   *
   * @param connection
   * @param todoItemId The unique ID of the Todo item to update
   * @param body Updated details for the Todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":todoItemId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoItemId")
    todoItemId: string,
    @TypedBody()
    body: ITodoListTodoItem.IUpdate,
  ): Promise<ITodoListTodoItem> {
    try {
      return await putTodoListUserTodoItemsTodoItemId({
        user,
        todoItemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a Todo item by ID.
   *
   * This operation permanently removes a Todo item from the user's list. The
   * deletion is based on the Todo item ID provided in the path parameter. Only
   * the owner of the Todo item can delete it.
   *
   * ## Security Considerations
   *
   * - Authentication is required to identify the user.
   * - Authorization is enforced to ensure only the owner can delete their Todo
   *   items.
   *
   * ## Related Operations
   *
   * - `GET /todoItems` - Retrieve list of Todo items.
   * - `POST /todoItems` - Create a new Todo item.
   * - `PATCH /todoItems/{todoItemId}` - Update a Todo item's status.
   *
   * ## Expected Behavior
   *
   * - IF the Todo item exists and belongs to the authenticated user, THEN it is
   *   deleted.
   * - IF the Todo item does not exist or does not belong to the authenticated
   *   user, THEN an error is returned.
   *
   * ## Error Handling
   *
   * - `404 Not Found`: If the Todo item does not exist.
   * - `403 Forbidden`: If the authenticated user is not the owner of the Todo
   *   item.
   *
   * @param connection
   * @param todoItemId The ID of the Todo item to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":todoItemId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoItemId")
    todoItemId: string,
  ): Promise<void> {
    try {
      return await deleteTodoListUserTodoItemsTodoItemId({
        user,
        todoItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
