import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthUserJoin } from "../../../providers/postAuthUserJoin";
import { postAuthUserLogin } from "../../../providers/postAuthUserLogin";
import { postAuthUserRefresh } from "../../../providers/postAuthUserRefresh";
import { UserAuth } from "../../../decorators/UserAuth";
import { UserPayload } from "../../../decorators/payload/UserPayload";

import { IUser } from "../../../api/structures/IUser";
import { ITodoListUser } from "../../../api/structures/ITodoListUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * Register a new user.
   *
   * Creates a new user account with the provided username and password hash.
   * The new user is marked as not completed by default. This operation is
   * public and does not require authentication.
   *
   * @param connection
   * @param body User registration information
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IUser.ICreate,
  ): Promise<IUser.IAuthorized> {
    try {
      return await postAuthUserJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login to user account.
   *
   * Authenticates a user based on their username and password hash. Upon
   * successful authentication, issues JWT tokens for further interactions. This
   * operation is public and does not require authentication.
   *
   * @param connection
   * @param body User login credentials
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IUser.ILogin,
  ): Promise<IUser.IAuthorized> {
    try {
      return await postAuthUserLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens.
   *
   * Refreshes JWT tokens for an authenticated user using a valid refresh token.
   * This operation is restricted to authenticated users.
   *
   * @param connection
   * @param body Refresh token information
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListUser.IRefresh,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserRefresh({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
