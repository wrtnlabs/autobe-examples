import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodoItem } from "../../../../structures/ITodoListTodoItem";
import { IPageITodoListTodoItem } from "../../../../structures/IPageITodoListTodoItem";

/**
 * Create a new Todo item for the authenticated user.
 *
 * This operation creates a new Todo item associated with the currently
 * authenticated user. It validates that the content is not empty and creates
 * the item in the database with a unique identifier.
 *
 * The operation is designed to be user-centric, ensuring that Todo items are
 * created with proper ownership and validation. The request body contains the
 * necessary details for creating the Todo item, including the content.
 *
 * Upon successful creation, the operation returns the newly created Todo item
 * with its details, including the unique identifier, content, and completion
 * status.
 *
 * Security considerations include validating user authentication and ensuring
 * that the request is processed with the correct user context. The operation
 * follows standard error handling practices, returning appropriate error
 * messages for invalid requests or server errors.
 *
 * @param props.connection
 * @param props.body Details for creating a new Todo item
 * @path /todoList/user/todoItems
 * @accessor api.functional.todoList.user.todoItems.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details for creating a new Todo item */
    body: ITodoListTodoItem.ICreate;
  };
  export type Body = ITodoListTodoItem.ICreate;
  export type Response = ITodoListTodoItem;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/todoItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todoItems";
  export const random = (): ITodoListTodoItem =>
    typia.random<ITodoListTodoItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get filtered Todo items list.
 *
 * This operation retrieves a list of Todo items based on the search criteria
 * provided in the request body. It supports filtering, sorting, and pagination.
 * The response includes a paginated list of Todo items with their details.
 *
 * @param props.connection
 * @param props.body Search criteria for filtering Todo items
 * @path /todoList/user/todoItems
 * @accessor api.functional.todoList.user.todoItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria for filtering Todo items */
    body: ITodoListTodoItem.IRequest;
  };
  export type Body = ITodoListTodoItem.IRequest;
  export type Response = IPageITodoListTodoItem.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/user/todoItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todoItems";
  export const random = (): IPageITodoListTodoItem.ISummary =>
    typia.random<IPageITodoListTodoItem.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get Todo item by ID.
 *
 * This operation retrieves a specific Todo item identified by its ID. It
 * returns the detailed information of the Todo item if found.
 *
 * @param props.connection
 * @param props.todoItemId ID of the Todo item to retrieve
 * @path /todoList/user/todoItems/:todoItemId
 * @accessor api.functional.todoList.user.todoItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the Todo item to retrieve */
    todoItemId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodoItem;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/todoItems/:todoItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todoItems/${encodeURIComponent(props.todoItemId ?? "null")}`;
  export const random = (): ITodoListTodoItem =>
    typia.random<ITodoListTodoItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoItemId")(() => typia.assert(props.todoItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing Todo item.
 *
 * This operation updates an existing Todo item identified by its unique ID. It
 * requires the user to be authenticated and authorized to modify the Todo item.
 * The request body contains the updated details for the Todo item.
 *
 * The operation is designed to be granular, allowing users to update specific
 * attributes of their Todo items. It includes validation to ensure that the
 * Todo item exists and that the user has the necessary permissions to update
 * it.
 *
 * Upon successful update, the operation returns the updated Todo item with its
 * new details, including the unique identifier, content, and completion
 * status.
 *
 * Security considerations include validating user authentication, checking
 * ownership or permissions for the Todo item, and ensuring that the request is
 * processed with the correct user context. The operation follows standard error
 * handling practices, returning appropriate error messages for invalid
 * requests, unauthorized access, or server errors.
 *
 * @param props.connection
 * @param props.todoItemId The unique ID of the Todo item to update
 * @param props.body Updated details for the Todo item
 * @path /todoList/user/todoItems/:todoItemId
 * @accessor api.functional.todoList.user.todoItems.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique ID of the Todo item to update */
    todoItemId: string;

    /** Updated details for the Todo item */
    body: ITodoListTodoItem.IUpdate;
  };
  export type Body = ITodoListTodoItem.IUpdate;
  export type Response = ITodoListTodoItem;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/todoItems/:todoItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/todoItems/${encodeURIComponent(props.todoItemId ?? "null")}`;
  export const random = (): ITodoListTodoItem =>
    typia.random<ITodoListTodoItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoItemId")(() => typia.assert(props.todoItemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a Todo item by ID.
 *
 * This operation permanently removes a Todo item from the user's list. The
 * deletion is based on the Todo item ID provided in the path parameter. Only
 * the owner of the Todo item can delete it.
 *
 * ## Security Considerations
 *
 * - Authentication is required to identify the user.
 * - Authorization is enforced to ensure only the owner can delete their Todo
 *   items.
 *
 * ## Related Operations
 *
 * - `GET /todoItems` - Retrieve list of Todo items.
 * - `POST /todoItems` - Create a new Todo item.
 * - `PATCH /todoItems/{todoItemId}` - Update a Todo item's status.
 *
 * ## Expected Behavior
 *
 * - IF the Todo item exists and belongs to the authenticated user, THEN it is
 *   deleted.
 * - IF the Todo item does not exist or does not belong to the authenticated user,
 *   THEN an error is returned.
 *
 * ## Error Handling
 *
 * - `404 Not Found`: If the Todo item does not exist.
 * - `403 Forbidden`: If the authenticated user is not the owner of the Todo item.
 *
 * @param props.connection
 * @param props.todoItemId The ID of the Todo item to delete.
 * @path /todoList/user/todoItems/:todoItemId
 * @accessor api.functional.todoList.user.todoItems.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The ID of the Todo item to delete. */
    todoItemId: string;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/user/todoItems/:todoItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todoItems/${encodeURIComponent(props.todoItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoItemId")(() => typia.assert(props.todoItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
