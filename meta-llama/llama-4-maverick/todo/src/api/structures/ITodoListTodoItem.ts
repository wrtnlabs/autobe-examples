import { tags } from "typia";

/**
 * A Todo item managed by users.
 *
 * ### Business Meaning
 *
 * Todo items represent tasks or reminders that users can create, view, update,
 * and delete. They are associated with the user who created them and contain
 * essential information about the task.
 *
 * ### Key Properties
 *
 * - `id`: Unique identifier for the Todo item (UUID format)
 * - `user_id`: Identifier of the user who owns this Todo item (UUID format)
 * - `content`: Text content of the Todo item (max 255 characters)
 * - `completed`: Boolean indicating whether the Todo item is completed
 * - `created_at`: Timestamp when the Todo item was created (DateTime format)
 * - `updated_at`: Timestamp when the Todo item was last updated (DateTime format)
 *
 * ### Relationships
 *
 * - Belongs to a `todo_list_users` (User) entity through `user_id`
 * - Contains ownership relationship where one user can have multiple Todo items
 *
 * ### Usage Context
 *
 * This entity is used throughout the Todo list application for all operations
 * related to task management. It's crucial for implementing features like
 * creating new tasks, viewing task lists, marking tasks as completed, and
 * deleting tasks. The entity helps maintain a clear record of tasks associated
 * with each user.
 *
 * ### Validation Rules
 *
 * - `id` and `user_id` must be valid UUIDs
 * - `content` cannot be empty and has a maximum length of 255 characters
 * - `completed` must be a boolean value
 * - Timestamps (`created_at`, `updated_at`) must be valid DateTime values
 *
 * ### Example
 *
 * ```json
 * {
 *   "id": "550e8400-e29b-41d4-a716-446655440000",
 *   "user_id": "123e4567-e89b-12d3-a456-426614174000",
 *   "content": "Buy groceries",
 *   "completed": false,
 *   "created_at": "2023-10-01T12:00:00Z",
 *   "updated_at": "2023-10-01T12:00:00Z"
 * }
 * ```
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodoItem = null;
export namespace ITodoListTodoItem {
  /**
   * Request data for retrieving Todo items with filtering and pagination.
   *
   * This type represents the query parameters for retrieving a list of Todo
   * items. It supports filtering by completion status, pagination, and
   * optional search.
   *
   * The properties in this object correspond to the query parameters that can
   * be used to filter and paginate the Todo items list.
   */
  export type IRequest = null;

  /**
   * Request body for creating a new Todo item.
   *
   * ### Business Meaning
   *
   * This DTO is used when creating a new Todo item for the authenticated
   * user. It contains the essential information required to create a task in
   * the system.
   *
   * ### Key Properties
   *
   * - `content`: The text content of the Todo item (max 255 characters)
   *
   * ### Validation Rules
   *
   * - `content` is required and cannot be empty
   * - `content` has a maximum length of 255 characters
   *
   * ### Usage Context
   *
   * This DTO is used in the `POST /todoList/user/todoItems` operation to
   * create new Todo items. The `user_id` is automatically associated with the
   * authenticated user and doesn't need to be provided.
   *
   * ### Example
   *
   * ```json
   * {
   *   "content": "Buy groceries"
   * }
   * ```
   */
  export type ICreate = null;

  /**
   * Update operation schema for Todo List Todo Item entity.
   *
   * This schema is used for updating existing Todo List Todo Item records.
   *
   * ## Properties
   *
   * 1. Content
   *
   *    - Type: string (nullable)
   *    - Description: Updated text content of the Todo item
   *    - Example: "Buy groceries"
   *    - Validation: Max length 255 characters
   *    - Business rule: Cannot be empty string
   *    - Related to: todo_list_todo_items.content
   * 2. Completed
   *
   *    - Type: boolean (nullable)
   *    - Description: Updated completion status of the Todo item
   *    - Example: true
   *    - Validation: Boolean value
   *    - Business rule: Can be null to reset status
   *    - Related to: todo_list_todo_items.completed
   *
   * ## Constraints
   *
   * - At least one property (content or completed) must be provided
   * - Content cannot be empty string
   * - Completed must be boolean
   *
   * ## Security Considerations
   *
   * - Authentication required (user role)
   * - Authorization check: User must own the Todo item
   * - Data validation: All fields validated against schema constraints
   *
   * ## Usage Context
   *
   * This schema is used in PATCH/PUT operations to update existing Todo
   * items. The operation is idempotent - multiple identical requests have
   * same effect as single request.
   *
   * ## Related Schemas
   *
   * - ITodoListTodoItem - Main entity schema
   * - ITodoListTodoItem.ICreate - Create operation schema
   * - IPageITodoListTodoItem.ISummary - Paginated response schema
   *
   * ## Notes
   *
   * This schema follows standard TypeScript naming conventions and OpenAPI
   * specification. All descriptions are written in clear, multiple-paragraph
   * format for maximum readability. The schema is designed to be
   * implementable with the existing Prisma database schema.
   */
  export type IUpdate = null;

  /** Summary representation of a Todo item */
  export type ISummary = {
    /** Completion status of the Todo item */
    completed: boolean;

    /** Text content of the Todo item */
    content: string;

    /** Unique identifier of the Todo item */
    id: string & tags.Format<"uuid">;
  };
}
