{"operations":[{"authorizationRole":null,"authorizationType":"join","description":"Creates a new user account with the provided username and password hash. The new user is marked as not completed by default. This operation is public and does not require authentication.","method":"post","name":"join","parameters":[],"path":"/auth/user/join","prerequisites":[],"requestBody":{"description":"User registration information","typeName":"IUser.ICreate"},"responseBody":{"description":"Newly created user information","typeName":"IUser.IAuthorized"},"specification":"Create a new user account","summary":"Register a new user","accessor":["auth","user","join"]},{"authorizationRole":null,"authorizationType":"login","description":"Authenticates a user based on their username and password hash. Upon successful authentication, issues JWT tokens for further interactions. This operation is public and does not require authentication.","method":"post","name":"login","parameters":[],"path":"/auth/user/login","prerequisites":[],"requestBody":{"description":"User login credentials","typeName":"IUser.ILogin"},"responseBody":{"description":"JWT tokens for authenticated user","typeName":"IUser.IAuthorized"},"specification":"Authenticate a user and issue JWT tokens","summary":"Login to user account","accessor":["auth","user","login"]},{"authorizationRole":"user","authorizationType":"refresh","description":"Refreshes JWT tokens for an authenticated user using a valid refresh token. This operation is restricted to authenticated users.","method":"post","name":"refresh","parameters":[],"path":"/auth/user/refresh","prerequisites":[],"requestBody":{"description":"Refresh token information","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"New JWT tokens","typeName":"ITodoListUser.IAuthorized"},"specification":"Refresh JWT tokens for an authenticated user","summary":"Refresh JWT tokens","accessor":["auth","user","refresh"]},{"authorizationRoles":["user"],"description":"This operation retrieves a list of Todo items based on the search criteria provided in the request body. It supports filtering, sorting, and pagination. The response includes a paginated list of Todo items with their details.","method":"patch","name":"index","parameters":[],"path":"/todoList/user/todoItems","requestBody":{"description":"Search criteria for filtering Todo items","typeName":"ITodoListTodoItem.IRequest"},"responseBody":{"description":"Paginated list of Todo items","typeName":"IPageITodoListTodoItem.ISummary"},"specification":"Retrieve a list of Todo items with filtering, sorting, and pagination","summary":"Get filtered Todo items list","authorizationRole":"user","authorizationType":null,"prerequisites":[],"accessor":["todoList","user","todoItems","index"]},{"authorizationRoles":["user"],"description":"This operation retrieves a specific Todo item identified by its ID. It returns the detailed information of the Todo item if found.","method":"get","name":"at","parameters":[{"description":"ID of the Todo item to retrieve","name":"todoItemId","schema":{"format":"uuid","type":"string"}}],"path":"/todoList/user/todoItems/{todoItemId}","requestBody":null,"responseBody":{"description":"Detailed information of the Todo item","typeName":"ITodoListTodoItem"},"specification":"Retrieve a specific Todo item by ID","summary":"Get Todo item by ID","authorizationRole":"user","authorizationType":null,"prerequisites":[{"description":"Todo item must exist before it can be retrieved","endpoint":{"method":"post","path":"/todoList/user/todoItems"}}],"accessor":["todoList","user","todoItems","at"]},{"specification":"Create a new Todo item for the authenticated user.","description":"This operation creates a new Todo item associated with the currently authenticated user. It validates that the content is not empty and creates the item in the database with a unique identifier.\n\nThe operation is designed to be user-centric, ensuring that Todo items are created with proper ownership and validation. The request body contains the necessary details for creating the Todo item, including the content.\n\nUpon successful creation, the operation returns the newly created Todo item with its details, including the unique identifier, content, and completion status.\n\nSecurity considerations include validating user authentication and ensuring that the request is processed with the correct user context. The operation follows standard error handling practices, returning appropriate error messages for invalid requests or server errors.","summary":"Create a new Todo item for the authenticated user","parameters":[],"requestBody":{"description":"Details for creating a new Todo item","typeName":"ITodoListTodoItem.ICreate"},"responseBody":{"description":"The newly created Todo item","typeName":"ITodoListTodoItem"},"name":"create","authorizationRoles":["user"],"path":"/todoList/user/todoItems","method":"post","authorizationRole":"user","authorizationType":null,"prerequisites":[],"accessor":["todoList","user","todoItems","create"]},{"specification":"Update an existing Todo item by its ID.","description":"This operation updates an existing Todo item identified by its unique ID. It requires the user to be authenticated and authorized to modify the Todo item. The request body contains the updated details for the Todo item.\n\nThe operation is designed to be granular, allowing users to update specific attributes of their Todo items. It includes validation to ensure that the Todo item exists and that the user has the necessary permissions to update it.\n\nUpon successful update, the operation returns the updated Todo item with its new details, including the unique identifier, content, and completion status.\n\nSecurity considerations include validating user authentication, checking ownership or permissions for the Todo item, and ensuring that the request is processed with the correct user context. The operation follows standard error handling practices, returning appropriate error messages for invalid requests, unauthorized access, or server errors.","summary":"Update an existing Todo item","parameters":[{"name":"todoItemId","description":"The unique ID of the Todo item to update","schema":{"type":"string"}}],"requestBody":{"description":"Updated details for the Todo item","typeName":"ITodoListTodoItem.IUpdate"},"responseBody":{"description":"The updated Todo item","typeName":"ITodoListTodoItem"},"name":"update","authorizationRoles":["user"],"path":"/todoList/user/todoItems/{todoItemId}","method":"put","authorizationRole":"user","authorizationType":null,"prerequisites":[{"description":"Todo item must exist before it can be updated","endpoint":{"method":"post","path":"/todoList/user/todoItems"}}],"accessor":["todoList","user","todoItems","update"]},{"specification":"This operation deletes a specific Todo item by ID for the authenticated user.","description":"Delete a Todo item by ID.\n\nThis operation permanently removes a Todo item from the user's list.\nThe deletion is based on the Todo item ID provided in the path parameter.\nOnly the owner of the Todo item can delete it.\n\n## Security Considerations\n\n- Authentication is required to identify the user.\n- Authorization is enforced to ensure only the owner can delete their Todo items.\n\n## Related Operations\n\n- `GET /todoItems` - Retrieve list of Todo items.\n- `POST /todoItems` - Create a new Todo item.\n- `PATCH /todoItems/{todoItemId}` - Update a Todo item's status.\n\n## Expected Behavior\n\n- IF the Todo item exists and belongs to the authenticated user, THEN it is deleted.\n- IF the Todo item does not exist or does not belong to the authenticated user, THEN an error is returned.\n\n## Error Handling\n\n- `404 Not Found`: If the Todo item does not exist.\n- `403 Forbidden`: If the authenticated user is not the owner of the Todo item.","summary":"Delete a Todo item by ID","parameters":[{"name":"todoItemId","description":"The ID of the Todo item to delete.","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationRoles":["user"],"path":"/todoList/user/todoItems/{todoItemId}","method":"delete","authorizationRole":"user","authorizationType":null,"prerequisites":[{"description":"Todo item must exist before it can be deleted","endpoint":{"method":"post","path":"/todoList/user/todoItems"}}],"accessor":["todoList","user","todoItems","erase"]}],"components":{"authorization":[{"description":"Authenticated user who can manage their Todo lists","kind":"member","name":"user"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTodoItem.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodoItem.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IUser.IAuthorized":{"description":"Authorization response containing JWT token information","properties":{"id":{"description":"Unique identifier of the authenticated user","format":"uuid","type":"string"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"type":"object"},"IUser.ICreate":{"description":"User registration information for creating a new account","properties":{"password_hash":{"description":"Hashed password for secure authentication","type":"string"},"username":{"description":"Unique username chosen by the user for login","type":"string"}},"required":["username","password_hash"],"type":"object"},"ITodoListUser.IRefresh":{"description":"Refresh token information for JWT renewal","properties":{"refresh_token":{"description":"Refresh token for JWT renewal","type":"string"}},"required":["refresh_token"],"type":"object"},"IUser.ILogin":{"type":"string","description":"User login credentials.\n\nThis type represents the credentials required for user login.\nIt includes the username and password.\n\n## Properties\n\n* `username`: The username chosen by the user for login.\n* `password`: The plain text password for authentication."},"ITodoListTodoItem.IRequest":{"type":"null","description":"Request data for retrieving Todo items with filtering and pagination.\n\nThis type represents the query parameters for retrieving a list of Todo items.\nIt supports filtering by completion status, pagination, and optional search.\n\nThe properties in this object correspond to the query parameters that can be used\nto filter and paginate the Todo items list."},"ITodoListUser.IAuthorized":{"description":"Authorization response for a user, including the user's ID and JWT token information.","properties":{"id":{"description":"Unique identifier of the authenticated user.","format":"uuid","type":"string"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"type":"object","x-autobe-prisma-schema":"todo_list_users"},"ITodoListTodoItem":{"type":"null","description":"A Todo item managed by users.\n\n### Business Meaning\nTodo items represent tasks or reminders that users can create, view, update, and delete.\nThey are associated with the user who created them and contain essential information about the task.\n\n### Key Properties\n- `id`: Unique identifier for the Todo item (UUID format)\n- `user_id`: Identifier of the user who owns this Todo item (UUID format)\n- `content`: Text content of the Todo item (max 255 characters)\n- `completed`: Boolean indicating whether the Todo item is completed\n- `created_at`: Timestamp when the Todo item was created (DateTime format)\n- `updated_at`: Timestamp when the Todo item was last updated (DateTime format)\n\n### Relationships\n- Belongs to a `todo_list_users` (User) entity through `user_id`\n- Contains ownership relationship where one user can have multiple Todo items\n\n### Usage Context\nThis entity is used throughout the Todo list application for all operations related to task management.\nIt's crucial for implementing features like creating new tasks, viewing task lists, marking tasks as completed,\nand deleting tasks. The entity helps maintain a clear record of tasks associated with each user.\n\n### Validation Rules\n- `id` and `user_id` must be valid UUIDs\n- `content` cannot be empty and has a maximum length of 255 characters\n- `completed` must be a boolean value\n- Timestamps (`created_at`, `updated_at`) must be valid DateTime values\n\n### Example\n```json\n{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"content\": \"Buy groceries\",\n  \"completed\": false,\n  \"created_at\": \"2023-10-01T12:00:00Z\",\n  \"updated_at\": \"2023-10-01T12:00:00Z\"\n}\n```"},"ITodoListTodoItem.ICreate":{"type":"null","description":"Request body for creating a new Todo item.\n\n### Business Meaning\nThis DTO is used when creating a new Todo item for the authenticated user.\nIt contains the essential information required to create a task in the system.\n\n### Key Properties\n- `content`: The text content of the Todo item (max 255 characters)\n\n### Validation Rules\n- `content` is required and cannot be empty\n- `content` has a maximum length of 255 characters\n\n### Usage Context\nThis DTO is used in the `POST /todoList/user/todoItems` operation to create new Todo items.\nThe `user_id` is automatically associated with the authenticated user and doesn't need to be provided.\n\n### Example\n```json\n{\n  \"content\": \"Buy groceries\"\n}\n```"},"ITodoListTodoItem.IUpdate":{"type":"null","description":"Update operation schema for Todo List Todo Item entity.\n\nThis schema is used for updating existing Todo List Todo Item records.\n\n## Properties\n\n1. content\n   - Type: string (nullable)\n   - Description: Updated text content of the Todo item\n   - Example: \"Buy groceries\"\n   - Validation: Max length 255 characters\n   - Business rule: Cannot be empty string\n   - Related to: todo_list_todo_items.content\n\n2. completed\n   - Type: boolean (nullable)\n   - Description: Updated completion status of the Todo item\n   - Example: true\n   - Validation: Boolean value\n   - Business rule: Can be null to reset status\n   - Related to: todo_list_todo_items.completed\n\n## Constraints\n\n- At least one property (content or completed) must be provided\n- content cannot be empty string\n- completed must be boolean\n\n## Security Considerations\n\n- Authentication required (user role)\n- Authorization check: User must own the Todo item\n- Data validation: All fields validated against schema constraints\n\n## Usage Context\n\nThis schema is used in PATCH/PUT operations to update existing Todo items.\nThe operation is idempotent - multiple identical requests have same effect as single request.\n\n## Related Schemas\n\n- ITodoListTodoItem - Main entity schema\n- ITodoListTodoItem.ICreate - Create operation schema\n- IPageITodoListTodoItem.ISummary - Paginated response schema\n\n## Notes\n\nThis schema follows standard TypeScript naming conventions and OpenAPI specification.\nAll descriptions are written in clear, multiple-paragraph format for maximum readability.\nThe schema is designed to be implementable with the existing Prisma database schema."},"ITodoListTodoItem.ISummary":{"description":"Summary representation of a Todo item","properties":{"completed":{"description":"Completion status of the Todo item","type":"boolean"},"content":{"description":"Text content of the Todo item","type":"string"},"id":{"description":"Unique identifier of the Todo item","format":"uuid","type":"string"}},"required":["id","content","completed"],"type":"object","x-autobe-prisma-schema":"todo_list_todo_items"}}}}