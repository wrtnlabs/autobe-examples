{"files":[{"filename":"schema-01-actors.prisma","namespace":"Actors","models":[{"name":"reddit_community_guests","description":"Guests of the redditCommunity platform with minimal access and no authentication credentials, representing unauthenticated users. Guests can browse public content but cannot create posts or comment. This table stores guest session tracking and metadata for auditing.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"session_id","type":"string","nullable":false,"description":"Session identifier for tracking guest browsing sessions."},{"name":"ip_address","type":"string","nullable":false,"description":"IP address of the guest user for security and logging."},{"name":"user_agent","type":"string","nullable":true,"description":"User agent string from the guest's browser or device."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of guest creation."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last guest data update."}],"uniqueIndexes":[{"fieldNames":["session_id"],"unique":true}],"plainIndexes":[{"fieldNames":["ip_address","created_at"]}],"ginIndexes":[]},{"name":"reddit_community_members","description":"Members are registered and authenticated users who can create content, vote, comment, and subscribe. This table includes authentication details such as unique email addresses and password hashes, along with timestamps for account lifecycle management.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","nullable":false,"description":"Unique email address used for login and communication."},{"name":"password_hash","type":"string","nullable":false,"description":"Hashed password for secure authentication."},{"name":"is_email_verified","type":"boolean","nullable":false,"description":"Indicates whether the member has verified their email."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of member creation."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last member data update."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp indicating soft deletion (account deactivation)."}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["is_email_verified","created_at"]}],"ginIndexes":[]},{"name":"reddit_community_community_moderators","description":"Community moderators are members assigned to manage and moderate specific communities. This table links members to communities, defining their moderator roles and permissions within those communities.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","nullable":false,"description":"Belonged community member's {@link reddit_community_members.id}","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false},{"name":"community_id","type":"uuid","nullable":false,"description":"Belonged community's {@link reddit_community_communities.id}","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false}],"plainFields":[{"name":"assigned_at","type":"datetime","nullable":false,"description":"Timestamp when member was assigned as moderator of the community."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of moderator record creation."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last update to moderator record."}],"uniqueIndexes":[{"fieldNames":["member_id","community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id","assigned_at"]}],"ginIndexes":[]},{"name":"reddit_community_admins","description":"Admins are system-wide users with full administrative privileges across all communities and platform settings. This table stores admin user authentication data and role-specific metadata.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","nullable":false,"description":"Unique admin email address used for login and communication."},{"name":"password_hash","type":"string","nullable":false,"description":"Hashed password for secure authentication."},{"name":"admin_level","type":"int","nullable":false,"description":"Integer indicating the level of administrative privileges."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of admin user creation."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last admin user record update."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp indicating soft deletion (account deactivation)."}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["admin_level","created_at"]}],"ginIndexes":[]}]},{"filename":"schema-02-communities.prisma","namespace":"Communities","models":[{"name":"reddit_community_communities","description":"Community entities representing user-created communities. Each community has a unique name, description, creator reference (via other domain tables), and timestamps. Supports soft delete. Serves as the primary domain for community management.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","nullable":false,"description":"Unique community name adhering to naming rules (3-50 alphanumeric/underscore characters)."},{"name":"description","type":"string","nullable":true,"description":"Optional community description text."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the community was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when the community was last updated."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft delete timestamp; null if not deleted."}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]}]},{"filename":"schema-03-content.prisma","namespace":"Content","models":[{"name":"reddit_community_posts","description":"Posts created by users within communities, supporting text, link, or single image content. Each post is authored by a member or guest, belongs to a single community, and includes metadata for creation, editing, status, and soft deletion. Relationships link posts to their authors and parent communities. Supports business workflows via status fields and tracks vote and comment counts externally.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"author_member_id","type":"uuid","description":"Authoring member's {@link reddit_community_members.id}.","relation":{"name":"authorMember","targetModel":"reddit_community_members"},"unique":false,"nullable":true},{"name":"author_guest_id","type":"uuid","description":"Authoring guest's {@link reddit_community_guests.id}.","relation":{"name":"authorGuest","targetModel":"reddit_community_guests"},"unique":false,"nullable":true},{"name":"reddit_community_community_id","type":"uuid","description":"Target community's {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"post_type","type":"string","description":"Type of the post content: text, link, or image.","nullable":false},{"name":"title","type":"string","description":"Title of the post, max 300 characters.","nullable":false},{"name":"body_text","type":"string","description":"Text content for text posts.","nullable":true},{"name":"link_url","type":"string","description":"URL for link posts.","nullable":true},{"name":"image_url","type":"string","description":"URL to the image file for image posts.","nullable":true},{"name":"created_at","type":"datetime","description":"Creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp.","nullable":true},{"name":"status","type":"string","description":"Status representing lifecycle or workflow state.","nullable":true},{"name":"business_status","type":"string","description":"Business-specific status or lifecycle state.","nullable":true}],"uniqueIndexes":[{"fieldNames":["reddit_community_community_id","title"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_community_id","created_at"]},{"fieldNames":["author_member_id","created_at"]}],"ginIndexes":[{"fieldName":"title"}]},{"name":"reddit_community_comments","description":"Comments on posts within the redditCommunity platform allowing nested replies with unlimited depth. Each comment is authored by a member or guest user and references its parent post and optionally a parent comment for nesting. Supports soft deletion and tracks creation and modification timestamps. Voting data and karma calculations are maintained externally.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_post_id","type":"uuid","description":"Parent post's {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":false},{"name":"parent_comment_id","type":"uuid","description":"Parent comment for nested replies. Nullable for root comments.","relation":{"name":"parentComment","targetModel":"reddit_community_comments","mappingName":"recursive"},"unique":false,"nullable":true},{"name":"author_member_id","type":"uuid","description":"Authoring member's {@link reddit_community_members.id}.","relation":{"name":"authorMember","targetModel":"reddit_community_members"},"unique":false,"nullable":true},{"name":"author_guest_id","type":"uuid","description":"Authoring guest's {@link reddit_community_guests.id}.","relation":{"name":"authorGuest","targetModel":"reddit_community_guests"},"unique":false,"nullable":true}],"plainFields":[{"name":"body_text","type":"string","description":"Text content of the comment limited to 2,000 characters.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["reddit_community_post_id","created_at"]},{"fieldNames":["author_member_id","created_at"]}],"ginIndexes":[{"fieldName":"body_text"}]}]},{"filename":"schema-04-voting.prisma","namespace":"Voting","models":[{"name":"reddit_community_post_votes","description":"Record of votes cast by members on posts within communities. Each vote is linked to the member who cast it and the specific post voted upon. Ensures one active vote per member per post, supporting upvotes and downvotes. Includes temporal fields for creation, update, and soft deletion to allow vote tracking and audit trailing.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","description":"Belonged member's {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Voted post's {@link reddit_community_posts.id}.","relation":{"name":"post","targetModel":"reddit_community_posts"},"unique":false,"nullable":false}],"plainFields":[{"name":"vote_value","type":"int","nullable":false,"description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removed."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the vote was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when the vote was last updated."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp for soft deletion of the vote."}],"uniqueIndexes":[{"fieldNames":["member_id","post_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"reddit_community_comment_votes","description":"Record of votes cast by members on comments within communities. Each vote is linked to the member who cast it and the specific comment voted upon. Ensures one active vote per member per comment, supporting upvotes and downvotes. Temporal fields for creation, update, and soft deletion ensure vote tracking and audit trailing capabilities.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","description":"Belonged member's {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"comment_id","type":"uuid","description":"Voted comment's {@link reddit_community_comments.id}.","relation":{"name":"comment","targetModel":"reddit_community_comments"},"unique":false,"nullable":false}],"plainFields":[{"name":"vote_value","type":"int","nullable":false,"description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removed."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the vote was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when the vote was last updated."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp for soft deletion of the vote."}],"uniqueIndexes":[{"fieldNames":["member_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]}]},{"filename":"schema-05-karma.prisma","namespace":"Karma","models":[{"name":"reddit_community_user_karma","description":"User karma representing the reputation accumulated from voting activity on posts and comments. Includes total karma and subcomponent values. Belongs to a single user (member). Maintains created, updated, and soft-deleted timestamps for lifecycle management and auditing. Uniquely identified by user to enforce one karma record per member. Integral to the Karma domain and used for reputation-based features.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Belonged member's {@link reddit_community_members.id} whose karma this represents.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":true,"nullable":false}],"plainFields":[{"name":"post_upvotes_karma","type":"int","nullable":false,"description":"Karma points from upvotes on user's posts."},{"name":"post_downvotes_karma","type":"int","nullable":false,"description":"Karma points deducted from downvotes on user's posts."},{"name":"comment_upvotes_karma","type":"int","nullable":false,"description":"Karma points from upvotes on user's comments."},{"name":"comment_downvotes_karma","type":"int","nullable":false,"description":"Karma points deducted from downvotes on user's comments."},{"name":"total_karma","type":"int","nullable":false,"description":"Total karma sum from posts and comments karma components."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Record last updated timestamp."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft deletion timestamp. Null means record is active."}],"uniqueIndexes":[{"fieldNames":["reddit_community_member_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[]}]},{"filename":"schema-06-subscriptions.prisma","namespace":"Subscriptions","models":[{"name":"reddit_community_community_subscriptions","description":"Tracks subscriptions of members to communities, enabling personalized feed generation and access control in the Reddit-like community platform. References membership to existing members and communities, supporting soft deletes and audit timestamps. Allows each member to subscribe to multiple communities and each community to have multiple subscribers.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Belonged member's {@link reddit_community_members.id}.","relation":{"name":"member","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"reddit_community_community_id","type":"uuid","description":"Belonged community's {@link reddit_community_communities.id}.","relation":{"name":"community","targetModel":"reddit_community_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp when the subscription was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the subscription was last updated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the subscription was soft-deleted (logical deletion).","nullable":true}],"uniqueIndexes":[{"fieldNames":["reddit_community_member_id","reddit_community_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_member_id","created_at"]},{"fieldNames":["reddit_community_community_id","created_at"]}],"ginIndexes":[]}]},{"filename":"schema-07-reporting.prisma","namespace":"Reporting","models":[{"name":"reddit_community_reports","description":"Stores reports made by guests or members against posts, comments, or members. Tracks reporter identity, reported content references, report category, description, timestamps, and current report status to support moderation workflows.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reporter_guest_id","type":"uuid","description":"Reporting guest user {@link reddit_community_guests.id}.","relation":{"name":"reporterGuest","targetModel":"reddit_community_guests"},"unique":false,"nullable":true},{"name":"reporter_member_id","type":"uuid","description":"Reporting member user {@link reddit_community_members.id}.","relation":{"name":"reporterMember","targetModel":"reddit_community_members","mappingName":"reddit_community_reports_of_reporter_member_id"},"unique":false,"nullable":true},{"name":"reported_post_id","type":"uuid","description":"Reported post {@link reddit_community_posts.id}.","relation":{"name":"reportedPost","targetModel":"reddit_community_posts"},"unique":false,"nullable":true},{"name":"reported_comment_id","type":"uuid","description":"Reported comment {@link reddit_community_comments.id}.","relation":{"name":"reportedComment","targetModel":"reddit_community_comments"},"unique":false,"nullable":true},{"name":"reported_member_id","type":"uuid","description":"Reported member user {@link reddit_community_members.id}.","relation":{"name":"reportedMember","targetModel":"reddit_community_members","mappingName":"reddit_community_reports_of_reported_member_id"},"unique":false,"nullable":true},{"name":"status_id","type":"uuid","description":"Current status of the report {@link reddit_community_report_statuses.id}.","relation":{"name":"status","targetModel":"reddit_community_report_statuses"},"unique":false,"nullable":false}],"plainFields":[{"name":"category","type":"string","nullable":false,"description":"Category of the report such as spam, abuse, or other violation."},{"name":"description","type":"string","nullable":true,"description":"Detailed optional description provided by the reporter."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the report was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last update to the report."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp if the report is soft deleted."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["status_id","created_at"]}],"ginIndexes":[{"fieldName":"description"}]},{"name":"reddit_community_report_actions","description":"Represents moderation actions taken in response to reports. Links actions to specific reports and moderators or admins performing the actions. Records action types, optional notes, timestamps for tracking moderation activities and auditing.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"report_id","type":"uuid","description":"Linked report {@link reddit_community_reports.id}.","relation":{"name":"report","targetModel":"reddit_community_reports"},"unique":false,"nullable":false},{"name":"moderator_member_id","type":"uuid","description":"Moderator member who performed the action {@link reddit_community_members.id}.","relation":{"name":"moderatorMember","targetModel":"reddit_community_members"},"unique":false,"nullable":false},{"name":"admin_member_id","type":"uuid","description":"Admin member who performed the action {@link reddit_community_admins.id}.","relation":{"name":"adminMember","targetModel":"reddit_community_admins"},"unique":false,"nullable":true}],"plainFields":[{"name":"action_type","type":"string","nullable":false,"description":"Type of moderation action taken, e.g., warning, deletion, suspension."},{"name":"notes","type":"string","nullable":true,"description":"Optional detailed notes regarding the action."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the action was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last update to the action."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp if the action is soft deleted."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["report_id","created_at"]}],"ginIndexes":[{"fieldName":"notes"}]},{"name":"reddit_community_report_statuses","description":"Lookup table for possible statuses of reports, such as pending, reviewed, action taken, or dismissed. Supports status-based filtering and lifecycle tracking of reports.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","nullable":false,"description":"Name of the report status, e.g., pending, reviewed, action taken."},{"name":"description","type":"string","nullable":true,"description":"Detailed description about the status meaning and usage."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the status record was created."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of last update to the status record."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Timestamp if the status record is soft deleted."}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]}]},{"filename":"schema-08-profiles.prisma","namespace":"Profiles","models":[{"name":"reddit_community_user_profiles","description":"User profile metadata including public bio, join date, and association to user identity and karma. This table stores enriched user information separate from authentication and role data, facilitating public profile display and user-specific metadata management. It references core user identity tables and karma entities for reputation tracking.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reddit_community_member_id","type":"uuid","description":"Referenced user identity from reddit_community_members.id.","relation":{"name":"redditCommunityMember","targetModel":"reddit_community_members"},"unique":true,"nullable":false},{"name":"reddit_community_user_karma_id","type":"uuid","description":"Referenced user karma record from reddit_community_user_karma.id.","relation":{"name":"redditCommunityUserKarma","targetModel":"reddit_community_user_karma"},"unique":true,"nullable":true}],"plainFields":[{"name":"join_date","type":"datetime","description":"Date when the user joined the platform, tracking membership duration.","nullable":false},{"name":"bio","type":"string","description":"Public bio or description provided by the user for profile display.","nullable":true},{"name":"created_at","type":"datetime","description":"Record creation timestamp, for auditing and temporal queries.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last record update timestamp, for auditing and synchronization.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp; null if record is active.","nullable":true}],"uniqueIndexes":[{"fieldNames":["reddit_community_member_id"],"unique":true}],"plainIndexes":[{"fieldNames":["reddit_community_user_karma_id"]}],"ginIndexes":[{"fieldName":"bio"}]}]}]}