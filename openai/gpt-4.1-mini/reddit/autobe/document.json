{"operations":[{"specification":"This API operation allows guest users to register (create a guest session) in the redditCommunity platform. It corresponds to the `reddit_community_guests` table in the database, creating a new guest record with session tracking. The endpoint is public (authorizationType: 'join') since guests do not have credentials. The operation takes guest registration data (like session_id, IP address, user_agent) and responds with authentication information including issued JWT tokens. It is designed to enable guests temporary access and session state tracking without requiring a login process.\n\nThe guest registration requires providing at least the session_id and IP address to create the guest record and issue authorization tokens. This enables session tracking and authorization continuation in the platform.\n\nSecurity considerations include safe creation of guest sessions, issuance of short-lived tokens for limited access, and isolation of guest session data.\n\nRelated operations are token refresh `/auth/guest/refresh` which depends on a valid refresh token to issue new access tokens for the guest.\n\nAll property names match `reddit_community_guests` table fields for consistency and integrity.","authorizationType":"join","description":"Creates a new guest session account representing an unauthenticated user browsing the platform. Captures session ID, IP address, and optional user agent information. Issues temporary authorization tokens for session tracking and limited access to public content.\n\nIt uses the `reddit_community_guests` table to maintain guest records for auditing and session management. This operation does not require login credentials.\n\nThe response returns the authorized guest session information including JWT tokens.\n\nPre-executed by no prerequisites. Usually followed by token refresh to maintain session.","summary":"Create a guest session user account in the redditCommunity platform stored in the reddit_community_guests table.","parameters":[],"requestBody":{"description":"Guest registration data including session tracking identifiers and client metadata.","typeName":"IRedditCommunityGuest.ICreate"},"responseBody":{"description":"Authorized guest session information with issued JWT tokens.","typeName":"IRedditCommunityGuest.IAuthorized"},"authorizationRole":"guest","name":"joinGuest","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"This API operation enables guest users of the redditCommunity platform to refresh their JWT access tokens. It corresponds to the token refresh functionality for guest sessions, ensuring continued authorized access without re-login.\n\nThe endpoint takes a valid refresh token from the guest session and issues a new access token, maintaining seamless authentication flow for guests.\n\nThis operation references the `reddit_community_guests` table indirectly by verifying the guest session associated with the refresh token.\n\nSecurity considerations include verifying the validity and expiration of the refresh token before issuing new tokens.\n\nIt expects the refresh token in the request header or body to authenticate the guest prior to token renewal.\n\nUsually preceded by the `join` endpoint to establish initial guest session and tokens.\n\nResponse contains new authorized token information matching the IAuthorized response type.\n\nNo additional role permissions are required beyond guest access.","authorizationType":"refresh","description":"Refresh JWT access tokens for guest sessions using the provided refresh token. Enables continued authorized access to public content without new login.","summary":"Refresh guest JWT access tokens in the redditCommunity platform.","parameters":[],"requestBody":{"description":"Refresh token payload with the token string.","typeName":"IRedditCommunityGuest.IRefresh"},"responseBody":{"description":"New authorized guest session tokens after refresh.","typeName":"IRedditCommunityGuest.IAuthorized"},"authorizationRole":"guest","name":"refreshGuest","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"This API operation allows new member users to register an account in the redditCommunity platform. It is associated with the 'reddit_community_members' Prisma DB table which stores member authentication and profile data. The POST request to '/auth/member/join' accepts a registration request body, creates a new member record with hashed password and verification status, and issues an initial JWT access and refresh token upon success. This operation requires no authentication (public). The response includes the authorized member user data and tokens in the IRedditCommunityMember.IAuthorized response type.\n\nSecurity considerations include validation of email uniqueness, password strength, and proper handling of email verification as indicated by the 'is_email_verified' field. This ensures only verified accounts can proceed after registration. It integrates with email verification and login operations in a typical authentication workflow.\n\nPrerequisites: None\n\nExpected to return 201 status on success or a 400 on validation failure such as duplicate email or weak password. Errors are descriptive to guide clients on corrections.","authorizationType":"join","description":"Register a new member account with email and password to create a verified user account in the redditCommunity platform. It uses the 'reddit_community_members' table storing user identification, authentication, and verification status. Passwords are securely hashed and emails must be unique. The operation issues JWT tokens upon successful registration allowing immediate authenticated access.\n\nSecurity measures ensure registration data validity and prevention of duplicate accounts. It is a public endpoint allowing guest access to create new member accounts.\n\nRelated operations include login, refresh token, and password reset APIs for complete authentication lifecycle management.","summary":"Register a new member account using the reddit_community_members table.","parameters":[],"requestBody":{"description":"Registration information for a new member account.","typeName":"IRedditCommunityMember.ICreate"},"responseBody":{"description":"Authorized member information with JWT tokens.","typeName":"IRedditCommunityMember.IAuthorized"},"authorizationRole":"member","name":"join","prerequisites":[],"path":"/auth/member/join","method":"post"},{"specification":"This API operation allows existing member users to authenticate using email and password credentials. It interfaces with the 'reddit_community_members' Prisma DB table which stores user credentials and verification status. The login POST request to '/auth/member/login' accepts credentials, validates them against stored hashes, and checks email verification status before issuing JWT access and refresh tokens upon successful login.\n\nSecurity considerations include protecting against brute force attacks, ensuring password hash verification, and preventing login for unverified emails as indicated by 'is_email_verified'. This endpoint is public.\n\nIt integrates with registration, token refresh, and password reset operations to enable full authentication lifecycle. Successful responses include authorized user data and tokens in the 'IRedditCommunityMember.IAuthorized' response type.\n\nError responses for invalid credentials, unverified accounts, or locked users are included to guide clients.\n\nPrerequisites: None\n\nExpected usage typically involves front-end login forms and session acquisition workflows.","authorizationType":"login","description":"Authenticate an existing member user by validating email and password credentials stored in the 'reddit_community_members' table. Successful authentication issues JWT tokens for session management.\n\nSecurity checks include password hash verification and email verification confirmation. Unverified users are denied access.\n\nThis endpoint is public and supports the main login authentication flow for member users.\n\nRelated operations include registration and token refresh endpoints.","summary":"Authenticate a member user and issue JWT tokens.","parameters":[],"requestBody":{"description":"Login credentials for member authentication.","typeName":"IRedditCommunityMember.ILogin"},"responseBody":{"description":"Authorized member information with JWT tokens.","typeName":"IRedditCommunityMember.IAuthorized"},"authorizationRole":"member","name":"login","prerequisites":[],"path":"/auth/member/login","method":"post"},{"specification":"This API operation allows authenticated member users to refresh their JWT access tokens using valid refresh tokens. It operates with the 'reddit_community_members' Prisma DB table which maintains member session and verification data. The POST request to '/auth/member/refresh' accepts a refresh token, validates it, and issues a new access token to maintain the session.\n\nSecurity considerations include validating token integrity, expiration, and revocation status. This operation requires a valid refresh token and is not accessible by unauthenticated users.\n\nIt works in conjunction with join and login operations to provide complete token lifecycle management. Successful responses return updated authorized member information including new JWT tokens using the 'IRedditCommunityMember.IAuthorized' response type.\n\nPrerequisites: None\n\nExpected to return 200 on success or 401 if the refresh token is invalid or expired.","authorizationType":"refresh","description":"Refresh JWT access token for authenticated member users using a valid refresh token. Validates token authenticity and issues new tokens to prolong session without re-login.\n\nThis operation secures session continuity and is an integral part of member authentication lifecycle.\n\nRelated operations include join and login to complete authentication flow.","summary":"Refresh JWT tokens for a member user.","parameters":[],"requestBody":{"description":"Refresh token request for member authentication.","typeName":"IRedditCommunityMember.IRefresh"},"responseBody":{"description":"Authorized member information with refreshed JWT tokens.","typeName":"IRedditCommunityMember.IAuthorized"},"authorizationRole":"member","name":"refresh","prerequisites":[],"path":"/auth/member/refresh","method":"post"},{"specification":"This API operation implements the registration (join) functionality for communityModerator users in the redditCommunity platform. It allows an unauthenticated user to create a new member account with the communityModerator role. The operation validates the user's email and password and stores necessary authentication details in the `reddit_community_members` table, including `email`, `password_hash`, and `is_email_verified` to track email verification status. Upon successful registration, the system issues JWT access and refresh tokens for immediate authenticated access. The registration operation requires public access without prior authentication.\n\nThe purpose is to securely create a new user account that can later assume communityModerator responsibilities by assignment in the system. It requires checking that the provided email is unique, validating password strength, and correctly storing encrypted password hashes. The operation integrates with email verification workflows by setting `is_email_verified` to false by default until the user verifies their email.\n\nSecurity considerations include ensuring passwords are properly hashed and not returned in responses, issuing secured JWT tokens upon successful join, and protecting the endpoint from abuse via rate limiting. This operation is integral to the authentication and authorization workflows for communityModerators.\n\nRelated operations include the login endpoint for members to authenticate and the token refresh endpoint for renewing tokens. These operations together establish the secure JWT-based authentication lifecycle for communityModerators.\n\nIf the email is already registered, the operation will return an error. The response returns a type `IRedditCommunityCommunityModerator.IAuthorized` representing the authorized member's information and tokens.","authorizationType":"join","description":"API operation for communityModerator user registration (join) on redditCommunity platform.\n\nUses schema `reddit_community_members` for user data storage including email, password hash, and email verification status.\n\nWhen called, creates a new member record, sets email verification flag to false, and issues JWT tokens.\n\nNo prior authentication is needed as it is a public registration endpoint.\n\nSecurity is enforced via password hashing and email uniqueness constraints.\n\nComplements login and refresh token operations.\n\nErrors returned if email already exists or validation fails.\n\nReturns a JWT authorized response type with token info specific to communityModerator role.","summary":"Register a new communityModerator user with email and password to create member account.","parameters":[],"requestBody":{"description":"Information required to create a new communityModerator user account.","typeName":"IRedditCommunityCommunityModerator.IJoin"},"responseBody":{"description":"JWT authorized response for a communityModerator user after successful registration.","typeName":"IRedditCommunityCommunityModerator.IAuthorized"},"authorizationRole":null,"name":"joinCommunityModerator","prerequisites":[],"path":"/auth/communityModerator/join","method":"post"},{"specification":"This API operation implements the login functionality for communityModerator users in the redditCommunity platform. It verifies user credentials (`email` and `password`) against the `reddit_community_members` table with the role of communityModerator. Upon successful authentication, it issues JWT access and refresh tokens representing an authorized session for the user.\n\nThe operation requires a public access path and validates that the member exists, has verified their email (checked via `is_email_verified` field), and the provided password matches the stored hash. It handles error cases for unverified email or invalid credentials.\n\nSecurity considerations include secure password hashing comparison, preventing timing attacks, and limiting login attempts. The operation returns a response with type `IRedditCommunityCommunityModerator.IAuthorized` containing JWT tokens and user info.\n\nThis login operation is part of the authentication flow together with registration (join) and token refresh endpoints, enabling secure session management for the communityModerator role.\n\nThe operation checks the member's email verification status and disallows login if the email is unverified.","authorizationType":"login","description":"Authenticate a communityModerator user by validating email and password.\n\nUses `reddit_community_members` table for member data verification.\n\nIssues JWT tokens upon successful authentication.\n\nRequires valid, verified account email.\n\nPublicly accessible without prior authentication.\n\nReturns JWT tokens and authorized session data.\n\nHandles invalid credentials and unverified email errors.\n\nSupports full JWT token authentication lifecycle for the communityModerator role.","summary":"Authenticate communityModerator user and issue JWT tokens for access.","parameters":[],"requestBody":{"description":"Login credentials including email and password for communityModerator user.","typeName":"IRedditCommunityCommunityModerator.ILogin"},"responseBody":{"description":"Authorized response with JWT tokens and user info for communityModerator.","typeName":"IRedditCommunityCommunityModerator.IAuthorized"},"authorizationRole":null,"name":"loginCommunityModerator","prerequisites":[],"path":"/auth/communityModerator/login","method":"post"},{"specification":"This API operation provides token refresh functionality for authenticated communityModerator users in the redditCommunity platform. It accepts a valid JWT refresh token and issues new access and refresh tokens, extending the user's session securely without requiring re-authentication.\n\nThe operation interacts with the `reddit_community_members` authentication context and maintains existing session and role validity. It ensures the refresh token is valid and not revoked, returning updated tokens for continued access.\n\nSecurity considerations include validating the refresh token, preventing token reuse attacks, and applying token expiration policies. This operation is crucial to the JWT token lifecycle management for communityModerator users.\n\nThe operation requires the presence of a valid refresh token but does not require full user credentials. Successful responses return a JWT authorized data type of `IRedditCommunityCommunityModerator.IAuthorized` including the new token pair.\n\nThis complements registration (join) and login endpoints by maintaining authenticated sessions seamlessly.\n\nInvalid or expired refresh tokens result in authentication errors.","authorizationType":"refresh","description":"Refresh JWT tokens for authenticated communityModerator user by validating provided refresh token.\n\nMaintains session continuity without full re-authentication.\n\nSecures token lifecycle within the redditCommunity platform.\n\nReturns new access and refresh JWT tokens encapsulated in authorized response.\n\nErrors returned for invalid or expired tokens.\n\nImplements token renewal flow specifically for communityModerator role.","summary":"Renew access and refresh JWT tokens for communityModerator user session.","parameters":[],"requestBody":{"description":"Token refresh request containing valid refresh token.","typeName":"IRedditCommunityCommunityModerator.IRefresh"},"responseBody":{"description":"New authorized JWT tokens and session data after refresh.","typeName":"IRedditCommunityCommunityModerator.IAuthorized"},"authorizationRole":null,"name":"refreshCommunityModeratorTokens","prerequisites":[],"path":"/auth/communityModerator/refresh","method":"post"},{"specification":"Operation to register a new admin user account with email and password credentials, creating an active admin entity in the system and issuing initial JWT access and refresh tokens to provide secure administrative access.","authorizationType":"join","description":"This operation allows clients to create a new admin account by providing required credentials such as email and password. It persists a new admin entity in the database using the reddit_community_admins table, ensuring unique email addresses through schema constraints. Upon successful registration, the system generates JWT access and refresh tokens for the admin user, encapsulated in the response type IRedditCommunityAdmin.IAuthorized. This approach enforces registration security and initializes authentication workflows for system administrators.\n\nThe operation strictly relies on the reddit_community_admins schema, validating email uniqueness and password hash security. It excludes any soft deletion considerations during creation and expects normal lifecycle timestamps to be assigned post-creation.\n\nAs part of the admin user role, this operation is publicly accessible without authentication to enable new administrative accounts to be set up. Related authentication endpoints include login and token refresh for full admin access management.","summary":"Register new admin user and issue authentication tokens using reddit_community_admins table.","parameters":[],"requestBody":{"description":"Admin registration data including unique email and password.","typeName":"IRedditCommunityAdmin.ICreate"},"responseBody":{"description":"Returns authorized admin access tokens and user data after successful registration.","typeName":"IRedditCommunityAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"Operation for admins to login with email and password credentials, authenticating against stored admin user data and issuing secure JWT tokens for session management. This operation validates the email and password against the reddit_community_admins table with active accounts (not soft deleted) and generates access and refresh tokens upon success.\n\nThe response type IRedditCommunityAdmin.IAuthorized contains the JWT tokens and admin user details needed to authorize subsequent requests. This endpoint is publicly accessible to allow admin users to obtain authentication tokens.\n\nSecurity considerations include handling invalid credentials and enforcing login rate limiting outside this specification. It directly integrates with the underlying admin data model for credentials verification and token issuance.","authorizationType":"login","description":"Authenticate an admin user by verifying email and password credentials against the reddit_community_admins table. Upon successful credentials validation, issue JWT access and refresh tokens encapsulated in the response type IRedditCommunityAdmin.IAuthorized. This operation enables admin users to securely authenticate and manage sessions.\n\nUnsuccessful attempts should return appropriate authentication failure responses as defined in API error handling conventions.\n\nThis operation is public and does not require pre-existing authentication tokens to execute. It is a crucial component of the admin authentication workflow.","summary":"Admin login via email and password authentication, returning JWT tokens using reddit_community_admins schema.","parameters":[],"requestBody":{"description":"Admin login credentials including email and password.","typeName":"IRedditCommunityAdmin.ILogin"},"responseBody":{"description":"Authorized admin session data with JWT tokens upon successful login.","typeName":"IRedditCommunityAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"Operation to refresh JWT access tokens using valid refresh tokens for admin users. This endpoint validates the provided refresh token, generating a new access token to maintain session security without requiring full re-authentication.\n\nIt references the reddit_community_admins table to ensure the admin user exists and is active (not soft deleted). The response returns refreshed JWT tokens with the type IRedditCommunityAdmin.IAuthorized.\n\nThis endpoint requires presenting a valid refresh token and replaces expired access tokens, enhancing security and usability of admin sessions. It is a protected but publicly accessible authorization endpoint as per authentication flow requirements.","authorizationType":"refresh","description":"Refresh JWT tokens for an admin user using a valid refresh token. This operation validates the refresh token's authenticity and expiry, generating new access tokens encapsulated in IRedditCommunityAdmin.IAuthorized. It maintains user session security without requiring full re-login.\n\nThe operation interacts with the reddit_community_admins table to verify user status and token validity. The refresh endpoint is publicly accessible but requires a valid refresh token.\n\nIt is a critical part of the authentication lifecycle, supporting seamless token renewal for admins.","summary":"Refresh JWT tokens for admin users via refresh token validation.","parameters":[],"requestBody":{"description":"Refresh token request for admin user session renewal.","typeName":"IRedditCommunityAdmin.IRefresh"},"responseBody":{"description":"Refreshed JWT tokens and admin data upon successful token renewal.","typeName":"IRedditCommunityAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of redditCommunity guest entities, supporting search, filtering, and sorting capabilities. It directly interfaces with the reddit_community_guests table in the Prisma schema, which tracks guest sessions with properties such as session_id, ip_address, user_agent, and timestamps for creation and updates. This API returns a summary list optimized for display in administrative or analytics dashboards, allowing filtering by session properties while protecting guest data privacy.","description":"This operation provides the capability to search and retrieve a paginated list of redditCommunity guests from the system. Guests represent unauthenticated visitors who have session tracking within the platform.\n\nThe operation accepts search criteria including session identifiers, IP addresses, and creation dates to filter guests appropriately. It also supports pagination and sorting to efficiently handle potentially large datasets.\n\nSecurity considerations include restricting access to this operation to administrative roles only due to the potentially sensitive nature of guest session data. Public or regular user access is not permitted.\n\nThis operation connects to the reddit_community_guests database table as defined in the Prisma schema. It returns summarized guest records including session_id and IP address but excludes sensitive user agent details unless authorized.\n\nClients can use this to monitor guest activity, security auditing, and performance analysis. The implementation must ensure compliance with data privacy standards when handling user agent and IP information.","summary":"Search and retrieve paginated summary of redditCommunity guests","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for redditCommunity guests","typeName":"IRedditCommunityGuest.IRequest"},"responseBody":{"description":"Paginated list of redditCommunity guest summaries matching search criteria","typeName":"IPageIRedditCommunityGuest.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/redditCommunity/admin/redditCommunityGuests","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information for a single redditCommunity guest entity by its unique identifier. The reddit_community_guests table tracks unauthenticated guest sessions including session IDs, IP addresses, user agents, and timestamps. Retrieval supports security-sensitive access, limited to admin roles.\n\nThe API ensures that only authorized administrative users can access individual guest session details to protect privacy and avoid data leaks.\n\nThis operation returns comprehensive guest data from the database, including all associated session metadata.","description":"Retrieve detailed information of a specific redditCommunity guest by its unique ID.\n\nGuests are unauthenticated users tracked via session_id and IP for security monitoring and audit purposes.\n\nAccess to this endpoint is restricted to admins to protect guest privacy and data sensitivity.\n\nResponse includes all guest details including session_id, ip_address, user_agent, and timestamps.\n\nErrors will be returned if the specified ID does not exist or if access is unauthorized.","summary":"Retrieve detailed redditCommunity guest info by ID","parameters":[{"name":"id","description":"Unique identifier of the target redditCommunity guest","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the redditCommunity guest","typeName":"IRedditCommunityGuest"},"authorizationType":null,"authorizationRole":"admin","path":"/redditCommunity/admin/redditCommunityGuests/{id}","method":"get","name":"at","prerequisites":[]},{"specification":"This operation updates a redditCommunityGuest entity identified by its id. The guest entity stores session tracking information for unauthenticated users including session ID, IP address, and user agent info. The PUT method allows modification of guest data such as updating session metadata or tracking info. The underlying Prisma model 'reddit_community_guests' has fields: id (primary key UUID), session_id (unique string), ip_address (string), user_agent (nullable string), created_at (timestamp), updated_at (timestamp). This update endpoint requires the guest ID as a path parameter and a request body with guest update info. Only authorized roles may access this modification endpoint to adjust guest session data for tracking or auditing.","path":"/redditCommunity/admin/redditCommunityGuests/{id}","method":"put","summary":"Update a redditCommunityGuest by ID","description":"Update the redditCommunityGuest entity specified by the unique identifier. This operation modifies guest-related session data such as session identifier, IP address, and user agent string used to track unauthenticated user activity.\n\nSecurity constraints imply only trusted system roles or services should update guest data to maintain audit integrity. The guest entity is tied to posts, comments, and reports authored anonymously.\n\nThe update payload allows changing sessionId and ipAddress, and optionally userAgent. CreatedAt and updatedAt are managed by the system and should not be modified manually.\n\nThis operation relates directly to the `reddit_community_guests` table in the database, which enforces uniqueness on sessionId and has indexes on IP address and creation timestamp.\n\nInputs requiring validation:\n- Path parameter `id`: must be a valid UUID corresponding to an existing guest\n- Request body: must comply with input schema for guest updates\n\nExpected errors include 404 for unknown guest ID, 400 for invalid input, and 403 for unauthorized access.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target guest","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Guest update data payload","typeName":"IRedditCommunityGuest.IUpdate"},"responseBody":{"description":"Updated guest entity","typeName":"IRedditCommunityGuest"},"authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"A redditCommunityGuest entity must be created before it can be updated by its unique identifier."}],"name":"update"},{"specification":"This operation updates a redditCommunityGuest entity identified by its id. The guest entity stores session tracking information for unauthenticated users including session ID, IP address, and user agent info. The PUT method allows modification of guest data such as updating session metadata or tracking info. The underlying Prisma model 'reddit_community_guests' has fields: id (primary key UUID), session_id (unique string), ip_address (string), user_agent (nullable string), created_at (timestamp), updated_at (timestamp). This update endpoint requires the guest ID as a path parameter and a request body with guest update info. Only authorized roles may access this modification endpoint to adjust guest session data for tracking or auditing.","path":"/redditCommunity/communityModerator/redditCommunityGuests/{id}","method":"put","summary":"Update a redditCommunityGuest by ID","description":"Update the redditCommunityGuest entity specified by the unique identifier. This operation modifies guest-related session data such as session identifier, IP address, and user agent string used to track unauthenticated user activity.\n\nSecurity constraints imply only trusted system roles or services should update guest data to maintain audit integrity. The guest entity is tied to posts, comments, and reports authored anonymously.\n\nThe update payload allows changing sessionId and ipAddress, and optionally userAgent. CreatedAt and updatedAt are managed by the system and should not be modified manually.\n\nThis operation relates directly to the `reddit_community_guests` table in the database, which enforces uniqueness on sessionId and has indexes on IP address and creation timestamp.\n\nInputs requiring validation:\n- Path parameter `id`: must be a valid UUID corresponding to an existing guest\n- Request body: must comply with input schema for guest updates\n\nExpected errors include 404 for unknown guest ID, 400 for invalid input, and 403 for unauthorized access.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target guest","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Guest update data payload","typeName":"IRedditCommunityGuest.IUpdate"},"responseBody":{"description":"Updated guest entity","typeName":"IRedditCommunityGuest"},"authorizationType":null,"authorizationRole":"communityModerator","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"A redditCommunityGuest entity must be created before it can be updated by its unique identifier."}],"name":"update"},{"specification":"This API operation retrieves a filtered and paginated list of redditCommunityMember entities supporting advanced search parameters, sorting, and pagination features. It operates on the reddit_community_members table from the Prisma schema. The endpoint supports querying members based on email, email verification status, and creation date ranges. It returns paginated results with essential member information optimized for list displays.","description":"Retrieve and search through reddit community members with filtering, pagination, and sorting capabilities.\n\nThis operation enables clients to specify detailed search criteria such as filtering by email, verification status, and creation date ranges, allowing efficient querying of member accounts. The query supports pagination for manageable data retrieval and sorts results to meet various viewing requirements.\n\nSecurity considerations include restricting access to admin and moderator roles to protect sensitive member information. Unauthorized users cannot perform this operation.\n\nThe operation interacts directly with the reddit_community_members table in the database, which stores member authentication and account status details. It filters results based on the existing fields such as email, is_email_verified, and timestamps.\n\nValidation rules include ensuring supplied filter parameters conform to valid formats such as correct email patterns and ISO date-time standards.\n\nRelated operations include retrieving single member details (`GET /redditCommunityMembers/{id}`) and member account management endpoints.\n\nError handling covers invalid filter parameters, unauthorized access, and general server errors.","summary":"Search and retrieve a filtered, paginated list of reddit community members","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for reddit community members filtering","typeName":"IRedditCommunityMember.IRequest"},"responseBody":{"description":"Paginated list of reddit community member summaries matching search criteria","typeName":"IPageIRedditCommunityMember.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/redditCommunity/admin/redditCommunityMembers","method":"patch","name":"index","prerequisites":[]},{"specification":"This API operation retrieves a filtered and paginated list of redditCommunityMember entities supporting advanced search parameters, sorting, and pagination features. It operates on the reddit_community_members table from the Prisma schema. The endpoint supports querying members based on email, email verification status, and creation date ranges. It returns paginated results with essential member information optimized for list displays.","description":"Retrieve and search through reddit community members with filtering, pagination, and sorting capabilities.\n\nThis operation enables clients to specify detailed search criteria such as filtering by email, verification status, and creation date ranges, allowing efficient querying of member accounts. The query supports pagination for manageable data retrieval and sorts results to meet various viewing requirements.\n\nSecurity considerations include restricting access to admin and moderator roles to protect sensitive member information. Unauthorized users cannot perform this operation.\n\nThe operation interacts directly with the reddit_community_members table in the database, which stores member authentication and account status details. It filters results based on the existing fields such as email, is_email_verified, and timestamps.\n\nValidation rules include ensuring supplied filter parameters conform to valid formats such as correct email patterns and ISO date-time standards.\n\nRelated operations include retrieving single member details (`GET /redditCommunityMembers/{id}`) and member account management endpoints.\n\nError handling covers invalid filter parameters, unauthorized access, and general server errors.","summary":"Search and retrieve a filtered, paginated list of reddit community members","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for reddit community members filtering","typeName":"IRedditCommunityMember.IRequest"},"responseBody":{"description":"Paginated list of reddit community member summaries matching search criteria","typeName":"IPageIRedditCommunityMember.ISummary"},"authorizationType":null,"authorizationRole":"communityModerator","path":"/redditCommunity/communityModerator/redditCommunityMembers","method":"patch","name":"index","prerequisites":[]},{"specification":"This API operation retrieves detailed information about a specific redditCommunityMember identified by their unique ID. It corresponds to the reddit_community_members table in the Prisma schema, which holds member authentication details and account status fields.\n\nThe endpoint allows authorized users to access comprehensive member data including email, verification status, creation and update timestamps, and deletion status if applicable. This supports user account management functions such as profile viewing and administrative auditing.\n\nSecurity restrictions ensure only administrators and community moderators can access member details. The operation validates the member ID to be a UUID string and returns appropriate errors if the member does not exist.\n\nThis operation complements the member list retrieval endpoint, offering individual member detail lookups.\n\nTypical errors handled include unauthorized access, invalid member ID format, and resource not found scenarios.","description":"Retrieve detailed information of a single reddit community member by unique ID.\n\nProvides full member data such as email, verification status, timestamps, and deletion status retrieved from the reddit_community_members database table.\n\nAccess is restricted to admin and communityModerator roles to protect member privacy and administrative functions.\n\nReturns a single redditCommunityMember entity with all relevant fields for management and auditing purposes.","summary":"Retrieve details of a reddit community member by ID","parameters":[{"name":"id","description":"Unique identifier of the target reddit community member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed reddit community member information","typeName":"IRedditCommunityMember"},"authorizationType":null,"authorizationRole":"admin","path":"/redditCommunity/admin/redditCommunityMembers/{id}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Member must exist before retrieving member details."}]},{"specification":"This API operation retrieves detailed information about a specific redditCommunityMember identified by their unique ID. It corresponds to the reddit_community_members table in the Prisma schema, which holds member authentication details and account status fields.\n\nThe endpoint allows authorized users to access comprehensive member data including email, verification status, creation and update timestamps, and deletion status if applicable. This supports user account management functions such as profile viewing and administrative auditing.\n\nSecurity restrictions ensure only administrators and community moderators can access member details. The operation validates the member ID to be a UUID string and returns appropriate errors if the member does not exist.\n\nThis operation complements the member list retrieval endpoint, offering individual member detail lookups.\n\nTypical errors handled include unauthorized access, invalid member ID format, and resource not found scenarios.","description":"Retrieve detailed information of a single reddit community member by unique ID.\n\nProvides full member data such as email, verification status, timestamps, and deletion status retrieved from the reddit_community_members database table.\n\nAccess is restricted to admin and communityModerator roles to protect member privacy and administrative functions.\n\nReturns a single redditCommunityMember entity with all relevant fields for management and auditing purposes.","summary":"Retrieve details of a reddit community member by ID","parameters":[{"name":"id","description":"Unique identifier of the target reddit community member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed reddit community member information","typeName":"IRedditCommunityMember"},"authorizationType":null,"authorizationRole":"communityModerator","path":"/redditCommunity/communityModerator/redditCommunityMembers/{id}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Create a reddit community before retrieving a reddit community member by ID."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"A community moderator assignment must exist before retrieving a community moderator's related member details."}]},{"specification":"This operation updates a redditCommunityMember identified by the UUID path parameter \"id\". It modifies the member's email, password hash, email verification status, and deletion timestamp if applicable, while maintaining created and updated timestamps. This operation acts on the \"reddit_community_members\" table as per the Prisma schema for user authentication and profile management, ensuring validation such as unique email addresses. Only authorized roles such as \"member\", \"communityModerator\", or \"admin\" are permitted to execute this operation with secured access controls.","path":"/redditCommunity/member/redditCommunityMembers/{id}","method":"put","summary":"Update redditCommunityMember information by ID","description":"Update an existing redditCommunityMember's information. This includes updating the email (which must remain unique across all members), password hash for authentication, email verification status, and optionally marking the account as deleted via a soft deletion timestamp.\n\nThis operation applies to the \"reddit_community_members\" table in the Prisma schema. The system automatically manages createdAt and updatedAt timestamps.\n\nOnly authenticated users with appropriate roles can perform this update. The operation validates unique email constraints and ensures password hashes meet security policies.\n\nIf the member with the specified ID does not exist, an error will be returned. This operation returns no content but confirms success through HTTP status.\n\nAuthorization roles: member, communityModerator, admin.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the redditCommunityMember to update"}],"requestBody":{"description":"Payload containing fields to update in redditCommunityMember","typeName":"IRedditCommunityMember.IUpdate"},"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"A community must exist before assigning members to it, even though the member update requires the member to exist, there is no POST endpoint creating members available thus no creation prerequisite for the member itself."}]},{"specification":"This operation updates a redditCommunityMember identified by the UUID path parameter \"id\". It modifies the member's email, password hash, email verification status, and deletion timestamp if applicable, while maintaining created and updated timestamps. This operation acts on the \"reddit_community_members\" table as per the Prisma schema for user authentication and profile management, ensuring validation such as unique email addresses. Only authorized roles such as \"member\", \"communityModerator\", or \"admin\" are permitted to execute this operation with secured access controls.","path":"/redditCommunity/communityModerator/redditCommunityMembers/{id}","method":"put","summary":"Update redditCommunityMember information by ID","description":"Update an existing redditCommunityMember's information. This includes updating the email (which must remain unique across all members), password hash for authentication, email verification status, and optionally marking the account as deleted via a soft deletion timestamp.\n\nThis operation applies to the \"reddit_community_members\" table in the Prisma schema. The system automatically manages createdAt and updatedAt timestamps.\n\nOnly authenticated users with appropriate roles can perform this update. The operation validates unique email constraints and ensures password hashes meet security policies.\n\nIf the member with the specified ID does not exist, an error will be returned. This operation returns no content but confirms success through HTTP status.\n\nAuthorization roles: member, communityModerator, admin.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the redditCommunityMember to update"}],"requestBody":{"description":"Payload containing fields to update in redditCommunityMember","typeName":"IRedditCommunityMember.IUpdate"},"responseBody":null,"authorizationType":null,"authorizationRole":"communityModerator","name":"update","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Create a reddit community before updating a reddit community member by ID."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"A community moderator assignment must be created before updating a reddit community member by ID."}]},{"specification":"This operation updates a redditCommunityMember identified by the UUID path parameter \"id\". It modifies the member's email, password hash, email verification status, and deletion timestamp if applicable, while maintaining created and updated timestamps. This operation acts on the \"reddit_community_members\" table as per the Prisma schema for user authentication and profile management, ensuring validation such as unique email addresses. Only authorized roles such as \"member\", \"communityModerator\", or \"admin\" are permitted to execute this operation with secured access controls.","path":"/redditCommunity/admin/redditCommunityMembers/{id}","method":"put","summary":"Update redditCommunityMember information by ID","description":"Update an existing redditCommunityMember's information. This includes updating the email (which must remain unique across all members), password hash for authentication, email verification status, and optionally marking the account as deleted via a soft deletion timestamp.\n\nThis operation applies to the \"reddit_community_members\" table in the Prisma schema. The system automatically manages createdAt and updatedAt timestamps.\n\nOnly authenticated users with appropriate roles can perform this update. The operation validates unique email constraints and ensures password hashes meet security policies.\n\nIf the member with the specified ID does not exist, an error will be returned. This operation returns no content but confirms success through HTTP status.\n\nAuthorization roles: member, communityModerator, admin.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the redditCommunityMember to update"}],"requestBody":{"description":"Payload containing fields to update in redditCommunityMember","typeName":"IRedditCommunityMember.IUpdate"},"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"User community must be created before updating a redditCommunityMember's information"}]},{"specification":"This operation permanently deletes a redditCommunityMember specified by the UUID path parameter \"id\". It performs a hard delete removing the member record entirely from the database, impacting all related data such as posts, comments, votes, karma, and subscriptions. The operation respects the \"reddit_community_members\" table structure and enforces strict authorization roles, typically limiting this destructive action to administrators and the member themselves.","path":"/redditCommunity/member/redditCommunityMembers/{id}","method":"delete","summary":"Delete redditCommunityMember by ID","description":"Permanently delete a redditCommunityMember from the \"reddit_community_members\" table by their unique identifier.\n\nThis is a hard delete operation that removes the member and all associated data such as posts, comments, votes, karma records, and community subscriptions.\n\nThis operation should only be executed by authorized roles such as the member themselves or an administrator due to its impact on the system.\n\nNo response body is returned. Errors are returned if the member does not exist or if the caller lacks authorization.\n\nAuthorization roles: member, communityModerator, admin.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the redditCommunityMember to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"User community must be created before deleting a redditCommunityMember"}]},{"specification":"This operation permanently deletes a redditCommunityMember specified by the UUID path parameter \"id\". It performs a hard delete removing the member record entirely from the database, impacting all related data such as posts, comments, votes, karma, and subscriptions. The operation respects the \"reddit_community_members\" table structure and enforces strict authorization roles, typically limiting this destructive action to administrators and the member themselves.","path":"/redditCommunity/communityModerator/redditCommunityMembers/{id}","method":"delete","summary":"Delete redditCommunityMember by ID","description":"Permanently delete a redditCommunityMember from the \"reddit_community_members\" table by their unique identifier.\n\nThis is a hard delete operation that removes the member and all associated data such as posts, comments, votes, karma records, and community subscriptions.\n\nThis operation should only be executed by authorized roles such as the member themselves or an administrator due to its impact on the system.\n\nNo response body is returned. Errors are returned if the member does not exist or if the caller lacks authorization.\n\nAuthorization roles: member, communityModerator, admin.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the redditCommunityMember to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityModerator","name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The redditCommunityMember must exist before it can be deleted."}]},{"specification":"This operation permanently deletes a redditCommunityMember specified by the UUID path parameter \"id\". It performs a hard delete removing the member record entirely from the database, impacting all related data such as posts, comments, votes, karma, and subscriptions. The operation respects the \"reddit_community_members\" table structure and enforces strict authorization roles, typically limiting this destructive action to administrators and the member themselves.","path":"/redditCommunity/admin/redditCommunityMembers/{id}","method":"delete","summary":"Delete redditCommunityMember by ID","description":"Permanently delete a redditCommunityMember from the \"reddit_community_members\" table by their unique identifier.\n\nThis is a hard delete operation that removes the member and all associated data such as posts, comments, votes, karma records, and community subscriptions.\n\nThis operation should only be executed by authorized roles such as the member themselves or an administrator due to its impact on the system.\n\nNo response body is returned. Errors are returned if the member does not exist or if the caller lacks authorization.\n\nAuthorization roles: member, communityModerator, admin.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the redditCommunityMember to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The redditCommunityMember must exist before deletion to ensure valid operation on existing member data."}]},{"specification":"This operation retrieves a filtered and paginated list of redditCommunity community moderators, including details of moderator assignment and timestamps. It supports searching and sorting by community, member, and assignment date. This operation corresponds to the reddit_community_community_moderators table in the Prisma database schema, representing members assigned as moderators to specific communities with associated timestamps and metadata. The operation supports pagination and filters for efficient querying of community moderators across the platform.","path":"/redditCommunity/admin/redditCommunityCommunityModerators","method":"patch","summary":"Search and retrieve a filtered, paginated list of redditCommunity community moderators","description":"Retrieve a filtered and paginated list of redditCommunity community moderators from the system. This operation allows clients to query moderators assigned to various communities with capabilities to filter and sort results based on member IDs, community IDs, and assignment timestamps.\n\nSecurity considerations restrict this operation to administrative users or community personnel with sufficient privileges to view moderation assignments. Unauthorized users should not access detailed moderator data.\n\nThis operation maps to the reddit_community_community_moderators table in the Prisma schema. The moderators represent members (users) assigned moderation roles within communities, including the timestamp they were assigned. The response includes key identifiers and timestamps useful for management and auditing.\n\nValidation rules require the request body to include pagination parameters and optional filters. The response returns corresponding moderator summaries with paging information.\n\nRelated operations include retrieval of individual moderators by ID, creation, updating, and deletion of moderator assignments.\n\nErrors related to invalid filters, pagination parameters, or access violations are handled explicitly in the API implementation.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for redditCommunity community moderator filtering","typeName":"IRedditCommunityCommunityModerators.IRequest"},"responseBody":{"description":"Paginated list of redditCommunity community moderators matching search criteria","typeName":"IPageIRedditCommunityCommunityModerators.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"search","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before a community moderator can be assigned or searched."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator assignments must be created before searching for moderators."}]},{"specification":"This operation retrieves detailed information about a specific redditCommunity community moderator by their unique identifier. It accesses the reddit_community_community_moderators table in the Prisma schema, returning all relevant moderator data including member and community linkage and assignment timestamps.\n\nThe operation requires the path parameter 'id' to specify the target moderator record. It is restricted to administrative users or authorized personnel to view moderator details.\n\nSecurity measures ensure data confidentiality and prevent unauthorized access to sensitive role assignments. Errors due to invalid or non-existent IDs are gracefully handled.\n\nThis endpoint supports audits, user role management, and UI display of community moderator details.","path":"/redditCommunity/admin/redditCommunityCommunityModerators/{id}","method":"get","summary":"Retrieve detailed information of a redditCommunity community moderator by ID","description":"Retrieve detailed information for a specific redditCommunity community moderator by ID. This includes all related fields from the community moderators table, such as member ID, community ID, assigned timestamp, and audit fields.\n\nAccess to this data is restricted to administrators or authorized community staff. The operation validates existence of the moderator and returns detailed data or an appropriate error if not found.\n\nThis operation facilitates management of moderation roles within the platform and complements operations for managing moderator assignments.","parameters":[{"name":"id","description":"Unique identifier of the target redditCommunity community moderator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed redditCommunity community moderator information","typeName":"IRedditCommunityCommunityModerators"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator must be assigned before retrieving detailed information about the redditCommunity community moderator."},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must be created before assigning community moderators."}]},{"specification":"This operation updates an existing community moderator record in the Reddit-like community platform. It operates on the reddit_community_community_moderators table from the Prisma schema which links members to communities and defines their moderator roles and permissions within those communities. The update operation allows modification of the moderator's assigned date and timestamps, enabling changes to their role status. The record is identified by its unique ID (UUID). The operation requires the moderator ID as the path parameter and an update request body conforming to IRedditCommunityCommunityModerator.IUpdate.","description":"Update an existing community moderator's information by their unique ID. This operation modifies properties such as the assigned_at timestamp, which reflects when the member was assigned as a moderator for the community. It ensures updated_at timestamp is also refreshed upon modification. Only authorized roles can perform this update.\n\nThis operation is directly associated with the reddit_community_community_moderators table, which maps members to communities with specific moderator roles. It impacts system authorization logic regarding community management.\n\nValidation enforces the UUID format for the ID path parameter and ensures request body data complies with the IRedditCommunityCommunityModerator.IUpdate schema, reflecting possible updates to the assigned_at and audit-related timestamps.\n\nRelated operations include listing moderators, creating new moderator assignments, and deleting existing ones. Proper error handling ensures attempts to update non-existent records return meaningful errors.\n\nThis operation requires authentication and appropriate authorization roles such as community moderator or admin to perform changes.","summary":"Update a community moderator by ID","parameters":[{"name":"id","description":"Unique identifier of the community moderator to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating a community moderator","typeName":"IRedditCommunityCommunityModerator.IUpdate"},"responseBody":{"description":"Updated community moderator information","typeName":"IRedditCommunityCommunityModerator"},"authorizationRoles":["admin","communityModerator"],"name":"update","path":"/redditCommunity/admin/redditCommunityCommunityModerators/{id}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator must exist before the community moderator record can be updated"}]},{"specification":"This operation updates an existing community moderator record in the Reddit-like community platform. It operates on the reddit_community_community_moderators table from the Prisma schema which links members to communities and defines their moderator roles and permissions within those communities. The update operation allows modification of the moderator's assigned date and timestamps, enabling changes to their role status. The record is identified by its unique ID (UUID). The operation requires the moderator ID as the path parameter and an update request body conforming to IRedditCommunityCommunityModerator.IUpdate.","description":"Update an existing community moderator's information by their unique ID. This operation modifies properties such as the assigned_at timestamp, which reflects when the member was assigned as a moderator for the community. It ensures updated_at timestamp is also refreshed upon modification. Only authorized roles can perform this update.\n\nThis operation is directly associated with the reddit_community_community_moderators table, which maps members to communities with specific moderator roles. It impacts system authorization logic regarding community management.\n\nValidation enforces the UUID format for the ID path parameter and ensures request body data complies with the IRedditCommunityCommunityModerator.IUpdate schema, reflecting possible updates to the assigned_at and audit-related timestamps.\n\nRelated operations include listing moderators, creating new moderator assignments, and deleting existing ones. Proper error handling ensures attempts to update non-existent records return meaningful errors.\n\nThis operation requires authentication and appropriate authorization roles such as community moderator or admin to perform changes.","summary":"Update a community moderator by ID","parameters":[{"name":"id","description":"Unique identifier of the community moderator to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating a community moderator","typeName":"IRedditCommunityCommunityModerator.IUpdate"},"responseBody":{"description":"Updated community moderator information","typeName":"IRedditCommunityCommunityModerator"},"authorizationRoles":["admin","communityModerator"],"name":"update","path":"/redditCommunity/communityModerator/redditCommunityCommunityModerators/{id}","method":"put","authorizationRole":"communityModerator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"A community moderator record must exist before it can be updated. This prerequisite ensures the community moderator assignment linking a member to a community exists before modifications."}]},{"specification":"This operation deletes an existing community moderator record from the Reddit-like community platform. It operates on the reddit_community_community_moderators table from the Prisma schema, which links members to communities and defines their moderator roles and permissions. The delete operation permanently removes the record identified by its unique ID (UUID) from the database.\n\nThe path parameter is the moderator ID. No request body is needed. No response body is provided as the operation results in a permanent deletion.\n\nAuthorization roles like admin or communityModerator are required to restrict this operation to privileged users. Proper error handling must address attempts to delete non-existent moderators.\n\nThis operation influences access control and community management workflows by removing moderator privileges for the associated user and community.","description":"Delete a community moderator by ID, permanently removing their assignment from a community. This operation completely removes the record from the database and cannot be undone.\n\nIt requires the unique UUID of the community moderator in the path parameter.\n\nAuthorization is restricted to roles such as admin and communityModerator. Attempting to delete a non-existent ID will result in an error.\n\nThis operation affects community moderation and user role management.","summary":"Delete a community moderator by ID","parameters":[{"name":"id","description":"Unique identifier of the community moderator to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","communityModerator"],"name":"erase","path":"/redditCommunity/admin/redditCommunityCommunityModerators/{id}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator must exist before it can be deleted"}]},{"specification":"This operation deletes an existing community moderator record from the Reddit-like community platform. It operates on the reddit_community_community_moderators table from the Prisma schema, which links members to communities and defines their moderator roles and permissions. The delete operation permanently removes the record identified by its unique ID (UUID) from the database.\n\nThe path parameter is the moderator ID. No request body is needed. No response body is provided as the operation results in a permanent deletion.\n\nAuthorization roles like admin or communityModerator are required to restrict this operation to privileged users. Proper error handling must address attempts to delete non-existent moderators.\n\nThis operation influences access control and community management workflows by removing moderator privileges for the associated user and community.","description":"Delete a community moderator by ID, permanently removing their assignment from a community. This operation completely removes the record from the database and cannot be undone.\n\nIt requires the unique UUID of the community moderator in the path parameter.\n\nAuthorization is restricted to roles such as admin and communityModerator. Attempting to delete a non-existent ID will result in an error.\n\nThis operation affects community moderation and user role management.","summary":"Delete a community moderator by ID","parameters":[{"name":"id","description":"Unique identifier of the community moderator to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","communityModerator"],"name":"erase","path":"/redditCommunity/communityModerator/redditCommunityCommunityModerators/{id}","method":"delete","authorizationRole":"communityModerator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator must exist before it can be deleted"}]},{"specification":"This operation retrieves a paginated list of redditCommunity admin users, providing administrative user information for platform management. It allows for complex filtering and sorting of admin records, supporting backend administrative interfaces to manage admin accounts securely.","description":"Retrieve a filtered and paginated list of redditCommunity admin users from the system. This operation supports advanced search criteria, allowing administrators to query admin users based on attributes such as unique email addresses and administrative levels.\n\nThe endpoint supports pagination parameters to limit the result set, facilitating efficient data browsing in administrative consoles. Sorting options enable ordering by creation date or admin level.\n\nSecurity considerations restrict access to authorized system administrators only, ensuring sensitive administrative information is well protected. This operation fetches active admin records including those with soft deletion data for auditing purposes.\n\nThis operation interacts with the \"reddit_community_admins\" table in the Prisma schema, adhering to database constraints on uniqueness of email addresses and indexing based on creation and admin level timestamps.","summary":"Retrieve paginated list of redditCommunity admins","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for redditCommunity admins","typeName":"IRedditCommunityAdmin.IRequest"},"responseBody":{"description":"Paginated list of redditCommunity admin users matching the search criteria","typeName":"IPageIRedditCommunityAdmin"},"authorizationRoles":["admin"],"name":"index","path":"/redditCommunity/admin/redditCommunityAdmins","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific redditCommunity admin user by their unique identifier. It allows secure retrieval of administrative user details required for management and audit purposes.\n\nThe operation validates the admin user ID in UUID format and fetches corresponding user data including email, administrative level, timestamps, and soft deletion status information. Access is limited to system administrators to maintain confidentiality.\n\nThe operation directly interfaces with the \"reddit_community_admins\" table in the Prisma schema, providing a single record response consistent with database constraints and indexing.","description":"Retrieve detailed information of a specific redditCommunity admin identified by a UUID-compliant ID. This operation is restricted to system administrators and returns the following data fields: unique identifier, email address, password hash, administrative level, creation timestamp, last update timestamp, and soft deletion timestamp if applicable.\n\nIt ensures secure access, precise retrieval of admin records, and maintains audit completeness by including soft deletion status.\n\nThis operation targets the \"reddit_community_admins\" table from the Prisma schema, guaranteeing accurate data extraction consistent with schema constraints and indexes.","summary":"Retrieve detailed information of a specific redditCommunity admin by ID","parameters":[{"name":"id","description":"Unique identifier of the target redditCommunity admin","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed redditCommunity admin user information","typeName":"IRedditCommunityAdmin"},"authorizationRoles":["admin"],"name":"at","path":"/redditCommunity/admin/redditCommunityAdmins/{id}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the information of an existing admin user within the redditCommunity platform's Admins table in the Prisma schema. It facilitates modification of admin details such as email, password hash, and administrative privilege level. The operation must validate the provided admin ID as a UUID and ensure consistency with unique email constraints in the admins table.","description":"Update the details of an existing admin user identified by their unique ID. The admin user can have their email, password hash, and administrative level updated. This operation enforces data integrity by validating the admin's UUID and uniqueness of the email address. Only a user with appropriate administrative permissions (\"admin\") should be allowed to perform this operation. Concurrency and soft-deletion are handled as per the underlying database constraints and business rules.","summary":"Update admin user information by admin ID","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the admin user to update"}],"requestBody":{"description":"Updated admin user data","typeName":"IRedditCommunityAdmin.IUpdate"},"responseBody":{"description":"Updated admin user information","typeName":"IRedditCommunityAdmin"},"authorizationRoles":["admin"],"name":"update","path":"/redditCommunity/admin/redditCommunityAdmins/{id}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Admin user must exist before updating their information"}]},{"specification":"This operation deletes an existing admin user record from the redditCommunity platform's Admins table in the Prisma schema. It permanently removes the admin user identified by the provided ID from the database. Appropriate authorization to perform user deletions must be enforced to prevent unauthorized removal. This operation performs a hard delete as the Prisma schema's admins table does not explicitly specify soft delete semantics for user accounts.","description":"Permanently delete an admin user by their unique ID. This deletion cannot be undone and the admin user record will be removed from the system entirely. Only authorized users with admin privileges should be allowed to execute this operation. The system enforces hard deletion and does not perform soft deletion for admin accounts.","summary":"Delete admin user by admin ID","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the admin user to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/redditCommunity/admin/redditCommunityAdmins/{id}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Admin user must exist before it can be deleted"}]},{"specification":"This operation retrieves a filtered and paginated list of Reddit-like community platform communities with support for advanced search, filtering, sorting, and pagination. It operates on the reddit_community_communities table defined in the Prisma schema, which manages user-created communities with unique names, optional description, creation and last update timestamps, and a soft delete timestamp. The operation accepts search criteria including community name partial match, description text, creation date ranges, and sorting by creation date or name. It returns a paginated list of community summaries with essential details suitable for display in lists. The authorization requires authenticated member role for community browsing and search capabilities.","path":"/redditCommunity/member/communities","method":"patch","summary":"Search and retrieve paginated list of communities","description":"Retrieve a filtered and paginated list of user communities from the reddit_community_communities table. The operation supports advanced filters including partial matching on community names, optional description keywords, and filtering communities created within certain date ranges.\n\nSorting options include ascending or descending order by community name and creation date to help users find communities by popularity, recency, or alphabetical order.\n\nSecurity considerations restrict these operations to authenticated members to prevent abuse and ensure privacy compliance. Maintainers must validate all inputs to avoid injection and ensure system stability.\n\nThe response includes concise community summaries optimized for display in UI lists, including community ID, name, description, and creation date. Paginated results allow clients to load communities incrementally for performance.","parameters":[],"requestBody":{"description":"Search and pagination criteria for communities","typeName":"IRedditCommunityCommunity.IRequest"},"responseBody":{"description":"Paginated community summaries matching filter criteria","typeName":"IPageIRedditCommunityCommunity.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information of a specific community by its unique identifier from the reddit_community_communities table. The community entity includes unique name, optional description, creation and update timestamps, and a soft delete status. This operation returns the community details including relations such as moderators and subscriptions if required.\n\nSecurity considerations limit access to authenticated members to view private or member-only information if applicable. Validation ensures the community ID is a valid UUID.\n\nThe response returns the full community entity including all attributes and relations as defined in the Prisma schema for comprehensive detail display.","path":"/redditCommunity/member/communities/{communityId}","method":"get","summary":"Retrieve detailed community information by ID","description":"Retrieve full details for a single community entity identified by communityId from the reddit_community_communities table. The community entity includes unique name, description, creation and last updating timestamps, and soft deletion timestamp.\n\nAccess is limited to authenticated members to ensure information security and controlled data exposure.\n\nInput validation confirms the communityId parameter is a valid UUID.\n\nThe response contains detailed community information suitable for profile or management views, including community metadata and associated moderators and subscriptions.\n\nErrors are handled gracefully with standard invalid ID and not found responses.","parameters":[{"name":"communityId","description":"Unique community identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed Reddit-like community entity","typeName":"IRedditCommunityCommunity"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must be created before it can be retrieved by its ID"}]},{"specification":"This operation enables authenticated members of the redditCommunity platform to create new user communities. The operation affects the 'reddit_community_communities' table in the Prisma schema, representing user-created topic groups. It requires uniqueness of the community name following the naming rules (3-50 alphanumeric and underscores) and accepts an optional description. On creation, metadata such as creation and update timestamps are recorded automatically by the system. This operation enforces input validation on name and description according to schema and business constraints. Authorization requires the user to have the 'member' role to create communities.","description":"Create a new user community in the redditCommunity platform. This endpoint allows authenticated members to specify a unique community name adhering to platform naming rules and an optional descriptive text.\n\nThe operation ensures the community name is unique across the system and complies with length and character restrictions. The server records metadata such as creation and update timestamps automatically.\n\nSecurity requires the user to be a member (authenticated) and authorized to create communities. Requests from non-members or guests are forbidden.\n\nThis operation interacts with the 'reddit_community_communities' table in the database, storing all relevant data about the newly created community. Validation errors are returned if uniqueness or format constraints fail.\n\nClients should provide valid name and optionally the description in the request body. The response includes the detailed community entity with database-generated fields.","summary":"Create a new redditCommunity user community","parameters":[],"requestBody":{"description":"The creation data for a new community, including required name and optional description","typeName":"IRedditCommunityCommunity.ICreate"},"responseBody":{"description":"Details of the newly created community","typeName":"IRedditCommunityCommunity"},"authorizationType":null,"authorizationRole":"member","prerequisites":[],"path":"/redditCommunity/member/communities","method":"post","name":"createCommunity"},{"specification":"This operation allows modification of existing community information by authorized community moderators or members. Targets the 'reddit_community_communities' table in Prisma schema representing user-created communities. Modifiable fields include the community description only; the community name cannot be changed after creation. Validation rules ensure description length compliance and proper community identification via unique identifier.\n\nSecurity considerations require the requester to have 'member' role; further access control such as moderator rights is expected in business logic implementation. The operation updates timestamps automatically and maintains data integrity.\n\nClients must provide the communityId as path parameter and update information in the request body. The response returns the updated community entity with all details.","description":"Update existing community information on the redditCommunity platform. This endpoint allows authorized members, such as community moderators, to edit the description of a specified community.\n\nThe community's name is immutable and cannot be changed after creation. Partial updates to the description are supported.\n\nAuthorization requires the member role; further domain-specific permission checks should be enforced by business logic.\n\nThe server manages update timestamps and ensures referential integrity. On success, updated details of the community are returned.\n\nThe path parameter 'communityId' uniquely identifies the target community for update.","summary":"Update description of a redditCommunity user community","parameters":[{"name":"communityId","description":"Unique identifier of the community to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the community, allowing modification of description field only","typeName":"IRedditCommunityCommunity.IUpdate"},"responseBody":{"description":"Details of the updated community","typeName":"IRedditCommunityCommunity"},"authorizationType":null,"authorizationRole":"member","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before it can be updated"}],"path":"/redditCommunity/member/communities/{communityId}","method":"put","name":"updateCommunity"},{"specification":"This DELETE operation permanently removes a community from the reddit_community_communities table in the RedditCommunity database. It requires the unique community ID to identify the community to delete. The operation executes a hard delete because the schema includes a soft delete 'deleted_at' field but this endpoint explicitly deletes the community record. Deleting a community also cascades related data deletion such as posts, moderators, and subscriptions, as per Prisma cascade settings. Appropriate authorization must be enforced to allow only admins or eligible users to perform this operation. This operation facilitates community lifecycle management by allowing removal of communities that are obsolete, inactive, or violate terms.","description":"This API endpoint deletes a specific community permanently from the system database. It requires the unique community identifier as a path parameter. When invoked, it will delete the corresponding record from the 'reddit_community_communities' table, including cascading deletion of related posts, moderators, and subscriptions.\n\nAuthorization is critical; only users with admin privileges or community management rights may execute this operation. The deletion is irreversible, and all associated data linked via cascade rules will also be removed, ensuring database consistency.\n\nUse this API when a community must be completely removed, for example, due to policy violations or community dissolution. Clients should handle error responses for non-existent community IDs or authorization failures properly.","summary":"Delete a specific redditCommunity community","parameters":[{"name":"communityId","description":"Unique identifier of the target community to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/redditCommunity/admin/communities/{communityId}","method":"delete","name":"eraseCommunity","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must be created before it can be deleted."}]},{"specification":"This PATCH operation retrieves and manages community moderators for a specific community from the reddit_community_community_moderators table in the RedditCommunity database. It allows searching, pagination, and filtering of moderators assigned to the community identified by communityId. The operation supports returning summarized or detailed moderator information.\n\nSecurity requirements ensure that only authorized users, such as admins or community managers, can access moderator data. The operation addresses community management workflows involving moderator assignment and oversight.\n\nThis facilitates administration tasks such as viewing all moderators of a community and managing their roles if combined with other endpoints for addition or removal.","description":"Retrieve a paginated list of moderators for a specific redditCommunity community. The community is specified by the 'communityId' path parameter.\n\nThis operation supports advanced search and filtering through request body parameters defined in 'IRedditCommunityCommunityModerator.IRequest'. It returns a paginated response of community moderator summaries.\n\nAccess to this API is restricted to admin users or appropriate community management roles to ensure security.\n\nClients should utilize this endpoint to display or manage moderators for a given community within admin dashboards or community control panels.","summary":"Search and retrieve community moderators of a redditCommunity community","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for community moderators filtering","typeName":"IRedditCommunityCommunityModerator.IRequest"},"responseBody":{"description":"Paginated list of community moderator summaries","typeName":"IPageIRedditCommunityCommunityModerator.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"patch","name":"indexCommunityModerators","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must be created before retrieving its moderators"},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator assignments must exist before searching or retrieving them"}]},{"specification":"This operation retrieves a specific community moderator entity by its unique identifier for a given community. It queries the reddit_community_community_moderators table in the Prisma schema, which links a member with a community to define moderation roles. The operation requires the community ID and the moderator ID as path parameters, both UUIDs, to fetch the detailed moderator record including assigned timestamps and references to member and community entities. This allows clients to view the detailed information of a particular moderator within a community context.","description":"Retrieve detailed information about a community moderator within a specific community by their unique identifier.\n\nThis operation accesses the reddit_community_community_moderators table, where moderators are linked to communities and users (members). It includes information such as the moderator's member ID, community ID, assignment date, and auditing timestamps.\n\nAuthorization Roles:\nThis endpoint is accessible to users with administrative privileges and community moderators themselves. Ensuring security, only authorized users can access moderation details.\n\nParameters:\n- communityId: The unique identifier of the community where the moderator serves.\n- moderatorId: The unique identifier of the moderator within that community.\n\nBehavior:\n- Returns the community moderator record if found and accessible.\n- If the moderator or community does not exist, an appropriate error is returned.\n- No request body is required.\n- The response returns the full community moderator data as per the reddit_community_community_moderators Prisma model.","summary":"Get a specific community moderator by ID","parameters":[{"name":"communityId","description":"Unique identifier of the community","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Unique identifier of the community moderator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Community moderator detailed information","typeName":"IRedditCommunityCommunityModerator"},"authorizationRoles":["admin","communityModerator"],"name":"at","path":"/redditCommunity/admin/communities/{communityId}/communityModerators/{moderatorId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before accessing its moderators."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Moderator assignment must exist before retrieving its details."}]},{"specification":"This operation retrieves a specific community moderator entity by its unique identifier for a given community. It queries the reddit_community_community_moderators table in the Prisma schema, which links a member with a community to define moderation roles. The operation requires the community ID and the moderator ID as path parameters, both UUIDs, to fetch the detailed moderator record including assigned timestamps and references to member and community entities. This allows clients to view the detailed information of a particular moderator within a community context.","description":"Retrieve detailed information about a community moderator within a specific community by their unique identifier.\n\nThis operation accesses the reddit_community_community_moderators table, where moderators are linked to communities and users (members). It includes information such as the moderator's member ID, community ID, assignment date, and auditing timestamps.\n\nAuthorization Roles:\nThis endpoint is accessible to users with administrative privileges and community moderators themselves. Ensuring security, only authorized users can access moderation details.\n\nParameters:\n- communityId: The unique identifier of the community where the moderator serves.\n- moderatorId: The unique identifier of the moderator within that community.\n\nBehavior:\n- Returns the community moderator record if found and accessible.\n- If the moderator or community does not exist, an appropriate error is returned.\n- No request body is required.\n- The response returns the full community moderator data as per the reddit_community_community_moderators Prisma model.","summary":"Get a specific community moderator by ID","parameters":[{"name":"communityId","description":"Unique identifier of the community","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Unique identifier of the community moderator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Community moderator detailed information","typeName":"IRedditCommunityCommunityModerator"},"authorizationRoles":["admin","communityModerator"],"name":"at","path":"/redditCommunity/communityModerator/communities/{communityId}/communityModerators/{moderatorId}","method":"get","authorizationRole":"communityModerator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before retrieving a specific moderator"},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator must exist before retrieving moderator details"}]},{"specification":"This operation creates a new community moderator assignment linking a member as a moderator to a specific community. It operates on the reddit_community_community_moderators table to add an entry specifying the member ID and community ID, along with assignment and audit timestamps. The operation accepts a request body conforming to the IRedditCommunityCommunityModerator.ICreate DTO schema and does not return a response body. Only users with administrative privileges can perform this creation to ensure controlled assignment of moderation roles.","description":"Assign a member as a community moderator for a specific community.\n\nThis operation creates a new record in the reddit_community_community_moderators table associating a community member as a moderator for a given community. It includes fields such as member ID, community ID, and the timestamp when the assignment was made.\n\nAuthorization Roles:\nOnly users with administrative privileges can assign community moderators to maintain controlled access.\n\nRequest Body:\nThe request body must include member_id and community_id to define the new moderator relationship.\n\nBehavior:\n- Validates that the member and community exist.\n- Creates the new moderator record with timestamps automatically set.\n- Does not return a response body.\n\nErrors:\n- Returns an error if the assignment already exists or if provided IDs are invalid.","summary":"Create a new community moderator assignment","parameters":[{"name":"communityId","description":"Unique identifier of the community where moderator will be assigned","schema":{"type":"string","format":"uuid"}}],"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post","authorizationRole":"admin","authorizationType":null,"requestBody":{"description":"Information to create a new community moderator assignment","typeName":"IRedditCommunityCommunityModerator.ICreate"},"responseBody":null,"authorizationRoles":["admin"],"name":"create","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before assigning a member as moderator."}]},{"specification":"This operation updates a community moderator's assignment information in the reddit_community_community_moderators table. It enables changing fields such as the assigned_at timestamp to reflect updated moderator roles within the specified community. The operation requires the communityId and moderatorId path parameters to uniquely identify the moderator record. Request body data must conform to the IRedditCommunityCommunityModerators.IUpdate DTO schema, containing only fields allowed for updating. Appropriate authorization roles include admin and communityModerator, ensuring only authorized users can perform updates.","path":"/redditCommunity/admin/communities/{communityId}/communityModerators/{moderatorId}","method":"put","summary":"Update a community moderator by ID within a community","description":"Update a community moderator by community ID and moderator ID.\n\nThis API endpoint allows modifying the assignment details of a moderator who belongs to a particular community. This operation strictly works on the reddit_community_community_moderators table.\n\nSecurity guidelines dictate that only users with the admin or community moderator roles have permission to perform this update. The communityId and moderatorId must be valid UUIDs corresponding to existing records.\n\nThe request body adheres to the IRedditCommunityCommunityModerators.IUpdate schema, permitting updates like the assigned_at timestamp.\n\nIf the specified moderator exists, their record is updated accordingly and returned; otherwise, a not found error is returned.\n\nNo deletion or status alteration occurs in this operation, only updates.","parameters":[{"name":"communityId","description":"Target community's ID","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Target moderator's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the community moderator","typeName":"IRedditCommunityCommunityModerators.IUpdate"},"responseBody":{"description":"Updated community moderator record","typeName":"IRedditCommunityCommunityModerators"},"authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator record must be created before it can be updated"},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before a community moderator can be assigned"}],"name":"update"},{"specification":"This operation updates a community moderator's assignment information in the reddit_community_community_moderators table. It enables changing fields such as the assigned_at timestamp to reflect updated moderator roles within the specified community. The operation requires the communityId and moderatorId path parameters to uniquely identify the moderator record. Request body data must conform to the IRedditCommunityCommunityModerators.IUpdate DTO schema, containing only fields allowed for updating. Appropriate authorization roles include admin and communityModerator, ensuring only authorized users can perform updates.","path":"/redditCommunity/communityModerator/communities/{communityId}/communityModerators/{moderatorId}","method":"put","summary":"Update a community moderator by ID within a community","description":"Update a community moderator by community ID and moderator ID.\n\nThis API endpoint allows modifying the assignment details of a moderator who belongs to a particular community. This operation strictly works on the reddit_community_community_moderators table.\n\nSecurity guidelines dictate that only users with the admin or community moderator roles have permission to perform this update. The communityId and moderatorId must be valid UUIDs corresponding to existing records.\n\nThe request body adheres to the IRedditCommunityCommunityModerators.IUpdate schema, permitting updates like the assigned_at timestamp.\n\nIf the specified moderator exists, their record is updated accordingly and returned; otherwise, a not found error is returned.\n\nNo deletion or status alteration occurs in this operation, only updates.","parameters":[{"name":"communityId","description":"Target community's ID","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Target moderator's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the community moderator","typeName":"IRedditCommunityCommunityModerators.IUpdate"},"responseBody":{"description":"Updated community moderator record","typeName":"IRedditCommunityCommunityModerators"},"authorizationType":null,"authorizationRole":"communityModerator","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before updating a community moderator within it."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Community moderator must exist before it can be updated."}],"name":"update"},{"specification":"This operation deletes a community moderator assignment from the reddit_community_community_moderators table, revoking their moderator privileges within the specified community. It requires communityId and moderatorId as path parameters identifying the community and moderator, respectively. This hard delete removes the record permanently. Only users with roles admin or communityModerator have authorization. No response body is returned on success, and errors are raised if the specified records do not exist or user lacks permission.","path":"/redditCommunity/admin/communities/{communityId}/communityModerators/{moderatorId}","method":"delete","summary":"Delete a community moderator assignment","description":"Delete a community moderator by community ID and moderator ID.\n\nThis API endpoint securely deletes the moderator relationship between a member and a community, effectively revoking their moderator status. It targets the reddit_community_community_moderators table.\n\nAuthorization is limited to admin and communityModerator roles. Path parameters communityId and moderatorId must be valid UUIDs.\n\nThis is a hard delete operation; no response content is returned.\n\nClients should handle potential errors such as non-existing records gracefully.\n","parameters":[{"name":"communityId","description":"Target community's ID","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Target moderator's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"The community moderator assignment must exist before it can be deleted."},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The community must exist before a moderator assignment can be deleted."}],"name":"erase"},{"specification":"This operation deletes a community moderator assignment from the reddit_community_community_moderators table, revoking their moderator privileges within the specified community. It requires communityId and moderatorId as path parameters identifying the community and moderator, respectively. This hard delete removes the record permanently. Only users with roles admin or communityModerator have authorization. No response body is returned on success, and errors are raised if the specified records do not exist or user lacks permission.","path":"/redditCommunity/communityModerator/communities/{communityId}/communityModerators/{moderatorId}","method":"delete","summary":"Delete a community moderator assignment","description":"Delete a community moderator by community ID and moderator ID.\n\nThis API endpoint securely deletes the moderator relationship between a member and a community, effectively revoking their moderator status. It targets the reddit_community_community_moderators table.\n\nAuthorization is limited to admin and communityModerator roles. Path parameters communityId and moderatorId must be valid UUIDs.\n\nThis is a hard delete operation; no response content is returned.\n\nClients should handle potential errors such as non-existing records gracefully.\n","parameters":[{"name":"communityId","description":"Target community's ID","schema":{"type":"string","format":"uuid"}},{"name":"moderatorId","description":"Target moderator's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityModerator","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before a moderator assignment can be deleted."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"Moderator must be assigned to the community before their assignment can be deleted."}],"name":"erase"},{"specification":"This operation retrieves a paginated list of posts within a specified community, allowing clients to filter, sort, and paginate through the posts efficiently. It operates on the reddit_community_posts table from the Prisma schema, which stores user-generated posts that can be text, link, or image types. The operation supports advanced search and sorting parameters like post type, date ranges, and keyword searching in titles. It respects community boundaries identified by communityId. The data includes post metadata such as titles, types, creation timestamps, and belongs to a specific community. Pagination and sorting support ensures usability for large datasets.","description":"Retrieve a filtered and paginated list of posts belonging to the specified community. This operation enables clients to obtain posts of various types including text, link, and image posts, filtered by criteria like post type or date range.\n\nThe operation interacts with the reddit_community_posts table, which stores posts authored by members or guests. Each post belongs to one community, identified here by the communityId path parameter.\n\nSecurity considerations include restricting access to community posts to valid and authorized users as per system policy, although viewing community posts is mostly public. Proper validation of the communityId parameter is enforced.\n\nPagination parameters allow clients to specify page size and index, with sorting options such as newest first, top votes, and hot topics. This supports efficient browsing and avoids performance issues with large data volumes.\n\nThe response includes paginated post summary objects, optimized for listing views with essential details such as title, post_type, and timestamps. Clients may need to request detail operations for full post information.","summary":"Retrieve list of posts in a community with filtering and pagination","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post filtering, search, pagination, and sorting criteria","typeName":"IRedditCommunityPost.IRequest"},"responseBody":{"description":"Paginated posts summary list matching search criteria","typeName":"IPageIRedditCommunityPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/redditCommunity/communities/{communityId}/posts","method":"patch","parametersRequired":true,"prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before posts can be listed or filtered in the community."}]},{"specification":"This operation retrieves detailed information for a specific post within a community, identified by communityId and postId path parameters. The data corresponds to the reddit_community_posts table from the Prisma schema, which represents user posts authored by members or guests and linked to single communities. The operation returns complete post data including content (text, link, image), status flags, timestamps, and associated metadata.\n\nSecurity considerations include ensuring that only authorized users, based on the community visibility and post status, access post details.\n\nThis read-only operation allows clients to present full post content and properties necessary for display and interaction. It complements the paginated list retrieval and supports detailed post viewing workflows.","description":"Get detailed information about a specific post identified by postId within the community identified by communityId. This includes all relevant post content fields (text, link, image), metadata like creation and update timestamps, author references, and status information.\n\nThe post data is stored in the reddit_community_posts table and linked to the community and author entities. Only authorized or public-allowed clients can access this data.\n\nThis operation is essential for showing post details in user interfaces and complements list retrieval operations that provide summarized views.\n\nValidation of both communityId and postId path parameters ensures proper data retrieval and access control.","summary":"Retrieve detailed information of a single community post","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post details","typeName":"IRedditCommunityPost"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/redditCommunity/communities/{communityId}/posts/{postId}","method":"get","parametersRequired":true,"prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community identified by communityId must be created before retrieving posts in the community."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post identified by postId must be created within the community before it can be retrieved."}]},{"specification":"This operation creates a new post within a specified community in the redditCommunity platform. It corresponds to the reddit_community_posts table in the Prisma schema which stores posts authored by either members or guests. The post can be of three types: text, link, or image, with corresponding content fields. The operation validates the community context via the communityId path parameter and requires the post creation data including type, title, and the appropriate content field. User roles permitted to perform this operation must be authenticated members. The operation creates a new record linked to the specified community, with timestamps for creation and updates managed automatically. This ensures posts are properly categorized, attributed, and validated according to business rules.","path":"/redditCommunity/member/communities/{communityId}/posts","method":"post","summary":"Create a new post in a community","description":"Create a new post within the specified community. Posts must have one of the three supported types: 'text', 'link', or 'image'.\n\nFor text posts, a non-empty body_text up to 10,000 characters is required.\nFor link posts, a valid link_url must be specified.\nFor image posts, an image_url must be provided representing the single image.\n\nPost titles must not exceed 300 characters.\n\nAuthorization requires the user to be an authenticated member. The post will be linked to the community specified by the communityId path parameter.\n\nThe system records creation and update timestamps automatically and supports soft deletion.\n\nThis operation validates inputs and returns the created post information.\n\nUsers can later update or delete their posts within allowed business rules.\n\nUsers cannot create posts as guests or admins directly; hence, the operation restricts roles accordingly.\n\nErrors will occur if communityId does not exist or if required fields are missing or invalid.","parameters":[{"name":"communityId","in":"path","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new post in a community","typeName":"IRedditCommunityPosts.ICreate"},"responseBody":{"description":"The newly created post information","typeName":"IRedditCommunityPosts"},"authorizationType":null,"authorizationRole":"member","name":"createPost","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community identified by communityId must exist before creating a post in it."}]},{"specification":"This operation updates an existing post identified by postId within a specified community identified by communityId. It corresponds to the reddit_community_posts table in the Prisma schema. The update permits modification of the post's content fields including title, body_text, link_url, and image_url as applicable to the post_type. This operation requires the community and post IDs as path parameters and an update request body encompassing the updatable fields.\n\nAuthorization is required for authenticated members who are the original authors or have moderation rights. The data will be validated against post type rules, including title length and content presence.\n\nThe operation updates the post record, applying changes and updating the last updated timestamp.\n\nUpon success, the operation returns the updated post data.\n\nValidation errors occur if IDs are invalid, if the community-post association does not exist, or if input data violates business constraints (e.g., post type content requirements).\n\nSoft deletion status remains unaffected in this update.","path":"/redditCommunity/member/communities/{communityId}/posts/{postId}","method":"put","summary":"Update an existing post in a community","description":"Update an existing post in a specified community. The update allows modifying the post's title, text body, link URL, or image URL depending on the post type.\n\nOnly authenticated members who are authorized can update posts.\n\nThe community and post are identified by their respective UUIDs provided in the path parameters.\n\nThe operation enforces validation rules consistent with post type and content limits.\n\nOn success, the updated post information is returned.\n\nErrors occur if the post does not exist in the community, if the user lacks permission, or if the input fails validation.","parameters":[{"name":"communityId","in":"path","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","in":"path","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to update a post","typeName":"IRedditCommunityPosts.IUpdate"},"responseBody":{"description":"The updated post information","typeName":"IRedditCommunityPosts"},"authorizationType":null,"authorizationRole":"member","name":"updatePost","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before post can be updated within it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must be created before it can be updated."}]},{"specification":"This operation permanently deletes a specific post within a community using the reddit_community_posts table. It requires path parameters communityId and postId as UUIDs to uniquely identify the target community and post. Authorized roles for this endpoint include authenticated members ('member'), community moderators ('communityModerator'), and system administrators ('admin'). The operation performs a hard delete, permanently removing the post record and cascading deletion of related comments and votes to maintain database integrity. The endpoint does not require a request body and does not return any content upon successful deletion.","path":"/redditCommunity/member/communities/{communityId}/posts/{postId}","method":"delete","summary":"Permanently delete a post from a community","description":"Permanently deletes the post identified by the postId within the context of the specified communityId.\n\nThe operation ensures data integrity by cascading deletions to related votes and comments associated with the post. Only authorized users such as the post author (member role), community moderators for the associated community, or admins may perform this operation.\n\nThere is no request body for this operation.\n\nNo content is returned in the response after successful deletion.\n\nErrors may be returned if the community or post does not exist, or if the user lacks proper authorization.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"postId","description":"Unique identifier of the post","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","communityModerator","admin"],"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before a post can be deleted within it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must exist before it can be deleted."}]},{"specification":"This operation permanently deletes a specific post within a community using the reddit_community_posts table. It requires path parameters communityId and postId as UUIDs to uniquely identify the target community and post. Authorized roles for this endpoint include authenticated members ('member'), community moderators ('communityModerator'), and system administrators ('admin'). The operation performs a hard delete, permanently removing the post record and cascading deletion of related comments and votes to maintain database integrity. The endpoint does not require a request body and does not return any content upon successful deletion.","path":"/redditCommunity/communityModerator/communities/{communityId}/posts/{postId}","method":"delete","summary":"Permanently delete a post from a community","description":"Permanently deletes the post identified by the postId within the context of the specified communityId.\n\nThe operation ensures data integrity by cascading deletions to related votes and comments associated with the post. Only authorized users such as the post author (member role), community moderators for the associated community, or admins may perform this operation.\n\nThere is no request body for this operation.\n\nNo content is returned in the response after successful deletion.\n\nErrors may be returned if the community or post does not exist, or if the user lacks proper authorization.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"postId","description":"Unique identifier of the post","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","communityModerator","admin"],"authorizationRole":"communityModerator","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The community identified by communityId must exist before the post can be deleted."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post identified by postId must exist and be created before it can be deleted."}]},{"specification":"This operation permanently deletes a specific post within a community using the reddit_community_posts table. It requires path parameters communityId and postId as UUIDs to uniquely identify the target community and post. Authorized roles for this endpoint include authenticated members ('member'), community moderators ('communityModerator'), and system administrators ('admin'). The operation performs a hard delete, permanently removing the post record and cascading deletion of related comments and votes to maintain database integrity. The endpoint does not require a request body and does not return any content upon successful deletion.","path":"/redditCommunity/admin/communities/{communityId}/posts/{postId}","method":"delete","summary":"Permanently delete a post from a community","description":"Permanently deletes the post identified by the postId within the context of the specified communityId.\n\nThe operation ensures data integrity by cascading deletions to related votes and comments associated with the post. Only authorized users such as the post author (member role), community moderators for the associated community, or admins may perform this operation.\n\nThere is no request body for this operation.\n\nNo content is returned in the response after successful deletion.\n\nErrors may be returned if the community or post does not exist, or if the user lacks proper authorization.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"postId","description":"Unique identifier of the post","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","communityModerator","admin"],"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The community identified by communityId must exist before the post can be deleted."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post identified by postId must exist and be created before it can be deleted."}]},{"specification":"Retrieve a paginated list of comments for a specified post using the reddit_community_comments table. This operation accepts filtering, sorting, and pagination parameters in the request body defined as IRedditCommunityComment.IRequest. The response contains a paginated summary list of comments conforming to IPageIRedditCommunityComment.ISummary. Access is restricted to roles 'member' and 'communityModerator'. The targeted post is identified by the path parameter postId (UUID).","path":"/redditCommunity/member/posts/{postId}/comments","method":"patch","summary":"List comments of a post with filtering and pagination","description":"Retrieves a filtered, sorted, and paginated list of comments for the post identified by postId.\n\nComments are represented in the reddit_community_comments table and include data such as author identity, creation date, and nesting via parent_comment_id.\n\nOnly authenticated users with roles 'member' or 'communityModerator' can access this endpoint.\n\nReturns paginated comment summaries matching the specified criteria.\n\nErrors are returned if the specified post does not exist or the user lacks permissions.","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Filtering and pagination criteria for post comments","typeName":"IRedditCommunityComment.IRequest"},"responseBody":{"description":"Paginated list of comment summaries matching criteria","typeName":"IPageIRedditCommunityComment.ISummary"},"authorizationRoles":["member","communityModerator"],"authorizationRole":"member","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must exist before comments can be listed for it"},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"Comments must be created before they can be listed and filtered for the target post"}]},{"specification":"Retrieve a paginated list of comments for a specified post using the reddit_community_comments table. This operation accepts filtering, sorting, and pagination parameters in the request body defined as IRedditCommunityComment.IRequest. The response contains a paginated summary list of comments conforming to IPageIRedditCommunityComment.ISummary. Access is restricted to roles 'member' and 'communityModerator'. The targeted post is identified by the path parameter postId (UUID).","path":"/redditCommunity/communityModerator/posts/{postId}/comments","method":"patch","summary":"List comments of a post with filtering and pagination","description":"Retrieves a filtered, sorted, and paginated list of comments for the post identified by postId.\n\nComments are represented in the reddit_community_comments table and include data such as author identity, creation date, and nesting via parent_comment_id.\n\nOnly authenticated users with roles 'member' or 'communityModerator' can access this endpoint.\n\nReturns paginated comment summaries matching the specified criteria.\n\nErrors are returned if the specified post does not exist or the user lacks permissions.","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Filtering and pagination criteria for post comments","typeName":"IRedditCommunityComment.IRequest"},"responseBody":{"description":"Paginated list of comment summaries matching criteria","typeName":"IPageIRedditCommunityComment.ISummary"},"authorizationRoles":["member","communityModerator"],"authorizationRole":"communityModerator","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must exist before comments can be listed for it"},{"endpoint":{"path":"/redditCommunity/communityModerator/posts/{postId}/comments","method":"post"},"description":"Comments must be created before they can be listed and filtered for the target post"}]},{"specification":"This operation is associated with the reddit_community_comments table from the Prisma schema. It retrieves detailed information of a specific comment identified by its commentId belonging to a post identified by postId. The operation supports viewing of nested comment details authored by either members or guests, including content and timestamps. Authorization roles include any authenticated member, community moderators, and admins who may need to view comment details for moderation purposes.","path":"/redditCommunity/member/posts/{postId}/comments/{commentId}","method":"get","summary":"Retrieve detailed information for a specific comment on a post.","description":"This GET operation retrieves a specific comment from the redditCommunity platform.\n\nThe comment is identified uniquely by its ID and belongs to a post identified by postId. The returned data includes the comment body text, author information (which may be a member or guest), creation and last updated timestamps, and soft deletion status.\n\nSecurity and permissions allow viewing by authenticated members, community moderators within the post's community, and administrators. Authorization checks should verify the viewer's role and permissions.\n\nThis operation maps precisely to the reddit_community_comments table, with validation ensuring comment existence and proper authorization. If the comment does not exist or is soft deleted, an error response should be provided.\n\nThis operation complements related endpoints that handle comment creation and comment list retrieval for posts.","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information response including author (member or guest), content, timestamps, and soft deletion status.","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before posts can be created in it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must be created before comments can be added to it."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be retrieved by commentId."}]},{"specification":"This operation is associated with the reddit_community_comments table from the Prisma schema. It retrieves detailed information of a specific comment identified by its commentId belonging to a post identified by postId. The operation supports viewing of nested comment details authored by either members or guests, including content and timestamps. Authorization roles include any authenticated member, community moderators, and admins who may need to view comment details for moderation purposes.","path":"/redditCommunity/communityModerator/posts/{postId}/comments/{commentId}","method":"get","summary":"Retrieve detailed information for a specific comment on a post.","description":"This GET operation retrieves a specific comment from the redditCommunity platform.\n\nThe comment is identified uniquely by its ID and belongs to a post identified by postId. The returned data includes the comment body text, author information (which may be a member or guest), creation and last updated timestamps, and soft deletion status.\n\nSecurity and permissions allow viewing by authenticated members, community moderators within the post's community, and administrators. Authorization checks should verify the viewer's role and permissions.\n\nThis operation maps precisely to the reddit_community_comments table, with validation ensuring comment existence and proper authorization. If the comment does not exist or is soft deleted, an error response should be provided.\n\nThis operation complements related endpoints that handle comment creation and comment list retrieval for posts.","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information response including author (member or guest), content, timestamps, and soft deletion status.","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"communityModerator","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must exist before comments can be retrieved or viewed."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"Comment must exist before it can be retrieved and detailed."}]},{"specification":"This operation is associated with the reddit_community_comments table from the Prisma schema. It retrieves detailed information of a specific comment identified by its commentId belonging to a post identified by postId. The operation supports viewing of nested comment details authored by either members or guests, including content and timestamps. Authorization roles include any authenticated member, community moderators, and admins who may need to view comment details for moderation purposes.","path":"/redditCommunity/admin/posts/{postId}/comments/{commentId}","method":"get","summary":"Retrieve detailed information for a specific comment on a post.","description":"This GET operation retrieves a specific comment from the redditCommunity platform.\n\nThe comment is identified uniquely by its ID and belongs to a post identified by postId. The returned data includes the comment body text, author information (which may be a member or guest), creation and last updated timestamps, and soft deletion status.\n\nSecurity and permissions allow viewing by authenticated members, community moderators within the post's community, and administrators. Authorization checks should verify the viewer's role and permissions.\n\nThis operation maps precisely to the reddit_community_comments table, with validation ensuring comment existence and proper authorization. If the comment does not exist or is soft deleted, an error response should be provided.\n\nThis operation complements related endpoints that handle comment creation and comment list retrieval for posts.","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information response including author (member or guest), content, timestamps, and soft deletion status.","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"Post must exist before its comments can be retrieved or accessed."}]},{"specification":"This operation is associated with the reddit_community_comments table in the Prisma schema. It enables authenticated users (members, community moderators, and admins) to create a new comment on a post identified by postId. The input must include the comment content and optionally a parent comment ID for nested replies. The operation validates the comment length and content type according to business rules. The created comment will be associated with the member author and the specified post. Moderators and admins can also create comments on behalf of members. The operation returns the created comment details in the response body.","path":"/redditCommunity/member/posts/{postId}/comments","method":"post","summary":"Create a new comment on a post, optionally as a nested reply.","description":"This POST operation allows authenticated members, community moderators, and admins to create a new comment on a specific post in the redditCommunity platform.\n\nThe request body requires the comment content (body_text) and optionally a parent_comment_id for nested replies, supporting unlimited comment nesting.\n\nAuthorization is restricted to authenticated members, community moderators, and admins, who can create comments either as themselves or on behalf of others within scope.\n\nThe operation enforces validation on comment content length (max 2000 chars) and user permissions.\n\nUpon success, the response returns the detailed created comment including author, timestamps, and content.\n\nThis operation directly ties to the reddit_community_comments table and complements GET operations for comment retrieval and parent post management.","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new redditCommunity comment, including the content and optional parent comment relation.","typeName":"IRedditCommunityComment.ICreate"},"responseBody":{"description":"Detailed information of the created comment.","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The community containing the post must exist before a comment can be created on a post in it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must exist before a comment can be created on it."}]},{"specification":"This operation is associated with the reddit_community_comments table in the Prisma schema. It enables authenticated users (members, community moderators, and admins) to create a new comment on a post identified by postId. The input must include the comment content and optionally a parent comment ID for nested replies. The operation validates the comment length and content type according to business rules. The created comment will be associated with the member author and the specified post. Moderators and admins can also create comments on behalf of members. The operation returns the created comment details in the response body.","path":"/redditCommunity/communityModerator/posts/{postId}/comments","method":"post","summary":"Create a new comment on a post, optionally as a nested reply.","description":"This POST operation allows authenticated members, community moderators, and admins to create a new comment on a specific post in the redditCommunity platform.\n\nThe request body requires the comment content (body_text) and optionally a parent_comment_id for nested replies, supporting unlimited comment nesting.\n\nAuthorization is restricted to authenticated members, community moderators, and admins, who can create comments either as themselves or on behalf of others within scope.\n\nThe operation enforces validation on comment content length (max 2000 chars) and user permissions.\n\nUpon success, the response returns the detailed created comment including author, timestamps, and content.\n\nThis operation directly ties to the reddit_community_comments table and complements GET operations for comment retrieval and parent post management.","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new redditCommunity comment, including the content and optional parent comment relation.","typeName":"IRedditCommunityComment.ICreate"},"responseBody":{"description":"Detailed information of the created comment.","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"communityModerator","name":"create","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must be created before comments can be added to it."}]},{"specification":"This operation is associated with the reddit_community_comments table in the Prisma schema. It enables authenticated users (members, community moderators, and admins) to create a new comment on a post identified by postId. The input must include the comment content and optionally a parent comment ID for nested replies. The operation validates the comment length and content type according to business rules. The created comment will be associated with the member author and the specified post. Moderators and admins can also create comments on behalf of members. The operation returns the created comment details in the response body.","path":"/redditCommunity/admin/posts/{postId}/comments","method":"post","summary":"Create a new comment on a post, optionally as a nested reply.","description":"This POST operation allows authenticated members, community moderators, and admins to create a new comment on a specific post in the redditCommunity platform.\n\nThe request body requires the comment content (body_text) and optionally a parent_comment_id for nested replies, supporting unlimited comment nesting.\n\nAuthorization is restricted to authenticated members, community moderators, and admins, who can create comments either as themselves or on behalf of others within scope.\n\nThe operation enforces validation on comment content length (max 2000 chars) and user permissions.\n\nUpon success, the response returns the detailed created comment including author, timestamps, and content.\n\nThis operation directly ties to the reddit_community_comments table and complements GET operations for comment retrieval and parent post management.","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new redditCommunity comment, including the content and optional parent comment relation.","typeName":"IRedditCommunityComment.ICreate"},"responseBody":{"description":"Detailed information of the created comment.","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Community must exist before a post can be created within it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must be created before adding comments to it."}]},{"specification":"This operation updates an existing comment under a specific post in the redditCommunity platform. It operates on the reddit_community_comments table from the Prisma schema. The comment can be updated by its author within 24 hours, supporting edits to the comment text (body_text). The operation requires both postId and commentId as path parameters to uniquely identify the comment. The request body allows updating the body_text field of the comment. The response returns the detailed updated comment data including author references, timestamps, and content. The operation is authorized for the member role, ensuring only authenticated users who authored the comment can update it.","description":"Update an existing comment on a post within the redditCommunity platform.\n\nThis operation allows an authenticated member to modify the body text of a comment they authored. The comment is identified by the post ID and comment ID in the path parameters.\n\nOnly the author of the comment, who must be an authenticated member, is permitted to perform this update. The operation ensures the comment exists and belongs to the specified post before applying changes.\n\nThe request requires the new body text string within the allowed maximum length of 2,000 characters. Upon successful update, the response includes the full updated comment record with timestamps, author information, nested comments relations, and vote links.\n\nThis operation corresponds to the reddit_community_comments table in the Prisma database, maintaining referential integrity and supporting versioning via updated_at timestamps.\n\nValidation rules include verifying ownership, character length limits on body text, and ensuring the comment is not deleted (deleted_at is null).\n\nAny unauthorized attempts or validation failures result in appropriate error responses. This operation is intended for regular authenticated members who manage their own comments.","summary":"Update a specific comment by its ID within a post in redditCommunity","parameters":[{"name":"postId","in":"path","description":"Unique ID of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique ID of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated comment data","typeName":"IRedditCommunityComment.IUpdate"},"responseBody":{"description":"Updated detailed comment data","typeName":"IRedditCommunityComment"},"authorizationType":null,"authorizationRole":"member","path":"/redditCommunity/member/posts/{postId}/comments/{commentId}","method":"put","name":"updateComment","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The community must exist before posts can be created within it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must exist within the community before comments can be created or updated on it."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before it can be updated."}]},{"specification":"This operation deletes a specific comment under a given post on the redditCommunity platform. It operates on the reddit_community_comments table in the Prisma schema. The comment is identified by its UUIDs for the post and comment respectively. The operation permanently removes the comment from the database without soft deletion because the comment model supports soft deletes (deleted_at). This means the comment will be hard deleted. The operation is authorized for the member role allowing only authenticated members to delete their own comments.","description":"Delete a specific comment by its ID within a post in redditCommunity.\n\nThis operation allows an authenticated member to permanently remove a comment they authored by specifying the post ID and comment ID as path parameters.\n\nThe system will perform a hard delete on the comment, completely removing it from the database despite the soft delete field existing. This ensures no residual data remains.\n\nThe operation verifies that the targeted comment belongs to the specified post and that the member deleting the comment is the original author.\n\nUnauthorized or invalid deletion attempts will result in proper error responses. This operation is essential for members to manage their own content by deleting comments they no longer want to display.\n\nThis operation directly manipulates the reddit_community_comments table, maintaining data integrity and enforcing ownership checks.\n\nSecurity considerations ensure only the comment's author with proper authentication can perform deletions.\n\nAll timestamps related to creation and updates will become irrelevant once the comment is deleted, as the record no longer exists.\n\nCareful handling of cascading deletions for nested comments or votes should be managed by the backend service logic.","summary":"Delete a specific comment by its ID within a post in redditCommunity","parameters":[{"name":"postId","in":"path","description":"Unique ID of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique ID of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","path":"/redditCommunity/member/posts/{postId}/comments/{commentId}","method":"delete","name":"eraseComment","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"A community must exist before comments can be deleted on posts within it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"A post must exist in the community before a comment can be deleted on it."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"The comment must be created before it can be deleted."}]},{"specification":"This operation retrieves a paginated list of votes cast by members on a specified RedditCommunity post, based on the reddit_community_post_votes table. It allows filtering and pagination via the request body, returning vote summaries showing member ID, post ID, vote value, timestamps, and soft deletion status. Access is restricted to authenticated members with role \"member\".","description":"Retrieve a filtered and paginated list of votes cast by members on the specified RedditCommunity post, identified by the postId path parameter. The operation returns vote records including member identifier, post identifier, vote value (+1 for upvote, -1 for downvote, 0 for removed vote), creation and update timestamps, and soft deletion timestamps when applicable.\n\nThe request body allows specification of search criteria and pagination parameters for effective filtering and result limiting.\n\nThis operation requires authorization as a \"member\" role to protect voting data confidentiality. The postId provided in the path must be a valid UUID of an existing post.","summary":"Retrieve paginated vote summaries for a RedditCommunity post","parameters":[{"name":"postId","description":"Unique identifier of the target RedditCommunity post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for post vote filtering","typeName":"IRedditCommunityPostVote.IRequest"},"responseBody":{"description":"Paginated summary list of post votes matching filter criteria","typeName":"IPageIRedditCommunityPostVote.ISummary"},"authorizationType":null,"authorizationRole":"member","path":"/redditCommunity/member/posts/{postId}/postVotes","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must be created in the specified community before retrieving or casting votes on it."}]},{"specification":"This operation retrieves detailed information about a specific vote cast by a member on a RedditCommunity post. The vote record references member ID, post ID, vote value (+1, -1, or 0 for neutral), and timestamps. It provides audit details and is based on the reddit_community_post_votes table. Access is restricted to authenticated members with role \"member\".","description":"Retrieve detailed information of a specific vote identified by voteId cast on the RedditCommunity post with postId. The response includes member identifier, post identifier, vote value (+1, -1, or 0), creation timestamp, update timestamp, and soft deletion timestamp if any.\n\nAuthorization requirements limit access to users with the \"member\" role. Both postId and voteId path parameters must be valid UUIDs.\n\nThis operation supports audit and management of individual votes within the post voting system.","summary":"Retrieve detailed information of a specific RedditCommunity post vote","parameters":[{"name":"postId","description":"Unique identifier of the target RedditCommunity post","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the target post vote record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed RedditCommunity post vote data","typeName":"IRedditCommunityPostVote"},"authorizationType":null,"authorizationRole":"member","path":"/redditCommunity/member/posts/{postId}/postVotes/{voteId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must exist in the specified community before accessing detailed vote information on it."}]},{"specification":"This operation allows authenticated members (role: member) to cast a vote on a specific post in the redditCommunity platform by creating a new record in the reddit_community_post_votes table. It records the member's ID, the target post ID, and the vote value (+1, -1, or 0 for vote removal). The endpoint requires the postId path parameter and request body compliant with ICreate DTO schema and returns the created vote record as response.","path":"/redditCommunity/member/posts/{postId}/postVotes","method":"post","summary":"Create a vote on a specific post by a member","description":"Create a post vote by an authenticated member. The post is identified by the postId path parameter. The request body must contain the member_id of the voting member and the vote_value which is either +1 for upvote, -1 for downvote, or 0 to remove the vote.\n\nThe operation enforces that a member can only have one active vote at a time per post, and this creates or replaces that vote.\n\nSuccessful creation returns the created vote entity data. Authorization requires member role.\n\nParameters:\n- postId: UUID of the post to vote on\n- Request body: memberId (UUID string), voteValue (integer +1, -1, 0)\n\nResponse: Created reddit_community_post_votes entity with all fields\n\nSecurity: Only authenticated members may invoke this operation.","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target post"}],"requestBody":{"description":"Vote creation data relating member to post with vote value","typeName":"IRedditCommunityPostVote.ICreate"},"responseBody":{"description":"Created vote entity information","typeName":"IRedditCommunityPostVote"},"authorizationType":null,"authorizationRole":"member","name":"createPostVote","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Post must exist before a vote can be cast on it by a member."},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Member must exist before they can cast a vote on a post."}]},{"specification":"This operation updates an existing vote on a specific post by an authenticated member. It modifies the vote_value in the reddit_community_post_votes table identified by the voteId and postId path parameters. The vote_value can be +1 for upvote, -1 for downvote, or 0 for vote removal. No response body is returned; authorization requires member role.","path":"/redditCommunity/member/posts/{postId}/postVotes/{voteId}","method":"put","summary":"Update an existing vote on a specific post","description":"Update an existing post vote by changing the vote_value. The resource is identified by path parameters postId and voteId.\n\nRequest body must include the updated vote_value (+1, -1, or 0).\n\nOnly authenticated members with role member can perform this operation.\n\nResponse contains updated vote entity information.\n\nThis operation modifies the vote record and affects post scores and user karma accordingly.","parameters":[{"name":"postId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target post"},{"name":"voteId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the post vote record"}],"requestBody":{"description":"Vote update data including new vote value","typeName":"IRedditCommunityPostVote.IUpdate"},"responseBody":{"description":"Updated vote entity information","typeName":"IRedditCommunityPostVote"},"authorizationType":null,"authorizationRole":"member","name":"updatePostVote","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/postVotes","method":"post"},"description":"A post vote record must exist before it can be updated by this operation."}]},{"specification":"This operation deletes a specific vote record on a redditCommunity post, associated with the reddit_community_post_votes Prisma table. It requires the identifiers for the post and the vote. The operation permanently deletes the specified vote record from the database. No request body or response content is expected. Authorization requires the 'member' role, representing authenticated users who cast votes.","path":"/redditCommunity/member/posts/{postId}/postVotes/{voteId}","method":"delete","summary":"Delete a specific post vote by vote ID and post ID","description":"Delete a vote identified by voteId on a specific post identified by postId within the redditCommunity platform.\n\nThis operation permanently removes the vote record from the reddit_community_post_votes table, which represents votes by members on posts.\n\nOnly authenticated members authorized to modify their votes may perform this operation.\n\nPath Parameters:\n- postId: UUID of the post containing the vote.\n- voteId: UUID of the vote record to delete.\n\nThe operation returns no content on success.\n\nIf the specified vote or post does not exist, the system returns an appropriate error response.\n","parameters":[{"name":"postId","description":"Unique identifier of the post containing the vote","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erasePostVote","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/postVotes","method":"post"},"description":"A post vote must be created before it can be deleted."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"The post must exist before a vote can be cast or deleted on it."}]},{"specification":"This operation retrieves a paginated list of votes cast on a specific comment in redditCommunity, interacting with the reddit_community_comment_votes table. It supports pagination, sorting, and filtering based on the request body parameters. The commentId path parameter identifies the target comment. Authorization is restricted to communityModerator and admin roles for moderation purposes.","path":"/redditCommunity/communityModerator/comments/{commentId}/commentVotes","method":"patch","summary":"Retrieve paginated list of votes on a comment","description":"Retrieve a paginated list of votes on a particular comment identified by commentId.\n\nThis endpoint accesses the reddit_community_comment_votes table filtering votes for given commentId.\n\nSupports advanced filtering, sorting, and pagination through request body parameters.\n\nAccessible only to roles with communityModerator or admin privileges.\n\nThe response returns a paginated collection of matching votes.\n\nRequest Body:\n- Contains filter and pagination criteria as per IRedditCommunityCommentVote.IRequest.\n","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters to filter, paginate, and sort the list of comment votes","typeName":"IRedditCommunityCommentVote.IRequest"},"responseBody":{"description":"Paginated list of comment votes matching filter criteria","typeName":"IPageIRedditCommunityCommentVote"},"authorizationType":null,"authorizationRole":"communityModerator","name":"indexCommentVotes","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/comments/{commentId}/commentVotes","method":"post"},"description":"Comment vote must exist by a member before it can be retrieved and paginated by community moderators or admins."}]},{"specification":"This operation retrieves a paginated list of votes cast on a specific comment in redditCommunity, interacting with the reddit_community_comment_votes table. It supports pagination, sorting, and filtering based on the request body parameters. The commentId path parameter identifies the target comment. Authorization is restricted to communityModerator and admin roles for moderation purposes.","path":"/redditCommunity/admin/comments/{commentId}/commentVotes","method":"patch","summary":"Retrieve paginated list of votes on a comment","description":"Retrieve a paginated list of votes on a particular comment identified by commentId.\n\nThis endpoint accesses the reddit_community_comment_votes table filtering votes for given commentId.\n\nSupports advanced filtering, sorting, and pagination through request body parameters.\n\nAccessible only to roles with communityModerator or admin privileges.\n\nThe response returns a paginated collection of matching votes.\n\nRequest Body:\n- Contains filter and pagination criteria as per IRedditCommunityCommentVote.IRequest.\n","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters to filter, paginate, and sort the list of comment votes","typeName":"IRedditCommunityCommentVote.IRequest"},"responseBody":{"description":"Paginated list of comment votes matching filter criteria","typeName":"IPageIRedditCommunityCommentVote"},"authorizationType":null,"authorizationRole":"admin","name":"indexCommentVotes","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/comments/{commentId}/commentVotes","method":"post"},"description":"Comment must exist before votes on the comment can be retrieved"}]},{"specification":"This operation retrieves a specific comment vote by its ID within a particular comment, operating on the reddit_community_comment_votes table in the Prisma schema. It requires the UUID of the comment and the vote to uniquely identify the resource. The endpoint retrieves all relevant properties, including member ID, comment ID, vote value (+1 for upvote, -1 for downvote, 0 for vote removed), and timestamps for creation, update, and soft deletion.","description":"Retrieve detailed information of a specific vote on a comment.\n\nThis endpoint allows fetching a single vote identified by voteId associated with the specified commentId. It provides comprehensive metadata about the vote including the member who cast it, the current vote value (upvote, downvote, or removed), and timestamps for audit purposes.\n\nAccess to this endpoint is restricted to authenticated members.\n\nIf the specified comment or vote does not exist, the operation returns an error indicating the resource could not be found.\n\nThis operation corresponds to the reddit_community_comment_votes table in the underlying Prisma schema, which stores voting data linked to members and comments.","summary":"Retrieve a specific comment vote by IDs","parameters":[{"name":"commentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target comment"},{"name":"voteId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target vote"}],"requestBody":null,"responseBody":{"description":"Comment vote info","typeName":"IRedditCommunityCommentVote"},"authorizationRoles":["member"],"name":"at","path":"/redditCommunity/member/comments/{commentId}/commentVotes/{voteId}","method":"get","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/member/comments/{commentId}/commentVotes","method":"post"},"description":"Comment must exist before votes on the comment can be retrieved"}]},{"specification":"This operation creates a new vote on a comment by an authenticated member. It operates on the reddit_community_comment_votes table, enforcing one active vote per member per comment, with vote values of +1 (upvote), -1 (downvote), or 0 (vote removed). Input requires member ID and vote value for the specified commentId. The operation returns the created vote record including timestamps.","description":"Create a new comment vote record.\n\nMembers can upvote (+1), downvote (-1), or remove their vote (0) on a comment. This operation registers the vote associated with the member and comment.\n\nThe request must include member ID and vote value.\n\nAuthorization is restricted to members.\n\nReturns the created comment vote including metadata and timestamps.\n\nProper validation of the member and comment identifiers is required.\n\nThis operation corresponds to the reddit_community_comment_votes table in the Prisma schema.","summary":"Create a comment vote","parameters":[{"name":"commentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target comment"}],"requestBody":{"description":"Create comment vote data","typeName":"IRedditCommunityCommentVote.ICreate"},"responseBody":{"description":"Created comment vote info","typeName":"IRedditCommunityCommentVote"},"authorizationRoles":["member"],"name":"create","path":"/redditCommunity/member/comments/{commentId}/commentVotes","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"A community must exist before comments can be voted on in posts within it."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"A post must exist in the community before comments on the post can be voted on."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"The comment must be created before votes can be cast on it."}]},{"specification":"This operation updates a specific vote on a comment within the redditCommunity platform. It operates on the reddit_community_comment_votes table from the Prisma schema, enabling members to change their previous vote on a comment identified by commentId and voteId. The vote value can be updated to +1 (upvote), -1 (downvote), or 0 (vote removal). Validation ensures the voteValue is within the allowed integers. Only the vote owner may perform this update.","path":"/redditCommunity/member/comments/{commentId}/commentVotes/{voteId}","method":"put","summary":"Update a specific vote on a comment","description":"This API operation allows an authenticated redditCommunity member to update their vote on a comment specified by the commentId and voteId path parameters. The vote value must be one of +1 (upvote), -1 (downvote), or 0 (remove vote).\n\nSecurity: Only the vote owner is authorized to update their vote.\n\nDatabase Relation: Targets the reddit_community_comment_votes table, which records member votes on comments with support for soft deletion.\n\nValidation: Ensures the voteValue is an integer among -1, 0, or 1.\n\nUsage: This operation complements retrieval of existing votes to facilitate vote modification workflows.\n\nError Handling: Returns errors for unauthorized access or invalid vote values.\n\nResponse: Returns the updated comment vote record, including timing and linkage information.","parameters":[{"name":"commentId","in":"path","description":"Unique identifier of the comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","in":"path","description":"Unique identifier of the vote","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body specifying updated vote value for the comment vote","typeName":"IRedditCommunityCommentVote.IUpdate"},"responseBody":{"description":"The updated comment vote record","typeName":"IRedditCommunityCommentVote"},"authorizationRoles":["member"],"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/comments/{commentId}/commentVotes","method":"post"},"description":"The comment vote must exist before it can be updated."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before a vote on it can be created or updated."},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The community of the post must exist to create posts and comments."}]},{"specification":"This operation deletes a specific vote record on a comment within the redditCommunity system. It permanently removes the vote from the database, represented by the reddit_community_comment_votes table. The operation requires the commentId and voteId path parameters to specify the exact vote record to be deleted.\n\nAs per the Prisma schema and business rules, this is a hard delete operation removing the vote entity entirely. Only authenticated members owning the vote may perform the deletion.\n\nThe operation returns no response content upon successful deletion and enforces authorization to restrict access to vote owners.","path":"/redditCommunity/member/comments/{commentId}/commentVotes/{voteId}","method":"delete","summary":"Delete a specific vote on a comment","description":"This API endpoint enables an authenticated redditCommunity member to delete their vote on a comment identified by commentId and voteId.\n\nOnly the vote owner can perform this deletion, ensuring authorization compliance.\n\nDeletion is a hard delete operation removing the vote record completely from the reddit_community_comment_votes table.\n\nNo response body is returned upon success. Attempting to delete a non-existent or unauthorized vote will result in an error.\n\nUsage typically follows vote listing and validation operations to confirm the targeted vote.","parameters":[{"name":"commentId","in":"path","description":"Unique identifier of the comment","schema":{"type":"string","format":"uuid"}},{"name":"voteId","in":"path","description":"Unique identifier of the vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/member/comments/{commentId}/commentVotes","method":"post"},"description":"The comment vote must exist before it can be deleted."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before a vote can be created on it."}]},{"specification":"This operation retrieves a paginated list of content reports within the redditCommunity platform. It allows community moderators and admins to search, filter, and sort reports about posts, comments, or members. It interacts with the reddit_community_reports table from the Prisma schema, including details such as reporter identities (guest or member), reported content, report category, description, status, and timestamps, supporting efficient report management.","description":"Retrieve a paginated list of content reports for moderation purposes. This operation supports filtering by report status, category, and reported entity types (post, comment, member), along with search by description text.\n\nAccess is restricted to community moderators and admins to protect sensitive report data. The reports are stored in the reddit_community_reports table, which links reporter and reported content, report category, description, and status.\n\nThe operation accepts complex search criteria and pagination parameters in the request body and returns a paginated list of report summaries. Typical errors include authentication failures and invalid filters.","summary":"Search and retrieve a paginated list of content reports","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for report filtering","typeName":"IRedditCommunityReport.IRequest"},"responseBody":{"description":"Paginated list of content reports matching search criteria","typeName":"IPageIRedditCommunityReport.ISummary"},"authorizationType":null,"authorizationRole":"communityModerator","name":"index","path":"/redditCommunity/communityModerator/reports","method":"patch","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"A report status must be created before reports can use their status for filtering and management."}]},{"specification":"This operation retrieves a paginated list of content reports within the redditCommunity platform. It allows community moderators and admins to search, filter, and sort reports about posts, comments, or members. It interacts with the reddit_community_reports table from the Prisma schema, including details such as reporter identities (guest or member), reported content, report category, description, status, and timestamps, supporting efficient report management.","description":"Retrieve a paginated list of content reports for moderation purposes. This operation supports filtering by report status, category, and reported entity types (post, comment, member), along with search by description text.\n\nAccess is restricted to community moderators and admins to protect sensitive report data. The reports are stored in the reddit_community_reports table, which links reporter and reported content, report category, description, and status.\n\nThe operation accepts complex search criteria and pagination parameters in the request body and returns a paginated list of report summaries. Typical errors include authentication failures and invalid filters.","summary":"Search and retrieve a paginated list of content reports","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for report filtering","typeName":"IRedditCommunityReport.IRequest"},"responseBody":{"description":"Paginated list of content reports matching search criteria","typeName":"IPageIRedditCommunityReport.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/redditCommunity/admin/reports","method":"patch","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"Report status must exist before filtering or creating content reports with that status."}]},{"specification":"This operation retrieves detailed information for a specific content report by its unique identifier in the redditCommunity platform. It accesses the reddit_community_reports Prisma table and returns all report details including reporter information (guest or member), referenced post/comment/member, category, description, current status, and timestamps.\n\nAccess is limited to community moderators and admins due to data sensitivity. The response enables detailed content moderation. Common errors include not found (404), authentication failure, and authorization denial.","description":"Retrieve detailed information about a specific content report by its unique identifier.\n\nAccess restricted to community moderators and admins to ensure confidentiality and proper moderation.\n\nReturns full report data including linked reporter info, reported content, report status, and timestamps.\n\nIf the report ID does not exist, returns a 404 error.","summary":"Retrieve detailed information about a specific content report","parameters":[{"name":"reportId","description":"Unique identifier of the target content report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed content report information","typeName":"IRedditCommunityReport"},"authorizationType":null,"authorizationRole":"communityModerator","name":"at","path":"/redditCommunity/communityModerator/reports/{reportId}","method":"get","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The content report must exist before it can be retrieved in detail by moderators."}]},{"specification":"This operation retrieves detailed information for a specific content report by its unique identifier in the redditCommunity platform. It accesses the reddit_community_reports Prisma table and returns all report details including reporter information (guest or member), referenced post/comment/member, category, description, current status, and timestamps.\n\nAccess is limited to community moderators and admins due to data sensitivity. The response enables detailed content moderation. Common errors include not found (404), authentication failure, and authorization denial.","description":"Retrieve detailed information about a specific content report by its unique identifier.\n\nAccess restricted to community moderators and admins to ensure confidentiality and proper moderation.\n\nReturns full report data including linked reporter info, reported content, report status, and timestamps.\n\nIf the report ID does not exist, returns a 404 error.","summary":"Retrieve detailed information about a specific content report","parameters":[{"name":"reportId","description":"Unique identifier of the target content report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed content report information","typeName":"IRedditCommunityReport"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/redditCommunity/admin/reports/{reportId}","method":"get","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The content report must be created before retrieving its detailed information."},{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"The report status must exist before it can be referenced in a content report."}]},{"specification":"This operation creates a new content report in the redditCommunity platform's Report table. It enables guests or members to report posts, comments, or users for moderation review. The report includes optional identifiers for the reporter (guest or member) and the reported content (post, comment, or member). The report record tracks the category of the report, an optional descriptive message, and timestamps for creation and update. The status of the report is set to a valid report status ID to manage the report lifecycle in moderation workflows.\n\nThe operation expects a POST method with a request body containing the required fields for creating a report. This operation is accessible to authenticated and unauthenticated users (empty authorizationRoles). The response returns the created report with all details.\n\nThis API operation follows the structure of the reddit_community_reports table in the Prisma schema, accurately referencing its fields and relationships. All identifiers must be valid UUID strings with appropriate Schema relational integrity.","description":"Create a report about a post, comment, or user in the redditCommunity platform for content moderation purposes.\n\nThis operation allows both guests and authenticated members to submit reports. Guests must provide their guest ID if available. Members provide their member ID. Reports can reference the content being reported by post ID, comment ID, or user ID.\n\nThe report category must be specified following the allowed types such as spam, abuse, or other violation categories. An optional description can provide additional context for moderators.\n\nSecurity checks ensure only valid identifiers and statuses are accepted. Successful creation results in a report record with creation timestamp and initial status.\n\nRelated operations include updating report status or assigning moderators to reports.\n\nErrors occur if required fields are missing or identifiers do not exist in the system. Validation enforces proper data types and formats.","summary":"Create a content moderation report for posts, comments, or users","parameters":[],"requestBody":{"description":"Report creation data","typeName":"IRedditCommunityReport.ICreate"},"responseBody":{"description":"Created report information","typeName":"IRedditCommunityReport"},"authorizationRoles":[],"name":"create","path":"/redditCommunity/reports","method":"post","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"Report status must exist before a report can be created with that status_id."},{"endpoint":{"path":"/redditCommunity/member/communities/{communityId}/posts","method":"post"},"description":"Reported post must exist before it can be referenced in a report, if reported_post_id is provided."},{"endpoint":{"path":"/redditCommunity/member/posts/{postId}/comments","method":"post"},"description":"Reported comment must exist before it can be referenced in a report, if reported_comment_id is provided."},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"Member must exist before it can be referenced as reporter or reported member in a report, if reporter_member_id or reported_member_id is provided."}]},{"specification":"This operation updates an existing content report in the redditCommunity platform. It allows updating report details, such as changing the report status, category, or description. The report is identified by its unique ID.\n\nThe operation uses the PUT method, requiring the report ID as a path parameter. The request body contains updated report information. The response returns the updated report with all details.\n\nThis operation references the reddit_community_reports table in the Prisma schema, ensuring accurate mapping of fields.\n\nSecurity requires the authenticated user to have appropriate permissions to update reports, typically community moderators or admins. Their role names must follow the defined roles in the Prisma schema.\n\nThe roles allowed to access this operation are communityModerator and admin.","description":"Update details of an existing content report identified by its ID. Changes may include updating the report status, category, or description to reflect moderation review progress.\n\nOnly authorized users such as community moderators or admins can perform updates. The operation validates the provided report ID path parameter and request body data to ensure consistency.\n\nProper error handling occurs if the report ID does not exist or the user lacks permissions.\n\nThis operation is essential for managing report lifecycles and collaborating among moderation teams.","summary":"Update a content moderation report by ID","parameters":[{"name":"reportId","description":"Unique identifier of the report to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated report data","typeName":"IRedditCommunityReport.IUpdate"},"responseBody":{"description":"Updated report information","typeName":"IRedditCommunityReport"},"authorizationRoles":["communityModerator","admin"],"name":"update","path":"/redditCommunity/communityModerator/reports/{reportId}","method":"put","authorizationRole":"communityModerator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The content report identified by reportId must exist before it can be updated."},{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"The report status identified by status_id must exist before updating the report."},{"endpoint":{"path":"/redditCommunity/member/communities","method":"post"},"description":"The reporter member identified by reporter_member_id must exist if the report is updated with a reporter member ID."}]},{"specification":"This operation updates an existing content report in the redditCommunity platform. It allows updating report details, such as changing the report status, category, or description. The report is identified by its unique ID.\n\nThe operation uses the PUT method, requiring the report ID as a path parameter. The request body contains updated report information. The response returns the updated report with all details.\n\nThis operation references the reddit_community_reports table in the Prisma schema, ensuring accurate mapping of fields.\n\nSecurity requires the authenticated user to have appropriate permissions to update reports, typically community moderators or admins. Their role names must follow the defined roles in the Prisma schema.\n\nThe roles allowed to access this operation are communityModerator and admin.","description":"Update details of an existing content report identified by its ID. Changes may include updating the report status, category, or description to reflect moderation review progress.\n\nOnly authorized users such as community moderators or admins can perform updates. The operation validates the provided report ID path parameter and request body data to ensure consistency.\n\nProper error handling occurs if the report ID does not exist or the user lacks permissions.\n\nThis operation is essential for managing report lifecycles and collaborating among moderation teams.","summary":"Update a content moderation report by ID","parameters":[{"name":"reportId","description":"Unique identifier of the report to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated report data","typeName":"IRedditCommunityReport.IUpdate"},"responseBody":{"description":"Updated report information","typeName":"IRedditCommunityReport"},"authorizationRoles":["communityModerator","admin"],"name":"update","path":"/redditCommunity/admin/reports/{reportId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The content report must exist before it can be updated by admins."},{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"The report status must exist before it can be assigned to the report during update."}]},{"specification":"This operation deletes a report identified by the reportId from the redditCommunity platform's Reporting domain. It permanently removes the report record from the database. The deletion is a hard delete, removing all traces of the report, which is linked with guests or members reporting posts, comments, or users for violations. This operation requires the reportId parameter to identify which report to remove. The operation does not require a request body and does not return a response body as it is destructive.","description":"Delete a report from the system by its unique identifier.\n\nThis operation permanently removes the report record from the database, including its associations with reporter guests or members and the reported post, comment, or member. It is a hard delete and cannot be reversed.\n\nAuthorization is required to ensure only users with appropriate permissions can delete reports, such as admins or community moderators.\n\nNo request body is needed as the operation only requires the reportId to be specified in the path.\n\nNo response body is returned upon successful deletion. Errors may be returned if the report does not exist or access is unauthorized.","summary":"Delete a report by ID","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the report to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","communityModerator"],"name":"eraseReportById","path":"/redditCommunity/admin/reports/{reportId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before it can be deleted by its unique identifier."}]},{"specification":"This operation deletes a report identified by the reportId from the redditCommunity platform's Reporting domain. It permanently removes the report record from the database. The deletion is a hard delete, removing all traces of the report, which is linked with guests or members reporting posts, comments, or users for violations. This operation requires the reportId parameter to identify which report to remove. The operation does not require a request body and does not return a response body as it is destructive.","description":"Delete a report from the system by its unique identifier.\n\nThis operation permanently removes the report record from the database, including its associations with reporter guests or members and the reported post, comment, or member. It is a hard delete and cannot be reversed.\n\nAuthorization is required to ensure only users with appropriate permissions can delete reports, such as admins or community moderators.\n\nNo request body is needed as the operation only requires the reportId to be specified in the path.\n\nNo response body is returned upon successful deletion. Errors may be returned if the report does not exist or access is unauthorized.","summary":"Delete a report by ID","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the report to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","communityModerator"],"name":"eraseReportById","path":"/redditCommunity/communityModerator/reports/{reportId}","method":"delete","authorizationRole":"communityModerator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before it can be deleted."}]},{"specification":"This operation retrieves a paginated list of report actions for a specific report identified by reportId. It allows community moderators and admins to view all moderation actions taken in response to a particular report within the redditCommunity platform's Reporting domain. The response includes detailed moderation action records such as action types, notes, timestamps, and references to the moderator or admin executing the actions.\n\nThe request body supports pagination, sorting, and filtering criteria to manage large numbers of report actions effectively.\n\nSecurity is enforced to restrict access to only authorized roles such as admins and community moderators who are responsible for moderation workflows.\n\nPath parameter reportId specifies the target report. The response contains paginated moderation actions associated with that report.","description":"Retrieve a paginated list of moderation actions linked to a specific report.\n\nThis operation supports filtering, sorting, and pagination parameters in the request body to efficiently query report actions.\n\nAuthorized users (admins, community moderators) can view all moderation actions taken on the report, including action types, notes, timestamps, and involved users.\n\nThe response includes detailed metadata of each moderation action, facilitating moderation review and audit.\n\nErrors may be returned for invalid reportId or unauthorized access.","summary":"List moderation actions for a report","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the report"}],"requestBody":{"description":"Pagination, sorting, and filtering parameters for report actions","typeName":"IRedditCommunityReportAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions for the specified report","typeName":"IPageIRedditCommunityReportAction"},"authorizationRoles":["admin","communityModerator"],"name":"searchReportActionsByReportId","path":"/redditCommunity/admin/reports/{reportId}/reportActions","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"Report must exist before retrieving its moderation actions."}]},{"specification":"This operation retrieves a paginated list of report actions for a specific report identified by reportId. It allows community moderators and admins to view all moderation actions taken in response to a particular report within the redditCommunity platform's Reporting domain. The response includes detailed moderation action records such as action types, notes, timestamps, and references to the moderator or admin executing the actions.\n\nThe request body supports pagination, sorting, and filtering criteria to manage large numbers of report actions effectively.\n\nSecurity is enforced to restrict access to only authorized roles such as admins and community moderators who are responsible for moderation workflows.\n\nPath parameter reportId specifies the target report. The response contains paginated moderation actions associated with that report.","description":"Retrieve a paginated list of moderation actions linked to a specific report.\n\nThis operation supports filtering, sorting, and pagination parameters in the request body to efficiently query report actions.\n\nAuthorized users (admins, community moderators) can view all moderation actions taken on the report, including action types, notes, timestamps, and involved users.\n\nThe response includes detailed metadata of each moderation action, facilitating moderation review and audit.\n\nErrors may be returned for invalid reportId or unauthorized access.","summary":"List moderation actions for a report","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the report"}],"requestBody":{"description":"Pagination, sorting, and filtering parameters for report actions","typeName":"IRedditCommunityReportAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions for the specified report","typeName":"IPageIRedditCommunityReportAction"},"authorizationRoles":["admin","communityModerator"],"name":"searchReportActionsByReportId","path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions","method":"patch","authorizationRole":"communityModerator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report identified by reportId must exist before fetching its moderation actions."}]},{"specification":"GET operation to fetch a single report action record from reddit_community_report_actions table, identified by reportId and actionId. Includes all relevant columns and relationships for full context. Security enforced for moderators and admins.","path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions/{actionId}","method":"get","summary":"Retrieve a specific report action by ID for a report","description":"This operation fetches detailed information about a single moderation action performed on a report in redditCommunity. It returns the record identified by the specified report ID and report action ID. The action includes data about which community moderator or admin performed the action, the type of action taken, timestamps, and optional notes.\n\nOnly authorized community moderators and admins may access this operation due to the sensitive nature of moderation actions. It ensures secure retrieval of detailed moderation activity linked to content reporting.\n\nThis operation corresponds to the reddit_community_report_actions table in the Prisma schema.","parameters":[{"name":"reportId","description":"Unique identifier of the target report","schema":{"type":"string","format":"uuid"}},{"name":"actionId","description":"Unique identifier of the report action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the retrieved report action","typeName":"IRedditCommunityReportAction"},"authorizationType":null,"authorizationRole":"communityModerator","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before accessing or managing its associated report actions."},{"endpoint":{"path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions","method":"post"},"description":"The specific report action must be created before it can be retrieved."}]},{"specification":"GET operation to fetch a single report action record from reddit_community_report_actions table, identified by reportId and actionId. Includes all relevant columns and relationships for full context. Security enforced for moderators and admins.","path":"/redditCommunity/admin/reports/{reportId}/reportActions/{actionId}","method":"get","summary":"Retrieve a specific report action by ID for a report","description":"This operation fetches detailed information about a single moderation action performed on a report in redditCommunity. It returns the record identified by the specified report ID and report action ID. The action includes data about which community moderator or admin performed the action, the type of action taken, timestamps, and optional notes.\n\nOnly authorized community moderators and admins may access this operation due to the sensitive nature of moderation actions. It ensures secure retrieval of detailed moderation activity linked to content reporting.\n\nThis operation corresponds to the reddit_community_report_actions table in the Prisma schema.","parameters":[{"name":"reportId","description":"Unique identifier of the target report","schema":{"type":"string","format":"uuid"}},{"name":"actionId","description":"Unique identifier of the report action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the retrieved report action","typeName":"IRedditCommunityReportAction"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before accessing or managing its associated report actions."},{"endpoint":{"path":"/redditCommunity/admin/reports/{reportId}/reportActions","method":"post"},"description":"The specific report action must be created before it can be retrieved."}]},{"specification":"POST operation for adding a report action record to the reddit_community_report_actions table. Requires a body of type IRedditCommunityReportAction.ICreate. Role-restricted to moderators and admins.","path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions","method":"post","summary":"Create a new report action for a report","description":"This operation allows authorized community moderators or admins to create a new moderation action record linked to a specific report. The operation inserts a new record into reddit_community_report_actions with required fields including report ID, moderator member ID, action type, and optional admin member ID and notes.\n\nThis facilitates tracking of moderation decisions, warnings, deletions, or other administrative activities assigned to reports.\n\nThe associated request body must comply with the IRedditCommunityReportAction.ICreate schema, ensuring all required fields are provided.\n\nThis operation ensures recorded moderation actions are auditable and properly linked to users performing them.","parameters":[{"name":"reportId","description":"Unique identifier of the target report to link the new action","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new report action linked to a report","typeName":"IRedditCommunityReportAction.ICreate"},"responseBody":{"description":"The newly created report action","typeName":"IRedditCommunityReportAction"},"authorizationType":null,"authorizationRole":"communityModerator","name":"create","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report identified by reportId must exist before creating a report action linked to it."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"The community moderator member performing the action must exist before creating the report action to ensure authorization and auditability."},{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"A valid report status must exist to associate with the report action and support lifecycle tracking."}]},{"specification":"POST operation for adding a report action record to the reddit_community_report_actions table. Requires a body of type IRedditCommunityReportAction.ICreate. Role-restricted to moderators and admins.","path":"/redditCommunity/admin/reports/{reportId}/reportActions","method":"post","summary":"Create a new report action for a report","description":"This operation allows authorized community moderators or admins to create a new moderation action record linked to a specific report. The operation inserts a new record into reddit_community_report_actions with required fields including report ID, moderator member ID, action type, and optional admin member ID and notes.\n\nThis facilitates tracking of moderation decisions, warnings, deletions, or other administrative activities assigned to reports.\n\nThe associated request body must comply with the IRedditCommunityReportAction.ICreate schema, ensuring all required fields are provided.\n\nThis operation ensures recorded moderation actions are auditable and properly linked to users performing them.","parameters":[{"name":"reportId","description":"Unique identifier of the target report to link the new action","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new report action linked to a report","typeName":"IRedditCommunityReportAction.ICreate"},"responseBody":{"description":"The newly created report action","typeName":"IRedditCommunityReportAction"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report identified by reportId must exist before creating a report action linked to it."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"The moderator member identified by moderator_member_id must exist before creating a report action."},{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"The admin member identified by admin_member_id must exist before creating a report action."}]},{"specification":"This operation updates an existing report action record within the redditCommunity platform's reporting system. It operates on the reddit_community_report_actions table in the Prisma schema, which stores moderation actions taken in response to user reports. The operation allows modifying the type of action, optional notes, and timestamps, ensuring only authorized moderators or admins can perform updates. The report action record uniquely identifies the moderation response to a report, linked to members and optionally admins. Validation ensures the action_type is specified and associated report and moderator/admin IDs are managed internally by the system.","path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions/{actionId}","method":"put","summary":"Update a specific moderation report action","description":"Update a specific moderation action linked to a user report in the redditCommunity platform. This operation updates the action_type, notes, and timestamps of the report action record identified by reportId and actionId.\n\nThis API requires proper authorization, typically limited to community moderators or admins with management privileges. The operation aligns with the reddit_community_report_actions table, ensuring referential integrity with reports, moderators, and admins.\n\nValidation rules enforce that the action_type field is provided and meaningful, while notes are optional free text. The system maintains created_at and updated_at timestamps to track the lifecycle of moderation actions.\n\nTypical uses include recording changes to moderation action details, adding notes for audit purposes, or correcting action types post initial recording.\n\nThis operation requires input of the action update details in the request body and path parameters specifying the targeted report and action ids. It produces the updated report action entity in response.","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target report ID containing the action"},{"name":"actionId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target action ID to update"}],"requestBody":{"description":"Details for updating the report action","typeName":"IRedditCommunityReportAction.IUpdate"},"responseBody":{"description":"Updated report action record","typeName":"IRedditCommunityReportAction"},"authorizationType":null,"authorizationRole":"communityModerator","name":"update","prerequisites":[{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before updating its associated moderation report action."},{"endpoint":{"path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions","method":"post"},"description":"The moderation report action must already be created before it can be updated."}]},{"specification":"This operation updates an existing report action record within the redditCommunity platform's reporting system. It operates on the reddit_community_report_actions table in the Prisma schema, which stores moderation actions taken in response to user reports. The operation allows modifying the type of action, optional notes, and timestamps, ensuring only authorized moderators or admins can perform updates. The report action record uniquely identifies the moderation response to a report, linked to members and optionally admins. Validation ensures the action_type is specified and associated report and moderator/admin IDs are managed internally by the system.","path":"/redditCommunity/admin/reports/{reportId}/reportActions/{actionId}","method":"put","summary":"Update a specific moderation report action","description":"Update a specific moderation action linked to a user report in the redditCommunity platform. This operation updates the action_type, notes, and timestamps of the report action record identified by reportId and actionId.\n\nThis API requires proper authorization, typically limited to community moderators or admins with management privileges. The operation aligns with the reddit_community_report_actions table, ensuring referential integrity with reports, moderators, and admins.\n\nValidation rules enforce that the action_type field is provided and meaningful, while notes are optional free text. The system maintains created_at and updated_at timestamps to track the lifecycle of moderation actions.\n\nTypical uses include recording changes to moderation action details, adding notes for audit purposes, or correcting action types post initial recording.\n\nThis operation requires input of the action update details in the request body and path parameters specifying the targeted report and action ids. It produces the updated report action entity in response.","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target report ID containing the action"},{"name":"actionId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target action ID to update"}],"requestBody":{"description":"Details for updating the report action","typeName":"IRedditCommunityReportAction.IUpdate"},"responseBody":{"description":"Updated report action record","typeName":"IRedditCommunityReportAction"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reports/{reportId}/reportActions","method":"post"},"description":"The moderation report action must exist before it can be updated, identified by reportId and actionId."},{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The user report identified by reportId must exist before modifying its actions."},{"endpoint":{"path":"/redditCommunity/admin/communities/{communityId}/communityModerators","method":"post"},"description":"The moderator member performing the action (moderator_member_id) must exist to attribute the moderation action properly."},{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"The admin member performing the action (admin_member_id) must exist when applicable to ensure valid administrative attribution."}]},{"specification":"This operation deletes a report action by its ID from the redditCommunity platform's reporting system. It acts upon the reddit_community_report_actions table in the Prisma schema. The operation permanently removes the specified moderation action record related to reports, identified by reportId and actionId within the URL path parameters.\n\nDeletion requires appropriate authorization, typically granted to community moderators or admins who manage reports and moderation actions. The operation does not require a request body and returns no content upon successful deletion.\n\nThis API ensures cleanup of moderation action records when actions are rescinded or no longer applicable, maintaining data integrity and system audit consistency.\n\nIf the record doesn't exist, an appropriate error is returned.\n\nThis operation handles hard deletion since the schema does not define a soft delete timestamp column for this table.\n\nTypical use cases include removing mistaken or obsolete moderation actions.\n\nThe path parameters must correctly identify the targeted report and action.","path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions/{actionId}","method":"delete","summary":"Delete a specific moderation report action","description":"Delete a specific moderation report action linked to a user report in the redditCommunity platform. This operation permanently removes the report action record identified by reportId and actionId.\n\nThis API requires authorization for community moderators or admins with privileges to manage moderation actions.\n\nUpon success, no response body is returned.\n\nErrors occur if the specified report action does not exist.","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target report ID containing the action"},{"name":"actionId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target action ID to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityModerator","name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/communityModerator/reports/{reportId}/reportActions","method":"post"},"description":"The report action must exist and be created before it can be deleted to ensure the deletion is valid and the record exists."},{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before any actions related to it can be deleted to maintain integrity and validate the target report."}]},{"specification":"This operation deletes a report action by its ID from the redditCommunity platform's reporting system. It acts upon the reddit_community_report_actions table in the Prisma schema. The operation permanently removes the specified moderation action record related to reports, identified by reportId and actionId within the URL path parameters.\n\nDeletion requires appropriate authorization, typically granted to community moderators or admins who manage reports and moderation actions. The operation does not require a request body and returns no content upon successful deletion.\n\nThis API ensures cleanup of moderation action records when actions are rescinded or no longer applicable, maintaining data integrity and system audit consistency.\n\nIf the record doesn't exist, an appropriate error is returned.\n\nThis operation handles hard deletion since the schema does not define a soft delete timestamp column for this table.\n\nTypical use cases include removing mistaken or obsolete moderation actions.\n\nThe path parameters must correctly identify the targeted report and action.","path":"/redditCommunity/admin/reports/{reportId}/reportActions/{actionId}","method":"delete","summary":"Delete a specific moderation report action","description":"Delete a specific moderation report action linked to a user report in the redditCommunity platform. This operation permanently removes the report action record identified by reportId and actionId.\n\nThis API requires authorization for community moderators or admins with privileges to manage moderation actions.\n\nUpon success, no response body is returned.\n\nErrors occur if the specified report action does not exist.","parameters":[{"name":"reportId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target report ID containing the action"},{"name":"actionId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target action ID to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reports/{reportId}/reportActions","method":"post"},"description":"The report action must exist and be created before it can be deleted to ensure the deletion is valid and the record exists."},{"endpoint":{"path":"/redditCommunity/reports","method":"post"},"description":"The report must exist before any actions related to it can be deleted to maintain integrity and validate the target report."}]},{"specification":"This operation retrieves a paginated list of all report statuses available in the redditCommunity platform. It operates on the reddit_community_report_statuses table as defined in the Prisma schema. The endpoint supports filtering, searching, pagination, and sorting of report statuses. Users can view the different lifecycle states for report processing such as \"pending\", \"reviewed\", or \"action taken\". No request body is required. The response returns a paginated summary list of report statuses.","description":"Retrieve a filtered and paginated list of report statuses used by the reporting and moderation system within the redditCommunity platform. Report statuses include distinct lifecycle stages for moderation workflows, such as pending review, reviewed, or action taken, defined in the reddit_community_report_statuses table.\n\nThis operation is accessible publicly without authentication to allow clients to understand possible report status values.\n\nThe response includes pagination metadata as well as concise details about each report status. The search and sorting mechanisms enable efficient retrieval for UI dropdowns or filtering in administrative tools.\n\nThis operation complements the GET endpoint for retrieving detailed status information by ID.\n\nErrors due to invalid search or pagination parameters will be returned with appropriate error messages.","summary":"Retrieve a list of redditCommunity report statuses","parameters":[],"requestBody":{"description":"Search and pagination criteria for report statuses","typeName":"IRedditCommunityReportStatus.IRequest"},"responseBody":{"description":"Paginated list of report statuses matching search criteria","typeName":"IPageIRedditCommunityReportStatus.ISummary"},"authorizationType":null,"authorizationRole":null,"path":"/redditCommunity/reportStatuses","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific report status entity by its unique ID. It operates on the reddit_community_report_statuses table as defined in the Prisma schema. The endpoint allows clients to obtain full details for lifecycle stages used in report processing.\n\nThe report status ID path parameter specifies the exact report status to retrieve. The response provides all relevant fields, including the name and detailed description of the report status.\n\nThis endpoint is useful for moderation interfaces and administrative tools needing full context of report status definitions.\n\nAccess to this endpoint is public and no authentication is required.\n\nErrors due to invalid or non-existent reportStatusId will be returned with appropriate HTTP error codes.","description":"Retrieve detailed information about a specific redditCommunity report status identified by its unique ID. Report statuses represent distinct lifecycle states of reports such as pending, reviewed, or action taken.\n\nThis operation allows clients and administrative interfaces to fetch complete details on a particular report status for display and processing.\n\nNo request body is needed. The path parameter reportStatusId identifies which report status to retrieve.\n\nThe response includes all relevant fields including the name and description. Invalid or unknown IDs will return error responses.","summary":"Retrieve a report status by its ID","parameters":[{"name":"statusId","description":"Unique identifier of the target report status","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed report status information","typeName":"IRedditCommunityReportStatus"},"authorizationType":null,"authorizationRole":null,"path":"/redditCommunity/reportStatuses/{statusId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"Report status must exist before it can be retrieved by ID"}]},{"specification":"This operation creates a new report status entity in the redditCommunity platform's report status table. The operation interacts with the reddit_community_report_statuses Prisma table, which stores possible statuses for user-generated content reports (such as pending, reviewed, or action taken). Creating a report status enables the system administrators or automated workflows to categorize and track the lifecycle of content reports.\n\nUsers with appropriate administrative privileges can add new statuses with a unique name and an optional description. The operation requires a POST request containing the report status details following the IRedditCommunityReportStatus.ICreate DTO schema.\n\nThe system validates the uniqueness of the status name and stores timestamps representing creation and last update times. This operation supports role-based security and ensures only authorized users (e.g., admins) can create new report statuses.","description":"Create a new report status for categorizing and tracking user reports within the redditCommunity platform.\n\nThis operation allows authorized administrators to define new report statuses such as 'pending', 'reviewed', or 'action taken' with an optional description.\n\nSecurity considerations include restricting this operation to admin roles only. Missing or duplicate status names will result in validation errors.\n\nThe operation maps directly to the reddit_community_report_statuses database table, respecting unique constraints on the status name.\n\nOn success, the newly created report status record will be returned.\n\nTypical related operations include updating existing report statuses and listing report statuses for moderation workflows.\n\nErrors will be reported for invalid input, unauthorized access, or database constraint violations.","summary":"Create a new report status entity in the reddit_community_report_statuses table","parameters":[],"requestBody":{"description":"With the properties:\n- name: Unique report status name\n- description: Optional description of the report status\n- created_at, updated_at: timestamps for creation and last update handled by the system automatically\n\nRequest body type: IRedditCommunityReportStatus.ICreate","typeName":"IRedditCommunityReportStatus.ICreate"},"responseBody":{"description":"The newly created report status object","typeName":"IRedditCommunityReportStatus"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/redditCommunity/admin/reportStatuses","method":"post","prerequisites":[]},{"specification":"This operation updates an existing report status entity by its unique identifier in the redditCommunity platform. It corresponds to the reddit_community_report_statuses table in the Prisma schema.\n\nAuthorized administrators can modify the report status name, description, and other modifiable fields. The operation requires a PUT request with the report status ID as a path parameter and the updated values in the request body following the IRedditCommunityReportStatus.IUpdate DTO schema.\n\nThe system enforces unique constraints on the status name and protects critical timestamps.\n\nSecurity controls ensure only users with admin roles can perform this update.\n\nThis endpoint supports report lifecycle management by allowing changes to status definitions.\n\nValidation errors occur if the updated name conflicts with existing entries or if the status ID does not exist.\n\nRelated operations include creating new report statuses and retrieving status details for editing.","description":"Update an existing report status entity identified by its statusId in the reddit_community_report_statuses table.\n\nOnly authorized administrators can perform updates to ensure system integrity.\n\nThe operation requires a valid UUID path parameter representing the target report status ID and a request body specifying modifiable fields such as name and description.\n\nUnique constraints on the name are enforced by the system during update.\n\nThe response returns the updated report status object.\n\nError handling accommodates invalid identifiers, conflicting names, and unauthorized access attempts.","summary":"Update report status entity by statusId in reddit_community_report_statuses","parameters":[{"name":"statusId","description":"Unique identifier of the report status to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties for updating a report status such as name and description, using IRedditCommunityReportStatus.IUpdate DTO","typeName":"IRedditCommunityReportStatus.IUpdate"},"responseBody":{"description":"The updated report status object","typeName":"IRedditCommunityReportStatus"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/redditCommunity/admin/reportStatuses/{statusId}","method":"put","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"A report status must be created before it can be updated to ensure the status exists."}]},{"specification":"This operation deletes a report status entry identified by its unique UUID from the reddit_community_report_statuses table in the Prisma database schema. Deleting a report status removes it permanently, and any reports referencing this status may require reassignment or cleanup to maintain data integrity. This operation is intended for admin users or internal system processes with appropriate authorization. Proper validation is performed to ensure the specified statusId exists before deletion. The operation uses HTTP DELETE method on the resource path /reportStatuses/{statusId}, where the statusId path parameter is the UUID of the target report status to be removed.","description":"This API operation deletes a specific report status from the redditCommunity platform's report status lookup table.\n\nThe report status entity defines possible states of content reports such as pending, reviewed, or action taken. This deletion permanently removes the status identified by statusId.\n\nOnly authorized admin users are permitted to perform this operation due to the sensitive nature of modifying system-wide status definitions.\n\nThe status to be deleted must exist and not be referenced by active reports to avoid referential integrity issues.\n\nIf the status does not exist or is currently in use, appropriate error responses will be returned.\n\nNo request body is needed as the statusId is specified as a path parameter.\n\nThis operation adheres to strict RESTful conventions for resource deletion and follows the Prisma schema definitions for report statuses.","summary":"Delete a report status by its unique identifier","parameters":[{"name":"statusId","description":"Unique identifier of the report status to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/redditCommunity/admin/reportStatuses","method":"post"},"description":"A report status must be created before it can be deleted to ensure the status exists in the system."}],"path":"/redditCommunity/admin/reportStatuses/{statusId}","method":"delete","name":"erase"}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated user with minimal access, able to view public communities and posts, and access registration/login pages.","kind":"guest"},{"name":"member","description":"Authenticated user who can create posts, comment, vote, subscribe to communities, and manage their profile.","kind":"member"},{"name":"communityModerator","description":"Member users with special permissions to moderate specific communities, manage posts, comments, and handle reports within those communities.","kind":"member"},{"name":"admin","description":"System administrators with full access to manage users, communities, posts, site-wide settings, and handle escalated reports.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIRedditCommunityGuest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityGuest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityCommunityModerators.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunityModerators.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityAdmin":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityAdmin"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityCommunityModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunityModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityPostVote.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityPostVote.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityCommentVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommentVote"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityReportAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReportAction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRedditCommunityReportStatus.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReportStatus.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IRedditCommunityGuest.ICreate":{"type":"object","properties":{"session_id":{"type":"string","description":"Session identifier for tracking guest browsing sessions."},"ip_address":{"type":"string","description":"IP address of the guest user for security and logging."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string from the guest's browser or device."}},"required":["session_id","ip_address"],"description":"Request body schema for creating a new guest session user. Includes session_id and IP address as required fields and optional user agent information.","x-autobe-prisma-schema":"reddit_community_guests"},"IRedditCommunityGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated guest user."},"session_id":{"type":"string","description":"Session identifier associated with the guest session."},"ip_address":{"type":"string","description":"IP address of the guest user."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the guest device or browser."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of guest creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last guest data update."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","session_id","ip_address","created_at","updated_at","token"],"description":"Authorized guest session information.\n\nThis type represents the response after successfully creating a guest session, including essential guest metadata and issued JWT authentication token.","x-autobe-prisma-schema":"reddit_community_guests"},"IRedditCommunityGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain a new access token."}},"required":["refresh_token"],"description":"Payload required to refresh JWT tokens for guest sessions, including the refresh token string."},"IRedditCommunityMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address used for member registration and login."},"password":{"type":"string","description":"Plain text password for the user. Must be securely hashed by backend before storing."}},"required":["email","password"],"description":"Request body schema for member registration including a valid email and a plain text password to be hashed securely."},"IRedditCommunityMember.IAuthorized":{"type":"object","description":"Authorized member user response containing authentication tokens and associated user information.\n\nThis schema represents the return type after a successful authentication operation such as login, registration, or token refresh.\n\nContains the unique user ID along with JWT token information necessary for session management.\n\nSensitive information like passwords or internal flags are excluded for security.\n\nAll tokens conform to the standard authorization token format used across the platform.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member user."},"email":{"type":"string","description":"Unique email address used for login and communication, formatted as an email"},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never exposed in response"},"is_email_verified":{"type":"boolean","description":"Indicator whether the user's email has been verified"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of member creation"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last member data update"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation). Null if active"},"reddit_community_community_moderators":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunityModerator.ISummary"},"description":"List of community moderator assignments for this member"},"reddit_community_posts":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityPost.ISummary"},"description":"List of posts authored by this member"},"reddit_community_comments":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityComment.ISummary"},"description":"List of comments authored by this member"},"reddit_community_post_votes":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityPostVote"},"description":"Collection of votes cast by this member on posts"},"reddit_community_comment_votes":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommentVote"},"description":"Collection of votes cast by this member on comments"},"reddit_community_user_karma":{"$ref":"#/components/schemas/IRedditCommunityUserKarma","description":"Karma information associated with this member"},"reddit_community_community_subscriptions":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunitySubscription"},"description":"List of community subscriptions for this member"},"reddit_community_reports_of_reporter_member_id":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReport.ISummary"},"description":"Reports submitted by this member"},"reddit_community_reports_of_reported_member_id":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReport.ISummary"},"description":"Reports submitted against this member"},"reddit_community_report_actions":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReportAction"},"description":"Report actions performed by this member"},"reddit_community_user_profiles":{"$ref":"#/components/schemas/IRedditCommunityUserProfile","description":"User profile information linked to this member"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","is_email_verified","created_at","updated_at","token"],"x-autobe-prisma-schema":"reddit_community_members"},"IRedditCommunityMember.ILogin":{"type":"object","description":"Member login request schema containing credentials for authentication.\n\nIncludes the member's email and password used for verifying identity.\n\nPassword is in plaintext and transmitted securely to be hashed onsite.\n\nEmail must be in a valid email format.\n\nThe provided credentials will be validated against stored member data.","properties":{"email":{"type":"string","format":"email","description":"Member's registered email address used for login."},"password":{"type":"string","description":"Member's plaintext password for authentication."}},"required":["email","password"],"x-autobe-prisma-schema":"reddit_community_members"},"IRedditCommunityMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token string used to obtain a new access token."}},"required":["refresh_token"],"description":"Refresh token request schema for member user to obtain new JWT access token."},"IRedditCommunityCommunityModerator.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address used for login and communication for the community moderator user."},"password":{"type":"string","description":"Plain text password for the community moderator account. Must be securely hashed before storage."}},"required":["email","password"],"description":"Registration information for a new communityModerator user including unique email and plain text password."},"IRedditCommunityCommunityModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community moderator member."},"email":{"type":"string","description":"Member email address used for login and communication."},"is_email_verified":{"type":"boolean","description":"Indicates whether the member has verified their email."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of member creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last member data update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation). Null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","is_email_verified","created_at","updated_at","token"],"description":"Authorization response containing JWT tokens and member identification for community moderator role.\n\nThis response is returned after successful authentication or registration operations such as login or join for community moderators.","x-autobe-prisma-schema":"reddit_community_members"},"IRedditCommunityCommunityModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address used for login."},"password":{"type":"string","description":"Plain text password for verification."}},"required":["email","password"],"description":"Login request containing user credentials for authentication.\n\nIncludes required email and password fields.\n\nPassword must be plain text; hashing is handled by backend services only.\n\nThis DTO is used to validate login requests for community moderator users."},"IRedditCommunityCommunityModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string issued to the communityModerator for token renewal."}},"required":["refresh_token"],"description":"Request body to refresh JWT access tokens using a valid refresh token for a communityModerator user.\n\nThis request contains the refresh_token property essential for token renewal in the authentication lifecycle.\n\nThe refresh token must be valid and not expired to obtain new access tokens.\n\nRequest is authorized as a communityModerator role but does not require prior access token."},"IRedditCommunityAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address used for admin login and communication.\n\nMust be unique and follow standard email format.","format":"email"},"password":{"type":"string","description":"Admin user's login password in plaintext.\n\nShould comply with security policies and password strength requirements."}},"required":["email","password"],"description":"Request body for admin user registration (ICreate). Contains email and plaintext password for secure account creation.\n\nThis type corresponds to the data used to create a new admin user in the reddit_community_admins database table.\n\nEmail must be unique and password must meet security criteria.\n\nOn success, the admin account is created and JWT tokens are issued for authentication."},"IRedditCommunityAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized admin user."},"email":{"type":"string","format":"email","description":"Email address of the authorized admin user."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"admin_level":{"type":"integer","format":"int32","description":"Integer indicating the level of administrative privileges."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of admin user creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last admin user record update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation)."},"reddit_community_report_actions":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReportAction"},"description":"Moderation actions performed by the admin."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","admin_level","created_at","updated_at","deleted_at","token"],"description":"Authorization response containing JWT token for an admin user.\n\nThis response is returned after successful authentication operations such as login or registration.\n\nContains user identification and security token information for session management.","x-autobe-prisma-schema":"reddit_community_admins"},"IRedditCommunityAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin user's login email address."},"password":{"type":"string","description":"Admin user's login password in plaintext."}},"required":["email","password"],"description":"Login credentials payload for admin user authentication.\n\nIncludes email and password properties.\n\nUsed to authenticate and obtain JWT tokens for admin users."},"IRedditCommunityAdmin.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"JWT refresh token string provided to the admin for token renewal purposes."}},"required":["refreshToken"],"description":"Payload for refreshing the JWT access token in the redditCommunity admin authentication flow.\n\nThis schema is used to provide the existing valid refresh token to obtain new access credentials.\n\nIt contains only the required property refreshToken as a string representing the JWT refresh token.\n\nThis request is the second step in the token renewal process after initial authentication.","x-autobe-prisma-schema":"reddit_community_admins"},"IRedditCommunityGuest.IRequest":{"type":"object","properties":{"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Session identifier for tracking guest browsing sessions."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address of the guest user for security and logging."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string from the guest's browser or device."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limitation of records per a page."}},"required":[],"description":"Request parameters for listing, searching, and pagination of redditCommunity guests.","x-autobe-prisma-schema":null},"IRedditCommunityGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"session_id":{"type":"string","description":"Session identifier for tracking guest browsing sessions."},"ip_address":{"type":"string","description":"IP address of the guest user for security and logging."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string from the guest's browser or device."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of guest creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last guest data update."}},"required":["id","session_id","ip_address","created_at","updated_at"],"description":"Entities representing unauthenticated users browsing redditCommunity platform. Records session tracking and metadata to enable temporary guest authorization and session management in the system.","x-autobe-prisma-schema":"reddit_community_guests"},"IRedditCommunityGuest.IUpdate":{"type":"object","properties":{"session_id":{"type":"string","description":"Session identifier for tracking guest browsing sessions."},"ip_address":{"type":"string","description":"IP address of the guest user for security and logging."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string from the guest's browser or device."}},"required":[],"description":"Request body schema for updating an existing guest session user. Allows updating session_id, ip_address, and optional user agent string.","x-autobe-prisma-schema":"reddit_community_guests"},"IRedditCommunityMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page.\n\n@default 100"},"email":{"type":"string","description":"Email address to filter members.\n\nMust be unique when set.\n\nFormat: email"},"is_email_verified":{"type":"boolean","description":"Filter members by their email verified status (true or false)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter members created at or after this date."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter members created at or before this date."}},"description":"Request DTO for searching and filtering reddit community members.\n\nSupports pagination, filtering by email, verification status, and creation date range.","required":[]},"IRedditCommunityMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member user"},"email":{"type":"string","description":"Unique email address used for login and communication, formatted as an email"},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never exposed in response"},"is_email_verified":{"type":"boolean","description":"Indicator whether the user's email has been verified"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of member creation"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last member data update"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation). Null if active"},"reddit_community_community_moderators":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunityModerator.ISummary"},"description":"List of community moderator assignments for this member"},"reddit_community_posts":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityPost.ISummary"},"description":"List of posts authored by this member"},"reddit_community_comments":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityComment.ISummary"},"description":"List of comments authored by this member"},"reddit_community_post_votes":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityPostVote"},"description":"Collection of votes cast by this member on posts"},"reddit_community_comment_votes":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommentVote"},"description":"Collection of votes cast by this member on comments"},"reddit_community_user_karma":{"$ref":"#/components/schemas/IRedditCommunityUserKarma","description":"Karma information associated with this member"},"reddit_community_community_subscriptions":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityCommunitySubscription"},"description":"List of community subscriptions for this member"},"reddit_community_reports_of_reporter_member_id":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReport.ISummary"},"description":"Reports submitted by this member"},"reddit_community_reports_of_reported_member_id":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReport.ISummary"},"description":"Reports submitted against this member"},"reddit_community_report_actions":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReportAction"},"description":"Report actions performed by this member"},"reddit_community_user_profiles":{"$ref":"#/components/schemas/IRedditCommunityUserProfile","description":"User profile information linked to this member"}},"required":["id","email","password_hash","is_email_verified","created_at","updated_at"],"description":"Member entity representing registered and authenticated users of the redditCommunity platform. Includes unique email, password hash for authentication, email verification status, timestamps, and links to associated entities such as posts, comments, votes, karma, subscriptions, reports, and user profiles. Fields follow the storage schema in the Prisma database model `reddit_community_members`.\n\nThis entity forms the core of user management and authentication, supporting user identity, activity tracking, and role-based permissions."},"IRedditCommunityMember.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address used by the member. Must be a valid email format.\n\nRepresents the user's primary login identifier.\n\nConstraints: Must be unique in the system.\n\nExample: \"user@example.com\""},"password_hash":{"type":"string","description":"Hashed password of the member.\n\nThis field stores securely hashed password data.\n\nRequired for authentication.\n\nExample hash: \"$2b$12$EixZaYVK1fsbw1Zfbx3OXePaWxn96p36b9Mrz1uRGZCpz/FKQ5Kfa\""},"is_email_verified":{"type":"boolean","description":"Flag indicating whether the member's email address is verified.\n\nTrue if the user has completed email verification process.\n\nFalse if verification pending or failed.\n\nUsed to enforce email-based authentication security."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp.\n\nIndicates when the member was logically deleted.\n\nNull indicates active member."}},"description":"Update data for a redditCommunity member user account.\n\nIncludes email, password hash, email verification status, and soft deletion timestamp.\n\nAll defined properties are optional to allow partial update.\n\nUsed for member account management and profile updates.\n\nNever includes creation timestamps or immutable fields.\n\nValidation ensures email uniqueness and password hash format.","required":[]},"IRedditCommunityCommunityModerators.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number."},"limit":{"type":"integer","format":"uint32","description":"Limitation of records per a page.\n\n@default 100"},"search":{"type":"string","description":"Search keyword for filtering community moderators."},"memberId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by member UUID to find specific moderators."},"communityId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by community UUID to find moderators in a specific community."},"assignedAfter":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for moderators assigned after this ISO datetime in UTC."},"assignedBefore":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for moderators assigned before this ISO datetime in UTC."}},"required":[],"description":"Request parameters for searching and filtering redditCommunity community moderators with pagination and sorting options."},"IRedditCommunityCommunityModerators":{"type":"object","x-autobe-prisma-schema":"reddit_community_community_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"member_id":{"type":"string","format":"uuid","description":"Belonged community member's reddit_community_members.id"},"community_id":{"type":"string","format":"uuid","description":"Belonged community's reddit_community_communities.id"},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when member was assigned as moderator of the community."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of moderator record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to moderator record."}},"required":["id","member_id","community_id","assigned_at","created_at","updated_at"],"description":"Community moderators are members assigned to manage and moderate specific communities. This table links members to communities, defining their moderator roles and permissions within those communities.\n\nThis entity includes unique identifiers, membership associations, timestamps for role assignment, and audit information.\n\nRelations reference the reddit_community_members and reddit_community_communities tables.\n\nThis type reflects the business concept of a user assigned special privileges to oversee community content.\n\nThe entity supports role-based access control and moderation workflows within the platform."},"IRedditCommunityCommunityModerator.IUpdate":{"type":"object","x-autobe-prisma-schema":"reddit_community_community_moderators","properties":{"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when member was assigned as moderator of the community."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to moderator record."}},"required":["assigned_at","updated_at"],"description":"Update type for community moderators supporting modification of assignment timestamps and audit fields. Allows adjusting the time a user was assigned as a community moderator and the last record update timestamp.\n\nThis type excludes primary key and relationship identifiers as those are immutable in update contexts.\n\nUsed in update operations where partial adjustment of community moderator record details are needed.\n\nMaintains integrity of role assignments while enabling time adjustments."},"IRedditCommunityCommunityModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Unique email address used for login and communication."},"is_email_verified":{"type":"boolean","description":"Indicates whether the member has verified their email."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of member creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last member data update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation). Null if active."}},"required":["id","email","is_email_verified","created_at","updated_at"],"description":"Community moderators are members assigned to manage and moderate specific communities. This type models the user account data including authentication credentials and email verification status.\n\nEach moderator is a registered member with unique email and hashed password. Email verification status indicates if the account is active.\n\nTimestamps track record lifecycle and soft deletion status.\n\nThis data maps directly to the `reddit_community_members` Prisma table, ensuring full consistency.\n\nSensitive fields like password_hash are excluded from responses for security.\n\nDeleted_at is nullable and used to mark soft-deleted moderator accounts.\n\nThis type serves as the main user profile representation for community moderators and integrates seamlessly with authentication and authorization workflows in the platform."},"IRedditCommunityAdmin.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Unique admin email address used for login and communication."},"admin_level":{"type":"integer","description":"Integer indicating the level of administrative privileges."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of admin user creation."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation). Null if active."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last admin user record update."}},"required":["email","admin_level","created_at","updated_at"],"description":"Request type to filter, sort, or paginate redditCommunity admin users for administrative operations. Supports querying by unique email, admin level, and records creation and update timestamps to enable effective search and filtering. Deletion timestamp is nullable for active lists.\n\nThis type is used for backend administrative APIs that manage admin user listings consistent with the `reddit_community_admins` Prisma schema.\n\nProperties like email are validated for uniqueness and format.\n\nAllows administrative personnel to narrow down user lists for system monitoring and management efficiently.\n\nNote: This request type excludes password hash for security reasons and only includes public and administrative filtering fields."},"IRedditCommunityAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Unique admin email address used for login and communication."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"admin_level":{"type":"integer","format":"int32","description":"Integer indicating the level of administrative privileges."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of admin user creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last admin user record update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation)."},"reddit_community_report_actions":{"type":"array","items":{"$ref":"#/components/schemas/IRedditCommunityReportAction"},"description":"Moderation actions performed by the admin."}},"required":["id","email","password_hash","admin_level","created_at","updated_at","deleted_at"],"description":"Admin users with full system administrative privileges across all communities and platform settings. Stores admin user authentication data and role-specific metadata.\n\nThis entity corresponds to the reddit_community_admins table in the Prisma schema.\n\nProperty descriptions reference the database columns and business purpose.\n\nThis type is crucial for authentication, authorization, and administrative control."},"IRedditCommunityAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Unique admin email address used for login and communication."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"admin_level":{"type":"integer","format":"int32","description":"Integer indicating the level of administrative privileges."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation)."}},"required":[],"description":"Update type for admin user entity allowing modification of email, password hash, admin level, and soft deletion status.\n\nCorresponds to updatable fields in the reddit_community_admins table.\n\nUsed for admin account management and maintenance.\n\nAll fields are optional, permitting partial updates."},"IRedditCommunityCommunity.IRequest":{"type":"object","description":"Request parameters for searching and paginating user communities in the redditCommunity platform.\n\nIncludes filters such as community name substring search, optional description search, and date range filtering on creation date.\n\nPagination fields control page number and size to limit result set for efficient retrieval.\n\nSorting options specify ordering of results by creation date or community name in ascending or descending order.\n\nThis interface enables flexible querying of communities for display in client apps with performance and usability optimizations.","properties":{"name":{"type":"string","description":"Filter communities by searching for substring in community names."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search filter for community description to narrow results."},"createdAtBegin":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter start date (ISO 8601 date-time) for community creation timestamp."},"createdAtEnd":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter end date (ISO 8601 date-time) for community creation timestamp."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number to retrieve, zero-based, default is 0."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of records per page, default is 20."},"sortBy":{"oneOf":[{"const":"created_at"},{"const":"name"},{"type":"null"}],"description":"Field used to sort communities, either by creation date or name."},"sortDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: ascending or descending."}},"required":[]},"IRedditCommunityCommunity":{"type":"object","description":"Data structure of the redditCommunity platform's user-created community entity.\n\nRepresents a community with a unique name, optional description, creation and update timestamps, and optional soft deletion timestamp.\n\nUsed for managing, displaying, and organizing communities within the platform.\n\nAll fields correspond to columns in the 'reddit_community_communities' database table as defined in the Prisma schema.\n\nProvides essential metadata to client applications for browsing, administration, and community management.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the community."},"name":{"type":"string","description":"Unique name of the community adhering to naming rules (3-50 alphanumeric and underscores)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive text explaining the community's purpose."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the community was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the community was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; the community is considered deleted if this is non-null."}},"required":["id","name","created_at","updated_at"],"x-autobe-prisma-schema":"reddit_community_communities"},"IRedditCommunityCommunity.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique community name adhering to naming rules (3-50 alphanumeric/underscore characters)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional community description text."}},"required":["name"],"description":"Request schema for creating a new community entity in redditCommunity platform.\n\nIncludes the mandatory unique community name and optional description.\n\nThis schema maps to the reddit_community_communities Prisma model create input type.\n\nAll properties conform to the database schema constraints."},"IRedditCommunityCommunity.IUpdate":{"type":"object","properties":{"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional community description text to update."}},"required":[],"description":"Request schema for updating an existing community entity in redditCommunity platform.\n\nOnly the description field is updatable.\n\nThis schema corresponds to the reddit_community_communities Prisma model update input type.\n\nThe community name is immutable and excluded from updates."},"IRedditCommunityCommunityModerator.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number for paginated results, must be a positive integer."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of records per page."},"search":{"type":"string","description":"Optional search query string for filtering moderators by member name or email."},"member_id":{"type":"string","format":"uuid","description":"Filter by ID of the member who is a moderator."},"community_id":{"type":"string","format":"uuid","description":"Filter by ID of the community the moderator belongs to."},"assigned_after":{"type":"string","format":"date-time","description":"Filter for moderators assigned after this timestamp."},"assigned_before":{"type":"string","format":"date-time","description":"Filter for moderators assigned before this timestamp."},"sort_by":{"oneOf":[{"const":"assigned_at","description":"Field to sort by."},{"const":"created_at","description":"Field to sort by."},{"const":"updated_at","description":"Field to sort by."}],"description":"Field to sort by."},"order":{"oneOf":[{"const":"asc","description":"Sort order (ascending or descending)."},{"const":"desc","description":"Sort order (ascending or descending)."}],"description":"Sort order (ascending or descending)."},"pagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Limit of records per page."},"records":{"type":"integer","format":"uint32","description":"Total records available."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages."}},"required":["current","limit","records","pages"],"description":"Pagination information."}},"required":[],"description":"Parameters for searching and retrieving community moderators with pagination and filtering capabilities."},"IRedditCommunityCommunityModerator.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Identifier of the member to assign as community moderator."},"community_id":{"type":"string","format":"uuid","description":"Identifier of the community where the moderation applies."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the member was assigned as a moderator."}},"required":["member_id","community_id","assigned_at"],"description":"Data required to create a new community moderator assignment."},"IRedditCommunityCommunityModerators.IUpdate":{"type":"object","properties":{"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when member was assigned as a moderator of the community."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of moderator record creation."},"id":{"type":"string","format":"uuid","description":"Primary key of the community moderator record."},"member_id":{"type":"string","format":"uuid","description":"Member ID of the community moderator."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to moderator record."},"community_id":{"type":"string","format":"uuid","description":"Community ID of the community moderator record."}},"required":["id","member_id","community_id"],"description":"Update DTO for a community moderator record.\n\nAllows updating timestamps and associations for an existing community moderator.\n\nMembership and community identifiers are required for identification and relationship maintenance.\n\nTimestamps track assignment creation and last update times.\n\nUsed in moderator management APIs.","x-autobe-prisma-schema":"reddit_community_community_moderators"},"IRedditCommunityPost.IRequest":{"type":"object","properties":{"post_type":{"type":"string","description":"Filter posts by type: 'text', 'link', or 'image'."},"title":{"type":"string","description":"Filter posts by title for search."},"created_after":{"type":"string","format":"date-time","description":"Filter posts created after this date-time."},"created_before":{"type":"string","format":"date-time","description":"Filter posts created before this date-time."},"limit":{"type":"integer","format":"int32","minimum":1,"maximum":100,"default":20,"description":"Number of items per page. Defaults to 20."},"page":{"type":"integer","format":"int32","minimum":1,"default":1,"description":"Page number for pagination. Defaults to 1."},"sort":{"oneOf":[{"const":"hot","description":"Sort posts by the given order."},{"const":"new","description":"Sort posts by the given order."},{"const":"top","description":"Sort posts by the given order."},{"const":"controversial","description":"Sort posts by the given order."}],"description":"Sort posts by the given order."}},"required":[],"description":"Request DTO for searching or listing posts with filtering, pagination, and sorting.\n\nSupports filtering by post type, title search, creation date range.\nProvides pagination controls and standard sort options.\n\nUsed in post listing APIs.","x-autobe-prisma-schema":null},"IRedditCommunityPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authoring member's linked unique identifier from reddit_community_members.id."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authoring guest's linked unique identifier from reddit_community_guests.id."},"reddit_community_community_id":{"type":"string","format":"uuid","description":"Target community's unique identifier."},"post_type":{"type":"string","description":"Type of the post content: text, link, or image."},"title":{"type":"string","description":"Title of the post, max 300 characters."},"body_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text content for text posts."},"link_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for link posts."},"image_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to the image file for image posts."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status representing lifecycle or workflow state."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business-specific status or lifecycle state."}},"required":["id","reddit_community_community_id","post_type","title","created_at","updated_at"],"description":"Posts created by users within communities, supporting text, link, or single image content. Each post is authored by a member or guest, belongs to a single community, and includes metadata for creation, editing, status, and soft deletion. Relationships link posts to their authors and parent communities. Supports business workflows via status fields and tracks vote and comment counts externally.\n\n@namespace Content\n\nThis schema maps to the 'reddit_community_posts' table in the Prisma database schema. It contains all columns, including nullable fields and timestamps.\n\nProperties:\n- `id`: Unique identifier for the post.\n- `author_member_id` and `author_guest_id`: Nullable foreign keys linking to either a member or guest author.\n- `reddit_community_community_id`: Foreign key referencing the community this post belongs to.\n- `post_type`: Specifies the type of content, must be one of 'text', 'link', or 'image'.\n- `title`: The post title, maximum length of 300 characters.\n- `body_text`, `link_url`, and `image_url`: Nullable fields storing content based on post_type.\n- `created_at`, `updated_at`, `deleted_at`: Timestamps for lifecycle management.\n- `status` and `business_status`: Optional status fields for business workflow tracking."},"IRedditCommunityPosts.ICreate":{"type":"object","properties":{"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authoring member's ID, nullable if guest authoring. Should not be provided by client; assigned by backend from auth context."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authoring guest's ID, nullable if member authoring. Should not be provided by client; assigned by backend from auth context."},"reddit_community_community_id":{"type":"string","format":"uuid","description":"Identifier of the community where the post is created."},"post_type":{"type":"string","description":"Type of post content: text, link, or image. Determines which content field is required."},"title":{"type":"string","description":"Title of the post with a maximum length of 300 characters."},"body_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text content for text posts only, up to 10,000 characters."},"link_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for link posts, must be valid http/https URL."},"image_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for image posts, should point to a single image resource."}},"required":["reddit_community_community_id","post_type","title"],"description":"Request body schema for creating a new post within a community.\n\nRules:\n- `author_member_id` and `author_guest_id` are not expected from client; set by backend from authenticated context.\n- `post_type` determines which content field (`body_text`, `link_url`, `image_url`) must be populated.\n- `title` is mandatory with a length restriction of maximum 300 characters.\n- `body_text` used only if `post_type` is `text` with maximum 10,000 characters.\n- `link_url` used only if `post_type` is `link` and must be a valid URL.\n- `image_url` used only if `post_type` is `image` and should reference a single image.\n\nThis schema corresponds to the creation DTO for the `reddit_community_posts` table."},"IRedditCommunityPosts":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the post entity."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The member user who authored the post, nullable for guest posts."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The guest user who authored the post, nullable for member posts."},"reddit_community_community_id":{"type":"string","format":"uuid","description":"Identifier of the community this post belongs to."},"post_type":{"type":"string","description":"Type of the post content: text, link, or image.\n\nIndicates the format of the post content.\n\nThis field is mandatory and is the discriminator for the post content variants."},"title":{"type":"string","description":"Title of the post, max 300 characters.\n\nRepresents the headline or brief summary of the post content."},"body_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text content for text posts.\n\nRequired if post_type is 'text'. Maximum length is 10,000 characters."},"link_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for link posts.\n\nRequired if post_type is 'link'. Must be a valid HTTP or HTTPS URL."},"image_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to the image file for image posts.\n\nRequired if post_type is 'image'. Must represent a valid image URL."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the post.\n\nIndicates when the post was initially created."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the post.\n\nTracks when the post was last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp.\n\nNull if the post is active; contains timestamp if deleted."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status representing lifecycle or workflow state.\n\nIndicates the current state such as 'draft', 'published', 'archived'."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business-specific status or lifecycle state.\n\nUsed to track domain-specific workflow stages."}},"required":["id","reddit_community_community_id","post_type","title","created_at","updated_at"],"description":"Post entity representing user-generated content within communities.\n\nSupports posts authored by members or guests, with content types including text, link, and single image.\n\nIncludes metadata such as creation/update timestamps and soft deletion indicators.\n\nThe post type discriminator dictates which content field is relevant.\n\nRelated entities include communities, comments, and votes.\n\nThe schema accurately reflects the 'reddit_community_posts' table structure in the Prisma schema.","x-autobe-prisma-schema":"reddit_community_posts"},"IRedditCommunityPosts.IUpdate":{"type":"object","properties":{"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The member user who authored the post, nullable for guest posts.\n\nCannot be updated to a different author to maintain ownership integrity."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The guest user who authored the post, nullable for member posts.\n\nCannot be updated to a different author to maintain ownership integrity."},"reddit_community_community_id":{"type":"string","format":"uuid","description":"Identifier of the community this post belongs to.\n\nUpdating the community of a post may impact its visibility and access control."},"post_type":{"type":"string","description":"Type of the post content: text, link, or image.\n\nIndicates the format of the post content.\n\nImpacts which content field is relevant.\n\nTypically immutable after creation, but may be updated in rare cases."},"title":{"type":"string","description":"Title of the post, max 300 characters.\n\nRepresents the headline or brief summary of the post content.\n\nCan be updated to correct or clarify subject matter."},"body_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text content for text posts.\n\nRequired if post_type is 'text'. Maximum length is 10,000 characters."},"link_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for link posts.\n\nRequired if post_type is 'link'. Must be a valid HTTP or HTTPS URL."},"image_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to the image file for image posts.\n\nRequired if post_type is 'image'. Must represent a valid image URL."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp.\n\nMarked when the post is deleted, null otherwise.\n\nUpdating this field typically performed by system mechanisms."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status representing lifecycle or workflow state.\n\nIndicates the current state such as 'draft', 'published', 'archived'."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business-specific status or lifecycle state.\n\nUsed to track domain-specific workflow stages."}},"required":[],"description":"Update DTO for post entity allowing partial modifications.\n\nAll fields are optional to support partial updates.\n\nOwnership fields like author IDs should not be changed in practice.\n\nSoft deletion and status fields can be updated by authorized services.\n\nReflects the 'reddit_community_posts' table with fields adapted for update operations.\n\nNo new properties outside of the Prisma model are introduced here.\n\nThe schema precisely conveys post entity properties subject to update."},"IRedditCommunityComment.IRequest":{"type":"object","properties":{"postId":{"type":"string","format":"uuid","description":"Unique identifier of the target post."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member user who authored the comment. Optional for guests."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Guest user who authored the comment. Optional for members."},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment id for nested replies. Null if root comment."},"body_text":{"type":"string","description":"Content text of the comment limited to 2000 characters."},"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number for pagination. Null for default."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limit of records per page. Null for default."}},"required":["postId"],"description":"Search and filtering parameters for redditCommunity comments.\n\nThis schema includes required post identifier, optional author information for members or guests, optional parent comment id for nesting, comment body text, and pagination controls."},"IRedditCommunityComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment."},"reddit_community_post_id":{"type":"string","format":"uuid","description":"Identifier of the parent post."},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the parent comment in case of nested replies."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the member who authored the comment if applicable."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the guest author if applicable."},"body_text":{"type":"string","description":"The text content of the comment, limited to 2000 characters."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was soft deleted. Null if not deleted."}},"required":["id","reddit_community_post_id","body_text","created_at","updated_at"],"description":"Detailed information for a redditCommunity comment.\n\nThis schema represents the reddit_community_comments record including content data, authorship references to members or guests, and timestamps for creation, modification, and soft deletion state."},"IRedditCommunityComment.ICreate":{"type":"object","properties":{"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment identifier for nested replies. Omit for root-level comments."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the member authoring the comment."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the guest authoring the comment."},"reddit_community_post_id":{"type":"string","format":"uuid","description":"UUID of the parent post the comment belongs to."},"body_text":{"type":"string","description":"Textual content of the comment limited to 2,000 characters."}},"required":["reddit_community_post_id","body_text"],"description":"Schema for creating a new comment in a post. Includes reference to the parent post, optional reference to a parent comment for nested replies, author identifiers for members or guests, and the comment text body."},"IRedditCommunityComment.IUpdate":{"type":"object","properties":{"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment identifier for nested replies. Omit for root-level comments."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the member authoring the comment."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the guest authoring the comment."},"reddit_community_post_id":{"type":"string","format":"uuid","description":"UUID of the parent post the comment belongs to."},"body_text":{"type":"string","description":"Textual content of the comment limited to 2,000 characters."}},"required":[],"description":"Schema for updating an existing comment. All fields are optional and may be modified, including parent comment reference, author identifiers, post association, and comment content."},"IRedditCommunityPostVote.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter by voting member UUID."},"post_id":{"type":"string","format":"uuid","description":"Filter votes by target post UUID."},"vote_value":{"type":"integer","description":"Filter by the vote's integer value: +1 upvote, -1 downvote, 0 for removed vote."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for filtering soft-deleted votes (null for active votes)."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter votes created at or after this timestamp."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter votes updated at or after this timestamp."},"page":{"oneOf":[{"type":"integer","minimum":1,"format":"uint32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1,"format":"uint32"},{"type":"null"}],"description":"Limit for number of records per page, default 100."}},"required":[],"description":"Parameters for filtering and paginating redditCommunity post votes.\n\nThis schema defines the search and pagination options available when retrieving a list of votes cast on posts. Members can specify criteria to filter votes based on member ID, post ID, vote value, creation and update timestamps, and deleted status. Pagination properties allow clients to manage result set sizes and pages.\n\nProperties:\n- member_id: Filters votes by the voting member's UUID.\n- post_id: Filters votes on a specific post by UUID.\n- vote_value: Filters votes by their integer value (+1 upvote, -1 downvote, 0 vote removed).\n- deleted_at: Allows filter on votes that are soft-deleted or active.\n- created_at: Filter votes created within a time range.\n- updated_at: Filter votes updated within a time range.\n- page: The page number for pagination.\n- limit: Number of records per page, default is 100.\n\nRequired properties: none. All filters are optional to allow flexible querying."},"IRedditCommunityPostVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post vote record."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who cast the vote."},"post_id":{"type":"string","format":"uuid","description":"Unique identifier of the post being voted on."},"vote_value":{"type":"integer","description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion of the vote; null if active."}},"required":["id","member_id","post_id","vote_value","created_at","updated_at"],"description":"Detailed record of a vote cast by a member on a RedditCommunity post.\n\nProperties:\n- id: Unique UUID of the vote record.\n- member_id: UUID of the voting member.\n- post_id: UUID of the post being voted on.\n- vote_value: Vote integer value (+1 upvote, -1 downvote, 0 vote removed).\n- created_at: Timestamp of when the vote was cast.\n- updated_at: Timestamp of the last update to the vote.\n- deleted_at: Nullable timestamp if the vote has been soft deleted.\n\nThe record enforces a unique constraint on the member_id and post_id combination to prevent multiple active votes by the same member on the same post.\n\nThis entity is fundamental to the platform's voting system, enabling tracking and aggregation of vote counts and user karma."},"IRedditCommunityPostVote.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Belonged member's unique identifier casting the vote."},"post_id":{"type":"string","format":"uuid","description":"Identifier of the post receiving the vote."},"vote_value":{"type":"integer","description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for removal."}},"required":["member_id","post_id","vote_value"],"description":"Request payload for creating a new vote on a RedditCommunity post.\n\nIncludes the identifier of the member casting the vote, the target post's identifier, and the vote value (+1, -1, or 0 for vote removal).\n\nAll properties strictly adhere to the schema definitions from the Prisma 'reddit_community_post_votes' table."},"IRedditCommunityPostVote.IUpdate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"Updated vote value: +1 for upvote, -1 for downvote, 0 to remove vote."}},"required":["vote_value"],"description":"Request payload for updating an existing vote on a RedditCommunity post.\n\nAllows modification of the vote value to represent an upvote, downvote, or vote removal.\n\nThis schema strictly follows the properties of the Prisma 'reddit_community_post_votes' table in the system."},"IRedditCommunityCommentVote.IRequest":{"type":"object","properties":{"page":{"type":"number","format":"uint32","description":"Page number."},"limit":{"type":"number","format":"uint32","description":"Limitation of records per a page. @default 100"},"sort_by":{"type":"string","description":"Sort property name"},"order_by":{"oneOf":[{"const":"asc","description":"Sort order direction ascending."},{"const":"desc","description":"Sort order direction descending."}],"description":"Sort order direction, asc or desc."}},"required":["page","limit"],"description":"Search parameters for redditCommunity comment votes including pagination and sorting."},"IRedditCommunityCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment vote record."},"member_id":{"type":"string","format":"uuid","description":"ID of the member who cast the vote."},"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being voted on."},"vote_value":{"type":"integer","description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the vote was soft deleted."}},"required":["id","member_id","comment_id","vote_value","created_at","updated_at"],"description":"Represents a vote by a member on a reddit community comment. Tracks the value of the vote (up, down, or removed), timestamps, and relations to member and comment."},"IRedditCommunityCommentVote.ICreate":{"type":"object","properties":{"member_id":{"type":"string","description":"ID of the member who cast the vote."},"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being voted on."},"vote_value":{"type":"integer","description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removal."},"id":{"type":"string","format":"uuid","description":"Primary key of the vote record."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the vote was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the vote was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the vote was soft deleted."},"member":{"oneOf":[{"type":"object","description":"The member who cast the vote.","properties":{},"required":[]},{"type":"null"}],"description":"The member who cast the vote."},"comment":{"oneOf":[{"type":"object","description":"The comment being voted on.","properties":{},"required":[]},{"type":"null"}],"description":"The comment being voted on."}},"required":["member_id","comment_id","vote_value"],"description":"Request body to create a vote on a reddit community comment. Includes member ID, comment ID, and vote value (+1 upvote, -1 downvote, or 0 for removing the vote). Supports timestamps and relations for auditing."},"IRedditCommunityCommentVote.IUpdate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"Updated vote value: +1 for upvote, -1 for downvote, 0 to remove vote."},"id":{"type":"string","format":"uuid","description":"Primary key of the vote record."},"member_id":{"type":"string","format":"uuid","description":"ID of the member who cast the vote."},"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being voted on."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the vote was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the vote was soft deleted."},"member":{"oneOf":[{"type":"object","description":"The member who cast the vote.","properties":{},"required":[]},{"type":"null"}],"description":"The member who cast the vote."},"comment":{"oneOf":[{"type":"object","description":"The comment being voted on.","properties":{},"required":[]},{"type":"null"}],"description":"The comment being voted on."}},"required":["vote_value"],"description":"Request body to update an existing vote on a reddit community comment. Allows modification of the vote value (+1 upvote, -1 downvote, 0 vote removal) and timestamps for audit."},"IRedditCommunityReport.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Page number for pagination."},"limit":{"type":"integer","format":"int32","description":"Number of records per page."},"sort_by":{"type":"string","description":"Field to sort by, such as 'created_at' or 'category'."},"order":{"oneOf":[{"const":"asc","description":"Sort order: ascending (asc) or descending (desc)."},{"const":"desc","description":"Sort order: ascending (asc) or descending (desc)."}],"description":"Sort order: ascending (asc) or descending (desc)."},"status_id":{"type":"string","format":"uuid","description":"Filter by report status ID."},"category":{"type":"string","description":"Filter reports by category such as 'spam', 'abuse', etc."},"reporter_member_id":{"type":"string","format":"uuid","description":"Filter reports by the reporter member ID."},"reported_post_id":{"type":"string","format":"uuid","description":"Filter reports by the reported post ID."},"reported_comment_id":{"type":"string","format":"uuid","description":"Filter reports by the reported comment ID."},"reported_member_id":{"type":"string","format":"uuid","description":"Filter reports by the reported member ID."}},"description":"Request object for searching and filtering content reports.\n\nAllows filtering by various fields including status, category, reporter, and reported content.\nSupports sorting and pagination controls.","required":[]},"IRedditCommunityReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the report."},"reporter_guest_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the guest user who made the report, if applicable."},{"type":"null"}],"description":"ID of the guest user who made the report, if applicable."},"reporter_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member user who made the report, if applicable."},{"type":"null"}],"description":"ID of the member user who made the report, if applicable."},"reported_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post that was reported, if applicable."},{"type":"null"}],"description":"ID of the post that was reported, if applicable."},"reported_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment that was reported, if applicable."},{"type":"null"}],"description":"ID of the comment that was reported, if applicable."},"reported_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member user that was reported, if applicable."},{"type":"null"}],"description":"ID of the member user that was reported, if applicable."},"status_id":{"type":"string","format":"uuid","description":"Current status ID of the report, linked to report status entity."},"category":{"type":"string","description":"Category of the report, such as spam, abuse, other violations."},"description":{"oneOf":[{"type":"string","description":"Optional textual description provided by the reporter detailing the issue."},{"type":"null"}],"description":"Optional textual description provided by the reporter detailing the issue."},"created_at":{"type":"string","format":"date-time","description":"Date and time when the report was created."},"updated_at":{"type":"string","format":"date-time","description":"Date and time of the last update to the report."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp, if the report is deleted."},{"type":"null"}],"description":"Soft deletion timestamp, if the report is deleted."}},"description":"Detailed content report information within redditCommunity platform.\n\nCaptures reporter identity, reported entity, category, text description, status, and lifecycle timestamps.\nSupports both guest and member reporters and multi-type content reporting.\n\nUsed for moderation and auditing purposes.","required":["id","status_id","category","created_at","updated_at"]},"IRedditCommunityReport.ICreate":{"type":"object","properties":{"reporter_guest_id":{"type":"string","format":"uuid","description":"Identifier of the guest user who made the report. Nullable if the reporter is a member."},"reporter_member_id":{"type":"string","format":"uuid","description":"Identifier of the member user who made the report. Nullable if the reporter is a guest."},"reported_post_id":{"type":"string","format":"uuid","description":"Identifier of the post being reported. Nullable if a comment or member is reported."},"reported_comment_id":{"type":"string","format":"uuid","description":"Identifier of the comment being reported. Nullable if a post or member is reported."},"reported_member_id":{"type":"string","format":"uuid","description":"Identifier of the member user being reported. Nullable if a post or comment is reported."},"status_id":{"type":"string","format":"uuid","description":"Identifier of the current status of the report (e.g., pending, reviewed, action taken)."},"category":{"type":"string","description":"Category or reason for the report such as spam, abuse, or other violation."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description provided by the reporter."},{"type":"null"}],"description":"Optional detailed description provided by the reporter."}},"required":["status_id","category"],"description":"Request payload for creating a new content moderation report.\n\nIncludes optional information about the reporter (either guest or member), target of the report (post, comment, or member), report status, category, and optional description.\n\nTimestamps are managed by the system and therefore omitted.\n\nThis schema represents the request body to create a report entry in the reddit_community_reports table."},"IRedditCommunityReport.IUpdate":{"type":"object","properties":{"reporter_guest_id":{"oneOf":[{"type":"string","format":"uuid","description":"Identifier of the guest user who made the report. Nullable if the reporter is a member."},{"type":"null"}],"description":"Identifier of the guest user who made the report. Nullable if the reporter is a member."},"reporter_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Identifier of the member user who made the report. Nullable if the reporter is a guest."},{"type":"null"}],"description":"Identifier of the member user who made the report. Nullable if the reporter is a guest."},"reported_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Identifier of the post being reported. Nullable if a comment or member is reported."},{"type":"null"}],"description":"Identifier of the post being reported. Nullable if a comment or member is reported."},"reported_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Identifier of the comment being reported. Nullable if a post or member is reported."},{"type":"null"}],"description":"Identifier of the comment being reported. Nullable if a post or member is reported."},"reported_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Identifier of the member user being reported. Nullable if a post or comment is reported."},{"type":"null"}],"description":"Identifier of the member user being reported. Nullable if a post or comment is reported."},"status_id":{"type":"string","format":"uuid","description":"Identifier of the current status of the report (e.g., pending, reviewed, action taken)."},"category":{"type":"string","description":"Category or reason for the report such as spam, abuse, or other violation."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description provided by the reporter."},{"type":"null"}],"description":"Optional detailed description provided by the reporter."}},"required":["status_id","category"],"description":"Request payload for updating a content moderation report.\n\nProperties mirror those on report create, allowing modification of report target, reporter, status, category, and details.\n\nTimestamps are system managed and therefore omitted.\n\nThis schema represents the request body to update a report entry in the reddit_community_reports table."},"IRedditCommunityReportAction.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Page number for pagination"},"limit":{"type":"integer","format":"int32","description":"Limit number of records per page"},"sortBy":{"type":"string","description":"Field name to sort results"},"order":{"oneOf":[{"const":"asc","description":"Sort order: ascending or descending"},{"const":"desc","description":"Sort order: ascending or descending"}],"description":"Sort order: ascending or descending"},"filterReportId":{"type":"string","format":"uuid","description":"Filter actions by report ID"},"filterModeratorMemberId":{"type":"string","format":"uuid","description":"Filter actions by moderator member ID"},"filterAdminMemberId":{"type":"string","format":"uuid","description":"Filter actions by admin member ID"},"filterActionType":{"type":"string","description":"Filter actions by action type"},"filterCreatedAtFrom":{"type":"string","format":"date-time","description":"Filter actions created after this date"},"filterCreatedAtTo":{"type":"string","format":"date-time","description":"Filter actions created before this date"}},"required":["page","limit"],"description":"Request parameters for searching and filtering moderation actions in a paginated manner.\n\nSupports pagination, sorting, and multiple filtering options."},"IRedditCommunityReportAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the report action"},"report_id":{"type":"string","format":"uuid","description":"Identifier of the linked report"},"moderator_member_id":{"type":"string","format":"uuid","description":"Identifier of the moderator member performing the action"},"admin_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the admin performing the action, if applicable"},"action_type":{"type":"string","description":"Type of moderation action performed, e.g., warning, deletion, suspension"},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes describing details of the action"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the action was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the action"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion of the action, if deleted"},"report":{"$ref":"#/components/schemas/IRedditCommunityReportAction.IRequest","description":"Reference to the associated report entity"},"moderatorMember":{"$ref":"#/components/schemas/IRedditCommunityMember.ISummary","description":"Reference to the moderator member who performed the action"},"adminMember":{"oneOf":[{"$ref":"#/components/schemas/IRedditCommunityAdmin.ISummary"},{"type":"null"}],"description":"Reference to the admin member who performed the action or null if not applicable"}},"required":["id","report_id","moderator_member_id","action_type","created_at","updated_at"],"description":"Moderation action record representing an action taken in response to a user report.\n\nIncludes relationships to the report, moderator member, and admin member performing the action."},"IRedditCommunityReportAction.ICreate":{"type":"object","properties":{"report_id":{"type":"string","format":"uuid","description":"Linked report {@link reddit_community_reports.id}."},"moderator_member_id":{"type":"string","format":"uuid","description":"Moderator member who performed the action {@link reddit_community_members.id}."},"admin_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin member who performed the action {@link reddit_community_admins.id}."},"action_type":{"type":"string","description":"Type of moderation action taken, e.g., warning, deletion, suspension."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed notes regarding the action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the action."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if the action is soft deleted."}},"required":["report_id","moderator_member_id","action_type","created_at","updated_at"],"description":"Schema for creating a new report action. Represents a moderation action taken in response to a user report.\n\nRequired properties include the report ID, moderator member ID, action type, and creation and update timestamps.\n\nOptional properties include admin member ID, detailed notes, and a soft delete timestamp.\n\nAll properties must be validated and formatted according to business and security rules."},"IRedditCommunityReportAction.IUpdate":{"type":"object","properties":{"report_id":{"type":"string","format":"uuid","description":"Linked report {@link reddit_community_reports.id}."},"moderator_member_id":{"type":"string","format":"uuid","description":"Moderator member who performed the action {@link reddit_community_members.id}."},"admin_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin member who performed the action {@link reddit_community_admins.id}."},"action_type":{"type":"string","description":"Type of moderation action taken, e.g., warning, deletion, suspension."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed notes regarding the action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the action."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if the action is soft deleted."}},"required":["report_id","moderator_member_id","action_type","created_at","updated_at"],"description":"Schema for updating a report action. Represents modifications to a moderation action associated with user reports.\n\nRequired properties include report ID, moderator member ID, action type, creation and update timestamps.\n\nOptional properties include admin member ID, notes, and soft delete timestamp.\n\nStrict validation of property formats and values is mandated."},"IRedditCommunityReportStatus.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page."},"name":{"type":"string","description":"Report status name for searching."}},"description":"Search criteria to filter, paginate, and sort redditCommunity report statuses.\n\nAllows querying by name and supports pagination parameters page and limit.","required":[]},"IRedditCommunityReportStatus":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier of the report status."},"name":{"type":"string","description":"Name of the report status, e.g., pending, reviewed, action taken."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation about the status meaning and usage."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the status record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the status record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if the status record is soft deleted. Null means active."}},"required":["id","name","created_at","updated_at"],"description":"Entity representing the possible statuses of reports.\n\nEach status corresponds to a lifecycle state in the report handling process.\n\nDetailed information includes status name and descriptions."},"IRedditCommunityReportStatus.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the report status. Used to define distinct lifecycle states such as 'pending', 'reviewed', or 'action taken'. This property must be unique across all report statuses in the system.\n\nThe name should be clear and descriptive to ensure accurate identification of report status during moderation workflows."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description providing additional context about the report status.\n\nThis can include usage notes, expected workflows, or specific conditions applying to this status."}},"required":["name"],"description":"Create request schema for defining a new content report status in redditCommunity platform.\n\nIncludes a unique status name and optional description to support moderation workflows.\n\nCreation timestamps are managed automatically by the system.","x-autobe-prisma-schema":"reddit_community_report_statuses"},"IRedditCommunityReportStatus.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the report status. Changing this name impacts how reports are classified and tracked.\n\nMust remain unique and descriptive to prevent ambiguity in report lifecycle management."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description text that can be updated to clarify or amend the meaning of the report status."}},"required":["name"],"description":"Update request schema for content report status entity in redditCommunity platform.\n\nAllows modification of the status name and description while maintaining system integrity.\n\nUpdate timestamps are handled automatically by the system.","x-autobe-prisma-schema":"reddit_community_report_statuses"},"IRedditCommunityGuest.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest record in the redditCommunity platform."},"session_id":{"type":"string","description":"Guest session identifier for tracking; unique per guest."},"ip_address":{"type":"string","description":"IP address from which the guest session originated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user agent string from the client's browser or device."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session was created, in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session record was last updated, in ISO 8601 format."}},"required":["id","session_id","ip_address","created_at","updated_at"],"description":"Summary information for a guest user in the redditCommunity platform.\n\nThis includes the unique guest ID, session tracking identifiers, IP address, optional user agent string, and timestamps for creation and last update.\n\nThis simplified summary is optimized for listing guests without showing sensitive or excessive details."},"IRedditCommunityMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member user within the redditCommunity platform."},"email":{"type":"string","format":"email","description":"Unique email address of the member used for login and communication."},"is_email_verified":{"type":"boolean","description":"Indicates whether the member's email address has been verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created, formatted in ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member account details were last updated, formatted in ISO 8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating account deactivation; null if active."}},"required":["id","email","is_email_verified","created_at","updated_at"],"description":"Summary information for a registered member user in the redditCommunity platform.\n\nThis includes the member's unique ID, email, verification status, timestamps for account creation and updates, and optional soft deletion timestamp.\n\nThis summary is suitable for listing members with essential public account details."},"IRedditCommunityCommunityModerators.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community moderator assignment record. This ID is used to reference the assignment in requests and responses."},"member_id":{"type":"string","format":"uuid","description":"Identifier of the member user assigned as a moderator within a community. This links to the member entity and defines the moderator's identity."},"community_id":{"type":"string","format":"uuid","description":"Identifier of the community for which the member is a moderator. This links to the community entity and defines the scope of moderation privileges."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp representing the exact date and time when the member was assigned as a moderator for the community. This helps in audit and role duration tracking."}},"required":["id","member_id","community_id","assigned_at"],"description":"Summary view of a community moderator assignment within the redditCommunity platform.\n\nThis schema includes essential properties such as assignment ID, associated member ID, community ID, and the assignment timestamp. It is optimized for listing or referencing moderator assignments without full detail.\n\nThe summary omits detailed member or community properties to reduce payload size and focuses on identifying the moderator and their assignment within a community context.\n\nThis type corresponds to the `reddit_community_community_moderators` table in the Prisma schema and is used primarily in API responses that list or summarize moderator assignments."},"IRedditCommunityCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community entity. Used to reference the community in external requests and responses."},"name":{"type":"string","description":"The unique name of the community, adhering to naming conventions and used for display and URL paths."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description text for the community providing additional details or thematic information about the community."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the community was originally created in the platform. Useful for sorting and historical reference."}},"required":["id","name","created_at"],"description":"Summary representation of a redditCommunity user-created community.\n\nThis type includes key properties such as unique community ID, the unique name, optional community description, and the creation timestamp.\n\nIt serves for list views or contexts where detailed community information is not required while retaining essential metadata.\n\nThis schema directly corresponds to the `reddit_community_communities` table from the Prisma schema and ensures all required identifiers and attributes are included."},"IRedditCommunityCommunityModerator.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community moderator record.\n\nThis ID uniquely identifies the assignment of a member as a moderator to a specific community within the system."},"member_id":{"type":"string","format":"uuid","description":"UUID of the member who is assigned as a moderator.\n\nThis references the reddit_community_members table representing the user's membership."},"community_id":{"type":"string","format":"uuid","description":"UUID of the community to which the moderator is assigned.\n\nThis references the reddit_community_communities table representing the community's identity."},"assigned_at":{"type":"string","format":"date-time","description":"Date and time when the member was assigned as a moderator of the community.\n\nThis timestamp records the official start of moderation privileges for the member in the community."}},"required":["id","member_id","community_id","assigned_at"],"description":"Summary information of a community moderator.\n\nThis type includes the unique identifier for the moderator record, the member ID referencing the user assigned, the community ID where they moderate, and the assignment timestamp.\n\nUsed primarily for listing and simplified representations in administrative and community contexts.\n\nCorresponds directly to the reddit_community_community_moderators table within the Prisma database schema."},"IRedditCommunityPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post.\n\nThis ID uniquely identifies the post entity within the system and database."},"reddit_community_community_id":{"type":"string","format":"uuid","description":"UUID of the community the post belongs to.\n\nReferences the reddit_community_communities table indicating the community context of the post."},"post_type":{"type":"string","description":"Type of post content - possible values include 'text', 'link', or 'image'.\n\nDefines the nature of the content and determines which content property is applicable."},"title":{"type":"string","description":"Title of the post.\n\nThis is the main text heading visible to users, limited to 300 characters to ensure succinct display."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the post was created.\n\nThis is provided in ISO 8601 date-time format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating the last time the post was updated.\n\nThis is provided in ISO 8601 date-time format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp.\n\nIf not null, indicates the post has been marked as deleted without physical removal from the database."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Current status of the post indicating workflow or lifecycle state.\n\nThe string value typically encodes states such as 'published', 'draft', or 'archived', though specific values depend on business logic."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business-specific lifecycle or status classification.\n\nProvides additional semantic meaning for operational purposes beyond the primary status field."}},"required":["id","reddit_community_community_id","post_type","title","created_at","updated_at"],"description":"Summary information of a post within a community.\n\nIncludes the post's unique identifier, community association, content type, title, and relevant timestamps.\n\nSoft deletion and status fields are nullable to accommodate creation and lifecycle management.\n\nThis type is designed for efficient listing and summarization of posts with essential metadata.\n\nCorresponds to the reddit_community_posts table in the Prisma schema."},"IRedditCommunityComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment.\n\nIt uniquely identifies each comment entity within the system for reference and linkage."},"body_text":{"type":"string","description":"Text content of the comment limited to 2,000 characters.\n\nRepresents the main content of the comment authored by a member or guest."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authoring member's unique identifier, nullable if the author is a guest.\n\nLinks the comment to the member entity who wrote it."},"author_guest_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authoring guest's unique identifier, nullable if the author is a member.\n\nReferences the guest entity responsible for this comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created.\n\nUsed for ordering and auditing comment creation times."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the comment.\n\nRecords the most recent edit time for auditing and UI display."}},"required":["id","body_text","created_at","updated_at"],"description":"Summary information for a redditCommunity comment.\n\nIncludes unique identifier, content snippet, author references (member or guest), and timestamps for creation and last update.\n\nUsed primarily in listing or summary views where full detail is unnecessary.\n\nThis summary omits deep recursive relations to optimize data payload size."},"IRedditCommunityPostVote.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post vote.\n\nUniquely identifies each vote record linked to a member and post."},"member_id":{"type":"string","format":"uuid","description":"Member who cast the vote.\n\nReferences the unique user identifier who performed this voting action."},"post_id":{"type":"string","format":"uuid","description":"Identifier of the post voted upon.\n\nLinks the vote to the specific post entity."},"vote_value":{"type":"integer","description":"Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removal.\n\nIndicates the user's current voting action on the post."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was created.\n\nUsed for auditing and tracking vote history."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the vote record.\n\nRecords the time when the vote was last modified."}},"required":["id","member_id","post_id","vote_value","created_at","updated_at"],"description":"Summary representation of a vote on a redditCommunity post.\n\nCaptures identifying information about the vote, the voting member, the target post, the vote value, and audit timestamps.\n\nUsed in aggregated lists or vote summaries for quick reference."},"IRedditCommunityReport.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the content report record.\n\nThis primary key uniquely identifies the content report across the redditCommunity platform.\n\nIt is used for referencing the report in moderation workflows and audits."},"category":{"type":"string","description":"Category of the report such as spam, abuse, or other violation.\n\nThis field represents the reason for which content has been reported by a user.\n\nExamples include 'spam', 'abuse', 'harassment', or 'other'.\n\nCategorization supports filtering reports for prioritized moderation handling."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created.\n\nThis indicates the exact date and time the report was initially submitted.\n\nIt is used in audit trails and moderation prioritization."},"status_id":{"type":"string","format":"uuid","description":"Identifier of the current moderation status of the report.\n\nIt links to a report status record such as pending, reviewed, or action taken.\n\nUsed to track the lifecycle state of the report within the moderation process."}},"required":["id","category","created_at","status_id"],"description":"Summary view of a content report record in the redditCommunity platform.\n\nThis summary excludes reporter and reported entity details to minimize exposure of sensitive information.\n\nThe summary includes report identifiers, category, creation timestamp, and status reference.\n\nIntended for use in paginated report listings and moderation queues.","x-autobe-prisma-schema":"reddit_community_reports"},"IRedditCommunityReportStatus.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the report status record.\n\nThis primary key uniquely identifies different report status types such as pending, reviewed, or action taken.\n\nIt is used in moderation workflows and report record linkage."},"name":{"type":"string","description":"Name of the report status.\n\nIt represents a defined lifecycle state of a content report.\n\nExamples include 'pending', 'reviewed', and 'action taken'.\n\nThe name is used to categorize reports during moderation."}},"required":["id","name"],"description":"Summary view of a report status entity used in content moderation.\n\nIt includes essential identifiers and the status name but excludes descriptive or auditing details.\n\nThis summary is optimized for use in UI dropdowns and filter selections.\n\nThe entity is part of the reporting domain managing lifecycle stages for content reports.","x-autobe-prisma-schema":"reddit_community_report_statuses"},"IRedditCommunityAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key unique identifier of the admin user."},"email":{"type":"string","description":"Unique admin email address used for login and communication."},"admin_level":{"type":"integer","format":"int32","description":"The administrator's privilege level indicating their level of access and control within the system."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the admin account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of when the admin account was last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (account deactivation). Null if active."}},"required":["id","email","admin_level","created_at","updated_at"],"description":"Summary information of an admin user within the redditCommunity platform. It includes essential identification, contact, privilege level, and lifecycle timestamps. This summary is used in paginated lists or references of administrator accounts without exposing sensitive authentication information.","x-autobe-prisma-schema":"reddit_community_admins"},"IRedditCommunityUserKarma":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the karma record."},"reddit_community_member_id":{"type":"string","format":"uuid","description":"Identifier of the member whose karma is recorded."},"post_upvotes_karma":{"type":"integer","description":"Accumulated karma points from upvotes on the member's posts."},"post_downvotes_karma":{"type":"integer","description":"Karma points deducted due to downvotes on the member's posts."},"comment_upvotes_karma":{"type":"integer","description":"Accumulated karma points from upvotes on the member's comments."},"comment_downvotes_karma":{"type":"integer","description":"Karma points deducted due to downvotes on the member's comments."},"total_karma":{"type":"integer","description":"Sum of all karma points from posts and comments."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the karma record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the karma record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Null if the karma record is active."}},"required":["id","reddit_community_member_id","post_upvotes_karma","post_downvotes_karma","comment_upvotes_karma","comment_downvotes_karma","total_karma","created_at","updated_at"],"description":"User karma representing the reputation accumulated by a member based on voting activity on their posts and comments. Karma values are broken down into components for post upvotes, post downvotes, comment upvotes, and comment downvotes. The total karma represents the overall reputation score. The entity includes timestamps for creation, updates, and soft deletion status, closely reflecting the underlying 'reddit_community_user_karma' prisma model.","x-autobe-prisma-schema":"reddit_community_user_karma"},"IRedditCommunityCommunitySubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier of the community subscription record."},"reddit_community_member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who subscribed to the community."},"reddit_community_community_id":{"type":"string","format":"uuid","description":"Unique identifier of the subscribed community."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the subscription was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the subscription was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating if the subscription has been canceled. Null means active subscription."}},"required":["id","reddit_community_member_id","reddit_community_community_id","created_at","updated_at"],"description":"Record representing a member's subscription to a community within the redditCommunity platform. It tracks which members have subscribed to which communities, including timestamps for creation, updates, and soft deletion status. This entity supports personalized content feed generation and subscription management features in the system.","x-autobe-prisma-schema":"reddit_community_community_subscriptions"},"IRedditCommunityUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier of the user profile."},"reddit_community_member_id":{"type":"string","format":"uuid","description":"Unique member identifier to whom the profile belongs."},"reddit_community_user_karma_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the karma record associated with the user profile. Nullable if no karma record exists."},"join_date":{"type":"string","format":"date-time","description":"Date and time when the member joined the platform."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User provided biography or description text displayed on their public profile."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the profile record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the profile record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating if the profile is inactive or deleted. Null means active."}},"required":["id","reddit_community_member_id","join_date","created_at","updated_at"],"description":"User profile metadata including public bio, join date, and association to user identity and karma. This structure maintains enriched user information separate from core authentication and role data, facilitating display and management of public profiles. It corresponds exactly to the 'reddit_community_user_profiles' table in the underlying Prisma database schema.","x-autobe-prisma-schema":"reddit_community_user_profiles"}}}}