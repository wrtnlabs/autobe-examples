import { tags } from "typia";

import { IRedditCommunityCommunityModerator } from "./IRedditCommunityCommunityModerator";
import { IRedditCommunityPost } from "./IRedditCommunityPost";
import { IRedditCommunityComment } from "./IRedditCommunityComment";
import { IRedditCommunityPostVote } from "./IRedditCommunityPostVote";
import { IRedditCommunityCommentVote } from "./IRedditCommunityCommentVote";
import { IRedditCommunityUserKarma } from "./IRedditCommunityUserKarma";
import { IRedditCommunityCommunitySubscription } from "./IRedditCommunityCommunitySubscription";
import { IRedditCommunityReport } from "./IRedditCommunityReport";
import { IRedditCommunityReportAction } from "./IRedditCommunityReportAction";
import { IRedditCommunityUserProfile } from "./IRedditCommunityUserProfile";
import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member entity representing registered and authenticated users of the
 * redditCommunity platform. Includes unique email, password hash for
 * authentication, email verification status, timestamps, and links to
 * associated entities such as posts, comments, votes, karma, subscriptions,
 * reports, and user profiles. Fields follow the storage schema in the Prisma
 * database model `reddit_community_members`.
 *
 * This entity forms the core of user management and authentication, supporting
 * user identity, activity tracking, and role-based permissions.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityMember = {
  /** Unique identifier for the member user */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address used for login and communication, formatted as an
   * email
   */
  email: string;

  /** Hashed password for secure authentication; never exposed in response */
  password_hash: string;

  /** Indicator whether the user's email has been verified */
  is_email_verified: boolean;

  /** Timestamp of member creation */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last member data update */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp indicating soft deletion (account deactivation). Null if active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** List of community moderator assignments for this member */
  reddit_community_community_moderators?:
    | IRedditCommunityCommunityModerator.ISummary[]
    | undefined;

  /** List of posts authored by this member */
  reddit_community_posts?: IRedditCommunityPost.ISummary[] | undefined;

  /** List of comments authored by this member */
  reddit_community_comments?: IRedditCommunityComment.ISummary[] | undefined;

  /** Collection of votes cast by this member on posts */
  reddit_community_post_votes?: IRedditCommunityPostVote[] | undefined;

  /** Collection of votes cast by this member on comments */
  reddit_community_comment_votes?: IRedditCommunityCommentVote[] | undefined;

  /** Karma information associated with this member */
  reddit_community_user_karma?: IRedditCommunityUserKarma | undefined;

  /** List of community subscriptions for this member */
  reddit_community_community_subscriptions?:
    | IRedditCommunityCommunitySubscription[]
    | undefined;

  /** Reports submitted by this member */
  reddit_community_reports_of_reporter_member_id?:
    | IRedditCommunityReport.ISummary[]
    | undefined;

  /** Reports submitted against this member */
  reddit_community_reports_of_reported_member_id?:
    | IRedditCommunityReport.ISummary[]
    | undefined;

  /** Report actions performed by this member */
  reddit_community_report_actions?: IRedditCommunityReportAction[] | undefined;

  /** User profile information linked to this member */
  reddit_community_user_profiles?: IRedditCommunityUserProfile | undefined;
};
export namespace IRedditCommunityMember {
  /**
   * Request body schema for member registration including a valid email and a
   * plain text password to be hashed securely.
   */
  export type ICreate = {
    /** Unique email address used for member registration and login. */
    email: string & tags.Format<"email">;

    /**
     * Plain text password for the user. Must be securely hashed by backend
     * before storing.
     */
    password: string;
  };

  /**
   * Authorized member user response containing authentication tokens and
   * associated user information.
   *
   * This schema represents the return type after a successful authentication
   * operation such as login, registration, or token refresh.
   *
   * Contains the unique user ID along with JWT token information necessary
   * for session management.
   *
   * Sensitive information like passwords or internal flags are excluded for
   * security.
   *
   * All tokens conform to the standard authorization token format used across
   * the platform.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated member user. */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address used for login and communication, formatted as
     * an email
     */
    email: string;

    /** Hashed password for secure authentication; never exposed in response */
    password_hash: string;

    /** Indicator whether the user's email has been verified */
    is_email_verified: boolean;

    /** Timestamp of member creation */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last member data update */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating soft deletion (account deactivation). Null if
     * active
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** List of community moderator assignments for this member */
    reddit_community_community_moderators?:
      | IRedditCommunityCommunityModerator.ISummary[]
      | undefined;

    /** List of posts authored by this member */
    reddit_community_posts?: IRedditCommunityPost.ISummary[] | undefined;

    /** List of comments authored by this member */
    reddit_community_comments?: IRedditCommunityComment.ISummary[] | undefined;

    /** Collection of votes cast by this member on posts */
    reddit_community_post_votes?: IRedditCommunityPostVote[] | undefined;

    /** Collection of votes cast by this member on comments */
    reddit_community_comment_votes?: IRedditCommunityCommentVote[] | undefined;

    /** Karma information associated with this member */
    reddit_community_user_karma?: IRedditCommunityUserKarma | undefined;

    /** List of community subscriptions for this member */
    reddit_community_community_subscriptions?:
      | IRedditCommunityCommunitySubscription[]
      | undefined;

    /** Reports submitted by this member */
    reddit_community_reports_of_reporter_member_id?:
      | IRedditCommunityReport.ISummary[]
      | undefined;

    /** Reports submitted against this member */
    reddit_community_reports_of_reported_member_id?:
      | IRedditCommunityReport.ISummary[]
      | undefined;

    /** Report actions performed by this member */
    reddit_community_report_actions?:
      | IRedditCommunityReportAction[]
      | undefined;

    /** User profile information linked to this member */
    reddit_community_user_profiles?: IRedditCommunityUserProfile | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Member login request schema containing credentials for authentication.
   *
   * Includes the member's email and password used for verifying identity.
   *
   * Password is in plaintext and transmitted securely to be hashed onsite.
   *
   * Email must be in a valid email format.
   *
   * The provided credentials will be validated against stored member data.
   */
  export type ILogin = {
    /** Member's registered email address used for login. */
    email: string & tags.Format<"email">;

    /** Member's plaintext password for authentication. */
    password: string;
  };

  /**
   * Refresh token request schema for member user to obtain new JWT access
   * token.
   */
  export type IRefresh = {
    /** JWT refresh token string used to obtain a new access token. */
    refresh_token: string;
  };

  /**
   * Request DTO for searching and filtering reddit community members.
   *
   * Supports pagination, filtering by email, verification status, and
   * creation date range.
   */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limitation of records per a page.
     *
     * @default 100
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Email address to filter members.
     *
     * Must be unique when set.
     *
     * Format: email
     */
    email?: string | undefined;

    /** Filter members by their email verified status (true or false). */
    is_email_verified?: boolean | undefined;

    /** Filter members created at or after this date. */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter members created at or before this date. */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update data for a redditCommunity member user account.
   *
   * Includes email, password hash, email verification status, and soft
   * deletion timestamp.
   *
   * All defined properties are optional to allow partial update.
   *
   * Used for member account management and profile updates.
   *
   * Never includes creation timestamps or immutable fields.
   *
   * Validation ensures email uniqueness and password hash format.
   */
  export type IUpdate = {
    /**
     * Unique email address used by the member. Must be a valid email
     * format.
     *
     * Represents the user's primary login identifier.
     *
     * Constraints: Must be unique in the system.
     *
     * Example: "user@example.com"
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Hashed password of the member.
     *
     * This field stores securely hashed password data.
     *
     * Required for authentication.
     *
     * Example hash:
     * "$2b$12$EixZaYVK1fsbw1Zfbx3OXePaWxn96p36b9Mrz1uRGZCpz/FKQ5Kfa"
     */
    password_hash?: string | undefined;

    /**
     * Flag indicating whether the member's email address is verified.
     *
     * True if the user has completed email verification process.
     *
     * False if verification pending or failed.
     *
     * Used to enforce email-based authentication security.
     */
    is_email_verified?: boolean | undefined;

    /**
     * Soft deletion timestamp.
     *
     * Indicates when the member was logically deleted.
     *
     * Null indicates active member.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for a registered member user in the redditCommunity
   * platform.
   *
   * This includes the member's unique ID, email, verification status,
   * timestamps for account creation and updates, and optional soft deletion
   * timestamp.
   *
   * This summary is suitable for listing members with essential public
   * account details.
   */
  export type ISummary = {
    /**
     * Unique identifier of the member user within the redditCommunity
     * platform.
     */
    id: string & tags.Format<"uuid">;

    /** Unique email address of the member used for login and communication. */
    email: string & tags.Format<"email">;

    /** Indicates whether the member's email address has been verified. */
    is_email_verified: boolean;

    /** Timestamp when the member account was created, formatted in ISO 8601. */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the member account details were last updated,
     * formatted in ISO 8601.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp indicating account deactivation; null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
