import { tags } from "typia";

import { IRedditCommunityReportAction } from "./IRedditCommunityReportAction";
import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin users with full system administrative privileges across all communities
 * and platform settings. Stores admin user authentication data and
 * role-specific metadata.
 *
 * This entity corresponds to the reddit_community_admins table in the Prisma
 * schema.
 *
 * Property descriptions reference the database columns and business purpose.
 *
 * This type is crucial for authentication, authorization, and administrative
 * control.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityAdmin = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique admin email address used for login and communication. */
  email: string;

  /** Hashed password for secure authentication. */
  password_hash: string;

  /** Integer indicating the level of administrative privileges. */
  admin_level: number & tags.Type<"int32">;

  /** Timestamp of admin user creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last admin user record update. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp indicating soft deletion (account deactivation). */
  deleted_at: (string & tags.Format<"date-time">) | null;

  /** Moderation actions performed by the admin. */
  reddit_community_report_actions?: IRedditCommunityReportAction[] | undefined;
};
export namespace IRedditCommunityAdmin {
  /**
   * Request body for admin user registration (ICreate). Contains email and
   * plaintext password for secure account creation.
   *
   * This type corresponds to the data used to create a new admin user in the
   * reddit_community_admins database table.
   *
   * Email must be unique and password must meet security criteria.
   *
   * On success, the admin account is created and JWT tokens are issued for
   * authentication.
   */
  export type ICreate = {
    /**
     * Unique email address used for admin login and communication.
     *
     * Must be unique and follow standard email format.
     */
    email: string & tags.Format<"email">;

    /**
     * Admin user's login password in plaintext.
     *
     * Should comply with security policies and password strength
     * requirements.
     */
    password: string;
  };

  /**
   * Authorization response containing JWT token for an admin user.
   *
   * This response is returned after successful authentication operations such
   * as login or registration.
   *
   * Contains user identification and security token information for session
   * management.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized admin user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the authorized admin user. */
    email: string & tags.Format<"email">;

    /** Hashed password for secure authentication. */
    password_hash: string;

    /** Integer indicating the level of administrative privileges. */
    admin_level: number & tags.Type<"int32">;

    /** Timestamp of admin user creation. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last admin user record update. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp indicating soft deletion (account deactivation). */
    deleted_at: (string & tags.Format<"date-time">) | null;

    /** Moderation actions performed by the admin. */
    reddit_community_report_actions?:
      | IRedditCommunityReportAction[]
      | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login credentials payload for admin user authentication.
   *
   * Includes email and password properties.
   *
   * Used to authenticate and obtain JWT tokens for admin users.
   */
  export type ILogin = {
    /** Admin user's login email address. */
    email: string & tags.Format<"email">;

    /** Admin user's login password in plaintext. */
    password: string;
  };

  /**
   * Payload for refreshing the JWT access token in the redditCommunity admin
   * authentication flow.
   *
   * This schema is used to provide the existing valid refresh token to obtain
   * new access credentials.
   *
   * It contains only the required property refreshToken as a string
   * representing the JWT refresh token.
   *
   * This request is the second step in the token renewal process after
   * initial authentication.
   */
  export type IRefresh = {
    /**
     * JWT refresh token string provided to the admin for token renewal
     * purposes.
     */
    refreshToken: string;
  };

  /**
   * Request type to filter, sort, or paginate redditCommunity admin users for
   * administrative operations. Supports querying by unique email, admin
   * level, and records creation and update timestamps to enable effective
   * search and filtering. Deletion timestamp is nullable for active lists.
   *
   * This type is used for backend administrative APIs that manage admin user
   * listings consistent with the `reddit_community_admins` Prisma schema.
   *
   * Properties like email are validated for uniqueness and format.
   *
   * Allows administrative personnel to narrow down user lists for system
   * monitoring and management efficiently.
   *
   * Note: This request type excludes password hash for security reasons and
   * only includes public and administrative filtering fields.
   */
  export type IRequest = {
    /** Unique admin email address used for login and communication. */
    email: string;

    /** Integer indicating the level of administrative privileges. */
    admin_level: number & tags.Type<"int32">;

    /** Timestamp of admin user creation. */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating soft deletion (account deactivation). Null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp of last admin user record update. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Update type for admin user entity allowing modification of email,
   * password hash, admin level, and soft deletion status.
   *
   * Corresponds to updatable fields in the reddit_community_admins table.
   *
   * Used for admin account management and maintenance.
   *
   * All fields are optional, permitting partial updates.
   */
  export type IUpdate = {
    /** Unique admin email address used for login and communication. */
    email?: string | undefined;

    /** Hashed password for secure authentication. */
    password_hash?: string | undefined;

    /** Integer indicating the level of administrative privileges. */
    admin_level?: (number & tags.Type<"int32">) | undefined;

    /** Timestamp indicating soft deletion (account deactivation). */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information of an admin user within the redditCommunity platform.
   * It includes essential identification, contact, privilege level, and
   * lifecycle timestamps. This summary is used in paginated lists or
   * references of administrator accounts without exposing sensitive
   * authentication information.
   */
  export type ISummary = {
    /** Primary Key unique identifier of the admin user. */
    id: string & tags.Format<"uuid">;

    /** Unique admin email address used for login and communication. */
    email: string;

    /**
     * The administrator's privilege level indicating their level of access
     * and control within the system.
     */
    admin_level: number & tags.Type<"int32">;

    /** Timestamp of when the admin account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of when the admin account was last modified. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating soft deletion (account deactivation). Null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
