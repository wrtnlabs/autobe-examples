import { tags } from "typia";

import { IRedditCommunityMember } from "./IRedditCommunityMember";
import { IRedditCommunityAdmin } from "./IRedditCommunityAdmin";

/**
 * Moderation action record representing an action taken in response to a user
 * report.
 *
 * Includes relationships to the report, moderator member, and admin member
 * performing the action.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityReportAction = {
  /** Unique identifier of the report action */
  id: string & tags.Format<"uuid">;

  /** Identifier of the linked report */
  report_id: string & tags.Format<"uuid">;

  /** Identifier of the moderator member performing the action */
  moderator_member_id: string & tags.Format<"uuid">;

  /** Identifier of the admin performing the action, if applicable */
  admin_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Type of moderation action performed, e.g., warning, deletion, suspension */
  action_type: string;

  /** Optional notes describing details of the action */
  notes?: string | null | undefined;

  /** Timestamp of when the action was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to the action */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp of soft deletion of the action, if deleted */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Reference to the associated report entity */
  report?: IRedditCommunityReportAction.IRequest | undefined;

  /** Reference to the moderator member who performed the action */
  moderatorMember?: IRedditCommunityMember.ISummary | undefined;

  /**
   * Reference to the admin member who performed the action or null if not
   * applicable
   */
  adminMember?: IRedditCommunityAdmin.ISummary | null | undefined;
};
export namespace IRedditCommunityReportAction {
  /**
   * Request parameters for searching and filtering moderation actions in a
   * paginated manner.
   *
   * Supports pagination, sorting, and multiple filtering options.
   */
  export type IRequest = {
    /** Page number for pagination */
    page: number & tags.Type<"int32">;

    /** Limit number of records per page */
    limit: number & tags.Type<"int32">;

    /** Field name to sort results */
    sortBy?: string | undefined;

    /** Sort order: ascending or descending */
    order?: "asc" | "desc" | undefined;

    /** Filter actions by report ID */
    filterReportId?: (string & tags.Format<"uuid">) | undefined;

    /** Filter actions by moderator member ID */
    filterModeratorMemberId?: (string & tags.Format<"uuid">) | undefined;

    /** Filter actions by admin member ID */
    filterAdminMemberId?: (string & tags.Format<"uuid">) | undefined;

    /** Filter actions by action type */
    filterActionType?: string | undefined;

    /** Filter actions created after this date */
    filterCreatedAtFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Filter actions created before this date */
    filterCreatedAtTo?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Schema for creating a new report action. Represents a moderation action
   * taken in response to a user report.
   *
   * Required properties include the report ID, moderator member ID, action
   * type, and creation and update timestamps.
   *
   * Optional properties include admin member ID, detailed notes, and a soft
   * delete timestamp.
   *
   * All properties must be validated and formatted according to business and
   * security rules.
   */
  export type ICreate = {
    /** Linked report {@link reddit_community_reports.id}. */
    report_id: string & tags.Format<"uuid">;

    /**
     * Moderator member who performed the action
     * {@link reddit_community_members.id}.
     */
    moderator_member_id: string & tags.Format<"uuid">;

    /**
     * Admin member who performed the action
     * {@link reddit_community_admins.id}.
     */
    admin_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Type of moderation action taken, e.g., warning, deletion, suspension. */
    action_type: string;

    /** Optional detailed notes regarding the action. */
    notes?: string | null | undefined;

    /** Timestamp when the action was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to the action. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp if the action is soft deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Schema for updating a report action. Represents modifications to a
   * moderation action associated with user reports.
   *
   * Required properties include report ID, moderator member ID, action type,
   * creation and update timestamps.
   *
   * Optional properties include admin member ID, notes, and soft delete
   * timestamp.
   *
   * Strict validation of property formats and values is mandated.
   */
  export type IUpdate = {
    /** Linked report {@link reddit_community_reports.id}. */
    report_id: string & tags.Format<"uuid">;

    /**
     * Moderator member who performed the action
     * {@link reddit_community_members.id}.
     */
    moderator_member_id: string & tags.Format<"uuid">;

    /**
     * Admin member who performed the action
     * {@link reddit_community_admins.id}.
     */
    admin_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Type of moderation action taken, e.g., warning, deletion, suspension. */
    action_type: string;

    /** Optional detailed notes regarding the action. */
    notes?: string | null | undefined;

    /** Timestamp when the action was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to the action. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp if the action is soft deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
