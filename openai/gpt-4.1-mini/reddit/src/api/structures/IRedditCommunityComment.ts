import { tags } from "typia";

/**
 * Detailed information for a redditCommunity comment.
 *
 * This schema represents the reddit_community_comments record including content
 * data, authorship references to members or guests, and timestamps for
 * creation, modification, and soft deletion state.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityComment = {
  /** Unique identifier of the comment. */
  id: string & tags.Format<"uuid">;

  /** Identifier of the parent post. */
  reddit_community_post_id: string & tags.Format<"uuid">;

  /** Optional identifier of the parent comment in case of nested replies. */
  parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Identifier of the member who authored the comment if applicable. */
  author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Identifier of the guest author if applicable. */
  author_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** The text content of the comment, limited to 2000 characters. */
  body_text: string;

  /** Timestamp when the comment was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the comment was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the comment was soft deleted. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRedditCommunityComment {
  /**
   * Search and filtering parameters for redditCommunity comments.
   *
   * This schema includes required post identifier, optional author
   * information for members or guests, optional parent comment id for
   * nesting, comment body text, and pagination controls.
   */
  export type IRequest = {
    /** Unique identifier of the target post. */
    postId: string & tags.Format<"uuid">;

    /** Member user who authored the comment. Optional for guests. */
    author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Guest user who authored the comment. Optional for members. */
    author_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional parent comment id for nested replies. Null if root comment. */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Content text of the comment limited to 2000 characters. */
    body_text?: string | undefined;

    /** Page number for pagination. Null for default. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of records per page. Null for default. */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Schema for creating a new comment in a post. Includes reference to the
   * parent post, optional reference to a parent comment for nested replies,
   * author identifiers for members or guests, and the comment text body.
   */
  export type ICreate = {
    /**
     * Optional parent comment identifier for nested replies. Omit for
     * root-level comments.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Identifier of the member authoring the comment. */
    author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Identifier of the guest authoring the comment. */
    author_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** UUID of the parent post the comment belongs to. */
    reddit_community_post_id: string & tags.Format<"uuid">;

    /** Textual content of the comment limited to 2,000 characters. */
    body_text: string;
  };

  /**
   * Schema for updating an existing comment. All fields are optional and may
   * be modified, including parent comment reference, author identifiers, post
   * association, and comment content.
   */
  export type IUpdate = {
    /**
     * Optional parent comment identifier for nested replies. Omit for
     * root-level comments.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Identifier of the member authoring the comment. */
    author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Identifier of the guest authoring the comment. */
    author_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** UUID of the parent post the comment belongs to. */
    reddit_community_post_id?: (string & tags.Format<"uuid">) | undefined;

    /** Textual content of the comment limited to 2,000 characters. */
    body_text?: string | undefined;
  };

  /**
   * Summary information for a redditCommunity comment.
   *
   * Includes unique identifier, content snippet, author references (member or
   * guest), and timestamps for creation and last update.
   *
   * Used primarily in listing or summary views where full detail is
   * unnecessary.
   *
   * This summary omits deep recursive relations to optimize data payload
   * size.
   */
  export type ISummary = {
    /**
     * Unique identifier of the comment.
     *
     * It uniquely identifies each comment entity within the system for
     * reference and linkage.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Text content of the comment limited to 2,000 characters.
     *
     * Represents the main content of the comment authored by a member or
     * guest.
     */
    body_text: string;

    /**
     * Authoring member's unique identifier, nullable if the author is a
     * guest.
     *
     * Links the comment to the member entity who wrote it.
     */
    author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Authoring guest's unique identifier, nullable if the author is a
     * member.
     *
     * References the guest entity responsible for this comment.
     */
    author_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when the comment was created.
     *
     * Used for ordering and auditing comment creation times.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last update to the comment.
     *
     * Records the most recent edit time for auditing and UI display.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
