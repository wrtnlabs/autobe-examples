import { tags } from "typia";

/**
 * Detailed content report information within redditCommunity platform.
 *
 * Captures reporter identity, reported entity, category, text description,
 * status, and lifecycle timestamps. Supports both guest and member reporters
 * and multi-type content reporting.
 *
 * Used for moderation and auditing purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityReport = {
  /** Unique identifier (UUID) of the report. */
  id: string & tags.Format<"uuid">;

  /** ID of the guest user who made the report, if applicable. */
  reporter_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** ID of the member user who made the report, if applicable. */
  reporter_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** ID of the post that was reported, if applicable. */
  reported_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** ID of the comment that was reported, if applicable. */
  reported_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** ID of the member user that was reported, if applicable. */
  reported_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Current status ID of the report, linked to report status entity. */
  status_id: string & tags.Format<"uuid">;

  /** Category of the report, such as spam, abuse, other violations. */
  category: string;

  /**
   * Optional textual description provided by the reporter detailing the
   * issue.
   */
  description?: string | null | undefined;

  /** Date and time when the report was created. */
  created_at: string & tags.Format<"date-time">;

  /** Date and time of the last update to the report. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp, if the report is deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRedditCommunityReport {
  /**
   * Request object for searching and filtering content reports.
   *
   * Allows filtering by various fields including status, category, reporter,
   * and reported content. Supports sorting and pagination controls.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Field to sort by, such as 'created_at' or 'category'. */
    sort_by?: string | undefined;

    /** Sort order: ascending (asc) or descending (desc). */
    order?: "asc" | "desc" | undefined;

    /** Filter by report status ID. */
    status_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter reports by category such as 'spam', 'abuse', etc. */
    category?: string | undefined;

    /** Filter reports by the reporter member ID. */
    reporter_member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter reports by the reported post ID. */
    reported_post_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter reports by the reported comment ID. */
    reported_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter reports by the reported member ID. */
    reported_member_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Request payload for creating a new content moderation report.
   *
   * Includes optional information about the reporter (either guest or
   * member), target of the report (post, comment, or member), report status,
   * category, and optional description.
   *
   * Timestamps are managed by the system and therefore omitted.
   *
   * This schema represents the request body to create a report entry in the
   * reddit_community_reports table.
   */
  export type ICreate = {
    /**
     * Identifier of the guest user who made the report. Nullable if the
     * reporter is a member.
     */
    reporter_guest_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Identifier of the member user who made the report. Nullable if the
     * reporter is a guest.
     */
    reporter_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Identifier of the post being reported. Nullable if a comment or
     * member is reported.
     */
    reported_post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Identifier of the comment being reported. Nullable if a post or
     * member is reported.
     */
    reported_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Identifier of the member user being reported. Nullable if a post or
     * comment is reported.
     */
    reported_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Identifier of the current status of the report (e.g., pending,
     * reviewed, action taken).
     */
    status_id: string & tags.Format<"uuid">;

    /**
     * Category or reason for the report such as spam, abuse, or other
     * violation.
     */
    category: string;

    /** Optional detailed description provided by the reporter. */
    description?: string | null | undefined;
  };

  /**
   * Request payload for updating a content moderation report.
   *
   * Properties mirror those on report create, allowing modification of report
   * target, reporter, status, category, and details.
   *
   * Timestamps are system managed and therefore omitted.
   *
   * This schema represents the request body to update a report entry in the
   * reddit_community_reports table.
   */
  export type IUpdate = {
    /**
     * Identifier of the guest user who made the report. Nullable if the
     * reporter is a member.
     */
    reporter_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Identifier of the member user who made the report. Nullable if the
     * reporter is a guest.
     */
    reporter_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Identifier of the post being reported. Nullable if a comment or
     * member is reported.
     */
    reported_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Identifier of the comment being reported. Nullable if a post or
     * member is reported.
     */
    reported_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Identifier of the member user being reported. Nullable if a post or
     * comment is reported.
     */
    reported_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Identifier of the current status of the report (e.g., pending,
     * reviewed, action taken).
     */
    status_id: string & tags.Format<"uuid">;

    /**
     * Category or reason for the report such as spam, abuse, or other
     * violation.
     */
    category: string;

    /** Optional detailed description provided by the reporter. */
    description?: string | null | undefined;
  };

  /**
   * Summary view of a content report record in the redditCommunity platform.
   *
   * This summary excludes reporter and reported entity details to minimize
   * exposure of sensitive information.
   *
   * The summary includes report identifiers, category, creation timestamp,
   * and status reference.
   *
   * Intended for use in paginated report listings and moderation queues.
   */
  export type ISummary = {
    /**
     * Unique identifier of the content report record.
     *
     * This primary key uniquely identifies the content report across the
     * redditCommunity platform.
     *
     * It is used for referencing the report in moderation workflows and
     * audits.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Category of the report such as spam, abuse, or other violation.
     *
     * This field represents the reason for which content has been reported
     * by a user.
     *
     * Examples include 'spam', 'abuse', 'harassment', or 'other'.
     *
     * Categorization supports filtering reports for prioritized moderation
     * handling.
     */
    category: string;

    /**
     * Timestamp when the report was created.
     *
     * This indicates the exact date and time the report was initially
     * submitted.
     *
     * It is used in audit trails and moderation prioritization.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Identifier of the current moderation status of the report.
     *
     * It links to a report status record such as pending, reviewed, or
     * action taken.
     *
     * Used to track the lifecycle state of the report within the moderation
     * process.
     */
    status_id: string & tags.Format<"uuid">;
  };
}
