import { tags } from "typia";

/**
 * Detailed record of a vote cast by a member on a RedditCommunity post.
 *
 * Properties:
 *
 * - Id: Unique UUID of the vote record.
 * - Member_id: UUID of the voting member.
 * - Post_id: UUID of the post being voted on.
 * - Vote_value: Vote integer value (+1 upvote, -1 downvote, 0 vote removed).
 * - Created_at: Timestamp of when the vote was cast.
 * - Updated_at: Timestamp of the last update to the vote.
 * - Deleted_at: Nullable timestamp if the vote has been soft deleted.
 *
 * The record enforces a unique constraint on the member_id and post_id
 * combination to prevent multiple active votes by the same member on the same
 * post.
 *
 * This entity is fundamental to the platform's voting system, enabling tracking
 * and aggregation of vote counts and user karma.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityPostVote = {
  /** Unique identifier of the post vote record. */
  id: string & tags.Format<"uuid">;

  /** Unique identifier of the member who cast the vote. */
  member_id: string & tags.Format<"uuid">;

  /** Unique identifier of the post being voted on. */
  post_id: string & tags.Format<"uuid">;

  /** Value of the vote: +1 for upvote, -1 for downvote, 0 for vote removed. */
  vote_value: number & tags.Type<"int32">;

  /** Timestamp when the vote was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the vote was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion of the vote; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRedditCommunityPostVote {
  /**
   * Parameters for filtering and paginating redditCommunity post votes.
   *
   * This schema defines the search and pagination options available when
   * retrieving a list of votes cast on posts. Members can specify criteria to
   * filter votes based on member ID, post ID, vote value, creation and update
   * timestamps, and deleted status. Pagination properties allow clients to
   * manage result set sizes and pages.
   *
   * Properties:
   *
   * - Member_id: Filters votes by the voting member's UUID.
   * - Post_id: Filters votes on a specific post by UUID.
   * - Vote_value: Filters votes by their integer value (+1 upvote, -1 downvote,
   *   0 vote removed).
   * - Deleted_at: Allows filter on votes that are soft-deleted or active.
   * - Created_at: Filter votes created within a time range.
   * - Updated_at: Filter votes updated within a time range.
   * - Page: The page number for pagination.
   * - Limit: Number of records per page, default is 100.
   *
   * Required properties: none. All filters are optional to allow flexible
   * querying.
   */
  export type IRequest = {
    /** Filter by voting member UUID. */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter votes by target post UUID. */
    post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by the vote's integer value: +1 upvote, -1 downvote, 0 for
     * removed vote.
     */
    vote_value?: (number & tags.Type<"int32">) | undefined;

    /** Timestamp for filtering soft-deleted votes (null for active votes). */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter votes created at or after this timestamp. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter votes updated at or after this timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Limit for number of records per page, default 100. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;
  };

  /**
   * Request payload for creating a new vote on a RedditCommunity post.
   *
   * Includes the identifier of the member casting the vote, the target post's
   * identifier, and the vote value (+1, -1, or 0 for vote removal).
   *
   * All properties strictly adhere to the schema definitions from the Prisma
   * 'reddit_community_post_votes' table.
   */
  export type ICreate = {
    /** Belonged member's unique identifier casting the vote. */
    member_id: string & tags.Format<"uuid">;

    /** Identifier of the post receiving the vote. */
    post_id: string & tags.Format<"uuid">;

    /** Value of the vote: +1 for upvote, -1 for downvote, 0 for removal. */
    vote_value: number & tags.Type<"int32">;
  };

  /**
   * Request payload for updating an existing vote on a RedditCommunity post.
   *
   * Allows modification of the vote value to represent an upvote, downvote,
   * or vote removal.
   *
   * This schema strictly follows the properties of the Prisma
   * 'reddit_community_post_votes' table in the system.
   */
  export type IUpdate = {
    /** Updated vote value: +1 for upvote, -1 for downvote, 0 to remove vote. */
    vote_value: number & tags.Type<"int32">;
  };

  /**
   * Summary representation of a vote on a redditCommunity post.
   *
   * Captures identifying information about the vote, the voting member, the
   * target post, the vote value, and audit timestamps.
   *
   * Used in aggregated lists or vote summaries for quick reference.
   */
  export type ISummary = {
    /**
     * Unique identifier of the post vote.
     *
     * Uniquely identifies each vote record linked to a member and post.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Member who cast the vote.
     *
     * References the unique user identifier who performed this voting
     * action.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Identifier of the post voted upon.
     *
     * Links the vote to the specific post entity.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Value of the vote: +1 for upvote, -1 for downvote, 0 for vote
     * removal.
     *
     * Indicates the user's current voting action on the post.
     */
    vote_value: number & tags.Type<"int32">;

    /**
     * Timestamp when the vote was created.
     *
     * Used for auditing and tracking vote history.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update to the vote record.
     *
     * Records the time when the vote was last modified.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
