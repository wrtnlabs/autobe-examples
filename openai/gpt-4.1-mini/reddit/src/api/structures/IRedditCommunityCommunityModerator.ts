import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Community moderators are members assigned to manage and moderate specific
 * communities. This type models the user account data including authentication
 * credentials and email verification status.
 *
 * Each moderator is a registered member with unique email and hashed password.
 * Email verification status indicates if the account is active.
 *
 * Timestamps track record lifecycle and soft deletion status.
 *
 * This data maps directly to the `reddit_community_members` Prisma table,
 * ensuring full consistency.
 *
 * Sensitive fields like password_hash are excluded from responses for security.
 *
 * Deleted_at is nullable and used to mark soft-deleted moderator accounts.
 *
 * This type serves as the main user profile representation for community
 * moderators and integrates seamlessly with authentication and authorization
 * workflows in the platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityCommunityModerator = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique email address used for login and communication. */
  email: string;

  /** Indicates whether the member has verified their email. */
  is_email_verified: boolean;

  /** Timestamp of member creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last member data update. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating soft deletion (account deactivation). Null if
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRedditCommunityCommunityModerator {
  /**
   * Registration information for a new communityModerator user including
   * unique email and plain text password.
   */
  export type IJoin = {
    /**
     * Unique email address used for login and communication for the
     * community moderator user.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password for the community moderator account. Must be
     * securely hashed before storage.
     */
    password: string;
  };

  /**
   * Authorization response containing JWT tokens and member identification
   * for community moderator role.
   *
   * This response is returned after successful authentication or registration
   * operations such as login or join for community moderators.
   */
  export type IAuthorized = {
    /** Unique identifier of the community moderator member. */
    id: string & tags.Format<"uuid">;

    /** Member email address used for login and communication. */
    email: string;

    /** Indicates whether the member has verified their email. */
    is_email_verified: boolean;

    /** Timestamp of member creation. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last member data update. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating soft deletion (account deactivation). Null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request containing user credentials for authentication.
   *
   * Includes required email and password fields.
   *
   * Password must be plain text; hashing is handled by backend services only.
   *
   * This DTO is used to validate login requests for community moderator
   * users.
   */
  export type ILogin = {
    /** Email address used for login. */
    email: string;

    /** Plain text password for verification. */
    password: string;
  };

  /**
   * Request body to refresh JWT access tokens using a valid refresh token for
   * a communityModerator user.
   *
   * This request contains the refresh_token property essential for token
   * renewal in the authentication lifecycle.
   *
   * The refresh token must be valid and not expired to obtain new access
   * tokens.
   *
   * Request is authorized as a communityModerator role but does not require
   * prior access token.
   */
  export type IRefresh = {
    /**
     * Refresh token string issued to the communityModerator for token
     * renewal.
     */
    refresh_token: string;
  };

  /**
   * Update type for community moderators supporting modification of
   * assignment timestamps and audit fields. Allows adjusting the time a user
   * was assigned as a community moderator and the last record update
   * timestamp.
   *
   * This type excludes primary key and relationship identifiers as those are
   * immutable in update contexts.
   *
   * Used in update operations where partial adjustment of community moderator
   * record details are needed.
   *
   * Maintains integrity of role assignments while enabling time adjustments.
   */
  export type IUpdate = {
    /** Timestamp when member was assigned as moderator of the community. */
    assigned_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to moderator record. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Parameters for searching and retrieving community moderators with
   * pagination and filtering capabilities.
   */
  export type IRequest = {
    /** Page number for paginated results, must be a positive integer. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional search query string for filtering moderators by member name
     * or email.
     */
    search?: string | undefined;

    /** Filter by ID of the member who is a moderator. */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by ID of the community the moderator belongs to. */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter for moderators assigned after this timestamp. */
    assigned_after?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for moderators assigned before this timestamp. */
    assigned_before?: (string & tags.Format<"date-time">) | undefined;

    /** Field to sort by. */
    sort_by?: "assigned_at" | "created_at" | "updated_at" | undefined;

    /** Sort order (ascending or descending). */
    order?: "asc" | "desc" | undefined;

    /** Pagination information. */
    pagination?:
      | {
          /** Current page number. */
          current: number & tags.Type<"int32">;

          /** Limit of records per page. */
          limit: number & tags.Type<"int32">;

          /** Total records available. */
          records: number & tags.Type<"int32">;

          /** Total number of pages. */
          pages: number & tags.Type<"int32">;
        }
      | undefined;
  };

  /** Data required to create a new community moderator assignment. */
  export type ICreate = {
    /** Identifier of the member to assign as community moderator. */
    member_id: string & tags.Format<"uuid">;

    /** Identifier of the community where the moderation applies. */
    community_id: string & tags.Format<"uuid">;

    /** Timestamp when the member was assigned as a moderator. */
    assigned_at: string & tags.Format<"date-time">;
  };

  /**
   * Summary information of a community moderator.
   *
   * This type includes the unique identifier for the moderator record, the
   * member ID referencing the user assigned, the community ID where they
   * moderate, and the assignment timestamp.
   *
   * Used primarily for listing and simplified representations in
   * administrative and community contexts.
   *
   * Corresponds directly to the reddit_community_community_moderators table
   * within the Prisma database schema.
   */
  export type ISummary = {
    /**
     * Unique identifier of the community moderator record.
     *
     * This ID uniquely identifies the assignment of a member as a moderator
     * to a specific community within the system.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the member who is assigned as a moderator.
     *
     * This references the reddit_community_members table representing the
     * user's membership.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * UUID of the community to which the moderator is assigned.
     *
     * This references the reddit_community_communities table representing
     * the community's identity.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Date and time when the member was assigned as a moderator of the
     * community.
     *
     * This timestamp records the official start of moderation privileges
     * for the member in the community.
     */
    assigned_at: string & tags.Format<"date-time">;
  };
}
