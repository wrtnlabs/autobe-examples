import { tags } from "typia";

/**
 * Posts created by users within communities, supporting text, link, or single
 * image content. Each post is authored by a member or guest, belongs to a
 * single community, and includes metadata for creation, editing, status, and
 * soft deletion. Relationships link posts to their authors and parent
 * communities. Supports business workflows via status fields and tracks vote
 * and comment counts externally.
 *
 * @namespace Content
 *
 *   This schema maps to the 'reddit_community_posts' table in the Prisma database
 *   schema. It contains all columns, including nullable fields and timestamps.
 *
 *   Properties:
 *
 *   - `id`: Unique identifier for the post.
 *   - `author_member_id` and `author_guest_id`: Nullable foreign keys linking to
 *       either a member or guest author.
 *   - `reddit_community_community_id`: Foreign key referencing the community this
 *       post belongs to.
 *   - `post_type`: Specifies the type of content, must be one of 'text', 'link', or
 *       'image'.
 *   - `title`: The post title, maximum length of 300 characters.
 *   - `body_text`, `link_url`, and `image_url`: Nullable fields storing content
 *       based on post_type.
 *   - `created_at`, `updated_at`, `deleted_at`: Timestamps for lifecycle
 *       management.
 *   - `status` and `business_status`: Optional status fields for business workflow
 *       tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRedditCommunityPost = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /**
   * Authoring member's linked unique identifier from
   * reddit_community_members.id.
   */
  author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Authoring guest's linked unique identifier from
   * reddit_community_guests.id.
   */
  author_guest_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Target community's unique identifier. */
  reddit_community_community_id: string & tags.Format<"uuid">;

  /** Type of the post content: text, link, or image. */
  post_type: string;

  /** Title of the post, max 300 characters. */
  title: string;

  /** Text content for text posts. */
  body_text?: string | null | undefined;

  /** URL for link posts. */
  link_url?: string | null | undefined;

  /** URL to the image file for image posts. */
  image_url?: string | null | undefined;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Status representing lifecycle or workflow state. */
  status?: string | null | undefined;

  /** Business-specific status or lifecycle state. */
  business_status?: string | null | undefined;
};
export namespace IRedditCommunityPost {
  /**
   * Request DTO for searching or listing posts with filtering, pagination,
   * and sorting.
   *
   * Supports filtering by post type, title search, creation date range.
   * Provides pagination controls and standard sort options.
   *
   * Used in post listing APIs.
   */
  export type IRequest = {
    /** Filter posts by type: 'text', 'link', or 'image'. */
    post_type?: string | undefined;

    /** Filter posts by title for search. */
    title?: string | undefined;

    /** Filter posts created after this date-time. */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /** Filter posts created before this date-time. */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /** Number of items per page. Defaults to 20. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /** Page number for pagination. Defaults to 1. */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /** Sort posts by the given order. */
    sort?: "hot" | "new" | "top" | "controversial" | undefined;
  };

  /**
   * Summary information of a post within a community.
   *
   * Includes the post's unique identifier, community association, content
   * type, title, and relevant timestamps.
   *
   * Soft deletion and status fields are nullable to accommodate creation and
   * lifecycle management.
   *
   * This type is designed for efficient listing and summarization of posts
   * with essential metadata.
   *
   * Corresponds to the reddit_community_posts table in the Prisma schema.
   */
  export type ISummary = {
    /**
     * Unique identifier of the post.
     *
     * This ID uniquely identifies the post entity within the system and
     * database.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the community the post belongs to.
     *
     * References the reddit_community_communities table indicating the
     * community context of the post.
     */
    reddit_community_community_id: string & tags.Format<"uuid">;

    /**
     * Type of post content - possible values include 'text', 'link', or
     * 'image'.
     *
     * Defines the nature of the content and determines which content
     * property is applicable.
     */
    post_type: string;

    /**
     * Title of the post.
     *
     * This is the main text heading visible to users, limited to 300
     * characters to ensure succinct display.
     */
    title: string;

    /**
     * Timestamp indicating when the post was created.
     *
     * This is provided in ISO 8601 date-time format.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating the last time the post was updated.
     *
     * This is provided in ISO 8601 date-time format.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp.
     *
     * If not null, indicates the post has been marked as deleted without
     * physical removal from the database.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Current status of the post indicating workflow or lifecycle state.
     *
     * The string value typically encodes states such as 'published',
     * 'draft', or 'archived', though specific values depend on business
     * logic.
     */
    status?: string | null | undefined;

    /**
     * Business-specific lifecycle or status classification.
     *
     * Provides additional semantic meaning for operational purposes beyond
     * the primary status field.
     */
    business_status?: string | null | undefined;
  };
}
