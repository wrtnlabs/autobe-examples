import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityAdmin } from "../../../structures/IRedditCommunityAdmin";

/**
 * Register new admin user and issue authentication tokens using
 * reddit_community_admins table.
 *
 * This operation allows clients to create a new admin account by providing
 * required credentials such as email and password. It persists a new admin
 * entity in the database using the reddit_community_admins table, ensuring
 * unique email addresses through schema constraints. Upon successful
 * registration, the system generates JWT access and refresh tokens for the
 * admin user, encapsulated in the response type
 * IRedditCommunityAdmin.IAuthorized. This approach enforces registration
 * security and initializes authentication workflows for system administrators.
 *
 * The operation strictly relies on the reddit_community_admins schema,
 * validating email uniqueness and password hash security. It excludes any soft
 * deletion considerations during creation and expects normal lifecycle
 * timestamps to be assigned post-creation.
 *
 * As part of the admin user role, this operation is publicly accessible without
 * authentication to enable new administrative accounts to be set up. Related
 * authentication endpoints include login and token refresh for full admin
 * access management.
 *
 * @param props.connection
 * @param props.body Admin registration data including unique email and
 *   password.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Admin registration data including unique email and password. */
    body: IRedditCommunityAdmin.ICreate;
  };
  export type Body = IRedditCommunityAdmin.ICreate;
  export type Response = IRedditCommunityAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IRedditCommunityAdmin.IAuthorized =>
    typia.random<IRedditCommunityAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin login via email and password authentication, returning JWT tokens using
 * reddit_community_admins schema.
 *
 * Authenticate an admin user by verifying email and password credentials
 * against the reddit_community_admins table. Upon successful credentials
 * validation, issue JWT access and refresh tokens encapsulated in the response
 * type IRedditCommunityAdmin.IAuthorized. This operation enables admin users to
 * securely authenticate and manage sessions.
 *
 * Unsuccessful attempts should return appropriate authentication failure
 * responses as defined in API error handling conventions.
 *
 * This operation is public and does not require pre-existing authentication
 * tokens to execute. It is a crucial component of the admin authentication
 * workflow.
 *
 * @param props.connection
 * @param props.body Admin login credentials including email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Admin login credentials including email and password. */
    body: IRedditCommunityAdmin.ILogin;
  };
  export type Body = IRedditCommunityAdmin.ILogin;
  export type Response = IRedditCommunityAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IRedditCommunityAdmin.IAuthorized =>
    typia.random<IRedditCommunityAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for admin users via refresh token validation.
 *
 * Refresh JWT tokens for an admin user using a valid refresh token. This
 * operation validates the refresh token's authenticity and expiry, generating
 * new access tokens encapsulated in IRedditCommunityAdmin.IAuthorized. It
 * maintains user session security without requiring full re-login.
 *
 * The operation interacts with the reddit_community_admins table to verify user
 * status and token validity. The refresh endpoint is publicly accessible but
 * requires a valid refresh token.
 *
 * It is a critical part of the authentication lifecycle, supporting seamless
 * token renewal for admins.
 *
 * @param props.connection
 * @param props.body Refresh token request for admin user session renewal.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request for admin user session renewal. */
    body: IRedditCommunityAdmin.IRefresh;
  };
  export type Body = IRedditCommunityAdmin.IRefresh;
  export type Response = IRedditCommunityAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IRedditCommunityAdmin.IAuthorized =>
    typia.random<IRedditCommunityAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
