import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommunityModerator } from "../../../../structures/IRedditCommunityCommunityModerator";

/**
 * Authenticate communityModerator user and issue JWT tokens for access.
 *
 * Authenticate a communityModerator user by validating email and password.
 *
 * Uses `reddit_community_members` table for member data verification.
 *
 * Issues JWT tokens upon successful authentication.
 *
 * Requires valid, verified account email.
 *
 * Publicly accessible without prior authentication.
 *
 * Returns JWT tokens and authorized session data.
 *
 * Handles invalid credentials and unverified email errors.
 *
 * Supports full JWT token authentication lifecycle for the communityModerator
 * role.
 *
 * @param props.connection
 * @param props.body Login credentials including email and password for
 *   communityModerator user.
 * @setHeader token.access Authorization
 *
 * @path /auth/communityModerator/login
 * @accessor api.functional.auth.communityModerator.login.loginCommunityModerator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function loginCommunityModerator(
  connection: IConnection,
  props: loginCommunityModerator.Props,
): Promise<loginCommunityModerator.Response> {
  const output: loginCommunityModerator.Response =
    true === connection.simulate
      ? loginCommunityModerator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...loginCommunityModerator.METADATA,
            path: loginCommunityModerator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace loginCommunityModerator {
  export type Props = {
    /**
     * Login credentials including email and password for communityModerator
     * user.
     */
    body: IRedditCommunityCommunityModerator.ILogin;
  };
  export type Body = IRedditCommunityCommunityModerator.ILogin;
  export type Response = IRedditCommunityCommunityModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/communityModerator/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/communityModerator/login";
  export const random = (): IRedditCommunityCommunityModerator.IAuthorized =>
    typia.random<IRedditCommunityCommunityModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: loginCommunityModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: loginCommunityModerator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
