import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommunityModerator } from "../../../../structures/IRedditCommunityCommunityModerator";

/**
 * Register a new communityModerator user with email and password to create
 * member account.
 *
 * API operation for communityModerator user registration (join) on
 * redditCommunity platform.
 *
 * Uses schema `reddit_community_members` for user data storage including email,
 * password hash, and email verification status.
 *
 * When called, creates a new member record, sets email verification flag to
 * false, and issues JWT tokens.
 *
 * No prior authentication is needed as it is a public registration endpoint.
 *
 * Security is enforced via password hashing and email uniqueness constraints.
 *
 * Complements login and refresh token operations.
 *
 * Errors returned if email already exists or validation fails.
 *
 * Returns a JWT authorized response type with token info specific to
 * communityModerator role.
 *
 * @param props.connection
 * @param props.body Information required to create a new communityModerator
 *   user account.
 * @setHeader token.access Authorization
 *
 * @path /auth/communityModerator/join
 * @accessor api.functional.auth.communityModerator.join.joinCommunityModerator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinCommunityModerator(
  connection: IConnection,
  props: joinCommunityModerator.Props,
): Promise<joinCommunityModerator.Response> {
  const output: joinCommunityModerator.Response =
    true === connection.simulate
      ? joinCommunityModerator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinCommunityModerator.METADATA,
            path: joinCommunityModerator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinCommunityModerator {
  export type Props = {
    /** Information required to create a new communityModerator user account. */
    body: IRedditCommunityCommunityModerator.IJoin;
  };
  export type Body = IRedditCommunityCommunityModerator.IJoin;
  export type Response = IRedditCommunityCommunityModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/communityModerator/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/communityModerator/join";
  export const random = (): IRedditCommunityCommunityModerator.IAuthorized =>
    typia.random<IRedditCommunityCommunityModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinCommunityModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinCommunityModerator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
