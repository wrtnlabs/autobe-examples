import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityGuest } from "../../../../structures/IRedditCommunityGuest";

/**
 * Create a guest session user account in the redditCommunity platform stored in
 * the reddit_community_guests table.
 *
 * Creates a new guest session account representing an unauthenticated user
 * browsing the platform. Captures session ID, IP address, and optional user
 * agent information. Issues temporary authorization tokens for session tracking
 * and limited access to public content.
 *
 * It uses the `reddit_community_guests` table to maintain guest records for
 * auditing and session management. This operation does not require login
 * credentials.
 *
 * The response returns the authorized guest session information including JWT
 * tokens.
 *
 * Pre-executed by no prerequisites. Usually followed by token refresh to
 * maintain session.
 *
 * @param props.connection
 * @param props.body Guest registration data including session tracking
 *   identifiers and client metadata.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join.joinGuest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinGuest(
  connection: IConnection,
  props: joinGuest.Props,
): Promise<joinGuest.Response> {
  const output: joinGuest.Response =
    true === connection.simulate
      ? joinGuest.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinGuest.METADATA,
            path: joinGuest.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinGuest {
  export type Props = {
    /**
     * Guest registration data including session tracking identifiers and
     * client metadata.
     */
    body: IRedditCommunityGuest.ICreate;
  };
  export type Body = IRedditCommunityGuest.ICreate;
  export type Response = IRedditCommunityGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IRedditCommunityGuest.IAuthorized =>
    typia.random<IRedditCommunityGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinGuest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinGuest.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
