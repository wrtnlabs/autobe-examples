import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommunityModerator } from "../../../../../structures/IRedditCommunityCommunityModerator";
import { IRedditCommunityCommunityModerators } from "../../../../../structures/IRedditCommunityCommunityModerators";

/**
 * Get a specific community moderator by ID.
 *
 * Retrieve detailed information about a community moderator within a specific
 * community by their unique identifier.
 *
 * This operation accesses the reddit_community_community_moderators table,
 * where moderators are linked to communities and users (members). It includes
 * information such as the moderator's member ID, community ID, assignment date,
 * and auditing timestamps.
 *
 * Authorization Roles: This endpoint is accessible to users with administrative
 * privileges and community moderators themselves. Ensuring security, only
 * authorized users can access moderation details.
 *
 * Parameters:
 *
 * - CommunityId: The unique identifier of the community where the moderator
 *   serves.
 * - ModeratorId: The unique identifier of the moderator within that community.
 *
 * Behavior:
 *
 * - Returns the community moderator record if found and accessible.
 * - If the moderator or community does not exist, an appropriate error is
 *   returned.
 * - No request body is required.
 * - The response returns the full community moderator data as per the
 *   reddit_community_community_moderators Prisma model.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community
 * @param props.moderatorId Unique identifier of the community moderator
 * @path /redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId
 * @accessor api.functional.redditCommunity.communityModerator.communities.communityModerators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the community moderator */
    moderatorId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityCommunityModerator;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/communityModerator/communities/${encodeURIComponent(props.communityId ?? "null")}/communityModerators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): IRedditCommunityCommunityModerator =>
    typia.random<IRedditCommunityCommunityModerator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a community moderator by ID within a community.
 *
 * Update a community moderator by community ID and moderator ID.
 *
 * This API endpoint allows modifying the assignment details of a moderator who
 * belongs to a particular community. This operation strictly works on the
 * reddit_community_community_moderators table.
 *
 * Security guidelines dictate that only users with the admin or community
 * moderator roles have permission to perform this update. The communityId and
 * moderatorId must be valid UUIDs corresponding to existing records.
 *
 * The request body adheres to the IRedditCommunityCommunityModerators.IUpdate
 * schema, permitting updates like the assigned_at timestamp.
 *
 * If the specified moderator exists, their record is updated accordingly and
 * returned; otherwise, a not found error is returned.
 *
 * No deletion or status alteration occurs in this operation, only updates.
 *
 * @param props.connection
 * @param props.communityId Target community's ID
 * @param props.moderatorId Target moderator's ID
 * @param props.body Update data for the community moderator
 * @path /redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId
 * @accessor api.functional.redditCommunity.communityModerator.communities.communityModerators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target community's ID */
    communityId: string & tags.Format<"uuid">;

    /** Target moderator's ID */
    moderatorId: string & tags.Format<"uuid">;

    /** Update data for the community moderator */
    body: IRedditCommunityCommunityModerators.IUpdate;
  };
  export type Body = IRedditCommunityCommunityModerators.IUpdate;
  export type Response = IRedditCommunityCommunityModerators;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communityModerator/communities/${encodeURIComponent(props.communityId ?? "null")}/communityModerators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): IRedditCommunityCommunityModerators =>
    typia.random<IRedditCommunityCommunityModerators>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a community moderator assignment.
 *
 * Delete a community moderator by community ID and moderator ID.
 *
 * This API endpoint securely deletes the moderator relationship between a
 * member and a community, effectively revoking their moderator status. It
 * targets the reddit_community_community_moderators table.
 *
 * Authorization is limited to admin and communityModerator roles. Path
 * parameters communityId and moderatorId must be valid UUIDs.
 *
 * This is a hard delete operation; no response content is returned.
 *
 * Clients should handle potential errors such as non-existing records
 * gracefully.
 *
 * @param props.connection
 * @param props.communityId Target community's ID
 * @param props.moderatorId Target moderator's ID
 * @path /redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId
 * @accessor api.functional.redditCommunity.communityModerator.communities.communityModerators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target community's ID */
    communityId: string & tags.Format<"uuid">;

    /** Target moderator's ID */
    moderatorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/communityModerator/communities/${encodeURIComponent(props.communityId ?? "null")}/communityModerators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
