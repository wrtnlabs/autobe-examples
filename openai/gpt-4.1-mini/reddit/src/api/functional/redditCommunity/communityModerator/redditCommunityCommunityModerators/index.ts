import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommunityModerator } from "../../../../structures/IRedditCommunityCommunityModerator";

/**
 * Update a community moderator by ID.
 *
 * Update an existing community moderator's information by their unique ID. This
 * operation modifies properties such as the assigned_at timestamp, which
 * reflects when the member was assigned as a moderator for the community. It
 * ensures updated_at timestamp is also refreshed upon modification. Only
 * authorized roles can perform this update.
 *
 * This operation is directly associated with the
 * reddit_community_community_moderators table, which maps members to
 * communities with specific moderator roles. It impacts system authorization
 * logic regarding community management.
 *
 * Validation enforces the UUID format for the ID path parameter and ensures
 * request body data complies with the
 * IRedditCommunityCommunityModerator.IUpdate schema, reflecting possible
 * updates to the assigned_at and audit-related timestamps.
 *
 * Related operations include listing moderators, creating new moderator
 * assignments, and deleting existing ones. Proper error handling ensures
 * attempts to update non-existent records return meaningful errors.
 *
 * This operation requires authentication and appropriate authorization roles
 * such as community moderator or admin to perform changes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the community moderator to update
 * @param props.body Information for updating a community moderator
 * @path /redditCommunity/communityModerator/redditCommunityCommunityModerators/:id
 * @accessor api.functional.redditCommunity.communityModerator.redditCommunityCommunityModerators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the community moderator to update */
    id: string & tags.Format<"uuid">;

    /** Information for updating a community moderator */
    body: IRedditCommunityCommunityModerator.IUpdate;
  };
  export type Body = IRedditCommunityCommunityModerator.IUpdate;
  export type Response = IRedditCommunityCommunityModerator;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/communityModerator/redditCommunityCommunityModerators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communityModerator/redditCommunityCommunityModerators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRedditCommunityCommunityModerator =>
    typia.random<IRedditCommunityCommunityModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a community moderator by ID, permanently removing their assignment
 * from a community. This operation completely removes the record from the
 * database and cannot be undone.
 *
 * It requires the unique UUID of the community moderator in the path parameter.
 *
 * Authorization is restricted to roles such as admin and communityModerator.
 * Attempting to delete a non-existent ID will result in an error.
 *
 * This operation affects community moderation and user role management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the community moderator to delete
 * @path /redditCommunity/communityModerator/redditCommunityCommunityModerators/:id
 * @accessor api.functional.redditCommunity.communityModerator.redditCommunityCommunityModerators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the community moderator to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/communityModerator/redditCommunityCommunityModerators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/communityModerator/redditCommunityCommunityModerators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
