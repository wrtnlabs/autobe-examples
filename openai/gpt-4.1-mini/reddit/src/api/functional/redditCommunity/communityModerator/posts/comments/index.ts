import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityComment } from "../../../../../structures/IRedditCommunityComment";
import { IPageIRedditCommunityComment } from "../../../../../structures/IPageIRedditCommunityComment";

/**
 * Create a new comment on a post, optionally as a nested reply.
 *
 * This POST operation allows authenticated members, community moderators, and
 * admins to create a new comment on a specific post in the redditCommunity
 * platform.
 *
 * The request body requires the comment content (body_text) and optionally a
 * parent_comment_id for nested replies, supporting unlimited comment nesting.
 *
 * Authorization is restricted to authenticated members, community moderators,
 * and admins, who can create comments either as themselves or on behalf of
 * others within scope.
 *
 * The operation enforces validation on comment content length (max 2000 chars)
 * and user permissions.
 *
 * Upon success, the response returns the detailed created comment including
 * author, timestamps, and content.
 *
 * This operation directly ties to the reddit_community_comments table and
 * complements GET operations for comment retrieval and parent post management.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post.
 * @param props.body Information required to create a new redditCommunity
 *   comment, including the content and optional parent comment relation.
 * @path /redditCommunity/communityModerator/posts/:postId/comments
 * @accessor api.functional.redditCommunity.communityModerator.posts.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target post. */
    postId: string & tags.Format<"uuid">;

    /**
     * Information required to create a new redditCommunity comment,
     * including the content and optional parent comment relation.
     */
    body: IRedditCommunityComment.ICreate;
  };
  export type Body = IRedditCommunityComment.ICreate;
  export type Response = IRedditCommunityComment;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/communityModerator/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communityModerator/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IRedditCommunityComment =>
    typia.random<IRedditCommunityComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List comments of a post with filtering and pagination.
 *
 * Retrieves a filtered, sorted, and paginated list of comments for the post
 * identified by postId.
 *
 * Comments are represented in the reddit_community_comments table and include
 * data such as author identity, creation date, and nesting via
 * parent_comment_id.
 *
 * Only authenticated users with roles 'member' or 'communityModerator' can
 * access this endpoint.
 *
 * Returns paginated comment summaries matching the specified criteria.
 *
 * Errors are returned if the specified post does not exist or the user lacks
 * permissions.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.body Filtering and pagination criteria for post comments
 * @path /redditCommunity/communityModerator/posts/:postId/comments
 * @accessor api.functional.redditCommunity.communityModerator.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Filtering and pagination criteria for post comments */
    body: IRedditCommunityComment.IRequest;
  };
  export type Body = IRedditCommunityComment.IRequest;
  export type Response = IPageIRedditCommunityComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/communityModerator/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communityModerator/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageIRedditCommunityComment.ISummary =>
    typia.random<IPageIRedditCommunityComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific comment on a post.
 *
 * This GET operation retrieves a specific comment from the redditCommunity
 * platform.
 *
 * The comment is identified uniquely by its ID and belongs to a post identified
 * by postId. The returned data includes the comment body text, author
 * information (which may be a member or guest), creation and last updated
 * timestamps, and soft deletion status.
 *
 * Security and permissions allow viewing by authenticated members, community
 * moderators within the post's community, and administrators. Authorization
 * checks should verify the viewer's role and permissions.
 *
 * This operation maps precisely to the reddit_community_comments table, with
 * validation ensuring comment existence and proper authorization. If the
 * comment does not exist or is soft deleted, an error response should be
 * provided.
 *
 * This operation complements related endpoints that handle comment creation and
 * comment list retrieval for posts.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post.
 * @param props.commentId Unique identifier of the target comment.
 * @path /redditCommunity/communityModerator/posts/:postId/comments/:commentId
 * @accessor api.functional.redditCommunity.communityModerator.posts.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityComment;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/communityModerator/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/communityModerator/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IRedditCommunityComment =>
    typia.random<IRedditCommunityComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
