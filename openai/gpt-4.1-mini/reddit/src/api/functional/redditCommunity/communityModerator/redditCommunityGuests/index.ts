import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityGuest } from "../../../../structures/IRedditCommunityGuest";

/**
 * Update a redditCommunityGuest by ID.
 *
 * Update the redditCommunityGuest entity specified by the unique identifier.
 * This operation modifies guest-related session data such as session
 * identifier, IP address, and user agent string used to track unauthenticated
 * user activity.
 *
 * Security constraints imply only trusted system roles or services should
 * update guest data to maintain audit integrity. The guest entity is tied to
 * posts, comments, and reports authored anonymously.
 *
 * The update payload allows changing sessionId and ipAddress, and optionally
 * userAgent. CreatedAt and updatedAt are managed by the system and should not
 * be modified manually.
 *
 * This operation relates directly to the `reddit_community_guests` table in the
 * database, which enforces uniqueness on sessionId and has indexes on IP
 * address and creation timestamp.
 *
 * Inputs requiring validation:
 *
 * - Path parameter `id`: must be a valid UUID corresponding to an existing guest
 * - Request body: must comply with input schema for guest updates
 *
 * Expected errors include 404 for unknown guest ID, 400 for invalid input, and
 * 403 for unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target guest
 * @param props.body Guest update data payload
 * @path /redditCommunity/communityModerator/redditCommunityGuests/:id
 * @accessor api.functional.redditCommunity.communityModerator.redditCommunityGuests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target guest */
    id: string & tags.Format<"uuid">;

    /** Guest update data payload */
    body: IRedditCommunityGuest.IUpdate;
  };
  export type Body = IRedditCommunityGuest.IUpdate;
  export type Response = IRedditCommunityGuest;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/communityModerator/redditCommunityGuests/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communityModerator/redditCommunityGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRedditCommunityGuest =>
    typia.random<IRedditCommunityGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
