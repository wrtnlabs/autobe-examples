import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommentVote } from "../../../../../structures/IRedditCommunityCommentVote";
import { IPageIRedditCommunityCommentVote } from "../../../../../structures/IPageIRedditCommunityCommentVote";

/**
 * Retrieve paginated list of votes on a comment.
 *
 * Retrieve a paginated list of votes on a particular comment identified by
 * commentId.
 *
 * This endpoint accesses the reddit_community_comment_votes table filtering
 * votes for given commentId.
 *
 * Supports advanced filtering, sorting, and pagination through request body
 * parameters.
 *
 * Accessible only to roles with communityModerator or admin privileges.
 *
 * The response returns a paginated collection of matching votes.
 *
 * Request Body:
 *
 * - Contains filter and pagination criteria as per
 *   IRedditCommunityCommentVote.IRequest.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.body Parameters to filter, paginate, and sort the list of
 *   comment votes
 * @path /redditCommunity/communityModerator/comments/:commentId/commentVotes
 * @accessor api.functional.redditCommunity.communityModerator.comments.commentVotes.indexCommentVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexCommentVotes(
  connection: IConnection,
  props: indexCommentVotes.Props,
): Promise<indexCommentVotes.Response> {
  return true === connection.simulate
    ? indexCommentVotes.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexCommentVotes.METADATA,
          path: indexCommentVotes.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexCommentVotes {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Parameters to filter, paginate, and sort the list of comment votes */
    body: IRedditCommunityCommentVote.IRequest;
  };
  export type Body = IRedditCommunityCommentVote.IRequest;
  export type Response = IPageIRedditCommunityCommentVote;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/communityModerator/comments/:commentId/commentVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communityModerator/comments/${encodeURIComponent(props.commentId ?? "null")}/commentVotes`;
  export const random = (): IPageIRedditCommunityCommentVote =>
    typia.random<IPageIRedditCommunityCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: indexCommentVotes.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexCommentVotes.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
