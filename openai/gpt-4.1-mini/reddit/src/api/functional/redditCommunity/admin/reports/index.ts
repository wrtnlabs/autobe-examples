import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityReport } from "../../../../structures/IRedditCommunityReport";
import { IPageIRedditCommunityReport } from "../../../../structures/IPageIRedditCommunityReport";
export * as reportActions from "./reportActions/index";

/**
 * Search and retrieve a paginated list of content reports.
 *
 * Retrieve a paginated list of content reports for moderation purposes. This
 * operation supports filtering by report status, category, and reported entity
 * types (post, comment, member), along with search by description text.
 *
 * Access is restricted to community moderators and admins to protect sensitive
 * report data. The reports are stored in the reddit_community_reports table,
 * which links reporter and reported content, report category, description, and
 * status.
 *
 * The operation accepts complex search criteria and pagination parameters in
 * the request body and returns a paginated list of report summaries. Typical
 * errors include authentication failures and invalid filters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for report
 *   filtering
 * @path /redditCommunity/admin/reports
 * @accessor api.functional.redditCommunity.admin.reports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for report filtering */
    body: IRedditCommunityReport.IRequest;
  };
  export type Body = IRedditCommunityReport.IRequest;
  export type Response = IPageIRedditCommunityReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/admin/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditCommunity/admin/reports";
  export const random = (): IPageIRedditCommunityReport.ISummary =>
    typia.random<IPageIRedditCommunityReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific content report by its unique
 * identifier.
 *
 * Access restricted to community moderators and admins to ensure
 * confidentiality and proper moderation.
 *
 * Returns full report data including linked reporter info, reported content,
 * report status, and timestamps.
 *
 * If the report ID does not exist, returns a 404 error.
 *
 * @param props.connection
 * @param props.reportId Unique identifier of the target content report
 * @path /redditCommunity/admin/reports/:reportId
 * @accessor api.functional.redditCommunity.admin.reports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target content report */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityReport;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/admin/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IRedditCommunityReport =>
    typia.random<IRedditCommunityReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a content moderation report by ID.
 *
 * Update details of an existing content report identified by its ID. Changes
 * may include updating the report status, category, or description to reflect
 * moderation review progress.
 *
 * Only authorized users such as community moderators or admins can perform
 * updates. The operation validates the provided report ID path parameter and
 * request body data to ensure consistency.
 *
 * Proper error handling occurs if the report ID does not exist or the user
 * lacks permissions.
 *
 * This operation is essential for managing report lifecycles and collaborating
 * among moderation teams.
 *
 * @param props.connection
 * @param props.reportId Unique identifier of the report to update
 * @param props.body Updated report data
 * @path /redditCommunity/admin/reports/:reportId
 * @accessor api.functional.redditCommunity.admin.reports.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the report to update */
    reportId: string & tags.Format<"uuid">;

    /** Updated report data */
    body: IRedditCommunityReport.IUpdate;
  };
  export type Body = IRedditCommunityReport.IUpdate;
  export type Response = IRedditCommunityReport;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/admin/reports/:reportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IRedditCommunityReport =>
    typia.random<IRedditCommunityReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a report by ID.
 *
 * Delete a report from the system by its unique identifier.
 *
 * This operation permanently removes the report record from the database,
 * including its associations with reporter guests or members and the reported
 * post, comment, or member. It is a hard delete and cannot be reversed.
 *
 * Authorization is required to ensure only users with appropriate permissions
 * can delete reports, such as admins or community moderators.
 *
 * No request body is needed as the operation only requires the reportId to be
 * specified in the path.
 *
 * No response body is returned upon successful deletion. Errors may be returned
 * if the report does not exist or access is unauthorized.
 *
 * @param props.connection
 * @param props.reportId Unique identifier of the report to delete
 * @path /redditCommunity/admin/reports/:reportId
 * @accessor api.functional.redditCommunity.admin.reports.eraseReportById
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseReportById(
  connection: IConnection,
  props: eraseReportById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseReportById.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseReportById.METADATA,
          path: eraseReportById.path(props),
          status: null,
        },
      );
}
export namespace eraseReportById {
  export type Props = {
    /** Unique identifier of the report to delete */
    reportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/admin/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseReportById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseReportById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
