import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityReportAction } from "../../../../../structures/IRedditCommunityReportAction";
import { IPageIRedditCommunityReportAction } from "../../../../../structures/IPageIRedditCommunityReportAction";

/**
 * Create a new report action for a report.
 *
 * This operation allows authorized community moderators or admins to create a
 * new moderation action record linked to a specific report. The operation
 * inserts a new record into reddit_community_report_actions with required
 * fields including report ID, moderator member ID, action type, and optional
 * admin member ID and notes.
 *
 * This facilitates tracking of moderation decisions, warnings, deletions, or
 * other administrative activities assigned to reports.
 *
 * The associated request body must comply with the
 * IRedditCommunityReportAction.ICreate schema, ensuring all required fields are
 * provided.
 *
 * This operation ensures recorded moderation actions are auditable and properly
 * linked to users performing them.
 *
 * @param props.connection
 * @param props.reportId Unique identifier of the target report to link the new
 *   action
 * @param props.body Information for creating a new report action linked to a
 *   report
 * @path /redditCommunity/admin/reports/:reportId/reportActions
 * @accessor api.functional.redditCommunity.admin.reports.reportActions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target report to link the new action */
    reportId: string & tags.Format<"uuid">;

    /** Information for creating a new report action linked to a report */
    body: IRedditCommunityReportAction.ICreate;
  };
  export type Body = IRedditCommunityReportAction.ICreate;
  export type Response = IRedditCommunityReportAction;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/admin/reports/:reportId/reportActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}/reportActions`;
  export const random = (): IRedditCommunityReportAction =>
    typia.random<IRedditCommunityReportAction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List moderation actions for a report.
 *
 * Retrieve a paginated list of moderation actions linked to a specific report.
 *
 * This operation supports filtering, sorting, and pagination parameters in the
 * request body to efficiently query report actions.
 *
 * Authorized users (admins, community moderators) can view all moderation
 * actions taken on the report, including action types, notes, timestamps, and
 * involved users.
 *
 * The response includes detailed metadata of each moderation action,
 * facilitating moderation review and audit.
 *
 * Errors may be returned for invalid reportId or unauthorized access.
 *
 * @param props.connection
 * @param props.reportId Unique identifier of the report
 * @param props.body Pagination, sorting, and filtering parameters for report
 *   actions
 * @path /redditCommunity/admin/reports/:reportId/reportActions
 * @accessor api.functional.redditCommunity.admin.reports.reportActions.searchReportActionsByReportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchReportActionsByReportId(
  connection: IConnection,
  props: searchReportActionsByReportId.Props,
): Promise<searchReportActionsByReportId.Response> {
  return true === connection.simulate
    ? searchReportActionsByReportId.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchReportActionsByReportId.METADATA,
          path: searchReportActionsByReportId.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace searchReportActionsByReportId {
  export type Props = {
    /** Unique identifier of the report */
    reportId: string & tags.Format<"uuid">;

    /** Pagination, sorting, and filtering parameters for report actions */
    body: IRedditCommunityReportAction.IRequest;
  };
  export type Body = IRedditCommunityReportAction.IRequest;
  export type Response = IPageIRedditCommunityReportAction;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/admin/reports/:reportId/reportActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}/reportActions`;
  export const random = (): IPageIRedditCommunityReportAction =>
    typia.random<IPageIRedditCommunityReportAction>();
  export const simulate = (
    connection: IConnection,
    props: searchReportActionsByReportId.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchReportActionsByReportId.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific report action by ID for a report.
 *
 * This operation fetches detailed information about a single moderation action
 * performed on a report in redditCommunity. It returns the record identified by
 * the specified report ID and report action ID. The action includes data about
 * which community moderator or admin performed the action, the type of action
 * taken, timestamps, and optional notes.
 *
 * Only authorized community moderators and admins may access this operation due
 * to the sensitive nature of moderation actions. It ensures secure retrieval of
 * detailed moderation activity linked to content reporting.
 *
 * This operation corresponds to the reddit_community_report_actions table in
 * the Prisma schema.
 *
 * @param props.connection
 * @param props.reportId Unique identifier of the target report
 * @param props.actionId Unique identifier of the report action to retrieve
 * @path /redditCommunity/admin/reports/:reportId/reportActions/:actionId
 * @accessor api.functional.redditCommunity.admin.reports.reportActions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target report */
    reportId: string & tags.Format<"uuid">;

    /** Unique identifier of the report action to retrieve */
    actionId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityReportAction;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/admin/reports/:reportId/reportActions/:actionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}/reportActions/${encodeURIComponent(props.actionId ?? "null")}`;
  export const random = (): IRedditCommunityReportAction =>
    typia.random<IRedditCommunityReportAction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.param("actionId")(() => typia.assert(props.actionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific moderation report action.
 *
 * Update a specific moderation action linked to a user report in the
 * redditCommunity platform. This operation updates the action_type, notes, and
 * timestamps of the report action record identified by reportId and actionId.
 *
 * This API requires proper authorization, typically limited to community
 * moderators or admins with management privileges. The operation aligns with
 * the reddit_community_report_actions table, ensuring referential integrity
 * with reports, moderators, and admins.
 *
 * Validation rules enforce that the action_type field is provided and
 * meaningful, while notes are optional free text. The system maintains
 * created_at and updated_at timestamps to track the lifecycle of moderation
 * actions.
 *
 * Typical uses include recording changes to moderation action details, adding
 * notes for audit purposes, or correcting action types post initial recording.
 *
 * This operation requires input of the action update details in the request
 * body and path parameters specifying the targeted report and action ids. It
 * produces the updated report action entity in response.
 *
 * @param props.connection
 * @param props.reportId Target report ID containing the action
 * @param props.actionId Target action ID to update
 * @param props.body Details for updating the report action
 * @path /redditCommunity/admin/reports/:reportId/reportActions/:actionId
 * @accessor api.functional.redditCommunity.admin.reports.reportActions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target report ID containing the action */
    reportId: string & tags.Format<"uuid">;

    /** Target action ID to update */
    actionId: string & tags.Format<"uuid">;

    /** Details for updating the report action */
    body: IRedditCommunityReportAction.IUpdate;
  };
  export type Body = IRedditCommunityReportAction.IUpdate;
  export type Response = IRedditCommunityReportAction;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/admin/reports/:reportId/reportActions/:actionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}/reportActions/${encodeURIComponent(props.actionId ?? "null")}`;
  export const random = (): IRedditCommunityReportAction =>
    typia.random<IRedditCommunityReportAction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.param("actionId")(() => typia.assert(props.actionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific moderation report action linked to a user report in the
 * redditCommunity platform. This operation permanently removes the report
 * action record identified by reportId and actionId.
 *
 * This API requires authorization for community moderators or admins with
 * privileges to manage moderation actions.
 *
 * Upon success, no response body is returned.
 *
 * Errors occur if the specified report action does not exist.
 *
 * @param props.connection
 * @param props.reportId Target report ID containing the action
 * @param props.actionId Target action ID to delete
 * @path /redditCommunity/admin/reports/:reportId/reportActions/:actionId
 * @accessor api.functional.redditCommunity.admin.reports.reportActions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target report ID containing the action */
    reportId: string & tags.Format<"uuid">;

    /** Target action ID to delete */
    actionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/admin/reports/:reportId/reportActions/:actionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/reports/${encodeURIComponent(props.reportId ?? "null")}/reportActions/${encodeURIComponent(props.actionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.param("actionId")(() => typia.assert(props.actionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
