import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityAdmin } from "../../../../structures/IRedditCommunityAdmin";
import { IPageIRedditCommunityAdmin } from "../../../../structures/IPageIRedditCommunityAdmin";

/**
 * Retrieve paginated list of redditCommunity admins.
 *
 * Retrieve a filtered and paginated list of redditCommunity admin users from
 * the system. This operation supports advanced search criteria, allowing
 * administrators to query admin users based on attributes such as unique email
 * addresses and administrative levels.
 *
 * The endpoint supports pagination parameters to limit the result set,
 * facilitating efficient data browsing in administrative consoles. Sorting
 * options enable ordering by creation date or admin level.
 *
 * Security considerations restrict access to authorized system administrators
 * only, ensuring sensitive administrative information is well protected. This
 * operation fetches active admin records including those with soft deletion
 * data for auditing purposes.
 *
 * This operation interacts with the "reddit_community_admins" table in the
 * Prisma schema, adhering to database constraints on uniqueness of email
 * addresses and indexing based on creation and admin level timestamps.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for
 *   redditCommunity admins
 * @path /redditCommunity/admin/redditCommunityAdmins
 * @accessor api.functional.redditCommunity.admin.redditCommunityAdmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for redditCommunity admins */
    body: IRedditCommunityAdmin.IRequest;
  };
  export type Body = IRedditCommunityAdmin.IRequest;
  export type Response = IPageIRedditCommunityAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/admin/redditCommunityAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditCommunity/admin/redditCommunityAdmins";
  export const random = (): IPageIRedditCommunityAdmin =>
    typia.random<IPageIRedditCommunityAdmin>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific redditCommunity admin by ID.
 *
 * Retrieve detailed information of a specific redditCommunity admin identified
 * by a UUID-compliant ID. This operation is restricted to system administrators
 * and returns the following data fields: unique identifier, email address,
 * password hash, administrative level, creation timestamp, last update
 * timestamp, and soft deletion timestamp if applicable.
 *
 * It ensures secure access, precise retrieval of admin records, and maintains
 * audit completeness by including soft deletion status.
 *
 * This operation targets the "reddit_community_admins" table from the Prisma
 * schema, guaranteeing accurate data extraction consistent with schema
 * constraints and indexes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target redditCommunity admin
 * @path /redditCommunity/admin/redditCommunityAdmins/:id
 * @accessor api.functional.redditCommunity.admin.redditCommunityAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target redditCommunity admin */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityAdmin;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/admin/redditCommunityAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/redditCommunityAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRedditCommunityAdmin =>
    typia.random<IRedditCommunityAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update admin user information by admin ID.
 *
 * Update the details of an existing admin user identified by their unique ID.
 * The admin user can have their email, password hash, and administrative level
 * updated. This operation enforces data integrity by validating the admin's
 * UUID and uniqueness of the email address. Only a user with appropriate
 * administrative permissions ("admin") should be allowed to perform this
 * operation. Concurrency and soft-deletion are handled as per the underlying
 * database constraints and business rules.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin user to update
 * @param props.body Updated admin user data
 * @path /redditCommunity/admin/redditCommunityAdmins/:id
 * @accessor api.functional.redditCommunity.admin.redditCommunityAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the admin user to update */
    id: string & tags.Format<"uuid">;

    /** Updated admin user data */
    body: IRedditCommunityAdmin.IUpdate;
  };
  export type Body = IRedditCommunityAdmin.IUpdate;
  export type Response = IRedditCommunityAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/admin/redditCommunityAdmins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/admin/redditCommunityAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRedditCommunityAdmin =>
    typia.random<IRedditCommunityAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete admin user by admin ID.
 *
 * Permanently delete an admin user by their unique ID. This deletion cannot be
 * undone and the admin user record will be removed from the system entirely.
 * Only authorized users with admin privileges should be allowed to execute this
 * operation. The system enforces hard deletion and does not perform soft
 * deletion for admin accounts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin user to delete
 * @path /redditCommunity/admin/redditCommunityAdmins/:id
 * @accessor api.functional.redditCommunity.admin.redditCommunityAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the admin user to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/admin/redditCommunityAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/redditCommunityAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
