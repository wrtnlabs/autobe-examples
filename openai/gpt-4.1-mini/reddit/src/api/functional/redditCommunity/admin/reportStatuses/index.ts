import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityReportStatus } from "../../../../structures/IRedditCommunityReportStatus";

/**
 * Create a new report status entity in the reddit_community_report_statuses
 * table.
 *
 * Create a new report status for categorizing and tracking user reports within
 * the redditCommunity platform.
 *
 * This operation allows authorized administrators to define new report statuses
 * such as 'pending', 'reviewed', or 'action taken' with an optional
 * description.
 *
 * Security considerations include restricting this operation to admin roles
 * only. Missing or duplicate status names will result in validation errors.
 *
 * The operation maps directly to the reddit_community_report_statuses database
 * table, respecting unique constraints on the status name.
 *
 * On success, the newly created report status record will be returned.
 *
 * Typical related operations include updating existing report statuses and
 * listing report statuses for moderation workflows.
 *
 * Errors will be reported for invalid input, unauthorized access, or database
 * constraint violations.
 *
 * @param props.connection
 * @param props.body With the properties: - name: Unique report status name -
 *   description: Optional description of the report status - created_at,
 *   updated_at: timestamps for creation and last update handled by the system
 *   automatically
 *
 *             Request body type: IRedditCommunityReportStatus.ICreate
 * @path /redditCommunity/admin/reportStatuses
 * @accessor api.functional.redditCommunity.admin.reportStatuses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * With the properties:
     *
     * - Name: Unique report status name
     * - Description: Optional description of the report status
     * - Created_at, updated_at: timestamps for creation and last update
     *   handled by the system automatically
     *
     * Request body type: IRedditCommunityReportStatus.ICreate
     */
    body: IRedditCommunityReportStatus.ICreate;
  };
  export type Body = IRedditCommunityReportStatus.ICreate;
  export type Response = IRedditCommunityReportStatus;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/admin/reportStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditCommunity/admin/reportStatuses";
  export const random = (): IRedditCommunityReportStatus =>
    typia.random<IRedditCommunityReportStatus>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update report status entity by statusId in reddit_community_report_statuses.
 *
 * Update an existing report status entity identified by its statusId in the
 * reddit_community_report_statuses table.
 *
 * Only authorized administrators can perform updates to ensure system
 * integrity.
 *
 * The operation requires a valid UUID path parameter representing the target
 * report status ID and a request body specifying modifiable fields such as name
 * and description.
 *
 * Unique constraints on the name are enforced by the system during update.
 *
 * The response returns the updated report status object.
 *
 * Error handling accommodates invalid identifiers, conflicting names, and
 * unauthorized access attempts.
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the report status to update
 * @param props.body Properties for updating a report status such as name and
 *   description, using IRedditCommunityReportStatus.IUpdate DTO
 * @path /redditCommunity/admin/reportStatuses/:statusId
 * @accessor api.functional.redditCommunity.admin.reportStatuses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the report status to update */
    statusId: string & tags.Format<"uuid">;

    /**
     * Properties for updating a report status such as name and description,
     * using IRedditCommunityReportStatus.IUpdate DTO
     */
    body: IRedditCommunityReportStatus.IUpdate;
  };
  export type Body = IRedditCommunityReportStatus.IUpdate;
  export type Response = IRedditCommunityReportStatus;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/admin/reportStatuses/:statusId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/admin/reportStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IRedditCommunityReportStatus =>
    typia.random<IRedditCommunityReportStatus>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a report status by its unique identifier.
 *
 * This API operation deletes a specific report status from the redditCommunity
 * platform's report status lookup table.
 *
 * The report status entity defines possible states of content reports such as
 * pending, reviewed, or action taken. This deletion permanently removes the
 * status identified by statusId.
 *
 * Only authorized admin users are permitted to perform this operation due to
 * the sensitive nature of modifying system-wide status definitions.
 *
 * The status to be deleted must exist and not be referenced by active reports
 * to avoid referential integrity issues.
 *
 * If the status does not exist or is currently in use, appropriate error
 * responses will be returned.
 *
 * No request body is needed as the statusId is specified as a path parameter.
 *
 * This operation adheres to strict RESTful conventions for resource deletion
 * and follows the Prisma schema definitions for report statuses.
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the report status to delete
 * @path /redditCommunity/admin/reportStatuses/:statusId
 * @accessor api.functional.redditCommunity.admin.reportStatuses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the report status to delete */
    statusId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/admin/reportStatuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/reportStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
