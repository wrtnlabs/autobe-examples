import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as communityModerators from "./communityModerators/index";
export * as posts from "./posts/index";

/**
 * Delete a specific redditCommunity community.
 *
 * This API endpoint deletes a specific community permanently from the system
 * database. It requires the unique community identifier as a path parameter.
 * When invoked, it will delete the corresponding record from the
 * 'reddit_community_communities' table, including cascading deletion of related
 * posts, moderators, and subscriptions.
 *
 * Authorization is critical; only users with admin privileges or community
 * management rights may execute this operation. The deletion is irreversible,
 * and all associated data linked via cascade rules will also be removed,
 * ensuring database consistency.
 *
 * Use this API when a community must be completely removed, for example, due to
 * policy violations or community dissolution. Clients should handle error
 * responses for non-existent community IDs or authorization failures properly.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community to delete
 * @path /redditCommunity/admin/communities/:communityId
 * @accessor api.functional.redditCommunity.admin.communities.eraseCommunity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCommunity(
  connection: IConnection,
  props: eraseCommunity.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCommunity.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCommunity.METADATA,
          path: eraseCommunity.path(props),
          status: null,
        },
      );
}
export namespace eraseCommunity {
  export type Props = {
    /** Unique identifier of the target community to delete */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/admin/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/admin/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCommunity.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCommunity.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
