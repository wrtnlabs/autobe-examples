import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityPost } from "../../../../structures/IRedditCommunityPost";
import { IPageIRedditCommunityPost } from "../../../../structures/IPageIRedditCommunityPost";

/**
 * Retrieve list of posts in a community with filtering and pagination.
 *
 * Retrieve a filtered and paginated list of posts belonging to the specified
 * community. This operation enables clients to obtain posts of various types
 * including text, link, and image posts, filtered by criteria like post type or
 * date range.
 *
 * The operation interacts with the reddit_community_posts table, which stores
 * posts authored by members or guests. Each post belongs to one community,
 * identified here by the communityId path parameter.
 *
 * Security considerations include restricting access to community posts to
 * valid and authorized users as per system policy, although viewing community
 * posts is mostly public. Proper validation of the communityId parameter is
 * enforced.
 *
 * Pagination parameters allow clients to specify page size and index, with
 * sorting options such as newest first, top votes, and hot topics. This
 * supports efficient browsing and avoids performance issues with large data
 * volumes.
 *
 * The response includes paginated post summary objects, optimized for listing
 * views with essential details such as title, post_type, and timestamps.
 * Clients may need to request detail operations for full post information.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.body Post filtering, search, pagination, and sorting criteria
 * @path /redditCommunity/communities/:communityId/posts
 * @accessor api.functional.redditCommunity.communities.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Post filtering, search, pagination, and sorting criteria */
    body: IRedditCommunityPost.IRequest;
  };
  export type Body = IRedditCommunityPost.IRequest;
  export type Response = IPageIRedditCommunityPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/communities/:communityId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/communities/${encodeURIComponent(props.communityId ?? "null")}/posts`;
  export const random = (): IPageIRedditCommunityPost.ISummary =>
    typia.random<IPageIRedditCommunityPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a single community post.
 *
 * Get detailed information about a specific post identified by postId within
 * the community identified by communityId. This includes all relevant post
 * content fields (text, link, image), metadata like creation and update
 * timestamps, author references, and status information.
 *
 * The post data is stored in the reddit_community_posts table and linked to the
 * community and author entities. Only authorized or public-allowed clients can
 * access this data.
 *
 * This operation is essential for showing post details in user interfaces and
 * complements list retrieval operations that provide summarized views.
 *
 * Validation of both communityId and postId path parameters ensures proper data
 * retrieval and access control.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @path /redditCommunity/communities/:communityId/posts/:postId
 * @accessor api.functional.redditCommunity.communities.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityPost;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/communities/:communityId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IRedditCommunityPost =>
    typia.random<IRedditCommunityPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
