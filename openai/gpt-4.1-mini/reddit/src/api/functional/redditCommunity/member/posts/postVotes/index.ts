import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityPostVote } from "../../../../../structures/IRedditCommunityPostVote";
import { IPageIRedditCommunityPostVote } from "../../../../../structures/IPageIRedditCommunityPostVote";

/**
 * Create a vote on a specific post by a member.
 *
 * Create a post vote by an authenticated member. The post is identified by the
 * postId path parameter. The request body must contain the member_id of the
 * voting member and the vote_value which is either +1 for upvote, -1 for
 * downvote, or 0 to remove the vote.
 *
 * The operation enforces that a member can only have one active vote at a time
 * per post, and this creates or replaces that vote.
 *
 * Successful creation returns the created vote entity data. Authorization
 * requires member role.
 *
 * Parameters:
 *
 * - PostId: UUID of the post to vote on
 * - Request body: memberId (UUID string), voteValue (integer +1, -1, 0)
 *
 * Response: Created reddit_community_post_votes entity with all fields
 *
 * Security: Only authenticated members may invoke this operation.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.body Vote creation data relating member to post with vote value
 * @path /redditCommunity/member/posts/:postId/postVotes
 * @accessor api.functional.redditCommunity.member.posts.postVotes.createPostVote
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createPostVote(
  connection: IConnection,
  props: createPostVote.Props,
): Promise<createPostVote.Response> {
  return true === connection.simulate
    ? createPostVote.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createPostVote.METADATA,
          path: createPostVote.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createPostVote {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Vote creation data relating member to post with vote value */
    body: IRedditCommunityPostVote.ICreate;
  };
  export type Body = IRedditCommunityPostVote.ICreate;
  export type Response = IRedditCommunityPostVote;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/member/posts/:postId/postVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/posts/${encodeURIComponent(props.postId ?? "null")}/postVotes`;
  export const random = (): IRedditCommunityPostVote =>
    typia.random<IRedditCommunityPostVote>();
  export const simulate = (
    connection: IConnection,
    props: createPostVote.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createPostVote.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated vote summaries for a RedditCommunity post.
 *
 * Retrieve a filtered and paginated list of votes cast by members on the
 * specified RedditCommunity post, identified by the postId path parameter. The
 * operation returns vote records including member identifier, post identifier,
 * vote value (+1 for upvote, -1 for downvote, 0 for removed vote), creation and
 * update timestamps, and soft deletion timestamps when applicable.
 *
 * The request body allows specification of search criteria and pagination
 * parameters for effective filtering and result limiting.
 *
 * This operation requires authorization as a "member" role to protect voting
 * data confidentiality. The postId provided in the path must be a valid UUID of
 * an existing post.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target RedditCommunity post
 * @param props.body Search and pagination parameters for post vote filtering
 * @path /redditCommunity/member/posts/:postId/postVotes
 * @accessor api.functional.redditCommunity.member.posts.postVotes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target RedditCommunity post */
    postId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for post vote filtering */
    body: IRedditCommunityPostVote.IRequest;
  };
  export type Body = IRedditCommunityPostVote.IRequest;
  export type Response = IPageIRedditCommunityPostVote.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/member/posts/:postId/postVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/posts/${encodeURIComponent(props.postId ?? "null")}/postVotes`;
  export const random = (): IPageIRedditCommunityPostVote.ISummary =>
    typia.random<IPageIRedditCommunityPostVote.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific RedditCommunity post vote.
 *
 * Retrieve detailed information of a specific vote identified by voteId cast on
 * the RedditCommunity post with postId. The response includes member
 * identifier, post identifier, vote value (+1, -1, or 0), creation timestamp,
 * update timestamp, and soft deletion timestamp if any.
 *
 * Authorization requirements limit access to users with the "member" role. Both
 * postId and voteId path parameters must be valid UUIDs.
 *
 * This operation supports audit and management of individual votes within the
 * post voting system.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target RedditCommunity post
 * @param props.voteId Unique identifier of the target post vote record
 * @path /redditCommunity/member/posts/:postId/postVotes/:voteId
 * @accessor api.functional.redditCommunity.member.posts.postVotes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target RedditCommunity post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post vote record */
    voteId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityPostVote;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/member/posts/:postId/postVotes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/posts/${encodeURIComponent(props.postId ?? "null")}/postVotes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): IRedditCommunityPostVote =>
    typia.random<IRedditCommunityPostVote>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing vote on a specific post.
 *
 * Update an existing post vote by changing the vote_value. The resource is
 * identified by path parameters postId and voteId.
 *
 * Request body must include the updated vote_value (+1, -1, or 0).
 *
 * Only authenticated members with role member can perform this operation.
 *
 * Response contains updated vote entity information.
 *
 * This operation modifies the vote record and affects post scores and user
 * karma accordingly.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.voteId Unique identifier of the post vote record
 * @param props.body Vote update data including new vote value
 * @path /redditCommunity/member/posts/:postId/postVotes/:voteId
 * @accessor api.functional.redditCommunity.member.posts.postVotes.updatePostVote
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePostVote(
  connection: IConnection,
  props: updatePostVote.Props,
): Promise<updatePostVote.Response> {
  return true === connection.simulate
    ? updatePostVote.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePostVote.METADATA,
          path: updatePostVote.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updatePostVote {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the post vote record */
    voteId: string & tags.Format<"uuid">;

    /** Vote update data including new vote value */
    body: IRedditCommunityPostVote.IUpdate;
  };
  export type Body = IRedditCommunityPostVote.IUpdate;
  export type Response = IRedditCommunityPostVote;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/member/posts/:postId/postVotes/:voteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/posts/${encodeURIComponent(props.postId ?? "null")}/postVotes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): IRedditCommunityPostVote =>
    typia.random<IRedditCommunityPostVote>();
  export const simulate = (
    connection: IConnection,
    props: updatePostVote.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePostVote.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific post vote by vote ID and post ID.
 *
 * Delete a vote identified by voteId on a specific post identified by postId
 * within the redditCommunity platform.
 *
 * This operation permanently removes the vote record from the
 * reddit_community_post_votes table, which represents votes by members on
 * posts.
 *
 * Only authenticated members authorized to modify their votes may perform this
 * operation.
 *
 * Path Parameters:
 *
 * - PostId: UUID of the post containing the vote.
 * - VoteId: UUID of the vote record to delete.
 *
 * The operation returns no content on success.
 *
 * If the specified vote or post does not exist, the system returns an
 * appropriate error response.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post containing the vote
 * @param props.voteId Unique identifier of the vote to be deleted
 * @path /redditCommunity/member/posts/:postId/postVotes/:voteId
 * @accessor api.functional.redditCommunity.member.posts.postVotes.erasePostVote
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePostVote(
  connection: IConnection,
  props: erasePostVote.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePostVote.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePostVote.METADATA,
          path: erasePostVote.path(props),
          status: null,
        },
      );
}
export namespace erasePostVote {
  export type Props = {
    /** Unique identifier of the post containing the vote */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the vote to be deleted */
    voteId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/member/posts/:postId/postVotes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/posts/${encodeURIComponent(props.postId ?? "null")}/postVotes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePostVote.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePostVote.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
