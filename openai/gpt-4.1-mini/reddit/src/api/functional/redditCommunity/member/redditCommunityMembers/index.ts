import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityMember } from "../../../../structures/IRedditCommunityMember";

/**
 * Update redditCommunityMember information by ID.
 *
 * Update an existing redditCommunityMember's information. This includes
 * updating the email (which must remain unique across all members), password
 * hash for authentication, email verification status, and optionally marking
 * the account as deleted via a soft deletion timestamp.
 *
 * This operation applies to the "reddit_community_members" table in the Prisma
 * schema. The system automatically manages createdAt and updatedAt timestamps.
 *
 * Only authenticated users with appropriate roles can perform this update. The
 * operation validates unique email constraints and ensures password hashes meet
 * security policies.
 *
 * If the member with the specified ID does not exist, an error will be
 * returned. This operation returns no content but confirms success through HTTP
 * status.
 *
 * Authorization roles: member, communityModerator, admin.
 *
 * @param props.connection
 * @param props.id Unique identifier of the redditCommunityMember to update
 * @param props.body Payload containing fields to update in
 *   redditCommunityMember
 * @path /redditCommunity/member/redditCommunityMembers/:id
 * @accessor api.functional.redditCommunity.member.redditCommunityMembers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<void> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the redditCommunityMember to update */
    id: string & tags.Format<"uuid">;

    /** Payload containing fields to update in redditCommunityMember */
    body: IRedditCommunityMember.IUpdate;
  };
  export type Body = IRedditCommunityMember.IUpdate;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/member/redditCommunityMembers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/redditCommunityMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete redditCommunityMember by ID.
 *
 * Permanently delete a redditCommunityMember from the
 * "reddit_community_members" table by their unique identifier.
 *
 * This is a hard delete operation that removes the member and all associated
 * data such as posts, comments, votes, karma records, and community
 * subscriptions.
 *
 * This operation should only be executed by authorized roles such as the member
 * themselves or an administrator due to its impact on the system.
 *
 * No response body is returned. Errors are returned if the member does not
 * exist or if the caller lacks authorization.
 *
 * Authorization roles: member, communityModerator, admin.
 *
 * @param props.connection
 * @param props.id Unique identifier of the redditCommunityMember to delete
 * @path /redditCommunity/member/redditCommunityMembers/:id
 * @accessor api.functional.redditCommunity.member.redditCommunityMembers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the redditCommunityMember to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/member/redditCommunityMembers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/redditCommunityMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
