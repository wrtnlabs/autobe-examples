import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommunity } from "../../../../structures/IRedditCommunityCommunity";
import { IPageIRedditCommunityCommunity } from "../../../../structures/IPageIRedditCommunityCommunity";
export * as posts from "./posts/index";

/**
 * Create a new redditCommunity user community.
 *
 * Create a new user community in the redditCommunity platform. This endpoint
 * allows authenticated members to specify a unique community name adhering to
 * platform naming rules and an optional descriptive text.
 *
 * The operation ensures the community name is unique across the system and
 * complies with length and character restrictions. The server records metadata
 * such as creation and update timestamps automatically.
 *
 * Security requires the user to be a member (authenticated) and authorized to
 * create communities. Requests from non-members or guests are forbidden.
 *
 * This operation interacts with the 'reddit_community_communities' table in the
 * database, storing all relevant data about the newly created community.
 * Validation errors are returned if uniqueness or format constraints fail.
 *
 * Clients should provide valid name and optionally the description in the
 * request body. The response includes the detailed community entity with
 * database-generated fields.
 *
 * @param props.connection
 * @param props.body The creation data for a new community, including required
 *   name and optional description
 * @path /redditCommunity/member/communities
 * @accessor api.functional.redditCommunity.member.communities.createCommunity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createCommunity(
  connection: IConnection,
  props: createCommunity.Props,
): Promise<createCommunity.Response> {
  return true === connection.simulate
    ? createCommunity.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCommunity.METADATA,
          path: createCommunity.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createCommunity {
  export type Props = {
    /**
     * The creation data for a new community, including required name and
     * optional description
     */
    body: IRedditCommunityCommunity.ICreate;
  };
  export type Body = IRedditCommunityCommunity.ICreate;
  export type Response = IRedditCommunityCommunity;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/member/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditCommunity/member/communities";
  export const random = (): IRedditCommunityCommunity =>
    typia.random<IRedditCommunityCommunity>();
  export const simulate = (
    connection: IConnection,
    props: createCommunity.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createCommunity.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of communities.
 *
 * Retrieve a filtered and paginated list of user communities from the
 * reddit_community_communities table. The operation supports advanced filters
 * including partial matching on community names, optional description keywords,
 * and filtering communities created within certain date ranges.
 *
 * Sorting options include ascending or descending order by community name and
 * creation date to help users find communities by popularity, recency, or
 * alphabetical order.
 *
 * Security considerations restrict these operations to authenticated members to
 * prevent abuse and ensure privacy compliance. Maintainers must validate all
 * inputs to avoid injection and ensure system stability.
 *
 * The response includes concise community summaries optimized for display in UI
 * lists, including community ID, name, description, and creation date.
 * Paginated results allow clients to load communities incrementally for
 * performance.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for communities
 * @path /redditCommunity/member/communities
 * @accessor api.functional.redditCommunity.member.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for communities */
    body: IRedditCommunityCommunity.IRequest;
  };
  export type Body = IRedditCommunityCommunity.IRequest;
  export type Response = IPageIRedditCommunityCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/member/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditCommunity/member/communities";
  export const random = (): IPageIRedditCommunityCommunity.ISummary =>
    typia.random<IPageIRedditCommunityCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed community information by ID.
 *
 * Retrieve full details for a single community entity identified by communityId
 * from the reddit_community_communities table. The community entity includes
 * unique name, description, creation and last updating timestamps, and soft
 * deletion timestamp.
 *
 * Access is limited to authenticated members to ensure information security and
 * controlled data exposure.
 *
 * Input validation confirms the communityId parameter is a valid UUID.
 *
 * The response contains detailed community information suitable for profile or
 * management views, including community metadata and associated moderators and
 * subscriptions.
 *
 * Errors are handled gracefully with standard invalid ID and not found
 * responses.
 *
 * @param props.connection
 * @param props.communityId Unique community identifier
 * @path /redditCommunity/member/communities/:communityId
 * @accessor api.functional.redditCommunity.member.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique community identifier */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityCommunity;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/member/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): IRedditCommunityCommunity =>
    typia.random<IRedditCommunityCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update description of a redditCommunity user community.
 *
 * Update existing community information on the redditCommunity platform. This
 * endpoint allows authorized members, such as community moderators, to edit the
 * description of a specified community.
 *
 * The community's name is immutable and cannot be changed after creation.
 * Partial updates to the description are supported.
 *
 * Authorization requires the member role; further domain-specific permission
 * checks should be enforced by business logic.
 *
 * The server manages update timestamps and ensures referential integrity. On
 * success, updated details of the community are returned.
 *
 * The path parameter 'communityId' uniquely identifies the target community for
 * update.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community to update
 * @param props.body Update data for the community, allowing modification of
 *   description field only
 * @path /redditCommunity/member/communities/:communityId
 * @accessor api.functional.redditCommunity.member.communities.updateCommunity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCommunity(
  connection: IConnection,
  props: updateCommunity.Props,
): Promise<updateCommunity.Response> {
  return true === connection.simulate
    ? updateCommunity.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCommunity.METADATA,
          path: updateCommunity.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCommunity {
  export type Props = {
    /** Unique identifier of the community to update */
    communityId: string & tags.Format<"uuid">;

    /**
     * Update data for the community, allowing modification of description
     * field only
     */
    body: IRedditCommunityCommunity.IUpdate;
  };
  export type Body = IRedditCommunityCommunity.IUpdate;
  export type Response = IRedditCommunityCommunity;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/member/communities/:communityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): IRedditCommunityCommunity =>
    typia.random<IRedditCommunityCommunity>();
  export const simulate = (
    connection: IConnection,
    props: updateCommunity.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCommunity.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
