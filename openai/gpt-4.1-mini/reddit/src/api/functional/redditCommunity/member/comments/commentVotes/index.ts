import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityCommentVote } from "../../../../../structures/IRedditCommunityCommentVote";

/**
 * Retrieve a specific comment vote by IDs.
 *
 * Retrieve detailed information of a specific vote on a comment.
 *
 * This endpoint allows fetching a single vote identified by voteId associated
 * with the specified commentId. It provides comprehensive metadata about the
 * vote including the member who cast it, the current vote value (upvote,
 * downvote, or removed), and timestamps for audit purposes.
 *
 * Access to this endpoint is restricted to authenticated members.
 *
 * If the specified comment or vote does not exist, the operation returns an
 * error indicating the resource could not be found.
 *
 * This operation corresponds to the reddit_community_comment_votes table in the
 * underlying Prisma schema, which stores voting data linked to members and
 * comments.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.voteId Unique identifier of the target vote
 * @path /redditCommunity/member/comments/:commentId/commentVotes/:voteId
 * @accessor api.functional.redditCommunity.member.comments.commentVotes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the target vote */
    voteId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityCommentVote;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/member/comments/:commentId/commentVotes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/comments/${encodeURIComponent(props.commentId ?? "null")}/commentVotes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): IRedditCommunityCommentVote =>
    typia.random<IRedditCommunityCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific vote on a comment.
 *
 * This API operation allows an authenticated redditCommunity member to update
 * their vote on a comment specified by the commentId and voteId path
 * parameters. The vote value must be one of +1 (upvote), -1 (downvote), or 0
 * (remove vote).
 *
 * Security: Only the vote owner is authorized to update their vote.
 *
 * Database Relation: Targets the reddit_community_comment_votes table, which
 * records member votes on comments with support for soft deletion.
 *
 * Validation: Ensures the voteValue is an integer among -1, 0, or 1.
 *
 * Usage: This operation complements retrieval of existing votes to facilitate
 * vote modification workflows.
 *
 * Error Handling: Returns errors for unauthorized access or invalid vote
 * values.
 *
 * Response: Returns the updated comment vote record, including timing and
 * linkage information.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment
 * @param props.voteId Unique identifier of the vote
 * @param props.body Request body specifying updated vote value for the comment
 *   vote
 * @path /redditCommunity/member/comments/:commentId/commentVotes/:voteId
 * @accessor api.functional.redditCommunity.member.comments.commentVotes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the vote */
    voteId: string & tags.Format<"uuid">;

    /** Request body specifying updated vote value for the comment vote */
    body: IRedditCommunityCommentVote.IUpdate;
  };
  export type Body = IRedditCommunityCommentVote.IUpdate;
  export type Response = IRedditCommunityCommentVote;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/member/comments/:commentId/commentVotes/:voteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/comments/${encodeURIComponent(props.commentId ?? "null")}/commentVotes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): IRedditCommunityCommentVote =>
    typia.random<IRedditCommunityCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific vote on a comment.
 *
 * This API endpoint enables an authenticated redditCommunity member to delete
 * their vote on a comment identified by commentId and voteId.
 *
 * Only the vote owner can perform this deletion, ensuring authorization
 * compliance.
 *
 * Deletion is a hard delete operation removing the vote record completely from
 * the reddit_community_comment_votes table.
 *
 * No response body is returned upon success. Attempting to delete a
 * non-existent or unauthorized vote will result in an error.
 *
 * Usage typically follows vote listing and validation operations to confirm the
 * targeted vote.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment
 * @param props.voteId Unique identifier of the vote
 * @path /redditCommunity/member/comments/:commentId/commentVotes/:voteId
 * @accessor api.functional.redditCommunity.member.comments.commentVotes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the vote */
    voteId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/member/comments/:commentId/commentVotes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/comments/${encodeURIComponent(props.commentId ?? "null")}/commentVotes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a comment vote.
 *
 * Create a new comment vote record.
 *
 * Members can upvote (+1), downvote (-1), or remove their vote (0) on a
 * comment. This operation registers the vote associated with the member and
 * comment.
 *
 * The request must include member ID and vote value.
 *
 * Authorization is restricted to members.
 *
 * Returns the created comment vote including metadata and timestamps.
 *
 * Proper validation of the member and comment identifiers is required.
 *
 * This operation corresponds to the reddit_community_comment_votes table in the
 * Prisma schema.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.body Create comment vote data
 * @path /redditCommunity/member/comments/:commentId/commentVotes
 * @accessor api.functional.redditCommunity.member.comments.commentVotes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Create comment vote data */
    body: IRedditCommunityCommentVote.ICreate;
  };
  export type Body = IRedditCommunityCommentVote.ICreate;
  export type Response = IRedditCommunityCommentVote;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/member/comments/:commentId/commentVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/comments/${encodeURIComponent(props.commentId ?? "null")}/commentVotes`;
  export const random = (): IRedditCommunityCommentVote =>
    typia.random<IRedditCommunityCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
