import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityPosts } from "../../../../../structures/IRedditCommunityPosts";

/**
 * Create a new post in a community.
 *
 * Create a new post within the specified community. Posts must have one of the
 * three supported types: 'text', 'link', or 'image'.
 *
 * For text posts, a non-empty body_text up to 10,000 characters is required.
 * For link posts, a valid link_url must be specified. For image posts, an
 * image_url must be provided representing the single image.
 *
 * Post titles must not exceed 300 characters.
 *
 * Authorization requires the user to be an authenticated member. The post will
 * be linked to the community specified by the communityId path parameter.
 *
 * The system records creation and update timestamps automatically and supports
 * soft deletion.
 *
 * This operation validates inputs and returns the created post information.
 *
 * Users can later update or delete their posts within allowed business rules.
 *
 * Users cannot create posts as guests or admins directly; hence, the operation
 * restricts roles accordingly.
 *
 * Errors will occur if communityId does not exist or if required fields are
 * missing or invalid.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.body Information required to create a new post in a community
 * @path /redditCommunity/member/communities/:communityId/posts
 * @accessor api.functional.redditCommunity.member.communities.posts.createPost
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createPost(
  connection: IConnection,
  props: createPost.Props,
): Promise<createPost.Response> {
  return true === connection.simulate
    ? createPost.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createPost.METADATA,
          path: createPost.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createPost {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Information required to create a new post in a community */
    body: IRedditCommunityPosts.ICreate;
  };
  export type Body = IRedditCommunityPosts.ICreate;
  export type Response = IRedditCommunityPosts;

  export const METADATA = {
    method: "POST",
    path: "/redditCommunity/member/communities/:communityId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts`;
  export const random = (): IRedditCommunityPosts =>
    typia.random<IRedditCommunityPosts>();
  export const simulate = (
    connection: IConnection,
    props: createPost.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createPost.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing post in a community.
 *
 * Update an existing post in a specified community. The update allows modifying
 * the post's title, text body, link URL, or image URL depending on the post
 * type.
 *
 * Only authenticated members who are authorized can update posts.
 *
 * The community and post are identified by their respective UUIDs provided in
 * the path parameters.
 *
 * The operation enforces validation rules consistent with post type and content
 * limits.
 *
 * On success, the updated post information is returned.
 *
 * Errors occur if the post does not exist in the community, if the user lacks
 * permission, or if the input fails validation.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @param props.body Information required to update a post
 * @path /redditCommunity/member/communities/:communityId/posts/:postId
 * @accessor api.functional.redditCommunity.member.communities.posts.updatePost
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePost(
  connection: IConnection,
  props: updatePost.Props,
): Promise<updatePost.Response> {
  return true === connection.simulate
    ? updatePost.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePost.METADATA,
          path: updatePost.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updatePost {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Information required to update a post */
    body: IRedditCommunityPosts.IUpdate;
  };
  export type Body = IRedditCommunityPosts.IUpdate;
  export type Response = IRedditCommunityPosts;

  export const METADATA = {
    method: "PUT",
    path: "/redditCommunity/member/communities/:communityId/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/redditCommunity/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IRedditCommunityPosts =>
    typia.random<IRedditCommunityPosts>();
  export const simulate = (
    connection: IConnection,
    props: updatePost.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePost.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a post from a community.
 *
 * Permanently deletes the post identified by the postId within the context of
 * the specified communityId.
 *
 * The operation ensures data integrity by cascading deletions to related votes
 * and comments associated with the post. Only authorized users such as the post
 * author (member role), community moderators for the associated community, or
 * admins may perform this operation.
 *
 * There is no request body for this operation.
 *
 * No content is returned in the response after successful deletion.
 *
 * Errors may be returned if the community or post does not exist, or if the
 * user lacks proper authorization.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the post
 * @path /redditCommunity/member/communities/:communityId/posts/:postId
 * @accessor api.functional.redditCommunity.member.communities.posts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the post */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/redditCommunity/member/communities/:communityId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
