import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRedditCommunityReportStatus } from "../../../structures/IRedditCommunityReportStatus";
import { IPageIRedditCommunityReportStatus } from "../../../structures/IPageIRedditCommunityReportStatus";

/**
 * Retrieve a list of redditCommunity report statuses.
 *
 * Retrieve a filtered and paginated list of report statuses used by the
 * reporting and moderation system within the redditCommunity platform. Report
 * statuses include distinct lifecycle stages for moderation workflows, such as
 * pending review, reviewed, or action taken, defined in the
 * reddit_community_report_statuses table.
 *
 * This operation is accessible publicly without authentication to allow clients
 * to understand possible report status values.
 *
 * The response includes pagination metadata as well as concise details about
 * each report status. The search and sorting mechanisms enable efficient
 * retrieval for UI dropdowns or filtering in administrative tools.
 *
 * This operation complements the GET endpoint for retrieving detailed status
 * information by ID.
 *
 * Errors due to invalid search or pagination parameters will be returned with
 * appropriate error messages.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for report statuses
 * @path /redditCommunity/reportStatuses
 * @accessor api.functional.redditCommunity.reportStatuses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for report statuses */
    body: IRedditCommunityReportStatus.IRequest;
  };
  export type Body = IRedditCommunityReportStatus.IRequest;
  export type Response = IPageIRedditCommunityReportStatus.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/redditCommunity/reportStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/redditCommunity/reportStatuses";
  export const random = (): IPageIRedditCommunityReportStatus.ISummary =>
    typia.random<IPageIRedditCommunityReportStatus.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a report status by its ID.
 *
 * Retrieve detailed information about a specific redditCommunity report status
 * identified by its unique ID. Report statuses represent distinct lifecycle
 * states of reports such as pending, reviewed, or action taken.
 *
 * This operation allows clients and administrative interfaces to fetch complete
 * details on a particular report status for display and processing.
 *
 * No request body is needed. The path parameter reportStatusId identifies which
 * report status to retrieve.
 *
 * The response includes all relevant fields including the name and description.
 * Invalid or unknown IDs will return error responses.
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the target report status
 * @path /redditCommunity/reportStatuses/:statusId
 * @accessor api.functional.redditCommunity.reportStatuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target report status */
    statusId: string & tags.Format<"uuid">;
  };
  export type Response = IRedditCommunityReportStatus;

  export const METADATA = {
    method: "GET",
    path: "/redditCommunity/reportStatuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/redditCommunity/reportStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IRedditCommunityReportStatus =>
    typia.random<IRedditCommunityReportStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
