import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestRefresh } from "../../../../providers/postAuthGuestRefresh";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";

import { IRedditCommunityGuest } from "../../../../api/structures/IRedditCommunityGuest";

@Controller("/auth/guest/refresh")
export class AuthGuestRefreshController {
  /**
   * Refresh guest JWT access tokens in the redditCommunity platform.
   *
   * Refresh JWT access tokens for guest sessions using the provided refresh
   * token. Enables continued authorized access to public content without new
   * login.
   *
   * @param connection
   * @param body Refresh token payload with the token string.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshGuest(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IRedditCommunityGuest.IRefresh,
  ): Promise<IRedditCommunityGuest.IAuthorized> {
    try {
      return await postAuthGuestRefresh({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
