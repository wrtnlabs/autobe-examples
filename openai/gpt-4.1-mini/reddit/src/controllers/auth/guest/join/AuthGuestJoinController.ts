import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestJoin } from "../../../../providers/postAuthGuestJoin";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";

import { IRedditCommunityGuest } from "../../../../api/structures/IRedditCommunityGuest";

@Controller("/auth/guest/join")
export class AuthGuestJoinController {
  /**
   * Create a guest session user account in the redditCommunity platform stored
   * in the reddit_community_guests table.
   *
   * Creates a new guest session account representing an unauthenticated user
   * browsing the platform. Captures session ID, IP address, and optional user
   * agent information. Issues temporary authorization tokens for session
   * tracking and limited access to public content.
   *
   * It uses the `reddit_community_guests` table to maintain guest records for
   * auditing and session management. This operation does not require login
   * credentials.
   *
   * The response returns the authorized guest session information including JWT
   * tokens.
   *
   * Pre-executed by no prerequisites. Usually followed by token refresh to
   * maintain session.
   *
   * @param connection
   * @param body Guest registration data including session tracking identifiers
   *   and client metadata.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinGuest(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IRedditCommunityGuest.ICreate,
  ): Promise<IRedditCommunityGuest.IAuthorized> {
    try {
      return await postAuthGuestJoin({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
