import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCommunityModeratorLogin } from "../../../../providers/postAuthCommunityModeratorLogin";

import { IRedditCommunityCommunityModerator } from "../../../../api/structures/IRedditCommunityCommunityModerator";

@Controller("/auth/communityModerator/login")
export class AuthCommunitymoderatorLoginController {
  /**
   * Authenticate communityModerator user and issue JWT tokens for access.
   *
   * Authenticate a communityModerator user by validating email and password.
   *
   * Uses `reddit_community_members` table for member data verification.
   *
   * Issues JWT tokens upon successful authentication.
   *
   * Requires valid, verified account email.
   *
   * Publicly accessible without prior authentication.
   *
   * Returns JWT tokens and authorized session data.
   *
   * Handles invalid credentials and unverified email errors.
   *
   * Supports full JWT token authentication lifecycle for the communityModerator
   * role.
   *
   * @param connection
   * @param body Login credentials including email and password for
   *   communityModerator user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginCommunityModerator(
    @TypedBody()
    body: IRedditCommunityCommunityModerator.ILogin,
  ): Promise<IRedditCommunityCommunityModerator.IAuthorized> {
    try {
      return await postAuthCommunityModeratorLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
