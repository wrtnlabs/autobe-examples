import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCommunityModeratorJoin } from "../../../../providers/postAuthCommunityModeratorJoin";

import { IRedditCommunityCommunityModerator } from "../../../../api/structures/IRedditCommunityCommunityModerator";

@Controller("/auth/communityModerator/join")
export class AuthCommunitymoderatorJoinController {
  /**
   * Register a new communityModerator user with email and password to create
   * member account.
   *
   * API operation for communityModerator user registration (join) on
   * redditCommunity platform.
   *
   * Uses schema `reddit_community_members` for user data storage including
   * email, password hash, and email verification status.
   *
   * When called, creates a new member record, sets email verification flag to
   * false, and issues JWT tokens.
   *
   * No prior authentication is needed as it is a public registration endpoint.
   *
   * Security is enforced via password hashing and email uniqueness constraints.
   *
   * Complements login and refresh token operations.
   *
   * Errors returned if email already exists or validation fails.
   *
   * Returns a JWT authorized response type with token info specific to
   * communityModerator role.
   *
   * @param connection
   * @param body Information required to create a new communityModerator user
   *   account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinCommunityModerator(
    @TypedBody()
    body: IRedditCommunityCommunityModerator.IJoin,
  ): Promise<IRedditCommunityCommunityModerator.IAuthorized> {
    try {
      return await postAuthCommunityModeratorJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
