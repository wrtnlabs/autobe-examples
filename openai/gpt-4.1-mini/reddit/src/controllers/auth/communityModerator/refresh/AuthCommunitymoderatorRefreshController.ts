import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCommunityModeratorRefresh } from "../../../../providers/postAuthCommunityModeratorRefresh";

import { IRedditCommunityCommunityModerator } from "../../../../api/structures/IRedditCommunityCommunityModerator";

@Controller("/auth/communityModerator/refresh")
export class AuthCommunitymoderatorRefreshController {
  /**
   * Renew access and refresh JWT tokens for communityModerator user session.
   *
   * Refresh JWT tokens for authenticated communityModerator user by validating
   * provided refresh token.
   *
   * Maintains session continuity without full re-authentication.
   *
   * Secures token lifecycle within the redditCommunity platform.
   *
   * Returns new access and refresh JWT tokens encapsulated in authorized
   * response.
   *
   * Errors returned for invalid or expired tokens.
   *
   * Implements token renewal flow specifically for communityModerator role.
   *
   * @param connection
   * @param body Token refresh request containing valid refresh token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshCommunityModeratorTokens(
    @TypedBody()
    body: IRedditCommunityCommunityModerator.IRefresh,
  ): Promise<IRedditCommunityCommunityModerator.IAuthorized> {
    try {
      return await postAuthCommunityModeratorRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
