import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { IRedditCommunityAdmin } from "../../../api/structures/IRedditCommunityAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register new admin user and issue authentication tokens using
   * reddit_community_admins table.
   *
   * This operation allows clients to create a new admin account by providing
   * required credentials such as email and password. It persists a new admin
   * entity in the database using the reddit_community_admins table, ensuring
   * unique email addresses through schema constraints. Upon successful
   * registration, the system generates JWT access and refresh tokens for the
   * admin user, encapsulated in the response type
   * IRedditCommunityAdmin.IAuthorized. This approach enforces registration
   * security and initializes authentication workflows for system
   * administrators.
   *
   * The operation strictly relies on the reddit_community_admins schema,
   * validating email uniqueness and password hash security. It excludes any
   * soft deletion considerations during creation and expects normal lifecycle
   * timestamps to be assigned post-creation.
   *
   * As part of the admin user role, this operation is publicly accessible
   * without authentication to enable new administrative accounts to be set up.
   * Related authentication endpoints include login and token refresh for full
   * admin access management.
   *
   * @param connection
   * @param body Admin registration data including unique email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityAdmin.ICreate,
  ): Promise<IRedditCommunityAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin login via email and password authentication, returning JWT tokens
   * using reddit_community_admins schema.
   *
   * Authenticate an admin user by verifying email and password credentials
   * against the reddit_community_admins table. Upon successful credentials
   * validation, issue JWT access and refresh tokens encapsulated in the
   * response type IRedditCommunityAdmin.IAuthorized. This operation enables
   * admin users to securely authenticate and manage sessions.
   *
   * Unsuccessful attempts should return appropriate authentication failure
   * responses as defined in API error handling conventions.
   *
   * This operation is public and does not require pre-existing authentication
   * tokens to execute. It is a crucial component of the admin authentication
   * workflow.
   *
   * @param connection
   * @param body Admin login credentials including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityAdmin.ILogin,
  ): Promise<IRedditCommunityAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for admin users via refresh token validation.
   *
   * Refresh JWT tokens for an admin user using a valid refresh token. This
   * operation validates the refresh token's authenticity and expiry, generating
   * new access tokens encapsulated in IRedditCommunityAdmin.IAuthorized. It
   * maintains user session security without requiring full re-login.
   *
   * The operation interacts with the reddit_community_admins table to verify
   * user status and token validity. The refresh endpoint is publicly accessible
   * but requires a valid refresh token.
   *
   * It is a critical part of the authentication lifecycle, supporting seamless
   * token renewal for admins.
   *
   * @param connection
   * @param body Refresh token request for admin user session renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityAdmin.IRefresh,
  ): Promise<IRedditCommunityAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
