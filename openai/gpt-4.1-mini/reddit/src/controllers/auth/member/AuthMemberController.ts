import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberJoin } from "../../../providers/postAuthMemberJoin";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";
import { postAuthMemberLogin } from "../../../providers/postAuthMemberLogin";
import { postAuthMemberRefresh } from "../../../providers/postAuthMemberRefresh";

import { IRedditCommunityMember } from "../../../api/structures/IRedditCommunityMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Register a new member account using the reddit_community_members table.
   *
   * Register a new member account with email and password to create a verified
   * user account in the redditCommunity platform. It uses the
   * 'reddit_community_members' table storing user identification,
   * authentication, and verification status. Passwords are securely hashed and
   * emails must be unique. The operation issues JWT tokens upon successful
   * registration allowing immediate authenticated access.
   *
   * Security measures ensure registration data validity and prevention of
   * duplicate accounts. It is a public endpoint allowing guest access to create
   * new member accounts.
   *
   * Related operations include login, refresh token, and password reset APIs
   * for complete authentication lifecycle management.
   *
   * @param connection
   * @param body Registration information for a new member account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IRedditCommunityMember.ICreate,
  ): Promise<IRedditCommunityMember.IAuthorized> {
    try {
      return await postAuthMemberJoin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a member user and issue JWT tokens.
   *
   * Authenticate an existing member user by validating email and password
   * credentials stored in the 'reddit_community_members' table. Successful
   * authentication issues JWT tokens for session management.
   *
   * Security checks include password hash verification and email verification
   * confirmation. Unverified users are denied access.
   *
   * This endpoint is public and supports the main login authentication flow for
   * member users.
   *
   * Related operations include registration and token refresh endpoints.
   *
   * @param connection
   * @param body Login credentials for member authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IRedditCommunityMember.ILogin,
  ): Promise<IRedditCommunityMember.IAuthorized> {
    try {
      return await postAuthMemberLogin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for a member user.
   *
   * Refresh JWT access token for authenticated member users using a valid
   * refresh token. Validates token authenticity and issues new tokens to
   * prolong session without re-login.
   *
   * This operation secures session continuity and is an integral part of member
   * authentication lifecycle.
   *
   * Related operations include join and login to complete authentication flow.
   *
   * @param connection
   * @param body Refresh token request for member authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IRedditCommunityMember.IRefresh,
  ): Promise<IRedditCommunityMember.IAuthorized> {
    try {
      return await postAuthMemberRefresh({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
