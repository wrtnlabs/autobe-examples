import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityAdminReportStatuses } from "../../../../providers/postRedditCommunityAdminReportStatuses";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putRedditCommunityAdminReportStatusesStatusId } from "../../../../providers/putRedditCommunityAdminReportStatusesStatusId";
import { deleteRedditCommunityAdminReportStatusesStatusId } from "../../../../providers/deleteRedditCommunityAdminReportStatusesStatusId";

import { IRedditCommunityReportStatus } from "../../../../api/structures/IRedditCommunityReportStatus";

@Controller("/redditCommunity/admin/reportStatuses")
export class RedditcommunityAdminReportstatusesController {
  /**
   * Create a new report status entity in the reddit_community_report_statuses
   * table.
   *
   * Create a new report status for categorizing and tracking user reports
   * within the redditCommunity platform.
   *
   * This operation allows authorized administrators to define new report
   * statuses such as 'pending', 'reviewed', or 'action taken' with an optional
   * description.
   *
   * Security considerations include restricting this operation to admin roles
   * only. Missing or duplicate status names will result in validation errors.
   *
   * The operation maps directly to the reddit_community_report_statuses
   * database table, respecting unique constraints on the status name.
   *
   * On success, the newly created report status record will be returned.
   *
   * Typical related operations include updating existing report statuses and
   * listing report statuses for moderation workflows.
   *
   * Errors will be reported for invalid input, unauthorized access, or database
   * constraint violations.
   *
   * @param connection
   * @param body With the properties: - name: Unique report status name -
   *   description: Optional description of the report status - created_at,
   *   updated_at: timestamps for creation and last update handled by the system
   *   automatically
   *
   *             Request body type: IRedditCommunityReportStatus.ICreate
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityReportStatus.ICreate,
  ): Promise<IRedditCommunityReportStatus> {
    try {
      return await postRedditCommunityAdminReportStatuses({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update report status entity by statusId in
   * reddit_community_report_statuses.
   *
   * Update an existing report status entity identified by its statusId in the
   * reddit_community_report_statuses table.
   *
   * Only authorized administrators can perform updates to ensure system
   * integrity.
   *
   * The operation requires a valid UUID path parameter representing the target
   * report status ID and a request body specifying modifiable fields such as
   * name and description.
   *
   * Unique constraints on the name are enforced by the system during update.
   *
   * The response returns the updated report status object.
   *
   * Error handling accommodates invalid identifiers, conflicting names, and
   * unauthorized access attempts.
   *
   * @param connection
   * @param statusId Unique identifier of the report status to update
   * @param body Properties for updating a report status such as name and
   *   description, using IRedditCommunityReportStatus.IUpdate DTO
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":statusId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityReportStatus.IUpdate,
  ): Promise<IRedditCommunityReportStatus> {
    try {
      return await putRedditCommunityAdminReportStatusesStatusId({
        admin,
        statusId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a report status by its unique identifier.
   *
   * This API operation deletes a specific report status from the
   * redditCommunity platform's report status lookup table.
   *
   * The report status entity defines possible states of content reports such as
   * pending, reviewed, or action taken. This deletion permanently removes the
   * status identified by statusId.
   *
   * Only authorized admin users are permitted to perform this operation due to
   * the sensitive nature of modifying system-wide status definitions.
   *
   * The status to be deleted must exist and not be referenced by active reports
   * to avoid referential integrity issues.
   *
   * If the status does not exist or is currently in use, appropriate error
   * responses will be returned.
   *
   * No request body is needed as the statusId is specified as a path parameter.
   *
   * This operation adheres to strict RESTful conventions for resource deletion
   * and follows the Prisma schema definitions for report statuses.
   *
   * @param connection
   * @param statusId Unique identifier of the report status to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":statusId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminReportStatusesStatusId({
        admin,
        statusId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
