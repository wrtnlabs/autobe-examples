import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityAdminCommunitiesCommunityIdCommunityModerators } from "../../../../../providers/postRedditCommunityAdminCommunitiesCommunityIdCommunityModerators";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchRedditCommunityAdminCommunitiesCommunityIdCommunityModerators } from "../../../../../providers/patchRedditCommunityAdminCommunitiesCommunityIdCommunityModerators";
import { getRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId } from "../../../../../providers/getRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId";
import { putRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId } from "../../../../../providers/putRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId";
import { deleteRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId } from "../../../../../providers/deleteRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId";

import { IRedditCommunityCommunityModerator } from "../../../../../api/structures/IRedditCommunityCommunityModerator";
import { IPageIRedditCommunityCommunityModerator } from "../../../../../api/structures/IPageIRedditCommunityCommunityModerator";
import { IRedditCommunityCommunityModerators } from "../../../../../api/structures/IRedditCommunityCommunityModerators";

@Controller(
  "/redditCommunity/admin/communities/:communityId/communityModerators",
)
export class RedditcommunityAdminCommunitiesCommunitymoderatorsController {
  /**
   * Create a new community moderator assignment.
   *
   * Assign a member as a community moderator for a specific community.
   *
   * This operation creates a new record in the
   * reddit_community_community_moderators table associating a community member
   * as a moderator for a given community. It includes fields such as member ID,
   * community ID, and the timestamp when the assignment was made.
   *
   * Authorization Roles: Only users with administrative privileges can assign
   * community moderators to maintain controlled access.
   *
   * Request Body: The request body must include member_id and community_id to
   * define the new moderator relationship.
   *
   * Behavior:
   *
   * - Validates that the member and community exist.
   * - Creates the new moderator record with timestamps automatically set.
   * - Does not return a response body.
   *
   * Errors:
   *
   * - Returns an error if the assignment already exists or if provided IDs are
   *   invalid.
   *
   * @param connection
   * @param communityId Unique identifier of the community where moderator will
   *   be assigned
   * @param body Information to create a new community moderator assignment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunityModerator.ICreate,
  ): Promise<void> {
    try {
      return await postRedditCommunityAdminCommunitiesCommunityIdCommunityModerators(
        {
          admin,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve community moderators of a redditCommunity community.
   *
   * Retrieve a paginated list of moderators for a specific redditCommunity
   * community. The community is specified by the 'communityId' path parameter.
   *
   * This operation supports advanced search and filtering through request body
   * parameters defined in 'IRedditCommunityCommunityModerator.IRequest'. It
   * returns a paginated response of community moderator summaries.
   *
   * Access to this API is restricted to admin users or appropriate community
   * management roles to ensure security.
   *
   * Clients should utilize this endpoint to display or manage moderators for a
   * given community within admin dashboards or community control panels.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param body Search criteria and pagination parameters for community
   *   moderators filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCommunityModerators(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunityModerator.IRequest,
  ): Promise<IPageIRedditCommunityCommunityModerator.ISummary> {
    try {
      return await patchRedditCommunityAdminCommunitiesCommunityIdCommunityModerators(
        {
          admin,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific community moderator by ID.
   *
   * Retrieve detailed information about a community moderator within a specific
   * community by their unique identifier.
   *
   * This operation accesses the reddit_community_community_moderators table,
   * where moderators are linked to communities and users (members). It includes
   * information such as the moderator's member ID, community ID, assignment
   * date, and auditing timestamps.
   *
   * Authorization Roles: This endpoint is accessible to users with
   * administrative privileges and community moderators themselves. Ensuring
   * security, only authorized users can access moderation details.
   *
   * Parameters:
   *
   * - CommunityId: The unique identifier of the community where the moderator
   *   serves.
   * - ModeratorId: The unique identifier of the moderator within that community.
   *
   * Behavior:
   *
   * - Returns the community moderator record if found and accessible.
   * - If the moderator or community does not exist, an appropriate error is
   *   returned.
   * - No request body is required.
   * - The response returns the full community moderator data as per the
   *   reddit_community_community_moderators Prisma model.
   *
   * @param connection
   * @param communityId Unique identifier of the community
   * @param moderatorId Unique identifier of the community moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderatorId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityCommunityModerator> {
    try {
      return await getRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId(
        {
          admin,
          communityId,
          moderatorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a community moderator by ID within a community.
   *
   * Update a community moderator by community ID and moderator ID.
   *
   * This API endpoint allows modifying the assignment details of a moderator
   * who belongs to a particular community. This operation strictly works on the
   * reddit_community_community_moderators table.
   *
   * Security guidelines dictate that only users with the admin or community
   * moderator roles have permission to perform this update. The communityId and
   * moderatorId must be valid UUIDs corresponding to existing records.
   *
   * The request body adheres to the IRedditCommunityCommunityModerators.IUpdate
   * schema, permitting updates like the assigned_at timestamp.
   *
   * If the specified moderator exists, their record is updated accordingly and
   * returned; otherwise, a not found error is returned.
   *
   * No deletion or status alteration occurs in this operation, only updates.
   *
   * @param connection
   * @param communityId Target community's ID
   * @param moderatorId Target moderator's ID
   * @param body Update data for the community moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderatorId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunityModerators.IUpdate,
  ): Promise<IRedditCommunityCommunityModerators> {
    try {
      return await putRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId(
        {
          admin,
          communityId,
          moderatorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community moderator assignment.
   *
   * Delete a community moderator by community ID and moderator ID.
   *
   * This API endpoint securely deletes the moderator relationship between a
   * member and a community, effectively revoking their moderator status. It
   * targets the reddit_community_community_moderators table.
   *
   * Authorization is limited to admin and communityModerator roles. Path
   * parameters communityId and moderatorId must be valid UUIDs.
   *
   * This is a hard delete operation; no response content is returned.
   *
   * Clients should handle potential errors such as non-existing records
   * gracefully.
   *
   * @param connection
   * @param communityId Target community's ID
   * @param moderatorId Target moderator's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderatorId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminCommunitiesCommunityIdCommunityModeratorsModeratorId(
        {
          admin,
          communityId,
          moderatorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
