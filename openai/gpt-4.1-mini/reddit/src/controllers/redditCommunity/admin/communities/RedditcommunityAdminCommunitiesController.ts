import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteRedditCommunityAdminCommunitiesCommunityId } from "../../../../providers/deleteRedditCommunityAdminCommunitiesCommunityId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/redditCommunity/admin/communities/:communityId")
export class RedditcommunityAdminCommunitiesController {
  /**
   * Delete a specific redditCommunity community.
   *
   * This API endpoint deletes a specific community permanently from the system
   * database. It requires the unique community identifier as a path parameter.
   * When invoked, it will delete the corresponding record from the
   * 'reddit_community_communities' table, including cascading deletion of
   * related posts, moderators, and subscriptions.
   *
   * Authorization is critical; only users with admin privileges or community
   * management rights may execute this operation. The deletion is irreversible,
   * and all associated data linked via cascade rules will also be removed,
   * ensuring database consistency.
   *
   * Use this API when a community must be completely removed, for example, due
   * to policy violations or community dissolution. Clients should handle error
   * responses for non-existent community IDs or authorization failures
   * properly.
   *
   * @param connection
   * @param communityId Unique identifier of the target community to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseCommunity(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminCommunitiesCommunityId({
        admin,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
