import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteRedditCommunityAdminCommunitiesCommunityIdPostsPostId } from "../../../../../providers/deleteRedditCommunityAdminCommunitiesCommunityIdPostsPostId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

@Controller("/redditCommunity/admin/communities/:communityId/posts/:postId")
export class RedditcommunityAdminCommunitiesPostsController {
  /**
   * Permanently delete a post from a community.
   *
   * Permanently deletes the post identified by the postId within the context of
   * the specified communityId.
   *
   * The operation ensures data integrity by cascading deletions to related
   * votes and comments associated with the post. Only authorized users such as
   * the post author (member role), community moderators for the associated
   * community, or admins may perform this operation.
   *
   * There is no request body for this operation.
   *
   * No content is returned in the response after successful deletion.
   *
   * Errors may be returned if the community or post does not exist, or if the
   * user lacks proper authorization.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param postId Unique identifier of the post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminCommunitiesCommunityIdPostsPostId({
        admin,
        communityId,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
