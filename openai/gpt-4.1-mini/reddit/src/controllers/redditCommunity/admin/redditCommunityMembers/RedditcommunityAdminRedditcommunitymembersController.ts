import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityAdminRedditCommunityMembers } from "../../../../providers/patchRedditCommunityAdminRedditCommunityMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getRedditCommunityAdminRedditCommunityMembersId } from "../../../../providers/getRedditCommunityAdminRedditCommunityMembersId";
import { putRedditCommunityAdminRedditCommunityMembersId } from "../../../../providers/putRedditCommunityAdminRedditCommunityMembersId";
import { deleteRedditCommunityAdminRedditCommunityMembersId } from "../../../../providers/deleteRedditCommunityAdminRedditCommunityMembersId";

import { IPageIRedditCommunityMember } from "../../../../api/structures/IPageIRedditCommunityMember";
import { IRedditCommunityMember } from "../../../../api/structures/IRedditCommunityMember";

@Controller("/redditCommunity/admin/redditCommunityMembers")
export class RedditcommunityAdminRedditcommunitymembersController {
  /**
   * Search and retrieve a filtered, paginated list of reddit community members.
   *
   * Retrieve and search through reddit community members with filtering,
   * pagination, and sorting capabilities.
   *
   * This operation enables clients to specify detailed search criteria such as
   * filtering by email, verification status, and creation date ranges, allowing
   * efficient querying of member accounts. The query supports pagination for
   * manageable data retrieval and sorts results to meet various viewing
   * requirements.
   *
   * Security considerations include restricting access to admin and moderator
   * roles to protect sensitive member information. Unauthorized users cannot
   * perform this operation.
   *
   * The operation interacts directly with the reddit_community_members table in
   * the database, which stores member authentication and account status
   * details. It filters results based on the existing fields such as email,
   * is_email_verified, and timestamps.
   *
   * Validation rules include ensuring supplied filter parameters conform to
   * valid formats such as correct email patterns and ISO date-time standards.
   *
   * Related operations include retrieving single member details (`GET
   * /redditCommunityMembers/{id}`) and member account management endpoints.
   *
   * Error handling covers invalid filter parameters, unauthorized access, and
   * general server errors.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for reddit community
   *   members filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityMember.IRequest,
  ): Promise<IPageIRedditCommunityMember.ISummary> {
    try {
      return await patchRedditCommunityAdminRedditCommunityMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a reddit community member by ID.
   *
   * Retrieve detailed information of a single reddit community member by unique
   * ID.
   *
   * Provides full member data such as email, verification status, timestamps,
   * and deletion status retrieved from the reddit_community_members database
   * table.
   *
   * Access is restricted to admin and communityModerator roles to protect
   * member privacy and administrative functions.
   *
   * Returns a single redditCommunityMember entity with all relevant fields for
   * management and auditing purposes.
   *
   * @param connection
   * @param id Unique identifier of the target reddit community member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityMember> {
    try {
      return await getRedditCommunityAdminRedditCommunityMembersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update redditCommunityMember information by ID.
   *
   * Update an existing redditCommunityMember's information. This includes
   * updating the email (which must remain unique across all members), password
   * hash for authentication, email verification status, and optionally marking
   * the account as deleted via a soft deletion timestamp.
   *
   * This operation applies to the "reddit_community_members" table in the
   * Prisma schema. The system automatically manages createdAt and updatedAt
   * timestamps.
   *
   * Only authenticated users with appropriate roles can perform this update.
   * The operation validates unique email constraints and ensures password
   * hashes meet security policies.
   *
   * If the member with the specified ID does not exist, an error will be
   * returned. This operation returns no content but confirms success through
   * HTTP status.
   *
   * Authorization roles: member, communityModerator, admin.
   *
   * @param connection
   * @param id Unique identifier of the redditCommunityMember to update
   * @param body Payload containing fields to update in redditCommunityMember
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityMember.IUpdate,
  ): Promise<void> {
    try {
      return await putRedditCommunityAdminRedditCommunityMembersId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete redditCommunityMember by ID.
   *
   * Permanently delete a redditCommunityMember from the
   * "reddit_community_members" table by their unique identifier.
   *
   * This is a hard delete operation that removes the member and all associated
   * data such as posts, comments, votes, karma records, and community
   * subscriptions.
   *
   * This operation should only be executed by authorized roles such as the
   * member themselves or an administrator due to its impact on the system.
   *
   * No response body is returned. Errors are returned if the member does not
   * exist or if the caller lacks authorization.
   *
   * Authorization roles: member, communityModerator, admin.
   *
   * @param connection
   * @param id Unique identifier of the redditCommunityMember to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminRedditCommunityMembersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
