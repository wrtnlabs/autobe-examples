import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityAdminRedditCommunityCommunityModerators } from "../../../../providers/patchRedditCommunityAdminRedditCommunityCommunityModerators";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getRedditCommunityAdminRedditCommunityCommunityModeratorsId } from "../../../../providers/getRedditCommunityAdminRedditCommunityCommunityModeratorsId";
import { putRedditCommunityAdminRedditCommunityCommunityModeratorsId } from "../../../../providers/putRedditCommunityAdminRedditCommunityCommunityModeratorsId";
import { deleteRedditCommunityAdminRedditCommunityCommunityModeratorsId } from "../../../../providers/deleteRedditCommunityAdminRedditCommunityCommunityModeratorsId";

import { IPageIRedditCommunityCommunityModerators } from "../../../../api/structures/IPageIRedditCommunityCommunityModerators";
import { IRedditCommunityCommunityModerators } from "../../../../api/structures/IRedditCommunityCommunityModerators";
import { IRedditCommunityCommunityModerator } from "../../../../api/structures/IRedditCommunityCommunityModerator";

@Controller("/redditCommunity/admin/redditCommunityCommunityModerators")
export class RedditcommunityAdminRedditcommunitycommunitymoderatorsController {
  /**
   * Search and retrieve a filtered, paginated list of redditCommunity community
   * moderators.
   *
   * Retrieve a filtered and paginated list of redditCommunity community
   * moderators from the system. This operation allows clients to query
   * moderators assigned to various communities with capabilities to filter and
   * sort results based on member IDs, community IDs, and assignment
   * timestamps.
   *
   * Security considerations restrict this operation to administrative users or
   * community personnel with sufficient privileges to view moderation
   * assignments. Unauthorized users should not access detailed moderator data.
   *
   * This operation maps to the reddit_community_community_moderators table in
   * the Prisma schema. The moderators represent members (users) assigned
   * moderation roles within communities, including the timestamp they were
   * assigned. The response includes key identifiers and timestamps useful for
   * management and auditing.
   *
   * Validation rules require the request body to include pagination parameters
   * and optional filters. The response returns corresponding moderator
   * summaries with paging information.
   *
   * Related operations include retrieval of individual moderators by ID,
   * creation, updating, and deletion of moderator assignments.
   *
   * Errors related to invalid filters, pagination parameters, or access
   * violations are handled explicitly in the API implementation.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for redditCommunity
   *   community moderator filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityCommunityModerators.IRequest,
  ): Promise<IPageIRedditCommunityCommunityModerators.ISummary> {
    try {
      return await patchRedditCommunityAdminRedditCommunityCommunityModerators({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a redditCommunity community moderator by
   * ID.
   *
   * Retrieve detailed information for a specific redditCommunity community
   * moderator by ID. This includes all related fields from the community
   * moderators table, such as member ID, community ID, assigned timestamp, and
   * audit fields.
   *
   * Access to this data is restricted to administrators or authorized community
   * staff. The operation validates existence of the moderator and returns
   * detailed data or an appropriate error if not found.
   *
   * This operation facilitates management of moderation roles within the
   * platform and complements operations for managing moderator assignments.
   *
   * @param connection
   * @param id Unique identifier of the target redditCommunity community
   *   moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityCommunityModerators> {
    try {
      return await getRedditCommunityAdminRedditCommunityCommunityModeratorsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a community moderator by ID.
   *
   * Update an existing community moderator's information by their unique ID.
   * This operation modifies properties such as the assigned_at timestamp, which
   * reflects when the member was assigned as a moderator for the community. It
   * ensures updated_at timestamp is also refreshed upon modification. Only
   * authorized roles can perform this update.
   *
   * This operation is directly associated with the
   * reddit_community_community_moderators table, which maps members to
   * communities with specific moderator roles. It impacts system authorization
   * logic regarding community management.
   *
   * Validation enforces the UUID format for the ID path parameter and ensures
   * request body data complies with the
   * IRedditCommunityCommunityModerator.IUpdate schema, reflecting possible
   * updates to the assigned_at and audit-related timestamps.
   *
   * Related operations include listing moderators, creating new moderator
   * assignments, and deleting existing ones. Proper error handling ensures
   * attempts to update non-existent records return meaningful errors.
   *
   * This operation requires authentication and appropriate authorization roles
   * such as community moderator or admin to perform changes.
   *
   * @param connection
   * @param id Unique identifier of the community moderator to update
   * @param body Information for updating a community moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunityModerator.IUpdate,
  ): Promise<IRedditCommunityCommunityModerator> {
    try {
      return await putRedditCommunityAdminRedditCommunityCommunityModeratorsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community moderator by ID, permanently removing their assignment
   * from a community. This operation completely removes the record from the
   * database and cannot be undone.
   *
   * It requires the unique UUID of the community moderator in the path
   * parameter.
   *
   * Authorization is restricted to roles such as admin and communityModerator.
   * Attempting to delete a non-existent ID will result in an error.
   *
   * This operation affects community moderation and user role management.
   *
   * @param connection
   * @param id Unique identifier of the community moderator to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminRedditCommunityCommunityModeratorsId(
        {
          admin,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
