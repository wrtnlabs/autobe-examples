import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityAdminReports } from "../../../../providers/patchRedditCommunityAdminReports";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getRedditCommunityAdminReportsReportId } from "../../../../providers/getRedditCommunityAdminReportsReportId";
import { putRedditCommunityAdminReportsReportId } from "../../../../providers/putRedditCommunityAdminReportsReportId";
import { deleteRedditCommunityAdminReportsReportId } from "../../../../providers/deleteRedditCommunityAdminReportsReportId";

import { IPageIRedditCommunityReport } from "../../../../api/structures/IPageIRedditCommunityReport";
import { IRedditCommunityReport } from "../../../../api/structures/IRedditCommunityReport";

@Controller("/redditCommunity/admin/reports")
export class RedditcommunityAdminReportsController {
  /**
   * Search and retrieve a paginated list of content reports.
   *
   * Retrieve a paginated list of content reports for moderation purposes. This
   * operation supports filtering by report status, category, and reported
   * entity types (post, comment, member), along with search by description
   * text.
   *
   * Access is restricted to community moderators and admins to protect
   * sensitive report data. The reports are stored in the
   * reddit_community_reports table, which links reporter and reported content,
   * report category, description, and status.
   *
   * The operation accepts complex search criteria and pagination parameters in
   * the request body and returns a paginated list of report summaries. Typical
   * errors include authentication failures and invalid filters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for report filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityReport.IRequest,
  ): Promise<IPageIRedditCommunityReport.ISummary> {
    try {
      return await patchRedditCommunityAdminReports({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific content report by its unique
   * identifier.
   *
   * Access restricted to community moderators and admins to ensure
   * confidentiality and proper moderation.
   *
   * Returns full report data including linked reporter info, reported content,
   * report status, and timestamps.
   *
   * If the report ID does not exist, returns a 404 error.
   *
   * @param connection
   * @param reportId Unique identifier of the target content report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityReport> {
    try {
      return await getRedditCommunityAdminReportsReportId({
        admin,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a content moderation report by ID.
   *
   * Update details of an existing content report identified by its ID. Changes
   * may include updating the report status, category, or description to reflect
   * moderation review progress.
   *
   * Only authorized users such as community moderators or admins can perform
   * updates. The operation validates the provided report ID path parameter and
   * request body data to ensure consistency.
   *
   * Proper error handling occurs if the report ID does not exist or the user
   * lacks permissions.
   *
   * This operation is essential for managing report lifecycles and
   * collaborating among moderation teams.
   *
   * @param connection
   * @param reportId Unique identifier of the report to update
   * @param body Updated report data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityReport.IUpdate,
  ): Promise<IRedditCommunityReport> {
    try {
      return await putRedditCommunityAdminReportsReportId({
        admin,
        reportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a report by ID.
   *
   * Delete a report from the system by its unique identifier.
   *
   * This operation permanently removes the report record from the database,
   * including its associations with reporter guests or members and the reported
   * post, comment, or member. It is a hard delete and cannot be reversed.
   *
   * Authorization is required to ensure only users with appropriate permissions
   * can delete reports, such as admins or community moderators.
   *
   * No request body is needed as the operation only requires the reportId to be
   * specified in the path.
   *
   * No response body is returned upon successful deletion. Errors may be
   * returned if the report does not exist or access is unauthorized.
   *
   * @param connection
   * @param reportId Unique identifier of the report to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reportId")
  public async eraseReportById(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminReportsReportId({
        admin,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
