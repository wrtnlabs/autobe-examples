import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityAdminReportsReportIdReportActions } from "../../../../../providers/postRedditCommunityAdminReportsReportIdReportActions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchRedditCommunityAdminReportsReportIdReportActions } from "../../../../../providers/patchRedditCommunityAdminReportsReportIdReportActions";
import { getRedditCommunityAdminReportsReportIdReportActionsActionId } from "../../../../../providers/getRedditCommunityAdminReportsReportIdReportActionsActionId";
import { putRedditCommunityAdminReportsReportIdReportActionsActionId } from "../../../../../providers/putRedditCommunityAdminReportsReportIdReportActionsActionId";
import { deleteRedditCommunityAdminReportsReportIdReportActionsActionId } from "../../../../../providers/deleteRedditCommunityAdminReportsReportIdReportActionsActionId";

import { IRedditCommunityReportAction } from "../../../../../api/structures/IRedditCommunityReportAction";
import { IPageIRedditCommunityReportAction } from "../../../../../api/structures/IPageIRedditCommunityReportAction";

@Controller("/redditCommunity/admin/reports/:reportId/reportActions")
export class RedditcommunityAdminReportsReportactionsController {
  /**
   * Create a new report action for a report.
   *
   * This operation allows authorized community moderators or admins to create a
   * new moderation action record linked to a specific report. The operation
   * inserts a new record into reddit_community_report_actions with required
   * fields including report ID, moderator member ID, action type, and optional
   * admin member ID and notes.
   *
   * This facilitates tracking of moderation decisions, warnings, deletions, or
   * other administrative activities assigned to reports.
   *
   * The associated request body must comply with the
   * IRedditCommunityReportAction.ICreate schema, ensuring all required fields
   * are provided.
   *
   * This operation ensures recorded moderation actions are auditable and
   * properly linked to users performing them.
   *
   * @param connection
   * @param reportId Unique identifier of the target report to link the new
   *   action
   * @param body Information for creating a new report action linked to a report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityReportAction.ICreate,
  ): Promise<IRedditCommunityReportAction> {
    try {
      return await postRedditCommunityAdminReportsReportIdReportActions({
        admin,
        reportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List moderation actions for a report.
   *
   * Retrieve a paginated list of moderation actions linked to a specific
   * report.
   *
   * This operation supports filtering, sorting, and pagination parameters in
   * the request body to efficiently query report actions.
   *
   * Authorized users (admins, community moderators) can view all moderation
   * actions taken on the report, including action types, notes, timestamps, and
   * involved users.
   *
   * The response includes detailed metadata of each moderation action,
   * facilitating moderation review and audit.
   *
   * Errors may be returned for invalid reportId or unauthorized access.
   *
   * @param connection
   * @param reportId Unique identifier of the report
   * @param body Pagination, sorting, and filtering parameters for report
   *   actions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchReportActionsByReportId(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityReportAction.IRequest,
  ): Promise<IPageIRedditCommunityReportAction> {
    try {
      return await patchRedditCommunityAdminReportsReportIdReportActions({
        admin,
        reportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific report action by ID for a report.
   *
   * This operation fetches detailed information about a single moderation
   * action performed on a report in redditCommunity. It returns the record
   * identified by the specified report ID and report action ID. The action
   * includes data about which community moderator or admin performed the
   * action, the type of action taken, timestamps, and optional notes.
   *
   * Only authorized community moderators and admins may access this operation
   * due to the sensitive nature of moderation actions. It ensures secure
   * retrieval of detailed moderation activity linked to content reporting.
   *
   * This operation corresponds to the reddit_community_report_actions table in
   * the Prisma schema.
   *
   * @param connection
   * @param reportId Unique identifier of the target report
   * @param actionId Unique identifier of the report action to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":actionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedParam("actionId")
    actionId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityReportAction> {
    try {
      return await getRedditCommunityAdminReportsReportIdReportActionsActionId({
        admin,
        reportId,
        actionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific moderation report action.
   *
   * Update a specific moderation action linked to a user report in the
   * redditCommunity platform. This operation updates the action_type, notes,
   * and timestamps of the report action record identified by reportId and
   * actionId.
   *
   * This API requires proper authorization, typically limited to community
   * moderators or admins with management privileges. The operation aligns with
   * the reddit_community_report_actions table, ensuring referential integrity
   * with reports, moderators, and admins.
   *
   * Validation rules enforce that the action_type field is provided and
   * meaningful, while notes are optional free text. The system maintains
   * created_at and updated_at timestamps to track the lifecycle of moderation
   * actions.
   *
   * Typical uses include recording changes to moderation action details, adding
   * notes for audit purposes, or correcting action types post initial
   * recording.
   *
   * This operation requires input of the action update details in the request
   * body and path parameters specifying the targeted report and action ids. It
   * produces the updated report action entity in response.
   *
   * @param connection
   * @param reportId Target report ID containing the action
   * @param actionId Target action ID to update
   * @param body Details for updating the report action
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":actionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedParam("actionId")
    actionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityReportAction.IUpdate,
  ): Promise<IRedditCommunityReportAction> {
    try {
      return await putRedditCommunityAdminReportsReportIdReportActionsActionId({
        admin,
        reportId,
        actionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific moderation report action linked to a user report in the
   * redditCommunity platform. This operation permanently removes the report
   * action record identified by reportId and actionId.
   *
   * This API requires authorization for community moderators or admins with
   * privileges to manage moderation actions.
   *
   * Upon success, no response body is returned.
   *
   * Errors occur if the specified report action does not exist.
   *
   * @param connection
   * @param reportId Target report ID containing the action
   * @param actionId Target action ID to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":actionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedParam("actionId")
    actionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminReportsReportIdReportActionsActionId(
        {
          admin,
          reportId,
          actionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
