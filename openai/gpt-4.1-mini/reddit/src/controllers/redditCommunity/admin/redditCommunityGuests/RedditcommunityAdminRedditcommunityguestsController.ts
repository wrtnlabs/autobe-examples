import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityAdminRedditCommunityGuests } from "../../../../providers/patchRedditCommunityAdminRedditCommunityGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getRedditCommunityAdminRedditCommunityGuestsId } from "../../../../providers/getRedditCommunityAdminRedditCommunityGuestsId";
import { putRedditCommunityAdminRedditCommunityGuestsId } from "../../../../providers/putRedditCommunityAdminRedditCommunityGuestsId";

import { IPageIRedditCommunityGuest } from "../../../../api/structures/IPageIRedditCommunityGuest";
import { IRedditCommunityGuest } from "../../../../api/structures/IRedditCommunityGuest";

@Controller("/redditCommunity/admin/redditCommunityGuests")
export class RedditcommunityAdminRedditcommunityguestsController {
  /**
   * Search and retrieve paginated summary of redditCommunity guests.
   *
   * This operation provides the capability to search and retrieve a paginated
   * list of redditCommunity guests from the system. Guests represent
   * unauthenticated visitors who have session tracking within the platform.
   *
   * The operation accepts search criteria including session identifiers, IP
   * addresses, and creation dates to filter guests appropriately. It also
   * supports pagination and sorting to efficiently handle potentially large
   * datasets.
   *
   * Security considerations include restricting access to this operation to
   * administrative roles only due to the potentially sensitive nature of guest
   * session data. Public or regular user access is not permitted.
   *
   * This operation connects to the reddit_community_guests database table as
   * defined in the Prisma schema. It returns summarized guest records including
   * session_id and IP address but excludes sensitive user agent details unless
   * authorized.
   *
   * Clients can use this to monitor guest activity, security auditing, and
   * performance analysis. The implementation must ensure compliance with data
   * privacy standards when handling user agent and IP information.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for redditCommunity
   *   guests
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityGuest.IRequest,
  ): Promise<IPageIRedditCommunityGuest.ISummary> {
    try {
      return await patchRedditCommunityAdminRedditCommunityGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed redditCommunity guest info by ID.
   *
   * Retrieve detailed information of a specific redditCommunity guest by its
   * unique ID.
   *
   * Guests are unauthenticated users tracked via session_id and IP for security
   * monitoring and audit purposes.
   *
   * Access to this endpoint is restricted to admins to protect guest privacy
   * and data sensitivity.
   *
   * Response includes all guest details including session_id, ip_address,
   * user_agent, and timestamps.
   *
   * Errors will be returned if the specified ID does not exist or if access is
   * unauthorized.
   *
   * @param connection
   * @param id Unique identifier of the target redditCommunity guest
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityGuest> {
    try {
      return await getRedditCommunityAdminRedditCommunityGuestsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a redditCommunityGuest by ID.
   *
   * Update the redditCommunityGuest entity specified by the unique identifier.
   * This operation modifies guest-related session data such as session
   * identifier, IP address, and user agent string used to track unauthenticated
   * user activity.
   *
   * Security constraints imply only trusted system roles or services should
   * update guest data to maintain audit integrity. The guest entity is tied to
   * posts, comments, and reports authored anonymously.
   *
   * The update payload allows changing sessionId and ipAddress, and optionally
   * userAgent. CreatedAt and updatedAt are managed by the system and should not
   * be modified manually.
   *
   * This operation relates directly to the `reddit_community_guests` table in
   * the database, which enforces uniqueness on sessionId and has indexes on IP
   * address and creation timestamp.
   *
   * Inputs requiring validation:
   *
   * - Path parameter `id`: must be a valid UUID corresponding to an existing
   *   guest
   * - Request body: must comply with input schema for guest updates
   *
   * Expected errors include 404 for unknown guest ID, 400 for invalid input,
   * and 403 for unauthorized access.
   *
   * @param connection
   * @param id Unique identifier of the target guest
   * @param body Guest update data payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityGuest.IUpdate,
  ): Promise<IRedditCommunityGuest> {
    try {
      return await putRedditCommunityAdminRedditCommunityGuestsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
