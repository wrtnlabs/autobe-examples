import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditCommunityAdminPostsPostIdCommentsCommentId } from "../../../../../providers/getRedditCommunityAdminPostsPostIdCommentsCommentId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { postRedditCommunityAdminPostsPostIdComments } from "../../../../../providers/postRedditCommunityAdminPostsPostIdComments";

import { IRedditCommunityComment } from "../../../../../api/structures/IRedditCommunityComment";

@Controller("/redditCommunity/admin/posts/:postId/comments")
export class RedditcommunityAdminPostsCommentsController {
  /**
   * Retrieve detailed information for a specific comment on a post.
   *
   * This GET operation retrieves a specific comment from the redditCommunity
   * platform.
   *
   * The comment is identified uniquely by its ID and belongs to a post
   * identified by postId. The returned data includes the comment body text,
   * author information (which may be a member or guest), creation and last
   * updated timestamps, and soft deletion status.
   *
   * Security and permissions allow viewing by authenticated members, community
   * moderators within the post's community, and administrators. Authorization
   * checks should verify the viewer's role and permissions.
   *
   * This operation maps precisely to the reddit_community_comments table, with
   * validation ensuring comment existence and proper authorization. If the
   * comment does not exist or is soft deleted, an error response should be
   * provided.
   *
   * This operation complements related endpoints that handle comment creation
   * and comment list retrieval for posts.
   *
   * @param connection
   * @param postId Unique identifier of the target post.
   * @param commentId Unique identifier of the target comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityComment> {
    try {
      return await getRedditCommunityAdminPostsPostIdCommentsCommentId({
        admin,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new comment on a post, optionally as a nested reply.
   *
   * This POST operation allows authenticated members, community moderators, and
   * admins to create a new comment on a specific post in the redditCommunity
   * platform.
   *
   * The request body requires the comment content (body_text) and optionally a
   * parent_comment_id for nested replies, supporting unlimited comment
   * nesting.
   *
   * Authorization is restricted to authenticated members, community moderators,
   * and admins, who can create comments either as themselves or on behalf of
   * others within scope.
   *
   * The operation enforces validation on comment content length (max 2000
   * chars) and user permissions.
   *
   * Upon success, the response returns the detailed created comment including
   * author, timestamps, and content.
   *
   * This operation directly ties to the reddit_community_comments table and
   * complements GET operations for comment retrieval and parent post
   * management.
   *
   * @param connection
   * @param postId Unique identifier of the target post.
   * @param body Information required to create a new redditCommunity comment,
   *   including the content and optional parent comment relation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityComment.ICreate,
  ): Promise<IRedditCommunityComment> {
    try {
      return await postRedditCommunityAdminPostsPostIdComments({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
