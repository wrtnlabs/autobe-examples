import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityAdminRedditCommunityAdmins } from "../../../../providers/patchRedditCommunityAdminRedditCommunityAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getRedditCommunityAdminRedditCommunityAdminsId } from "../../../../providers/getRedditCommunityAdminRedditCommunityAdminsId";
import { putRedditCommunityAdminRedditCommunityAdminsId } from "../../../../providers/putRedditCommunityAdminRedditCommunityAdminsId";
import { deleteRedditCommunityAdminRedditCommunityAdminsId } from "../../../../providers/deleteRedditCommunityAdminRedditCommunityAdminsId";

import { IPageIRedditCommunityAdmin } from "../../../../api/structures/IPageIRedditCommunityAdmin";
import { IRedditCommunityAdmin } from "../../../../api/structures/IRedditCommunityAdmin";

@Controller("/redditCommunity/admin/redditCommunityAdmins")
export class RedditcommunityAdminRedditcommunityadminsController {
  /**
   * Retrieve paginated list of redditCommunity admins.
   *
   * Retrieve a filtered and paginated list of redditCommunity admin users from
   * the system. This operation supports advanced search criteria, allowing
   * administrators to query admin users based on attributes such as unique
   * email addresses and administrative levels.
   *
   * The endpoint supports pagination parameters to limit the result set,
   * facilitating efficient data browsing in administrative consoles. Sorting
   * options enable ordering by creation date or admin level.
   *
   * Security considerations restrict access to authorized system administrators
   * only, ensuring sensitive administrative information is well protected. This
   * operation fetches active admin records including those with soft deletion
   * data for auditing purposes.
   *
   * This operation interacts with the "reddit_community_admins" table in the
   * Prisma schema, adhering to database constraints on uniqueness of email
   * addresses and indexing based on creation and admin level timestamps.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for redditCommunity
   *   admins
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IRedditCommunityAdmin.IRequest,
  ): Promise<IPageIRedditCommunityAdmin> {
    try {
      return await patchRedditCommunityAdminRedditCommunityAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific redditCommunity admin by ID.
   *
   * Retrieve detailed information of a specific redditCommunity admin
   * identified by a UUID-compliant ID. This operation is restricted to system
   * administrators and returns the following data fields: unique identifier,
   * email address, password hash, administrative level, creation timestamp,
   * last update timestamp, and soft deletion timestamp if applicable.
   *
   * It ensures secure access, precise retrieval of admin records, and maintains
   * audit completeness by including soft deletion status.
   *
   * This operation targets the "reddit_community_admins" table from the Prisma
   * schema, guaranteeing accurate data extraction consistent with schema
   * constraints and indexes.
   *
   * @param connection
   * @param id Unique identifier of the target redditCommunity admin
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityAdmin> {
    try {
      return await getRedditCommunityAdminRedditCommunityAdminsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update admin user information by admin ID.
   *
   * Update the details of an existing admin user identified by their unique ID.
   * The admin user can have their email, password hash, and administrative
   * level updated. This operation enforces data integrity by validating the
   * admin's UUID and uniqueness of the email address. Only a user with
   * appropriate administrative permissions ("admin") should be allowed to
   * perform this operation. Concurrency and soft-deletion are handled as per
   * the underlying database constraints and business rules.
   *
   * @param connection
   * @param id Unique identifier of the admin user to update
   * @param body Updated admin user data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityAdmin.IUpdate,
  ): Promise<IRedditCommunityAdmin> {
    try {
      return await putRedditCommunityAdminRedditCommunityAdminsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete admin user by admin ID.
   *
   * Permanently delete an admin user by their unique ID. This deletion cannot
   * be undone and the admin user record will be removed from the system
   * entirely. Only authorized users with admin privileges should be allowed to
   * execute this operation. The system enforces hard deletion and does not
   * perform soft deletion for admin accounts.
   *
   * @param connection
   * @param id Unique identifier of the admin user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityAdminRedditCommunityAdminsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
