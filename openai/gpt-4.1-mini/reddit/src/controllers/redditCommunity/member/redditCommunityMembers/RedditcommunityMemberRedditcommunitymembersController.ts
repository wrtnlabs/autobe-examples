import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putRedditCommunityMemberRedditCommunityMembersId } from "../../../../providers/putRedditCommunityMemberRedditCommunityMembersId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { deleteRedditCommunityMemberRedditCommunityMembersId } from "../../../../providers/deleteRedditCommunityMemberRedditCommunityMembersId";

import { IRedditCommunityMember } from "../../../../api/structures/IRedditCommunityMember";

@Controller("/redditCommunity/member/redditCommunityMembers/:id")
export class RedditcommunityMemberRedditcommunitymembersController {
  /**
   * Update redditCommunityMember information by ID.
   *
   * Update an existing redditCommunityMember's information. This includes
   * updating the email (which must remain unique across all members), password
   * hash for authentication, email verification status, and optionally marking
   * the account as deleted via a soft deletion timestamp.
   *
   * This operation applies to the "reddit_community_members" table in the
   * Prisma schema. The system automatically manages createdAt and updatedAt
   * timestamps.
   *
   * Only authenticated users with appropriate roles can perform this update.
   * The operation validates unique email constraints and ensures password
   * hashes meet security policies.
   *
   * If the member with the specified ID does not exist, an error will be
   * returned. This operation returns no content but confirms success through
   * HTTP status.
   *
   * Authorization roles: member, communityModerator, admin.
   *
   * @param connection
   * @param id Unique identifier of the redditCommunityMember to update
   * @param body Payload containing fields to update in redditCommunityMember
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityMember.IUpdate,
  ): Promise<void> {
    try {
      return await putRedditCommunityMemberRedditCommunityMembersId({
        member,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete redditCommunityMember by ID.
   *
   * Permanently delete a redditCommunityMember from the
   * "reddit_community_members" table by their unique identifier.
   *
   * This is a hard delete operation that removes the member and all associated
   * data such as posts, comments, votes, karma records, and community
   * subscriptions.
   *
   * This operation should only be executed by authorized roles such as the
   * member themselves or an administrator due to its impact on the system.
   *
   * No response body is returned. Errors are returned if the member does not
   * exist or if the caller lacks authorization.
   *
   * Authorization roles: member, communityModerator, admin.
   *
   * @param connection
   * @param id Unique identifier of the redditCommunityMember to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityMemberRedditCommunityMembersId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
