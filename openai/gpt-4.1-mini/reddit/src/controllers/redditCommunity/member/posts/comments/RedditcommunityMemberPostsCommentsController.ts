import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityMemberPostsPostIdComments } from "../../../../../providers/postRedditCommunityMemberPostsPostIdComments";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchRedditCommunityMemberPostsPostIdComments } from "../../../../../providers/patchRedditCommunityMemberPostsPostIdComments";
import { getRedditCommunityMemberPostsPostIdCommentsCommentId } from "../../../../../providers/getRedditCommunityMemberPostsPostIdCommentsCommentId";
import { putRedditCommunityMemberPostsPostIdCommentsCommentId } from "../../../../../providers/putRedditCommunityMemberPostsPostIdCommentsCommentId";
import { deleteRedditCommunityMemberPostsPostIdCommentsCommentId } from "../../../../../providers/deleteRedditCommunityMemberPostsPostIdCommentsCommentId";

import { IRedditCommunityComment } from "../../../../../api/structures/IRedditCommunityComment";
import { IPageIRedditCommunityComment } from "../../../../../api/structures/IPageIRedditCommunityComment";

@Controller("/redditCommunity/member/posts/:postId/comments")
export class RedditcommunityMemberPostsCommentsController {
  /**
   * Create a new comment on a post, optionally as a nested reply.
   *
   * This POST operation allows authenticated members, community moderators, and
   * admins to create a new comment on a specific post in the redditCommunity
   * platform.
   *
   * The request body requires the comment content (body_text) and optionally a
   * parent_comment_id for nested replies, supporting unlimited comment
   * nesting.
   *
   * Authorization is restricted to authenticated members, community moderators,
   * and admins, who can create comments either as themselves or on behalf of
   * others within scope.
   *
   * The operation enforces validation on comment content length (max 2000
   * chars) and user permissions.
   *
   * Upon success, the response returns the detailed created comment including
   * author, timestamps, and content.
   *
   * This operation directly ties to the reddit_community_comments table and
   * complements GET operations for comment retrieval and parent post
   * management.
   *
   * @param connection
   * @param postId Unique identifier of the target post.
   * @param body Information required to create a new redditCommunity comment,
   *   including the content and optional parent comment relation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityComment.ICreate,
  ): Promise<IRedditCommunityComment> {
    try {
      return await postRedditCommunityMemberPostsPostIdComments({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List comments of a post with filtering and pagination.
   *
   * Retrieves a filtered, sorted, and paginated list of comments for the post
   * identified by postId.
   *
   * Comments are represented in the reddit_community_comments table and include
   * data such as author identity, creation date, and nesting via
   * parent_comment_id.
   *
   * Only authenticated users with roles 'member' or 'communityModerator' can
   * access this endpoint.
   *
   * Returns paginated comment summaries matching the specified criteria.
   *
   * Errors are returned if the specified post does not exist or the user lacks
   * permissions.
   *
   * @param connection
   * @param postId Unique identifier of the target post
   * @param body Filtering and pagination criteria for post comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityComment.IRequest,
  ): Promise<IPageIRedditCommunityComment.ISummary> {
    try {
      return await patchRedditCommunityMemberPostsPostIdComments({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific comment on a post.
   *
   * This GET operation retrieves a specific comment from the redditCommunity
   * platform.
   *
   * The comment is identified uniquely by its ID and belongs to a post
   * identified by postId. The returned data includes the comment body text,
   * author information (which may be a member or guest), creation and last
   * updated timestamps, and soft deletion status.
   *
   * Security and permissions allow viewing by authenticated members, community
   * moderators within the post's community, and administrators. Authorization
   * checks should verify the viewer's role and permissions.
   *
   * This operation maps precisely to the reddit_community_comments table, with
   * validation ensuring comment existence and proper authorization. If the
   * comment does not exist or is soft deleted, an error response should be
   * provided.
   *
   * This operation complements related endpoints that handle comment creation
   * and comment list retrieval for posts.
   *
   * @param connection
   * @param postId Unique identifier of the target post.
   * @param commentId Unique identifier of the target comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityComment> {
    try {
      return await getRedditCommunityMemberPostsPostIdCommentsCommentId({
        member,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific comment by its ID within a post in redditCommunity.
   *
   * Update an existing comment on a post within the redditCommunity platform.
   *
   * This operation allows an authenticated member to modify the body text of a
   * comment they authored. The comment is identified by the post ID and comment
   * ID in the path parameters.
   *
   * Only the author of the comment, who must be an authenticated member, is
   * permitted to perform this update. The operation ensures the comment exists
   * and belongs to the specified post before applying changes.
   *
   * The request requires the new body text string within the allowed maximum
   * length of 2,000 characters. Upon successful update, the response includes
   * the full updated comment record with timestamps, author information, nested
   * comments relations, and vote links.
   *
   * This operation corresponds to the reddit_community_comments table in the
   * Prisma database, maintaining referential integrity and supporting
   * versioning via updated_at timestamps.
   *
   * Validation rules include verifying ownership, character length limits on
   * body text, and ensuring the comment is not deleted (deleted_at is null).
   *
   * Any unauthorized attempts or validation failures result in appropriate
   * error responses. This operation is intended for regular authenticated
   * members who manage their own comments.
   *
   * @param connection
   * @param postId Unique ID of the target post
   * @param commentId Unique ID of the target comment
   * @param body Updated comment data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async updateComment(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityComment.IUpdate,
  ): Promise<IRedditCommunityComment> {
    try {
      return await putRedditCommunityMemberPostsPostIdCommentsCommentId({
        member,
        postId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific comment by its ID within a post in redditCommunity.
   *
   * This operation allows an authenticated member to permanently remove a
   * comment they authored by specifying the post ID and comment ID as path
   * parameters.
   *
   * The system will perform a hard delete on the comment, completely removing
   * it from the database despite the soft delete field existing. This ensures
   * no residual data remains.
   *
   * The operation verifies that the targeted comment belongs to the specified
   * post and that the member deleting the comment is the original author.
   *
   * Unauthorized or invalid deletion attempts will result in proper error
   * responses. This operation is essential for members to manage their own
   * content by deleting comments they no longer want to display.
   *
   * This operation directly manipulates the reddit_community_comments table,
   * maintaining data integrity and enforcing ownership checks.
   *
   * Security considerations ensure only the comment's author with proper
   * authentication can perform deletions.
   *
   * All timestamps related to creation and updates will become irrelevant once
   * the comment is deleted, as the record no longer exists.
   *
   * Careful handling of cascading deletions for nested comments or votes should
   * be managed by the backend service logic.
   *
   * @param connection
   * @param postId Unique ID of the target post
   * @param commentId Unique ID of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async eraseComment(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityMemberPostsPostIdCommentsCommentId({
        member,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
