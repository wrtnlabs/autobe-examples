import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityMemberPostsPostIdPostVotes } from "../../../../../providers/postRedditCommunityMemberPostsPostIdPostVotes";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchRedditCommunityMemberPostsPostIdPostVotes } from "../../../../../providers/patchRedditCommunityMemberPostsPostIdPostVotes";
import { getRedditCommunityMemberPostsPostIdPostVotesVoteId } from "../../../../../providers/getRedditCommunityMemberPostsPostIdPostVotesVoteId";
import { putRedditCommunityMemberPostsPostIdPostVotesVoteId } from "../../../../../providers/putRedditCommunityMemberPostsPostIdPostVotesVoteId";
import { deleteRedditCommunityMemberPostsPostIdPostVotesVoteId } from "../../../../../providers/deleteRedditCommunityMemberPostsPostIdPostVotesVoteId";

import { IRedditCommunityPostVote } from "../../../../../api/structures/IRedditCommunityPostVote";
import { IPageIRedditCommunityPostVote } from "../../../../../api/structures/IPageIRedditCommunityPostVote";

@Controller("/redditCommunity/member/posts/:postId/postVotes")
export class RedditcommunityMemberPostsPostvotesController {
  /**
   * Create a vote on a specific post by a member.
   *
   * Create a post vote by an authenticated member. The post is identified by
   * the postId path parameter. The request body must contain the member_id of
   * the voting member and the vote_value which is either +1 for upvote, -1 for
   * downvote, or 0 to remove the vote.
   *
   * The operation enforces that a member can only have one active vote at a
   * time per post, and this creates or replaces that vote.
   *
   * Successful creation returns the created vote entity data. Authorization
   * requires member role.
   *
   * Parameters:
   *
   * - PostId: UUID of the post to vote on
   * - Request body: memberId (UUID string), voteValue (integer +1, -1, 0)
   *
   * Response: Created reddit_community_post_votes entity with all fields
   *
   * Security: Only authenticated members may invoke this operation.
   *
   * @param connection
   * @param postId Unique identifier of the target post
   * @param body Vote creation data relating member to post with vote value
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createPostVote(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityPostVote.ICreate,
  ): Promise<IRedditCommunityPostVote> {
    try {
      return await postRedditCommunityMemberPostsPostIdPostVotes({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated vote summaries for a RedditCommunity post.
   *
   * Retrieve a filtered and paginated list of votes cast by members on the
   * specified RedditCommunity post, identified by the postId path parameter.
   * The operation returns vote records including member identifier, post
   * identifier, vote value (+1 for upvote, -1 for downvote, 0 for removed
   * vote), creation and update timestamps, and soft deletion timestamps when
   * applicable.
   *
   * The request body allows specification of search criteria and pagination
   * parameters for effective filtering and result limiting.
   *
   * This operation requires authorization as a "member" role to protect voting
   * data confidentiality. The postId provided in the path must be a valid UUID
   * of an existing post.
   *
   * @param connection
   * @param postId Unique identifier of the target RedditCommunity post
   * @param body Search and pagination parameters for post vote filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityPostVote.IRequest,
  ): Promise<IPageIRedditCommunityPostVote.ISummary> {
    try {
      return await patchRedditCommunityMemberPostsPostIdPostVotes({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific RedditCommunity post vote.
   *
   * Retrieve detailed information of a specific vote identified by voteId cast
   * on the RedditCommunity post with postId. The response includes member
   * identifier, post identifier, vote value (+1, -1, or 0), creation timestamp,
   * update timestamp, and soft deletion timestamp if any.
   *
   * Authorization requirements limit access to users with the "member" role.
   * Both postId and voteId path parameters must be valid UUIDs.
   *
   * This operation supports audit and management of individual votes within the
   * post voting system.
   *
   * @param connection
   * @param postId Unique identifier of the target RedditCommunity post
   * @param voteId Unique identifier of the target post vote record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityPostVote> {
    try {
      return await getRedditCommunityMemberPostsPostIdPostVotesVoteId({
        member,
        postId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing vote on a specific post.
   *
   * Update an existing post vote by changing the vote_value. The resource is
   * identified by path parameters postId and voteId.
   *
   * Request body must include the updated vote_value (+1, -1, or 0).
   *
   * Only authenticated members with role member can perform this operation.
   *
   * Response contains updated vote entity information.
   *
   * This operation modifies the vote record and affects post scores and user
   * karma accordingly.
   *
   * @param connection
   * @param postId Unique identifier of the target post
   * @param voteId Unique identifier of the post vote record
   * @param body Vote update data including new vote value
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async updatePostVote(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityPostVote.IUpdate,
  ): Promise<IRedditCommunityPostVote> {
    try {
      return await putRedditCommunityMemberPostsPostIdPostVotesVoteId({
        member,
        postId,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific post vote by vote ID and post ID.
   *
   * Delete a vote identified by voteId on a specific post identified by postId
   * within the redditCommunity platform.
   *
   * This operation permanently removes the vote record from the
   * reddit_community_post_votes table, which represents votes by members on
   * posts.
   *
   * Only authenticated members authorized to modify their votes may perform
   * this operation.
   *
   * Path Parameters:
   *
   * - PostId: UUID of the post containing the vote.
   * - VoteId: UUID of the vote record to delete.
   *
   * The operation returns no content on success.
   *
   * If the specified vote or post does not exist, the system returns an
   * appropriate error response.
   *
   * @param connection
   * @param postId Unique identifier of the post containing the vote
   * @param voteId Unique identifier of the vote to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erasePostVote(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityMemberPostsPostIdPostVotesVoteId({
        member,
        postId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
