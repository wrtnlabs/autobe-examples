import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityMemberCommunities } from "../../../../providers/postRedditCommunityMemberCommunities";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patchRedditCommunityMemberCommunities } from "../../../../providers/patchRedditCommunityMemberCommunities";
import { getRedditCommunityMemberCommunitiesCommunityId } from "../../../../providers/getRedditCommunityMemberCommunitiesCommunityId";
import { putRedditCommunityMemberCommunitiesCommunityId } from "../../../../providers/putRedditCommunityMemberCommunitiesCommunityId";

import { IRedditCommunityCommunity } from "../../../../api/structures/IRedditCommunityCommunity";
import { IPageIRedditCommunityCommunity } from "../../../../api/structures/IPageIRedditCommunityCommunity";

@Controller("/redditCommunity/member/communities")
export class RedditcommunityMemberCommunitiesController {
  /**
   * Create a new redditCommunity user community.
   *
   * Create a new user community in the redditCommunity platform. This endpoint
   * allows authenticated members to specify a unique community name adhering to
   * platform naming rules and an optional descriptive text.
   *
   * The operation ensures the community name is unique across the system and
   * complies with length and character restrictions. The server records
   * metadata such as creation and update timestamps automatically.
   *
   * Security requires the user to be a member (authenticated) and authorized to
   * create communities. Requests from non-members or guests are forbidden.
   *
   * This operation interacts with the 'reddit_community_communities' table in
   * the database, storing all relevant data about the newly created community.
   * Validation errors are returned if uniqueness or format constraints fail.
   *
   * Clients should provide valid name and optionally the description in the
   * request body. The response includes the detailed community entity with
   * database-generated fields.
   *
   * @param connection
   * @param body The creation data for a new community, including required name
   *   and optional description
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCommunity(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IRedditCommunityCommunity.ICreate,
  ): Promise<IRedditCommunityCommunity> {
    try {
      return await postRedditCommunityMemberCommunities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of communities.
   *
   * Retrieve a filtered and paginated list of user communities from the
   * reddit_community_communities table. The operation supports advanced filters
   * including partial matching on community names, optional description
   * keywords, and filtering communities created within certain date ranges.
   *
   * Sorting options include ascending or descending order by community name and
   * creation date to help users find communities by popularity, recency, or
   * alphabetical order.
   *
   * Security considerations restrict these operations to authenticated members
   * to prevent abuse and ensure privacy compliance. Maintainers must validate
   * all inputs to avoid injection and ensure system stability.
   *
   * The response includes concise community summaries optimized for display in
   * UI lists, including community ID, name, description, and creation date.
   * Paginated results allow clients to load communities incrementally for
   * performance.
   *
   * @param connection
   * @param body Search and pagination criteria for communities
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IRedditCommunityCommunity.IRequest,
  ): Promise<IPageIRedditCommunityCommunity.ISummary> {
    try {
      return await patchRedditCommunityMemberCommunities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed community information by ID.
   *
   * Retrieve full details for a single community entity identified by
   * communityId from the reddit_community_communities table. The community
   * entity includes unique name, description, creation and last updating
   * timestamps, and soft deletion timestamp.
   *
   * Access is limited to authenticated members to ensure information security
   * and controlled data exposure.
   *
   * Input validation confirms the communityId parameter is a valid UUID.
   *
   * The response contains detailed community information suitable for profile
   * or management views, including community metadata and associated moderators
   * and subscriptions.
   *
   * Errors are handled gracefully with standard invalid ID and not found
   * responses.
   *
   * @param connection
   * @param communityId Unique community identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityCommunity> {
    try {
      return await getRedditCommunityMemberCommunitiesCommunityId({
        member,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update description of a redditCommunity user community.
   *
   * Update existing community information on the redditCommunity platform. This
   * endpoint allows authorized members, such as community moderators, to edit
   * the description of a specified community.
   *
   * The community's name is immutable and cannot be changed after creation.
   * Partial updates to the description are supported.
   *
   * Authorization requires the member role; further domain-specific permission
   * checks should be enforced by business logic.
   *
   * The server manages update timestamps and ensures referential integrity. On
   * success, updated details of the community are returned.
   *
   * The path parameter 'communityId' uniquely identifies the target community
   * for update.
   *
   * @param connection
   * @param communityId Unique identifier of the community to update
   * @param body Update data for the community, allowing modification of
   *   description field only
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":communityId")
  public async updateCommunity(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunity.IUpdate,
  ): Promise<IRedditCommunityCommunity> {
    try {
      return await putRedditCommunityMemberCommunitiesCommunityId({
        member,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
