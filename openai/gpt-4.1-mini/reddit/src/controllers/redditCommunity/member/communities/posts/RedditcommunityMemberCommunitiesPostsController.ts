import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityMemberCommunitiesCommunityIdPosts } from "../../../../../providers/postRedditCommunityMemberCommunitiesCommunityIdPosts";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putRedditCommunityMemberCommunitiesCommunityIdPostsPostId } from "../../../../../providers/putRedditCommunityMemberCommunitiesCommunityIdPostsPostId";
import { deleteRedditCommunityMemberCommunitiesCommunityIdPostsPostId } from "../../../../../providers/deleteRedditCommunityMemberCommunitiesCommunityIdPostsPostId";

import { IRedditCommunityPosts } from "../../../../../api/structures/IRedditCommunityPosts";

@Controller("/redditCommunity/member/communities/:communityId/posts")
export class RedditcommunityMemberCommunitiesPostsController {
  /**
   * Create a new post in a community.
   *
   * Create a new post within the specified community. Posts must have one of
   * the three supported types: 'text', 'link', or 'image'.
   *
   * For text posts, a non-empty body_text up to 10,000 characters is required.
   * For link posts, a valid link_url must be specified. For image posts, an
   * image_url must be provided representing the single image.
   *
   * Post titles must not exceed 300 characters.
   *
   * Authorization requires the user to be an authenticated member. The post
   * will be linked to the community specified by the communityId path
   * parameter.
   *
   * The system records creation and update timestamps automatically and
   * supports soft deletion.
   *
   * This operation validates inputs and returns the created post information.
   *
   * Users can later update or delete their posts within allowed business rules.
   *
   * Users cannot create posts as guests or admins directly; hence, the
   * operation restricts roles accordingly.
   *
   * Errors will occur if communityId does not exist or if required fields are
   * missing or invalid.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param body Information required to create a new post in a community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createPost(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityPosts.ICreate,
  ): Promise<IRedditCommunityPosts> {
    try {
      return await postRedditCommunityMemberCommunitiesCommunityIdPosts({
        member,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing post in a community.
   *
   * Update an existing post in a specified community. The update allows
   * modifying the post's title, text body, link URL, or image URL depending on
   * the post type.
   *
   * Only authenticated members who are authorized can update posts.
   *
   * The community and post are identified by their respective UUIDs provided in
   * the path parameters.
   *
   * The operation enforces validation rules consistent with post type and
   * content limits.
   *
   * On success, the updated post information is returned.
   *
   * Errors occur if the post does not exist in the community, if the user lacks
   * permission, or if the input fails validation.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param postId Unique identifier of the target post
   * @param body Information required to update a post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async updatePost(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityPosts.IUpdate,
  ): Promise<IRedditCommunityPosts> {
    try {
      return await putRedditCommunityMemberCommunitiesCommunityIdPostsPostId({
        member,
        communityId,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a post from a community.
   *
   * Permanently deletes the post identified by the postId within the context of
   * the specified communityId.
   *
   * The operation ensures data integrity by cascading deletions to related
   * votes and comments associated with the post. Only authorized users such as
   * the post author (member role), community moderators for the associated
   * community, or admins may perform this operation.
   *
   * There is no request body for this operation.
   *
   * No content is returned in the response after successful deletion.
   *
   * Errors may be returned if the community or post does not exist, or if the
   * user lacks proper authorization.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param postId Unique identifier of the post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityMemberCommunitiesCommunityIdPostsPostId(
        {
          member,
          communityId,
          postId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
