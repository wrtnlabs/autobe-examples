import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditCommunityMemberCommentsCommentIdCommentVotesVoteId } from "../../../../../providers/getRedditCommunityMemberCommentsCommentIdCommentVotesVoteId";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putRedditCommunityMemberCommentsCommentIdCommentVotesVoteId } from "../../../../../providers/putRedditCommunityMemberCommentsCommentIdCommentVotesVoteId";
import { deleteRedditCommunityMemberCommentsCommentIdCommentVotesVoteId } from "../../../../../providers/deleteRedditCommunityMemberCommentsCommentIdCommentVotesVoteId";
import { postRedditCommunityMemberCommentsCommentIdCommentVotes } from "../../../../../providers/postRedditCommunityMemberCommentsCommentIdCommentVotes";

import { IRedditCommunityCommentVote } from "../../../../../api/structures/IRedditCommunityCommentVote";

@Controller("/redditCommunity/member/comments/:commentId/commentVotes")
export class RedditcommunityMemberCommentsCommentvotesController {
  /**
   * Retrieve a specific comment vote by IDs.
   *
   * Retrieve detailed information of a specific vote on a comment.
   *
   * This endpoint allows fetching a single vote identified by voteId associated
   * with the specified commentId. It provides comprehensive metadata about the
   * vote including the member who cast it, the current vote value (upvote,
   * downvote, or removed), and timestamps for audit purposes.
   *
   * Access to this endpoint is restricted to authenticated members.
   *
   * If the specified comment or vote does not exist, the operation returns an
   * error indicating the resource could not be found.
   *
   * This operation corresponds to the reddit_community_comment_votes table in
   * the underlying Prisma schema, which stores voting data linked to members
   * and comments.
   *
   * @param connection
   * @param commentId Unique identifier of the target comment
   * @param voteId Unique identifier of the target vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityCommentVote> {
    try {
      return await getRedditCommunityMemberCommentsCommentIdCommentVotesVoteId({
        member,
        commentId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific vote on a comment.
   *
   * This API operation allows an authenticated redditCommunity member to update
   * their vote on a comment specified by the commentId and voteId path
   * parameters. The vote value must be one of +1 (upvote), -1 (downvote), or 0
   * (remove vote).
   *
   * Security: Only the vote owner is authorized to update their vote.
   *
   * Database Relation: Targets the reddit_community_comment_votes table, which
   * records member votes on comments with support for soft deletion.
   *
   * Validation: Ensures the voteValue is an integer among -1, 0, or 1.
   *
   * Usage: This operation complements retrieval of existing votes to facilitate
   * vote modification workflows.
   *
   * Error Handling: Returns errors for unauthorized access or invalid vote
   * values.
   *
   * Response: Returns the updated comment vote record, including timing and
   * linkage information.
   *
   * @param connection
   * @param commentId Unique identifier of the comment
   * @param voteId Unique identifier of the vote
   * @param body Request body specifying updated vote value for the comment vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommentVote.IUpdate,
  ): Promise<IRedditCommunityCommentVote> {
    try {
      return await putRedditCommunityMemberCommentsCommentIdCommentVotesVoteId({
        member,
        commentId,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific vote on a comment.
   *
   * This API endpoint enables an authenticated redditCommunity member to delete
   * their vote on a comment identified by commentId and voteId.
   *
   * Only the vote owner can perform this deletion, ensuring authorization
   * compliance.
   *
   * Deletion is a hard delete operation removing the vote record completely
   * from the reddit_community_comment_votes table.
   *
   * No response body is returned upon success. Attempting to delete a
   * non-existent or unauthorized vote will result in an error.
   *
   * Usage typically follows vote listing and validation operations to confirm
   * the targeted vote.
   *
   * @param connection
   * @param commentId Unique identifier of the comment
   * @param voteId Unique identifier of the vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityMemberCommentsCommentIdCommentVotesVoteId(
        {
          member,
          commentId,
          voteId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a comment vote.
   *
   * Create a new comment vote record.
   *
   * Members can upvote (+1), downvote (-1), or remove their vote (0) on a
   * comment. This operation registers the vote associated with the member and
   * comment.
   *
   * The request must include member ID and vote value.
   *
   * Authorization is restricted to members.
   *
   * Returns the created comment vote including metadata and timestamps.
   *
   * Proper validation of the member and comment identifiers is required.
   *
   * This operation corresponds to the reddit_community_comment_votes table in
   * the Prisma schema.
   *
   * @param connection
   * @param commentId Unique identifier of the target comment
   * @param body Create comment vote data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommentVote.ICreate,
  ): Promise<IRedditCommunityCommentVote> {
    try {
      return await postRedditCommunityMemberCommentsCommentIdCommentVotes({
        member,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
