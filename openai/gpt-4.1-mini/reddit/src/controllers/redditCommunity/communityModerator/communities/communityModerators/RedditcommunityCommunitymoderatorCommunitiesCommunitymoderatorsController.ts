import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId } from "../../../../../providers/getRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId";
import { CommunitymoderatorAuth } from "../../../../../decorators/CommunitymoderatorAuth";
import { CommunitymoderatorPayload } from "../../../../../decorators/payload/CommunitymoderatorPayload";
import { putRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId } from "../../../../../providers/putRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId";
import { deleteRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId } from "../../../../../providers/deleteRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId";

import { IRedditCommunityCommunityModerator } from "../../../../../api/structures/IRedditCommunityCommunityModerator";
import { IRedditCommunityCommunityModerators } from "../../../../../api/structures/IRedditCommunityCommunityModerators";

@Controller(
  "/redditCommunity/communityModerator/communities/:communityId/communityModerators/:moderatorId",
)
export class RedditcommunityCommunitymoderatorCommunitiesCommunitymoderatorsController {
  /**
   * Get a specific community moderator by ID.
   *
   * Retrieve detailed information about a community moderator within a specific
   * community by their unique identifier.
   *
   * This operation accesses the reddit_community_community_moderators table,
   * where moderators are linked to communities and users (members). It includes
   * information such as the moderator's member ID, community ID, assignment
   * date, and auditing timestamps.
   *
   * Authorization Roles: This endpoint is accessible to users with
   * administrative privileges and community moderators themselves. Ensuring
   * security, only authorized users can access moderation details.
   *
   * Parameters:
   *
   * - CommunityId: The unique identifier of the community where the moderator
   *   serves.
   * - ModeratorId: The unique identifier of the moderator within that community.
   *
   * Behavior:
   *
   * - Returns the community moderator record if found and accessible.
   * - If the moderator or community does not exist, an appropriate error is
   *   returned.
   * - No request body is required.
   * - The response returns the full community moderator data as per the
   *   reddit_community_community_moderators Prisma model.
   *
   * @param connection
   * @param communityId Unique identifier of the community
   * @param moderatorId Unique identifier of the community moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityCommunityModerator> {
    try {
      return await getRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId(
        {
          communityModerator,
          communityId,
          moderatorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a community moderator by ID within a community.
   *
   * Update a community moderator by community ID and moderator ID.
   *
   * This API endpoint allows modifying the assignment details of a moderator
   * who belongs to a particular community. This operation strictly works on the
   * reddit_community_community_moderators table.
   *
   * Security guidelines dictate that only users with the admin or community
   * moderator roles have permission to perform this update. The communityId and
   * moderatorId must be valid UUIDs corresponding to existing records.
   *
   * The request body adheres to the IRedditCommunityCommunityModerators.IUpdate
   * schema, permitting updates like the assigned_at timestamp.
   *
   * If the specified moderator exists, their record is updated accordingly and
   * returned; otherwise, a not found error is returned.
   *
   * No deletion or status alteration occurs in this operation, only updates.
   *
   * @param connection
   * @param communityId Target community's ID
   * @param moderatorId Target moderator's ID
   * @param body Update data for the community moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunityModerators.IUpdate,
  ): Promise<IRedditCommunityCommunityModerators> {
    try {
      return await putRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId(
        {
          communityModerator,
          communityId,
          moderatorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community moderator assignment.
   *
   * Delete a community moderator by community ID and moderator ID.
   *
   * This API endpoint securely deletes the moderator relationship between a
   * member and a community, effectively revoking their moderator status. It
   * targets the reddit_community_community_moderators table.
   *
   * Authorization is limited to admin and communityModerator roles. Path
   * parameters communityId and moderatorId must be valid UUIDs.
   *
   * This is a hard delete operation; no response content is returned.
   *
   * Clients should handle potential errors such as non-existing records
   * gracefully.
   *
   * @param connection
   * @param communityId Target community's ID
   * @param moderatorId Target moderator's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityCommunityModeratorCommunitiesCommunityIdCommunityModeratorsModeratorId(
        {
          communityModerator,
          communityId,
          moderatorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
