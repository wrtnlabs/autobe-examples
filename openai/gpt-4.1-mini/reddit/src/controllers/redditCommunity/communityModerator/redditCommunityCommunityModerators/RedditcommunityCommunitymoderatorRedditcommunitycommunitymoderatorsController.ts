import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putRedditCommunityCommunityModeratorRedditCommunityCommunityModeratorsId } from "../../../../providers/putRedditCommunityCommunityModeratorRedditCommunityCommunityModeratorsId";
import { CommunitymoderatorAuth } from "../../../../decorators/CommunitymoderatorAuth";
import { CommunitymoderatorPayload } from "../../../../decorators/payload/CommunitymoderatorPayload";
import { deleteRedditCommunityCommunityModeratorRedditCommunityCommunityModeratorsId } from "../../../../providers/deleteRedditCommunityCommunityModeratorRedditCommunityCommunityModeratorsId";

import { IRedditCommunityCommunityModerator } from "../../../../api/structures/IRedditCommunityCommunityModerator";

@Controller(
  "/redditCommunity/communityModerator/redditCommunityCommunityModerators/:id",
)
export class RedditcommunityCommunitymoderatorRedditcommunitycommunitymoderatorsController {
  /**
   * Update a community moderator by ID.
   *
   * Update an existing community moderator's information by their unique ID.
   * This operation modifies properties such as the assigned_at timestamp, which
   * reflects when the member was assigned as a moderator for the community. It
   * ensures updated_at timestamp is also refreshed upon modification. Only
   * authorized roles can perform this update.
   *
   * This operation is directly associated with the
   * reddit_community_community_moderators table, which maps members to
   * communities with specific moderator roles. It impacts system authorization
   * logic regarding community management.
   *
   * Validation enforces the UUID format for the ID path parameter and ensures
   * request body data complies with the
   * IRedditCommunityCommunityModerator.IUpdate schema, reflecting possible
   * updates to the assigned_at and audit-related timestamps.
   *
   * Related operations include listing moderators, creating new moderator
   * assignments, and deleting existing ones. Proper error handling ensures
   * attempts to update non-existent records return meaningful errors.
   *
   * This operation requires authentication and appropriate authorization roles
   * such as community moderator or admin to perform changes.
   *
   * @param connection
   * @param id Unique identifier of the community moderator to update
   * @param body Information for updating a community moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityCommunityModerator.IUpdate,
  ): Promise<IRedditCommunityCommunityModerator> {
    try {
      return await putRedditCommunityCommunityModeratorRedditCommunityCommunityModeratorsId(
        {
          communityModerator,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community moderator by ID, permanently removing their assignment
   * from a community. This operation completely removes the record from the
   * database and cannot be undone.
   *
   * It requires the unique UUID of the community moderator in the path
   * parameter.
   *
   * Authorization is restricted to roles such as admin and communityModerator.
   * Attempting to delete a non-existent ID will result in an error.
   *
   * This operation affects community moderation and user role management.
   *
   * @param connection
   * @param id Unique identifier of the community moderator to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteRedditCommunityCommunityModeratorRedditCommunityCommunityModeratorsId(
        {
          communityModerator,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
