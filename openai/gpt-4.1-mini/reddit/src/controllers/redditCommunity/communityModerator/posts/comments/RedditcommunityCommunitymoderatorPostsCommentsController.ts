import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postRedditCommunityCommunityModeratorPostsPostIdComments } from "../../../../../providers/postRedditCommunityCommunityModeratorPostsPostIdComments";
import { CommunitymoderatorAuth } from "../../../../../decorators/CommunitymoderatorAuth";
import { CommunitymoderatorPayload } from "../../../../../decorators/payload/CommunitymoderatorPayload";
import { patchRedditCommunityCommunityModeratorPostsPostIdComments } from "../../../../../providers/patchRedditCommunityCommunityModeratorPostsPostIdComments";
import { getRedditCommunityCommunityModeratorPostsPostIdCommentsCommentId } from "../../../../../providers/getRedditCommunityCommunityModeratorPostsPostIdCommentsCommentId";

import { IRedditCommunityComment } from "../../../../../api/structures/IRedditCommunityComment";
import { IPageIRedditCommunityComment } from "../../../../../api/structures/IPageIRedditCommunityComment";

@Controller("/redditCommunity/communityModerator/posts/:postId/comments")
export class RedditcommunityCommunitymoderatorPostsCommentsController {
  /**
   * Create a new comment on a post, optionally as a nested reply.
   *
   * This POST operation allows authenticated members, community moderators, and
   * admins to create a new comment on a specific post in the redditCommunity
   * platform.
   *
   * The request body requires the comment content (body_text) and optionally a
   * parent_comment_id for nested replies, supporting unlimited comment
   * nesting.
   *
   * Authorization is restricted to authenticated members, community moderators,
   * and admins, who can create comments either as themselves or on behalf of
   * others within scope.
   *
   * The operation enforces validation on comment content length (max 2000
   * chars) and user permissions.
   *
   * Upon success, the response returns the detailed created comment including
   * author, timestamps, and content.
   *
   * This operation directly ties to the reddit_community_comments table and
   * complements GET operations for comment retrieval and parent post
   * management.
   *
   * @param connection
   * @param postId Unique identifier of the target post.
   * @param body Information required to create a new redditCommunity comment,
   *   including the content and optional parent comment relation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityComment.ICreate,
  ): Promise<IRedditCommunityComment> {
    try {
      return await postRedditCommunityCommunityModeratorPostsPostIdComments({
        communityModerator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List comments of a post with filtering and pagination.
   *
   * Retrieves a filtered, sorted, and paginated list of comments for the post
   * identified by postId.
   *
   * Comments are represented in the reddit_community_comments table and include
   * data such as author identity, creation date, and nesting via
   * parent_comment_id.
   *
   * Only authenticated users with roles 'member' or 'communityModerator' can
   * access this endpoint.
   *
   * Returns paginated comment summaries matching the specified criteria.
   *
   * Errors are returned if the specified post does not exist or the user lacks
   * permissions.
   *
   * @param connection
   * @param postId Unique identifier of the target post
   * @param body Filtering and pagination criteria for post comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityComment.IRequest,
  ): Promise<IPageIRedditCommunityComment.ISummary> {
    try {
      return await patchRedditCommunityCommunityModeratorPostsPostIdComments({
        communityModerator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific comment on a post.
   *
   * This GET operation retrieves a specific comment from the redditCommunity
   * platform.
   *
   * The comment is identified uniquely by its ID and belongs to a post
   * identified by postId. The returned data includes the comment body text,
   * author information (which may be a member or guest), creation and last
   * updated timestamps, and soft deletion status.
   *
   * Security and permissions allow viewing by authenticated members, community
   * moderators within the post's community, and administrators. Authorization
   * checks should verify the viewer's role and permissions.
   *
   * This operation maps precisely to the reddit_community_comments table, with
   * validation ensuring comment existence and proper authorization. If the
   * comment does not exist or is soft deleted, an error response should be
   * provided.
   *
   * This operation complements related endpoints that handle comment creation
   * and comment list retrieval for posts.
   *
   * @param connection
   * @param postId Unique identifier of the target post.
   * @param commentId Unique identifier of the target comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityComment> {
    try {
      return await getRedditCommunityCommunityModeratorPostsPostIdCommentsCommentId(
        {
          communityModerator,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
