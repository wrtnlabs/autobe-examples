import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityCommunitiesCommunityIdPosts } from "../../../../providers/patchRedditCommunityCommunitiesCommunityIdPosts";
import { getRedditCommunityCommunitiesCommunityIdPostsPostId } from "../../../../providers/getRedditCommunityCommunitiesCommunityIdPostsPostId";

import { IPageIRedditCommunityPost } from "../../../../api/structures/IPageIRedditCommunityPost";
import { IRedditCommunityPost } from "../../../../api/structures/IRedditCommunityPost";

@Controller("/redditCommunity/communities/:communityId/posts")
export class RedditcommunityCommunitiesPostsController {
  /**
   * Retrieve list of posts in a community with filtering and pagination.
   *
   * Retrieve a filtered and paginated list of posts belonging to the specified
   * community. This operation enables clients to obtain posts of various types
   * including text, link, and image posts, filtered by criteria like post type
   * or date range.
   *
   * The operation interacts with the reddit_community_posts table, which stores
   * posts authored by members or guests. Each post belongs to one community,
   * identified here by the communityId path parameter.
   *
   * Security considerations include restricting access to community posts to
   * valid and authorized users as per system policy, although viewing community
   * posts is mostly public. Proper validation of the communityId parameter is
   * enforced.
   *
   * Pagination parameters allow clients to specify page size and index, with
   * sorting options such as newest first, top votes, and hot topics. This
   * supports efficient browsing and avoids performance issues with large data
   * volumes.
   *
   * The response includes paginated post summary objects, optimized for listing
   * views with essential details such as title, post_type, and timestamps.
   * Clients may need to request detail operations for full post information.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param body Post filtering, search, pagination, and sorting criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRedditCommunityPost.IRequest,
  ): Promise<IPageIRedditCommunityPost.ISummary> {
    try {
      return await patchRedditCommunityCommunitiesCommunityIdPosts({
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a single community post.
   *
   * Get detailed information about a specific post identified by postId within
   * the community identified by communityId. This includes all relevant post
   * content fields (text, link, image), metadata like creation and update
   * timestamps, author references, and status information.
   *
   * The post data is stored in the reddit_community_posts table and linked to
   * the community and author entities. Only authorized or public-allowed
   * clients can access this data.
   *
   * This operation is essential for showing post details in user interfaces and
   * complements list retrieval operations that provide summarized views.
   *
   * Validation of both communityId and postId path parameters ensures proper
   * data retrieval and access control.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param postId Unique identifier of the target post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityPost> {
    try {
      return await getRedditCommunityCommunitiesCommunityIdPostsPostId({
        communityId,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
