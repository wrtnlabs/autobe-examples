import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchRedditCommunityReportStatuses } from "../../../providers/patchRedditCommunityReportStatuses";
import { getRedditCommunityReportStatusesStatusId } from "../../../providers/getRedditCommunityReportStatusesStatusId";

import { IPageIRedditCommunityReportStatus } from "../../../api/structures/IPageIRedditCommunityReportStatus";
import { IRedditCommunityReportStatus } from "../../../api/structures/IRedditCommunityReportStatus";

@Controller("/redditCommunity/reportStatuses")
export class RedditcommunityReportstatusesController {
  /**
   * Retrieve a list of redditCommunity report statuses.
   *
   * Retrieve a filtered and paginated list of report statuses used by the
   * reporting and moderation system within the redditCommunity platform. Report
   * statuses include distinct lifecycle stages for moderation workflows, such
   * as pending review, reviewed, or action taken, defined in the
   * reddit_community_report_statuses table.
   *
   * This operation is accessible publicly without authentication to allow
   * clients to understand possible report status values.
   *
   * The response includes pagination metadata as well as concise details about
   * each report status. The search and sorting mechanisms enable efficient
   * retrieval for UI dropdowns or filtering in administrative tools.
   *
   * This operation complements the GET endpoint for retrieving detailed status
   * information by ID.
   *
   * Errors due to invalid search or pagination parameters will be returned with
   * appropriate error messages.
   *
   * @param connection
   * @param body Search and pagination criteria for report statuses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IRedditCommunityReportStatus.IRequest,
  ): Promise<IPageIRedditCommunityReportStatus.ISummary> {
    try {
      return await patchRedditCommunityReportStatuses({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a report status by its ID.
   *
   * Retrieve detailed information about a specific redditCommunity report
   * status identified by its unique ID. Report statuses represent distinct
   * lifecycle states of reports such as pending, reviewed, or action taken.
   *
   * This operation allows clients and administrative interfaces to fetch
   * complete details on a particular report status for display and processing.
   *
   * No request body is needed. The path parameter reportStatusId identifies
   * which report status to retrieve.
   *
   * The response includes all relevant fields including the name and
   * description. Invalid or unknown IDs will return error responses.
   *
   * @param connection
   * @param statusId Unique identifier of the target report status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusId")
  public async at(
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<IRedditCommunityReportStatus> {
    try {
      return await getRedditCommunityReportStatusesStatusId({
        statusId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
