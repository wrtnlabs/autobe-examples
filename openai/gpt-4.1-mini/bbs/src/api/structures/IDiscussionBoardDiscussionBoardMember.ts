import { tags } from "typia";

/**
 * Discussion board member entity representing registered users capable of
 * creating posts and replies.
 *
 * This entity is backed by the `discussion_board_members` table in the Prisma
 * schema, containing all persistent fields relevant to user authentication and
 * profile. It excludes transient or computed properties.
 *
 * Sensitive fields such as password_hash are stored securely and must never be
 * exposed in API responses.
 *
 * The entity includes audit timestamps and optional soft delete timestamp for
 * lifecycle management.
 *
 * Clients can query, list, and manage members within the constraints of their
 * authorization roles.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDiscussionBoardMember = {
  /**
   * Unique identifier of the registered member. This is the primary key in
   * the database schema and uses UUID format to ensure uniqueness and ease of
   * management across distributed systems.
   *
   * It is a required field that uniquely identifies each member within the
   * discussion board ecosystem.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The registered member's unique email address. This address is used for
   * login and all system communications.
   *
   * Must be unique across the member table as enforced by database
   * constraints. It is the primary credential for member authentication
   * alongside the password.
   *
   * Format must conform to standard email address format and is
   * case-insensitive for login purposes.
   */
  email: string;

  /**
   * A secure hash of the member's password used for authentication.
   *
   * This field is stored as a hashed string and should never be exposed via
   * API responses for security reasons.
   *
   * Clients are expected to send the plain password, which is hashed by the
   * backend service.
   *
   * This property is relevant internally and used in storage but excluded
   * from response objects to protect member security.
   */
  password_hash: string;

  /**
   * Public display name chosen by the member to be shown on their posts and
   * replies.
   *
   * Must be unique or near unique to help with user recognition.
   *
   * It serves as the primary identifier in UI contexts, replacing email
   * addresses for privacy.
   *
   * Length constraints and character restrictions should be enforced by
   * business logic outside the schema.
   */
  display_name: string;

  /**
   * Timestamp marking the creation date and time of this member account.
   *
   * Stored in ISO 8601 format including timezone information (UTC offset).
   *
   * Used for auditing and chronological sorting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp marking the last update date and time of this member account
   * record.
   *
   * Used to track profile updates, password changes, or other modifications.
   *
   * In ISO 8601 UTC datetime string format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft delete timestamp indicating when this member account was
   * deactivated.
   *
   * When present (non-null), it signifies the account is considered deleted
   * or inactive and should not be used for login or posting.
   *
   * This field is nullable and may be null to indicate an active account.
   *
   * Date-time string in standard ISO 8601 UTC format when provided, otherwise
   * null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardDiscussionBoardMember {
  /**
   * Request object for retrieving a paginated list of discussion board
   * members with optional search and sorting criteria.
   */
  export type IRequest = {
    /** Page number for paging through results. Must be a positive integer. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of records to return per page, with a maximum of 100 records. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Full text search keyword to filter discussion board members by
     * matching commonly searched attributes such as display name or email.
     */
    search?: string | null | undefined;

    /** Field to order results by. Case-sensitive. */
    orderBy?: "email" | "displayName" | "createdAt" | null | undefined;

    /** Ordering direction, either ascending or descending. */
    orderDirection?: "ASC" | "DESC" | null | undefined;
  };
}
