import { tags } from "typia";

/**
 * Guest user session record representing unauthenticated site visitors with a
 * session token for temporary access.
 *
 * This object contains all relevant properties for guest session management,
 * including unique identification, session token, creation and update
 * timestamps, and soft deletion status.
 *
 * The deleted_at property is nullable and indicates if the guest session is
 * invalidated (soft deleted).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDiscussionBoardGuest = {
  /** Primary key of the guest session as a UUID. */
  id: string & tags.Format<"uuid">;

  /** Unique token identifying the guest session. */
  session_token: string;

  /** Timestamp when the guest session was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the guest session. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if session is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardDiscussionBoardGuest {
  /**
   * Request structure for searching and paginating discussion board guest
   * sessions. Supports filtering by session token, sorting by timestamp, and
   * pagination controls.
   */
  export type IRequest = {
    /** Page number for pagination, starting from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of records per page. Defaults to a system-defined maximum if
     * not provided.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Text string to filter guest sessions by session token or other
     * searchable attributes.
     */
    search?: string | null | undefined;

    /** Field name to sort results by, e.g. 'created_at' or 'session_token'. */
    sort_by?: string | null | undefined;

    /** Sort order direction: 'asc' for ascending, 'desc' for descending. */
    order?: "asc" | "desc" | null | undefined;
  };

  /**
   * Update payload for a guest session allowing modification of the session
   * token and soft delete timestamp.
   */
  export type IUpdate = {
    /** Updated unique token for the guest session. */
    session_token: string;

    /** Timestamp marking soft delete or null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of a guest session in the discussion board. Contains
   * essential information to identify the guest and session token status.
   *
   * This summary excludes sensitive or detailed authentication tokens but
   * provides the minimal necessary data for guest session listings and
   * session management.
   *
   * Useful for administrative or analytical purposes where guest sessions are
   * monitored or managed.
   */
  export type ISummary = {
    /** Primary Key uniquely identifying a discussion board guest session. */
    id: string & tags.Format<"uuid">;

    /** Unique session token identifying the guest user session. */
    session_token: string;

    /** Timestamp when the guest session was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of the last update to the guest session. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp if the guest session is invalidated; null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
