import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Moderator users with elevated privileges to manage and moderate posts and
 * replies. Moderators authenticate with email and password hash, and can
 * perform editing and deletion actions.
 *
 * This schema represents the structure of a discussion board moderator account
 * as stored in the database. Passwords are stored securely as hashes. The
 * entity supports soft deletion via optional deleted_at timestamp.
 *
 * All properties reflect the Prisma database schema constraints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardModerator = {
  /** Unique identifier of the moderator account */
  id: string & tags.Format<"uuid">;

  /** Moderator's unique email address for login and communication */
  email: string;

  /**
   * Hashed password for moderator authentication; never accept plain password
   * in responses
   */
  password_hash: string;

  /** Display name shown in moderation logs and actions */
  display_name: string;

  /** Timestamp when the moderator account was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the moderator account */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp if the moderator account is deactivated (nullable) */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardModerator {
  /**
   * Payload for creating new moderator account.
   *
   * Includes email, plain password (which will be hashed by backend), and
   * display name.
   *
   * Auto-generated fields like id, timestamps, and hashed passwords are
   * excluded from client input.
   */
  export type ICreate = {
    /** Moderator's unique email address for login and communication. */
    email: string;

    /**
     * Plain text password for moderator authentication; backend hashes
     * before storage.
     */
    password: string;

    /** Display name shown in moderation activities. */
    display_name: string;
  };

  /**
   * Authorized moderator data transfer object returning authentication tokens
   * and profile info.
   *
   * This object represents a successfully authenticated moderator including
   * profile identifiers and JWT authentication tokens used to authorize
   * further API calls.
   */
  export type IAuthorized = {
    /** Unique identifier of the discussion board moderator. */
    id: string & tags.Format<"uuid">;

    /** Unique email address for the moderator. */
    email: string;

    /** Display name shown in moderation logs and actions. */
    display_name: string;

    /** Timestamp when the moderator account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to the moderator account. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp if the moderator account is deactivated. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Moderator login credentials for authentication. */
  export type ILogin = {
    /** Moderator login email address. */
    email: string;

    /** Moderator login password. */
    password: string;
  };

  /**
   * Payload for updating moderator account.
   *
   * All fields optional; id and system timestamps are immutable.
   *
   * Password must be in plain text to be hashed by backend.
   */
  export type IUpdate = {
    /** Moderator's unique email address for login and communication. */
    email?: string | undefined;

    /** Plain text password to be hashed before storage. */
    password?: string | undefined;

    /** Display name shown in moderation activities. */
    display_name?: string | undefined;
  };
}
