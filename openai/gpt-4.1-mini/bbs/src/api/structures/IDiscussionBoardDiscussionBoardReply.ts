import { tags } from "typia";

/**
 * Discussion board reply entity representing a member's reply to a discussion
 * post. Includes content, status, author information, and timestamps. Soft
 * delete functionality is supported via the deleted_at field.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDiscussionBoardReply = {
  /** Primary Key (UUID) of the reply. */
  id: string & tags.Format<"uuid">;

  /** Reference to the parent discussion board post's UUID. */
  post_id: string & tags.Format<"uuid">;

  /** Authoring member's UUID who created this reply. */
  member_id: string & tags.Format<"uuid">;

  /**
   * Reply content, must be between 5 and 1000 characters. It is
   * profanity-checked and validated.
   */
  content: string;

  /**
   * Status of the reply indicating moderation or visibility state like
   * 'public', 'deleted', or 'pending'.
   */
  reply_status: string;

  /** Timestamp when the reply was created, in ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the reply was last updated, in ISO 8601 format. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if the reply is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardDiscussionBoardReply {
  /**
   * Request body schema for creating a new reply to a discussion board post.
   * Must specify the post and member IDs, content respecting length and
   * profanity rules, and initial status indicating visibility or moderation.
   */
  export type ICreate = {
    /**
     * UUID of the parent post to which the reply belongs. Required to
     * associate the reply correctly.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * UUID of the member authoring the reply. This associates reply with a
     * member.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Reply content text. Must be between 5 and 1000 characters. Profanity
     * will be checked externally before creation.
     */
    content: string;

    /**
     * Status of the reply, e.g., 'public' or 'pending' to indicate
     * moderation state. Must be valid status string.
     */
    reply_status: string;
  };

  /**
   * Request body schema to update a reply to discussion board post. Fields
   * include reply content and reply status indicating moderation or
   * visibility.
   *
   * This schema enforces content length between 5 and 1000 characters and
   * requires moderation status to reflect current visibility or approval
   * states.
   */
  export type IUpdate = {
    /**
     * Reply content between 5 and 1000 characters, validated and
     * profanity-checked.
     */
    content: string;

    /** Status of the reply indicating moderation or visibility state. */
    reply_status: string;
  };

  /**
   * Request schema for searching, filtering, sorting, and paginating
   * discussion board replies.
   *
   * Allows clients to narrow down replies based on text search, status
   * filtering, and pagination parameters.
   *
   * All fields are optional to support flexible querying.
   *
   * Security: sensitive fields are not involved in this DTO, so all are
   * public and client-provided.
   */
  export type IRequest = {
    /**
     * Search keyword for full-text search within reply content.
     *
     * Clients can supply this for filtering replies containing specific
     * words or phrases.
     *
     * Example: "inflation"
     */
    search?: string | undefined;

    /**
     * Filter replies by their status such as 'approved', 'pending', or
     * 'rejected'.
     *
     * This field is optional and can be null when no filtering on status is
     * required.
     */
    filter_status?: string | null | undefined;

    /**
     * Page number for pagination request.
     *
     * Defaults to the first page if null or omitted.
     *
     * Must be a positive integer.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Limit of items per page for pagination.
     *
     * Defaults to 20 if null or omitted.
     *
     * Must be a positive integer, typically not exceeding 100.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Field name to sort replies by, e.g., 'created_at' or 'updated_at'.
     *
     * Optional parameter for ordering results.
     *
     * If null or omitted, defaults to sorting by 'created_at' descending.
     */
    sort_by?: string | null | undefined;

    /**
     * Sort order direction.
     *
     * Valid values are 'asc' for ascending or 'desc' for descending.
     *
     * Optional, with default typically being 'desc'.
     */
    sort_order?: "asc" | "desc" | null | undefined;
  };

  /**
   * A summary representation of a discussion board reply focusing on key
   * metadata and truncated content.
   *
   * This summary is used in list views and search results where full reply
   * details are unnecessary.
   *
   * It omits fields like member details or full content to minimize payload
   * size.
   */
  export type ISummary = {
    /** Unique identifier of the discussion board reply. */
    id: string & tags.Format<"uuid">;

    /**
     * Summary of the reply's textual content, truncated or concise for
     * listing.
     */
    content: string;

    /**
     * Current status of the reply indicating its moderation or visibility
     * state.
     */
    reply_status: string;

    /** DateTime when the reply was initially created. */
    created_at: string & tags.Format<"date-time">;

    /** DateTime when the reply was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };
}
