import { tags } from "typia";

/**
 * Discussion board administrator user entity with unique email, hashed
 * password, display name, creation and update timestamps, and soft deletion
 * timestamp.
 *
 * Admins have full privileges including user management and system
 * configuration.
 *
 * This entity reflects the admin user data stored in the
 * discussion_board_admins table of the Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDiscussionBoardAdmin = {
  /** Primary Key identifier of the discussion board admin. */
  id: string & tags.Format<"uuid">;

  /**
   * Administrator's unique email address for login and management. Must be
   * unique.
   */
  email: string;

  /** Hashed password for administrator authentication. */
  password_hash: string;

  /**
   * Display name for administrator identification in audit and management
   * logs.
   */
  display_name: string;

  /** Timestamp when the administrator account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the administrator account. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp if the administrator account is deactivated. Null
   * if active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardDiscussionBoardAdmin {
  /**
   * Request parameters for filtering and paginating discussion board
   * administrator accounts.
   *
   * Supports pagination, sorting by allowed fields, and search by keyword on
   * email or display name.
   *
   * Optional properties can be omitted or set to null to use defaults.
   */
  export type IRequest = {
    /**
     * Page number for paginated results. Null or undefined means default
     * first page
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Number of records per page. Null or undefined means default limit */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Search term to filter administrators by email or display name */
    search?: string | null | undefined;

    /** Field to sort the admin list by */
    order_by?: "email" | "display_name" | "created_at" | null | undefined;

    /** Sort direction, ascending or descending */
    order_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Summary representation of discussion board administrators.
   *
   * Includes the unique ID, email, display name, and timestamps for account
   * creation and last modification.
   *
   * Optimized for listing administrator accounts efficiently without exposing
   * sensitive information.
   *
   * Mapped directly from the discussion_board_admins table data.
   */
  export type ISummary = {
    /** Unique identifier of the discussion board administrator. */
    id: string & tags.Format<"uuid">;

    /**
     * The administrator's registered email address used for login and
     * system management.
     */
    email: string;

    /**
     * Display name for administrator identification in audit and management
     * logs.
     */
    display_name: string;

    /** Timestamp when the administrator account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to the administrator account. */
    updated_at: string & tags.Format<"date-time">;
  };
}
