import { tags } from "typia";

/**
 * Discussion board reply entity representing a user's reply within a discussion
 * topic.
 *
 * Includes properties for content, author, reply status, timestamps including
 * creation, update, and optional soft deletion.
 *
 * This entity supports moderation, auditing, and content lifecycle management.
 *
 * The structure conforms strictly to the Prisma schema definition with proper
 * type formats and detailed descriptive metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDiscussionBoardReplies = {
  /**
   * Primary Key.
   *
   * Unique identifier of the discussion board reply. This is automatically
   * generated by the system and used to reference the reply entity uniquely
   * across the platform.
   *
   * Proper usage of UUID ensures global uniqueness and supports efficient
   * indexing and retrieval.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Replied post's discussion_board_posts.id.
   *
   * Foreign key linking this reply to the parent discussion board post.
   *
   * Maintains relational integrity ensuring replies are correctly associated
   * with their discussion topics.
   *
   * Required for fetching the context and thread of the reply.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Authoring member's discussion_board_members.id.
   *
   * Identifies the member who authored this reply.
   *
   * Used for ownership, authorization, and display purposes.
   *
   * Ensures traceability and accountability of user-generated content.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Reply content between 5 and 1000 characters, validated and
   * profanity-checked. This is the primary textual content posted by a member
   * as a reply to a discussion topic.
   *
   * Content is subjected to validation rules to ensure compliance with length
   * restrictions and community guidelines.
   *
   * Displayed to viewers to foster discussion and feedback.
   */
  content: string;

  /**
   * Status of the reply indicating moderation or visibility state. This
   * status informs the system and users whether the reply is visible, pending
   * moderation, flagged, or deleted.
   *
   * Facilitates filtering of replies and management of content lifecycle.
   *
   * Values follow moderation policies framework.
   */
  reply_status: string;

  /**
   * Timestamp when the reply was created.
   *
   * Automatically recorded by the system upon reply creation.
   *
   * Useful for sorting, filtering, and audit logging of reply timelines.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the reply was last updated.
   *
   * Automatically updated by the system whenever the reply content or status
   * is modified.
   *
   * Supports audit trail and versioning of reply content.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the reply was soft deleted; null if active.
   *
   * Nullable field that marks whether the reply has been logically deleted
   * without physical removal.
   *
   * Important for soft delete functionality to retain history while hiding
   * deleted content from standard views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardDiscussionBoardReplies {
  /**
   * Request parameters for listing discussion board replies with pagination,
   * filtering, and sorting.
   *
   * This request object allows clients to define paging parameters, text
   * search keywords, and sorting preferences.
   *
   * It is essential for efficient retrieval of discussion board replies
   * matching given criteria.
   */
  export type IRequest = {
    /**
     * Page number requested for reply results.
     *
     * Used for pagination to select the correct slice of reply list to
     * return.
     *
     * Must be a positive integer starting at 1.
     */
    page: number & tags.Type<"int32">;

    /**
     * Number of replies per page.
     *
     * Sets the maximum size of the reply list for pagination.
     *
     * Defaults and limits should follow API specification or be managed at
     * server side.
     */
    limit: number & tags.Type<"int32">;

    /**
     * Keyword search applied to reply content.
     *
     * Case-insensitive substring match applied to reply textual content.
     *
     * If empty or null, no text filtering is performed.
     */
    search?: string | undefined;

    /**
     * Field to be used for sorting the reply list.
     *
     * Must be one of the predefined field names.
     *
     * Affects the order of replies returned in the response.
     */
    sort?: "created_at" | "updated_at" | undefined;

    /**
     * Direction (ascending or descending) of reply sorting order.
     *
     * Used in conjunction with the 'sort' field to define sorting behavior.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Data structure for updating a discussion board reply entity.
   *
   * Includes fields that can be modified after reply creation, primarily
   * content and reply status, with validation constraints to maintain data
   * integrity and community standards.
   *
   * Sensitive fields and ownership (member_id) are immutable and excluded
   * from update operations.
   *
   * This schema ensures that updates conform to the rules governing reply
   * content length and moderation status.
   */
  export type IUpdate = {
    /**
     * Reply content between 5 and 1000 characters, validated and
     * profanity-checked. This is the main textual content of the reply that
     * a member posts in response to a discussion board post.
     *
     * It must comply with content length constraints (minimum 5 characters,
     * maximum 1000 characters) and be free from profane or inappropriate
     * language.
     *
     * The reply content is essential for meaningful discussion and must
     * always be provided with sensible, sanitized text.
     */
    content: string;

    /**
     * Status of the reply indicating moderation or visibility state. This
     * may reflect states like 'visible', 'pending', 'deleted', or 'flagged'
     * according to the board's moderation policies.
     *
     * Accurate status reporting enables the system to filter and display
     * replies appropriately based on moderation outcomes and user
     * privileges.
     *
     * The allowed values should correspond to the system-defined reply
     * status enumeration or string values.
     */
    reply_status: string;
  };

  /**
   * Summary representation of a discussion board reply for overview and
   * listing.
   *
   * Designed to provide essential reply information without the full detail
   * of the reply.
   *
   * Supports filtering, sorting, and pagination in reply list views.
   *
   * Linked directly to the discussion_board_replies Prisma model.
   */
  export type ISummary = {
    /**
     * Unique identifier of the reply.
     *
     * This UUID uniquely identifies the reply in the discussion board
     * system.
     */
    id: string & tags.Format<"uuid">;

    /**
     * ID of the post to which this reply belongs.
     *
     * This property associates the reply with its parent discussion post.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * ID of the member who authored the reply.
     *
     * Links the reply to the member account that created it.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Content of the reply.
     *
     * The reply content has length constraints and is subject to profanity
     * filtering.
     *
     * Typically between 5 and 1000 characters, providing users with concise
     * responses to discussion posts.
     */
    content: string;

    /**
     * Status of the reply.
     *
     * Indicates moderation or visibility state, such as 'public',
     * 'pending', or 'deleted'.
     */
    reply_status: string;

    /**
     * Creation timestamp of the reply.
     *
     * Recorded in ISO 8601 format, representing when the reply was
     * initially posted.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last update to the reply.
     *
     * Useful for moderation tracking and ensuring content freshness.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
