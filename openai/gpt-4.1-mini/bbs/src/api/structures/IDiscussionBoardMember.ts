import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Discussion Board Member entity representing registered users who can create
 * discussion topics and replies. This schema reflects the
 * discussion_board_members table, including essential member information such
 * as email, display name, and timestamps while excluding sensitive password
 * hashes from public exposure.
 *
 * Attributes are designed for secure interaction with user profiles, supporting
 * key operations like registration, authentication, and profile management.
 *
 * Properties:
 *
 * - Id: Unique identifier of the member.
 * - Email: User's unique email address used for login and communication.
 * - Display_name: Public display name.
 * - Created_at: Timestamp of account creation.
 * - Updated_at: Timestamp of last account update.
 * - Deleted_at: Optional soft-delete timestamp if the account is deactivated.
 *
 * This entity excludes password_hash from responses for security reasons,
 * handled only in secure authentication contexts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardMember = {
  /** Unique identifier of the member. */
  id: string & tags.Format<"uuid">;

  /** Member's unique email address for login and communication. */
  email: string;

  /** Public display name of the member. */
  display_name: string;

  /** Timestamp when the member account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to the member account. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp if the member account is deactivated. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardMember {
  /**
   * Payload schema for creating a new member user account with email and
   * plaintext password.
   */
  export type ICreate = {
    /** Member user's unique email address for login and communication */
    email: string & tags.Format<"email">;

    /**
     * Plain text password for member account creation, minimum 8 characters
     * including letters and numbers
     */
    password: string;

    /**
     * Display name to show publicly in posts and replies, typically the
     * user's chosen nickname
     */
    display_name: string;

    /** Optional email confirmation token, nullable */
    confirmation_token?: string | null | undefined;

    /**
     * User ID which is generated by the system, should not be provided
     * during creation, nullable
     */
    id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Long-lived refresh token for session management, usually not
     * submitted at creation, nullable
     */
    refresh_token?: string | null | undefined;

    /** Account version for optimistic concurrency control, nullable */
    version?: (number & tags.Type<"int32">) | null | undefined;

    /** Account creation timestamp, system managed, nullable */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Account last update timestamp, system managed, nullable */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Soft deletion timestamp if account is deactivated, nullable */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Hashed password stored internally, should not be provided during
     * creation, nullable
     */
    password_hash?: string | null | undefined;

    /** Password confirmation for client-side validation, nullable */
    password_confirm?: string | null | undefined;
  };

  /**
   * Authorization response containing JWT tokens for authenticated discussion
   * board members.
   *
   * This type is returned after successful authentication operations such as
   * login or registration (join). It includes the unique member ID and token
   * information necessary for APIs requiring an active session.
   *
   * The token property contains the access and refresh JWT tokens used for
   * maintaining authenticated sessions securely.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authorized member
     * (discussion_board_members.id).
     */
    id: string & tags.Format<"uuid">;

    /** Member's unique email address for login and communication. */
    email: string;

    /** Public display name of the member. */
    display_name: string;

    /** Timestamp when the member account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of the last update to the member account. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp if the member account is deactivated. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request payload for a discussion board member.
   *
   * Contains the email and plain text password credentials needed to
   * authenticate and obtain authorized JWT tokens. The password should never
   * be returned in responses and must be securely handled during
   * transmission.
   */
  export type ILogin = {
    /** Member's unique email address for login. Must be valid format. */
    email: string;

    /**
     * Plain text password for member authentication. Send only over secure
     * channels.
     */
    password: string;
  };

  /**
   * Request schema for refreshing a member user's JWT tokens. Provides the
   * valid refresh token and token type.
   */
  export type IRefresh = {
    /** Refresh token string for renewing JWT access tokens */
    refresh_token: string;

    /** Type of token, typically "refresh" for this operation */
    token_type: string;
  };

  /**
   * Payload for updating member information. All fields optional.
   *
   * Password updates must be plain text, not hashed. No system-managed
   * timestamps or IDs are accepted.
   *
   * Ownership and identity fields are immutable and not included.
   */
  export type IUpdate = {
    /** Updated email address; must be unique. */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Plain text password for update; backend will hash securely before
     * storage.
     */
    password?: string | undefined;

    /** Updated display name visible to others. */
    display_name?: string | undefined;
  };
}
