import { tags } from "typia";

/**
 * Discussion board post entity representing user-generated discussion topics.
 * Includes identifiers for category and member, title and body content, status,
 * and timestamps.
 *
 * This entity directly maps to the `discussion_board_posts` table in the Prisma
 * schema, adhering to all field constraints and relationships.
 *
 * Properties:
 *
 * - `id`: Unique post ID
 * - `category_id`: Reference to discussion category
 * - `member_id`: Author's member ID
 * - `title`: Post title with length constraints
 * - `body`: Post content with maximum length
 * - `post_status`: Moderation or visibility status
 * - `created_at`, `updated_at`: Timestamp fields
 * - `deleted_at`: Soft delete timestamp, nullable
 *
 * Ensure all content respects length validations and profanity filtering
 * defined in the business requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDiscussionBoardPost = {
  /** Unique identifier for the discussion post. */
  id: string & tags.Format<"uuid">;

  /** The identifier of the category this post belongs to. */
  category_id: string & tags.Format<"uuid">;

  /** The identifier of the member who authored this post. */
  member_id: string & tags.Format<"uuid">;

  /** Title of the discussion post, between 5 and 100 characters. */
  title: string;

  /** Body content of the discussion post, up to 5000 characters allowed. */
  body: string;

  /** The status of the post indicating moderation or visibility state. */
  post_status: string;

  /** Timestamp when the post was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to the post. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the post was soft deleted; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardDiscussionBoardPost {
  /**
   * Request parameters for searching and retrieving discussion board posts.
   * Defines the criteria used to filter, paginate, and sort discussion board
   * posts from the discussion_board_posts table.
   *
   * Properties include:
   *
   * - Page: Current page number for pagination.
   * - Limit: Maximum number of posts per page.
   * - Category_id: Optional UUID to filter posts by category.
   * - Member_id: Optional UUID to filter posts by author.
   * - Search: Optional string for full-text search against title or body.
   * - Order_by: Sorting parameter with allowed values.
   *
   * The schema supports pagination defaults and flexible filtering to support
   * efficient user browsing and searching.
   */
  export type IRequest = {
    /** Current page number. */
    page: number & tags.Type<"int32">;

    /** Maximum number of posts per page. */
    limit: number & tags.Type<"int32">;

    /** Optional filter to select posts by category using category's UUID. */
    category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter to select posts by member/author using their UUID. */
    member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional search term for full-text matching in post title or body. */
    search?: string | null | undefined;

    /** Sorting order for the posts. */
    order_by?:
      | "created_at ASC"
      | "created_at DESC"
      | "updated_at ASC"
      | "updated_at DESC"
      | undefined;
  };

  /**
   * Request body for creating a new discussion board post.
   *
   * Includes category reference, title, body content, and post status which
   * must be set appropriately (e.g., 'public' or 'pending').
   *
   * Business rules ensure input validation:
   *
   * - Title must be between 5 and 100 characters.
   * - Body content must not exceed 5000 characters.
   * - Post status must reflect moderation state.
   *
   * Sensitive or system-managed fields like IDs and timestamps are excluded
   * from the creation payload.
   */
  export type ICreate = {
    /** The identifier of the category this post belongs to. */
    category_id: string & tags.Format<"uuid">;

    /** Title of the discussion post, between 5 and 100 characters. */
    title: string;

    /** Body content of the discussion post, up to 5000 characters allowed. */
    body: string;

    /** The status of the post indicating moderation or visibility state. */
    post_status: string;
  };

  /**
   * Update an existing discussion board post by ID. Authorized users include
   * the member who created the post or moderators. This operation allows
   * modification of the title, body, or post_status with validation to
   * maintain title length within 5 to 100 characters and body length up to
   * 5000 characters. Profanity filtering applies.
   *
   * The post to update is identified by the discussionBoardPostId path
   * parameter. The user must have permission to update the post.
   *
   * On success, the API returns the full updated post object with timestamps
   * and status metadata.
   *
   * Fail responses occur for authorization failures, validation errors, or if
   * the post does not exist.
   */
  export type IUpdate = {
    /** Belonged category's discussion_board_categories.id. */
    category_id?: (string & tags.Format<"uuid">) | undefined;

    /** Authoring member's discussion_board_members.id. */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Post title between 5 and 100 characters, validated content. */
    title?: string | undefined;

    /**
     * Post body content up to 5000 characters, validated and
     * profanity-checked.
     */
    body?: string | undefined;

    /** Status of the post indicating moderation or visibility state. */
    post_status?: string | undefined;

    /** Timestamp when the post was created. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the post was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the post was soft deleted; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of a discussion board post for listing and overview
   * purposes.
   *
   * Includes essential fields such as identifiers, title, status, and
   * timestamps.
   *
   * Optimized to provide sufficient information for post listings with
   * minimal data overhead.
   *
   * Excludes the full body content to enhance performance in list views.
   *
   * This type corresponds directly to the discussion_board_posts model in the
   * Prisma schema.
   */
  export type ISummary = {
    /**
     * The unique identifier of the discussion board post.
     *
     * This is the primary key for the post entity, represented as a UUID
     * string, used to uniquely distinguish the post within the system.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the category to which this post belongs.
     *
     * This field links the post to a specific discussion category, such as
     * Economic or Political, enabling categorization and filtering.
     */
    category_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the member who authored the post.
     *
     * This property associates the post with its authoring member account.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * The title of the discussion post.
     *
     * The title is a concise summary of the post content, with length
     * constraints ensuring it is between 5 and 100 characters as per
     * business rules.
     */
    title: string;

    /**
     * The status of the post.
     *
     * Indicates the moderation or visibility state of the post, for
     * example, 'public', 'pending', or other status values defined by the
     * system.
     */
    post_status: string;

    /**
     * The timestamp of when the post was created.
     *
     * Represents the creation date and time in ISO 8601 format.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The timestamp of the last update made to the post.
     *
     * Reflects the date and time when the post was last modified, useful
     * for sorting or versioning purposes.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
