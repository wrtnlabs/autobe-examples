import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator users with full system privileges including user management,
 * system configuration, and moderation oversight. Admins authenticate via email
 * and password hash and have full control over system settings.
 *
 * This schema defines the structure of the discussion_board_admins table
 * entries including critical fields and timestamps.
 *
 * Sensitive fields such as password_hash are stored securely and are never
 * transmitted in plaintext.
 *
 * The deleted_at field allows for soft deletion marking of admin accounts.
 *
 * All fields follow strict typing and format to ensure data consistency and
 * security.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAdmin = {
  /** Primary Key identifier for the admin user. */
  id: string & tags.Format<"uuid">;

  /** Administrator's unique email address for login and management. */
  email: string;

  /**
   * Hashed password for administrator authentication. Stored securely, never
   * exposed in plaintext.
   */
  password_hash: string;

  /**
   * Display name for administrator identification in audit and management
   * logs.
   */
  display_name: string;

  /** Timestamp when the administrator account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the administrator account. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp if the administrator account is deactivated; null
   * if active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardAdmin {
  /**
   * Request payload to register a new administrator account.
   *
   * Includes the minimal necessary data for creating a valid admin user
   * account in the system.
   *
   * Ensures that email, plaintext password, and display name are provided to
   * satisfy all business validation rules.
   */
  export type IJoin = {
    /**
     * The administrator's unique email address used for login and
     * communication purposes.
     *
     * Must be a properly formatted email address, unique within the system
     * for the Admin role.
     */
    email: string & tags.Format<"email">;

    /**
     * The plaintext password for the admin account.
     *
     * It must comply with the system's security policy requiring sufficient
     * strength and complexity.
     *
     * Password hashing will be handled internally and the raw password is
     * only accepted during registration or password changes.
     */
    password: string;

    /**
     * The display name shown publicly and in audit logs for the
     * administrator.
     *
     * Should be a meaningful, human-readable string uniquely or
     * meaningfully identifying the admin user.
     */
    displayName: string;
  };

  /**
   * Authorized administrator data transfer object containing identification,
   * credentials, display name, and JWT authentication token information. This
   * type reflects the state of an authenticated administrator user with all
   * necessary details for session management and auditing purposes.
   */
  export type IAuthorized = {
    /** Unique identifier of the administrator user. */
    id: string & tags.Format<"uuid">;

    /** Administrator's unique email address for login and management. */
    email: string;

    /** Hashed password for administrator authentication. */
    password_hash: string;

    /**
     * Display name for administrator identification in audit and management
     * logs.
     */
    display_name: string;

    /** Timestamp when the administrator account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of the last update to the administrator account. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp if the administrator account is deactivated. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body schema for administrator login, requiring email and plain
   * text password. Optional properties support enhanced security features
   * such as two-factor authentication, CAPTCHA validation, client IP and user
   * agent tracking, device identification, optional metadata, and login
   * attempt timestamp.
   */
  export type ILogin = {
    /** Administrator's email address used for login. */
    email: string;

    /** Plain text password for authentication. */
    password: string;

    /** Optional flag to remember the login session for extended duration. */
    remember_me?: boolean | null | undefined;

    /** Optional two-factor authentication code if required. */
    two_factor_code?: string | null | undefined;

    /** Optional CAPTCHA token for bot prevention. */
    captcha_token?: string | null | undefined;

    /** Optional IP address of the client. */
    ip_address?: string | null | undefined;

    /** Optional user agent string of the client browser or app. */
    user_agent?: string | null | undefined;

    /** Optional unique device identifier for login. */
    device_id?: string | null | undefined;

    /** Optional metadata about the login attempt. */
    metadata?: {} | undefined;

    /** Timestamp when the login attempt was created. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Payload for requesting a token refresh for an admin user, containing the
   * required refresh token to generate new access tokens.
   */
  export type IRefresh = {
    /** A valid refresh token previously issued by the system. */
    refresh_token: string;
  };

  /**
   * Update DTO for discussion board administrator user entity. Allows
   * modification of email, password hash, display name, update timestamp, and
   * soft delete timestamp.
   *
   * Used for administrative updates to administrator accounts in the
   * discussion_board_admins table.
   */
  export type IUpdate = {
    /**
     * Administrator's unique email address for login and management. Must
     * be unique.
     */
    email?: string | undefined;

    /** Hashed password for administrator authentication. */
    password_hash?: string | undefined;

    /**
     * Display name for administrator identification in audit and management
     * logs.
     */
    display_name?: string | undefined;

    /** Timestamp of last update to the administrator account. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Soft delete timestamp if the administrator account is deactivated.
     * Null if active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
