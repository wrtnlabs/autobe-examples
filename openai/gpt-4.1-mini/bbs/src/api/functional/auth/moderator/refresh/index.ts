import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuthRefresh } from "../../../../structures/IAuthRefresh";
import { IDiscussionBoardModerator } from "../../../../structures/IDiscussionBoardModerator";

/**
 * Refresh JWT authentication tokens for moderator.
 *
 * Refresh authentication tokens for a moderator with a valid refresh token.
 * Validates refresh token, issues new JWT access and refresh tokens.
 *
 * @param props.connection
 * @param props.body Refresh token request containing valid refresh token
 *   string.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/refresh
 * @accessor api.functional.auth.moderator.refresh.refreshModerator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refreshModerator(
  connection: IConnection,
  props: refreshModerator.Props,
): Promise<refreshModerator.Response> {
  const output: refreshModerator.Response =
    true === connection.simulate
      ? refreshModerator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refreshModerator.METADATA,
            path: refreshModerator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refreshModerator {
  export type Props = {
    /** Refresh token request containing valid refresh token string. */
    body: IAuthRefresh;
  };
  export type Body = IAuthRefresh;
  export type Response = IDiscussionBoardModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/refresh";
  export const random = (): IDiscussionBoardModerator.IAuthorized =>
    typia.random<IDiscussionBoardModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refreshModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refreshModerator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
