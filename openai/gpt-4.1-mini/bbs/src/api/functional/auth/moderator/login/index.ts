import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerator } from "../../../../structures/IDiscussionBoardModerator";

/**
 * Login existing moderator and obtain authentication tokens.
 *
 * Authenticate moderator credentials for login by verifying email and password
 * hash against discussion_board_moderators table. Issue JWT access and refresh
 * tokens upon success. Return failure on invalid credentials.
 *
 * @param props.connection
 * @param props.body Login credentials for a moderator including email and
 *   password.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/login
 * @accessor api.functional.auth.moderator.login.loginModerator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function loginModerator(
  connection: IConnection,
  props: loginModerator.Props,
): Promise<loginModerator.Response> {
  const output: loginModerator.Response =
    true === connection.simulate
      ? loginModerator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...loginModerator.METADATA,
            path: loginModerator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace loginModerator {
  export type Props = {
    /** Login credentials for a moderator including email and password. */
    body: IDiscussionBoardModerator.ILogin;
  };
  export type Body = IDiscussionBoardModerator.ILogin;
  export type Response = IDiscussionBoardModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/login";
  export const random = (): IDiscussionBoardModerator.IAuthorized =>
    typia.random<IDiscussionBoardModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: loginModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: loginModerator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
