import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerator } from "../../../../structures/IDiscussionBoardModerator";

/**
 * Create a new moderator account in discussion_board_moderators table.
 *
 * Registrar moderator accounts in discussion_board_moderators table. Requires
 * validated unique email, hashed password, and display name. Payload includes
 * authentication credentials and profile info. Only unique emails allowed as
 * enforced by database constraints. Password must meet minimal security
 * standards as per business rules. Returns moderator authorized tokens on
 * success.
 *
 * @param props.connection
 * @param props.body Creation info for a new moderator account including
 *   credentials and display name.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/join
 * @accessor api.functional.auth.moderator.join.joinModerator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinModerator(
  connection: IConnection,
  props: joinModerator.Props,
): Promise<joinModerator.Response> {
  const output: joinModerator.Response =
    true === connection.simulate
      ? joinModerator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinModerator.METADATA,
            path: joinModerator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinModerator {
  export type Props = {
    /**
     * Creation info for a new moderator account including credentials and
     * display name.
     */
    body: IDiscussionBoardModerator.ICreate;
  };
  export type Body = IDiscussionBoardModerator.ICreate;
  export type Response = IDiscussionBoardModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/join";
  export const random = (): IDiscussionBoardModerator.IAuthorized =>
    typia.random<IDiscussionBoardModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinModerator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
