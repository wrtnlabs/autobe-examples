import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardGuest } from "../../../../structures/IDiscussionBoardGuest";

/**
 * Create a new guest session and issue temporary tokens, referencing
 * discussion_board_guests table.
 *
 * This operation allows guest users to register by creating a temporary guest
 * session with a unique session token stored in the database. It uses the
 * discussion_board_guests table fields such as session_token, created_at, and
 * updated_at to manage guest sessions.
 *
 * This operation is designed for unauthenticated site visitors who want to have
 * a temporary identity to browse content with limited access. Security
 * considerations include issuing short-lived JWT tokens tied to the guest
 * session token.
 *
 * The path allows guests to create new temporary sessions without login,
 * supporting ephemeral guest access.
 *
 * Related operations include token refresh to renew access tokens for guests.
 *
 * Errors must be appropriately handled if session token generation or database
 * insertion fails.
 *
 * @param props.connection
 * @param props.body Guest registration information to create a new guest
 *   session.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join.joinGuest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinGuest(
  connection: IConnection,
  props: joinGuest.Props,
): Promise<joinGuest.Response> {
  const output: joinGuest.Response =
    true === connection.simulate
      ? joinGuest.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinGuest.METADATA,
            path: joinGuest.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinGuest {
  export type Props = {
    /** Guest registration information to create a new guest session. */
    body: IDiscussionBoardGuest.ICreate;
  };
  export type Body = IDiscussionBoardGuest.ICreate;
  export type Response = IDiscussionBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IDiscussionBoardGuest.IAuthorized =>
    typia.random<IDiscussionBoardGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinGuest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinGuest.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
