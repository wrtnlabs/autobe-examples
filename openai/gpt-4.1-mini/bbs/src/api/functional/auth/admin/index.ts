import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdmin } from "../../../structures/IDiscussionBoardAdmin";

/**
 * Admin role registration operation creating new admin account in
 * 'discussion_board_admins' table.
 *
 * This is the registration (join) API for the Admin role. It enables creation
 * of a new admin account using the unique email and a secure hashed password.
 * The database schema 'discussion_board_admins' table includes fields such as
 * 'email', 'password_hash', 'display_name', and timestamps. This operation
 * ensures that only valid registration data is accepted and stored. Email must
 * be unique.
 *
 * Upon successful registration, a JWT access token and a refresh token are
 * issued, granting authorized access.
 *
 * This endpoint is publicly accessible without prior authentication.
 *
 * Related operations: login (authenticate admin), refresh (renew tokens).
 *
 * Security considerations include proper password hashing and input validation
 * to prevent duplicate accounts and security breaches.
 *
 * This operation reflects the member lifecycle starting point specifically
 * tailored for admin users.
 *
 * @param props.connection
 * @param props.body Admin registration data: unique email, password, display
 *   name
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Admin registration data: unique email, password, display name */
    body: IDiscussionBoardAdmin.IJoin;
  };
  export type Body = IDiscussionBoardAdmin.IJoin;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin role login operation authenticating existing admin accounts.
 *
 * This is the login API for the Admin role. Admin users provide their email and
 * password for authentication. Credentials are checked against the
 * 'discussion_board_admins' table storing unique emails and hashed passwords.
 *
 * On successful validation, JWT tokens are issued for access and refresh.
 *
 * This endpoint is publicly accessible and serves as the primary authentication
 * gateway for system administrators.
 *
 * Security considerations include protection against brute force attacks and
 * secure password verification.
 *
 * This operation depends on the join operation for account creation.
 *
 * Related operations include join and refresh.
 *
 * Soft delete is not relevant here.
 *
 * @param props.connection
 * @param props.body Admin login credentials: email and password
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Admin login credentials: email and password */
    body: IDiscussionBoardAdmin.ILogin;
  };
  export type Body = IDiscussionBoardAdmin.ILogin;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin role token refresh operation renewing JWT access tokens.
 *
 * This is the token refresh API for the Admin role. It accepts a valid refresh
 * token and issues a new JWT access token to maintain an active session.
 *
 * This endpoint requires a valid refresh token and is accessible only to
 * authenticated admins.
 *
 * Security is paramount: the refresh token is validated rigorously to prevent
 * token misuse.
 *
 * Related endpoints are join (registration) and login (authentication).
 *
 * This operation helps maintain uninterrupted admin sessions with reduced login
 * frequency.
 *
 * The underlying schema is 'discussion_board_admins' reflecting the admin user
 * base.
 *
 * @param props.connection
 * @param props.body Admin refresh token request
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Admin refresh token request */
    body: IDiscussionBoardAdmin.IRefresh;
  };
  export type Body = IDiscussionBoardAdmin.IRefresh;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
