import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardGuest } from "../../../../structures/IDiscussionBoardDiscussionBoardGuest";
import { IPageIDiscussionBoardDiscussionBoardGuest } from "../../../../structures/IPageIDiscussionBoardDiscussionBoardGuest";

/**
 * Search and retrieve a filtered, paginated list of discussion board guest
 * sessions.
 *
 * Retrieve a filtered and paginated list of discussion board guest sessions.
 * This operation enables efficient paging, searching, and filtering by guest
 * session properties including session tokens and timestamps.
 *
 * The operation targets the discussion_board_guests table defined in the Prisma
 * schema, which records guest users with unique session tokens and session
 * lifecycle timestamps. Pagination allows clients to control page size and
 * number for scalability.
 *
 * Security considerations include exposing guest session data only to
 * authorized services or administrative users. No authentication requirement is
 * assumed here, but real-world implementations should secure this endpoint
 * appropriately.
 *
 * Validation includes supporting multiple search criteria for guest sessions.
 * This operation returns summarized guest session information optimized for
 * listings, such as session token and timestamps.
 *
 * This operation supports the basic management of guest sessions, providing
 * analytics or cleanup capabilities as needed.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   guest sessions
 * @path /discussionBoard/admin/discussionBoardGuests
 * @accessor api.functional.discussionBoard.admin.discussionBoardGuests.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering guest
     * sessions
     */
    body: IDiscussionBoardDiscussionBoardGuest.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardGuest.IRequest;
  export type Response = IPageIDiscussionBoardDiscussionBoardGuest.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/discussionBoardGuests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/discussionBoardGuests";
  export const random =
    (): IPageIDiscussionBoardDiscussionBoardGuest.ISummary =>
      typia.random<IPageIDiscussionBoardDiscussionBoardGuest.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a single discussion board guest session.
 *
 * Retrieve detailed information about a specific guest session by its unique
 * ID. This operation accesses the discussion_board_guests table from the Prisma
 * schema and returns all relevant session details.
 *
 * Access to this endpoint should be restricted to admin users to protect
 * sensitive guest session information.
 *
 * The response includes the session token, creation time, update time, and
 * soft-delete status if applicable.
 *
 * This detailed view aids in guest session management, troubleshooting, and
 * auditing.
 *
 * @param props.connection
 * @param props.discussionBoardGuestId Unique identifier of the target
 *   discussion board guest session
 * @path /discussionBoard/admin/discussionBoardGuests/:discussionBoardGuestId
 * @accessor api.functional.discussionBoard.admin.discussionBoardGuests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target discussion board guest session */
    discussionBoardGuestId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardDiscussionBoardGuest;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/discussionBoardGuests/:discussionBoardGuestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardGuests/${encodeURIComponent(props.discussionBoardGuestId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardGuest =>
    typia.random<IDiscussionBoardDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardGuestId")(() =>
        typia.assert(props.discussionBoardGuestId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update guest session information by discussionBoardGuestId.
 *
 * Update a guest session entity identified by the unique
 * discussionBoardGuestId.
 *
 * This operation permits modification of the guest session token and updated
 * timestamps to reflect session activity or state changes. It supports setting
 * a soft deletion timestamp to invalidate the guest session without physical
 * deletion.
 *
 * Authorization: This endpoint is likely restricted to system processes or
 * administrators managing guest session lifecycles.
 *
 * The underlying database table corresponds to 'discussion_board_guests' in the
 * Prisma schema, which stores guest sessions with fields such as session_token,
 * created_at, updated_at, and deleted_at as a soft deletion marker.
 *
 * Request validation must ensure the uniqueness of the session_token upon
 * update.
 *
 * Security considerations include preventing unauthorized manipulation of guest
 * session tokens and maintaining session integrity.
 *
 * No response body is returned after successful update, though standard HTTP
 * status codes indicate operation success or failure.
 *
 * @param props.connection
 * @param props.discussionBoardGuestId Unique identifier of the guest session to
 *   update
 * @param props.body Guest session update data
 * @path /discussionBoard/admin/discussionBoardGuests/:discussionBoardGuestId
 * @accessor api.functional.discussionBoard.admin.discussionBoardGuests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the guest session to update */
    discussionBoardGuestId: string & tags.Format<"uuid">;

    /** Guest session update data */
    body: IDiscussionBoardDiscussionBoardGuest.IUpdate;
  };
  export type Body = IDiscussionBoardDiscussionBoardGuest.IUpdate;
  export type Response = IDiscussionBoardDiscussionBoardGuest;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/discussionBoardGuests/:discussionBoardGuestId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/discussionBoardGuests/${encodeURIComponent(props.discussionBoardGuestId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardGuest =>
    typia.random<IDiscussionBoardDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardGuestId")(() =>
        typia.assert(props.discussionBoardGuestId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete guest session by discussionBoardGuestId.
 *
 * Permanently delete a guest session entity by its unique
 * discussionBoardGuestId.
 *
 * This operation removes the guest session record physically from the database,
 * fully erasing associated session_token and timestamps.
 *
 * Authorization: Only administrators with proper authorization roles can
 * perform this irreversible operation.
 *
 * This endpoint supports system hygiene and management of transient guest
 * session data.
 *
 * There is no request body or response content. Success or failure is indicated
 * with HTTP status codes.
 *
 * @param props.connection
 * @param props.discussionBoardGuestId Unique identifier of the guest session to
 *   delete
 * @path /discussionBoard/admin/discussionBoardGuests/:discussionBoardGuestId
 * @accessor api.functional.discussionBoard.admin.discussionBoardGuests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the guest session to delete */
    discussionBoardGuestId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/discussionBoardGuests/:discussionBoardGuestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardGuests/${encodeURIComponent(props.discussionBoardGuestId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardGuestId")(() =>
        typia.assert(props.discussionBoardGuestId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
