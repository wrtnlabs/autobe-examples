import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardModerator } from "../../../../structures/IDiscussionBoardDiscussionBoardModerator";
import { IPageIDiscussionBoardDiscussionBoardModerator } from "../../../../structures/IPageIDiscussionBoardDiscussionBoardModerator";
import { IDiscussionBoardModerator } from "../../../../structures/IDiscussionBoardModerator";

/**
 * Retrieve paginated list of discussion board moderators.
 *
 * Retrieve a paginated list of discussion board moderators, supporting
 * filtering by email and display name, as well as pagination and sorting.
 *
 * This operation is intended for administrative or system user interfaces where
 * moderator accounts need to be managed or reviewed.
 *
 * Permissions are restricted to authorized roles due to the sensitive nature of
 * moderator account information.
 *
 * The operation accesses the discussion_board_moderators table, which stores
 * moderator email, hashed password, display name, and timestamps, along with
 * soft delete capability via the deleted_at field.
 *
 * Validation rules include filtering based on indexed searchable fields and
 * ensuring pagination parameters fall within reasonable limits.
 *
 * Related operations include retrieval of individual moderator details and
 * management actions like creation, updating, or deletion of moderator
 * accounts.
 *
 * Responses provide moderator summary information for efficient list displays.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   discussion board moderators
 * @path /discussionBoard/admin/discussionBoardModerators
 * @accessor api.functional.discussionBoard.admin.discussionBoardModerators.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering discussion
     * board moderators
     */
    body: IDiscussionBoardDiscussionBoardModerator.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardModerator.IRequest;
  export type Response = IPageIDiscussionBoardDiscussionBoardModerator.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/discussionBoardModerators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/discussionBoardModerators";
  export const random =
    (): IPageIDiscussionBoardDiscussionBoardModerator.ISummary =>
      typia.random<IPageIDiscussionBoardDiscussionBoardModerator.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve discussion board moderator detail by ID.
 *
 * Retrieve detailed information of a discussion board moderator by ID.
 *
 * Permission to access this data is limited to authorized administrators.
 *
 * Returns full record including email, display name, timestamps, and status
 * from discussion_board_moderators table.
 *
 * Path parameter `discussionBoardModeratorId` must be a valid UUID.
 *
 * Includes soft delete considerations where a non-null deleted_at indicates
 * deactivated account.
 *
 * @param props.connection
 * @param props.discussionBoardModeratorId Unique identifier of the discussion
 *   board moderator
 * @path /discussionBoard/admin/discussionBoardModerators/:discussionBoardModeratorId
 * @accessor api.functional.discussionBoard.admin.discussionBoardModerators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the discussion board moderator */
    discussionBoardModeratorId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardDiscussionBoardModerator;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/discussionBoardModerators/:discussionBoardModeratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardModerators/${encodeURIComponent(props.discussionBoardModeratorId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardModerator =>
    typia.random<IDiscussionBoardDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardModeratorId")(() =>
        typia.assert(props.discussionBoardModeratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion board moderator by ID.
 *
 * Update a discussion board moderator's information by their unique identifier.
 *
 * This operation allows for modifying the moderator's email, password hash, and
 * display name, along with updating timestamps such as updated_at and
 * optionally marking the account as deactivated by setting deleted_at.
 *
 * Only authorized users such as admins should be permitted to perform this
 * update as moderators have elevated privileges and sensitive credentials.
 *
 * The operation interfaces directly with the discussion_board_moderators table
 * in the database and must follow all schema constraints including unique email
 * addresses and valid UUIDs.
 *
 * Validation of email format and password strength should be performed at the
 * application layer.
 *
 * If successful, the updated moderator object is returned in the response.
 * Errors may result from validation failures or unauthorized access.
 *
 * Related operations include creating new moderators, deleting moderators, and
 * listing moderators.
 *
 * This operation uses HTTP PUT to replace or update a moderator's information.
 *
 * @param props.connection
 * @param props.discussionBoardModeratorId Unique identifier of the discussion
 *   board moderator
 * @param props.body Update information for the discussion board moderator
 * @path /discussionBoard/admin/discussionBoardModerators/:discussionBoardModeratorId
 * @accessor api.functional.discussionBoard.admin.discussionBoardModerators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the discussion board moderator */
    discussionBoardModeratorId: string & tags.Format<"uuid">;

    /** Update information for the discussion board moderator */
    body: IDiscussionBoardModerator.IUpdate;
  };
  export type Body = IDiscussionBoardModerator.IUpdate;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/discussionBoardModerators/:discussionBoardModeratorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/discussionBoardModerators/${encodeURIComponent(props.discussionBoardModeratorId ?? "null")}`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardModeratorId")(() =>
        typia.assert(props.discussionBoardModeratorId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a discussion board moderator by ID.
 *
 * Delete a discussion board moderator permanently by their unique ID.
 *
 * This operation removes the moderator's record from the
 * discussion_board_moderators table entirely. It must be performed only by
 * users with administrative rights to prevent accidental or malicious removal
 * of privileged accounts.
 *
 * Because this action is destructive and irreversible, it is critical to
 * enforce strict authorization controls.
 *
 * The endpoint accepts the moderator's unique ID as a path parameter and
 * requires no request body.
 *
 * On success, no response body is returned.
 *
 * Error scenarios include attempting to delete a non-existent moderator or
 * lacking proper permissions.
 *
 * Related operations include updating moderator info and creating new
 * moderators.
 *
 * This operation uses the HTTP DELETE method to perform the removal.
 *
 * @param props.connection
 * @param props.discussionBoardModeratorId Unique identifier of the discussion
 *   board moderator
 * @path /discussionBoard/admin/discussionBoardModerators/:discussionBoardModeratorId
 * @accessor api.functional.discussionBoard.admin.discussionBoardModerators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the discussion board moderator */
    discussionBoardModeratorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/discussionBoardModerators/:discussionBoardModeratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardModerators/${encodeURIComponent(props.discussionBoardModeratorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardModeratorId")(() =>
        typia.assert(props.discussionBoardModeratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
