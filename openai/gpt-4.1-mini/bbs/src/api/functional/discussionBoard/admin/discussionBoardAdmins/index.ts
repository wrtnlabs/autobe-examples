import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardAdmin } from "../../../../structures/IDiscussionBoardDiscussionBoardAdmin";
import { IPageIDiscussionBoardDiscussionBoardAdmin } from "../../../../structures/IPageIDiscussionBoardDiscussionBoardAdmin";
import { IDiscussionBoardAdmin } from "../../../../structures/IDiscussionBoardAdmin";

/**
 * Search and retrieve a filtered, paginated list of discussion board
 * administrators.
 *
 * Retrieve a filtered and paginated list of discussion board administrators
 * from the system. This operation enables viewing administrator account
 * summaries with sorting and filtering capabilities based on email, display
 * name, and creation date.
 *
 * Security considerations restrict this operation to authenticated users with
 * administrator roles, ensuring that sensitive admin account information is
 * protected.
 *
 * This operation directly interfaces with the discussion_board_admins Prisma
 * table, utilizing all available fields such as email, display_name,
 * created_at, and updated_at timestamps. The response provides pagination
 * metadata and a list of administrator summaries.
 *
 * Validation rules include support for search filters and pagination parameters
 * to optimize data retrieval efficiency. Errors such as invalid query
 * parameters are handled by standard API error responses.
 *
 * This operation complements other admin-specific endpoints that may manipulate
 * individual admin user details.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for discussion
 *   board administrator filtering
 * @path /discussionBoard/admin/discussionBoardAdmins
 * @accessor api.functional.discussionBoard.admin.discussionBoardAdmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for discussion board
     * administrator filtering
     */
    body: IDiscussionBoardDiscussionBoardAdmin.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardAdmin.IRequest;
  export type Response = IPageIDiscussionBoardDiscussionBoardAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/discussionBoardAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/discussionBoardAdmins";
  export const random =
    (): IPageIDiscussionBoardDiscussionBoardAdmin.ISummary =>
      typia.random<IPageIDiscussionBoardDiscussionBoardAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a discussion board administrator by ID.
 *
 * Retrieve detailed information of a specific discussion board administrator by
 * ID. This operation fetches all relevant admin account data.
 *
 * Access control ensures only admin role users can access this sensitive
 * information, maintaining strict security and confidentiality.
 *
 * The retrieved details include email, display name, timestamps, and soft
 * deletion status as defined in the discussion_board_admins Prisma table.
 *
 * Error handling includes returning not found errors for invalid or missing
 * IDs. This operation is often used in admin management UIs to view and audit
 * admin accounts.
 *
 * @param props.connection
 * @param props.discussionBoardAdminId Unique identifier of the target
 *   discussion board administrator
 * @path /discussionBoard/admin/discussionBoardAdmins/:discussionBoardAdminId
 * @accessor api.functional.discussionBoard.admin.discussionBoardAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target discussion board administrator */
    discussionBoardAdminId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardDiscussionBoardAdmin;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/discussionBoardAdmins/:discussionBoardAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardAdmins/${encodeURIComponent(props.discussionBoardAdminId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardAdminId")(() =>
        typia.assert(props.discussionBoardAdminId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing administrator user in discussion_board_admins table.
 *
 * This API endpoint allows updating an existing administrator user's
 * information in the discussion board system. The administrator is identified
 * by their unique ID provided in the path parameter. This operation supports
 * modification of the administrator's email, password hash, and display name.
 * Updating an administrator is a restricted operation, requiring proper
 * authorization to prevent unauthorized access.
 *
 * The underlying database entity is discussion_board_admins, which stores
 * administrator credentials and profile information. All updates must maintain
 * data integrity and uniqueness, especially the unique email constraint.
 *
 * Security considerations require that only authenticated users with admin role
 * can perform this update. Proper validation is applied on input data to ensure
 * compliance with password policies and email formats.
 *
 * This operation pairs with other admin management operations for creating and
 * deleting administrator accounts, forming a complete admin user lifecycle
 * management API.
 *
 * Typical error responses involve invalid UUID format, data validation errors,
 * or authorization failures.
 *
 * This performs a hard update of the administrator record in the database,
 * replacing the fields with the provided data.
 *
 * @param props.connection
 * @param props.discussionBoardAdminId Unique identifier of the target
 *   administrator user
 * @param props.body Administrator user update information
 * @path /discussionBoard/admin/discussionBoardAdmins/:discussionBoardAdminId
 * @accessor api.functional.discussionBoard.admin.discussionBoardAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target administrator user */
    discussionBoardAdminId: string & tags.Format<"uuid">;

    /** Administrator user update information */
    body: IDiscussionBoardAdmin.IUpdate;
  };
  export type Body = IDiscussionBoardAdmin.IUpdate;
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/discussionBoardAdmins/:discussionBoardAdminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/discussionBoardAdmins/${encodeURIComponent(props.discussionBoardAdminId ?? "null")}`;
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardAdminId")(() =>
        typia.assert(props.discussionBoardAdminId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an administrator user by ID from discussion_board_admins table.
 *
 * This API endpoint permanently deletes an administrator user from the
 * discussion board system identified by their unique ID. Only users with the
 * admin role are authorized to perform this operation.
 *
 * The deletion performs a hard removal from the discussion_board_admins table
 * in the database. All related records dependent on this administrator user
 * will be subject to cascading deletes as per relational constraints.
 *
 * Security considerations enforce strict role checking to prevent unauthorized
 * deletions. This operation is irreversible, so clients must ensure
 * confirmation before requesting this deletion.
 *
 * No request body is required for this operation. The path parameter uniquely
 * identifies the administrator to be deleted.
 *
 * This endpoint is typically used for administrative user lifecycle cleanup and
 * revocation of access.
 *
 * @param props.connection
 * @param props.discussionBoardAdminId Unique identifier of the target
 *   administrator user
 * @path /discussionBoard/admin/discussionBoardAdmins/:discussionBoardAdminId
 * @accessor api.functional.discussionBoard.admin.discussionBoardAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target administrator user */
    discussionBoardAdminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/discussionBoardAdmins/:discussionBoardAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardAdmins/${encodeURIComponent(props.discussionBoardAdminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardAdminId")(() =>
        typia.assert(props.discussionBoardAdminId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
