import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardMember } from "../../../../structures/IDiscussionBoardDiscussionBoardMember";
import { IPageIDiscussionBoardDiscussionBoardMember } from "../../../../structures/IPageIDiscussionBoardDiscussionBoardMember";

/**
 * Search and retrieve discussion board members with pagination and filters.
 *
 * This operation allows clients to search and retrieve a filtered, paginated
 * list of discussion board registered members. It supports query parameters
 * such as partial matching on email and display name, as well as sorting and
 * pagination controls.
 *
 * Authorization is required as member information is sensitive and should only
 * be accessed by administrators or system staff.
 *
 * The operation corresponds directly to the discussion_board_members table,
 * reflecting properties such as email, display name, and timestamps. Results
 * are returned in a paginated format optimized for UI listing.
 *
 * This search operation is foundational for user management features and may be
 * used in conjunction with other member detail and update APIs.
 *
 * Error handling includes validation of input search criteria and pagination
 * parameters. Results include only existing members who are not soft-deleted
 * (deleted_at is null).
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   discussion board members
 * @path /discussionBoard/admin/discussionBoardMembers
 * @accessor api.functional.discussionBoard.admin.discussionBoardMembers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering discussion
     * board members
     */
    body: IDiscussionBoardDiscussionBoardMember.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardMember.IRequest;
  export type Response = IPageIDiscussionBoardDiscussionBoardMember;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/discussionBoardMembers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/discussionBoardMembers";
  export const random = (): IPageIDiscussionBoardDiscussionBoardMember =>
    typia.random<IPageIDiscussionBoardDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific discussion board member by ID.
 *
 * Retrieve detailed profile information of a single discussion board member by
 * their unique ID. This includes public member attributes such as email and
 * display name but excludes sensitive password hashes.
 *
 * Access to this operation is restricted to administrators to ensure member
 * confidentiality.
 *
 * This operation corresponds to the discussion_board_members table in the
 * Prisma schema and returns the member's full details except password hashes.
 *
 * If the member does not exist or is soft-deleted (deleted_at is not null), the
 * operation returns a not found error.
 *
 * This function supports administrative user management workflows.
 *
 * @param props.connection
 * @param props.discussionBoardMemberId Unique identifier of the discussion
 *   board member
 * @path /discussionBoard/admin/discussionBoardMembers/:discussionBoardMemberId
 * @accessor api.functional.discussionBoard.admin.discussionBoardMembers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the discussion board member */
    discussionBoardMemberId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardDiscussionBoardMember;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/discussionBoardMembers/:discussionBoardMemberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/discussionBoardMembers/${encodeURIComponent(props.discussionBoardMemberId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardMember =>
    typia.random<IDiscussionBoardDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardMemberId")(() =>
        typia.assert(props.discussionBoardMemberId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
