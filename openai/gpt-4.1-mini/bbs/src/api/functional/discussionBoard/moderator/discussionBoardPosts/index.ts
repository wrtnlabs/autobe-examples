import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardPost } from "../../../../structures/IDiscussionBoardDiscussionBoardPost";
export * as discussionBoardReplies from "./discussionBoardReplies/index";

/**
 * Update a discussion board post by ID.
 *
 * Update an existing discussion board post by ID. Authorized users include the
 * member who created the post or moderators. This operation allows modification
 * of the title, body, or post_status with validation to maintain title length
 * within 5 to 100 characters and body length up to 5000 characters. Profanity
 * filtering applies.
 *
 * The post to update is identified by the discussionBoardPostId path parameter.
 * The user must have permission to update the post.
 *
 * On success, the API returns the full updated post object with timestamps and
 * status metadata.
 *
 * Fail responses occur for authorization failures, validation errors, or if the
 * post does not exist.
 *
 * @param props.connection
 * @param props.discussionBoardPostId Unique identifier of the discussion board
 *   post to be updated
 * @param props.body Updated information for the discussion board post.
 * @path /discussionBoard/moderator/discussionBoardPosts/:discussionBoardPostId
 * @accessor api.functional.discussionBoard.moderator.discussionBoardPosts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the discussion board post to be updated */
    discussionBoardPostId: string & tags.Format<"uuid">;

    /** Updated information for the discussion board post. */
    body: IDiscussionBoardDiscussionBoardPost.IUpdate;
  };
  export type Body = IDiscussionBoardDiscussionBoardPost.IUpdate;
  export type Response = IDiscussionBoardDiscussionBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderator/discussionBoardPosts/:discussionBoardPostId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderator/discussionBoardPosts/${encodeURIComponent(props.discussionBoardPostId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardPost =>
    typia.random<IDiscussionBoardDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardPostId")(() =>
        typia.assert(props.discussionBoardPostId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a discussion board post by its ID.
 *
 * Allows moderators to permanently delete a discussion board post identified by
 * its UUID. This endpoint enforces authorization to restrict access to users
 * with the moderator role. Upon successful deletion, the post and all its
 * associated replies are removed from the database due to cascade delete
 * constraints. No request payload is required. The operation returns no content
 * in the response. Clients should handle possible errors such as attempting to
 * delete a non-existent post or lacking proper permissions externally.
 *
 * @param props.connection
 * @param props.discussionBoardPostId Unique identifier of the discussion board
 *   post to be deleted
 * @path /discussionBoard/moderator/discussionBoardPosts/:discussionBoardPostId
 * @accessor api.functional.discussionBoard.moderator.discussionBoardPosts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the discussion board post to be deleted */
    discussionBoardPostId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderator/discussionBoardPosts/:discussionBoardPostId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/discussionBoardPosts/${encodeURIComponent(props.discussionBoardPostId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardPostId")(() =>
        typia.assert(props.discussionBoardPostId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
