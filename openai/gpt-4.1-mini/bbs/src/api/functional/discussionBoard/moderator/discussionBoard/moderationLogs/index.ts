import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerationLog } from "../../../../../structures/IDiscussionBoardModerationLog";
import { IPageIDiscussionBoardModerationLog } from "../../../../../structures/IPageIDiscussionBoardModerationLog";

/**
 * Retrieve a filtered, paginated list of moderation log summaries.
 *
 * Retrieve a paginated list of moderation logs from the discussion board.
 *
 * This operation allows moderators and admins to search, filter, and review
 * logs detailing actions taken on posts and replies including edit, delete, and
 * approve operations.
 *
 * Security considerations include restricting access to authorized roles only
 * and ensuring sensitive user information in moderation action details is
 * appropriately handled.
 *
 * The moderation logs are maintained in the discussion_board_moderation_logs
 * table as defined in the Prisma schema. Each log record includes references to
 * the affected post or reply, the moderator responsible, the type of action
 * performed, any detailed notes, and timestamps.
 *
 * Typical usage involves fetching logs filtered by action types, associated
 * moderators, date ranges, or affected entities to support auditing and
 * compliance.
 *
 * Errors include unauthorized access (403) and invalid query parameters with
 * appropriate HTTP response codes.
 *
 * Clients should invoke the GET operation on specific log entries to retrieve
 * full details by log ID.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for moderation
 *   logs
 * @path /discussionBoard/moderator/discussionBoard/moderationLogs
 * @accessor api.functional.discussionBoard.moderator.discussionBoard.moderationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for moderation logs */
    body: IDiscussionBoardModerationLog.IRequest;
  };
  export type Body = IDiscussionBoardModerationLog.IRequest;
  export type Response = IPageIDiscussionBoardModerationLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderator/discussionBoard/moderationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/discussionBoard/moderator/discussionBoard/moderationLogs";
  export const random = (): IPageIDiscussionBoardModerationLog.ISummary =>
    typia.random<IPageIDiscussionBoardModerationLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed moderation log by ID.
 *
 * Get detailed information about a specific moderation log entry.
 *
 * This operation is used by moderators and admins to inspect detailed audit
 * records of moderation actions on posts or replies.
 *
 * It includes information such as the action type (edit, delete, approve),
 * detailed notes, the moderator responsible, and timestamps.
 *
 * The underlying data originates from the discussion_board_moderation_logs
 * table, ensuring a single source of truth.
 *
 * Potential errors include not found (404) if the specified log ID does not
 * exist, and unauthorized (403) if the user lacks permissions.
 *
 * Proper validation of the UUID parameter is enforced.
 *
 * @param props.connection
 * @param props.moderationLogId Unique identifier of the moderation log entry
 * @path /discussionBoard/moderator/discussionBoard/moderationLogs/:moderationLogId
 * @accessor api.functional.discussionBoard.moderator.discussionBoard.moderationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the moderation log entry */
    moderationLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardModerationLog;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/discussionBoard/moderationLogs/:moderationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/discussionBoard/moderationLogs/${encodeURIComponent(props.moderationLogId ?? "null")}`;
  export const random = (): IDiscussionBoardModerationLog =>
    typia.random<IDiscussionBoardModerationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationLogId")(() =>
        typia.assert(props.moderationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
