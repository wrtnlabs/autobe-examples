import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete discussion board category by ID.
 *
 * This DELETE operation removes a specific discussion board category identified
 * by discussionBoardCategoryId. The category represents topical classifications
 * such as Economic or Political on the discussion board.
 *
 * Only moderators and administrators should be authorized to delete categories
 * due to the impact on all associated discussion posts. Deletion is performed
 * as a hard delete, removing the category record and all linked posts
 * permanently from the database.
 *
 * Path parameter discussionBoardCategoryId must be a valid UUID referencing the
 * category to delete. There is no request body or response body for this
 * operation beyond success/error status codes.
 *
 * Care should be exercised by client implementations to ensure that this
 * operation is used judiciously, as it impacts multiple posts and discussion
 * board content hierarchy.
 *
 * @param props.connection
 * @param props.discussionBoardCategoryId Unique identifier of the discussion
 *   board category to delete
 * @path /discussionBoard/moderator/discussionBoardCategories/:discussionBoardCategoryId
 * @accessor api.functional.discussionBoard.moderator.discussionBoardCategories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the discussion board category to delete */
    discussionBoardCategoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderator/discussionBoardCategories/:discussionBoardCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/discussionBoardCategories/${encodeURIComponent(props.discussionBoardCategoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardCategoryId")(() =>
        typia.assert(props.discussionBoardCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
