import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardPost } from "../../../structures/IDiscussionBoardDiscussionBoardPost";
import { IPageIDiscussionBoardDiscussionBoardPost } from "../../../structures/IPageIDiscussionBoardDiscussionBoardPost";
export * as discussionBoardReplies from "./discussionBoardReplies/index";

/**
 * Search and retrieve a filtered, paginated list of discussion board posts.
 *
 * Retrieve a filtered and paginated list of discussion board posts. This
 * operation supports advanced search capabilities allowing users to filter
 * posts by various criteria such as category, title keywords, and full-text
 * content search.
 *
 * The operation utilizes the `discussion_board_posts` table, including fields
 * for post title, body, category_id, member_id, and timestamps. Posts are
 * filtered based on category and content, respecting the maximum length
 * constraints and profanity filtering rules defined in the business
 * requirements.
 *
 * Security and access control allow any user including guests to browse posts,
 * but creation and editing are restricted to authenticated members and
 * moderators. The returned list is paginated, supporting 20 posts per page
 * ordered by recency of activity.
 *
 * Errors include validation failures for request parameters and filters. No
 * request body exists for simple retrieval, but PATCH allows complex filter
 * definitions.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for discussion
 *   board posts
 * @path /discussionBoard/discussionBoardPosts
 * @accessor api.functional.discussionBoard.discussionBoardPosts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for discussion board posts */
    body: IDiscussionBoardDiscussionBoardPost.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardPost.IRequest;
  export type Response = IPageIDiscussionBoardDiscussionBoardPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/discussionBoardPosts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/discussionBoardPosts";
  export const random = (): IPageIDiscussionBoardDiscussionBoardPost.ISummary =>
    typia.random<IPageIDiscussionBoardDiscussionBoardPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed discussion board post information by ID.
 *
 * Retrieve detailed information about a specific discussion board post by its
 * UUID identifier. This includes the post's title, body, associated category,
 * author details, post status, and timestamps.
 *
 * The operation references the `discussion_board_posts` entity from the Prisma
 * schema, leveraging all available fields for comprehensive post detail
 * retrieval.
 *
 * There are no authorization restrictions for viewing posts, allowing guests
 * and members to access the content.
 *
 * Validation errors or missing posts result in appropriate error messages as
 * per API standards.
 *
 * @param props.connection
 * @param props.discussionBoardPostId Unique identifier of the target discussion
 *   board post
 * @path /discussionBoard/discussionBoardPosts/:discussionBoardPostId
 * @accessor api.functional.discussionBoard.discussionBoardPosts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target discussion board post */
    discussionBoardPostId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardDiscussionBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/discussionBoardPosts/:discussionBoardPostId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/discussionBoardPosts/${encodeURIComponent(props.discussionBoardPostId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardPost =>
    typia.random<IDiscussionBoardDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardPostId")(() =>
        typia.assert(props.discussionBoardPostId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
