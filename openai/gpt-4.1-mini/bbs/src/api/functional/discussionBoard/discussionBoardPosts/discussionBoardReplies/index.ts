import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardReply } from "../../../../structures/IDiscussionBoardDiscussionBoardReply";
import { IPageIDiscussionBoardDiscussionBoardReply } from "../../../../structures/IPageIDiscussionBoardDiscussionBoardReply";

/**
 * Retrieve paginated list of replies for a discussion board post.
 *
 * This PATCH operation retrieves a filtered, paginated list of replies
 * associated with a specific discussion board post identified by postId.
 * Replies represent member-authored responses to discussion topics.
 *
 * The request body includes filtering, pagination, and sorting parameters,
 * enabling clients to request replies with constraints such as page size, page
 * number, search keywords within content, or filtering by reply status.
 *
 * The response body is a paginated summary list of replies matching the given
 * postId and filtering criteria.
 *
 * Path parameter postId must be a valid UUID of the parent discussion board
 * post.
 *
 * Authorization is generally public as replies to posts are visible to all
 * users including guests.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the discussion board post to get
 *   replies for
 * @param props.body Search and pagination parameters for discussion board
 *   replies filtering
 * @path /discussionBoard/discussionBoardPosts/:postId/discussionBoardReplies
 * @accessor api.functional.discussionBoard.discussionBoardPosts.discussionBoardReplies.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the discussion board post to get replies for */
    postId: string & tags.Format<"uuid">;

    /**
     * Search and pagination parameters for discussion board replies
     * filtering
     */
    body: IDiscussionBoardDiscussionBoardReply.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardReply.IRequest;
  export type Response = IPageIDiscussionBoardDiscussionBoardReply.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/discussionBoardPosts/:postId/discussionBoardReplies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/discussionBoardPosts/${encodeURIComponent(props.postId ?? "null")}/discussionBoardReplies`;
  export const random =
    (): IPageIDiscussionBoardDiscussionBoardReply.ISummary =>
      typia.random<IPageIDiscussionBoardDiscussionBoardReply.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
