import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardCategories } from "../../../structures/IDiscussionBoardDiscussionBoardCategories";
import { IPageIDiscussionBoardDiscussionBoardCategories } from "../../../structures/IPageIDiscussionBoardDiscussionBoardCategories";

/**
 * Search and retrieve paginated list of discussion board categories.
 *
 * Retrieve a filtered and paginated list of discussion board categories from
 * the system. This operation supports searching by name or description,
 * sorting, and pagination.
 *
 * The discussion_board_categories table categorizes posts to enable content
 * filtering by Economic or Political themes, among others. This operation gives
 * clients the ability to explore categories and decide under which domain to
 * post.
 *
 * Security considerations include allowing public access since categories are
 * generally not sensitive. However, the API may enforce rate limiting to
 * prevent abuse.
 *
 * This operation allows clients to retrieve category summaries and relevant
 * metadata for display in filtering UI components or selection lists.
 *
 * Expected behavior includes support for a variety of query filters and
 * configurable page sizes and offsets. Errors may arise from malformed requests
 * or database connectivity issues.
 *
 * @param props.connection
 * @param props.body Search criteria, pagination, and sorting parameters for
 *   discussion board categories
 * @path /discussionBoard/discussionBoardCategories
 * @accessor api.functional.discussionBoard.discussionBoardCategories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, pagination, and sorting parameters for discussion
     * board categories
     */
    body: IDiscussionBoardDiscussionBoardCategories.IRequest;
  };
  export type Body = IDiscussionBoardDiscussionBoardCategories.IRequest;
  export type Response =
    IPageIDiscussionBoardDiscussionBoardCategories.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/discussionBoardCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/discussionBoardCategories";
  export const random =
    (): IPageIDiscussionBoardDiscussionBoardCategories.ISummary =>
      typia.random<IPageIDiscussionBoardDiscussionBoardCategories.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific discussion board category by ID.
 *
 * Retrieve detailed information about a specific discussion board category
 * identified by its unique ID.
 *
 * This includes the category's name, optional description, creation and update
 * timestamps, and soft delete status.
 *
 * The discussion_board_categories table is central for organizing posts into
 * economic or political themes.
 *
 * No special authorization required as category information is public.
 *
 * Errors include cases where the specified ID does not exist or is malformed.
 *
 * This operation returns a single resource representing the category's full
 * details.
 *
 * @param props.connection
 * @param props.discussionBoardCategoryId Unique identifier of the target
 *   discussion board category
 * @path /discussionBoard/discussionBoardCategories/:discussionBoardCategoryId
 * @accessor api.functional.discussionBoard.discussionBoardCategories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target discussion board category */
    discussionBoardCategoryId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardDiscussionBoardCategories;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/discussionBoardCategories/:discussionBoardCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/discussionBoardCategories/${encodeURIComponent(props.discussionBoardCategoryId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardCategories =>
    typia.random<IDiscussionBoardDiscussionBoardCategories>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardCategoryId")(() =>
        typia.assert(props.discussionBoardCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
