import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardDiscussionBoardPost } from "../../../../structures/IDiscussionBoardDiscussionBoardPost";
export * as discussionBoardReplies from "./discussionBoardReplies/index";

/**
 * Create a new discussion board post authored by an authenticated member. The
 * post must specify the category_id corresponding to an existing discussion
 * category and the member_id of the authoring member. The title is required to
 * be between 5 and 100 characters, and the body content must not exceed 5000
 * characters. Profanity filtering applies to ensure content appropriateness.
 *
 * On success, the newly created post is immediately visible with its full
 * metadata including timestamps and status. Authentication as a member role is
 * required.
 *
 * The API validates all inputs and returns the complete created post object on
 * success.
 *
 * @param props.connection
 * @param props.body Information needed to create a discussion board post.
 * @path /discussionBoard/member/discussionBoardPosts
 * @accessor api.functional.discussionBoard.member.discussionBoardPosts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a discussion board post. */
    body: IDiscussionBoardDiscussionBoardPost.ICreate;
  };
  export type Body = IDiscussionBoardDiscussionBoardPost.ICreate;
  export type Response = IDiscussionBoardDiscussionBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/discussionBoardPosts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/member/discussionBoardPosts";
  export const random = (): IDiscussionBoardDiscussionBoardPost =>
    typia.random<IDiscussionBoardDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion board post by ID.
 *
 * Update an existing discussion board post by ID. Authorized users include the
 * member who created the post or moderators. This operation allows modification
 * of the title, body, or post_status with validation to maintain title length
 * within 5 to 100 characters and body length up to 5000 characters. Profanity
 * filtering applies.
 *
 * The post to update is identified by the discussionBoardPostId path parameter.
 * The user must have permission to update the post.
 *
 * On success, the API returns the full updated post object with timestamps and
 * status metadata.
 *
 * Fail responses occur for authorization failures, validation errors, or if the
 * post does not exist.
 *
 * @param props.connection
 * @param props.discussionBoardPostId Unique identifier of the discussion board
 *   post to be updated
 * @param props.body Updated information for the discussion board post.
 * @path /discussionBoard/member/discussionBoardPosts/:discussionBoardPostId
 * @accessor api.functional.discussionBoard.member.discussionBoardPosts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the discussion board post to be updated */
    discussionBoardPostId: string & tags.Format<"uuid">;

    /** Updated information for the discussion board post. */
    body: IDiscussionBoardDiscussionBoardPost.IUpdate;
  };
  export type Body = IDiscussionBoardDiscussionBoardPost.IUpdate;
  export type Response = IDiscussionBoardDiscussionBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/discussionBoardPosts/:discussionBoardPostId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/discussionBoardPosts/${encodeURIComponent(props.discussionBoardPostId ?? "null")}`;
  export const random = (): IDiscussionBoardDiscussionBoardPost =>
    typia.random<IDiscussionBoardDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardPostId")(() =>
        typia.assert(props.discussionBoardPostId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
