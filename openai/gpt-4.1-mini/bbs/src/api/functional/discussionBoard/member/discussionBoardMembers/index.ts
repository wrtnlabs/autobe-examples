import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardMember } from "../../../../structures/IDiscussionBoardMember";

/**
 * Update discussion board member information by ID.
 *
 * Update discussion board member information by their unique ID. This operation
 * allows a member to update their email address, password hash, and display
 * name. The update must ensure the email remains unique across the member base.
 * Authorization ensures that only the member themselves or roles with higher
 * privilege can perform this operation.
 *
 * Updates are immediately reflected in the database with updated timestamps.
 * This operation complements user registration, login, and profile management
 * features of the application.
 *
 * Detailed errors are returned on validation failure such as duplicate email or
 * invalid field formats.
 *
 * @param props.connection
 * @param props.discussionBoardMemberId Unique identifier of the discussion
 *   board member to update
 * @param props.body Information to update for the discussion board member
 * @path /discussionBoard/member/discussionBoardMembers/:discussionBoardMemberId
 * @accessor api.functional.discussionBoard.member.discussionBoardMembers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the discussion board member to update */
    discussionBoardMemberId: string & tags.Format<"uuid">;

    /** Information to update for the discussion board member */
    body: IDiscussionBoardMember.IUpdate;
  };
  export type Body = IDiscussionBoardMember.IUpdate;
  export type Response = IDiscussionBoardMember;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/discussionBoardMembers/:discussionBoardMemberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/discussionBoardMembers/${encodeURIComponent(props.discussionBoardMemberId ?? "null")}`;
  export const random = (): IDiscussionBoardMember =>
    typia.random<IDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardMemberId")(() =>
        typia.assert(props.discussionBoardMemberId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete discussion board member by ID.
 *
 * Delete a discussion board member from the system permanently by unique ID.
 * This operation removes the member record and all related data from the
 * database. Authorization and ownership checks apply to prevent unauthorized
 * deletion.
 *
 * Successful deletion results in no content response. Errors are returned if
 * the member does not exist or if authorization checks fail.
 *
 * @param props.connection
 * @param props.discussionBoardMemberId Unique identifier of the discussion
 *   board member to delete
 * @path /discussionBoard/member/discussionBoardMembers/:discussionBoardMemberId
 * @accessor api.functional.discussionBoard.member.discussionBoardMembers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the discussion board member to delete */
    discussionBoardMemberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/discussionBoardMembers/:discussionBoardMemberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/discussionBoardMembers/${encodeURIComponent(props.discussionBoardMemberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discussionBoardMemberId")(() =>
        typia.assert(props.discussionBoardMemberId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
