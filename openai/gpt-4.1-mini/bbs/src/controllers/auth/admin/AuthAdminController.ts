import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { IDiscussionBoardAdmin } from "../../../api/structures/IDiscussionBoardAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Admin role registration operation creating new admin account in
   * 'discussion_board_admins' table.
   *
   * This is the registration (join) API for the Admin role. It enables creation
   * of a new admin account using the unique email and a secure hashed password.
   * The database schema 'discussion_board_admins' table includes fields such as
   * 'email', 'password_hash', 'display_name', and timestamps. This operation
   * ensures that only valid registration data is accepted and stored. Email
   * must be unique.
   *
   * Upon successful registration, a JWT access token and a refresh token are
   * issued, granting authorized access.
   *
   * This endpoint is publicly accessible without prior authentication.
   *
   * Related operations: login (authenticate admin), refresh (renew tokens).
   *
   * Security considerations include proper password hashing and input
   * validation to prevent duplicate accounts and security breaches.
   *
   * This operation reflects the member lifecycle starting point specifically
   * tailored for admin users.
   *
   * @param connection
   * @param body Admin registration data: unique email, password, display name
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardAdmin.IJoin,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin role login operation authenticating existing admin accounts.
   *
   * This is the login API for the Admin role. Admin users provide their email
   * and password for authentication. Credentials are checked against the
   * 'discussion_board_admins' table storing unique emails and hashed
   * passwords.
   *
   * On successful validation, JWT tokens are issued for access and refresh.
   *
   * This endpoint is publicly accessible and serves as the primary
   * authentication gateway for system administrators.
   *
   * Security considerations include protection against brute force attacks and
   * secure password verification.
   *
   * This operation depends on the join operation for account creation.
   *
   * Related operations include join and refresh.
   *
   * Soft delete is not relevant here.
   *
   * @param connection
   * @param body Admin login credentials: email and password
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardAdmin.ILogin,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin role token refresh operation renewing JWT access tokens.
   *
   * This is the token refresh API for the Admin role. It accepts a valid
   * refresh token and issues a new JWT access token to maintain an active
   * session.
   *
   * This endpoint requires a valid refresh token and is accessible only to
   * authenticated admins.
   *
   * Security is paramount: the refresh token is validated rigorously to prevent
   * token misuse.
   *
   * Related endpoints are join (registration) and login (authentication).
   *
   * This operation helps maintain uninterrupted admin sessions with reduced
   * login frequency.
   *
   * The underlying schema is 'discussion_board_admins' reflecting the admin
   * user base.
   *
   * @param connection
   * @param body Admin refresh token request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardAdmin.IRefresh,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
