import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorRefresh } from "../../../../providers/postAuthModeratorRefresh";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IDiscussionBoardModerator } from "../../../../api/structures/IDiscussionBoardModerator";
import { IAuthRefresh } from "../../../../api/structures/IAuthRefresh";

@Controller("/auth/moderator/refresh")
export class AuthModeratorRefreshController {
  /**
   * Refresh JWT authentication tokens for moderator.
   *
   * Refresh authentication tokens for a moderator with a valid refresh token.
   * Validates refresh token, issues new JWT access and refresh tokens.
   *
   * @param connection
   * @param body Refresh token request containing valid refresh token string.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshModerator(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IAuthRefresh,
  ): Promise<IDiscussionBoardModerator.IAuthorized> {
    try {
      return await postAuthModeratorRefresh({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
