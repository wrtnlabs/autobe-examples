import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorJoin } from "../../../../providers/postAuthModeratorJoin";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IDiscussionBoardModerator } from "../../../../api/structures/IDiscussionBoardModerator";

@Controller("/auth/moderator/join")
export class AuthModeratorJoinController {
  /**
   * Create a new moderator account in discussion_board_moderators table.
   *
   * Registrar moderator accounts in discussion_board_moderators table. Requires
   * validated unique email, hashed password, and display name. Payload includes
   * authentication credentials and profile info. Only unique emails allowed as
   * enforced by database constraints. Password must meet minimal security
   * standards as per business rules. Returns moderator authorized tokens on
   * success.
   *
   * @param connection
   * @param body Creation info for a new moderator account including credentials
   *   and display name.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinModerator(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardModerator.ICreate,
  ): Promise<IDiscussionBoardModerator.IAuthorized> {
    try {
      return await postAuthModeratorJoin({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
