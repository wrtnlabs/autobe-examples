import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorLogin } from "../../../../providers/postAuthModeratorLogin";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IDiscussionBoardModerator } from "../../../../api/structures/IDiscussionBoardModerator";

@Controller("/auth/moderator/login")
export class AuthModeratorLoginController {
  /**
   * Login existing moderator and obtain authentication tokens.
   *
   * Authenticate moderator credentials for login by verifying email and
   * password hash against discussion_board_moderators table. Issue JWT access
   * and refresh tokens upon success. Return failure on invalid credentials.
   *
   * @param connection
   * @param body Login credentials for a moderator including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginModerator(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardModerator.ILogin,
  ): Promise<IDiscussionBoardModerator.IAuthorized> {
    try {
      return await postAuthModeratorLogin({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
