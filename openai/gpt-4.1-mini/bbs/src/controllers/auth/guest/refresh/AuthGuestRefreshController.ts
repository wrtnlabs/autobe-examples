import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestRefresh } from "../../../../providers/postAuthGuestRefresh";

import { IDiscussionBoardGuest } from "../../../../api/structures/IDiscussionBoardGuest";

@Controller("/auth/guest/refresh")
export class AuthGuestRefreshController {
  /**
   * Refresh access tokens for guest sessions using refresh token, referencing
   * discussion_board_guests table.
   *
   * Refresh tokens for a guest session by validating the provided refresh token
   * and issuing new access tokens.
   *
   * Utilizes the discussion_board_guests table session_token and timestamps to
   * verify session validity.
   *
   * This operation supports seamless user experience for guest users with
   * temporary sessions.
   *
   * Related operation is join for initial guest session creation.
   *
   * Responses include new JWT tokens encapsulated in the authorized guest
   * session response body.
   *
   * @param connection
   * @param body Refresh token request information with refresh token string.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshGuest(
    @TypedBody()
    body: IDiscussionBoardGuest.IRefresh,
  ): Promise<IDiscussionBoardGuest.IAuthorized> {
    try {
      return await postAuthGuestRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
