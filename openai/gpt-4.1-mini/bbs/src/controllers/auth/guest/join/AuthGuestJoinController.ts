import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestJoin } from "../../../../providers/postAuthGuestJoin";

import { IDiscussionBoardGuest } from "../../../../api/structures/IDiscussionBoardGuest";

@Controller("/auth/guest/join")
export class AuthGuestJoinController {
  /**
   * Create a new guest session and issue temporary tokens, referencing
   * discussion_board_guests table.
   *
   * This operation allows guest users to register by creating a temporary guest
   * session with a unique session token stored in the database. It uses the
   * discussion_board_guests table fields such as session_token, created_at, and
   * updated_at to manage guest sessions.
   *
   * This operation is designed for unauthenticated site visitors who want to
   * have a temporary identity to browse content with limited access. Security
   * considerations include issuing short-lived JWT tokens tied to the guest
   * session token.
   *
   * The path allows guests to create new temporary sessions without login,
   * supporting ephemeral guest access.
   *
   * Related operations include token refresh to renew access tokens for guests.
   *
   * Errors must be appropriately handled if session token generation or
   * database insertion fails.
   *
   * @param connection
   * @param body Guest registration information to create a new guest session.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinGuest(
    @TypedBody()
    body: IDiscussionBoardGuest.ICreate,
  ): Promise<IDiscussionBoardGuest.IAuthorized> {
    try {
      return await postAuthGuestJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
