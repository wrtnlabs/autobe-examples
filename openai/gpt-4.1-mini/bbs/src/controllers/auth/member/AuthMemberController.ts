import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberJoin } from "../../../providers/postAuthMemberJoin";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";
import { postAuthMemberLogin } from "../../../providers/postAuthMemberLogin";
import { postAuthMemberRefresh } from "../../../providers/postAuthMemberRefresh";

import { IDiscussionBoardMember } from "../../../api/structures/IDiscussionBoardMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Create a new member user account (discussion_board_members).
   *
   * Register a new member user account by providing email, password, and
   * display name. Creates discussion_board_members record and returns
   * authorized JWT token.
   *
   * @param connection
   * @param body New member account creation payload including email, password,
   *   and display name.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussionBoardMember.ICreate,
  ): Promise<IDiscussionBoardMember.IAuthorized> {
    try {
      return await postAuthMemberJoin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Member user login authentication.
   *
   * Authenticate member user credentials and issue JWT access and refresh
   * tokens.
   *
   * @param connection
   * @param body Member login credentials including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussionBoardMember.ILogin,
  ): Promise<IDiscussionBoardMember.IAuthorized> {
    try {
      return await postAuthMemberLogin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT token for member user.
   *
   * Refresh member user JWT access tokens using a valid refresh token.
   *
   * @param connection
   * @param body Valid refresh token payload for token renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussionBoardMember.IRefresh,
  ): Promise<IDiscussionBoardMember.IAuthorized> {
    try {
      return await postAuthMemberRefresh({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
