import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteDiscussionBoardModeratorDiscussionBoardCategoriesDiscussionBoardCategoryId } from "../../../../providers/deleteDiscussionBoardModeratorDiscussionBoardCategoriesDiscussionBoardCategoryId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

@Controller(
  "/discussionBoard/moderator/discussionBoardCategories/:discussionBoardCategoryId",
)
export class DiscussionboardModeratorDiscussionboardcategoriesController {
  /**
   * Delete discussion board category by ID.
   *
   * This DELETE operation removes a specific discussion board category
   * identified by discussionBoardCategoryId. The category represents topical
   * classifications such as Economic or Political on the discussion board.
   *
   * Only moderators and administrators should be authorized to delete
   * categories due to the impact on all associated discussion posts. Deletion
   * is performed as a hard delete, removing the category record and all linked
   * posts permanently from the database.
   *
   * Path parameter discussionBoardCategoryId must be a valid UUID referencing
   * the category to delete. There is no request body or response body for this
   * operation beyond success/error status codes.
   *
   * Care should be exercised by client implementations to ensure that this
   * operation is used judiciously, as it impacts multiple posts and discussion
   * board content hierarchy.
   *
   * @param connection
   * @param discussionBoardCategoryId Unique identifier of the discussion board
   *   category to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("discussionBoardCategoryId")
    discussionBoardCategoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardModeratorDiscussionBoardCategoriesDiscussionBoardCategoryId(
        {
          moderator,
          discussionBoardCategoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
