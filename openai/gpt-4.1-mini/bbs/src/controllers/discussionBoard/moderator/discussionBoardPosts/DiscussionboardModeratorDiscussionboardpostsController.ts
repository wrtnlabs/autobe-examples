import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putDiscussionBoardModeratorDiscussionBoardPostsDiscussionBoardPostId } from "../../../../providers/putDiscussionBoardModeratorDiscussionBoardPostsDiscussionBoardPostId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { deleteDiscussionBoardModeratorDiscussionBoardPostsDiscussionBoardPostId } from "../../../../providers/deleteDiscussionBoardModeratorDiscussionBoardPostsDiscussionBoardPostId";

import { IDiscussionBoardDiscussionBoardPost } from "../../../../api/structures/IDiscussionBoardDiscussionBoardPost";

@Controller(
  "/discussionBoard/moderator/discussionBoardPosts/:discussionBoardPostId",
)
export class DiscussionboardModeratorDiscussionboardpostsController {
  /**
   * Update a discussion board post by ID.
   *
   * Update an existing discussion board post by ID. Authorized users include
   * the member who created the post or moderators. This operation allows
   * modification of the title, body, or post_status with validation to maintain
   * title length within 5 to 100 characters and body length up to 5000
   * characters. Profanity filtering applies.
   *
   * The post to update is identified by the discussionBoardPostId path
   * parameter. The user must have permission to update the post.
   *
   * On success, the API returns the full updated post object with timestamps
   * and status metadata.
   *
   * Fail responses occur for authorization failures, validation errors, or if
   * the post does not exist.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the discussion board post
   *   to be updated
   * @param body Updated information for the discussion board post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardPost.IUpdate,
  ): Promise<IDiscussionBoardDiscussionBoardPost> {
    try {
      return await putDiscussionBoardModeratorDiscussionBoardPostsDiscussionBoardPostId(
        {
          moderator,
          discussionBoardPostId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a discussion board post by its ID.
   *
   * Allows moderators to permanently delete a discussion board post identified
   * by its UUID. This endpoint enforces authorization to restrict access to
   * users with the moderator role. Upon successful deletion, the post and all
   * its associated replies are removed from the database due to cascade delete
   * constraints. No request payload is required. The operation returns no
   * content in the response. Clients should handle possible errors such as
   * attempting to delete a non-existent post or lacking proper permissions
   * externally.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the discussion board post
   *   to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardModeratorDiscussionBoardPostsDiscussionBoardPostId(
        {
          moderator,
          discussionBoardPostId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
