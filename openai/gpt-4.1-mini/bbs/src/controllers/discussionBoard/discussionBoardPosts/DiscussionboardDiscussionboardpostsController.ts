import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardDiscussionBoardPosts } from "../../../providers/patchDiscussionBoardDiscussionBoardPosts";
import { getDiscussionBoardDiscussionBoardPostsDiscussionBoardPostId } from "../../../providers/getDiscussionBoardDiscussionBoardPostsDiscussionBoardPostId";

import { IPageIDiscussionBoardDiscussionBoardPost } from "../../../api/structures/IPageIDiscussionBoardDiscussionBoardPost";
import { IDiscussionBoardDiscussionBoardPost } from "../../../api/structures/IDiscussionBoardDiscussionBoardPost";

@Controller("/discussionBoard/discussionBoardPosts")
export class DiscussionboardDiscussionboardpostsController {
  /**
   * Search and retrieve a filtered, paginated list of discussion board posts.
   *
   * Retrieve a filtered and paginated list of discussion board posts. This
   * operation supports advanced search capabilities allowing users to filter
   * posts by various criteria such as category, title keywords, and full-text
   * content search.
   *
   * The operation utilizes the `discussion_board_posts` table, including fields
   * for post title, body, category_id, member_id, and timestamps. Posts are
   * filtered based on category and content, respecting the maximum length
   * constraints and profanity filtering rules defined in the business
   * requirements.
   *
   * Security and access control allow any user including guests to browse
   * posts, but creation and editing are restricted to authenticated members and
   * moderators. The returned list is paginated, supporting 20 posts per page
   * ordered by recency of activity.
   *
   * Errors include validation failures for request parameters and filters. No
   * request body exists for simple retrieval, but PATCH allows complex filter
   * definitions.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for discussion board
   *   posts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardPost.IRequest,
  ): Promise<IPageIDiscussionBoardDiscussionBoardPost.ISummary> {
    try {
      return await patchDiscussionBoardDiscussionBoardPosts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed discussion board post information by ID.
   *
   * Retrieve detailed information about a specific discussion board post by its
   * UUID identifier. This includes the post's title, body, associated category,
   * author details, post status, and timestamps.
   *
   * The operation references the `discussion_board_posts` entity from the
   * Prisma schema, leveraging all available fields for comprehensive post
   * detail retrieval.
   *
   * There are no authorization restrictions for viewing posts, allowing guests
   * and members to access the content.
   *
   * Validation errors or missing posts result in appropriate error messages as
   * per API standards.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the target discussion
   *   board post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":discussionBoardPostId")
  public async at(
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardPost> {
    try {
      return await getDiscussionBoardDiscussionBoardPostsDiscussionBoardPostId({
        discussionBoardPostId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
