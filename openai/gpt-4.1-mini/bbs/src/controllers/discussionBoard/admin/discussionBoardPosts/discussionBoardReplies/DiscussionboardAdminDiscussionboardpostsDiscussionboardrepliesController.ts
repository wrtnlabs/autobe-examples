import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getDiscussionBoardAdminDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId } from "../../../../../providers/getDiscussionBoardAdminDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId } from "../../../../../providers/getDiscussionBoardAdminDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId";

import { IDiscussionBoardDiscussionBoardReply } from "../../../../../api/structures/IDiscussionBoardDiscussionBoardReply";

@Controller("/discussionBoard/admin/discussionBoardPosts")
export class DiscussionboardAdminDiscussionboardpostsDiscussionboardrepliesController {
  /**
   * Retrieve a specific discussion board reply by post and reply IDs.
   *
   * Retrieve an individual reply within a discussion board post, identified by
   * discussionBoardPostId and discussionBoardReplyId.
   *
   * This operation fetches the reply's detailed information from the
   * discussion_board_replies Prisma table.
   *
   * Security considerations include ensuring the requesting user has
   * appropriate access rights, typically requiring authentication as a member
   * or higher role.
   *
   * The retrieved data include the reply content, authoring member, status, and
   * timestamps. This facilitates display of the reply in UI discussions and
   * supports detailed reply inspection.
   *
   * No request body is required as this is a read operation.
   *
   * If the specified post or reply does not exist, the operation should return
   * an appropriate 404 error response.
   *
   * This endpoint complements other operations such as listing replies for a
   * post or managing replies via create/update/delete operations.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the parent discussion
   *   board post
   * @param discussionBoardReplyId Unique identifier of the discussion board
   *   reply
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(
    ":discussionBoardPostId/discussionBoardReplies/:discussionBoardReplyId",
  )
  public async getByDiscussionboardpostidAndDiscussionboardreplyid(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
    @TypedParam("discussionBoardReplyId")
    discussionBoardReplyId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId(
        {
          admin,
          discussionBoardPostId,
          discussionBoardReplyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a specific reply for a discussion post.
   *
   * Retrieve a specific reply by its replyId associated with a particular post
   * identified by postId.
   *
   * This operation fetches the detailed reply including content, author,
   * status, and timestamps. It helps clients view detailed information about a
   * reply in the context of a specific discussion post.
   *
   * Security requires that only authenticated users with roles 'member',
   * 'moderator', or 'admin' can access this endpoint.
   *
   * This endpoint directly maps to the discussion_board_replies table and
   * respects soft deletion by ignoring replies marked as deleted.
   *
   * Clients should handle errors gracefully such as 404 Not Found or 403
   * Unauthorized.
   *
   * Related operations include listing replies for a post and creating new
   * replies under a post.
   *
   * @param connection
   * @param postId Unique identifier of the target discussion post
   * @param replyId Unique identifier of the target reply
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId/discussionBoardReplies/:replyId")
  public async getByPostidAndReplyid(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId(
        {
          admin,
          postId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
