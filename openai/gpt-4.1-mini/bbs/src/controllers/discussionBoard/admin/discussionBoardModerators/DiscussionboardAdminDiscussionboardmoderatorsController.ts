import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminDiscussionBoardModerators } from "../../../../providers/patchDiscussionBoardAdminDiscussionBoardModerators";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId } from "../../../../providers/getDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId";
import { putDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId } from "../../../../providers/putDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId";
import { deleteDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId } from "../../../../providers/deleteDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId";

import { IPageIDiscussionBoardDiscussionBoardModerator } from "../../../../api/structures/IPageIDiscussionBoardDiscussionBoardModerator";
import { IDiscussionBoardDiscussionBoardModerator } from "../../../../api/structures/IDiscussionBoardDiscussionBoardModerator";
import { IDiscussionBoardModerator } from "../../../../api/structures/IDiscussionBoardModerator";

@Controller("/discussionBoard/admin/discussionBoardModerators")
export class DiscussionboardAdminDiscussionboardmoderatorsController {
  /**
   * Retrieve paginated list of discussion board moderators.
   *
   * Retrieve a paginated list of discussion board moderators, supporting
   * filtering by email and display name, as well as pagination and sorting.
   *
   * This operation is intended for administrative or system user interfaces
   * where moderator accounts need to be managed or reviewed.
   *
   * Permissions are restricted to authorized roles due to the sensitive nature
   * of moderator account information.
   *
   * The operation accesses the discussion_board_moderators table, which stores
   * moderator email, hashed password, display name, and timestamps, along with
   * soft delete capability via the deleted_at field.
   *
   * Validation rules include filtering based on indexed searchable fields and
   * ensuring pagination parameters fall within reasonable limits.
   *
   * Related operations include retrieval of individual moderator details and
   * management actions like creation, updating, or deletion of moderator
   * accounts.
   *
   * Responses provide moderator summary information for efficient list
   * displays.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   discussion board moderators
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardModerator.IRequest,
  ): Promise<IPageIDiscussionBoardDiscussionBoardModerator.ISummary> {
    try {
      return await patchDiscussionBoardAdminDiscussionBoardModerators({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve discussion board moderator detail by ID.
   *
   * Retrieve detailed information of a discussion board moderator by ID.
   *
   * Permission to access this data is limited to authorized administrators.
   *
   * Returns full record including email, display name, timestamps, and status
   * from discussion_board_moderators table.
   *
   * Path parameter `discussionBoardModeratorId` must be a valid UUID.
   *
   * Includes soft delete considerations where a non-null deleted_at indicates
   * deactivated account.
   *
   * @param connection
   * @param discussionBoardModeratorId Unique identifier of the discussion board
   *   moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":discussionBoardModeratorId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardModeratorId")
    discussionBoardModeratorId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardModerator> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId(
        {
          admin,
          discussionBoardModeratorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a discussion board moderator by ID.
   *
   * Update a discussion board moderator's information by their unique
   * identifier.
   *
   * This operation allows for modifying the moderator's email, password hash,
   * and display name, along with updating timestamps such as updated_at and
   * optionally marking the account as deactivated by setting deleted_at.
   *
   * Only authorized users such as admins should be permitted to perform this
   * update as moderators have elevated privileges and sensitive credentials.
   *
   * The operation interfaces directly with the discussion_board_moderators
   * table in the database and must follow all schema constraints including
   * unique email addresses and valid UUIDs.
   *
   * Validation of email format and password strength should be performed at the
   * application layer.
   *
   * If successful, the updated moderator object is returned in the response.
   * Errors may result from validation failures or unauthorized access.
   *
   * Related operations include creating new moderators, deleting moderators,
   * and listing moderators.
   *
   * This operation uses HTTP PUT to replace or update a moderator's
   * information.
   *
   * @param connection
   * @param discussionBoardModeratorId Unique identifier of the discussion board
   *   moderator
   * @param body Update information for the discussion board moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":discussionBoardModeratorId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardModeratorId")
    discussionBoardModeratorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardModerator.IUpdate,
  ): Promise<IDiscussionBoardModerator> {
    try {
      return await putDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId(
        {
          admin,
          discussionBoardModeratorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a discussion board moderator by ID.
   *
   * Delete a discussion board moderator permanently by their unique ID.
   *
   * This operation removes the moderator's record from the
   * discussion_board_moderators table entirely. It must be performed only by
   * users with administrative rights to prevent accidental or malicious removal
   * of privileged accounts.
   *
   * Because this action is destructive and irreversible, it is critical to
   * enforce strict authorization controls.
   *
   * The endpoint accepts the moderator's unique ID as a path parameter and
   * requires no request body.
   *
   * On success, no response body is returned.
   *
   * Error scenarios include attempting to delete a non-existent moderator or
   * lacking proper permissions.
   *
   * Related operations include updating moderator info and creating new
   * moderators.
   *
   * This operation uses the HTTP DELETE method to perform the removal.
   *
   * @param connection
   * @param discussionBoardModeratorId Unique identifier of the discussion board
   *   moderator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":discussionBoardModeratorId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardModeratorId")
    discussionBoardModeratorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminDiscussionBoardModeratorsDiscussionBoardModeratorId(
        {
          admin,
          discussionBoardModeratorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
