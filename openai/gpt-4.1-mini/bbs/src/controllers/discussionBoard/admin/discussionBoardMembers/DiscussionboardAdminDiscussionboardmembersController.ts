import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminDiscussionBoardMembers } from "../../../../providers/patchDiscussionBoardAdminDiscussionBoardMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminDiscussionBoardMembersDiscussionBoardMemberId } from "../../../../providers/getDiscussionBoardAdminDiscussionBoardMembersDiscussionBoardMemberId";

import { IPageIDiscussionBoardDiscussionBoardMember } from "../../../../api/structures/IPageIDiscussionBoardDiscussionBoardMember";
import { IDiscussionBoardDiscussionBoardMember } from "../../../../api/structures/IDiscussionBoardDiscussionBoardMember";

@Controller("/discussionBoard/admin/discussionBoardMembers")
export class DiscussionboardAdminDiscussionboardmembersController {
  /**
   * Search and retrieve discussion board members with pagination and filters.
   *
   * This operation allows clients to search and retrieve a filtered, paginated
   * list of discussion board registered members. It supports query parameters
   * such as partial matching on email and display name, as well as sorting and
   * pagination controls.
   *
   * Authorization is required as member information is sensitive and should
   * only be accessed by administrators or system staff.
   *
   * The operation corresponds directly to the discussion_board_members table,
   * reflecting properties such as email, display name, and timestamps. Results
   * are returned in a paginated format optimized for UI listing.
   *
   * This search operation is foundational for user management features and may
   * be used in conjunction with other member detail and update APIs.
   *
   * Error handling includes validation of input search criteria and pagination
   * parameters. Results include only existing members who are not soft-deleted
   * (deleted_at is null).
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   discussion board members
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardMember.IRequest,
  ): Promise<IPageIDiscussionBoardDiscussionBoardMember> {
    try {
      return await patchDiscussionBoardAdminDiscussionBoardMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific discussion board member by ID.
   *
   * Retrieve detailed profile information of a single discussion board member
   * by their unique ID. This includes public member attributes such as email
   * and display name but excludes sensitive password hashes.
   *
   * Access to this operation is restricted to administrators to ensure member
   * confidentiality.
   *
   * This operation corresponds to the discussion_board_members table in the
   * Prisma schema and returns the member's full details except password
   * hashes.
   *
   * If the member does not exist or is soft-deleted (deleted_at is not null),
   * the operation returns a not found error.
   *
   * This function supports administrative user management workflows.
   *
   * @param connection
   * @param discussionBoardMemberId Unique identifier of the discussion board
   *   member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":discussionBoardMemberId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardMemberId")
    discussionBoardMemberId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardMember> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardMembersDiscussionBoardMemberId(
        {
          admin,
          discussionBoardMemberId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
