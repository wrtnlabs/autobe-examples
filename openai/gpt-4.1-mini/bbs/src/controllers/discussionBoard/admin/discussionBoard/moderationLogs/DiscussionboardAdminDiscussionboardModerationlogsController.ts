import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminDiscussionBoardModerationLogs } from "../../../../../providers/patchDiscussionBoardAdminDiscussionBoardModerationLogs";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminDiscussionBoardModerationLogsModerationLogId } from "../../../../../providers/getDiscussionBoardAdminDiscussionBoardModerationLogsModerationLogId";

import { IPageIDiscussionBoardModerationLog } from "../../../../../api/structures/IPageIDiscussionBoardModerationLog";
import { IDiscussionBoardModerationLog } from "../../../../../api/structures/IDiscussionBoardModerationLog";

@Controller("/discussionBoard/admin/discussionBoard/moderationLogs")
export class DiscussionboardAdminDiscussionboardModerationlogsController {
  /**
   * Retrieve a filtered, paginated list of moderation log summaries.
   *
   * Retrieve a paginated list of moderation logs from the discussion board.
   *
   * This operation allows moderators and admins to search, filter, and review
   * logs detailing actions taken on posts and replies including edit, delete,
   * and approve operations.
   *
   * Security considerations include restricting access to authorized roles only
   * and ensuring sensitive user information in moderation action details is
   * appropriately handled.
   *
   * The moderation logs are maintained in the discussion_board_moderation_logs
   * table as defined in the Prisma schema. Each log record includes references
   * to the affected post or reply, the moderator responsible, the type of
   * action performed, any detailed notes, and timestamps.
   *
   * Typical usage involves fetching logs filtered by action types, associated
   * moderators, date ranges, or affected entities to support auditing and
   * compliance.
   *
   * Errors include unauthorized access (403) and invalid query parameters with
   * appropriate HTTP response codes.
   *
   * Clients should invoke the GET operation on specific log entries to retrieve
   * full details by log ID.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for moderation logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardModerationLog.IRequest,
  ): Promise<IPageIDiscussionBoardModerationLog.ISummary> {
    try {
      return await patchDiscussionBoardAdminDiscussionBoardModerationLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed moderation log by ID.
   *
   * Get detailed information about a specific moderation log entry.
   *
   * This operation is used by moderators and admins to inspect detailed audit
   * records of moderation actions on posts or replies.
   *
   * It includes information such as the action type (edit, delete, approve),
   * detailed notes, the moderator responsible, and timestamps.
   *
   * The underlying data originates from the discussion_board_moderation_logs
   * table, ensuring a single source of truth.
   *
   * Potential errors include not found (404) if the specified log ID does not
   * exist, and unauthorized (403) if the user lacks permissions.
   *
   * Proper validation of the UUID parameter is enforced.
   *
   * @param connection
   * @param moderationLogId Unique identifier of the moderation log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderationLogId")
    moderationLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardModerationLog> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardModerationLogsModerationLogId(
        {
          admin,
          moderationLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
