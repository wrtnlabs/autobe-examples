import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminDiscussionBoardAdmins } from "../../../../providers/patchDiscussionBoardAdminDiscussionBoardAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId } from "../../../../providers/getDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId";
import { putDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId } from "../../../../providers/putDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId";
import { deleteDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId } from "../../../../providers/deleteDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId";

import { IPageIDiscussionBoardDiscussionBoardAdmin } from "../../../../api/structures/IPageIDiscussionBoardDiscussionBoardAdmin";
import { IDiscussionBoardDiscussionBoardAdmin } from "../../../../api/structures/IDiscussionBoardDiscussionBoardAdmin";
import { IDiscussionBoardAdmin } from "../../../../api/structures/IDiscussionBoardAdmin";

@Controller("/discussionBoard/admin/discussionBoardAdmins")
export class DiscussionboardAdminDiscussionboardadminsController {
  /**
   * Search and retrieve a filtered, paginated list of discussion board
   * administrators.
   *
   * Retrieve a filtered and paginated list of discussion board administrators
   * from the system. This operation enables viewing administrator account
   * summaries with sorting and filtering capabilities based on email, display
   * name, and creation date.
   *
   * Security considerations restrict this operation to authenticated users with
   * administrator roles, ensuring that sensitive admin account information is
   * protected.
   *
   * This operation directly interfaces with the discussion_board_admins Prisma
   * table, utilizing all available fields such as email, display_name,
   * created_at, and updated_at timestamps. The response provides pagination
   * metadata and a list of administrator summaries.
   *
   * Validation rules include support for search filters and pagination
   * parameters to optimize data retrieval efficiency. Errors such as invalid
   * query parameters are handled by standard API error responses.
   *
   * This operation complements other admin-specific endpoints that may
   * manipulate individual admin user details.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for discussion board
   *   administrator filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardAdmin.IRequest,
  ): Promise<IPageIDiscussionBoardDiscussionBoardAdmin.ISummary> {
    try {
      return await patchDiscussionBoardAdminDiscussionBoardAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a discussion board administrator by ID.
   *
   * Retrieve detailed information of a specific discussion board administrator
   * by ID. This operation fetches all relevant admin account data.
   *
   * Access control ensures only admin role users can access this sensitive
   * information, maintaining strict security and confidentiality.
   *
   * The retrieved details include email, display name, timestamps, and soft
   * deletion status as defined in the discussion_board_admins Prisma table.
   *
   * Error handling includes returning not found errors for invalid or missing
   * IDs. This operation is often used in admin management UIs to view and audit
   * admin accounts.
   *
   * @param connection
   * @param discussionBoardAdminId Unique identifier of the target discussion
   *   board administrator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":discussionBoardAdminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardAdminId")
    discussionBoardAdminId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardAdmin> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId(
        {
          admin,
          discussionBoardAdminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing administrator user in discussion_board_admins table.
   *
   * This API endpoint allows updating an existing administrator user's
   * information in the discussion board system. The administrator is identified
   * by their unique ID provided in the path parameter. This operation supports
   * modification of the administrator's email, password hash, and display name.
   * Updating an administrator is a restricted operation, requiring proper
   * authorization to prevent unauthorized access.
   *
   * The underlying database entity is discussion_board_admins, which stores
   * administrator credentials and profile information. All updates must
   * maintain data integrity and uniqueness, especially the unique email
   * constraint.
   *
   * Security considerations require that only authenticated users with admin
   * role can perform this update. Proper validation is applied on input data to
   * ensure compliance with password policies and email formats.
   *
   * This operation pairs with other admin management operations for creating
   * and deleting administrator accounts, forming a complete admin user
   * lifecycle management API.
   *
   * Typical error responses involve invalid UUID format, data validation
   * errors, or authorization failures.
   *
   * This performs a hard update of the administrator record in the database,
   * replacing the fields with the provided data.
   *
   * @param connection
   * @param discussionBoardAdminId Unique identifier of the target administrator
   *   user
   * @param body Administrator user update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":discussionBoardAdminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardAdminId")
    discussionBoardAdminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAdmin.IUpdate,
  ): Promise<IDiscussionBoardAdmin> {
    try {
      return await putDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId(
        {
          admin,
          discussionBoardAdminId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an administrator user by ID from discussion_board_admins table.
   *
   * This API endpoint permanently deletes an administrator user from the
   * discussion board system identified by their unique ID. Only users with the
   * admin role are authorized to perform this operation.
   *
   * The deletion performs a hard removal from the discussion_board_admins table
   * in the database. All related records dependent on this administrator user
   * will be subject to cascading deletes as per relational constraints.
   *
   * Security considerations enforce strict role checking to prevent
   * unauthorized deletions. This operation is irreversible, so clients must
   * ensure confirmation before requesting this deletion.
   *
   * No request body is required for this operation. The path parameter uniquely
   * identifies the administrator to be deleted.
   *
   * This endpoint is typically used for administrative user lifecycle cleanup
   * and revocation of access.
   *
   * @param connection
   * @param discussionBoardAdminId Unique identifier of the target administrator
   *   user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":discussionBoardAdminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardAdminId")
    discussionBoardAdminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminDiscussionBoardAdminsDiscussionBoardAdminId(
        {
          admin,
          discussionBoardAdminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
