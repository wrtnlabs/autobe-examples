import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminDiscussionBoardGuests } from "../../../../providers/patchDiscussionBoardAdminDiscussionBoardGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId } from "../../../../providers/getDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId";
import { putDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId } from "../../../../providers/putDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId";
import { deleteDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId } from "../../../../providers/deleteDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId";

import { IPageIDiscussionBoardDiscussionBoardGuest } from "../../../../api/structures/IPageIDiscussionBoardDiscussionBoardGuest";
import { IDiscussionBoardDiscussionBoardGuest } from "../../../../api/structures/IDiscussionBoardDiscussionBoardGuest";

@Controller("/discussionBoard/admin/discussionBoardGuests")
export class DiscussionboardAdminDiscussionboardguestsController {
  /**
   * Search and retrieve a filtered, paginated list of discussion board guest
   * sessions.
   *
   * Retrieve a filtered and paginated list of discussion board guest sessions.
   * This operation enables efficient paging, searching, and filtering by guest
   * session properties including session tokens and timestamps.
   *
   * The operation targets the discussion_board_guests table defined in the
   * Prisma schema, which records guest users with unique session tokens and
   * session lifecycle timestamps. Pagination allows clients to control page
   * size and number for scalability.
   *
   * Security considerations include exposing guest session data only to
   * authorized services or administrative users. No authentication requirement
   * is assumed here, but real-world implementations should secure this endpoint
   * appropriately.
   *
   * Validation includes supporting multiple search criteria for guest sessions.
   * This operation returns summarized guest session information optimized for
   * listings, such as session token and timestamps.
   *
   * This operation supports the basic management of guest sessions, providing
   * analytics or cleanup capabilities as needed.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering guest
   *   sessions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardGuest.IRequest,
  ): Promise<IPageIDiscussionBoardDiscussionBoardGuest.ISummary> {
    try {
      return await patchDiscussionBoardAdminDiscussionBoardGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a single discussion board guest session.
   *
   * Retrieve detailed information about a specific guest session by its unique
   * ID. This operation accesses the discussion_board_guests table from the
   * Prisma schema and returns all relevant session details.
   *
   * Access to this endpoint should be restricted to admin users to protect
   * sensitive guest session information.
   *
   * The response includes the session token, creation time, update time, and
   * soft-delete status if applicable.
   *
   * This detailed view aids in guest session management, troubleshooting, and
   * auditing.
   *
   * @param connection
   * @param discussionBoardGuestId Unique identifier of the target discussion
   *   board guest session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":discussionBoardGuestId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardGuestId")
    discussionBoardGuestId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardGuest> {
    try {
      return await getDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId(
        {
          admin,
          discussionBoardGuestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update guest session information by discussionBoardGuestId.
   *
   * Update a guest session entity identified by the unique
   * discussionBoardGuestId.
   *
   * This operation permits modification of the guest session token and updated
   * timestamps to reflect session activity or state changes. It supports
   * setting a soft deletion timestamp to invalidate the guest session without
   * physical deletion.
   *
   * Authorization: This endpoint is likely restricted to system processes or
   * administrators managing guest session lifecycles.
   *
   * The underlying database table corresponds to 'discussion_board_guests' in
   * the Prisma schema, which stores guest sessions with fields such as
   * session_token, created_at, updated_at, and deleted_at as a soft deletion
   * marker.
   *
   * Request validation must ensure the uniqueness of the session_token upon
   * update.
   *
   * Security considerations include preventing unauthorized manipulation of
   * guest session tokens and maintaining session integrity.
   *
   * No response body is returned after successful update, though standard HTTP
   * status codes indicate operation success or failure.
   *
   * @param connection
   * @param discussionBoardGuestId Unique identifier of the guest session to
   *   update
   * @param body Guest session update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":discussionBoardGuestId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardGuestId")
    discussionBoardGuestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardGuest.IUpdate,
  ): Promise<IDiscussionBoardDiscussionBoardGuest> {
    try {
      return await putDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId(
        {
          admin,
          discussionBoardGuestId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete guest session by discussionBoardGuestId.
   *
   * Permanently delete a guest session entity by its unique
   * discussionBoardGuestId.
   *
   * This operation removes the guest session record physically from the
   * database, fully erasing associated session_token and timestamps.
   *
   * Authorization: Only administrators with proper authorization roles can
   * perform this irreversible operation.
   *
   * This endpoint supports system hygiene and management of transient guest
   * session data.
   *
   * There is no request body or response content. Success or failure is
   * indicated with HTTP status codes.
   *
   * @param connection
   * @param discussionBoardGuestId Unique identifier of the guest session to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":discussionBoardGuestId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("discussionBoardGuestId")
    discussionBoardGuestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminDiscussionBoardGuestsDiscussionBoardGuestId(
        {
          admin,
          discussionBoardGuestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
