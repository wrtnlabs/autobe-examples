import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardMemberDiscussionBoardPosts } from "../../../../providers/postDiscussionBoardMemberDiscussionBoardPosts";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostId } from "../../../../providers/putDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostId";

import { IDiscussionBoardDiscussionBoardPost } from "../../../../api/structures/IDiscussionBoardDiscussionBoardPost";

@Controller("/discussionBoard/member/discussionBoardPosts")
export class DiscussionboardMemberDiscussionboardpostsController {
  /**
   * Create a new discussion board post authored by an authenticated member. The
   * post must specify the category_id corresponding to an existing discussion
   * category and the member_id of the authoring member. The title is required
   * to be between 5 and 100 characters, and the body content must not exceed
   * 5000 characters. Profanity filtering applies to ensure content
   * appropriateness.
   *
   * On success, the newly created post is immediately visible with its full
   * metadata including timestamps and status. Authentication as a member role
   * is required.
   *
   * The API validates all inputs and returns the complete created post object
   * on success.
   *
   * @param connection
   * @param body Information needed to create a discussion board post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardPost.ICreate,
  ): Promise<IDiscussionBoardDiscussionBoardPost> {
    try {
      return await postDiscussionBoardMemberDiscussionBoardPosts({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a discussion board post by ID.
   *
   * Update an existing discussion board post by ID. Authorized users include
   * the member who created the post or moderators. This operation allows
   * modification of the title, body, or post_status with validation to maintain
   * title length within 5 to 100 characters and body length up to 5000
   * characters. Profanity filtering applies.
   *
   * The post to update is identified by the discussionBoardPostId path
   * parameter. The user must have permission to update the post.
   *
   * On success, the API returns the full updated post object with timestamps
   * and status metadata.
   *
   * Fail responses occur for authorization failures, validation errors, or if
   * the post does not exist.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the discussion board post
   *   to be updated
   * @param body Updated information for the discussion board post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":discussionBoardPostId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardPost.IUpdate,
  ): Promise<IDiscussionBoardDiscussionBoardPost> {
    try {
      return await putDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostId(
        {
          member,
          discussionBoardPostId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
