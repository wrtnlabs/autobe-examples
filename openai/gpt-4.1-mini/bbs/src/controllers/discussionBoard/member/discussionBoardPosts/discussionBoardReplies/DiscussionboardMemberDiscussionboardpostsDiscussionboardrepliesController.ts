import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardReplies } from "../../../../../providers/postDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardReplies";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardReplies } from "../../../../../providers/patchDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardReplies";
import { getDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId } from "../../../../../providers/getDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId";
import { putDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId } from "../../../../../providers/putDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId";
import { getDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId } from "../../../../../providers/getDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId";
import { putDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId } from "../../../../../providers/putDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId";
import { postDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardReplies } from "../../../../../providers/postDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardReplies";

import { IDiscussionBoardDiscussionBoardReply } from "../../../../../api/structures/IDiscussionBoardDiscussionBoardReply";
import { IPageIDiscussionBoardDiscussionBoardReplies } from "../../../../../api/structures/IPageIDiscussionBoardDiscussionBoardReplies";
import { IDiscussionBoardDiscussionBoardReplies } from "../../../../../api/structures/IDiscussionBoardDiscussionBoardReplies";

@Controller("/discussionBoard/member/discussionBoardPosts")
export class DiscussionboardMemberDiscussionboardpostsDiscussionboardrepliesController {
  /**
   * Create a new reply for a given discussion board post.
   *
   * Create a new reply to a discussion board post.
   *
   * The request body must include reply content adhering to length constraints
   * (5-1000 characters) and pass profanity filters.
   *
   * The reply is linked to the specified discussionBoardPostId, associating it
   * to the parent post.
   *
   * Security requires the authenticated user to possess the member role to
   * create replies.
   *
   * On successful creation, the new reply entity is returned with full details,
   * including identifiers, timestamps, and status.
   *
   * This operation complements the retrieval and management of discussion board
   * replies, facilitating active user engagement in discussions.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the parent discussion
   *   board post
   * @param body Details of the reply to be created
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post(":discussionBoardPostId/discussionBoardReplies")
  public async postByDiscussionboardpostid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardReply.ICreate,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await postDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardReplies(
        {
          member,
          discussionBoardPostId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of replies for a discussion board post.
   *
   * Allows authenticated members to retrieve a filtered and paginated list of
   * replies for a given discussion board post. The post is identified by its
   * UUID path parameter. The request body accepts filtering, searching,
   * sorting, and pagination parameters encapsulated in
   * IDiscussionBoardDiscussionBoardReplies.IRequest. The response body returns
   * paginated reply summaries in
   * IPageIDiscussionBoardDiscussionBoardReplies.ISummary format. Replies marked
   * as deleted (with deleted_at values) should be excluded by business logic
   * outside of this API definition. Access is restricted to users with the
   * member role to reflect the business requirement that members can browse
   * replies.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the discussion board post
   *   to retrieve replies for
   * @param body Filtering and pagination criteria for replies
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch(":discussionBoardPostId/discussionBoardReplies")
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardReplies.IRequest,
  ): Promise<IPageIDiscussionBoardDiscussionBoardReplies.ISummary> {
    try {
      return await patchDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardReplies(
        {
          member,
          discussionBoardPostId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific discussion board reply by post and reply IDs.
   *
   * Retrieve an individual reply within a discussion board post, identified by
   * discussionBoardPostId and discussionBoardReplyId.
   *
   * This operation fetches the reply's detailed information from the
   * discussion_board_replies Prisma table.
   *
   * Security considerations include ensuring the requesting user has
   * appropriate access rights, typically requiring authentication as a member
   * or higher role.
   *
   * The retrieved data include the reply content, authoring member, status, and
   * timestamps. This facilitates display of the reply in UI discussions and
   * supports detailed reply inspection.
   *
   * No request body is required as this is a read operation.
   *
   * If the specified post or reply does not exist, the operation should return
   * an appropriate 404 error response.
   *
   * This endpoint complements other operations such as listing replies for a
   * post or managing replies via create/update/delete operations.
   *
   * @param connection
   * @param discussionBoardPostId Unique identifier of the parent discussion
   *   board post
   * @param discussionBoardReplyId Unique identifier of the discussion board
   *   reply
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(
    ":discussionBoardPostId/discussionBoardReplies/:discussionBoardReplyId",
  )
  public async getByDiscussionboardpostidAndDiscussionboardreplyid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string & tags.Format<"uuid">,
    @TypedParam("discussionBoardReplyId")
    discussionBoardReplyId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await getDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId(
        {
          member,
          discussionBoardPostId,
          discussionBoardReplyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing reply to a discussion board post.
   *
   * Update a reply to a discussion board post with validated content.
   *
   * This operation allows the reply author or an authorized moderator to update
   * the content of a reply. The reply content must be between 5 and 1000
   * characters and pass the system's profanity filter.
   *
   * Security is enforced so only the reply owner or moderators can perform this
   * update. The operation uses the discussion_board_replies table from the
   * Prisma schema, ensuring referential integrity to the parent post and
   * member.
   *
   * The request body must conform to the
   * IDiscussionBoardDiscussionBoardReply.IUpdate DTO schema, ensuring correct
   * input validation. The response returns the updated reply entity with its
   * full details.
   *
   * Error scenarios include validation failures for content length or
   * profanity, unauthorized access, and resource not found errors if the reply
   * or post does not exist.
   *
   * @param connection
   * @param body Request body containing updated reply data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(
    ":discussionBoardPostId/discussionBoardReplies/:discussionBoardReplyId",
  )
  public async putByDiscussionboardpostidAndDiscussionboardreplyid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardPostId")
    discussionBoardPostId: string,
    @TypedParam("discussionBoardReplyId")
    discussionBoardReplyId: string,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardReply.IUpdate,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await putDiscussionBoardMemberDiscussionBoardPostsDiscussionBoardPostIdDiscussionBoardRepliesDiscussionBoardReplyId(
        {
          member,
          discussionBoardPostId,
          discussionBoardReplyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a specific reply for a discussion post.
   *
   * Retrieve a specific reply by its replyId associated with a particular post
   * identified by postId.
   *
   * This operation fetches the detailed reply including content, author,
   * status, and timestamps. It helps clients view detailed information about a
   * reply in the context of a specific discussion post.
   *
   * Security requires that only authenticated users with roles 'member',
   * 'moderator', or 'admin' can access this endpoint.
   *
   * This endpoint directly maps to the discussion_board_replies table and
   * respects soft deletion by ignoring replies marked as deleted.
   *
   * Clients should handle errors gracefully such as 404 Not Found or 403
   * Unauthorized.
   *
   * Related operations include listing replies for a post and creating new
   * replies under a post.
   *
   * @param connection
   * @param postId Unique identifier of the target discussion post
   * @param replyId Unique identifier of the target reply
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId/discussionBoardReplies/:replyId")
  public async getByPostidAndReplyid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await getDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId(
        {
          member,
          postId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a reply to a discussion board post.
   *
   * Update a reply to a specific discussion board post identified by postId and
   * replyId. This operation validates and updates the reply's content and
   * status fields according to discussion board business rules.
   *
   * Security considerations: Only authenticated members and moderators with
   * edit permissions may use this operation. Member edits are restricted to
   * replies they own and within 24 hours of creation, while moderators can edit
   * any reply at any time.
   *
   * This operation references the discussion_board_replies table, which stores
   * replies linked to posts and authors. It enforces content length
   * restrictions (5 to 1000 characters) and moderation status management.
   *
   * Validation rules require profanity filtering on the reply content before
   * acceptance.
   *
   * Related operations include creating new replies, deleting replies, and
   * managing posts.
   *
   * Error handling includes responding with authorization errors if the user
   * lacks permission, and validation errors if content does not meet criteria.
   *
   * @param connection
   * @param body Updated reply content and status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId/discussionBoardReplies/:replyId")
  public async putByPostidAndReplyid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string,
    @TypedParam("replyId")
    replyId: string,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardReplies.IUpdate,
  ): Promise<IDiscussionBoardDiscussionBoardReplies> {
    try {
      return await putDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardRepliesReplyId(
        {
          member,
          postId,
          replyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new reply under a discussion board post.
   *
   * Create a new reply to a specified discussion board post.
   *
   * The reply content and associated member ID are required in the request
   * body. The operation validates content length and profanity externally,
   * ensuring that only appropriate replies are persisted.
   *
   * Authorization is restricted to authenticated members. Moderators and admins
   * can also create replies via member accounts.
   *
   * Upon success, the newly created reply resource with all its details (id,
   * content, timestamps, statuses) is returned as per the
   * IDiscussionBoardDiscussionBoardReply schema.
   *
   * This endpoint interacts with the discussion_board_replies table and links
   * replies to discussion_board_posts and discussion_board_members.
   *
   * @param connection
   * @param postId Unique identifier of the parent discussion post where the
   *   reply will be added
   * @param body Information required to create a new reply
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post(":postId/discussionBoardReplies")
  public async postByPostid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDiscussionBoardReply.ICreate,
  ): Promise<IDiscussionBoardDiscussionBoardReply> {
    try {
      return await postDiscussionBoardMemberDiscussionBoardPostsPostIdDiscussionBoardReplies(
        {
          member,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
