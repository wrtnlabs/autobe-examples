import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putDiscussionBoardMemberDiscussionBoardMembersDiscussionBoardMemberId } from "../../../../providers/putDiscussionBoardMemberDiscussionBoardMembersDiscussionBoardMemberId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { deleteDiscussionBoardMemberDiscussionBoardMembersDiscussionBoardMemberId } from "../../../../providers/deleteDiscussionBoardMemberDiscussionBoardMembersDiscussionBoardMemberId";

import { IDiscussionBoardMember } from "../../../../api/structures/IDiscussionBoardMember";

@Controller(
  "/discussionBoard/member/discussionBoardMembers/:discussionBoardMemberId",
)
export class DiscussionboardMemberDiscussionboardmembersController {
  /**
   * Update discussion board member information by ID.
   *
   * Update discussion board member information by their unique ID. This
   * operation allows a member to update their email address, password hash, and
   * display name. The update must ensure the email remains unique across the
   * member base. Authorization ensures that only the member themselves or roles
   * with higher privilege can perform this operation.
   *
   * Updates are immediately reflected in the database with updated timestamps.
   * This operation complements user registration, login, and profile management
   * features of the application.
   *
   * Detailed errors are returned on validation failure such as duplicate email
   * or invalid field formats.
   *
   * @param connection
   * @param discussionBoardMemberId Unique identifier of the discussion board
   *   member to update
   * @param body Information to update for the discussion board member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardMemberId")
    discussionBoardMemberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardMember.IUpdate,
  ): Promise<IDiscussionBoardMember> {
    try {
      return await putDiscussionBoardMemberDiscussionBoardMembersDiscussionBoardMemberId(
        {
          member,
          discussionBoardMemberId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete discussion board member by ID.
   *
   * Delete a discussion board member from the system permanently by unique ID.
   * This operation removes the member record and all related data from the
   * database. Authorization and ownership checks apply to prevent unauthorized
   * deletion.
   *
   * Successful deletion results in no content response. Errors are returned if
   * the member does not exist or if authorization checks fail.
   *
   * @param connection
   * @param discussionBoardMemberId Unique identifier of the discussion board
   *   member to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("discussionBoardMemberId")
    discussionBoardMemberId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardMemberDiscussionBoardMembersDiscussionBoardMemberId(
        {
          member,
          discussionBoardMemberId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
