{"operations":[{"specification":"This API operation provides guest users, who are unauthenticated users that can browse discussion topics and view posts but cannot create or reply to content, with the capability to register as guest users and receive temporary authentication tokens. The operation corresponds to the discussion_board_guests table, which contains fields like id, session_token, created_at, updated_at, and deleted_at. The join operation accepts guest registration details, generates a unique session token, and issues temporary JWT tokens for guest sessions. It is a join type operation, meaning it creates a new account. The response body represents the authorized guest with type IDiscussionBoardGuest.IAuthorized. This operation does not require authentication and is publicly accessible.","authorizationType":"join","description":"This operation allows guest users to register by creating a temporary guest session with a unique session token stored in the database. It uses the discussion_board_guests table fields such as session_token, created_at, and updated_at to manage guest sessions.\n\nThis operation is designed for unauthenticated site visitors who want to have a temporary identity to browse content with limited access. Security considerations include issuing short-lived JWT tokens tied to the guest session token.\n\nThe path allows guests to create new temporary sessions without login, supporting ephemeral guest access.\n\nRelated operations include token refresh to renew access tokens for guests.\n\nErrors must be appropriately handled if session token generation or database insertion fails.","summary":"Create a new guest session and issue temporary tokens, referencing discussion_board_guests table.","parameters":[],"requestBody":{"description":"Guest registration information to create a new guest session.","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"Authorized guest session information, including temporary JWT tokens.","typeName":"IDiscussionBoardGuest.IAuthorized"},"authorizationRole":null,"name":"joinGuest","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"This API operation provides a refresh token endpoint for guest users who have previously registered or established a guest session. It corresponds to the discussion_board_guests table, leveraging the session_token to validate and issue new short-lived JWT access tokens.\n\nThe refresh endpoint is used to maintain seamless guest session authorization by verifying and renewing tokens with the valid refresh token.\n\nSecurity considerations include validating the refresh token's authenticity, expiration, and linkage to the guest session.\n\nThis operation is a refresh type, responding to authenticated token renewal requests.\n\nThe response body type is IDiscussionBoardGuest.IAuthorized, representing the updated authorized guest session state.\n\nErrors during token validation or refreshing must return appropriate error responses.\n\nThis endpoint allows guests to maintain active sessions without re-registering frequently.\n","authorizationType":"refresh","description":"Refresh tokens for a guest session by validating the provided refresh token and issuing new access tokens.\n\nUtilizes the discussion_board_guests table session_token and timestamps to verify session validity.\n\nThis operation supports seamless user experience for guest users with temporary sessions.\n\nRelated operation is join for initial guest session creation.\n\nResponses include new JWT tokens encapsulated in the authorized guest session response body.","summary":"Refresh access tokens for guest sessions using refresh token, referencing discussion_board_guests table.","parameters":[],"requestBody":{"description":"Refresh token request information with refresh token string.","typeName":"IDiscussionBoardGuest.IRefresh"},"responseBody":{"description":"Authorized guest session information with refreshed JWT tokens.","typeName":"IDiscussionBoardGuest.IAuthorized"},"authorizationRole":null,"name":"refreshGuest","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"This API operation handles member user registration (Join) for the discussion board. It creates a new member account with essential credentials and profile information stored in the discussion_board_members table. The operation validates the email and password, hashes the password for secure storage, and ensures that the new account is active and ready for login. It emits JWT-based authorization tokens upon successful registration.\n\nThis operation's security scope is public (authorizationType: 'join') allowing new users to register account. The member must provide email, password, and a display name. The response body returns an authorized token payload as IDiscussionBoardMember.IAuthorized type reflecting successful account creation.\n\nThis join endpoint is central to user acquisition and initiates the authentication lifecycle for members of the discussion board. It tightly integrates with the underlying members table, leveraging email and password_hash fields for authentication and display_name for user identity.\n\nRelated operations: login (authenticate existing user), refresh (renew tokens), profile management (update display name).","authorizationType":"join","description":"Register a new member user account by providing email, password, and display name. Creates discussion_board_members record and returns authorized JWT token.","summary":"Create a new member user account (discussion_board_members)","parameters":[],"requestBody":{"description":"New member account creation payload including email, password, and display name.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"Newly created member authorized token response with JWT payload.","typeName":"IDiscussionBoardMember.IAuthorized"},"authorizationRole":"member","name":"join","prerequisites":[],"path":"/auth/member/join","method":"post"},{"specification":"This API operation handles member user login for the discussion board. Existing members authenticate using email and password credentials validated against the discussion_board_members table. Successful login generates a new JWT access token and refresh token encapsulated within the IDiscussionBoardMember.IAuthorized response type.\n\nThis is a public endpoint allowing users to present credentials for authentication to obtain authorized access tokens. The email and password are mandatory in the request body.\n\nThis operation is essential for secure session management and starts the token lifecycle for authenticated members.\n\nRelated operations: join (register new member), refresh (renew tokens).","authorizationType":"login","description":"Authenticate member user credentials and issue JWT access and refresh tokens.","summary":"Member user login authentication","parameters":[],"requestBody":{"description":"Member login credentials including email and password.","typeName":"IDiscussionBoardMember.ILogin"},"responseBody":{"description":"Member authorized JWT token response with access and refresh tokens.","typeName":"IDiscussionBoardMember.IAuthorized"},"authorizationRole":"member","name":"login","prerequisites":[],"path":"/auth/member/login","method":"post"},{"specification":"This API operation handles refreshing of JWT access tokens using a valid refresh token for member users. It queries the token store associated with the member's discussion_board_members records to validate the refresh token's legitimacy and expiration.\n\nUpon success, a new JWT access token pair is issued with updated expiration time, encapsulated in the IDiscussionBoardMember.IAuthorized response type.\n\nThis secure endpoint is accessible only by authenticated members possessing a valid refresh token.\n\nRelated operations: login (initial token issue), join (account registration).","authorizationType":"refresh","description":"Refresh member user JWT access tokens using a valid refresh token.","summary":"Refresh JWT token for member user","parameters":[],"requestBody":{"description":"Valid refresh token payload for token renewal.","typeName":"IDiscussionBoardMember.IRefresh"},"responseBody":{"description":"Newly issued member authorized token response with refreshed JWT tokens.","typeName":"IDiscussionBoardMember.IAuthorized"},"authorizationRole":"member","name":"refresh","prerequisites":[],"path":"/auth/member/refresh","method":"post"},{"specification":"This API operation enables a moderator to register a new moderator account within the discussion board system. It creates a new account with validated email and password, and issues initial JWT tokens for authentication and authorization purposes. The operation corresponds to the discussion_board_moderators table which stores moderator-specific data including email, password_hash, display_name, timestamps, and soft deletion status.\n\nThe registration endpoint allows guests or authorized persons to create new moderators, subject to the system's business rules and validations. It will accept JSON payload with email, password, and display name, and returns an authorized data transfer object including JWT tokens.\n\nSecurity is paramount; the password_hash is internally generated and never exposed; inputs are validated for email format and password strength. The refresh token operation maintains session continuity.\n\nThis operation is critical for system security ensuring only authorized moderator accounts are created and managed securely through JWT authentication flows. Encryption and validation are handled internally.\n\nRelated operations include login and refresh for authentication lifecycle management.\n","authorizationType":"join","description":"Registrar moderator accounts in discussion_board_moderators table. Requires validated unique email, hashed password, and display name. Payload includes authentication credentials and profile info.\nOnly unique emails allowed as enforced by database constraints.\nPassword must meet minimal security standards as per business rules.\nReturns moderator authorized tokens on success.\n","summary":"Create a new moderator account in discussion_board_moderators table.","parameters":[],"requestBody":{"description":"Creation info for a new moderator account including credentials and display name.","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Authorized moderator data transfer object returning auth tokens and profile info.","typeName":"IDiscussionBoardModerator.IAuthorized"},"authorizationRole":"moderator","name":"joinModerator","prerequisites":[],"path":"/auth/moderator/join","method":"post"},{"specification":"This API operation allows an existing moderator to log in by submitting credentials including email and password. Upon successful authentication, the system issues access and refresh JWT tokens to maintain session security.\n\nThe operation interfaces with the discussion_board_moderators table to validate user credentials and roles. It ensures the email corresponds to a registered moderator with an appropriate password_hash.\n\nSecurity features include password validation, token issuance, and session handling. Failed login attempts return appropriate failure responses.\n\nThis endpoint is public allowing moderators to authenticate securely to the service.\n\nIt is integral to the authentication lifecycle along with join (registration) and refresh token operations.\n","authorizationType":"login","description":"Authenticate moderator credentials for login by verifying email and password hash against discussion_board_moderators table.\nIssue JWT access and refresh tokens upon success.\nReturn failure on invalid credentials.\n","summary":"Login existing moderator and obtain authentication tokens.","parameters":[],"requestBody":{"description":"Login credentials for a moderator including email and password.","typeName":"IDiscussionBoardModerator.ILogin"},"responseBody":{"description":"Authorized moderator data transfer with JWT tokens.","typeName":"IDiscussionBoardModerator.IAuthorized"},"authorizationRole":"moderator","name":"loginModerator","prerequisites":[],"path":"/auth/moderator/login","method":"post"},{"specification":"This API operation allows a logged-in moderator to refresh their JWT access tokens using a valid refresh token. It ensures continuous secure access without requiring re-authentication with email and password.\n\nThe refresh operation validates the provided refresh token against issued tokens, expiration, and revocation status.\n\nUpon validation, new access and refresh tokens are issued, maintaining secure session state.\n\nThis operation interfaces with the discussion_board_moderators table indirectly by managing tokens and session data.\n\nToken refresh is a critical security mechanism preventing unauthorized access and allowing token lifecycle management.\n","authorizationType":"refresh","description":"Refresh authentication tokens for a moderator with a valid refresh token.\nValidates refresh token, issues new JWT access and refresh tokens.\n","summary":"Refresh JWT authentication tokens for moderator.","parameters":[],"requestBody":{"description":"Refresh token request containing valid refresh token string.","typeName":"IAuthRefresh"},"responseBody":{"description":"Authorized moderator data transfer with new JWT tokens.","typeName":"IDiscussionBoardModerator.IAuthorized"},"authorizationRole":"moderator","name":"refreshModerator","prerequisites":[],"path":"/auth/moderator/refresh","method":"post"},{"specification":"This API operation allows system administrators (admins) to register a new admin account by submitting registration details such as email and password, following the business rules defined in the discussion board project. It interacts with the 'discussion_board_admins' Prisma DB table.\n\nThe registration operation validates the email format and password strength, stores a hashed password, and creates a new admin record. It does not require authentication as it is a public registration endpoint.\n\nThis operation is critical for bootstrapping admins who manage the discussion board system. Proper validations and constraints defined in the DB schema such as unique email and required password_hash are enforced during processing.\n\nThe operation follows JWT-based authentication flows, eventually issuing JWT tokens upon successful registration.\n\nRelated endpoints include login for admins and token refresh operations.\n\nSecurity: Being a public join endpoint, it validates inputs carefully preventing unauthorized admin creation. Passwords are stored hashed.\n\nError scenarios include duplicate email registration and invalid data submission.\n\nNo soft delete keywords are used in this operation; deletions are separate.\n\nThis endpoint is essential for the admin user lifecycle.","authorizationType":"join","description":"This is the registration (join) API for the Admin role. It enables creation of a new admin account using the unique email and a secure hashed password. The database schema 'discussion_board_admins' table includes fields such as 'email', 'password_hash', 'display_name', and timestamps. This operation ensures that only valid registration data is accepted and stored. Email must be unique.\n\nUpon successful registration, a JWT access token and a refresh token are issued, granting authorized access.\n\nThis endpoint is publicly accessible without prior authentication.\n\nRelated operations: login (authenticate admin), refresh (renew tokens).\n\nSecurity considerations include proper password hashing and input validation to prevent duplicate accounts and security breaches.\n\nThis operation reflects the member lifecycle starting point specifically tailored for admin users.","summary":"Admin role registration operation creating new admin account in 'discussion_board_admins' table","parameters":[],"requestBody":{"description":"Admin registration data: unique email, password, display name","typeName":"IDiscussionBoardAdmin.IJoin"},"responseBody":{"description":"Authenticated admin info with JWT tokens","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":"admin","path":"/auth/admin/join","method":"post","name":"join","prerequisites":[]},{"specification":"This API operation allows system administrators (admins) to log in by submitting credentials including email and password. It validates credentials against stored hashed passwords in the 'discussion_board_admins' Prisma DB table.\n\nOn successful authentication, it issues JWT access and refresh tokens for authorized sessions.\n\nThis endpoint is publicly accessible for admins to initiate authenticated sessions.\n\nSecurity notes: Passwords must be securely hashed; authentication failure returns appropriate error codes.\n\nLogin attempts and failures should be monitored for security purposes.\n\nNo soft delete keyword concerns are applicable, as login only verifies credentials.\n\nRelated endpoints are join (registration) and refresh (token renewal).\n\nThis operation is essential for the admin lifecycle management, enabling secure system access.","authorizationType":"login","description":"This is the login API for the Admin role. Admin users provide their email and password for authentication. Credentials are checked against the 'discussion_board_admins' table storing unique emails and hashed passwords.\n\nOn successful validation, JWT tokens are issued for access and refresh.\n\nThis endpoint is publicly accessible and serves as the primary authentication gateway for system administrators.\n\nSecurity considerations include protection against brute force attacks and secure password verification.\n\nThis operation depends on the join operation for account creation.\n\nRelated operations include join and refresh.\n\nSoft delete is not relevant here.","summary":"Admin role login operation authenticating existing admin accounts","parameters":[],"requestBody":{"description":"Admin login credentials: email and password","typeName":"IDiscussionBoardAdmin.ILogin"},"responseBody":{"description":"Authenticated admin info with JWT tokens","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":"admin","path":"/auth/admin/login","method":"post","name":"login","prerequisites":[]},{"specification":"This API operation allows system administrators (admins) to refresh JWT access tokens using valid refresh tokens, extending session validity. It validates the refresh token's integrity and expiration with respect to the 'discussion_board_admins' context.\n\nRefresh tokens are used to securely renew access tokens without requiring re-authentication via login.\n\nThis endpoint has restricted access requiring valid refresh tokens.\n\nIt is essential for managing secure, long-lived admin sessions without transmitting credentials repeatedly.\n\nNo soft delete keyword is involved because this operation only processes tokens.\n\nRelated authentications include join (registration) and login (authentication).\n\nThis operation boosts system security by mitigating token theft and replay attacks via rotating refresh tokens.\n\nIt ensures admin users maintain continuous access while minimizing exposure of credentials.\n\nIt reflects modern JWT best practices for session management in the admin security context.","authorizationType":"refresh","description":"This is the token refresh API for the Admin role. It accepts a valid refresh token and issues a new JWT access token to maintain an active session.\n\nThis endpoint requires a valid refresh token and is accessible only to authenticated admins.\n\nSecurity is paramount: the refresh token is validated rigorously to prevent token misuse.\n\nRelated endpoints are join (registration) and login (authentication).\n\nThis operation helps maintain uninterrupted admin sessions with reduced login frequency.\n\nThe underlying schema is 'discussion_board_admins' reflecting the admin user base.","summary":"Admin role token refresh operation renewing JWT access tokens","parameters":[],"requestBody":{"description":"Admin refresh token request","typeName":"IDiscussionBoardAdmin.IRefresh"},"responseBody":{"description":"Refreshed authenticated admin info with new JWT access token","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":"admin","path":"/auth/admin/refresh","method":"post","name":"refresh","prerequisites":[]},{"specification":"This operation retrieves a paginated list of discussion board members from the discussion_board_members table in the Prisma schema. It supports complex filtering, searching, and pagination of registered members who have user accounts with properties like email, display name, and account creation dates. This operation is used to browse members and facilitates administrative or user management functions within the discussion board platform.","description":"This operation allows clients to search and retrieve a filtered, paginated list of discussion board registered members. It supports query parameters such as partial matching on email and display name, as well as sorting and pagination controls.\n\nAuthorization is required as member information is sensitive and should only be accessed by administrators or system staff.\n\nThe operation corresponds directly to the discussion_board_members table, reflecting properties such as email, display name, and timestamps. Results are returned in a paginated format optimized for UI listing.\n\nThis search operation is foundational for user management features and may be used in conjunction with other member detail and update APIs.\n\nError handling includes validation of input search criteria and pagination parameters. Results include only existing members who are not soft-deleted (deleted_at is null).","summary":"Search and retrieve discussion board members with pagination and filters","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering discussion board members","typeName":"IDiscussionBoardDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of discussion board members matching search criteria","typeName":"IPageIDiscussionBoardDiscussionBoardMember"},"authorizationType":null,"authorizationRole":"admin","path":"/discussionBoard/admin/discussionBoardMembers","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific discussion board member identified by their unique UUID. It fetches member profile data including email, display name, and timestamps from the discussion_board_members table, excluding the password hash for security reasons.\n\nAuthorization is required to protect member privacy and restrict access only to system administrators or authorized users.\n\nThis operation is typically used for user management or profile viewing features where detailed member information is needed.\n\nErrors are handled by returning appropriate not found or unauthorized error messages when the member ID is invalid or access is denied.","description":"Retrieve detailed profile information of a single discussion board member by their unique ID. This includes public member attributes such as email and display name but excludes sensitive password hashes.\n\nAccess to this operation is restricted to administrators to ensure member confidentiality.\n\nThis operation corresponds to the discussion_board_members table in the Prisma schema and returns the member's full details except password hashes.\n\nIf the member does not exist or is soft-deleted (deleted_at is not null), the operation returns a not found error.\n\nThis function supports administrative user management workflows.","summary":"Retrieve a specific discussion board member by ID","parameters":[{"name":"discussionBoardMemberId","description":"Unique identifier of the discussion board member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the discussion board member","typeName":"IDiscussionBoardDiscussionBoardMember"},"authorizationType":null,"authorizationRole":"admin","path":"/discussionBoard/admin/discussionBoardMembers/{discussionBoardMemberId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"A discussion board member must be created before their detailed information can be retrieved by ID. This ensures the member exists in the system before fetching profile information."}]},{"specification":"This operation updates an existing discussion board member's information in the discussion_board_members table. It allows modification of the member's attributes including email, password hash, and display name, identified by the member's unique UUID. The operation is designed to modify user profile information while ensuring data integrity, uniqueness constraints, and proper authorization.\n\nIt accepts a path parameter `discussionBoardMemberId` which identifies the member record to update. The request body contains the fields to update, following the `IDiscussionBoardMember.IUpdate` DTO schema. The response returns the updated detailed member entity following the `IDiscussionBoardMember` DTO schema.\n\nThis operation requires role authorization of 'member' indicating it is accessible by authenticated members.\n\nThe operation supports validation of unique email addresses and handles updating timestamps accordingly.","description":"Update discussion board member information by their unique ID. This operation allows a member to update their email address, password hash, and display name. The update must ensure the email remains unique across the member base. Authorization ensures that only the member themselves or roles with higher privilege can perform this operation.\n\nUpdates are immediately reflected in the database with updated timestamps. This operation complements user registration, login, and profile management features of the application.\n\nDetailed errors are returned on validation failure such as duplicate email or invalid field formats.","summary":"Update discussion board member information by ID","parameters":[{"name":"discussionBoardMemberId","description":"Unique identifier of the discussion board member to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update for the discussion board member","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The updated discussion board member entity","typeName":"IDiscussionBoardMember"},"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/discussionBoardMembers/{discussionBoardMemberId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board member must be created before updating their information to ensure the member exists in the system."}]},{"specification":"This operation permanently deletes a discussion board member record identified by their unique UUID from the discussion_board_members table. It performs a hard delete removing all associated data and references. The endpoint requires the unique member ID as a path parameter.\n\nAuthorization requires the role of 'member', meaning only authenticated member users or roles with equivalent or higher privilege can perform this deletion.\n\nNo request body is needed as the deletion is targeted solely by the path parameter. The response body is null as the resource is removed.\n\nThis endpoint is related to user account management scenarios such as account deletion or deactivation.","description":"Delete a discussion board member from the system permanently by unique ID. This operation removes the member record and all related data from the database. Authorization and ownership checks apply to prevent unauthorized deletion.\n\nSuccessful deletion results in no content response. Errors are returned if the member does not exist or if authorization checks fail.","summary":"Permanently delete discussion board member by ID","parameters":[{"name":"discussionBoardMemberId","description":"Unique identifier of the discussion board member to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/discussionBoardMembers/{discussionBoardMemberId}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Member must exist before the member can be deleted to ensure the resource exists."}]},{"specification":"This operation retrieves a paginated, filtered list of discussionBoardPosts from the `discussion_board_posts` table in the Prisma schema. It allows clients to search and filter posts based on category, title, and content with pagination and sorting by latest activity. It uses the PATCH method to accept complex search parameters in the request body via the IDiscussionBoardDiscussionBoardPost.IRequest DTO. The response body returns a paginated list of post summaries as IPageIDiscussionBoardDiscussionBoardPost.ISummary. This aligns with business rules specifying browsing and searching of discussion board posts by categories (economic or political) with pagination and filtering.","description":"Retrieve a filtered and paginated list of discussion board posts. This operation supports advanced search capabilities allowing users to filter posts by various criteria such as category, title keywords, and full-text content search.\n\nThe operation utilizes the `discussion_board_posts` table, including fields for post title, body, category_id, member_id, and timestamps. Posts are filtered based on category and content, respecting the maximum length constraints and profanity filtering rules defined in the business requirements.\n\nSecurity and access control allow any user including guests to browse posts, but creation and editing are restricted to authenticated members and moderators. The returned list is paginated, supporting 20 posts per page ordered by recency of activity.\n\nErrors include validation failures for request parameters and filters. No request body exists for simple retrieval, but PATCH allows complex filter definitions.","summary":"Search and retrieve a filtered, paginated list of discussion board posts","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for discussion board posts","typeName":"IDiscussionBoardDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated list of discussion board post summaries matching search criteria","typeName":"IPageIDiscussionBoardDiscussionBoardPost.ISummary"},"authorizationType":null,"authorizationRole":null,"path":"/discussionBoard/discussionBoardPosts","method":"patch","name":"index","authorizationRoles":[],"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before filtering posts by category in search and retrieval."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Member must exist before filtering posts by member author in search and retrieval."}]},{"specification":"This operation retrieves detailed information of a specific discussion board post by its unique identifier. The data comes from the `discussion_board_posts` table in the Prisma schema. It allows users to view the full post content, category, author, and timestamps. The GET method is used with the post ID as a path parameter. The response is the full entity DTO IDiscussionBoardDiscussionBoardPost providing all relevant fields of the post.\n\nThe post ID parameter is a UUID string corresponding to the primary key of the post. This operation supports anonymous viewing of posts, so no authorization roles are required.\n\nError handling includes post not found and invalid ID format responses.","description":"Retrieve detailed information about a specific discussion board post by its UUID identifier. This includes the post's title, body, associated category, author details, post status, and timestamps.\n\nThe operation references the `discussion_board_posts` entity from the Prisma schema, leveraging all available fields for comprehensive post detail retrieval.\n\nThere are no authorization restrictions for viewing posts, allowing guests and members to access the content.\n\nValidation errors or missing posts result in appropriate error messages as per API standards.","summary":"Get detailed discussion board post information by ID","parameters":[{"name":"discussionBoardPostId","description":"Unique identifier of the target discussion board post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board post information","typeName":"IDiscussionBoardDiscussionBoardPost"},"authorizationType":null,"authorizationRole":null,"path":"/discussionBoard/discussionBoardPosts/{discussionBoardPostId}","method":"get","name":"at","authorizationRoles":[],"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before a post associated with that category can be retrieved."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before it can be retrieved."}]},{"specification":"This operation creates a new discussion board post within the discussion_board_posts table. The post must be authored by a member (authenticated user) and linked to an existing discussion category (e.g., Economic or Political). The post requires a title between 5 and 100 characters and a body content up to 5000 characters. The post_status field indicates visibility or moderation status and must be properly set during creation (e.g., \"public\", \"pending\"). The API accepts a JSON request body of type IDiscussionBoardDiscussionBoardPost.ICreate and returns the created post's details as IDiscussionBoardDiscussionBoardPost.","description":"Create a new discussion board post authored by an authenticated member. The post must specify the category_id corresponding to an existing discussion category and the member_id of the authoring member. The title is required to be between 5 and 100 characters, and the body content must not exceed 5000 characters. Profanity filtering applies to ensure content appropriateness.\n\nOn success, the newly created post is immediately visible with its full metadata including timestamps and status. Authentication as a member role is required.\n\nThe API validates all inputs and returns the complete created post object on success.","summary":"Create a new discussion board post","parameters":[],"requestBody":{"description":"Information needed to create a discussion board post.","typeName":"IDiscussionBoardDiscussionBoardPost.ICreate"},"responseBody":{"description":"Created discussion board post details.","typeName":"IDiscussionBoardDiscussionBoardPost"},"authorizationRoles":["member"],"name":"create","path":"/discussionBoard/member/discussionBoardPosts","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before creating a post that references it."}]},{"specification":"This operation updates an existing discussion board post identified by discussionBoardPostId in the discussion_board_posts table. Only the post owner (member) or a moderator may perform updates. The update may modify the title, body, or post_status fields and applies the same validation rules as for creation (title length 5-100 characters, body up to 5000 characters, profanity filtering).\n\nThe API accepts the post ID as a path parameter and an update request body of type IDiscussionBoardDiscussionBoardPost.IUpdate. It returns the updated post details upon success. Proper authorization is required to restrict access to member owners or moderators.","description":"Update an existing discussion board post by ID. Authorized users include the member who created the post or moderators. This operation allows modification of the title, body, or post_status with validation to maintain title length within 5 to 100 characters and body length up to 5000 characters. Profanity filtering applies.\n\nThe post to update is identified by the discussionBoardPostId path parameter. The user must have permission to update the post.\n\nOn success, the API returns the full updated post object with timestamps and status metadata.\n\nFail responses occur for authorization failures, validation errors, or if the post does not exist.","summary":"Update a discussion board post by ID","parameters":[{"name":"discussionBoardPostId","description":"Unique identifier of the discussion board post to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the discussion board post.","typeName":"IDiscussionBoardDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated discussion board post details.","typeName":"IDiscussionBoardDiscussionBoardPost"},"authorizationRoles":["member","moderator"],"name":"update","path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}","method":"put","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before it can be associated with the post during update."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before it can be updated."}]},{"specification":"This operation updates an existing discussion board post identified by discussionBoardPostId in the discussion_board_posts table. Only the post owner (member) or a moderator may perform updates. The update may modify the title, body, or post_status fields and applies the same validation rules as for creation (title length 5-100 characters, body up to 5000 characters, profanity filtering).\n\nThe API accepts the post ID as a path parameter and an update request body of type IDiscussionBoardDiscussionBoardPost.IUpdate. It returns the updated post details upon success. Proper authorization is required to restrict access to member owners or moderators.","description":"Update an existing discussion board post by ID. Authorized users include the member who created the post or moderators. This operation allows modification of the title, body, or post_status with validation to maintain title length within 5 to 100 characters and body length up to 5000 characters. Profanity filtering applies.\n\nThe post to update is identified by the discussionBoardPostId path parameter. The user must have permission to update the post.\n\nOn success, the API returns the full updated post object with timestamps and status metadata.\n\nFail responses occur for authorization failures, validation errors, or if the post does not exist.","summary":"Update a discussion board post by ID","parameters":[{"name":"discussionBoardPostId","description":"Unique identifier of the discussion board post to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the discussion board post.","typeName":"IDiscussionBoardDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated discussion board post details.","typeName":"IDiscussionBoardDiscussionBoardPost"},"authorizationRoles":["member","moderator"],"name":"update","path":"/discussionBoard/moderator/discussionBoardPosts/{discussionBoardPostId}","method":"put","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before the post can be updated to belong to it."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post identified by discussionBoardPostId must have been created before it can be updated."}]},{"specification":"This operation permanently deletes a discussion board post by ID from the discussion_board_posts table in the Prisma schema. It requires the post ID as a UUID path parameter. Only users with the \"moderator\" role have authorization to perform this deletion. The deletion is a hard delete that removes the post and all associated replies due to cascade delete rules in the database. No request body is needed, and there is no response body on success.","path":"/discussionBoard/moderator/discussionBoardPosts/{discussionBoardPostId}","method":"delete","summary":"Delete a discussion board post by its ID","description":"Allows moderators to permanently delete a discussion board post identified by its UUID. This endpoint enforces authorization to restrict access to users with the moderator role. Upon successful deletion, the post and all its associated replies are removed from the database due to cascade delete constraints. No request payload is required. The operation returns no content in the response. Clients should handle possible errors such as attempting to delete a non-existent post or lacking proper permissions externally.","parameters":[{"name":"discussionBoardPostId","in":"path","description":"Unique identifier of the discussion board post to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post identified by discussionBoardPostId must exist before it can be deleted."}]},{"specification":"This operation retrieves a filtered, paginated list of replies for a specific discussion board post from the discussion_board_replies table. It accepts a UUID path parameter for the post ID and accepts filtering, search, sorting, and pagination criteria in the request body of type IDiscussionBoardDiscussionBoardReplies.IRequest. The response returns a paginated summary list of replies in format IPageIDiscussionBoardDiscussionBoardReplies.ISummary. The endpoint is authorized for authenticated members with the 'member' role, allowing them to view replies to posts they can access.","path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"patch","summary":"Retrieve a filtered, paginated list of replies for a discussion board post","description":"Allows authenticated members to retrieve a filtered and paginated list of replies for a given discussion board post. The post is identified by its UUID path parameter. The request body accepts filtering, searching, sorting, and pagination parameters encapsulated in IDiscussionBoardDiscussionBoardReplies.IRequest. The response body returns paginated reply summaries in IPageIDiscussionBoardDiscussionBoardReplies.ISummary format. Replies marked as deleted (with deleted_at values) should be excluded by business logic outside of this API definition. Access is restricted to users with the member role to reflect the business requirement that members can browse replies.","parameters":[{"name":"discussionBoardPostId","in":"path","description":"Unique identifier of the discussion board post to retrieve replies for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination criteria for replies","typeName":"IDiscussionBoardDiscussionBoardReplies.IRequest"},"responseBody":{"description":"Paginated reply summary list for the discussion board post","typeName":"IPageIDiscussionBoardDiscussionBoardReplies.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post identified by discussionBoardPostId must exist before retrieving its replies."}]},{"specification":"This operation retrieves a specific reply within a discussion board post. It targets the discussion_board_replies table in the Prisma schema, fetching a single discussionBoardReply resource by its unique identifier discussionBoardReplyId, nested under its parent discussionBoardPost identified by discussionBoardPostId. The operation returns detailed information about the reply, including content, author (member), reply status, and timestamps. This GET method supports user viewing of individual replies in discussions. Access control should restrict this to authenticated users with appropriate roles (e.g., member, moderator, or admin). The parameters discussionBoardPostId and discussionBoardReplyId must be valid UUIDs corresponding to the post and reply. No request body is needed. The successful response includes the full reply entity representation as defined in the IDiscussionBoardDiscussionBoardReply DTO.","description":"Retrieve an individual reply within a discussion board post, identified by discussionBoardPostId and discussionBoardReplyId.\n\nThis operation fetches the reply's detailed information from the discussion_board_replies Prisma table.\n\nSecurity considerations include ensuring the requesting user has appropriate access rights, typically requiring authentication as a member or higher role.\n\nThe retrieved data include the reply content, authoring member, status, and timestamps. This facilitates display of the reply in UI discussions and supports detailed reply inspection.\n\nNo request body is required as this is a read operation.\n\nIf the specified post or reply does not exist, the operation should return an appropriate 404 error response.\n\nThis endpoint complements other operations such as listing replies for a post or managing replies via create/update/delete operations.","summary":"Retrieve a specific discussion board reply by post and reply IDs","parameters":[{"name":"discussionBoardPostId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent discussion board post"},{"name":"discussionBoardReplyId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the discussion board reply"}],"requestBody":null,"responseBody":{"description":"Detailed information of the discussion board reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationRoles":["member","moderator","admin"],"name":"getByDiscussionboardpostidAndDiscussionboardreplyid","path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies/{discussionBoardReplyId}","method":"get","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post identified by discussionBoardPostId must exist before retrieving a specific reply."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"The discussion board reply identified by discussionBoardReplyId must exist within the specified discussionBoardPostId before retrieval."}]},{"specification":"This operation retrieves a specific reply within a discussion board post. It targets the discussion_board_replies table in the Prisma schema, fetching a single discussionBoardReply resource by its unique identifier discussionBoardReplyId, nested under its parent discussionBoardPost identified by discussionBoardPostId. The operation returns detailed information about the reply, including content, author (member), reply status, and timestamps. This GET method supports user viewing of individual replies in discussions. Access control should restrict this to authenticated users with appropriate roles (e.g., member, moderator, or admin). The parameters discussionBoardPostId and discussionBoardReplyId must be valid UUIDs corresponding to the post and reply. No request body is needed. The successful response includes the full reply entity representation as defined in the IDiscussionBoardDiscussionBoardReply DTO.","description":"Retrieve an individual reply within a discussion board post, identified by discussionBoardPostId and discussionBoardReplyId.\n\nThis operation fetches the reply's detailed information from the discussion_board_replies Prisma table.\n\nSecurity considerations include ensuring the requesting user has appropriate access rights, typically requiring authentication as a member or higher role.\n\nThe retrieved data include the reply content, authoring member, status, and timestamps. This facilitates display of the reply in UI discussions and supports detailed reply inspection.\n\nNo request body is required as this is a read operation.\n\nIf the specified post or reply does not exist, the operation should return an appropriate 404 error response.\n\nThis endpoint complements other operations such as listing replies for a post or managing replies via create/update/delete operations.","summary":"Retrieve a specific discussion board reply by post and reply IDs","parameters":[{"name":"discussionBoardPostId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent discussion board post"},{"name":"discussionBoardReplyId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the discussion board reply"}],"requestBody":null,"responseBody":{"description":"Detailed information of the discussion board reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationRoles":["member","moderator","admin"],"name":"getByDiscussionboardpostidAndDiscussionboardreplyid","path":"/discussionBoard/moderator/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies/{discussionBoardReplyId}","method":"get","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must be created before discussion board posts can reference a valid category_id."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before replies can be added or retrieved."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Discussion board reply must be created before it can be retrieved or manipulated."}]},{"specification":"This operation retrieves a specific reply within a discussion board post. It targets the discussion_board_replies table in the Prisma schema, fetching a single discussionBoardReply resource by its unique identifier discussionBoardReplyId, nested under its parent discussionBoardPost identified by discussionBoardPostId. The operation returns detailed information about the reply, including content, author (member), reply status, and timestamps. This GET method supports user viewing of individual replies in discussions. Access control should restrict this to authenticated users with appropriate roles (e.g., member, moderator, or admin). The parameters discussionBoardPostId and discussionBoardReplyId must be valid UUIDs corresponding to the post and reply. No request body is needed. The successful response includes the full reply entity representation as defined in the IDiscussionBoardDiscussionBoardReply DTO.","description":"Retrieve an individual reply within a discussion board post, identified by discussionBoardPostId and discussionBoardReplyId.\n\nThis operation fetches the reply's detailed information from the discussion_board_replies Prisma table.\n\nSecurity considerations include ensuring the requesting user has appropriate access rights, typically requiring authentication as a member or higher role.\n\nThe retrieved data include the reply content, authoring member, status, and timestamps. This facilitates display of the reply in UI discussions and supports detailed reply inspection.\n\nNo request body is required as this is a read operation.\n\nIf the specified post or reply does not exist, the operation should return an appropriate 404 error response.\n\nThis endpoint complements other operations such as listing replies for a post or managing replies via create/update/delete operations.","summary":"Retrieve a specific discussion board reply by post and reply IDs","parameters":[{"name":"discussionBoardPostId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent discussion board post"},{"name":"discussionBoardReplyId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the discussion board reply"}],"requestBody":null,"responseBody":{"description":"Detailed information of the discussion board reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationRoles":["member","moderator","admin"],"name":"getByDiscussionboardpostidAndDiscussionboardreplyid","path":"/discussionBoard/admin/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies/{discussionBoardReplyId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must exist before retrieving its replies."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Discussion board reply must exist before it can be retrieved."}]},{"specification":"This operation creates a new reply in a specific discussion board post. It works on the discussion_board_replies table in the Prisma schema, associating the new reply with the parent post identified by discussionBoardPostId. The POST request expects a request body of type IDiscussionBoardDiscussionBoardReply.ICreate containing the reply content and necessary information. The operation validates reply length (5 to 1000 characters) and checks for profanity as per business rules. On success, it returns the created reply entity, including timestamps and status. Authorization requires the user to be an authenticated member with permission to add replies. This operation enables members to participate in discussions by adding new replies.","description":"Create a new reply to a discussion board post.\n\nThe request body must include reply content adhering to length constraints (5-1000 characters) and pass profanity filters.\n\nThe reply is linked to the specified discussionBoardPostId, associating it to the parent post.\n\nSecurity requires the authenticated user to possess the member role to create replies.\n\nOn successful creation, the new reply entity is returned with full details, including identifiers, timestamps, and status.\n\nThis operation complements the retrieval and management of discussion board replies, facilitating active user engagement in discussions.","summary":"Create a new reply for a given discussion board post","parameters":[{"name":"discussionBoardPostId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent discussion board post"}],"requestBody":{"description":"Details of the reply to be created","typeName":"IDiscussionBoardDiscussionBoardReply.ICreate"},"responseBody":{"description":"Information of the created reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationRoles":["member"],"name":"postByDiscussionboardpostid","path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"The discussion board category must exist before creating discussion board posts or replies within posts linked to that category."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post identified by discussionBoardPostId must exist before creating a reply linked to it."}]},{"specification":"This operation updates an existing reply to a discussion board post authored by a member. It operates on the discussion_board_replies table from the Prisma DB schema. The reply content can be updated within content length limits (5 to 1000 characters) and must pass profanity filtering. Only the reply owner or authorized moderators can perform this update. The operation requires the IDs of the parent post and the reply as path parameters, ensuring relational integrity. The request body uses the IDiscussionBoardDiscussionBoardReply.IUpdate DTO for validated update data. The response returns the updated reply entity with full details consistent with the schema. Authentication is required for members and moderators with appropriate permissions.","description":"Update a reply to a discussion board post with validated content.\n\nThis operation allows the reply author or an authorized moderator to update the content of a reply. The reply content must be between 5 and 1000 characters and pass the system's profanity filter.\n\nSecurity is enforced so only the reply owner or moderators can perform this update. The operation uses the discussion_board_replies table from the Prisma schema, ensuring referential integrity to the parent post and member.\n\nThe request body must conform to the IDiscussionBoardDiscussionBoardReply.IUpdate DTO schema, ensuring correct input validation. The response returns the updated reply entity with its full details.\n\nError scenarios include validation failures for content length or profanity, unauthorized access, and resource not found errors if the reply or post does not exist.\n","summary":"Update an existing reply to a discussion board post","parameters":[],"requestBody":{"description":"Request body containing updated reply data","typeName":"IDiscussionBoardDiscussionBoardReply.IUpdate"},"responseBody":{"description":"Updated discussion board reply entity","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies/{discussionBoardReplyId}","method":"put","name":"putByDiscussionboardpostidAndDiscussionboardreplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"The reply must exist before it can be updated. This prerequisite creates the reply resource."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post must exist before a reply can be created or updated. This prerequisite creates the post resource."}]},{"specification":"This operation updates an existing reply to a discussion board post authored by a member. It operates on the discussion_board_replies table from the Prisma DB schema. The reply content can be updated within content length limits (5 to 1000 characters) and must pass profanity filtering. Only the reply owner or authorized moderators can perform this update. The operation requires the IDs of the parent post and the reply as path parameters, ensuring relational integrity. The request body uses the IDiscussionBoardDiscussionBoardReply.IUpdate DTO for validated update data. The response returns the updated reply entity with full details consistent with the schema. Authentication is required for members and moderators with appropriate permissions.","description":"Update a reply to a discussion board post with validated content.\n\nThis operation allows the reply author or an authorized moderator to update the content of a reply. The reply content must be between 5 and 1000 characters and pass the system's profanity filter.\n\nSecurity is enforced so only the reply owner or moderators can perform this update. The operation uses the discussion_board_replies table from the Prisma schema, ensuring referential integrity to the parent post and member.\n\nThe request body must conform to the IDiscussionBoardDiscussionBoardReply.IUpdate DTO schema, ensuring correct input validation. The response returns the updated reply entity with its full details.\n\nError scenarios include validation failures for content length or profanity, unauthorized access, and resource not found errors if the reply or post does not exist.\n","summary":"Update an existing reply to a discussion board post","parameters":[],"requestBody":{"description":"Request body containing updated reply data","typeName":"IDiscussionBoardDiscussionBoardReply.IUpdate"},"responseBody":{"description":"Updated discussion board reply entity","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"moderator","path":"/discussionBoard/moderator/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies/{discussionBoardReplyId}","method":"put","name":"putByDiscussionboardpostidAndDiscussionboardreplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"The reply must be created before it can be updated. Ensures that the reply belongs to the parent post identified by discussionBoardPostId."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"The discussion board post must exist before its replies can be updated. This ensures that the post identified by discussionBoardPostId is created and valid."}]},{"specification":"This operation deletes an existing reply from a discussion board post. It operates on the discussion_board_replies table as per the Prisma schema. Deletion is restricted to authorized moderators who can remove inappropriate or rule-violating content. The operation uses the post ID and reply ID as path parameters to identify the resource. The deletion permanently removes the reply record from the database.\n\nNo request body is required as no additional input beyond path parameters is needed.\n\nThe response does not return a body.\n\nSecurity requires that only moderators or admins can perform this delete operation, ensuring proper content moderation.\n","description":"Delete a reply from a discussion board post by authorized moderators.\n\nThis operation permanently removes the specified reply record from the database. It requires the IDs of the parent post and the reply.\n\nOnly users with moderator or admin roles may perform this action. The operation references the discussion_board_replies table in the Prisma schema, confirming the data is deleted fully and irreversibly.\n\nNo request body is needed. The response is empty, indicating successful deletion or an appropriate error if the reply or post does not exist.\n","summary":"Delete a reply from a discussion board post","parameters":[],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","path":"/discussionBoard/moderator/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies/{discussionBoardReplyId}","method":"delete","name":"eraseByDiscussionboardpostidAndDiscussionboardreplyid","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of discussion board moderators from the discussion_board_moderators table in the Prisma schema. It supports advanced searching, filtering, sorting, and pagination capabilities to list moderators based on criteria such as email, display name, and account status. This allows administrators or systems to browse and manage moderator accounts effectively, ensuring they can locate specific moderators or analyze the moderator base.","description":"Retrieve a paginated list of discussion board moderators, supporting filtering by email and display name, as well as pagination and sorting.\n\nThis operation is intended for administrative or system user interfaces where moderator accounts need to be managed or reviewed.\n\nPermissions are restricted to authorized roles due to the sensitive nature of moderator account information.\n\nThe operation accesses the discussion_board_moderators table, which stores moderator email, hashed password, display name, and timestamps, along with soft delete capability via the deleted_at field.\n\nValidation rules include filtering based on indexed searchable fields and ensuring pagination parameters fall within reasonable limits.\n\nRelated operations include retrieval of individual moderator details and management actions like creation, updating, or deletion of moderator accounts.\n\nResponses provide moderator summary information for efficient list displays.","summary":"Retrieve paginated list of discussion board moderators","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering discussion board moderators","typeName":"IDiscussionBoardDiscussionBoardModerator.IRequest"},"responseBody":{"description":"Paginated list of discussion board moderator summary information","typeName":"IPageIDiscussionBoardDiscussionBoardModerator.ISummary"},"authorizationRoles":["admin"],"path":"/discussionBoard/admin/discussionBoardModerators","method":"patch","name":"index","authorizationType":null,"authorizationRole":"admin","prerequisites":[]},{"specification":"This operation retrieves detailed information of a specific discussion board moderator identified by their unique ID from the discussion_board_moderators table.\n\nIt allows authorized users to view comprehensive details of the moderator account including email, display name, creation and update timestamps, and soft deletion status.\n\nAccess is restricted to administrative roles to preserve confidentiality and control over moderator information.\n\nThe operation uses the path parameter `discussionBoardModeratorId` which must be a UUID string referencing the primary key of the moderator.\n\nRelated operations include listing moderators with search and pagination, as well as modification endpoints for managing moderator accounts.\n\nThe response includes full detailed information of the single moderator entity.","description":"Retrieve detailed information of a discussion board moderator by ID.\n\nPermission to access this data is limited to authorized administrators.\n\nReturns full record including email, display name, timestamps, and status from discussion_board_moderators table.\n\nPath parameter `discussionBoardModeratorId` must be a valid UUID.\n\nIncludes soft delete considerations where a non-null deleted_at indicates deactivated account.","summary":"Retrieve discussion board moderator detail by ID","parameters":[{"name":"discussionBoardModeratorId","description":"Unique identifier of the discussion board moderator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board moderator information","typeName":"IDiscussionBoardDiscussionBoardModerator"},"authorizationRoles":["admin"],"path":"/discussionBoard/admin/discussionBoardModerators/{discussionBoardModeratorId}","method":"get","name":"at","authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board categories must exist before retrieving moderator details, as categories are fundamental classification entities in the system."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board posts must be created before moderators can moderate or view moderator details related to posts."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Discussion board replies must exist and be linked to posts for accurate moderator management of replies."}]},{"specification":"This operation updates the details of a specific discussion board moderator. It operates on the discussion_board_moderators table of the Prisma schema. The moderator is identified by their unique UUID (discussionBoardModeratorId). The endpoint accepts updated moderator information such as email, passwordHash, and displayName along with timestamps for updated_at and optionally deleted_at if the account is deactivated. The update respects the schema constraints like unique email and valid UUID for the moderator ID. Access control should ensure that only authorized users (e.g., administrators) can perform this operation.","description":"Update a discussion board moderator's information by their unique identifier.\n\nThis operation allows for modifying the moderator's email, password hash, and display name, along with updating timestamps such as updated_at and optionally marking the account as deactivated by setting deleted_at.\n\nOnly authorized users such as admins should be permitted to perform this update as moderators have elevated privileges and sensitive credentials.\n\nThe operation interfaces directly with the discussion_board_moderators table in the database and must follow all schema constraints including unique email addresses and valid UUIDs.\n\nValidation of email format and password strength should be performed at the application layer.\n\nIf successful, the updated moderator object is returned in the response. Errors may result from validation failures or unauthorized access.\n\nRelated operations include creating new moderators, deleting moderators, and listing moderators.\n\nThis operation uses HTTP PUT to replace or update a moderator's information.","summary":"Update a discussion board moderator by ID","parameters":[{"name":"discussionBoardModeratorId","in":"path","description":"Unique identifier of the discussion board moderator","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the discussion board moderator","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Updated discussion board moderator information","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"update","path":"/discussionBoard/admin/discussionBoardModerators/{discussionBoardModeratorId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation deletes a specific discussion board moderator identified by the UUID discussionBoardModeratorId. It performs a hard delete since no soft delete fields are defined for this operation endpoint, meaning the moderator record is permanently removed from the database. The operation requires administrative privileges due to the sensitive nature of moderator accounts. No request body is needed. If successful, no response body content is returned. Proper error handling should ensure unauthorized deletion attempts are blocked and appropriate error codes are returned.","description":"Delete a discussion board moderator permanently by their unique ID.\n\nThis operation removes the moderator's record from the discussion_board_moderators table entirely. It must be performed only by users with administrative rights to prevent accidental or malicious removal of privileged accounts.\n\nBecause this action is destructive and irreversible, it is critical to enforce strict authorization controls.\n\nThe endpoint accepts the moderator's unique ID as a path parameter and requires no request body.\n\nOn success, no response body is returned.\n\nError scenarios include attempting to delete a non-existent moderator or lacking proper permissions.\n\nRelated operations include updating moderator info and creating new moderators.\n\nThis operation uses the HTTP DELETE method to perform the removal.","summary":"Delete a discussion board moderator by ID","parameters":[{"name":"discussionBoardModeratorId","in":"path","description":"Unique identifier of the discussion board moderator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionBoard/admin/discussionBoardModerators/{discussionBoardModeratorId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"A discussion board category must exist before managing moderators, as categories classify discussion posts linked to moderators' activities."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board posts must exist to associate with moderators and validate moderator context."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{postId}/discussionBoardReplies","method":"post"},"description":"Replies to discussion board posts must exist to provide content context for moderator actions."}]},{"specification":"This operation retrieves a paginated and filterable list of discussion board administrators. It operates on the discussion_board_admins table from the Prisma schema, enabling authorized users to search, filter, paginate, and sort the list of admin users. The filtering and pagination parameters support efficient browsing and management of admin accounts. This endpoint is primarily accessible by users with administrative privileges to facilitate system administration functions.","path":"/discussionBoard/admin/discussionBoardAdmins","method":"patch","summary":"Search and retrieve a filtered, paginated list of discussion board administrators","description":"Retrieve a filtered and paginated list of discussion board administrators from the system. This operation enables viewing administrator account summaries with sorting and filtering capabilities based on email, display name, and creation date.\n\nSecurity considerations restrict this operation to authenticated users with administrator roles, ensuring that sensitive admin account information is protected.\n\nThis operation directly interfaces with the discussion_board_admins Prisma table, utilizing all available fields such as email, display_name, created_at, and updated_at timestamps. The response provides pagination metadata and a list of administrator summaries.\n\nValidation rules include support for search filters and pagination parameters to optimize data retrieval efficiency. Errors such as invalid query parameters are handled by standard API error responses.\n\nThis operation complements other admin-specific endpoints that may manipulate individual admin user details.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for discussion board administrator filtering","typeName":"IDiscussionBoardDiscussionBoardAdmin.IRequest"},"responseBody":{"description":"Paginated list of discussion board administrator summaries matching search criteria","typeName":"IPageIDiscussionBoardDiscussionBoardAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific discussion board administrator identified by their unique ID. It accesses the discussion_board_admins table in the Prisma schema and returns comprehensive data about the admin user.\n\nAccess is restricted to users with administrative roles to ensure sensitive administrator data is not exposed to unauthorized parties.\n\nThe response includes all pertinent administrator details such as email, display name, creation and update timestamps, and account status fields. Errors such as invalid ID format or non-existent admin IDs are handled with appropriate error responses.\n\nThis endpoint is essential for viewing individual administrator profiles in administrative interfaces or management dashboards.","path":"/discussionBoard/admin/discussionBoardAdmins/{discussionBoardAdminId}","method":"get","summary":"Retrieve detailed information of a discussion board administrator by ID","description":"Retrieve detailed information of a specific discussion board administrator by ID. This operation fetches all relevant admin account data.\n\nAccess control ensures only admin role users can access this sensitive information, maintaining strict security and confidentiality.\n\nThe retrieved details include email, display name, timestamps, and soft deletion status as defined in the discussion_board_admins Prisma table.\n\nError handling includes returning not found errors for invalid or missing IDs. This operation is often used in admin management UIs to view and audit admin accounts.","parameters":[{"name":"discussionBoardAdminId","description":"Unique identifier of the target discussion board administrator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board administrator information","typeName":"IDiscussionBoardDiscussionBoardAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"Update operation on the discussion_board_admins table in the database. This operation allows updating an existing administrator user's information, including email, password hash, and display name. The administrator ID is specified in the path parameter. All fields correspond directly to columns in the discussion_board_admins table of the Prisma schema. The operation requires an authenticated admin role to ensure only authorized users can update administrator accounts. Validation includes ensuring the ID is a valid UUID and the provided data fields conform to schema constraints.","description":"This API endpoint allows updating an existing administrator user's information in the discussion board system. The administrator is identified by their unique ID provided in the path parameter. This operation supports modification of the administrator's email, password hash, and display name. Updating an administrator is a restricted operation, requiring proper authorization to prevent unauthorized access.\n\nThe underlying database entity is discussion_board_admins, which stores administrator credentials and profile information. All updates must maintain data integrity and uniqueness, especially the unique email constraint.\n\nSecurity considerations require that only authenticated users with admin role can perform this update. Proper validation is applied on input data to ensure compliance with password policies and email formats.\n\nThis operation pairs with other admin management operations for creating and deleting administrator accounts, forming a complete admin user lifecycle management API.\n\nTypical error responses involve invalid UUID format, data validation errors, or authorization failures.\n\nThis performs a hard update of the administrator record in the database, replacing the fields with the provided data.","summary":"Update an existing administrator user in discussion_board_admins table","parameters":[{"name":"discussionBoardAdminId","description":"Unique identifier of the target administrator user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Administrator user update information","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"Updated administrator user information","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"path":"/discussionBoard/admin/discussionBoardAdmins/{discussionBoardAdminId}","method":"put","name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Delete operation on the discussion_board_admins table in the database. This operation permanently removes an administrator user identified by their unique ID from the system. Deletion is a restricted operation requiring admin role authorization. The operation takes the administrator ID as a path parameter and does not require a request body. The database enforces cascading deletes if applicable.\n\nThe deletion is a hard delete removing the record from the database completely. No soft delete pattern is implemented for this table.\n\nProper error handling includes invalid ID format or access denial if the caller is unauthorized.\n\nThis operation complements the update and create operations for administrator lifecycle management.","description":"This API endpoint permanently deletes an administrator user from the discussion board system identified by their unique ID. Only users with the admin role are authorized to perform this operation.\n\nThe deletion performs a hard removal from the discussion_board_admins table in the database. All related records dependent on this administrator user will be subject to cascading deletes as per relational constraints.\n\nSecurity considerations enforce strict role checking to prevent unauthorized deletions. This operation is irreversible, so clients must ensure confirmation before requesting this deletion.\n\nNo request body is required for this operation. The path parameter uniquely identifies the administrator to be deleted.\n\nThis endpoint is typically used for administrative user lifecycle cleanup and revocation of access.","summary":"Delete an administrator user by ID from discussion_board_admins table","parameters":[{"name":"discussionBoardAdminId","description":"Unique identifier of the target administrator user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionBoard/admin/discussionBoardAdmins/{discussionBoardAdminId}","method":"delete","name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of guest sessions for browsing and tracking guest activities in the discussion board. It accesses the discussion_board_guests table from the Prisma schema, providing filtering and pagination support to efficiently search guest sessions by session token or creation date. The endpoint supports complex search parameters allowing clients to perform detailed queries, with results including session token uniqueness and timestamps.","path":"/discussionBoard/admin/discussionBoardGuests","method":"patch","summary":"Search and retrieve a filtered, paginated list of discussion board guest sessions","description":"Retrieve a filtered and paginated list of discussion board guest sessions. This operation enables efficient paging, searching, and filtering by guest session properties including session tokens and timestamps.\n\nThe operation targets the discussion_board_guests table defined in the Prisma schema, which records guest users with unique session tokens and session lifecycle timestamps. Pagination allows clients to control page size and number for scalability.\n\nSecurity considerations include exposing guest session data only to authorized services or administrative users. No authentication requirement is assumed here, but real-world implementations should secure this endpoint appropriately.\n\nValidation includes supporting multiple search criteria for guest sessions. This operation returns summarized guest session information optimized for listings, such as session token and timestamps.\n\nThis operation supports the basic management of guest sessions, providing analytics or cleanup capabilities as needed.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering guest sessions","typeName":"IDiscussionBoardDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated list of discussion board guest session summaries matching search criteria","typeName":"IPageIDiscussionBoardDiscussionBoardGuest.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"search","prerequisites":[]},{"specification":"This operation retrieves detailed information of a single discussion board guest session based on its unique UUID identifier. It queries the discussion_board_guests table in the Prisma schema and returns precise details about the guest session identified by the guest's primary key.\n\nThis endpoint is crucial for management and auditing purposes, enabling administrators to view the lifecycle and state of individual guest sessions, including session tokens and timestamps indicating creation and last update.\n\nSecurity restrictions should ensure only authorized administrators can access this information since it deals with session identifiers and data that may have privacy implications.\n\nThe response includes all fields from the discussion_board_guests table, forming a comprehensive view of the guest session.\n\nThis operation supports detailed inspection and management of guest sessions within the economic and political discussion board service.","path":"/discussionBoard/admin/discussionBoardGuests/{discussionBoardGuestId}","method":"get","summary":"Retrieve detailed information of a single discussion board guest session","description":"Retrieve detailed information about a specific guest session by its unique ID. This operation accesses the discussion_board_guests table from the Prisma schema and returns all relevant session details.\n\nAccess to this endpoint should be restricted to admin users to protect sensitive guest session information.\n\nThe response includes the session token, creation time, update time, and soft-delete status if applicable.\n\nThis detailed view aids in guest session management, troubleshooting, and auditing.","parameters":[{"name":"discussionBoardGuestId","description":"Unique identifier of the target discussion board guest session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified discussion board guest session","typeName":"IDiscussionBoardDiscussionBoardGuest"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"This operation updates the discussionBoardGuest entity in the Actors namespace of the Prisma schema. It allows modifying guest session information including the session token and timestamps. The primary key is 'id', which is supplied as a path parameter. The operation supports updating session_token, updated_at timestamps, and soft deletion flag through 'deleted_at'. The guest session management aligns with business rules for unauthenticated guest browsing sessions. This update enables effective guest session lifecycle management and soft deletion marking, ensuring proper tracking of visitation without full user authentication.","description":"Update a guest session entity identified by the unique discussionBoardGuestId.\n\nThis operation permits modification of the guest session token and updated timestamps to reflect session activity or state changes. It supports setting a soft deletion timestamp to invalidate the guest session without physical deletion.\n\nAuthorization: This endpoint is likely restricted to system processes or administrators managing guest session lifecycles.\n\nThe underlying database table corresponds to 'discussion_board_guests' in the Prisma schema, which stores guest sessions with fields such as session_token, created_at, updated_at, and deleted_at as a soft deletion marker.\n\nRequest validation must ensure the uniqueness of the session_token upon update. \n\nSecurity considerations include preventing unauthorized manipulation of guest session tokens and maintaining session integrity.\n\nNo response body is returned after successful update, though standard HTTP status codes indicate operation success or failure.","summary":"Update guest session information by discussionBoardGuestId","parameters":[{"name":"discussionBoardGuestId","description":"Unique identifier of the guest session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Guest session update data","typeName":"IDiscussionBoardDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"Updated guest session entity","typeName":"IDiscussionBoardDiscussionBoardGuest"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/discussionBoard/admin/discussionBoardGuests/{discussionBoardGuestId}","method":"put","prerequisites":[]},{"specification":"This operation permanently removes a guest session record identified by discussionBoardGuestId from the system. It acts on the 'discussion_board_guests' table in the Prisma schema and deletes guest session information such as session_token and timestamps. This endpoint supports maintaining clean session management by allowing authorized administrators to erase obsolete guest sessions.\n\nAuthorization: Access is restricted to administrators responsible for guest session management.\n\nThis is a hard delete operation that fully removes the record rather than marking it deleted.\n\nNo request body is required and no response body is provided after successful removal; HTTP status codes communicate operation outcomes.","description":"Permanently delete a guest session entity by its unique discussionBoardGuestId.\n\nThis operation removes the guest session record physically from the database, fully erasing associated session_token and timestamps.\n\nAuthorization: Only administrators with proper authorization roles can perform this irreversible operation.\n\nThis endpoint supports system hygiene and management of transient guest session data.\n\nThere is no request body or response content. Success or failure is indicated with HTTP status codes.","summary":"Delete guest session by discussionBoardGuestId","parameters":[{"name":"discussionBoardGuestId","description":"Unique identifier of the guest session to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/discussionBoard/admin/discussionBoardGuests/{discussionBoardGuestId}","method":"delete","prerequisites":[]},{"specification":"This operation retrieves a paginated list of discussion board categories, allowing clients to filter, search, and paginate over categories that classify discussion posts within economic or political themes. It operates on the discussion_board_categories table from the Prisma schema. This endpoint supports advanced search criteria and pagination parameters to access subsets of available categories efficiently.","description":"Retrieve a filtered and paginated list of discussion board categories from the system. This operation supports searching by name or description, sorting, and pagination.\n\nThe discussion_board_categories table categorizes posts to enable content filtering by Economic or Political themes, among others. This operation gives clients the ability to explore categories and decide under which domain to post.\n\nSecurity considerations include allowing public access since categories are generally not sensitive. However, the API may enforce rate limiting to prevent abuse.\n\nThis operation allows clients to retrieve category summaries and relevant metadata for display in filtering UI components or selection lists.\n\nExpected behavior includes support for a variety of query filters and configurable page sizes and offsets. Errors may arise from malformed requests or database connectivity issues.","summary":"Search and retrieve paginated list of discussion board categories","parameters":[],"requestBody":{"description":"Search criteria, pagination, and sorting parameters for discussion board categories","typeName":"IDiscussionBoardDiscussionBoardCategories.IRequest"},"responseBody":{"description":"Paginated list of discussion board category summaries matching search criteria","typeName":"IPageIDiscussionBoardDiscussionBoardCategories.ISummary"},"authorizationType":null,"authorizationRole":null,"path":"/discussionBoard/discussionBoardCategories","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information of a specific discussion board category by its unique identifier. It interacts with the discussion_board_categories table and fetches comprehensive details such as name, description, timestamps, and status.\n\nThis endpoint supports fetching a single category, commonly used when retrieving full category data for editing or detailed display.\n\nSecurity considerations include allowing public or authenticated access since category information is generally non-sensitive.\n\nClient applications use this endpoint to obtain detailed category information when managing discussion posts or displaying category details.\n\nError handling includes responding to invalid or non-existent category IDs with appropriate error messages.","description":"Retrieve detailed information about a specific discussion board category identified by its unique ID.\n\nThis includes the category's name, optional description, creation and update timestamps, and soft delete status.\n\nThe discussion_board_categories table is central for organizing posts into economic or political themes.\n\nNo special authorization required as category information is public.\n\nErrors include cases where the specified ID does not exist or is malformed.\n\nThis operation returns a single resource representing the category's full details.","summary":"Retrieve a specific discussion board category by ID","parameters":[{"name":"discussionBoardCategoryId","description":"Unique identifier of the target discussion board category","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board category information","typeName":"IDiscussionBoardDiscussionBoardCategories"},"authorizationType":null,"authorizationRole":null,"path":"/discussionBoard/discussionBoardCategories/{discussionBoardCategoryId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must be created before it can be retrieved by its ID"}]},{"specification":"This operation creates a new discussion board category in the discussion_board_categories table. It requires specifying a unique category name (e.g., Economic or Political) and optionally a description. The system automatically manages created_at and updated_at timestamps. Soft deletion is supported by the deleted_at column indicating if the category is inactive. The category can then be associated with discussion posts.","path":"/discussionBoard/admin/discussionBoardCategories","method":"post","summary":"Create a new discussion board category","description":"Create a new discussion board category with a unique name and optional description.\n\nThis operation allows administrators or authorized users to add new discussion categories which classify discussion topics into economic or political themes.\n\nAccess to this endpoint should be restricted to administrative roles as it affects the supported classification structure.\n\nThe system automatically sets timestamps for creation and last update. The category's unique name enforces no duplicates.\n\nOnce created, the category is available for posts to associate with. Soft deletion is supported via the deleted_at field, but not managed in this operation.\n\nError handling must ensure duplicate names are rejected with clear messages.","parameters":[],"requestBody":{"description":"Creation information for the discussion board category","typeName":"IDiscussionBoardDiscussionBoardCategory.ICreate"},"responseBody":{"description":"Details of the created discussion board category","typeName":"IDiscussionBoardDiscussionBoardCategory"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[]},{"specification":"This operation updates an existing discussion board category by its ID in the discussion_board_categories table. It allows changing the category name and description if needed. The updated_at timestamp is refreshed to mark modification time. Soft deletion is managed by the deleted_at field but not modified here.\n\nChanging the category name must ensure uniqueness. Access is restricted to administrative users.\n\nThis operation enforces updates only to allowed fields and rejects invalid or duplicate names.","path":"/discussionBoard/admin/discussionBoardCategories/{discussionBoardCategoryId}","method":"put","summary":"Update a discussion board category","description":"Update an existing discussion board category identified by its ID.\n\nOnly authorized administrators can perform this operation.\n\nThe update payload can change the category name and description. The system updates the updated_at timestamp.\n\nUniqueness checks on the name field prevent duplicate category names.\n\nSoft deletion status is not changed by this update endpoint.\n\nErrors include handling of non-existent categories or duplicate names.","parameters":[{"name":"discussionBoardCategoryId","description":"Unique identifier of the discussion board category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the discussion board category","typeName":"IDiscussionBoardDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"Details of the updated discussion board category","typeName":"IDiscussionBoardDiscussionBoardCategory"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must be created before it can be updated. This ensures the category with the specified discussionBoardCategoryId exists."}]},{"specification":"This operation permanently deletes a discussion board category by its unique identifier (UUID) from the discussion_board_categories table. Upon deletion, all posts associated with this category will also be cascaded deleted according to the database foreign key constraints. Only authorized users with admin or moderator roles should be allowed to perform this operation.","description":"This DELETE operation removes a specific discussion board category identified by discussionBoardCategoryId. The category represents topical classifications such as Economic or Political on the discussion board.\n\nOnly moderators and administrators should be authorized to delete categories due to the impact on all associated discussion posts. Deletion is performed as a hard delete, removing the category record and all linked posts permanently from the database.\n\nPath parameter discussionBoardCategoryId must be a valid UUID referencing the category to delete. There is no request body or response body for this operation beyond success/error status codes.\n\nCare should be exercised by client implementations to ensure that this operation is used judiciously, as it impacts multiple posts and discussion board content hierarchy.","summary":"Delete discussion board category by ID","parameters":[{"name":"discussionBoardCategoryId","description":"Unique identifier of the discussion board category to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionBoard/admin/discussionBoardCategories/{discussionBoardCategoryId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before it can be deleted"}]},{"specification":"This operation permanently deletes a discussion board category by its unique identifier (UUID) from the discussion_board_categories table. Upon deletion, all posts associated with this category will also be cascaded deleted according to the database foreign key constraints. Only authorized users with admin or moderator roles should be allowed to perform this operation.","description":"This DELETE operation removes a specific discussion board category identified by discussionBoardCategoryId. The category represents topical classifications such as Economic or Political on the discussion board.\n\nOnly moderators and administrators should be authorized to delete categories due to the impact on all associated discussion posts. Deletion is performed as a hard delete, removing the category record and all linked posts permanently from the database.\n\nPath parameter discussionBoardCategoryId must be a valid UUID referencing the category to delete. There is no request body or response body for this operation beyond success/error status codes.\n\nCare should be exercised by client implementations to ensure that this operation is used judiciously, as it impacts multiple posts and discussion board content hierarchy.","summary":"Delete discussion board category by ID","parameters":[{"name":"discussionBoardCategoryId","description":"Unique identifier of the discussion board category to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionBoard/moderator/discussionBoardCategories/{discussionBoardCategoryId}","method":"delete","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before it can be deleted"}]},{"specification":"This operation retrieves a paginated list of replies for a specific discussion board post from the discussion_board_replies table. It supports filtering, sorting, and pagination of replies associated with the given postId. The postId path parameter uniquely identifies the parent post. The operation returns reply summary information including content and metadata.","description":"This PATCH operation retrieves a filtered, paginated list of replies associated with a specific discussion board post identified by postId. Replies represent member-authored responses to discussion topics.\n\nThe request body includes filtering, pagination, and sorting parameters, enabling clients to request replies with constraints such as page size, page number, search keywords within content, or filtering by reply status.\n\nThe response body is a paginated summary list of replies matching the given postId and filtering criteria.\n\nPath parameter postId must be a valid UUID of the parent discussion board post.\n\nAuthorization is generally public as replies to posts are visible to all users including guests.","summary":"Retrieve paginated list of replies for a discussion board post","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to get replies for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for discussion board replies filtering","typeName":"IDiscussionBoardDiscussionBoardReply.IRequest"},"responseBody":{"description":"Paginated list of discussion board reply summaries matching search criteria","typeName":"IPageIDiscussionBoardDiscussionBoardReply.ISummary"},"authorizationRoles":[],"name":"index","path":"/discussionBoard/discussionBoardPosts/{postId}/discussionBoardReplies","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board post requires an existing category. Category must be created before replies can be retrieved for posts in that category."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must exist before retrieving its replies."}]},{"specification":"This operation retrieves detailed information of a specific reply for a discussion board post from the discussion_board_replies table in the Prisma schema. It requires both the postId and replyId path parameters to identify the exact reply resource. The response includes all relevant properties such as content, reply status, timestamps, and author member ID as defined in the IDiscussionBoardDiscussionBoardReply response type. The endpoint enforces authorization for roles 'member', 'moderator', and 'admin' allowing them to view reply details while excluding guests.","description":"Retrieve a specific reply by its replyId associated with a particular post identified by postId.\n\nThis operation fetches the detailed reply including content, author, status, and timestamps. It helps clients view detailed information about a reply in the context of a specific discussion post.\n\nSecurity requires that only authenticated users with roles 'member', 'moderator', or 'admin' can access this endpoint.\n\nThis endpoint directly maps to the discussion_board_replies table and respects soft deletion by ignoring replies marked as deleted.\n\nClients should handle errors gracefully such as 404 Not Found or 403 Unauthorized.\n\nRelated operations include listing replies for a post and creating new replies under a post.","summary":"Get detailed information of a specific reply for a discussion post","parameters":[{"name":"postId","description":"Unique identifier of the target discussion post","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the target reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed discussion board reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/discussionBoardPosts/{postId}/discussionBoardReplies/{replyId}","method":"get","name":"getByPostidAndReplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must exist before accessing a specific reply tied to it."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Reply must exist before it can be retrieved in detail."}]},{"specification":"This operation retrieves detailed information of a specific reply for a discussion board post from the discussion_board_replies table in the Prisma schema. It requires both the postId and replyId path parameters to identify the exact reply resource. The response includes all relevant properties such as content, reply status, timestamps, and author member ID as defined in the IDiscussionBoardDiscussionBoardReply response type. The endpoint enforces authorization for roles 'member', 'moderator', and 'admin' allowing them to view reply details while excluding guests.","description":"Retrieve a specific reply by its replyId associated with a particular post identified by postId.\n\nThis operation fetches the detailed reply including content, author, status, and timestamps. It helps clients view detailed information about a reply in the context of a specific discussion post.\n\nSecurity requires that only authenticated users with roles 'member', 'moderator', or 'admin' can access this endpoint.\n\nThis endpoint directly maps to the discussion_board_replies table and respects soft deletion by ignoring replies marked as deleted.\n\nClients should handle errors gracefully such as 404 Not Found or 403 Unauthorized.\n\nRelated operations include listing replies for a post and creating new replies under a post.","summary":"Get detailed information of a specific reply for a discussion post","parameters":[{"name":"postId","description":"Unique identifier of the target discussion post","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the target reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed discussion board reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"moderator","path":"/discussionBoard/moderator/discussionBoardPosts/{postId}/discussionBoardReplies/{replyId}","method":"get","name":"getByPostidAndReplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Reply must exist to retrieve its detailed information for the given discussion post."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion post must exist before replies can be retrieved for it."}]},{"specification":"This operation retrieves detailed information of a specific reply for a discussion board post from the discussion_board_replies table in the Prisma schema. It requires both the postId and replyId path parameters to identify the exact reply resource. The response includes all relevant properties such as content, reply status, timestamps, and author member ID as defined in the IDiscussionBoardDiscussionBoardReply response type. The endpoint enforces authorization for roles 'member', 'moderator', and 'admin' allowing them to view reply details while excluding guests.","description":"Retrieve a specific reply by its replyId associated with a particular post identified by postId.\n\nThis operation fetches the detailed reply including content, author, status, and timestamps. It helps clients view detailed information about a reply in the context of a specific discussion post.\n\nSecurity requires that only authenticated users with roles 'member', 'moderator', or 'admin' can access this endpoint.\n\nThis endpoint directly maps to the discussion_board_replies table and respects soft deletion by ignoring replies marked as deleted.\n\nClients should handle errors gracefully such as 404 Not Found or 403 Unauthorized.\n\nRelated operations include listing replies for a post and creating new replies under a post.","summary":"Get detailed information of a specific reply for a discussion post","parameters":[{"name":"postId","description":"Unique identifier of the target discussion post","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the target reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed discussion board reply","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"admin","path":"/discussionBoard/admin/discussionBoardPosts/{postId}/discussionBoardReplies/{replyId}","method":"get","name":"getByPostidAndReplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Reply must exist to retrieve its detailed information for the given discussion post."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion post must exist before replies can be retrieved for it."}]},{"specification":"This operation creates a new reply under a given discussionBoardPost in the discussion_board_replies table. It is used to add user generated replies associated with a specific post. The request body must include the reply content and member_id to associate the reply with a member. The reply content should be validated for length (minimum 5, maximum 1000 characters) and profanity filtering must be enforced in the service logic. Upon successful creation, the newly created reply record is returned. Authorization is limited to authenticated members who can create replies.","description":"Create a new reply to a specified discussion board post.\n\nThe reply content and associated member ID are required in the request body. The operation validates content length and profanity externally, ensuring that only appropriate replies are persisted.\n\nAuthorization is restricted to authenticated members. Moderators and admins can also create replies via member accounts.\n\nUpon success, the newly created reply resource with all its details (id, content, timestamps, statuses) is returned as per the IDiscussionBoardDiscussionBoardReply schema.\n\nThis endpoint interacts with the discussion_board_replies table and links replies to discussion_board_posts and discussion_board_members.","summary":"Create a new reply under a discussion board post","parameters":[{"name":"postId","description":"Unique identifier of the parent discussion post where the reply will be added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new reply","typeName":"IDiscussionBoardDiscussionBoardReply.ICreate"},"responseBody":{"description":"The newly created reply resource","typeName":"IDiscussionBoardDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/discussionBoardPosts/{postId}/discussionBoardReplies","method":"post","name":"postByPostid","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board category must exist before a post can be created and replies added."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before replies can be added to it."}]},{"specification":"This operation updates a specific reply to a discussion board post. It operates on the discussion_board_replies table in the DiscussionBoard service context. The API endpoint is designed to modify a reply's content and reply_status fields. Only authenticated members or moderators with appropriate permissions can perform this update. The operation requires the identifiers postId and replyId to locate the target reply. Validation rules enforce that the reply content must be between 5 to 1000 characters and free of profanity. Moderators have unrestricted edit rights, whereas members may only edit their own replies within 24 hours of posting, per business rules. Successful update returns the updated reply entity.","description":"Update a reply to a specific discussion board post identified by postId and replyId. This operation validates and updates the reply's content and status fields according to discussion board business rules.\n\nSecurity considerations: Only authenticated members and moderators with edit permissions may use this operation. Member edits are restricted to replies they own and within 24 hours of creation, while moderators can edit any reply at any time.\n\nThis operation references the discussion_board_replies table, which stores replies linked to posts and authors. It enforces content length restrictions (5 to 1000 characters) and moderation status management.\n\nValidation rules require profanity filtering on the reply content before acceptance.\n\nRelated operations include creating new replies, deleting replies, and managing posts.\n\nError handling includes responding with authorization errors if the user lacks permission, and validation errors if content does not meet criteria.","summary":"Update a reply to a discussion board post","parameters":[],"requestBody":{"description":"Updated reply content and status","typeName":"IDiscussionBoardDiscussionBoardReplies.IUpdate"},"responseBody":{"description":"Updated reply information","typeName":"IDiscussionBoardDiscussionBoardReplies"},"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/discussionBoardPosts/{postId}/discussionBoardReplies/{replyId}","method":"put","name":"putByPostidAndReplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Reply must be created before it can be updated."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before replies can be associated with it."}]},{"specification":"This operation updates a specific reply to a discussion board post. It operates on the discussion_board_replies table in the DiscussionBoard service context. The API endpoint is designed to modify a reply's content and reply_status fields. Only authenticated members or moderators with appropriate permissions can perform this update. The operation requires the identifiers postId and replyId to locate the target reply. Validation rules enforce that the reply content must be between 5 to 1000 characters and free of profanity. Moderators have unrestricted edit rights, whereas members may only edit their own replies within 24 hours of posting, per business rules. Successful update returns the updated reply entity.","description":"Update a reply to a specific discussion board post identified by postId and replyId. This operation validates and updates the reply's content and status fields according to discussion board business rules.\n\nSecurity considerations: Only authenticated members and moderators with edit permissions may use this operation. Member edits are restricted to replies they own and within 24 hours of creation, while moderators can edit any reply at any time.\n\nThis operation references the discussion_board_replies table, which stores replies linked to posts and authors. It enforces content length restrictions (5 to 1000 characters) and moderation status management.\n\nValidation rules require profanity filtering on the reply content before acceptance.\n\nRelated operations include creating new replies, deleting replies, and managing posts.\n\nError handling includes responding with authorization errors if the user lacks permission, and validation errors if content does not meet criteria.","summary":"Update a reply to a discussion board post","parameters":[],"requestBody":{"description":"Updated reply content and status","typeName":"IDiscussionBoardDiscussionBoardReplies.IUpdate"},"responseBody":{"description":"Updated reply information","typeName":"IDiscussionBoardDiscussionBoardReplies"},"authorizationType":null,"authorizationRole":"moderator","path":"/discussionBoard/moderator/discussionBoardPosts/{postId}/discussionBoardReplies/{replyId}","method":"put","name":"putByPostidAndReplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"The reply must be created before it can be updated. This operation ensures the existence of the reply identified by replyId in the specified post."}]},{"specification":"This operation deletes a specific reply within a discussion board post in the discussion_board_replies table of the DiscussionBoard service domain. It uses the composite identifiers postId and replyId to locate and permanently remove the reply record. Only authorized moderators may perform this deletion to enforce content moderation policies. Deletion cascades in the database are handled by referential integrity constraints. No request body required and no response body returned upon successful deletion, only a success status message.\n\nStrict authorization and audit logging are implemented to track moderator actions. Clients can handle errors such as unauthorized access or missing reply record.\n\nThis operation complements create, update, and retrieval operations on discussionBoardReplies.","description":"Delete a reply from a specific discussion board post identified by postId and replyId.\n\nSecurity considerations: Only moderators or admins have permission to delete replies.\n\nThis operation references the discussion_board_replies table and removes the reply record permanently.\n\nConstraints and referential integrity ensure that related data is handled appropriately by database cascading.\n\nError handling involves permission denial responses and not found errors if the reply is absent.\n\nNo request or response body is involved in this deletion operation.","summary":"Delete a reply from a discussion board post","parameters":[{"name":"postId","in":"path","description":"Unique identifier of the target discussion board post","schema":{"type":"string","format":"uuid"}},{"name":"replyId","in":"path","description":"Unique identifier of the target reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","path":"/discussionBoard/moderator/discussionBoardPosts/{postId}/discussionBoardReplies/{replyId}","method":"delete","name":"eraseByPostidAndReplyid","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Reply must be created before it can be deleted. Ensures the reply identified by replyId exists in the discussion board post identified by postId."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must exist before adding or deleting replies. The post identified by postId must be created."}]},{"specification":"This operation retrieves a paginated and filtered list of discussion_board_moderation_logs records from the discussion board system. It supports advanced search capabilities and sorting to assist moderators and administrators in auditing moderation activities on posts and replies. The underlying Prisma DB table is discussion_board_moderation_logs which records moderation actions such as edits, deletes, and approvals performed by moderators or admins, including timestamps and related entity references. This operation requires no request body as it exposes a PATCH method allowing complex query parameters encapsulated in the IDiscussionBoardModerationLog.IRequest DTO. The response returns a paginated collection of summary moderation log entries in the form of IPageIDiscussionBoardModerationLog.ISummary. Authorization is restricted to users with roles 'moderator' and 'admin'.","path":"/discussionBoard/moderator/discussionBoard/moderationLogs","method":"patch","summary":"Retrieve a filtered, paginated list of moderation log summaries","description":"Retrieve a paginated list of moderation logs from the discussion board.\n\nThis operation allows moderators and admins to search, filter, and review logs detailing actions taken on posts and replies including edit, delete, and approve operations.\n\nSecurity considerations include restricting access to authorized roles only and ensuring sensitive user information in moderation action details is appropriately handled.\n\nThe moderation logs are maintained in the discussion_board_moderation_logs table as defined in the Prisma schema. Each log record includes references to the affected post or reply, the moderator responsible, the type of action performed, any detailed notes, and timestamps.\n\nTypical usage involves fetching logs filtered by action types, associated moderators, date ranges, or affected entities to support auditing and compliance.\n\nErrors include unauthorized access (403) and invalid query parameters with appropriate HTTP response codes.\n\nClients should invoke the GET operation on specific log entries to retrieve full details by log ID.\n","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for moderation logs","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log summaries matching search criteria","typeName":"IPageIDiscussionBoardModerationLog.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before retrieving moderation logs filtered by post_id to ensure the referenced post exists."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Discussion board reply must be created under the referenced post before retrieving moderation logs filtered by reply_id to ensure the reply exists."}]},{"specification":"This operation retrieves a paginated and filtered list of discussion_board_moderation_logs records from the discussion board system. It supports advanced search capabilities and sorting to assist moderators and administrators in auditing moderation activities on posts and replies. The underlying Prisma DB table is discussion_board_moderation_logs which records moderation actions such as edits, deletes, and approvals performed by moderators or admins, including timestamps and related entity references. This operation requires no request body as it exposes a PATCH method allowing complex query parameters encapsulated in the IDiscussionBoardModerationLog.IRequest DTO. The response returns a paginated collection of summary moderation log entries in the form of IPageIDiscussionBoardModerationLog.ISummary. Authorization is restricted to users with roles 'moderator' and 'admin'.","path":"/discussionBoard/admin/discussionBoard/moderationLogs","method":"patch","summary":"Retrieve a filtered, paginated list of moderation log summaries","description":"Retrieve a paginated list of moderation logs from the discussion board.\n\nThis operation allows moderators and admins to search, filter, and review logs detailing actions taken on posts and replies including edit, delete, and approve operations.\n\nSecurity considerations include restricting access to authorized roles only and ensuring sensitive user information in moderation action details is appropriately handled.\n\nThe moderation logs are maintained in the discussion_board_moderation_logs table as defined in the Prisma schema. Each log record includes references to the affected post or reply, the moderator responsible, the type of action performed, any detailed notes, and timestamps.\n\nTypical usage involves fetching logs filtered by action types, associated moderators, date ranges, or affected entities to support auditing and compliance.\n\nErrors include unauthorized access (403) and invalid query parameters with appropriate HTTP response codes.\n\nClients should invoke the GET operation on specific log entries to retrieve full details by log ID.\n","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for moderation logs","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log summaries matching search criteria","typeName":"IPageIDiscussionBoardModerationLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board post must be created before retrieving moderation logs filtered by post_id to ensure the referenced post exists."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Discussion board reply must be created under the referenced post before retrieving moderation logs filtered by reply_id to ensure the reply exists."}]},{"specification":"This operation fetches detailed information of a single moderation log entry by its unique identifier from the discussion board moderation logs table. It allows moderators and administrators to view specific audit details related to moderation actions performed on posts or replies, including the action type, detailed notes, timestamps, and references to the affected entities and the moderator involved. The operation caters to the Prisma DB table discussion_board_moderation_logs which tracks moderation activities for auditing and compliance purposes. This GET endpoint requires a path parameter 'moderationLogId' corresponding to the moderation log's primary key (UUID). The response is the full moderation log record as an object of type IDiscussionBoardModerationLog. Authorization roles permitted are 'moderator' and 'admin'.","path":"/discussionBoard/moderator/discussionBoard/moderationLogs/{moderationLogId}","method":"get","summary":"Retrieve detailed moderation log by ID","description":"Get detailed information about a specific moderation log entry.\n\nThis operation is used by moderators and admins to inspect detailed audit records of moderation actions on posts or replies.\n\nIt includes information such as the action type (edit, delete, approve), detailed notes, the moderator responsible, and timestamps.\n\nThe underlying data originates from the discussion_board_moderation_logs table, ensuring a single source of truth.\n\nPotential errors include not found (404) if the specified log ID does not exist, and unauthorized (403) if the user lacks permissions.\n\nProper validation of the UUID parameter is enforced.\n","parameters":[{"name":"moderationLogId","description":"Unique identifier of the moderation log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation log information","typeName":"IDiscussionBoardModerationLog"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board posts must exist as prerequisite resources for moderation logs."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{postId}/discussionBoardReplies","method":"post"},"description":"Replies to posts must exist as prerequisite resources for moderation logs."},{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board categories must exist as prerequisite resources for moderation logs."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Replies associated with posts must exist before viewing related moderation logs."}]},{"specification":"This operation fetches detailed information of a single moderation log entry by its unique identifier from the discussion board moderation logs table. It allows moderators and administrators to view specific audit details related to moderation actions performed on posts or replies, including the action type, detailed notes, timestamps, and references to the affected entities and the moderator involved. The operation caters to the Prisma DB table discussion_board_moderation_logs which tracks moderation activities for auditing and compliance purposes. This GET endpoint requires a path parameter 'moderationLogId' corresponding to the moderation log's primary key (UUID). The response is the full moderation log record as an object of type IDiscussionBoardModerationLog. Authorization roles permitted are 'moderator' and 'admin'.","path":"/discussionBoard/admin/discussionBoard/moderationLogs/{moderationLogId}","method":"get","summary":"Retrieve detailed moderation log by ID","description":"Get detailed information about a specific moderation log entry.\n\nThis operation is used by moderators and admins to inspect detailed audit records of moderation actions on posts or replies.\n\nIt includes information such as the action type (edit, delete, approve), detailed notes, the moderator responsible, and timestamps.\n\nThe underlying data originates from the discussion_board_moderation_logs table, ensuring a single source of truth.\n\nPotential errors include not found (404) if the specified log ID does not exist, and unauthorized (403) if the user lacks permissions.\n\nProper validation of the UUID parameter is enforced.\n","parameters":[{"name":"moderationLogId","description":"Unique identifier of the moderation log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation log information","typeName":"IDiscussionBoardModerationLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts","method":"post"},"description":"Discussion board posts must exist as prerequisite resources for moderation logs."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{postId}/discussionBoardReplies","method":"post"},"description":"Replies to posts must exist as prerequisite resources for moderation logs."},{"endpoint":{"path":"/discussionBoard/admin/discussionBoardCategories","method":"post"},"description":"Discussion board categories must exist as prerequisite resources for moderation logs."},{"endpoint":{"path":"/discussionBoard/member/discussionBoardPosts/{discussionBoardPostId}/discussionBoardReplies","method":"post"},"description":"Replies associated with posts must exist before viewing related moderation logs."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users who can browse discussion topics and view posts but cannot create or reply to content.","kind":"guest"},{"name":"member","description":"Authenticated users who can create discussion topics, reply to posts, and manage their own profiles.","kind":"member"},{"name":"moderator","description":"Users with privileges to manage discussions and replies, including editing or deleting inappropriate content.","kind":"member"},{"name":"admin","description":"System administrators with highest privileges including user management, system configuration, and moderation oversight.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIDiscussionBoardDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardMember"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardReplies.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardReplies.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardGuest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardGuest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardCategories.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardCategories.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardDiscussionBoardReply.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDiscussionBoardReply.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardModerationLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"Unique session token to identify guest user session."}},"required":["session_token"],"description":"Guest registration information to create a new guest session."},"IDiscussionBoardGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest session."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorized guest session information including temporary JWT tokens."},"IDiscussionBoardGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string for guest session authorization renewal"},"token_type":{"type":"string","const":"guest_refresh","description":"Type of the token, must be 'guest_refresh'"},"version":{"type":"integer","minimum":1,"description":"Token version, integer ≥ 1"},"signature":{"type":"string","description":"Cryptographic signature of the refresh token"},"fingerprint":{"type":"string","description":"Fingerprint to identify the client device or session"},"expire":{"type":"string","format":"date-time","description":"Expiry time of the refresh token in ISO 8601 format"},"issued_at":{"type":"string","format":"date-time","description":"Issued time of the refresh token in ISO 8601 format"}},"required":["refresh_token","token_type","version","signature","fingerprint","expire","issued_at"],"description":"Schema for guest refresh token request to renew authorization tokens securely."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member user's unique email address for login and communication"},"password":{"type":"string","description":"Plain text password for member account creation, minimum 8 characters including letters and numbers"},"display_name":{"type":"string","description":"Display name to show publicly in posts and replies, typically the user's chosen nickname"},"confirmation_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional email confirmation token, nullable"},"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID which is generated by the system, should not be provided during creation, nullable"},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Long-lived refresh token for session management, usually not submitted at creation, nullable"},"version":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Account version for optimistic concurrency control, nullable"},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Account creation timestamp, system managed, nullable"},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Account last update timestamp, system managed, nullable"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if account is deactivated, nullable"},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hashed password stored internally, should not be provided during creation, nullable"},"password_confirm":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Password confirmation for client-side validation, nullable"}},"required":["email","password","display_name"],"description":"Payload schema for creating a new member user account with email and plaintext password."},"IDiscussionBoardMember.IAuthorized":{"type":"object","description":"Authorization response containing JWT tokens for authenticated discussion board members.\n\nThis type is returned after successful authentication operations such as login or registration (join). It includes the unique member ID and token information necessary for APIs requiring an active session.\n\nThe token property contains the access and refresh JWT tokens used for maintaining authenticated sessions securely.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized member (discussion_board_members.id)."},"email":{"type":"string","description":"Member's unique email address for login and communication."},"display_name":{"type":"string","description":"Public display name of the member."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the member account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the member account is deactivated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","display_name","created_at","updated_at","token"],"x-autobe-prisma-schema":"discussion_board_members"},"IDiscussionBoardMember.ILogin":{"type":"object","description":"Login request payload for a discussion board member.\n\nContains the email and plain text password credentials needed to authenticate and obtain authorized JWT tokens. The password should never be returned in responses and must be securely handled during transmission.","properties":{"email":{"type":"string","description":"Member's unique email address for login. Must be valid format."},"password":{"type":"string","description":"Plain text password for member authentication. Send only over secure channels."}},"required":["email","password"]},"IDiscussionBoardMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string for renewing JWT access tokens"},"token_type":{"type":"string","description":"Type of token, typically \"refresh\" for this operation"}},"required":["refresh_token","token_type"],"description":"Request schema for refreshing a member user's JWT tokens. Provides the valid refresh token and token type."},"IDiscussionBoardModerator.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Moderator's unique email address for login and communication."},"password":{"type":"string","description":"Plain text password for moderator authentication; backend hashes before storage."},"display_name":{"type":"string","description":"Display name shown in moderation activities."}},"required":["email","password","display_name"],"description":"Payload for creating new moderator account.\n\nIncludes email, plain password (which will be hashed by backend), and display name.\n\nAuto-generated fields like id, timestamps, and hashed passwords are excluded from client input.","x-autobe-prisma-schema":"discussion_board_moderators"},"IDiscussionBoardModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion board moderator."},"email":{"type":"string","description":"Unique email address for the moderator."},"display_name":{"type":"string","description":"Display name shown in moderation logs and actions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the moderator account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the moderator account is deactivated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","display_name","created_at","updated_at","token"],"description":"Authorized moderator data transfer object returning authentication tokens and profile info.\n\nThis object represents a successfully authenticated moderator including profile identifiers and JWT authentication tokens used to authorize further API calls.","x-autobe-prisma-schema":"discussion_board_moderators"},"IDiscussionBoardModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Moderator login email address."},"password":{"type":"string","description":"Moderator login password."}},"required":["email","password"],"description":"Moderator login credentials for authentication."},"IAuthRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"The refresh token string issued by a previous authorization call. This token is used to request new access tokens without re-authenticating the user. It must be a valid, unexpired token."}},"required":["refreshToken"],"description":"Payload for requesting new access tokens using a valid refresh token.\n\nThis object is used in token refresh operations to allow clients to obtain new JWT access tokens tied to an existing session.\n\nThe refreshToken must be a non-empty string provided by the client and verified by the server."},"IDiscussionBoardAdmin.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The administrator's unique email address used for login and communication purposes.\n\nMust be a properly formatted email address, unique within the system for the Admin role."},"password":{"type":"string","description":"The plaintext password for the admin account.\n\nIt must comply with the system's security policy requiring sufficient strength and complexity.\n\nPassword hashing will be handled internally and the raw password is only accepted during registration or password changes."},"displayName":{"type":"string","description":"The display name shown publicly and in audit logs for the administrator.\n\nShould be a meaningful, human-readable string uniquely or meaningfully identifying the admin user."}},"required":["email","password","displayName"],"description":"Request payload to register a new administrator account.\n\nIncludes the minimal necessary data for creating a valid admin user account in the system.\n\nEnsures that email, plaintext password, and display name are provided to satisfy all business validation rules."},"IDiscussionBoardAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator user."},"email":{"type":"string","description":"Administrator's unique email address for login and management."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication."},"display_name":{"type":"string","description":"Display name for administrator identification in audit and management logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the administrator account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the administrator account is deactivated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","display_name","created_at","updated_at","token"],"description":"Authorized administrator data transfer object containing identification, credentials, display name, and JWT authentication token information. This type reflects the state of an authenticated administrator user with all necessary details for session management and auditing purposes."},"IDiscussionBoardAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's email address used for login."},"password":{"type":"string","description":"Plain text password for authentication."},"remember_me":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional flag to remember the login session for extended duration."},"two_factor_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional two-factor authentication code if required."},"captcha_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional CAPTCHA token for bot prevention."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional IP address of the client."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user agent string of the client browser or app."},"device_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional unique device identifier for login."},"metadata":{"type":"object","description":"Optional metadata about the login attempt.","properties":{},"required":[]},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the login attempt was created."}},"required":["email","password"],"description":"Request body schema for administrator login, requiring email and plain text password. Optional properties support enhanced security features such as two-factor authentication, CAPTCHA validation, client IP and user agent tracking, device identification, optional metadata, and login attempt timestamp."},"IDiscussionBoardAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"A valid refresh token previously issued by the system."}},"required":["refresh_token"],"description":"Payload for requesting a token refresh for an admin user, containing the required refresh token to generate new access tokens."},"IDiscussionBoardDiscussionBoardMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","minimum":1},{"type":"null"}],"description":"Page number for paging through results. Must be a positive integer."},"limit":{"oneOf":[{"type":"integer","format":"uint32","minimum":1,"maximum":100,"default":20},{"type":"null"}],"description":"Number of records to return per page, with a maximum of 100 records."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full text search keyword to filter discussion board members by matching commonly searched attributes such as display name or email."},"orderBy":{"oneOf":[{"const":"email"},{"const":"displayName"},{"const":"createdAt"},{"type":"null"}],"description":"Field to order results by. Case-sensitive."},"orderDirection":{"oneOf":[{"const":"ASC"},{"const":"DESC"},{"type":"null"}],"description":"Ordering direction, either ascending or descending."}},"description":"Request object for retrieving a paginated list of discussion board members with optional search and sorting criteria.","required":[]},"IDiscussionBoardDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the registered member. This is the primary key in the database schema and uses UUID format to ensure uniqueness and ease of management across distributed systems.\n\nIt is a required field that uniquely identifies each member within the discussion board ecosystem."},"email":{"type":"string","description":"The registered member's unique email address. This address is used for login and all system communications.\n\nMust be unique across the member table as enforced by database constraints. It is the primary credential for member authentication alongside the password.\n\nFormat must conform to standard email address format and is case-insensitive for login purposes."},"password_hash":{"type":"string","description":"A secure hash of the member's password used for authentication.\n\nThis field is stored as a hashed string and should never be exposed via API responses for security reasons.\n\nClients are expected to send the plain password, which is hashed by the backend service.\n\nThis property is relevant internally and used in storage but excluded from response objects to protect member security."},"display_name":{"type":"string","description":"Public display name chosen by the member to be shown on their posts and replies.\n\nMust be unique or near unique to help with user recognition.\n\nIt serves as the primary identifier in UI contexts, replacing email addresses for privacy.\n\nLength constraints and character restrictions should be enforced by business logic outside the schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking the creation date and time of this member account.\n\nStored in ISO 8601 format including timezone information (UTC offset).\n\nUsed for auditing and chronological sorting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp marking the last update date and time of this member account record.\n\nUsed to track profile updates, password changes, or other modifications.\n\nIn ISO 8601 UTC datetime string format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete timestamp indicating when this member account was deactivated.\n\nWhen present (non-null), it signifies the account is considered deleted or inactive and should not be used for login or posting.\n\nThis field is nullable and may be null to indicate an active account.\n\nDate-time string in standard ISO 8601 UTC format when provided, otherwise null."}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Discussion board member entity representing registered users capable of creating posts and replies.\n\nThis entity is backed by the `discussion_board_members` table in the Prisma schema, containing all persistent fields relevant to user authentication and profile. It excludes transient or computed properties.\n\nSensitive fields such as password_hash are stored securely and must never be exposed in API responses.\n\nThe entity includes audit timestamps and optional soft delete timestamp for lifecycle management.\n\nClients can query, list, and manage members within the constraints of their authorization roles."},"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Updated email address; must be unique."},"password":{"type":"string","description":"Plain text password for update; backend will hash securely before storage."},"display_name":{"type":"string","description":"Updated display name visible to others."}},"required":[],"description":"Payload for updating member information. All fields optional.\n\nPassword updates must be plain text, not hashed. No system-managed timestamps or IDs are accepted.\n\nOwnership and identity fields are immutable and not included."},"IDiscussionBoardMember":{"type":"object","x-autobe-prisma-schema":"discussion_board_members","description":"Discussion Board Member entity representing registered users who can create discussion topics and replies. This schema reflects the discussion_board_members table, including essential member information such as email, display name, and timestamps while excluding sensitive password hashes from public exposure.\n\nAttributes are designed for secure interaction with user profiles, supporting key operations like registration, authentication, and profile management.\n\nProperties:\n- id: Unique identifier of the member.\n- email: User's unique email address used for login and communication.\n- display_name: Public display name.\n- created_at: Timestamp of account creation.\n- updated_at: Timestamp of last account update.\n- deleted_at: Optional soft-delete timestamp if the account is deactivated.\n\nThis entity excludes password_hash from responses for security reasons, handled only in secure authentication contexts.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member."},"email":{"type":"string","description":"Member's unique email address for login and communication."},"display_name":{"type":"string","description":"Public display name of the member."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the member account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the member account is deactivated."}},"required":["id","email","display_name","created_at","updated_at"]},"IDiscussionBoardDiscussionBoardPost.IRequest":{"type":"object","description":"Request parameters for searching and retrieving discussion board posts. Defines the criteria used to filter, paginate, and sort discussion board posts from the discussion_board_posts table.\n\nProperties include:\n- page: Current page number for pagination.\n- limit: Maximum number of posts per page.\n- category_id: Optional UUID to filter posts by category.\n- member_id: Optional UUID to filter posts by author.\n- search: Optional string for full-text search against title or body.\n- order_by: Sorting parameter with allowed values.\n\nThe schema supports pagination defaults and flexible filtering to support efficient user browsing and searching.","properties":{"page":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of posts per page."},"category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter to select posts by category using category's UUID."},"member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter to select posts by member/author using their UUID."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search term for full-text matching in post title or body."},"order_by":{"oneOf":[{"const":"created_at ASC","description":"Sorting order for the posts."},{"const":"created_at DESC","description":"Sorting order for the posts."},{"const":"updated_at ASC","description":"Sorting order for the posts."},{"const":"updated_at DESC","description":"Sorting order for the posts."}],"description":"Sorting order for the posts."}},"required":["page","limit"]},"IDiscussionBoardDiscussionBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the discussion post."},"category_id":{"type":"string","format":"uuid","description":"The identifier of the category this post belongs to."},"member_id":{"type":"string","format":"uuid","description":"The identifier of the member who authored this post."},"title":{"type":"string","description":"Title of the discussion post, between 5 and 100 characters."},"body":{"type":"string","description":"Body content of the discussion post, up to 5000 characters allowed."},"post_status":{"type":"string","description":"The status of the post indicating moderation or visibility state."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the post."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the post was soft deleted; null if active."}},"required":["id","category_id","member_id","title","body","post_status","created_at","updated_at"],"description":"Discussion board post entity representing user-generated discussion topics. Includes identifiers for category and member, title and body content, status, and timestamps.\n\nThis entity directly maps to the `discussion_board_posts` table in the Prisma schema, adhering to all field constraints and relationships.\n\nProperties:\n- `id`: Unique post ID\n- `category_id`: Reference to discussion category\n- `member_id`: Author's member ID\n- `title`: Post title with length constraints\n- `body`: Post content with maximum length\n- `post_status`: Moderation or visibility status\n- `created_at`, `updated_at`: Timestamp fields\n- `deleted_at`: Soft delete timestamp, nullable\n\nEnsure all content respects length validations and profanity filtering defined in the business requirements."},"IDiscussionBoardDiscussionBoardPost.ICreate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"The identifier of the category this post belongs to."},"title":{"type":"string","description":"Title of the discussion post, between 5 and 100 characters."},"body":{"type":"string","description":"Body content of the discussion post, up to 5000 characters allowed."},"post_status":{"type":"string","description":"The status of the post indicating moderation or visibility state."}},"required":["category_id","title","body","post_status"],"description":"Request body for creating a new discussion board post.\n\nIncludes category reference, title, body content, and post status which must be set appropriately (e.g., 'public' or 'pending').\n\nBusiness rules ensure input validation:\n- Title must be between 5 and 100 characters.\n- Body content must not exceed 5000 characters.\n- Post status must reflect moderation state.\n\nSensitive or system-managed fields like IDs and timestamps are excluded from the creation payload."},"IDiscussionBoardDiscussionBoardPost.IUpdate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"Belonged category's discussion_board_categories.id."},"member_id":{"type":"string","format":"uuid","description":"Authoring member's discussion_board_members.id."},"title":{"type":"string","description":"Post title between 5 and 100 characters, validated content."},"body":{"type":"string","description":"Post body content up to 5000 characters, validated and profanity-checked."},"post_status":{"type":"string","description":"Status of the post indicating moderation or visibility state."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the post was soft deleted; null if active."}},"description":"Update an existing discussion board post by ID. Authorized users include the member who created the post or moderators. This operation allows modification of the title, body, or post_status with validation to maintain title length within 5 to 100 characters and body length up to 5000 characters. Profanity filtering applies.\n\nThe post to update is identified by the discussionBoardPostId path parameter. The user must have permission to update the post.\n\nOn success, the API returns the full updated post object with timestamps and status metadata.\n\nFail responses occur for authorization failures, validation errors, or if the post does not exist.","required":[]},"IDiscussionBoardDiscussionBoardReplies.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number requested for reply results.\n\nUsed for pagination to select the correct slice of reply list to return.\n\nMust be a positive integer starting at 1."},"limit":{"type":"integer","format":"uint32","description":"Number of replies per page.\n\nSets the maximum size of the reply list for pagination.\n\nDefaults and limits should follow API specification or be managed at server side."},"search":{"type":"string","description":"Keyword search applied to reply content.\n\nCase-insensitive substring match applied to reply textual content.\n\nIf empty or null, no text filtering is performed."},"sort":{"oneOf":[{"const":"created_at","description":"Field to be used for sorting the reply list.\n\nMust be one of the predefined field names.\n\nAffects the order of replies returned in the response."},{"const":"updated_at","description":"Field to be used for sorting the reply list.\n\nMust be one of the predefined field names.\n\nAffects the order of replies returned in the response."}],"description":"Field to be used for sorting the reply list.\n\nMust be one of the predefined field names.\n\nAffects the order of replies returned in the response."},"order":{"oneOf":[{"const":"asc","description":"Direction (ascending or descending) of reply sorting order.\n\nUsed in conjunction with the 'sort' field to define sorting behavior."},{"const":"desc","description":"Direction (ascending or descending) of reply sorting order.\n\nUsed in conjunction with the 'sort' field to define sorting behavior."}],"description":"Direction (ascending or descending) of reply sorting order.\n\nUsed in conjunction with the 'sort' field to define sorting behavior."}},"required":["page","limit"],"description":"Request parameters for listing discussion board replies with pagination, filtering, and sorting.\n\nThis request object allows clients to define paging parameters, text search keywords, and sorting preferences.\n\nIt is essential for efficient retrieval of discussion board replies matching given criteria."},"IDiscussionBoardDiscussionBoardReply":{"type":"object","x-autobe-prisma-schema":"discussion_board_replies","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key (UUID) of the reply."},"post_id":{"type":"string","format":"uuid","description":"Reference to the parent discussion board post's UUID."},"member_id":{"type":"string","format":"uuid","description":"Authoring member's UUID who created this reply."},"content":{"type":"string","description":"Reply content, must be between 5 and 1000 characters. It is profanity-checked and validated."},"reply_status":{"type":"string","description":"Status of the reply indicating moderation or visibility state like 'public', 'deleted', or 'pending'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was created, in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was last updated, in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if the reply is active."}},"required":["id","post_id","member_id","content","reply_status","created_at","updated_at"],"description":"Discussion board reply entity representing a member's reply to a discussion post. Includes content, status, author information, and timestamps. Soft delete functionality is supported via the deleted_at field."},"IDiscussionBoardDiscussionBoardReply.ICreate":{"type":"object","x-autobe-prisma-schema":"discussion_board_replies","properties":{"post_id":{"type":"string","format":"uuid","description":"UUID of the parent post to which the reply belongs. Required to associate the reply correctly."},"member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the reply. This associates reply with a member."},"content":{"type":"string","description":"Reply content text. Must be between 5 and 1000 characters. Profanity will be checked externally before creation."},"reply_status":{"type":"string","description":"Status of the reply, e.g., 'public' or 'pending' to indicate moderation state. Must be valid status string."}},"required":["post_id","member_id","content","reply_status"],"description":"Request body schema for creating a new reply to a discussion board post. Must specify the post and member IDs, content respecting length and profanity rules, and initial status indicating visibility or moderation."},"IDiscussionBoardDiscussionBoardReply.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"Reply content between 5 and 1000 characters, validated and profanity-checked."},"reply_status":{"type":"string","description":"Status of the reply indicating moderation or visibility state."}},"required":["content","reply_status"],"description":"Request body schema to update a reply to discussion board post. Fields include reply content and reply status indicating moderation or visibility.\n\nThis schema enforces content length between 5 and 1000 characters and requires moderation status to reflect current visibility or approval states.","x-autobe-prisma-schema":"discussion_board_replies"},"IDiscussionBoardDiscussionBoardModerator.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Moderator's unique email address for login and communication."},"display_name":{"type":"string","description":"Display name shown in moderation logs and actions."},"page":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Limitation of records per a page."}},"required":[],"description":"Request query parameters for searching and filtering discussion board moderators. Supports filtering by email and display name, with pagination parameters for page number and page size.\n\nAllows administrative lookup of moderators with efficient database-backed searching capabilities.\n\nNo required properties as filters and pagination parameters are optional for flexible querying.","x-autobe-prisma-schema":"discussion_board_moderators"},"IDiscussionBoardDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Moderator's unique email address for login and communication."},"password_hash":{"type":"string","description":"Hashed password for moderator authentication."},"display_name":{"type":"string","description":"Display name shown in moderation logs and actions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the moderator account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the moderator account is deactivated."}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Moderator users with elevated privileges to manage and moderate posts and replies. Moderators authenticate with email and password hash, and can perform editing and deletion actions.\n\nThis schema represents one moderator user entity including authentication credentials and profile information saved in the database."},"IDiscussionBoardModerator.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Moderator's unique email address for login and communication."},"password":{"type":"string","description":"Plain text password to be hashed before storage."},"display_name":{"type":"string","description":"Display name shown in moderation activities."}},"required":[],"description":"Payload for updating moderator account.\n\nAll fields optional; id and system timestamps are immutable.\n\nPassword must be in plain text to be hashed by backend.","x-autobe-prisma-schema":"discussion_board_moderators"},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator account"},"email":{"type":"string","description":"Moderator's unique email address for login and communication"},"password_hash":{"type":"string","description":"Hashed password for moderator authentication; never accept plain password in responses"},"display_name":{"type":"string","description":"Display name shown in moderation logs and actions"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator account was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the moderator account"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the moderator account is deactivated (nullable)"}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Moderator users with elevated privileges to manage and moderate posts and replies. Moderators authenticate with email and password hash, and can perform editing and deletion actions.\n\nThis schema represents the structure of a discussion board moderator account as stored in the database. Passwords are stored securely as hashes. The entity supports soft deletion via optional deleted_at timestamp.\n\nAll properties reflect the Prisma database schema constraints."},"IDiscussionBoardDiscussionBoardAdmin.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number for paginated results. Null or undefined means default first page"},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Number of records per page. Null or undefined means default limit"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term to filter administrators by email or display name"},"order_by":{"oneOf":[{"const":"email"},{"const":"display_name"},{"const":"created_at"},{"type":"null"}],"description":"Field to sort the admin list by"},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction, ascending or descending"}},"required":[],"description":"Request parameters for filtering and paginating discussion board administrator accounts.\n\nSupports pagination, sorting by allowed fields, and search by keyword on email or display name.\n\nOptional properties can be omitted or set to null to use defaults."},"IDiscussionBoardDiscussionBoardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier of the discussion board admin."},"email":{"type":"string","description":"Administrator's unique email address for login and management. Must be unique."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication."},"display_name":{"type":"string","description":"Display name for administrator identification in audit and management logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the administrator account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the administrator account is deactivated. Null if active."}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Discussion board administrator user entity with unique email, hashed password, display name, creation and update timestamps, and soft deletion timestamp.\n\nAdmins have full privileges including user management and system configuration.\n\nThis entity reflects the admin user data stored in the discussion_board_admins table of the Prisma schema.","x-autobe-prisma-schema":"discussion_board_admins"},"IDiscussionBoardAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's unique email address for login and management. Must be unique."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication."},"display_name":{"type":"string","description":"Display name for administrator identification in audit and management logs."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the administrator account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the administrator account is deactivated. Null if active."}},"required":[],"description":"Update DTO for discussion board administrator user entity. Allows modification of email, password hash, display name, update timestamp, and soft delete timestamp.\n\nUsed for administrative updates to administrator accounts in the discussion_board_admins table.","x-autobe-prisma-schema":"discussion_board_admins"},"IDiscussionBoardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier for the admin user."},"email":{"type":"string","description":"Administrator's unique email address for login and management."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication. Stored securely, never exposed in plaintext."},"display_name":{"type":"string","description":"Display name for administrator identification in audit and management logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the administrator account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the administrator account is deactivated; null if active."}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Administrator users with full system privileges including user management, system configuration, and moderation oversight. Admins authenticate via email and password hash and have full control over system settings.\n\nThis schema defines the structure of the discussion_board_admins table entries including critical fields and timestamps.\n\nSensitive fields such as password_hash are stored securely and are never transmitted in plaintext.\n\nThe deleted_at field allows for soft deletion marking of admin accounts.\n\nAll fields follow strict typing and format to ensure data consistency and security."},"IDiscussionBoardDiscussionBoardGuest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination, starting from 1."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page. Defaults to a system-defined maximum if not provided."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text string to filter guest sessions by session token or other searchable attributes."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort results by, e.g. 'created_at' or 'session_token'."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction: 'asc' for ascending, 'desc' for descending."}},"description":"Request structure for searching and paginating discussion board guest sessions. Supports filtering by session token, sorting by timestamp, and pagination controls.","required":[]},"IDiscussionBoardDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the guest session as a UUID.","readOnly":true},"session_token":{"type":"string","description":"Unique token identifying the guest session."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session was created.","readOnly":true},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the guest session.","readOnly":true},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if session is active."}},"required":["id","session_token","created_at","updated_at"],"description":"Guest user session record representing unauthenticated site visitors with a session token for temporary access.\n\nThis object contains all relevant properties for guest session management, including unique identification, session token, creation and update timestamps, and soft deletion status.\n\nThe deleted_at property is nullable and indicates if the guest session is invalidated (soft deleted)."},"IDiscussionBoardDiscussionBoardGuest.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"Updated unique token for the guest session."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft delete or null if active."}},"required":["session_token"],"description":"Update payload for a guest session allowing modification of the session token and soft delete timestamp."},"IDiscussionBoardDiscussionBoardCategories.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Filter by category name for searching. Can be partial string, case-insensitive."},"description":{"oneOf":[{"type":"string","description":"Filter by category description. Can be partial string, case-insensitive."},{"type":"null"}],"description":"Filter by category description. Can be partial string, case-insensitive."},"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number for pagination starting from 1."},{"type":"null"}],"description":"Page number for pagination starting from 1."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Number of records per page for pagination."},{"type":"null"}],"description":"Number of records per page for pagination."},"sort_by":{"oneOf":[{"type":"string","description":"Sort results by field name, e.g., 'name', 'created_at'. Optional."},{"type":"null"}],"description":"Sort results by field name, e.g., 'name', 'created_at'. Optional."},"order":{"oneOf":[{"const":"asc","description":"Sort order: ascending ('asc') or descending ('desc'). Optional."},{"const":"desc","description":"Sort order: ascending ('asc') or descending ('desc'). Optional."},{"type":"null"}],"description":"Sort order: ascending ('asc') or descending ('desc'). Optional."}},"required":[],"description":"Request criteria for searching and paginating discussion categories.\n\nSupports filtering by name and description, pagination controls, and sorting options."},"IDiscussionBoardDiscussionBoardCategories":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion board category."},"name":{"type":"string","description":"Name of the category such as 'Economic' or 'Political'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the category."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the category was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the category was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the category was soft deleted; null if active."}},"required":["id","name","created_at","updated_at"],"description":"Represents a category in the discussion board for classifying posts into topics such as Economic or Political.\n\nIncludes metadata for creation, updates, and optional soft deletion.\n\nUsed to organize discussion topics and facilitate filtering and searching by category."},"IDiscussionBoardDiscussionBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"The unique name of the category, e.g., Economic or Political."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description of the category's purpose or scope."},{"type":"null"}],"description":"Optional detailed description of the category's purpose or scope."}},"required":["name"],"description":"Create schema for the DiscussionBoardCategory entity.\n\nRepresents the creation payload for a discussion board category such as Economic or Political themes.\n\nIncludes required name and optional description fields.\n\nComplies strictly with the database schema constraints and business rules.\n\n@x-autobe-prisma-schema: discussion_board_categories"},"IDiscussionBoardDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier for the discussion board category."},"name":{"type":"string","description":"The unique name of the category, e.g., Economic or Political."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description of the category's purpose or scope."},{"type":"null"}],"description":"Optional detailed description of the category's purpose or scope."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the category was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the category."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the category, null if active."}},"required":["id","name","created_at","updated_at"],"description":"Main entity schema for DiscussionBoardCategory.\n\nIncludes all properties in the related database model discussion_board_categories.\n\nRepresents a category categorizing discussion topics into Economic or Political domains.\n\nSoft deletion status is indicated by deleted_at field.\n\n@x-autobe-prisma-schema: discussion_board_categories"},"IDiscussionBoardDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"The unique name of the category, e.g., Economic or Political.\n\nThis must be a unique string representing the category identifier. Updates to this field require uniqueness.\n\nExample: \"Economic\", \"Political\""},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the category's purpose or scope.\n\nThis field may be null or contain a text description of the category.\n\nExample: \"Topics related to economic policy and financial matters.\""}},"required":["name"],"description":"Update object schema for discussion_board_categories table representing discussion board categories such as Economic or Political.\n\nThis schema is used for updating category information, ensuring that the name remains unique and the description is optional.\n\nAll updates reflect existing database constraints on the name and description fields.\n\nNote: Timestamps and soft deletion fields are managed by the system and not part of this update DTO.","x-autobe-prisma-schema":"discussion_board_categories"},"IDiscussionBoardDiscussionBoardReply.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Search keyword for full-text search within reply content.\n\nClients can supply this for filtering replies containing specific words or phrases.\n\nExample: \"inflation\""},"filter_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter replies by their status such as 'approved', 'pending', or 'rejected'.\n\nThis field is optional and can be null when no filtering on status is required."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination request.\n\nDefaults to the first page if null or omitted.\n\nMust be a positive integer."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit of items per page for pagination.\n\nDefaults to 20 if null or omitted.\n\nMust be a positive integer, typically not exceeding 100."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort replies by, e.g., 'created_at' or 'updated_at'.\n\nOptional parameter for ordering results.\n\nIf null or omitted, defaults to sorting by 'created_at' descending."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction.\n\nValid values are 'asc' for ascending or 'desc' for descending.\n\nOptional, with default typically being 'desc'."}},"required":[],"description":"Request schema for searching, filtering, sorting, and paginating discussion board replies.\n\nAllows clients to narrow down replies based on text search, status filtering, and pagination parameters.\n\nAll fields are optional to support flexible querying.\n\nSecurity: sensitive fields are not involved in this DTO, so all are public and client-provided."},"IDiscussionBoardDiscussionBoardReplies.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"Reply content between 5 and 1000 characters, validated and profanity-checked.\nThis is the main textual content of the reply that a member posts in response to a discussion board post.\n\nIt must comply with content length constraints (minimum 5 characters, maximum 1000 characters) and be free from profane or inappropriate language.\n\nThe reply content is essential for meaningful discussion and must always be provided with sensible, sanitized text."},"reply_status":{"type":"string","description":"Status of the reply indicating moderation or visibility state.\nThis may reflect states like 'visible', 'pending', 'deleted', or 'flagged' according to the board's moderation policies.\n\nAccurate status reporting enables the system to filter and display replies appropriately based on moderation outcomes and user privileges.\n\nThe allowed values should correspond to the system-defined reply status enumeration or string values."}},"required":["content","reply_status"],"description":"Data structure for updating a discussion board reply entity.\n\nIncludes fields that can be modified after reply creation, primarily content and reply status, with validation constraints to maintain data integrity and community standards.\n\nSensitive fields and ownership (member_id) are immutable and excluded from update operations.\n\nThis schema ensures that updates conform to the rules governing reply content length and moderation status."},"IDiscussionBoardDiscussionBoardReplies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the discussion board reply. This is automatically generated by the system and used to reference the reply entity uniquely across the platform.\n\nProper usage of UUID ensures global uniqueness and supports efficient indexing and retrieval."},"post_id":{"type":"string","format":"uuid","description":"Replied post's discussion_board_posts.id.\n\nForeign key linking this reply to the parent discussion board post.\n\nMaintains relational integrity ensuring replies are correctly associated with their discussion topics.\n\nRequired for fetching the context and thread of the reply."},"member_id":{"type":"string","format":"uuid","description":"Authoring member's discussion_board_members.id.\n\nIdentifies the member who authored this reply.\n\nUsed for ownership, authorization, and display purposes.\n\nEnsures traceability and accountability of user-generated content."},"content":{"type":"string","description":"Reply content between 5 and 1000 characters, validated and profanity-checked.\nThis is the primary textual content posted by a member as a reply to a discussion topic.\n\nContent is subjected to validation rules to ensure compliance with length restrictions and community guidelines.\n\nDisplayed to viewers to foster discussion and feedback."},"reply_status":{"type":"string","description":"Status of the reply indicating moderation or visibility state.\nThis status informs the system and users whether the reply is visible, pending moderation, flagged, or deleted.\n\nFacilitates filtering of replies and management of content lifecycle.\n\nValues follow moderation policies framework."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was created.\n\nAutomatically recorded by the system upon reply creation.\n\nUseful for sorting, filtering, and audit logging of reply timelines."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the reply was last updated.\n\nAutomatically updated by the system whenever the reply content or status is modified.\n\nSupports audit trail and versioning of reply content."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the reply was soft deleted; null if active.\n\nNullable field that marks whether the reply has been logically deleted without physical removal.\n\nImportant for soft delete functionality to retain history while hiding deleted content from standard views."}},"required":["id","post_id","member_id","content","reply_status","created_at","updated_at"],"description":"Discussion board reply entity representing a user's reply within a discussion topic.\n\nIncludes properties for content, author, reply status, timestamps including creation, update, and optional soft deletion.\n\nThis entity supports moderation, auditing, and content lifecycle management.\n\nThe structure conforms strictly to the Prisma schema definition with proper type formats and detailed descriptive metadata."},"IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"The page number, starting from 1."},"limit":{"type":"integer","format":"int32","description":"Maximum number of records per page."},"search":{"oneOf":[{"type":"string","description":"Search text to filter moderation logs."},{"type":"null"}],"description":"Search text to filter moderation logs."},"action_type":{"oneOf":[{"type":"string","description":"Type of moderation action to filter on, e.g., 'edit', 'delete', 'approve'."},{"type":"null"}],"description":"Type of moderation action to filter on, e.g., 'edit', 'delete', 'approve'."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter logs by specific moderator ID."},{"type":"null"}],"description":"Filter logs by specific moderator ID."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter logs related to a particular post ID."},{"type":"null"}],"description":"Filter logs related to a particular post ID."},"reply_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter logs related to a particular reply ID."},{"type":"null"}],"description":"Filter logs related to a particular reply ID."},"order_by":{"oneOf":[{"const":"created_at_desc","description":"Sorting order for moderation logs based on creation timestamp."},{"const":"created_at_asc","description":"Sorting order for moderation logs based on creation timestamp."},{"type":"null"}],"description":"Sorting order for moderation logs based on creation timestamp."}},"required":["page","limit"],"description":"Parameters to filter and paginate moderation logs including search, filtering by action, moderator, post and reply, plus sorting options."},"IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderation log entry."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Related post ID if applicable."},{"type":"null"}],"description":"Related post ID if applicable."},"reply_id":{"oneOf":[{"type":"string","format":"uuid","description":"Related reply ID if applicable."},{"type":"null"}],"description":"Related reply ID if applicable."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator who performed the action."},{"type":"null"}],"description":"ID of the moderator who performed the action."},"action_type":{"type":"string","description":"Moderation action performed, such as 'edit', 'delete', or 'approve'."},"action_details":{"oneOf":[{"type":"string","description":"Additional details or notes about the moderation action."},{"type":"null"}],"description":"Additional details or notes about the moderation action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was performed."}},"required":["id","action_type","created_at"],"description":"Detailed log entry for actions performed by moderators on posts or replies, including the nature of the action and timestamps."},"IDiscussionBoardDiscussionBoardPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the discussion board post.\n\nThis is the primary key for the post entity, represented as a UUID string, used to uniquely distinguish the post within the system."},"category_id":{"type":"string","format":"uuid","description":"The unique identifier of the category to which this post belongs.\n\nThis field links the post to a specific discussion category, such as Economic or Political, enabling categorization and filtering."},"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member who authored the post.\n\nThis property associates the post with its authoring member account."},"title":{"type":"string","description":"The title of the discussion post.\n\nThe title is a concise summary of the post content, with length constraints ensuring it is between 5 and 100 characters as per business rules."},"post_status":{"type":"string","description":"The status of the post.\n\nIndicates the moderation or visibility state of the post, for example, 'public', 'pending', or other status values defined by the system."},"created_at":{"type":"string","format":"date-time","description":"The timestamp of when the post was created.\n\nRepresents the creation date and time in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp of the last update made to the post.\n\nReflects the date and time when the post was last modified, useful for sorting or versioning purposes."}},"required":["id","category_id","member_id","title","post_status","created_at","updated_at"],"description":"Summary view of a discussion board post for listing and overview purposes.\n\nIncludes essential fields such as identifiers, title, status, and timestamps.\n\nOptimized to provide sufficient information for post listings with minimal data overhead.\n\nExcludes the full body content to enhance performance in list views.\n\nThis type corresponds directly to the discussion_board_posts model in the Prisma schema.","x-autobe-prisma-schema":"discussion_board_posts"},"IDiscussionBoardDiscussionBoardReplies.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the reply.\n\nThis UUID uniquely identifies the reply in the discussion board system."},"post_id":{"type":"string","format":"uuid","description":"ID of the post to which this reply belongs.\n\nThis property associates the reply with its parent discussion post."},"member_id":{"type":"string","format":"uuid","description":"ID of the member who authored the reply.\n\nLinks the reply to the member account that created it."},"content":{"type":"string","description":"Content of the reply.\n\nThe reply content has length constraints and is subject to profanity filtering.\n\nTypically between 5 and 1000 characters, providing users with concise responses to discussion posts."},"reply_status":{"type":"string","description":"Status of the reply.\n\nIndicates moderation or visibility state, such as 'public', 'pending', or 'deleted'."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the reply.\n\nRecorded in ISO 8601 format, representing when the reply was initially posted."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the reply.\n\nUseful for moderation tracking and ensuring content freshness."}},"required":["id","post_id","member_id","content","reply_status","created_at","updated_at"],"description":"Summary representation of a discussion board reply for overview and listing.\n\nDesigned to provide essential reply information without the full detail of the reply.\n\nSupports filtering, sorting, and pagination in reply list views.\n\nLinked directly to the discussion_board_replies Prisma model.","x-autobe-prisma-schema":"discussion_board_replies"},"IDiscussionBoardDiscussionBoardModerator.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion board moderator."},"email":{"type":"string","description":"The moderator's registered email address used for login and communication."},"display_name":{"type":"string","description":"Display name shown in moderation logs and actions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the moderator account."}},"required":["id","email","display_name","created_at","updated_at"],"description":"Summary information for discussion board moderators.\n\nIncludes unique identifier, email address, display name, and timestamps of creation and last update.\n\nUsed in list and lookup operations for efficient moderator account representation within the system.\n\nCorresponds directly to the discussion_board_moderators table's public fields.","x-autobe-prisma-schema":"discussion_board_moderators"},"IDiscussionBoardDiscussionBoardAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion board administrator."},"email":{"type":"string","description":"The administrator's registered email address used for login and system management."},"display_name":{"type":"string","description":"Display name for administrator identification in audit and management logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the administrator account."}},"required":["id","email","display_name","created_at","updated_at"],"description":"Summary representation of discussion board administrators.\n\nIncludes the unique ID, email, display name, and timestamps for account creation and last modification.\n\nOptimized for listing administrator accounts efficiently without exposing sensitive information.\n\nMapped directly from the discussion_board_admins table data.","x-autobe-prisma-schema":"discussion_board_admins"},"IDiscussionBoardDiscussionBoardGuest.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key uniquely identifying a discussion board guest session."},"session_token":{"type":"string","description":"Unique session token identifying the guest user session."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the guest session."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the guest session is invalidated; null if active."}},"required":["id","session_token","created_at","updated_at"],"description":"Summary view of a guest session in the discussion board. Contains essential information to identify the guest and session token status.\n\nThis summary excludes sensitive or detailed authentication tokens but provides the minimal necessary data for guest session listings and session management.\n\nUseful for administrative or analytical purposes where guest sessions are monitored or managed."},"IDiscussionBoardDiscussionBoardCategories.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key uniquely identifying a discussion board category."},"name":{"type":"string","description":"Name of the category, such as 'Economic' or 'Political'. Uniquely identifies the classification domain."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the category's purpose or scope; null if not provided."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the category was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the category."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the category is inactive; null if active."}},"required":["id","name","created_at","updated_at"],"description":"Summary representation of a discussion board category.\n\nIncludes essential identification and descriptive fields for display and filtering purposes.\n\nDesigned to provide sufficient information for category selection and browsing without revealing internal management details."},"IDiscussionBoardDiscussionBoardReply.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the discussion board reply."},"content":{"type":"string","description":"Summary of the reply's textual content, truncated or concise for listing."},"reply_status":{"type":"string","description":"Current status of the reply indicating its moderation or visibility state."},"created_at":{"type":"string","format":"date-time","description":"DateTime when the reply was initially created."},"updated_at":{"type":"string","format":"date-time","description":"DateTime when the reply was last updated."}},"required":["id","content","reply_status","created_at","updated_at"],"description":"A summary representation of a discussion board reply focusing on key metadata and truncated content.\n\nThis summary is used in list views and search results where full reply details are unnecessary.\n\nIt omits fields like member details or full content to minimize payload size.","x-autobe-prisma-schema":"discussion_board_replies"},"IDiscussionBoardModerationLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderation log entry."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the related post affected by the moderation action, null if not applicable."},"reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the related reply affected by the moderation action, null if not applicable."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the moderator who performed the action, null if moderator details are unavailable or the action was by admin."},"action_type":{"type":"string","description":"The type of moderation action performed, such as 'edit', 'delete', or 'approve'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was performed."}},"required":["id","action_type","created_at"],"description":"A summary representation of a moderation log entry to provide essential information for auditing and listing.\n\nThis summary includes identifiers linking to related posts, replies, and the moderator who performed the action when applicable.\n\nUsed in paginated listing of moderation logs with essential metadata only.","x-autobe-prisma-schema":"discussion_board_moderation_logs"}}}}