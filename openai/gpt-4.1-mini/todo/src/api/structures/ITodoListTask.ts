import { tags } from "typia";

/**
 * Represents an individual todo task created and managed by an authenticated
 * user.
 *
 * This entity corresponds to the `todo_list_tasks` table in the database. It
 * contains the unique identifier (`id`), the foreign key linking to the owner
 * user (`todo_list_user_id`), a non-empty task description (`description`), a
 * boolean flag indicating completion status (`is_completed`), and timestamps
 * for creation, last update, and optional soft deletion.
 *
 * The `id` property is a UUID uniquely identifying each task. The
 * `todo_list_user_id` associates the task with its owning user account. The
 * `description` must be a non-empty string trimmed of unnecessary whitespace.
 * The `is_completed` boolean indicates whether the task is completed (`true`)
 * or pending (`false`).
 *
 * Timestamps `created_at` and `updated_at` provide audit tracking for task
 * lifecycle events, while `deleted_at` supports soft delete functionality,
 * indicating if and when the task was deleted.
 *
 * All timestamps use the standard UTC date-time format with timezone awareness.
 *
 * Security considerations ensure tasks are only accessible and manipulable by
 * their owners.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTask = {
  /** Unique identifier of the todo task. */
  id: string & tags.Format<"uuid">;

  /** Foreign key referencing the owning user's unique identifier. */
  todo_list_user_id: string & tags.Format<"uuid">;

  /** Non-empty, trimmed text description of the todo task. */
  description: string;

  /**
   * Indicates whether the todo task is marked as completed (`true`) or
   * pending (`false`).
   */
  is_completed: boolean;

  /** Timestamp of task creation in ISO 8601 format with timezone. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last task update in ISO 8601 format with timezone. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp indicating when the task was soft deleted. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTask {
  /**
   * Create DTO for todo_list_tasks.
   *
   * Allows creation of new todo tasks with a required description.
   *
   * Fields like id, todo_list_user_id, is_completed, and timestamps are
   * managed by the system and are excluded here.
   *
   * This DTO is used as a request body for creating tasks.
   *
   * This schema directly corresponds to the Prisma model todo_list_tasks.
   */
  export type ICreate = {
    /**
     * Task description text, must be non-empty and trimmed.
     *
     * Describes the content of the task the user needs to accomplish.
     *
     * This field must contain meaningful, non-empty string data
     * representing the task details.
     */
    description: string;
  };

  /**
   * Request body schema for updating an existing todo task.
   *
   * This schema corresponds to partial updates to the `todo_list_tasks`
   * entity and is used in operations where users can modify task properties.
   *
   * Fields are optional to allow partial updates. Ownership fields
   * (`todo_list_user_id`) and immutable fields like `id` and timestamps are
   * not included for updates.
   *
   * The `description`, if provided, must be a non-empty string. The
   * `is_completed` status can be toggled between `true` or `false`.
   *
   * Security enforces that only the owning user can make updates and that
   * system-managed fields remain unchanged.
   *
   * No audit timestamps or deletion flags are modifiable through this schema.
   */
  export type IUpdate = {
    /** Updated non-empty, trimmed text description of the todo task. */
    description?: string | undefined;

    /**
     * Updated completion status of the todo task, `true` for completed,
     * `false` for pending.
     */
    is_completed?: boolean | undefined;
  };
}
