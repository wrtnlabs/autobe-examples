import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAdmin } from "../../../structures/ITodoListAdmin";

/**
 * Create a new administrator account in the todo_list_admins table with unique
 * email and password.
 *
 * This join API operation creates a new administrator account in the
 * todo_list_admins table. It accepts registration data including unique email
 * and hashed password. The database schema supports soft deletion through
 * deleted_at nullable timestamp, and timestamps for created_at and updated_at.
 * The operation issues JWT tokens upon successful registration.
 *
 * The admin table requires unique email for login and stores password securely
 * using password_hash. The system validates email uniqueness and manages
 * account lifecycle timestamps. The operation is open to the public for new
 * admin registrations.
 *
 * Security considerations include secure password handling and validation,
 * preventing duplicate email registration, and issuance of JWT tokens for
 * subsequent login sessions.
 *
 * Related operations: /auth/admin/login, /auth/admin/refresh. The join
 * operation is essential for admin user onboarding.
 *
 * @param props.connection
 * @param props.body Registration data for todo_list_admins table including
 *   email and password hash.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Registration data for todo_list_admins table including email and
     * password hash.
     */
    body: ITodoListAdmin.ICreate;
  };
  export type Body = ITodoListAdmin.ICreate;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an administrator with email and password, returning access
 * tokens.
 *
 * Authenticate an administrator user from todo_list_admins table by verifying
 * email and password. Returns JWT access tokens for authenticated sessions.
 *
 * The todo_list_admins table securely stores email and password_hash for
 * administrator accounts, enforcing unique emails. The login validates
 * credentials and issues JWT tokens used for subsequent authorized requests.
 *
 * Security considerations emphasize safe password verification and token
 * management.
 *
 * Related operations: /auth/admin/join, /auth/admin/refresh to complete
 * authentication flow.
 *
 * @param props.connection
 * @param props.body Login credentials for todo_list_admins, including email and
 *   password.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for todo_list_admins, including email and password. */
    body: ITodoListAdmin.ILogin;
  };
  export type Body = ITodoListAdmin.ILogin;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens using a refresh token for admins.
 *
 * Refresh access tokens for an authenticated administrator using a valid
 * refresh token.
 *
 * The todo_list_admins table holds administrator credentials and session data.
 * This operation accepts a refresh token and returns new JWT access tokens to
 * maintain an authenticated session.
 *
 * Security implementations include refresh token rotation and validation.
 *
 * Related operations: /auth/admin/join and /auth/admin/login to complete the
 * authentication cycle.
 *
 * @param props.connection
 * @param props.body Refresh token request data including the refresh token
 *   string.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request data including the refresh token string. */
    body: ITodoListAdmin.IRefresh;
  };
  export type Body = ITodoListAdmin.IRefresh;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
