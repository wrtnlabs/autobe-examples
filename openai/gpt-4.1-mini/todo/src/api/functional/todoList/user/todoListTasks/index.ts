import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTask } from "../../../../structures/ITodoListTask";
import { ITodoListTasks } from "../../../../structures/ITodoListTasks";
import { IPageITodoListTasks } from "../../../../structures/IPageITodoListTasks";

/**
 * Create a new todo task with a non-empty description.
 *
 * This operation allows an authenticated user to add a task to their todo list.
 * The task must have a description string that is not empty or whitespace.
 *
 * Security considerations require that only authenticated users can create
 * tasks; the user identity is resolved internally and linked to the task.
 *
 * The operation uses the todo_list_tasks table from the Prisma schema, which
 * contains the task's id, user id, description, completion status, and
 * timestamps.
 *
 * Upon success, it returns the newly created task with its unique ID and
 * initial is_completed status set to false (pending).
 *
 * Validation rules enforce non-empty descriptions; empty or whitespace-only
 * descriptions result in a validation error.
 *
 * This operation complements other APIs for updating task completion and
 * deleting tasks.
 *
 * @param props.connection
 * @param props.body Creation info for a new todo task
 * @path /todoList/user/todoListTasks
 * @accessor api.functional.todoList.user.todoListTasks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info for a new todo task */
    body: ITodoListTask.ICreate;
  };
  export type Body = ITodoListTask.ICreate;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/todoListTasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todoListTasks";
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of TodoList tasks.
 *
 * Retrieve a filtered, sorted, and paginated list of TodoList tasks for the
 * authenticated user.
 *
 * This operation retrieves tasks owned by the authenticated user from the
 * todo_list_tasks table. It allows clients to specify filter criteria such as
 * completion status and supports pagination and sorting options to handle large
 * task lists.
 *
 * Only authenticated users are authorized to access this operation. Tasks
 * returned include key information such as ID, description, and completion
 * status.
 *
 * The response consists of a paginated collection of preview task summaries
 * optimized for display in user task lists. Business rules ensure that only
 * tasks belonging to the calling user are included, and that all data meets
 * validation requirements specified in the schema.
 *
 * Errors are returned if the user is unauthenticated, or if query parameters
 * contain invalid filters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for TodoList task
 *   filtering
 * @path /todoList/user/todoListTasks
 * @accessor api.functional.todoList.user.todoListTasks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for TodoList task filtering */
    body: ITodoListTasks.IRequest;
  };
  export type Body = ITodoListTasks.IRequest;
  export type Response = IPageITodoListTasks.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/user/todoListTasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todoListTasks";
  export const random = (): IPageITodoListTasks.ISummary =>
    typia.random<IPageITodoListTasks.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific TodoList task.
 *
 * Retrieve detailed information of a specific TodoList task by its ID.
 *
 * The operation requires the task ID as a path parameter. It validates that the
 * ID is a valid UUID and that the authenticated user has permission to access
 * the task.
 *
 * The response includes the full details of the task, including description,
 * completion status, timestamps, and soft delete indicator.
 *
 * If the task does not exist or does not belong to the caller, an error is
 * returned.
 *
 * This operation supports user task management flows where individual task
 * details are needed.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target TodoList task
 * @path /todoList/user/todoListTasks/:id
 * @accessor api.functional.todoList.user.todoListTasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target TodoList task */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTasks;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/todoListTasks/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todoListTasks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITodoListTasks => typia.random<ITodoListTasks>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a todo task by id.
 *
 * Update an existing todo task identified by id.
 *
 * This operation allows the authenticated user to modify the description and
 * completion status of a task they own.
 *
 * Security controls ensure only authorized users can update their own tasks.
 *
 * The todo_list_tasks Prisma schema includes fields for id, user_id,
 * description, is_completed, and timestamps. The description must be
 * non-empty.
 *
 * The operation updates the task and returns the full updated record.
 *
 * Soft delete support means that deleted tasks are not modifiable and updates
 * apply only to active tasks.
 *
 * This operation complements the create and delete task APIs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the todo task to update
 * @param props.body Updated information for the todo task
 * @path /todoList/user/todoListTasks/:id
 * @accessor api.functional.todoList.user.todoListTasks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the todo task to update */
    id: string & tags.Format<"uuid">;

    /** Updated information for the todo task */
    body: ITodoListTask.IUpdate;
  };
  export type Body = ITodoListTask.IUpdate;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/todoListTasks/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/todoListTasks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a todo task by its ID.
 *
 * This endpoint permanently deletes a todo task from the system by its unique
 * identifier.
 *
 * The operation requires the task ID as a path parameter. It removes the
 * corresponding record from the 'todo_list_tasks' table.
 *
 * Only authenticated users with the 'user' role can perform this operation, and
 * users may only delete their own tasks.
 *
 * If the task does not exist or belongs to another user, the system returns an
 * appropriate authorization or not found error.
 *
 * No request body is necessary. No response body is returned upon successful
 * completion.
 *
 * This operation is essential for task lifecycle management, allowing users to
 * clean up completed or obsolete tasks effectively.
 *
 * @param props.connection
 * @param props.id Unique identifier of the todo task to delete
 * @path /todoList/user/todoListTasks/:id
 * @accessor api.functional.todoList.user.todoListTasks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the todo task to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/user/todoListTasks/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todoListTasks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
