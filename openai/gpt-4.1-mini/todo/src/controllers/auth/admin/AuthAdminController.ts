import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { ITodoListAdmin } from "../../../api/structures/ITodoListAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create a new administrator account in the todo_list_admins table with
   * unique email and password.
   *
   * This join API operation creates a new administrator account in the
   * todo_list_admins table. It accepts registration data including unique email
   * and hashed password. The database schema supports soft deletion through
   * deleted_at nullable timestamp, and timestamps for created_at and
   * updated_at. The operation issues JWT tokens upon successful registration.
   *
   * The admin table requires unique email for login and stores password
   * securely using password_hash. The system validates email uniqueness and
   * manages account lifecycle timestamps. The operation is open to the public
   * for new admin registrations.
   *
   * Security considerations include secure password handling and validation,
   * preventing duplicate email registration, and issuance of JWT tokens for
   * subsequent login sessions.
   *
   * Related operations: /auth/admin/login, /auth/admin/refresh. The join
   * operation is essential for admin user onboarding.
   *
   * @param connection
   * @param body Registration data for todo_list_admins table including email
   *   and password hash.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.ICreate,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an administrator with email and password, returning access
   * tokens.
   *
   * Authenticate an administrator user from todo_list_admins table by verifying
   * email and password. Returns JWT access tokens for authenticated sessions.
   *
   * The todo_list_admins table securely stores email and password_hash for
   * administrator accounts, enforcing unique emails. The login validates
   * credentials and issues JWT tokens used for subsequent authorized requests.
   *
   * Security considerations emphasize safe password verification and token
   * management.
   *
   * Related operations: /auth/admin/join, /auth/admin/refresh to complete
   * authentication flow.
   *
   * @param connection
   * @param body Login credentials for todo_list_admins, including email and
   *   password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.ILogin,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens using a refresh token for admins.
   *
   * Refresh access tokens for an authenticated administrator using a valid
   * refresh token.
   *
   * The todo_list_admins table holds administrator credentials and session
   * data. This operation accepts a refresh token and returns new JWT access
   * tokens to maintain an authenticated session.
   *
   * Security implementations include refresh token rotation and validation.
   *
   * Related operations: /auth/admin/join and /auth/admin/login to complete the
   * authentication cycle.
   *
   * @param connection
   * @param body Refresh token request data including the refresh token string.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.IRefresh,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
