import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestJoin } from "../../../../providers/postAuthGuestJoin";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";

import { ITodoListGuest } from "../../../../api/structures/ITodoListGuest";

@Controller("/auth/guest/join")
export class AuthGuestJoinController {
  /**
   * Create a new guest user account with a unique nickname and issue tokens.
   *
   * Registers a new guest user by assigning a unique nickname, creating an
   * entry in the `todo_list_guests` table. This operation enables creation of
   * temporary guest accounts, which do not require password or email, aligning
   * with the guest role's non-authenticated access model. It issues JWT tokens
   * for session management.
   *
   * The `nickname` field is mandatory and must be unique as per schema
   * constraints. The operation uses the `id`, `nickname`, `created_at`, and
   * `updated_at` fields as part of the lifecycle.
   *
   * The guest account supports soft deletion via `deleted_at` field, which is
   * null upon creation.
   *
   * Upon success, it returns authorization tokens encapsulated in the
   * `ITodoListGuest.IAuthorized` DTO.
   *
   * This is the initial step for guests to gain temporary access, and works in
   * conjunction with the refresh token operation.
   *
   * @param connection
   * @param body Registration information for a new guest user including a
   *   unique nickname.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinGuest(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: ITodoListGuest.ICreate,
  ): Promise<ITodoListGuest.IAuthorized> {
    try {
      return await postAuthGuestJoin({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
