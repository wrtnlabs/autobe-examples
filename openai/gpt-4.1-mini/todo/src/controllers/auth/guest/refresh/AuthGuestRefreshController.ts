import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestRefresh } from "../../../../providers/postAuthGuestRefresh";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";

import { ITodoListGuest } from "../../../../api/structures/ITodoListGuest";

@Controller("/auth/guest/refresh")
export class AuthGuestRefreshController {
  /**
   * Refresh tokens for guest user to extend session validity.
   *
   * Refreshes authentication tokens for an existing guest user session. This
   * operation expects a valid refresh token to extend session validity without
   * requiring re-authentication.
   *
   * The operation relates to the `todo_list_guests` schema, reflecting guest
   * account lifecycle but no password verification.
   *
   * Ensures seamless continuation of guest sessions and token rotation.
   *
   * Success response is encapsulated in the `ITodoListGuest.IAuthorized` DTO.
   *
   * Works as a follow-up operation to the guest join endpoint.
   *
   * @param connection
   * @param body Refresh token request payload containing the refresh token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshGuest(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: ITodoListGuest.IRefresh,
  ): Promise<ITodoListGuest.IAuthorized> {
    try {
      return await postAuthGuestRefresh({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
