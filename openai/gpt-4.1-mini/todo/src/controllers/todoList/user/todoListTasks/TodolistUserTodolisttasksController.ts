import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListUserTodoListTasks } from "../../../../providers/postTodoListUserTodoListTasks";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patchTodoListUserTodoListTasks } from "../../../../providers/patchTodoListUserTodoListTasks";
import { getTodoListUserTodoListTasksId } from "../../../../providers/getTodoListUserTodoListTasksId";
import { putTodoListUserTodoListTasksId } from "../../../../providers/putTodoListUserTodoListTasksId";
import { deleteTodoListUserTodoListTasksId } from "../../../../providers/deleteTodoListUserTodoListTasksId";

import { ITodoListTask } from "../../../../api/structures/ITodoListTask";
import { IPageITodoListTasks } from "../../../../api/structures/IPageITodoListTasks";
import { ITodoListTasks } from "../../../../api/structures/ITodoListTasks";

@Controller("/todoList/user/todoListTasks")
export class TodolistUserTodolisttasksController {
  /**
   * Create a new todo task with a non-empty description.
   *
   * This operation allows an authenticated user to add a task to their todo
   * list. The task must have a description string that is not empty or
   * whitespace.
   *
   * Security considerations require that only authenticated users can create
   * tasks; the user identity is resolved internally and linked to the task.
   *
   * The operation uses the todo_list_tasks table from the Prisma schema, which
   * contains the task's id, user id, description, completion status, and
   * timestamps.
   *
   * Upon success, it returns the newly created task with its unique ID and
   * initial is_completed status set to false (pending).
   *
   * Validation rules enforce non-empty descriptions; empty or whitespace-only
   * descriptions result in a validation error.
   *
   * This operation complements other APIs for updating task completion and
   * deleting tasks.
   *
   * @param connection
   * @param body Creation info for a new todo task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTask.ICreate,
  ): Promise<ITodoListTask> {
    try {
      return await postTodoListUserTodoListTasks({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of TodoList tasks.
   *
   * Retrieve a filtered, sorted, and paginated list of TodoList tasks for the
   * authenticated user.
   *
   * This operation retrieves tasks owned by the authenticated user from the
   * todo_list_tasks table. It allows clients to specify filter criteria such as
   * completion status and supports pagination and sorting options to handle
   * large task lists.
   *
   * Only authenticated users are authorized to access this operation. Tasks
   * returned include key information such as ID, description, and completion
   * status.
   *
   * The response consists of a paginated collection of preview task summaries
   * optimized for display in user task lists. Business rules ensure that only
   * tasks belonging to the calling user are included, and that all data meets
   * validation requirements specified in the schema.
   *
   * Errors are returned if the user is unauthenticated, or if query parameters
   * contain invalid filters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for TodoList task
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTasks.IRequest,
  ): Promise<IPageITodoListTasks.ISummary> {
    try {
      return await patchTodoListUserTodoListTasks({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific TodoList task.
   *
   * Retrieve detailed information of a specific TodoList task by its ID.
   *
   * The operation requires the task ID as a path parameter. It validates that
   * the ID is a valid UUID and that the authenticated user has permission to
   * access the task.
   *
   * The response includes the full details of the task, including description,
   * completion status, timestamps, and soft delete indicator.
   *
   * If the task does not exist or does not belong to the caller, an error is
   * returned.
   *
   * This operation supports user task management flows where individual task
   * details are needed.
   *
   * @param connection
   * @param id Unique identifier of the target TodoList task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITodoListTasks> {
    try {
      return await getTodoListUserTodoListTasksId({
        user,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a todo task by id.
   *
   * Update an existing todo task identified by id.
   *
   * This operation allows the authenticated user to modify the description and
   * completion status of a task they own.
   *
   * Security controls ensure only authorized users can update their own tasks.
   *
   * The todo_list_tasks Prisma schema includes fields for id, user_id,
   * description, is_completed, and timestamps. The description must be
   * non-empty.
   *
   * The operation updates the task and returns the full updated record.
   *
   * Soft delete support means that deleted tasks are not modifiable and updates
   * apply only to active tasks.
   *
   * This operation complements the create and delete task APIs.
   *
   * @param connection
   * @param id Unique identifier of the todo task to update
   * @param body Updated information for the todo task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTask.IUpdate,
  ): Promise<ITodoListTask> {
    try {
      return await putTodoListUserTodoListTasksId({
        user,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a todo task by its ID.
   *
   * This endpoint permanently deletes a todo task from the system by its unique
   * identifier.
   *
   * The operation requires the task ID as a path parameter. It removes the
   * corresponding record from the 'todo_list_tasks' table.
   *
   * Only authenticated users with the 'user' role can perform this operation,
   * and users may only delete their own tasks.
   *
   * If the task does not exist or belongs to another user, the system returns
   * an appropriate authorization or not found error.
   *
   * No request body is necessary. No response body is returned upon successful
   * completion.
   *
   * This operation is essential for task lifecycle management, allowing users
   * to clean up completed or obsolete tasks effectively.
   *
   * @param connection
   * @param id Unique identifier of the todo task to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListUserTodoListTasksId({
        user,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
