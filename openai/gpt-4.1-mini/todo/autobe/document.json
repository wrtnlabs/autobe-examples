{"operations":[{"specification":"This API operation is for guest user registration, allowing unauthenticated users to create a temporary guest account with a nickname. The operation corresponds to the `todo_list_guests` table in the Prisma schema, which includes fields `id` (UUID), `nickname` (unique string), timestamps for creation and update, and a nullable `deleted_at` for soft deletion. This join operation enables guests to obtain temporary access tokens without credential-based login, fitting the guest user model, which cannot authenticate through login credentials. The operation POST `/auth/guest/join` requires a request body to register with a nickname. This operation generates JWT tokens upon successful registration, providing authorization and session management for guests.\n\nSecurity: This endpoint is publicly accessible with authorizationType \"join\" to allow creation without prior authentication.\n\nBusiness Context: Guest users only need minimal data (`nickname`) for temporary identity, no password or email is involved.\n\nResponse: Returns `ITodoListGuest.IAuthorized` type, containing tokens issued for the guest.\n\nRelated Operations: Token refresh (POST `/auth/guest/refresh`) which allows session token renewal without login.","authorizationType":"join","description":"Registers a new guest user by assigning a unique nickname, creating an entry in the `todo_list_guests` table. This operation enables creation of temporary guest accounts, which do not require password or email, aligning with the guest role's non-authenticated access model. It issues JWT tokens for session management.\n\nThe `nickname` field is mandatory and must be unique as per schema constraints. The operation uses the `id`, `nickname`, `created_at`, and `updated_at` fields as part of the lifecycle.\n\nThe guest account supports soft deletion via `deleted_at` field, which is null upon creation.\n\nUpon success, it returns authorization tokens encapsulated in the `ITodoListGuest.IAuthorized` DTO.\n\nThis is the initial step for guests to gain temporary access, and works in conjunction with the refresh token operation.","summary":"Create a new guest user account with a unique nickname and issue tokens","parameters":[],"requestBody":{"description":"Registration information for a new guest user including a unique nickname.","typeName":"ITodoListGuest.ICreate"},"responseBody":{"description":"Authorization tokens issued upon successful guest registration.","typeName":"ITodoListGuest.IAuthorized"},"authorizationRole":"guest","name":"joinGuest","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"This API operation enables guests to refresh their authentication tokens using a valid refresh token, tied to `todo_list_guests`. It supports session continuity without requiring re-login, reflecting the guest user's non-authenticated usage model. Token refresh operation uses the guest's unique identifier and manages JWT sessions without the need for password or email.\n\nThe refresh operation is critical for maintaining guest user sessions over time within allowed limits and does not expose credential verification steps.\n\nSecurity: This operation uses authorizationType `refresh`, meaning it expects a valid refresh token for session extension.\n\nRelated Operations: Depends on the existence of a guest account from join operation. Can be used repeatedly until the refresh token expires.\n\nRequest and response bodies correspond to standard token refreshing mechanisms.\n\nResponse payload is of type `ITodoListGuest.IAuthorized`, containing new access and refresh tokens.","authorizationType":"refresh","description":"Refreshes authentication tokens for an existing guest user session. This operation expects a valid refresh token to extend session validity without requiring re-authentication.\n\nThe operation relates to the `todo_list_guests` schema, reflecting guest account lifecycle but no password verification.\n\nEnsures seamless continuation of guest sessions and token rotation.\n\nSuccess response is encapsulated in the `ITodoListGuest.IAuthorized` DTO.\n\nWorks as a follow-up operation to the guest join endpoint.","summary":"Refresh tokens for guest user to extend session validity","parameters":[],"requestBody":{"description":"Refresh token request payload containing the refresh token.","typeName":"ITodoListGuest.IRefresh"},"responseBody":{"description":"New authorization tokens returned upon successful refresh.","typeName":"ITodoListGuest.IAuthorized"},"authorizationRole":"guest","name":"refreshGuest","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"Create new user account with email and password for authentication, issuing initial JWT tokens upon successful registration. This operation applies to the todo_list_users table, which includes fields such as id (UUID), email (unique string), password_hash (stored password), created_at, updated_at, and deleted_at for soft delete support. The registration involves validating the uniqueness of the email field and securely hashing the password before storage. Upon successful creation, the user is issued JWT access and refresh tokens following the configured security policies. The operation is publicly accessible for new users.\n\nIt integrates security practices by ensuring password hashes are stored, and soft deletion is managed via deleted_at field. This endpoint serves as the entry point for new members to join the system and is critical for user lifecycle management.","authorizationType":"join","description":"This operation registers a new authenticated user by collecting a unique email and password. It securely stores the user's credentials in the todo_list_users table with the password saved as a hash in the password_hash column. The user's account lifecycle timestamps (created_at, updated_at) are managed accordingly. The email field must be unique, preventing duplicate registrations. Upon successful registration, the system issues JWT tokens for immediate use, encapsulated in the I{PascalPrefixName}{RoleName}.IAuthorized response format.\n\nThe registration process ensures the user identity is unique via email and prepares the user for application login. No direct login is performed here; instead, tokens are issued after account creation.\n\nThis operation is designed for authenticated member users with full access to personal todo task management.\n\nSecurity considerations include proper password hashing and secure token issuance. The API ensures soft deletion awareness by monitoring the deleted_at field.\n\nThis operation complements the login and refresh token endpoints for a complete authentication flow for member users.","summary":"Register new user account in todo_list_users with secure password hashing and token issuance","parameters":[],"requestBody":{"description":"User registration data including unique email and plain password to be hashed.","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"Authorized user session data including JWT tokens after successful registration.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"Authenticate existing user by validating email and password against stored password_hash in the todo_list_users table. On successful credential validation, issue JWT access and refresh tokens encapsulated in the I{PascalPrefixName}{RoleName}.IAuthorized response format.\n\nValidates user account is active and not soft deleted by checking deleted_at is null. This operation is publicly accessible to allow user login and subsequent authorized operations.\n\nThe login process includes verifying the provided credentials against secure hashed passwords using standard authentication frameworks or cryptographic verification methods.\n\nIt is part of a typical authentication flow including registration (join) and token refreshing (refresh) for member users.","authorizationType":"login","description":"Log in an existing authenticated user by validating their email and password. The system verifies credentials against the todo_list_users table, specifically the password_hash field, and confirms the account is not soft deleted (deleted_at is null). Upon successful authentication, a JWT access token and refresh token are issued, returned in the I{PascalPrefixName}{RoleName}.IAuthorized response format.\n\nThis endpoint is essential for member users to access their todo tasks and personal data. It ensures security by enforcing proper authentication checks, credential validation, and token issuance.\n\nThe login operation depends on no other API endpoints but complements registration and token refresh endpoints to provide a full authentication lifecycle.\n\nSecurity mechanisms include password hashing verification, account state validation via deleted_at, and secure token generation.\n\nThe operation path and method reflect standard RESTful practices for user authentication.","summary":"Authenticate user via email and password from todo_list_users and issue JWT tokens","parameters":[],"requestBody":{"description":"User login credentials containing email and plain password for authentication.","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authorized user session data including JWT tokens after successful login.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"Refresh JWT access token for authenticated user by validating a valid refresh token. This operation relates to the todo_list_users table to confirm user session validity and tokens issuance.\n\nEnsures the refresh token is valid and not expired. On successful validation, new access and refresh tokens are issued in the I{PascalPrefixName}{RoleName}.IAuthorized response format.\n\nThis flow complements initial authentication (join/login) to enable session continuation without requiring full credential submission.\n\nSecurity considerations include refresh token validation, rotation, and issuance of new tokens following best practices.\n\nThe endpoint is protected and requires a valid refresh token to access, indicated by authorizationType \"refresh\" and authorizationRole \"user\".\n\nFollows RESTful patterns for token management operations.","authorizationType":"refresh","description":"Refresh JWT tokens for an authenticated user by validating and rotating refresh token. The system selects the user from todo_list_users to confirm active status (deleted_at is null). Upon success, a new pair of access and refresh tokens is issued, returned in the I{PascalPrefixName}{RoleName}.IAuthorized response.\n\nThis endpoint prolongs the session without requiring the user to login again. It completes the standard JWT token lifecycle for member users.\n\nSecurity protections include refresh token rotation to mitigate replay attacks and checks for account soft deletion.\n\nThe operation is integral to secure session management in the Todo list application backend.\n\nIt is distinct from join and login endpoints by focusing solely on existing valid session extension.\n\nThe endpoint path and method follow best RESTful patterns for security token renewal processes.","summary":"Refresh access and refresh JWT tokens for authenticated user in todo_list_users","parameters":[],"requestBody":{"description":"Refresh token request containing valid refresh token for session continuation.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Newly issued authorized tokens for users after refresh operation.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This API operation allows administrators to register a new admin account for the Todo list application. The operation corresponds to the \"todo_list_admins\" Prisma model, which stores administrator credentials including unique email and hashed password. By invoking this join operation at the path \"/auth/admin/join\", clients submit registration data which results in a new admin record created with a unique ID, email, and securely hashed password stored. The Prisma model includes timestamps for creation, update, and soft deletion for account lifecycle management.\n\nThe join operation requires the admin to provide necessary registration information such as email and password (hashed before storing). The system enforces unique email constraint and timestamps management per the database schema. This operation issues initial JWT tokens for authenticated sessions following registration.\n\nSecurity considerations include validating unique email addresses to prevent duplicates, securely hashing passwords before storage, and ensuring proper authorization role \"admin\" for endpoint access. The operation is public for initial account creation.\n\nRelated operations include /auth/admin/login for authenticating existing admins and /auth/admin/refresh for refreshing tokens. Together, these form the core authentication flow for admin users in the Todo list system.","authorizationType":"join","description":"This join API operation creates a new administrator account in the todo_list_admins table. It accepts registration data including unique email and hashed password. The database schema supports soft deletion through deleted_at nullable timestamp, and timestamps for created_at and updated_at. The operation issues JWT tokens upon successful registration.\n\nThe admin table requires unique email for login and stores password securely using password_hash. The system validates email uniqueness and manages account lifecycle timestamps. The operation is open to the public for new admin registrations.\n\nSecurity considerations include secure password handling and validation, preventing duplicate email registration, and issuance of JWT tokens for subsequent login sessions.\n\nRelated operations: /auth/admin/login, /auth/admin/refresh. The join operation is essential for admin user onboarding.","summary":"Create a new administrator account in the todo_list_admins table with unique email and password.","parameters":[],"requestBody":{"description":"Registration data for todo_list_admins table including email and password hash.","typeName":"ITodoListAdmin.ICreate"},"responseBody":{"description":"The authorized administrator account information with JWT tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"This API operation enables administrator login using credentials stored in the todo_list_admins table, which contains unique email and password_hash fields for secure authentication. The login endpoint at \"/auth/admin/login\" verifies the provided email and password, validates credentials, and issues JWT-based access tokens to establish authenticated sessions.\n\nThe operation enforces security through password hashing, email uniqueness, and token issuance. It references the same Prisma model as the join operation assuring consistent data handling.\n\nThis operation is public for admin authentication attempts, and token management follows standard JWT protocols used throughout the Todo list application.\n\nRelated operations: /auth/admin/join for new account registration, /auth/admin/refresh for token renewal.\n\nSecurity considerations include prevention of brute force attacks, secure password handling, and timing attack mitigations.\n\nThis login operation is essential for admin user access to protected resources in the system.","authorizationType":"login","description":"Authenticate an administrator user from todo_list_admins table by verifying email and password. Returns JWT access tokens for authenticated sessions.\n\nThe todo_list_admins table securely stores email and password_hash for administrator accounts, enforcing unique emails. The login validates credentials and issues JWT tokens used for subsequent authorized requests.\n\nSecurity considerations emphasize safe password verification and token management.\n\nRelated operations: /auth/admin/join, /auth/admin/refresh to complete authentication flow.","summary":"Authenticate an administrator with email and password, returning access tokens.","parameters":[],"requestBody":{"description":"Login credentials for todo_list_admins, including email and password.","typeName":"ITodoListAdmin.ILogin"},"responseBody":{"description":"The authorized administrator account information with JWT tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"This API operation refreshes JWT access tokens for administrators using a valid refresh token. It corresponds to the todo_list_admins Prisma model for admin accounts. The endpoint \"/auth/admin/refresh\" accepts a refresh token, verifies its validity, and issues new JWT tokens without requiring login credentials.\n\nThe operation ensures continued authenticated access for admins with valid sessions. Security considerations include refresh token expiry, secure token storage, revocation mechanisms, and preventing replay attacks.\n\nRelated operations: /auth/admin/join for registration and /auth/admin/login for initial authentication. This refresh operation is crucial for maintaining session continuity without repeated logins.\n\nThe endpoint is restricted to authenticated admins with valid refresh tokens.\n\nThis operation aids in session management and enhances security in the Todo list system.","authorizationType":"refresh","description":"Refresh access tokens for an authenticated administrator using a valid refresh token.\n\nThe todo_list_admins table holds administrator credentials and session data. This operation accepts a refresh token and returns new JWT access tokens to maintain an authenticated session.\n\nSecurity implementations include refresh token rotation and validation.\n\nRelated operations: /auth/admin/join and /auth/admin/login to complete the authentication cycle.","summary":"Refresh JWT tokens using a refresh token for admins.","parameters":[],"requestBody":{"description":"Refresh token request data including the refresh token string.","typeName":"ITodoListAdmin.IRefresh"},"responseBody":{"description":"The authorized administrator account information with refreshed JWT tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of todo tasks from the todo_list_tasks table in the Prisma schema. It allows for advanced searching, filtering, sorting, and pagination of tasks belonging to the authenticated user. The operation is designed to return a summary view of tasks including essential properties such as task ID, description, and completion status. It supports complex queries to filter tasks based on completion status and other criteria.\n\nThe todo_list_tasks entity is related to the todo_list_users entity via the todo_list_user_id foreign key, ensuring tasks are linked to their owners. The operation enforces user authentication to restrict task visibility to each user\u0019s own tasks, preserving privacy and data security.\n\nValidation rules ensure that every task returned has a valid description string and a boolean completion status. The operation provides paginated results to improve performance and usability, configurable by the client through query parameters.\n\nRelated operations include retrieving a single task by its ID, creating a new task, updating task properties, and deleting tasks. The list operation is optimized for quick access to task overviews without revealing sensitive user details.","path":"/todoList/user/todoListTasks","method":"patch","summary":"Search and retrieve a filtered, paginated list of TodoList tasks","description":"Retrieve a filtered, sorted, and paginated list of TodoList tasks for the authenticated user.\n\nThis operation retrieves tasks owned by the authenticated user from the todo_list_tasks table. It allows clients to specify filter criteria such as completion status and supports pagination and sorting options to handle large task lists.\n\nOnly authenticated users are authorized to access this operation. Tasks returned include key information such as ID, description, and completion status.\n\nThe response consists of a paginated collection of preview task summaries optimized for display in user task lists. Business rules ensure that only tasks belonging to the calling user are included, and that all data meets validation requirements specified in the schema.\n\nErrors are returned if the user is unauthenticated, or if query parameters contain invalid filters.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for TodoList task filtering","typeName":"ITodoListTasks.IRequest"},"responseBody":{"description":"Paginated list of TodoList task summaries matching search criteria","typeName":"IPageITodoListTasks.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information for a single TodoList task identified by its unique ID from the todo_list_tasks table. It ensures that the requesting user is authenticated and authorized to access their own tasks only.\n\nThe todo_list_tasks table stores tasks with properties such as ID, description, completion status (is_completed), created and updated timestamps, and a soft delete timestamp. This GET operation returns the detailed properties of the task entity.\n\nSecurity constraints restrict access to the task owned by the authenticated user, preventing access to tasks belonging to others. The operation validates the provided UUID format for the task ID to ensure proper retrieval.\n\nIn case the task with the specified ID does not exist or does not belong to the user, a 404 Not Found error or authorization error is returned respectively.\n\nThis operation integrates with other task management endpoints that allow task creation, update, completion, and deletion.","path":"/todoList/user/todoListTasks/{id}","method":"get","summary":"Retrieve detailed information for a specific TodoList task","description":"Retrieve detailed information of a specific TodoList task by its ID.\n\nThe operation requires the task ID as a path parameter. It validates that the ID is a valid UUID and that the authenticated user has permission to access the task.\n\nThe response includes the full details of the task, including description, completion status, timestamps, and soft delete indicator.\n\nIf the task does not exist or does not belong to the caller, an error is returned.\n\nThis operation supports user task management flows where individual task details are needed.","parameters":[{"name":"id","description":"Unique identifier of the target TodoList task","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed TodoList task information","typeName":"ITodoListTasks"},"authorizationType":null,"authorizationRole":"user","name":"at","prerequisites":[{"endpoint":{"path":"/todoList/user/todoListTasks","method":"post"},"description":"Todo task must be created before it can be retrieved by ID"}]},{"specification":"This operation creates a new todo task in the todo_list_tasks table. It accepts a task description string and creates a new record with a unique UUID id, the provided description, an initial is_completed status of false, and timestamps for creation and update. The task is linked to the authenticated user through todo_list_user_id foreign key (not specified in the API but assumed to be set in the backend from user context). The operation enforces that the description is a non-empty string and returns the created task record with all fields including id, description, is_completed, and timestamps. This follows the business requirements to allow authenticated users to create personal todo tasks with default pending status.","description":"Create a new todo task with a non-empty description.\n\nThis operation allows an authenticated user to add a task to their todo list. The task must have a description string that is not empty or whitespace.\n\nSecurity considerations require that only authenticated users can create tasks; the user identity is resolved internally and linked to the task.\n\nThe operation uses the todo_list_tasks table from the Prisma schema, which contains the task's id, user id, description, completion status, and timestamps.\n\nUpon success, it returns the newly created task with its unique ID and initial is_completed status set to false (pending).\n\nValidation rules enforce non-empty descriptions; empty or whitespace-only descriptions result in a validation error.\n\nThis operation complements other APIs for updating task completion and deleting tasks.","summary":"Create a new todo task","parameters":[],"requestBody":{"description":"Creation info for a new todo task","typeName":"ITodoListTask.ICreate"},"responseBody":{"description":"Created todo task record with full details","typeName":"ITodoListTask"},"authorizationType":null,"authorizationRole":"user","name":"create","path":"/todoList/user/todoListTasks","method":"post","prerequisites":[]},{"specification":"This operation updates an existing todo task in the todo_list_tasks table by its unique id. It accepts updated task fields such as description and is_completed status. The operation enforces that the task belongs to the authenticated user and that the description is a non-empty string. The todo_list_tasks table supports soft deletes; this operation updates the description and completion status fields and refreshes the updated_at timestamp but does not affect deleted_at. Only authenticated users can update their own tasks securely. The operation returns the full updated task record on success.","description":"Update an existing todo task identified by id.\n\nThis operation allows the authenticated user to modify the description and completion status of a task they own.\n\nSecurity controls ensure only authorized users can update their own tasks.\n\nThe todo_list_tasks Prisma schema includes fields for id, user_id, description, is_completed, and timestamps. The description must be non-empty.\n\nThe operation updates the task and returns the full updated record.\n\nSoft delete support means that deleted tasks are not modifiable and updates apply only to active tasks.\n\nThis operation complements the create and delete task APIs.","summary":"Update a todo task by id","parameters":[{"name":"id","description":"Unique identifier of the todo task to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the todo task","typeName":"ITodoListTask.IUpdate"},"responseBody":{"description":"Updated todo task record with full details","typeName":"ITodoListTask"},"authorizationType":null,"authorizationRole":"user","name":"update","path":"/todoList/user/todoListTasks/{id}","method":"put","prerequisites":[{"endpoint":{"path":"/todoList/user/todoListTasks","method":"post"},"description":"Todo task must be created before it can be updated using its unique id."}]},{"specification":"This operation deletes a todo task from the 'todo_list_tasks' table by its unique identifier. It permanently removes the task record from the database, reflecting the user's intent to discard the task. The task is linked to a specific user by 'todo_list_user_id', and security checks must ensure the requesting user owns the task or has admin rights before deletion. It supports hard delete behavior as the 'deleted_at' field is present but deletion is explicitly requested to remove the record.\n\nThe operation requires the task ID as a path parameter in UUID format. No request body is required since only the task ID is needed to identify the resource to delete.\n\nThis operation is intended for authenticated users with the role 'user' who own the tasks. It requires authorization to prevent unauthorized deletions.\n\nNo response body is returned upon successful deletion. Errors such as 404 Not Found or 403 Forbidden should be properly handled by the implementation.\n\nThis operation correlates with the 'todo_list_tasks' Prisma schema model as the primary data source.","description":"This endpoint permanently deletes a todo task from the system by its unique identifier.\n\nThe operation requires the task ID as a path parameter. It removes the corresponding record from the 'todo_list_tasks' table.\n\nOnly authenticated users with the 'user' role can perform this operation, and users may only delete their own tasks.\n\nIf the task does not exist or belongs to another user, the system returns an appropriate authorization or not found error.\n\nNo request body is necessary. No response body is returned upon successful completion.\n\nThis operation is essential for task lifecycle management, allowing users to clean up completed or obsolete tasks effectively.","summary":"Delete a todo task by its ID","parameters":[{"name":"id","description":"Unique identifier of the todo task to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","path":"/todoList/user/todoListTasks/{id}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/todoList/user/todoListTasks","method":"post"},"description":"The todo task must exist before it can be deleted."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users with minimal access to the application, typically can only view public information without modification rights.","kind":"guest"},{"name":"user","description":"Authenticated users who can create, update, complete, and delete their own todo tasks. They have full control over their personal todo data.","kind":"member"},{"name":"admin","description":"Administrators with elevated permissions to manage all users and oversee system-wide settings and operations.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTasks.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTasks.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListGuest.ICreate":{"type":"object","properties":{"nickname":{"type":"string","description":"Guest user's display nickname or pseudonym. Must be unique and is required for registration."}},"required":["nickname"],"description":"Data required to create a new guest user account in the todo_list_guests table.\n\nThis DTO is used for guest registration where only a unique nickname is needed.\n\nThe creation request must include a unique nickname string.\n\nNo password or email is required as guests are unauthenticated users with minimal data.\n\nThe created record will have a generated UUID as id and timestamps handled by the system.\n\nThis type maps directly to the todo_list_guests Prisma model.","x-autobe-prisma-schema":"todo_list_guests"},"ITodoListGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated guest user."},"nickname":{"type":"string","description":"The unique nickname of the authenticated guest user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was last updated."}},"required":["id","nickname","token","created_at","updated_at"],"description":"Authorization response containing guest user information and JWT tokens.\n\nThis response is returned upon successful guest registration or token refresh.\n\nIt includes the guest's unique ID, nickname, and token details.\n\nThis type maps directly to the todo_list_guests Prisma model combined with authentication token data.\n","x-autobe-prisma-schema":"todo_list_guests"},"ITodoListGuest.IRefresh":{"title":"ITodoListGuest.IRefresh","description":"Refresh token request containing the refresh token.\n\nThis object is used to request new authorization tokens by providing a valid refresh token associated with a guest user session. It enables seamless continuation of guest user sessions without requiring re-login.","type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new JWT tokens for continued guest authentication."}},"required":["refresh_token"]},"ITodoListUser.ICreate":{"title":"ITodoListUser.ICreate","description":"User registration data including unique email and plain password to be hashed.\n\nThis DTO is used to create a new user account in the system. It requires a unique email address and a plaintext password, which the backend will hash and store securely. The DTO excludes system managed fields such as ID and timestamps.\n\nClients must provide the email and password in the request body when registering new users.","type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address used for user login and communication. Must be a valid email address."},"password":{"type":"string","description":"Plaintext password provided by the user during registration. Backend system is responsible for hashing and securely storing this value."}},"required":["email","password"]},"ITodoListUser.IAuthorized":{"type":"object","description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as user join, login, or token refresh. It provides the authenticated user info along with the issued authorization tokens.\n\nIncludes the user's unique identifier and the JWT authorization token object that contains access token and refresh token.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"x-autobe-prisma-schema":"todo_list_users"},"ITodoListUser.ILogin":{"type":"object","description":"User login request schema for authentication.\n\nThis schema requires email and plain text password for verifying credentials against stored password hashes.\n\nClients must provide a valid email and password to authenticate existing users and obtain authorization tokens.","properties":{"email":{"type":"string","description":"User's unique email address used for login.","format":"email"},"password":{"type":"string","description":"User's plain text password used for authentication."}},"required":["email","password"],"x-autobe-prisma-schema":"todo_list_users"},"ITodoListUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string provided when initial tokens are issued."}},"required":["refresh_token"],"description":"Request body for refreshing JWT tokens for a todo_list_users member user session.\n\nThis schema contains the refresh token string required to obtain new access and refresh tokens without re-authenticating the user.\n\nThe refresh_token property is mandatory as part of token lifecycle management."},"ITodoListAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address for administrator account registration.\n\nThe email must be a valid email format and unique across all admin accounts.\n\nThis is the primary identifier for administrator login and communication."},"password_hash":{"type":"string","description":"Password hash used for secure authentication of the administrator.\n\nThis must be a hashed string rather than plain text.\n\nClients are expected to provide a hashed password adhering to system security policies.\n\nDirect plaintext password submission is handled by separate endpoints or hashing before transmission."}},"required":["email","password_hash"],"description":"Request body schema for creating a new administrator account in the todo_list_admins table.\n\nThis object includes unique email and secure password hash fields.\n\nAll properties are required to register a new administrator.\n\nThe schema closely follows the Prisma model schema for todo_list_admins.\n\nSensitive fields such as raw passwords are not accepted here for security reasons."},"ITodoListAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"email":{"type":"string","description":"Unique email address of the administrator for login and communication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if the administrator account is active."}},"required":["id","token","email","created_at","updated_at"],"description":"Authorization response containing JWT token and administrator account details.\n\nThis schema corresponds to the administrator model in the Prisma schema (todo_list_admins).\n\nSensitive password hashes are omitted in responses for security reasons.\n\nThe deleted_at field indicates soft deletion status, where null means the account is active.","x-autobe-prisma-schema":"todo_list_admins"},"ITodoListAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the administrator used for login."},"password":{"type":"string","description":"Plain text password for login authentication."},"remember_me":{"type":"boolean","description":"Optional flag indicating if the session should be persistent beyond default expiration."},"captcha_token":{"type":"string","description":"Optional token from CAPTCHA verification to enhance security."},"two_factor_code":{"type":"string","description":"Optional two-factor authentication code if enabled."},"device_info":{"type":"object","description":"Optional information about the device used to facilitate login for security auditing and anomaly detection.","properties":{"device_id":{"type":"string","description":"Unique identifier for the device used during login."},"device_name":{"type":"string","description":"Human-readable name for the device."},"device_os":{"type":"string","description":"Operating system of the device."},"ip_address":{"type":"string","format":"ipv4","description":"IPv4 address of the client device logging in."}},"required":["device_id"]}},"required":["email","password"],"description":"Login credentials for administrator authentication.\n\nThis schema includes mandatory email and password fields required to initiate login.\n\nOptional fields are provided for enhanced security and session management.\n\nThe password must be in plain text and will be validated against the stored password hash in the database.\n\nDevice info is used for advanced login context and is optional.\n\nThis schema corresponds to login operation for the todo_list_admins table in Prisma schema.","x-autobe-prisma-schema":"todo_list_admins"},"ITodoListAdmin.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token string used to obtain new JWT tokens for administrator authentication."}},"required":["refreshToken"],"description":"Request payload to refresh authentication tokens for administrators. Contains the refresh token string to be validated and exchanged for new access and refresh tokens."},"ITodoListTasks.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number to retrieve; defaults to 1 when unspecified."},{"type":"null"}],"description":"Page number to retrieve; defaults to 1 when unspecified."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Number of records per page; default is 100."},{"type":"null"}],"description":"Number of records per page; default is 100."},"search":{"oneOf":[{"type":"string","description":"Optional text search query to filter tasks by description content."},{"type":"null"}],"description":"Optional text search query to filter tasks by description content."},"isCompleted":{"oneOf":[{"type":"boolean","description":"Filter tasks by completion status: 'true' for completed, 'false' for pending tasks."},{"type":"null"}],"description":"Filter tasks by completion status: 'true' for completed, 'false' for pending tasks."},"orderBy":{"oneOf":[{"type":"string","description":"Field name to order results by; allowed values could be 'created_at', 'updated_at', 'description'."},{"type":"null"}],"description":"Field name to order results by; allowed values could be 'created_at', 'updated_at', 'description'."},"orderDirection":{"oneOf":[{"const":"asc","description":"Order direction for sorting results; 'asc' for ascending, 'desc' for descending, default is ascending."},{"const":"desc","description":"Order direction for sorting results; 'asc' for ascending, 'desc' for descending, default is ascending."},{"type":"null"}],"description":"Order direction for sorting results; 'asc' for ascending, 'desc' for descending, default is ascending."}},"required":[],"description":"Request parameters for filtering, searching, sorting, and paginating TodoList tasks belonging to the authenticated user."},"ITodoListTasks":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the todo task in UUID format.\n\nThis field serves as the immutable primary key for the todo_list_tasks table."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Belonged user's todo_list_users.id.\n\nForeign key associating the task with the user who owns it.\n\nRepresents the owner of the task in the todo_list_users table."},"description":{"type":"string","description":"Task description text, must be non-empty and trimmed.\n\nDescribes the content of the task the user needs to accomplish.\n\nThis field must contain meaningful, non-empty string data representing the task details."},"is_completed":{"type":"boolean","description":"Indicates whether the task is completed (true) or pending (false).\n\nTracks the completion status to differentiate between tasks that are done and those still pending."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the task was created.\n\nRepresents the creation time in ISO 8601 date-time format with timezone.\n\nAutomatically set by the system when the task is inserted."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the task was last updated.\n\nRecords the most recent modification time of the task in ISO 8601 date-time format.\n\nAutomatically updated by the system upon task changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null if not deleted.\n\nIndicates when the task was soft deleted, or null if the task is active.\n\nUsed for logical deletion handling without removing the record permanently from the database."}},"required":["id","todo_list_user_id","description","is_completed","created_at","updated_at"],"description":"Represents individual todo tasks created and managed by authenticated users.\n\nEach task is linked to a user by foreign key todo_list_user_id.\n\nTasks have a description text, a boolean completion status, and temporal fields for created, updated, and optional deleted (soft delete).\n\nThe model supports a primary stance for independent user task management requiring CRUD operations.\n\nThis schema directly corresponds to the Prisma model todo_list_tasks."},"ITodoListTask.ICreate":{"type":"object","properties":{"description":{"type":"string","description":"Task description text, must be non-empty and trimmed.\n\nDescribes the content of the task the user needs to accomplish.\n\nThis field must contain meaningful, non-empty string data representing the task details."}},"required":["description"],"description":"Create DTO for todo_list_tasks.\n\nAllows creation of new todo tasks with a required description.\n\nFields like id, todo_list_user_id, is_completed, and timestamps are managed by the system and are excluded here.\n\nThis DTO is used as a request body for creating tasks.\n\nThis schema directly corresponds to the Prisma model todo_list_tasks."},"ITodoListTask":{"type":"object","x-autobe-prisma-schema":"todo_list_tasks","description":"Represents an individual todo task created and managed by an authenticated user.\n\nThis entity corresponds to the `todo_list_tasks` table in the database. It contains the unique identifier (`id`), the foreign key linking to the owner user (`todo_list_user_id`), a non-empty task description (`description`), a boolean flag indicating completion status (`is_completed`), and timestamps for creation, last update, and optional soft deletion.\n\nThe `id` property is a UUID uniquely identifying each task. The `todo_list_user_id` associates the task with its owning user account. The `description` must be a non-empty string trimmed of unnecessary whitespace. The `is_completed` boolean indicates whether the task is completed (`true`) or pending (`false`).\n\nTimestamps `created_at` and `updated_at` provide audit tracking for task lifecycle events, while `deleted_at` supports soft delete functionality, indicating if and when the task was deleted.\n\nAll timestamps use the standard UTC date-time format with timezone awareness.\n\nSecurity considerations ensure tasks are only accessible and manipulable by their owners.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo task."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Foreign key referencing the owning user's unique identifier."},"description":{"type":"string","description":"Non-empty, trimmed text description of the todo task."},"is_completed":{"type":"boolean","description":"Indicates whether the todo task is marked as completed (`true`) or pending (`false`)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of task creation in ISO 8601 format with timezone."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last task update in ISO 8601 format with timezone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the task was soft deleted. Null if not deleted."}},"required":["id","todo_list_user_id","description","is_completed","created_at","updated_at"]},"ITodoListTask.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_list_tasks","description":"Request body schema for updating an existing todo task.\n\nThis schema corresponds to partial updates to the `todo_list_tasks` entity and is used in operations where users can modify task properties.\n\nFields are optional to allow partial updates. Ownership fields (`todo_list_user_id`) and immutable fields like `id` and timestamps are not included for updates.\n\nThe `description`, if provided, must be a non-empty string. The `is_completed` status can be toggled between `true` or `false`.\n\nSecurity enforces that only the owning user can make updates and that system-managed fields remain unchanged.\n\nNo audit timestamps or deletion flags are modifiable through this schema.","properties":{"description":{"type":"string","description":"Updated non-empty, trimmed text description of the todo task."},"is_completed":{"type":"boolean","description":"Updated completion status of the todo task, `true` for completed, `false` for pending."}},"required":[]},"ITodoListTasks.ISummary":{"type":"object","description":"Summary view of TodoList tasks for list display purposes.\n\nThis schema represents a lightweight version of the todo_list_tasks entity, optimized for efficient rendering in task lists. It includes essential fields such as task ID, description, and completion status to succinctly convey task information.\n\nThe summarized structure omits timestamps and soft delete markers for brevity and focuses on the primary data points needed during search and listing.\n\nThis schema corresponds directly to the todo_list_tasks table in the Prisma schema.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo_list task. This corresponds to the 'id' primary key field in the todo_list_tasks Prisma table."},"description":{"type":"string","description":"Task description text. Must be a non-empty string, trimmed according to business validation rules."},"is_completed":{"type":"boolean","description":"Task completion status indicating whether the task is finished (true) or pending (false)."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Foreign key linking this task to its owner user in the todo_list_users table."}},"required":["id","description","is_completed","todo_list_user_id"],"x-autobe-prisma-schema":"todo_list_tasks"}}}}