import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Customer user accounts representing buyers on the shopping mall platform.
 * Stores authentication credentials including unique email and securely hashed
 * password. Includes optional contact information and account status
 * management. Timestamps aid in auditing and state tracking. Soft deletion
 * supported via deleted_at timestamp.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCustomer = {
  /** Customer's unique identifier, generated by the system as a UUID */
  id: string & tags.Format<"uuid">;

  /**
   * Customer's unique email address used for login and notifications. Must be
   * valid and unique in the system.
   */
  email: string;

  /**
   * Hashed password used for secure authentication. Stored securely and never
   * exposed in responses.
   */
  password_hash: string;

  /**
   * Optional nickname or display name of the customer for UI display and
   * personalization.
   */
  nickname?: string | null | undefined;

  /**
   * Customer's contact phone number in E.164 format, optional and used for
   * notifications and verification.
   */
  phone_number?: string | null | undefined;

  /**
   * Status of the customer account, e.g., 'active', 'inactive', or
   * 'suspended'. Denotes account's operational state.
   */
  status: string;

  /**
   * Timestamp marking when the customer account was created in ISO 8601
   * format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp marking the last update time of the customer account in ISO
   * 8601 format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp indicating when the customer account was deleted,
   * if applicable. Null if active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCustomer {
  /**
   * Request body for customer registration containing the email and plaintext
   * password.
   */
  export type IJoin = {
    /** Customer's unique email address used for login and notifications. */
    email: string & tags.Format<"email">;

    /**
     * Customer's password in plain text. The backend will handle hashing
     * securely.
     */
    password: string;
  };

  /**
   * Authorization response containing JWT token and customer user
   * information.
   *
   * This response is returned after a successful authentication operation
   * such as login or token refresh.
   *
   * It includes essential user properties to identify the authenticated
   * customer while omitting sensitive data like password hashes.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated customer user */
    id: string & tags.Format<"uuid">;

    /** Registered email address of the authenticated customer */
    email: string & tags.Format<"email">;

    /**
     * Hashed password used for secure authentication. Stored securely and
     * never exposed in responses.
     */
    password_hash: string;

    /** Optional nickname or display name of the customer */
    nickname?: string | null | undefined;

    /** Optional contact phone number in E.164 format */
    phone_number?: string | null | undefined;

    /**
     * Status of the customer's account, such as 'active', 'inactive', or
     * 'suspended'
     */
    status: string;

    /** Timestamp when the customer account was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the customer account was last updated */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp of soft deletion, if applicable */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /** Type name discriminator for the authorized customer object */
    __typename?: string | undefined;
  };

  /**
   * Login request payload containing the customer's email and password.
   *
   * This is a standard authentication request that the customer submits to
   * initiate a login operation.
   *
   * The password is sent in plain text and will be securely hashed by the
   * backend during verification.
   *
   * This payload excludes any sensitive data and is designed for secure
   * transmission over encrypted connections.
   */
  export type ILogin = {
    /** Customer's email address used for login */
    email: string & tags.Format<"email">;

    /** Customer's plain-text password for authentication */
    password: string & tags.Format<"password">;

    /** Type name discriminator for the login request object */
    __typename: string;
  };

  /**
   * Request schema for refreshing an authenticated ShoppingMall customer's
   * JWT tokens using a valid refresh token. This object contains the
   * refreshToken property required for renewal of authentication tokens to
   * maintain a secure, continuous session.
   *
   * @title ShoppingMallCustomer.IRefresh
   */
  export type IRefresh = {
    /**
     * Refresh token used to obtain new JWT access tokens. Must be securely
     * stored and transmitted in authorization requests.
     */
    refreshToken: string;
  };

  /**
   * Query parameters to filter and paginate through customers, supporting
   * search on nicknames and filtering by status. Used in admin views for
   * customer management.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Search keyword for filtering customer entries. */
    search?: string | null | undefined;

    /** Account status filter (e.g., active, inactive). */
    status?: string | null | undefined;

    /** Nickname filter; supports partial matching. */
    nickname?: string | null | undefined;
  };

  /**
   * Request body structure for creating a new customer account in the
   * shopping mall platform. Includes email and password hash for
   * authentication setup. Optional fields allow specifying nickname and phone
   * number. The status field denotes the initial state of the account, e.g.,
   * 'active'.
   */
  export type ICreate = {
    /**
     * Email address of the customer to be registered. Must be unique and
     * well-formed.
     */
    email: string;

    /**
     * Hashed password string to securely store user credentials. Password
     * hashing is handled in the backend.
     */
    password_hash: string;

    /** Optional display name or nickname of the customer. */
    nickname?: string | null | undefined;

    /**
     * Optional mobile phone number in E.164 format for customer
     * notifications.
     */
    phone_number?: string | null | undefined;

    /** Initial status of the customer account upon creation, e.g., 'active'. */
    status: string;
  };

  /**
   * DTO for updating shopping mall customer account information.
   *
   * Includes modifiable contact/status fields.
   *
   * All nullable fields accept explicit null values.
   */
  export type IUpdate = {
    /**
     * Customer's optional nickname or display name to personalize
     * interactions. Nullable.
     */
    nickname?: string | null | undefined;

    /**
     * Customer's phone number in E.164 format for contact and
     * notifications. Nullable.
     */
    phone_number?: string | null | undefined;

    /**
     * Current status of the customer account, controlling access and
     * usability. Expected values include 'active', 'inactive', or
     * 'suspended'. Required field to indicate account state.
     */
    status: string;
  };

  /**
   * Summary view of a customer account including essential identification and
   * status information.
   *
   * Sensitive fields like 'password_hash' are excluded to protect security
   * and privacy.
   *
   * Mapped to the shopping_mall_customers table in the Prisma schema.
   */
  export type ISummary = {
    /** Primary Key. Unique identifier for the customer. */
    id: string & tags.Format<"uuid">;

    /** Customer's unique email address used for login and notifications. */
    email: string;

    /**
     * Nickname or display name of the customer. This is an optional
     * property and may be null.
     */
    nickname?: string | null | undefined;

    /**
     * Status of the customer account, e.g., 'active', 'inactive', or
     * 'suspended'.
     */
    status: string;

    /** Timestamp when the customer was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the customer record was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };
}
