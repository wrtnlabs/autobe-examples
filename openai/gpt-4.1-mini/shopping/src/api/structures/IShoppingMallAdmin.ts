import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator account entity representing system administrators managing the
 * platform
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAdmin = {
  /** Unique identifier of the administrator */
  id: string & tags.Format<"uuid">;

  /** Administrator's email address used for login and notifications */
  email: string & tags.Format<"email">;

  /**
   * Hashed password string used for authentication. This field must be
   * securely stored and not exposed.
   */
  password_hash: string;

  /** Full legal name of the administrator */
  full_name?: string | null | undefined;

  /** Contact phone number in E.164 format */
  phone_number?: string | null | undefined;

  /**
   * Current administrative account status such as 'active', 'suspended', or
   * 'disabled'.
   */
  status: "active" | "suspended" | "disabled";

  /** Timestamp when the admin account was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the admin account was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp marking soft deletion of the admin account or null if active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Count of reports generated by this admin */
  shopping_mall_report_count?: (number & tags.Type<"int32">) | null | undefined;
};
export namespace IShoppingMallAdmin {
  /** Data required to create a new administrator account */
  export type ICreate = {
    /** Unique email address for the administrator account */
    email: string & tags.Format<"email">;

    /** Hashed password string for authentication */
    password_hash: string;

    /** Full legal name of the administrator */
    full_name?: string | null | undefined;

    /** Administrator contact phone number */
    phone_number?: string | null | undefined;

    /** Account status */
    status: "active" | "suspended" | "disabled";
  };

  /**
   * Authorization response containing JWT token for an authenticated
   * administrator
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated admin user */
    id: string & tags.Format<"uuid">;

    /** Administrator's email address used for login and notifications */
    email: string & tags.Format<"email">;

    /**
     * Hashed password string used for authentication. This field must be
     * securely stored and not exposed.
     */
    password_hash: string;

    /** Full legal name of the administrator */
    full_name?: string | null | undefined;

    /** Contact phone number in E.164 format */
    phone_number?: string | null | undefined;

    /**
     * Current administrative account status such as 'active', 'suspended',
     * or 'disabled'.
     */
    status: "active" | "suspended" | "disabled";

    /** Timestamp when the admin account was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the admin account was last updated */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp marking soft deletion of the admin account or null if
     * active
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Count of reports generated by this admin */
    shopping_mall_report_count?:
      | (number & tags.Type<"int32">)
      | null
      | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Administrator login request payload containing credentials */
  export type ILogin = {
    /** Email address for administrator login */
    email: string;

    /** Password in plain text for authentication */
    password: string;

    /** Type discriminator for administrator login */
    type: "admin";

    /** Flag to indicate if login session should be persistent */
    remember_me?: boolean | null | undefined;
  };

  /**
   * Payload used for refreshing the admin JWT access token and renewing
   * session. Contains refresh token, new access token, token type, expiry,
   * and scope details.
   */
  export type IRefresh = {
    /** Refresh token string to be exchanged for new access token */
    refresh_token: string;

    /** Access token string, JWT formatted */
    token: string;

    /** Type of token issued, typically Bearer */
    token_type: "Bearer";

    /** Lifetime in seconds of the access token */
    expires_in: number & tags.Type<"int32">;

    /** Scopes assigned to the token, space-separated */
    scope: string;
  };

  /**
   * Request parameters for searching and retrieving a paginated list of admin
   * users with filtering and sorting control
   */
  export type IRequest = {
    /** Page number for pagination, must be a positive integer */
    page: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Maximum number of records per page, must be a positive integer */
    limit: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Search term to filter admin users by email or full name */
    search?: string | undefined;

    /** Filter admin users by status, e.g., 'active', 'inactive', 'suspended' */
    status?: string | undefined;

    /** Field to sort admin users by */
    orderBy?: string | undefined;

    /** Sort direction: 'asc' or 'desc' */
    orderDirection?: "asc" | "desc" | undefined;
  };

  /**
   * Update an existing administrator account's information by specifying the
   * admin's unique ID. This operation modifies the admin's full name, phone
   * number, status, and password hash, allowing administrators to manage
   * their own profile or other admin accounts with sufficient permissions.
   *
   * Security considerations mandate authenticated admin role access only.
   * Email addresses are immutable through this endpoint to maintain identity
   * integrity. The status field indicates account activity state, which
   * affects login permissions.
   *
   * This API interacts directly with the shopping_mall_admins Prisma table,
   * respecting all relational and soft deletion logic. Updates to the
   * password hash must follow security protocols outside this API scope.
   *
   * Typical usage scenarios include admin profile updates and account status
   * changes. Validation errors will be returned if provided input values are
   * invalid or violate unique constraints.
   *
   * No request body changes other than defined fields are permitted. Error
   * handling includes proper HTTP status codes and messages for unauthorized
   * access or resource not found.
   */
  export type IUpdate = {
    /**
     * The administrator's unique email address for login and critical
     * notifications.
     */
    email: string & tags.Format<"email">;

    /** Hashed password for secure admin authentication. */
    password_hash: string;

    /** Full legal name of the administrator. */
    full_name?: string | null | undefined;

    /** Contact phone number of the admin in E.164 format. */
    phone_number?: string | null | undefined;

    /**
     * Administrative account status, indicating if active, suspended, or
     * disabled.
     */
    status: string;
  };

  /**
   * Summary view of an administrator account including identifiers and
   * status.
   *
   * Excludes sensitive authentication information for security purposes.
   *
   * Corresponds to the shopping_mall_admins table in the Prisma schema.
   */
  export type ISummary = {
    /** Primary Key. Unique identifier for the administrator account. */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator's unique email address for login and critical
     * notifications.
     */
    email: string;

    /**
     * Full legal name of the administrator. This property is optional and
     * may be null.
     */
    full_name?: string | null | undefined;

    /**
     * Administrative account status, indicating if active, suspended, or
     * disabled.
     */
    status: string;

    /** Timestamp when the admin account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the admin record was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };
}
