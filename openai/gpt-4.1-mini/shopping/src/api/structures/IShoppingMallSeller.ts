import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Seller accounts that manage product listings, SKUs, inventory, and orders for
 * their products. Sellers require authentication with email and password hash.
 * This table stores identity and authentication information for sellers as
 * primary actors distinct from customers.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSeller = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Seller's unique email address for login and notifications. */
  email: string & tags.Format<"email">;

  /** Hashed password for secure seller authentication. */
  password_hash: string;

  /** Legal or brand name of the seller company. */
  company_name?: string | null | undefined;

  /** Main contact person name for the seller. */
  contact_name?: string | null | undefined;

  /** Contact phone number of the seller in E.164 format. */
  phone_number?: string | null | undefined;

  /** Current status of the seller account such as 'active' or 'suspended'. */
  status: string;

  /** Timestamp when the seller account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the seller record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp marking soft deletion of the seller account. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSeller {
  /**
   * Creation request schema for a new shopping mall seller entity. This
   * includes critical identity and authentication fields such as unique
   * email, password hash, optional company and contact information, and a
   * status enumeration flag enforcing valid account states at creation. The
   * schema matches the shopping_mall_sellers table constraints and business
   * rules for secure seller account creation.
   *
   * @title ShoppingMallSeller.ICreate
   */
  export type ICreate = {
    /**
     * Unique email address for the seller used for login, notifications,
     * and communication. This must be a valid email address conforming to
     * standard formats. Used as a unique business identifier for seller
     * accounts.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for the seller account. The hash is stored securely
     * to enable secure authentication of the seller's identity within the
     * shopping mall platform. Password hashing and salting must comply with
     * platform security policies.
     */
    password_hash: string;

    /**
     * Seller's legal or brand company name. This field is optional but
     * useful for identifying the selling entity within the marketplace. Max
     * length should be reasonable to accommodate typical business names.
     */
    company_name?: string | null | undefined;

    /**
     * Primary contact person name for the seller company or entity. This is
     * optional and provides a means of personal contact or communication.
     */
    contact_name?: string | null | undefined;

    /**
     * Contact phone number for the seller in E.164 format, allowing
     * international calls. This optional field supports seller
     * communications and notifications.
     */
    phone_number?: string | null | undefined;

    /**
     * Current status of the seller account indicating active, suspended, or
     * other lifecycle states. This field supports platform user management
     * and administrative control. It must be set upon creation and conform
     * to platform-defined status values. Example values: 'active',
     * 'suspended'.
     */
    status: "active" | "suspended";
  };

  /**
   * Authorization response containing token information for authenticated
   * sellers.
   *
   * This response includes core seller identity fields such as id and email,
   * as well as operational status.
   *
   * Sensitive fields such as password hashes are excluded from this response.
   *
   * The token and refresh_token properties represent JWT tokens issued to the
   * seller upon successful authentication.
   */
  export type IAuthorized = {
    /** Unique identifier of the seller. */
    id: string & tags.Format<"uuid">;

    /** Unique seller email address used for login and notifications. */
    email: string & tags.Format<"email">;

    /** Hashed password for secure seller authentication. */
    password_hash: string;

    /** Legal or brand name of the seller company, optionally provided. */
    company_name?: string | null | undefined;

    /** Main contact person's name for the seller, optionally provided. */
    contact_name?: string | null | undefined;

    /**
     * Contact phone number of the seller in E.164 format, optionally
     * provided.
     */
    phone_number?: string | null | undefined;

    /** Current status of the seller account such as 'active' or 'suspended'. */
    status: string;

    /** Timestamp when the seller account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the seller record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp marking soft deletion of the seller account. Null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Refresh token for renewing access tokens, may be null if not
     * applicable.
     */
    refresh_token?: string | null | undefined;
  };

  /**
   * Login request payload for sellers, including email and password.
   *
   * It optionally supports captcha and two-factor authentication fields to
   * enhance security.
   *
   * The rememberMe field allows for extended session duration if true.
   *
   * Metadata can capture additional client information for logging or
   * detection.
   */
  export type ILogin = {
    /** Seller email address used for login. */
    email: string & tags.Format<"email">;

    /** Plain text password for authentication. */
    password: string;

    /**
     * Optional captcha challenge response to prevent automated login
     * attempts.
     */
    captchaChallenge?: string | null | undefined;

    /** Optional captcha verification response code. */
    captchaResponse?: string | null | undefined;

    /** If true, keep the user logged in for an extended period. */
    rememberMe?: boolean | undefined;

    /** Optional metadata including device and location information. */
    metadata?: {} | undefined;

    /** Optional 2FA code for multi-factor authentication. */
    twoFactorCode?: string | null | undefined;
  };

  /**
   * Request body schema for refreshing JWT tokens for an authenticated seller
   * user.
   *
   * This schema accepts a single required property `refreshToken`, which
   * should be the valid refresh token received during a prior authorization.
   * Using this token, the API issues new JWT tokens without requiring the
   * user's credentials again.
   *
   * Security Note: Refresh tokens must be kept confidential and are used only
   * to extend session lifetime securely.
   *
   * This schema corresponds to the expected request payload on the
   * `/auth/seller/refresh` POST endpoint.
   */
  export type IRefresh = {
    /**
     * Refresh token received during previous authorization. Used to obtain
     * new access and refresh tokens for prolonged session continuity.
     */
    refreshToken: string;
  };

  /**
   * Request DTO for searching shopping mall sellers.
   *
   * Supports flexible filtering by partial matches and includes pagination
   * and sorting parameters.
   *
   * All fields are optional and nullable to allow free-form queries.
   *
   * Fields respect schema definitions and include explicit null support where
   * applicable.
   *
   * Intended for use by administrative or management interfaces.
   */
  export type IRequest = {
    /**
     * Seller email address for login and notifications. Supports partial
     * match filtering; optional and nullable.
     */
    email?: string | null | undefined;

    /**
     * Seller company or brand name. Supports partial matching; optional and
     * nullable.
     */
    company_name?: string | null | undefined;

    /**
     * Main contact person's name for the seller. Optional and nullable,
     * supports partial matching.
     */
    contact_name?: string | null | undefined;

    /** Seller contact phone number in E.164 format. Optional and nullable. */
    phone_number?: string | null | undefined;

    /**
     * Seller account status such as 'active' or 'suspended'. Optional and
     * nullable.
     */
    status?: string | null | undefined;

    /**
     * Flag indicating whether the seller's email is verified. Optional and
     * nullable.
     */
    email_verified?: boolean | null | undefined;

    /**
     * Page number for pagination, defaults to 1 if unspecified. Optional
     * and nullable.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Number of records per page, max 100, defaults to 20. Optional and
     * nullable.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Field name to sort results by. Optional and nullable. */
    order_by?: string | null | undefined;

    /** Sort direction: 'asc' or 'desc'. Optional and nullable. */
    order_direction?: string | null | undefined;
  };

  /**
   * Update fields for seller account. Email is immutable and should not be
   * changed via this update endpoint. All fields are optional for partial
   * update.
   */
  export type IUpdate = {
    /**
     * Seller's unique email address used for login. Immutable after
     * creation, should not be updated through this endpoint.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /** Hashed password for secure seller authentication. */
    password_hash?: string | undefined;

    /** Legal or brand name of the seller company. */
    company_name?: string | null | undefined;

    /** Main contact person name for the seller. */
    contact_name?: string | null | undefined;

    /** Contact phone number of the seller in E.164 format. */
    phone_number?: string | null | undefined;

    /** Current status of the seller account such as 'active' or 'suspended'. */
    status?: string | undefined;
  };
}
