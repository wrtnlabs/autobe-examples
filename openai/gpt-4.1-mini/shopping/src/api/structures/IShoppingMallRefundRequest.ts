import { tags } from "typia";

/**
 * This entity represents a customer's refund request for a specific order in
 * the shopping mall platform. It captures details such as reason, amount, and
 * request status, along with timestamps reflecting creation and processing. The
 * refund request is linked to both the customer and the associated order,
 * ensuring traceability and processing integrity.
 *
 * Refund requests are critical for managing order lifecycle exceptions and
 * customer service activities.
 *
 * This schema enforces mandatory fields and valid status values corresponding
 * to the processing stages of refund requests.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallRefundRequest = {
  /** Primary key identifying the refund request uniquely within the database. */
  id: string & tags.Format<"uuid">;

  /** Foreign key referencing the order associated with this refund request. */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /** Foreign key referencing the customer who made this refund request. */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Detailed reason provided by the customer explaining the cause or
   * justification for their refund request.
   */
  reason: string;

  /**
   * Monetary amount requested to be refunded to the customer. This value
   * corresponds to currency units used by the platform, typically USD.
   */
  refund_amount: number;

  /**
   * Current processing state of the refund request (e.g., 'Pending',
   * 'Approved', 'Rejected').
   */
  status: "Pending" | "Approved" | "Rejected";

  /**
   * Timestamp capturing when the refund request was initially submitted in
   * ISO 8601 format.
   */
  requested_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the refund request was processed; null if still pending
   * processing.
   */
  processed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Record creation timestamp in ISO 8601 format, indicating when this refund
   * request was first recorded.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record update timestamp in ISO 8601 format, indicating last time the
   * refund request was modified.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallRefundRequest {
  /**
   * Update an existing refund request associated with a given order. This
   * operation allows authorized users, such as the refund request owner or an
   * admin, to modify refund details like status and processing timestamps.
   * Validation includes verifying permission to update the refund request and
   * ensuring data integrity.
   *
   * This operation enables refund request management as part of the order
   * lifecycle, supporting workflows like approval, rejection, or processing
   * progress updates.
   *
   * Proper error handling is expected when invalid updates or unauthorized
   * attempts are made.
   *
   * It complements refund request retrieval to ensure full management of
   * refund records associated with orders.
   */
  export type IUpdate = {
    /** Belonged order's {@link shopping_mall_orders.id}. */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /** Belonged customer's {@link shopping_mall_customers.id}. */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /** Reason for the refund request. */
    reason: string;

    /** Amount requested to be refunded. */
    refund_amount: number;

    /** Status of the refund request (Pending, Approved, Rejected). */
    status: string;

    /** Timestamp when refund was requested. */
    requested_at: (string & tags.Format<"date-time">) | null;

    /** Timestamp when refund request was processed. */
    processed_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request body for creating a new refund request in the shopping mall
   * platform. This includes essential properties capturing the reference to
   * the associated order and customer, refund reason, amount, request status,
   * and submission timestamp.
   *
   * The properties enforce strict validation including UUID format for
   * foreign keys and valid status enumeration values.
   *
   * This DTO is critical for submitting refund requests into the system for
   * processing and resolution.
   */
  export type ICreate = {
    /** Unique identifier of the order for which the refund is requested. */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /** Unique identifier of the customer making the refund request. */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * The customer's reason for requesting a refund. This should be
     * detailed to inform review.
     */
    reason: string;

    /** Requested refund amount in the platform's currency units. */
    refund_amount: number;

    /**
     * Status of the refund request upon creation. Typically initialized as
     * 'Pending'.
     */
    status: "Pending" | "Approved" | "Rejected";

    /** ISO 8601 timestamp marking when the refund request was submitted. */
    requested_at: string & tags.Format<"date-time">;
  };
}
