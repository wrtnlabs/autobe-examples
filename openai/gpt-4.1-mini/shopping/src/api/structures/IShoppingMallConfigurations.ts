import { tags } from "typia";

/**
 * Represents a system-wide configuration parameter in the shopping mall
 * platform database.
 *
 * Configurations control operational parameters and feature toggles used by the
 * platform.
 *
 * Each configuration has a unique key, associated value, and optional metadata
 * for categorization and description.
 *
 * Flags indicate if the configuration is enabled and track creation, update,
 * and optional soft deletion timestamps.
 *
 * System administrators manage configurations to alter platform behavior
 * without code changes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallConfigurations = {
  /**
   * Primary Key.
   *
   * Unique identifier of the configuration record.
   *
   * Used internally to track configuration entries and facilitate updates or
   * deletions.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique configuration key.
   *
   * The unique key identifies this system configuration parameter.
   *
   * Used as a primary business identifier for system settings.
   */
  key: string;

  /**
   * Configuration value as a string.
   *
   * This string holds the actual setting or parameter value to apply in the
   * system.
   */
  value: string;

  /**
   * Optional category grouping for configurations.
   *
   * Categorizes configuration keys for logical organization and filtering.
   */
  category?: string | null | undefined;

  /**
   * Description of the configuration parameter.
   *
   * Provides human-readable explanation aiding platform administrators.
   */
  description?: string | null | undefined;

  /**
   * Flag indicating if the configuration is logically enabled.
   *
   * Only enabled configurations influence platform behaviors.
   */
  enabled: boolean;

  /**
   * Timestamp when the configuration record was created.
   *
   * Used for auditing and historical tracking.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the configuration record was last updated.
   *
   * Used for auditing and synchronization purposes.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating soft deletion of the configuration.
   *
   * When null, indicates the record is not deleted. When non-null, indicates
   * soft deletion status.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallConfigurations {
  /**
   * Update information for a shopping mall system configuration.
   *
   * Fields that can be changed include value, category, description, and
   * enabled status.
   *
   * The key field is not mutable and should not be included in updates.
   *
   * Use this type to update existing configurations with new values or
   * metadata.
   */
  export type IUpdate = {
    /**
     * Unique configuration key.
     *
     * The unique key identifies the system configuration parameter.
     *
     * This key is immutable after creation and serves as the primary
     * identifier.
     *
     * When updating, the key should not be included as it is not mutable.
     */
    key?: string | undefined;

    /**
     * Configuration value as a string.
     *
     * The value holds the active setting or parameter used by the
     * application.
     *
     * Must be valid according to the intended configuration key semantics.
     */
    value: string;

    /**
     * Optional category grouping for configurations.
     *
     * Used to organize configuration keys into logical categories for
     * easier management.
     */
    category?: string | null | undefined;

    /**
     * Description of the configuration parameter.
     *
     * Provides human-readable explanation of the key's purpose and usage.
     */
    description?: string | null | undefined;

    /**
     * Flag indicating if the configuration is active.
     *
     * When true, the system applies this configuration; When false, the
     * configuration is ignored or considered inactive.
     */
    enabled: boolean;
  };
}
