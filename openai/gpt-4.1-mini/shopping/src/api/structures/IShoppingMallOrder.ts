import { tags } from "typia";

/**
 * Detailed shopping mall order entity reflecting all properties from the
 * database including identifiers, foreign keys, order financials, status,
 * shipment details, and audit timestamps.
 *
 * Note:
 *
 * - `tracking_number` is nullable for orders not yet shipped.
 * - `deleted_at` is nullable for soft deletes representing logically removed
 *   records.
 * - Timestamps use ISO 8601 'date-time' format.
 *
 * This entity is used for GET operations retrieving order full details.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrder = {
  /** Primary key UUID for the order record, unique across the system. */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged customer's Prisma model User UUID for identification of the
   * customer who placed the order.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Belonged seller's Prisma model Seller UUID for identification of the
   * seller fulfilling the order.
   */
  shopping_mall_seller_id: string & tags.Format<"uuid">;

  /**
   * Unique order number for business identification and tracking. Must be
   * unique across the platform.
   */
  order_number: string;

  /**
   * Total price of the order including taxes and shipping. Stored as a double
   * precision floating-point value.
   */
  total_price: number;

  /**
   * Current status of the order (e.g., Pending Payment, Paid, Processing,
   * Shipped, Delivered, Cancelled). Represents the order lifecycle phase.
   */
  status: string;

  /**
   * Business-specific status for workflow management. Used to track internal
   * business state of the order.
   */
  business_status: string;

  /**
   * Payment method used for the order such as credit card, PayPal, or bank
   * transfer.
   */
  payment_method: string;

  /**
   * Shipping address for the order delivery. Must contain complete delivery
   * location details.
   */
  shipping_address: string;

  /** Carrier tracking number for shipment, nullable if not yet shipped. */
  tracking_number?: string | null | string | null | string | null | undefined;

  /**
   * Record creation timestamp, indicating when the order was created in the
   * system.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record update timestamp, indicating the last modification time of the
   * order record.
   */
  updated_at: string & tags.Format<"date-time">;

  /** Record deletion timestamp for soft delete. Null if the record is active. */
  deleted_at?:
    | (string & tags.Format<"date-time">)
    | null
    | (string & tags.Format<"date-time">)
    | null
    | (string & tags.Format<"date-time">)
    | null
    | undefined;
};
export namespace IShoppingMallOrder {
  /**
   * Search and filter parameters for querying shopping mall orders.
   *
   * Includes pagination, free text search, filtering by statuses,
   * business-specific state, payment methods, and datetime ranges.
   *
   * All parameters are optional to allow flexible query compositions.
   *
   * Matches fields from the shopping_mall_orders table as per Prisma schema.
   */
  export type IRequest = {
    /**
     * Limitation of records per a page.
     *
     * @default 100
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Free text search query for orders to match customer names, order
     * numbers, or shipping addresses.
     */
    search?: string | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Current status of the order (e.g., Pending Payment, Paid, Processing,
     * Shipped, Delivered, Cancelled).
     */
    status?: string | undefined;

    /** Business-specific status for workflow management. */
    business_status?: string | undefined;

    /**
     * Payment method used for the order (e.g., credit card, PayPal, bank
     * transfer).
     */
    payment_method?: string | undefined;

    /** Unique order number for business identification and tracking. */
    order_number?: string | undefined;

    /** Belonged customer's {@link shopping_mall_customers.id}. */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /** Belonged seller's {@link shopping_mall_sellers.id}. */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter orders created after this datetime. */
    from_created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Filter orders created before this datetime. */
    to_created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Filter orders updated after this datetime. */
    from_updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Filter orders updated before this datetime. */
    to_updated_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Create order request data for creating a new shopping mall order.
   *
   * This schema reflects the required fields to create a new order in the
   * shopping_mall_orders table, adhering to the business domain constraints
   * and Prisma database schema.
   *
   * Required fields enforce reference to existing customer and seller IDs for
   * relational integrity, unique order numbers for identification, and
   * financial and logistics details including total price, payment method,
   * and shipping address.
   *
   * Status strings should follow the defined enumeration constrained by
   * business logic.
   *
   * This schema does not include auto-generated fields like IDs or timestamps
   * which are handled by the system upon creation.
   *
   * All fields must be provided for successful order creation.
   */
  export type ICreate = {
    /**
     * Belonged customer's Prisma model User UUID for identification of the
     * customer who placed the order.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Belonged seller's Prisma model Seller UUID for identification of the
     * seller fulfilling the order.
     */
    shopping_mall_seller_id: string & tags.Format<"uuid">;

    /**
     * Unique order number for business identification and tracking. Must be
     * unique across the platform.
     */
    order_number: string;

    /**
     * Total price of the order including taxes and shipping. Must be a
     * positive floating-point value representing the monetary amount.
     */
    total_price: number;

    /**
     * Current status of the order (e.g., Pending Payment, Paid, Processing,
     * Shipped, Delivered, Cancelled). Represents the order lifecycle
     * phase.
     */
    status: string;

    /**
     * Business-specific status for workflow management. Used to track
     * internal business state of the order.
     */
    business_status: string;

    /**
     * Payment method used for the order such as credit card, PayPal, or
     * bank transfer.
     */
    payment_method: string;

    /**
     * Shipping address for the order delivery. Must contain complete
     * delivery location details.
     */
    shipping_address: string;
  };

  /**
   * Update DTO for shopping mall order entity. All fields are optional to
   * allow partial updates.
   *
   * Allows modification of customer and seller references, order numbers,
   * prices, status, and shipping details.
   */
  export type IUpdate = {
    /**
     * Belonged customer's unique identifier. This property is optional in
     * update operations.
     */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Belonged seller's unique identifier. This property is optional in
     * update operations.
     */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Unique order number for business identification and tracking. This
     * property is optional in update operations.
     */
    order_number?: string | undefined;

    /**
     * Total price of the order including taxes and shipping. This property
     * is optional in update operations.
     */
    total_price?: number | undefined;

    /**
     * Current status of the order (e.g., Pending Payment, Paid, Processing,
     * Shipped, Delivered, Cancelled). This property is optional in update
     * operations.
     */
    status?: string | undefined;

    /**
     * Business-specific status for workflow management. This property is
     * optional in update operations.
     */
    business_status?: string | undefined;

    /**
     * Payment method used for the order (e.g., credit card, PayPal, bank
     * transfer). This property is optional in update operations.
     */
    payment_method?: string | undefined;

    /**
     * Shipping address for the order delivery. This property is optional in
     * update operations.
     */
    shipping_address?: string | undefined;

    /**
     * Carrier tracking number for shipment, nullable if not yet shipped.
     * This property is optional in update operations.
     */
    tracking_number?: string | null | undefined;
  };

  /**
   * Summary information of a shopping mall order including essential
   * identifiers, business status, payment details, and timestamps. Designed
   * for efficient display in order overviews or lists.
   *
   * This summary excludes in-depth details like order items and shipment
   * tracking for brevity and performance.
   *
   * Includes status and business status fields to indicate current order
   * phase and workflow state.
   *
   * This type relates to the shopping_mall_orders Prisma table.
   */
  export type ISummary = {
    /** Unique identifier of the order. */
    id: string & tags.Format<"uuid">;

    /** Unique order number for identification and tracking. */
    order_number: string;

    /** Total price of the order including taxes and shipping. */
    total_price: number;

    /**
     * Current status of the order (e.g., Pending Payment, Paid, Processing,
     * Shipped, Delivered, Cancelled).
     */
    status: string;

    /** Business-specific order status for workflow management. */
    business_status: string;

    /**
     * Payment method used for the order (e.g., credit card, PayPal, bank
     * transfer).
     */
    payment_method: string;

    /** Creation timestamp of the order. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp of the order. */
    updated_at: string & tags.Format<"date-time">;
  };
}
