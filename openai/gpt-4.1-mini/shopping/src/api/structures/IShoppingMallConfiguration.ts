import { tags } from "typia";

/**
 * System-wide configuration parameters and settings for the shopping mall
 * platform. Stores key-value pairs defining various operational parameters.
 * Supports categorization, description, and status flags. Enables soft
 * delection and tracks creation and update timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallConfiguration = {
  /**
   * Primary Key.
   *
   * Unique identifier for the configuration record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique configuration key.
   *
   * This serves as the identifier for the configuration setting within the
   * system.
   */
  key: string;

  /**
   * Configuration value as a string.
   *
   * This holds the value assigned to the configuration key.
   */
  value: string;

  /**
   * Optional category grouping for configurations.
   *
   * Used to logically group configurations for management and retrieval.
   */
  category?: string | null | undefined;

  /**
   * Description of the configuration parameter.
   *
   * Provides additional context or information about the configuration
   * setting.
   */
  description?: string | null | undefined;

  /**
   * Flag indicating if the configuration is active.
   *
   * Determines whether this configuration is currently enabled and in effect.
   */
  enabled: boolean;

  /**
   * Creation timestamp.
   *
   * The datetime when this configuration record was created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last updated timestamp.
   *
   * The datetime when this configuration record was last modified.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp; null if active.
   *
   * If set, indicates this configuration has been soft deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallConfiguration {
  /**
   * Request object for searching and paginating shopping mall configuration
   * records.
   */
  export type IRequest = {
    /** Optional key filter for configuration search. */
    key?: string | null | undefined;

    /** Optional category grouping filter. */
    category?: string | null | undefined;

    /** Filter by enabled status. */
    enabled?: boolean | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Create DTO for System-wide configuration.
   *
   * Required fields are key, value, and enabled flag to ensure minimal valid
   * configuration creation.
   *
   * Optional fields include category and description to group and describe
   * the configuration.
   *
   * The system manages timestamps and soft deletion internally during
   * creation.
   */
  export type ICreate = {
    /**
     * Unique configuration key.
     *
     * This serves as the identifier for the configuration setting within
     * the system.
     */
    key: string;

    /**
     * Configuration value as a string.
     *
     * This holds the value assigned to the configuration key.
     */
    value: string;

    /**
     * Optional category grouping for configurations.
     *
     * Used to logically group configurations for management and retrieval.
     */
    category?: string | null | undefined;

    /**
     * Description of the configuration parameter.
     *
     * Provides additional context or information about the configuration
     * setting.
     */
    description?: string | null | undefined;

    /**
     * Flag indicating if the configuration is active.
     *
     * Determines whether this configuration is currently enabled and in
     * effect.
     */
    enabled: boolean;
  };

  /**
   * Summary view of shopping mall configuration record.
   *
   * Includes essential properties representing the configuration's identity,
   * key, value, status, and audit timestamps.
   *
   * This type omits sensitive details not required for list views and
   * supports optional fields as nullable.
   */
  export type ISummary = {
    /** Unique identifier for the configuration record. */
    id: string & tags.Format<"uuid">;

    /** Unique configuration key identifying the parameter. */
    key: string;

    /** Configuration value as a string. */
    value: string;

    /**
     * Optional category grouping for configurations, may be null if not
     * categorized.
     */
    category?: string | null | undefined;

    /**
     * Description of the configuration parameter, providing human-readable
     * information or context.
     */
    description?: string | null | undefined;

    /** Flag indicating if the configuration is active. */
    enabled: boolean;

    /** Timestamp when the configuration record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the configuration record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp; null if the configuration is active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
