import { tags } from "typia";

/**
 * Represents products listed by sellers on the shopping mall platform. Each
 * product belongs to a category and has various SKUs representing different
 * variants. Supports product lifecycle states and soft deletion. Includes
 * timestamps for creation and updates.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Catalog
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProduct = {
  /** Unique identifier for the product. */
  id: string & tags.Format<"uuid">;

  /** Identifier for the category this product belongs to. */
  shopping_mall_category_id: string & tags.Format<"uuid">;

  /** Identifier for the seller of this product. */
  shopping_mall_seller_id: string & tags.Format<"uuid">;

  /** Unique business code identifying the product. */
  code: string;

  /** Display name of the product. */
  name: string;

  /** Optional detailed description of the product. */
  description?: string | null | undefined;

  /** Lifecycle state of the product, e.g., Draft, Active, Inactive. */
  status: string;

  /** Timestamp when the product was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the product was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the product was soft deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallProduct {
  /**
   * Retrieve a paginated and filtered list of shopping mall products.
   *
   * Supports advanced search criteria including category filtering by
   * shopping_mall_category_id, seller filtering by shopping_mall_seller_id,
   * status filtering (e.g., Draft, Active, Inactive), and text search by
   * product name.
   *
   * The operation returns a paginated summary list of products matching the
   * specified search criteria. Results are optimized for client-side
   * consumption with essential properties only.
   *
   * The API is publicly accessible to allow browsing without authentication.
   *
   * This operation relates to detailed product retrieval endpoints that
   * provide full product and SKU details.
   */
  export type IRequest = {
    /**
     * The category to which this product belongs. Nullable to include all
     * categories.
     */
    shopping_mall_category_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** The seller who owns this product. Nullable to include all sellers. */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique business code identifying the product. Allows searching by
     * product code.
     */
    code?: string | null | undefined;

    /** The display name of the product. Allows substring search. */
    name?: string | null | undefined;

    /**
     * The lifecycle state of the product, e.g., Draft, Active, Inactive.
     * Enables filtering by product status.
     */
    status?: string | null | undefined;

    /** Limit number of records returned in the page. */
    limit: number & tags.Type<"int32">;

    /** Page number for data pagination. */
    page: number & tags.Type<"int32">;
  };

  /**
   * Create a new product record with required data elements including
   * category association, seller ownership, and unique code. This operation
   * requires careful validation of the category ID and seller ID to maintain
   * referential integrity with shopping_mall_categories and
   * shopping_mall_sellers tables respectively.
   *
   * Security restrictions should ensure only authorized roles (such as
   * sellers or admins) perform creation.
   *
   * The system will enforce uniqueness of the product code and prevent
   * duplicates.
   *
   * Response returns the complete newly created product entity including
   * autogenerated timestamps and default status values.
   *
   * Errors will be returned if required fields are missing, uniqueness is
   * violated, or foreign keys are invalid.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   * @namespace Catalog
   */
  export type ICreate = {
    /** Identifier for the category this product belongs to. */
    shopping_mall_category_id: string & tags.Format<"uuid">;

    /** Identifier for the seller of this product. */
    shopping_mall_seller_id: string & tags.Format<"uuid">;

    /** Unique business code identifying the product. */
    code: string;

    /** Display name of the product. */
    name: string;

    /** Optional detailed description of the product. */
    description?: string | null | undefined;

    /** Lifecycle state of the product, e.g., Draft, Active, Inactive. */
    status: string;
  };

  /**
   * Update schema for shopping mall product.
   *
   * Allows modifying category association, seller ownership, product code,
   * name, description, and status while respecting database foreign key
   * constraints and uniqueness.
   */
  export type IUpdate = {
    /**
     * Category ID to which this product belongs, referencing
     * shopping_mall_categories table.
     */
    shopping_mall_category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Seller ID who owns this product, referencing shopping_mall_sellers
     * table.
     */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | undefined;

    /** Unique business code identifying the product. */
    code?: string | undefined;

    /** Display name of the product. */
    name?: string | undefined;

    /** Optional detailed description of the product. */
    description?: string | null | undefined;

    /** Lifecycle state of the product, e.g., Draft, Active, Inactive. */
    status?: string | undefined;
  };

  /**
   * Summary type for shopping mall product entity representing essential
   * product information optimized for list views.
   *
   * Includes basic identification fields, product code, name, status, and
   * category association.
   *
   * This summary omits detailed descriptions and relations for efficient
   * listing.
   */
  export type ISummary = {
    /** Unique identifier of the shopping mall product. */
    id: string & tags.Format<"uuid">;

    /** Unique business code identifying the product. */
    code: string;

    /** The display name of the product. */
    name: string;

    /**
     * The current lifecycle state of the product, e.g., Draft, Active,
     * Inactive.
     */
    status: string;

    /** Identifier of the category to which this product belongs. */
    shopping_mall_category_id: string & tags.Format<"uuid">;
  };
}
