import { tags } from "typia";

/**
 * Shopping cart entity representing a user's or guest's collection of items
 * intended for purchase.
 *
 * This object includes optional linkage to a customer and/or session ID for
 * guests, supporting diverse user scenarios.
 *
 * Timestamps indicate creation, update, and soft delete states for lifecycle
 * management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallShoppingCart = {
  /** Unique identifier of the shopping cart */
  id: string & tags.Format<"uuid">;

  /** Optional customer ID who owns the shopping cart */
  shopping_mall_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Optional session identifier for guests */
  session_id?: string | null | undefined;

  /** Timestamp when the shopping cart was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the shopping cart was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp marking soft deletion of the shopping cart, null if active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallShoppingCart {
  /** Request DTO for searching and paginating shopping carts. */
  export type IRequest = {
    /** Page number for pagination. Defaults to 1. */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /** Number of records per page. Defaults to 100. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Default<100> & tags.Minimum<1>)
      | undefined;

    /** Search keyword to filter shopping carts based on relevant fields. */
    search?: string | undefined;

    /** Filter shopping carts belonging to the customer by their ID. */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter shopping carts associated with a specific guest session ID. */
    session_id?: string | undefined;

    /** Sort order for returned records e.g. 'created_at desc'. */
    sort?: string | undefined;
  };

  /**
   * Request body for creating a new shopping cart.
   *
   * Includes either the owning customer ID or a session ID for guest
   * tracking.
   */
  export type ICreate = {
    /** Optional customer ID who owns the new shopping cart */
    shopping_mall_customer_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Optional session identifier for guests to link the cart */
    session_id?: string | null | undefined;
  };

  /**
   * Data structure for updating a shopping mall shopping cart. Enables
   * modification of the associated customer ID or session ID with appropriate
   * validation.
   *
   * Fields are nullable to allow partial updates or clearing of values. The
   * shopping_mall_customer_id associates the cart to a specific registered
   * customer, while the session_id links to guest sessions.
   */
  export type IUpdate = {
    /** Belonged customer's unique identifier; nullable to allow guest carts. */
    shopping_mall_customer_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Optional session identifier for guests to track carts without login.
     * Nullable for customer carts.
     */
    session_id?: string | null | undefined;
  };

  /**
   * Summary representation of a shopping cart, including identification,
   * customer association, guest session, and timestamps.
   */
  export type ISummary = {
    /** Unique identifier of the shopping cart */
    id: string & tags.Format<"uuid">;

    /** The associated customer's unique identifier, if logged in */
    shopping_mall_customer_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Session identifier for guests without login */
    session_id?: string | null | undefined;

    /** Timestamp when the shopping cart was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the shopping cart was last updated */
    updated_at: string & tags.Format<"date-time">;
  };
}
