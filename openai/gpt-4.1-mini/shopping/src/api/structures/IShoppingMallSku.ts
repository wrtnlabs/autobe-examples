import { tags } from "typia";

/**
 * Represents a product SKU (stock keeping unit) that specifies a variant such
 * as color or size for a product in the shopping mall platform.
 *
 * Includes pricing, status, inventory linkage, and timestamps for tracking SKU
 * lifecycle and modifications.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSku = {
  /**
   * Primary Key.
   *
   * Unique identifier of the SKU within the shopping mall system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The product to which this SKU belongs. References
   * shopping_mall_products.id.
   *
   * Establishes relationship between SKU and product.
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Unique SKU code within the product.
   *
   * Business identifier for variant management.
   */
  sku_code: string;

  /**
   * Retail price of this SKU.
   *
   * Represents the selling price for this specific product variant.
   */
  price: number;

  /**
   * Weight of the SKU for shipping calculations.
   *
   * Optional numeric value representing the product variant's weight.
   */
  weight?: number | null | undefined;

  /**
   * Lifecycle state of the SKU, e.g., Draft, Active, Inactive.
   *
   * Used to manage SKU availability and visibility.
   */
  status: string;

  /**
   * Timestamp when the SKU was created.
   *
   * ISO 8601 datetime format of creation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the SKU was last updated.
   *
   * ISO 8601 datetime format of last update.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the SKU was soft deleted.
   *
   * Nullable to indicate active or deleted state.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSku {
  /**
   * Request body schema for creating a new SKU variant in the product
   * catalog.
   *
   * Includes mandatory product association, unique SKU code, price, and
   * lifecycle status. Optional weight can be provided to support shipping
   * calculations.
   */
  export type ICreate = {
    /**
     * The product to which this SKU belongs. References
     * shopping_mall_products.id.
     *
     * Required for associating SKU to the correct product.
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /**
     * Unique SKU code within the product.
     *
     * Used to differentiate variants.
     */
    sku_code: string;

    /**
     * Retail price of this SKU.
     *
     * Mandatory field representing selling price for this variant.
     */
    price: number;

    /** Optional weight of the SKU used for shipping computation. */
    weight?: number | null | undefined;

    /**
     * Lifecycle state of the SKU when creating.
     *
     * Expected to be one of the valid statuses.
     */
    status: string;
  };

  /**
   * Update DTO for shopping mall SKU (stock keeping unit) variant. Fields can
   * be changed during updates such as sku_code, price, weight, and status to
   * reflect SKU modifications in product variants management.
   *
   * This type excludes properties like id, product references, and
   * timestamps, as these are managed by system or retrieved from main
   * entity.
   *
   * Properties:
   *
   * - Sku_code: unique code for the SKU in this product
   * - Price: price in double precision float
   * - Weight: optional weight of the SKU for shipping
   * - Status: product lifecycle state such as Draft, Active, Inactive
   *
   * Only these modifiable fields can be set in this update interface.
   */
  export type IUpdate = {
    /** Unique SKU code within the product. */
    sku_code: string;

    /** Retail price of this SKU. */
    price: number;

    /** Weight of the SKU for shipping calculations. */
    weight?: number | null | undefined;

    /** Lifecycle state of the SKU, e.g., Draft, Active, Inactive. */
    status: string;
  };
}
