import { tags } from "typia";

/**
 * This interface represents an order status entry, capturing a single status
 * event in the lifecycle of an order within the shopping mall platform. It
 * corresponds to the shopping_mall_order_statuses table in the Prisma DB
 * schema. Each entry stores the order it belongs to, the current status at the
 * time of this entry, and the timestamp of the status change.
 *
 * It is used to track order processing states such as Pending Payment, Paid,
 * Processing, Shipped, Delivered, and Cancelled with precise timestamps for
 * audit and workflow management.
 *
 * Properties:
 *
 * - Id: Primary UUID key of this status record.
 * - Shopping_mall_order_id: Foreign key referencing the parent order record.
 * - Status: The effective order status at this point in time.
 * - Status_changed_at: The date and time when this status was recorded.
 *
 * This entity supports comprehensive order tracking and is critical to order
 * lifecycle management and business rule enforcement.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderStatus = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Belonged order's {@link shopping_mall_orders.id}. */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Order status at this point in time (Pending Payment, Paid, Processing,
   * Shipped, Delivered, Cancelled).
   */
  status: string;

  /** Timestamp when the status was recorded. */
  status_changed_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallOrderStatus {
  /**
   * This interface represents an update to an order status entry, allowing
   * modifications to the status and timestamp at which the status was
   * changed. It is used to record progress in the lifecycle of an order
   * within the shopping mall platform. This entity corresponds to the
   * shopping_mall_order_statuses table in the Prisma DB schema.
   */
  export type IUpdate = {
    /**
     * Order status at this point in time (Pending Payment, Paid,
     * Processing, Shipped, Delivered, Cancelled).
     */
    status: string;

    /** Timestamp when the status was recorded. */
    status_changed_at: string & tags.Format<"date-time">;
  };

  /**
   * Create a new order status record for an existing order to record a status
   * transition in the order lifecycle.
   *
   * This operation adds a new entry into the `shopping_mall_order_statuses`
   * table associating the given status and timestamp to the specified order.
   *
   * The request body should include the status value (e.g., Pending Payment,
   * Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when
   * the status was set.
   *
   * Authorization ensures only permitted users (such as the owning customer,
   * related seller, or system administrators) can perform this update to
   * maintain data integrity and security.
   *
   * The response returns the created order status entity, confirming
   * successful addition into the system.
   *
   * Validation errors such as invalid status values or missing fields must be
   * properly reported.
   *
   * Business logic must enforce correct status transitions and timestamp
   * consistency if implemented in service layers.
   */
  export type ICreate = {
    /** Belonged order's {@link shopping_mall_orders.id}. */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Order status at this point in time (Pending Payment, Paid,
     * Processing, Shipped, Delivered, Cancelled).
     */
    status: string;

    /** Timestamp when the status was recorded. */
    status_changed_at: string & tags.Format<"date-time">;
  };
}
