import { tags } from "typia";

/**
 * Represents a product category in the shopping mall, including optional
 * hierarchical parent linkage, unique code, display name, description, display
 * order for sorting, and timestamps for creation, update, and soft deletion.
 * Supports nested category structures for product classification.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCategory = {
  /** Primary key unique identifier of the product category. */
  id: string & tags.Format<"uuid">;

  /** Optional parent category's unique identifier. Null for root categories. */
  parent_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Unique code identifying the category. */
  code: string;

  /** Name of the product category. */
  name: string;

  /** Optional detailed description of the product category. */
  description?: string | null | undefined;

  /** Display order for UI sorting of categories. */
  display_order: number & tags.Type<"int32">;

  /** Timestamp when this category was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this category was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp of soft deletion; null if category is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCategory {
  /** Search criteria and pagination parameters for product category filtering */
  export type IRequest = {
    /** Page number for pagination control of results. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of items to return per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Text string to search by matching category code or name substrings. */
    search?: string | undefined;

    /**
     * UUID of the parent category to filter by. Null indicates root
     * categories.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Sort order of the categories. Acceptable values: 'asc', 'desc'. */
    sort?: string | undefined;
  };

  /**
   * Create DTO for new product category including required unique code, name,
   * and display order. Optional hierarchical parent category linkage and
   * description fields may be provided. This structure supports creation of
   * new categories in the shopping mall's catalog system.
   */
  export type ICreate = {
    /**
     * Optional parent category's unique identifier. Null for root
     * categories.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Unique code for the new category; must be unique in the system. */
    code: string;

    /** Name of the new product category. */
    name: string;

    /** Optional description provided for the new category. */
    description?: string | null | undefined;

    /** Display order integer for the new category, used for sorting in UI. */
    display_order: number & tags.Type<"int32">;
  };

  /**
   * Object representing the updatable fields of a shopping mall product
   * category. Allows updating parent linkage, unique code, name, description,
   * and display order of the category.
   *
   * The 'code' must be unique and 'display_order' determines presentation
   * order of categories.
   */
  export type IUpdate = {
    /** Parent category's unique identifier. Nullable for root categories. */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Unique code identifying the category. */
    code: string;

    /** Category display name. */
    name: string;

    /** Optional detailed description of the category. */
    description?: string | null | undefined;

    /** Display order for sorting categories. */
    display_order: number & tags.Type<"int32">;
  };
}
