import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallShoppingCart } from "../../../../structures/IShoppingMallShoppingCart";

/**
 * Create a new shopping cart for a customer or guest session.
 *
 * Creates a new shopping cart linked either to a registered customer or a guest
 * session ID, enabling SKU items to be saved for subsequent order placement.
 * The operation prevents creating duplicate carts for the same customer or
 * session. It stores the customer's reference ID or session ID, timestamps for
 * creation and update, and optional soft delete timestamp.
 *
 * User roles authorized to call this operation include authenticated customers
 * and guests with valid session IDs. Proper validation of the associated
 * customer or session is performed.
 *
 * Related operations include updating the cart and managing cart items. Errors
 * include conflict if a cart already exists for the customer or session, or
 * validation errors for missing required fields.
 *
 * @param props.connection
 * @param props.body Request body schema for creating a shopping cart
 * @path /shoppingMall/guest/shoppingCarts
 * @accessor api.functional.shoppingMall.guest.shoppingCarts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Request body schema for creating a shopping cart */
    body: IShoppingMallShoppingCart.ICreate;
  };
  export type Body = IShoppingMallShoppingCart.ICreate;
  export type Response = IShoppingMallShoppingCart;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/guest/shoppingCarts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/guest/shoppingCarts";
  export const random = (): IShoppingMallShoppingCart =>
    typia.random<IShoppingMallShoppingCart>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update shopping cart details identified by ID.
 *
 * Updates a shopping cart by its unique ID, allowing modification of the
 * associated customer or guest session ID, along with updated timestamps.
 * Ensures only authorized users (customers and guests) can update their carts.
 *
 * This is vital for maintaining accurate cart linkage in user sessions. Related
 * operations include cart item management and cart retrieval.
 *
 * Possible errors include not found if the cart ID does not exist,
 * authorization failure if the updater does not own the cart, or validation
 * errors on provided input.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique identifier of the shopping cart to update
 * @param props.body Request body schema for updating a shopping cart
 * @path /shoppingMall/guest/shoppingCarts/:shoppingCartId
 * @accessor api.functional.shoppingMall.guest.shoppingCarts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the shopping cart to update */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Request body schema for updating a shopping cart */
    body: IShoppingMallShoppingCart.IUpdate;
  };
  export type Body = IShoppingMallShoppingCart.IUpdate;
  export type Response = IShoppingMallShoppingCart;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/guest/shoppingCarts/:shoppingCartId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/guest/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}`;
  export const random = (): IShoppingMallShoppingCart =>
    typia.random<IShoppingMallShoppingCart>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
