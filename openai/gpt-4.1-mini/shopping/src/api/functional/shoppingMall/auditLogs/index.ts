import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAuditLog } from "../../../structures/IShoppingMallAuditLog";

/**
 * Retrieve detailed information for a single audit log entry.
 *
 * Retrieve a specific audit log record by its unique identifier to obtain
 * comprehensive details of administrative or system actions related to the
 * e-commerce shopping mall platform.
 *
 * This operation requires no special authentication roles as audit logs might
 * be accessible to authorized system services or monitoring tools.
 *
 * Audit logs contain references to administrators and affected entities,
 * enabling detailed tracking of platform activities for compliance and security
 * auditing.
 *
 * The response includes all available audit log information, including action
 * descriptions, timestamps, and any additional metadata.
 *
 * Proper error handling is expected if the audit log ID does not exist or is
 * invalid.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry
 * @path /shoppingMall/auditLogs/:id
 * @accessor api.functional.shoppingMall.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAuditLog =>
    typia.random<IShoppingMallAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
