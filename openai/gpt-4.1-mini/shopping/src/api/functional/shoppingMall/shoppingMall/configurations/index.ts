import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallConfiguration } from "../../../../structures/IShoppingMallConfiguration";

/**
 * Retrieve specific shopping mall configuration detail by ID.
 *
 * Retrieve detailed information of a specific shopping mall configuration by
 * its unique ID. This operation fetches configuration settings key, value,
 * category, description, and enabled status.
 *
 * It is a read-only operation that accesses the shopping_mall_configurations
 * table as defined in the Prisma schema. The operation supports soft deletion
 * by preserving records marked with deleted_at.
 *
 * The endpoint requires the configuration's unique ID as a path parameter to
 * identify the target record. Access control is open to public as
 * configurations do not expose sensitive data.
 *
 * The response returns all metadata including creation and update timestamps
 * for audit purposes. Errors will be returned if the configuration ID does not
 * exist or is malformed.
 *
 * This API is typically used by administrative tools or system components
 * requiring dynamic configuration parameters.
 *
 * @param props.connection
 * @param props.configurationId Unique identifier (UUID) of the shopping mall
 *   configuration
 * @path /shoppingMall/shoppingMall/configurations/:configurationId
 * @accessor api.functional.shoppingMall.shoppingMall.configurations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the shopping mall configuration */
    configurationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallConfiguration;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/shoppingMall/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/shoppingMall/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): IShoppingMallConfiguration =>
    typia.random<IShoppingMallConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new shopping mall configuration parameter with a unique key, value,
 * category, description, and enabled status.
 *
 * The operation persists the new configuration in the
 * shopping_mall_configurations table as defined in the Prisma schema, including
 * audit timestamps for creation and updates.
 *
 * No authentication is required for this operation, facilitating configuration
 * management by administrative tools or automation.
 *
 * A successful response returns the complete configuration record including
 * generated ID and timestamps.
 *
 * Validation ensures the key is unique and the enabled flag properly reflects
 * the configuration state.
 *
 * @param props.connection
 * @param props.body Creation information for a new shopping mall configuration
 * @path /shoppingMall/shoppingMall/configurations
 * @accessor api.functional.shoppingMall.shoppingMall.configurations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for a new shopping mall configuration */
    body: IShoppingMallConfiguration.ICreate;
  };
  export type Body = IShoppingMallConfiguration.ICreate;
  export type Response = IShoppingMallConfiguration;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/shoppingMall/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/shoppingMall/configurations";
  export const random = (): IShoppingMallConfiguration =>
    typia.random<IShoppingMallConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
