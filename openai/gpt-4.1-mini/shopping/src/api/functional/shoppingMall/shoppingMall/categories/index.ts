import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCategory } from "../../../../structures/IShoppingMallCategory";
import { IPageIShoppingMallCategory } from "../../../../structures/IPageIShoppingMallCategory";

/**
 * Search and retrieve a filtered, paginated list of product categories.
 *
 * Retrieve a filtered and paginated list of product categories from the
 * shopping mall platform. This operation supports searching by code and name,
 * filtering by parent category, and sorting by display order for UI
 * presentation.
 *
 * The `shopping_mall_categories` table contains hierarchical category
 * relationships via the `parent_id` field allowing nested category trees.
 * Categories have unique codes and optional descriptions that aid user
 * navigation.
 *
 * This endpoint is publicly accessible and requires no authentication.
 * Pagination controls mitigate large data retrievals for performance.
 *
 * Typical usage scenarios include populating product catalogs, navigation
 * menus, and supporting category-based product searches.
 *
 * Errors can occur due to invalid filter parameters or pagination ranges, which
 * should be returned with clear messages.
 *
 * Related endpoints allow retrieval of individual category details and managing
 * categories (for admin users).
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for product
 *   category filtering
 * @path /shoppingMall/shoppingMall/categories
 * @accessor api.functional.shoppingMall.shoppingMall.categories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for product category
     * filtering
     */
    body: IShoppingMallCategory.IRequest;
  };
  export type Body = IShoppingMallCategory.IRequest;
  export type Response = IPageIShoppingMallCategory;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/shoppingMall/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/shoppingMall/categories";
  export const random = (): IPageIShoppingMallCategory =>
    typia.random<IPageIShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific product category.
 *
 * Retrieve detailed information about a product category by its unique
 * identifier. Returns all category fields from the `shopping_mall_categories`
 * table including hierarchical parent linkage.
 *
 * This operation is publicly accessible and requires no authentication.
 *
 * It supports safe retrieval with error handling for missing or soft deleted
 * categories.
 *
 * Use this endpoint to show category detail pages or fetch specific category
 * metadata for UI display or processing.
 *
 * Pagination and searching are handled via complementary endpoints.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the target product category
 * @path /shoppingMall/shoppingMall/categories/:categoryId
 * @accessor api.functional.shoppingMall.shoppingMall.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product category */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/shoppingMall/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/shoppingMall/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
