import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProduct } from "../../../structures/IShoppingMallProduct";
import { IPageIShoppingMallProduct } from "../../../structures/IPageIShoppingMallProduct";
export * as skus from "./skus/index";

/**
 * Retrieve a filtered, paginated list of shopping mall products.
 *
 * Retrieve a paginated and filtered list of shopping mall products. Supports
 * advanced search criteria including category filtering by
 * shopping_mall_category_id, seller filtering by shopping_mall_seller_id,
 * status filtering (e.g., Draft, Active, Inactive), and text search by product
 * name.
 *
 * The operation returns a paginated summary list of products matching the
 * specified search criteria. Results are optimized for client-side consumption
 * with essential properties only.
 *
 * The API is publicly accessible to allow browsing without authentication.
 *
 * This operation relates to detailed product retrieval endpoints that provide
 * full product and SKU details.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for filtering shopping
 *   mall products
 * @path /shoppingMall/products
 * @accessor api.functional.shoppingMall.products.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for filtering shopping mall products */
    body: IShoppingMallProduct.IRequest;
  };
  export type Body = IShoppingMallProduct.IRequest;
  export type Response = IPageIShoppingMallProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/products";
  export const random = (): IPageIShoppingMallProduct.ISummary =>
    typia.random<IPageIShoppingMallProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed product information by product ID.
 *
 * Retrieve detailed product information for a specific shopping mall product
 * using the productId path parameter. Returns all relevant properties including
 * category and seller details as well as linked SKUs for comprehensive
 * storefront display.
 *
 * The operation requires a valid UUID path parameter and handles errors for
 * invalid or non-existent product IDs accordingly.
 *
 * This operation complements the product search and product listing APIs.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product
 * @path /shoppingMall/products/:productId
 * @accessor api.functional.shoppingMall.products.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProduct;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IShoppingMallProduct =>
    typia.random<IShoppingMallProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
