import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSku } from "../../../../structures/IShoppingMallSku";

/**
 * Retrieve detailed information for a specific SKU of a product.
 *
 * This GET operation obtains detailed information about an SKU linked to a
 * specific product. The path parameters productId and skuId identify the
 * product and its SKU uniquely.
 *
 * Only users with appropriate view permissions can access this SKU detail
 * endpoint.
 *
 * It leverages the shopping_mall_skus table which includes fields for SKU code,
 * price, weight, status, and timestamps. Soft deleted SKUs (where deleted_at is
 * not null) are excluded from results.
 *
 * Business rules include verifying SKU belongs to the specified product and
 * ensuring the SKU is active and not soft deleted. The response provides
 * clients comprehensive information needed to display SKU details.
 *
 * This operation complements related endpoints such as listing SKUs for a
 * product, product detail retrieval, and inventory viewing for SKUs.
 *
 * Errors include 404 if SKU or product is not found or not matching.
 *
 * No request body is needed as the operation is read-only.
 *
 * Response returns the IShoppingMallSku DTO which includes all SKU properties
 * excluding relations.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product
 * @param props.skuId Unique identifier of the SKU
 * @path /shoppingMall/products/:productId/skus/:skuId
 * @accessor api.functional.shoppingMall.products.skus.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the SKU */
    skuId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSku;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/skus/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IShoppingMallSku =>
    typia.random<IShoppingMallSku>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
