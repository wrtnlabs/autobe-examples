import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSku } from "../../../../../structures/IShoppingMallSku";
import { IShoppingMallShoppingMallSku } from "../../../../../structures/IShoppingMallShoppingMallSku";
import { IPageIShoppingMallShoppingMallSku } from "../../../../../structures/IPageIShoppingMallShoppingMallSku";

/**
 * Create a new SKU for a product.
 *
 * Create a new SKU variant for the specified product.
 *
 * The request body must provide SKU details including skuCode, price, optional
 * weight, and status.
 *
 * This operation requires seller authentication and ownership of the target
 * product.
 *
 * Validation enforces SKU code uniqueness within the product and positive
 * pricing.
 *
 * Returns the created SKU record with all fields.
 *
 * Related operations include SKU retrieval and product variant management.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product
 * @param props.body Creation information for a new SKU variant
 * @path /shoppingMall/seller/products/:productId/skus
 * @accessor api.functional.shoppingMall.seller.products.skus.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the product */
    productId: string & tags.Format<"uuid">;

    /** Creation information for a new SKU variant */
    body: IShoppingMallSku.ICreate;
  };
  export type Body = IShoppingMallSku.ICreate;
  export type Response = IShoppingMallSku;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/skus",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus`;
  export const random = (): IShoppingMallSku =>
    typia.random<IShoppingMallSku>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List SKUs for a product with pagination and filtering capabilities.
 *
 * Retrieve a list of SKU variants for the given product ID. This list is useful
 * for sellers managing product variants and for administrative oversight. Each
 * SKU includes details like SKU code, price, weight (if available), lifecycle
 * status, and timestamps for creation and update.
 *
 * The SKU entities are stored in the shopping_mall_skus table linked to the
 * product. This operation supports filtering by SKU status, pagination with
 * configurable page size and number, and sorting by various fields.
 *
 * Security measures ensure that only users with seller or admin roles for the
 * owning product can perform this query to protect data integrity and
 * confidentiality.
 *
 * The response returns a paginated summary of SKUs, allowing efficient
 * management and display in user interfaces.
 *
 * @param props.connection
 * @param props.productId Identifier of the product to list SKUs for
 * @param props.body Search criteria and pagination parameters for SKU filtering
 * @path /shoppingMall/seller/products/:productId/skus
 * @accessor api.functional.shoppingMall.seller.products.skus.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the product to list SKUs for */
    productId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for SKU filtering */
    body: IShoppingMallShoppingMallSku.IRequest;
  };
  export type Body = IShoppingMallShoppingMallSku.IRequest;
  export type Response = IPageIShoppingMallShoppingMallSku.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/products/:productId/skus",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus`;
  export const random = (): IPageIShoppingMallShoppingMallSku.ISummary =>
    typia.random<IPageIShoppingMallShoppingMallSku.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific SKU of a product.
 *
 * Update a product SKU's information by specifying the product ID and SKU ID.
 *
 * This operation allows authenticated sellers to modify details of their
 * product variants, including SKU code, price, weight, and status.
 *
 * Security measures ensure only sellers owning the product can perform this
 * update.
 *
 * The underlying database entity is the `shopping_mall_skus` table, with
 * foreign key relationships to the `shopping_mall_products` table.
 *
 * Validation includes verifying the existence of the product and SKU and
 * confirming seller ownership.
 *
 * Errors will be returned if the SKU does not exist or the seller is
 * unauthorized.
 *
 * The request expects a well-formed payload as defined in the corresponding
 * update DTO. The response returns the updated SKU entity upon success.
 *
 * @param props.connection
 * @param props.productId ID of the product to which the SKU belongs
 * @param props.skuId ID of the SKU to update
 * @param props.body Product SKU update payload
 * @path /shoppingMall/seller/products/:productId/skus/:skuId
 * @accessor api.functional.shoppingMall.seller.products.skus.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the product to which the SKU belongs */
    productId: string & tags.Format<"uuid">;

    /** ID of the SKU to update */
    skuId: string & tags.Format<"uuid">;

    /** Product SKU update payload */
    body: IShoppingMallSku.IUpdate;
  };
  export type Body = IShoppingMallSku.IUpdate;
  export type Response = IShoppingMallSku;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IShoppingMallSku =>
    typia.random<IShoppingMallSku>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific SKU of a product.
 *
 * Perform a soft delete on a product SKU by specifying the product ID and SKU
 * ID.
 *
 * This operation allows an authenticated seller to mark a SKU as deleted
 * without physically removing it from the database.
 *
 * Only sellers who own the product and SKU can perform this action.
 *
 * The underlying data is stored in the `shopping_mall_skus` table, implementing
 * soft deletion by setting `deleted_at`.
 *
 * The operation expects the SKU to exist and belong to the provided product;
 * otherwise, errors occur.
 *
 * No content is returned after successful deletion.
 *
 * This operation is critical to avoid permanent data loss and supports audit
 * compliance.
 *
 * @param props.connection
 * @param props.productId ID of the product to which the SKU belongs
 * @param props.skuId ID of the SKU to delete
 * @path /shoppingMall/seller/products/:productId/skus/:skuId
 * @accessor api.functional.shoppingMall.seller.products.skus.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the product to which the SKU belongs */
    productId: string & tags.Format<"uuid">;

    /** ID of the SKU to delete */
    skuId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
