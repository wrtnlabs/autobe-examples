import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInventory } from "../../../../structures/IShoppingMallInventory";
import { IPageIShoppingMallInventory } from "../../../../structures/IPageIShoppingMallInventory";

/**
 * Search and retrieve product SKU inventory with pagination and filtering.
 *
 * Retrieve a filtered and paginated list of product SKU inventory records for
 * managing stock levels in the shopping mall platform. This operation allows
 * querying inventory quantities along with corresponding SKU details.
 *
 * This API operates on the "shopping_mall_inventory" table in the Prisma
 * schema, which tracks quantity levels for each SKU identified by
 * "shopping_mall_sku_id".
 *
 * Authorization is required to access inventory data, typically granted to
 * sellers managing product stocks or administrators overseeing the platform.
 *
 * Request input includes pagination parameters and filtering criteria to
 * support large inventories.
 *
 * Response returns a paginated list of inventory summaries reflecting SKU
 * quantities and timestamps.
 *
 * Clients should handle potentially large result sets via pagination and filter
 * to relevant SKUs based on business needs.
 *
 * Security considerations include ensuring only authorized users can query
 * inventory data to protect sensitive stock information.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   inventory
 * @path /shoppingMall/seller/inventory
 * @accessor api.functional.shoppingMall.seller.inventory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering inventory */
    body: IShoppingMallInventory.IRequest;
  };
  export type Body = IShoppingMallInventory.IRequest;
  export type Response = IPageIShoppingMallInventory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/inventory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/seller/inventory";
  export const random = (): IPageIShoppingMallInventory.ISummary =>
    typia.random<IPageIShoppingMallInventory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed inventory information for a specific SKU by its unique
 * identifier. This API provides current stock counts and timestamps for
 * management purposes.
 *
 * Based on the "shopping_mall_inventory" table defined in the Prisma schema,
 * each inventory record references a SKU and maintains the quantity available.
 *
 * Authorization is enforced for roles such as sellers and administrators who
 * need access to inventory details.
 *
 * The SKU identifier path parameter locates the inventory entry to return.
 *
 * Clients should use this endpoint to view or verify stock levels for specific
 * product variants.
 *
 * If the inventory entry is not found, a 404 error is returned.
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the SKU inventory record to retrieve
 * @path /shoppingMall/seller/inventory/:skuId
 * @accessor api.functional.shoppingMall.seller.inventory.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the SKU inventory record to retrieve */
    skuId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallInventory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/inventory/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/inventory/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IShoppingMallInventory =>
    typia.random<IShoppingMallInventory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
