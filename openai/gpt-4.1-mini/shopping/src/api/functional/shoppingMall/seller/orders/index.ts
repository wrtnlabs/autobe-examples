import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrder } from "../../../../structures/IShoppingMallOrder";
import { IPageIShoppingMallOrder } from "../../../../structures/IPageIShoppingMallOrder";
export * as items from "./items/index";
export * as payments from "./payments/index";
export * as statuses from "./statuses/index";
export * as cancellationRequests from "./cancellationRequests/index";

/**
 * Search and retrieve a filtered, paginated list of shopping mall orders.
 *
 * Retrieve a paginated and filtered list of orders for the shopping mall
 * platform, allowing search by customer ID, seller ID, status, business status,
 * payment method, and creation/update date ranges.
 *
 * Security ensures only authorized roles can access their respective order
 * data. This operation returns a summary list of orders optimized for display
 * in order management UI.
 *
 * This operation corresponds to the shopping_mall_orders table in the Prisma
 * schema and returns paginated order summary information.
 *
 * @param props.connection
 * @param props.body Parameters to filter, search, sort, and paginate shopping
 *   mall orders
 * @path /shoppingMall/seller/orders
 * @accessor api.functional.shoppingMall.seller.orders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Parameters to filter, search, sort, and paginate shopping mall orders */
    body: IShoppingMallOrder.IRequest;
  };
  export type Body = IShoppingMallOrder.IRequest;
  export type Response = IPageIShoppingMallOrder.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/orders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/seller/orders";
  export const random = (): IPageIShoppingMallOrder.ISummary =>
    typia.random<IPageIShoppingMallOrder.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed shopping mall order information by ID.
 *
 * Retrieve detailed information for a shopping mall order identified by
 * orderId. Contains order metadata, items, payments, shipping and tracking
 * info.
 *
 * Access is restricted to the order owner, associated seller, and admins.
 *
 * Uses the shopping_mall_orders table and related tables such as
 * shopping_mall_order_items and shopping_mall_payments.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @path /shoppingMall/seller/orders/:orderId
 * @accessor api.functional.shoppingMall.seller.orders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrder;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/orders/:orderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): IShoppingMallOrder =>
    typia.random<IShoppingMallOrder>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update shopping mall order by ID.
 *
 * Update an existing shopping mall order specified by the orderId path
 * parameter. Only allowable fields will be changed with validation on status
 * and payment consistency.
 *
 * Authorization is limited to roles customer, seller, and admin with ownership
 * or administrative rights.
 *
 * The response returns the updated shopping mall order details or appropriate
 * error messages on failure.
 *
 * Related business rules ensure status transitions follow correct sequences and
 * inventory is managed accordingly.
 *
 * The underlying resource is shopping_mall_orders table.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order to update
 * @param props.body Order update details with fields to modify
 * @path /shoppingMall/seller/orders/:orderId
 * @accessor api.functional.shoppingMall.seller.orders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the order to update */
    orderId: string & tags.Format<"uuid">;

    /** Order update details with fields to modify */
    body: IShoppingMallOrder.IUpdate;
  };
  export type Body = IShoppingMallOrder.IUpdate;
  export type Response = IShoppingMallOrder;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/orders/:orderId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): IShoppingMallOrder =>
    typia.random<IShoppingMallOrder>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
