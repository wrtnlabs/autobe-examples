import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallPayment } from "../../../../../structures/IShoppingMallPayment";

/**
 * Create a payment record for a specific order.
 *
 * Creates a new payment transaction record for the specified order. The
 * operation validates payment details including payment method, amount, and
 * status. The payment is linked to the order for transaction tracking.
 *
 * This endpoint can only be accessed by authenticated customers and sellers who
 * have appropriate permissions for the order.
 *
 * Relies on the shopping_mall_payments table for storing payment info and
 * shopping_mall_orders for order association. Proper error handling is
 * essential to indicate payment failures or data issues.
 *
 * Returned data includes the created payment record with its identifiers and
 * timestamps for client confirmation.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.body Payment creation data
 * @path /shoppingMall/seller/orders/:orderId/payments
 * @accessor api.functional.shoppingMall.seller.orders.payments.createPayment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createPayment(
  connection: IConnection,
  props: createPayment.Props,
): Promise<createPayment.Response> {
  return true === connection.simulate
    ? createPayment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createPayment.METADATA,
          path: createPayment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createPayment {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Payment creation data */
    body: IShoppingMallPayment.ICreate;
  };
  export type Body = IShoppingMallPayment.ICreate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: createPayment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createPayment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update payment record of a specific order.
 *
 * Updates an existing payment transaction record for the specified order and
 * payment IDs. Validates and applies changes to payment amount, method, status,
 * transaction ID, and confirmation timestamp.
 *
 * Restricted to authorized customers and sellers.
 *
 * Ensures that payment state is consistent and properly linked to the order.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.paymentId Unique identifier of the payment record to update
 * @param props.body Payment update data
 * @path /shoppingMall/seller/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.seller.orders.payments.updatePayment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePayment(
  connection: IConnection,
  props: updatePayment.Props,
): Promise<updatePayment.Response> {
  return true === connection.simulate
    ? updatePayment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePayment.METADATA,
          path: updatePayment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updatePayment {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the payment record to update */
    paymentId: string & tags.Format<"uuid">;

    /** Payment update data */
    body: IShoppingMallPayment.IUpdate;
  };
  export type Body = IShoppingMallPayment.IUpdate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: updatePayment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePayment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
