import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAuditLog } from "../../../../structures/IShoppingMallAuditLog";
import { IPageIShoppingMallAuditLog } from "../../../../structures/IPageIShoppingMallAuditLog";

/**
 * Retrieve paginated list of audit logs with filtering and search.
 *
 * Retrieve a filtered, paginated list of audit logs capturing platform
 * administrative and user events for monitoring, analytics, and compliance
 * purposes.
 *
 * This operation supports complex search parameters specified in the request
 * body such as admin filtering, date ranges, and action keywords.
 *
 * Audit logs integrate with the 'shopping_mall_audit_logs' table in the Prisma
 * schema and include references to related administrators and entities.
 *
 * Only users with the 'admin' role are authorized to access this sensitive log
 * data.
 *
 * The response includes a pagination container with audit log entries
 * summarized for efficient consumption.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for audit logs
 * @path /shoppingMall/admin/auditLogs
 * @accessor api.functional.shoppingMall.admin.auditLogs.indexAuditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexAuditLogs(
  connection: IConnection,
  props: indexAuditLogs.Props,
): Promise<indexAuditLogs.Response> {
  return true === connection.simulate
    ? indexAuditLogs.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexAuditLogs.METADATA,
          path: indexAuditLogs.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexAuditLogs {
  export type Props = {
    /** Search criteria and pagination parameters for audit logs */
    body: IShoppingMallAuditLog.IRequest;
  };
  export type Body = IShoppingMallAuditLog.IRequest;
  export type Response = IPageIShoppingMallAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/auditLogs";
  export const random = (): IPageIShoppingMallAuditLog =>
    typia.random<IPageIShoppingMallAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: indexAuditLogs.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexAuditLogs.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific audit log by ID.
 *
 * Retrieve full details of a specific audit log entry identified by its unique
 * ID. Audit logs provide a comprehensive tracking record of system
 * administration and user actions for purposes including compliance, security
 * auditing, and troubleshooting. This operation is intended for administrators
 * or authorized users with privileges to review system logs.
 *
 * Security considerations include enforcing authorization as only users with
 * admin roles or specific audit permissions should access audit logs. The
 * operation safely exposes non-sensitive audit information and associated
 * references to admins and does not permit modifications.
 *
 * The audit log entry includes information about the admin user who performed
 * the action, the specific action description, the timestamp of the action, any
 * related entity IDs (such as orders), and optional detailed metadata. This
 * entry maintains a permanent historical record with no modification
 * capability.
 *
 * This operation requires a path parameter 'id' which uniquely identifies the
 * audit log record. The response returns the complete audit log object
 * including creation timestamps and possible null fields for optional metadata.
 * Error handling includes not found or unauthorized access responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry
 * @path /shoppingMall/admin/auditLogs/:id
 * @accessor api.functional.shoppingMall.admin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAuditLog =>
    typia.random<IShoppingMallAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
