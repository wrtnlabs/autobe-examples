import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallShoppingMallSku } from "../../../../../structures/IShoppingMallShoppingMallSku";
import { IPageIShoppingMallShoppingMallSku } from "../../../../../structures/IPageIShoppingMallShoppingMallSku";

/**
 * List SKUs for a product with pagination and filtering capabilities.
 *
 * Retrieve a list of SKU variants for the given product ID. This list is useful
 * for sellers managing product variants and for administrative oversight. Each
 * SKU includes details like SKU code, price, weight (if available), lifecycle
 * status, and timestamps for creation and update.
 *
 * The SKU entities are stored in the shopping_mall_skus table linked to the
 * product. This operation supports filtering by SKU status, pagination with
 * configurable page size and number, and sorting by various fields.
 *
 * Security measures ensure that only users with seller or admin roles for the
 * owning product can perform this query to protect data integrity and
 * confidentiality.
 *
 * The response returns a paginated summary of SKUs, allowing efficient
 * management and display in user interfaces.
 *
 * @param props.connection
 * @param props.productId Identifier of the product to list SKUs for
 * @param props.body Search criteria and pagination parameters for SKU filtering
 * @path /shoppingMall/admin/products/:productId/skus
 * @accessor api.functional.shoppingMall.admin.products.skus.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the product to list SKUs for */
    productId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for SKU filtering */
    body: IShoppingMallShoppingMallSku.IRequest;
  };
  export type Body = IShoppingMallShoppingMallSku.IRequest;
  export type Response = IPageIShoppingMallShoppingMallSku.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/products/:productId/skus",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/skus`;
  export const random = (): IPageIShoppingMallShoppingMallSku.ISummary =>
    typia.random<IPageIShoppingMallShoppingMallSku.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
