import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdmin } from "../../../../structures/IShoppingMallAdmin";
import { IPageIShoppingMallAdmin } from "../../../../structures/IPageIShoppingMallAdmin";

/**
 * Create new administrator account in shopping_mall_admins.
 *
 * Create a new administrator account with the provided information in the
 * request body.
 *
 * The operation requires admin-level authorization for security.
 *
 * It accepts all required fields to create a new admin user: unique email,
 * hashed password, optional full name and phone number, and status.
 *
 * Email uniqueness and password security must be enforced during creation.
 *
 * Successful creation returns the full admin account details including unique
 * ID and timestamps.
 *
 * Errors such as conflict on email duplication or validation failures must be
 * handled gracefully.
 *
 * This operation supports the expansion of admin personnel in the shopping mall
 * platform.
 *
 * @param props.connection
 * @param props.body Creation info of the administrator account
 * @path /shoppingMall/admin/admins
 * @accessor api.functional.shoppingMall.admin.admins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the administrator account */
    body: IShoppingMallAdmin.ICreate;
  };
  export type Body = IShoppingMallAdmin.ICreate;
  export type Response = IShoppingMallAdmin;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/admins";
  export const random = (): IShoppingMallAdmin =>
    typia.random<IShoppingMallAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of admin users.
 *
 * Retrieve a filtered and paginated list of admin user accounts from the
 * system. This operation allows searching by email, filtering by account
 * status, and sorting results.
 *
 * Security considerations require at least administrative role access to
 * protect sensitive user account details.
 *
 * The operation interacts with the shopping_mall_admins table, incorporating
 * columns like email, status, full name, and creation date.
 *
 * The request body includes advanced search parameters, and the response body
 * returns a paginated collection of summarized administrator information.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for admin user
 *   filtering
 * @path /shoppingMall/admin/admins
 * @accessor api.functional.shoppingMall.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for admin user filtering */
    body: IShoppingMallAdmin.IRequest;
  };
  export type Body = IShoppingMallAdmin.IRequest;
  export type Response = IPageIShoppingMallAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/admins";
  export const random = (): IPageIShoppingMallAdmin.ISummary =>
    typia.random<IPageIShoppingMallAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed administrator information by ID from shopping_mall_admins.
 *
 * Retrieve detailed information about a specific administrator identified by
 * the unique ID from the shopping_mall_admins table.
 *
 * This operation requires authorization and is restricted to users with the
 * admin role to ensure sensitive administrator data is protected.
 *
 * The response includes all available administrator fields including email,
 * full name, contact phone number, account status, and audit timestamps for
 * tracking changes over time.
 *
 * Path parameter 'id' corresponds to the primary key of the
 * shopping_mall_admins table.
 *
 * Errors such as not found or unauthorized access should be handled by the
 * system robustly.
 *
 * This operation is essential for administrative user management and auditing.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target administrator
 * @path /shoppingMall/admin/admins/:id
 * @accessor api.functional.shoppingMall.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target administrator */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAdmin;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAdmin =>
    typia.random<IShoppingMallAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update administrator account by ID.
 *
 * Update an existing administrator account's information by specifying the
 * admin's unique ID. This operation modifies the admin's full name, phone
 * number, status, and password hash, allowing administrators to manage their
 * own profile or other admin accounts with sufficient permissions.
 *
 * Security considerations mandate authenticated admin role access only. Email
 * addresses are immutable through this endpoint to maintain identity integrity.
 * The status field indicates account activity state, which affects login
 * permissions.
 *
 * This API interacts directly with the shopping_mall_admins Prisma table,
 * respecting all relational and soft deletion logic. Updates to the password
 * hash must follow security protocols outside this API scope.
 *
 * Typical usage scenarios include admin profile updates and account status
 * changes. Validation errors will be returned if provided input values are
 * invalid or violate unique constraints.
 *
 * No request body changes other than defined fields are permitted. Error
 * handling includes proper HTTP status codes and messages for unauthorized
 * access or resource not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator
 * @param props.body Updated administrator account data
 * @path /shoppingMall/admin/admins/:id
 * @accessor api.functional.shoppingMall.admin.admins.updateAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateAdmin(
  connection: IConnection,
  props: updateAdmin.Props,
): Promise<updateAdmin.Response> {
  return true === connection.simulate
    ? updateAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateAdmin.METADATA,
          path: updateAdmin.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateAdmin {
  export type Props = {
    /** Unique identifier of the administrator */
    id: string & tags.Format<"uuid">;

    /** Updated administrator account data */
    body: IShoppingMallAdmin.IUpdate;
  };
  export type Body = IShoppingMallAdmin.IUpdate;
  export type Response = IShoppingMallAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/admins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAdmin =>
    typia.random<IShoppingMallAdmin>();
  export const simulate = (
    connection: IConnection,
    props: updateAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete administrator account by ID.
 *
 * Delete an administrator account by ID, permanently removing the record from
 * the database. This endpoint ensures that administrative accounts no longer
 * needed are fully erased from the system.
 *
 * Security considerations require authenticated admin role access only, with
 * elevated privileges to perform this destructive action. The operation does
 * not allow soft deletion, so the record is completely removed, which means no
 * recovery is possible after this action.
 *
 * This API interacts with the shopping_mall_admins table respecting database
 * integrity constraints and cascading effects if applicable.
 *
 * Common error scenarios include attempting to delete a non-existent admin or
 * lack of sufficient authorization.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator
 * @path /shoppingMall/admin/admins/:id
 * @accessor api.functional.shoppingMall.admin.admins.eraseAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAdmin(
  connection: IConnection,
  props: eraseAdmin.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAdmin.METADATA,
          path: eraseAdmin.path(props),
          status: null,
        },
      );
}
export namespace eraseAdmin {
  export type Props = {
    /** Unique identifier of the administrator */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAdmin.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
