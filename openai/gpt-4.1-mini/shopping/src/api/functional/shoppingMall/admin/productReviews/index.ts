import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductReview } from "../../../../structures/IShoppingMallProductReview";
import { IPageIShoppingMallProductReview } from "../../../../structures/IPageIShoppingMallProductReview";
export * as reviewModerations from "./reviewModerations/index";

/**
 * Search and retrieve a filtered, paginated list of product reviews.
 *
 * Retrieve a filtered and paginated list of product reviews from customers who
 * purchased the products. This operation allows filtering by various criteria
 * including rating score, review status (e.g., pending approval, approved), and
 * associated product or order information.
 *
 * The operation supports pagination and sorting to efficiently navigate large
 * volumes of reviews. Proper authorization ensures that only appropriate roles,
 * such as admins or moderators, can access the full review data.
 *
 * This operation directly queries the shopping_mall_product_reviews table as
 * defined in the Prisma schema, incorporating all relevant fields such as
 * customer ID, product ID, order ID, rating, review text, and moderation
 * status. Search parameters include date ranges for creation or update
 * timestamps.
 *
 * The response returns a paginated list of review summaries suitable for
 * administrative dashboard views and moderation queues.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for product
 *   reviews
 * @path /shoppingMall/admin/productReviews
 * @accessor api.functional.shoppingMall.admin.productReviews.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for product reviews */
    body: IShoppingMallProductReview.IRequest;
  };
  export type Body = IShoppingMallProductReview.IRequest;
  export type Response = IPageIShoppingMallProductReview.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/productReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/productReviews";
  export const random = (): IPageIShoppingMallProductReview.ISummary =>
    typia.random<IPageIShoppingMallProductReview.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed product review information by ID.
 *
 * Retrieve detailed information about a specific product review identified by
 * its unique ID. This operation returns all pertinent review data including the
 * customer who submitted it, the associated product, and the relevant order
 * confirming the purchase.
 *
 * This operation ensures that only authorized administrative users can access
 * sensitive review content for moderation purposes. It operates directly on the
 * shopping_mall_product_reviews table, providing a comprehensive view of the
 * review entity.
 *
 * Proper error handling is expected if the specified review ID does not exist.
 * The operation supports validation of the UUID format for the path parameter.
 *
 * This endpoint typically complements list retrieval and moderation update
 * operations in review management workflows.
 *
 * @param props.connection
 * @param props.id Unique identifier of the product review
 * @path /shoppingMall/admin/productReviews/:id
 * @accessor api.functional.shoppingMall.admin.productReviews.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product review */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductReview;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/productReviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/productReviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallProductReview =>
    typia.random<IShoppingMallProductReview>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product review by ID.
 *
 * This API endpoint allows authorized administrators to permanently delete a
 * product review from the platform using its unique identifier. The product
 * review data, including rating, text, and moderation history, will be removed
 * permanently.
 *
 * Security is enforced by allowing only users with the 'admin' role to execute
 * this operation. The client must provide a valid UUID for the target product
 * review.
 *
 * The operation corresponds to the 'shopping_mall_product_reviews' table in the
 * Prisma schema, which contains detailed customer review records for products
 * purchased. Deletion cascades to related moderation records.
 *
 * A successful call results in the product review being removed; clients should
 * handle errors such as not found or authorization failure.
 *
 * @param props.connection
 * @param props.id Unique identifier of the product review to delete
 * @path /shoppingMall/admin/productReviews/:id
 * @accessor api.functional.shoppingMall.admin.productReviews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product review to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/productReviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/productReviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
