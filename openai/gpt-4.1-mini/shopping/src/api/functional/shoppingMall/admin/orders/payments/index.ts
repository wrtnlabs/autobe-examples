import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a specific payment for an order.
 *
 * This operation allows deletion of a specific payment entry linked to an
 * order. The payment record identified by paymentId associated with the order
 * identified by orderId will be permanently removed from the database.
 *
 * Security considerations dictate that only authorized users with permissions
 * can perform this deletion due to the financial nature of payment data. No
 * request body is necessary, and no response body is returned.
 *
 * This operation interacts exclusively with the shopping_mall_payments table,
 * ensuring the payment and its related transaction details are fully erased.
 * This endpoint is part of overall order payment management workflows.
 *
 * Possible errors include 404 if the payment or order does not exist, or 403 if
 * the user is unauthorized.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.paymentId Unique identifier of the target payment
 * @path /shoppingMall/admin/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.admin.orders.payments.erasePayment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePayment(
  connection: IConnection,
  props: erasePayment.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePayment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePayment.METADATA,
          path: erasePayment.path(props),
          status: null,
        },
      );
}
export namespace erasePayment {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target payment */
    paymentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePayment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePayment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
