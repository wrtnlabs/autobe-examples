import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallConfiguration } from "../../../../../structures/IShoppingMallConfiguration";
import { IPageIShoppingMallConfiguration } from "../../../../../structures/IPageIShoppingMallConfiguration";
import { IShoppingMallConfigurations } from "../../../../../structures/IShoppingMallConfigurations";

/**
 * Search and retrieve a filtered, paginated list of shopping mall
 * configurations for admin management.
 *
 * Retrieve a filtered and paginated list of system configuration records for
 * the shopping mall platform.
 *
 * This operation enables administrators to query configuration parameters using
 * various filters such as 'key', 'category', and active 'enabled' status.
 * Pagination and sorting options support efficient large data access.
 *
 * The configurations are stored in the 'shopping_mall_configurations' table,
 * which holds key-value pairs for system settings. Soft delete is supported via
 * 'deleted_at', and only active configurations typically appear in results.
 *
 * Security-wise, this API requires admin privileges. Unauthorized requests are
 * blocked.
 *
 * The response includes paginated configuration summary data matched to search
 * criteria, helping admins manage system behavior and operational parameters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for configuration
 *   filtering
 * @path /shoppingMall/admin/shoppingMall/configurations
 * @accessor api.functional.shoppingMall.admin.shoppingMall.configurations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for configuration filtering */
    body: IShoppingMallConfiguration.IRequest;
  };
  export type Body = IShoppingMallConfiguration.IRequest;
  export type Response = IPageIShoppingMallConfiguration.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/shoppingMall/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/shoppingMall/configurations";
  export const random = (): IPageIShoppingMallConfiguration.ISummary =>
    typia.random<IPageIShoppingMallConfiguration.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a shopping mall system configuration by configurationId.
 *
 * Update a system configuration parameter identified by 'configurationId'. This
 * operation modifies the configuration's value, category, description, and
 * enabled status, allowing system administrators to change active settings.
 *
 * The operation requires authentication with appropriate roles to prevent
 * unauthorized changes.
 *
 * It updates the record in the 'shopping_mall_configurations' table, ensuring
 * the unique key is preserved and audit timestamps are refreshed.
 *
 * Input validation checks for proper value formats and enabled flag boolean
 * correctness.
 *
 * Attempts to update a non-existent or soft deleted configuration should result
 * in an error.
 *
 * Any changes trigger audit trail updates in the service layer (not exposed in
 * API).
 *
 * This operation corresponds to the 'PUT
 * /shoppingMall/configurations/{configurationId}' RESTful endpoint.
 *
 * @param props.connection
 * @param props.configurationId Target configuration's ID
 * @param props.body Update data for the shopping mall configuration
 * @path /shoppingMall/admin/shoppingMall/configurations/:configurationId
 * @accessor api.functional.shoppingMall.admin.shoppingMall.configurations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target configuration's ID */
    configurationId: string & tags.Format<"uuid">;

    /** Update data for the shopping mall configuration */
    body: IShoppingMallConfigurations.IUpdate;
  };
  export type Body = IShoppingMallConfigurations.IUpdate;
  export type Response = IShoppingMallConfigurations;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/shoppingMall/configurations/:configurationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/shoppingMall/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): IShoppingMallConfigurations =>
    typia.random<IShoppingMallConfigurations>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a shopping mall system configuration by configurationId.
 *
 * Delete a system configuration parameter permanently by 'configurationId'.
 * This operation removes the configuration entirely from the database, without
 * soft delete.
 *
 * Only authorized admins are allowed to perform this operation.
 *
 * Attempting to delete a missing or already deleted configuration returns a not
 * found error.
 *
 * This corresponds to the 'DELETE
 * /shoppingMall/configurations/{configurationId}' RESTful endpoint.
 *
 * This is a hard delete operation, no soft delete is performed.
 *
 * @param props.connection
 * @param props.configurationId Target configuration's ID
 * @path /shoppingMall/admin/shoppingMall/configurations/:configurationId
 * @accessor api.functional.shoppingMall.admin.shoppingMall.configurations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target configuration's ID */
    configurationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/shoppingMall/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/shoppingMall/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
