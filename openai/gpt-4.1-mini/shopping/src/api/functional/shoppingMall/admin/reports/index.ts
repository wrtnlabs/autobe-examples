import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReport } from "../../../../structures/IShoppingMallReport";
import { IPageIShoppingMallReport } from "../../../../structures/IPageIShoppingMallReport";

/**
 * Create a new admin report.
 *
 * Create a new administrative report in the shopping mall platform. The request
 * must include the report name and type, optionally with a URI pointing to the
 * generated report content.
 *
 * Only authenticated administrators may perform this operation to maintain data
 * security and integrity.
 *
 * The response includes the full details of the created report including ID and
 * timestamps.
 *
 * Validation enforces unique report names and valid report types.
 *
 * Errors occur if a duplicate report name is submitted or required fields are
 * missing.
 *
 * No soft delete or update is performed in this operation.
 *
 * The created report may be subsequently retrieved via its unique ID using the
 * GET report endpoint.
 *
 * @param props.connection
 * @param props.body Details of the new admin report to be created
 * @path /shoppingMall/admin/reports
 * @accessor api.functional.shoppingMall.admin.reports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details of the new admin report to be created */
    body: IShoppingMallReport.ICreate;
  };
  export type Body = IShoppingMallReport.ICreate;
  export type Response = IShoppingMallReport;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/reports";
  export const random = (): IShoppingMallReport =>
    typia.random<IShoppingMallReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve filtered and paginated list of administrative reports.
 *
 * Search and retrieve a paginated list of administrative reports for business
 * analysis and operational insights. The search criteria may include filters by
 * report type, creation date range, and generated administrator.
 *
 * The response provides a paginated collection of report summaries with
 * metadata such as report name, type, creator, and timestamps. This allows
 * admins to efficiently review and select reports relevant to their tasks.
 *
 * Security is enforced so that only users with the admin role can access this
 * information. No modification of report data is possible via this endpoint,
 * which serves read-only purposes.
 *
 * The operation supports complex search parameters in the request body
 * including pagination controls. This enables scalable and efficient data
 * retrieval in large datasets.
 *
 * This operation facilitates integration with the reporting dashboards in the
 * admin console and supports downstream analytics and business intelligence
 * workflows.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   reports
 * @path /shoppingMall/admin/reports
 * @accessor api.functional.shoppingMall.admin.reports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering reports */
    body: IShoppingMallReport.IRequest;
  };
  export type Body = IShoppingMallReport.IRequest;
  export type Response = IPageIShoppingMallReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/reports";
  export const random = (): IPageIShoppingMallReport.ISummary =>
    typia.random<IPageIShoppingMallReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific admin report by ID.
 *
 * Retrieve a specific administrative report by its unique ID from the shopping
 * mall's reporting system. This API operation allows admins to fetch detailed
 * report data including the report's name, type, content URI for download or
 * viewing, and timestamps for creation and updates.
 *
 * Security considerations require that only authenticated administrators can
 * access report details. Access is restricted to users with the admin role to
 * ensure sensitive business analytics are protected.
 *
 * The operation queries the shopping_mall_reports table, uniquely identified by
 * report ID. It returns all stored attributes including associated admin who
 * generated the report if any.
 *
 * The operation performs a direct lookup without modification, ensuring
 * read-only access. If the report ID does not exist, the operation typically
 * returns a not found error.
 *
 * This endpoint pairs with the report creation API which accepts new report
 * generation requests.
 *
 * Hard delete is not applicable here; soft delete is respected by excluding
 * deleted records if implemented in the service logic.
 *
 * @param props.connection
 * @param props.id Unique identifier of the report
 * @path /shoppingMall/admin/reports/:id
 * @accessor api.functional.shoppingMall.admin.reports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the report */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallReport;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallReport =>
    typia.random<IShoppingMallReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an admin report by ID.
 *
 * Update an existing administrative report's details by report ID. This
 * includes changing the report's name, type, and content URI to reflect new
 * insights or analytics data.
 *
 * Only users with the 'admin' role are authorized to perform this update to
 * maintain platform security and data integrity.
 *
 * The operation interfaces directly with the 'shopping_mall_reports' table,
 * respecting all constraints such as unique report names and soft deletion
 * timestamps.
 *
 * This operation requires the full report payload in the request body, adhering
 * to the 'IShoppingMallReport.IUpdate' DTO structure. The response returns the
 * updated report entity.
 *
 * Validation includes uniqueness of report name and mandatory fields to prevent
 * corrupted data entries.
 *
 * Error handling covers scenarios such as updating non-existent reports and
 * invalid data formats.
 *
 * @param props.connection
 * @param props.id Target report's ID
 * @param props.body Report update information
 * @path /shoppingMall/admin/reports/:id
 * @accessor api.functional.shoppingMall.admin.reports.updateReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateReport(
  connection: IConnection,
  props: updateReport.Props,
): Promise<updateReport.Response> {
  return true === connection.simulate
    ? updateReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateReport.METADATA,
          path: updateReport.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateReport {
  export type Props = {
    /** Target report's ID */
    id: string & tags.Format<"uuid">;

    /** Report update information */
    body: IShoppingMallReport.IUpdate;
  };
  export type Body = IShoppingMallReport.IUpdate;
  export type Response = IShoppingMallReport;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/reports/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallReport =>
    typia.random<IShoppingMallReport>();
  export const simulate = (
    connection: IConnection,
    props: updateReport.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an admin report by ID.
 *
 * Permanently remove an admin report from the system by its unique ID.
 *
 * Only users with the 'admin' role have permission to delete reports to ensure
 * data is managed securely and responsibly.
 *
 * This operation directly removes the record from the 'shopping_mall_reports'
 * table as there is no soft delete column to mark the report as inactive.
 *
 * Care should be taken to avoid accidental deletions, as this action cannot be
 * undone.
 *
 * The endpoint accepts the report ID as a path parameter. There is no request
 * body or response body for this operation.
 *
 * Error handling includes cases where the specified report does not exist.
 *
 * @param props.connection
 * @param props.id Target report's ID
 * @path /shoppingMall/admin/reports/:id
 * @accessor api.functional.shoppingMall.admin.reports.eraseReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseReport(
  connection: IConnection,
  props: eraseReport.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseReport.METADATA,
          path: eraseReport.path(props),
          status: null,
        },
      );
}
export namespace eraseReport {
  export type Props = {
    /** Target report's ID */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseReport.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
