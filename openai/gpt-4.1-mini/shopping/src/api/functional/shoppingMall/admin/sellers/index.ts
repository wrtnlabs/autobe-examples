import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../structures/IShoppingMallSeller";
import { IPageIShoppingMallSeller } from "../../../../structures/IPageIShoppingMallSeller";

/**
 * Create a new shopping mall seller account.
 *
 * Create a new seller account in the shopping mall platform. This operation
 * takes the seller's unique email, hashed password, optional company and
 * contact information, phone number, and an initial status such as 'active' or
 * 'suspended'.
 *
 * The system validates that the email is unique and the password hash meets
 * security requirements. After successful creation, the seller record includes
 * automatic timestamps for creation and update. Soft delete fields exist but
 * are managed internally.
 *
 * Only authorized clients with permissions to create sellers can invoke this
 * operation. This enables the onboarding of new sellers to the platform to list
 * products and manage orders appropriately.
 *
 * Related operations include updating seller information and listing sellers.
 * The response returns the complete seller entity with all fields except
 * sensitive data like password hashes.
 *
 * Errors will be returned if email uniqueness is violated or validation fails.
 *
 * @param props.connection
 * @param props.body Information required to create a new seller account
 * @path /shoppingMall/admin/sellers
 * @accessor api.functional.shoppingMall.admin.sellers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new seller account */
    body: IShoppingMallSeller.ICreate;
  };
  export type Body = IShoppingMallSeller.ICreate;
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/sellers";
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of shopping mall sellers.
 *
 * Retrieve a filtered and paginated list of shopping mall sellers from the
 * system. This endpoint supports complex query parameters for searching by
 * email, company name, and status, enabling admin users to locate sellers
 * efficiently.
 *
 * Security considerations include restricting access to authenticated users
 * with administrative privileges only to protect sensitive seller information.
 *
 * The operation interacts with the shopping_mall_sellers table, referencing all
 * important seller attributes like email, company name, status, and
 * timestamps.
 *
 * This supports the administrative functionality of monitoring and managing
 * sellers within the shopping mall platform.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for seller
 *   filtering
 * @path /shoppingMall/admin/sellers
 * @accessor api.functional.shoppingMall.admin.sellers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for seller filtering */
    body: IShoppingMallSeller.IRequest;
  };
  export type Body = IShoppingMallSeller.IRequest;
  export type Response = IPageIShoppingMallSeller;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/sellers";
  export const random = (): IPageIShoppingMallSeller =>
    typia.random<IPageIShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information on a shopping mall seller by ID.
 *
 * Retrieve comprehensive details of a specific seller identified by their
 * unique ID. This endpoint is essential for administrative management and
 * auditing of seller accounts.
 *
 * Security is enforced by limiting access to users with admin role only.
 *
 * The notable fields returned include email, company name, contact information,
 * status, and timestamps reflecting account lifecycle.
 *
 * This operation works with the shopping_mall_sellers table as defined in the
 * Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the seller
 * @path /shoppingMall/admin/sellers/:id
 * @accessor api.functional.shoppingMall.admin.sellers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/sellers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update shopping mall seller account identified by ID.
 *
 * Update existing seller account information by ID. The client must provide the
 * seller ID in the path parameters and the updated fields in the request body.
 *
 * The operation verifies the existence of the seller, enforces uniqueness of
 * email and validation of data formats. Modifiable fields include email,
 * password hash, company name, contact name, phone number, and account status.
 *
 * This operation supports secure updating of the seller profile by authorized
 * parties only, ensuring data integrity and security.
 *
 * The response provides the updated seller record.
 *
 * If the seller ID does not exist, a not found error will be returned. If
 * validation fails, an error response will describe the failure reason.
 *
 * @param props.connection
 * @param props.id Unique identifier of the seller to update
 * @param props.body Updated seller account information
 * @path /shoppingMall/admin/sellers/:id
 * @accessor api.functional.shoppingMall.admin.sellers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller to update */
    id: string & tags.Format<"uuid">;

    /** Updated seller account information */
    body: IShoppingMallSeller.IUpdate;
  };
  export type Body = IShoppingMallSeller.IUpdate;
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/sellers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a seller account by ID.
 *
 * This operation deletes a seller account identified by the provided UUID. It
 * is designed for administrative use to remove seller accounts that are no
 * longer active or have violated platform policies.
 *
 * Security considerations require this endpoint to be restricted to
 * administrative roles only due to sensitive nature of user account removal.
 * Deletion is irreversible and permanently removes the seller record along with
 * all associated data relations.
 *
 * The operation works directly on the shopping_mall_sellers table of the
 * database and does not create any side effects such as cascading deletions
 * since relations may have cascading rules handled by the database.
 *
 * Clients using this endpoint must ensure that the seller ID exists and user
 * permissions are validated before invocation. Errors may occur if the seller
 * ID is invalid or is referenced by foreign key constraints in other tables.
 *
 * No request body is used, and no response body is returned for this deletion
 * operation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the seller to delete
 * @path /shoppingMall/admin/sellers/:id
 * @accessor api.functional.shoppingMall.admin.sellers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/sellers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
