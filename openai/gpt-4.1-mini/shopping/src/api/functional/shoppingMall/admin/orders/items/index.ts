import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderItem } from "../../../../../structures/IShoppingMallOrderItem";
import { IPageIShoppingMallOrderItem } from "../../../../../structures/IPageIShoppingMallOrderItem";

/**
 * Add a new item to an existing order.
 *
 * This POST /orders/{orderId}/items endpoint allows creation of an order item
 * within an existing order. Users authorized include the customer who owns the
 * order, the seller responsible for the product, and admins.
 *
 * Request body must include:
 *
 * - Shopping_mall_sku_id: UUID of the product SKU
 * - Quantity: Number of units ordered
 * - Unit_price: Price per unit at order time
 * - Total_price: Total price for this SKU (quantity x unit_price)
 *
 * Response contains full details of the created order item.
 *
 * This operation requires careful validation of SKU availability, pricing
 * integrity, and order ownership.
 *
 * This API interacts directly with the shopping_mall_order_items schema in
 * Prisma.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order to add an item to
 * @param props.body Details for creating a new order item
 * @path /shoppingMall/admin/orders/:orderId/items
 * @accessor api.functional.shoppingMall.admin.orders.items.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the order to add an item to */
    orderId: string & tags.Format<"uuid">;

    /** Details for creating a new order item */
    body: IShoppingMallOrderItem.ICreate;
  };
  export type Body = IShoppingMallOrderItem.ICreate;
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update and retrieve order items for a specified order by orderId.
 *
 * This endpoint allows modification of the items within a specified order.
 *
 * Authorized users (sellers managing their product orders or admins) can update
 * quantities or change SKUs in the order items. This supports accurate order
 * fulfillment and inventory management.
 *
 * The request body must conform to the defined schema for order item patches,
 * enabling batch updates with pagination, filtering, or sorting if
 * implemented.
 *
 * Response returns paginated or filtered order item data reflecting the current
 * state after modifications.
 *
 * The displayed order items provide detailed SKU and quantity information to
 * support downstream processing and UI display.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.body Patch information for updating order items
 * @path /shoppingMall/admin/orders/:orderId/items
 * @accessor api.functional.shoppingMall.admin.orders.items.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Patch information for updating order items */
    body: IShoppingMallOrderItem.IRequest;
  };
  export type Body = IShoppingMallOrderItem.IRequest;
  export type Response = IPageIShoppingMallOrderItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IPageIShoppingMallOrderItem =>
    typia.random<IPageIShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific order item by IDs.
 *
 * This GET /orders/{orderId}/items/{orderItemId} API endpoint provides detailed
 * information about a single order item within a specific order. The operation
 * returns SKU association, quantity ordered, unit price, and total price for
 * that item. Users authorized include customers who placed the order, sellers
 * fulfilling the order, and admins overseeing the platform.
 *
 * Parameters:
 *
 * - OrderId: UUID of the order containing the item
 * - OrderItemId: UUID of the order item to retrieve
 *
 * No request body is needed as this is a retrieval operation.
 *
 * Errors handled include invalid or non-existent IDs, authorization failures,
 * and not found responses.
 *
 * This operation directly maps to the Prisma model shopping_mall_order_items.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order
 * @param props.orderItemId Unique identifier of the order item
 * @path /shoppingMall/admin/orders/:orderId/items/:orderItemId
 * @accessor api.functional.shoppingMall.admin.orders.items.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the order item */
    orderItemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orders/:orderId/items/:orderItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.orderItemId ?? "null")}`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderItemId")(() => typia.assert(props.orderItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
