import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallGuest } from "../../../../structures/IShoppingMallGuest";
import { IPageIShoppingMallGuest } from "../../../../structures/IPageIShoppingMallGuest";

/**
 * Search and retrieve a filtered, paginated list of guest sessions.
 *
 * Retrieve a filtered and paginated list of guest user sessions from the
 * shopping mall platform. This operation allows searching by session token, IP
 * address, user agent, and other relevant criteria to analyze guest behavior
 * and activity.
 *
 * The system stores guests as unauthenticated visitors with session tokens
 * holding their browsing data. This API provides insight into guest sessions
 * for system monitoring and analytics.
 *
 * Security considerations include restricting this endpoint to authorized admin
 * users due to sensitivity of guest session data.
 *
 * The response includes a paginated list of guest session summaries optimized
 * for administrative views.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for guest session
 *   filtering
 * @path /shoppingMall/admin/guests
 * @accessor api.functional.shoppingMall.admin.guests.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for guest session filtering */
    body: IShoppingMallGuest.IRequest;
  };
  export type Body = IShoppingMallGuest.IRequest;
  export type Response = IPageIShoppingMallGuest.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/guests";
  export const random = (): IPageIShoppingMallGuest.ISummary =>
    typia.random<IPageIShoppingMallGuest.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a single guest session.
 *
 * Retrieve detailed information of a specific guest session by its unique ID
 * from the shopping mall platform. Guest sessions represent unauthenticated
 * visitors tracked by session tokens.
 *
 * This operation is restricted to admin users to ensure security and privacy of
 * guest session data.
 *
 * The response includes full details of the guest session record, including
 * session token, IP address, user agent, and timestamps.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target guest session
 * @path /shoppingMall/admin/guests/:id
 * @accessor api.functional.shoppingMall.admin.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target guest session */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallGuest;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/guests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallGuest =>
    typia.random<IShoppingMallGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
