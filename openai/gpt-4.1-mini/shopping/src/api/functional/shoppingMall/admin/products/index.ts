import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProduct } from "../../../../structures/IShoppingMallProduct";
export * as skus from "./skus/index";

/**
 * Create a new shopping mall product.
 *
 * Create a new product record with required data elements including category
 * association, seller ownership, and unique code. This operation requires
 * careful validation of the category ID and seller ID to maintain referential
 * integrity with shopping_mall_categories and shopping_mall_sellers tables
 * respectively.
 *
 * Security restrictions should ensure only authorized roles (such as sellers or
 * admins) perform creation.
 *
 * The system will enforce uniqueness of the product code and prevent
 * duplicates.
 *
 * Response returns the complete newly created product entity including
 * autogenerated timestamps and default status values.
 *
 * Errors will be returned if required fields are missing, uniqueness is
 * violated, or foreign keys are invalid.
 *
 * @param props.connection
 * @param props.body Product creation info including category, seller, code, and
 *   name
 * @path /shoppingMall/admin/products
 * @accessor api.functional.shoppingMall.admin.products.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Product creation info including category, seller, code, and name */
    body: IShoppingMallProduct.ICreate;
  };
  export type Body = IShoppingMallProduct.ICreate;
  export type Response = IShoppingMallProduct;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/products";
  export const random = (): IShoppingMallProduct =>
    typia.random<IShoppingMallProduct>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping mall product.
 *
 * Update shopping mall product identified by productId with provided fields.
 * Input may include changes to name, description, category, seller, and status.
 * The productId parameter in the path is required to locate the product.
 *
 * Robust validation for foreign key references and code uniqueness is required.
 *
 * Only authorized users with seller or admin roles should be able to update
 * products.
 *
 * Successful response includes the updated product entity.
 *
 * Failure scenarios include record not found, validation errors, or
 * unauthorized access.
 *
 * @param props.connection
 * @param props.productId Target product's ID
 * @param props.body Product update information
 * @path /shoppingMall/admin/products/:productId
 * @accessor api.functional.shoppingMall.admin.products.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target product's ID */
    productId: string & tags.Format<"uuid">;

    /** Product update information */
    body: IShoppingMallProduct.IUpdate;
  };
  export type Body = IShoppingMallProduct.IUpdate;
  export type Response = IShoppingMallProduct;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/products/:productId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IShoppingMallProduct =>
    typia.random<IShoppingMallProduct>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product by ID permanently from the product catalog.
 *
 * This operation permanently removes a product record identified by its unique
 * ID from the shopping mall product catalog. It is intended for use by
 * authorized users such as sellers or admins who manage product listings. The
 * product corresponds to the shopping_mall_products entity, which includes
 * details such as category, seller association, code, name, description,
 * status, and timestamps.
 *
 * Deleting a product cascades deletion to associated SKUs and related inventory
 * data to maintain data integrity. Since the Prisma schema supports soft
 * deletion via a deleted_at field, this operation performs a hard delete
 * meaning the record will be fully removed without retention.
 *
 * Security considerations require that only users with proper seller or admin
 * roles invoke this operation to prevent unauthorized product deletions. Proper
 * error handling should be implemented to address cases where the product does
 * not exist or is linked to active orders.
 *
 * This deletion complements other product management operations such as SKU
 * updates and product retrieval endpoints.
 *
 * Expected behavior includes returning appropriate status codes confirming
 * deletion or error details if deletion fails due to constraints or
 * authorization.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product
 * @path /shoppingMall/admin/products/:productId
 * @accessor api.functional.shoppingMall.admin.products.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target product */
    productId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
