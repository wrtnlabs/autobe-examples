import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCategory } from "../../../../../structures/IShoppingMallCategory";

/**
 * Create a new shopping mall product category.
 *
 * Create a new product category in the shopping mall's catalog. Each category
 * has a unique code and can be linked to an optional parent category, enabling
 * hierarchical catalog navigation.
 *
 * Administrators with the admin role are authorized to perform this operation.
 * The input must include all required fields such as code, name, and display
 * order, with optional description and parent category linkage.
 *
 * The system maintains soft delete functionality via a nullable deleted_at
 * timestamp but this is managed internally and not set directly by users.
 *
 * This endpoint is essential for maintaining an organized product taxonomy and
 * enabling efficient product discovery.
 *
 * Errors should be returned for duplicate category codes or invalid parent
 * references.
 *
 * The created category object is returned with all its details including
 * timestamps.
 *
 * @param props.connection
 * @param props.body Creation info of the shopping mall category
 * @path /shoppingMall/admin/shoppingMall/categories
 * @accessor api.functional.shoppingMall.admin.shoppingMall.categories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the shopping mall category */
    body: IShoppingMallCategory.ICreate;
  };
  export type Body = IShoppingMallCategory.ICreate;
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/shoppingMall/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/shoppingMall/categories";
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a shopping mall product category by ID.
 *
 * Update a shopping mall product category by its unique ID. Administrators with
 * admin role can modify the code, name, description, display order, and parent
 * category of the category record.
 *
 * Input validation enforces the uniqueness of codes and correct parent
 * associations.
 *
 * This allows flexible restructuring of the product catalog as business needs
 * evolve.
 *
 * Proper error handling is expected for invalid UUIDs, duplicate codes, or not
 * found categories.
 *
 * Returns the updated category record with all properties and timestamps.
 *
 * This operation complements category creation and listing endpoints.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category to update
 * @param props.body Update info of the shopping mall category
 * @path /shoppingMall/admin/shoppingMall/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.shoppingMall.categories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the category to update */
    categoryId: string & tags.Format<"uuid">;

    /** Update info of the shopping mall category */
    body: IShoppingMallCategory.IUpdate;
  };
  export type Body = IShoppingMallCategory.IUpdate;
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/shoppingMall/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/shoppingMall/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product category by its unique identifier, restricted to admin
 * users.
 *
 * This API operation allows an administrator to permanently delete a product
 * category from the shopping mall platform.
 *
 * The category is identified by its UUID, specified via the path parameter
 * 'categoryId'. The operation corresponds to a hard delete, completely removing
 * the category record from the database.
 *
 * Given the critical nature of category data, this operation is secured and
 * restricted to the 'admin' role only. Unauthorized attempts to delete a
 * category are denied.
 *
 * The 'shopping_mall_categories' table contains hierarchical information
 * including parent-child relationships. Care should be taken when deleting
 * categories to maintain data integrity. The database schema enforces cascading
 * deletions where appropriate.
 *
 * Successful deletion results in no content returned. If the specified category
 * does not exist, or the deletion is not permitted, appropriate error responses
 * are returned.
 *
 * The operation must be used cautiously to avoid orphaning products or losing
 * category hierarchy integrity.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the product category to delete
 * @path /shoppingMall/admin/shoppingMall/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.shoppingMall.categories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product category to delete */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/shoppingMall/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/shoppingMall/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
