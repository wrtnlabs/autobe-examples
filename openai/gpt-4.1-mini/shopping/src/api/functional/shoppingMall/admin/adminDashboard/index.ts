import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdminDashboard } from "../../../../structures/IShoppingMallAdminDashboard";
import { IPageIShoppingMallAdminDashboard } from "../../../../structures/IPageIShoppingMallAdminDashboard";

/**
 * Create a new admin dashboard instance. This operation accepts parameters to
 * specify the unique dashboard name and an optional description to detail the
 * dashboard's purpose or scope.
 *
 * Security considerations: This endpoint is restricted to users with the admin
 * role to prevent unauthorized access to critical platform monitoring tools.
 *
 * The admin dashboard entity corresponds to the "shopping_mall_admin_dashboard"
 * Prisma schema table which manages unique dashboard configurations with audit
 * timestamps and soft deletion support.
 *
 * Validation rules ensure that the dashboard name is unique and non-empty.
 * Optional descriptions may be provided to explain the dashboard's function.
 *
 * Successful creation returns the detailed dashboard entity with all relevant
 * fields including timestamps. Error handling includes uniqueness violations
 * and validation failures.
 *
 * Related API operations include updating and deleting admin dashboards.
 *
 * This operation requires an authenticated admin who is authorized to manage
 * dashboards.
 *
 * @param props.connection
 * @param props.body Information required to create a new admin dashboard
 * @path /shoppingMall/admin/adminDashboard
 * @accessor api.functional.shoppingMall.admin.adminDashboard.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new admin dashboard */
    body: IShoppingMallAdminDashboard.ICreate;
  };
  export type Body = IShoppingMallAdminDashboard.ICreate;
  export type Response = IShoppingMallAdminDashboard;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/adminDashboard",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/adminDashboard";
  export const random = (): IShoppingMallAdminDashboard =>
    typia.random<IShoppingMallAdminDashboard>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of admin dashboard overviews.
 *
 * This API endpoint allows administrators to query and retrieve filtered and
 * paginated lists of admin dashboard entries. Admin dashboard records provide
 * critical high-level summaries of platform operations, including KPIs, recent
 * activities, and system status indicators.
 *
 * Security considerations restrict access to authenticated admin users only.
 * Admins can apply search filters and sorting to customize the views. Soft
 * deleted dashboards are excluded from typical queries.
 *
 * The endpoint relates directly to the shopping_mall_admin_dashboard table in
 * the Prisma schema, which maintains unique dashboard names and optional
 * descriptions for operational monitoring purposes.
 *
 * Validation ensures that all query parameters are correctly handled, including
 * pagination limits and offsets.
 *
 * Expected behavior includes efficient retrieval of dashboard lists with
 * metadata summary information.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination parameters for querying
 *   admin dashboard entries
 * @path /shoppingMall/admin/adminDashboard
 * @accessor api.functional.shoppingMall.admin.adminDashboard.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and pagination parameters for querying admin
     * dashboard entries
     */
    body: IShoppingMallAdminDashboard.IRequest;
  };
  export type Body = IShoppingMallAdminDashboard.IRequest;
  export type Response = IPageIShoppingMallAdminDashboard.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/adminDashboard",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/adminDashboard";
  export const random = (): IPageIShoppingMallAdminDashboard.ISummary =>
    typia.random<IPageIShoppingMallAdminDashboard.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve admin dashboard details by id.
 *
 * Retrieve detailed information of an admin dashboard entry by its unique
 * identifier. This operation fetches the full properties of the dashboard,
 * including name, description, and relevant timestamps.
 *
 * Access is secured for admin roles only, ensuring that sensitive dashboard
 * information is protected.
 *
 * The retrieved data corresponds directly to the shopping_mall_admin_dashboard
 * table in the Prisma schema, providing authoritative source details.
 *
 * Validation of the dashboard id path parameter ensures correct UUID format and
 * existence.
 *
 * Errors return appropriate not-found or unauthorized responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target admin dashboard
 * @path /shoppingMall/admin/adminDashboard/:id
 * @accessor api.functional.shoppingMall.admin.adminDashboard.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target admin dashboard */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAdminDashboard;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/adminDashboard/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/adminDashboard/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAdminDashboard =>
    typia.random<IShoppingMallAdminDashboard>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing admin dashboard by ID.
 *
 * Update an existing admin dashboard resource identified by its unique ID. It
 * allows system administrators to modify properties such as the dashboard name
 * and description, thereby managing the configuration and details of platform
 * monitoring dashboards. The operation uses the "shopping_mall_admin_dashboard"
 * Prisma schema, referencing the dashboard ID path parameter.
 *
 * Security considerations: Access restricted to users with the admin role to
 * enforce control over administrative configurations.
 *
 * Validation ensures the dashboard exists, the provided ID is valid UUID
 * format, and modifications adhere to unique name constraints.
 *
 * Successful execution returns the updated admin dashboard entity including
 * updated timestamps. Errors may include not found, unique constraint
 * violations, or validation errors.
 *
 * This operation complements dashboard creation and supports full lifecycle
 * management of admin dashboard entities.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target admin dashboard
 * @param props.body Properties to update in the admin dashboard
 * @path /shoppingMall/admin/adminDashboard/:id
 * @accessor api.functional.shoppingMall.admin.adminDashboard.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target admin dashboard */
    id: string & tags.Format<"uuid">;

    /** Properties to update in the admin dashboard */
    body: IShoppingMallAdminDashboard.IUpdate;
  };
  export type Body = IShoppingMallAdminDashboard.IUpdate;
  export type Response = IShoppingMallAdminDashboard;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/adminDashboard/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/adminDashboard/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAdminDashboard =>
    typia.random<IShoppingMallAdminDashboard>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific admin dashboard by ID.
 *
 * This DELETE operation removes the admin dashboard identified by the given ID.
 * It is intended for use by system administrators to clean up or remove
 * obsolete dashboard configurations.
 *
 * Security and authorization are critical as this operation modifies sensitive
 * administrative views and data. Only users with the 'admin' role may invoke
 * this endpoint.
 *
 * The operation is directly related to the 'shopping_mall_admin_dashboard'
 * table in the Prisma schema. Deletion is a hard delete that permanently
 * removes the record. No request body is required.
 *
 * Related operations include retrieving dashboard details (GET) and listing
 * dashboards (PATCH).
 *
 * Upon success, the record is irrevocably removed and no response body is
 * returned. Errors include not found and unauthorized access.
 *
 * Path parameter 'id' must be a valid UUID representing the dashboard to
 * delete.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin dashboard to delete
 * @path /shoppingMall/admin/adminDashboard/:id
 * @accessor api.functional.shoppingMall.admin.adminDashboard.eraseAdminDashboard
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAdminDashboard(
  connection: IConnection,
  props: eraseAdminDashboard.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAdminDashboard.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAdminDashboard.METADATA,
          path: eraseAdminDashboard.path(props),
          status: null,
        },
      );
}
export namespace eraseAdminDashboard {
  export type Props = {
    /** Unique identifier of the admin dashboard to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/adminDashboard/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/adminDashboard/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAdminDashboard.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAdminDashboard.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
