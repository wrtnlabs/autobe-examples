import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../structures/IShoppingMallCustomer";
import { IPageIShoppingMallCustomer } from "../../../../structures/IPageIShoppingMallCustomer";

/**
 * Retrieve filtered and paginated customer list.
 *
 * Retrieve a filtered and paginated list of customers in the shopping mall
 * platform.
 *
 * Supports advanced search parameters including partial nickname match, status
 * filtering, and paging.
 *
 * Restricted to admin role due to sensitivity of customer information.
 *
 * Returns customer summaries including limited identification and status
 * information.
 *
 * Requires search criteria and pagination parameters in the request body
 * represented by IShoppingMallCustomer.IRequest DTO.
 *
 * Response contains a paginated list with customer summaries in
 * IPageIShoppingMallCustomer.ISummary DTO.
 *
 * This endpoint manipulates the shopping_mall_customers table in the database.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for customer
 *   filtering
 * @path /shoppingMall/admin/customers
 * @accessor api.functional.shoppingMall.admin.customers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for customer filtering */
    body: IShoppingMallCustomer.IRequest;
  };
  export type Body = IShoppingMallCustomer.IRequest;
  export type Response = IPageIShoppingMallCustomer.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/customers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/customers";
  export const random = (): IPageIShoppingMallCustomer.ISummary =>
    typia.random<IPageIShoppingMallCustomer.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
