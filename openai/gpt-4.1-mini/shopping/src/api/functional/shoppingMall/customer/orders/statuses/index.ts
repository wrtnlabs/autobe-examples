import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderStatus } from "../../../../../structures/IShoppingMallOrderStatus";

/**
 * Retrieve specific order status record by order and status ID.
 *
 * Retrieve detailed information about a specific order status entry by order ID
 * and status ID. This endpoint allows clients to get the precise status change
 * record within the lifecycle of a given order.
 *
 * Security measures enforce that only authorized parties (authorized customers,
 * sellers, or admins) can access the order status to protect privacy and order
 * integrity.
 *
 * This operation interfaces directly with the `shopping_mall_order_statuses`
 * table, providing real-time status details such as status name and the
 * timestamp when the status was recorded. It is essential for presenting order
 * history and status timelines in customer and admin dashboards.
 *
 * The expected behavior includes returning a single order status entity if it
 * exists, or an appropriate error if the status or order does not exist.
 *
 * Errors for unauthorized access or non-existent entities must be handled
 * gracefully with suitable HTTP status codes.
 *
 * Path parameters orderId and statusId uniquely identify the order status
 * record in question.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.statusId Unique identifier of the target order status record
 * @path /shoppingMall/customer/orders/:orderId/statuses/:statusId
 * @accessor api.functional.shoppingMall.customer.orders.statuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target order status record */
    statusId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderStatus;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/statuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/statuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IShoppingMallOrderStatus =>
    typia.random<IShoppingMallOrderStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new order status record for specified order.
 *
 * Create a new order status record for an existing order to record a status
 * transition in the order lifecycle.
 *
 * This operation adds a new entry into the `shopping_mall_order_statuses` table
 * associating the given status and timestamp to the specified order.
 *
 * The request body should include the status value (e.g., Pending Payment,
 * Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the
 * status was set.
 *
 * Authorization ensures only permitted users (such as the owning customer,
 * related seller, or system administrators) can perform this update to maintain
 * data integrity and security.
 *
 * The response returns the created order status entity, confirming successful
 * addition into the system.
 *
 * Validation errors such as invalid status values or missing fields must be
 * properly reported.
 *
 * Business logic must enforce correct status transitions and timestamp
 * consistency if implemented in service layers.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.body Order status creation information
 * @path /shoppingMall/customer/orders/:orderId/statuses
 * @accessor api.functional.shoppingMall.customer.orders.statuses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Order status creation information */
    body: IShoppingMallOrderStatus.ICreate;
  };
  export type Body = IShoppingMallOrderStatus.ICreate;
  export type Response = IShoppingMallOrderStatus;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/statuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/statuses`;
  export const random = (): IShoppingMallOrderStatus =>
    typia.random<IShoppingMallOrderStatus>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
