import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallWishlist } from "../../../../structures/IShoppingMallWishlist";
import { IPageIShoppingMallWishlist } from "../../../../structures/IPageIShoppingMallWishlist";
export * as wishlistItems from "./wishlistItems/index";

/**
 * Create a new wishlist for a customer in shopping mall platform.
 *
 * Create a new shopping wishlist for a logged-in customer. The wishlist allows
 * customers to save product SKUs they wish to consider for future purchase.
 *
 * This operation requires authentication with the role "customer" indicating a
 * logged-in customer. The request must include the customer's unique ID to
 * associate the new wishlist. The system records creation and update timestamps
 * automatically. The wishlist is initially empty and can have items added via
 * separate operations.
 *
 * The operation maps directly to the shopping_mall_wishlists table in the
 * Prisma schema, covering fields: id (generated UUID),
 * shopping_mall_customer_id (customer linkage), created_at, updated_at, and
 * deleted_at (soft delete support).
 *
 * Validation will ensure the customer exists and is authorized to own a
 * wishlist. If validation fails, the operation will return an error.
 *
 * No response body besides the created wishlist entity is returned. Error
 * handling covers invalid customer IDs and unauthorized access.
 *
 * @param props.connection
 * @param props.body New wishlist creation data
 * @path /shoppingMall/customer/wishlists
 * @accessor api.functional.shoppingMall.customer.wishlists.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New wishlist creation data */
    body: IShoppingMallWishlist.ICreate;
  };
  export type Body = IShoppingMallWishlist.ICreate;
  export type Response = IShoppingMallWishlist;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/wishlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/wishlists";
  export const random = (): IShoppingMallWishlist =>
    typia.random<IShoppingMallWishlist>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of shopping wishlists.
 *
 * Retrieve a filtered and paginated list of shopping wishlist items for
 * authenticated customers on the shopping mall platform. This operation allows
 * users to search and browse their wishlist contents, supporting various filter
 * criteria such as SKU attributes or addition timestamps.
 *
 * This operation accesses the shopping_mall_wishlists table, which stores the
 * customer's wishlist metadata and related wishlist items in the subsidiary
 * shopping_mall_wishlist_items table.
 *
 * The operation enforces security by allowing only authenticated customers to
 * access their own wishlists. Pagination ensures scalable responses for large
 * wishlists.
 *
 * Related operations include retrieval of a single wishlist by its ID with
 * detailed items, adding/removing wishlist items, and managing the wishlist
 * itself.
 *
 * This operation returns a paginated summary of wishlist items with SKU details
 * suitable for rendering lists in UI.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for wishlist
 *   filtering
 * @path /shoppingMall/customer/wishlists
 * @accessor api.functional.shoppingMall.customer.wishlists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for wishlist filtering */
    body: IShoppingMallWishlist.IRequest;
  };
  export type Body = IShoppingMallWishlist.IRequest;
  export type Response = IPageIShoppingMallWishlist.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/wishlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/wishlists";
  export const random = (): IPageIShoppingMallWishlist.ISummary =>
    typia.random<IPageIShoppingMallWishlist.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific shopping wishlist by ID with detailed items.
 *
 * Retrieve a specific shopping wishlist and its items by wishlistId from the
 * shopping mall platform. This operation allows authenticated customers to view
 * details of a particular wishlist they own.
 *
 * The wishlist entity includes metadata and a list of SKU items added by the
 * customer for future purchase consideration.
 *
 * Access control ensures only the owning authenticated customer can retrieve
 * the wishlist details.
 *
 * This operation returns the full wishlist object suitable for editing or
 * detailed viewing in the user interface.
 *
 * @param props.connection
 * @param props.wishlistId Unique identifier of the target wishlist
 * @path /shoppingMall/customer/wishlists/:wishlistId
 * @accessor api.functional.shoppingMall.customer.wishlists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target wishlist */
    wishlistId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallWishlist;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/wishlists/:wishlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/wishlists/${encodeURIComponent(props.wishlistId ?? "null")}`;
  export const random = (): IShoppingMallWishlist =>
    typia.random<IShoppingMallWishlist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("wishlistId")(() => typia.assert(props.wishlistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update customer wishlist details by wishlist ID.
 *
 * Update an existing customer wishlist by its unique identifier. This operation
 * enables modification of wishlist properties according to allowed updates by
 * the owning customer.
 *
 * The request path must include the `wishlistId` UUID to identify the target
 * wishlist. Request body must contain the update data conforming to the
 * IShoppingMallWishlist.IUpdate schema.
 *
 * Authentication is required with role "customer" to ensure only authorized
 * owners can update their wishlists.
 *
 * The operation interacts with the shopping_mall_wishlists table in the Prisma
 * schema, managing fields such as `shopping_mall_customer_id` linkage and
 * timestamps.
 *
 * Validation includes checking wishlist existence, ownership, and update data
 * correctness. The response returns the updated wishlist entity.
 *
 * Errors comply with unauthorized access, invalid IDs, and validation failures.
 *
 * @param props.connection
 * @param props.wishlistId Unique identifier of the target wishlist to update
 * @param props.body Wishlist update data
 * @path /shoppingMall/customer/wishlists/:wishlistId
 * @accessor api.functional.shoppingMall.customer.wishlists.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target wishlist to update */
    wishlistId: string & tags.Format<"uuid">;

    /** Wishlist update data */
    body: IShoppingMallWishlist.IUpdate;
  };
  export type Body = IShoppingMallWishlist.IUpdate;
  export type Response = IShoppingMallWishlist;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/wishlists/:wishlistId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/wishlists/${encodeURIComponent(props.wishlistId ?? "null")}`;
  export const random = (): IShoppingMallWishlist =>
    typia.random<IShoppingMallWishlist>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("wishlistId")(() => typia.assert(props.wishlistId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping mall wishlist by ID.
 *
 * Delete an existing shopping mall wishlist identified by its unique
 * wishlistId. This operation permanently removes the wishlist from the database
 * along with any related wishlist items, ensuring no orphan records remain.
 *
 * Authorization is required to ensure that only the owning customer or
 * authorized administrative users can delete a wishlist. Once deleted, the
 * wishlist cannot be recovered.
 *
 * This operation targets the shopping_mall_wishlists table, which includes
 * references to the owning customer and contained wishlist items. All related
 * entities are cascade deleted to maintain data integrity.
 *
 * Clients must confirm ownership before invoking this API and handle any errors
 * if the wishlist is not found or the user is unauthorized.
 *
 * @param props.connection
 * @param props.wishlistId Unique identifier of the wishlist to delete
 * @path /shoppingMall/customer/wishlists/:wishlistId
 * @accessor api.functional.shoppingMall.customer.wishlists.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the wishlist to delete */
    wishlistId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/wishlists/:wishlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/wishlists/${encodeURIComponent(props.wishlistId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("wishlistId")(() => typia.assert(props.wishlistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
