import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductReview } from "../../../../structures/IShoppingMallProductReview";

/**
 * Create a new product review by an authenticated customer who purchased the
 * product.
 *
 * Allows customers to create a new review for a purchased product. The customer
 * must be authenticated with the role 'customer'. The review includes rating
 * (1-5), optional review text, and must refer to the order confirming purchase
 * to ensure eligibility. The review is initially set with status 'pending' for
 * moderation.
 *
 * This operation enforces the business rule that only verified buyers may post
 * reviews and returns the created review details including timestamps and
 * unique ID.
 *
 * Errors may occur if validation fails (e.g., rating out of range) or if
 * unauthorized access is attempted.
 *
 * @param props.connection
 * @param props.body New product review submission data
 * @path /shoppingMall/customer/productReviews
 * @accessor api.functional.shoppingMall.customer.productReviews.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New product review submission data */
    body: IShoppingMallProductReview.ICreate;
  };
  export type Body = IShoppingMallProductReview.ICreate;
  export type Response = IShoppingMallProductReview;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/productReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/productReviews";
  export const random = (): IShoppingMallProductReview =>
    typia.random<IShoppingMallProductReview>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing product review of authenticated customer by review ID.
 *
 * Enables customers to update their own submitted product reviews. The review
 * is identified by the UUID path parameter 'id'. Only authenticated customers
 * can perform this operation, and the moderation status is again set to
 * 'pending' upon update for fresh moderation.
 *
 * Typical validation errors include invalid rating values or unauthorized
 * attempts to update others' reviews.
 *
 * The operation returns updated review details, including timestamps to confirm
 * successful update.
 *
 * @param props.connection
 * @param props.id Unique identifier of the product review to update
 * @param props.body Updated product review data
 * @path /shoppingMall/customer/productReviews/:id
 * @accessor api.functional.shoppingMall.customer.productReviews.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product review to update */
    id: string & tags.Format<"uuid">;

    /** Updated product review data */
    body: IShoppingMallProductReview.IUpdate;
  };
  export type Body = IShoppingMallProductReview.IUpdate;
  export type Response = IShoppingMallProductReview;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/productReviews/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/productReviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallProductReview =>
    typia.random<IShoppingMallProductReview>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
