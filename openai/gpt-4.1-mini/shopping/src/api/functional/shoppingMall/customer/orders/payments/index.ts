import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallPayment } from "../../../../../structures/IShoppingMallPayment";

/**
 * Retrieve details of a specific payment for an order.
 *
 * Retrieve detailed information for the payment specified by payment ID and
 * order ID.
 *
 * Access control limits this to authenticated users with the 'customer' role.
 *
 * Returns full payment details including payment amount, method, status,
 * transaction ID, and confirmation timestamp.
 *
 * Errors occur if identifiers are incorrect or access is unauthorized.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.paymentId Unique identifier of the specific payment record
 * @path /shoppingMall/customer/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.customer.orders.payments.atPayment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atPayment(
  connection: IConnection,
  props: atPayment.Props,
): Promise<atPayment.Response> {
  return true === connection.simulate
    ? atPayment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atPayment.METADATA,
          path: atPayment.path(props),
          status: null,
        },
      );
}
export namespace atPayment {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific payment record */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: atPayment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atPayment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update payment record of a specific order.
 *
 * Updates an existing payment transaction record for the specified order and
 * payment IDs. Validates and applies changes to payment amount, method, status,
 * transaction ID, and confirmation timestamp.
 *
 * Restricted to authorized customers and sellers.
 *
 * Ensures that payment state is consistent and properly linked to the order.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.paymentId Unique identifier of the payment record to update
 * @param props.body Payment update data
 * @path /shoppingMall/customer/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.customer.orders.payments.putByOrderidAndPaymentid
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putByOrderidAndPaymentid(
  connection: IConnection,
  props: putByOrderidAndPaymentid.Props,
): Promise<putByOrderidAndPaymentid.Response> {
  return true === connection.simulate
    ? putByOrderidAndPaymentid.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putByOrderidAndPaymentid.METADATA,
          path: putByOrderidAndPaymentid.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putByOrderidAndPaymentid {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the payment record to update */
    paymentId: string & tags.Format<"uuid">;

    /** Payment update data */
    body: IShoppingMallPayment.IUpdate;
  };
  export type Body = IShoppingMallPayment.IUpdate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: putByOrderidAndPaymentid.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putByOrderidAndPaymentid.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing payment record for a specific order.
 *
 * Update payment details for the specified payment ID belonging to a specific
 * order. This includes fields such as payment amount, payment method, payment
 * status, transaction ID, and confirmed timestamp.
 *
 * Security considerations: Only authenticated users with the 'customer' role
 * are authorized to perform this update to protect payment data integrity.
 *
 * This operation is related to the shopping_mall_payments table which stores
 * transactional payment data linked to orders.
 *
 * Validation requires properly formatted UUIDs for orderId and paymentId path
 * parameters, and a request body conforming to the IShoppingMallPayment.IUpdate
 * schema.
 *
 * On success, the updated payment information is returned. Errors may occur if
 * IDs are invalid, payment record is not found, or user lacks requisite
 * permissions.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.paymentId Unique identifier of the specific payment record
 * @param props.body Update information for the payment record
 * @path /shoppingMall/customer/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.customer.orders.payments.patchByOrderidAndPaymentid
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patchByOrderidAndPaymentid(
  connection: IConnection,
  props: patchByOrderidAndPaymentid.Props,
): Promise<patchByOrderidAndPaymentid.Response> {
  return true === connection.simulate
    ? patchByOrderidAndPaymentid.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patchByOrderidAndPaymentid.METADATA,
          path: patchByOrderidAndPaymentid.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace patchByOrderidAndPaymentid {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific payment record */
    paymentId: string & tags.Format<"uuid">;

    /** Update information for the payment record */
    body: IShoppingMallPayment.IUpdate;
  };
  export type Body = IShoppingMallPayment.IUpdate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: patchByOrderidAndPaymentid.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patchByOrderidAndPaymentid.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a payment record for a specific order.
 *
 * Creates a new payment transaction record for the specified order. The
 * operation validates payment details including payment method, amount, and
 * status. The payment is linked to the order for transaction tracking.
 *
 * This endpoint can only be accessed by authenticated customers and sellers who
 * have appropriate permissions for the order.
 *
 * Relies on the shopping_mall_payments table for storing payment info and
 * shopping_mall_orders for order association. Proper error handling is
 * essential to indicate payment failures or data issues.
 *
 * Returned data includes the created payment record with its identifiers and
 * timestamps for client confirmation.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.body Payment creation data
 * @path /shoppingMall/customer/orders/:orderId/payments
 * @accessor api.functional.shoppingMall.customer.orders.payments.createPayment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createPayment(
  connection: IConnection,
  props: createPayment.Props,
): Promise<createPayment.Response> {
  return true === connection.simulate
    ? createPayment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createPayment.METADATA,
          path: createPayment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createPayment {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Payment creation data */
    body: IShoppingMallPayment.ICreate;
  };
  export type Body = IShoppingMallPayment.ICreate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: createPayment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createPayment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
