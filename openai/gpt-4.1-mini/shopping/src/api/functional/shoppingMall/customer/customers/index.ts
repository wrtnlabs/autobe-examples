import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../structures/IShoppingMallCustomer";

/**
 * Retrieve detailed customer information by ID.
 *
 * Retrieve full profile information of a specific customer identified by the
 * UUID path parameter.
 *
 * This operation supports authenticated users (role: customer) to fetch
 * customer details necessary for profile display and order management. The
 * response includes all relevant customer fields except sensitive
 * authentication data like the password hash.
 *
 * Path parameter 'id' must be a valid UUID corresponding to an existing
 * customer record. Attempting to access with invalid or non-existent UUID
 * results in error.
 *
 * No request body is needed for this GET operation. The data is fetched from
 * the shopping_mall_customers table reflecting the current state including the
 * soft-delete status.
 *
 * Authorization ensures only authorized users can access this endpoint,
 * protecting sensitive user data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target customer
 * @path /shoppingMall/customer/customers/:id
 * @accessor api.functional.shoppingMall.customer.customers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target customer */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCustomer;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/customers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/customers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallCustomer =>
    typia.random<IShoppingMallCustomer>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a shopping mall customer account by ID.
 *
 * Update an existing customer account by specifying the customer's unique ID in
 * the path parameter.
 *
 * This operation allows updates to allowed mutable fields such as nickname,
 * phone number, and account status while prohibiting changes to immutable
 * fields such as email.
 *
 * Input data must be validated to ensure updated values meet business rules,
 * such as status values being valid and phone numbers properly formatted.
 *
 * Security considerations require that only authorized users can perform
 * updates on customer data, typically the customer themselves or
 * administrators.
 *
 * Successful updates return the fresh customer record reflecting the new data.
 *
 * This operation interacts with the shopping_mall_customers table defined in
 * the Prisma schema, using the UUID 'id' as the primary identifier.
 *
 * Errors should be handled gracefully, returning appropriate HTTP status codes
 * and messages for invalid input, unauthorized access, or conflicts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target customer
 * @param props.body Customer update data
 * @path /shoppingMall/customer/customers/:id
 * @accessor api.functional.shoppingMall.customer.customers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target customer */
    id: string & tags.Format<"uuid">;

    /** Customer update data */
    body: IShoppingMallCustomer.IUpdate;
  };
  export type Body = IShoppingMallCustomer.IUpdate;
  export type Response = IShoppingMallCustomer;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/customers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/customers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallCustomer =>
    typia.random<IShoppingMallCustomer>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a shopping mall customer account by ID.
 *
 * Deletes a customer account identified by the 'id' parameter. This performs a
 * soft delete by setting the deleted_at timestamp, preserving the data for
 * audit compliance.
 *
 * Security considerations: This operation requires appropriate authorization to
 * prevent unauthorized account deletions.
 *
 * No request body is necessary since the path parameter fully specifies the
 * target customer.
 *
 * Successful execution responds with a 204 No Content status.
 *
 * Errors respond appropriately for invalid identifiers or insufficient
 * permissions.
 *
 * This operation interacts with the shopping_mall_customers table in Prisma
 * schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target customer
 * @path /shoppingMall/customer/customers/:id
 * @accessor api.functional.shoppingMall.customer.customers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target customer */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/customers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/customers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
