import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCancellationRequest } from "../../../../../structures/IShoppingMallCancellationRequest";

/**
 * Retrieve a specific cancellation request for an order.
 *
 * Retrieve a specific cancellation request linked to the given order ID and
 * cancellation request ID.
 *
 * The cancellation request includes details such as the request reason, status
 * of the cancellation request (Pending, Approved, Rejected), the request and
 * response timestamps, along with the associated customer and order
 * identifiers.
 *
 * Access to this operation is limited to authenticated users with roles:
 * customer, seller, or admin, ensuring secure and privacy-compliant data
 * handling.
 *
 * This endpoint corresponds to the shopping_mall_cancellation_requests table
 * and provides full details about the cancellation request for client viewing
 * or administrative processing.
 *
 * Error handling includes responses for invalid IDs, unauthorized access, or
 * missing resources.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.cancellationRequestId Unique identifier of the cancellation
 *   request
 * @path /shoppingMall/customer/orders/:orderId/cancellationRequests/:cancellationRequestId
 * @accessor api.functional.shoppingMall.customer.orders.cancellationRequests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the cancellation request */
    cancellationRequestId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCancellationRequest;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/cancellationRequests/:cancellationRequestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellationRequests/${encodeURIComponent(props.cancellationRequestId ?? "null")}`;
  export const random = (): IShoppingMallCancellationRequest =>
    typia.random<IShoppingMallCancellationRequest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationRequestId")(() =>
        typia.assert(props.cancellationRequestId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update cancellation request for a specified order.
 *
 * Update an existing cancellation request for a specified order.
 *
 * This operation allows authorized customers to modify the details of a
 * cancellation request associated with a specific order. The cancellation
 * request is identified by its unique ID and the parent order ID. Customers can
 * update fields such as the reason for cancellation, status of the request, as
 * well as relevant timestamps.
 *
 * Security considerations require that only authenticated and authorized
 * customers can update their own cancellation requests to prevent unauthorized
 * changes. The operation uses a PUT HTTP method as it expects a complete update
 * payload.
 *
 * This API directly manipulates the shopping_mall_cancellation_requests table,
 * enforcing all data constraints defined in the Prisma DB schema. The update
 * operation also integrates with order management workflows ensuring the
 * cancellation request status aligns with the overall order state.
 *
 * The operation should return the updated cancellation request entity on
 * success. Errors may occur due to invalid input, authorization failures, or
 * business rule violations such as attempting to update a cancellation request
 * that is already processed.
 *
 * Related API operations to consider for comprehensive management include
 * creating cancellation requests and fetching their details.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.cancellationRequestId Unique identifier of the cancellation
 *   request
 * @param props.body Update information of the cancellation request
 * @path /shoppingMall/customer/orders/:orderId/cancellationRequests/:cancellationRequestId
 * @accessor api.functional.shoppingMall.customer.orders.cancellationRequests.updateCancellationRequest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCancellationRequest(
  connection: IConnection,
  props: updateCancellationRequest.Props,
): Promise<updateCancellationRequest.Response> {
  return true === connection.simulate
    ? updateCancellationRequest.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCancellationRequest.METADATA,
          path: updateCancellationRequest.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCancellationRequest {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the cancellation request */
    cancellationRequestId: string & tags.Format<"uuid">;

    /** Update information of the cancellation request */
    body: IShoppingMallCancellationRequest.IUpdate;
  };
  export type Body = IShoppingMallCancellationRequest.IUpdate;
  export type Response = IShoppingMallCancellationRequest;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId/cancellationRequests/:cancellationRequestId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellationRequests/${encodeURIComponent(props.cancellationRequestId ?? "null")}`;
  export const random = (): IShoppingMallCancellationRequest =>
    typia.random<IShoppingMallCancellationRequest>();
  export const simulate = (
    connection: IConnection,
    props: updateCancellationRequest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCancellationRequest.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationRequestId")(() =>
        typia.assert(props.cancellationRequestId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete cancellation request for a specified order.
 *
 * Delete a specific cancellation request for a specified order.
 *
 * This operation allows authorized customers to permanently remove a
 * cancellation request related to a particular order. The cancellation request
 * is identified by both order ID and cancellation request ID parameters. Only
 * authenticated customers with appropriate permissions can perform this
 * deletion.
 *
 * The delete action permanently removes the record from the
 * shopping_mall_cancellation_requests table without soft delete marking. It
 * ensures integrity by checking ownership and preventing unauthorized
 * deletion.
 *
 * Successful deletion is confirmed through the standard HTTP status code with
 * no response body. Errors may arise from invalid IDs, authorization failures,
 * or attempts to delete non-existent requests.
 *
 * This operation complements related APIs such as creating and updating
 * cancellation requests and viewing their details.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.cancellationRequestId Unique identifier of the cancellation
 *   request
 * @path /shoppingMall/customer/orders/:orderId/cancellationRequests/:cancellationRequestId
 * @accessor api.functional.shoppingMall.customer.orders.cancellationRequests.eraseCancellationRequest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCancellationRequest(
  connection: IConnection,
  props: eraseCancellationRequest.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCancellationRequest.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCancellationRequest.METADATA,
          path: eraseCancellationRequest.path(props),
          status: null,
        },
      );
}
export namespace eraseCancellationRequest {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the cancellation request */
    cancellationRequestId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/orders/:orderId/cancellationRequests/:cancellationRequestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellationRequests/${encodeURIComponent(props.cancellationRequestId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCancellationRequest.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCancellationRequest.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationRequestId")(() =>
        typia.assert(props.cancellationRequestId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new cancellation request for an order.
 *
 * Create a cancellation request linked to a specific order. The request body
 * must include the reason for cancellation and the customer ID initiating the
 * request.
 *
 * The status is set to 'Pending' by default on creation.
 *
 * This operation checks that the requesting user has permission to create a
 * cancellation request for the target order.
 *
 * Cancellation requests are persisted in the
 * shopping_mall_cancellation_requests table and returned in the response.
 *
 * Roles authorized to use this endpoint are customer, seller, and admin.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.body Creation info of the cancellation request
 * @path /shoppingMall/customer/orders/:orderId/cancellationRequests
 * @accessor api.functional.shoppingMall.customer.orders.cancellationRequests.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Creation info of the cancellation request */
    body: IShoppingMallCancellationRequest.ICreate;
  };
  export type Body = IShoppingMallCancellationRequest.ICreate;
  export type Response = IShoppingMallCancellationRequest;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/cancellationRequests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellationRequests`;
  export const random = (): IShoppingMallCancellationRequest =>
    typia.random<IShoppingMallCancellationRequest>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
