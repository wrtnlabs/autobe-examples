import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCartItem } from "../../../../../structures/IShoppingMallCartItem";
import { IPageIShoppingMallCartItem } from "../../../../../structures/IPageIShoppingMallCartItem";

/**
 * Create a new cart item in a customer's shopping cart.
 *
 * Add a new item to the specified shopping cart by providing SKU ID and
 * quantity in the request body. The shoppingCartId path parameter identifies
 * the target cart.
 *
 * Request body must conform to IShoppingMallCartItem.ICreate.
 *
 * Only authenticated customers may add items to their carts.
 *
 * Response includes the full cart item data upon successful creation.
 *
 * Errors are returned for validation failures or unauthorized access.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique UUID identifying the shopping cart to add
 *   the item to
 * @param props.body Payload containing SKU and quantity for new cart item
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.cartItems.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique UUID identifying the shopping cart to add the item to */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Payload containing SKU and quantity for new cart item */
    body: IShoppingMallCartItem.ICreate;
  };
  export type Body = IShoppingMallCartItem.ICreate;
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}/cartItems`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get and update items in a shopping cart.
 *
 * Retrieve and update the list of items in a specific shopping cart identified
 * by 'shoppingCartId'. This operation supports complex queries, filters,
 * pagination, and bulk updates of cart items.
 *
 * The shopping cart ID path parameter must be a valid UUID corresponding to the
 * 'id' field in 'shopping_mall_shopping_carts'.
 *
 * Request body includes search or update criteria defined in
 * 'ShoppingMallCartItem.IRequest' data structure.
 *
 * The response returns a paginated collection of shopping cart items, each
 * including SKU references, quantities, and timestamps.
 *
 * Access is restricted to authenticated customers who own the shopping cart.
 *
 * This operation is essential for customers to manage the precise contents and
 * quantities in their shopping carts, reflecting product availability and user
 * intentions.
 *
 * Errors are managed through validation responses and authorization checks.
 *
 * @param props.connection
 * @param props.shoppingCartId Identifier of the shopping cart to access its
 *   items
 * @param props.body Search and update criteria for shopping cart items
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.cartItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the shopping cart to access its items */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Search and update criteria for shopping cart items */
    body: IShoppingMallCartItem.IRequest;
  };
  export type Body = IShoppingMallCartItem.IRequest;
  export type Response = IPageIShoppingMallCartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}/cartItems`;
  export const random = (): IPageIShoppingMallCartItem =>
    typia.random<IPageIShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific cart item by its ID within a shopping cart.
 *
 * Retrieve detailed information of a specific item in a shopping cart. This
 * endpoint requires the unique UUIDs of the shopping cart and the cart item to
 * accurately identify the item.
 *
 * Only authenticated customers can access this endpoint to protect user data
 * privacy.
 *
 * The response contains the full details of the cart item including SKU ID,
 * quantity, creation timestamp, and update timestamp.
 *
 * Errors are returned if the specified cart or cart item does not exist or
 * belong to the authenticated user.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique UUID identifying the shopping cart
 * @param props.cartItemId Unique UUID identifying the cart item within the
 *   shopping cart
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems/:cartItemId
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.cartItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID identifying the shopping cart */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Unique UUID identifying the cart item within the shopping cart */
    cartItemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a cart item in the shopping mall platform.
 *
 * Update a specific cart item within a shopping cart by its ID. This operation
 * allows authenticated customers to modify the quantity or other modifiable
 * fields of an item they previously added to their shopping cart.
 *
 * Security considerations limit this operation to authenticated users with the
 * "customer" role to ensure cart item ownership and prevent unauthorized
 * modifications.
 *
 * The underlying database entity is the shopping_mall_cart_items table, which
 * links shopping carts with SKU variants and tracks quantities.
 *
 * Validation rules enforce that the updated quantity must be a positive integer
 * and conform to business inventory constraints.
 *
 * This operation is typically used in the shopping cart management user
 * interface when adjusting quantities or correcting cart contents before order
 * placement.
 *
 * Errors returned include 404 if the cart item or shopping cart IDs do not
 * exist or are unauthorized, and 400 for invalid quantity values.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique identifier of the shopping cart
 * @param props.cartItemId Unique identifier of the cart item
 * @param props.body Editable fields for updating a shopping cart item
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems/:cartItemId
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.cartItems.updateCartItem
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCartItem(
  connection: IConnection,
  props: updateCartItem.Props,
): Promise<updateCartItem.Response> {
  return true === connection.simulate
    ? updateCartItem.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCartItem.METADATA,
          path: updateCartItem.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCartItem {
  export type Props = {
    /** Unique identifier of the shopping cart */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Unique identifier of the cart item */
    cartItemId: string & tags.Format<"uuid">;

    /** Editable fields for updating a shopping cart item */
    body: IShoppingMallCartItem.IUpdate;
  };
  export type Body = IShoppingMallCartItem.IUpdate;
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems/:cartItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: updateCartItem.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCartItem.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a cart item from the shopping mall platform.
 *
 * Delete a specific cart item within a shopping cart by its ID. This operation
 * permanently removes the item from the customer's shopping cart.
 *
 * Authorization is limited to authenticated users under the "customer" role to
 * guarantee that only the owner of the cart can delete items.
 *
 * This operation acts on the shopping_mall_cart_items database table records
 * permanently with NO soft deletion.
 *
 * Errors include 404 if the shopping cart or the cart item ID do not correspond
 * to any existing record or the user is unauthorized to delete the cart item.
 *
 * There is no response body for this operation.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique identifier of the shopping cart
 * @param props.cartItemId Unique identifier of the cart item
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems/:cartItemId
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.cartItems.eraseCartItem
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCartItem(
  connection: IConnection,
  props: eraseCartItem.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCartItem.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCartItem.METADATA,
          path: eraseCartItem.path(props),
          status: null,
        },
      );
}
export namespace eraseCartItem {
  export type Props = {
    /** Unique identifier of the shopping cart */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Unique identifier of the cart item */
    cartItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCartItem.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCartItem.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
