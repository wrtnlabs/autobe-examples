import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallShoppingCart } from "../../../../structures/IShoppingMallShoppingCart";
import { IPageIShoppingMallShoppingCart } from "../../../../structures/IPageIShoppingMallShoppingCart";
export * as cartItems from "./cartItems/index";

/**
 * Create a new shopping cart for a customer or guest session.
 *
 * Creates a new shopping cart linked either to a registered customer or a guest
 * session ID, enabling SKU items to be saved for subsequent order placement.
 * The operation prevents creating duplicate carts for the same customer or
 * session. It stores the customer's reference ID or session ID, timestamps for
 * creation and update, and optional soft delete timestamp.
 *
 * User roles authorized to call this operation include authenticated customers
 * and guests with valid session IDs. Proper validation of the associated
 * customer or session is performed.
 *
 * Related operations include updating the cart and managing cart items. Errors
 * include conflict if a cart already exists for the customer or session, or
 * validation errors for missing required fields.
 *
 * @param props.connection
 * @param props.body Request body schema for creating a shopping cart
 * @path /shoppingMall/customer/shoppingCarts
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Request body schema for creating a shopping cart */
    body: IShoppingMallShoppingCart.ICreate;
  };
  export type Body = IShoppingMallShoppingCart.ICreate;
  export type Response = IShoppingMallShoppingCart;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/shoppingCarts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/shoppingCarts";
  export const random = (): IShoppingMallShoppingCart =>
    typia.random<IShoppingMallShoppingCart>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of shopping carts.
 *
 * This API endpoint allows an authenticated customer user to search for
 * shopping carts within the system using complex filtering, sorting, and
 * pagination options. Shopping carts represent collections of SKU items
 * customers intend to purchase and are linked to customers or optionally guests
 * via sessions.
 *
 * The response includes a paginated list of shopping cart summaries conforming
 * to the shopping_mall_shopping_carts schema, reflecting creation and update
 * timestamps.
 *
 * Security considerations restrict access to authenticated customers. Proper
 * filtering ensures users see only relevant carts, typically their own.
 *
 * Related operations include retrieving the detailed content of a specific
 * shopping cart by its unique identifier, which complements this search
 * operation.
 *
 * Error handling includes validation of search parameters and limits to prevent
 * excessive data retrieval.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for shopping cart
 *   filtering
 * @path /shoppingMall/customer/shoppingCarts
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for shopping cart filtering */
    body: IShoppingMallShoppingCart.IRequest;
  };
  export type Body = IShoppingMallShoppingCart.IRequest;
  export type Response = IPageIShoppingMallShoppingCart.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/shoppingCarts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/shoppingCarts";
  export const random = (): IPageIShoppingMallShoppingCart.ISummary =>
    typia.random<IPageIShoppingMallShoppingCart.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific shopping cart.
 *
 * Retrieve a specific shopping cart by its unique ID to obtain detailed
 * information about the cart contents and metadata. Shopping carts are
 * collections of SKU items associated with a customer or a guest session.
 *
 * This operation returns detailed shopping cart data as defined in the
 * shopping_mall_shopping_carts schema:
 *
 * - Shopping cart metadata such as creation and update timestamps
 * - Included cart items with quantities
 * - Associated SKU details
 *
 * Security considerations require that users retrieve only their own carts or
 * authorized carts. Proper authentication and authorization must be enforced.
 *
 * This operation complements the search operation, which provides paginated
 * lists of many carts.
 *
 * Errors include handling non-existent cart IDs and unauthorized access
 * attempts.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique identifier of the target shopping cart
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target shopping cart */
    shoppingCartId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallShoppingCart;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}`;
  export const random = (): IShoppingMallShoppingCart =>
    typia.random<IShoppingMallShoppingCart>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update shopping cart details identified by ID.
 *
 * Updates a shopping cart by its unique ID, allowing modification of the
 * associated customer or guest session ID, along with updated timestamps.
 * Ensures only authorized users (customers and guests) can update their carts.
 *
 * This is vital for maintaining accurate cart linkage in user sessions. Related
 * operations include cart item management and cart retrieval.
 *
 * Possible errors include not found if the cart ID does not exist,
 * authorization failure if the updater does not own the cart, or validation
 * errors on provided input.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique identifier of the shopping cart to update
 * @param props.body Request body schema for updating a shopping cart
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the shopping cart to update */
    shoppingCartId: string & tags.Format<"uuid">;

    /** Request body schema for updating a shopping cart */
    body: IShoppingMallShoppingCart.IUpdate;
  };
  export type Body = IShoppingMallShoppingCart.IUpdate;
  export type Response = IShoppingMallShoppingCart;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}`;
  export const random = (): IShoppingMallShoppingCart =>
    typia.random<IShoppingMallShoppingCart>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping cart by ID.
 *
 * This API deletes a specific shopping cart by its ID, fully removing it from
 * the database. The shopping cart is identified by the 'shoppingCartId' path
 * parameter, corresponding to the 'id' field in the
 * 'shopping_mall_shopping_carts' Prisma table.
 *
 * Deletion is permanent and cannot be undone. This operation is authorized for
 * authenticated users, ensuring only owners or authorized personnel can delete
 * their carts.
 *
 * The operation does not require a request body, and no response body is
 * returned upon successful completion.
 *
 * Proper validation on the ID parameter ensures requests target valid shopping
 * cart entries. Error handling will manage non-existing IDs or access
 * violations.
 *
 * @param props.connection
 * @param props.shoppingCartId Unique identifier of the shopping cart to be
 *   deleted
 * @path /shoppingMall/customer/shoppingCarts/:shoppingCartId
 * @accessor api.functional.shoppingMall.customer.shoppingCarts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the shopping cart to be deleted */
    shoppingCartId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/shoppingCarts/:shoppingCartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/shoppingCarts/${encodeURIComponent(props.shoppingCartId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingCartId")(() => typia.assert(props.shoppingCartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
