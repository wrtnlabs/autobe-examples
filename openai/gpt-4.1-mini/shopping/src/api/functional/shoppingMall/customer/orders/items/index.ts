import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderItem } from "../../../../../structures/IShoppingMallOrderItem";

/**
 * Retrieve detailed information about a specific order item by IDs.
 *
 * This GET /orders/{orderId}/items/{orderItemId} API endpoint provides detailed
 * information about a single order item within a specific order. The operation
 * returns SKU association, quantity ordered, unit price, and total price for
 * that item. Users authorized include customers who placed the order, sellers
 * fulfilling the order, and admins overseeing the platform.
 *
 * Parameters:
 *
 * - OrderId: UUID of the order containing the item
 * - OrderItemId: UUID of the order item to retrieve
 *
 * No request body is needed as this is a retrieval operation.
 *
 * Errors handled include invalid or non-existent IDs, authorization failures,
 * and not found responses.
 *
 * This operation directly maps to the Prisma model shopping_mall_order_items.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order
 * @param props.orderItemId Unique identifier of the order item
 * @path /shoppingMall/customer/orders/:orderId/items/:orderItemId
 * @accessor api.functional.shoppingMall.customer.orders.items.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the order item */
    orderItemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/items/:orderItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.orderItemId ?? "null")}`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderItemId")(() => typia.assert(props.orderItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific order item within an order.
 *
 * This operation updates details of a particular order item identified by its
 * ID and associated order ID.
 *
 * Users authorized to update order items (such as the customer owning the
 * order, the related seller, or administrators) can modify the quantity
 * ordered, the unit price, or the total price. It is crucial to validate that
 * the updated quantity does not exceed available SKU inventory to avoid
 * overselling.
 *
 * The API updates the shopping_mall_order_items record in the database,
 * ensuring the order's financial and inventory calculations reflect the new
 * item details. Incorrect updates can lead to accounting errors or shipment
 * mismatches, so proper validation and authorization are essential.
 *
 * Related operations include retrieving order details to view current items and
 * managing inventory to adjust stock following order modifications.
 *
 * This operation permanently updates the order item record; no soft deletion or
 * recovery applies here. Proper concurrency control should be applied to
 * prevent race conditions in updates.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.orderItemId Unique identifier of the target order item
 * @param props.body Updated information for order item modification
 * @path /shoppingMall/customer/orders/:orderId/items/:orderItemId
 * @accessor api.functional.shoppingMall.customer.orders.items.updateOrderItem
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateOrderItem(
  connection: IConnection,
  props: updateOrderItem.Props,
): Promise<updateOrderItem.Response> {
  return true === connection.simulate
    ? updateOrderItem.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateOrderItem.METADATA,
          path: updateOrderItem.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateOrderItem {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target order item */
    orderItemId: string & tags.Format<"uuid">;

    /** Updated information for order item modification */
    body: IShoppingMallOrderItem.IUpdate;
  };
  export type Body = IShoppingMallOrderItem.IUpdate;
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId/items/:orderItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.orderItemId ?? "null")}`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: updateOrderItem.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateOrderItem.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderItemId")(() => typia.assert(props.orderItemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific order item from an order.
 *
 * This operation permanently removes a specific order item from the given
 * order.
 *
 * Authorized users, such as the customer who placed the order, the seller, or
 * administrators, can delete an order item to modify order contents before
 * processing or shipment. The removal updates the order's totals and may
 * trigger inventory adjustments to restock the SKU quantities.
 *
 * Deleting an order item is irreversible and fully removes the record from the
 * database. There is no soft delete functionality for order items as they are
 * tightly linked to transactional order data.
 *
 * Related operations include listing order items, updating order items, and
 * managing inventory stock accordingly.
 *
 * Ensure that deletion transactions are handled carefully to maintain data
 * consistency and prevent orphaned references.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.orderItemId Unique identifier of the target order item
 * @path /shoppingMall/customer/orders/:orderId/items/:orderItemId
 * @accessor api.functional.shoppingMall.customer.orders.items.eraseOrderItem
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseOrderItem(
  connection: IConnection,
  props: eraseOrderItem.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseOrderItem.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseOrderItem.METADATA,
          path: eraseOrderItem.path(props),
          status: null,
        },
      );
}
export namespace eraseOrderItem {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target order item */
    orderItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/orders/:orderId/items/:orderItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.orderItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseOrderItem.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseOrderItem.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderItemId")(() => typia.assert(props.orderItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Add a new item to an existing order.
 *
 * This POST /orders/{orderId}/items endpoint allows creation of an order item
 * within an existing order. Users authorized include the customer who owns the
 * order, the seller responsible for the product, and admins.
 *
 * Request body must include:
 *
 * - Shopping_mall_sku_id: UUID of the product SKU
 * - Quantity: Number of units ordered
 * - Unit_price: Price per unit at order time
 * - Total_price: Total price for this SKU (quantity x unit_price)
 *
 * Response contains full details of the created order item.
 *
 * This operation requires careful validation of SKU availability, pricing
 * integrity, and order ownership.
 *
 * This API interacts directly with the shopping_mall_order_items schema in
 * Prisma.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order to add an item to
 * @param props.body Details for creating a new order item
 * @path /shoppingMall/customer/orders/:orderId/items
 * @accessor api.functional.shoppingMall.customer.orders.items.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the order to add an item to */
    orderId: string & tags.Format<"uuid">;

    /** Details for creating a new order item */
    body: IShoppingMallOrderItem.ICreate;
  };
  export type Body = IShoppingMallOrderItem.ICreate;
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
