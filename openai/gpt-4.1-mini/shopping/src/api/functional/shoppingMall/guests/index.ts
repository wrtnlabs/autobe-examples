import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallGuest } from "../../../structures/IShoppingMallGuest";

/**
 * Create a guest user session for an unauthenticated visitor.
 *
 * Create a new guest user session record in the system. This endpoint generates
 * a unique guest entity for an unauthenticated visitor session identified by a
 * session token. Optional IP address and user agent fields can capture
 * additional metadata about the guest's browsing environment. The record
 * includes timestamps for creation and updates, and supports soft deletion for
 * archival purposes.
 *
 * This operation is typically invoked when a guest user accesses the platform
 * to establish a unique session for tracking and personalized experiences.
 *
 * Security considerations include ensuring the uniqueness and unpredictability
 * of the sessionToken to prevent session hijacking or duplication.
 *
 * Upon successful creation, the full guest record with all properties including
 * timestamps is returned.
 *
 * @param props.connection
 * @param props.body Payload for creating a new guest user session
 * @path /shoppingMall/guests
 * @accessor api.functional.shoppingMall.guests.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload for creating a new guest user session */
    body: IShoppingMallGuest.ICreate;
  };
  export type Body = IShoppingMallGuest.ICreate;
  export type Response = IShoppingMallGuest;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/guests";
  export const random = (): IShoppingMallGuest =>
    typia.random<IShoppingMallGuest>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a guest user session by its unique identifier.
 *
 * Update an existing guest user session identified by the guest UUID. The
 * update may modify the session token, IP address, and user agent fields to
 * reflect changes in the browsing session or device state. Timestamps are
 * maintained automatically. Soft deletion is supported with nullable deleted_at
 * field.
 *
 * This operation requires the guest's UUID as a path parameter to identify the
 * relevant session record to update.
 *
 * Authorization roles for this endpoint are empty as guest sessions do not
 * require authentication.
 *
 * Returns the updated guest user session data on success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the guest user session
 * @param props.body Payload with updated guest user session fields
 * @path /shoppingMall/guests/:id
 * @accessor api.functional.shoppingMall.guests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the guest user session */
    id: string & tags.Format<"uuid">;

    /** Payload with updated guest user session fields */
    body: IShoppingMallGuest.IUpdate;
  };
  export type Body = IShoppingMallGuest.IUpdate;
  export type Response = IShoppingMallGuest;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/guests/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallGuest =>
    typia.random<IShoppingMallGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete guest user by ID.
 *
 * Deletes a guest user from the shopping mall system by their unique ID.
 *
 * Guest users represent unauthenticated visitors with session information
 * including session tokens, IP addresses, and user agents. Deletion is a
 * permanent remove operation, fully clearing this data.
 *
 * Only the ID of the guest user is needed.
 *
 * No response body is returned upon success.
 *
 * No authorization roles are required since this is a system-level cleanup
 * action on guest records.
 *
 * This operation interacts directly with the shopping_mall_guests table in the
 * database.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target guest user
 * @path /shoppingMall/guests/:id
 * @accessor api.functional.shoppingMall.guests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target guest user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/guests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
