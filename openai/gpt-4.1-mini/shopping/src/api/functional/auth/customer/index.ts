import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../structures/IShoppingMallCustomer";

/**
 * Registration endpoint for shoppingMall customers to create new accounts and
 * receive JWT tokens upon successful registration, referencing
 * shopping_mall_customers table.
 *
 * This API endpoint allows new customers to register on the shoppingMall
 * platform by providing their unique email and password. It stores the email
 * and securely hashed password in the shopping_mall_customers table, setting
 * the initial status as active. The registration response includes authorized
 * JWT tokens to enable immediate authenticated access. This operation strictly
 * validates the email uniqueness and enforces password security as per platform
 * rules. The registration process does not include profile details beyond
 * authentication credentials at this stage.
 *
 * @param props.connection
 * @param props.body Customer registration request body containing email and
 *   password information.
 * @setHeader token.access Authorization
 *
 * @path /auth/customer/join
 * @accessor api.functional.auth.customer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Customer registration request body containing email and password
     * information.
     */
    body: IShoppingMallCustomer.IJoin;
  };
  export type Body = IShoppingMallCustomer.IJoin;
  export type Response = IShoppingMallCustomer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/join";
  export const random = (): IShoppingMallCustomer.IAuthorized =>
    typia.random<IShoppingMallCustomer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login endpoint for shoppingMall customers using email and password, returning
 * JWT tokens, referencing shopping_mall_customers table.
 *
 * This endpoint authenticates customers on the shoppingMall platform by
 * validating their email and password. It checks the credentials against stored
 * hashed passwords in the shopping_mall_customers table. Upon successful
 * authentication, a JWT token set is issued for session management. This
 * operation follows the security policies prescribed, including password
 * strength validation and session token generation.
 *
 * @param props.connection
 * @param props.body Customer login request payload with email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/customer/login
 * @accessor api.functional.auth.customer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Customer login request payload with email and password. */
    body: IShoppingMallCustomer.ILogin;
  };
  export type Body = IShoppingMallCustomer.ILogin;
  export type Response = IShoppingMallCustomer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/login";
  export const random = (): IShoppingMallCustomer.IAuthorized =>
    typia.random<IShoppingMallCustomer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh tokens for authenticated shoppingMall customers to maintain secure
 * sessions, referencing shopping_mall_customers table.
 *
 * This API endpoint allows authenticated customers to refresh their JWT tokens
 * by providing a valid refresh token. Users receive new JWT tokens extending
 * their session securely without re-authentication. The system validates
 * existing refresh tokens and issues updated tokens accordingly. This mechanism
 * maintains secure, continuous user sessions aligned with shoppingMall platform
 * security protocols.
 *
 * @param props.connection
 * @param props.body Token refresh request payload containing the refresh token.
 * @setHeader token.access Authorization
 *
 * @path /auth/customer/refresh
 * @accessor api.functional.auth.customer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Token refresh request payload containing the refresh token. */
    body: IShoppingMallCustomer.IRefresh;
  };
  export type Body = IShoppingMallCustomer.IRefresh;
  export type Response = IShoppingMallCustomer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/refresh";
  export const random = (): IShoppingMallCustomer.IAuthorized =>
    typia.random<IShoppingMallCustomer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
