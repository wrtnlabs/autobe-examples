import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../structures/IShoppingMallSeller";

/**
 * Create new seller account and issue authentication token based on
 * shopping_mall_sellers.
 *
 * Creates a new seller account with unique email and password credentials,
 * assigning the initial status and issuing authentication JWT tokens upon
 * successful registration. Utilizes fields such as `email` and `password_hash`
 * from the shopping_mall_sellers table as core identity attributes. Includes
 * optional fields like company_name, contact_name, phone_number, and status
 * with default 'active'. Enables secure seller onboarding compatible with the
 * shoppingMall platform authentication requirements.
 *
 * @param props.connection
 * @param props.body Seller registration information including email, password
 *   hash, and optional company details
 * @setHeader token.access Authorization
 *
 * @path /auth/seller/join
 * @accessor api.functional.auth.seller.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Seller registration information including email, password hash, and
     * optional company details
     */
    body: IShoppingMallSeller.ICreate;
  };
  export type Body = IShoppingMallSeller.ICreate;
  export type Response = IShoppingMallSeller.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/join";
  export const random = (): IShoppingMallSeller.IAuthorized =>
    typia.random<IShoppingMallSeller.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Seller login with email and password to issue JWT tokens based on
 * shopping_mall_sellers.
 *
 * Seller login authenticates email and password credentials and issues JWT
 * tokens, using the email and password_hash fields in shopping_mall_sellers.
 * Enables secure authentication with rate limiting and session management
 * consistent with the shoppingMall platform's security policies.
 *
 * @param props.connection
 * @param props.body Seller login credentials including email and password
 * @setHeader token.access Authorization
 *
 * @path /auth/seller/login
 * @accessor api.functional.auth.seller.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Seller login credentials including email and password */
    body: IShoppingMallSeller.ILogin;
  };
  export type Body = IShoppingMallSeller.ILogin;
  export type Response = IShoppingMallSeller.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/login";
  export const random = (): IShoppingMallSeller.IAuthorized =>
    typia.random<IShoppingMallSeller.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for authenticated sellers based on shopping_mall_sellers
 * identity.
 *
 * Refresh valid JWT tokens for authenticated seller users to maintain session
 * continuity without password reentry. Requires a valid refresh token and
 * issues new JWT tokens upon successful validation, conforming to the
 * shoppingMall platform's authentication security model. The seller identity is
 * confirmed implicitly via token payloads referencing shopping_mall_sellers
 * records.
 *
 * @param props.connection
 * @param props.body Refresh token request payload for authenticated seller
 *   users
 * @setHeader token.access Authorization
 *
 * @path /auth/seller/refresh
 * @accessor api.functional.auth.seller.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request payload for authenticated seller users */
    body: IShoppingMallSeller.IRefresh;
  };
  export type Body = IShoppingMallSeller.IRefresh;
  export type Response = IShoppingMallSeller.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/refresh";
  export const random = (): IShoppingMallSeller.IAuthorized =>
    typia.random<IShoppingMallSeller.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
