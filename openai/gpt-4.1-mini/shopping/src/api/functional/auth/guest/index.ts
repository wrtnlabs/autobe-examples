import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallGuest } from "../../../structures/IShoppingMallGuest";

/**
 * Create a new guest session and issue JWT tokens based on the
 * shopping_mall_guests table.
 *
 * Guest user registration endpoint to create a temporary guest session and
 * issue guest JWT tokens for secure browsing and shopping interactions without
 * full account credentials. Uses fields `session_token`, `ip_address`, and
 * `user_agent` from `shopping_mall_guests` table to identify guest session
 * footprints and manage lifecycle.
 *
 * This operation supports the e-commerce shopping mall guests role as
 * unauthenticated visitors. It issues JWT tokens for guest session management
 * and access control.
 *
 * Security is enforced by generating unique session tokens and limiting session
 * privileges appropriately.
 *
 * For broader user management, member and admin join/login operations
 * complement this feature.
 *
 * Token refresh is supported separately for guest session continuation.
 *
 * @param props.connection
 * @param props.body Information required to register a new guest session
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Information required to register a new guest session */
    body: IShoppingMallGuest.ICreate;
  };
  export type Body = IShoppingMallGuest.ICreate;
  export type Response = IShoppingMallGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IShoppingMallGuest.IAuthorized =>
    typia.random<IShoppingMallGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for guest sessions based on shopping_mall_guests data.
 *
 * Guest token refresh endpoint to renew JWT tokens for guest session
 * continuity. Requires a valid refresh token issued during guest session
 * creation.
 *
 * Leverages `shopping_mall_guests` table fields such as `session_token` to
 * validate and issue new tokens.
 *
 * Ensures secure token lifecycle management for unauthenticated guest users.
 *
 * Related to guest join operation which creates initial session.
 *
 * Refresh token validation prevents unauthorized session hijacking.
 *
 * @param props.connection
 * @param props.body Refresh token information for guest sessions
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token information for guest sessions */
    body: IShoppingMallGuest.IRefresh;
  };
  export type Body = IShoppingMallGuest.IRefresh;
  export type Response = IShoppingMallGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IShoppingMallGuest.IAuthorized =>
    typia.random<IShoppingMallGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
