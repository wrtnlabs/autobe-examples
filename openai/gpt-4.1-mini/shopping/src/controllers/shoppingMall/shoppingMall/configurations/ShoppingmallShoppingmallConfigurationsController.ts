import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallShoppingMallConfigurationsConfigurationId } from "../../../../providers/getShoppingMallShoppingMallConfigurationsConfigurationId";
import { postShoppingMallShoppingMallConfigurations } from "../../../../providers/postShoppingMallShoppingMallConfigurations";

import { IShoppingMallConfiguration } from "../../../../api/structures/IShoppingMallConfiguration";

@Controller("/shoppingMall/shoppingMall/configurations")
export class ShoppingmallShoppingmallConfigurationsController {
  /**
   * Retrieve specific shopping mall configuration detail by ID.
   *
   * Retrieve detailed information of a specific shopping mall configuration by
   * its unique ID. This operation fetches configuration settings key, value,
   * category, description, and enabled status.
   *
   * It is a read-only operation that accesses the shopping_mall_configurations
   * table as defined in the Prisma schema. The operation supports soft deletion
   * by preserving records marked with deleted_at.
   *
   * The endpoint requires the configuration's unique ID as a path parameter to
   * identify the target record. Access control is open to public as
   * configurations do not expose sensitive data.
   *
   * The response returns all metadata including creation and update timestamps
   * for audit purposes. Errors will be returned if the configuration ID does
   * not exist or is malformed.
   *
   * This API is typically used by administrative tools or system components
   * requiring dynamic configuration parameters.
   *
   * @param connection
   * @param configurationId Unique identifier (UUID) of the shopping mall
   *   configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":configurationId")
  public async at(
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallConfiguration> {
    try {
      return await getShoppingMallShoppingMallConfigurationsConfigurationId({
        configurationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new shopping mall configuration parameter with a unique key,
   * value, category, description, and enabled status.
   *
   * The operation persists the new configuration in the
   * shopping_mall_configurations table as defined in the Prisma schema,
   * including audit timestamps for creation and updates.
   *
   * No authentication is required for this operation, facilitating
   * configuration management by administrative tools or automation.
   *
   * A successful response returns the complete configuration record including
   * generated ID and timestamps.
   *
   * Validation ensures the key is unique and the enabled flag properly reflects
   * the configuration state.
   *
   * @param connection
   * @param body Creation information for a new shopping mall configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IShoppingMallConfiguration.ICreate,
  ): Promise<IShoppingMallConfiguration> {
    try {
      return await postShoppingMallShoppingMallConfigurations({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
