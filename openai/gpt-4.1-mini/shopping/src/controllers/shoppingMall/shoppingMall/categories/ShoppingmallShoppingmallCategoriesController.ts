import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallShoppingMallCategories } from "../../../../providers/patchShoppingMallShoppingMallCategories";
import { getShoppingMallShoppingMallCategoriesCategoryId } from "../../../../providers/getShoppingMallShoppingMallCategoriesCategoryId";

import { IPageIShoppingMallCategory } from "../../../../api/structures/IPageIShoppingMallCategory";
import { IShoppingMallCategory } from "../../../../api/structures/IShoppingMallCategory";

@Controller("/shoppingMall/shoppingMall/categories")
export class ShoppingmallShoppingmallCategoriesController {
  /**
   * Search and retrieve a filtered, paginated list of product categories.
   *
   * Retrieve a filtered and paginated list of product categories from the
   * shopping mall platform. This operation supports searching by code and name,
   * filtering by parent category, and sorting by display order for UI
   * presentation.
   *
   * The `shopping_mall_categories` table contains hierarchical category
   * relationships via the `parent_id` field allowing nested category trees.
   * Categories have unique codes and optional descriptions that aid user
   * navigation.
   *
   * This endpoint is publicly accessible and requires no authentication.
   * Pagination controls mitigate large data retrievals for performance.
   *
   * Typical usage scenarios include populating product catalogs, navigation
   * menus, and supporting category-based product searches.
   *
   * Errors can occur due to invalid filter parameters or pagination ranges,
   * which should be returned with clear messages.
   *
   * Related endpoints allow retrieval of individual category details and
   * managing categories (for admin users).
   *
   * @param connection
   * @param body Search criteria and pagination parameters for product category
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallCategory.IRequest,
  ): Promise<IPageIShoppingMallCategory> {
    try {
      return await patchShoppingMallShoppingMallCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific product category.
   *
   * Retrieve detailed information about a product category by its unique
   * identifier. Returns all category fields from the `shopping_mall_categories`
   * table including hierarchical parent linkage.
   *
   * This operation is publicly accessible and requires no authentication.
   *
   * It supports safe retrieval with error handling for missing or soft deleted
   * categories.
   *
   * Use this endpoint to show category detail pages or fetch specific category
   * metadata for UI display or processing.
   *
   * Pagination and searching are handled via complementary endpoints.
   *
   * @param connection
   * @param categoryId Unique identifier of the target product category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCategory> {
    try {
      return await getShoppingMallShoppingMallCategoriesCategoryId({
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
