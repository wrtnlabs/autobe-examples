import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerOrdersOrderIdItems } from "../../../../../providers/postShoppingMallSellerOrdersOrderIdItems";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerOrdersOrderIdItems } from "../../../../../providers/patchShoppingMallSellerOrdersOrderIdItems";
import { getShoppingMallSellerOrdersOrderIdItemsOrderItemId } from "../../../../../providers/getShoppingMallSellerOrdersOrderIdItemsOrderItemId";

import { IShoppingMallOrderItem } from "../../../../../api/structures/IShoppingMallOrderItem";
import { IPageIShoppingMallOrderItem } from "../../../../../api/structures/IPageIShoppingMallOrderItem";

@Controller("/shoppingMall/seller/orders/:orderId/items")
export class ShoppingmallSellerOrdersItemsController {
  /**
   * Add a new item to an existing order.
   *
   * This POST /orders/{orderId}/items endpoint allows creation of an order item
   * within an existing order. Users authorized include the customer who owns
   * the order, the seller responsible for the product, and admins.
   *
   * Request body must include:
   *
   * - Shopping_mall_sku_id: UUID of the product SKU
   * - Quantity: Number of units ordered
   * - Unit_price: Price per unit at order time
   * - Total_price: Total price for this SKU (quantity x unit_price)
   *
   * Response contains full details of the created order item.
   *
   * This operation requires careful validation of SKU availability, pricing
   * integrity, and order ownership.
   *
   * This API interacts directly with the shopping_mall_order_items schema in
   * Prisma.
   *
   * @param connection
   * @param orderId Unique identifier of the order to add an item to
   * @param body Details for creating a new order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.ICreate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await postShoppingMallSellerOrdersOrderIdItems({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update and retrieve order items for a specified order by orderId.
   *
   * This endpoint allows modification of the items within a specified order.
   *
   * Authorized users (sellers managing their product orders or admins) can
   * update quantities or change SKUs in the order items. This supports accurate
   * order fulfillment and inventory management.
   *
   * The request body must conform to the defined schema for order item patches,
   * enabling batch updates with pagination, filtering, or sorting if
   * implemented.
   *
   * Response returns paginated or filtered order item data reflecting the
   * current state after modifications.
   *
   * The displayed order items provide detailed SKU and quantity information to
   * support downstream processing and UI display.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Patch information for updating order items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.IRequest,
  ): Promise<IPageIShoppingMallOrderItem> {
    try {
      return await patchShoppingMallSellerOrdersOrderIdItems({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific order item by IDs.
   *
   * This GET /orders/{orderId}/items/{orderItemId} API endpoint provides
   * detailed information about a single order item within a specific order. The
   * operation returns SKU association, quantity ordered, unit price, and total
   * price for that item. Users authorized include customers who placed the
   * order, sellers fulfilling the order, and admins overseeing the platform.
   *
   * Parameters:
   *
   * - OrderId: UUID of the order containing the item
   * - OrderItemId: UUID of the order item to retrieve
   *
   * No request body is needed as this is a retrieval operation.
   *
   * Errors handled include invalid or non-existent IDs, authorization failures,
   * and not found responses.
   *
   * This operation directly maps to the Prisma model shopping_mall_order_items.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @param orderItemId Unique identifier of the order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderItemId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await getShoppingMallSellerOrdersOrderIdItemsOrderItemId({
        seller,
        orderId,
        orderItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
