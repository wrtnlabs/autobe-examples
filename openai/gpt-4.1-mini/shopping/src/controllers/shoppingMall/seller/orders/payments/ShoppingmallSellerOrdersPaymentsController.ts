import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerOrdersOrderIdPayments } from "../../../../../providers/postShoppingMallSellerOrdersOrderIdPayments";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerOrdersOrderIdPaymentsPaymentId } from "../../../../../providers/putShoppingMallSellerOrdersOrderIdPaymentsPaymentId";

import { IShoppingMallPayment } from "../../../../../api/structures/IShoppingMallPayment";

@Controller("/shoppingMall/seller/orders/:orderId/payments")
export class ShoppingmallSellerOrdersPaymentsController {
  /**
   * Create a payment record for a specific order.
   *
   * Creates a new payment transaction record for the specified order. The
   * operation validates payment details including payment method, amount, and
   * status. The payment is linked to the order for transaction tracking.
   *
   * This endpoint can only be accessed by authenticated customers and sellers
   * who have appropriate permissions for the order.
   *
   * Relies on the shopping_mall_payments table for storing payment info and
   * shopping_mall_orders for order association. Proper error handling is
   * essential to indicate payment failures or data issues.
   *
   * Returned data includes the created payment record with its identifiers and
   * timestamps for client confirmation.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Payment creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createPayment(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.ICreate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await postShoppingMallSellerOrdersOrderIdPayments({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update payment record of a specific order.
   *
   * Updates an existing payment transaction record for the specified order and
   * payment IDs. Validates and applies changes to payment amount, method,
   * status, transaction ID, and confirmation timestamp.
   *
   * Restricted to authorized customers and sellers.
   *
   * Ensures that payment state is consistent and properly linked to the order.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param paymentId Unique identifier of the payment record to update
   * @param body Payment update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentId")
  public async updatePayment(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.IUpdate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await putShoppingMallSellerOrdersOrderIdPaymentsPaymentId({
        seller,
        orderId,
        paymentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
