import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdSkus } from "../../../../../providers/postShoppingMallSellerProductsProductIdSkus";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerProductsProductIdSkus } from "../../../../../providers/patchShoppingMallSellerProductsProductIdSkus";
import { putShoppingMallSellerProductsProductIdSkusSkuId } from "../../../../../providers/putShoppingMallSellerProductsProductIdSkusSkuId";
import { deleteShoppingMallSellerProductsProductIdSkusSkuId } from "../../../../../providers/deleteShoppingMallSellerProductsProductIdSkusSkuId";

import { IShoppingMallSku } from "../../../../../api/structures/IShoppingMallSku";
import { IPageIShoppingMallShoppingMallSku } from "../../../../../api/structures/IPageIShoppingMallShoppingMallSku";
import { IShoppingMallShoppingMallSku } from "../../../../../api/structures/IShoppingMallShoppingMallSku";

@Controller("/shoppingMall/seller/products/:productId/skus")
export class ShoppingmallSellerProductsSkusController {
  /**
   * Create a new SKU for a product.
   *
   * Create a new SKU variant for the specified product.
   *
   * The request body must provide SKU details including skuCode, price,
   * optional weight, and status.
   *
   * This operation requires seller authentication and ownership of the target
   * product.
   *
   * Validation enforces SKU code uniqueness within the product and positive
   * pricing.
   *
   * Returns the created SKU record with all fields.
   *
   * Related operations include SKU retrieval and product variant management.
   *
   * @param connection
   * @param productId Unique identifier of the product
   * @param body Creation information for a new SKU variant
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSku.ICreate,
  ): Promise<IShoppingMallSku> {
    try {
      return await postShoppingMallSellerProductsProductIdSkus({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List SKUs for a product with pagination and filtering capabilities.
   *
   * Retrieve a list of SKU variants for the given product ID. This list is
   * useful for sellers managing product variants and for administrative
   * oversight. Each SKU includes details like SKU code, price, weight (if
   * available), lifecycle status, and timestamps for creation and update.
   *
   * The SKU entities are stored in the shopping_mall_skus table linked to the
   * product. This operation supports filtering by SKU status, pagination with
   * configurable page size and number, and sorting by various fields.
   *
   * Security measures ensure that only users with seller or admin roles for the
   * owning product can perform this query to protect data integrity and
   * confidentiality.
   *
   * The response returns a paginated summary of SKUs, allowing efficient
   * management and display in user interfaces.
   *
   * @param connection
   * @param productId Identifier of the product to list SKUs for
   * @param body Search criteria and pagination parameters for SKU filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShoppingMallSku.IRequest,
  ): Promise<IPageIShoppingMallShoppingMallSku.ISummary> {
    try {
      return await patchShoppingMallSellerProductsProductIdSkus({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific SKU of a product.
   *
   * Update a product SKU's information by specifying the product ID and SKU ID.
   *
   * This operation allows authenticated sellers to modify details of their
   * product variants, including SKU code, price, weight, and status.
   *
   * Security measures ensure only sellers owning the product can perform this
   * update.
   *
   * The underlying database entity is the `shopping_mall_skus` table, with
   * foreign key relationships to the `shopping_mall_products` table.
   *
   * Validation includes verifying the existence of the product and SKU and
   * confirming seller ownership.
   *
   * Errors will be returned if the SKU does not exist or the seller is
   * unauthorized.
   *
   * The request expects a well-formed payload as defined in the corresponding
   * update DTO. The response returns the updated SKU entity upon success.
   *
   * @param connection
   * @param productId ID of the product to which the SKU belongs
   * @param skuId ID of the SKU to update
   * @param body Product SKU update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":skuId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSku.IUpdate,
  ): Promise<IShoppingMallSku> {
    try {
      return await putShoppingMallSellerProductsProductIdSkusSkuId({
        seller,
        productId,
        skuId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific SKU of a product.
   *
   * Perform a soft delete on a product SKU by specifying the product ID and SKU
   * ID.
   *
   * This operation allows an authenticated seller to mark a SKU as deleted
   * without physically removing it from the database.
   *
   * Only sellers who own the product and SKU can perform this action.
   *
   * The underlying data is stored in the `shopping_mall_skus` table,
   * implementing soft deletion by setting `deleted_at`.
   *
   * The operation expects the SKU to exist and belong to the provided product;
   * otherwise, errors occur.
   *
   * No content is returned after successful deletion.
   *
   * This operation is critical to avoid permanent data loss and supports audit
   * compliance.
   *
   * @param connection
   * @param productId ID of the product to which the SKU belongs
   * @param skuId ID of the SKU to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":skuId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdSkusSkuId({
        seller,
        productId,
        skuId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
