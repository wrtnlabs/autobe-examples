import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProducts } from "../../../../providers/postShoppingMallSellerProducts";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerProductsProductId } from "../../../../providers/putShoppingMallSellerProductsProductId";
import { deleteShoppingMallSellerProductsProductId } from "../../../../providers/deleteShoppingMallSellerProductsProductId";

import { IShoppingMallProduct } from "../../../../api/structures/IShoppingMallProduct";

@Controller("/shoppingMall/seller/products")
export class ShoppingmallSellerProductsController {
  /**
   * Create a new shopping mall product.
   *
   * Create a new product record with required data elements including category
   * association, seller ownership, and unique code. This operation requires
   * careful validation of the category ID and seller ID to maintain referential
   * integrity with shopping_mall_categories and shopping_mall_sellers tables
   * respectively.
   *
   * Security restrictions should ensure only authorized roles (such as sellers
   * or admins) perform creation.
   *
   * The system will enforce uniqueness of the product code and prevent
   * duplicates.
   *
   * Response returns the complete newly created product entity including
   * autogenerated timestamps and default status values.
   *
   * Errors will be returned if required fields are missing, uniqueness is
   * violated, or foreign keys are invalid.
   *
   * @param connection
   * @param body Product creation info including category, seller, code, and
   *   name
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallProduct.ICreate,
  ): Promise<IShoppingMallProduct> {
    try {
      return await postShoppingMallSellerProducts({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping mall product.
   *
   * Update shopping mall product identified by productId with provided fields.
   * Input may include changes to name, description, category, seller, and
   * status. The productId parameter in the path is required to locate the
   * product.
   *
   * Robust validation for foreign key references and code uniqueness is
   * required.
   *
   * Only authorized users with seller or admin roles should be able to update
   * products.
   *
   * Successful response includes the updated product entity.
   *
   * Failure scenarios include record not found, validation errors, or
   * unauthorized access.
   *
   * @param connection
   * @param productId Target product's ID
   * @param body Product update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":productId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProduct.IUpdate,
  ): Promise<IShoppingMallProduct> {
    try {
      return await putShoppingMallSellerProductsProductId({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a product by ID permanently from the product catalog.
   *
   * This operation permanently removes a product record identified by its
   * unique ID from the shopping mall product catalog. It is intended for use by
   * authorized users such as sellers or admins who manage product listings. The
   * product corresponds to the shopping_mall_products entity, which includes
   * details such as category, seller association, code, name, description,
   * status, and timestamps.
   *
   * Deleting a product cascades deletion to associated SKUs and related
   * inventory data to maintain data integrity. Since the Prisma schema supports
   * soft deletion via a deleted_at field, this operation performs a hard delete
   * meaning the record will be fully removed without retention.
   *
   * Security considerations require that only users with proper seller or admin
   * roles invoke this operation to prevent unauthorized product deletions.
   * Proper error handling should be implemented to address cases where the
   * product does not exist or is linked to active orders.
   *
   * This deletion complements other product management operations such as SKU
   * updates and product retrieval endpoints.
   *
   * Expected behavior includes returning appropriate status codes confirming
   * deletion or error details if deletion fails due to constraints or
   * authorization.
   *
   * @param connection
   * @param productId Unique identifier of the target product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":productId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductId({
        seller,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
