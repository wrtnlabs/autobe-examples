import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerInventory } from "../../../../providers/patchShoppingMallSellerInventory";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { getShoppingMallSellerInventorySkuId } from "../../../../providers/getShoppingMallSellerInventorySkuId";

import { IPageIShoppingMallInventory } from "../../../../api/structures/IPageIShoppingMallInventory";
import { IShoppingMallInventory } from "../../../../api/structures/IShoppingMallInventory";

@Controller("/shoppingMall/seller/inventory")
export class ShoppingmallSellerInventoryController {
  /**
   * Search and retrieve product SKU inventory with pagination and filtering.
   *
   * Retrieve a filtered and paginated list of product SKU inventory records for
   * managing stock levels in the shopping mall platform. This operation allows
   * querying inventory quantities along with corresponding SKU details.
   *
   * This API operates on the "shopping_mall_inventory" table in the Prisma
   * schema, which tracks quantity levels for each SKU identified by
   * "shopping_mall_sku_id".
   *
   * Authorization is required to access inventory data, typically granted to
   * sellers managing product stocks or administrators overseeing the platform.
   *
   * Request input includes pagination parameters and filtering criteria to
   * support large inventories.
   *
   * Response returns a paginated list of inventory summaries reflecting SKU
   * quantities and timestamps.
   *
   * Clients should handle potentially large result sets via pagination and
   * filter to relevant SKUs based on business needs.
   *
   * Security considerations include ensuring only authorized users can query
   * inventory data to protect sensitive stock information.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   inventory
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallInventory.IRequest,
  ): Promise<IPageIShoppingMallInventory.ISummary> {
    try {
      return await patchShoppingMallSellerInventory({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed inventory information for a specific SKU by its unique
   * identifier. This API provides current stock counts and timestamps for
   * management purposes.
   *
   * Based on the "shopping_mall_inventory" table defined in the Prisma schema,
   * each inventory record references a SKU and maintains the quantity
   * available.
   *
   * Authorization is enforced for roles such as sellers and administrators who
   * need access to inventory details.
   *
   * The SKU identifier path parameter locates the inventory entry to return.
   *
   * Clients should use this endpoint to view or verify stock levels for
   * specific product variants.
   *
   * If the inventory entry is not found, a 404 error is returned.
   *
   * @param connection
   * @param skuId Unique identifier of the SKU inventory record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":skuId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallInventory> {
    try {
      return await getShoppingMallSellerInventorySkuId({
        seller,
        skuId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
