import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminSellers } from "../../../../providers/postShoppingMallAdminSellers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminSellers } from "../../../../providers/patchShoppingMallAdminSellers";
import { getShoppingMallAdminSellersId } from "../../../../providers/getShoppingMallAdminSellersId";
import { putShoppingMallAdminSellersId } from "../../../../providers/putShoppingMallAdminSellersId";
import { deleteShoppingMallAdminSellersId } from "../../../../providers/deleteShoppingMallAdminSellersId";

import { IShoppingMallSeller } from "../../../../api/structures/IShoppingMallSeller";
import { IPageIShoppingMallSeller } from "../../../../api/structures/IPageIShoppingMallSeller";

@Controller("/shoppingMall/admin/sellers")
export class ShoppingmallAdminSellersController {
  /**
   * Create a new shopping mall seller account.
   *
   * Create a new seller account in the shopping mall platform. This operation
   * takes the seller's unique email, hashed password, optional company and
   * contact information, phone number, and an initial status such as 'active'
   * or 'suspended'.
   *
   * The system validates that the email is unique and the password hash meets
   * security requirements. After successful creation, the seller record
   * includes automatic timestamps for creation and update. Soft delete fields
   * exist but are managed internally.
   *
   * Only authorized clients with permissions to create sellers can invoke this
   * operation. This enables the onboarding of new sellers to the platform to
   * list products and manage orders appropriately.
   *
   * Related operations include updating seller information and listing sellers.
   * The response returns the complete seller entity with all fields except
   * sensitive data like password hashes.
   *
   * Errors will be returned if email uniqueness is violated or validation
   * fails.
   *
   * @param connection
   * @param body Information required to create a new seller account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSeller.ICreate,
  ): Promise<IShoppingMallSeller> {
    try {
      return await postShoppingMallAdminSellers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of shopping mall sellers.
   *
   * Retrieve a filtered and paginated list of shopping mall sellers from the
   * system. This endpoint supports complex query parameters for searching by
   * email, company name, and status, enabling admin users to locate sellers
   * efficiently.
   *
   * Security considerations include restricting access to authenticated users
   * with administrative privileges only to protect sensitive seller
   * information.
   *
   * The operation interacts with the shopping_mall_sellers table, referencing
   * all important seller attributes like email, company name, status, and
   * timestamps.
   *
   * This supports the administrative functionality of monitoring and managing
   * sellers within the shopping mall platform.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for seller filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSeller.IRequest,
  ): Promise<IPageIShoppingMallSeller> {
    try {
      return await patchShoppingMallAdminSellers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information on a shopping mall seller by ID.
   *
   * Retrieve comprehensive details of a specific seller identified by their
   * unique ID. This endpoint is essential for administrative management and
   * auditing of seller accounts.
   *
   * Security is enforced by limiting access to users with admin role only.
   *
   * The notable fields returned include email, company name, contact
   * information, status, and timestamps reflecting account lifecycle.
   *
   * This operation works with the shopping_mall_sellers table as defined in the
   * Prisma schema.
   *
   * @param connection
   * @param id Unique identifier of the seller
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSeller> {
    try {
      return await getShoppingMallAdminSellersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shopping mall seller account identified by ID.
   *
   * Update existing seller account information by ID. The client must provide
   * the seller ID in the path parameters and the updated fields in the request
   * body.
   *
   * The operation verifies the existence of the seller, enforces uniqueness of
   * email and validation of data formats. Modifiable fields include email,
   * password hash, company name, contact name, phone number, and account
   * status.
   *
   * This operation supports secure updating of the seller profile by authorized
   * parties only, ensuring data integrity and security.
   *
   * The response provides the updated seller record.
   *
   * If the seller ID does not exist, a not found error will be returned. If
   * validation fails, an error response will describe the failure reason.
   *
   * @param connection
   * @param id Unique identifier of the seller to update
   * @param body Updated seller account information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSeller.IUpdate,
  ): Promise<IShoppingMallSeller> {
    try {
      return await putShoppingMallAdminSellersId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a seller account by ID.
   *
   * This operation deletes a seller account identified by the provided UUID. It
   * is designed for administrative use to remove seller accounts that are no
   * longer active or have violated platform policies.
   *
   * Security considerations require this endpoint to be restricted to
   * administrative roles only due to sensitive nature of user account removal.
   * Deletion is irreversible and permanently removes the seller record along
   * with all associated data relations.
   *
   * The operation works directly on the shopping_mall_sellers table of the
   * database and does not create any side effects such as cascading deletions
   * since relations may have cascading rules handled by the database.
   *
   * Clients using this endpoint must ensure that the seller ID exists and user
   * permissions are validated before invocation. Errors may occur if the seller
   * ID is invalid or is referenced by foreign key constraints in other tables.
   *
   * No request body is used, and no response body is returned for this deletion
   * operation.
   *
   * @param connection
   * @param id Unique identifier of the seller to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminSellersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
