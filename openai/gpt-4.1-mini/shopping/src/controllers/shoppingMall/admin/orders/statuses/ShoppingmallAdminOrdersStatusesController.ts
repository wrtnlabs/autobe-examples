import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminOrdersOrderIdStatuses } from "../../../../../providers/postShoppingMallAdminOrdersOrderIdStatuses";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminOrdersOrderIdStatuses } from "../../../../../providers/patchShoppingMallAdminOrdersOrderIdStatuses";
import { getShoppingMallAdminOrdersOrderIdStatusesStatusId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdStatusesStatusId";
import { putShoppingMallAdminOrdersOrderIdStatusesStatusId } from "../../../../../providers/putShoppingMallAdminOrdersOrderIdStatusesStatusId";
import { deleteShoppingMallAdminOrdersOrderIdStatusesStatusId } from "../../../../../providers/deleteShoppingMallAdminOrdersOrderIdStatusesStatusId";

import { IShoppingMallOrderStatus } from "../../../../../api/structures/IShoppingMallOrderStatus";

@Controller("/shoppingMall/admin/orders/:orderId/statuses")
export class ShoppingmallAdminOrdersStatusesController {
  /**
   * Create a new order status record for specified order.
   *
   * Create a new order status record for an existing order to record a status
   * transition in the order lifecycle.
   *
   * This operation adds a new entry into the `shopping_mall_order_statuses`
   * table associating the given status and timestamp to the specified order.
   *
   * The request body should include the status value (e.g., Pending Payment,
   * Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the
   * status was set.
   *
   * Authorization ensures only permitted users (such as the owning customer,
   * related seller, or system administrators) can perform this update to
   * maintain data integrity and security.
   *
   * The response returns the created order status entity, confirming successful
   * addition into the system.
   *
   * Validation errors such as invalid status values or missing fields must be
   * properly reported.
   *
   * Business logic must enforce correct status transitions and timestamp
   * consistency if implemented in service layers.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Order status creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderStatus.ICreate,
  ): Promise<IShoppingMallOrderStatus> {
    try {
      return await postShoppingMallAdminOrdersOrderIdStatuses({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update status of a specific order.
   *
   * This operation updates an order's status by adding a new status entry for
   * the order identified by orderId. The new status and timestamp of change are
   * provided in the request body.
   *
   * Proper validation ensures the status value matches allowed order lifecycle
   * statuses defined in the business rules: Pending Payment, Paid, Processing,
   * Shipped, Delivered, Cancelled.
   *
   * Security is enforced so that only users with admin or seller roles can
   * update the order status. The operation updates the
   * shopping_mall_order_statuses table accordingly and returns the newly
   * created status record.
   *
   * Errors include 404 for non-existent orders or 403 for unauthorized users.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Order status update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async updateStatus(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderStatus.IUpdate,
  ): Promise<IShoppingMallOrderStatus> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdStatuses({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve specific order status record by order and status ID.
   *
   * Retrieve detailed information about a specific order status entry by order
   * ID and status ID. This endpoint allows clients to get the precise status
   * change record within the lifecycle of a given order.
   *
   * Security measures enforce that only authorized parties (authorized
   * customers, sellers, or admins) can access the order status to protect
   * privacy and order integrity.
   *
   * This operation interfaces directly with the `shopping_mall_order_statuses`
   * table, providing real-time status details such as status name and the
   * timestamp when the status was recorded. It is essential for presenting
   * order history and status timelines in customer and admin dashboards.
   *
   * The expected behavior includes returning a single order status entity if it
   * exists, or an appropriate error if the status or order does not exist.
   *
   * Errors for unauthorized access or non-existent entities must be handled
   * gracefully with suitable HTTP status codes.
   *
   * Path parameters orderId and statusId uniquely identify the order status
   * record in question.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param statusId Unique identifier of the target order status record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderStatus> {
    try {
      return await getShoppingMallAdminOrdersOrderIdStatusesStatusId({
        admin,
        orderId,
        statusId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific order status record for an order
   * (shopping_mall_order_statuses).
   *
   * Update an existing order status entry identified by orderId and statusId.
   * This operation is critical to track the lifecycle stages of an order such
   * as Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled.
   *
   * Users must be authorized as 'seller' or 'admin' roles since they have
   * permissions to modify order progress.
   *
   * The endpoint ensures that the status changes reflect the real-time
   * condition of order processing and shipping. It maintains consistency with
   * the underlying shopping_mall_order_statuses table which records historical
   * changes of each order's status.
   *
   * The request body must include the new status and the timestamp when this
   * status change occurred. Validation must ensure that status values match the
   * allowed business status strings.
   *
   * Response returns the updated order status entity with all stored properties
   * including timestamps and association references.
   *
   * Errors will be raised if the orderId or statusId do not exist, or if the
   * updated status violates transition rules defined elsewhere in the system.
   *
   * This endpoint is complementary to order creation, deletion, and querying
   * APIs for a comprehensive order management workflow.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param statusId Unique identifier of the order status record to update
   * @param body Data to update the order status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":statusId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderStatus.IUpdate,
  ): Promise<IShoppingMallOrderStatus> {
    try {
      return await putShoppingMallAdminOrdersOrderIdStatusesStatusId({
        admin,
        orderId,
        statusId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific order status record for an order
   * (shopping_mall_order_statuses).
   *
   * Delete an existing order status entry identified by orderId and statusId.
   * This operation permanently removes the record from the database.
   *
   * Access to this operation requires 'admin' or 'seller' roles due to the
   * critical nature of order status data.
   *
   * The operation enforces hard deletion and does not produce a response body.
   *
   * Errors will be raised if the specified identifiers are invalid or the
   * record does not exist.
   *
   * Deletion impacts the audit trail of order progress and should be used
   * cautiously with full understanding of consequences.
   *
   * This endpoint completes the CRUD operations for order statuses in the order
   * management module.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param statusId Unique identifier of the order status record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":statusId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderIdStatusesStatusId({
        admin,
        orderId,
        statusId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
