import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminOrders } from "../../../../providers/patchShoppingMallAdminOrders";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminOrdersOrderId } from "../../../../providers/getShoppingMallAdminOrdersOrderId";
import { putShoppingMallAdminOrdersOrderId } from "../../../../providers/putShoppingMallAdminOrdersOrderId";
import { deleteShoppingMallAdminOrdersOrderId } from "../../../../providers/deleteShoppingMallAdminOrdersOrderId";

import { IPageIShoppingMallOrder } from "../../../../api/structures/IPageIShoppingMallOrder";
import { IShoppingMallOrder } from "../../../../api/structures/IShoppingMallOrder";

@Controller("/shoppingMall/admin/orders")
export class ShoppingmallAdminOrdersController {
  /**
   * Search and retrieve a filtered, paginated list of shopping mall orders.
   *
   * Retrieve a paginated and filtered list of orders for the shopping mall
   * platform, allowing search by customer ID, seller ID, status, business
   * status, payment method, and creation/update date ranges.
   *
   * Security ensures only authorized roles can access their respective order
   * data. This operation returns a summary list of orders optimized for display
   * in order management UI.
   *
   * This operation corresponds to the shopping_mall_orders table in the Prisma
   * schema and returns paginated order summary information.
   *
   * @param connection
   * @param body Parameters to filter, search, sort, and paginate shopping mall
   *   orders
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallOrder.IRequest,
  ): Promise<IPageIShoppingMallOrder.ISummary> {
    try {
      return await patchShoppingMallAdminOrders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed shopping mall order information by ID.
   *
   * Retrieve detailed information for a shopping mall order identified by
   * orderId. Contains order metadata, items, payments, shipping and tracking
   * info.
   *
   * Access is restricted to the order owner, associated seller, and admins.
   *
   * Uses the shopping_mall_orders table and related tables such as
   * shopping_mall_order_items and shopping_mall_payments.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrder> {
    try {
      return await getShoppingMallAdminOrdersOrderId({
        admin,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shopping mall order by ID.
   *
   * Update an existing shopping mall order specified by the orderId path
   * parameter. Only allowable fields will be changed with validation on status
   * and payment consistency.
   *
   * Authorization is limited to roles customer, seller, and admin with
   * ownership or administrative rights.
   *
   * The response returns the updated shopping mall order details or appropriate
   * error messages on failure.
   *
   * Related business rules ensure status transitions follow correct sequences
   * and inventory is managed accordingly.
   *
   * The underlying resource is shopping_mall_orders table.
   *
   * @param connection
   * @param orderId Unique identifier of the order to update
   * @param body Order update details with fields to modify
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IUpdate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await putShoppingMallAdminOrdersOrderId({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an order by orderId from the shopping_mall_orders table.
   *
   * This endpoint deletes a specific order permanently from the database.
   *
   * Only users with administrative privileges are authorized to perform this
   * action.
   *
   * This operation fully removes the order record identified by orderId, along
   * with all associated related data such as payments, items, refunds,
   * cancellations, and audit logs through cascading deletion.
   *
   * Due to the critical impact, this operation should be used cautiously and
   * typically only in administrative or error correction scenarios.
   *
   * No request body is required. Successful deletion returns no content.
   *
   * @param connection
   * @param orderId Unique identifier of the target order to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderId({
        admin,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
