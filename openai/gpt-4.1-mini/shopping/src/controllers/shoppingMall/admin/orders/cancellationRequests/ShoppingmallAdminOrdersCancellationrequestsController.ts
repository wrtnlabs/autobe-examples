import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminOrdersOrderIdCancellationRequests } from "../../../../../providers/postShoppingMallAdminOrdersOrderIdCancellationRequests";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminOrdersOrderIdCancellationRequests } from "../../../../../providers/patchShoppingMallAdminOrdersOrderIdCancellationRequests";
import { getShoppingMallAdminOrdersOrderIdCancellationRequestsCancellationRequestId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdCancellationRequestsCancellationRequestId";

import { IShoppingMallCancellationRequest } from "../../../../../api/structures/IShoppingMallCancellationRequest";
import { IPageIShoppingMallCancellationRequest } from "../../../../../api/structures/IPageIShoppingMallCancellationRequest";

@Controller("/shoppingMall/admin/orders/:orderId/cancellationRequests")
export class ShoppingmallAdminOrdersCancellationrequestsController {
  /**
   * Create a new cancellation request for an order.
   *
   * Create a cancellation request linked to a specific order. The request body
   * must include the reason for cancellation and the customer ID initiating the
   * request.
   *
   * The status is set to 'Pending' by default on creation.
   *
   * This operation checks that the requesting user has permission to create a
   * cancellation request for the target order.
   *
   * Cancellation requests are persisted in the
   * shopping_mall_cancellation_requests table and returned in the response.
   *
   * Roles authorized to use this endpoint are customer, seller, and admin.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Creation info of the cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCancellationRequest.ICreate,
  ): Promise<IShoppingMallCancellationRequest> {
    try {
      return await postShoppingMallAdminOrdersOrderIdCancellationRequests({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of order cancellation
   * requests.
   *
   * Retrieve a filtered and paginated list of shopping mall order cancellation
   * requests from the database. This operation enables searching and filtering
   * cancellation requests based on various criteria such as status, request
   * date, and customer identification.
   *
   * The response includes pagination details and cancellation request summaries
   * optimized for list displays.
   *
   * Security considerations involve restricting data access to authorized
   * roles. Customers only see their own cancellation requests, while admins can
   * access all.
   *
   * The data corresponds to shopping_mall_cancellation_requests schema with
   * fields capturing order ID, customer ID, reason, status, request and
   * processing timestamps.
   *
   * Request body allows specifying search criteria including paging, sorting,
   * and filtering parameters.
   *
   * @param connection
   * @param orderId Unique identifier of the order to filter cancellation
   *   requests
   * @param body Search criteria and pagination parameters for cancellation
   *   request filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCancellationRequests(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCancellationRequest.IRequest,
  ): Promise<IPageIShoppingMallCancellationRequest.ISummary> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdCancellationRequests({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific cancellation request for an order.
   *
   * Retrieve a specific cancellation request linked to the given order ID and
   * cancellation request ID.
   *
   * The cancellation request includes details such as the request reason,
   * status of the cancellation request (Pending, Approved, Rejected), the
   * request and response timestamps, along with the associated customer and
   * order identifiers.
   *
   * Access to this operation is limited to authenticated users with roles:
   * customer, seller, or admin, ensuring secure and privacy-compliant data
   * handling.
   *
   * This endpoint corresponds to the shopping_mall_cancellation_requests table
   * and provides full details about the cancellation request for client viewing
   * or administrative processing.
   *
   * Error handling includes responses for invalid IDs, unauthorized access, or
   * missing resources.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param cancellationRequestId Unique identifier of the cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cancellationRequestId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationRequestId")
    cancellationRequestId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCancellationRequest> {
    try {
      return await getShoppingMallAdminOrdersOrderIdCancellationRequestsCancellationRequestId(
        {
          admin,
          orderId,
          cancellationRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
