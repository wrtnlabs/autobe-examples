import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminAdminDashboard } from "../../../../providers/postShoppingMallAdminAdminDashboard";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminAdminDashboard } from "../../../../providers/patchShoppingMallAdminAdminDashboard";
import { getShoppingMallAdminAdminDashboardId } from "../../../../providers/getShoppingMallAdminAdminDashboardId";
import { putShoppingMallAdminAdminDashboardId } from "../../../../providers/putShoppingMallAdminAdminDashboardId";
import { deleteShoppingMallAdminAdminDashboardId } from "../../../../providers/deleteShoppingMallAdminAdminDashboardId";

import { IShoppingMallAdminDashboard } from "../../../../api/structures/IShoppingMallAdminDashboard";
import { IPageIShoppingMallAdminDashboard } from "../../../../api/structures/IPageIShoppingMallAdminDashboard";

@Controller("/shoppingMall/admin/adminDashboard")
export class ShoppingmallAdminAdmindashboardController {
  /**
   * Create a new admin dashboard instance. This operation accepts parameters to
   * specify the unique dashboard name and an optional description to detail the
   * dashboard's purpose or scope.
   *
   * Security considerations: This endpoint is restricted to users with the
   * admin role to prevent unauthorized access to critical platform monitoring
   * tools.
   *
   * The admin dashboard entity corresponds to the
   * "shopping_mall_admin_dashboard" Prisma schema table which manages unique
   * dashboard configurations with audit timestamps and soft deletion support.
   *
   * Validation rules ensure that the dashboard name is unique and non-empty.
   * Optional descriptions may be provided to explain the dashboard's function.
   *
   * Successful creation returns the detailed dashboard entity with all relevant
   * fields including timestamps. Error handling includes uniqueness violations
   * and validation failures.
   *
   * Related API operations include updating and deleting admin dashboards.
   *
   * This operation requires an authenticated admin who is authorized to manage
   * dashboards.
   *
   * @param connection
   * @param body Information required to create a new admin dashboard
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdminDashboard.ICreate,
  ): Promise<IShoppingMallAdminDashboard> {
    try {
      return await postShoppingMallAdminAdminDashboard({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of admin dashboard overviews.
   *
   * This API endpoint allows administrators to query and retrieve filtered and
   * paginated lists of admin dashboard entries. Admin dashboard records provide
   * critical high-level summaries of platform operations, including KPIs,
   * recent activities, and system status indicators.
   *
   * Security considerations restrict access to authenticated admin users only.
   * Admins can apply search filters and sorting to customize the views. Soft
   * deleted dashboards are excluded from typical queries.
   *
   * The endpoint relates directly to the shopping_mall_admin_dashboard table in
   * the Prisma schema, which maintains unique dashboard names and optional
   * descriptions for operational monitoring purposes.
   *
   * Validation ensures that all query parameters are correctly handled,
   * including pagination limits and offsets.
   *
   * Expected behavior includes efficient retrieval of dashboard lists with
   * metadata summary information.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination parameters for querying
   *   admin dashboard entries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdminDashboard.IRequest,
  ): Promise<IPageIShoppingMallAdminDashboard.ISummary> {
    try {
      return await patchShoppingMallAdminAdminDashboard({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve admin dashboard details by id.
   *
   * Retrieve detailed information of an admin dashboard entry by its unique
   * identifier. This operation fetches the full properties of the dashboard,
   * including name, description, and relevant timestamps.
   *
   * Access is secured for admin roles only, ensuring that sensitive dashboard
   * information is protected.
   *
   * The retrieved data corresponds directly to the
   * shopping_mall_admin_dashboard table in the Prisma schema, providing
   * authoritative source details.
   *
   * Validation of the dashboard id path parameter ensures correct UUID format
   * and existence.
   *
   * Errors return appropriate not-found or unauthorized responses.
   *
   * @param connection
   * @param id Unique identifier of the target admin dashboard
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdminDashboard> {
    try {
      return await getShoppingMallAdminAdminDashboardId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing admin dashboard by ID.
   *
   * Update an existing admin dashboard resource identified by its unique ID. It
   * allows system administrators to modify properties such as the dashboard
   * name and description, thereby managing the configuration and details of
   * platform monitoring dashboards. The operation uses the
   * "shopping_mall_admin_dashboard" Prisma schema, referencing the dashboard ID
   * path parameter.
   *
   * Security considerations: Access restricted to users with the admin role to
   * enforce control over administrative configurations.
   *
   * Validation ensures the dashboard exists, the provided ID is valid UUID
   * format, and modifications adhere to unique name constraints.
   *
   * Successful execution returns the updated admin dashboard entity including
   * updated timestamps. Errors may include not found, unique constraint
   * violations, or validation errors.
   *
   * This operation complements dashboard creation and supports full lifecycle
   * management of admin dashboard entities.
   *
   * @param connection
   * @param id Unique identifier of the target admin dashboard
   * @param body Properties to update in the admin dashboard
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdminDashboard.IUpdate,
  ): Promise<IShoppingMallAdminDashboard> {
    try {
      return await putShoppingMallAdminAdminDashboardId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific admin dashboard by ID.
   *
   * This DELETE operation removes the admin dashboard identified by the given
   * ID. It is intended for use by system administrators to clean up or remove
   * obsolete dashboard configurations.
   *
   * Security and authorization are critical as this operation modifies
   * sensitive administrative views and data. Only users with the 'admin' role
   * may invoke this endpoint.
   *
   * The operation is directly related to the 'shopping_mall_admin_dashboard'
   * table in the Prisma schema. Deletion is a hard delete that permanently
   * removes the record. No request body is required.
   *
   * Related operations include retrieving dashboard details (GET) and listing
   * dashboards (PATCH).
   *
   * Upon success, the record is irrevocably removed and no response body is
   * returned. Errors include not found and unauthorized access.
   *
   * Path parameter 'id' must be a valid UUID representing the dashboard to
   * delete.
   *
   * @param connection
   * @param id Unique identifier of the admin dashboard to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseAdminDashboard(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAdminDashboardId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
