import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminProductReviewsProductReviewIdReviewModerations } from "../../../../../providers/postShoppingMallAdminProductReviewsProductReviewIdReviewModerations";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminProductReviewsProductReviewIdReviewModerations } from "../../../../../providers/patchShoppingMallAdminProductReviewsProductReviewIdReviewModerations";
import { getShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId } from "../../../../../providers/getShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId";
import { putShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId } from "../../../../../providers/putShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId";
import { deleteShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId } from "../../../../../providers/deleteShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId";

import { IShoppingMallReviewModeration } from "../../../../../api/structures/IShoppingMallReviewModeration";
import { IPageIShoppingMallReviewModeration } from "../../../../../api/structures/IPageIShoppingMallReviewModeration";

@Controller(
  "/shoppingMall/admin/productReviews/:productReviewId/reviewModerations",
)
export class ShoppingmallAdminProductreviewsReviewmoderationsController {
  /**
   * Create a new review moderation record for a product review.
   *
   * Create a new administrative moderation record for a specific product
   * review.
   *
   * The request must include the 'productReviewId' as a path parameter to
   * specify which product review is being moderated.
   *
   * Request body requires:
   *
   * - 'shopping_mall_admin_id': UUID of the administrator performing the
   *   moderation.
   * - 'action': The moderation action taken (e.g., 'approve', 'reject', 'flag').
   * - 'comment': Optional string comments for additional context.
   *
   * Authorization is restricted to admin users.
   *
   * Successful creation returns the created moderation record including
   * timestamps and linked review and admin information.
   *
   * This operation enables structured moderation workflows and audit trails for
   * product reviews within the platform.
   *
   * @param connection
   * @param productReviewId Unique identifier of the product review to moderate
   * @param body New review moderation record creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productReviewId")
    productReviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewModeration.ICreate,
  ): Promise<IShoppingMallReviewModeration> {
    try {
      return await postShoppingMallAdminProductReviewsProductReviewIdReviewModerations(
        {
          admin,
          productReviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List moderation records for a product review.
   *
   * This API operation provides administrators with the ability to search and
   * retrieve paginated moderation records associated with a particular product
   * review. Moderation records include details of actions taken by admins such
   * as approvals, rejections, and flags, with timestamps and optional
   * comments.
   *
   * The endpoint requires the product review ID as part of the path and a
   * complex search request in the body to support filtering and pagination.
   * Access is restricted to users with the 'admin' role.
   *
   * This resource relates to the 'shopping_mall_review_moderations' table as
   * defined in the Prisma schema, which stores detailed administrative
   * moderation histories for product reviews.
   *
   * A typical response includes paginated lists of moderation actions affecting
   * a single product review. Proper error handling is necessary for invalid IDs
   * or permission issues.
   *
   * @param connection
   * @param productReviewId Target product review's unique identifier
   * @param body Search criteria and pagination parameters for moderation
   *   records filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productReviewId")
    productReviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewModeration.IRequest,
  ): Promise<IPageIShoppingMallReviewModeration> {
    try {
      return await patchShoppingMallAdminProductReviewsProductReviewIdReviewModerations(
        {
          admin,
          productReviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific review moderation record by productReviewId and ID.
   *
   * Retrieve one specific administrative moderation record of a product review
   * in the shopping mall platform.
   *
   * This operation requires two path parameters: 'productReviewId' - the unique
   * identifier of the product review being moderated, and 'id' - the unique
   * identifier of the moderation record itself. These ensure precise retrieval
   * of the moderation record. Only authorized users with appropriate roles can
   * access moderation details.
   *
   * The 'shopping_mall_review_moderations' table stores records of moderation
   * actions taken by administrators, including approval, rejection, and related
   * comments. Each record links to a product review and the admin responsible.
   * This operation is essential for audit trails and transparency of review
   * moderation.
   *
   * Validation ensures the requested moderation record exists under the
   * specified product review. Errors are returned if not found or
   * unauthorized.
   *
   * Related operations include creation of new moderation records when an admin
   * acts on a review, accessible through the POST operation on the moderation
   * collection.
   *
   * This retrieval operation returns complete moderation details suitable for
   * administrative dashboards or audit logs.
   *
   * @param connection
   * @param productReviewId Unique identifier of the product review being
   *   moderated
   * @param id Unique identifier of the review moderation record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productReviewId")
    productReviewId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReviewModeration> {
    try {
      return await getShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId(
        {
          admin,
          productReviewId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a product review moderation by ID for a specific product review.
   *
   * Update a specific product review moderation record identified by its unique
   * ID and associated product review ID. This operation allows admins to modify
   * the moderation action (like approve, reject, or flag) and add optional
   * comments. It refers to the shopping_mall_review_moderations table which
   * records administrative moderation actions on product reviews. Only
   * authorized admin users can perform this update. The operation also ensures
   * proper validation of input fields, preserves audit trail integrity, and
   * adjusts timestamps if needed.
   *
   * Security requires that only administrative users can update review
   * moderation records. The moderation record must exist and belong to the
   * specified product review. Updates to action and comments are validated
   * against allowed values and content policies. This operation complements the
   * review moderation retrieval and deletion endpoints and is essential for
   * maintaining review content quality.
   *
   * Expected behavior includes validation of the existence of IDs, permission
   * checking, and propagation of updated moderation status to related product
   * reviews if applicable. Errors include 404 if record not found, 403 if
   * unauthorized, and 400 for validation failures.
   *
   * No request body besides the permissible fields for update is expected, and
   * the response includes the updated review moderation record object.
   *
   * @param connection
   * @param productReviewId ID of the product review associated with the
   *   moderation
   * @param id ID of the review moderation record to update
   * @param body Updated information for the product review moderation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateReviewModeration(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productReviewId")
    productReviewId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewModeration.IUpdate,
  ): Promise<IShoppingMallReviewModeration> {
    try {
      return await putShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId(
        {
          admin,
          productReviewId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a product review moderation by ID for a specific product review.
   *
   * Delete a specific product review moderation record by ID linked to a
   * product review given by productReviewId. This operation permanently removes
   * the record from the database and cleans up related audit trails. It is
   * critical that only authorized admin users can perform deletions to maintain
   * content moderation integrity.
   *
   * This operation corresponds to a hard delete; the record is completely
   * erased and cannot be restored. It should be used with caution. The
   * operation complements retrieval, creation, and update endpoints of review
   * moderations.
   *
   * Expected errors include 404 if the record does not exist or 403 if the
   * requester lacks proper permissions.
   *
   * No request body is required for this operation, and no response body is
   * returned upon successful deletion.
   *
   * Security best practices enforce strict role-based access and audit trail
   * logging of deletions.
   *
   * @param connection
   * @param productReviewId ID of the product review associated with the
   *   moderation
   * @param id ID of the review moderation record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseReviewModeration(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productReviewId")
    productReviewId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductReviewsProductReviewIdReviewModerationsId(
        {
          admin,
          productReviewId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
