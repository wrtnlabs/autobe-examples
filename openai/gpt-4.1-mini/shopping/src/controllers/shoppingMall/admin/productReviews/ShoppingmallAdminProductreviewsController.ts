import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminProductReviews } from "../../../../providers/patchShoppingMallAdminProductReviews";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminProductReviewsId } from "../../../../providers/getShoppingMallAdminProductReviewsId";
import { deleteShoppingMallAdminProductReviewsId } from "../../../../providers/deleteShoppingMallAdminProductReviewsId";

import { IPageIShoppingMallProductReview } from "../../../../api/structures/IPageIShoppingMallProductReview";
import { IShoppingMallProductReview } from "../../../../api/structures/IShoppingMallProductReview";

@Controller("/shoppingMall/admin/productReviews")
export class ShoppingmallAdminProductreviewsController {
  /**
   * Search and retrieve a filtered, paginated list of product reviews.
   *
   * Retrieve a filtered and paginated list of product reviews from customers
   * who purchased the products. This operation allows filtering by various
   * criteria including rating score, review status (e.g., pending approval,
   * approved), and associated product or order information.
   *
   * The operation supports pagination and sorting to efficiently navigate large
   * volumes of reviews. Proper authorization ensures that only appropriate
   * roles, such as admins or moderators, can access the full review data.
   *
   * This operation directly queries the shopping_mall_product_reviews table as
   * defined in the Prisma schema, incorporating all relevant fields such as
   * customer ID, product ID, order ID, rating, review text, and moderation
   * status. Search parameters include date ranges for creation or update
   * timestamps.
   *
   * The response returns a paginated list of review summaries suitable for
   * administrative dashboard views and moderation queues.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for product reviews
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallProductReview.IRequest,
  ): Promise<IPageIShoppingMallProductReview.ISummary> {
    try {
      return await patchShoppingMallAdminProductReviews({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed product review information by ID.
   *
   * Retrieve detailed information about a specific product review identified by
   * its unique ID. This operation returns all pertinent review data including
   * the customer who submitted it, the associated product, and the relevant
   * order confirming the purchase.
   *
   * This operation ensures that only authorized administrative users can access
   * sensitive review content for moderation purposes. It operates directly on
   * the shopping_mall_product_reviews table, providing a comprehensive view of
   * the review entity.
   *
   * Proper error handling is expected if the specified review ID does not
   * exist. The operation supports validation of the UUID format for the path
   * parameter.
   *
   * This endpoint typically complements list retrieval and moderation update
   * operations in review management workflows.
   *
   * @param connection
   * @param id Unique identifier of the product review
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductReview> {
    try {
      return await getShoppingMallAdminProductReviewsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a product review by ID.
   *
   * This API endpoint allows authorized administrators to permanently delete a
   * product review from the platform using its unique identifier. The product
   * review data, including rating, text, and moderation history, will be
   * removed permanently.
   *
   * Security is enforced by allowing only users with the 'admin' role to
   * execute this operation. The client must provide a valid UUID for the target
   * product review.
   *
   * The operation corresponds to the 'shopping_mall_product_reviews' table in
   * the Prisma schema, which contains detailed customer review records for
   * products purchased. Deletion cascades to related moderation records.
   *
   * A successful call results in the product review being removed; clients
   * should handle errors such as not found or authorization failure.
   *
   * @param connection
   * @param id Unique identifier of the product review to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductReviewsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
