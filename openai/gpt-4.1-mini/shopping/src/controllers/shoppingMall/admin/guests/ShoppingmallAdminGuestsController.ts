import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminGuests } from "../../../../providers/patchShoppingMallAdminGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminGuestsId } from "../../../../providers/getShoppingMallAdminGuestsId";

import { IPageIShoppingMallGuest } from "../../../../api/structures/IPageIShoppingMallGuest";
import { IShoppingMallGuest } from "../../../../api/structures/IShoppingMallGuest";

@Controller("/shoppingMall/admin/guests")
export class ShoppingmallAdminGuestsController {
  /**
   * Search and retrieve a filtered, paginated list of guest sessions.
   *
   * Retrieve a filtered and paginated list of guest user sessions from the
   * shopping mall platform. This operation allows searching by session token,
   * IP address, user agent, and other relevant criteria to analyze guest
   * behavior and activity.
   *
   * The system stores guests as unauthenticated visitors with session tokens
   * holding their browsing data. This API provides insight into guest sessions
   * for system monitoring and analytics.
   *
   * Security considerations include restricting this endpoint to authorized
   * admin users due to sensitivity of guest session data.
   *
   * The response includes a paginated list of guest session summaries optimized
   * for administrative views.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for guest session
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallGuest.IRequest,
  ): Promise<IPageIShoppingMallGuest.ISummary> {
    try {
      return await patchShoppingMallAdminGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a single guest session.
   *
   * Retrieve detailed information of a specific guest session by its unique ID
   * from the shopping mall platform. Guest sessions represent unauthenticated
   * visitors tracked by session tokens.
   *
   * This operation is restricted to admin users to ensure security and privacy
   * of guest session data.
   *
   * The response includes full details of the guest session record, including
   * session token, IP address, user agent, and timestamps.
   *
   * @param connection
   * @param id Unique identifier of the target guest session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallGuest> {
    try {
      return await getShoppingMallAdminGuestsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
