import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminShoppingMallConfigurations } from "../../../../../providers/patchShoppingMallAdminShoppingMallConfigurations";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminShoppingMallConfigurationsConfigurationId } from "../../../../../providers/putShoppingMallAdminShoppingMallConfigurationsConfigurationId";
import { deleteShoppingMallAdminShoppingMallConfigurationsConfigurationId } from "../../../../../providers/deleteShoppingMallAdminShoppingMallConfigurationsConfigurationId";

import { IPageIShoppingMallConfiguration } from "../../../../../api/structures/IPageIShoppingMallConfiguration";
import { IShoppingMallConfiguration } from "../../../../../api/structures/IShoppingMallConfiguration";
import { IShoppingMallConfigurations } from "../../../../../api/structures/IShoppingMallConfigurations";

@Controller("/shoppingMall/admin/shoppingMall/configurations")
export class ShoppingmallAdminShoppingmallConfigurationsController {
  /**
   * Search and retrieve a filtered, paginated list of shopping mall
   * configurations for admin management.
   *
   * Retrieve a filtered and paginated list of system configuration records for
   * the shopping mall platform.
   *
   * This operation enables administrators to query configuration parameters
   * using various filters such as 'key', 'category', and active 'enabled'
   * status. Pagination and sorting options support efficient large data
   * access.
   *
   * The configurations are stored in the 'shopping_mall_configurations' table,
   * which holds key-value pairs for system settings. Soft delete is supported
   * via 'deleted_at', and only active configurations typically appear in
   * results.
   *
   * Security-wise, this API requires admin privileges. Unauthorized requests
   * are blocked.
   *
   * The response includes paginated configuration summary data matched to
   * search criteria, helping admins manage system behavior and operational
   * parameters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for configuration
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallConfiguration.IRequest,
  ): Promise<IPageIShoppingMallConfiguration.ISummary> {
    try {
      return await patchShoppingMallAdminShoppingMallConfigurations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a shopping mall system configuration by configurationId.
   *
   * Update a system configuration parameter identified by 'configurationId'.
   * This operation modifies the configuration's value, category, description,
   * and enabled status, allowing system administrators to change active
   * settings.
   *
   * The operation requires authentication with appropriate roles to prevent
   * unauthorized changes.
   *
   * It updates the record in the 'shopping_mall_configurations' table, ensuring
   * the unique key is preserved and audit timestamps are refreshed.
   *
   * Input validation checks for proper value formats and enabled flag boolean
   * correctness.
   *
   * Attempts to update a non-existent or soft deleted configuration should
   * result in an error.
   *
   * Any changes trigger audit trail updates in the service layer (not exposed
   * in API).
   *
   * This operation corresponds to the 'PUT
   * /shoppingMall/configurations/{configurationId}' RESTful endpoint.
   *
   * @param connection
   * @param configurationId Target configuration's ID
   * @param body Update data for the shopping mall configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":configurationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallConfigurations.IUpdate,
  ): Promise<IShoppingMallConfigurations> {
    try {
      return await putShoppingMallAdminShoppingMallConfigurationsConfigurationId(
        {
          admin,
          configurationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a shopping mall system configuration by configurationId.
   *
   * Delete a system configuration parameter permanently by 'configurationId'.
   * This operation removes the configuration entirely from the database,
   * without soft delete.
   *
   * Only authorized admins are allowed to perform this operation.
   *
   * Attempting to delete a missing or already deleted configuration returns a
   * not found error.
   *
   * This corresponds to the 'DELETE
   * /shoppingMall/configurations/{configurationId}' RESTful endpoint.
   *
   * This is a hard delete operation, no soft delete is performed.
   *
   * @param connection
   * @param configurationId Target configuration's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":configurationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminShoppingMallConfigurationsConfigurationId(
        {
          admin,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
