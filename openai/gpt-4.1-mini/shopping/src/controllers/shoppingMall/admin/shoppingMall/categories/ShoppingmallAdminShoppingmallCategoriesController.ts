import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminShoppingMallCategories } from "../../../../../providers/postShoppingMallAdminShoppingMallCategories";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminShoppingMallCategoriesCategoryId } from "../../../../../providers/putShoppingMallAdminShoppingMallCategoriesCategoryId";
import { deleteShoppingMallAdminShoppingMallCategoriesCategoryId } from "../../../../../providers/deleteShoppingMallAdminShoppingMallCategoriesCategoryId";

import { IShoppingMallCategory } from "../../../../../api/structures/IShoppingMallCategory";

@Controller("/shoppingMall/admin/shoppingMall/categories")
export class ShoppingmallAdminShoppingmallCategoriesController {
  /**
   * Create a new shopping mall product category.
   *
   * Create a new product category in the shopping mall's catalog. Each category
   * has a unique code and can be linked to an optional parent category,
   * enabling hierarchical catalog navigation.
   *
   * Administrators with the admin role are authorized to perform this
   * operation. The input must include all required fields such as code, name,
   * and display order, with optional description and parent category linkage.
   *
   * The system maintains soft delete functionality via a nullable deleted_at
   * timestamp but this is managed internally and not set directly by users.
   *
   * This endpoint is essential for maintaining an organized product taxonomy
   * and enabling efficient product discovery.
   *
   * Errors should be returned for duplicate category codes or invalid parent
   * references.
   *
   * The created category object is returned with all its details including
   * timestamps.
   *
   * @param connection
   * @param body Creation info of the shopping mall category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallCategory.ICreate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await postShoppingMallAdminShoppingMallCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a shopping mall product category by ID.
   *
   * Update a shopping mall product category by its unique ID. Administrators
   * with admin role can modify the code, name, description, display order, and
   * parent category of the category record.
   *
   * Input validation enforces the uniqueness of codes and correct parent
   * associations.
   *
   * This allows flexible restructuring of the product catalog as business needs
   * evolve.
   *
   * Proper error handling is expected for invalid UUIDs, duplicate codes, or
   * not found categories.
   *
   * Returns the updated category record with all properties and timestamps.
   *
   * This operation complements category creation and listing endpoints.
   *
   * @param connection
   * @param categoryId Unique identifier of the category to update
   * @param body Update info of the shopping mall category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategory.IUpdate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await putShoppingMallAdminShoppingMallCategoriesCategoryId({
        admin,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a product category by its unique identifier, restricted to admin
   * users.
   *
   * This API operation allows an administrator to permanently delete a product
   * category from the shopping mall platform.
   *
   * The category is identified by its UUID, specified via the path parameter
   * 'categoryId'. The operation corresponds to a hard delete, completely
   * removing the category record from the database.
   *
   * Given the critical nature of category data, this operation is secured and
   * restricted to the 'admin' role only. Unauthorized attempts to delete a
   * category are denied.
   *
   * The 'shopping_mall_categories' table contains hierarchical information
   * including parent-child relationships. Care should be taken when deleting
   * categories to maintain data integrity. The database schema enforces
   * cascading deletions where appropriate.
   *
   * Successful deletion results in no content returned. If the specified
   * category does not exist, or the deletion is not permitted, appropriate
   * error responses are returned.
   *
   * The operation must be used cautiously to avoid orphaning products or losing
   * category hierarchy integrity.
   *
   * @param connection
   * @param categoryId Unique identifier of the product category to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminShoppingMallCategoriesCategoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
