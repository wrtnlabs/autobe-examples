import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminAuditLogs } from "../../../../providers/patchShoppingMallAdminAuditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminAuditLogsId } from "../../../../providers/getShoppingMallAdminAuditLogsId";

import { IPageIShoppingMallAuditLog } from "../../../../api/structures/IPageIShoppingMallAuditLog";
import { IShoppingMallAuditLog } from "../../../../api/structures/IShoppingMallAuditLog";

@Controller("/shoppingMall/admin/auditLogs")
export class ShoppingmallAdminAuditlogsController {
  /**
   * Retrieve paginated list of audit logs with filtering and search.
   *
   * Retrieve a filtered, paginated list of audit logs capturing platform
   * administrative and user events for monitoring, analytics, and compliance
   * purposes.
   *
   * This operation supports complex search parameters specified in the request
   * body such as admin filtering, date ranges, and action keywords.
   *
   * Audit logs integrate with the 'shopping_mall_audit_logs' table in the
   * Prisma schema and include references to related administrators and
   * entities.
   *
   * Only users with the 'admin' role are authorized to access this sensitive
   * log data.
   *
   * The response includes a pagination container with audit log entries
   * summarized for efficient consumption.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for audit logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexAuditLogs(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAuditLog.IRequest,
  ): Promise<IPageIShoppingMallAuditLog> {
    try {
      return await patchShoppingMallAdminAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific audit log by ID.
   *
   * Retrieve full details of a specific audit log entry identified by its
   * unique ID. Audit logs provide a comprehensive tracking record of system
   * administration and user actions for purposes including compliance, security
   * auditing, and troubleshooting. This operation is intended for
   * administrators or authorized users with privileges to review system logs.
   *
   * Security considerations include enforcing authorization as only users with
   * admin roles or specific audit permissions should access audit logs. The
   * operation safely exposes non-sensitive audit information and associated
   * references to admins and does not permit modifications.
   *
   * The audit log entry includes information about the admin user who performed
   * the action, the specific action description, the timestamp of the action,
   * any related entity IDs (such as orders), and optional detailed metadata.
   * This entry maintains a permanent historical record with no modification
   * capability.
   *
   * This operation requires a path parameter 'id' which uniquely identifies the
   * audit log record. The response returns the complete audit log object
   * including creation timestamps and possible null fields for optional
   * metadata. Error handling includes not found or unauthorized access
   * responses.
   *
   * @param connection
   * @param id Unique identifier of the audit log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAuditLog> {
    try {
      return await getShoppingMallAdminAuditLogsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
