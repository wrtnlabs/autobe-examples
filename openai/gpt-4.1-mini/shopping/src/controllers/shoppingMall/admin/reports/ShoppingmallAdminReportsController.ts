import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminReports } from "../../../../providers/postShoppingMallAdminReports";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminReports } from "../../../../providers/patchShoppingMallAdminReports";
import { getShoppingMallAdminReportsId } from "../../../../providers/getShoppingMallAdminReportsId";
import { putShoppingMallAdminReportsId } from "../../../../providers/putShoppingMallAdminReportsId";
import { deleteShoppingMallAdminReportsId } from "../../../../providers/deleteShoppingMallAdminReportsId";

import { IShoppingMallReport } from "../../../../api/structures/IShoppingMallReport";
import { IPageIShoppingMallReport } from "../../../../api/structures/IPageIShoppingMallReport";

@Controller("/shoppingMall/admin/reports")
export class ShoppingmallAdminReportsController {
  /**
   * Create a new admin report.
   *
   * Create a new administrative report in the shopping mall platform. The
   * request must include the report name and type, optionally with a URI
   * pointing to the generated report content.
   *
   * Only authenticated administrators may perform this operation to maintain
   * data security and integrity.
   *
   * The response includes the full details of the created report including ID
   * and timestamps.
   *
   * Validation enforces unique report names and valid report types.
   *
   * Errors occur if a duplicate report name is submitted or required fields are
   * missing.
   *
   * No soft delete or update is performed in this operation.
   *
   * The created report may be subsequently retrieved via its unique ID using
   * the GET report endpoint.
   *
   * @param connection
   * @param body Details of the new admin report to be created
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallReport.ICreate,
  ): Promise<IShoppingMallReport> {
    try {
      return await postShoppingMallAdminReports({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve filtered and paginated list of administrative reports.
   *
   * Search and retrieve a paginated list of administrative reports for business
   * analysis and operational insights. The search criteria may include filters
   * by report type, creation date range, and generated administrator.
   *
   * The response provides a paginated collection of report summaries with
   * metadata such as report name, type, creator, and timestamps. This allows
   * admins to efficiently review and select reports relevant to their tasks.
   *
   * Security is enforced so that only users with the admin role can access this
   * information. No modification of report data is possible via this endpoint,
   * which serves read-only purposes.
   *
   * The operation supports complex search parameters in the request body
   * including pagination controls. This enables scalable and efficient data
   * retrieval in large datasets.
   *
   * This operation facilitates integration with the reporting dashboards in the
   * admin console and supports downstream analytics and business intelligence
   * workflows.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering reports
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallReport.IRequest,
  ): Promise<IPageIShoppingMallReport.ISummary> {
    try {
      return await patchShoppingMallAdminReports({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific admin report by ID.
   *
   * Retrieve a specific administrative report by its unique ID from the
   * shopping mall's reporting system. This API operation allows admins to fetch
   * detailed report data including the report's name, type, content URI for
   * download or viewing, and timestamps for creation and updates.
   *
   * Security considerations require that only authenticated administrators can
   * access report details. Access is restricted to users with the admin role to
   * ensure sensitive business analytics are protected.
   *
   * The operation queries the shopping_mall_reports table, uniquely identified
   * by report ID. It returns all stored attributes including associated admin
   * who generated the report if any.
   *
   * The operation performs a direct lookup without modification, ensuring
   * read-only access. If the report ID does not exist, the operation typically
   * returns a not found error.
   *
   * This endpoint pairs with the report creation API which accepts new report
   * generation requests.
   *
   * Hard delete is not applicable here; soft delete is respected by excluding
   * deleted records if implemented in the service logic.
   *
   * @param connection
   * @param id Unique identifier of the report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReport> {
    try {
      return await getShoppingMallAdminReportsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an admin report by ID.
   *
   * Update an existing administrative report's details by report ID. This
   * includes changing the report's name, type, and content URI to reflect new
   * insights or analytics data.
   *
   * Only users with the 'admin' role are authorized to perform this update to
   * maintain platform security and data integrity.
   *
   * The operation interfaces directly with the 'shopping_mall_reports' table,
   * respecting all constraints such as unique report names and soft deletion
   * timestamps.
   *
   * This operation requires the full report payload in the request body,
   * adhering to the 'IShoppingMallReport.IUpdate' DTO structure. The response
   * returns the updated report entity.
   *
   * Validation includes uniqueness of report name and mandatory fields to
   * prevent corrupted data entries.
   *
   * Error handling covers scenarios such as updating non-existent reports and
   * invalid data formats.
   *
   * @param connection
   * @param id Target report's ID
   * @param body Report update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateReport(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReport.IUpdate,
  ): Promise<IShoppingMallReport> {
    try {
      return await putShoppingMallAdminReportsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an admin report by ID.
   *
   * Permanently remove an admin report from the system by its unique ID.
   *
   * Only users with the 'admin' role have permission to delete reports to
   * ensure data is managed securely and responsibly.
   *
   * This operation directly removes the record from the 'shopping_mall_reports'
   * table as there is no soft delete column to mark the report as inactive.
   *
   * Care should be taken to avoid accidental deletions, as this action cannot
   * be undone.
   *
   * The endpoint accepts the report ID as a path parameter. There is no request
   * body or response body for this operation.
   *
   * Error handling includes cases where the specified report does not exist.
   *
   * @param connection
   * @param id Target report's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseReport(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminReportsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
