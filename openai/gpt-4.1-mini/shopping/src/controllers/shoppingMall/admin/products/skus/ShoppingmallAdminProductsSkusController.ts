import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminProductsProductIdSkus } from "../../../../../providers/patchShoppingMallAdminProductsProductIdSkus";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageIShoppingMallShoppingMallSku } from "../../../../../api/structures/IPageIShoppingMallShoppingMallSku";
import { IShoppingMallShoppingMallSku } from "../../../../../api/structures/IShoppingMallShoppingMallSku";

@Controller("/shoppingMall/admin/products/:productId/skus")
export class ShoppingmallAdminProductsSkusController {
  /**
   * List SKUs for a product with pagination and filtering capabilities.
   *
   * Retrieve a list of SKU variants for the given product ID. This list is
   * useful for sellers managing product variants and for administrative
   * oversight. Each SKU includes details like SKU code, price, weight (if
   * available), lifecycle status, and timestamps for creation and update.
   *
   * The SKU entities are stored in the shopping_mall_skus table linked to the
   * product. This operation supports filtering by SKU status, pagination with
   * configurable page size and number, and sorting by various fields.
   *
   * Security measures ensure that only users with seller or admin roles for the
   * owning product can perform this query to protect data integrity and
   * confidentiality.
   *
   * The response returns a paginated summary of SKUs, allowing efficient
   * management and display in user interfaces.
   *
   * @param connection
   * @param productId Identifier of the product to list SKUs for
   * @param body Search criteria and pagination parameters for SKU filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShoppingMallSku.IRequest,
  ): Promise<IPageIShoppingMallShoppingMallSku.ISummary> {
    try {
      return await patchShoppingMallAdminProductsProductIdSkus({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
