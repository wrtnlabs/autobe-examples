import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallGuestShoppingCarts } from "../../../../providers/postShoppingMallGuestShoppingCarts";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";
import { putShoppingMallGuestShoppingCartsShoppingCartId } from "../../../../providers/putShoppingMallGuestShoppingCartsShoppingCartId";

import { IShoppingMallShoppingCart } from "../../../../api/structures/IShoppingMallShoppingCart";

@Controller("/shoppingMall/guest/shoppingCarts")
export class ShoppingmallGuestShoppingcartsController {
  /**
   * Create a new shopping cart for a customer or guest session.
   *
   * Creates a new shopping cart linked either to a registered customer or a
   * guest session ID, enabling SKU items to be saved for subsequent order
   * placement. The operation prevents creating duplicate carts for the same
   * customer or session. It stores the customer's reference ID or session ID,
   * timestamps for creation and update, and optional soft delete timestamp.
   *
   * User roles authorized to call this operation include authenticated
   * customers and guests with valid session IDs. Proper validation of the
   * associated customer or session is performed.
   *
   * Related operations include updating the cart and managing cart items.
   * Errors include conflict if a cart already exists for the customer or
   * session, or validation errors for missing required fields.
   *
   * @param connection
   * @param body Request body schema for creating a shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IShoppingMallShoppingCart.ICreate,
  ): Promise<IShoppingMallShoppingCart> {
    try {
      return await postShoppingMallGuestShoppingCarts({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shopping cart details identified by ID.
   *
   * Updates a shopping cart by its unique ID, allowing modification of the
   * associated customer or guest session ID, along with updated timestamps.
   * Ensures only authorized users (customers and guests) can update their
   * carts.
   *
   * This is vital for maintaining accurate cart linkage in user sessions.
   * Related operations include cart item management and cart retrieval.
   *
   * Possible errors include not found if the cart ID does not exist,
   * authorization failure if the updater does not own the cart, or validation
   * errors on provided input.
   *
   * @param connection
   * @param shoppingCartId Unique identifier of the shopping cart to update
   * @param body Request body schema for updating a shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shoppingCartId")
  public async update(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShoppingCart.IUpdate,
  ): Promise<IShoppingMallShoppingCart> {
    try {
      return await putShoppingMallGuestShoppingCartsShoppingCartId({
        guest,
        shoppingCartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
