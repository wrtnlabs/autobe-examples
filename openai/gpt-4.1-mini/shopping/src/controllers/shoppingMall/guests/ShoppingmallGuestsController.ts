import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallGuests } from "../../../providers/postShoppingMallGuests";
import { putShoppingMallGuestsId } from "../../../providers/putShoppingMallGuestsId";
import { deleteShoppingMallGuestsId } from "../../../providers/deleteShoppingMallGuestsId";

import { IShoppingMallGuest } from "../../../api/structures/IShoppingMallGuest";

@Controller("/shoppingMall/guests")
export class ShoppingmallGuestsController {
  /**
   * Create a guest user session for an unauthenticated visitor.
   *
   * Create a new guest user session record in the system. This endpoint
   * generates a unique guest entity for an unauthenticated visitor session
   * identified by a session token. Optional IP address and user agent fields
   * can capture additional metadata about the guest's browsing environment. The
   * record includes timestamps for creation and updates, and supports soft
   * deletion for archival purposes.
   *
   * This operation is typically invoked when a guest user accesses the platform
   * to establish a unique session for tracking and personalized experiences.
   *
   * Security considerations include ensuring the uniqueness and
   * unpredictability of the sessionToken to prevent session hijacking or
   * duplication.
   *
   * Upon successful creation, the full guest record with all properties
   * including timestamps is returned.
   *
   * @param connection
   * @param body Payload for creating a new guest user session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IShoppingMallGuest.ICreate,
  ): Promise<IShoppingMallGuest> {
    try {
      return await postShoppingMallGuests({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a guest user session by its unique identifier.
   *
   * Update an existing guest user session identified by the guest UUID. The
   * update may modify the session token, IP address, and user agent fields to
   * reflect changes in the browsing session or device state. Timestamps are
   * maintained automatically. Soft deletion is supported with nullable
   * deleted_at field.
   *
   * This operation requires the guest's UUID as a path parameter to identify
   * the relevant session record to update.
   *
   * Authorization roles for this endpoint are empty as guest sessions do not
   * require authentication.
   *
   * Returns the updated guest user session data on success.
   *
   * @param connection
   * @param id Unique identifier of the guest user session
   * @param body Payload with updated guest user session fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallGuest.IUpdate,
  ): Promise<IShoppingMallGuest> {
    try {
      return await putShoppingMallGuestsId({
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete guest user by ID.
   *
   * Deletes a guest user from the shopping mall system by their unique ID.
   *
   * Guest users represent unauthenticated visitors with session information
   * including session tokens, IP addresses, and user agents. Deletion is a
   * permanent remove operation, fully clearing this data.
   *
   * Only the ID of the guest user is needed.
   *
   * No response body is returned upon success.
   *
   * No authorization roles are required since this is a system-level cleanup
   * action on guest records.
   *
   * This operation interacts directly with the shopping_mall_guests table in
   * the database.
   *
   * @param connection
   * @param id Unique identifier of the target guest user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallGuestsId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
