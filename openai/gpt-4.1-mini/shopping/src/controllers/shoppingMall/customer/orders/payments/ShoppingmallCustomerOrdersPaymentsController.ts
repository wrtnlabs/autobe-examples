import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerOrdersOrderIdPaymentsPaymentId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdPaymentsPaymentId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerOrdersOrderIdPaymentsPaymentId } from "../../../../../providers/putShoppingMallCustomerOrdersOrderIdPaymentsPaymentId";
import { patchShoppingMallCustomerOrdersOrderIdPaymentsPaymentId } from "../../../../../providers/patchShoppingMallCustomerOrdersOrderIdPaymentsPaymentId";
import { postShoppingMallCustomerOrdersOrderIdPayments } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdPayments";

import { IShoppingMallPayment } from "../../../../../api/structures/IShoppingMallPayment";

@Controller("/shoppingMall/customer/orders/:orderId/payments")
export class ShoppingmallCustomerOrdersPaymentsController {
  /**
   * Retrieve details of a specific payment for an order.
   *
   * Retrieve detailed information for the payment specified by payment ID and
   * order ID.
   *
   * Access control limits this to authenticated users with the 'customer' role.
   *
   * Returns full payment details including payment amount, method, status,
   * transaction ID, and confirmation timestamp.
   *
   * Errors occur if identifiers are incorrect or access is unauthorized.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param paymentId Unique identifier of the specific payment record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentId")
  public async atPayment(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallPayment> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdPaymentsPaymentId({
        customer,
        orderId,
        paymentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update payment record of a specific order.
   *
   * Updates an existing payment transaction record for the specified order and
   * payment IDs. Validates and applies changes to payment amount, method,
   * status, transaction ID, and confirmation timestamp.
   *
   * Restricted to authorized customers and sellers.
   *
   * Ensures that payment state is consistent and properly linked to the order.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param paymentId Unique identifier of the payment record to update
   * @param body Payment update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentId")
  public async putByOrderidAndPaymentid(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.IUpdate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await putShoppingMallCustomerOrdersOrderIdPaymentsPaymentId({
        customer,
        orderId,
        paymentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment record for a specific order.
   *
   * Update payment details for the specified payment ID belonging to a specific
   * order. This includes fields such as payment amount, payment method, payment
   * status, transaction ID, and confirmed timestamp.
   *
   * Security considerations: Only authenticated users with the 'customer' role
   * are authorized to perform this update to protect payment data integrity.
   *
   * This operation is related to the shopping_mall_payments table which stores
   * transactional payment data linked to orders.
   *
   * Validation requires properly formatted UUIDs for orderId and paymentId path
   * parameters, and a request body conforming to the
   * IShoppingMallPayment.IUpdate schema.
   *
   * On success, the updated payment information is returned. Errors may occur
   * if IDs are invalid, payment record is not found, or user lacks requisite
   * permissions.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param paymentId Unique identifier of the specific payment record
   * @param body Update information for the payment record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch(":paymentId")
  public async patchByOrderidAndPaymentid(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.IUpdate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await patchShoppingMallCustomerOrdersOrderIdPaymentsPaymentId({
        customer,
        orderId,
        paymentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a payment record for a specific order.
   *
   * Creates a new payment transaction record for the specified order. The
   * operation validates payment details including payment method, amount, and
   * status. The payment is linked to the order for transaction tracking.
   *
   * This endpoint can only be accessed by authenticated customers and sellers
   * who have appropriate permissions for the order.
   *
   * Relies on the shopping_mall_payments table for storing payment info and
   * shopping_mall_orders for order association. Proper error handling is
   * essential to indicate payment failures or data issues.
   *
   * Returned data includes the created payment record with its identifiers and
   * timestamps for client confirmation.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Payment creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createPayment(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.ICreate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdPayments({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
