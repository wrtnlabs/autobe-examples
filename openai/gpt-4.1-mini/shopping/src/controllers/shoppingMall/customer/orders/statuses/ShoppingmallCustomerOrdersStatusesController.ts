import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerOrdersOrderIdStatusesStatusId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdStatusesStatusId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { postShoppingMallCustomerOrdersOrderIdStatuses } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdStatuses";

import { IShoppingMallOrderStatus } from "../../../../../api/structures/IShoppingMallOrderStatus";

@Controller("/shoppingMall/customer/orders/:orderId/statuses")
export class ShoppingmallCustomerOrdersStatusesController {
  /**
   * Retrieve specific order status record by order and status ID.
   *
   * Retrieve detailed information about a specific order status entry by order
   * ID and status ID. This endpoint allows clients to get the precise status
   * change record within the lifecycle of a given order.
   *
   * Security measures enforce that only authorized parties (authorized
   * customers, sellers, or admins) can access the order status to protect
   * privacy and order integrity.
   *
   * This operation interfaces directly with the `shopping_mall_order_statuses`
   * table, providing real-time status details such as status name and the
   * timestamp when the status was recorded. It is essential for presenting
   * order history and status timelines in customer and admin dashboards.
   *
   * The expected behavior includes returning a single order status entity if it
   * exists, or an appropriate error if the status or order does not exist.
   *
   * Errors for unauthorized access or non-existent entities must be handled
   * gracefully with suitable HTTP status codes.
   *
   * Path parameters orderId and statusId uniquely identify the order status
   * record in question.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param statusId Unique identifier of the target order status record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderStatus> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdStatusesStatusId({
        customer,
        orderId,
        statusId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new order status record for specified order.
   *
   * Create a new order status record for an existing order to record a status
   * transition in the order lifecycle.
   *
   * This operation adds a new entry into the `shopping_mall_order_statuses`
   * table associating the given status and timestamp to the specified order.
   *
   * The request body should include the status value (e.g., Pending Payment,
   * Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the
   * status was set.
   *
   * Authorization ensures only permitted users (such as the owning customer,
   * related seller, or system administrators) can perform this update to
   * maintain data integrity and security.
   *
   * The response returns the created order status entity, confirming successful
   * addition into the system.
   *
   * Validation errors such as invalid status values or missing fields must be
   * properly reported.
   *
   * Business logic must enforce correct status transitions and timestamp
   * consistency if implemented in service layers.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Order status creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderStatus.ICreate,
  ): Promise<IShoppingMallOrderStatus> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdStatuses({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
