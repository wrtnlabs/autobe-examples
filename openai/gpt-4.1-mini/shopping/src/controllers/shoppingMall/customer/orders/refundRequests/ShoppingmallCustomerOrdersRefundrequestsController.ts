import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerOrdersOrderIdRefundRequests } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdRefundRequests";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerOrdersOrderIdRefundRequests } from "../../../../../providers/patchShoppingMallCustomerOrdersOrderIdRefundRequests";
import { getShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId";
import { putShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId } from "../../../../../providers/putShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId";
import { deleteShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId } from "../../../../../providers/deleteShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId";

import { IShoppingMallRefundRequest } from "../../../../../api/structures/IShoppingMallRefundRequest";

@Controller("/shoppingMall/customer/orders/:orderId/refundRequests")
export class ShoppingmallCustomerOrdersRefundrequestsController {
  /**
   * Create refund request for an order.
   *
   * Create a new refund request for the specified order on behalf of a
   * customer. This operation validates that the order exists and that the
   * customer is authorized to initiate a refund request. The refund request
   * includes the reason for refund and the requested refund amount, both
   * required for processing. The initial status of the refund request will be
   * set to 'pending' and await review and approval by administrators. Security
   * measures ensure that only authenticated customers with legitimate orders
   * can perform this action.
   *
   * This operation directly manipulates the shopping_mall_refund_requests table
   * in Prisma schema. It enforces business rules that refunds can only be
   * requested on existing orders that belong to the requesting customer.
   *
   * Expected behavior includes validation errors if the order does not exist or
   * does not belong to the customer, and successful creation returns the new
   * refund request record.
   *
   * No response body is provided on creation to minimize exposure of refund
   * details. Confirmation is conveyed by HTTP status code 201 Created.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Information required to create a refund request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createRefundRequest(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallRefundRequest.ICreate,
  ): Promise<void> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdRefundRequests({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a refund request for the specified order.
   *
   * Update an existing refund request associated with a given order. This
   * operation targets the shopping_mall_refund_requests table, which captures
   * refund requests initiated by customers for order refunds.
   *
   * The update request allows authorized users, such as the refund request
   * owner or an admin, to modify refund details like status and processing
   * timestamps. Validation includes verifying permission to update the refund
   * request and ensuring data integrity.
   *
   * This operation enables refund request management as part of the order
   * lifecycle, supporting workflows like approval, rejection, or processing
   * progress updates.
   *
   * Proper error handling is expected when invalid updates or unauthorized
   * attempts are made.
   *
   * It complements refund request retrieval to ensure full management of refund
   * records associated with orders.
   *
   * @param connection
   * @param orderId Target order's unique identifier
   * @param body Refund request update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async patchByOrderid(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallRefundRequest.IUpdate,
  ): Promise<IShoppingMallRefundRequest> {
    try {
      return await patchShoppingMallCustomerOrdersOrderIdRefundRequests({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed refund request information by order ID and refund request
   * ID.
   *
   * Retrieve detailed information of a specific refund request associated with
   * an order. This operation targets the shopping_mall_refund_requests table,
   * which captures refund requests initiated by customers for their orders.
   *
   * The refund request includes the reason, requested refund amount, current
   * status (e.g., pending, approved, rejected), and timestamps for request and
   * processing. The operation provides comprehensive data for administrative
   * review and customer service.
   *
   * Security considerations include restricting access to users with
   * appropriate roles authorized to view refund details, such as admins or the
   * customer who submitted the request. Sensitive financial data such as refund
   * amount and payment method details are included.
   *
   * Validation ensures that both orderId and refundRequestId are valid UUIDs
   * corresponding to existing records, rejecting invalid or unauthorized access
   * requests. Related order and customer information can be queried separately
   * as needed.
   *
   * This API operation complements refund request creation and processing
   * endpoints, enabling a full lifecycle view of refund management within the
   * shopping mall platform.
   *
   * @param connection
   * @param orderId Target order's unique identifier
   * @param refundRequestId Specific refund request's unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":refundRequestId")
  public async atRefundRequest(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundRequestId")
    refundRequestId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallRefundRequest> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId(
        {
          customer,
          orderId,
          refundRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update refund request for an order.
   *
   * Update details of a specific refund request associated with an order. This
   * enables modification of the refund reason, amount, and status (such as
   * approving or rejecting the refund). Input validation verifies that the
   * refund request exists and belongs to the authenticated user.
   *
   * The updated refund request is persisted to the
   * shopping_mall_refund_requests table in Prisma schema. Authorization is
   * checked to ensure only the owning customer or authorized personnel can
   * update the request. No response content is returned to reduce exposure of
   * sensitive refund information.
   *
   * This operation supports the refund management lifecycle and integrates with
   * administrative refund approval processes.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param refundRequestId Unique identifier of the target refund request
   * @param body Information for updating a refund request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":refundRequestId")
  public async putByOrderidAndRefundrequestid(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundRequestId")
    refundRequestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallRefundRequest.IUpdate,
  ): Promise<void> {
    try {
      return await putShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId(
        {
          customer,
          orderId,
          refundRequestId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific refund request for an order.
   *
   * This operation deletes a refund request record in the shopping mall
   * platform database. It requires both the order ID and refund request ID to
   * uniquely identify the refund request to delete. Upon execution, the refund
   * request linked to the specified order is permanently removed from the
   * database and cannot be recovered.
   *
   * Authorization is required: typically, only customers linked to the order or
   * administrators with proper permissions may perform this action.
   *
   * As per the Prisma database schema, shopping_mall_refund_requests is a main
   * entity tracking refund requests with properties such as refund amount,
   * reason, status, and timestamps. Deleting a refund request reflects that the
   * refund claim is cancelled or invalidated.
   *
   * No request body is needed as the operation is identified fully via the path
   * parameters. No response body is returned on success.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @param refundRequestId Unique identifier of the refund request to be
   *   deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":refundRequestId")
  public async eraseRefundRequest(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundRequestId")
    refundRequestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerOrdersOrderIdRefundRequestsRefundRequestId(
        {
          customer,
          orderId,
          refundRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
