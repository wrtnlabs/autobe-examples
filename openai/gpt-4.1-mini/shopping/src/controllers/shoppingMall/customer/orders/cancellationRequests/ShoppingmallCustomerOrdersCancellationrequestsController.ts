import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId } from "../../../../../providers/putShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId";
import { deleteShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId } from "../../../../../providers/deleteShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId";
import { postShoppingMallCustomerOrdersOrderIdCancellationRequests } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdCancellationRequests";

import { IShoppingMallCancellationRequest } from "../../../../../api/structures/IShoppingMallCancellationRequest";

@Controller("/shoppingMall/customer/orders/:orderId/cancellationRequests")
export class ShoppingmallCustomerOrdersCancellationrequestsController {
  /**
   * Retrieve a specific cancellation request for an order.
   *
   * Retrieve a specific cancellation request linked to the given order ID and
   * cancellation request ID.
   *
   * The cancellation request includes details such as the request reason,
   * status of the cancellation request (Pending, Approved, Rejected), the
   * request and response timestamps, along with the associated customer and
   * order identifiers.
   *
   * Access to this operation is limited to authenticated users with roles:
   * customer, seller, or admin, ensuring secure and privacy-compliant data
   * handling.
   *
   * This endpoint corresponds to the shopping_mall_cancellation_requests table
   * and provides full details about the cancellation request for client viewing
   * or administrative processing.
   *
   * Error handling includes responses for invalid IDs, unauthorized access, or
   * missing resources.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param cancellationRequestId Unique identifier of the cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cancellationRequestId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationRequestId")
    cancellationRequestId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCancellationRequest> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId(
        {
          customer,
          orderId,
          cancellationRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update cancellation request for a specified order.
   *
   * Update an existing cancellation request for a specified order.
   *
   * This operation allows authorized customers to modify the details of a
   * cancellation request associated with a specific order. The cancellation
   * request is identified by its unique ID and the parent order ID. Customers
   * can update fields such as the reason for cancellation, status of the
   * request, as well as relevant timestamps.
   *
   * Security considerations require that only authenticated and authorized
   * customers can update their own cancellation requests to prevent
   * unauthorized changes. The operation uses a PUT HTTP method as it expects a
   * complete update payload.
   *
   * This API directly manipulates the shopping_mall_cancellation_requests
   * table, enforcing all data constraints defined in the Prisma DB schema. The
   * update operation also integrates with order management workflows ensuring
   * the cancellation request status aligns with the overall order state.
   *
   * The operation should return the updated cancellation request entity on
   * success. Errors may occur due to invalid input, authorization failures, or
   * business rule violations such as attempting to update a cancellation
   * request that is already processed.
   *
   * Related API operations to consider for comprehensive management include
   * creating cancellation requests and fetching their details.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param cancellationRequestId Unique identifier of the cancellation request
   * @param body Update information of the cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cancellationRequestId")
  public async updateCancellationRequest(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationRequestId")
    cancellationRequestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCancellationRequest.IUpdate,
  ): Promise<IShoppingMallCancellationRequest> {
    try {
      return await putShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId(
        {
          customer,
          orderId,
          cancellationRequestId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete cancellation request for a specified order.
   *
   * Delete a specific cancellation request for a specified order.
   *
   * This operation allows authorized customers to permanently remove a
   * cancellation request related to a particular order. The cancellation
   * request is identified by both order ID and cancellation request ID
   * parameters. Only authenticated customers with appropriate permissions can
   * perform this deletion.
   *
   * The delete action permanently removes the record from the
   * shopping_mall_cancellation_requests table without soft delete marking. It
   * ensures integrity by checking ownership and preventing unauthorized
   * deletion.
   *
   * Successful deletion is confirmed through the standard HTTP status code with
   * no response body. Errors may arise from invalid IDs, authorization
   * failures, or attempts to delete non-existent requests.
   *
   * This operation complements related APIs such as creating and updating
   * cancellation requests and viewing their details.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param cancellationRequestId Unique identifier of the cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cancellationRequestId")
  public async eraseCancellationRequest(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationRequestId")
    cancellationRequestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerOrdersOrderIdCancellationRequestsCancellationRequestId(
        {
          customer,
          orderId,
          cancellationRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new cancellation request for an order.
   *
   * Create a cancellation request linked to a specific order. The request body
   * must include the reason for cancellation and the customer ID initiating the
   * request.
   *
   * The status is set to 'Pending' by default on creation.
   *
   * This operation checks that the requesting user has permission to create a
   * cancellation request for the target order.
   *
   * Cancellation requests are persisted in the
   * shopping_mall_cancellation_requests table and returned in the response.
   *
   * Roles authorized to use this endpoint are customer, seller, and admin.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Creation info of the cancellation request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCancellationRequest.ICreate,
  ): Promise<IShoppingMallCancellationRequest> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdCancellationRequests({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
