import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerOrdersOrderIdItemsOrderItemId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdItemsOrderItemId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerOrdersOrderIdItemsOrderItemId } from "../../../../../providers/putShoppingMallCustomerOrdersOrderIdItemsOrderItemId";
import { deleteShoppingMallCustomerOrdersOrderIdItemsOrderItemId } from "../../../../../providers/deleteShoppingMallCustomerOrdersOrderIdItemsOrderItemId";
import { postShoppingMallCustomerOrdersOrderIdItems } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdItems";

import { IShoppingMallOrderItem } from "../../../../../api/structures/IShoppingMallOrderItem";

@Controller("/shoppingMall/customer/orders/:orderId/items")
export class ShoppingmallCustomerOrdersItemsController {
  /**
   * Retrieve detailed information about a specific order item by IDs.
   *
   * This GET /orders/{orderId}/items/{orderItemId} API endpoint provides
   * detailed information about a single order item within a specific order. The
   * operation returns SKU association, quantity ordered, unit price, and total
   * price for that item. Users authorized include customers who placed the
   * order, sellers fulfilling the order, and admins overseeing the platform.
   *
   * Parameters:
   *
   * - OrderId: UUID of the order containing the item
   * - OrderItemId: UUID of the order item to retrieve
   *
   * No request body is needed as this is a retrieval operation.
   *
   * Errors handled include invalid or non-existent IDs, authorization failures,
   * and not found responses.
   *
   * This operation directly maps to the Prisma model shopping_mall_order_items.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @param orderItemId Unique identifier of the order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderItemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdItemsOrderItemId({
        customer,
        orderId,
        orderItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific order item within an order.
   *
   * This operation updates details of a particular order item identified by its
   * ID and associated order ID.
   *
   * Users authorized to update order items (such as the customer owning the
   * order, the related seller, or administrators) can modify the quantity
   * ordered, the unit price, or the total price. It is crucial to validate that
   * the updated quantity does not exceed available SKU inventory to avoid
   * overselling.
   *
   * The API updates the shopping_mall_order_items record in the database,
   * ensuring the order's financial and inventory calculations reflect the new
   * item details. Incorrect updates can lead to accounting errors or shipment
   * mismatches, so proper validation and authorization are essential.
   *
   * Related operations include retrieving order details to view current items
   * and managing inventory to adjust stock following order modifications.
   *
   * This operation permanently updates the order item record; no soft deletion
   * or recovery applies here. Proper concurrency control should be applied to
   * prevent race conditions in updates.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param orderItemId Unique identifier of the target order item
   * @param body Updated information for order item modification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderItemId")
  public async updateOrderItem(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.IUpdate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await putShoppingMallCustomerOrdersOrderIdItemsOrderItemId({
        customer,
        orderId,
        orderItemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific order item from an order.
   *
   * This operation permanently removes a specific order item from the given
   * order.
   *
   * Authorized users, such as the customer who placed the order, the seller, or
   * administrators, can delete an order item to modify order contents before
   * processing or shipment. The removal updates the order's totals and may
   * trigger inventory adjustments to restock the SKU quantities.
   *
   * Deleting an order item is irreversible and fully removes the record from
   * the database. There is no soft delete functionality for order items as they
   * are tightly linked to transactional order data.
   *
   * Related operations include listing order items, updating order items, and
   * managing inventory stock accordingly.
   *
   * Ensure that deletion transactions are handled carefully to maintain data
   * consistency and prevent orphaned references.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param orderItemId Unique identifier of the target order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderItemId")
  public async eraseOrderItem(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerOrdersOrderIdItemsOrderItemId({
        customer,
        orderId,
        orderItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Add a new item to an existing order.
   *
   * This POST /orders/{orderId}/items endpoint allows creation of an order item
   * within an existing order. Users authorized include the customer who owns
   * the order, the seller responsible for the product, and admins.
   *
   * Request body must include:
   *
   * - Shopping_mall_sku_id: UUID of the product SKU
   * - Quantity: Number of units ordered
   * - Unit_price: Price per unit at order time
   * - Total_price: Total price for this SKU (quantity x unit_price)
   *
   * Response contains full details of the created order item.
   *
   * This operation requires careful validation of SKU availability, pricing
   * integrity, and order ownership.
   *
   * This API interacts directly with the shopping_mall_order_items schema in
   * Prisma.
   *
   * @param connection
   * @param orderId Unique identifier of the order to add an item to
   * @param body Details for creating a new order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.ICreate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdItems({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
