import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerOrders } from "../../../../providers/postShoppingMallCustomerOrders";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerOrders } from "../../../../providers/patchShoppingMallCustomerOrders";
import { getShoppingMallCustomerOrdersOrderId } from "../../../../providers/getShoppingMallCustomerOrdersOrderId";
import { putShoppingMallCustomerOrdersOrderId } from "../../../../providers/putShoppingMallCustomerOrdersOrderId";

import { IShoppingMallOrder } from "../../../../api/structures/IShoppingMallOrder";
import { IPageIShoppingMallOrder } from "../../../../api/structures/IPageIShoppingMallOrder";

@Controller("/shoppingMall/customer/orders")
export class ShoppingmallCustomerOrdersController {
  /**
   * Create a new shopping mall order.
   *
   * Create a new order with all necessary details including customer and seller
   * IDs, total price, payment method, shipping address, and unique order
   * number. This creates a record in the shopping_mall_orders table
   * representing an order in the e-commerce system.
   *
   * Only authenticated customers are authorized. The system validates the
   * uniqueness of the order number and the correctness of foreign keys. The
   * response returns the detailed newly created order resource.
   *
   * The system expects order lifecycle related status fields, and this endpoint
   * is the first step for order processing after payment confirmation.
   *
   * Errors may result from invalid input or duplicate order numbers.
   *
   * @param connection
   * @param body Order creation details including customer, seller, total price,
   *   status, payment method, and shipping address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallOrder.ICreate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await postShoppingMallCustomerOrders({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of shopping mall orders.
   *
   * Retrieve a paginated and filtered list of orders for the shopping mall
   * platform, allowing search by customer ID, seller ID, status, business
   * status, payment method, and creation/update date ranges.
   *
   * Security ensures only authorized roles can access their respective order
   * data. This operation returns a summary list of orders optimized for display
   * in order management UI.
   *
   * This operation corresponds to the shopping_mall_orders table in the Prisma
   * schema and returns paginated order summary information.
   *
   * @param connection
   * @param body Parameters to filter, search, sort, and paginate shopping mall
   *   orders
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallOrder.IRequest,
  ): Promise<IPageIShoppingMallOrder.ISummary> {
    try {
      return await patchShoppingMallCustomerOrders({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed shopping mall order information by ID.
   *
   * Retrieve detailed information for a shopping mall order identified by
   * orderId. Contains order metadata, items, payments, shipping and tracking
   * info.
   *
   * Access is restricted to the order owner, associated seller, and admins.
   *
   * Uses the shopping_mall_orders table and related tables such as
   * shopping_mall_order_items and shopping_mall_payments.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrder> {
    try {
      return await getShoppingMallCustomerOrdersOrderId({
        customer,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shopping mall order by ID.
   *
   * Update an existing shopping mall order specified by the orderId path
   * parameter. Only allowable fields will be changed with validation on status
   * and payment consistency.
   *
   * Authorization is limited to roles customer, seller, and admin with
   * ownership or administrative rights.
   *
   * The response returns the updated shopping mall order details or appropriate
   * error messages on failure.
   *
   * Related business rules ensure status transitions follow correct sequences
   * and inventory is managed accordingly.
   *
   * The underlying resource is shopping_mall_orders table.
   *
   * @param connection
   * @param orderId Unique identifier of the order to update
   * @param body Order update details with fields to modify
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IUpdate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await putShoppingMallCustomerOrdersOrderId({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
