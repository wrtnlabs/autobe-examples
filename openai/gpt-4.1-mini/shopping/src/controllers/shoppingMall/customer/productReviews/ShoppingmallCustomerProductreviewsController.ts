import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerProductReviews } from "../../../../providers/postShoppingMallCustomerProductReviews";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerProductReviewsId } from "../../../../providers/putShoppingMallCustomerProductReviewsId";

import { IShoppingMallProductReview } from "../../../../api/structures/IShoppingMallProductReview";

@Controller("/shoppingMall/customer/productReviews")
export class ShoppingmallCustomerProductreviewsController {
  /**
   * Create a new product review by an authenticated customer who purchased the
   * product.
   *
   * Allows customers to create a new review for a purchased product. The
   * customer must be authenticated with the role 'customer'. The review
   * includes rating (1-5), optional review text, and must refer to the order
   * confirming purchase to ensure eligibility. The review is initially set with
   * status 'pending' for moderation.
   *
   * This operation enforces the business rule that only verified buyers may
   * post reviews and returns the created review details including timestamps
   * and unique ID.
   *
   * Errors may occur if validation fails (e.g., rating out of range) or if
   * unauthorized access is attempted.
   *
   * @param connection
   * @param body New product review submission data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallProductReview.ICreate,
  ): Promise<IShoppingMallProductReview> {
    try {
      return await postShoppingMallCustomerProductReviews({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing product review of authenticated customer by review ID.
   *
   * Enables customers to update their own submitted product reviews. The review
   * is identified by the UUID path parameter 'id'. Only authenticated customers
   * can perform this operation, and the moderation status is again set to
   * 'pending' upon update for fresh moderation.
   *
   * Typical validation errors include invalid rating values or unauthorized
   * attempts to update others' reviews.
   *
   * The operation returns updated review details, including timestamps to
   * confirm successful update.
   *
   * @param connection
   * @param id Unique identifier of the product review to update
   * @param body Updated product review data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductReview.IUpdate,
  ): Promise<IShoppingMallProductReview> {
    try {
      return await putShoppingMallCustomerProductReviewsId({
        customer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
