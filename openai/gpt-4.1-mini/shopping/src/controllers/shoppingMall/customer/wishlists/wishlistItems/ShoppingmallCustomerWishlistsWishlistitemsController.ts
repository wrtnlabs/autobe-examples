import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerWishlistsWishlistIdWishlistItems } from "../../../../../providers/postShoppingMallCustomerWishlistsWishlistIdWishlistItems";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerWishlistsWishlistIdWishlistItems } from "../../../../../providers/patchShoppingMallCustomerWishlistsWishlistIdWishlistItems";
import { getShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId } from "../../../../../providers/getShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId";
import { putShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId } from "../../../../../providers/putShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId";
import { deleteShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId } from "../../../../../providers/deleteShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId";

import { IShoppingMallWishlistItem } from "../../../../../api/structures/IShoppingMallWishlistItem";
import { IPageIShoppingMallWishlistItem } from "../../../../../api/structures/IPageIShoppingMallWishlistItem";

@Controller("/shoppingMall/customer/wishlists/:wishlistId/wishlistItems")
export class ShoppingmallCustomerWishlistsWishlistitemsController {
  /**
   * Create a new wishlist item under specific wishlist.
   *
   * Create a new wishlist item in a specific wishlist owned by the
   * authenticated customer.
   *
   * Request body must include the SKU id to be added.
   *
   * The system validates that the SKU exists and the wishlist belongs to the
   * authenticated customer.
   *
   * On success, returns the created wishlist item including identifiers and
   * timestamps.
   *
   * Only the owning customer may perform this operation.
   *
   * No direct request body or parameters other than wishlistId to identify the
   * wishlist.
   *
   * Returns the created wishlist item entity.
   *
   * @param connection
   * @param wishlistId Unique identifier of the target wishlist
   * @param body Data payload for adding a wishlist item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlistItem.ICreate,
  ): Promise<IShoppingMallWishlistItem> {
    try {
      return await postShoppingMallCustomerWishlistsWishlistIdWishlistItems({
        customer,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and update shopping mall wishlist items.
   *
   * Search and update items in a specific shopping mall wishlist identified by
   * wishlistId. This operation allows clients to retrieve a filtered and
   * paginated list of wishlist items, and perform batch updates on the wishlist
   * contents if supported.
   *
   * The operation manipulates the shopping_mall_wishlist_items table which
   * holds individual SKU items for each wishlist. Authorization restricts
   * access to the wishlist owner.
   *
   * Request parameters specify filtering options such as SKU, quantity ranges,
   * or pagination details. The response delivers a page of wishlist items
   * reflecting current data after updates.
   *
   * Clients can use this endpoint to synchronize UI wishlist views and perform
   * bulk wishlist item modifications as needed.
   *
   * Refer to the Prisma schema for detailed column and relation descriptions
   * for wishlist items.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist whose items are managed
   * @param body Search criteria and update instructions for wishlist items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlistItem.IRequest,
  ): Promise<IPageIShoppingMallWishlistItem> {
    try {
      return await patchShoppingMallCustomerWishlistsWishlistIdWishlistItems({
        customer,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific wishlist item by wishlistId and wishlistItemId.
   *
   * Retrieve detailed information about a specific wishlist item belonging to a
   * customer's wishlist. This item represents a SKU variant saved by a customer
   * for potential future purchase.
   *
   * Security considerations require that only the authenticated customer owning
   * the wishlist may access this item.
   *
   * The operation references the shopping_mall_wishlist_items model, including
   * fields such as the wishlist identifier, SKU identifier, creation and update
   * timestamps.
   *
   * Parameters:
   *
   * - WishlistId: UUID of the customer's wishlist
   * - WishlistItemId: UUID of the specific wishlist item
   *
   * No request body is needed.
   *
   * On success, returns the full wishlist item data.
   *
   * Errors return appropriate HTTP status codes such as 404 for not found, or
   * 403 for unauthorized access.
   *
   * @param connection
   * @param wishlistId Unique identifier of the target wishlist
   * @param wishlistItemId Unique identifier of the target wishlist item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":wishlistItemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedParam("wishlistItemId")
    wishlistItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallWishlistItem> {
    try {
      return await getShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId(
        {
          customer,
          wishlistId,
          wishlistItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific wishlist item in a wishlist.
   *
   * Update a wishlist item identified by wishlistId and wishlistItemId. This
   * operation enables an authenticated customer to modify the SKU associated
   * with the wishlist item and update any relevant metadata such as
   * timestamps.
   *
   * This operation enforces that only the owning customer may update their
   * wishlist items. It validates the existence and active status of the
   * referenced SKU variant. This ensures customers can manage their wishlists
   * effectively with accurate and up-to-date product variant references.
   *
   * The operation updates timestamps to reflect changes and maintains
   * referential integrity with the parent wishlist and SKU entities.
   *
   * Successful responses return the fully updated wishlist item entity. Failure
   * cases include invalid identifiers, unauthorized access, or schema
   * validation failures.
   *
   * @param connection
   * @param wishlistId Target wishlist's ID
   * @param wishlistItemId Target wishlist item's ID
   * @param body Fields for updating a wishlist item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":wishlistItemId")
  public async updateWishlistItem(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedParam("wishlistItemId")
    wishlistItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlistItem.IUpdate,
  ): Promise<IShoppingMallWishlistItem> {
    try {
      return await putShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId(
        {
          customer,
          wishlistId,
          wishlistItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific wishlist item in a wishlist.
   *
   * Delete a wishlist item from the specified wishlist. This operation
   * permanently removes the wishlist item record from the database. Only the
   * authenticated owning customer with the customer role is authorized to
   * perform this deletion.
   *
   * Referential integrity is ensured via composite identification of wishlist
   * and wishlist item IDs.
   *
   * Successful deletion returns no content, conforming to RESTful API
   * standards.
   *
   * Failure scenarios include invalid IDs, unauthorized access, or non-existent
   * items.
   *
   * @param connection
   * @param wishlistId Target wishlist's ID
   * @param wishlistItemId Target wishlist item's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":wishlistItemId")
  public async eraseWishlistItem(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedParam("wishlistItemId")
    wishlistItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId(
        {
          customer,
          wishlistId,
          wishlistItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
