import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerWishlists } from "../../../../providers/postShoppingMallCustomerWishlists";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerWishlists } from "../../../../providers/patchShoppingMallCustomerWishlists";
import { getShoppingMallCustomerWishlistsWishlistId } from "../../../../providers/getShoppingMallCustomerWishlistsWishlistId";
import { putShoppingMallCustomerWishlistsWishlistId } from "../../../../providers/putShoppingMallCustomerWishlistsWishlistId";
import { deleteShoppingMallCustomerWishlistsWishlistId } from "../../../../providers/deleteShoppingMallCustomerWishlistsWishlistId";

import { IShoppingMallWishlist } from "../../../../api/structures/IShoppingMallWishlist";
import { IPageIShoppingMallWishlist } from "../../../../api/structures/IPageIShoppingMallWishlist";

@Controller("/shoppingMall/customer/wishlists")
export class ShoppingmallCustomerWishlistsController {
  /**
   * Create a new wishlist for a customer in shopping mall platform.
   *
   * Create a new shopping wishlist for a logged-in customer. The wishlist
   * allows customers to save product SKUs they wish to consider for future
   * purchase.
   *
   * This operation requires authentication with the role "customer" indicating
   * a logged-in customer. The request must include the customer's unique ID to
   * associate the new wishlist. The system records creation and update
   * timestamps automatically. The wishlist is initially empty and can have
   * items added via separate operations.
   *
   * The operation maps directly to the shopping_mall_wishlists table in the
   * Prisma schema, covering fields: id (generated UUID),
   * shopping_mall_customer_id (customer linkage), created_at, updated_at, and
   * deleted_at (soft delete support).
   *
   * Validation will ensure the customer exists and is authorized to own a
   * wishlist. If validation fails, the operation will return an error.
   *
   * No response body besides the created wishlist entity is returned. Error
   * handling covers invalid customer IDs and unauthorized access.
   *
   * @param connection
   * @param body New wishlist creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallWishlist.ICreate,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await postShoppingMallCustomerWishlists({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of shopping wishlists.
   *
   * Retrieve a filtered and paginated list of shopping wishlist items for
   * authenticated customers on the shopping mall platform. This operation
   * allows users to search and browse their wishlist contents, supporting
   * various filter criteria such as SKU attributes or addition timestamps.
   *
   * This operation accesses the shopping_mall_wishlists table, which stores the
   * customer's wishlist metadata and related wishlist items in the subsidiary
   * shopping_mall_wishlist_items table.
   *
   * The operation enforces security by allowing only authenticated customers to
   * access their own wishlists. Pagination ensures scalable responses for large
   * wishlists.
   *
   * Related operations include retrieval of a single wishlist by its ID with
   * detailed items, adding/removing wishlist items, and managing the wishlist
   * itself.
   *
   * This operation returns a paginated summary of wishlist items with SKU
   * details suitable for rendering lists in UI.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for wishlist
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallWishlist.IRequest,
  ): Promise<IPageIShoppingMallWishlist.ISummary> {
    try {
      return await patchShoppingMallCustomerWishlists({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific shopping wishlist by ID with detailed items.
   *
   * Retrieve a specific shopping wishlist and its items by wishlistId from the
   * shopping mall platform. This operation allows authenticated customers to
   * view details of a particular wishlist they own.
   *
   * The wishlist entity includes metadata and a list of SKU items added by the
   * customer for future purchase consideration.
   *
   * Access control ensures only the owning authenticated customer can retrieve
   * the wishlist details.
   *
   * This operation returns the full wishlist object suitable for editing or
   * detailed viewing in the user interface.
   *
   * @param connection
   * @param wishlistId Unique identifier of the target wishlist
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":wishlistId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await getShoppingMallCustomerWishlistsWishlistId({
        customer,
        wishlistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update customer wishlist details by wishlist ID.
   *
   * Update an existing customer wishlist by its unique identifier. This
   * operation enables modification of wishlist properties according to allowed
   * updates by the owning customer.
   *
   * The request path must include the `wishlistId` UUID to identify the target
   * wishlist. Request body must contain the update data conforming to the
   * IShoppingMallWishlist.IUpdate schema.
   *
   * Authentication is required with role "customer" to ensure only authorized
   * owners can update their wishlists.
   *
   * The operation interacts with the shopping_mall_wishlists table in the
   * Prisma schema, managing fields such as `shopping_mall_customer_id` linkage
   * and timestamps.
   *
   * Validation includes checking wishlist existence, ownership, and update data
   * correctness. The response returns the updated wishlist entity.
   *
   * Errors comply with unauthorized access, invalid IDs, and validation
   * failures.
   *
   * @param connection
   * @param wishlistId Unique identifier of the target wishlist to update
   * @param body Wishlist update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":wishlistId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlist.IUpdate,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await putShoppingMallCustomerWishlistsWishlistId({
        customer,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping mall wishlist by ID.
   *
   * Delete an existing shopping mall wishlist identified by its unique
   * wishlistId. This operation permanently removes the wishlist from the
   * database along with any related wishlist items, ensuring no orphan records
   * remain.
   *
   * Authorization is required to ensure that only the owning customer or
   * authorized administrative users can delete a wishlist. Once deleted, the
   * wishlist cannot be recovered.
   *
   * This operation targets the shopping_mall_wishlists table, which includes
   * references to the owning customer and contained wishlist items. All related
   * entities are cascade deleted to maintain data integrity.
   *
   * Clients must confirm ownership before invoking this API and handle any
   * errors if the wishlist is not found or the user is unauthorized.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":wishlistId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerWishlistsWishlistId({
        customer,
        wishlistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
