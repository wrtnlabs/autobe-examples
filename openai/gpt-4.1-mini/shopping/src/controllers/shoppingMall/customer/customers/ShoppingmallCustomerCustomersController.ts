import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerCustomersId } from "../../../../providers/getShoppingMallCustomerCustomersId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerCustomersId } from "../../../../providers/putShoppingMallCustomerCustomersId";
import { deleteShoppingMallCustomerCustomersId } from "../../../../providers/deleteShoppingMallCustomerCustomersId";

import { IShoppingMallCustomer } from "../../../../api/structures/IShoppingMallCustomer";

@Controller("/shoppingMall/customer/customers/:id")
export class ShoppingmallCustomerCustomersController {
  /**
   * Retrieve detailed customer information by ID.
   *
   * Retrieve full profile information of a specific customer identified by the
   * UUID path parameter.
   *
   * This operation supports authenticated users (role: customer) to fetch
   * customer details necessary for profile display and order management. The
   * response includes all relevant customer fields except sensitive
   * authentication data like the password hash.
   *
   * Path parameter 'id' must be a valid UUID corresponding to an existing
   * customer record. Attempting to access with invalid or non-existent UUID
   * results in error.
   *
   * No request body is needed for this GET operation. The data is fetched from
   * the shopping_mall_customers table reflecting the current state including
   * the soft-delete status.
   *
   * Authorization ensures only authorized users can access this endpoint,
   * protecting sensitive user data.
   *
   * @param connection
   * @param id Unique identifier of the target customer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCustomer> {
    try {
      return await getShoppingMallCustomerCustomersId({
        customer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a shopping mall customer account by ID.
   *
   * Update an existing customer account by specifying the customer's unique ID
   * in the path parameter.
   *
   * This operation allows updates to allowed mutable fields such as nickname,
   * phone number, and account status while prohibiting changes to immutable
   * fields such as email.
   *
   * Input data must be validated to ensure updated values meet business rules,
   * such as status values being valid and phone numbers properly formatted.
   *
   * Security considerations require that only authorized users can perform
   * updates on customer data, typically the customer themselves or
   * administrators.
   *
   * Successful updates return the fresh customer record reflecting the new
   * data.
   *
   * This operation interacts with the shopping_mall_customers table defined in
   * the Prisma schema, using the UUID 'id' as the primary identifier.
   *
   * Errors should be handled gracefully, returning appropriate HTTP status
   * codes and messages for invalid input, unauthorized access, or conflicts.
   *
   * @param connection
   * @param id Unique identifier of the target customer
   * @param body Customer update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCustomer.IUpdate,
  ): Promise<IShoppingMallCustomer> {
    try {
      return await putShoppingMallCustomerCustomersId({
        customer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a shopping mall customer account by ID.
   *
   * Deletes a customer account identified by the 'id' parameter. This performs
   * a soft delete by setting the deleted_at timestamp, preserving the data for
   * audit compliance.
   *
   * Security considerations: This operation requires appropriate authorization
   * to prevent unauthorized account deletions.
   *
   * No request body is necessary since the path parameter fully specifies the
   * target customer.
   *
   * Successful execution responds with a 204 No Content status.
   *
   * Errors respond appropriately for invalid identifiers or insufficient
   * permissions.
   *
   * This operation interacts with the shopping_mall_customers table in Prisma
   * schema.
   *
   * @param connection
   * @param id Unique identifier of the target customer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerCustomersId({
        customer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
