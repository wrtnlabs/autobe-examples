import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerShoppingCarts } from "../../../../providers/postShoppingMallCustomerShoppingCarts";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerShoppingCarts } from "../../../../providers/patchShoppingMallCustomerShoppingCarts";
import { getShoppingMallCustomerShoppingCartsShoppingCartId } from "../../../../providers/getShoppingMallCustomerShoppingCartsShoppingCartId";
import { putShoppingMallCustomerShoppingCartsShoppingCartId } from "../../../../providers/putShoppingMallCustomerShoppingCartsShoppingCartId";
import { deleteShoppingMallCustomerShoppingCartsShoppingCartId } from "../../../../providers/deleteShoppingMallCustomerShoppingCartsShoppingCartId";

import { IShoppingMallShoppingCart } from "../../../../api/structures/IShoppingMallShoppingCart";
import { IPageIShoppingMallShoppingCart } from "../../../../api/structures/IPageIShoppingMallShoppingCart";

@Controller("/shoppingMall/customer/shoppingCarts")
export class ShoppingmallCustomerShoppingcartsController {
  /**
   * Create a new shopping cart for a customer or guest session.
   *
   * Creates a new shopping cart linked either to a registered customer or a
   * guest session ID, enabling SKU items to be saved for subsequent order
   * placement. The operation prevents creating duplicate carts for the same
   * customer or session. It stores the customer's reference ID or session ID,
   * timestamps for creation and update, and optional soft delete timestamp.
   *
   * User roles authorized to call this operation include authenticated
   * customers and guests with valid session IDs. Proper validation of the
   * associated customer or session is performed.
   *
   * Related operations include updating the cart and managing cart items.
   * Errors include conflict if a cart already exists for the customer or
   * session, or validation errors for missing required fields.
   *
   * @param connection
   * @param body Request body schema for creating a shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallShoppingCart.ICreate,
  ): Promise<IShoppingMallShoppingCart> {
    try {
      return await postShoppingMallCustomerShoppingCarts({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of shopping carts.
   *
   * This API endpoint allows an authenticated customer user to search for
   * shopping carts within the system using complex filtering, sorting, and
   * pagination options. Shopping carts represent collections of SKU items
   * customers intend to purchase and are linked to customers or optionally
   * guests via sessions.
   *
   * The response includes a paginated list of shopping cart summaries
   * conforming to the shopping_mall_shopping_carts schema, reflecting creation
   * and update timestamps.
   *
   * Security considerations restrict access to authenticated customers. Proper
   * filtering ensures users see only relevant carts, typically their own.
   *
   * Related operations include retrieving the detailed content of a specific
   * shopping cart by its unique identifier, which complements this search
   * operation.
   *
   * Error handling includes validation of search parameters and limits to
   * prevent excessive data retrieval.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for shopping cart
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallShoppingCart.IRequest,
  ): Promise<IPageIShoppingMallShoppingCart.ISummary> {
    try {
      return await patchShoppingMallCustomerShoppingCarts({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific shopping cart.
   *
   * Retrieve a specific shopping cart by its unique ID to obtain detailed
   * information about the cart contents and metadata. Shopping carts are
   * collections of SKU items associated with a customer or a guest session.
   *
   * This operation returns detailed shopping cart data as defined in the
   * shopping_mall_shopping_carts schema:
   *
   * - Shopping cart metadata such as creation and update timestamps
   * - Included cart items with quantities
   * - Associated SKU details
   *
   * Security considerations require that users retrieve only their own carts or
   * authorized carts. Proper authentication and authorization must be
   * enforced.
   *
   * This operation complements the search operation, which provides paginated
   * lists of many carts.
   *
   * Errors include handling non-existent cart IDs and unauthorized access
   * attempts.
   *
   * @param connection
   * @param shoppingCartId Unique identifier of the target shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shoppingCartId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallShoppingCart> {
    try {
      return await getShoppingMallCustomerShoppingCartsShoppingCartId({
        customer,
        shoppingCartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shopping cart details identified by ID.
   *
   * Updates a shopping cart by its unique ID, allowing modification of the
   * associated customer or guest session ID, along with updated timestamps.
   * Ensures only authorized users (customers and guests) can update their
   * carts.
   *
   * This is vital for maintaining accurate cart linkage in user sessions.
   * Related operations include cart item management and cart retrieval.
   *
   * Possible errors include not found if the cart ID does not exist,
   * authorization failure if the updater does not own the cart, or validation
   * errors on provided input.
   *
   * @param connection
   * @param shoppingCartId Unique identifier of the shopping cart to update
   * @param body Request body schema for updating a shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shoppingCartId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShoppingCart.IUpdate,
  ): Promise<IShoppingMallShoppingCart> {
    try {
      return await putShoppingMallCustomerShoppingCartsShoppingCartId({
        customer,
        shoppingCartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping cart by ID.
   *
   * This API deletes a specific shopping cart by its ID, fully removing it from
   * the database. The shopping cart is identified by the 'shoppingCartId' path
   * parameter, corresponding to the 'id' field in the
   * 'shopping_mall_shopping_carts' Prisma table.
   *
   * Deletion is permanent and cannot be undone. This operation is authorized
   * for authenticated users, ensuring only owners or authorized personnel can
   * delete their carts.
   *
   * The operation does not require a request body, and no response body is
   * returned upon successful completion.
   *
   * Proper validation on the ID parameter ensures requests target valid
   * shopping cart entries. Error handling will manage non-existing IDs or
   * access violations.
   *
   * @param connection
   * @param shoppingCartId Unique identifier of the shopping cart to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":shoppingCartId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerShoppingCartsShoppingCartId({
        customer,
        shoppingCartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
