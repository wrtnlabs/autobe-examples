import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerShoppingCartsShoppingCartIdCartItems } from "../../../../../providers/postShoppingMallCustomerShoppingCartsShoppingCartIdCartItems";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerShoppingCartsShoppingCartIdCartItems } from "../../../../../providers/patchShoppingMallCustomerShoppingCartsShoppingCartIdCartItems";
import { getShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId } from "../../../../../providers/getShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId";
import { putShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId } from "../../../../../providers/putShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId";
import { deleteShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId } from "../../../../../providers/deleteShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId";

import { IShoppingMallCartItem } from "../../../../../api/structures/IShoppingMallCartItem";
import { IPageIShoppingMallCartItem } from "../../../../../api/structures/IPageIShoppingMallCartItem";

@Controller("/shoppingMall/customer/shoppingCarts/:shoppingCartId/cartItems")
export class ShoppingmallCustomerShoppingcartsCartitemsController {
  /**
   * Create a new cart item in a customer's shopping cart.
   *
   * Add a new item to the specified shopping cart by providing SKU ID and
   * quantity in the request body. The shoppingCartId path parameter identifies
   * the target cart.
   *
   * Request body must conform to IShoppingMallCartItem.ICreate.
   *
   * Only authenticated customers may add items to their carts.
   *
   * Response includes the full cart item data upon successful creation.
   *
   * Errors are returned for validation failures or unauthorized access.
   *
   * @param connection
   * @param shoppingCartId Unique UUID identifying the shopping cart to add the
   *   item to
   * @param body Payload containing SKU and quantity for new cart item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.ICreate,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await postShoppingMallCustomerShoppingCartsShoppingCartIdCartItems(
        {
          customer,
          shoppingCartId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get and update items in a shopping cart.
   *
   * Retrieve and update the list of items in a specific shopping cart
   * identified by 'shoppingCartId'. This operation supports complex queries,
   * filters, pagination, and bulk updates of cart items.
   *
   * The shopping cart ID path parameter must be a valid UUID corresponding to
   * the 'id' field in 'shopping_mall_shopping_carts'.
   *
   * Request body includes search or update criteria defined in
   * 'ShoppingMallCartItem.IRequest' data structure.
   *
   * The response returns a paginated collection of shopping cart items, each
   * including SKU references, quantities, and timestamps.
   *
   * Access is restricted to authenticated customers who own the shopping cart.
   *
   * This operation is essential for customers to manage the precise contents
   * and quantities in their shopping carts, reflecting product availability and
   * user intentions.
   *
   * Errors are managed through validation responses and authorization checks.
   *
   * @param connection
   * @param shoppingCartId Identifier of the shopping cart to access its items
   * @param body Search and update criteria for shopping cart items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IRequest,
  ): Promise<IPageIShoppingMallCartItem> {
    try {
      return await patchShoppingMallCustomerShoppingCartsShoppingCartIdCartItems(
        {
          customer,
          shoppingCartId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific cart item by its ID within a shopping cart.
   *
   * Retrieve detailed information of a specific item in a shopping cart. This
   * endpoint requires the unique UUIDs of the shopping cart and the cart item
   * to accurately identify the item.
   *
   * Only authenticated customers can access this endpoint to protect user data
   * privacy.
   *
   * The response contains the full details of the cart item including SKU ID,
   * quantity, creation timestamp, and update timestamp.
   *
   * Errors are returned if the specified cart or cart item does not exist or
   * belong to the authenticated user.
   *
   * @param connection
   * @param shoppingCartId Unique UUID identifying the shopping cart
   * @param cartItemId Unique UUID identifying the cart item within the shopping
   *   cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartItemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await getShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId(
        {
          customer,
          shoppingCartId,
          cartItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a cart item in the shopping mall platform.
   *
   * Update a specific cart item within a shopping cart by its ID. This
   * operation allows authenticated customers to modify the quantity or other
   * modifiable fields of an item they previously added to their shopping cart.
   *
   * Security considerations limit this operation to authenticated users with
   * the "customer" role to ensure cart item ownership and prevent unauthorized
   * modifications.
   *
   * The underlying database entity is the shopping_mall_cart_items table, which
   * links shopping carts with SKU variants and tracks quantities.
   *
   * Validation rules enforce that the updated quantity must be a positive
   * integer and conform to business inventory constraints.
   *
   * This operation is typically used in the shopping cart management user
   * interface when adjusting quantities or correcting cart contents before
   * order placement.
   *
   * Errors returned include 404 if the cart item or shopping cart IDs do not
   * exist or are unauthorized, and 400 for invalid quantity values.
   *
   * @param connection
   * @param shoppingCartId Unique identifier of the shopping cart
   * @param cartItemId Unique identifier of the cart item
   * @param body Editable fields for updating a shopping cart item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartItemId")
  public async updateCartItem(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IUpdate,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await putShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId(
        {
          customer,
          shoppingCartId,
          cartItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a cart item from the shopping mall platform.
   *
   * Delete a specific cart item within a shopping cart by its ID. This
   * operation permanently removes the item from the customer's shopping cart.
   *
   * Authorization is limited to authenticated users under the "customer" role
   * to guarantee that only the owner of the cart can delete items.
   *
   * This operation acts on the shopping_mall_cart_items database table records
   * permanently with NO soft deletion.
   *
   * Errors include 404 if the shopping cart or the cart item ID do not
   * correspond to any existing record or the user is unauthorized to delete the
   * cart item.
   *
   * There is no response body for this operation.
   *
   * @param connection
   * @param shoppingCartId Unique identifier of the shopping cart
   * @param cartItemId Unique identifier of the cart item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartItemId")
  public async eraseCartItem(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("shoppingCartId")
    shoppingCartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerShoppingCartsShoppingCartIdCartItemsCartItemId(
        {
          customer,
          shoppingCartId,
          cartItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
