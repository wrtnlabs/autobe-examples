import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProducts } from "../../../providers/patchShoppingMallProducts";
import { getShoppingMallProductsProductId } from "../../../providers/getShoppingMallProductsProductId";

import { IPageIShoppingMallProduct } from "../../../api/structures/IPageIShoppingMallProduct";
import { IShoppingMallProduct } from "../../../api/structures/IShoppingMallProduct";

@Controller("/shoppingMall/products")
export class ShoppingmallProductsController {
  /**
   * Retrieve a filtered, paginated list of shopping mall products.
   *
   * Retrieve a paginated and filtered list of shopping mall products. Supports
   * advanced search criteria including category filtering by
   * shopping_mall_category_id, seller filtering by shopping_mall_seller_id,
   * status filtering (e.g., Draft, Active, Inactive), and text search by
   * product name.
   *
   * The operation returns a paginated summary list of products matching the
   * specified search criteria. Results are optimized for client-side
   * consumption with essential properties only.
   *
   * The API is publicly accessible to allow browsing without authentication.
   *
   * This operation relates to detailed product retrieval endpoints that provide
   * full product and SKU details.
   *
   * @param connection
   * @param body Search and pagination parameters for filtering shopping mall
   *   products
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallProduct.IRequest,
  ): Promise<IPageIShoppingMallProduct.ISummary> {
    try {
      return await patchShoppingMallProducts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed product information by product ID.
   *
   * Retrieve detailed product information for a specific shopping mall product
   * using the productId path parameter. Returns all relevant properties
   * including category and seller details as well as linked SKUs for
   * comprehensive storefront display.
   *
   * The operation requires a valid UUID path parameter and handles errors for
   * invalid or non-existent product IDs accordingly.
   *
   * This operation complements the product search and product listing APIs.
   *
   * @param connection
   * @param productId Unique identifier of the target product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProduct> {
    try {
      return await getShoppingMallProductsProductId({
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
