import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallProductsProductIdSkusSkuId } from "../../../../providers/getShoppingMallProductsProductIdSkusSkuId";

import { IShoppingMallSku } from "../../../../api/structures/IShoppingMallSku";

@Controller("/shoppingMall/products/:productId/skus/:skuId")
export class ShoppingmallProductsSkusController {
  /**
   * Retrieve detailed information for a specific SKU of a product.
   *
   * This GET operation obtains detailed information about an SKU linked to a
   * specific product. The path parameters productId and skuId identify the
   * product and its SKU uniquely.
   *
   * Only users with appropriate view permissions can access this SKU detail
   * endpoint.
   *
   * It leverages the shopping_mall_skus table which includes fields for SKU
   * code, price, weight, status, and timestamps. Soft deleted SKUs (where
   * deleted_at is not null) are excluded from results.
   *
   * Business rules include verifying SKU belongs to the specified product and
   * ensuring the SKU is active and not soft deleted. The response provides
   * clients comprehensive information needed to display SKU details.
   *
   * This operation complements related endpoints such as listing SKUs for a
   * product, product detail retrieval, and inventory viewing for SKUs.
   *
   * Errors include 404 if SKU or product is not found or not matching.
   *
   * No request body is needed as the operation is read-only.
   *
   * Response returns the IShoppingMallSku DTO which includes all SKU properties
   * excluding relations.
   *
   * @param connection
   * @param productId Unique identifier of the product
   * @param skuId Unique identifier of the SKU
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSku> {
    try {
      return await getShoppingMallProductsProductIdSkusSkuId({
        productId,
        skuId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
