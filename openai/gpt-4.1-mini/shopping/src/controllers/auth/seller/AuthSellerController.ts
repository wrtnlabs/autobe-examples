import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthSellerJoin } from "../../../providers/postAuthSellerJoin";
import { SellerAuth } from "../../../decorators/SellerAuth";
import { SellerPayload } from "../../../decorators/payload/SellerPayload";
import { postAuthSellerLogin } from "../../../providers/postAuthSellerLogin";
import { postAuthSellerRefresh } from "../../../providers/postAuthSellerRefresh";

import { IShoppingMallSeller } from "../../../api/structures/IShoppingMallSeller";

@Controller("/auth/seller")
export class AuthSellerController {
  /**
   * Create new seller account and issue authentication token based on
   * shopping_mall_sellers.
   *
   * Creates a new seller account with unique email and password credentials,
   * assigning the initial status and issuing authentication JWT tokens upon
   * successful registration. Utilizes fields such as `email` and
   * `password_hash` from the shopping_mall_sellers table as core identity
   * attributes. Includes optional fields like company_name, contact_name,
   * phone_number, and status with default 'active'. Enables secure seller
   * onboarding compatible with the shoppingMall platform authentication
   * requirements.
   *
   * @param connection
   * @param body Seller registration information including email, password hash,
   *   and optional company details
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallSeller.ICreate,
  ): Promise<IShoppingMallSeller.IAuthorized> {
    try {
      return await postAuthSellerJoin({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Seller login with email and password to issue JWT tokens based on
   * shopping_mall_sellers.
   *
   * Seller login authenticates email and password credentials and issues JWT
   * tokens, using the email and password_hash fields in shopping_mall_sellers.
   * Enables secure authentication with rate limiting and session management
   * consistent with the shoppingMall platform's security policies.
   *
   * @param connection
   * @param body Seller login credentials including email and password
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallSeller.ILogin,
  ): Promise<IShoppingMallSeller.IAuthorized> {
    try {
      return await postAuthSellerLogin({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for authenticated sellers based on shopping_mall_sellers
   * identity.
   *
   * Refresh valid JWT tokens for authenticated seller users to maintain session
   * continuity without password reentry. Requires a valid refresh token and
   * issues new JWT tokens upon successful validation, conforming to the
   * shoppingMall platform's authentication security model. The seller identity
   * is confirmed implicitly via token payloads referencing
   * shopping_mall_sellers records.
   *
   * @param connection
   * @param body Refresh token request payload for authenticated seller users
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallSeller.IRefresh,
  ): Promise<IShoppingMallSeller.IAuthorized> {
    try {
      return await postAuthSellerRefresh({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
