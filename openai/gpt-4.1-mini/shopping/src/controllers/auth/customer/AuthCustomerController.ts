import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerJoin } from "../../../providers/postAuthCustomerJoin";
import { postAuthCustomerLogin } from "../../../providers/postAuthCustomerLogin";
import { postAuthCustomerRefresh } from "../../../providers/postAuthCustomerRefresh";

import { IShoppingMallCustomer } from "../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer")
export class AuthCustomerController {
  /**
   * Registration endpoint for shoppingMall customers to create new accounts and
   * receive JWT tokens upon successful registration, referencing
   * shopping_mall_customers table.
   *
   * This API endpoint allows new customers to register on the shoppingMall
   * platform by providing their unique email and password. It stores the email
   * and securely hashed password in the shopping_mall_customers table, setting
   * the initial status as active. The registration response includes authorized
   * JWT tokens to enable immediate authenticated access. This operation
   * strictly validates the email uniqueness and enforces password security as
   * per platform rules. The registration process does not include profile
   * details beyond authentication credentials at this stage.
   *
   * @param connection
   * @param body Customer registration request body containing email and
   *   password information.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallCustomer.IJoin,
  ): Promise<IShoppingMallCustomer.IAuthorized> {
    try {
      return await postAuthCustomerJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login endpoint for shoppingMall customers using email and password,
   * returning JWT tokens, referencing shopping_mall_customers table.
   *
   * This endpoint authenticates customers on the shoppingMall platform by
   * validating their email and password. It checks the credentials against
   * stored hashed passwords in the shopping_mall_customers table. Upon
   * successful authentication, a JWT token set is issued for session
   * management. This operation follows the security policies prescribed,
   * including password strength validation and session token generation.
   *
   * @param connection
   * @param body Customer login request payload with email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallCustomer.ILogin,
  ): Promise<IShoppingMallCustomer.IAuthorized> {
    try {
      return await postAuthCustomerLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh tokens for authenticated shoppingMall customers to maintain secure
   * sessions, referencing shopping_mall_customers table.
   *
   * This API endpoint allows authenticated customers to refresh their JWT
   * tokens by providing a valid refresh token. Users receive new JWT tokens
   * extending their session securely without re-authentication. The system
   * validates existing refresh tokens and issues updated tokens accordingly.
   * This mechanism maintains secure, continuous user sessions aligned with
   * shoppingMall platform security protocols.
   *
   * @param connection
   * @param body Token refresh request payload containing the refresh token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallCustomer.IRefresh,
  ): Promise<IShoppingMallCustomer.IAuthorized> {
    try {
      return await postAuthCustomerRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
