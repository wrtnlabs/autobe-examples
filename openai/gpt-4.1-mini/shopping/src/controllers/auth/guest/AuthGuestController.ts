import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestJoin } from "../../../providers/postAuthGuestJoin";
import { GuestAuth } from "../../../decorators/GuestAuth";
import { GuestPayload } from "../../../decorators/payload/GuestPayload";
import { postAuthGuestRefresh } from "../../../providers/postAuthGuestRefresh";

import { IShoppingMallGuest } from "../../../api/structures/IShoppingMallGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Create a new guest session and issue JWT tokens based on the
   * shopping_mall_guests table.
   *
   * Guest user registration endpoint to create a temporary guest session and
   * issue guest JWT tokens for secure browsing and shopping interactions
   * without full account credentials. Uses fields `session_token`,
   * `ip_address`, and `user_agent` from `shopping_mall_guests` table to
   * identify guest session footprints and manage lifecycle.
   *
   * This operation supports the e-commerce shopping mall guests role as
   * unauthenticated visitors. It issues JWT tokens for guest session management
   * and access control.
   *
   * Security is enforced by generating unique session tokens and limiting
   * session privileges appropriately.
   *
   * For broader user management, member and admin join/login operations
   * complement this feature.
   *
   * Token refresh is supported separately for guest session continuation.
   *
   * @param connection
   * @param body Information required to register a new guest session
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IShoppingMallGuest.ICreate,
  ): Promise<IShoppingMallGuest.IAuthorized> {
    try {
      return await postAuthGuestJoin({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for guest sessions based on shopping_mall_guests data.
   *
   * Guest token refresh endpoint to renew JWT tokens for guest session
   * continuity. Requires a valid refresh token issued during guest session
   * creation.
   *
   * Leverages `shopping_mall_guests` table fields such as `session_token` to
   * validate and issue new tokens.
   *
   * Ensures secure token lifecycle management for unauthenticated guest users.
   *
   * Related to guest join operation which creates initial session.
   *
   * Refresh token validation prevents unauthorized session hijacking.
   *
   * @param connection
   * @param body Refresh token information for guest sessions
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IShoppingMallGuest.IRefresh,
  ): Promise<IShoppingMallGuest.IAuthorized> {
    try {
      return await postAuthGuestRefresh({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
