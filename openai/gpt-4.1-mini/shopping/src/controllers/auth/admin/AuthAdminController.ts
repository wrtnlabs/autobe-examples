import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { IShoppingMallAdmin } from "../../../api/structures/IShoppingMallAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create new admin account and issue JWT tokens based on shopping_mall_admins
   * schema.
   *
   * The join operation allows creation of a new administrator account with the
   * required email and password_hash fields stored in the shopping_mall_admins
   * table. The admin can optionally provide full_name and phone_number
   * information. The operation ensures email uniqueness and issues JWT
   * authorization tokens representing the authenticated admin user's session.
   * This method is essential for onboarding new admins who will manage users,
   * products, orders, and platform settings. It returns the authorization
   * structure IShoppingMallAdmin.IAuthorized representing an authenticated
   * session. This operation is open to anonymous users who wish to register as
   * admins during controlled onboarding processes.
   *
   * @param connection
   * @param body Admin registration information including email and password for
   *   account creation
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallAdmin.ICreate,
  ): Promise<IShoppingMallAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin user and issue JWT tokens based on shopping_mall_admins
   * schema.
   *
   * This login operation authenticates an administrator by verifying the
   * provided email and password against stored credentials in
   * shopping_mall_admins. Successful authentication issues JWT tokens for
   * session management and access control, represented by
   * IShoppingMallAdmin.IAuthorized. It is available publicly for admin users to
   * log in securely and start managing the platform. Security best practices
   * such as rate limiting and password hashing are recommended around this
   * operation.
   *
   * @param connection
   * @param body Admin login credentials (email and password)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallAdmin.ILogin,
  ): Promise<IShoppingMallAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for authenticated admin user.
   *
   * This refresh operation enables an authenticated admin user to renew their
   * JWT access tokens by providing a valid refresh token. It maintains a
   * continuous authenticated session without requiring re-login. The operation
   * verifies the refresh token and issues new JWT tokens encapsulated as
   * IShoppingMallAdmin.IAuthorized. This method is essential for session
   * management and security for admin users.
   *
   * @param connection
   * @param body Refresh token request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallAdmin.IRefresh,
  ): Promise<IShoppingMallAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
