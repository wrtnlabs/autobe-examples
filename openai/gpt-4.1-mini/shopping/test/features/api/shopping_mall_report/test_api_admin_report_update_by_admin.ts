import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IShoppingMallAdmin } from "@ORGANIZATION/PROJECT-api/lib/structures/IShoppingMallAdmin";
import type { IShoppingMallReport } from "@ORGANIZATION/PROJECT-api/lib/structures/IShoppingMallReport";

export async function test_api_admin_report_update_by_admin(
  connection: api.IConnection,
) {
  // 1. Admin registration and authentication
  const adminCreateBody = {
    email: typia.random<string & tags.Format<"email">>(),
    password_hash: RandomGenerator.alphaNumeric(32),
    full_name: RandomGenerator.name(),
    phone_number: RandomGenerator.mobile(),
    status: "active",
  } satisfies IShoppingMallAdmin.ICreate;

  const authorizedAdmin: IShoppingMallAdmin.IAuthorized =
    await api.functional.auth.admin.join(connection, { body: adminCreateBody });
  typia.assert(authorizedAdmin);

  // 2. Create a new admin entity
  const adminCreateForReportBody = {
    email: typia.random<string & tags.Format<"email">>(),
    password_hash: RandomGenerator.alphaNumeric(32),
    full_name: RandomGenerator.name(),
    phone_number: RandomGenerator.mobile(),
    status: "active",
  } satisfies IShoppingMallAdmin.ICreate;

  const createdAdmin: IShoppingMallAdmin =
    await api.functional.shoppingMall.admin.admins.create(connection, {
      body: adminCreateForReportBody,
    });
  typia.assert(createdAdmin);

  // 3. Create an initial admin report
  const reportCreateBody = {
    report_name: `Initial Report - ${RandomGenerator.paragraph({ sentences: 3, wordMin: 5, wordMax: 10 })}`,
    report_type: `type_${RandomGenerator.alphabets(5)}`,
    content_uri: `https://reports.example.com/report-${typia.random<string & tags.Format<"uuid">>()}`,
    generated_by_admin_id: createdAdmin.id,
  } satisfies IShoppingMallReport.ICreate;

  const createdReport: IShoppingMallReport =
    await api.functional.shoppingMall.admin.reports.create(connection, {
      body: reportCreateBody,
    });
  typia.assert(createdReport);

  // 4. Update the existing report properties
  const updatedReportName = `Updated Report - ${RandomGenerator.paragraph({ sentences: 4, wordMin: 6, wordMax: 12 })}`;
  const updatedReportType = `updated_type_${RandomGenerator.alphabets(6)}`;
  const updatedContentUri = `https://updated-reports.example.com/report-${typia.random<string & tags.Format<"uuid">>()}`;
  const updateBody = {
    report_name: updatedReportName,
    report_type: updatedReportType,
    content_uri: updatedContentUri,
    generated_by_admin_id: createdAdmin.id,
    created_at: createdReport.createdAt,
    updated_at: new Date().toISOString(),
    deleted_at: null,
  } satisfies IShoppingMallReport.IUpdate;

  const updatedReport: IShoppingMallReport =
    await api.functional.shoppingMall.admin.reports.updateReport(connection, {
      id: createdReport.id,
      body: updateBody,
    });
  typia.assert(updatedReport);

  // 5. Validate updated report's properties
  TestValidator.equals(
    "Updated report name matches",
    updatedReport.reportName,
    updateBody.report_name,
  );
  TestValidator.equals(
    "Updated report type matches",
    updatedReport.reportType,
    updateBody.report_type,
  );
  TestValidator.equals(
    "Updated content URI matches",
    updatedReport.contentUri ?? null,
    updateBody.content_uri ?? null,
  );
  TestValidator.equals(
    "Generated by admin ID matches",
    updatedReport.generatedByAdminId ?? null,
    updateBody.generated_by_admin_id ?? null,
  );
  TestValidator.equals(
    "Created at timestamp matches",
    updatedReport.createdAt,
    createdReport.createdAt,
  );
  // updated_at usually updated so we just check presence
  TestValidator.predicate(
    "updated_at is a valid ISO datetime",
    typeof updatedReport.updatedAt === "string" &&
      updatedReport.updatedAt.length > 0,
  );
  TestValidator.equals(
    "deleted_at is null after update",
    updatedReport.deletedAt ?? null,
    null,
  );
}
