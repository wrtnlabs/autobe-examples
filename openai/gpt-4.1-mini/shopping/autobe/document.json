{"operations":[{"specification":"This API operation allows guest users to register an account in the shopping mall platform by creating a temporary guest account for session and tracking purposes. It leverages the `shopping_mall_guests` table in the Prisma DB schema, which contains fields such as `session_token`, `ip_address`, and `user_agent` to identify unique guest sessions. The purpose is to enable guest users to obtain a session token and access rights suitable for their role. \n\nThe operation is a POST method to the endpoint `/auth/guest/join` and requires no authentication (public endpoint). Upon successful registration, it returns an authorization response type `IShoppingMallGuest.IAuthorized` which follows the JWT-based auth response conventions.\n\nSecurity considerations include issuing a non-persistent, time-limited token for guest sessions without requiring credentials. No password or personal info is stored/required for guest accounts. This ensures lightweight and secure guest access.\n\nRelated operations are the token refresh operation for guests and user registration/login for members/admins.","authorizationType":"join","description":"Guest user registration endpoint to create a temporary guest session and issue guest JWT tokens for secure browsing and shopping interactions without full account credentials. Uses fields `session_token`, `ip_address`, and `user_agent` from `shopping_mall_guests` table to identify guest session footprints and manage lifecycle.\n\nThis operation supports the e-commerce shopping mall guests role as unauthenticated visitors. It issues JWT tokens for guest session management and access control.\n\nSecurity is enforced by generating unique session tokens and limiting session privileges appropriately.\n\nFor broader user management, member and admin join/login operations complement this feature.\n\nToken refresh is supported separately for guest session continuation.","summary":"Create a new guest session and issue JWT tokens based on the shopping_mall_guests table","parameters":[],"requestBody":{"description":"Information required to register a new guest session","typeName":"IShoppingMallGuest.ICreate"},"responseBody":{"description":"Guest authorization information including tokens and session details","typeName":"IShoppingMallGuest.IAuthorized"},"authorizationRole":"guest","name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Refresh JWT tokens for guest users to maintain session access without requiring re-authentication. This operation is bound to the `shopping_mall_guests` Prisma table to ensure token issuance is based on valid guest sessions.\n\nThe API endpoint `/auth/guest/refresh` uses the POST method, accepting a refresh token and returning new authorization tokens in the response with type `IShoppingMallGuest.IAuthorized`.\n\nSecurity considerations include validating the refresh token for grant continuation and preventing unauthorized token escalation. This enhances user experience by maintaining seamless guest browsing sessions.\n\nThis operation complements the guest registration (`join`) endpoint and caters specifically to guest users without login.","authorizationType":"refresh","description":"Guest token refresh endpoint to renew JWT tokens for guest session continuity. Requires a valid refresh token issued during guest session creation.\n\nLeverages `shopping_mall_guests` table fields such as `session_token` to validate and issue new tokens.\n\nEnsures secure token lifecycle management for unauthenticated guest users.\n\nRelated to guest join operation which creates initial session.\n\nRefresh token validation prevents unauthorized session hijacking.","summary":"Refresh JWT tokens for guest sessions based on shopping_mall_guests data","parameters":[],"requestBody":{"description":"Refresh token information for guest sessions","typeName":"IShoppingMallGuest.IRefresh"},"responseBody":{"description":"Guest authorization information including new tokens","typeName":"IShoppingMallGuest.IAuthorized"},"authorizationRole":"guest","name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"Registration API for creating a new customer account in the shoppingMall platform. This operation uses the shopping_mall_customers table, verifying unique email and storing a hashed password. Upon successful registration, it issues initial JWT tokens for authentication.","authorizationType":"join","description":"This API endpoint allows new customers to register on the shoppingMall platform by providing their unique email and password. It stores the email and securely hashed password in the shopping_mall_customers table, setting the initial status as active. The registration response includes authorized JWT tokens to enable immediate authenticated access. This operation strictly validates the email uniqueness and enforces password security as per platform rules. The registration process does not include profile details beyond authentication credentials at this stage.","summary":"Registration endpoint for shoppingMall customers to create new accounts and receive JWT tokens upon successful registration, referencing shopping_mall_customers table.","parameters":[],"requestBody":{"description":"Customer registration request body containing email and password information.","typeName":"IShoppingMallCustomer.IJoin"},"responseBody":{"description":"Authorized response with JWT tokens for registered customers.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/customer/join","method":"post"},{"specification":"Login API for authenticating existing customers in the shoppingMall platform. It verifies the email and password hash with shopping_mall_customers table, issuing JWT tokens upon success.","authorizationType":"login","description":"This endpoint authenticates customers on the shoppingMall platform by validating their email and password. It checks the credentials against stored hashed passwords in the shopping_mall_customers table. Upon successful authentication, a JWT token set is issued for session management. This operation follows the security policies prescribed, including password strength validation and session token generation.","summary":"Login endpoint for shoppingMall customers using email and password, returning JWT tokens, referencing shopping_mall_customers table.","parameters":[],"requestBody":{"description":"Customer login request payload with email and password.","typeName":"IShoppingMallCustomer.ILogin"},"responseBody":{"description":"Authorized JWT tokens upon successful login.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/customer/login","method":"post"},{"specification":"Token refresh API for customers to renew their JWT access tokens using valid refresh tokens. It ensures continuous and secure session management referencing the shopping_mall_customers table.","authorizationType":"refresh","description":"This API endpoint allows authenticated customers to refresh their JWT tokens by providing a valid refresh token. Users receive new JWT tokens extending their session securely without re-authentication. The system validates existing refresh tokens and issues updated tokens accordingly. This mechanism maintains secure, continuous user sessions aligned with shoppingMall platform security protocols.","summary":"Refresh tokens for authenticated shoppingMall customers to maintain secure sessions, referencing shopping_mall_customers table.","parameters":[],"requestBody":{"description":"Token refresh request payload containing the refresh token.","typeName":"IShoppingMallCustomer.IRefresh"},"responseBody":{"description":"New authorized JWT tokens after refresh.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/customer/refresh","method":"post"},{"specification":"This API operation creates a new seller account and issues the initial JWT tokens for authentication purposes. It is used during the registration process for sellers, where the system collects unique email and password hash and other relevant seller identity fields according to the shopping_mall_sellers Prisma schema. The operation returns an authorized token response confirming successful registration.\n\nThe seller entity is identified by the `shopping_mall_sellers` table and includes email, password_hash, company_name (optional), contact_name (optional), phone_number (optional), and status fields, as well as timestamps for creation, update, and soft deletion. This operation validates the uniqueness of the email and enforces password security.\n\nThe response body `IShoppingMallSeller.IAuthorized` reflects the successful creation and authorization of the seller identity. Security considerations involve secure password hashing and inviting sellers to change passwords through subsequent operations for security.\n\nOther related authentication operations include login and token refresh. This operation is publicly accessible and intended for newly registering sellers who do not yet have active sessions.\n","authorizationType":"join","description":"Creates a new seller account with unique email and password credentials, assigning the initial status and issuing authentication JWT tokens upon successful registration. Utilizes fields such as `email` and `password_hash` from the shopping_mall_sellers table as core identity attributes. Includes optional fields like company_name, contact_name, phone_number, and status with default 'active'. Enables secure seller onboarding compatible with the shoppingMall platform authentication requirements.","summary":"Create new seller account and issue authentication token based on shopping_mall_sellers","parameters":[],"requestBody":{"description":"Seller registration information including email, password hash, and optional company details","typeName":"IShoppingMallSeller.ICreate"},"responseBody":{"description":"Authorized seller identity with JWT tokens following successful registration","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":"seller","name":"join","prerequisites":[],"path":"/auth/seller/join","method":"post"},{"specification":"This API operation authenticates a seller user by validating their email and password hash against stored credentials in the shopping_mall_sellers Prisma table. Upon successful authentication, it issues JWT tokens for session management.\n\nThis operation uses the seller email and password_hash fields from shopping_mall_sellers, enforcing strict password checks and supporting secure seller authentication. It returns the authorized token response to be used for subsequent requests requiring authenticated roles.\n\nSecurity considerations include rate limiting login attempts to prevent brute force attacks and enforcing strong password policies. This endpoint is publicly accessible and suitable for sellers logging into the shoppingMall platform.\n","authorizationType":"login","description":"Seller login authenticates email and password credentials and issues JWT tokens, using the email and password_hash fields in shopping_mall_sellers. Enables secure authentication with rate limiting and session management consistent with the shoppingMall platform's security policies.","summary":"Seller login with email and password to issue JWT tokens based on shopping_mall_sellers","parameters":[],"requestBody":{"description":"Seller login credentials including email and password","typeName":"IShoppingMallSeller.ILogin"},"responseBody":{"description":"Authorized seller identity with JWT tokens following successful login","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":"seller","name":"login","prerequisites":[],"path":"/auth/seller/login","method":"post"},{"specification":"This API operation refreshes JWT access tokens for authenticated sellers who have a valid refresh token. The operation validates the refresh token's authenticity and issues a new set of JWT tokens to maintain continuous secure access.\n\nThis operation relies on seller identity as stored in shopping_mall_sellers. No identity details are provided directly but are validated through the refresh token mechanism. It supports secure session renewal and prevents token expiry interruptions.\n\nThe response returns an authorized token package consistent with the shoppingMall security framework. This endpoint requires a valid refresh token and is restricted to authenticated sellers.\n","authorizationType":"refresh","description":"Refresh valid JWT tokens for authenticated seller users to maintain session continuity without password reentry. Requires a valid refresh token and issues new JWT tokens upon successful validation, conforming to the shoppingMall platform's authentication security model. The seller identity is confirmed implicitly via token payloads referencing shopping_mall_sellers records.","summary":"Refresh JWT tokens for authenticated sellers based on shopping_mall_sellers identity","parameters":[],"requestBody":{"description":"Refresh token request payload for authenticated seller users","typeName":"IShoppingMallSeller.IRefresh"},"responseBody":{"description":"Refreshed authorization tokens for seller identity in shoppingMall platform","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":"seller","name":"refresh","prerequisites":[],"path":"/auth/seller/refresh","method":"post"},{"specification":"Registration (Join) operation for admin role creates a new administrator account in the shopping_mall_admins table. It requires validated input fields like email and password hash and stores administrative profile data such as full_name and phone_number. This endpoint returns JWT tokens encapsulated in IShoppingMallAdmin.IAuthorized for secure access. This operation supports initial account creation with email uniqueness enforced as per schema. The operation is public and used by system administrators to onboard new admin users.","authorizationType":"join","description":"The join operation allows creation of a new administrator account with the required email and password_hash fields stored in the shopping_mall_admins table. The admin can optionally provide full_name and phone_number information. The operation ensures email uniqueness and issues JWT authorization tokens representing the authenticated admin user's session. This method is essential for onboarding new admins who will manage users, products, orders, and platform settings. It returns the authorization structure IShoppingMallAdmin.IAuthorized representing an authenticated session. This operation is open to anonymous users who wish to register as admins during controlled onboarding processes.","summary":"Create new admin account and issue JWT tokens based on shopping_mall_admins schema","parameters":[],"requestBody":{"description":"Admin registration information including email and password for account creation","typeName":"IShoppingMallAdmin.ICreate"},"responseBody":{"description":"JWT access and refresh tokens for the authorized admin user","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"Login operation authenticates an admin user using their email and password_hash stored in the shopping_mall_admins table. Upon successful credential verification, the system issues JWT access and refresh tokens encapsulated in IShoppingMallAdmin.IAuthorized. This endpoint supports secure authentication workflows and session management for admins managing the e-commerce platform.","authorizationType":"login","description":"This login operation authenticates an administrator by verifying the provided email and password against stored credentials in shopping_mall_admins. Successful authentication issues JWT tokens for session management and access control, represented by IShoppingMallAdmin.IAuthorized. It is available publicly for admin users to log in securely and start managing the platform. Security best practices such as rate limiting and password hashing are recommended around this operation.","summary":"Authenticate admin user and issue JWT tokens based on shopping_mall_admins schema","parameters":[],"requestBody":{"description":"Admin login credentials (email and password)","typeName":"IShoppingMallAdmin.ILogin"},"responseBody":{"description":"JWT access and refresh tokens for the authenticated admin user","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"Token refresh operation allows an authenticated admin to renew their JWT access tokens using a valid refresh token. This endpoint maintains session continuity for admin users managing the platform. It returns a new set of JWT authorization tokens encapsulated in IShoppingMallAdmin.IAuthorized.","authorizationType":"refresh","description":"This refresh operation enables an authenticated admin user to renew their JWT access tokens by providing a valid refresh token. It maintains a continuous authenticated session without requiring re-login. The operation verifies the refresh token and issues new JWT tokens encapsulated as IShoppingMallAdmin.IAuthorized. This method is essential for session management and security for admin users.","summary":"Refresh JWT tokens for authenticated admin user","parameters":[],"requestBody":{"description":"Refresh token request","typeName":"IShoppingMallAdmin.IRefresh"},"responseBody":{"description":"Refreshed JWT access and refresh tokens for admin users","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of product categories from the shopping mall platform.\n\nIt operates on the `shopping_mall_categories` table which stores product category data including hierarchical parent-child relationships, category codes, names, descriptions, display orders, and timestamps.\n\nBusiness rules allow browsing and searching categories by code, name, and hierarchical position. Pagination parameters support efficient retrieval in paginated form. This operation is intended for public browsing of the category catalog.\n\nValidation includes ensuring filtering criteria are well-formed and pagination parameters are within reasonable limits.\n\nThis operation is read-only and does not require authentication, making categories publicly browseable.\n\nRelated operations include retrieving details of a specific category by its ID.","path":"/shoppingMall/shoppingMall/categories","method":"patch","summary":"Search and retrieve a filtered, paginated list of product categories","description":"Retrieve a filtered and paginated list of product categories from the shopping mall platform. This operation supports searching by code and name, filtering by parent category, and sorting by display order for UI presentation.\n\nThe `shopping_mall_categories` table contains hierarchical category relationships via the `parent_id` field allowing nested category trees. Categories have unique codes and optional descriptions that aid user navigation.\n\nThis endpoint is publicly accessible and requires no authentication. Pagination controls mitigate large data retrievals for performance.\n\nTypical usage scenarios include populating product catalogs, navigation menus, and supporting category-based product searches.\n\nErrors can occur due to invalid filter parameters or pagination ranges, which should be returned with clear messages.\n\nRelated endpoints allow retrieval of individual category details and managing categories (for admin users).","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for product category filtering","typeName":"IShoppingMallCategory.IRequest"},"responseBody":{"description":"Paginated list of product categories matching search criteria","typeName":"IPageIShoppingMallCategory"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Parent category must exist before it can be referenced as a parent_id in the category search filter"}]},{"specification":"This operation retrieves details of a single product category identified by its unique ID.\n\nThe target database table is `shopping_mall_categories`. It includes all fields such as `id`, `parent_id`, `code`, `name`, `description`, and timestamps.\n\nThe operation supports detailed view of category information, including hierarchical parent data implicitly through the `parent_id`.\n\nThis retrieval operation is read-only and open to public access.\n\nIt requires the `categoryId` path parameter representing the UUID of the target category.\n\nErrors may include not found if the category ID does not exist or is soft deleted.\n\nRelated operations include paging through categories for lists and administrative CRUD on categories.","path":"/shoppingMall/shoppingMall/categories/{categoryId}","method":"get","summary":"Retrieve detailed information of a specific product category","description":"Retrieve detailed information about a product category by its unique identifier. Returns all category fields from the `shopping_mall_categories` table including hierarchical parent linkage.\n\nThis operation is publicly accessible and requires no authentication.\n\nIt supports safe retrieval with error handling for missing or soft deleted categories.\n\nUse this endpoint to show category detail pages or fetch specific category metadata for UI display or processing.\n\nPagination and searching are handled via complementary endpoints.","parameters":[{"name":"categoryId","description":"Unique identifier of the target product category","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed category information matching the specified ID","typeName":"IShoppingMallCategory"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"The category to retrieve must have been created before querying its details"}]},{"specification":"This operation creates a new product category in the shopping mall platform's catalog. It operates on the shopping_mall_categories table, which supports hierarchical category structures through optional parent-child relationships. The endpoint accepts details for a new category including code, name, optional description, display order, and optional parent category id. The system ensures uniqueness of the category code to maintain a consistent taxonomy. Soft deletion is supported through a nullable deletion timestamp. This operation is protected, allowing only users with admin roles to create categories.","description":"Create a new product category in the shopping mall's catalog. Each category has a unique code and can be linked to an optional parent category, enabling hierarchical catalog navigation.\n\nAdministrators with the admin role are authorized to perform this operation. The input must include all required fields such as code, name, and display order, with optional description and parent category linkage.\n\nThe system maintains soft delete functionality via a nullable deleted_at timestamp but this is managed internally and not set directly by users.\n\nThis endpoint is essential for maintaining an organized product taxonomy and enabling efficient product discovery.\n\nErrors should be returned for duplicate category codes or invalid parent references.\n\nThe created category object is returned with all its details including timestamps.","summary":"Create a new shopping mall product category","parameters":[],"requestBody":{"description":"Creation info of the shopping mall category","typeName":"IShoppingMallCategory.ICreate"},"responseBody":{"description":"Newly created shopping mall category entity","typeName":"IShoppingMallCategory"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/shoppingMall/categories","method":"post","name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing product category identified by its UUID in the shopping mall platform's category table. It allows modification of category properties such as code, name, optional description, display order, and optional parent category to restructure the category hierarchy. The updated fields must conform to uniqueness and relational integrity constraints. This operation requires admin role authorization and provides soft delete compatibility as per the schema. The API supports precise category management and facilitates reorganization of the product catalog.","description":"Update a shopping mall product category by its unique ID. Administrators with admin role can modify the code, name, description, display order, and parent category of the category record.\n\nInput validation enforces the uniqueness of codes and correct parent associations.\n\nThis allows flexible restructuring of the product catalog as business needs evolve.\n\nProper error handling is expected for invalid UUIDs, duplicate codes, or not found categories.\n\nReturns the updated category record with all properties and timestamps.\n\nThis operation complements category creation and listing endpoints.","summary":"Update a shopping mall product category by ID","parameters":[{"name":"categoryId","description":"Unique identifier of the category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the shopping mall category","typeName":"IShoppingMallCategory.IUpdate"},"responseBody":{"description":"Updated shopping mall category entity","typeName":"IShoppingMallCategory"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/shoppingMall/categories/{categoryId}","method":"put","name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"The parent category must exist before updating the category parent_id to reference it."}]},{"specification":"This operation permanently removes a specific product category from the database, identified by its unique UUID. The category is identified by the 'categoryId' path parameter, which references the 'id' field of the 'shopping_mall_categories' table in the Prisma schema. This table manages hierarchical categories with fields such as 'id', 'parent_id', 'code', 'name', 'description', 'display_order', and soft delete timestamp 'deleted_at'. This DELETE operation performs a hard delete since the system uses a soft delete approach via 'deleted_at' timestamps in the database; however, according to the business rules and schema, this endpoint performs physical deletion of the category record and should cascade deletions according to database foreign key constraints. Appropriate authorization is restricted to users with admin privileges to prevent unauthorized deletions. Path parameter 'categoryId' must be a UUID string representing the unique identifier of the category to be removed.","description":"This API operation allows an administrator to permanently delete a product category from the shopping mall platform. \n\nThe category is identified by its UUID, specified via the path parameter 'categoryId'. The operation corresponds to a hard delete, completely removing the category record from the database.\n\nGiven the critical nature of category data, this operation is secured and restricted to the 'admin' role only. Unauthorized attempts to delete a category are denied.\n\nThe 'shopping_mall_categories' table contains hierarchical information including parent-child relationships. Care should be taken when deleting categories to maintain data integrity. The database schema enforces cascading deletions where appropriate.\n\nSuccessful deletion results in no content returned. If the specified category does not exist, or the deletion is not permitted, appropriate error responses are returned.\n\nThe operation must be used cautiously to avoid orphaning products or losing category hierarchy integrity.","summary":"Delete a product category by its unique identifier, restricted to admin users","parameters":[{"name":"categoryId","in":"path","description":"Unique identifier of the product category to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/shoppingMall/admin/shoppingMall/categories/{categoryId}","method":"delete","name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Category must be created before it can be deleted"}]},{"specification":"This operation retrieves a filtered, paginated list of shopping mall configuration records stored in the 'shopping_mall_configurations' table as defined in the Prisma schema. It supports complex search, sorting, and pagination criteria in the request body, enabling clients to query configurations by key, category, enabled status, and other parameters. Each configuration includes fields like 'id', 'key', 'value', 'category', 'description', 'enabled', and timestamps for creation, update, and soft deletion. This endpoint is exposed via a PATCH request to '/shoppingMall/configurations' and is accessible only by the 'admin' role to maintain configuration safety and integrity.","description":"Retrieve a filtered and paginated list of system configuration records for the shopping mall platform.\n\nThis operation enables administrators to query configuration parameters using various filters such as 'key', 'category', and active 'enabled' status. Pagination and sorting options support efficient large data access.\n\nThe configurations are stored in the 'shopping_mall_configurations' table, which holds key-value pairs for system settings. Soft delete is supported via 'deleted_at', and only active configurations typically appear in results.\n\nSecurity-wise, this API requires admin privileges. Unauthorized requests are blocked.\n\nThe response includes paginated configuration summary data matched to search criteria, helping admins manage system behavior and operational parameters.","summary":"Search and retrieve a filtered, paginated list of shopping mall configurations for admin management","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for configuration filtering","typeName":"IShoppingMallConfiguration.IRequest"},"responseBody":{"description":"Paginated list of configuration summary information matching search criteria","typeName":"IPageIShoppingMallConfiguration.ISummary"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/shoppingMall/configurations","method":"patch","name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific system-wide configuration parameter by its unique identifier. It interfaces with the shopping_mall_configurations table in the Prisma schema, which stores key-value pairs for various operational settings of the shopping mall platform. The operation requires the configurationId as a path parameter, which is the primary key of the configuration entity. The response returns the detailed configuration object, including key, value, category, description, enabled flag, and timestamps indicating creation, update, and optional soft deletion. This is a read-only endpoint accessible publicly without authentication.","path":"/shoppingMall/shoppingMall/configurations/{configurationId}","method":"get","summary":"Retrieve specific shopping mall configuration detail by ID","description":"Retrieve detailed information of a specific shopping mall configuration by its unique ID. This operation fetches configuration settings key, value, category, description, and enabled status.\n\nIt is a read-only operation that accesses the shopping_mall_configurations table as defined in the Prisma schema. The operation supports soft deletion by preserving records marked with deleted_at.\n\nThe endpoint requires the configuration's unique ID as a path parameter to identify the target record. Access control is open to public as configurations do not expose sensitive data.\n\nThe response returns all metadata including creation and update timestamps for audit purposes. Errors will be returned if the configuration ID does not exist or is malformed.\n\nThis API is typically used by administrative tools or system components requiring dynamic configuration parameters.","parameters":[{"name":"configurationId","description":"Unique identifier (UUID) of the shopping mall configuration","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping mall configuration information","typeName":"IShoppingMallConfiguration"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/shoppingMall/configurations","method":"post"},"description":"Configuration must be created before it can be retrieved by ID"}]},{"specification":"This operation creates a new system-wide configuration parameter in the shopping mall platform. It acts on the shopping_mall_configurations table defined in the Prisma schema which stores configuration key-value pairs affecting platform operation.\n\nThe request body must include the configuration creation data that at least specifies a unique key, value, category, description, and enabled flag. The system automatically timestamps creation and updates.\n\nThis operation requires no authentication roles, allowing open creation of configuration entries through administrative interfaces or automation scripts.\n\nUpon successful creation, the API returns the newly created configuration detail, including all metadata such as timestamps and identifiers.","path":"/shoppingMall/shoppingMall/configurations","method":"post","summary":"Create a new shopping mall configuration parameter","description":"Create a new shopping mall configuration parameter with a unique key, value, category, description, and enabled status.\n\nThe operation persists the new configuration in the shopping_mall_configurations table as defined in the Prisma schema, including audit timestamps for creation and updates.\n\nNo authentication is required for this operation, facilitating configuration management by administrative tools or automation.\n\nA successful response returns the complete configuration record including generated ID and timestamps.\n\nValidation ensures the key is unique and the enabled flag properly reflects the configuration state.","parameters":[],"requestBody":{"description":"Creation information for a new shopping mall configuration","typeName":"IShoppingMallConfiguration.ICreate"},"responseBody":{"description":"Newly created shopping mall configuration detail","typeName":"IShoppingMallConfiguration"},"authorizationType":null,"authorizationRole":null,"name":"create","prerequisites":[]},{"specification":"This operation updates an existing configuration parameter in the ShoppingMall platform. It operates on the shopping_mall_configurations table from the Prisma schema which stores system-wide configuration key-value pairs with status and metadata. The operation supports modifying the configuration value, category, description, and enabled flag. Validation ensures the unique key remains unchanged and that no unallowed fields are modified. The operation must handle updates on an existing record identified by configurationId and maintain audit timestamps. Soft deletion status is respected by verifying if the record exists and is active before update.","path":"/shoppingMall/admin/shoppingMall/configurations/{configurationId}","method":"put","summary":"Update a shopping mall system configuration by configurationId","description":"Update a system configuration parameter identified by 'configurationId'. This operation modifies the configuration's value, category, description, and enabled status, allowing system administrators to change active settings.\n\nThe operation requires authentication with appropriate roles to prevent unauthorized changes.\n\nIt updates the record in the 'shopping_mall_configurations' table, ensuring the unique key is preserved and audit timestamps are refreshed.\n\nInput validation checks for proper value formats and enabled flag boolean correctness.\n\nAttempts to update a non-existent or soft deleted configuration should result in an error.\n\nAny changes trigger audit trail updates in the service layer (not exposed in API).\n\nThis operation corresponds to the 'PUT /shoppingMall/configurations/{configurationId}' RESTful endpoint.","parameters":[{"name":"configurationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target configuration's ID"}],"requestBody":{"description":"Update data for the shopping mall configuration","typeName":"IShoppingMallConfigurations.IUpdate"},"responseBody":{"description":"Updated configuration information","typeName":"IShoppingMallConfigurations"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/shoppingMall/configurations","method":"post"},"description":"Configuration must be created before it can be updated"}]},{"specification":"This operation permanently deletes a system configuration parameter identified by 'configurationId' from the shopping mall platform. It operates on the shopping_mall_configurations database table which contains key-value pairs for system settings. This action performs a hard delete, removing the record completely from the database.\n\nThe delete is irreversible and removes all associated metadata. Proper authorization checks must be in place to restrict this operation to admin users only.\n\nTrying to delete a non-existent configuration ID should yield an error response. This operation corresponds to the 'DELETE /shoppingMall/configurations/{configurationId}' endpoint.","path":"/shoppingMall/admin/shoppingMall/configurations/{configurationId}","method":"delete","summary":"Permanently delete a shopping mall system configuration by configurationId","description":"Delete a system configuration parameter permanently by 'configurationId'. This operation removes the configuration entirely from the database, without soft delete.\n\nOnly authorized admins are allowed to perform this operation.\n\nAttempting to delete a missing or already deleted configuration returns a not found error.\n\nThis corresponds to the 'DELETE /shoppingMall/configurations/{configurationId}' RESTful endpoint.\n\nThis is a hard delete operation, no soft delete is performed.","parameters":[{"name":"configurationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target configuration's ID"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/shoppingMall/configurations","method":"post"},"description":"Configuration must exist before it can be deleted"}]},{"specification":"This operation retrieves a paginated list of guest sessions from the shopping_mall_guests table in the Prisma DB schema. It supports complex search, filtering, sorting, and pagination for guest sessions to analyze visitor activity. The search criteria can include filtering by session token, IP address, user agent patterns, and creation date ranges, enabling administrators or analytics systems to explore guest session data effectively.","description":"Retrieve a filtered and paginated list of guest user sessions from the shopping mall platform. This operation allows searching by session token, IP address, user agent, and other relevant criteria to analyze guest behavior and activity.\n\nThe system stores guests as unauthenticated visitors with session tokens holding their browsing data. This API provides insight into guest sessions for system monitoring and analytics.\n\nSecurity considerations include restricting this endpoint to authorized admin users due to sensitivity of guest session data.\n\nThe response includes a paginated list of guest session summaries optimized for administrative views. ","summary":"Search and retrieve a filtered, paginated list of guest sessions","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for guest session filtering","typeName":"IShoppingMallGuest.IRequest"},"responseBody":{"description":"Paginated list of guest session summaries matching search criteria","typeName":"IPageIShoppingMallGuest.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/guests","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/guests","method":"post"},"description":"Guest session must be created before retrieving guest session data."}]},{"specification":"This operation retrieves detailed information of a specific guest session from the shopping_mall_guests table by guest ID. It facilitates inspection of individual guest session's data like session token, IP address, user agent, and timestamps.\n\nThis is primarily used by administrators to investigate specific guest sessions for analytics, troubleshooting, or security auditing.","description":"Retrieve detailed information of a specific guest session by its unique ID from the shopping mall platform. Guest sessions represent unauthenticated visitors tracked by session tokens.\n\nThis operation is restricted to admin users to ensure security and privacy of guest session data.\n\nThe response includes full details of the guest session record, including session token, IP address, user agent, and timestamps. ","summary":"Retrieve detailed information of a single guest session","parameters":[{"name":"id","description":"Unique identifier of the target guest session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the guest session","typeName":"IShoppingMallGuest"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/guests/{id}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/guests","method":"post"},"description":"Guest user session must exist before retrieving its detailed information by ID."}]},{"specification":"The shopping_mall_guests entity represents guest users who visit the shopping mall platform without authenticating. This operation allows creation of a new guest user session record with a unique session token, and optional IP address and user agent information. These fields help track visitor sessions and support system analytics. The guest record maintains creation and update timestamps and supports soft deletion via a nullable deleted_at field.","description":"Create a new guest user session record in the system. This endpoint generates a unique guest entity for an unauthenticated visitor session identified by a session token. Optional IP address and user agent fields can capture additional metadata about the guest's browsing environment. The record includes timestamps for creation and updates, and supports soft deletion for archival purposes.\n\nThis operation is typically invoked when a guest user accesses the platform to establish a unique session for tracking and personalized experiences.\n\nSecurity considerations include ensuring the uniqueness and unpredictability of the sessionToken to prevent session hijacking or duplication.\n\nUpon successful creation, the full guest record with all properties including timestamps is returned.","summary":"Create a guest user session for an unauthenticated visitor","parameters":[],"requestBody":{"description":"Payload for creating a new guest user session","typeName":"IShoppingMallGuest.ICreate"},"responseBody":{"description":"Information of the newly created guest user session","typeName":"IShoppingMallGuest"},"authorizationType":null,"authorizationRole":null,"name":"create","path":"/shoppingMall/guests","method":"post","prerequisites":[]},{"specification":"The shopping_mall_guests entity represents guest user sessions. This operation allows updating the guest session identified by their UUID. Updatable fields include mandatory session token and optional IP address and user agent strings. The record maintains creation and update timestamps and supports soft deletion. This enables extending or modifying guest session metadata for analytics or session management.","description":"Update an existing guest user session identified by the guest UUID. The update may modify the session token, IP address, and user agent fields to reflect changes in the browsing session or device state. Timestamps are maintained automatically. Soft deletion is supported with nullable deleted_at field.\n\nThis operation requires the guest's UUID as a path parameter to identify the relevant session record to update.\n\nAuthorization roles for this endpoint are empty as guest sessions do not require authentication.\n\nReturns the updated guest user session data on success.","summary":"Update a guest user session by its unique identifier","parameters":[{"name":"id","description":"Unique identifier of the guest user session","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload with updated guest user session fields","typeName":"IShoppingMallGuest.IUpdate"},"responseBody":{"description":"Updated guest user session information","typeName":"IShoppingMallGuest"},"authorizationType":null,"authorizationRole":null,"name":"update","path":"/shoppingMall/guests/{id}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/guests","method":"post"},"description":"Guest must exist before updating their session data"}]},{"specification":"This operation deletes a guest user record identified by its unique ID from the shopping mall platform. It operates on the shopping_mall_guests table, which stores guest session data such as session tokens, IP address, and user agent. The delete is a permanent removal, fully deleting the guest record and all associated data. This API is intended for system-level cleanup of guest session data. It requires the guest ID as a path parameter. No request body or response body is needed.","path":"/shoppingMall/guests/{id}","method":"delete","summary":"Delete guest user by ID","description":"Deletes a guest user from the shopping mall system by their unique ID.\n\nGuest users represent unauthenticated visitors with session information including session tokens, IP addresses, and user agents. Deletion is a permanent remove operation, fully clearing this data.\n\nOnly the ID of the guest user is needed.\n\nNo response body is returned upon success.\n\nNo authorization roles are required since this is a system-level cleanup action on guest records.\n\nThis operation interacts directly with the shopping_mall_guests table in the database.","parameters":[{"name":"id","description":"Unique identifier of the target guest user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/guests","method":"post"},"description":"The guest user must exist before it can be deleted by the erase operation."}]},{"specification":"This operation retrieves a filtered, paginated list of customers registered in the shopping mall platform according to search, filter, and sort criteria specified in the request body. It operates on the shopping_mall_customers table, which stores customer account information including email, status, nickname, and timestamps. Access is restricted to admin users due to sensitivity of customer data. Results are paginated and returned as customer summaries optimized for overview.","path":"/shoppingMall/admin/customers","method":"patch","summary":"Retrieve filtered and paginated customer list","description":"Retrieve a filtered and paginated list of customers in the shopping mall platform.\n\nSupports advanced search parameters including partial nickname match, status filtering, and paging.\n\nRestricted to admin role due to sensitivity of customer information.\n\nReturns customer summaries including limited identification and status information.\n\nRequires search criteria and pagination parameters in the request body represented by IShoppingMallCustomer.IRequest DTO.\n\nResponse contains a paginated list with customer summaries in IPageIShoppingMallCustomer.ISummary DTO.\n\nThis endpoint manipulates the shopping_mall_customers table in the database.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for customer filtering","typeName":"IShoppingMallCustomer.IRequest"},"responseBody":{"description":"Paginated list of customers matching search criteria","typeName":"IPageIShoppingMallCustomer.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before retrieving their information in the customer list"}]},{"specification":"This operation retrieves detailed information about a specific customer by their unique UUID from the shopping_mall_customers table. It returns comprehensive profile information including email, nickname, phone number, account status, and timestamps. The operation is intended for authenticated customers and enforces authorization roles accordingly.","description":"Retrieve full profile information of a specific customer identified by the UUID path parameter.\n\nThis operation supports authenticated users (role: customer) to fetch customer details necessary for profile display and order management. The response includes all relevant customer fields except sensitive authentication data like the password hash.\n\nPath parameter 'id' must be a valid UUID corresponding to an existing customer record. Attempting to access with invalid or non-existent UUID results in error.\n\nNo request body is needed for this GET operation. The data is fetched from the shopping_mall_customers table reflecting the current state including the soft-delete status.\n\nAuthorization ensures only authorized users can access this endpoint, protecting sensitive user data.","summary":"Retrieve detailed customer information by ID","parameters":[{"name":"id","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed customer data including contact and status","typeName":"IShoppingMallCustomer"},"authorizationRoles":["customer"],"name":"at","path":"/shoppingMall/customer/customers/{id}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must be created before retrieving their detailed information."}]},{"specification":"This operation creates a new customer account as recorded in the shopping_mall_customers table. It accepts registration details including email, password hash, optional nickname and phone number, and account status field. The operation validates email uniqueness, enforces password hash requirements, and initializes timestamps for creation and last update. It is public and allows guest users to register. The newly created customer record is returned excluding sensitive fields such as the password hash in the response.\n\nThe request body must conform to the IShoppingMallCustomer.ICreate DTO schema which includes all necessary validation constraints.\n\nThis operation is foundational for enabling user onboarding in the shopping mall platform.","description":"Register a new customer account with the shopping mall platform.\n\nClient applications submit required email and password_hash, and optionally include nickname and phone number. The status field typically starts as 'active', but can vary.\n\nEmail must be unique. Password hash must meet security requirements prior to submission.\n\nUpon success, returns customer data excluding sensitive information.\n\nNo authentication required for this public operation.\n\nRequest body must comply with the defined DTO schema ensuring correct field validation and formatting.","summary":"Create a new customer account","parameters":[],"requestBody":{"description":"Customer registration payload","typeName":"IShoppingMallCustomer.ICreate"},"responseBody":{"description":"Created customer account information","typeName":"IShoppingMallCustomer"},"authorizationRoles":[],"name":"create","path":"/shoppingMall/customers","method":"post","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation updates a customer's account information in the shopping_mall_customers table of the Prisma schema. It allows modification of mutable fields including nickname, phone number, and account status, while maintaining identity fields such as email. The customer is identified by the unique UUID path parameter 'id'. All updates must respect validation rules: the email field is immutable via this endpoint, and status must be within valid account statuses such as 'active', 'inactive', or 'suspended'. This operation requires authentication as it modifies user data and must ensure user permission and security checks. Upon success, the updated customer entity is returned.","path":"/shoppingMall/customer/customers/{id}","method":"put","summary":"Update a shopping mall customer account by ID","description":"Update an existing customer account by specifying the customer's unique ID in the path parameter.\n\nThis operation allows updates to allowed mutable fields such as nickname, phone number, and account status while prohibiting changes to immutable fields such as email.\n\nInput data must be validated to ensure updated values meet business rules, such as status values being valid and phone numbers properly formatted.\n\nSecurity considerations require that only authorized users can perform updates on customer data, typically the customer themselves or administrators.\n\nSuccessful updates return the fresh customer record reflecting the new data.\n\nThis operation interacts with the shopping_mall_customers table defined in the Prisma schema, using the UUID 'id' as the primary identifier.\n\nErrors should be handled gracefully, returning appropriate HTTP status codes and messages for invalid input, unauthorized access, or conflicts.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Customer update data","typeName":"IShoppingMallCustomer.IUpdate"},"responseBody":{"description":"Updated customer account information","typeName":"IShoppingMallCustomer"},"authorizationRoles":["customer"],"authorizationRole":"customer","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before it can be updated via PUT /shoppingMall/customer/customers/{id}."}]},{"specification":"This operation deletes a customer account from the shopping_mall_customers table in the Prisma schema by a specified UUID identifier.\n\nThe deletion performs a soft delete by setting the 'deleted_at' timestamp to the current timestamp, preserving the record for audit and recovery purposes.\n\nThis operation requires authenticated user role with permission to delete their own account or by administrators.\n\nNo request body is needed as the resource to delete is fully identified by path.\n\nNo response body is returned on success. Errors include unauthorized attempts or attempts to delete non-existent customers.\n\nThis operation operates on the shopping_mall_customers table, using the 'id' path parameter as the unique customer record identifier.","path":"/shoppingMall/customer/customers/{id}","method":"delete","summary":"Soft delete a shopping mall customer account by ID","description":"Deletes a customer account identified by the 'id' parameter. This performs a soft delete by setting the deleted_at timestamp, preserving the data for audit compliance.\n\nSecurity considerations: This operation requires appropriate authorization to prevent unauthorized account deletions.\n\nNo request body is necessary since the path parameter fully specifies the target customer.\n\nSuccessful execution responds with a 204 No Content status.\n\nErrors respond appropriately for invalid identifiers or insufficient permissions.\n\nThis operation interacts with the shopping_mall_customers table in Prisma schema.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"authorizationRole":"customer","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before deleting their account by ID."}]},{"specification":"This operation retrieves a paginated and filtered list of shopping mall sellers with advanced search, sorting, and pagination capabilities. It operates on the shopping_mall_sellers table defined in the Prisma schema, which stores seller identity and authentication information including email, company name, contact name, and status. The API allows clients to specify search criteria such as email, company name, and status, and supports sorting by creation date and other fields. This enables efficient management and browsing of seller accounts on the platform.","path":"/shoppingMall/admin/sellers","method":"patch","summary":"Search and retrieve a filtered, paginated list of shopping mall sellers","description":"Retrieve a filtered and paginated list of shopping mall sellers from the system. This endpoint supports complex query parameters for searching by email, company name, and status, enabling admin users to locate sellers efficiently.\n\nSecurity considerations include restricting access to authenticated users with administrative privileges only to protect sensitive seller information.\n\nThe operation interacts with the shopping_mall_sellers table, referencing all important seller attributes like email, company name, status, and timestamps.\n\nThis supports the administrative functionality of monitoring and managing sellers within the shopping mall platform.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for seller filtering","typeName":"IShoppingMallSeller.IRequest"},"responseBody":{"description":"Paginated list of seller information matching search criteria","typeName":"IPageIShoppingMallSeller"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific shopping mall seller by their unique identifier (UUID). It operates on the shopping_mall_sellers table in the Prisma schema, which includes seller identity fields like email, company name, contact information, and account status.\n\nSecurity constraints permit access only to users with admin role, ensuring sensitive seller data is protected.\n\nThe response returns all seller details necessary for administrative review and management.\n\nTypical usage involves viewing seller profiles from the admin interface for editing or auditing purposes.","path":"/shoppingMall/admin/sellers/{id}","method":"get","summary":"Retrieve detailed information on a shopping mall seller by ID","description":"Retrieve comprehensive details of a specific seller identified by their unique ID. This endpoint is essential for administrative management and auditing of seller accounts.\n\nSecurity is enforced by limiting access to users with admin role only.\n\nThe notable fields returned include email, company name, contact information, status, and timestamps reflecting account lifecycle.\n\nThis operation works with the shopping_mall_sellers table as defined in the Prisma schema.","parameters":[{"name":"id","description":"Unique identifier of the seller","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed seller information","typeName":"IShoppingMallSeller"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before retrieving detailed information"}]},{"specification":"This operation creates a new shopping mall seller account as defined in the shopping_mall_sellers Prisma schema. It requires providing the seller's email (unique identifier), password hash, company name, contact name, phone number, and initial status. The creation timestamp is handled by the system internally upon record insertion. This operation supports role-based access control allowing only authorized clients to perform seller registrations. The seller entity is fundamental to product and order management in the platform, enabling sellers to manage their listings, inventories, and orders.","path":"/shoppingMall/admin/sellers","method":"post","summary":"Create a new shopping mall seller account","description":"Create a new seller account in the shopping mall platform. This operation takes the seller's unique email, hashed password, optional company and contact information, phone number, and an initial status such as 'active' or 'suspended'.\n\nThe system validates that the email is unique and the password hash meets security requirements. After successful creation, the seller record includes automatic timestamps for creation and update. Soft delete fields exist but are managed internally.\n\nOnly authorized clients with permissions to create sellers can invoke this operation. This enables the onboarding of new sellers to the platform to list products and manage orders appropriately.\n\nRelated operations include updating seller information and listing sellers. The response returns the complete seller entity with all fields except sensitive data like password hashes.\n\nErrors will be returned if email uniqueness is violated or validation fails.","parameters":[],"requestBody":{"description":"Information required to create a new seller account","typeName":"IShoppingMallSeller.ICreate"},"responseBody":{"description":"Newly created seller account details","typeName":"IShoppingMallSeller"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[]},{"specification":"This operation updates an existing shopping mall seller account as defined in the shopping_mall_sellers Prisma schema. It requires the seller's unique identifier in the path parameters. The update request includes mutable fields such as email, password hash, company name, contact name, phone number, and status. The system updates the respective seller record and refreshes the update timestamp. Soft delete fields remain managed internally and are not affected by this operation.\n\nThis operation requires authorization roles to ensure only the admin or the seller themselves can update their account details securely. It supports validation to maintain email uniqueness and integrity of status values.\n\nThis operation returns the updated seller entity excluding sensitive information like password hashes.\n\nErrors may occur on invalid seller ID, unauthorized access, or validation failures like duplicate emails.","path":"/shoppingMall/admin/sellers/{id}","method":"put","summary":"Update shopping mall seller account identified by ID","description":"Update existing seller account information by ID. The client must provide the seller ID in the path parameters and the updated fields in the request body.\n\nThe operation verifies the existence of the seller, enforces uniqueness of email and validation of data formats. Modifiable fields include email, password hash, company name, contact name, phone number, and account status.\n\nThis operation supports secure updating of the seller profile by authorized parties only, ensuring data integrity and security.\n\nThe response provides the updated seller record.\n\nIf the seller ID does not exist, a not found error will be returned. If validation fails, an error response will describe the failure reason.","parameters":[{"name":"id","description":"Unique identifier of the seller to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated seller account information","typeName":"IShoppingMallSeller.IUpdate"},"responseBody":{"description":"Updated seller account details","typeName":"IShoppingMallSeller"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before updating their account information"}]},{"specification":"This operation permanently deletes a seller account by its unique ID from the shopping_mall_sellers table in the Prisma database. It removes the entire record including all personal and authentication details such as email, password hash, company details, and status. It performs a hard delete as the schema supports soft deletion but this endpoint implements complete removal with no recovery.","path":"/shoppingMall/admin/sellers/{id}","method":"delete","summary":"Delete a seller account by ID","description":"This operation deletes a seller account identified by the provided UUID. It is designed for administrative use to remove seller accounts that are no longer active or have violated platform policies.\n\nSecurity considerations require this endpoint to be restricted to administrative roles only due to sensitive nature of user account removal. Deletion is irreversible and permanently removes the seller record along with all associated data relations.\n\nThe operation works directly on the shopping_mall_sellers table of the database and does not create any side effects such as cascading deletions since relations may have cascading rules handled by the database.\n\nClients using this endpoint must ensure that the seller ID exists and user permissions are validated before invocation. Errors may occur if the seller ID is invalid or is referenced by foreign key constraints in other tables.\n\nNo request body is used, and no response body is returned for this deletion operation.","parameters":[{"name":"id","description":"Unique identifier of the seller to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist and be created before it can be deleted."}]},{"specification":"This operation retrieves a paginated list of administrator accounts in the shopping_mall_admins table. It supports searching, filtering, and pagination via a complex request body to find administrators based on criteria such as email, status, and creation date.","path":"/shoppingMall/admin/admins","method":"patch","summary":"Search and retrieve a filtered, paginated list of admin users","description":"Retrieve a filtered and paginated list of admin user accounts from the system. This operation allows searching by email, filtering by account status, and sorting results.\n\nSecurity considerations require at least administrative role access to protect sensitive user account details.\n\nThe operation interacts with the shopping_mall_admins table, incorporating columns like email, status, full name, and creation date.\n\nThe request body includes advanced search parameters, and the response body returns a paginated collection of summarized administrator information.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for admin user filtering","typeName":"IShoppingMallAdmin.IRequest"},"responseBody":{"description":"Paginated list of admin user summary information matching search criteria","typeName":"IPageIShoppingMallAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[]},{"specification":"This operation retrieves the detailed information of an administrator account from the shopping_mall_admins table in the Prisma database schema. It requires the administrator's unique identifier as a path parameter. The retrieved data includes the administrator's email, hashed password, full legal name, phone number, account status, and timestamps for creation, update, and soft deletion. This endpoint is intended for administrative or system use to view administrator profile data securely. Access is restricted to users having the 'admin' role.","path":"/shoppingMall/admin/admins/{id}","method":"get","summary":"Retrieve detailed administrator information by ID from shopping_mall_admins","description":"Retrieve detailed information about a specific administrator identified by the unique ID from the shopping_mall_admins table.\n\nThis operation requires authorization and is restricted to users with the admin role to ensure sensitive administrator data is protected.\n\nThe response includes all available administrator fields including email, full name, contact phone number, account status, and audit timestamps for tracking changes over time.\n\nPath parameter 'id' corresponds to the primary key of the shopping_mall_admins table.\n\nErrors such as not found or unauthorized access should be handled by the system robustly.\n\nThis operation is essential for administrative user management and auditing.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target administrator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator account details","typeName":"IShoppingMallAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must exist before it can be retrieved by ID"}]},{"specification":"This operation creates a new administrator account in the shopping_mall_admins table. It accepts a JSON request body conforming to IShoppingMallAdmin.ICreate containing the required fields such as email, password hash, and optional full name and phone number. The new administrator is created with an initial status and current timestamps recorded. The system must enforce uniqueness of email addresses and secure password handling. Authorization is limited to users with the admin role to control the creation of new administrators securely.","path":"/shoppingMall/admin/admins","method":"post","summary":"Create new administrator account in shopping_mall_admins","description":"Create a new administrator account with the provided information in the request body.\n\nThe operation requires admin-level authorization for security.\n\nIt accepts all required fields to create a new admin user: unique email, hashed password, optional full name and phone number, and status.\n\nEmail uniqueness and password security must be enforced during creation.\n\nSuccessful creation returns the full admin account details including unique ID and timestamps.\n\nErrors such as conflict on email duplication or validation failures must be handled gracefully.\n\nThis operation supports the expansion of admin personnel in the shopping mall platform.","parameters":[],"requestBody":{"description":"Creation info of the administrator account","typeName":"IShoppingMallAdmin.ICreate"},"responseBody":{"description":"Created administrator account details","typeName":"IShoppingMallAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[]},{"specification":"This operation updates the details of an existing administrator account in the shoppingMall platform. It targets the shopping_mall_admins table in the database, allowing modification of admin attributes such as full_name, phone_number, status, and password_hash while respecting the soft deletion and audit constraints of the table. The operation is restricted to authenticated administrators and requires the admin's unique identifier to specify which record to update. Validation rules include ensuring the email remains unique and status values conform to accepted states (e.g., active, suspended). Responses include the updated administrator entity with all associated fields.","path":"/shoppingMall/admin/admins/{id}","method":"put","summary":"Update administrator account by ID","description":"Update an existing administrator account's information by specifying the admin's unique ID. This operation modifies the admin's full name, phone number, status, and password hash, allowing administrators to manage their own profile or other admin accounts with sufficient permissions.\n\nSecurity considerations mandate authenticated admin role access only. Email addresses are immutable through this endpoint to maintain identity integrity. The status field indicates account activity state, which affects login permissions.\n\nThis API interacts directly with the shopping_mall_admins Prisma table, respecting all relational and soft deletion logic. Updates to the password hash must follow security protocols outside this API scope.\n\nTypical usage scenarios include admin profile updates and account status changes. Validation errors will be returned if provided input values are invalid or violate unique constraints.\n\nNo request body changes other than defined fields are permitted. Error handling includes proper HTTP status codes and messages for unauthorized access or resource not found.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the administrator"}],"requestBody":{"description":"Updated administrator account data","typeName":"IShoppingMallAdmin.IUpdate"},"responseBody":{"description":"Updated administrator account entity","typeName":"IShoppingMallAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"updateAdmin","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Admin must exist before updating their profile with the specified ID."}]},{"specification":"This operation permanently removes the administrator account specified by the given ID from the shoppingMall platform's database. It targets the shopping_mall_admins table and performs a hard delete operation as the table supports soft deletion but the delete API removes the record permanently. This operation requires admin role authorization and careful handling to prevent accidental data loss. It does not require a request body and returns no content upon successful deletion.","path":"/shoppingMall/admin/admins/{id}","method":"delete","summary":"Permanently delete administrator account by ID","description":"Delete an administrator account by ID, permanently removing the record from the database. This endpoint ensures that administrative accounts no longer needed are fully erased from the system.\n\nSecurity considerations require authenticated admin role access only, with elevated privileges to perform this destructive action. The operation does not allow soft deletion, so the record is completely removed, which means no recovery is possible after this action.\n\nThis API interacts with the shopping_mall_admins table respecting database integrity constraints and cascading effects if applicable.\n\nCommon error scenarios include attempting to delete a non-existent admin or lack of sufficient authorization.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the administrator"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseAdmin","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Admin must exist before deleting the account with the specified ID."}]},{"specification":"This operation retrieves a paginated and filtered list of products from the shopping mall platform, enabling customers to search products by various attributes including category, seller, status, and name. The operation corresponds to the shopping_mall_products table and provides advanced pagination, filtering, and sorting capabilities to facilitate efficient browsing and discovery of products.","description":"Retrieve a paginated and filtered list of shopping mall products. Supports advanced search criteria including category filtering by shopping_mall_category_id, seller filtering by shopping_mall_seller_id, status filtering (e.g., Draft, Active, Inactive), and text search by product name.\n\nThe operation returns a paginated summary list of products matching the specified search criteria. Results are optimized for client-side consumption with essential properties only.\n\nThe API is publicly accessible to allow browsing without authentication.\n\nThis operation relates to detailed product retrieval endpoints that provide full product and SKU details.","summary":"Retrieve a filtered, paginated list of shopping mall products","parameters":[],"requestBody":{"description":"Search and pagination parameters for filtering shopping mall products","typeName":"IShoppingMallProduct.IRequest"},"responseBody":{"description":"Paginated summary list of shopping mall products that satisfy the search criteria","typeName":"IPageIShoppingMallProduct.ISummary"},"authorizationType":null,"authorizationRole":null,"path":"/shoppingMall/products","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"The product category must be created before searching products filtered by shopping_mall_category_id"},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"The seller must be created before searching products filtered by shopping_mall_seller_id"}]},{"specification":"This operation retrieves detailed information of a shopping mall product identified by its unique UUID. It fetches all relevant product attributes including name, code, description, status, associated category, seller, and related SKUs. This operation corresponds to the shopping_mall_products table and is intended for detailed product view pages accessible by all users.","description":"Retrieve detailed product information for a specific shopping mall product using the productId path parameter. Returns all relevant properties including category and seller details as well as linked SKUs for comprehensive storefront display.\n\nThe operation requires a valid UUID path parameter and handles errors for invalid or non-existent product IDs accordingly.\n\nThis operation complements the product search and product listing APIs.","summary":"Retrieve detailed product information by product ID","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping mall product data including category and SKU variants","typeName":"IShoppingMallProduct"},"authorizationType":null,"authorizationRole":null,"path":"/shoppingMall/products/{productId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"The product must be created before retrieving detailed information by product ID"},{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"The product category must exist before retrieving detailed product information"},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"The seller must exist before retrieving detailed product information"}]},{"specification":"This operation creates a new product record in the shopping mall platform, corresponding to the shopping_mall_products table in the database. It allows sellers or administrators to add products by specifying mandatory fields like category ID (shopping_mall_category_id), seller ID (shopping_mall_seller_id), a unique product business code, and product name. Optional fields include product description and lifecycle status. The operation requires validation to prevent duplicate product codes and ensure valid foreign keys to categories and sellers. Upon successful creation, the product will have timestamps marking creation and update. Soft deletion is supported with the deleted_at column, but this operation focuses on creation only, without setting deletion fields manually.","path":"/shoppingMall/seller/products","method":"post","summary":"Create a new shopping mall product","description":"Create a new product record with required data elements including category association, seller ownership, and unique code. This operation requires careful validation of the category ID and seller ID to maintain referential integrity with shopping_mall_categories and shopping_mall_sellers tables respectively.\n\nSecurity restrictions should ensure only authorized roles (such as sellers or admins) perform creation.\n\nThe system will enforce uniqueness of the product code and prevent duplicates.\n\nResponse returns the complete newly created product entity including autogenerated timestamps and default status values.\n\nErrors will be returned if required fields are missing, uniqueness is violated, or foreign keys are invalid.","parameters":[],"requestBody":{"description":"Product creation info including category, seller, code, and name","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"Created product entity with details","typeName":"IShoppingMallProduct"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Product category must be created before creating a product referencing that category ID."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must be created before creating a product referencing that seller ID."}]},{"specification":"This operation creates a new product record in the shopping mall platform, corresponding to the shopping_mall_products table in the database. It allows sellers or administrators to add products by specifying mandatory fields like category ID (shopping_mall_category_id), seller ID (shopping_mall_seller_id), a unique product business code, and product name. Optional fields include product description and lifecycle status. The operation requires validation to prevent duplicate product codes and ensure valid foreign keys to categories and sellers. Upon successful creation, the product will have timestamps marking creation and update. Soft deletion is supported with the deleted_at column, but this operation focuses on creation only, without setting deletion fields manually.","path":"/shoppingMall/admin/products","method":"post","summary":"Create a new shopping mall product","description":"Create a new product record with required data elements including category association, seller ownership, and unique code. This operation requires careful validation of the category ID and seller ID to maintain referential integrity with shopping_mall_categories and shopping_mall_sellers tables respectively.\n\nSecurity restrictions should ensure only authorized roles (such as sellers or admins) perform creation.\n\nThe system will enforce uniqueness of the product code and prevent duplicates.\n\nResponse returns the complete newly created product entity including autogenerated timestamps and default status values.\n\nErrors will be returned if required fields are missing, uniqueness is violated, or foreign keys are invalid.","parameters":[],"requestBody":{"description":"Product creation info including category, seller, code, and name","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"Created product entity with details","typeName":"IShoppingMallProduct"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Product category must be created before creating a product referencing that category ID."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must be created before creating a product referencing that seller ID."}]},{"specification":"Updates existing product details identified by productId. This operation updates fields in the shopping_mall_products table such as product name, description, category, seller ownership, and lifecycle status. The productId path parameter identifies which product record to update. Validation ensures the product exists and the updated category and seller IDs are valid foreign keys. Uniqueness of product code is enforced if updated.\n\nAuthorization is limited to roles that can manage product creation and editing, primarily the seller owning the product or an admin user. The update reflects immediately and updates the updated_at timestamp.\n\nSoft deletion is not applicable here; this operation only updates the record fields and does not modify deleted_at.\n\nErrors are handled when the product is not found or constraints fail.","path":"/shoppingMall/seller/products/{productId}","method":"put","summary":"Update an existing shopping mall product","description":"Update shopping mall product identified by productId with provided fields. Input may include changes to name, description, category, seller, and status. The productId parameter in the path is required to locate the product.\n\nRobust validation for foreign key references and code uniqueness is required.\n\nOnly authorized users with seller or admin roles should be able to update products.\n\nSuccessful response includes the updated product entity.\n\nFailure scenarios include record not found, validation errors, or unauthorized access.","parameters":[{"name":"productId","description":"Target product's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product update information","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"Updated product entity","typeName":"IShoppingMallProduct"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Category must exist before it can be assigned to a product."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before it can be assigned to a product."}]},{"specification":"Updates existing product details identified by productId. This operation updates fields in the shopping_mall_products table such as product name, description, category, seller ownership, and lifecycle status. The productId path parameter identifies which product record to update. Validation ensures the product exists and the updated category and seller IDs are valid foreign keys. Uniqueness of product code is enforced if updated.\n\nAuthorization is limited to roles that can manage product creation and editing, primarily the seller owning the product or an admin user. The update reflects immediately and updates the updated_at timestamp.\n\nSoft deletion is not applicable here; this operation only updates the record fields and does not modify deleted_at.\n\nErrors are handled when the product is not found or constraints fail.","path":"/shoppingMall/admin/products/{productId}","method":"put","summary":"Update an existing shopping mall product","description":"Update shopping mall product identified by productId with provided fields. Input may include changes to name, description, category, seller, and status. The productId parameter in the path is required to locate the product.\n\nRobust validation for foreign key references and code uniqueness is required.\n\nOnly authorized users with seller or admin roles should be able to update products.\n\nSuccessful response includes the updated product entity.\n\nFailure scenarios include record not found, validation errors, or unauthorized access.","parameters":[{"name":"productId","description":"Target product's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product update information","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"Updated product entity","typeName":"IShoppingMallProduct"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Category must exist before it can be assigned to a product."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before it can be assigned to a product."}]},{"specification":"This operation permanently deletes a product from the shopping mall's product catalog. The product entity corresponds to the shopping_mall_products table in the Prisma schema. Deleting a product will remove it and all related SKUs and associated data from the system, with no possibility of recovery. This operation requires administrative or seller authorization depending on business rules implemented in access controls. Appropriate cascading deletion of related SKUs and inventory records should be handled by the database or application logic.","description":"This operation permanently removes a product record identified by its unique ID from the shopping mall product catalog. It is intended for use by authorized users such as sellers or admins who manage product listings. The product corresponds to the shopping_mall_products entity, which includes details such as category, seller association, code, name, description, status, and timestamps.\n\nDeleting a product cascades deletion to associated SKUs and related inventory data to maintain data integrity. Since the Prisma schema supports soft deletion via a deleted_at field, this operation performs a hard delete meaning the record will be fully removed without retention.\n\nSecurity considerations require that only users with proper seller or admin roles invoke this operation to prevent unauthorized product deletions. Proper error handling should be implemented to address cases where the product does not exist or is linked to active orders.\n\nThis deletion complements other product management operations such as SKU updates and product retrieval endpoints.\n\nExpected behavior includes returning appropriate status codes confirming deletion or error details if deletion fails due to constraints or authorization.","summary":"Delete a product by ID permanently from the product catalog","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/products/{productId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"The product must exist before it can be deleted from the product catalog by seller."}]},{"specification":"This operation permanently deletes a product from the shopping mall's product catalog. The product entity corresponds to the shopping_mall_products table in the Prisma schema. Deleting a product will remove it and all related SKUs and associated data from the system, with no possibility of recovery. This operation requires administrative or seller authorization depending on business rules implemented in access controls. Appropriate cascading deletion of related SKUs and inventory records should be handled by the database or application logic.","description":"This operation permanently removes a product record identified by its unique ID from the shopping mall product catalog. It is intended for use by authorized users such as sellers or admins who manage product listings. The product corresponds to the shopping_mall_products entity, which includes details such as category, seller association, code, name, description, status, and timestamps.\n\nDeleting a product cascades deletion to associated SKUs and related inventory data to maintain data integrity. Since the Prisma schema supports soft deletion via a deleted_at field, this operation performs a hard delete meaning the record will be fully removed without retention.\n\nSecurity considerations require that only users with proper seller or admin roles invoke this operation to prevent unauthorized product deletions. Proper error handling should be implemented to address cases where the product does not exist or is linked to active orders.\n\nThis deletion complements other product management operations such as SKU updates and product retrieval endpoints.\n\nExpected behavior includes returning appropriate status codes confirming deletion or error details if deletion fails due to constraints or authorization.","summary":"Delete a product by ID permanently from the product catalog","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/products/{productId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"The product must exist before it can be deleted from the product catalog by admin."}]},{"specification":"Retrieve a paginated list of SKUs associated with a specific product, enabling sellers and admins to view variants for product management and inventory oversight. This operation accesses the shopping_mall_skus table filtered by the associated product ID, including variant details such as SKU code, pricing, weight, status, and timestamps.\n\nSupports search, pagination, filtering by SKU status, and sorting by price or creation date. Ensures only authorized seller or admin roles can access this sensitive product variant data.","description":"Retrieve a list of SKU variants for the given product ID. This list is useful for sellers managing product variants and for administrative oversight. Each SKU includes details like SKU code, price, weight (if available), lifecycle status, and timestamps for creation and update.\n\nThe SKU entities are stored in the shopping_mall_skus table linked to the product. This operation supports filtering by SKU status, pagination with configurable page size and number, and sorting by various fields.\n\nSecurity measures ensure that only users with seller or admin roles for the owning product can perform this query to protect data integrity and confidentiality.\n\nThe response returns a paginated summary of SKUs, allowing efficient management and display in user interfaces.","summary":"List SKUs for a product with pagination and filtering capabilities","parameters":[{"name":"productId","description":"Identifier of the product to list SKUs for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for SKU filtering","typeName":"IShoppingMallShoppingMallSku.IRequest"},"responseBody":{"description":"Paginated list of SKU summary information matching search criteria","typeName":"IPageIShoppingMallShoppingMallSku.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","path":"/shoppingMall/seller/products/{productId}/skus","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before listing SKUs for that product."}]},{"specification":"Retrieve a paginated list of SKUs associated with a specific product, enabling sellers and admins to view variants for product management and inventory oversight. This operation accesses the shopping_mall_skus table filtered by the associated product ID, including variant details such as SKU code, pricing, weight, status, and timestamps.\n\nSupports search, pagination, filtering by SKU status, and sorting by price or creation date. Ensures only authorized seller or admin roles can access this sensitive product variant data.","description":"Retrieve a list of SKU variants for the given product ID. This list is useful for sellers managing product variants and for administrative oversight. Each SKU includes details like SKU code, price, weight (if available), lifecycle status, and timestamps for creation and update.\n\nThe SKU entities are stored in the shopping_mall_skus table linked to the product. This operation supports filtering by SKU status, pagination with configurable page size and number, and sorting by various fields.\n\nSecurity measures ensure that only users with seller or admin roles for the owning product can perform this query to protect data integrity and confidentiality.\n\nThe response returns a paginated summary of SKUs, allowing efficient management and display in user interfaces.","summary":"List SKUs for a product with pagination and filtering capabilities","parameters":[{"name":"productId","description":"Identifier of the product to list SKUs for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for SKU filtering","typeName":"IShoppingMallShoppingMallSku.IRequest"},"responseBody":{"description":"Paginated list of SKU summary information matching search criteria","typeName":"IPageIShoppingMallShoppingMallSku.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/products/{productId}/skus","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before SKUs can be listed or managed for that product."}]},{"specification":"This operation retrieves detailed information about a specific SKU for a particular product in the shopping mall platform. It is based on the shopping_mall_skus table from the Prisma schema which tracks product variant SKUs along with associated pricing, weight, status, and soft deletion fields. The operation accepts two path parameters productId and skuId, referencing the product and SKU respectively. It returns comprehensive SKU details for display in product detail views or administrative interfaces, enabling buyers and sellers to view variant-specific data.","path":"/shoppingMall/products/{productId}/skus/{skuId}","method":"get","summary":"Retrieve detailed information for a specific SKU of a product","description":"This GET operation obtains detailed information about an SKU linked to a specific product. The path parameters productId and skuId identify the product and its SKU uniquely.\n\nOnly users with appropriate view permissions can access this SKU detail endpoint.\n\nIt leverages the shopping_mall_skus table which includes fields for SKU code, price, weight, status, and timestamps. Soft deleted SKUs (where deleted_at is not null) are excluded from results.\n\nBusiness rules include verifying SKU belongs to the specified product and ensuring the SKU is active and not soft deleted. The response provides clients comprehensive information needed to display SKU details.\n\nThis operation complements related endpoints such as listing SKUs for a product, product detail retrieval, and inventory viewing for SKUs.\n\nErrors include 404 if SKU or product is not found or not matching.\n\nNo request body is needed as the operation is read-only.\n\nResponse returns the IShoppingMallSku DTO which includes all SKU properties excluding relations.","parameters":[{"name":"productId","description":"Unique identifier of the product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the SKU","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed SKU information for the specified product and SKU","typeName":"IShoppingMallSku"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its SKUs can be retrieved or referenced."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created for this product before it can be retrieved or used."}]},{"specification":"This operation allows authenticated sellers to create a new SKU variant for a specified product in the shopping mall platform. It operates on the shopping_mall_skus Prisma table which stores SKU codes, pricing, weight, status, and timestamps. The POST request includes the SKU data in the body, validated against the IShoppingMallSku.ICreate DTO type to ensure proper SKU details including the skuCode, price, optional weight, and status.\n\nOnly sellers authorized to manage the given product may invoke this operation.\n\nUpon creation, the SKU is associated with the product identified by productId in the path parameter. The created SKU record is returned with all details.\n\nValidation rules include verifying skuCode uniqueness within the product, price positivity, and valid status values.\n\nThis operation is essential for sellers managing their product variant inventory and pricing through the platform.\n\nErrors may include 400 for validation failures and 403 for unauthorized access.\n\nResponse returns the full IShoppingMallSku DTO reflecting the newly created SKU.","path":"/shoppingMall/seller/products/{productId}/skus","method":"post","summary":"Create a new SKU for a product","description":"Create a new SKU variant for the specified product.\n\nThe request body must provide SKU details including skuCode, price, optional weight, and status.\n\nThis operation requires seller authentication and ownership of the target product.\n\nValidation enforces SKU code uniqueness within the product and positive pricing.\n\nReturns the created SKU record with all fields.\n\nRelated operations include SKU retrieval and product variant management.","parameters":[{"name":"productId","description":"Unique identifier of the product","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation information for a new SKU variant","typeName":"IShoppingMallSku.ICreate"},"responseBody":{"description":"The created SKU information including assigned IDs and timestamps","typeName":"IShoppingMallSku"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before adding SKUs to it."}]},{"specification":"This operation updates the details of a specific product SKU in the shopping mall platform. It is associated with the `shopping_mall_skus` table from the Prisma schema. The endpoint allows modifying SKU properties such as sku_code, price, weight, and status. The operation requires authorization as a seller to ensure only the owner can modify their SKUs. It validates the SKU exists under the specified product and applies changes transactionally. This update ensures SKU data integrity and maintains relations with the product entity. The request body conforms to the `IShoppingMallSku.IUpdate` type, representing all modifiable fields of the SKU entity.","description":"Update a product SKU's information by specifying the product ID and SKU ID.\n\nThis operation allows authenticated sellers to modify details of their product variants, including SKU code, price, weight, and status.\n\nSecurity measures ensure only sellers owning the product can perform this update.\n\nThe underlying database entity is the `shopping_mall_skus` table, with foreign key relationships to the `shopping_mall_products` table.\n\nValidation includes verifying the existence of the product and SKU and confirming seller ownership.\n\nErrors will be returned if the SKU does not exist or the seller is unauthorized.\n\nThe request expects a well-formed payload as defined in the corresponding update DTO. The response returns the updated SKU entity upon success.","summary":"Update a specific SKU of a product","parameters":[{"name":"productId","description":"ID of the product to which the SKU belongs","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"ID of the SKU to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product SKU update payload","typeName":"IShoppingMallSku.IUpdate"},"responseBody":{"description":"Updated product SKU information","typeName":"IShoppingMallSku"},"authorizationRoles":["seller"],"name":"update","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}","method":"put","authorizationType":null,"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before updating its SKU variants"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before it can be updated"}]},{"specification":"This operation deletes a specific product SKU from the shopping mall platform. It is associated with the `shopping_mall_skus` table from the Prisma schema. The deletion is a soft delete, setting the `deleted_at` timestamp without removing the record permanently. Authorization as a seller is required to delete SKUs only owned by the seller. The operation requires the product ID and SKU ID to identify the target SKU under the correct product. Upon successful deletion, no response body is returned.","description":"Perform a soft delete on a product SKU by specifying the product ID and SKU ID.\n\nThis operation allows an authenticated seller to mark a SKU as deleted without physically removing it from the database.\n\nOnly sellers who own the product and SKU can perform this action.\n\nThe underlying data is stored in the `shopping_mall_skus` table, implementing soft deletion by setting `deleted_at`.\n\nThe operation expects the SKU to exist and belong to the provided product; otherwise, errors occur.\n\nNo content is returned after successful deletion.\n\nThis operation is critical to avoid permanent data loss and supports audit compliance.","summary":"Soft delete a specific SKU of a product","parameters":[{"name":"productId","description":"ID of the product to which the SKU belongs","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"ID of the SKU to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}","method":"delete","authorizationType":null,"authorizationRole":"seller","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before deleting its SKU variants"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before it can be soft deleted"}]},{"specification":"This operation retrieves a list of inventory records associated with product SKUs in the ShoppingMall platform. It supports filtering and pagination over SKU inventory to allow querying available stock levels and inventory details. It operates on the shopping_mall_inventory table from the Prisma schema, which stores inventory quantities per SKU along with timestamps for changes. The API allows clients to efficiently search and fetch inventory data for multiple SKUs with advanced filtering.\n\nThe operation requires authentication for users who are authorized to view inventory. It returns a paginated list of inventory records, including associated SKU identifiers and the current stock quantity.\n\nDetails:\n- Supports complex search filters via request body for quantity and SKU references.\n- Returns paginated summaries of inventory records.\n- Relates directly to the shopping_mall_inventory table in Prisma DB schema.\n- Pagination is handled via request body parameters.\n- Suitable for seller and admin roles with inventory management permissions.","description":"Retrieve a filtered and paginated list of product SKU inventory records for managing stock levels in the shopping mall platform. This operation allows querying inventory quantities along with corresponding SKU details.\n\nThis API operates on the \"shopping_mall_inventory\" table in the Prisma schema, which tracks quantity levels for each SKU identified by \"shopping_mall_sku_id\".\n\nAuthorization is required to access inventory data, typically granted to sellers managing product stocks or administrators overseeing the platform.\n\nRequest input includes pagination parameters and filtering criteria to support large inventories.\n\nResponse returns a paginated list of inventory summaries reflecting SKU quantities and timestamps.\n\nClients should handle potentially large result sets via pagination and filter to relevant SKUs based on business needs.\n\nSecurity considerations include ensuring only authorized users can query inventory data to protect sensitive stock information.","summary":"Search and retrieve product SKU inventory with pagination and filtering","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering inventory","typeName":"IShoppingMallInventory.IRequest"},"responseBody":{"description":"Paginated list of inventory summaries matching criteria","typeName":"IPageIShoppingMallInventory.ISummary"},"authorizationType":null,"authorizationRole":"seller","path":"/shoppingMall/seller/inventory","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Product categories must exist before products can be created."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Sellers must be registered before they can create products."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Products must be created before their SKUs and inventory records can be managed."}]},{"specification":"This operation retrieves a list of inventory records associated with product SKUs in the ShoppingMall platform. It supports filtering and pagination over SKU inventory to allow querying available stock levels and inventory details. It operates on the shopping_mall_inventory table from the Prisma schema, which stores inventory quantities per SKU along with timestamps for changes. The API allows clients to efficiently search and fetch inventory data for multiple SKUs with advanced filtering.\n\nThe operation requires authentication for users who are authorized to view inventory. It returns a paginated list of inventory records, including associated SKU identifiers and the current stock quantity.\n\nDetails:\n- Supports complex search filters via request body for quantity and SKU references.\n- Returns paginated summaries of inventory records.\n- Relates directly to the shopping_mall_inventory table in Prisma DB schema.\n- Pagination is handled via request body parameters.\n- Suitable for seller and admin roles with inventory management permissions.","description":"Retrieve a filtered and paginated list of product SKU inventory records for managing stock levels in the shopping mall platform. This operation allows querying inventory quantities along with corresponding SKU details.\n\nThis API operates on the \"shopping_mall_inventory\" table in the Prisma schema, which tracks quantity levels for each SKU identified by \"shopping_mall_sku_id\".\n\nAuthorization is required to access inventory data, typically granted to sellers managing product stocks or administrators overseeing the platform.\n\nRequest input includes pagination parameters and filtering criteria to support large inventories.\n\nResponse returns a paginated list of inventory summaries reflecting SKU quantities and timestamps.\n\nClients should handle potentially large result sets via pagination and filter to relevant SKUs based on business needs.\n\nSecurity considerations include ensuring only authorized users can query inventory data to protect sensitive stock information.","summary":"Search and retrieve product SKU inventory with pagination and filtering","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering inventory","typeName":"IShoppingMallInventory.IRequest"},"responseBody":{"description":"Paginated list of inventory summaries matching criteria","typeName":"IPageIShoppingMallInventory.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/inventory","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created before inventory records can be managed or retrieved."}]},{"specification":"This operation retrieves detailed inventory information for a specified SKU in the ShoppingMall platform. It returns the inventory record corresponding to the SKU identified by the {skuId} path parameter.\n\nThe API operates on the shopping_mall_inventory table of the Prisma schema, which tracks available stock quantity for individual SKUs.\n\nAccess is restricted to authorized users such as sellers managing their inventory or administrators monitoring stock levels.\n\nThe endpoint requires the SKU unique identifier as a path parameter. The operation returns the inventory data for that SKU, including current quantity and timestamps.\n\nUse this API to obtain precise stock information needed for order validation, inventory display, or stock management.\n\nError handling includes resource-not-found if the SKU inventory does not exist.\n\nSecurity controls ensure that only authenticated and authorized roles may access this information.","description":"Retrieve detailed inventory information for a specific SKU by its unique identifier. This API provides current stock counts and timestamps for management purposes.\n\nBased on the \"shopping_mall_inventory\" table defined in the Prisma schema, each inventory record references a SKU and maintains the quantity available.\n\nAuthorization is enforced for roles such as sellers and administrators who need access to inventory details.\n\nThe SKU identifier path parameter locates the inventory entry to return.\n\nClients should use this endpoint to view or verify stock levels for specific product variants.\n\nIf the inventory entry is not found, a 404 error is returned.","summary":"Retrieve detailed inventory information for a specific SKU","parameters":[{"name":"skuId","description":"Unique identifier of the SKU inventory record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Inventory record for the specified SKU","typeName":"IShoppingMallInventory"},"authorizationType":null,"authorizationRole":"seller","path":"/shoppingMall/seller/inventory/{skuId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before inventory can be retrieved for it."}]},{"specification":"This operation retrieves detailed inventory information for a specified SKU in the ShoppingMall platform. It returns the inventory record corresponding to the SKU identified by the {skuId} path parameter.\n\nThe API operates on the shopping_mall_inventory table of the Prisma schema, which tracks available stock quantity for individual SKUs.\n\nAccess is restricted to authorized users such as sellers managing their inventory or administrators monitoring stock levels.\n\nThe endpoint requires the SKU unique identifier as a path parameter. The operation returns the inventory data for that SKU, including current quantity and timestamps.\n\nUse this API to obtain precise stock information needed for order validation, inventory display, or stock management.\n\nError handling includes resource-not-found if the SKU inventory does not exist.\n\nSecurity controls ensure that only authenticated and authorized roles may access this information.","description":"Retrieve detailed inventory information for a specific SKU by its unique identifier. This API provides current stock counts and timestamps for management purposes.\n\nBased on the \"shopping_mall_inventory\" table defined in the Prisma schema, each inventory record references a SKU and maintains the quantity available.\n\nAuthorization is enforced for roles such as sellers and administrators who need access to inventory details.\n\nThe SKU identifier path parameter locates the inventory entry to return.\n\nClients should use this endpoint to view or verify stock levels for specific product variants.\n\nIf the inventory entry is not found, a 404 error is returned.","summary":"Retrieve detailed inventory information for a specific SKU","parameters":[{"name":"skuId","description":"Unique identifier of the SKU inventory record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Inventory record for the specified SKU","typeName":"IShoppingMallInventory"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/inventory/{skuId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before retrieving its inventory details."}]},{"specification":"This operation retrieves a filtered and paginated list of shopping cart records from the shopping_mall_shopping_carts table as defined in the Prisma schema. It supports advanced search criteria, pagination, and sorting capabilities to enable refined queries for customer or guest carts. The operation returns shopping cart summaries optimized for list display, including cart item counts and timestamps. This API operation secures access to authenticated customer users only and supports request filtering by shopping cart properties such as customer ID and session ID.","description":"This API endpoint allows an authenticated customer user to search for shopping carts within the system using complex filtering, sorting, and pagination options. Shopping carts represent collections of SKU items customers intend to purchase and are linked to customers or optionally guests via sessions. \n\nThe response includes a paginated list of shopping cart summaries conforming to the shopping_mall_shopping_carts schema, reflecting creation and update timestamps.\n\nSecurity considerations restrict access to authenticated customers. Proper filtering ensures users see only relevant carts, typically their own.\n\nRelated operations include retrieving the detailed content of a specific shopping cart by its unique identifier, which complements this search operation.\n\nError handling includes validation of search parameters and limits to prevent excessive data retrieval.","summary":"Search and retrieve a filtered, paginated list of shopping carts","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for shopping cart filtering","typeName":"IShoppingMallShoppingCart.IRequest"},"responseBody":{"description":"Paginated list of shopping cart summary information matching search criteria","typeName":"IPageIShoppingMallShoppingCart.ISummary"},"authorizationRoles":["customer"],"path":"/shoppingMall/customer/shoppingCarts","method":"patch","name":"index","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before shopping carts associated with the customer can be searched or retrieved."}]},{"specification":"This operation retrieves the detailed information of a specific shopping cart identified by its unique shoppingCartId from the shopping_mall_shopping_carts table based on the Prisma schema. It returns comprehensive data about the cart, including all related cart items and their quantities, SKU details, and timestamps. This endpoint is intended for authenticated customer users who can access their own shopping carts, with appropriate authorization checks to prevent unauthorized access.","description":"Retrieve a specific shopping cart by its unique ID to obtain detailed information about the cart contents and metadata. Shopping carts are collections of SKU items associated with a customer or a guest session.\n\nThis operation returns detailed shopping cart data as defined in the shopping_mall_shopping_carts schema:\n- Shopping cart metadata such as creation and update timestamps\n- Included cart items with quantities\n- Associated SKU details\n\nSecurity considerations require that users retrieve only their own carts or authorized carts. Proper authentication and authorization must be enforced.\n\nThis operation complements the search operation, which provides paginated lists of many carts.\n\nErrors include handling non-existent cart IDs and unauthorized access attempts.","summary":"Retrieve detailed information for a specific shopping cart","parameters":[{"name":"shoppingCartId","description":"Unique identifier of the target shopping cart","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping cart information including items and SKUs","typeName":"IShoppingMallShoppingCart"},"authorizationRoles":["customer"],"path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}","method":"get","name":"at","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must be created before it can be retrieved by its ID"}]},{"specification":"This operation creates a new shopping cart record in the shopping_mall_shopping_carts table for the shoppingMall service. It supports associating the cart with a customer (if logged in via shopping_mall_customers) or alternatively for a guest session. The API ensures uniqueness of the cart per customer or session ID, includes relevant timestamps for creation and updating, and supports soft deletion tracking. The request body follows the IShoppingMallShoppingCart.ICreate schema, and the response returns the full shopping cart entity upon creation.","path":"/shoppingMall/customer/shoppingCarts","method":"post","summary":"Create a new shopping cart for a customer or guest session","description":"Creates a new shopping cart linked either to a registered customer or a guest session ID, enabling SKU items to be saved for subsequent order placement. The operation prevents creating duplicate carts for the same customer or session. It stores the customer's reference ID or session ID, timestamps for creation and update, and optional soft delete timestamp.\n\nUser roles authorized to call this operation include authenticated customers and guests with valid session IDs. Proper validation of the associated customer or session is performed.\n\nRelated operations include updating the cart and managing cart items. Errors include conflict if a cart already exists for the customer or session, or validation errors for missing required fields.\n","parameters":[],"requestBody":{"description":"Request body schema for creating a shopping cart","typeName":"IShoppingMallShoppingCart.ICreate"},"responseBody":{"description":"Created shopping cart entity with details","typeName":"IShoppingMallShoppingCart"},"authorizationType":null,"authorizationRole":"customer","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before creating a shopping cart linked to a registered customer."}]},{"specification":"This operation creates a new shopping cart record in the shopping_mall_shopping_carts table for the shoppingMall service. It supports associating the cart with a customer (if logged in via shopping_mall_customers) or alternatively for a guest session. The API ensures uniqueness of the cart per customer or session ID, includes relevant timestamps for creation and updating, and supports soft deletion tracking. The request body follows the IShoppingMallShoppingCart.ICreate schema, and the response returns the full shopping cart entity upon creation.","path":"/shoppingMall/guest/shoppingCarts","method":"post","summary":"Create a new shopping cart for a customer or guest session","description":"Creates a new shopping cart linked either to a registered customer or a guest session ID, enabling SKU items to be saved for subsequent order placement. The operation prevents creating duplicate carts for the same customer or session. It stores the customer's reference ID or session ID, timestamps for creation and update, and optional soft delete timestamp.\n\nUser roles authorized to call this operation include authenticated customers and guests with valid session IDs. Proper validation of the associated customer or session is performed.\n\nRelated operations include updating the cart and managing cart items. Errors include conflict if a cart already exists for the customer or session, or validation errors for missing required fields.\n","parameters":[],"requestBody":{"description":"Request body schema for creating a shopping cart","typeName":"IShoppingMallShoppingCart.ICreate"},"responseBody":{"description":"Created shopping cart entity with details","typeName":"IShoppingMallShoppingCart"},"authorizationType":null,"authorizationRole":"guest","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/guests","method":"post"},"description":"Guest session must exist before creating a shopping cart linked to a guest session."}]},{"specification":"Updates an existing shopping cart record in the shopping_mall_shopping_carts table identified by the shoppingCartId path parameter. Supports updating the customer association or session ID for the cart. The update operation respects soft deletion by targeting active carts only. The request body follows the IShoppingMallShoppingCart.IUpdate schema, and the response returns the updated cart entity. Ensures proper authorization and ownership verification for security.","path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}","method":"put","summary":"Update shopping cart details identified by ID","description":"Updates a shopping cart by its unique ID, allowing modification of the associated customer or guest session ID, along with updated timestamps. Ensures only authorized users (customers and guests) can update their carts.\n\nThis is vital for maintaining accurate cart linkage in user sessions. Related operations include cart item management and cart retrieval.\n\nPossible errors include not found if the cart ID does not exist, authorization failure if the updater does not own the cart, or validation errors on provided input.\n","parameters":[{"name":"shoppingCartId","description":"Unique identifier of the shopping cart to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body schema for updating a shopping cart","typeName":"IShoppingMallShoppingCart.IUpdate"},"responseBody":{"description":"Updated shopping cart entity with details","typeName":"IShoppingMallShoppingCart"},"authorizationType":null,"authorizationRole":"customer","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must exist before it can be updated."}]},{"specification":"Updates an existing shopping cart record in the shopping_mall_shopping_carts table identified by the shoppingCartId path parameter. Supports updating the customer association or session ID for the cart. The update operation respects soft deletion by targeting active carts only. The request body follows the IShoppingMallShoppingCart.IUpdate schema, and the response returns the updated cart entity. Ensures proper authorization and ownership verification for security.","path":"/shoppingMall/guest/shoppingCarts/{shoppingCartId}","method":"put","summary":"Update shopping cart details identified by ID","description":"Updates a shopping cart by its unique ID, allowing modification of the associated customer or guest session ID, along with updated timestamps. Ensures only authorized users (customers and guests) can update their carts.\n\nThis is vital for maintaining accurate cart linkage in user sessions. Related operations include cart item management and cart retrieval.\n\nPossible errors include not found if the cart ID does not exist, authorization failure if the updater does not own the cart, or validation errors on provided input.\n","parameters":[{"name":"shoppingCartId","description":"Unique identifier of the shopping cart to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body schema for updating a shopping cart","typeName":"IShoppingMallShoppingCart.IUpdate"},"responseBody":{"description":"Updated shopping cart entity with details","typeName":"IShoppingMallShoppingCart"},"authorizationType":null,"authorizationRole":"guest","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/guest/shoppingCarts","method":"post"},"description":"Shopping cart must be created before it can be updated"}]},{"specification":"This operation permanently deletes a shopping cart record specified by its unique identifier, as defined in the 'shopping_mall_shopping_carts' table in the Prisma schema. The deletion is a hard delete action since the schema supports a 'deleted_at' field for soft deletion, but this operation removes the record entirely from the database. This action is intended for user-initiated cart removals and requires authentication under the 'customer' role associated with the customer owning the cart. The operation has no request body and no response content. Validation ensures the provided shoppingCartId matches the UUID format as specified in the table's primary key.","description":"This API deletes a specific shopping cart by its ID, fully removing it from the database. The shopping cart is identified by the 'shoppingCartId' path parameter, corresponding to the 'id' field in the 'shopping_mall_shopping_carts' Prisma table.\n\nDeletion is permanent and cannot be undone. This operation is authorized for authenticated users, ensuring only owners or authorized personnel can delete their carts.\n\nThe operation does not require a request body, and no response body is returned upon successful completion.\n\nProper validation on the ID parameter ensures requests target valid shopping cart entries. Error handling will manage non-existing IDs or access violations.","summary":"Delete a shopping cart by ID","parameters":[{"name":"shoppingCartId","description":"Unique identifier of the shopping cart to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must be created before it can be deleted."}],"path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}","method":"delete","name":"erase"},{"specification":"This operation retrieves and updates the list of cart items within a shopping cart, identified by its 'shoppingCartId'. It is defined for the 'shopping_mall_cart_items' table, which stores detail lines of SKUs and quantities inside a cart. The PATCH method with a request body aligns with the need for complex search or update queries on the cart items collection. The request body references the 'ShoppingMallCartItem.IRequest' DTO for filtering or batch updating items. The response returns a paginated list of 'ShoppingMallCartItem' entities reflecting the current cart contents.\n\nThis endpoint requires the customer role to authenticate and authorize access to the shopping cart's items. Operations include adding, updating quantities, or removing SKUs as per user actions in the shopping cart interface.\n\nPath parameter 'shoppingCartId' is required to target the specific cart. The operation enforces UUID validation for this parameter.\n\nThis operation enables detailed management of shopping cart contents for customers in the shopping mall platform.","description":"Retrieve and update the list of items in a specific shopping cart identified by 'shoppingCartId'. This operation supports complex queries, filters, pagination, and bulk updates of cart items.\n\nThe shopping cart ID path parameter must be a valid UUID corresponding to the 'id' field in 'shopping_mall_shopping_carts'.\n\nRequest body includes search or update criteria defined in 'ShoppingMallCartItem.IRequest' data structure.\n\nThe response returns a paginated collection of shopping cart items, each including SKU references, quantities, and timestamps.\n\nAccess is restricted to authenticated customers who own the shopping cart.\n\nThis operation is essential for customers to manage the precise contents and quantities in their shopping carts, reflecting product availability and user intentions.\n\nErrors are managed through validation responses and authorization checks.","summary":"Get and update items in a shopping cart","parameters":[{"name":"shoppingCartId","description":"Identifier of the shopping cart to access its items","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and update criteria for shopping cart items","typeName":"IShoppingMallCartItem.IRequest"},"responseBody":{"description":"Paginated list of shopping cart items matching search criteria","typeName":"IPageIShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must be created before retrieving or updating its items."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"Product SKU must exist before it can be referenced in shopping cart items."}],"path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information of a specific cart item within a given shopping cart by their unique UUIDs. It maps to the shopping_mall_cart_items table, representing individual SKU quantities inside a customer's shopping cart. The API fetches the cart item data including SKU reference, quantity, and timestamps for creation and update, enabling clients to display and verify cart contents accurately.","description":"Retrieve detailed information of a specific item in a shopping cart. This endpoint requires the unique UUIDs of the shopping cart and the cart item to accurately identify the item.\n\nOnly authenticated customers can access this endpoint to protect user data privacy.\n\nThe response contains the full details of the cart item including SKU ID, quantity, creation timestamp, and update timestamp.\n\nErrors are returned if the specified cart or cart item does not exist or belong to the authenticated user.","summary":"Retrieve a specific cart item by its ID within a shopping cart","parameters":[{"name":"shoppingCartId","description":"Unique UUID identifying the shopping cart","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Unique UUID identifying the cart item within the shopping cart","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping mall cart item data","typeName":"IShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems/{cartItemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must be created before accessing its specific cart items"},{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems","method":"post"},"description":"Cart item must be created in the shopping cart before retrieving its details"}]},{"specification":"This operation adds a new cart item to a specified shopping cart. It corresponds to the shopping_mall_cart_items table which stores individual SKU quantities per shopping cart. Clients use this API to add SKUs and specify quantities to the cart, managing customers' shopping sessions.\n\nThe request body must provide details conforming to the IShoppingMallCartItem.ICreate DTO type, including the SKU identifier and the quantity to add.\n\nAuthentication as a customer is required to ensure users can only add items to their own carts.\n\nThe response returns the newly created cart item with complete details as stored.\n\nValidation ensures the SKU exists, the quantity is positive, and the cart is accessible to the customer.\n\nErrors occur for invalid SKUs, unauthorized access, or invalid quantities.","description":"Add a new item to the specified shopping cart by providing SKU ID and quantity in the request body. The shoppingCartId path parameter identifies the target cart.\n\nRequest body must conform to IShoppingMallCartItem.ICreate.\n\nOnly authenticated customers may add items to their carts.\n\nResponse includes the full cart item data upon successful creation.\n\nErrors are returned for validation failures or unauthorized access.","summary":"Create a new cart item in a customer's shopping cart","parameters":[{"name":"shoppingCartId","description":"Unique UUID identifying the shopping cart to add the item to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing SKU and quantity for new cart item","typeName":"IShoppingMallCartItem.ICreate"},"responseBody":{"description":"Newly created shopping mall cart item details","typeName":"IShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"Product SKU must exist before adding it as a cart item"},{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must exist before adding items to it"}]},{"specification":"This operation updates an existing cart item in the shopping mall shopping cart system. It operates on the shopping_mall_cart_items table, which represents individual SKU units added by customers into their carts. The update allows modification of the quantity of the SKU in the cart. The operation requires the shoppingCartId and cartItemId path parameters to identify the cart item uniquely. The request body must conform to the IShoppingMallCartItem.IUpdate schema, which specifies the editable fields of the cart item. Upon successful update, the operation returns the updated shopping mall cart item entity conforming to the IShoppingMallCartItem response schema. Authorization is restricted to users with the \"customer\" role, representing authenticated customers who own shopping carts. This ensures that only authorized users can modify their own cart items.","description":"Update a specific cart item within a shopping cart by its ID. This operation allows authenticated customers to modify the quantity or other modifiable fields of an item they previously added to their shopping cart.\n\nSecurity considerations limit this operation to authenticated users with the \"customer\" role to ensure cart item ownership and prevent unauthorized modifications.\n\nThe underlying database entity is the shopping_mall_cart_items table, which links shopping carts with SKU variants and tracks quantities.\n\nValidation rules enforce that the updated quantity must be a positive integer and conform to business inventory constraints.\n\nThis operation is typically used in the shopping cart management user interface when adjusting quantities or correcting cart contents before order placement.\n\nErrors returned include 404 if the cart item or shopping cart IDs do not exist or are unauthorized, and 400 for invalid quantity values.","summary":"Update a cart item in the shopping mall platform","parameters":[{"name":"shoppingCartId","description":"Unique identifier of the shopping cart","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Unique identifier of the cart item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for updating a shopping cart item","typeName":"IShoppingMallCartItem.IUpdate"},"responseBody":{"description":"Updated shopping cart item information","typeName":"IShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems/{cartItemId}","method":"put","name":"updateCartItem","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems","method":"post"},"description":"An order item must be created before it can be updated."},{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"A shopping cart must be created before cart items can be modified within it."}]},{"specification":"This operation deletes an existing cart item in the shopping mall shopping cart system. It operates on the shopping_mall_cart_items database table, which stores individual SKUs added by customers into shopping carts. The endpoint requires the unique identifiers of both the shopping cart and the cart item to accurately identify the resource to be deleted. The deletion is a hard delete, permanently removing the record from the database as there is no soft delete field in this entity. Authorization is restricted to users with the \"customer\" role, ensuring that only authenticated customers can remove items from their own carts. No request body is required for this operation. The response returns no content, indicating successful deletion.","description":"Delete a specific cart item within a shopping cart by its ID. This operation permanently removes the item from the customer's shopping cart.\n\nAuthorization is limited to authenticated users under the \"customer\" role to guarantee that only the owner of the cart can delete items.\n\nThis operation acts on the shopping_mall_cart_items database table records permanently with NO soft deletion.\n\nErrors include 404 if the shopping cart or the cart item ID do not correspond to any existing record or the user is unauthorized to delete the cart item.\n\nThere is no response body for this operation.","summary":"Remove a cart item from the shopping mall platform","parameters":[{"name":"shoppingCartId","description":"Unique identifier of the shopping cart","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Unique identifier of the cart item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems/{cartItemId}","method":"delete","name":"eraseCartItem","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts","method":"post"},"description":"Shopping cart must exist before deleting cart items."},{"endpoint":{"path":"/shoppingMall/customer/shoppingCarts/{shoppingCartId}/cartItems","method":"post"},"description":"Cart item must be created before it can be deleted."}]},{"specification":"This operation performs a filtered search and retrieval of the shopping wishlist of a customer in the shopping mall platform. It operates on the shopping_mall_wishlists table defined in the Prisma schema. The search supports pagination, filtering by customer, and retrieval of wishlist summary items including SKUs added by the customer. This allows customers to manage and view their saved wishlist items for future purchase consideration. It includes input for page size, page number, and optional filters to narrow down results. Authorization is for authenticated users (customers).","path":"/shoppingMall/customer/wishlists","method":"patch","summary":"Search and retrieve a filtered, paginated list of shopping wishlists","description":"Retrieve a filtered and paginated list of shopping wishlist items for authenticated customers on the shopping mall platform. This operation allows users to search and browse their wishlist contents, supporting various filter criteria such as SKU attributes or addition timestamps.\n\nThis operation accesses the shopping_mall_wishlists table, which stores the customer's wishlist metadata and related wishlist items in the subsidiary shopping_mall_wishlist_items table.\n\nThe operation enforces security by allowing only authenticated customers to access their own wishlists. Pagination ensures scalable responses for large wishlists.\n\nRelated operations include retrieval of a single wishlist by its ID with detailed items, adding/removing wishlist items, and managing the wishlist itself.\n\nThis operation returns a paginated summary of wishlist items with SKU details suitable for rendering lists in UI.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for wishlist filtering","typeName":"IShoppingMallWishlist.IRequest"},"responseBody":{"description":"Paginated list of wishlist summary information matching search criteria","typeName":"IPageIShoppingMallWishlist.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before creating or retrieving their wishlists"}]},{"specification":"Retrieve detailed information for a specific shopping wishlist by its identifier. This operation accesses the shopping_mall_wishlists table and related shopping_mall_wishlist_items to provide full details of the wishlist and its contained SKU items.\n\nThe operation requires the wishlistId path parameter, which identifies the specific wishlist record.\n\nSecurity is enforced by restricting access to the owning authenticated customer only.\n\nThis operation returns the detailed wishlist entity including all SKU items and timestamps, supporting UI views for wishlist management and editing.","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"get","summary":"Retrieve a specific shopping wishlist by ID with detailed items","description":"Retrieve a specific shopping wishlist and its items by wishlistId from the shopping mall platform. This operation allows authenticated customers to view details of a particular wishlist they own.\n\nThe wishlist entity includes metadata and a list of SKU items added by the customer for future purchase consideration.\n\nAccess control ensures only the owning authenticated customer can retrieve the wishlist details.\n\nThis operation returns the full wishlist object suitable for editing or detailed viewing in the user interface.","parameters":[{"name":"wishlistId","description":"Unique identifier of the target wishlist","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping wishlist with item information","typeName":"IShoppingMallWishlist"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before retrieving its details"}]},{"specification":"This operation creates a new wishlist for a customer in the ShoppingMall platform, allowing the customer to save products they wish to purchase later. It operates on the shopping_mall_wishlists table in the Prisma schema, linking the wishlist explicitly to the customer by customer ID. The operation supports creation of a wishlist record including timestamps for auditing and soft deletion management. It accepts a request body with the customer ID and returns the created wishlist entity, including its unique ID, timestamps, and relation to the customer. Business rules require that the customer must exist and be active to create a wishlist. Validation ensures the customer ID is a valid UUID and matches an existing customer record.","description":"Create a new shopping wishlist for a logged-in customer. The wishlist allows customers to save product SKUs they wish to consider for future purchase.\n\nThis operation requires authentication with the role \"customer\" indicating a logged-in customer. The request must include the customer's unique ID to associate the new wishlist. The system records creation and update timestamps automatically. The wishlist is initially empty and can have items added via separate operations.\n\nThe operation maps directly to the shopping_mall_wishlists table in the Prisma schema, covering fields: id (generated UUID), shopping_mall_customer_id (customer linkage), created_at, updated_at, and deleted_at (soft delete support).\n\nValidation will ensure the customer exists and is authorized to own a wishlist. If validation fails, the operation will return an error.\n\nNo response body besides the created wishlist entity is returned. Error handling covers invalid customer IDs and unauthorized access.","summary":"Create a new wishlist for a customer in shopping mall platform","parameters":[],"requestBody":{"description":"New wishlist creation data","typeName":"IShoppingMallWishlist.ICreate"},"responseBody":{"description":"Created wishlist entity with details","typeName":"IShoppingMallWishlist"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/wishlists","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before creating a wishlist associated with the customer"}]},{"specification":"This operation updates an existing wishlist's details in the ShoppingMall platform. It operates on the shopping_mall_wishlists table, allowing modifications such as changing the associated customer ID or other mutable fields defined in the update DTO. The wishlist is identified by its unique UUID in path parameter. The request includes the update data conforming to the IShoppingMallWishlist.IUpdate DTO schema, which includes fields the user can modify.\n\nThe operation requires a valid wishlist ID in the path parameter as string UUID format and the update payload in the request body. It supports soft deletion awareness by allowing updates that might set the deleted_at field or modify other properties.\n\nAuthorization requires the \"customer\" role, implying only authenticated customers can update their own wishlists. The operation returns the updated wishlist entity with current timestamps and state.\n\nValidation ensures the wishlist exists, belongs to the requesting user, and the update data is valid. Unauthorized or invalid requests will return appropriate errors.","description":"Update an existing customer wishlist by its unique identifier. This operation enables modification of wishlist properties according to allowed updates by the owning customer.\n\nThe request path must include the `wishlistId` UUID to identify the target wishlist. Request body must contain the update data conforming to the IShoppingMallWishlist.IUpdate schema.\n\nAuthentication is required with role \"customer\" to ensure only authorized owners can update their wishlists.\n\nThe operation interacts with the shopping_mall_wishlists table in the Prisma schema, managing fields such as `shopping_mall_customer_id` linkage and timestamps.\n\nValidation includes checking wishlist existence, ownership, and update data correctness. The response returns the updated wishlist entity.\n\nErrors comply with unauthorized access, invalid IDs, and validation failures.","summary":"Update customer wishlist details by wishlist ID","parameters":[{"name":"wishlistId","description":"Unique identifier of the target wishlist to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Wishlist update data","typeName":"IShoppingMallWishlist.IUpdate"},"responseBody":{"description":"Updated wishlist entity with current details","typeName":"IShoppingMallWishlist"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before it can be updated"},{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before modifying wishlists associated with the customer"}]},{"specification":"This operation deletes a shopping mall wishlist by its unique identifier. It permanently removes the wishlist and all associated wishlist items from the database to prevent further access or modifications. This operation is associated with the shopping_mall_wishlists table in the Prisma schema, which stores customer wishlists and their items. Proper authorization ensures only the owning user or administrators can perform this deletion to protect user data integrity.","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"delete","summary":"Delete a shopping mall wishlist by ID","description":"Delete an existing shopping mall wishlist identified by its unique wishlistId. This operation permanently removes the wishlist from the database along with any related wishlist items, ensuring no orphan records remain.\n\nAuthorization is required to ensure that only the owning customer or authorized administrative users can delete a wishlist. Once deleted, the wishlist cannot be recovered.\n\nThis operation targets the shopping_mall_wishlists table, which includes references to the owning customer and contained wishlist items. All related entities are cascade deleted to maintain data integrity.\n\nClients must confirm ownership before invoking this API and handle any errors if the wishlist is not found or the user is unauthorized.","parameters":[{"name":"wishlistId","in":"path","description":"Unique identifier of the wishlist to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before it can be deleted."}]},{"specification":"This operation retrieves and updates the wishlist items for a specified wishlist. It allows adding, removing, or modifying individual SKU items within the wishlist. The operation handles search parameters, pagination, and sorting to provide flexible access to wishlist items.\n\nIt operates on the shopping_mall_wishlist_items table, which stores individual SKU items linked to wishlists. Proper authorization ensures only the owning user can access and modify their wishlist items.\n\nThe request body defines filtering criteria and update instructions using IShoppingMallWishlistItem.IRequest DTO. The response returns a paginated list of wishlist items matching the request criteria using IPageIShoppingMallWishlistItem.\n\nThis endpoint is essential for enabling customers to manage wishlist contents through detailed API control, supporting rich user experiences in the shopping mall platform.","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"patch","summary":"Search and update shopping mall wishlist items","description":"Search and update items in a specific shopping mall wishlist identified by wishlistId. This operation allows clients to retrieve a filtered and paginated list of wishlist items, and perform batch updates on the wishlist contents if supported.\n\nThe operation manipulates the shopping_mall_wishlist_items table which holds individual SKU items for each wishlist. Authorization restricts access to the wishlist owner.\n\nRequest parameters specify filtering options such as SKU, quantity ranges, or pagination details. The response delivers a page of wishlist items reflecting current data after updates.\n\nClients can use this endpoint to synchronize UI wishlist views and perform bulk wishlist item modifications as needed.\n\nRefer to the Prisma schema for detailed column and relation descriptions for wishlist items.","parameters":[{"name":"wishlistId","in":"path","description":"Unique identifier of the wishlist whose items are managed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and update instructions for wishlist items","typeName":"IShoppingMallWishlistItem.IRequest"},"responseBody":{"description":"Paginated list of wishlist items matching criteria","typeName":"IPageIShoppingMallWishlistItem"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before its items can be searched or updated."}]},{"specification":"This operation retrieves the details of a specific wishlist item identified by wishlistId and wishlistItemId. It works on the shopping_mall_wishlist_items table, which holds SKU items saved in the customer's wishlist. Access is typically restricted to authenticated customers who own the wishlist. This read operation returns the wishlist item including its SKU reference and timestamps.","description":"Retrieve detailed information about a specific wishlist item belonging to a customer's wishlist. This item represents a SKU variant saved by a customer for potential future purchase.\n\nSecurity considerations require that only the authenticated customer owning the wishlist may access this item.\n\nThe operation references the shopping_mall_wishlist_items model, including fields such as the wishlist identifier, SKU identifier, creation and update timestamps.\n\nParameters:\n- wishlistId: UUID of the customer's wishlist\n- wishlistItemId: UUID of the specific wishlist item\n\nNo request body is needed.\n\nOn success, returns the full wishlist item data.\n\nErrors return appropriate HTTP status codes such as 404 for not found, or 403 for unauthorized access.","summary":"Retrieve a specific wishlist item by wishlistId and wishlistItemId","parameters":[{"name":"wishlistId","description":"Unique identifier of the target wishlist","schema":{"type":"string","format":"uuid"}},{"name":"wishlistItemId","description":"Unique identifier of the target wishlist item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed wishlist item information","typeName":"IShoppingMallWishlistItem"},"authorizationRoles":["customer"],"name":"at","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems/{wishlistItemId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"post"},"description":"Wishlist item must be created before it can be retrieved by its ID"},{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before wishlist items can be created"},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before SKU variants can be linked and added to wishlist items"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variants must be created before they can be added to wishlist items"}]},{"specification":"This operation creates a new wishlist item within a customer's specific wishlist. It inserts a new record in shopping_mall_wishlist_items linking a SKU variant to the wishlist. The authenticated customer owning the wishlist may add SKUs for future consideration. The request requires the wishlistId path parameter and a request body with the SKU identifier and, optionally, a creation timestamp.\n\nRequest body schema IShoppingMallWishlistItem.ICreate demands the SKU id.\n\nOn success, the created wishlist item records details including IDs and timestamps are returned.\n\nErrors may occur if SKU doesn't exist, wishlist is not owned by the user, or input validation fails.\n\nSecurity requires the requester to be the wishlist owner.","description":"Create a new wishlist item in a specific wishlist owned by the authenticated customer.\n\nRequest body must include the SKU id to be added.\n\nThe system validates that the SKU exists and the wishlist belongs to the authenticated customer.\n\nOn success, returns the created wishlist item including identifiers and timestamps.\n\nOnly the owning customer may perform this operation.\n\nNo direct request body or parameters other than wishlistId to identify the wishlist.\n\nReturns the created wishlist item entity.","summary":"Create a new wishlist item under specific wishlist","parameters":[{"name":"wishlistId","description":"Unique identifier of the target wishlist","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data payload for adding a wishlist item","typeName":"IShoppingMallWishlistItem.ICreate"},"responseBody":{"description":"Created wishlist item details","typeName":"IShoppingMallWishlistItem"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before a wishlist item can be added"},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before SKU variants can be created and linked to wishlist items"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU variants must exist before they can be added to a wishlist item"}]},{"specification":"This API operation updates an existing wishlist item within a specified wishlist. It allows modification of the item's associated SKU and updates timestamps to reflect modifications. The operation modifies the shopping_mall_wishlist_items table, which uniquely links wishlist items to wishlists and SKU variants. This supports accurate management of wishlist content for authenticated customers.\n\nThe update operation requires the wishlistId and wishlistItemId as path parameters to uniquely identify the wishlist item. The request body must conform to the IShoppingMallWishlistItem.IUpdate schema, ensuring correct data transformation and validation.\n\nOnly authenticated customers can perform this update, enforcing ownership and permission checking at the business logic layer. The operation returns the updated wishlist item with all current field values upon success.\n\nInvalid references or missing parameters result in validation errors. Authorization restrictions ensure unauthorized users cannot modify wishlist items.\n\nStrict validation of input fields preserves referential integrity with the shopping_mall_wishlists and shopping_mall_skus tables, avoiding orphaned or inconsistent records.","description":"Update a wishlist item identified by wishlistId and wishlistItemId. This operation enables an authenticated customer to modify the SKU associated with the wishlist item and update any relevant metadata such as timestamps.\n\nThis operation enforces that only the owning customer may update their wishlist items. It validates the existence and active status of the referenced SKU variant. This ensures customers can manage their wishlists effectively with accurate and up-to-date product variant references.\n\nThe operation updates timestamps to reflect changes and maintains referential integrity with the parent wishlist and SKU entities.\n\nSuccessful responses return the fully updated wishlist item entity. Failure cases include invalid identifiers, unauthorized access, or schema validation failures.","summary":"Update a specific wishlist item in a wishlist","parameters":[{"name":"wishlistId","description":"Target wishlist's ID","schema":{"type":"string","format":"uuid"}},{"name":"wishlistItemId","description":"Target wishlist item's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating a wishlist item","typeName":"IShoppingMallWishlistItem.IUpdate"},"responseBody":{"description":"Updated wishlist item information","typeName":"IShoppingMallWishlistItem"},"authorizationRoles":["customer"],"name":"updateWishlistItem","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems/{wishlistItemId}","method":"put","authorizationType":null,"authorizationRole":"customer","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"The wishlist must exist before updating a wishlist item within it."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"The referenced SKU variant must exist before it can be associated with a wishlist item."}]},{"specification":"This API operation deletes a specific wishlist item identified by wishlistId and wishlistItemId, permanently removing the item from the customer's wishlist. The operation modifies the shopping_mall_wishlist_items table and enforces authorization to ensure only the owning customer can delete wishlist items.\n\nNo request body is necessary for this operation. The response body is empty, complying with RESTful conventions for delete actions.\n\nValidation ensures the specified wishlist and wishlist item exist and belong to the authenticated customer. Unauthorized or invalid deletion attempts are rejected.\n\nReferential integrity is maintained in deletion to avoid orphan records and maintain consistent wishlist data.\n\nThis operation is critical for customers to manage and curate their wishlists effectively by removing unwanted items.","description":"Delete a wishlist item from the specified wishlist. This operation permanently removes the wishlist item record from the database. Only the authenticated owning customer with the customer role is authorized to perform this deletion.\n\nReferential integrity is ensured via composite identification of wishlist and wishlist item IDs.\n\nSuccessful deletion returns no content, conforming to RESTful API standards.\n\nFailure scenarios include invalid IDs, unauthorized access, or non-existent items.","summary":"Delete a specific wishlist item in a wishlist","parameters":[{"name":"wishlistId","description":"Target wishlist's ID","schema":{"type":"string","format":"uuid"}},{"name":"wishlistItemId","description":"Target wishlist item's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"eraseWishlistItem","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems/{wishlistItemId}","method":"delete","authorizationType":null,"authorizationRole":"customer","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"The wishlist must exist before deleting a wishlist item within it."}]},{"specification":"This operation retrieves a filtered and paginated list of shopping mall orders from the shopping_mall_orders table as defined in the Prisma schema. It enables advanced querying capabilities including filtering by customer, seller, order status, business status, payment method, and date ranges for created or updated timestamps. Result pagination and sorting options allow efficient client-side consumption. The endpoint is intended for authorized roles such as customers (to view their orders), sellers (to view orders of their products), and admins (full access).","path":"/shoppingMall/customer/orders","method":"patch","summary":"Search and retrieve a filtered, paginated list of shopping mall orders","description":"Retrieve a paginated and filtered list of orders for the shopping mall platform, allowing search by customer ID, seller ID, status, business status, payment method, and creation/update date ranges.\n\nSecurity ensures only authorized roles can access their respective order data. This operation returns a summary list of orders optimized for display in order management UI.\n\nThis operation corresponds to the shopping_mall_orders table in the Prisma schema and returns paginated order summary information.","parameters":[],"requestBody":{"description":"Parameters to filter, search, sort, and paginate shopping mall orders","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated summary list of shopping mall orders","typeName":"IPageIShoppingMallOrder.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before orders referencing a customer can be retrieved."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before orders referencing a seller can be retrieved."}]},{"specification":"This operation retrieves a filtered and paginated list of shopping mall orders from the shopping_mall_orders table as defined in the Prisma schema. It enables advanced querying capabilities including filtering by customer, seller, order status, business status, payment method, and date ranges for created or updated timestamps. Result pagination and sorting options allow efficient client-side consumption. The endpoint is intended for authorized roles such as customers (to view their orders), sellers (to view orders of their products), and admins (full access).","path":"/shoppingMall/seller/orders","method":"patch","summary":"Search and retrieve a filtered, paginated list of shopping mall orders","description":"Retrieve a paginated and filtered list of orders for the shopping mall platform, allowing search by customer ID, seller ID, status, business status, payment method, and creation/update date ranges.\n\nSecurity ensures only authorized roles can access their respective order data. This operation returns a summary list of orders optimized for display in order management UI.\n\nThis operation corresponds to the shopping_mall_orders table in the Prisma schema and returns paginated order summary information.","parameters":[],"requestBody":{"description":"Parameters to filter, search, sort, and paginate shopping mall orders","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated summary list of shopping mall orders","typeName":"IPageIShoppingMallOrder.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before orders referencing a customer can be retrieved."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before orders referencing a seller can be retrieved."}]},{"specification":"This operation retrieves a filtered and paginated list of shopping mall orders from the shopping_mall_orders table as defined in the Prisma schema. It enables advanced querying capabilities including filtering by customer, seller, order status, business status, payment method, and date ranges for created or updated timestamps. Result pagination and sorting options allow efficient client-side consumption. The endpoint is intended for authorized roles such as customers (to view their orders), sellers (to view orders of their products), and admins (full access).","path":"/shoppingMall/admin/orders","method":"patch","summary":"Search and retrieve a filtered, paginated list of shopping mall orders","description":"Retrieve a paginated and filtered list of orders for the shopping mall platform, allowing search by customer ID, seller ID, status, business status, payment method, and creation/update date ranges.\n\nSecurity ensures only authorized roles can access their respective order data. This operation returns a summary list of orders optimized for display in order management UI.\n\nThis operation corresponds to the shopping_mall_orders table in the Prisma schema and returns paginated order summary information.","parameters":[],"requestBody":{"description":"Parameters to filter, search, sort, and paginate shopping mall orders","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated summary list of shopping mall orders","typeName":"IPageIShoppingMallOrder.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before filtering orders based on customer ID."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before filtering orders based on seller ID."}]},{"specification":"This operation retrieves detailed information about a specific shopping mall order referenced by the orderId path parameter. The order details include customer information, seller details, order items with SKU and pricing info, payment status, shipping address, and tracking number.\n\nAuthorization restricts access to the order owner (customer), the seller of the products in the order, and admins with elevated permissions.\n\nMapping directly to the shopping_mall_orders table and its relations, this operation enables comprehensive order detail retrieval for management, tracking, and customer service purposes.","path":"/shoppingMall/customer/orders/{orderId}","method":"get","summary":"Retrieve detailed shopping mall order information by ID","description":"Retrieve detailed information for a shopping mall order identified by orderId. Contains order metadata, items, payments, shipping and tracking info.\n\nAccess is restricted to the order owner, associated seller, and admins.\n\nUses the shopping_mall_orders table and related tables such as shopping_mall_order_items and shopping_mall_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping mall order information","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before retrieving detailed order information by orderId."}]},{"specification":"This operation retrieves detailed information about a specific shopping mall order referenced by the orderId path parameter. The order details include customer information, seller details, order items with SKU and pricing info, payment status, shipping address, and tracking number.\n\nAuthorization restricts access to the order owner (customer), the seller of the products in the order, and admins with elevated permissions.\n\nMapping directly to the shopping_mall_orders table and its relations, this operation enables comprehensive order detail retrieval for management, tracking, and customer service purposes.","path":"/shoppingMall/seller/orders/{orderId}","method":"get","summary":"Retrieve detailed shopping mall order information by ID","description":"Retrieve detailed information for a shopping mall order identified by orderId. Contains order metadata, items, payments, shipping and tracking info.\n\nAccess is restricted to the order owner, associated seller, and admins.\n\nUses the shopping_mall_orders table and related tables such as shopping_mall_order_items and shopping_mall_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping mall order information","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be retrieved for detailed view by seller."}]},{"specification":"This operation retrieves detailed information about a specific shopping mall order referenced by the orderId path parameter. The order details include customer information, seller details, order items with SKU and pricing info, payment status, shipping address, and tracking number.\n\nAuthorization restricts access to the order owner (customer), the seller of the products in the order, and admins with elevated permissions.\n\nMapping directly to the shopping_mall_orders table and its relations, this operation enables comprehensive order detail retrieval for management, tracking, and customer service purposes.","path":"/shoppingMall/admin/orders/{orderId}","method":"get","summary":"Retrieve detailed shopping mall order information by ID","description":"Retrieve detailed information for a shopping mall order identified by orderId. Contains order metadata, items, payments, shipping and tracking info.\n\nAccess is restricted to the order owner, associated seller, and admins.\n\nUses the shopping_mall_orders table and related tables such as shopping_mall_order_items and shopping_mall_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping mall order information","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be retrieved by ID"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order items must be created before order details including items can be retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payments must be created and associated before retrieving order payment details"}]},{"specification":"This operation creates a new shopping order in the ShoppingMall platform, inserting a new record into the shopping_mall_orders table. It requires the full order details including customer ID, seller ID, unique order number, total price, status, business status, payment method, shipping address. Creation timestamp is set by the system. Only users with role \"customer\" can create orders.\nThis API matches the POST /orders method.\n","description":"Create a new order with all necessary details including customer and seller IDs, total price, payment method, shipping address, and unique order number. This creates a record in the shopping_mall_orders table representing an order in the e-commerce system.\n\nOnly authenticated customers are authorized. The system validates the uniqueness of the order number and the correctness of foreign keys. The response returns the detailed newly created order resource.\n\nThe system expects order lifecycle related status fields, and this endpoint is the first step for order processing after payment confirmation.\n\nErrors may result from invalid input or duplicate order numbers.","summary":"Create a new shopping mall order","parameters":[],"requestBody":{"description":"Order creation details including customer, seller, total price, status, payment method, and shipping address.","typeName":"IShoppingMallOrder.ICreate"},"responseBody":{"description":"Detailed order information after creation.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/orders","method":"post","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before creating an order for the customer"},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before creating an order for the seller"}]},{"specification":"This operation updates an existing shopping mall order by its order ID. Modifiable fields include total price, status, business status, payment method, shipping address, and tracking number, among others.\nOnly users with roles \"customer\", \"seller\", or \"admin\" who own or administer the order are authorized.\nThe order ID is a UUID path parameter.\nValidation includes status transitions and inventory checks.\nReturns updated order details upon success.\nThis corresponds to PUT /orders/{orderId}.","description":"Update an existing shopping mall order specified by the orderId path parameter. Only allowable fields will be changed with validation on status and payment consistency.\n\nAuthorization is limited to roles customer, seller, and admin with ownership or administrative rights.\n\nThe response returns the updated shopping mall order details or appropriate error messages on failure.\n\nRelated business rules ensure status transitions follow correct sequences and inventory is managed accordingly.\n\nThe underlying resource is shopping_mall_orders table.","summary":"Update shopping mall order by ID","parameters":[{"name":"orderId","description":"Unique identifier of the order to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order update details with fields to modify","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"Updated order details","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/orders/{orderId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before updating an order belonging to the customer"},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before updating an order belonging to the seller"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before updating the order"}]},{"specification":"This operation updates an existing shopping mall order by its order ID. Modifiable fields include total price, status, business status, payment method, shipping address, and tracking number, among others.\nOnly users with roles \"customer\", \"seller\", or \"admin\" who own or administer the order are authorized.\nThe order ID is a UUID path parameter.\nValidation includes status transitions and inventory checks.\nReturns updated order details upon success.\nThis corresponds to PUT /orders/{orderId}.","description":"Update an existing shopping mall order specified by the orderId path parameter. Only allowable fields will be changed with validation on status and payment consistency.\n\nAuthorization is limited to roles customer, seller, and admin with ownership or administrative rights.\n\nThe response returns the updated shopping mall order details or appropriate error messages on failure.\n\nRelated business rules ensure status transitions follow correct sequences and inventory is managed accordingly.\n\nThe underlying resource is shopping_mall_orders table.","summary":"Update shopping mall order by ID","parameters":[{"name":"orderId","description":"Unique identifier of the order to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order update details with fields to modify","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"Updated order details","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"seller","path":"/shoppingMall/seller/orders/{orderId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be updated."}]},{"specification":"This operation updates an existing shopping mall order by its order ID. Modifiable fields include total price, status, business status, payment method, shipping address, and tracking number, among others.\nOnly users with roles \"customer\", \"seller\", or \"admin\" who own or administer the order are authorized.\nThe order ID is a UUID path parameter.\nValidation includes status transitions and inventory checks.\nReturns updated order details upon success.\nThis corresponds to PUT /orders/{orderId}.","description":"Update an existing shopping mall order specified by the orderId path parameter. Only allowable fields will be changed with validation on status and payment consistency.\n\nAuthorization is limited to roles customer, seller, and admin with ownership or administrative rights.\n\nThe response returns the updated shopping mall order details or appropriate error messages on failure.\n\nRelated business rules ensure status transitions follow correct sequences and inventory is managed accordingly.\n\nThe underlying resource is shopping_mall_orders table.","summary":"Update shopping mall order by ID","parameters":[{"name":"orderId","description":"Unique identifier of the order to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order update details with fields to modify","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"Updated order details","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/orders/{orderId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be updated."}]},{"specification":"This operation permanently deletes a customer order from the shopping_mall_orders table in the e-commerce platform's database. An order is uniquely identified by its UUID orderId. Deleting an order removes all associated payment, order item, refund, cancellation, and audit log data due to cascading deletes as defined in the Prisma schema, ensuring no orphaned records remain. This operation bypasses soft deletion since deleted_at exists but is not used here for soft deletes, performing a hard delete instead. Only authorized roles such as 'admin' should perform this operation due to its irreversible nature.","description":"This endpoint deletes a specific order permanently from the database.\n\nOnly users with administrative privileges are authorized to perform this action.\n\nThis operation fully removes the order record identified by orderId, along with all associated related data such as payments, items, refunds, cancellations, and audit logs through cascading deletion.\n\nDue to the critical impact, this operation should be used cautiously and typically only in administrative or error correction scenarios.\n\nNo request body is required. Successful deletion returns no content.","summary":"Permanently delete an order by orderId from the shopping_mall_orders table","parameters":[{"name":"orderId","description":"Unique identifier of the target order to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/orders/{orderId}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be deleted."}]},{"specification":"This operation retrieves and updates the cart items of a specific order identified by the orderId. The request body supports patch operations for managing the collection of order items, enabling modifications like quantity changes or SKU substitutions. It interfaces with the shopping_mall_order_items table and related SKU and order data to maintain accurate order details. Authorization for this endpoint should be restricted to relevant seller or admin roles managing order fulfillment.","description":"This endpoint allows modification of the items within a specified order.\n\nAuthorized users (sellers managing their product orders or admins) can update quantities or change SKUs in the order items. This supports accurate order fulfillment and inventory management.\n\nThe request body must conform to the defined schema for order item patches, enabling batch updates with pagination, filtering, or sorting if implemented.\n\nResponse returns paginated or filtered order item data reflecting the current state after modifications.\n\nThe displayed order items provide detailed SKU and quantity information to support downstream processing and UI display.","summary":"Update and retrieve order items for a specified order by orderId","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patch information for updating order items","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated list of updated order items","typeName":"IPageIShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"seller","path":"/shoppingMall/seller/orders/{orderId}/items","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order items must be created before they can be updated or patched."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its items can be managed."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be referenced in order items."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"Product SKU must exist before it can be referenced in order items."}]},{"specification":"This operation retrieves and updates the cart items of a specific order identified by the orderId. The request body supports patch operations for managing the collection of order items, enabling modifications like quantity changes or SKU substitutions. It interfaces with the shopping_mall_order_items table and related SKU and order data to maintain accurate order details. Authorization for this endpoint should be restricted to relevant seller or admin roles managing order fulfillment.","description":"This endpoint allows modification of the items within a specified order.\n\nAuthorized users (sellers managing their product orders or admins) can update quantities or change SKUs in the order items. This supports accurate order fulfillment and inventory management.\n\nThe request body must conform to the defined schema for order item patches, enabling batch updates with pagination, filtering, or sorting if implemented.\n\nResponse returns paginated or filtered order item data reflecting the current state after modifications.\n\nThe displayed order items provide detailed SKU and quantity information to support downstream processing and UI display.","summary":"Update and retrieve order items for a specified order by orderId","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patch information for updating order items","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated list of updated order items","typeName":"IPageIShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/orders/{orderId}/items","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order with orderId must be created before its items can be updated or retrieved."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before it can be referenced in order items."}]},{"specification":"This operation retrieves detailed information about a specified order item identified by its unique orderItemId within the order specified by orderId. It uses the shopping_mall_order_items table in the Prisma schema, which contains details about the SKU, quantity, unit price, and total price for each item in an order. This endpoint supports secure access typically for authenticated customers, sellers, or admins responsible for the order.","description":"This GET /orders/{orderId}/items/{orderItemId} API endpoint provides detailed information about a single order item within a specific order. The operation returns SKU association, quantity ordered, unit price, and total price for that item. Users authorized include customers who placed the order, sellers fulfilling the order, and admins overseeing the platform.\n\nParameters:\n- orderId: UUID of the order containing the item\n- orderItemId: UUID of the order item to retrieve\n\nNo request body is needed as this is a retrieval operation.\n\nErrors handled include invalid or non-existent IDs, authorization failures, and not found responses.\n\nThis operation directly maps to the Prisma model shopping_mall_order_items.\n","summary":"Retrieve detailed information about a specific order item by IDs","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the order","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","in":"path","description":"Unique identifier of the order item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order item details","typeName":"IShoppingMallOrderItem"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/customer/orders/{orderId}/items/{orderItemId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its order items can be accessed"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved"}]},{"specification":"This operation retrieves detailed information about a specified order item identified by its unique orderItemId within the order specified by orderId. It uses the shopping_mall_order_items table in the Prisma schema, which contains details about the SKU, quantity, unit price, and total price for each item in an order. This endpoint supports secure access typically for authenticated customers, sellers, or admins responsible for the order.","description":"This GET /orders/{orderId}/items/{orderItemId} API endpoint provides detailed information about a single order item within a specific order. The operation returns SKU association, quantity ordered, unit price, and total price for that item. Users authorized include customers who placed the order, sellers fulfilling the order, and admins overseeing the platform.\n\nParameters:\n- orderId: UUID of the order containing the item\n- orderItemId: UUID of the order item to retrieve\n\nNo request body is needed as this is a retrieval operation.\n\nErrors handled include invalid or non-existent IDs, authorization failures, and not found responses.\n\nThis operation directly maps to the Prisma model shopping_mall_order_items.\n","summary":"Retrieve detailed information about a specific order item by IDs","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the order","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","in":"path","description":"Unique identifier of the order item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order item details","typeName":"IShoppingMallOrderItem"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/seller/orders/{orderId}/items/{orderItemId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before order items can exist."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved."}]},{"specification":"This operation retrieves detailed information about a specified order item identified by its unique orderItemId within the order specified by orderId. It uses the shopping_mall_order_items table in the Prisma schema, which contains details about the SKU, quantity, unit price, and total price for each item in an order. This endpoint supports secure access typically for authenticated customers, sellers, or admins responsible for the order.","description":"This GET /orders/{orderId}/items/{orderItemId} API endpoint provides detailed information about a single order item within a specific order. The operation returns SKU association, quantity ordered, unit price, and total price for that item. Users authorized include customers who placed the order, sellers fulfilling the order, and admins overseeing the platform.\n\nParameters:\n- orderId: UUID of the order containing the item\n- orderItemId: UUID of the order item to retrieve\n\nNo request body is needed as this is a retrieval operation.\n\nErrors handled include invalid or non-existent IDs, authorization failures, and not found responses.\n\nThis operation directly maps to the Prisma model shopping_mall_order_items.\n","summary":"Retrieve detailed information about a specific order item by IDs","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the order","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","in":"path","description":"Unique identifier of the order item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order item details","typeName":"IShoppingMallOrderItem"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/items/{orderItemId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before order items can exist."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved."}]},{"specification":"This operation creates a new order item for a specified order by orderId. It creates a record in the shopping_mall_order_items table with SKU, quantity, unit price, and total price. To invoke this, a POST request is sent to /orders/{orderId}/items with a request body conforming to the IShoppingMallOrderItem.ICreate schema, containing SKU id, quantity, unit price, and total price fields. Authorization is granted to customers who own the order, sellers of the order items, or administrators. Validations ensure SKU existence, price accuracy, and stock availability. The response includes detailed information of the created order item.","description":"This POST /orders/{orderId}/items endpoint allows creation of an order item within an existing order. Users authorized include the customer who owns the order, the seller responsible for the product, and admins.\n\nRequest body must include:\n- shopping_mall_sku_id: UUID of the product SKU\n- quantity: Number of units ordered\n- unit_price: Price per unit at order time\n- total_price: Total price for this SKU (quantity x unit_price)\n\nResponse contains full details of the created order item.\n\nThis operation requires careful validation of SKU availability, pricing integrity, and order ownership.\n\nThis API interacts directly with the shopping_mall_order_items schema in Prisma.\n","summary":"Add a new item to an existing order","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the order to add an item to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for creating a new order item","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"Details of the created order item","typeName":"IShoppingMallOrderItem"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/customer/orders/{orderId}/items","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be referenced by a SKU in order items."},{"endpoint":{"path":"/shoppingMall/admin/shoppingMall/categories","method":"post"},"description":"Product category must exist before creating products that order items depend on."},{"endpoint":{"path":"/shoppingMall/admin/sellers","method":"post"},"description":"Seller must exist before creating products that are referenced in order items."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"Product SKU must exist before it can be added to an order item."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before adding order items to it."}]},{"specification":"This operation creates a new order item for a specified order by orderId. It creates a record in the shopping_mall_order_items table with SKU, quantity, unit price, and total price. To invoke this, a POST request is sent to /orders/{orderId}/items with a request body conforming to the IShoppingMallOrderItem.ICreate schema, containing SKU id, quantity, unit price, and total price fields. Authorization is granted to customers who own the order, sellers of the order items, or administrators. Validations ensure SKU existence, price accuracy, and stock availability. The response includes detailed information of the created order item.","description":"This POST /orders/{orderId}/items endpoint allows creation of an order item within an existing order. Users authorized include the customer who owns the order, the seller responsible for the product, and admins.\n\nRequest body must include:\n- shopping_mall_sku_id: UUID of the product SKU\n- quantity: Number of units ordered\n- unit_price: Price per unit at order time\n- total_price: Total price for this SKU (quantity x unit_price)\n\nResponse contains full details of the created order item.\n\nThis operation requires careful validation of SKU availability, pricing integrity, and order ownership.\n\nThis API interacts directly with the shopping_mall_order_items schema in Prisma.\n","summary":"Add a new item to an existing order","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the order to add an item to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for creating a new order item","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"Details of the created order item","typeName":"IShoppingMallOrderItem"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/seller/orders/{orderId}/items","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before it can be added as an order item"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before items can be added to it"}]},{"specification":"This operation creates a new order item for a specified order by orderId. It creates a record in the shopping_mall_order_items table with SKU, quantity, unit price, and total price. To invoke this, a POST request is sent to /orders/{orderId}/items with a request body conforming to the IShoppingMallOrderItem.ICreate schema, containing SKU id, quantity, unit price, and total price fields. Authorization is granted to customers who own the order, sellers of the order items, or administrators. Validations ensure SKU existence, price accuracy, and stock availability. The response includes detailed information of the created order item.","description":"This POST /orders/{orderId}/items endpoint allows creation of an order item within an existing order. Users authorized include the customer who owns the order, the seller responsible for the product, and admins.\n\nRequest body must include:\n- shopping_mall_sku_id: UUID of the product SKU\n- quantity: Number of units ordered\n- unit_price: Price per unit at order time\n- total_price: Total price for this SKU (quantity x unit_price)\n\nResponse contains full details of the created order item.\n\nThis operation requires careful validation of SKU availability, pricing integrity, and order ownership.\n\nThis API interacts directly with the shopping_mall_order_items schema in Prisma.\n","summary":"Add a new item to an existing order","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the order to add an item to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for creating a new order item","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"Details of the created order item","typeName":"IShoppingMallOrderItem"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/admin/orders/{orderId}/items","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be referenced in order items."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before items can be added to it."}]},{"specification":"This operation updates a specific order item within the shopping_mall_order_items table in the Prisma database. It allows modification of the quantity, unit price, and total price of a specific item linked to an order. This API is essential for maintaining accurate order details, supporting business workflows such as order editing before shipment, and ensuring inventory and payment calculations remain consistent. The operation requires proper authorization to ensure only legitimate users or administrators can update order items, preserving data integrity and preventing unauthorized modifications.","description":"This operation updates details of a particular order item identified by its ID and associated order ID.\n\nUsers authorized to update order items (such as the customer owning the order, the related seller, or administrators) can modify the quantity ordered, the unit price, or the total price. It is crucial to validate that the updated quantity does not exceed available SKU inventory to avoid overselling.\n\nThe API updates the shopping_mall_order_items record in the database, ensuring the order's financial and inventory calculations reflect the new item details. Incorrect updates can lead to accounting errors or shipment mismatches, so proper validation and authorization are essential.\n\nRelated operations include retrieving order details to view current items and managing inventory to adjust stock following order modifications.\n\nThis operation permanently updates the order item record; no soft deletion or recovery applies here. Proper concurrency control should be applied to prevent race conditions in updates.","summary":"Update a specific order item within an order","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"Unique identifier of the target order item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for order item modification","typeName":"IShoppingMallOrderItem.IUpdate"},"responseBody":{"description":"Updated order item information","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"customer","name":"updateOrderItem","path":"/shoppingMall/customer/orders/{orderId}/items/{orderItemId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist before it can be referenced in order item updates"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before the order item can be updated"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be updated"}]},{"specification":"This operation deletes a specific order item from an order in the shopping_mall_order_items table. It supports business workflows where customers, sellers, or administrators need to remove items from an order before fulfillment. The API ensures proper authorization to prevent unauthorized deletions. It permanently removes the order item record from the database, updating order totals and inventory as needed to maintain data accuracy. This operation is critical for order management and correction of order details prior to shipment.","description":"This operation permanently removes a specific order item from the given order.\n\nAuthorized users, such as the customer who placed the order, the seller, or administrators, can delete an order item to modify order contents before processing or shipment. The removal updates the order's totals and may trigger inventory adjustments to restock the SKU quantities.\n\nDeleting an order item is irreversible and fully removes the record from the database. There is no soft delete functionality for order items as they are tightly linked to transactional order data.\n\nRelated operations include listing order items, updating order items, and managing inventory stock accordingly.\n\nEnsure that deletion transactions are handled carefully to maintain data consistency and prevent orphaned references.","summary":"Delete a specific order item from an order","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"Unique identifier of the target order item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"eraseOrderItem","path":"/shoppingMall/customer/orders/{orderId}/items/{orderItemId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be deleted in the specified order."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before order items can be managed"}]},{"specification":"This operation updates payment details for a specific payment of an order in the shopping_mall_payments table of the ShoppingMall e-commerce platform. It requires the order ID and payment ID to locate the exact payment record and allows updating fields such as payment amount, payment method, payment status, transaction ID, and confirmation timestamp. It ensures users can keep their payment records accurate and up-to-date.","path":"/shoppingMall/customer/orders/{orderId}/payments/{paymentId}","method":"patch","summary":"Update an existing payment record for a specific order","description":"Update payment details for the specified payment ID belonging to a specific order. This includes fields such as payment amount, payment method, payment status, transaction ID, and confirmed timestamp.\n\nSecurity considerations: Only authenticated users with the 'customer' role are authorized to perform this update to protect payment data integrity.\n\nThis operation is related to the shopping_mall_payments table which stores transactional payment data linked to orders.\n\nValidation requires properly formatted UUIDs for orderId and paymentId path parameters, and a request body conforming to the IShoppingMallPayment.IUpdate schema.\n\nOn success, the updated payment information is returned. Errors may occur if IDs are invalid, payment record is not found, or user lacks requisite permissions.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the specific payment record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the payment record","typeName":"IShoppingMallPayment.IUpdate"},"responseBody":{"description":"The updated payment information","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"customer","name":"patchByOrderidAndPaymentid","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before payments can be updated"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payment must be created before it can be updated"}]},{"specification":"This operation retrieves detailed information for a specific payment record associated with an order from the shopping_mall_payments table. It requires the order ID and payment ID as path parameters and returns the full payment information including amount, method, status, transaction data, and timestamps.\n\nSecurity considerations: Access is restricted to authenticated users with the 'customer' role to protect sensitive payment data.\n\nValidation requires valid UUID format for both orderId and paymentId path parameters. Successful queries return detailed payment data; failures occur if records are not found or user is unauthorized.\n\nThis operation complements payment listing, creation, and update endpoints providing complete payment lifecycle management.","path":"/shoppingMall/customer/orders/{orderId}/payments/{paymentId}","method":"get","summary":"Retrieve details of a specific payment for an order","description":"Retrieve detailed information for the payment specified by payment ID and order ID.\n\nAccess control limits this to authenticated users with the 'customer' role.\n\nReturns full payment details including payment amount, method, status, transaction ID, and confirmation timestamp.\n\nErrors occur if identifiers are incorrect or access is unauthorized.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the specific payment record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed payment information for the specified payment record","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"customer","name":"atPayment","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before payments for this order can be accessed."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payment must be created before it can be retrieved by payment ID."}]},{"specification":"This operation creates a new payment record associated with a specific shopping mall order in the Sales schema. It requires the order ID as a path parameter and expects a payload containing payment details such as amount, method, status, transaction ID, and confirmation timestamp. The payment record is stored in the shopping_mall_payments table, which maintains associations with the shopping_mall_orders table. This operation validates payment data, ensures the payment is linked to an existing order, and updates related order financial status accordingly.","path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post","summary":"Create a payment record for a specific order","description":"Creates a new payment transaction record for the specified order. The operation validates payment details including payment method, amount, and status. The payment is linked to the order for transaction tracking.\n\nThis endpoint can only be accessed by authenticated customers and sellers who have appropriate permissions for the order.\n\nRelies on the shopping_mall_payments table for storing payment info and shopping_mall_orders for order association. Proper error handling is essential to indicate payment failures or data issues.\n\nReturned data includes the created payment record with its identifiers and timestamps for client confirmation.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment creation data","typeName":"IShoppingMallPayment.ICreate"},"responseBody":{"description":"Created payment information","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"customer","name":"createPayment","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before linked payment records can be created for it."}]},{"specification":"This operation creates a new payment record associated with a specific shopping mall order in the Sales schema. It requires the order ID as a path parameter and expects a payload containing payment details such as amount, method, status, transaction ID, and confirmation timestamp. The payment record is stored in the shopping_mall_payments table, which maintains associations with the shopping_mall_orders table. This operation validates payment data, ensures the payment is linked to an existing order, and updates related order financial status accordingly.","path":"/shoppingMall/seller/orders/{orderId}/payments","method":"post","summary":"Create a payment record for a specific order","description":"Creates a new payment transaction record for the specified order. The operation validates payment details including payment method, amount, and status. The payment is linked to the order for transaction tracking.\n\nThis endpoint can only be accessed by authenticated customers and sellers who have appropriate permissions for the order.\n\nRelies on the shopping_mall_payments table for storing payment info and shopping_mall_orders for order association. Proper error handling is essential to indicate payment failures or data issues.\n\nReturned data includes the created payment record with its identifiers and timestamps for client confirmation.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment creation data","typeName":"IShoppingMallPayment.ICreate"},"responseBody":{"description":"Created payment information","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"seller","name":"createPayment","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a payment can be recorded for it."}]},{"specification":"This operation updates an existing payment record for a specified order in the shopping mall platform. It refreshes payment details such as payment amount, method, status, transaction ID, and confirmation timestamp stored in the shopping_mall_payments table. The update requires both the order ID and payment ID as path parameters to identify the exact payment record.\n\nThis API is used to modify payment information like correcting payment status or updating transaction references after initial creation.\n\nAccess is limited to authenticated customers and sellers with valid permissions for the order and payment. Proper validation of status and amounts is enforced.\n\nThe response returns the updated payment record to ensure synchronization.","path":"/shoppingMall/customer/orders/{orderId}/payments/{paymentId}","method":"put","summary":"Update payment record of a specific order","description":"Updates an existing payment transaction record for the specified order and payment IDs. Validates and applies changes to payment amount, method, status, transaction ID, and confirmation timestamp.\n\nRestricted to authorized customers and sellers.\n\nEnsures that payment state is consistent and properly linked to the order.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","in":"path","description":"Unique identifier of the payment record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment update data","typeName":"IShoppingMallPayment.IUpdate"},"responseBody":{"description":"Updated payment information","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"customer","name":"putByOrderidAndPaymentid","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before updating associated payment records to ensure valid order reference."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payment must be created before it can be updated to maintain payment transaction integrity."}]},{"specification":"This operation updates an existing payment record for a specified order in the shopping mall platform. It refreshes payment details such as payment amount, method, status, transaction ID, and confirmation timestamp stored in the shopping_mall_payments table. The update requires both the order ID and payment ID as path parameters to identify the exact payment record.\n\nThis API is used to modify payment information like correcting payment status or updating transaction references after initial creation.\n\nAccess is limited to authenticated customers and sellers with valid permissions for the order and payment. Proper validation of status and amounts is enforced.\n\nThe response returns the updated payment record to ensure synchronization.","path":"/shoppingMall/seller/orders/{orderId}/payments/{paymentId}","method":"put","summary":"Update payment record of a specific order","description":"Updates an existing payment transaction record for the specified order and payment IDs. Validates and applies changes to payment amount, method, status, transaction ID, and confirmation timestamp.\n\nRestricted to authorized customers and sellers.\n\nEnsures that payment state is consistent and properly linked to the order.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","in":"path","description":"Unique identifier of the payment record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment update data","typeName":"IShoppingMallPayment.IUpdate"},"responseBody":{"description":"Updated payment information","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"seller","name":"updatePayment","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before updating its payment record"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payment must be created before it can be updated"}]},{"specification":"This operation permanently deletes a payment record associated with a specific order in the shopping mall platform. It targets the shopping_mall_payments table from the Prisma schema. Deleting a payment removes all transactional payment details including amount, method, status, and confirmation information, and cannot be undone. Access to this endpoint is restricted to authorized users due to the sensitive nature of payment information.","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}","method":"delete","summary":"Delete a specific payment for an order","description":"This operation allows deletion of a specific payment entry linked to an order. The payment record identified by paymentId associated with the order identified by orderId will be permanently removed from the database.\n\nSecurity considerations dictate that only authorized users with permissions can perform this deletion due to the financial nature of payment data. No request body is necessary, and no response body is returned.\n\nThis operation interacts exclusively with the shopping_mall_payments table, ensuring the payment and its related transaction details are fully erased. This endpoint is part of overall order payment management workflows.\n\nPossible errors include 404 if the payment or order does not exist, or 403 if the user is unauthorized.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the target payment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erasePayment","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before deleting its payment record"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payment must be created before it can be deleted"}]},{"specification":"This operation updates the status of an existing order in the shopping mall platform, managing the shopping_mall_order_statuses table. It supports modifying the order status history to reflect current order state transitions like Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled. The status update is essential for order lifecycle and workflow tracking.\n\nOnly authorized users such as admins or sellers can perform this update to ensure order progression integrity.\n\nThe request body requires a valid order status and status_changed_at timestamp indicating when the status changed. The response returns the updated order status record.","path":"/shoppingMall/admin/orders/{orderId}/statuses","method":"patch","summary":"Update status of a specific order","description":"This operation updates an order's status by adding a new status entry for the order identified by orderId. The new status and timestamp of change are provided in the request body.\n\nProper validation ensures the status value matches allowed order lifecycle statuses defined in the business rules: Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled.\n\nSecurity is enforced so that only users with admin or seller roles can update the order status. The operation updates the shopping_mall_order_statuses table accordingly and returns the newly created status record.\n\nErrors include 404 for non-existent orders or 403 for unauthorized users.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order status update information","typeName":"IShoppingMallOrderStatus.IUpdate"},"responseBody":{"description":"Updated order status information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"admin","name":"updateStatus","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status can be updated."}]},{"specification":"This operation updates the status of an existing order in the shopping mall platform, managing the shopping_mall_order_statuses table. It supports modifying the order status history to reflect current order state transitions like Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled. The status update is essential for order lifecycle and workflow tracking.\n\nOnly authorized users such as admins or sellers can perform this update to ensure order progression integrity.\n\nThe request body requires a valid order status and status_changed_at timestamp indicating when the status changed. The response returns the updated order status record.","path":"/shoppingMall/seller/orders/{orderId}/statuses","method":"patch","summary":"Update status of a specific order","description":"This operation updates an order's status by adding a new status entry for the order identified by orderId. The new status and timestamp of change are provided in the request body.\n\nProper validation ensures the status value matches allowed order lifecycle statuses defined in the business rules: Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled.\n\nSecurity is enforced so that only users with admin or seller roles can update the order status. The operation updates the shopping_mall_order_statuses table accordingly and returns the newly created status record.\n\nErrors include 404 for non-existent orders or 403 for unauthorized users.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order status update information","typeName":"IShoppingMallOrderStatus.IUpdate"},"responseBody":{"description":"Updated order status information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"seller","name":"updateStatus","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Customer order must exist before its status can be updated."}]},{"specification":"This operation retrieves a specific order status record by its identifier associated with a particular order in the shopping_mall_orders table of the ShoppingMall platform. The operation is designed to fetch detailed historical or current status information for a given order status entry. It operates on the shopping_mall_order_statuses table which tracks individual status changes of orders through their lifecycle, including statuses like Pending Payment, Paid, Processing, Shipped, Delivered, and Cancelled. Security considerations mandate that only authenticated users or associated roles (such as customers who own the order, sellers fulfilling the order, or admins monitoring orders) can access this information. The request requires orderId and statusId path parameters to precisely identify the target order status record. The response includes the status record details reflecting status name and timestamp. This detail retrieval is critical for order lifecycle tracking, monitoring, and user notification purposes.","path":"/shoppingMall/customer/orders/{orderId}/statuses/{statusId}","method":"get","summary":"Retrieve specific order status record by order and status ID","description":"Retrieve detailed information about a specific order status entry by order ID and status ID. This endpoint allows clients to get the precise status change record within the lifecycle of a given order.\n\nSecurity measures enforce that only authorized parties (authorized customers, sellers, or admins) can access the order status to protect privacy and order integrity.\n\nThis operation interfaces directly with the `shopping_mall_order_statuses` table, providing real-time status details such as status name and the timestamp when the status was recorded. It is essential for presenting order history and status timelines in customer and admin dashboards.\n\nThe expected behavior includes returning a single order status entity if it exists, or an appropriate error if the status or order does not exist.\n\nErrors for unauthorized access or non-existent entities must be handled gracefully with suitable HTTP status codes.\n\nPath parameters orderId and statusId uniquely identify the order status record in question.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","in":"path","description":"Unique identifier of the target order status record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specific order status record","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status records can be retrieved."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/statuses","method":"post"},"description":"Order status records must exist before retrieving a specific status by statusId."}]},{"specification":"This operation retrieves a specific order status record by its identifier associated with a particular order in the shopping_mall_orders table of the ShoppingMall platform. The operation is designed to fetch detailed historical or current status information for a given order status entry. It operates on the shopping_mall_order_statuses table which tracks individual status changes of orders through their lifecycle, including statuses like Pending Payment, Paid, Processing, Shipped, Delivered, and Cancelled. Security considerations mandate that only authenticated users or associated roles (such as customers who own the order, sellers fulfilling the order, or admins monitoring orders) can access this information. The request requires orderId and statusId path parameters to precisely identify the target order status record. The response includes the status record details reflecting status name and timestamp. This detail retrieval is critical for order lifecycle tracking, monitoring, and user notification purposes.","path":"/shoppingMall/seller/orders/{orderId}/statuses/{statusId}","method":"get","summary":"Retrieve specific order status record by order and status ID","description":"Retrieve detailed information about a specific order status entry by order ID and status ID. This endpoint allows clients to get the precise status change record within the lifecycle of a given order.\n\nSecurity measures enforce that only authorized parties (authorized customers, sellers, or admins) can access the order status to protect privacy and order integrity.\n\nThis operation interfaces directly with the `shopping_mall_order_statuses` table, providing real-time status details such as status name and the timestamp when the status was recorded. It is essential for presenting order history and status timelines in customer and admin dashboards.\n\nThe expected behavior includes returning a single order status entity if it exists, or an appropriate error if the status or order does not exist.\n\nErrors for unauthorized access or non-existent entities must be handled gracefully with suitable HTTP status codes.\n\nPath parameters orderId and statusId uniquely identify the order status record in question.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","in":"path","description":"Unique identifier of the target order status record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specific order status record","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status records can be retrieved."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/statuses","method":"post"},"description":"Order status records must exist before retrieving a specific status by statusId."}]},{"specification":"This operation retrieves a specific order status record by its identifier associated with a particular order in the shopping_mall_orders table of the ShoppingMall platform. The operation is designed to fetch detailed historical or current status information for a given order status entry. It operates on the shopping_mall_order_statuses table which tracks individual status changes of orders through their lifecycle, including statuses like Pending Payment, Paid, Processing, Shipped, Delivered, and Cancelled. Security considerations mandate that only authenticated users or associated roles (such as customers who own the order, sellers fulfilling the order, or admins monitoring orders) can access this information. The request requires orderId and statusId path parameters to precisely identify the target order status record. The response includes the status record details reflecting status name and timestamp. This detail retrieval is critical for order lifecycle tracking, monitoring, and user notification purposes.","path":"/shoppingMall/admin/orders/{orderId}/statuses/{statusId}","method":"get","summary":"Retrieve specific order status record by order and status ID","description":"Retrieve detailed information about a specific order status entry by order ID and status ID. This endpoint allows clients to get the precise status change record within the lifecycle of a given order.\n\nSecurity measures enforce that only authorized parties (authorized customers, sellers, or admins) can access the order status to protect privacy and order integrity.\n\nThis operation interfaces directly with the `shopping_mall_order_statuses` table, providing real-time status details such as status name and the timestamp when the status was recorded. It is essential for presenting order history and status timelines in customer and admin dashboards.\n\nThe expected behavior includes returning a single order status entity if it exists, or an appropriate error if the status or order does not exist.\n\nErrors for unauthorized access or non-existent entities must be handled gracefully with suitable HTTP status codes.\n\nPath parameters orderId and statusId uniquely identify the order status record in question.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","in":"path","description":"Unique identifier of the target order status record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specific order status record","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/statuses","method":"post"},"description":"Order must exist before retrieving its statuses, ensuring valid order lifecycle state access"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},"description":"Order items must exist before retrieving order status records to confirm valid order content"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before status records can be accessed or manipulated"}]},{"specification":"This operation creates a new order status record for a specified order in the shopping_mall_orders table of the ShoppingMall platform. It records a new status change event within the order's lifecycle, supporting business workflows such as marking the order as Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled. The operation interacts with the shopping_mall_order_statuses table that stores all historical status changes for orders, ensuring traceability and auditability. The client must provide the orderId path parameter and submit a request body of type IShoppingMallOrderStatus.ICreate with the status name and timestamp. This endpoint is essential for updating order processing stages, enabling sellers, system processes, or administrators to track status transitions. The operation requires authorization roles such as customer, seller, or admin to ensure only permitted actors can record status changes.","path":"/shoppingMall/customer/orders/{orderId}/statuses","method":"post","summary":"Create a new order status record for specified order","description":"Create a new order status record for an existing order to record a status transition in the order lifecycle.\n\nThis operation adds a new entry into the `shopping_mall_order_statuses` table associating the given status and timestamp to the specified order.\n\nThe request body should include the status value (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the status was set.\n\nAuthorization ensures only permitted users (such as the owning customer, related seller, or system administrators) can perform this update to maintain data integrity and security.\n\nThe response returns the created order status entity, confirming successful addition into the system.\n\nValidation errors such as invalid status values or missing fields must be properly reported.\n\nBusiness logic must enforce correct status transitions and timestamp consistency if implemented in service layers.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order status creation information","typeName":"IShoppingMallOrderStatus.ICreate"},"responseBody":{"description":"Newly created order status record information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"customer","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before status records can be created for it"}]},{"specification":"This operation creates a new order status record for a specified order in the shopping_mall_orders table of the ShoppingMall platform. It records a new status change event within the order's lifecycle, supporting business workflows such as marking the order as Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled. The operation interacts with the shopping_mall_order_statuses table that stores all historical status changes for orders, ensuring traceability and auditability. The client must provide the orderId path parameter and submit a request body of type IShoppingMallOrderStatus.ICreate with the status name and timestamp. This endpoint is essential for updating order processing stages, enabling sellers, system processes, or administrators to track status transitions. The operation requires authorization roles such as customer, seller, or admin to ensure only permitted actors can record status changes.","path":"/shoppingMall/seller/orders/{orderId}/statuses","method":"post","summary":"Create a new order status record for specified order","description":"Create a new order status record for an existing order to record a status transition in the order lifecycle.\n\nThis operation adds a new entry into the `shopping_mall_order_statuses` table associating the given status and timestamp to the specified order.\n\nThe request body should include the status value (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the status was set.\n\nAuthorization ensures only permitted users (such as the owning customer, related seller, or system administrators) can perform this update to maintain data integrity and security.\n\nThe response returns the created order status entity, confirming successful addition into the system.\n\nValidation errors such as invalid status values or missing fields must be properly reported.\n\nBusiness logic must enforce correct status transitions and timestamp consistency if implemented in service layers.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order status creation information","typeName":"IShoppingMallOrderStatus.ICreate"},"responseBody":{"description":"Newly created order status record information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before order status can be recorded for it."}]},{"specification":"This operation creates a new order status record for a specified order in the shopping_mall_orders table of the ShoppingMall platform. It records a new status change event within the order's lifecycle, supporting business workflows such as marking the order as Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled. The operation interacts with the shopping_mall_order_statuses table that stores all historical status changes for orders, ensuring traceability and auditability. The client must provide the orderId path parameter and submit a request body of type IShoppingMallOrderStatus.ICreate with the status name and timestamp. This endpoint is essential for updating order processing stages, enabling sellers, system processes, or administrators to track status transitions. The operation requires authorization roles such as customer, seller, or admin to ensure only permitted actors can record status changes.","path":"/shoppingMall/admin/orders/{orderId}/statuses","method":"post","summary":"Create a new order status record for specified order","description":"Create a new order status record for an existing order to record a status transition in the order lifecycle.\n\nThis operation adds a new entry into the `shopping_mall_order_statuses` table associating the given status and timestamp to the specified order.\n\nThe request body should include the status value (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the status was set.\n\nAuthorization ensures only permitted users (such as the owning customer, related seller, or system administrators) can perform this update to maintain data integrity and security.\n\nThe response returns the created order status entity, confirming successful addition into the system.\n\nValidation errors such as invalid status values or missing fields must be properly reported.\n\nBusiness logic must enforce correct status transitions and timestamp consistency if implemented in service layers.","parameters":[{"name":"orderId","in":"path","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order status creation information","typeName":"IShoppingMallOrderStatus.ICreate"},"responseBody":{"description":"Newly created order status record information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before order status can be recorded for it."}]},{"specification":"This operation updates a specific order status record within the shopping_mall_order_statuses table of the ShoppingMall platform. It allows modification of the order status details such as status name and status change timestamp. The operation requires the order ID and specific status record ID to uniquely identify the resource. It supports validation of status values and maintains integrity with the associated order entity. This endpoint is intended for administrative or seller use to manage order progress tracking in compliance with the business rules governing order lifecycle states.","path":"/shoppingMall/admin/orders/{orderId}/statuses/{statusId}","method":"put","summary":"Update a specific order status record for an order (shopping_mall_order_statuses)","description":"Update an existing order status entry identified by orderId and statusId. This operation is critical to track the lifecycle stages of an order such as Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled.\n\nUsers must be authorized as 'seller' or 'admin' roles since they have permissions to modify order progress.\n\nThe endpoint ensures that the status changes reflect the real-time condition of order processing and shipping. It maintains consistency with the underlying shopping_mall_order_statuses table which records historical changes of each order's status.\n\nThe request body must include the new status and the timestamp when this status change occurred. Validation must ensure that status values match the allowed business status strings.\n\nResponse returns the updated order status entity with all stored properties including timestamps and association references.\n\nErrors will be raised if the orderId or statusId do not exist, or if the updated status violates transition rules defined elsewhere in the system.\n\nThis endpoint is complementary to order creation, deletion, and querying APIs for a comprehensive order management workflow.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","description":"Unique identifier of the order status record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the order status","typeName":"IShoppingMallOrderStatus.IUpdate"},"responseBody":{"description":"The updated order status information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/statuses","method":"post"},"description":"Order must have an existing status record created before it can be updated."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before any status record can be associated with it."}]},{"specification":"This operation updates a specific order status record within the shopping_mall_order_statuses table of the ShoppingMall platform. It allows modification of the order status details such as status name and status change timestamp. The operation requires the order ID and specific status record ID to uniquely identify the resource. It supports validation of status values and maintains integrity with the associated order entity. This endpoint is intended for administrative or seller use to manage order progress tracking in compliance with the business rules governing order lifecycle states.","path":"/shoppingMall/seller/orders/{orderId}/statuses/{statusId}","method":"put","summary":"Update a specific order status record for an order (shopping_mall_order_statuses)","description":"Update an existing order status entry identified by orderId and statusId. This operation is critical to track the lifecycle stages of an order such as Pending Payment, Paid, Processing, Shipped, Delivered, or Cancelled.\n\nUsers must be authorized as 'seller' or 'admin' roles since they have permissions to modify order progress.\n\nThe endpoint ensures that the status changes reflect the real-time condition of order processing and shipping. It maintains consistency with the underlying shopping_mall_order_statuses table which records historical changes of each order's status.\n\nThe request body must include the new status and the timestamp when this status change occurred. Validation must ensure that status values match the allowed business status strings.\n\nResponse returns the updated order status entity with all stored properties including timestamps and association references.\n\nErrors will be raised if the orderId or statusId do not exist, or if the updated status violates transition rules defined elsewhere in the system.\n\nThis endpoint is complementary to order creation, deletion, and querying APIs for a comprehensive order management workflow.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","description":"Unique identifier of the order status record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the order status","typeName":"IShoppingMallOrderStatus.IUpdate"},"responseBody":{"description":"The updated order status information","typeName":"IShoppingMallOrderStatus"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/statuses","method":"post"},"description":"Order must have an existing status record created before it can be updated."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before any status record can be associated with it."}]},{"specification":"This operation deletes a specific order status record from the shopping_mall_order_statuses table in the ShoppingMall platform database. It permanently removes the record identified by the order ID and status record ID. The operation is designed for administrative or seller roles managing order lifecycle tracking. Proper authorization is required to perform deletion since this affects the audit trail of order status changes.\n\nThis delete operation performs a hard delete, removing all associated data for the specified order status. No restoration is possible after this operation.\n\nThe endpoint does not accept a request body and returns no content upon successful deletion.\n\nUse caution when deleting status records to avoid breaking historical order tracking data.\n\nThis operation complements APIs for order status creation and updates for full lifecycle management.","path":"/shoppingMall/admin/orders/{orderId}/statuses/{statusId}","method":"delete","summary":"Delete a specific order status record for an order (shopping_mall_order_statuses)","description":"Delete an existing order status entry identified by orderId and statusId. This operation permanently removes the record from the database.\n\nAccess to this operation requires 'admin' or 'seller' roles due to the critical nature of order status data.\n\nThe operation enforces hard deletion and does not produce a response body.\n\nErrors will be raised if the specified identifiers are invalid or the record does not exist.\n\nDeletion impacts the audit trail of order progress and should be used cautiously with full understanding of consequences.\n\nThis endpoint completes the CRUD operations for order statuses in the order management module.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","description":"Unique identifier of the order status record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/statuses","method":"post"},"description":"Order status record must be created before it can be deleted to ensure it exists."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order must exist before its status records can be managed."}]},{"specification":"This operation deletes a specific order status record from the shopping_mall_order_statuses table in the ShoppingMall platform database. It permanently removes the record identified by the order ID and status record ID. The operation is designed for administrative or seller roles managing order lifecycle tracking. Proper authorization is required to perform deletion since this affects the audit trail of order status changes.\n\nThis delete operation performs a hard delete, removing all associated data for the specified order status. No restoration is possible after this operation.\n\nThe endpoint does not accept a request body and returns no content upon successful deletion.\n\nUse caution when deleting status records to avoid breaking historical order tracking data.\n\nThis operation complements APIs for order status creation and updates for full lifecycle management.","path":"/shoppingMall/seller/orders/{orderId}/statuses/{statusId}","method":"delete","summary":"Delete a specific order status record for an order (shopping_mall_order_statuses)","description":"Delete an existing order status entry identified by orderId and statusId. This operation permanently removes the record from the database.\n\nAccess to this operation requires 'admin' or 'seller' roles due to the critical nature of order status data.\n\nThe operation enforces hard deletion and does not produce a response body.\n\nErrors will be raised if the specified identifiers are invalid or the record does not exist.\n\nDeletion impacts the audit trail of order progress and should be used cautiously with full understanding of consequences.\n\nThis endpoint completes the CRUD operations for order statuses in the order management module.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"statusId","description":"Unique identifier of the order status record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/statuses","method":"post"},"description":"The order status record identified by statusId must exist within the order identified by orderId before it can be deleted. This ensures valid deletion without orphan records."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order identified by orderId must exist before deleting its order status records to maintain data integrity and valid order lifecycle tracking."}]},{"specification":"This operation updates information of refund requests associated with a specific order for shopping mall users. It operates on shopping_mall_refund_requests, allowing authorized roles such as admin and customers to update or modify the refund request status and related details.\n\nThe endpoint accepts orderId as a path parameter and uses a PATCH method with request body conforming to the IShoppingMallRefundRequest.IUpdate DTO schema. It supports partial updates such as changing refund status, processing timestamps, and notes.\n\nValidation is required to ensure ownership and authorization, confirming that the requestor is either the customer who submitted the refund or an admin. This operation enforces business rules for refund processing workflows and status transitions.\n\nThis update complements refund request creation and retrieval API operations, forming part of the refund handling lifecycle to provide transparency and control over refund workflows.","description":"Update an existing refund request associated with a given order. This operation targets the shopping_mall_refund_requests table, which captures refund requests initiated by customers for order refunds.\n\nThe update request allows authorized users, such as the refund request owner or an admin, to modify refund details like status and processing timestamps. Validation includes verifying permission to update the refund request and ensuring data integrity.\n\nThis operation enables refund request management as part of the order lifecycle, supporting workflows like approval, rejection, or processing progress updates.\n\nProper error handling is expected when invalid updates or unauthorized attempts are made.\n\nIt complements refund request retrieval to ensure full management of refund records associated with orders.","summary":"Update a refund request for the specified order","parameters":[{"name":"orderId","description":"Target order's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Refund request update payload","typeName":"IShoppingMallRefundRequest.IUpdate"},"responseBody":{"description":"Updated refund request information","typeName":"IShoppingMallRefundRequest"},"authorizationRoles":["admin","customer"],"name":"updateRefundRequest","path":"/shoppingMall/admin/orders/{orderId}/refundRequests","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before a refund request for the order can be updated"},{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before a refund request linked to the customer can be updated"}]},{"specification":"This operation updates information of refund requests associated with a specific order for shopping mall users. It operates on shopping_mall_refund_requests, allowing authorized roles such as admin and customers to update or modify the refund request status and related details.\n\nThe endpoint accepts orderId as a path parameter and uses a PATCH method with request body conforming to the IShoppingMallRefundRequest.IUpdate DTO schema. It supports partial updates such as changing refund status, processing timestamps, and notes.\n\nValidation is required to ensure ownership and authorization, confirming that the requestor is either the customer who submitted the refund or an admin. This operation enforces business rules for refund processing workflows and status transitions.\n\nThis update complements refund request creation and retrieval API operations, forming part of the refund handling lifecycle to provide transparency and control over refund workflows.","description":"Update an existing refund request associated with a given order. This operation targets the shopping_mall_refund_requests table, which captures refund requests initiated by customers for order refunds.\n\nThe update request allows authorized users, such as the refund request owner or an admin, to modify refund details like status and processing timestamps. Validation includes verifying permission to update the refund request and ensuring data integrity.\n\nThis operation enables refund request management as part of the order lifecycle, supporting workflows like approval, rejection, or processing progress updates.\n\nProper error handling is expected when invalid updates or unauthorized attempts are made.\n\nIt complements refund request retrieval to ensure full management of refund records associated with orders.","summary":"Update a refund request for the specified order","parameters":[{"name":"orderId","description":"Target order's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Refund request update payload","typeName":"IShoppingMallRefundRequest.IUpdate"},"responseBody":{"description":"Updated refund request information","typeName":"IShoppingMallRefundRequest"},"authorizationRoles":["admin","customer"],"name":"patchByOrderid","path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before a refund request for the order can be updated"},{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before a refund request linked to the customer can be updated"}]},{"specification":"This operation allows retrieval of refund request details related to a specific order in the shopping mall platform. It accesses the shopping_mall_refund_requests table, linking refund requests to orders and customers as per the schema. The endpoint takes order ID and refund request ID as path parameters and returns detailed refund request information including reason, amount, status, and timestamps. It supports viewing refund request status by authorized users, typically assigned roles with access to order financials and refund management.","description":"Retrieve detailed information of a specific refund request associated with an order. This operation targets the shopping_mall_refund_requests table, which captures refund requests initiated by customers for their orders.\n\nThe refund request includes the reason, requested refund amount, current status (e.g., pending, approved, rejected), and timestamps for request and processing. The operation provides comprehensive data for administrative review and customer service.\n\nSecurity considerations include restricting access to users with appropriate roles authorized to view refund details, such as admins or the customer who submitted the request. Sensitive financial data such as refund amount and payment method details are included.\n\nValidation ensures that both orderId and refundRequestId are valid UUIDs corresponding to existing records, rejecting invalid or unauthorized access requests. Related order and customer information can be queried separately as needed.\n\nThis API operation complements refund request creation and processing endpoints, enabling a full lifecycle view of refund management within the shopping mall platform.","summary":"Retrieve detailed refund request information by order ID and refund request ID","parameters":[{"name":"orderId","description":"Target order's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"refundRequestId","description":"Specific refund request's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Refund request details","typeName":"IShoppingMallRefundRequest"},"authorizationRoles":["admin","customer"],"name":"atRefundRequest","path":"/shoppingMall/admin/orders/{orderId}/refundRequests/{refundRequestId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before refund requests can be associated or retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"post"},"description":"Refund request must exist before detailed information can be retrieved"}]},{"specification":"This operation allows retrieval of refund request details related to a specific order in the shopping mall platform. It accesses the shopping_mall_refund_requests table, linking refund requests to orders and customers as per the schema. The endpoint takes order ID and refund request ID as path parameters and returns detailed refund request information including reason, amount, status, and timestamps. It supports viewing refund request status by authorized users, typically assigned roles with access to order financials and refund management.","description":"Retrieve detailed information of a specific refund request associated with an order. This operation targets the shopping_mall_refund_requests table, which captures refund requests initiated by customers for their orders.\n\nThe refund request includes the reason, requested refund amount, current status (e.g., pending, approved, rejected), and timestamps for request and processing. The operation provides comprehensive data for administrative review and customer service.\n\nSecurity considerations include restricting access to users with appropriate roles authorized to view refund details, such as admins or the customer who submitted the request. Sensitive financial data such as refund amount and payment method details are included.\n\nValidation ensures that both orderId and refundRequestId are valid UUIDs corresponding to existing records, rejecting invalid or unauthorized access requests. Related order and customer information can be queried separately as needed.\n\nThis API operation complements refund request creation and processing endpoints, enabling a full lifecycle view of refund management within the shopping mall platform.","summary":"Retrieve detailed refund request information by order ID and refund request ID","parameters":[{"name":"orderId","description":"Target order's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"refundRequestId","description":"Specific refund request's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Refund request details","typeName":"IShoppingMallRefundRequest"},"authorizationRoles":["admin","customer"],"name":"atRefundRequest","path":"/shoppingMall/customer/orders/{orderId}/refundRequests/{refundRequestId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before refund requests can be associated or retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"post"},"description":"Refund request must exist before detailed information can be retrieved"}]},{"specification":"This operation creates a refund request associated with an existing order in the ShoppingMall platform. It operates on the shopping_mall_refund_requests table in the Prisma schema, which maintains refund requests with fields for reason, refund amount, status, timestamps, and relationships to order and customer entities. The operation accepts a refund request creation payload including necessary details such as reason and refund amount. Upon creation, the refund request will be in a pending status awaiting processing. The refund request is linked to a specific order identified by orderId path parameter. This operation is accessible to authorized users who can request refunds for their orders.","path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"post","summary":"Create refund request for an order","description":"Create a new refund request for the specified order on behalf of a customer. This operation validates that the order exists and that the customer is authorized to initiate a refund request. The refund request includes the reason for refund and the requested refund amount, both required for processing. The initial status of the refund request will be set to 'pending' and await review and approval by administrators. Security measures ensure that only authenticated customers with legitimate orders can perform this action.\n\nThis operation directly manipulates the shopping_mall_refund_requests table in Prisma schema. It enforces business rules that refunds can only be requested on existing orders that belong to the requesting customer.\n\nExpected behavior includes validation errors if the order does not exist or does not belong to the customer, and successful creation returns the new refund request record.\n\nNo response body is provided on creation to minimize exposure of refund details. Confirmation is conveyed by HTTP status code 201 Created.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a refund request","typeName":"IShoppingMallRefundRequest.ICreate"},"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"createRefundRequest","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before creating a refund request associated with it"},{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist to be associated with the refund request for the order"}]},{"specification":"This operation updates an existing refund request's details and status. It operates on the shopping_mall_refund_requests table in the Prisma schema, supporting update of fields including reason, refund amount, status, and processed_at timestamp. The operation requires both orderId and refundRequestId as path parameters to uniquely identify the refund request. Authorized users can modify refund requests they own. The update payload allows changing the refund request reason, amount, and status, enabling submission of processing results such as approval or rejection.\n\nBusiness rules enforce that only the owner customer or authorized staff can update the refund request. Status must be updated according to workflow states defined in the system.\n\nThe operation returns no response body but responds with appropriate HTTP status codes upon success or failure.","path":"/shoppingMall/customer/orders/{orderId}/refundRequests/{refundRequestId}","method":"put","summary":"Update refund request for an order","description":"Update details of a specific refund request associated with an order. This enables modification of the refund reason, amount, and status (such as approving or rejecting the refund). Input validation verifies that the refund request exists and belongs to the authenticated user.\n\nThe updated refund request is persisted to the shopping_mall_refund_requests table in Prisma schema. Authorization is checked to ensure only the owning customer or authorized personnel can update the request. No response content is returned to reduce exposure of sensitive refund information.\n\nThis operation supports the refund management lifecycle and integrates with administrative refund approval processes.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"refundRequestId","description":"Unique identifier of the target refund request","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating a refund request","typeName":"IShoppingMallRefundRequest.IUpdate"},"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"putByOrderidAndRefundrequestid","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before updating its refund request"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"post"},"description":"Refund request must exist before updating it"},{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist to update the refund request for the order"}]},{"specification":"This operation deletes a specific refund request associated with an order from the shopping_mall_refund_requests table. It removes the refund request permanently based on the refundRequestId and orderId path parameters. Only authenticated customers or admins authorized to manage orders can perform this operation. The refund request represents a customer's refund claim for an order, including reason, amount, status, and timestamps. This deletion permanently removes the refund record without soft delete as per the Prisma schema.","description":"This operation deletes a refund request record in the shopping mall platform database. It requires both the order ID and refund request ID to uniquely identify the refund request to delete. Upon execution, the refund request linked to the specified order is permanently removed from the database and cannot be recovered.\n\nAuthorization is required: typically, only customers linked to the order or administrators with proper permissions may perform this action.\n\nAs per the Prisma database schema, shopping_mall_refund_requests is a main entity tracking refund requests with properties such as refund amount, reason, status, and timestamps. Deleting a refund request reflects that the refund claim is cancelled or invalidated.\n\nNo request body is needed as the operation is identified fully via the path parameters. No response body is returned on success.","summary":"Delete a specific refund request for an order","parameters":[{"name":"orderId","description":"Unique identifier of the order","schema":{"type":"string","format":"uuid"}},{"name":"refundRequestId","description":"Unique identifier of the refund request to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"path":"/shoppingMall/customer/orders/{orderId}/refundRequests/{refundRequestId}","method":"delete","name":"eraseRefundRequest","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before a refund request can be deleted for it."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"post"},"description":"Refund request must exist before it can be deleted for the order."}]},{"specification":"This operation deletes a specific refund request associated with an order from the shopping_mall_refund_requests table. It removes the refund request permanently based on the refundRequestId and orderId path parameters. Only authenticated customers or admins authorized to manage orders can perform this operation. The refund request represents a customer's refund claim for an order, including reason, amount, status, and timestamps. This deletion permanently removes the refund record without soft delete as per the Prisma schema.","description":"This operation deletes a refund request record in the shopping mall platform database. It requires both the order ID and refund request ID to uniquely identify the refund request to delete. Upon execution, the refund request linked to the specified order is permanently removed from the database and cannot be recovered.\n\nAuthorization is required: typically, only customers linked to the order or administrators with proper permissions may perform this action.\n\nAs per the Prisma database schema, shopping_mall_refund_requests is a main entity tracking refund requests with properties such as refund amount, reason, status, and timestamps. Deleting a refund request reflects that the refund claim is cancelled or invalidated.\n\nNo request body is needed as the operation is identified fully via the path parameters. No response body is returned on success.","summary":"Delete a specific refund request for an order","parameters":[{"name":"orderId","description":"Unique identifier of the order","schema":{"type":"string","format":"uuid"}},{"name":"refundRequestId","description":"Unique identifier of the refund request to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"path":"/shoppingMall/admin/orders/{orderId}/refundRequests/{refundRequestId}","method":"delete","name":"eraseRefundRequest","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before a refund request can be deleted for it."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refundRequests","method":"post"},"description":"Refund request must exist before it can be deleted for the order."}]},{"specification":"This operation retrieves a paginated list of cancellation requests associated with orders in the shopping_mall_cancellation_requests table. Supports filtering, searching, and sorting of cancellation requests. Cancellation requests represent customer requests to cancel orders with reasons and statuses. The operation supports role-based access, with customers viewing their own requests and admins viewing all.","description":"Retrieve a filtered and paginated list of shopping mall order cancellation requests from the database. This operation enables searching and filtering cancellation requests based on various criteria such as status, request date, and customer identification.\n\nThe response includes pagination details and cancellation request summaries optimized for list displays.\n\nSecurity considerations involve restricting data access to authorized roles. Customers only see their own cancellation requests, while admins can access all.\n\nThe data corresponds to shopping_mall_cancellation_requests schema with fields capturing order ID, customer ID, reason, status, request and processing timestamps.\n\nRequest body allows specifying search criteria including paging, sorting, and filtering parameters.","summary":"Search and retrieve a filtered, paginated list of order cancellation requests","parameters":[{"name":"orderId","description":"Unique identifier of the order to filter cancellation requests","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for cancellation request filtering","typeName":"IShoppingMallCancellationRequest.IRequest"},"responseBody":{"description":"Paginated list of cancellation request summary information matching search criteria","typeName":"IPageIShoppingMallCancellationRequest.ISummary"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/orders/{orderId}/cancellationRequests","method":"patch","name":"indexCancellationRequests","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order with the given orderId must be created before retrieving related cancellation requests."}]},{"specification":"This operation retrieves a specific cancellation request associated with a particular order in the ShoppingMall platform. It accesses the shopping_mall_cancellation_requests table using the unique orderId and cancellationRequestId to fetch detailed information such as reason, status, timestamps, and involved customer and order references. The operation ensures authorized access only for the customer who owns the order, the seller, or administrators.","path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests/{cancellationRequestId}","method":"get","summary":"Retrieve a specific cancellation request for an order","description":"Retrieve a specific cancellation request linked to the given order ID and cancellation request ID.\n\nThe cancellation request includes details such as the request reason, status of the cancellation request (Pending, Approved, Rejected), the request and response timestamps, along with the associated customer and order identifiers.\n\nAccess to this operation is limited to authenticated users with roles: customer, seller, or admin, ensuring secure and privacy-compliant data handling.\n\nThis endpoint corresponds to the shopping_mall_cancellation_requests table and provides full details about the cancellation request for client viewing or administrative processing.\n\nError handling includes responses for invalid IDs, unauthorized access, or missing resources.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"cancellationRequestId","description":"Unique identifier of the cancellation request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Cancellation request details","typeName":"IShoppingMallCancellationRequest"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order with the given orderId must exist before retrieving its specific cancellation request."}]},{"specification":"This operation retrieves a specific cancellation request associated with a particular order in the ShoppingMall platform. It accesses the shopping_mall_cancellation_requests table using the unique orderId and cancellationRequestId to fetch detailed information such as reason, status, timestamps, and involved customer and order references. The operation ensures authorized access only for the customer who owns the order, the seller, or administrators.","path":"/shoppingMall/seller/orders/{orderId}/cancellationRequests/{cancellationRequestId}","method":"get","summary":"Retrieve a specific cancellation request for an order","description":"Retrieve a specific cancellation request linked to the given order ID and cancellation request ID.\n\nThe cancellation request includes details such as the request reason, status of the cancellation request (Pending, Approved, Rejected), the request and response timestamps, along with the associated customer and order identifiers.\n\nAccess to this operation is limited to authenticated users with roles: customer, seller, or admin, ensuring secure and privacy-compliant data handling.\n\nThis endpoint corresponds to the shopping_mall_cancellation_requests table and provides full details about the cancellation request for client viewing or administrative processing.\n\nError handling includes responses for invalid IDs, unauthorized access, or missing resources.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"cancellationRequestId","description":"Unique identifier of the cancellation request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Cancellation request details","typeName":"IShoppingMallCancellationRequest"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before retrieving its associated cancellation request"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests","method":"post"},"description":"Cancellation request must exist before it can be retrieved"}]},{"specification":"This operation retrieves a specific cancellation request associated with a particular order in the ShoppingMall platform. It accesses the shopping_mall_cancellation_requests table using the unique orderId and cancellationRequestId to fetch detailed information such as reason, status, timestamps, and involved customer and order references. The operation ensures authorized access only for the customer who owns the order, the seller, or administrators.","path":"/shoppingMall/admin/orders/{orderId}/cancellationRequests/{cancellationRequestId}","method":"get","summary":"Retrieve a specific cancellation request for an order","description":"Retrieve a specific cancellation request linked to the given order ID and cancellation request ID.\n\nThe cancellation request includes details such as the request reason, status of the cancellation request (Pending, Approved, Rejected), the request and response timestamps, along with the associated customer and order identifiers.\n\nAccess to this operation is limited to authenticated users with roles: customer, seller, or admin, ensuring secure and privacy-compliant data handling.\n\nThis endpoint corresponds to the shopping_mall_cancellation_requests table and provides full details about the cancellation request for client viewing or administrative processing.\n\nError handling includes responses for invalid IDs, unauthorized access, or missing resources.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"cancellationRequestId","description":"Unique identifier of the cancellation request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Cancellation request details","typeName":"IShoppingMallCancellationRequest"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before retrieving its associated cancellation request"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests","method":"post"},"description":"Cancellation request must exist before it can be retrieved"}]},{"specification":"This operation creates a new cancellation request for a specific order in the ShoppingMall platform. It records the customer-initiated request to cancel the order, capturing the reason and automatically setting status to 'Pending'. The operation validates that the requesting customer owns the order and that the order status permits cancellation.\n\nIt writes a new record in the shopping_mall_cancellation_requests table including necessary fields like reason, status, timestamps, and references to the associated order and customer.\n\nAfter successful creation, the operation returns the newly created cancellation request with all details for further tracking or processing.\n\nAuthorization requires user role membership among customer, seller, or admin, consistent with platform security policies.","path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests","method":"post","summary":"Create a new cancellation request for an order","description":"Create a cancellation request linked to a specific order. The request body must include the reason for cancellation and the customer ID initiating the request.\n\nThe status is set to 'Pending' by default on creation.\n\nThis operation checks that the requesting user has permission to create a cancellation request for the target order.\n\nCancellation requests are persisted in the shopping_mall_cancellation_requests table and returned in the response.\n\nRoles authorized to use this endpoint are customer, seller, and admin.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info of the cancellation request","typeName":"IShoppingMallCancellationRequest.ICreate"},"responseBody":{"description":"Created cancellation request details","typeName":"IShoppingMallCancellationRequest"},"authorizationType":null,"authorizationRole":"customer","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a cancellation request can be made for the order."}]},{"specification":"This operation creates a new cancellation request for a specific order in the ShoppingMall platform. It records the customer-initiated request to cancel the order, capturing the reason and automatically setting status to 'Pending'. The operation validates that the requesting customer owns the order and that the order status permits cancellation.\n\nIt writes a new record in the shopping_mall_cancellation_requests table including necessary fields like reason, status, timestamps, and references to the associated order and customer.\n\nAfter successful creation, the operation returns the newly created cancellation request with all details for further tracking or processing.\n\nAuthorization requires user role membership among customer, seller, or admin, consistent with platform security policies.","path":"/shoppingMall/seller/orders/{orderId}/cancellationRequests","method":"post","summary":"Create a new cancellation request for an order","description":"Create a cancellation request linked to a specific order. The request body must include the reason for cancellation and the customer ID initiating the request.\n\nThe status is set to 'Pending' by default on creation.\n\nThis operation checks that the requesting user has permission to create a cancellation request for the target order.\n\nCancellation requests are persisted in the shopping_mall_cancellation_requests table and returned in the response.\n\nRoles authorized to use this endpoint are customer, seller, and admin.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info of the cancellation request","typeName":"IShoppingMallCancellationRequest.ICreate"},"responseBody":{"description":"Created cancellation request details","typeName":"IShoppingMallCancellationRequest"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a cancellation request can be made for the order."}]},{"specification":"This operation creates a new cancellation request for a specific order in the ShoppingMall platform. It records the customer-initiated request to cancel the order, capturing the reason and automatically setting status to 'Pending'. The operation validates that the requesting customer owns the order and that the order status permits cancellation.\n\nIt writes a new record in the shopping_mall_cancellation_requests table including necessary fields like reason, status, timestamps, and references to the associated order and customer.\n\nAfter successful creation, the operation returns the newly created cancellation request with all details for further tracking or processing.\n\nAuthorization requires user role membership among customer, seller, or admin, consistent with platform security policies.","path":"/shoppingMall/admin/orders/{orderId}/cancellationRequests","method":"post","summary":"Create a new cancellation request for an order","description":"Create a cancellation request linked to a specific order. The request body must include the reason for cancellation and the customer ID initiating the request.\n\nThe status is set to 'Pending' by default on creation.\n\nThis operation checks that the requesting user has permission to create a cancellation request for the target order.\n\nCancellation requests are persisted in the shopping_mall_cancellation_requests table and returned in the response.\n\nRoles authorized to use this endpoint are customer, seller, and admin.","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info of the cancellation request","typeName":"IShoppingMallCancellationRequest.ICreate"},"responseBody":{"description":"Created cancellation request details","typeName":"IShoppingMallCancellationRequest"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before creating a cancellation request referencing it."},{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before creating a cancellation request associated with their account."}]},{"specification":"This operation updates an existing cancellation request for a specific order in the shoppingMall e-commerce platform. It operates on the shopping_mall_cancellation_requests table of the Prisma schema. The cancellation request is uniquely identified by both the order ID and the cancellation request ID path parameters. This endpoint supports updating the reason, status, requested_at, and processed_at timestamps of the cancellation request. It requires user authorization as a customer to ensure only authorized users can perform updates. The update operation follows standard RESTful principles with a PUT method and requires the full update data in the request body following the IShoppingMallCancellationRequest.IUpdate schema. The response returns the updated cancellation request entity. The operation ensures validation of ownership and business logic consistency during update. Related operations include POST for creating new cancellation requests and GET to retrieve details of individual requests.","description":"Update an existing cancellation request for a specified order.\n\nThis operation allows authorized customers to modify the details of a cancellation request associated with a specific order. The cancellation request is identified by its unique ID and the parent order ID. Customers can update fields such as the reason for cancellation, status of the request, as well as relevant timestamps.\n\nSecurity considerations require that only authenticated and authorized customers can update their own cancellation requests to prevent unauthorized changes. The operation uses a PUT HTTP method as it expects a complete update payload.\n\nThis API directly manipulates the shopping_mall_cancellation_requests table, enforcing all data constraints defined in the Prisma DB schema. The update operation also integrates with order management workflows ensuring the cancellation request status aligns with the overall order state.\n\nThe operation should return the updated cancellation request entity on success. Errors may occur due to invalid input, authorization failures, or business rule violations such as attempting to update a cancellation request that is already processed.\n\nRelated API operations to consider for comprehensive management include creating cancellation requests and fetching their details.","summary":"Update cancellation request for a specified order","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"cancellationRequestId","description":"Unique identifier of the cancellation request","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information of the cancellation request","typeName":"IShoppingMallCancellationRequest.IUpdate"},"responseBody":{"description":"Information of the updated cancellation request","typeName":"IShoppingMallCancellationRequest"},"authorizationRoles":["customer"],"name":"updateCancellationRequest","path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests/{cancellationRequestId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order identified by orderId must exist before updating the cancellation request. The order must be created first."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests","method":"post"},"description":"The cancellation request identified by cancellationRequestId must be created before it can be updated."}]},{"specification":"This operation deletes a specific cancellation request associated with an order in the shoppingMall e-commerce platform. It operates on the shopping_mall_cancellation_requests table in the Prisma schema. The endpoint uses the order ID and the cancellation request ID as path parameters to identify the resource uniquely. The deletion is a hard delete since the schema defines a nullable deleted_at timestamp, but here we assume this operation permanently removes the record. Authorization is required for authenticated user roles, ensuring only authorized customers can delete their cancellation requests. The response does not include a body but confirms the deletion via HTTP status code. The operation aligns with RESTful API best practices by using the DELETE HTTP method without a request body.","description":"Delete a specific cancellation request for a specified order.\n\nThis operation allows authorized customers to permanently remove a cancellation request related to a particular order. The cancellation request is identified by both order ID and cancellation request ID parameters. Only authenticated customers with appropriate permissions can perform this deletion.\n\nThe delete action permanently removes the record from the shopping_mall_cancellation_requests table without soft delete marking. It ensures integrity by checking ownership and preventing unauthorized deletion.\n\nSuccessful deletion is confirmed through the standard HTTP status code with no response body. Errors may arise from invalid IDs, authorization failures, or attempts to delete non-existent requests.\n\nThis operation complements related APIs such as creating and updating cancellation requests and viewing their details.","summary":"Delete cancellation request for a specified order","parameters":[{"name":"orderId","description":"Unique identifier of the target order","schema":{"type":"string","format":"uuid"}},{"name":"cancellationRequestId","description":"Unique identifier of the cancellation request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"eraseCancellationRequest","path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests/{cancellationRequestId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/cancellationRequests","method":"post"},"description":"Cancellation request must exist before it can be deleted to ensure valid deletion target."}]},{"specification":"This operation retrieves a paginated list of product reviews submitted by customers who have purchased the products. It operates on the shopping_mall_product_reviews table in the Prisma schema. Users can apply complex search criteria such as filtering by rating, status (pending, approved, rejected), date ranges, and product or customer identifiers. The response includes product review summaries optimized for list display including rating and moderation status.","description":"Retrieve a filtered and paginated list of product reviews from customers who purchased the products. This operation allows filtering by various criteria including rating score, review status (e.g., pending approval, approved), and associated product or order information.\n\nThe operation supports pagination and sorting to efficiently navigate large volumes of reviews. Proper authorization ensures that only appropriate roles, such as admins or moderators, can access the full review data.\n\nThis operation directly queries the shopping_mall_product_reviews table as defined in the Prisma schema, incorporating all relevant fields such as customer ID, product ID, order ID, rating, review text, and moderation status. Search parameters include date ranges for creation or update timestamps.\n\nThe response returns a paginated list of review summaries suitable for administrative dashboard views and moderation queues.","summary":"Search and retrieve a filtered, paginated list of product reviews","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for product reviews","typeName":"IShoppingMallProductReview.IRequest"},"responseBody":{"description":"Paginated list of product review summaries matching search criteria","typeName":"IPageIShoppingMallProductReview.ISummary"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/productReviews","method":"patch","name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"Product reviews created by customers must exist before they can be searched or retrieved by admins."}]},{"specification":"This operation retrieves detailed information of a specific product review by its unique identifier. It accesses the shopping_mall_product_reviews table in the Prisma schema. The response includes customer, product, and order associations, rating, review text, moderation status, and timestamps. It is intended for administrators who need to view or moderate individual reviews.","description":"Retrieve detailed information about a specific product review identified by its unique ID. This operation returns all pertinent review data including the customer who submitted it, the associated product, and the relevant order confirming the purchase.\n\nThis operation ensures that only authorized administrative users can access sensitive review content for moderation purposes. It operates directly on the shopping_mall_product_reviews table, providing a comprehensive view of the review entity.\n\nProper error handling is expected if the specified review ID does not exist. The operation supports validation of the UUID format for the path parameter.\n\nThis endpoint typically complements list retrieval and moderation update operations in review management workflows.","summary":"Get detailed product review information by ID","parameters":[{"name":"id","description":"Unique identifier of the product review","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Product review detailed information","typeName":"IShoppingMallProductReview"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/productReviews/{id}","method":"get","name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before the product review can be accessed or created."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before the product review can be accessed or created."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order confirming the purchase must exist before the product review can be accessed or created."},{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"Product review must be created before it can be accessed by its ID."}]},{"specification":"This operation enables authenticated customers (role: customer) to create new product reviews for products they have purchased, as stored in the shopping_mall_product_reviews table. The API accepts a request body of type IShoppingMallProductReview.ICreate containing customer ID, product ID, order ID confirming purchase, rating from 1 to 5, optional review text, and sets the status of the review to 'pending'. It returns the created product review object conforming to IShoppingMallProductReview.","path":"/shoppingMall/customer/productReviews","method":"post","summary":"Create a new product review by an authenticated customer who purchased the product","description":"Allows customers to create a new review for a purchased product. The customer must be authenticated with the role 'customer'. The review includes rating (1-5), optional review text, and must refer to the order confirming purchase to ensure eligibility. The review is initially set with status 'pending' for moderation.\n\nThis operation enforces the business rule that only verified buyers may post reviews and returns the created review details including timestamps and unique ID.\n\nErrors may occur if validation fails (e.g., rating out of range) or if unauthorized access is attempted.","parameters":[],"requestBody":{"description":"New product review submission data","typeName":"IShoppingMallProductReview.ICreate"},"responseBody":{"description":"Created product review representation","typeName":"IShoppingMallProductReview"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customers","method":"post"},"description":"Customer must exist before creating the product review."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before creating the product review."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order confirming the purchase must exist before creating the product review."}]},{"specification":"This operation allows an authenticated customer (role: customer) to update an existing product review identified by review ID path parameter. The update applies to rating, review text, and resets the moderation status to 'pending' to require re-approval. The operation updates the corresponding record in shopping_mall_product_reviews and returns the updated entity.","path":"/shoppingMall/customer/productReviews/{id}","method":"put","summary":"Update existing product review of authenticated customer by review ID","description":"Enables customers to update their own submitted product reviews. The review is identified by the UUID path parameter 'id'. Only authenticated customers can perform this operation, and the moderation status is again set to 'pending' upon update for fresh moderation.\n\nTypical validation errors include invalid rating values or unauthorized attempts to update others' reviews.\n\nThe operation returns updated review details, including timestamps to confirm successful update.","parameters":[{"name":"id","description":"Unique identifier of the product review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated product review data","typeName":"IShoppingMallProductReview.IUpdate"},"responseBody":{"description":"Updated product review representation","typeName":"IShoppingMallProductReview"},"authorizationRole":"customer","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"Product review must be created by the authenticated customer before it can be updated."}]},{"specification":"This operation deletes a single product review by its unique ID, permanently removing it from the shopping mall database. It operates on the shopping_mall_product_reviews table in the Prisma schema, which represents customer-submitted product reviews linked to purchases. The operation requires the target product review's UUID as the path parameter. Deleting a product review removes all associated moderation records due to cascade rules. Only administrators (admin role) are authorized to perform this operation, ensuring review content integrity and moderation enforcement. This is a hard delete operation since the schema supports soft deletion via the 'deleted_at' timestamp; this operation will completely remove the record from active use.","path":"/shoppingMall/admin/productReviews/{id}","method":"delete","summary":"Delete a product review by ID","description":"This API endpoint allows authorized administrators to permanently delete a product review from the platform using its unique identifier. The product review data, including rating, text, and moderation history, will be removed permanently.\n\nSecurity is enforced by allowing only users with the 'admin' role to execute this operation. The client must provide a valid UUID for the target product review.\n\nThe operation corresponds to the 'shopping_mall_product_reviews' table in the Prisma schema, which contains detailed customer review records for products purchased. Deletion cascades to related moderation records.\n\nA successful call results in the product review being removed; clients should handle errors such as not found or authorization failure.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the product review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"Product review must be created before it can be deleted."}]},{"specification":"This operation retrieves a paginated list of product review moderation records for a specific product review. It operates on the shopping_mall_review_moderations table linked to shopping_mall_product_reviews via the 'shopping_mall_product_review_id' foreign key. The operation requires the product review ID as a path parameter and a request body containing pagination and filtering criteria. The response returns paginated moderation data. Only administrators are authorized to access this data to enable review content monitoring and auditing. This GET-type retrieval logic is implemented with PATCH method to support complex request filtering.","path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations","method":"patch","summary":"List moderation records for a product review","description":"This API operation provides administrators with the ability to search and retrieve paginated moderation records associated with a particular product review. Moderation records include details of actions taken by admins such as approvals, rejections, and flags, with timestamps and optional comments.\n\nThe endpoint requires the product review ID as part of the path and a complex search request in the body to support filtering and pagination. Access is restricted to users with the 'admin' role.\n\nThis resource relates to the 'shopping_mall_review_moderations' table as defined in the Prisma schema, which stores detailed administrative moderation histories for product reviews.\n\nA typical response includes paginated lists of moderation actions affecting a single product review. Proper error handling is necessary for invalid IDs or permission issues.","parameters":[{"name":"productReviewId","in":"path","description":"Target product review's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for moderation records filtering","typeName":"IShoppingMallReviewModeration.IRequest"},"responseBody":{"description":"Paginated list of product review moderation records matching search criteria","typeName":"IPageIShoppingMallReviewModeration"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must exist before creating or managing review moderations, as these records require an admin performing the moderation."},{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"Product review must exist before moderation records can be created or listed for it."}]},{"specification":"This operation retrieves a specific product review moderation record identified by the 'id' parameter which belongs to the product review identified by 'productReviewId'. It operates on the 'shopping_mall_review_moderations' table from the Prisma schema. This entity stores administrative moderation actions on product reviews, including the admin who performed the action, the moderation decision, and any comments. The operation returns full details of a single review moderation record, useful for audit and moderation tracking. It requires knowledge of the moderation record ID and the associated product review ID to ensure proper hierarchical retrieval and security. Path parameters validate the request, returning a single moderation entry.","description":"Retrieve one specific administrative moderation record of a product review in the shopping mall platform.\n\nThis operation requires two path parameters: 'productReviewId' - the unique identifier of the product review being moderated, and 'id' - the unique identifier of the moderation record itself. These ensure precise retrieval of the moderation record. Only authorized users with appropriate roles can access moderation details.\n\nThe 'shopping_mall_review_moderations' table stores records of moderation actions taken by administrators, including approval, rejection, and related comments. Each record links to a product review and the admin responsible. This operation is essential for audit trails and transparency of review moderation.\n\nValidation ensures the requested moderation record exists under the specified product review. Errors are returned if not found or unauthorized.\n\nRelated operations include creation of new moderation records when an admin acts on a review, accessible through the POST operation on the moderation collection.\n\nThis retrieval operation returns complete moderation details suitable for administrative dashboards or audit logs.","summary":"Retrieve a specific review moderation record by productReviewId and ID.","parameters":[{"name":"productReviewId","in":"path","description":"Unique identifier of the product review being moderated","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"Unique identifier of the review moderation record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed administrative moderation record of a product review","typeName":"IShoppingMallReviewModeration"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations/{id}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations","method":"post"},"description":"Review moderation must be created before it can be retrieved by ID."}]},{"specification":"This operation creates a new moderation record on a specific product review identified by 'productReviewId'. It operates on the 'shopping_mall_review_moderations' table from the Prisma schema. The API accepts moderation actions performed by administrators including approving, rejecting, or flagging reviews, with optional comments explaining the decision. It requires the admin ID, the action type, and associates the moderation with the product review. This endpoint supports audit trail creation and moderation workflow management.\n\nThe request body requires the 'action' field specifying the moderation type and the 'shopping_mall_admin_id' identifying the moderator admin. Comments can be included optionally. The response returns the created moderation entity with details including timestamps.\n\nThis operation is restricted to users with 'admin' role to maintain security and accountability.","description":"Create a new administrative moderation record for a specific product review.\n\nThe request must include the 'productReviewId' as a path parameter to specify which product review is being moderated.\n\nRequest body requires:\n- 'shopping_mall_admin_id': UUID of the administrator performing the moderation.\n- 'action': The moderation action taken (e.g., 'approve', 'reject', 'flag').\n- 'comment': Optional string comments for additional context.\n\nAuthorization is restricted to admin users.\n\nSuccessful creation returns the created moderation record including timestamps and linked review and admin information.\n\nThis operation enables structured moderation workflows and audit trails for product reviews within the platform.","summary":"Create a new review moderation record for a product review.","parameters":[{"name":"productReviewId","in":"path","description":"Unique identifier of the product review to moderate","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New review moderation record creation","typeName":"IShoppingMallReviewModeration.ICreate"},"responseBody":{"description":"Created review moderation record with details","typeName":"IShoppingMallReviewModeration"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator must exist before creating a review moderation record linked to the admin."},{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"Product review must exist before creating a review moderation record for it."}]},{"specification":"This operation updates a specific review moderation record of a product review in the shopping mall platform. The operation is associated with the shopping_mall_review_moderations table from the Prisma schema. It allows modification of moderation action, comments, and timestamps. Access control restricts modification to authenticated admin users. The path includes productReviewId and moderation id as identifiers.","path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations/{id}","method":"put","summary":"Update a product review moderation by ID for a specific product review","description":"Update a specific product review moderation record identified by its unique ID and associated product review ID. This operation allows admins to modify the moderation action (like approve, reject, or flag) and add optional comments. It refers to the shopping_mall_review_moderations table which records administrative moderation actions on product reviews. Only authorized admin users can perform this update. The operation also ensures proper validation of input fields, preserves audit trail integrity, and adjusts timestamps if needed.\n\nSecurity requires that only administrative users can update review moderation records. The moderation record must exist and belong to the specified product review. Updates to action and comments are validated against allowed values and content policies. This operation complements the review moderation retrieval and deletion endpoints and is essential for maintaining review content quality.\n\nExpected behavior includes validation of the existence of IDs, permission checking, and propagation of updated moderation status to related product reviews if applicable. Errors include 404 if record not found, 403 if unauthorized, and 400 for validation failures.\n\nNo request body besides the permissible fields for update is expected, and the response includes the updated review moderation record object.","parameters":[{"name":"productReviewId","in":"path","description":"ID of the product review associated with the moderation","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"ID of the review moderation record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the product review moderation","typeName":"IShoppingMallReviewModeration.IUpdate"},"responseBody":{"description":"Updated product review moderation information","typeName":"IShoppingMallReviewModeration"},"authorizationType":null,"authorizationRole":"admin","name":"updateReviewModeration","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations","method":"post"},"description":"The review moderation record must be created before it can be updated."},{"endpoint":{"path":"/shoppingMall/customer/productReviews","method":"post"},"description":"The product review must exist before moderations can be created or updated."},{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"The administrator user must be created before performing moderation actions."}]},{"specification":"This operation permanently deletes a specific product review moderation record identified by its ID and associated product review ID. It operates on the shopping_mall_review_moderations table in the Prisma schema. Deletion is restricted to admin users. The operation path includes both productReviewId and review moderation id for precise record targeting.","path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations/{id}","method":"delete","summary":"Delete a product review moderation by ID for a specific product review","description":"Delete a specific product review moderation record by ID linked to a product review given by productReviewId. This operation permanently removes the record from the database and cleans up related audit trails. It is critical that only authorized admin users can perform deletions to maintain content moderation integrity.\n\nThis operation corresponds to a hard delete; the record is completely erased and cannot be restored. It should be used with caution. The operation complements retrieval, creation, and update endpoints of review moderations.\n\nExpected errors include 404 if the record does not exist or 403 if the requester lacks proper permissions.\n\nNo request body is required for this operation, and no response body is returned upon successful deletion.\n\nSecurity best practices enforce strict role-based access and audit trail logging of deletions.","parameters":[{"name":"productReviewId","in":"path","description":"ID of the product review associated with the moderation","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"ID of the review moderation record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseReviewModeration","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/productReviews/{productReviewId}/reviewModerations","method":"post"},"description":"The product review must exist before a review moderation can be deleted."}]},{"specification":"This operation retrieves a paginated list of admin dashboard overview information, supporting filtering, sorting, and pagination for administrators to monitor platform performance and operational metrics. It operates on the shopping_mall_admin_dashboard table in the Prisma schema, which stores unique dashboard names and associated descriptive metadata with creation and update timestamps, including soft delete support.","description":"This API endpoint allows administrators to query and retrieve filtered and paginated lists of admin dashboard entries. Admin dashboard records provide critical high-level summaries of platform operations, including KPIs, recent activities, and system status indicators.\n\nSecurity considerations restrict access to authenticated admin users only. Admins can apply search filters and sorting to customize the views. Soft deleted dashboards are excluded from typical queries.\n\nThe endpoint relates directly to the shopping_mall_admin_dashboard table in the Prisma schema, which maintains unique dashboard names and optional descriptions for operational monitoring purposes.\n\nValidation ensures that all query parameters are correctly handled, including pagination limits and offsets.\n\nExpected behavior includes efficient retrieval of dashboard lists with metadata summary information.","summary":"Retrieve a paginated list of admin dashboard overviews","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for querying admin dashboard entries","typeName":"IShoppingMallAdminDashboard.IRequest"},"responseBody":{"description":"Paginated list of admin dashboard overview information matching search criteria","typeName":"IPageIShoppingMallAdminDashboard.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/adminDashboard","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific admin dashboard entry identified by its unique id. The shopping_mall_admin_dashboard table from the Prisma schema is queried to obtain details such as dashboard name, description, and operational timestamps including creation, update, and soft deletion.\n\nSecurity is restricted to authenticated admin users who require access to individual dashboard details for management and audit purposes.\n\nThe operation validates path parameters and returns comprehensive dashboard metadata for the given id.","description":"Retrieve detailed information of an admin dashboard entry by its unique identifier. This operation fetches the full properties of the dashboard, including name, description, and relevant timestamps.\n\nAccess is secured for admin roles only, ensuring that sensitive dashboard information is protected.\n\nThe retrieved data corresponds directly to the shopping_mall_admin_dashboard table in the Prisma schema, providing authoritative source details.\n\nValidation of the dashboard id path parameter ensures correct UUID format and existence.\n\nErrors return appropriate not-found or unauthorized responses.","summary":"Retrieve admin dashboard details by id","parameters":[{"name":"id","description":"Unique identifier of the target admin dashboard","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed admin dashboard information","typeName":"IShoppingMallAdminDashboard"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/adminDashboard/{id}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/adminDashboard","method":"post"},"description":"An admin dashboard must be created before it can be retrieved by its id"}]},{"specification":"This operation creates a new admin dashboard resource within the shopping mall platform. It allows system administrators to provision new instances of admin dashboards used to monitor and manage platform operations such as orders, users, products, and reports. The operation conforms to the schema of the \"shopping_mall_admin_dashboard\" table from the Prisma schema which includes fields like a unique dashboard name, optional description, and created/updated timestamps. Upon successful creation, a detailed admin dashboard resource is returned.","description":"Create a new admin dashboard instance. This operation accepts parameters to specify the unique dashboard name and an optional description to detail the dashboard's purpose or scope.\n\nSecurity considerations: This endpoint is restricted to users with the admin role to prevent unauthorized access to critical platform monitoring tools.\n\nThe admin dashboard entity corresponds to the \"shopping_mall_admin_dashboard\" Prisma schema table which manages unique dashboard configurations with audit timestamps and soft deletion support.\n\nValidation rules ensure that the dashboard name is unique and non-empty. Optional descriptions may be provided to explain the dashboard's function.\n\nSuccessful creation returns the detailed dashboard entity with all relevant fields including timestamps. Error handling includes uniqueness violations and validation failures.\n\nRelated API operations include updating and deleting admin dashboards.\n\nThis operation requires an authenticated admin who is authorized to manage dashboards.","summary":"Create a new admin dashboard","parameters":[],"requestBody":{"description":"Information required to create a new admin dashboard","typeName":"IShoppingMallAdminDashboard.ICreate"},"responseBody":{"description":"Detailed information of the created admin dashboard","typeName":"IShoppingMallAdminDashboard"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/adminDashboard","method":"post","name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing admin dashboard resource identified by its unique ID. It allows system administrators to modify properties such as the dashboard name and description, thereby managing the configuration and details of platform monitoring dashboards. The operation uses the \"shopping_mall_admin_dashboard\" table from the Prisma schema, referencing the dashboard ID path parameter.\n\nSecurity considerations: Access restricted to users with the admin role to enforce control over administrative configurations.\n\nValidation ensures the dashboard exists, the provided ID is valid UUID format, and modifications adhere to unique name constraints.\n\nSuccessful execution returns the updated admin dashboard entity including updated timestamps. Errors may include not found, unique constraint violations, or validation errors.\n\nThis operation complements dashboard creation and supports full lifecycle management of admin dashboard entities.","summary":"Update existing admin dashboard by ID","parameters":[{"name":"id","description":"Unique identifier of the target admin dashboard","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update in the admin dashboard","typeName":"IShoppingMallAdminDashboard.IUpdate"},"responseBody":{"description":"Updated admin dashboard information","typeName":"IShoppingMallAdminDashboard"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/adminDashboard/{id}","method":"put","name":"update","description":"Update an existing admin dashboard resource identified by its unique ID. It allows system administrators to modify properties such as the dashboard name and description, thereby managing the configuration and details of platform monitoring dashboards. The operation uses the \"shopping_mall_admin_dashboard\" Prisma schema, referencing the dashboard ID path parameter.\n\nSecurity considerations: Access restricted to users with the admin role to enforce control over administrative configurations.\n\nValidation ensures the dashboard exists, the provided ID is valid UUID format, and modifications adhere to unique name constraints.\n\nSuccessful execution returns the updated admin dashboard entity including updated timestamps. Errors may include not found, unique constraint violations, or validation errors.\n\nThis operation complements dashboard creation and supports full lifecycle management of admin dashboard entities.","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/adminDashboard","method":"post"},"description":"Admin dashboard must be created before it can be updated"}]},{"specification":"This operation deletes a specific admin dashboard record identified by the dashboard ID. The admin dashboard entity provides administrators with comprehensive insights into platform operations including orders, users, and system statuses. The deletion operation permanently removes the admin dashboard record and all associated data from the database. This is a hard delete operation since the Prisma schema for shopping_mall_admin_dashboard includes a soft delete 'deleted_at' field, but this endpoint is designed to permanently erase the resource as per business rules. Only authenticated users with the 'admin' role are authorized to perform this operation.","path":"/shoppingMall/admin/adminDashboard/{id}","method":"delete","summary":"Delete a specific admin dashboard by ID","description":"This DELETE operation removes the admin dashboard identified by the given ID. It is intended for use by system administrators to clean up or remove obsolete dashboard configurations.\n\nSecurity and authorization are critical as this operation modifies sensitive administrative views and data. Only users with the 'admin' role may invoke this endpoint.\n\nThe operation is directly related to the 'shopping_mall_admin_dashboard' table in the Prisma schema. Deletion is a hard delete that permanently removes the record. No request body is required.\n\nRelated operations include retrieving dashboard details (GET) and listing dashboards (PATCH).\n\nUpon success, the record is irrevocably removed and no response body is returned. Errors include not found and unauthorized access.\n\nPath parameter 'id' must be a valid UUID representing the dashboard to delete.","parameters":[{"name":"id","description":"Unique identifier of the admin dashboard to delete","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseAdminDashboard","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/adminDashboard","method":"post"},"description":"Admin dashboard must be created before it can be deleted"}]},{"specification":"This operation retrieves a paginated and filtered list of audit logs capturing administrative actions, system events, and user activities related to orders, products, users, and other entities. Audit logs are essential for compliance and troubleshooting. The operation supports search, filters, pagination, and sorting parameters in the request body.\n\nThe underlying Prisma table is 'shopping_mall_audit_logs' which records admin_id, entity_id, action description, timestamp, and optional details. Related entities include admins and orders.\n\nAuthorization restricts access to users with 'admin' role.\n\nThe success response returns paginated audit log entries including admin references and event metadata.","path":"/shoppingMall/admin/auditLogs","method":"patch","summary":"Retrieve paginated list of audit logs with filtering and search","description":"Retrieve a filtered, paginated list of audit logs capturing platform administrative and user events for monitoring, analytics, and compliance purposes.\n\nThis operation supports complex search parameters specified in the request body such as admin filtering, date ranges, and action keywords.\n\nAudit logs integrate with the 'shopping_mall_audit_logs' table in the Prisma schema and include references to related administrators and entities.\n\nOnly users with the 'admin' role are authorized to access this sensitive log data.\n\nThe response includes a pagination container with audit log entries summarized for efficient consumption.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit logs","typeName":"IShoppingMallAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching search criteria","typeName":"IPageIShoppingMallAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"indexAuditLogs","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must exist before audit logs related to administrative actions can be retrieved."}]},{"specification":"This operation retrieves detailed information about a specific audit log entry from the shopping mall platform's audit log records. Each audit log captures immutable historical details of administrative actions, system events, and user activities for compliance and troubleshooting. The logged data includes references to the responsible admin and affected entities such as orders, providing traceability in the system. The operation only allows retrieval by a valid audit log unique identifier (UUID).","description":"Retrieve a specific audit log record by its unique identifier to obtain comprehensive details of administrative or system actions related to the e-commerce shopping mall platform.\n\nThis operation requires no special authentication roles as audit logs might be accessible to authorized system services or monitoring tools.\n\nAudit logs contain references to administrators and affected entities, enabling detailed tracking of platform activities for compliance and security auditing.\n\nThe response includes all available audit log information, including action descriptions, timestamps, and any additional metadata.\n\nProper error handling is expected if the audit log ID does not exist or is invalid.","summary":"Retrieve detailed information for a single audit log entry","parameters":[{"name":"id","description":"Unique identifier of the audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log record matching the specified ID","typeName":"IShoppingMallAuditLog"},"authorizationRoles":[],"path":"/shoppingMall/auditLogs/{id}","method":"get","name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation fetches detailed information of a specific audit log record by its unique ID. The audit log captures immutable historical records of administrative actions, system events, and user activities. It references administrators and affected entities to provide traceability. This endpoint corresponds to the shopping_mall_audit_logs table in the Prisma schema and returns all fields associated with a single audit log entry.","description":"Retrieve full details of a specific audit log entry identified by its unique ID. Audit logs provide a comprehensive tracking record of system administration and user actions for purposes including compliance, security auditing, and troubleshooting. This operation is intended for administrators or authorized users with privileges to review system logs.\n\nSecurity considerations include enforcing authorization as only users with admin roles or specific audit permissions should access audit logs. The operation safely exposes non-sensitive audit information and associated references to admins and does not permit modifications.\n\nThe audit log entry includes information about the admin user who performed the action, the specific action description, the timestamp of the action, any related entity IDs (such as orders), and optional detailed metadata. This entry maintains a permanent historical record with no modification capability.\n\nThis operation requires a path parameter 'id' which uniquely identifies the audit log record. The response returns the complete audit log object including creation timestamps and possible null fields for optional metadata. Error handling includes not found or unauthorized access responses.","summary":"Retrieve detailed information of a specific audit log by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Audit log information including admin reference, action performed, timestamp, and additional details","typeName":"IShoppingMallAuditLog"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/auditLogs/{id}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must exist to have permission to retrieve audit log details."}]},{"specification":"This operation provides a filtered and paginated list of administrative reports which include sales data, user activity summaries, and inventory status reports. The reports are intended for administrative users to gain insight into system operations and business analytics. The reports can be filtered and sorted based on criteria supplied in the request body.\n\nThis endpoint corresponds to the shopping_mall_reports table in the Prisma schema and supports complex search queries with pagination and sorting. Only authorized admin users may access the reports list.","description":"Search and retrieve a paginated list of administrative reports for business analysis and operational insights. The search criteria may include filters by report type, creation date range, and generated administrator.\n\nThe response provides a paginated collection of report summaries with metadata such as report name, type, creator, and timestamps. This allows admins to efficiently review and select reports relevant to their tasks.\n\nSecurity is enforced so that only users with the admin role can access this information. No modification of report data is possible via this endpoint, which serves read-only purposes.\n\nThe operation supports complex search parameters in the request body including pagination controls. This enables scalable and efficient data retrieval in large datasets.\n\nThis operation facilitates integration with the reporting dashboards in the admin console and supports downstream analytics and business intelligence workflows.","summary":"Retrieve filtered and paginated list of administrative reports","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering reports","typeName":"IShoppingMallReport.IRequest"},"responseBody":{"description":"Paginated list of reports matching search criteria","typeName":"IPageIShoppingMallReport.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/reports","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must be created before generating reports linked to the admin."}]},{"specification":"This operation retrieves a detailed report entity by its unique identifier from the shopping mall's administrative reporting system. It accesses data from the shopping_mall_reports table which stores reports generated by administrators capturing sales data, user activity summaries, and inventory statuses. Reports have attributes such as report_name, report_type, content_uri, and metadata including creation, update, and soft deletion timestamps. The retrieved report includes all associated information for administrative review and analysis.","description":"Retrieve a specific administrative report by its unique ID from the shopping mall's reporting system. This API operation allows admins to fetch detailed report data including the report's name, type, content URI for download or viewing, and timestamps for creation and updates.\n\nSecurity considerations require that only authenticated administrators can access report details. Access is restricted to users with the admin role to ensure sensitive business analytics are protected.\n\nThe operation queries the shopping_mall_reports table, uniquely identified by report ID. It returns all stored attributes including associated admin who generated the report if any.\n\nThe operation performs a direct lookup without modification, ensuring read-only access. If the report ID does not exist, the operation typically returns a not found error.\n\nThis endpoint pairs with the report creation API which accepts new report generation requests.\n\nHard delete is not applicable here; soft delete is respected by excluding deleted records if implemented in the service logic.","summary":"Retrieve a specific admin report by ID","parameters":[{"name":"id","description":"Unique identifier of the report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed admin report information","typeName":"IShoppingMallReport"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/reports/{id}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/reports","method":"post"},"description":"The report must be created before it can be retrieved by ID."},{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must exist before accessing reports linked to the admin."}]},{"specification":"This operation creates a new administrative report record in the shopping mall platform's reporting system. It inserts a new entry into the shopping_mall_reports table which documents reports generated for sales data, user activity summaries, and inventory status. Required information includes the report name, type, and optionally the content URI if the report is pre-generated. The operation associates the report with the admin creator's identity and timestamps for creation and updates.\n\nSecurity enforcement restricts this operation to users having admin privileges to prevent unauthorized report generation. Input validation ensures uniqueness of report_name and correctness of report_type.\n\nOn successful creation, the operation returns the created report entity with all its attributes for confirmation.\n\nSoft deletes influence data lifecycle but do not affect creation logic directly.\n\nThis endpoint complements the report retrieval API allowing asynchronous report creation and later fetching.","description":"Create a new administrative report in the shopping mall platform. The request must include the report name and type, optionally with a URI pointing to the generated report content.\n\nOnly authenticated administrators may perform this operation to maintain data security and integrity.\n\nThe response includes the full details of the created report including ID and timestamps.\n\nValidation enforces unique report names and valid report types.\n\nErrors occur if a duplicate report name is submitted or required fields are missing.\n\nNo soft delete or update is performed in this operation.\n\nThe created report may be subsequently retrieved via its unique ID using the GET report endpoint.","summary":"Create a new admin report","parameters":[],"requestBody":{"description":"Details of the new admin report to be created","typeName":"IShoppingMallReport.ICreate"},"responseBody":{"description":"Created admin report details","typeName":"IShoppingMallReport"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/reports","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator account must exist before creating an administrative report to associate the report with a valid admin."}]},{"specification":"This operation updates an existing administrative report identified by its ID within the 'shopping_mall_reports' table in the Prisma schema. The operation allows modification of report details such as the report name, type, and content URI while ensuring the record remains consistent with business expectations. It supports updating timestamps and enforces uniqueness constraints on the report name to maintain data integrity. The endpoint requires the 'admin' role to access and modify reports, ensuring only authorized administrators can update report information.","path":"/shoppingMall/admin/reports/{id}","method":"put","summary":"Update an admin report by ID","description":"Update an existing administrative report's details by report ID. This includes changing the report's name, type, and content URI to reflect new insights or analytics data.\n\nOnly users with the 'admin' role are authorized to perform this update to maintain platform security and data integrity.\n\nThe operation interfaces directly with the 'shopping_mall_reports' table, respecting all constraints such as unique report names and soft deletion timestamps.\n\nThis operation requires the full report payload in the request body, adhering to the 'IShoppingMallReport.IUpdate' DTO structure. The response returns the updated report entity.\n\nValidation includes uniqueness of report name and mandatory fields to prevent corrupted data entries.\n\nError handling covers scenarios such as updating non-existent reports and invalid data formats.\n","parameters":[{"name":"id","description":"Target report's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Report update information","typeName":"IShoppingMallReport.IUpdate"},"responseBody":{"description":"Updated report information","typeName":"IShoppingMallReport"},"authorizationType":null,"authorizationRole":"admin","name":"updateReport","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/admins","method":"post"},"description":"Administrator must exist before updating an administrative report to ensure valid generated_by_admin_id reference."}]},{"specification":"This operation deletes an existing administrative report identified by its ID from the 'shopping_mall_reports' table. It performs a hard delete, permanently removing the report from the platform's database as the schema does not support soft deletion for this entity.\n\nOnly administrators with the 'admin' role may execute this operation to prevent unauthorized data loss. This endpoint serves as the final removal method for obsolete or incorrect reports.\n\nThe operation requires the report ID as a path parameter. No request body is needed. No response body is returned upon successful deletion.\n","path":"/shoppingMall/admin/reports/{id}","method":"delete","summary":"Delete an admin report by ID","description":"Permanently remove an admin report from the system by its unique ID.\n\nOnly users with the 'admin' role have permission to delete reports to ensure data is managed securely and responsibly.\n\nThis operation directly removes the record from the 'shopping_mall_reports' table as there is no soft delete column to mark the report as inactive.\n\nCare should be taken to avoid accidental deletions, as this action cannot be undone.\n\nThe endpoint accepts the report ID as a path parameter. There is no request body or response body for this operation.\n\nError handling includes cases where the specified report does not exist.\n","parameters":[{"name":"id","description":"Target report's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseReport","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/reports","method":"post"},"description":"Admin report must exist before it can be deleted"}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated user with access to browse the product catalog, search products, and register an account.","kind":"guest"},{"name":"customer","description":"Authenticated buyer who can manage their profile including addresses, add products to cart and wishlist, place orders, track orders, write reviews, and request cancellations or refunds.","kind":"member"},{"name":"seller","description":"Authenticated seller who can manage their products including SKUs, inventory levels, view orders related to their products, and update shipping status.","kind":"member"},{"name":"admin","description":"System administrator with full permissions to manage users, products, orders, reviews, and overall platform configuration.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIShoppingMallCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCategory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallConfiguration.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallConfiguration.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallGuest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallGuest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomer.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomer.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSeller":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSeller"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProduct.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProduct.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallShoppingMallSku.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallShoppingMallSku.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallInventory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallInventory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallShoppingCart.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallShoppingCart.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCartItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallWishlist.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallWishlist.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallWishlistItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallWishlistItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrder.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrder.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCancellationRequest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCancellationRequest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductReview.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductReview.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReviewModeration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReviewModeration"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdminDashboard.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdminDashboard.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IShoppingMallGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"Unique session token identifying the guest session."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the guest accessed the system."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string of the guest session."}},"required":["session_token"],"description":"Information required to register a new guest session\n\nThis schema defines the payload for creating a new guest session. The required field is the unique session token. Optional fields include IP address and user agent string to describe guest environment without authenticating.","x-autobe-prisma-schema":"shopping_mall_guests"},"IShoppingMallGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest session record"},"session_token":{"type":"string","description":"Unique session token identifying the guest session"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the guest accessed the system, nullable"},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string of the guest session, nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this guest record was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of this guest record, null if active"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","session_token","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as guest join or token refresh.\n\nThe guest session id uniquely identifies the session associated with the tokens.\n","x-autobe-prisma-schema":"shopping_mall_guests"},"IShoppingMallGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued to the guest for session renewal."}},"required":["refresh_token"],"description":"Payload for refreshing JWT tokens for a guest session."},"IShoppingMallCustomer.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's unique email address used for login and notifications."},"password":{"type":"string","description":"Customer's password in plain text. The backend will handle hashing securely."}},"required":["email","password"],"description":"Request body for customer registration containing the email and plaintext password."},"IShoppingMallCustomer.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated customer user"},"email":{"type":"string","format":"email","description":"Registered email address of the authenticated customer"},"password_hash":{"type":"string","description":"Hashed password used for secure authentication. Stored securely and never exposed in responses."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional nickname or display name of the customer"},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional contact phone number in E.164 format"},"status":{"type":"string","description":"Status of the customer's account, such as 'active', 'inactive', or 'suspended'"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the customer account was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the customer account was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion, if applicable"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"__typename":{"type":"string","description":"Type name discriminator for the authorized customer object"}},"required":["id","email","password_hash","status","created_at","updated_at","token"],"description":"Authorization response containing JWT token and customer user information.\n\nThis response is returned after a successful authentication operation such as login or token refresh.\n\nIt includes essential user properties to identify the authenticated customer while omitting sensitive data like password hashes."},"IShoppingMallCustomer.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's email address used for login"},"password":{"type":"string","format":"password","description":"Customer's plain-text password for authentication"},"__typename":{"type":"string","description":"Type name discriminator for the login request object"}},"required":["email","password","__typename"],"description":"Login request payload containing the customer's email and password.\n\nThis is a standard authentication request that the customer submits to initiate a login operation.\n\nThe password is sent in plain text and will be securely hashed by the backend during verification.\n\nThis payload excludes any sensitive data and is designed for secure transmission over encrypted connections."},"IShoppingMallCustomer.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token used to obtain new JWT access tokens. Must be securely stored and transmitted in authorization requests."}},"required":["refreshToken"],"description":"Request schema for refreshing an authenticated ShoppingMall customer's JWT tokens using a valid refresh token. This object contains the refreshToken property required for renewal of authentication tokens to maintain a secure, continuous session.","title":"ShoppingMallCustomer.IRefresh","x-autobe-prisma-schema":"shopping_mall_customers"},"IShoppingMallSeller.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address for the seller used for login, notifications, and communication. This must be a valid email address conforming to standard formats. Used as a unique business identifier for seller accounts.","format":"email"},"password_hash":{"type":"string","description":"Hashed password for the seller account. The hash is stored securely to enable secure authentication of the seller's identity within the shopping mall platform. Password hashing and salting must comply with platform security policies."},"company_name":{"oneOf":[{"type":"string","description":"Seller's legal or brand company name. This field is optional but useful for identifying the selling entity within the marketplace. Max length should be reasonable to accommodate typical business names."},{"type":"null"}],"description":"Seller's legal or brand company name. This field is optional but useful for identifying the selling entity within the marketplace. Max length should be reasonable to accommodate typical business names."},"contact_name":{"oneOf":[{"type":"string","description":"Primary contact person name for the seller company or entity. This is optional and provides a means of personal contact or communication."},{"type":"null"}],"description":"Primary contact person name for the seller company or entity. This is optional and provides a means of personal contact or communication."},"phone_number":{"oneOf":[{"type":"string","description":"Contact phone number for the seller in E.164 format, allowing international calls. This optional field supports seller communications and notifications."},{"type":"null"}],"description":"Contact phone number for the seller in E.164 format, allowing international calls. This optional field supports seller communications and notifications."},"status":{"oneOf":[{"const":"active","description":"Current status of the seller account indicating active, suspended, or other lifecycle states. This field supports platform user management and administrative control. It must be set upon creation and conform to platform-defined status values. Example values: 'active', 'suspended'."},{"const":"suspended","description":"Current status of the seller account indicating active, suspended, or other lifecycle states. This field supports platform user management and administrative control. It must be set upon creation and conform to platform-defined status values. Example values: 'active', 'suspended'."}],"description":"Current status of the seller account indicating active, suspended, or other lifecycle states. This field supports platform user management and administrative control. It must be set upon creation and conform to platform-defined status values. Example values: 'active', 'suspended'."}},"required":["email","password_hash","status"],"description":"Creation request schema for a new shopping mall seller entity. This includes critical identity and authentication fields such as unique email, password hash, optional company and contact information, and a status enumeration flag enforcing valid account states at creation. The schema matches the shopping_mall_sellers table constraints and business rules for secure seller account creation.","title":"ShoppingMallSeller.ICreate","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallSeller.IAuthorized":{"type":"object","description":"Authorization response containing token information for authenticated sellers.\n\nThis response includes core seller identity fields such as id and email, as well as operational status.\n\nSensitive fields such as password hashes are excluded from this response.\n\nThe token and refresh_token properties represent JWT tokens issued to the seller upon successful authentication.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the seller."},"email":{"type":"string","format":"email","description":"Unique seller email address used for login and notifications."},"password_hash":{"type":"string","description":"Hashed password for secure seller authentication."},"company_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Legal or brand name of the seller company, optionally provided."},"contact_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Main contact person's name for the seller, optionally provided."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number of the seller in E.164 format, optionally provided."},"status":{"type":"string","description":"Current status of the seller account such as 'active' or 'suspended'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the seller account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the seller record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of the seller account. Null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Refresh token for renewing access tokens, may be null if not applicable."}},"required":["id","email","password_hash","status","created_at","updated_at","token"]},"IShoppingMallSeller.ILogin":{"type":"object","description":"Login request payload for sellers, including email and password.\n\nIt optionally supports captcha and two-factor authentication fields to enhance security.\n\nThe rememberMe field allows for extended session duration if true.\n\nMetadata can capture additional client information for logging or detection.","properties":{"email":{"type":"string","format":"email","description":"Seller email address used for login."},"password":{"type":"string","description":"Plain text password for authentication."},"captchaChallenge":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional captcha challenge response to prevent automated login attempts."},"captchaResponse":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional captcha verification response code."},"rememberMe":{"type":"boolean","description":"If true, keep the user logged in for an extended period."},"metadata":{"type":"object","description":"Optional metadata including device and location information.","properties":{},"required":[]},"twoFactorCode":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional 2FA code for multi-factor authentication."}},"required":["email","password"]},"IShoppingMallSeller.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token received during previous authorization. Used to obtain new access and refresh tokens for prolonged session continuity."}},"required":["refreshToken"],"description":"Request body schema for refreshing JWT tokens for an authenticated seller user.\n\nThis schema accepts a single required property `refreshToken`, which should be the valid refresh token received during a prior authorization. Using this token, the API issues new JWT tokens without requiring the user's credentials again.\n\nSecurity Note: Refresh tokens must be kept confidential and are used only to extend session lifetime securely.\n\nThis schema corresponds to the expected request payload on the `/auth/seller/refresh` POST endpoint.\n","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address for the administrator account"},"password_hash":{"type":"string","description":"Hashed password string for authentication"},"full_name":{"oneOf":[{"type":"string","description":"Full legal name of the administrator"},{"type":"null"}],"description":"Full legal name of the administrator"},"phone_number":{"oneOf":[{"type":"string","description":"Administrator contact phone number"},{"type":"null"}],"description":"Administrator contact phone number"},"status":{"oneOf":[{"const":"active","description":"Account status"},{"const":"suspended","description":"Account status"},{"const":"disabled","description":"Account status"}],"description":"Account status"}},"required":["email","password_hash","status"],"description":"Data required to create a new administrator account"},"IShoppingMallAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin user"},"email":{"type":"string","format":"email","description":"Administrator's email address used for login and notifications"},"password_hash":{"type":"string","description":"Hashed password string used for authentication. This field must be securely stored and not exposed.","writeOnly":true},"full_name":{"oneOf":[{"type":"string","description":"Full legal name of the administrator"},{"type":"null"}],"description":"Full legal name of the administrator"},"phone_number":{"oneOf":[{"type":"string","description":"Contact phone number in E.164 format"},{"type":"null"}],"description":"Contact phone number in E.164 format"},"status":{"oneOf":[{"const":"active","description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."},{"const":"suspended","description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."},{"const":"disabled","description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."}],"description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of the admin account or null if active"},"shopping_mall_report_count":{"oneOf":[{"type":"integer","description":"Count of reports generated by this admin"},{"type":"null"}],"description":"Count of reports generated by this admin"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","status","created_at","updated_at","token"],"description":"Authorization response containing JWT token for an authenticated administrator"},"IShoppingMallAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address for administrator login"},"password":{"type":"string","description":"Password in plain text for authentication"},"type":{"const":"admin","description":"Type discriminator for administrator login"},"remember_me":{"oneOf":[{"type":"boolean","description":"Flag to indicate if login session should be persistent"},{"type":"null"}],"description":"Flag to indicate if login session should be persistent"}},"required":["email","password","type"],"description":"Administrator login request payload containing credentials"},"IShoppingMallAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string to be exchanged for new access token"},"token":{"type":"string","description":"Access token string, JWT formatted"},"token_type":{"const":"Bearer","description":"Type of token issued, typically Bearer"},"expires_in":{"type":"integer","format":"int32","description":"Lifetime in seconds of the access token"},"scope":{"type":"string","description":"Scopes assigned to the token, space-separated"}},"required":["refresh_token","token","token_type","expires_in","scope"],"description":"Payload used for refreshing the admin JWT access token and renewing session. Contains refresh token, new access token, token type, expiry, and scope details.","x-autobe-prisma-schema":"ShoppingMallAdmin"},"IShoppingMallCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number for pagination control of results."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of items to return per page."},"search":{"type":"string","description":"Text string to search by matching category code or name substrings."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the parent category to filter by. Null indicates root categories."},"sort":{"type":"string","description":"Sort order of the categories. Acceptable values: 'asc', 'desc'."}},"required":[],"description":"Search criteria and pagination parameters for product category filtering"},"IShoppingMallCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key unique identifier of the product category."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent category's unique identifier. Null for root categories."},"code":{"type":"string","description":"Unique code identifying the category."},"name":{"type":"string","description":"Name of the product category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the product category."},"display_order":{"type":"integer","description":"Display order for UI sorting of categories."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this category was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this category was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion; null if category is active."}},"required":["id","code","name","display_order","created_at","updated_at"],"description":"Represents a product category in the shopping mall, including optional hierarchical parent linkage, unique code, display name, description, display order for sorting, and timestamps for creation, update, and soft deletion. Supports nested category structures for product classification."},"IShoppingMallCategory.ICreate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent category's unique identifier. Null for root categories."},"code":{"type":"string","description":"Unique code for the new category; must be unique in the system."},"name":{"type":"string","description":"Name of the new product category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description provided for the new category."},"display_order":{"type":"integer","description":"Display order integer for the new category, used for sorting in UI."}},"required":["code","name","display_order"],"description":"Create DTO for new product category including required unique code, name, and display order. Optional hierarchical parent category linkage and description fields may be provided. This structure supports creation of new categories in the shopping mall's catalog system."},"IShoppingMallCategory.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Parent category's unique identifier. Nullable for root categories."},"code":{"type":"string","description":"Unique code identifying the category."},"name":{"type":"string","description":"Category display name."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the category."},"display_order":{"type":"integer","format":"int32","description":"Display order for sorting categories."}},"required":["code","name","display_order"],"description":"Object representing the updatable fields of a shopping mall product category. Allows updating parent linkage, unique code, name, description, and display order of the category.\n\nThe 'code' must be unique and 'display_order' determines presentation order of categories."},"IShoppingMallConfiguration.IRequest":{"type":"object","properties":{"key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional key filter for configuration search."},"category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category grouping filter."},"enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by enabled status."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of records per page."}},"required":[],"description":"Request object for searching and paginating shopping mall configuration records."},"IShoppingMallConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the configuration record."},"key":{"type":"string","description":"Unique configuration key.\n\nThis serves as the identifier for the configuration setting within the system."},"value":{"type":"string","description":"Configuration value as a string.\n\nThis holds the value assigned to the configuration key."},"category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category grouping for configurations.\n\nUsed to logically group configurations for management and retrieval."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the configuration parameter.\n\nProvides additional context or information about the configuration setting."},"enabled":{"type":"boolean","description":"Flag indicating if the configuration is active.\n\nDetermines whether this configuration is currently enabled and in effect."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp.\n\nThe datetime when this configuration record was created."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp.\n\nThe datetime when this configuration record was last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active.\n\nIf set, indicates this configuration has been soft deleted."}},"required":["id","key","value","enabled","created_at","updated_at"],"description":"System-wide configuration parameters and settings for the shopping mall\nplatform. Stores key-value pairs defining various operational parameters.\nSupports categorization, description, and status flags. Enables soft\ndelection and tracks creation and update timestamps.","x-autobe-prisma-schema":"shopping_mall_configurations"},"IShoppingMallConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Unique configuration key.\n\nThis serves as the identifier for the configuration setting within the system."},"value":{"type":"string","description":"Configuration value as a string.\n\nThis holds the value assigned to the configuration key."},"category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category grouping for configurations.\n\nUsed to logically group configurations for management and retrieval."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the configuration parameter.\n\nProvides additional context or information about the configuration setting."},"enabled":{"type":"boolean","description":"Flag indicating if the configuration is active.\n\nDetermines whether this configuration is currently enabled and in effect."}},"required":["key","value","enabled"],"description":"Create DTO for System-wide configuration.\n\nRequired fields are key, value, and enabled flag to ensure minimal valid configuration creation.\n\nOptional fields include category and description to group and describe the configuration.\n\nThe system manages timestamps and soft deletion internally during creation.\n","x-autobe-prisma-schema":"shopping_mall_configurations"},"IShoppingMallConfigurations.IUpdate":{"type":"object","properties":{"key":{"type":"string","description":"Unique configuration key.\n\nThe unique key identifies the system configuration parameter.\n\nThis key is immutable after creation and serves as the primary identifier.\n\nWhen updating, the key should not be included as it is not mutable."},"value":{"type":"string","description":"Configuration value as a string.\n\nThe value holds the active setting or parameter used by the application.\n\nMust be valid according to the intended configuration key semantics."},"category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category grouping for configurations.\n\nUsed to organize configuration keys into logical categories for easier management."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the configuration parameter.\n\nProvides human-readable explanation of the key's purpose and usage."},"enabled":{"type":"boolean","description":"Flag indicating if the configuration is active.\n\nWhen true, the system applies this configuration;\nWhen false, the configuration is ignored or considered inactive."}},"required":["value","enabled"],"description":"Update information for a shopping mall system configuration.\n\nFields that can be changed include value, category, description, and enabled status.\n\nThe key field is not mutable and should not be included in updates.\n\nUse this type to update existing configurations with new values or metadata.\n"},"IShoppingMallConfigurations":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the configuration record.\n\nUsed internally to track configuration entries and facilitate updates or deletions."},"key":{"type":"string","description":"Unique configuration key.\n\nThe unique key identifies this system configuration parameter.\n\nUsed as a primary business identifier for system settings."},"value":{"type":"string","description":"Configuration value as a string.\n\nThis string holds the actual setting or parameter value to apply in the system."},"category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category grouping for configurations.\n\nCategorizes configuration keys for logical organization and filtering."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the configuration parameter.\n\nProvides human-readable explanation aiding platform administrators."},"enabled":{"type":"boolean","description":"Flag indicating if the configuration is logically enabled.\n\nOnly enabled configurations influence platform behaviors."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was created.\n\nUsed for auditing and historical tracking."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was last updated.\n\nUsed for auditing and synchronization purposes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion of the configuration.\n\nWhen null, indicates the record is not deleted.\nWhen non-null, indicates soft deletion status."}},"required":["id","key","value","enabled","created_at","updated_at"],"description":"Represents a system-wide configuration parameter in the shopping mall platform database.\n\nConfigurations control operational parameters and feature toggles used by the platform.\n\nEach configuration has a unique key, associated value, and optional metadata for categorization and description.\n\nFlags indicate if the configuration is enabled and track creation, update, and optional soft deletion timestamps.\n\nSystem administrators manage configurations to alter platform behavior without code changes."},"IShoppingMallGuest.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination, must be a positive integer","minimum":1},"limit":{"type":"integer","description":"Number of items per page, maximum allowed to prevent overload","minimum":1,"maximum":100},"search":{"type":"string","description":"Optional search term to filter guest sessions by session token or user agent"},"ipAddress":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter guest sessions by IP address, format IPv4 or IPv6"},"userAgent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter guest sessions by user agent or portion thereof"},"sortBy":{"oneOf":[{"const":"created_at","description":"Field to sort by, either created_at or updated_at"},{"const":"updated_at","description":"Field to sort by, either created_at or updated_at"}],"description":"Field to sort by, either created_at or updated_at"},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort order direction"},{"const":"desc","description":"Sort order direction"}],"description":"Sort order direction"}},"required":["page","limit"],"description":"Request parameters for listing shopping mall guest sessions with search, filter, pagination, and sorting controls."},"IShoppingMallGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest session"},"session_token":{"type":"string","description":"Unique session token identifying the guest session"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the guest accessed the system, nullable"},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string of the guest session, nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this guest record was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of this guest record, null if active"}},"required":["id","session_token","created_at","updated_at"],"description":"Guest user entity representing an unauthenticated visitor session. This entity track unique session tokens, client IP, user agent, and timestamps for creation and modification.\n\nThis schema directly corresponds to the shopping_mall_guests table in the Prisma database. It excludes sensitive information as guests do not have authentication credentials.\n\nAll properties have detailed descriptions referencing the original Prisma schema columns."},"IShoppingMallGuest.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"Unique session token identifying the guest session."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the guest accessed the system."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string of the guest session."}},"required":["session_token"],"description":"Properties for updating an existing guest session, encompassing session token, IP address, and user agent information."},"IShoppingMallCustomer.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0,"format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"Number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for filtering customer entries."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Account status filter (e.g., active, inactive)."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Nickname filter; supports partial matching."}},"description":"Query parameters to filter and paginate through customers, supporting search on nicknames and filtering by status. Used in admin views for customer management.","required":[]},"IShoppingMallCustomer":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Customer's unique identifier, generated by the system as a UUID"},"email":{"type":"string","description":"Customer's unique email address used for login and notifications. Must be valid and unique in the system."},"password_hash":{"type":"string","description":"Hashed password used for secure authentication. Stored securely and never exposed in responses."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional nickname or display name of the customer for UI display and personalization."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer's contact phone number in E.164 format, optional and used for notifications and verification."},"status":{"type":"string","description":"Status of the customer account, e.g., 'active', 'inactive', or 'suspended'. Denotes account's operational state."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when the customer account was created in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp marking the last update time of the customer account in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp indicating when the customer account was deleted, if applicable. Null if active."}},"required":["id","email","password_hash","status","created_at","updated_at"],"description":"Customer user accounts representing buyers on the shopping mall platform. Stores authentication credentials including unique email and securely hashed password. Includes optional contact information and account status management. Timestamps aid in auditing and state tracking. Soft deletion supported via deleted_at timestamp."},"IShoppingMallCustomer.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the customer to be registered. Must be unique and well-formed."},"password_hash":{"type":"string","description":"Hashed password string to securely store user credentials. Password hashing is handled in the backend."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name or nickname of the customer."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional mobile phone number in E.164 format for customer notifications."},"status":{"type":"string","description":"Initial status of the customer account upon creation, e.g., 'active'."}},"required":["email","password_hash","status"],"description":"Request body structure for creating a new customer account in the shopping mall platform. Includes email and password hash for authentication setup. Optional fields allow specifying nickname and phone number. The status field denotes the initial state of the account, e.g., 'active'."},"IShoppingMallCustomer.IUpdate":{"type":"object","properties":{"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer's optional nickname or display name to personalize interactions. Nullable."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer's phone number in E.164 format for contact and notifications. Nullable."},"status":{"type":"string","description":"Current status of the customer account, controlling access and usability. Expected values include 'active', 'inactive', or 'suspended'. Required field to indicate account state."}},"required":["status"],"description":"DTO for updating shopping mall customer account information.\n\nIncludes modifiable contact/status fields.\n\nAll nullable fields accept explicit null values.","x-autobe-prisma-schema":"shopping_mall_customers"},"IShoppingMallSeller.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Seller email address for login and notifications. Supports partial match filtering; optional and nullable."},"company_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Seller company or brand name. Supports partial matching; optional and nullable."},"contact_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Main contact person's name for the seller. Optional and nullable, supports partial matching."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Seller contact phone number in E.164 format. Optional and nullable."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Seller account status such as 'active' or 'suspended'. Optional and nullable."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Flag indicating whether the seller's email is verified. Optional and nullable."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination, defaults to 1 if unspecified. Optional and nullable."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Number of records per page, max 100, defaults to 20. Optional and nullable."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort results by. Optional and nullable."},"order_direction":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort direction: 'asc' or 'desc'. Optional and nullable."}},"required":[],"description":"Request DTO for searching shopping mall sellers.\n\nSupports flexible filtering by partial matches and includes pagination and sorting parameters.\n\nAll fields are optional and nullable to allow free-form queries.\n\nFields respect schema definitions and include explicit null support where applicable.\n\nIntended for use by administrative or management interfaces.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallSeller":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","format":"email","description":"Seller's unique email address for login and notifications."},"password_hash":{"type":"string","description":"Hashed password for secure seller authentication."},"company_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Legal or brand name of the seller company."},"contact_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Main contact person name for the seller."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number of the seller in E.164 format."},"status":{"type":"string","description":"Current status of the seller account such as 'active' or 'suspended'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the seller account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the seller record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of the seller account. Null if active."}},"required":["id","email","password_hash","status","created_at","updated_at"],"description":"Seller accounts that manage product listings, SKUs, inventory, and orders for their products. Sellers require authentication with email and password hash. This table stores identity and authentication information for sellers as primary actors distinct from customers.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallSeller.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Seller's unique email address used for login. Immutable after creation, should not be updated through this endpoint."},"password_hash":{"type":"string","description":"Hashed password for secure seller authentication."},"company_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Legal or brand name of the seller company."},"contact_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Main contact person name for the seller."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number of the seller in E.164 format."},"status":{"type":"string","description":"Current status of the seller account such as 'active' or 'suspended'."}},"required":[],"description":"Update fields for seller account. Email is immutable and should not be changed via this update endpoint. All fields are optional for partial update.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallAdmin.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination, must be a positive integer","minimum":1},"limit":{"type":"integer","description":"Maximum number of records per page, must be a positive integer","minimum":1},"search":{"type":"string","description":"Search term to filter admin users by email or full name"},"status":{"type":"string","description":"Filter admin users by status, e.g., 'active', 'inactive', 'suspended'"},"orderBy":{"type":"string","description":"Field to sort admin users by"},"orderDirection":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'"},{"const":"desc","description":"Sort direction: 'asc' or 'desc'"}],"description":"Sort direction: 'asc' or 'desc'"}},"required":["page","limit"],"description":"Request parameters for searching and retrieving a paginated list of admin users with filtering and sorting control"},"IShoppingMallAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator"},"email":{"type":"string","format":"email","description":"Administrator's email address used for login and notifications"},"password_hash":{"type":"string","description":"Hashed password string used for authentication. This field must be securely stored and not exposed.","writeOnly":true},"full_name":{"oneOf":[{"type":"string","description":"Full legal name of the administrator"},{"type":"null"}],"description":"Full legal name of the administrator"},"phone_number":{"oneOf":[{"type":"string","description":"Contact phone number in E.164 format"},{"type":"null"}],"description":"Contact phone number in E.164 format"},"status":{"oneOf":[{"const":"active","description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."},{"const":"suspended","description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."},{"const":"disabled","description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."}],"description":"Current administrative account status such as 'active', 'suspended', or 'disabled'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of the admin account or null if active"},"shopping_mall_report_count":{"oneOf":[{"type":"integer","description":"Count of reports generated by this admin"},{"type":"null"}],"description":"Count of reports generated by this admin"}},"required":["id","email","password_hash","status","created_at","updated_at"],"description":"Administrator account entity representing system administrators managing the platform"},"IShoppingMallAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The administrator's unique email address for login and critical notifications."},"password_hash":{"type":"string","description":"Hashed password for secure admin authentication."},"full_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full legal name of the administrator."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number of the admin in E.164 format."},"status":{"type":"string","description":"Administrative account status, indicating if active, suspended, or disabled."}},"required":["email","password_hash","status"],"description":"Update an existing administrator account's information by specifying the admin's unique ID. This operation modifies the admin's full name, phone number, status, and password hash, allowing administrators to manage their own profile or other admin accounts with sufficient permissions.\n\nSecurity considerations mandate authenticated admin role access only. Email addresses are immutable through this endpoint to maintain identity integrity. The status field indicates account activity state, which affects login permissions.\n\nThis API interacts directly with the shopping_mall_admins Prisma table, respecting all relational and soft deletion logic. Updates to the password hash must follow security protocols outside this API scope.\n\nTypical usage scenarios include admin profile updates and account status changes. Validation errors will be returned if provided input values are invalid or violate unique constraints.\n\nNo request body changes other than defined fields are permitted. Error handling includes proper HTTP status codes and messages for unauthorized access or resource not found.\n"},"IShoppingMallProduct.IRequest":{"type":"object","properties":{"shopping_mall_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The category to which this product belongs. Nullable to include all categories."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The seller who owns this product. Nullable to include all sellers."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique business code identifying the product. Allows searching by product code."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The display name of the product. Allows substring search."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The lifecycle state of the product, e.g., Draft, Active, Inactive. Enables filtering by product status."},"limit":{"type":"integer","format":"int32","description":"Limit number of records returned in the page."},"page":{"type":"integer","format":"int32","description":"Page number for data pagination."}},"required":["limit","page"],"description":"Retrieve a paginated and filtered list of shopping mall products.\n\nSupports advanced search criteria including category filtering by shopping_mall_category_id, seller filtering by shopping_mall_seller_id, status filtering (e.g., Draft, Active, Inactive), and text search by product name.\n\nThe operation returns a paginated summary list of products matching the specified search criteria. Results are optimized for client-side consumption with essential properties only.\n\nThe API is publicly accessible to allow browsing without authentication.\n\nThis operation relates to detailed product retrieval endpoints that provide full product and SKU details."},"IShoppingMallProduct":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the product."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Identifier for the category this product belongs to."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Identifier for the seller of this product."},"code":{"type":"string","description":"Unique business code identifying the product."},"name":{"type":"string","description":"Display name of the product."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the product."},"status":{"type":"string","description":"Lifecycle state of the product, e.g., Draft, Active, Inactive."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the product was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the product was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the product was soft deleted."}},"required":["id","shopping_mall_category_id","shopping_mall_seller_id","code","name","status","created_at","updated_at"],"description":"Represents products listed by sellers on the shopping mall platform. Each product belongs to a category and has various SKUs representing different variants. Supports product lifecycle states and soft deletion. Includes timestamps for creation and updates.\n\n@namespace Catalog\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IShoppingMallProduct.ICreate":{"type":"object","properties":{"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Identifier for the category this product belongs to."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Identifier for the seller of this product."},"code":{"type":"string","description":"Unique business code identifying the product."},"name":{"type":"string","description":"Display name of the product."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the product."},"status":{"type":"string","description":"Lifecycle state of the product, e.g., Draft, Active, Inactive."}},"required":["shopping_mall_category_id","shopping_mall_seller_id","code","name","status"],"description":"Create a new product record with required data elements including category association, seller ownership, and unique code. This operation requires careful validation of the category ID and seller ID to maintain referential integrity with shopping_mall_categories and shopping_mall_sellers tables respectively.\n\nSecurity restrictions should ensure only authorized roles (such as sellers or admins) perform creation.\n\nThe system will enforce uniqueness of the product code and prevent duplicates.\n\nResponse returns the complete newly created product entity including autogenerated timestamps and default status values.\n\nErrors will be returned if required fields are missing, uniqueness is violated, or foreign keys are invalid.\n\n@namespace Catalog\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IShoppingMallProduct.IUpdate":{"type":"object","properties":{"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Category ID to which this product belongs, referencing shopping_mall_categories table."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller ID who owns this product, referencing shopping_mall_sellers table."},"code":{"type":"string","description":"Unique business code identifying the product."},"name":{"type":"string","description":"Display name of the product."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the product."},"status":{"type":"string","description":"Lifecycle state of the product, e.g., Draft, Active, Inactive."}},"required":[],"description":"Update schema for shopping mall product.\n\nAllows modifying category association, seller ownership, product code, name, description, and status while respecting database foreign key constraints and uniqueness."},"IShoppingMallShoppingMallSku.IRequest":{"type":"object","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product ID to which SKUs belong. Filter SKUs for the given product."},"sku_code":{"type":"string","description":"SKU code within the product for filtering or searching."},"status":{"type":"string","description":"Lifecycle state filter for SKUs, such as Draft, Active, Inactive."},"min_price":{"type":"number","format":"double","description":"Minimum price filter for SKUs."},"max_price":{"type":"number","format":"double","description":"Maximum price filter for SKUs."},"page":{"type":"integer","format":"uint32","description":"Page number for pagination."},"limit":{"type":"integer","format":"uint32","description":"Number of items per page."}},"required":[],"description":"Request schema for searching and filtering SKUs with pagination."},"IShoppingMallSku":{"type":"object","x-autobe-prisma-schema":"shopping_mall_skus","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the SKU within the shopping mall system."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"The product to which this SKU belongs. References shopping_mall_products.id.\n\nEstablishes relationship between SKU and product."},"sku_code":{"type":"string","description":"Unique SKU code within the product.\n\nBusiness identifier for variant management."},"price":{"type":"number","format":"double","description":"Retail price of this SKU.\n\nRepresents the selling price for this specific product variant."},"weight":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Weight of the SKU for shipping calculations.\n\nOptional numeric value representing the product variant's weight."},"status":{"type":"string","description":"Lifecycle state of the SKU, e.g., Draft, Active, Inactive.\n\nUsed to manage SKU availability and visibility."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the SKU was created.\n\nISO 8601 datetime format of creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the SKU was last updated.\n\nISO 8601 datetime format of last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the SKU was soft deleted.\n\nNullable to indicate active or deleted state."}},"required":["id","shopping_mall_product_id","sku_code","price","status","created_at","updated_at"],"description":"Represents a product SKU (stock keeping unit) that specifies a variant such as color or size for a product in the shopping mall platform.\n\nIncludes pricing, status, inventory linkage, and timestamps for tracking SKU lifecycle and modifications."},"IShoppingMallSku.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_skus","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"The product to which this SKU belongs. References shopping_mall_products.id.\n\nRequired for associating SKU to the correct product."},"sku_code":{"type":"string","description":"Unique SKU code within the product.\n\nUsed to differentiate variants."},"price":{"type":"number","format":"double","description":"Retail price of this SKU.\n\nMandatory field representing selling price for this variant."},"weight":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Optional weight of the SKU used for shipping computation."},"status":{"type":"string","description":"Lifecycle state of the SKU when creating.\n\nExpected to be one of the valid statuses."}},"required":["shopping_mall_product_id","sku_code","price","status"],"description":"Request body schema for creating a new SKU variant in the product catalog.\n\nIncludes mandatory product association, unique SKU code, price, and lifecycle status.\nOptional weight can be provided to support shipping calculations."},"IShoppingMallSku.IUpdate":{"type":"object","properties":{"sku_code":{"type":"string","description":"Unique SKU code within the product."},"price":{"type":"number","format":"double","description":"Retail price of this SKU."},"weight":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Weight of the SKU for shipping calculations."},"status":{"type":"string","description":"Lifecycle state of the SKU, e.g., Draft, Active, Inactive."}},"required":["sku_code","price","status"],"description":"Update DTO for shopping mall SKU (stock keeping unit) variant. Fields can be changed during updates such as sku_code, price, weight, and status to reflect SKU modifications in product variants management.\n\nThis type excludes properties like id, product references, and timestamps, as these are managed by system or retrieved from main entity.\n\nProperties:\n- sku_code: unique code for the SKU in this product\n- price: price in double precision float\n- weight: optional weight of the SKU for shipping\n- status: product lifecycle state such as Draft, Active, Inactive\n\nOnly these modifiable fields can be set in this update interface."},"IShoppingMallInventory.IRequest":{"type":"object","properties":{"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"The SKU that this inventory record refers to. {@link shopping_mall_skus.id}."},"quantity":{"type":"integer","description":"Available stock quantity for this SKU."},"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page."}},"required":[],"description":"Request DTO for searching and paginating shopping mall inventory records.\n\nAllows filtering based on SKU ID and quantity among other search parameters.\nSupports pagination with page and limit.\n\nProperties may be nullable for flexible querying.\n\nUse this request object to refine inventory listings with filters and page controls."},"IShoppingMallInventory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"The SKU that this inventory record refers to. {@link shopping_mall_skus.id}."},"quantity":{"type":"integer","description":"Available stock quantity for this SKU."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the inventory record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the inventory record was last updated."}},"required":["id","shopping_mall_sku_id","quantity","created_at","updated_at"],"description":"Tracks real-time inventory levels for SKUs managed by sellers in the shopping mall platform. Each inventory record links to a SKU and records available stock quantity with timestamps for auditing inventory changes.\n\n@namespace Catalog\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IShoppingMallShoppingCart.IRequest":{"type":"object","properties":{"page":{"description":"Page number for pagination. Defaults to 1.","type":"integer","minimum":1,"default":1},"limit":{"description":"Number of records per page. Defaults to 100.","type":"integer","minimum":1,"default":100},"search":{"description":"Search keyword to filter shopping carts based on relevant fields.","type":"string"},"shopping_mall_customer_id":{"description":"Filter shopping carts belonging to the customer by their ID.","type":"string","format":"uuid"},"session_id":{"description":"Filter shopping carts associated with a specific guest session ID.","type":"string"},"sort":{"description":"Sort order for returned records e.g. 'created_at desc'.","type":"string"}},"required":[],"description":"Request DTO for searching and paginating shopping carts."},"IShoppingMallShoppingCart":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the shopping cart"},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional customer ID who owns the shopping cart"},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional session identifier for guests"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the shopping cart was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the shopping cart was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of the shopping cart, null if active"}},"required":["id","created_at","updated_at"],"description":"Shopping cart entity representing a user's or guest's collection of items intended for purchase.\n\nThis object includes optional linkage to a customer and/or session ID for guests, supporting diverse user scenarios.\n\nTimestamps indicate creation, update, and soft delete states for lifecycle management."},"IShoppingMallShoppingCart.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional customer ID who owns the new shopping cart"},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional session identifier for guests to link the cart"}},"required":[],"description":"Request body for creating a new shopping cart.\n\nIncludes either the owning customer ID or a session ID for guest tracking."},"IShoppingMallShoppingCart.IUpdate":{"type":"object","properties":{"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged customer's unique identifier; nullable to allow guest carts."},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional session identifier for guests to track carts without login. Nullable for customer carts."}},"description":"Data structure for updating a shopping mall shopping cart. Enables modification of the associated customer ID or session ID with appropriate validation.\n\nFields are nullable to allow partial updates or clearing of values. The shopping_mall_customer_id associates the cart to a specific registered customer, while the session_id links to guest sessions.","required":[]},"IShoppingMallCartItem.IRequest":{"type":"object","properties":{"shopping_mall_shopping_cart_id":{"type":"string","format":"uuid","description":"Identifier of the parent shopping cart containing these items."},"shopping_mall_sku_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional SKU identifier; may be null when filtering on other criteria."},"quantity":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional quantity of the SKU in the cart; nullable for filtering."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp filter to search for cart items created at a specific time."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp filter to search for cart items updated at a specific time."}},"description":"Request parameters for searching and filtering shopping cart items. Includes optional filters for shopping cart ID, SKU ID, quantity, and timestamps. Supports partial match or range queries by accepting null values where applicable.","required":["shopping_mall_shopping_cart_id"]},"IShoppingMallCartItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"shopping_mall_shopping_cart_id":{"type":"string","format":"uuid","description":"Contained shopping cart's ID."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Referenced SKU variant's ID."},"quantity":{"type":"integer","format":"int32","description":"Quantity of SKU units added to the cart."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this cart item was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this cart item was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft delete, null if not deleted."}},"required":["id","shopping_mall_shopping_cart_id","shopping_mall_sku_id","quantity","created_at","updated_at"],"description":"Cart items represent individual SKU units added by customers into their shopping carts. Each item belongs to a specific shopping cart and points directly to a SKU variant. This subsidiary table supports detailed cart composition and enables dynamic cart item management.\n\n@namespace Carts\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IShoppingMallCartItem.ICreate":{"type":"object","properties":{"shopping_mall_shopping_cart_id":{"type":"string","format":"uuid","description":"Referenced shopping cart ID to which this item will be added."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Referenced SKU variant's ID to be added."},"quantity":{"type":"integer","format":"int32","description":"Number of SKU units to add."}},"required":["shopping_mall_shopping_cart_id","shopping_mall_sku_id","quantity"],"description":"Request payload to add a new SKU item into a shopping cart. Specifies the shopping cart to add to, the SKU to add, and the quantity of that SKU.\n\n@namespace Carts\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IShoppingMallCartItem.IUpdate":{"type":"object","properties":{"quantity":{"type":"integer","format":"int32","description":"Quantity of the SKU in the cart item."}},"required":["quantity"],"description":"Update object for a shopping mall cart item. Contains editable properties to change the quantity of the SKU in the customer's cart."},"IShoppingMallWishlist.IRequest":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"UUID of the customer owning the wishlist. Used to filter wishlists belonging to a specific customer."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination; nullable."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Maximum number of records per page; nullable."}},"required":[],"description":"Request parameters for searching and filtering shopping mall wishlists, including customer ID filtering and pagination options."},"IShoppingMallWishlist":{"type":"object","description":"Represents a shopping wishlist that stores saved products for customers who wish to consider purchasing them later. This main entity includes the unique identifier, linkage to the owning customer, creation and update timestamps, and an optional soft deletion timestamp. It is essential for enabling customers to manage their saved products efficiently within the shopping mall platform.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the shopping wishlist."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reference to the owning customer's unique identifier in the shopping mall system."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when this wishlist was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp marking the last update time of this wishlist record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp indicating when the wishlist was soft deleted, or null if active."}},"required":["id","shopping_mall_customer_id","created_at","updated_at"],"x-autobe-prisma-schema":"shopping_mall_wishlists"},"IShoppingMallWishlist.ICreate":{"type":"object","description":"Request schema for creating a new shopping wishlist linked to a customer. It requires the unique customer identifier to associate the wishlist with an existing customer account. Automatically controlled timestamps and soft delete fields are not included in creation requests.","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Unique identifier of the customer for whom the wishlist is created."}},"required":["shopping_mall_customer_id"],"x-autobe-prisma-schema":"shopping_mall_wishlists"},"IShoppingMallWishlist.IUpdate":{"type":"object","description":"Update data for the shopping mall wishlist.\n\nAllows modifying the associated customer ID and timestamps for an existing wishlist. This supports user-managed wishlists containing product SKUs saved for future purchase. The customer ID must be a valid UUID referencing an existing customer. Timestamps are managed and required for audit purposes.","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Unique identifier of the customer owning this wishlist. References shopping_mall_customers.id."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the most recent update to the wishlist record in ISO 8601 format. Nullable to allow unsetting."}},"required":["shopping_mall_customer_id","updated_at"]},"IShoppingMallWishlistItem.IRequest":{"type":"object","description":"Request schema for searching and filtering shopping mall wishlist items.\n\nSupports pagination and search filters to retrieve wishlist SKUs saved by the user for future purchase consideration. Clients may filter by SKU attributes and control page size and number.\n\nThis schema enables efficient retrieval and management of wishlist contents in the shopping mall platform.","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number of the paginated results, starting from 1. Nullable if no specific page requested."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":1000},{"type":"null"}],"description":"Maximum number of results per page for paginated responses, between 1 and 1000 inclusive. Nullable if no limit specified."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search string to filter wishlist items by SKU code, name, or other textual attributes."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional field name by which to sort wishlist items, e.g., 'created_at' or 'sku_code'."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction: ascending 'asc' or descending 'desc'. Default is ascending if omitted."}},"required":[]},"IShoppingMallWishlistItem.ICreate":{"type":"object","properties":{"shopping_mall_wishlist_id":{"type":"string","format":"uuid","description":"Contained wishlist's {@link shopping_mall_wishlists.id}"},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Referenced SKU variant's {@link shopping_mall_skus.id}"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this wishlist item was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this wishlist item was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft delete, null if not deleted."}},"required":["shopping_mall_wishlist_id","shopping_mall_sku_id","created_at","updated_at"],"description":"Creation info of the shopping mall wishlist item"},"IShoppingMallWishlistItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"shopping_mall_wishlist_id":{"type":"string","format":"uuid","description":"Contained wishlist's {@link shopping_mall_wishlists.id}"},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Referenced SKU variant's {@link shopping_mall_skus.id}"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this wishlist item was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this wishlist item was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft delete, null if not deleted."}},"required":["id","shopping_mall_wishlist_id","shopping_mall_sku_id","created_at","updated_at"],"description":"Shopping wishlist items represent individual SKUs added by customers to their wishlists. Each item belongs to a single wishlist and points to a SKU variant. This subsidiary table supports detailed wishlist contents and user convenience features.\n\n@namespace Carts\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IShoppingMallWishlistItem.IUpdate":{"type":"object","properties":{"shopping_mall_wishlist_id":{"type":"string","format":"uuid","description":"Contained wishlist's {@link shopping_mall_wishlists.id}"},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Referenced SKU variant's {@link shopping_mall_skus.id}"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft delete, null if not deleted."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this wishlist item was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this wishlist item was last updated."}},"required":["shopping_mall_wishlist_id","shopping_mall_sku_id","created_at","updated_at"],"description":"Update fields for a shopping mall wishlist item.\n\nThis type allows modification of the wishlist association, the SKU referenced, and update/creation timestamps.\n\nThe deleted_at date-time is optional and nullable to indicate soft deletion status.\n\nEach property matches exactly the fields defined in the Prisma schema for shopping_mall_wishlist_items."},"IShoppingMallOrder.IRequest":{"type":"object","properties":{"limit":{"type":"integer","minimum":1,"description":"Limitation of records per a page.\n\n@default 100"},"search":{"type":"string","description":"Free text search query for orders to match customer names, order numbers, or shipping addresses."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"status":{"type":"string","description":"Current status of the order (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled)."},"business_status":{"type":"string","description":"Business-specific status for workflow management."},"payment_method":{"type":"string","description":"Payment method used for the order (e.g., credit card, PayPal, bank transfer)."},"order_number":{"type":"string","description":"Unique order number for business identification and tracking."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's {@link shopping_mall_customers.id}."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Belonged seller's {@link shopping_mall_sellers.id}."},"from_created_at":{"type":"string","format":"date-time","description":"Filter orders created after this datetime."},"to_created_at":{"type":"string","format":"date-time","description":"Filter orders created before this datetime."},"from_updated_at":{"type":"string","format":"date-time","description":"Filter orders updated after this datetime."},"to_updated_at":{"type":"string","format":"date-time","description":"Filter orders updated before this datetime."}},"required":[],"description":"Search and filter parameters for querying shopping mall orders.\n\nIncludes pagination, free text search, filtering by statuses, business-specific state, payment methods, and datetime ranges.\n\nAll parameters are optional to allow flexible query compositions.\n\nMatches fields from the shopping_mall_orders table as per Prisma schema."},"IShoppingMallOrder.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's Prisma model User UUID for identification of the customer who placed the order."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Belonged seller's Prisma model Seller UUID for identification of the seller fulfilling the order."},"order_number":{"type":"string","description":"Unique order number for business identification and tracking. Must be unique across the platform."},"total_price":{"type":"number","format":"double","description":"Total price of the order including taxes and shipping. Must be a positive floating-point value representing the monetary amount."},"status":{"type":"string","description":"Current status of the order (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled). Represents the order lifecycle phase."},"business_status":{"type":"string","description":"Business-specific status for workflow management. Used to track internal business state of the order."},"payment_method":{"type":"string","description":"Payment method used for the order such as credit card, PayPal, or bank transfer."},"shipping_address":{"type":"string","description":"Shipping address for the order delivery. Must contain complete delivery location details."}},"required":["shopping_mall_customer_id","shopping_mall_seller_id","order_number","total_price","status","business_status","payment_method","shipping_address"],"description":"Create order request data for creating a new shopping mall order.\n\nThis schema reflects the required fields to create a new order in the shopping_mall_orders table, adhering to the business domain constraints and Prisma database schema.\n\nRequired fields enforce reference to existing customer and seller IDs for relational integrity, unique order numbers for identification, and financial and logistics details including total price, payment method, and shipping address.\n\nStatus strings should follow the defined enumeration constrained by business logic.\n\nThis schema does not include auto-generated fields like IDs or timestamps which are handled by the system upon creation.\n\nAll fields must be provided for successful order creation."},"IShoppingMallOrder":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the order record, unique across the system."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's Prisma model User UUID for identification of the customer who placed the order."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Belonged seller's Prisma model Seller UUID for identification of the seller fulfilling the order."},"order_number":{"type":"string","description":"Unique order number for business identification and tracking. Must be unique across the platform."},"total_price":{"type":"number","format":"double","description":"Total price of the order including taxes and shipping. Stored as a double precision floating-point value."},"status":{"type":"string","description":"Current status of the order (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled). Represents the order lifecycle phase."},"business_status":{"type":"string","description":"Business-specific status for workflow management. Used to track internal business state of the order."},"payment_method":{"type":"string","description":"Payment method used for the order such as credit card, PayPal, or bank transfer."},"shipping_address":{"type":"string","description":"Shipping address for the order delivery. Must contain complete delivery location details."},"tracking_number":{"oneOf":[{"type":"string"},{"type":"null"},{"type":"string"},{"type":"null"},{"type":"string"},{"type":"null"}],"description":"Carrier tracking number for shipment, nullable if not yet shipped."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp, indicating when the order was created in the system."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp, indicating the last modification time of the order record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"},{"type":"string","format":"date-time"},{"type":"null"},{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record deletion timestamp for soft delete. Null if the record is active."}},"required":["id","shopping_mall_customer_id","shopping_mall_seller_id","order_number","total_price","status","business_status","payment_method","shipping_address","created_at","updated_at"],"description":"Detailed shopping mall order entity reflecting all properties from the database including identifiers, foreign keys, order financials, status, shipment details, and audit timestamps.\n\nNote: \n- `tracking_number` is nullable for orders not yet shipped.\n- `deleted_at` is nullable for soft deletes representing logically removed records.\n- Timestamps use ISO 8601 'date-time' format.\n\nThis entity is used for GET operations retrieving order full details."},"IShoppingMallOrder.IUpdate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's unique identifier. This property is optional in update operations."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Belonged seller's unique identifier. This property is optional in update operations."},"order_number":{"type":"string","description":"Unique order number for business identification and tracking. This property is optional in update operations."},"total_price":{"type":"number","format":"double","description":"Total price of the order including taxes and shipping. This property is optional in update operations."},"status":{"type":"string","description":"Current status of the order (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled). This property is optional in update operations."},"business_status":{"type":"string","description":"Business-specific status for workflow management. This property is optional in update operations."},"payment_method":{"type":"string","description":"Payment method used for the order (e.g., credit card, PayPal, bank transfer). This property is optional in update operations."},"shipping_address":{"type":"string","description":"Shipping address for the order delivery. This property is optional in update operations."},"tracking_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Carrier tracking number for shipment, nullable if not yet shipped. This property is optional in update operations."}},"description":"Update DTO for shopping mall order entity. All fields are optional to allow partial updates.\n\nAllows modification of customer and seller references, order numbers, prices, status, and shipping details.","x-autobe-prisma-schema":"shopping_mall_orders","required":[]},"IShoppingMallOrderItem.IRequest":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's unique identifier. Optional filter for querying order items."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Belonged SKU's unique identifier. Optional filter for querying order items."},"quantity":{"type":"integer","format":"int32","description":"Quantity of the SKU ordered. Optional filter."},"unit_price":{"type":"number","format":"double","description":"Price per unit of the SKU at the time of order. Optional filter."},"total_price":{"type":"number","format":"double","description":"Total price for the SKU line item (quantity * unit_price). Optional filter."},"created_at_from":{"type":"string","format":"date-time","description":"Timestamp from when the record was created (start range for filtering). Optional filter."},"created_at_to":{"type":"string","format":"date-time","description":"Timestamp until when the record was created (end range for filtering). Optional filter."},"updated_at_from":{"type":"string","format":"date-time","description":"Timestamp from when the record was updated (start range for filtering). Optional filter."},"updated_at_to":{"type":"string","format":"date-time","description":"Timestamp until when the record was updated (end range for filtering). Optional filter."},"orderBy":{"type":"string","description":"Field to order results by. Optional."}},"description":"Request DTO for searching and filtering order items with pagination support.\n\nIncludes filtering by order ID, SKU ID, quantity, pricing, and date ranges.","x-autobe-prisma-schema":"shopping_mall_order_items","required":[]},"IShoppingMallOrderItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the order item"},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's ID. Links this order item to a parent shopping mall order."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Belonged SKU's ID. References the SKU associated with this order item."},"quantity":{"type":"integer","format":"int32","description":"Quantity of the SKU ordered."},"unit_price":{"type":"number","format":"double","description":"Price per unit of the SKU at the time of order."},"total_price":{"type":"number","format":"double","description":"Total price for the SKU line item (quantity * unit_price)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."}},"required":["id","shopping_mall_order_id","shopping_mall_sku_id","quantity","unit_price","total_price","created_at","updated_at"],"description":"Order item entity representing individual SKU units within shopping mall orders. Contains quantity and pricing details.\n\nEach order item links to a specific SKU and belongs to a particular order. Records created and updated timestamps for audit."},"IShoppingMallOrderItem.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's ID. Required to associate the item to an order."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"SKU identifier for the order item."},"quantity":{"type":"integer","format":"int32","description":"Quantity of the SKU ordered."},"unit_price":{"type":"number","format":"double","description":"Price per unit of the SKU at the time of order."},"total_price":{"type":"number","format":"double","description":"Total price for the SKU line item (calculated as quantity * unit_price)."}},"required":["shopping_mall_order_id","shopping_mall_sku_id","quantity","unit_price","total_price"],"description":"Request body schema for creating a new order item. Contains necessary identifiers and pricing information.\n\nProperties are required to ensure complete order item creation data is provided.\n\nNo ID or timestamps are included as those are set by the system automatically."},"IShoppingMallOrderItem.IUpdate":{"type":"object","properties":{"quantity":{"type":"integer","description":"Quantity of the SKU ordered. Indicates number of units being updated."},"unit_price":{"type":"number","format":"double","description":"Price per unit of the SKU at the time of order, used for recalculating totals."},"total_price":{"type":"number","format":"double","description":"Total price for the SKU line item (quantity * unit_price)."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's unique ID, immutable and required for identification."},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"Belonged SKU's unique ID, immutable for order item identity."}},"required":["shopping_mall_order_id","shopping_mall_sku_id"],"description":"Update DTO for shopping mall order item. This allows modifying quantity and pricing information of an order's SKU item, while preserving identification references to order and SKU."},"IShoppingMallPayment.IUpdate":{"type":"object","properties":{"confirmed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when payment was confirmed, nullable if not yet confirmed."},"payment_amount":{"type":"number","format":"double","description":"Amount paid in this transaction, reflecting the current payment value."},"payment_method":{"type":"string","description":"Payment method used, e.g., credit card, PayPal, etc."},"payment_status":{"type":"string","description":"Status of the payment, such as Pending, Completed, Failed, reflecting current state."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's unique ID linking payment to the corresponding order."},"transaction_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"External payment gateway's transaction identifier, nullable if not available."}},"required":["shopping_mall_order_id","payment_amount","payment_method","payment_status"],"description":"Update DTO for shopping mall payment transaction. Supports modifying payment amount, method, status, transaction ID, and confirmation timestamp to reflect the current state of a payment."},"IShoppingMallPayment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the payment record."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's {@link shopping_mall_orders.id}.\n\nForeign key referencing the associated order."},"payment_amount":{"type":"number","format":"double","description":"Amount paid in this transaction.\n\nRepresents the monetary value of the payment."},"payment_method":{"type":"string","description":"Payment method used (e.g., credit card, PayPal, bank transfer).\n\nIndicates the mode of payment utilized."},"payment_status":{"type":"string","description":"Status of the payment (Pending, Completed, Failed).\n\nReflects the current state of the payment process."},"transaction_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"External payment gateway transaction identifier, nullable if not\napplicable.\n\nUsed to track the payment in external systems."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when payment was confirmed.\n\nIndicates when the payment was verified successfully."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nThe date and time when this payment record was created."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp.\n\nThe date and time when this payment record was last modified."}},"required":["id","shopping_mall_order_id","payment_amount","payment_method","payment_status","created_at","updated_at"],"description":"Primary business entity representing payment transactions associated with orders.\n\nRecords include payment amount, method, confirmation status, and related timestamps. Supports tracking multiple payments per order in complex payment scenarios.","x-autobe-prisma-schema":"shopping_mall_payments"},"IShoppingMallPayment.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's {@link shopping_mall_orders.id}.\n\nForeign key referencing the associated order."},"payment_amount":{"type":"number","format":"double","description":"Amount paid in this transaction.\n\nRepresents the monetary value of the payment."},"payment_method":{"type":"string","description":"Payment method used (e.g., credit card, PayPal, bank transfer).\n\nIndicates the mode of payment utilized."},"payment_status":{"type":"string","description":"Status of the payment (Pending, Completed, Failed).\n\nReflects the current state of the payment process."},"transaction_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"External payment gateway transaction identifier, nullable if not\napplicable.\n\nUsed to track the payment in external systems."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when payment was confirmed.\n\nIndicates when the payment was verified successfully."}},"required":["shopping_mall_order_id","payment_amount","payment_method","payment_status"],"description":"Primary business entity representing payment transactions associated with orders.\n\nRecords include payment amount, method, confirmation status, and related timestamps. Supports tracking multiple payments per order in complex payment scenarios.","x-autobe-prisma-schema":"shopping_mall_payments"},"IShoppingMallOrderStatus.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Order status at this point in time (Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled)."},"status_changed_at":{"type":"string","format":"date-time","description":"Timestamp when the status was recorded."}},"required":["status","status_changed_at"],"description":"This interface represents an update to an order status entry, allowing modifications to the status and timestamp at which the status was changed. It is used to record progress in the lifecycle of an order within the shopping mall platform. This entity corresponds to the shopping_mall_order_statuses table in the Prisma DB schema.","x-autobe-prisma-schema":"shopping_mall_order_statuses"},"IShoppingMallOrderStatus":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's {@link shopping_mall_orders.id}."},"status":{"type":"string","description":"Order status at this point in time (Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled)."},"status_changed_at":{"type":"string","format":"date-time","description":"Timestamp when the status was recorded."}},"required":["id","shopping_mall_order_id","status","status_changed_at"],"description":"This interface represents an order status entry, capturing a single status event in the lifecycle of an order within the shopping mall platform. It corresponds to the shopping_mall_order_statuses table in the Prisma DB schema. Each entry stores the order it belongs to, the current status at the time of this entry, and the timestamp of the status change.\n\nIt is used to track order processing states such as Pending Payment, Paid, Processing, Shipped, Delivered, and Cancelled with precise timestamps for audit and workflow management.\n\nProperties:\n- id: Primary UUID key of this status record.\n- shopping_mall_order_id: Foreign key referencing the parent order record.\n- status: The effective order status at this point in time.\n- status_changed_at: The date and time when this status was recorded.\n\nThis entity supports comprehensive order tracking and is critical to order lifecycle management and business rule enforcement.","x-autobe-prisma-schema":"shopping_mall_order_statuses"},"IShoppingMallOrderStatus.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's {@link shopping_mall_orders.id}."},"status":{"type":"string","description":"Order status at this point in time (Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled)."},"status_changed_at":{"type":"string","format":"date-time","description":"Timestamp when the status was recorded."}},"required":["shopping_mall_order_id","status","status_changed_at"],"description":"Create a new order status record for an existing order to record a status transition in the order lifecycle.\n\nThis operation adds a new entry into the `shopping_mall_order_statuses` table associating the given status and timestamp to the specified order.\n\nThe request body should include the status value (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled) and the timestamp when the status was set.\n\nAuthorization ensures only permitted users (such as the owning customer, related seller, or system administrators) can perform this update to maintain data integrity and security.\n\nThe response returns the created order status entity, confirming successful addition into the system.\n\nValidation errors such as invalid status values or missing fields must be properly reported.\n\nBusiness logic must enforce correct status transitions and timestamp consistency if implemented in service layers.","x-autobe-prisma-schema":"shopping_mall_order_statuses"},"IShoppingMallRefundRequest.IUpdate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's {@link shopping_mall_orders.id}."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's {@link shopping_mall_customers.id}."},"reason":{"type":"string","description":"Reason for the refund request."},"refund_amount":{"type":"number","format":"double","description":"Amount requested to be refunded."},"status":{"type":"string","description":"Status of the refund request (Pending, Approved, Rejected)."},"requested_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when refund was requested."},"processed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when refund request was processed."}},"required":["shopping_mall_order_id","shopping_mall_customer_id","reason","refund_amount","status","requested_at"],"description":"Update an existing refund request associated with a given order. This operation allows authorized users, such as the refund request owner or an admin, to modify refund details like status and processing timestamps. Validation includes verifying permission to update the refund request and ensuring data integrity.\n\nThis operation enables refund request management as part of the order lifecycle, supporting workflows like approval, rejection, or processing progress updates.\n\nProper error handling is expected when invalid updates or unauthorized attempts are made.\n\nIt complements refund request retrieval to ensure full management of refund records associated with orders.","x-autobe-prisma-schema":"shopping_mall_refund_requests"},"IShoppingMallRefundRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifying the refund request uniquely within the database."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Foreign key referencing the order associated with this refund request."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Foreign key referencing the customer who made this refund request."},"reason":{"type":"string","description":"Detailed reason provided by the customer explaining the cause or justification for their refund request."},"refund_amount":{"type":"number","format":"double","description":"Monetary amount requested to be refunded to the customer. This value corresponds to currency units used by the platform, typically USD."},"status":{"oneOf":[{"const":"Pending","description":"Current processing state of the refund request (e.g., 'Pending', 'Approved', 'Rejected')."},{"const":"Approved","description":"Current processing state of the refund request (e.g., 'Pending', 'Approved', 'Rejected')."},{"const":"Rejected","description":"Current processing state of the refund request (e.g., 'Pending', 'Approved', 'Rejected')."}],"description":"Current processing state of the refund request (e.g., 'Pending', 'Approved', 'Rejected')."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp capturing when the refund request was initially submitted in ISO 8601 format."},"processed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the refund request was processed; null if still pending processing."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format, indicating when this refund request was first recorded."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp in ISO 8601 format, indicating last time the refund request was modified."}},"required":["id","shopping_mall_order_id","shopping_mall_customer_id","reason","refund_amount","status","requested_at","created_at","updated_at"],"description":"This entity represents a customer's refund request for a specific order in the shopping mall platform. It captures details such as reason, amount, and request status, along with timestamps reflecting creation and processing. The refund request is linked to both the customer and the associated order, ensuring traceability and processing integrity.\n\nRefund requests are critical for managing order lifecycle exceptions and customer service activities.\n\nThis schema enforces mandatory fields and valid status values corresponding to the processing stages of refund requests."},"IShoppingMallRefundRequest.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Unique identifier of the order for which the refund is requested."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Unique identifier of the customer making the refund request."},"reason":{"type":"string","description":"The customer's reason for requesting a refund. This should be detailed to inform review."},"refund_amount":{"type":"number","format":"double","description":"Requested refund amount in the platform's currency units."},"status":{"oneOf":[{"const":"Pending","description":"Status of the refund request upon creation. Typically initialized as 'Pending'."},{"const":"Approved","description":"Status of the refund request upon creation. Typically initialized as 'Pending'."},{"const":"Rejected","description":"Status of the refund request upon creation. Typically initialized as 'Pending'."}],"description":"Status of the refund request upon creation. Typically initialized as 'Pending'."},"requested_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp marking when the refund request was submitted."}},"required":["shopping_mall_order_id","shopping_mall_customer_id","reason","refund_amount","status","requested_at"],"description":"Request body for creating a new refund request in the shopping mall platform. This includes essential properties capturing the reference to the associated order and customer, refund reason, amount, request status, and submission timestamp.\n\nThe properties enforce strict validation including UUID format for foreign keys and valid status enumeration values.\n\nThis DTO is critical for submitting refund requests into the system for processing and resolution."},"IShoppingMallCancellationRequest.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Page number for pagination.\n\nDefault is 1."},"limit":{"type":"integer","format":"int32","description":"Number of items per page.\n\nDefault is 20."},"orderBy":{"oneOf":[{"const":"asc","description":"Order direction for sorting results.\n\nAllowed values: `asc`, `desc`."},{"const":"desc","description":"Order direction for sorting results.\n\nAllowed values: `asc`, `desc`."}],"description":"Order direction for sorting results.\n\nAllowed values: `asc`, `desc`."},"orderByColumn":{"type":"string","description":"Column name by which to sort the results."},"search":{"type":"string","description":"Search filter for the cancellation request reason or other text fields."},"status":{"oneOf":[{"const":"pending","description":"Filter orders by cancellation request status. Allowed values include `pending`, `approved`, `rejected`."},{"const":"approved","description":"Filter orders by cancellation request status. Allowed values include `pending`, `approved`, `rejected`."},{"const":"rejected","description":"Filter orders by cancellation request status. Allowed values include `pending`, `approved`, `rejected`."}],"description":"Filter orders by cancellation request status. Allowed values include `pending`, `approved`, `rejected`."},"fromDate":{"type":"string","format":"date-time","description":"Filter cancellation requests created after this date/time.\n\nMust be a valid ISO 8601 timestamp."},"toDate":{"type":"string","format":"date-time","description":"Filter cancellation requests created before this date/time.\n\nMust be a valid ISO 8601 timestamp."}},"required":[],"description":"Request parameters for searching and filtering shopping mall cancellation requests.\n\nIncludes pagination, sorting, status filter, date range, and search keyword."},"IShoppingMallCancellationRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the cancellation request."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Reference to the order for which the cancellation request is made."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reference to the customer who submitted the cancellation request."},"reason":{"type":"string","description":"Reason for requesting cancellation of the order."},"status":{"oneOf":[{"const":"pending","description":"Current status of the cancellation request.\n\nAllowed values: `pending`, `approved`, `rejected`."},{"const":"approved","description":"Current status of the cancellation request.\n\nAllowed values: `pending`, `approved`, `rejected`."},{"const":"rejected","description":"Current status of the cancellation request.\n\nAllowed values: `pending`, `approved`, `rejected`."}],"description":"Current status of the cancellation request.\n\nAllowed values: `pending`, `approved`, `rejected`."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the cancellation was requested.\n\nISO 8601 date-time format."},"processed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cancellation request was processed or responded to.\n\nNullable if not yet processed."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp in ISO 8601 format."}},"required":["id","shopping_mall_order_id","shopping_mall_customer_id","reason","status","requested_at","created_at","updated_at"],"description":"Represents a cancellation request made by a customer for an order.\n\nIncludes details such as the reason, status, timestamps for request and processing, and references to associated customer and order.\n\nUsed to manage and track cancellation workflows in the shopping mall platform."},"IShoppingMallCancellationRequest.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's {@link shopping_mall_orders.id}."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's {@link shopping_mall_customers.id}."},"reason":{"type":"string","description":"Reason for the cancellation request."},"status":{"type":"string","description":"Status of the cancellation request (Pending, Approved, Rejected)."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when cancellation was requested."},"processed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when cancellation request was processed."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record update timestamp."}},"required":["shopping_mall_order_id","shopping_mall_customer_id","reason","status","requested_at","created_at","updated_at"],"description":"Create a new cancellation request for a specific order with mandatory fields and timestamps.\n\nThis data structure represents the input required for creating a cancellation request in the shopping mall platform.\n\nIt includes references to order and customer entities, the reason for cancellation, current status, request and processing timestamps, as well as audit timestamps for creation and update.\n\nFields processed_at, created_at, and updated_at accept nullable values for flexibility in partial data submission.\n\nStatus must be one of the specified valid statuses (e.g., Pending, Approved, Rejected).\n\nTimestamps follow ISO 8601 date-time format for consistency and interoperability.\n\nThe entity is associated with the shopping_mall_cancellation_requests table in the Prisma schema."},"IShoppingMallCancellationRequest.IUpdate":{"type":"object","properties":{"reason":{"type":"string","description":"Reason for the cancellation request."},"status":{"type":"string","description":"Status of the cancellation request (Pending, Approved, Rejected)."},"requested_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when cancellation was requested."},"processed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when cancellation request was processed."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record update timestamp."}},"required":["reason","status","created_at","updated_at"],"description":"Update information for an existing cancellation request.\n\nAllows modification of reason, status, request and processing timestamps, and audit timestamps.\n\nThe request is partial but reason, status, created_at and updated_at are required for consistency.\n\nTimestamps use ISO 8601 format and allow null to represent absent values.\n\nThis entity corresponds to the shopping_mall_cancellation_requests table in the Prisma schema."},"IShoppingMallProductReview.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number starting from 1 for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of items per page to retrieve."},"search":{"type":"string","description":"General search text for filtering reviews by content or other clerical fields."},"filterRating":{"type":"integer","minimum":1,"maximum":5,"description":"Filter by exact rating value between 1 and 5."},"filterStatus":{"oneOf":[{"const":"pending","description":"Filter reviews by moderation status."},{"const":"approved","description":"Filter reviews by moderation status."},{"const":"rejected","description":"Filter reviews by moderation status."}],"description":"Filter reviews by moderation status."},"filterProductId":{"type":"string","format":"uuid","description":"Filter reviews by associated product ID."},"filterCustomerId":{"type":"string","format":"uuid","description":"Filter reviews by customer ID who submitted the review."}},"required":[],"description":"Request object for searching and filtering product reviews.\n\nSupports pagination and multi-criteria filtering such as rating, status, product, and customer IDs."},"IShoppingMallProductReview":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the product review."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Unique identifier of the customer who submitted the review."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Unique identifier of the product being reviewed."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Unique identifier of the order confirming the purchase for review eligibility."},"rating":{"type":"integer","minimum":1,"maximum":5,"description":"The rating score given by the customer, between 1 and 5 inclusive."},"review_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual content of the product review."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the review that determines its visibility."},{"const":"approved","description":"Moderation status of the review that determines its visibility."},{"const":"rejected","description":"Moderation status of the review that determines its visibility."}],"description":"Moderation status of the review that determines its visibility."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp indicating soft deletion of the review, or null if active."}},"required":["id","shopping_mall_customer_id","shopping_mall_product_id","shopping_mall_order_id","rating","status","created_at","updated_at","deleted_at"],"description":"Product review entity representing feedback submitted by customers who purchased the product.\n\nIncludes rating, optional textual review, moderation status, and timestamps for tracking creation, updates, and soft deletion."},"IShoppingMallProductReview.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Unique identifier of the customer submitting the review. References the shopping_mall_customers.id field to ensure the reviewer is a verified buyer."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Unique identifier of the product being reviewed. Must correspond to an existing product in the shopping mall platform as indexed in shopping_mall_products.id."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Unique identifier of the order confirming purchase eligibility. Ensures that reviews are submitted only by customers who have completed a transaction containing the product."},"rating":{"type":"integer","description":"Rating score provided by the customer for the product. Must be an integer between 1 and 5 inclusive, representing the customer's satisfaction level."},"review_text":{"oneOf":[{"type":"string","description":"Optional textual content of the customer review. Can provide qualitative feedback, suggestions, or comments related to the product experience. Maximum length typically limited to encourage concise feedback."},{"type":"null"}],"description":"Optional textual content of the customer review. Can provide qualitative feedback, suggestions, or comments related to the product experience. Maximum length typically limited to encourage concise feedback."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the review. Newly created reviews start with 'pending' status awaiting review by platform administrators."},{"const":"approved","description":"Moderation status of the review. Newly created reviews start with 'pending' status awaiting review by platform administrators."},{"const":"rejected","description":"Moderation status of the review. Newly created reviews start with 'pending' status awaiting review by platform administrators."}],"description":"Moderation status of the review. Newly created reviews start with 'pending' status awaiting review by platform administrators."}},"required":["shopping_mall_customer_id","shopping_mall_product_id","shopping_mall_order_id","rating","status"],"description":"Data required to create a new product review. Includes references to the customer, product, and order confirming purchase. Captures customer's rating and optional text review content. The review's moderation status is initialized as 'pending' awaiting admin approval. This ensures only verified buyers can submit reviews, maintaining review authenticity and quality."},"IShoppingMallProductReview.IUpdate":{"type":"object","properties":{"rating":{"type":"integer","description":"Updated rating score from 1 to 5 inclusive. This reflects the customer's revised evaluation of the product."},"review_text":{"oneOf":[{"type":"string","description":"Updated optional text content for the review. Allows customers to modify their feedback or add additional comments."},{"type":"null"}],"description":"Updated optional text content for the review. Allows customers to modify their feedback or add additional comments."},"status":{"oneOf":[{"const":"pending","description":"Updated moderation status reflecting the current state after review edits. Changes to this status may trigger further visibility management actions on the platform."},{"const":"approved","description":"Updated moderation status reflecting the current state after review edits. Changes to this status may trigger further visibility management actions on the platform."},{"const":"rejected","description":"Updated moderation status reflecting the current state after review edits. Changes to this status may trigger further visibility management actions on the platform."}],"description":"Updated moderation status reflecting the current state after review edits. Changes to this status may trigger further visibility management actions on the platform."}},"required":["rating","status"],"description":"Data fields allowed for updating an existing product review. Allows modification of the rating score, textual content, and moderation status. This enables customers to revise their feedback and platform administrators to manage review visibility."},"IShoppingMallReviewModeration.IRequest":{"type":"object","properties":{"filter":{"type":"object","properties":{"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Filter by the admin ID who performed the moderation"},"shopping_mall_product_review_id":{"type":"string","format":"uuid","description":"Filter by the specific product review ID associated with the moderation"},"action":{"type":"string","description":"Filter by moderation action such as approve, reject, or flag"}},"required":[],"description":"Filters to narrow down review moderation records for administrative purposes"},"sort":{"type":"array","items":{"type":"object","properties":{"property":{"type":"string","description":"Name of the property to sort results by"},"direction":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending"},{"const":"desc","description":"Sort direction: ascending or descending"}],"description":"Sort direction: ascending or descending"}},"required":["property","direction"]},"description":"Sorting criteria for order in which review moderation records are returned"},"pagination":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number to retrieve, starting from 1"},"pageSize":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page"},"offset":{"type":"integer","minimum":0,"description":"Number of records to skip, useful for pagination"},"totalCount":{"type":"integer","minimum":0,"description":"Total count of matching records, for client information."}},"required":["page","pageSize"],"description":"Pagination settings including page number and page size, supporting efficient browsing of large result sets"}},"required":["filter","sort","pagination"],"description":"Request schema for filtering, sorting, and paginating shopping mall review moderation records"},"IShoppingMallReviewModeration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderation record."},"shopping_mall_product_review_id":{"type":"string","format":"uuid","description":"Identifier of the product review that is being moderated."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Identifier of the administrator who performed the moderation action."},"action":{"type":"string","description":"Action taken during moderation (e.g., approve, reject, flag)."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comments explaining the moderation action."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the moderation record was created."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the moderation record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if the moderation record was deleted."}},"required":["id","shopping_mall_product_review_id","shopping_mall_admin_id","action","created_at","updated_at"],"description":"Administrative moderation record for shopping mall product reviews, recording details of moderation actions such as approval, rejection, or flagging by administrators. Includes audit trail timestamps and supports soft deletion."},"IShoppingMallReviewModeration.ICreate":{"type":"object","properties":{"shopping_mall_product_review_id":{"type":"string","format":"uuid","description":"Reviewed product review {@link shopping_mall_product_reviews.id} which is moderated."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin user who performed this moderation action {@link shopping_mall_admins.id}."},"action":{"type":"string","description":"Moderation action taken such as 'approve', 'reject', or 'flag'."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative comments or reasons related to the moderation action."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this moderation record was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this moderation record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if this moderation record was deleted."}},"required":["id","shopping_mall_product_review_id","shopping_mall_admin_id","action","created_at","updated_at"],"description":"Administrative moderation record for product reviews, capturing the review reference, admin who performed the moderation, the moderation action taken, comments, and timestamps. Supports soft deletion and audit trails. Managed as a subsidiary entity belonging to product reviews.\n\n@namespace Reviews\n@author AutoBE - https://github.com/wrtnlabs/autobe","x-autobe-prisma-schema":"shopping_mall_review_moderations"},"IShoppingMallReviewModeration.IUpdate":{"type":"object","properties":{"shopping_mall_product_review_id":{"type":"string","format":"uuid","description":"Reviewed product review {@link shopping_mall_product_reviews.id} which is moderated."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin user who performed this moderation action {@link shopping_mall_admins.id}."},"action":{"type":"string","description":"Moderation action taken such as 'approve', 'reject', or 'flag'."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative comments or reasons related to the moderation action."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this moderation record was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this moderation record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if this moderation record was deleted."}},"required":["id"],"description":"Administrative moderation record for product reviews, capturing the review reference, admin who performed the moderation, the moderation action taken, comments, and timestamps. Supports soft deletion and audit trails. Managed as a subsidiary entity belonging to product reviews.\n\n@namespace Reviews\n@author AutoBE - https://github.com/wrtnlabs/autobe","x-autobe-prisma-schema":"shopping_mall_review_moderations"},"IShoppingMallAdminDashboard.IRequest":{"type":"object","properties":{"dashboard_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by unique dashboard name."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by description content."},"created_at_min":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for dashboards created after this time (inclusive) in ISO 8601 format."},"created_at_max":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for dashboards created before this time (inclusive) in ISO 8601 format."},"updated_at_min":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for dashboards updated after this time (inclusive) in ISO 8601 format."},"updated_at_max":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for dashboards updated before this time (inclusive) in ISO 8601 format."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination starting from 1."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page for pagination."}},"description":"Filters and pagination settings for querying admin dashboard entries.","required":[]},"IShoppingMallAdminDashboard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key, unique identifier for the admin dashboard."},"dashboard_name":{"type":"string","description":"Unique name of the admin dashboard instance or view."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description providing details about the dashboard purpose or scope."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the dashboard record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the dashboard record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted."}},"required":["id","dashboard_name","created_at","updated_at"],"description":"Admin dashboard entity representing monitoring and management views for platform operations.\n\nThis entity records unique dashboards available to administrators for tracking system KPIs, orders, users, and reports.\n\nSupports soft deletion and maintains timestamps for creation and updates.\n\nThe dashboard name is unique across the platform.\n\nIntended for use in admin portal and monitoring systems.","x-autobe-prisma-schema":"shopping_mall_admin_dashboard"},"IShoppingMallAdminDashboard.ICreate":{"type":"object","properties":{"dashboard_name":{"type":"string","description":"Unique name identifier for the specific admin dashboard instance or view."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description providing details about the dashboard purpose or scope."}},"required":["dashboard_name"],"description":"Schema for creating a new admin dashboard instance in the shopping mall platform.\n\nThis type requires a unique dashboard name and optionally a description explaining the dashboard's function.\n\nIt enforces business rules related to unique dashboard identification and descriptive purpose.\n\nCreated dashboards support administrative monitoring and management workflows.\n\nIncludes fields for naming and optional descriptive metadata.\n\nNotable properties:\n- dashboard_name: Unique identifier with string type.\n- description: Optional text, nullable, explains dashboard use.\n\nThis schema maps directly to the shopping_mall_admin_dashboard Prisma entity.\n","x-autobe-prisma-schema":"shopping_mall_admin_dashboard"},"IShoppingMallAdminDashboard.IUpdate":{"type":"object","properties":{"dashboard_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique name identifier for the admin dashboard instance. Can be updated with caution to maintain uniqueness."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description providing updated details about the dashboard purpose or scope."}},"required":[],"description":"Schema for updating an existing admin dashboard instance.\n\nAllows modification of the dashboard name and/or description.\n\nBoth fields are optional and nullable to support partial updates or clearing values.\n\nThis schema is used by administrative users to manage dashboard metadata and maintain platform monitoring.\n\nCan enforce business rules related to identification and descriptive clarity.\n\nCorresponds to the shopping_mall_admin_dashboard Prisma entity.\n","x-autobe-prisma-schema":"shopping_mall_admin_dashboard"},"IShoppingMallAuditLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number."},"limit":{"type":"integer","format":"uint32","description":"Limitation of records per a page. @default 100"},"search":{"type":"string","description":"A full-text search string for searching in audit logs."},"admin_id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator who performed the action."},"entity_id":{"type":"string","format":"uuid","description":"Unique identifier of the affected entity, such as an order or product."},"action":{"type":"string","description":"Filter for specific actions performed in the system."},"timestamp_before":{"type":"string","format":"date-time","description":"Filter for audit logs before this timestamp."},"timestamp_after":{"type":"string","format":"date-time","description":"Filter for audit logs after this timestamp."}},"required":[],"description":"Parameters for searching and filtering audit logs with pagination support."},"IShoppingMallAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the administrator who performed the action, nullable if not applicable."},"entity_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the entity affected by the action, nullable if not applicable."},"action":{"type":"string","description":"Description of the action performed."},"timestamp":{"type":"string","format":"date-time","description":"Timestamp when the action was performed."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional, additional details about the action."}},"required":["id","action","timestamp"],"description":"Audit log entry capturing administrator actions and system events with details and timestamps."},"IShoppingMallReport.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number to retrieve for paginated results."},"limit":{"type":"integer","description":"Maximum number of records per page."},"search":{"type":"string","description":"Text search query to filter reports by name or content."},"reportType":{"type":"string","description":"Type of report to filter by, e.g., sales_summary, user_activity."},"generatedByAdminId":{"type":"string","format":"uuid","description":"Filter reports generated by a specific administrator, identified by UUID."},"createdAfter":{"type":"string","format":"date-time","description":"Filter reports created after this ISO 8601 timestamp."},"createdBefore":{"type":"string","format":"date-time","description":"Filter reports created before this ISO 8601 timestamp."}},"required":[],"description":"Request for searching and paginating admin reports with optional filters on type, creator, and creation date."},"IShoppingMallReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the report."},"generatedByAdminId":{"type":"string","format":"uuid","description":"Identifier of the administrator who generated the report."},"reportName":{"type":"string","description":"Unique name identifier for the report."},"reportType":{"type":"string","description":"Type of report, such as sales_summary or user_activity."},"contentUri":{"type":"string","description":"URI to access the report content, can be a URL or file path."},"createdAt":{"type":"string","format":"date-time","description":"Timestamp when the report was created."},"updatedAt":{"type":"string","format":"date-time","description":"Timestamp when the report was last updated."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was soft deleted, or null if active."}},"required":["id","reportName","reportType","createdAt","updatedAt"],"description":"Admin report entity containing metadata and content URI for operational analytics and dashboard reporting."},"IShoppingMallReport.ICreate":{"type":"object","properties":{"report_name":{"type":"string","description":"Unique name for the report, used as an identifier."},"report_type":{"type":"string","description":"Type of the report (e.g., sales_summary, user_activity)."},"content_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI location of the report content, if available."},"generated_by_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the admin who generated the report. Nullable if not assigned."}},"required":["report_name","report_type"],"description":"Data required to create a new administrative report.\n\nThis includes the report name, type, optional content URI, and optional reference to the generating admin.\n\nThe creation timestamp and unique ID are handled internally by the database.","x-autobe-prisma-schema":"shopping_mall_reports"},"IShoppingMallReport.IUpdate":{"type":"object","properties":{"report_name":{"type":"string","description":"Unique name for the report, used as an identifier."},"report_type":{"type":"string","description":"Type of the report (e.g., sales_summary, user_activity)."},"content_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI location of the report content, if available."},"generated_by_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the admin who generated the report. Nullable if not assigned."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was soft deleted, if applicable."}},"required":["report_name","report_type"],"description":"Data for updating an existing administrative report.\n\nAllows modification of report attributes including name, type, content URI, generating admin, and timestamps.\n\nSoft deletion timestamp is nullable.\n\nSecurity enforced by restricting update operation to authorized administrators.","x-autobe-prisma-schema":"shopping_mall_reports"},"IShoppingMallConfiguration.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the configuration record."},"key":{"type":"string","description":"Unique configuration key identifying the parameter."},"value":{"type":"string","description":"Configuration value as a string."},"category":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category grouping for configurations, may be null if not categorized."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the configuration parameter, providing human-readable information or context."},"enabled":{"type":"boolean","description":"Flag indicating if the configuration is active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if the configuration is active."}},"required":["id","key","value","enabled","created_at","updated_at"],"description":"Summary view of shopping mall configuration record.\n\nIncludes essential properties representing the configuration's identity, key, value, status, and audit timestamps.\n\nThis type omits sensitive details not required for list views and supports optional fields as nullable."},"IShoppingMallGuest.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the guest session record."},"session_token":{"type":"string","description":"Unique session token identifying the guest session."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the guest accessed the system; nullable for privacy."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Browser or client user agent string of the guest session; nullable if unknown."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest session was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this guest session record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of this guest record; null if active."}},"required":["id","session_token","created_at","updated_at"],"description":"Summary view of a guest session for monitoring and analytics.\n\nIncludes primary identifiers, session token, and temporal metadata.\n\nOptional IP address and user agent fields support privacy-aware session tracking."},"IShoppingMallCustomer.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the customer."},"email":{"type":"string","description":"Customer's unique email address used for login and notifications."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Nickname or display name of the customer. This is an optional property and may be null."},"status":{"type":"string","description":"Status of the customer account, e.g., 'active', 'inactive', or 'suspended'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the customer was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the customer record was last updated."}},"required":["id","email","status","created_at","updated_at"],"description":"Summary view of a customer account including essential identification and status information.\n\nSensitive fields like 'password_hash' are excluded to protect security and privacy.\n\nMapped to the shopping_mall_customers table in the Prisma schema.","x-autobe-prisma-schema":"shopping_mall_customers"},"IShoppingMallAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the administrator account."},"email":{"type":"string","description":"Administrator's unique email address for login and critical notifications."},"full_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full legal name of the administrator. This property is optional and may be null."},"status":{"type":"string","description":"Administrative account status, indicating if active, suspended, or disabled."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin record was last updated."}},"required":["id","email","status","created_at","updated_at"],"description":"Summary view of an administrator account including identifiers and status.\n\nExcludes sensitive authentication information for security purposes.\n\nCorresponds to the shopping_mall_admins table in the Prisma schema.","x-autobe-prisma-schema":"shopping_mall_admins"},"IShoppingMallProduct.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the shopping mall product."},"code":{"type":"string","description":"Unique business code identifying the product."},"name":{"type":"string","description":"The display name of the product."},"status":{"type":"string","description":"The current lifecycle state of the product, e.g., Draft, Active, Inactive."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Identifier of the category to which this product belongs."}},"required":["id","code","name","status","shopping_mall_category_id"],"description":"Summary type for shopping mall product entity representing essential product information optimized for list views.\n\nIncludes basic identification fields, product code, name, status, and category association.\n\nThis summary omits detailed descriptions and relations for efficient listing."},"IShoppingMallShoppingMallSku.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the SKU entity."},"sku_code":{"type":"string","description":"Unique SKU code within the product."},"price":{"type":"number","format":"double","description":"Retail price of this SKU."},"status":{"type":"string","description":"Lifecycle state of the SKU, e.g., Draft, Active, Inactive."}},"required":["id","sku_code","price","status"],"description":"Summary type for shopping mall SKU entity with key details for listing and display.\n\nContains SKU code, price, status, and unique identifier.\n\nExcludes weight and inventory to focus on main listing attributes."},"IShoppingMallInventory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the inventory record"},"shopping_mall_sku_id":{"type":"string","format":"uuid","description":"The SKU identifier this inventory record is associated with"},"quantity":{"type":"integer","description":"Available stock quantity for this SKU"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the inventory record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the inventory record was last updated"}},"required":["id","shopping_mall_sku_id","quantity","created_at","updated_at"],"description":"Summary of a product SKU inventory record representing available stock and timestamps linked to the specific SKU."},"IShoppingMallShoppingCart.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the shopping cart"},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The associated customer's unique identifier, if logged in"},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Session identifier for guests without login"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the shopping cart was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the shopping cart was last updated"}},"required":["id","created_at","updated_at"],"description":"Summary representation of a shopping cart, including identification, customer association, guest session, and timestamps."},"IShoppingMallWishlist.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the wishlist."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Identifier of the customer who owns this wishlist."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the wishlist was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the wishlist was last updated."}},"required":["id","shopping_mall_customer_id","created_at","updated_at"],"description":"Summary information of a shopping mall wishlist, representing a customer's saved list of products for future consideration. Includes unique identifiers and timestamps referencing the owning customer.\n\nThis summary omits the detailed list of wishlist items and focuses on the wishlist metadata for efficient list displays.","x-autobe-prisma-schema":"shopping_mall_wishlists"},"IShoppingMallOrder.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the order."},"order_number":{"type":"string","description":"Unique order number for identification and tracking."},"total_price":{"type":"number","format":"double","description":"Total price of the order including taxes and shipping."},"status":{"type":"string","description":"Current status of the order (e.g., Pending Payment, Paid, Processing, Shipped, Delivered, Cancelled)."},"business_status":{"type":"string","description":"Business-specific order status for workflow management."},"payment_method":{"type":"string","description":"Payment method used for the order (e.g., credit card, PayPal, bank transfer)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the order."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the order."}},"required":["id","order_number","total_price","status","business_status","payment_method","created_at","updated_at"],"description":"Summary information of a shopping mall order including essential identifiers, business status, payment details, and timestamps. Designed for efficient display in order overviews or lists.\n\nThis summary excludes in-depth details like order items and shipment tracking for brevity and performance.\n\nIncludes status and business status fields to indicate current order phase and workflow state.\n\nThis type relates to the shopping_mall_orders Prisma table.","x-autobe-prisma-schema":"shopping_mall_orders"},"IShoppingMallCancellationRequest.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of this cancellation request.\n\nUniquely identifies the cancellation request record."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Reference to the associated order's unique identifier.\n\nLinks this cancellation request to a specific order."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reference to the customer's unique identifier who requested the cancellation.\n\nIdentifies the owner of this cancellation request."},"reason":{"type":"string","description":"Text describing the reason for the cancellation request.\n\nCustomers provide this as the justification for cancelling the order."},"status":{"type":"string","description":"Current status of the cancellation request.\n\nThis status dictates if the request is pending, approved, or rejected."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the cancellation request was submitted.\n\nRecorded for audit and processing timelines."},"processed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cancellation request was processed.\n\nNullable if the request is not yet processed."}},"required":["id","shopping_mall_order_id","shopping_mall_customer_id","reason","status","requested_at"],"description":"Summary view representing essential information about a shopping mall cancellation request.\n\nThis view is optimized for list or summary displays such as administrative or customer order management dashboards.\n\nIncludes identifiers, status, reason, and key timestamps to provide quick insights.\n\nSensitive or detailed information not critical for summary views is excluded.\n\nEach property references the original Prisma schema column description for clarity."},"IShoppingMallProductReview.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the product review.\n\nUniquely identifies this review in the database."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Unique identifier of the customer who submitted the review.\n\nLinks the review to the customer's account."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Unique identifier of the product that is reviewed.\n\nAssociates the review with a specific product."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Unique identifier of the order confirming the purchase.\n\nEnsures review eligibility by linking to the transaction."},"rating":{"type":"integer","description":"Numeric score given by the customer for the product.\n\nTypically ranged from 1 to 5 indicating satisfaction level."},"status":{"type":"string","description":"Moderation status of the review.\n\nIndicates if the review is pending approval, approved, or rejected."},"created_at":{"type":"string","format":"date-time","description":"Timestamp recording when the review was created.\n\nUseful for sorting and auditing."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp recording the last update time for the review.\n\nReflects modifications and moderation changes."}},"required":["id","shopping_mall_customer_id","shopping_mall_product_id","shopping_mall_order_id","rating","status","created_at","updated_at"],"description":"Summary view of a product review in the shopping mall platform.\n\nOptimized for listing reviews with critical identifiers such as customer, product, and order IDs,\n\nIncluding rating, moderation status, and timestamps for display and filtering.\n\nExcludes detailed review text and moderation comments.\n\nEach property is documented referencing Prisma schema column comments."},"IShoppingMallAdminDashboard.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin dashboard instance.\n\nThis UUID uniquely identifies an admin dashboard record within the system."},"dashboard_name":{"type":"string","description":"Unique name identifier for the admin dashboard instance.\n\nThis name distinguishes the dashboard scope or purpose for administrative monitoring."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description providing additional details about the dashboard's purpose, scope, or specific notes.\n\nMay be null when no description is provided."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the admin dashboard record was created.\n\nRecorded in ISO 8601 UTC format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating the last update time of the admin dashboard record.\n\nUpdated automatically on any modifications.\n\nRecorded in ISO 8601 UTC format."}},"required":["id","dashboard_name","created_at","updated_at"],"description":"Summary view of an admin dashboard instance.\n\nThis object provides essential information including unique ID, name, optional description, and timestamps for use in administrative listings and overview displays.\n\nIntended to be used in paginated listings and dashboard selection interfaces.\n\nAll properties are derived from the `shopping_mall_admin_dashboard` Prisma model table."},"IShoppingMallReport.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrative report.\n\nSystem-wide unique ID used to retrieve and reference the report."},"report_name":{"type":"string","description":"Unique name assigned to this report.\n\nUsed to identify and select reports by administrators."},"report_type":{"type":"string","description":"Type/category of the report (e.g., sales_summary, user_activity).\n\nHelps classify reports for filtering and retrieval."},"generated_by_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the administrator user who generated this report.\n\nMay be null if the generator is unknown or system-generated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created in the system.\n\nISO 8601 UTC formatted datetime."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the report was last updated.\n\nUpdated automatically on modifications.\n\nISO 8601 UTC formatted datetime."}},"required":["id","report_name","report_type","created_at","updated_at"],"description":"Summary information of an administrative report.\n\nIncludes unique identifiers, report metadata such as name, type, creator info, and timestamps.\n\nUseful for report listings, selection menus, and overview dashboards.\n\nCorresponds to the `shopping_mall_reports` table in Prisma schema."}}}}