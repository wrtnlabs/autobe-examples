{"operations":[{"specification":"Create a temporary guest entry and issue initial temporary tokens. This operation writes to the Prisma table `todo_app_guest` and creates a new row with server-managed `id` (UUID), optional `email`, and timestamps such as `created_at`. The operation is intended to support unauthenticated visitors who need short-lived persistence or temporary identity for client-side workflows.","authorizationType":"join","description":"Purpose and functionality:\nThis endpoint allows an unauthenticated visitor to create a temporary guest record in the `todo_app_guest` table. The API accepts an optional `email` (if provided by the client) and the server will create a new record with a system-assigned `id` (UUID) and set `created_at`. The returned response contains an authorization payload (short-lived tokens) suitable for guest workflows.\n\nImplementation details using confirmed schema fields:\nThe request maps directly to fields present in the Prisma model `todo_app_guest`. Specifically, provided `email` maps to `todo_app_guest.email`. The server will set `todo_app_guest.id` (UUID) and `todo_app_guest.created_at` (timestamp). The server may also initialize `todo_app_guest.status` and leave `last_active_at` null until the guest performs subsequent activity.\n\nRole-specific integration and business context:\nThis operation is a public join endpoint for the role 'guest' and is intended to be used in client flows that need temporary identity without full user registration. Because the `email` column in `todo_app_guest` is nullable in the schema, the request may omit `email` to create an anonymous guest record. The response follows the authorization response naming convention and returns `ITodoAppGuest.IAuthorized` as the successful response type.\n\nSecurity considerations within schema constraints:\nValidate the optional `email` format when present (RFC 5322 basic validation) and rate-limit join attempts to prevent abuse. Do not store additional user credentials in `todo_app_guest.password` because that field does not exist. Keep issued tokens short-lived and tie refresh operations to the guest `id` and `last_active_at` lifecycle.\n\nRelated operations and workflow integration:\nThis operation pairs with `POST /auth/guest/refresh` which can update `todo_app_guest.last_active_at` and may create audit entries in `todo_app_audit_records` (for example, recording refresh events using `todo_app_audit_records.actor_role`, `action_type`, `target_resource`, `target_id`, and `created_at`).","summary":"Create a guest record in the todo_app_guest table and issue temporary authorization tokens.","parameters":[],"requestBody":{"description":"Guest registration payload. Maps to `todo_app_guest.email` (nullable). If omitted, an anonymous guest record is created.","typeName":"ITodoAppGuest.IJoin"},"responseBody":{"description":"Authorized response containing temporary access (and refresh) tokens for the guest role. Follows the authentication response naming convention for the service prefix.","typeName":"ITodoAppGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Refresh short-lived access tokens for a guest identity. This operation updates activity metadata for the guest in `todo_app_guest` (notably `last_active_at`) and may record an audit event in `todo_app_audit_records` for tracking refresh activity.","authorizationType":"refresh","description":"Purpose and functionality:\nThis endpoint accepts a valid guest refresh credential and issues a new short-lived access token (and optionally rotates the refresh token). It targets the `todo_app_guest` table so that guest activity can be associated with the `id` and `last_active_at` fields.\n\nImplementation details using confirmed schema fields:\nOn successful validation of the presented refresh credential, the server SHOULD update `todo_app_guest.last_active_at` to the current server timestamp and may record the refresh event in `todo_app_audit_records` by populating `actor_role` (e.g., 'system' or 'guest'), `action_type` (e.g., 'refresh_token'), `target_resource` = 'guest', `target_id` = the guest `id`, and `created_at` to capture the event time.\n\nRole-specific integration and business context:\nThis operation is role-restricted: it requires a valid refresh credential tied to a previously created guest (role = 'guest'). The API path `/auth/guest/refresh` follows the service naming conventions for guest token lifecycle management and returns `ITodoAppGuest.IAuthorized` on success, matching the service prefix and role naming pattern.\n\nSecurity considerations within schema constraints:\nRotate refresh tokens when practical and invalidate refresh tokens upon abuse detection. Because `todo_app_guest.password_hash` does not exist in the schema, do not attempt password-based verification for guests; instead rely on token material. Record refresh attempts and consider rate-limiting per guest `id` to reduce token replay risk.\n\nRelated operations and workflow integration:\nThis operation complements `/auth/guest/join` (which issues initial tokens) and may be followed by guest-scoped API calls. Audit entries for refresh events can be stored in `todo_app_audit_records` (fields: `actor_role`, `action_type`, `target_resource`, `target_id`, `created_at`) to help operations and security teams investigate token usage patterns.","summary":"Exchange a valid guest refresh credential for a new access token and update guest activity metadata in todo_app_guest.","parameters":[],"requestBody":{"description":"Refresh request payload. Contains the refresh credential/token associated with a guest identity. Server will validate and rotate as appropriate.","typeName":"ITodoAppGuest.IRefresh"},"responseBody":{"description":"Authorized response containing a renewed access token and optional rotated refresh token for the guest session.","typeName":"ITodoAppGuest.IAuthorized"},"authorizationRole":"guest","name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"This operation creates a new user account for the Todo application. It is associated with the Prisma table `todo_app_user`. The endpoint accepts register information (email, optional display_name, and password) and creates a new row in the `todo_app_user` table with fields `email`, `display_name`, `password_hash` (set by server after hashing), `account_status`, `created_at`, and `updated_at`. The operation will validate the email uniqueness (enforced by @@unique([email]) in schema) and will set initial account_status (e.g., 'active' or 'unverified') per product policy. On success the operation returns an authorization response including issued tokens and a representation of the authenticated user (the authorized response type includes token(s) and selected user fields).","authorizationType":"join","description":"Purpose and overview: This endpoint registers a new user and persists a new record in the `todo_app_user` table. It uses the table's `email` field as the primary unique identifier for account creation and will cause a new `todo_app_user` row to be created with server-calculated `password_hash`, `created_at`, and `updated_at` values.\n\nImplementation details and required fields: The request must supply an `email` and a plaintext password (or equivalent credential material). The server implementation will compute and store `password_hash` in the `todo_app_user.password_hash` column and will enforce the unique constraint on `todo_app_user.email` (@@unique([email]) in the Prisma schema). The server will populate `created_at` and `updated_at` timestamps on the new row and initialize `account_status` according to product policy (for example, 'active' or 'unverified').\n\nRole-specific integration and business context: Registration is a public operation (no prior authentication required). The created user record is the same entity referenced by todo rows via `todo_app_todos.user_id`, enabling the app to later associate todos to this account. The operation ties into audit/auditing flows when admin review is required (audit entries may be created in `todo_app_audit_records` by administrative processes, not by this public join operation).\n\nSecurity considerations: The server MUST never store plaintext passwords; instead it MUST produce a secure `password_hash` and store it in `todo_app_user.password_hash`. Email uniqueness is enforced by the Prisma schema unique constraint on `email`; the server MUST handle duplicate-email errors gracefully. Returned tokens should be short-lived access tokens (for example, JWT) with a refresh token mechanism; the `todo_app_user.last_active_at` and `todo_app_user.updated_at` columns may be updated on successful immediate authentication after registration.\n\nRelated operations and workflow integration: Typical next operations after successful join are `login` (if the server requires explicit login after verification) and `refresh` to renew tokens. If email verification is enabled by product policy, the server may create an out-of-band verification flow; note that there is no explicit `email_verified` column in `todo_app_user` in the Prisma schema, so verification state must be represented within `account_status` or an external store.","summary":"Register a new TodoApp user (creates a row in todo_app_user)","parameters":[],"requestBody":{"description":"Registration payload for creating a new user account. Contains a valid email and plaintext password. Optional display_name may be included.","typeName":"ITodoAppUser.ICreate"},"responseBody":{"description":"Authorized response returned after successful registration. Contains issued authorization tokens and user summary fields.","typeName":"ITodoAppUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"This operation authenticates an existing user in the `todo_app_user` table. It validates provided credentials (email + password) against `todo_app_user.email` and `todo_app_user.password_hash`. On successful authentication the server issues authorization tokens and may update `todo_app_user.last_active_at` and `todo_app_user.updated_at` to reflect recent activity. The operation returns an authorized response containing the issued tokens and selected user fields.","authorizationType":"login","description":"Purpose and overview: This endpoint authenticates a user record from the `todo_app_user` table. It uses `email` to locate the account and verifies secrets against `todo_app_user.password_hash`. Successful authentication results in issuance of authorization material (access token and refresh token) and a response representing the authenticated user.\n\nImplementation details and required fields: Request must include `email` and password. The server will check `todo_app_user.email` (unique by schema) and verify the secret against `todo_app_user.password_hash`. On success the server SHOULD update `todo_app_user.last_active_at` and `todo_app_user.updated_at` to reflect activity and may set or confirm `account_status` (for example, deny login when `account_status` is 'suspended').\n\nRole-specific integration and business context: Login is a public operation used to obtain session tokens that allow management of todos owned by the authenticated user (todos are associated via `todo_app_todos.user_id`). The tokens returned by this endpoint are used by subsequent protected operations.\n\nSecurity considerations: Implement strong rate limiting for failed login attempts and ensure errors do not leak whether an email exists. Because the Prisma schema contains `password_hash` but not refresh-token storage columns, refresh token lifecycle may be managed by a dedicated token store external to the `todo_app_user` table; however `todo_app_user.updated_at` and `todo_app_user.last_active_at` are available within the schema to record activity.\n\nRelated operations and workflow integration: Typical complementary operations include `refresh` to renew an access token and `changePassword` (authenticated) to update `todo_app_user.password_hash` for the account. Admin suspend/reactivate actions also interact with `todo_app_user.account_status` (managed by admin flows recorded in `todo_app_audit_records`).","summary":"Authenticate a TodoApp user (login against todo_app_user)","parameters":[],"requestBody":{"description":"Login payload containing `email` and `password` to authenticate an existing user.","typeName":"ITodoAppUser.ILogin"},"responseBody":{"description":"Authorized response including access and refresh tokens along with a user summary.","typeName":"ITodoAppUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"This operation refreshes an access token for a user associated with the `todo_app_user` table. It accepts a refresh token and issues a new access token (and optionally a new refresh token) for the associated user. The operation may update `todo_app_user.last_active_at` and `todo_app_user.updated_at` to indicate continued activity. The Prisma `todo_app_user` table provides the user identity fields used to associate the refreshed session with the correct account.","authorizationType":"refresh","description":"Purpose and overview: This endpoint renews an access token using a valid refresh token for a user record that exists in `todo_app_user`. The refresh flow ties the presented refresh token to the user identity so the server can return a fresh access token and possibly rotate the refresh token.\n\nImplementation details and required fields: Request payload should include a valid refresh token. Because the Prisma schema does not include an explicit refresh-token storage column, refresh token management is typically implemented using a separate token store; however the operation will still update `todo_app_user.last_active_at` and `todo_app_user.updated_at` to reflect the renewed session activity for auditing and presence metrics.\n\nRole-specific integration and business context: Refresh is a public endpoint that accepts a valid refresh token to provide continued authenticated access without re-entering credentials. The refreshed tokens continue to permit operations on `todo_app_todos` rows owned by the user (via `todo_app_todos.user_id`).\n\nSecurity considerations: Ensure refresh tokens are rotated or invalidated on logout or account suspension (check and propagate `todo_app_user.account_status` to deny refresh when suspended). Monitor and record suspicious refresh activity in `todo_app_audit_records` when appropriate.\n\nRelated operations and workflow integration: `refresh` is commonly used after `login` and before protected operations; it complements `join` and `login` flows and should be part of the token lifecycle design alongside revocation and rotation strategies.","summary":"Refresh access token for a TodoApp user (ties to todo_app_user identity)","parameters":[],"requestBody":{"description":"Refresh request containing a valid refresh token to obtain a new access token.","typeName":"ITodoAppUser.IRefresh"},"responseBody":{"description":"Authorized response containing new access token (and optionally rotated refresh token) and user summary.","typeName":"ITodoAppUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation allows an authenticated user (from `todo_app_user`) to change their account password. It updates the `todo_app_user.password_hash` column and sets `todo_app_user.updated_at` (and optionally `todo_app_user.last_active_at`) to reflect the change. This operation is associated with the `todo_app_user` table and requires the requesting actor to be authenticated as the user being modified.","authorizationType":null,"description":"Purpose and overview: This authenticated endpoint enables a user to change their password. It targets the `todo_app_user` record and updates `password_hash` after verifying the current secret (if required) or validating a password-reset flow. The server updates `todo_app_user.updated_at` after successfully changing the stored `password_hash`.\n\nImplementation details and required fields: The request must be authenticated as the user whose password is being changed. The payload typically includes the `currentPassword` and `newPassword` (or a reset token in alternative flows). Upon verification, the server computes a new secure `password_hash` and writes it to `todo_app_user.password_hash`. The server MUST update `todo_app_user.updated_at` and may update `todo_app_user.last_active_at` as part of session continuity.\n\nRole-specific integration and business context: This operation is restricted to the `user` role and supports the security hygiene for accounts created in `todo_app_user`. Because the Prisma schema includes `password_hash`, the table supports password-based authentication and updates to that field.\n\nSecurity considerations: The server MUST verify the requester is the owner of the account and MUST re-authenticate or verify the current credential before changing the password, unless this endpoint is used with a validated password-reset token flow. Passwords MUST be hashed before storage. Admins changing user passwords for support purposes SHOULD create an entry in `todo_app_audit_records` to record the admin action (admin_id, action_type='change_password', target_id=user_id, reason).\n\nRelated operations and workflow integration: This operation complements `login` and `refresh`. A password change SHOULD invalidate or rotate refresh tokens depending on security policy and SHOULD be recorded for auditing if performed by an admin.","summary":"Change authenticated user's password (updates todo_app_user.password_hash)","parameters":[],"requestBody":{"description":"Authenticated password-change payload containing current and new password values (or reset token + new password).","typeName":"ITodoAppUser.IChangePassword"},"responseBody":{"description":"Profile-style response confirming update; returns key user fields (email, display_name, account_status, updated_at).","typeName":"ITodoAppUser.IProfile"},"authorizationRole":"user","name":"changePassword","prerequisites":[],"path":"/auth/user/change-password","method":"put"},{"specification":"This operation creates a new administrator account and issues initial authorization tokens. It is associated with the Prisma table `todo_app_admin` and uses fields on that table for account identity and initial state. The operation will insert a new row into `todo_app_admin` (populating at least `email`, `password_hash`, and `is_super` as applicable) and may create an initial audit record in `todo_app_audit_records` to record the account creation event for compliance purposes.","authorizationType":"join","description":"Purpose and overview:\nThis endpoint registers a new administrator account for the system and issues an initial authorized response payload. It is explicitly tied to the Prisma model `todo_app_admin` and will rely on the `email`, `password_hash`, `is_super`, `created_at`, and `last_active_at` fields on that table to represent account identity and state.\n\nImplementation details and required fields:\nWhen called, the implementation will validate the provided `email` and password, persist the new `todo_app_admin` row (setting `email` and, after hashing, `password_hash`) and set the initial `created_at` and `last_active_at` timestamps. If elevated privileges are required for the account, `is_super` may be set per the request. The response payload uses tokens and the admin summary, but token persistence or revocation mechanism is implementation specific and not assumed to be a column on `todo_app_admin`.\n\nRole-specific integration:\nThis endpoint is the public entry point for creating admin accounts. It should ensure the `email` value is unique (the Prisma model defines `@@unique([email])`) and must fail cleanly if a duplicate `email` exists. As part of the workflow, an audit entry may be recorded in `todo_app_audit_records` referencing the created admin (`admin_id`) with `action_type` like `create_admin` to satisfy compliance and traceability.\n\nSecurity considerations:\nPasswords MUST be hashed before storing in `password_hash` and never returned in responses. The implementation must not expose `password_hash` in any response. All audit actions related to account creation SHOULD be recorded in `todo_app_audit_records` (fields available: `admin_id`, `actor_role`, `action_type`, `target_resource`, `target_id`, `created_at`). Use secure transport (HTTPS) and apply rate limiting to prevent abuse.\n\nRelated operations and workflow integration:\nThis operation complements `POST /auth/admin/login` (to obtain access tokens) and `POST /auth/admin/refresh` (to refresh tokens). After creation, the caller is expected to use the issued tokens from this response (see response schema) to authenticate subsequent admin-only endpoints. If email verification is required by policy, the implementation should create an initial unverified state and record this in `todo_app_audit_records`.","summary":"Create a new admin account (todo_app_admin)","parameters":[],"requestBody":{"description":"Registration payload for a new admin account.","typeName":"ITodoAppAdmin.ICreate"},"responseBody":{"description":"Authorized response containing access and refresh tokens and a minimal admin summary.","typeName":"ITodoAppAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"This operation authenticates an administrator against the `todo_app_admin` table. It validates credentials (matching `email` against the unique index on `todo_app_admin.email` and verifying the supplied password against `password_hash`) and issues authorization tokens. Login attempts and important authentication events may be recorded into `todo_app_audit_records` for traceability.","authorizationType":"login","description":"Purpose and overview:\nThis endpoint authenticates an administrator by validating supplied credentials against the `todo_app_admin` model. It references the `email` (unique) column and compares the supplied password to the stored `password_hash` field before issuing tokens. Successful authentication may update `last_active_at` on the `todo_app_admin` row.\n\nImplementation details and validation:\nThe implementation MUST validate that the provided `email` exists in `todo_app_admin`. Password verification must compare the supplied secret to the `password_hash` using secure hash verification (e.g., bcrypt/argon2). On success, the implementation may update `last_active_at` to the current timestamp and optionally create an audit record in `todo_app_audit_records` with `action_type` such as `admin_login` and `actor_role` set to `admin`.\n\nRole-specific integration and behavior:\nThis is a public authentication endpoint that issues an `ITodoAppAdmin.IAuthorized` response containing short-lived access credentials and a refresh credential. The caller uses these tokens for subsequent admin-scoped API calls. The operation should respect account status (the `account_status` field on `todo_app_user` exists for users; for admins the `todo_app_admin` model has `is_super` and timestamps — implementors may add an `account_status` equivalent if needed, but do not assume it exists by default on `todo_app_admin`).\n\nSecurity considerations:\nDo NOT include `password_hash` in any response. Failed login attempts SHOULD be logged to `todo_app_audit_records` with `action_type` like `admin_login_failed` to support monitoring and abuse detection. Apply rate limits and account lockout policies at higher layers.\n\nRelated operations:\nAfter successful login, the issued tokens are expected to be used with `POST /auth/admin/refresh` to renew short-lived access tokens and with admin-protected endpoints that require `authorizationRole: \"admin\"` such as password change or administrative maintenance actions.","summary":"Authenticate admin and issue tokens (todo_app_admin)","parameters":[],"requestBody":{"description":"Login payload: admin email and password.","typeName":"ITodoAppAdmin.ILogin"},"responseBody":{"description":"Authorized response containing access and refresh tokens and a minimal admin summary.","typeName":"ITodoAppAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"This operation refreshes access credentials for an authenticated administrator. It is part of token lifecycle management and is related to admin session handling; the operation is not directly backed by a specific `todo_app_admin` column for tokens (no token columns exist in the Prisma model), but refresh events and revocation attempts SHOULD be recorded in `todo_app_audit_records` for traceability.","authorizationType":"refresh","description":"Purpose and overview:\nThis endpoint accepts a valid refresh credential and issues a new short-lived access token (and optionally a new refresh token). While `todo_app_admin` does not store token values in any specific column, the operation is semantically tied to admin sessions for accounts represented by `todo_app_admin.id` and `todo_app_admin.email`.\n\nImplementation details and security:\nThe implementation must validate the presented refresh credential according to the chosen session/token architecture. Because the Prisma schema does not include dedicated token storage fields, token persistence and revocation logic is an implementation concern; however, all refresh operations SHOULD be recorded to `todo_app_audit_records` (e.g., `action_type = refresh_token_used`, `target_id = admin id`) to support auditability.\n\nRole-specific integration:\nThis is a public endpoint in the auth flow (clients call it with a refresh credential). On successful refresh, the response returns the same `ITodoAppAdmin.IAuthorized` shape used for login / join so that clients have a consistent authorized payload. The server SHOULD update `last_active_at` for the related `todo_app_admin` row when appropriate.\n\nSecurity considerations:\nRefresh tokens SHOULD be revocable (server-side blacklist or rotating refresh tokens). Revocation and revocation attempts SHOULD be logged to `todo_app_audit_records` with appropriate `actor_role` and `action_type` so that administrators can trace suspicious activity.\n\nRelated operations:\nWorks together with `POST /auth/admin/login` (initial issuance) and admin session revocation endpoints (not included here).","summary":"Refresh admin access token","parameters":[],"requestBody":{"description":"Payload containing the refresh credential for token renewal.","typeName":"ITodoAppAdmin.IRefresh"},"responseBody":{"description":"Authorized response containing new access (and optionally refresh) tokens.","typeName":"ITodoAppAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation initiates a password-reset flow for an administrator account identified by email. It references the `todo_app_admin` table (field `email`) to locate the target account. Because the Prisma schema does not include a dedicated reset token column on `todo_app_admin`, implementations commonly emit a time-limited token via email and record the request in `todo_app_audit_records` for traceability.","authorizationType":null,"description":"Purpose and overview:\nThis endpoint starts a password reset workflow for an admin identified by `email` (the `todo_app_admin.email` column). It is used when an admin can no longer authenticate and requires a secure path to re-establish credentials.\n\nImplementation details and required behavior:\nOn receipt of a valid email that maps to an existing `todo_app_admin` row, the implementation SHOULD generate a time-limited reset token (not persisted on `todo_app_admin` by the schema itself) and send it to the provided email address. The operation SHOULD create an audit record in `todo_app_audit_records` with `action_type` like `request_password_reset` and `target_id` set to the admin id to record the event.\n\nRole-specific integration:\nThis is a public endpoint (no prior authentication required). The request MUST NOT disclose whether the email exists in the system in order to avoid user enumeration attacks; instead, the response SHOULD be a generic success message while the server performs any email actions silently.\n\nSecurity considerations:\nEnsure the reset token is single-use and expires promptly (recommended default: 24 hours). Do NOT return reset tokens in the API response. Record all reset initiation attempts in `todo_app_audit_records` for monitoring.\n\nRelated operations:\nA subsequent endpoint (not included here) would accept the token and the new password to complete the reset and update `todo_app_admin.password_hash` accordingly; that operation SHOULD also create an audit record with `action_type`: `complete_password_reset`.","summary":"Initiate admin password reset (todo_app_admin.email)","parameters":[],"requestBody":{"description":"Payload containing the admin email to initiate a password reset.","typeName":"ITodoAppAdmin.IRequestPasswordReset"},"responseBody":{"description":"Generic operation result message (do not disclose whether account exists).","typeName":"ITodoAppAdmin.IMessage"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/admin/password/reset","method":"post"},{"specification":"This operation allows an authenticated administrator to change their password. It updates the `password_hash` column on the `todo_app_admin` row for the authenticated admin and records the change in `todo_app_audit_records` for traceability (e.g., `action_type` = `change_password`).","authorizationType":null,"description":"Purpose and overview:\nThis endpoint enables an authenticated admin to change their password. It targets the `todo_app_admin` record for the calling admin (fields: `id`, `email`, `password_hash`, `last_active_at`) and updates `password_hash` with a new hashed secret.\n\nImplementation details and validation:\nThe endpoint requires the caller to be authenticated as an admin (`authorizationRole: \"admin\"`). It should verify the caller's current credential or session and validate the new password against password policy before hashing and storing it in `password_hash`. Upon success, the implementation SHOULD update `updated_at` and optionally `last_active_at` on the `todo_app_admin` row.\n\nSecurity considerations:\nDo NOT log the plain-text password. Record the password change action in `todo_app_audit_records` with `action_type` such as `change_password` and include the `admin_id` and timestamp. Consider revoking outstanding refresh tokens or sessions after a password change to reduce risk.\n\nRelated operations:\nThis operation complements `POST /auth/admin/password/reset` (reset flow) and token refresh endpoints. It is restricted to authenticated admins and must be audited.","summary":"Change authenticated admin password (todo_app_admin.password_hash)","parameters":[],"requestBody":{"description":"Payload containing current credential proof and the new password.","typeName":"ITodoAppAdmin.IChangePassword"},"responseBody":{"description":"Operation result message confirming password change.","typeName":"ITodoAppAdmin.IMessage"},"authorizationRole":"admin","name":"changePassword","prerequisites":[],"path":"/auth/admin/password/change","method":"put"},{"specification":"Operation: Retrieve a filtered, paginated list of todo items from the todo_app_todos table in the Prisma schema. This operation corresponds to the Prisma model `todo_app_todos` and implements business-facing search and pagination for a user's todos. It is designed to work with the table columns defined in the Prisma schema (id, user_id, title, description, is_completed, completed_at, position, created_at, updated_at, deleted_at) and to respect the table's soft-delete semantics by excluding rows where deleted_at is set unless explicitly requested. The operation supports filtering by completion state (is_completed), optional inclusion of deleted items, sorting by created_at or position, and standard pagination parameters (page, pageSize). The response is a paginated summary collection referencing the main entity type `ITodoAppTodo.ISummary` and a paginated container type `IPageITodoAppTodo.ISummary` per service prefix conventions.\n\nBusiness purpose: Provide a single endpoint for clients to list a user's todos with common filtering, sorting, and pagination needs. The operation is tailored to the `todo_app_todos` Prisma table and therefore only references columns that exist in that model. This operation is intended for authenticated users and will return only todos owned by the requesting user (enforced in business logic).","path":"/todoApp/user/todos","method":"patch","summary":"Search and retrieve a filtered, paginated list of todo summaries from todo_app_todos","description":"Retrieve a filtered and paginated list of todo items owned by the requesting user.\n\nPurpose and overview:\nThis endpoint returns a paginated collection of todo summaries derived from the Prisma `todo_app_todos` model. The model stores primary todo data including title, optional description, completion flag, timestamps, and a nullable deleted_at column that implements soft-delete semantics in the schema. By default, the operation excludes records with `deleted_at` set (deleted items). Callers may request inclusion of deleted items via the request DTO when an administrative or recovery view is required.\n\nSecurity and permissions:\nOnly authenticated requests scoped to the owning user may retrieve their todos; the operation must ensure the returned rows have `user_id` equal to the requesting user's id. The API surface for listing is restricted to role `user`. Any elevated listing that includes other users' data or exhaustive audit results must be implemented in separate admin endpoints and recorded in `todo_app_audit_records`.\n\nRelationship to underlying database entities:\nThis operation maps to the Prisma model `todo_app_todos`. It relies on columns explicitly defined in that model: `id`, `user_id`, `title`, `description`, `is_completed`, `completed_at`, `position`, `created_at`, `updated_at`, and `deleted_at`. Snapshots are captured separately in `todo_app_todo_snapshots`; snapshot creation is a background or explicit process and is not performed by this read operation.\n\nValidation rules and business logic:\n- The operation accepts pagination parameters (page, pageSize) and enforces sane server-side limits for pageSize.\n- Filter fields: `isCompleted` (boolean) filters by `is_completed`. If omitted, both active and completed todos are returned (subject to exclusion of deleted items).\n- Sorting: clients may request sort by `createdAt` or `position` with ascending/descending direction. Sorting keys correspond to `created_at` and `position` columns in the Prisma model.\n- Deleted items: by default, rows where `deleted_at` is NOT null are excluded; inclusion requires an explicit includeDeleted flag and should be limited to administrative/owner recovery scenarios.\n\nRelated operations and error handling:\nUse `GET /todoApp/user/todos/{todoId}` (operation `at`) to fetch a single todo detail. Clients requesting export or heavy full-text search should use dedicated endpoints. Common errors: 400 for invalid request parameters, 401/403 for unauthorized access, and 500 for unexpected server errors. Missing resources are returned as empty pages rather than 404 for list endpoints.","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for listing todos owned by the requesting user.","typeName":"ITodoAppTodo.IRequest"},"responseBody":{"description":"Paginated list of todo summaries matching the search criteria. Each summary includes id, title, isCompleted, createdAt, updatedAt, position, and a short excerpt of the description when present.","typeName":"IPageITodoAppTodo.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"Create a Todo item for the authenticated user (inserts a row into todo_app_todos). Listing the user's todos assumes there may be persisted items; executing POST /todoApp/user/todos ensures a todo_app_todos record exists for the requesting user. If creation fails or is not performed, list endpoints may return empty pages and tests that expect returned data will fail."}]},{"specification":"Operation: Retrieve a single todo detail from the `todo_app_todos` Prisma table. This operation is associated with the `todo_app_todos` model and returns the full entity for a given todo id. The operation respects the model's soft-delete semantics by returning 404 when the target row has `deleted_at` set (unless business rules allow returning deleted items to owners/admins). The returned entity includes fields defined on the Prisma model: id, user_id, title, description, is_completed, completed_at, position, created_at, updated_at, deleted_at.\n\nBusiness purpose: Allow clients to fetch one todo item by its UUID for display or editing. The endpoint enforces ownership: only the owner (or an authorized admin) can successfully retrieve the record.","path":"/todoApp/user/todos/{todoId}","method":"get","summary":"Retrieve detailed information for a single todo by id from todo_app_todos","description":"Retrieve full details of a single todo item.\n\nPurpose and overview:\nThis endpoint returns the complete `todo_app_todos` entity for the provided `todoId`. It is intended to supply clients with all available fields defined in the Prisma model, enabling detailed views and edit screens. Timestamps provided are those defined on the model (`created_at`, `updated_at`, `completed_at`, `deleted_at`).\n\nSecurity and user permissions:\nThe operation requires that the requester be the owner of the todo (matching `user_id`) or an authorized admin with audited access. Unauthorized attempts must result in 403. If the todo is soft-deleted (non-null `deleted_at`), the API returns 404 unless the request is for owner recovery and the business logic explicitly allows returning deleted items to the owner.\n\nRelationship to database and snapshots:\nThe todo returned is the live record in `todo_app_todos`. Historical snapshots exist in `todo_app_todo_snapshots` and are not returned by this endpoint. Snapshot retrieval is available via a separate audit/history endpoint if needed.\n\nValidation and error handling:\n- Path parameter `todoId` MUST be a UUID. If malformed, return 400.\n- If the todo does not exist or is not accessible to the requester (including when it is deleted and not permitted to be returned), return 404.\n- On success, return the full `ITodoAppTodo` representation with all model-described fields.\n\nRelated operations:\nUse `PATCH /todoApp/user/todos` (operation `index`) to search/paginate lists. Use `PATCH /todoApp/user/todos/{todoId}` (update) to modify the item. Administrative restores and purges are separate operations and must be recorded in `todo_app_audit_records`.","parameters":[{"name":"todoId","description":"Unique identifier (UUID) of the target todo item","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Complete todo entity as defined by the `todo_app_todos` Prisma model.","typeName":"ITodoAppTodo"},"authorizationType":null,"authorizationRole":"user","name":"at","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"The GET operation requires the todo resource to exist. POST /todoApp/user/todos creates a todo and returns its generated id (todoId). The created todo must exist and be accessible to the requester (owner or authorized admin); if this prerequisite is not satisfied the retrieval will result in 404 or 403 as appropriate."}]},{"specification":"Create operation for the todo_app_todos Prisma model. This operation inserts a new todo record into the todo_app_todos table, associating the created record with the authenticated user and returning the created resource with server-populated timestamps. It maps directly to the Prisma model `todo_app_todos` and must respect the model's constraints: `title` is required, `description` is optional, `position` is optional. System-managed fields (id, user_id, created_at, updated_at, completed_at, deleted_at) are set by the server and must not be supplied by clients. The operation enforces ownership: the created record is associated to the calling user. Validation rules and examples are provided in the description.","path":"/todoApp/user/todos","method":"post","summary":"Create a new Todo (todo_app_todos)","description":"Create a new Todo item and persist it in the `todo_app_todos` table. This endpoint accepts minimal user-provided fields required for quick capture (title plus optional description and position). On success the server returns the full Todo record including server-populated fields such as `id`, `created_at`, and `updated_at`.\n\nSecurity and permissions:\nOnly authenticated users may create todos. The creating user's identity is used to set the `user_id` relation in `todo_app_todos`. The operation requires role `user` and the request must be authorized before creating data.\n\nValidation rules and business logic:\n- `title` is required: non-empty string after trimming (1..250 chars recommended).\n- `description` is optional (<= 4000 chars recommended).\n- `position` is optional integer used by clients for ordering.\n- `is_completed` defaults to false; if provided must be boolean.\n- Server sets `created_at` and `updated_at`.\n\nErrors:\n- 400 for validation errors (ERR_INVALID_TITLE, ERR_INVALID_DESCRIPTION).\n- 401/403 for auth errors.\n- 500 for server errors.","parameters":[],"requestBody":{"description":"Creation payload for a new Todo. Clients provide only user-editable fields (title required, description optional, position optional). System-managed fields (id, user_id, created_at, updated_at, completed_at, deleted_at) are omitted and set by the server.","typeName":"ITodoAppTodo.ICreate"},"responseBody":{"description":"Created Todo object including server-populated fields (id, user_id, created_at, updated_at).","typeName":"ITodoAppTodo"},"authorizationType":null,"authorizationRole":"user","name":"create","prerequisites":[]},{"specification":"Update operation for the todo_app_todos Prisma model. This operation updates an existing todo record identified by its UUID. It modifies client-editable fields (title, description, is_completed, position). System-managed fields (id, user_id, created_at) are immutable from the API; `updated_at` and `completed_at` are set/managed by the server. Ownership verification is required and updates to soft-deleted records are rejected. The operation maps to the Prisma model `todo_app_todos` and must follow its constraints.","path":"/todoApp/user/todos/{todoId}","method":"put","summary":"Update an existing Todo by ID (todo_app_todos)","description":"Update an existing Todo item in the `todo_app_todos` table. Clients supply the todo identifier in the path and a payload with the fields to change. The server validates ownership and input, applies allowed updates, sets `updated_at`, and returns the updated resource.\n\nSecurity and permissions:\nOnly the owner of the todo (authenticated role `user`) or an authorized admin flow may update the record. Attempts to update another user's todo MUST be rejected with 403 Forbidden. If the target record has a non-null `deleted_at` (soft-deleted), the server SHOULD return 404 Not Found or 410 Gone depending on policy; this operation does not implicitly undelete resources.\n\nValidation and business logic:\n- `title` if provided must be non-empty and within allowed length (1..250 chars).\n- `description` if provided must be <= 4000 chars.\n- `is_completed` toggled true sets `completed_at` to server time; toggled false clears `completed_at`.\n- `position` if provided must be an integer.\n\nNote on PUT semantics:\nThis operation uses PUT for updates per API conventions. Ensure `ITodoAppTodo.IUpdate` semantics are documented (partial-update with optional fields vs full-replace). If partial updates are used, clients may send only fields to change.","parameters":[{"name":"todoId","in":"path","description":"Unique identifier (UUID) of the target todo to update","required":true,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Partial or full update payload for a Todo. Include only fields to be changed if IUpdate is defined with optional fields. System-managed timestamps and identifiers are not accepted from clients.","typeName":"ITodoAppTodo.IUpdate"},"responseBody":{"description":"Updated Todo object after applying requested changes. Server-populated fields (updated_at, completed_at) reflect the performed updates.","typeName":"ITodoAppTodo"},"authorizationType":null,"authorizationRole":"user","name":"update","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"The todo resource identified by todoId must exist before it can be updated. POST /todoApp/user/todos creates a Todo and returns its id; the update operation requires that the specified todoId reference an existing todo owned by the caller. If this prerequisite is not met, the update will fail with 404 Not Found or 403 Forbidden due to missing resource or ownership issues."}]},{"specification":"Soft-delete (mark as deleted) a Todo record in the todo_app_todos table. This operation targets the todo_app_todos Prisma model and implements a business-level soft-delete by setting the deleted_at timestamp. It requires server-side ownership verification: only the owning user may perform this action. The operation updates deleted_at atomically, preserves created_at and updated_at, and does not modify todo_app_todo_snapshots. The operation returns 204 No Content on success and standard error codes for validation, authorization, and not-found cases.","path":"/todoApp/user/todos/{todoId}","method":"delete","summary":"Soft-delete a todo (mark as deleted) in the todo_app_todos table","description":"Mark a Todo item as deleted by setting its deleted_at timestamp.\n\nPurpose and overview: This operation marks a todo item in the todo_app_todos table as deleted (soft-delete) so it is removed from active and completed lists but retained for recovery and historical purposes. It uses the todo_app_todos.deleted_at column defined in the Prisma schema to record deletion time.\n\nSecurity considerations and user permissions: Only the owning user is permitted to soft-delete their todo. The service must validate ownership using the todo_app_todos.user_id relation to todo_app_user.id. Admin maintenance flows that permanently purge data are separate and must be audited via todo_app_audit_records.\n\nValidation rules and business logic: The todoId path parameter must be a valid UUID and must reference an existing todo record. If the record already has deleted_at set, the operation is idempotent and returns 204. Ownership must be enforced; attempts to delete another user's todo must be rejected with 403. If the todo is missing, return 404. Errors should include machine-readable codes and human-friendly messages.","parameters":[{"name":"todoId","in":"path","description":"Unique identifier (UUID) of the target todo (todo_app_todos.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"The todo resource identified by todoId must exist before it can be soft-deleted. POST /todoApp/user/todos creates the Todo and returns its id; the delete operation requires that the specified todoId reference an existing todo owned by the caller. If this prerequisite is not met, the delete will fail with 404 Not Found or 403 Forbidden."}],"name":"erase"},{"specification":"Retrieve a paginated, filterable list of snapshot versions for a specific todo. This operation reads from the todo_app_todo_snapshots Prisma model and returns historical snapshots for the referenced todo_app_todos.id. Supports filtering by snapshot_at ranges, is_completed, sorting (snapshot_at desc default), and pagination. Snapshots are system-generated and this endpoint is read-only.","path":"/todoApp/user/todos/{todoId}/versions","method":"patch","summary":"List paginated snapshot versions for a specific todo (todo_app_todo_snapshots)","description":"Retrieve snapshot history for a given todo item.\n\nPurpose and overview: This operation returns historical snapshots stored in todo_app_todo_snapshots for the specified todo (todo_app_todo_id). Snapshots capture the todo state at snapshot_at and are useful for audit and user-facing \"version history\" views.\n\nSecurity considerations and user permissions: Only the todo owner (or an authorized admin via separate audit endpoints) should be permitted to view snapshot history. The service must validate ownership by joining todo_app_todo_snapshots.todo_app_todo_id -> todo_app_todos.id -> todo_app_todos.user_id and comparing to the calling user.\n\nValidation rules and business logic: Accepts pagination, sort, and optional filter parameters (e.g., snapshot_at range, is_completed). Defaults: sort by snapshot_at desc, default page size 20, enforce a reasonable max page size to prevent large payloads. Return paginated container with metadata (page, pageSize, total). Handle empty results gracefully.","parameters":[{"name":"todoId","in":"path","description":"Unique identifier (UUID) of the parent todo (todo_app_todos.id) to list snapshots for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, sort and pagination parameters for todo snapshot listing","typeName":"ITodoAppTodoSnapshot.IRequest"},"responseBody":{"description":"Paginated list of todo snapshot summaries","typeName":"IPageITodoAppTodoSnapshot"},"authorizationType":null,"authorizationRole":"user","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"A Todo must exist before its snapshot history can be listed. POST /todoApp/user/todos creates the parent todo and returns its id (todoId). If the todo does not exist the snapshot listing cannot succeed."}],"name":"index"},{"specification":"Retrieve a specific todo snapshot (version) from the todo_app_todo_snapshots Prisma model. This read-only operation returns the exact point-in-time snapshot recorded in the `todo_app_todo_snapshots` table. This operation MUST verify that the snapshot.todo_app_todo_id equals the provided todoId and that the parent todo's user_id equals the requesting user's id. The response MUST only include fields defined on the snapshot model (id, todo_app_todo_id, title, description, is_completed, completed_at, position, created_at, updated_at, deleted_at, snapshot_at) and MUST NOT include any sensitive fields from related user or admin records (e.g., password_hash).","path":"/todoApp/user/todos/{todoId}/versions/{versionId}","method":"get","summary":"Retrieve a specific todo snapshot (version) from todo_app_todo_snapshots","description":"Retrieve a specific todo snapshot (version) from the todo_app_todo_snapshots table.\n\nPurpose and overview: This operation returns the stored snapshot representing the state of a todo at a past point in time. The data is sourced from the Prisma model `todo_app_todo_snapshots` and exposes fields captured at the snapshot moment (id, todo_app_todo_id, title, description, is_completed, completed_at, position, created_at, updated_at, deleted_at, snapshot_at). It is read-only and intended for history, audit, and owner support usage.\n\nSecurity and permissions: This endpoint is accessible to the owning user only. Implementations MUST verify ownership by ensuring the parent todo (todo_app_todos.id) has user_id equal to the requesting user. Admins should use the admin-scoped endpoint instead. Under no circumstances should this endpoint return authentication secrets or sensitive fields from other models.\n\nRelationship to database entities: Maps directly to `todo_app_todo_snapshots`. The path parameter `todoId` corresponds to the source todo id (todo_app_todo_snapshots.todo_app_todo_id) and `versionId` corresponds to snapshot primary key (todo_app_todo_snapshots.id).\n\nValidation and error handling: Both path parameters MUST be valid UUIDs. If the snapshot is not found or does not belong to the provided todoId, return 404. If ownership check fails, return 403.\n","parameters":[{"name":"todoId","description":"Unique identifier of the parent todo (references todo_app_todos.id).","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier of the snapshot record (todo_app_todo_snapshots.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single todo snapshot record as defined by the todo_app_todo_snapshots model.","typeName":"ITodoAppTodoSnapshot"},"authorizationType":null,"authorizationRole":"user","name":"at","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"The parent Todo must exist before a specific snapshot can be retrieved. POST /todoApp/user/todos creates the todo and yields the todoId that snapshots reference. If the parent todo is missing the snapshot cannot be validated or returned."}]},{"specification":"Administrator read access to a specific todo snapshot (version) from the todo_app_todo_snapshots Prisma model. This operation is intended for support and audit workflows. Implementations MUST record the admin access in `todo_app_audit_records` (actor_role='admin', action_type='view_snapshot', target_resource='todo_snapshot', target_id=versionId) and must not return sensitive authentication fields. Response content MUST be limited to snapshot model fields.","path":"/todoApp/admin/todos/{todoId}/versions/{versionId}","method":"get","summary":"Admin retrieve a specific todo snapshot (version) from todo_app_todo_snapshots","description":"Retrieve a specific todo snapshot (version) from the todo_app_todo_snapshots table for administrative/support use.\n\nPurpose and overview: Returns the snapshot recorded for a todo at a prior time. This admin endpoint supports troubleshooting and audit investigations.\n\nSecurity and permissions: Access restricted to admin role. Implementations MUST authenticate the admin, authorize the request, and create an audit record documenting the access (admin id, action_type 'view_snapshot', target_resource 'todo_snapshot', target_id). The response MUST NOT include any authentication secrets or other sensitive fields from related models.\n\nRelationship to database entities: Maps directly to `todo_app_todo_snapshots`. The path parameter `todoId` corresponds to snapshot.todo_app_todo_id; `versionId` corresponds to snapshot.id.\n\nValidation and error handling: Both path parameters MUST be valid UUIDs. If the snapshot is not found or the todoId does not match, return 404.\n","parameters":[{"name":"todoId","description":"Unique identifier of the parent todo (references todo_app_todos.id).","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier of the snapshot record (todo_app_todo_snapshots.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single todo snapshot record as defined by the todo_app_todo_snapshots model.","typeName":"ITodoAppTodoSnapshot"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"The parent Todo must exist before a snapshot can be retrieved. POST /todoApp/user/todos creates a todo_app_todos record and returns its generated id, which is referenced by todo_app_todo_snapshots.todo_app_todo_id. If the Todo does not exist, the snapshot lookup will be invalid or return 404."}]},{"specification":"Search and retrieve paginated audit records from the todo_app_audit_records Prisma model. This operation supports filters (admin_id, user_id, actor_role, action_type, target_resource, target_id, created_at range), sorting, and pagination. It is admin-only and MUST enforce pageSize caps to prevent expensive queries.","path":"/todoApp/admin/auditRecords","method":"patch","summary":"Search and retrieve a paginated list of audit records (todo_app_audit_records)","description":"Retrieve a filtered, paginated list of audit records from the todo_app_audit_records table.\n\nPurpose and overview: Enables administrative interfaces to search audit events (suspend_user, restore_todo, purge, view_snapshot, etc.). Each record contains admin_id (nullable for system actions), user_id (nullable), actor_role, action_type, target_resource, target_id, reason, and created_at. Returned results MUST only include fields present in the audit model or explicitly allowed metadata; do not project authentication secrets from related user/admin tables.\n\nSecurity and permissions: Access is restricted to admin role. Implementations MUST validate requestor's admin privileges and enforce rate limits and page size caps. All admin access to audit data for support should itself be recorded as an audit event when appropriate.\n\nRelationship to database entities: Maps directly to `todo_app_audit_records`. Suggested filters in requestBody must reference the model fields only.\n\nValidation and business logic: Request body supports paging (page, pageSize), sorting (created_at asc/desc), and optional filters. Server must validate pagination and impose a maximum pageSize to prevent heavy queries. Use available indexes (created_at, admin_id, user_id, target_resource/target_id) to implement efficient queries.\n","parameters":[],"requestBody":{"description":"Search criteria, pagination, and sorting options for audit record retrieval","typeName":"ITodoAppAuditRecord.IRequest"},"responseBody":{"description":"Paginated list of audit records matching the search criteria","typeName":"IPageITodoAppAuditRecord"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/todoApp/user/todos","method":"post"},"description":"When audit searches are filtered by a target_id that references a todo, that todo must exist. POST /todoApp/user/todos creates the referenced todo resource (todo_app_todos) so audit records can meaningfully reference it; without the Todo existing, searches scoped to that target_id may return no results."}]},{"specification":"Retrieve a single audit record by ID from the Prisma table todo_app_audit_records. This read-only operation returns the stored audit record fields (id, admin_id, user_id, actor_role, action_type, target_resource, target_id, reason, created_at) for administrative inspection. Implementation must not provide write access to audit records and must avoid expanding related admin or user objects that include sensitive fields (password_hash).","path":"/todoApp/admin/auditRecords/{auditRecordId}","method":"get","summary":"Retrieve a single audit record (todo_app_audit_records) by ID","description":"Retrieve a single audit record by its unique identifier from the audit record store.\n\nThis operation returns the audit entry that corresponds to the Prisma model `todo_app_audit_records`. The model stores append-only records including admin_id (nullable), user_id (nullable), actor_role, action_type, target_resource, optional target_id, optional reason, and created_at. The operation MUST return these fields exactly as stored and MUST NOT expose sensitive fields from related admin/user records (for example, password_hash).\n\nSecurity and permissions: This endpoint is restricted to administrative actors. Server-side enforcement of the admin role is mandatory. Access to this endpoint should itself be logged in operational access logs for traceability. The endpoint is read-only and must not modify audit records.\n\nBehavior and errors: If the requested id does not exist, return 404 Not Found. On success return the audit record. Server errors return 500 with an error body.","parameters":[{"name":"auditRecordId","description":"Unique identifier (UUID) of the target audit record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit record corresponding to todo_app_audit_records","typeName":"ITodoAppAuditRecord"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/auth/admin/password/reset","method":"post"},"description":"Initiating an admin password reset (POST /auth/admin/password/reset) should create an audit record in todo_app_audit_records (e.g., action_type 'request_password_reset' with target_id set to the admin id). This prerequisite ensures an audit record exists that can be retrieved by the GET operation. If this prerequisite fails or does not create a record, the GET may return 404 Not Found."}]},{"specification":"Search and retrieve a paginated list of guest records from the Prisma table todo_app_guest. This operation supports complex filtering (email partial/exact, status, created_at range), sorting, and pagination. It is intended for administrative maintenance and analytics. Implementations must validate and parameterize filters, apply server-side rate limiting, and avoid exposing personal data (such as full emails) to unauthorized consumers.","path":"/todoApp/admin/guests","method":"patch","summary":"Search and retrieve a paginated list of guest records (todo_app_guest)","description":"Search and retrieve guest records using flexible criteria and pagination. This operation targets the Prisma model `todo_app_guest` and supports filters such as email (exact or partial), status, created_at range, and sorting by created_at or last_active_at.\n\nResponse items include the model's core attributes: id, email (nullable), created_at, last_active_at (nullable), and status (nullable). The request body contains search criteria, pagination, and sorting options. The response is a paginated container of guest record summaries.\n\nSecurity and permissions: Access is limited to administrative actors. Returned personal data (email) must be disclosed only to authorized callers; consider role-based projection or email redaction for lower-privilege support. Implement server-side input validation and parameterized queries to avoid injection and protect performance. Implement rate limiting and audit logging for searches.\n\nErrors: invalid request payloads return 400 with validation details; server errors return 500.","parameters":[],"requestBody":{"description":"Search criteria, pagination, and sorting parameters for guest records","typeName":"ITodoAppGuest.IRequest"},"responseBody":{"description":"Paginated list of guest record summaries matching the search criteria","typeName":"IPageITodoAppGuest.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[]},{"specification":"Retrieve a single guest record from the todo_app_guest Prisma model. This operation is for administrative/support investigative use and returns the persisted fields from todo_app_guest (id, email, created_at, last_active_at, status). The implementation MUST validate guestId is a UUID, return 400 for malformed IDs, 404 when not found, and 500 for unexpected server errors. The service MUST record an audit entry in todo_app_audit_records for each access (admin_id, actor_role='admin', action_type='read_guest', target_resource='guest', target_id=guestId, created_at).","path":"/todoApp/admin/guests/{guestId}","method":"get","summary":"Retrieve a guest (visitor) record by ID from the todo_app_guest table","description":"Returns a single guest record from the todo_app_guest model. The guest model stores lightweight visitor entries such as optional email, creation timestamp, last activity, and a housekeeping status.\n\nSecurity and permissions: Access to guest records is restricted to administrative/support users only. Calls to this endpoint MUST be authenticated and authorized. The server implementation MUST create an audit record in todo_app_audit_records for each access (actor_role='admin', action_type='read_guest', target_resource='guest', target_id=guestId).\n\nData and behavior: The response contains the guest's persisted fields (id, email, created_at, last_active_at, status). This endpoint performs no mutation; it is strictly read-only. Validation rules require the path parameter to be a UUID. Errors returned include 400 for invalid ID format, 404 when the guest is not found, and 500 for unexpected server errors.","parameters":[{"name":"guestId","in":"path","description":"Unique identifier (UUID) of the guest record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Guest record representation","typeName":"ITodoAppGuest"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"Search and retrieve a paginated list of users from the todo_app_user Prisma model. Supports pagination, sorting, and optional filters (e.g., account_status, emailLike). Returns summary fields suitable for admin listing (id, email, display_name, account_status, created_at, last_active_at). The service MUST exclude secrets such as password_hash from responses and MUST audit admin searches in todo_app_audit_records (actor_role='admin', action_type='search_users', reason optional). Implementers should validate pagination parameters and account_status filter values against the canonical set of statuses and enforce reasonable pageSize limits.","path":"/todoApp/admin/users","method":"patch","summary":"Search and retrieve a paginated list of user accounts (admin)","description":"Provides a paginated, filterable list of users from the todo_app_user model. Intended for administrative use to find users by email substring, account_status, or creation timeframe. Supports pagination and sorting to enable efficient UI listing.\n\nSecurity and permissions: This endpoint MUST be restricted to administrative roles. The response MUST NOT include sensitive fields such as password_hash. All accesses SHOULD be recorded in todo_app_audit_records with admin identifier and the used filter parameters (avoid storing full PII in logs unless necessary).\n\nValidation and errors: Validate pagination parameters (page >= 1, pageSize reasonable bounds), validate account_status values against the canonical list (e.g., 'active','suspended'), and validate emailLike length. Return 400 for malformed requests, 401/403 for unauthorized access, and 500 for server errors.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering users","typeName":"ITodoAppUser.IRequest"},"responseBody":{"description":"Paginated list of user summary information matching search criteria","typeName":"IPageITodoAppUser.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[]},{"specification":"Retrieve a single user account by ID from the Prisma model `todo_app_user`. Returns a safe public profile representation suitable for UI display and support. This operation MUST NOT expose sensitive authentication fields such as `password_hash`. Authorization: only the account owner or an administrator may retrieve the record; administrative accesses MUST be recorded to `todo_app_audit_records` with actor_role='admin' and action_type='read_user'.","path":"/todoApp/user/users/{userId}","method":"get","summary":"Retrieve a user account by ID (todo_app_user)","description":"Purpose and overview:\n\nRetrieve the requested user account from the `todo_app_user` table by `userId`. The response contains public profile fields: `id`, `email`, `display_name`, `account_status`, `created_at`, `updated_at`, and `last_active_at`. The endpoint MUST NOT return `password_hash` or any internal secrets.\n\nSecurity and permissions:\n\n- Access policy: Owner or admin only. If the caller is the owner, return the full profile (excluding secrets). If the caller is an admin, return the profile and create an audit record in `todo_app_audit_records` with `actor_role='admin'` and `action_type='read_user'` and include optional reason when provided.\n- Validation: `userId` must be a UUID. Return 400 for malformed, 404 if not found, 403 if unauthorized.\n\nSchema relationship and notes:\n\nThis operation maps to Prisma model `todo_app_user`. Use only the documented safe fields in responses; do not expose `password_hash`. Any derived flags (e.g., `isVerified`) must be computed server-side and documented separately.\n\nError handling:\n\n- 400 Bad Request: invalid UUID\n- 403 Forbidden: not owner or not admin\n- 404 Not Found: user does not exist\n- 500 Internal Server Error: unexpected failures\n","parameters":[{"name":"userId","description":"Unique identifier of the target user (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User account details (public profile fields). Excludes `password_hash` and other sensitive fields.","typeName":"ITodoAppUser"},"authorizationType":null,"authorizationRole":"user","name":"at","prerequisites":[]},{"specification":"Administrator retrieval of a user account by ID from the Prisma model `todo_app_user`. Designed for support/maintenance UIs. This operation MUST NOT expose `password_hash`. Administrative access MUST be auditable in `todo_app_audit_records` (actor_role='admin', action_type='read_user').","path":"/todoApp/admin/users/{userId}","method":"get","summary":"Admin: retrieve a user account by ID (todo_app_user)","description":"Purpose and overview:\n\nAllow administrators to retrieve a user's profile for support and maintenance. Returns the same safe profile fields as the user-facing endpoint: `id`, `email`, `display_name`, `account_status`, `created_at`, `updated_at`, and `last_active_at`. Do NOT include `password_hash` or other secrets.\n\nSecurity and permissions:\n\n- Access policy: Only callers with admin privileges may call this endpoint. Each admin access MUST create an audit record in `todo_app_audit_records` with `actor_role='admin'`, `action_type='read_user'`, and include `admin_id` and `user_id`.\n- Validation: `userId` must be a UUID. Return 400 for malformed, 404 if not found, 403 if the caller lacks admin privileges.\n\nError handling: same as user-facing GET but ensure audit creation on success and on unauthorized attempts where applicable.\n","parameters":[{"name":"userId","description":"Unique identifier of the target user (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User account details for administrative view. Excludes `password_hash` and other sensitive fields.","typeName":"ITodoAppUser"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"Update allowed profile fields on the Prisma `todo_app_user` model. This endpoint is for the account owner to update their own profile (e.g., `display_name`). It MUST NOT accept or persist `password_hash`. Admins may use a separate admin update path to change `account_status` and such admin actions MUST be audited in `todo_app_audit_records` with `actor_role='admin'` and `action_type='update_user'.`","path":"/todoApp/user/users/{userId}","method":"put","summary":"Update a user account (todo_app_user) — owner","description":"Purpose and overview:\n\nUpdate mutable profile attributes for the specified user. Intended for owner-initiated updates such as `display_name`. System-managed fields (`id`, `created_at`, `updated_at`, `password_hash`) MUST NOT be accepted from clients. The server will set `updated_at` on successful update.\n\nSecurity and permissions:\n\n- Access policy: Only the resource owner may update their own profile via this path. Attempts to modify another user's profile MUST be rejected with 403. Admins should use the admin update endpoint.\n- Validation: `userId` must be a UUID. Validate `display_name` length (suggested <=255). If `email` changes are allowed by policy, require separate verification flow; otherwise reject email change attempts and return a clear error.\n\nSchema mapping and writable fields:\n\n- Writable by owner: `display_name` (optional).\n- Server-side only / disallowed: `id`, `created_at`, `updated_at`, `password_hash`.\n\nResponses and errors:\n\n- 200: updated user representation (safe fields only)\n- 400: invalid input or malformed UUID\n- 403: unauthorized (not owner)\n- 404: user not found\n","parameters":[{"name":"userId","description":"Unique identifier of the target user (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Owner-updatable user fields. Clients MUST NOT provide `password_hash`. Typical allowed property: `display_name` (optional).","typeName":"ITodoAppUser.IUpdate"},"responseBody":{"description":"Updated user account (public profile fields). Excludes `password_hash`.","typeName":"ITodoAppUser"},"authorizationType":null,"authorizationRole":"user","name":"update","prerequisites":[]},{"specification":"Administrator update of user account fields on the Prisma `todo_app_user` model. Admins may change `account_status` (for example to 'suspended' or 'active') and such operations MUST be recorded in `todo_app_audit_records` with `actor_role='admin'` and `action_type='update_user'` including an optional `reason`. This endpoint MUST NOT accept `password_hash` for direct setting; password resets must use a dedicated flow.","path":"/todoApp/admin/users/{userId}","method":"put","summary":"Admin: update a user account (todo_app_user)","description":"Purpose and overview:\n\nAllow administrators to perform sanctioned updates to user accounts such as changing `account_status`. Admin updates must be auditable and follow validation rules. Do NOT accept `password_hash` in the request body.\n\nSecurity and permissions:\n\n- Access policy: Admin-only. Each successful admin update MUST create an audit record in `todo_app_audit_records` containing `admin_id`, `user_id`, `action_type='update_user'`, `reason` (optional), and `created_at`.\n- Validation: `userId` must be a UUID. `account_status` must be validated against allowed values (e.g., 'active','suspended') and rejected if invalid.\n\nSchema mapping and writable fields:\n\n- Admin-writable: `account_status` (validated), optionally `display_name` for admin corrections.\n- Disallowed: `password_hash`, `id`, `created_at` (server-managed).\n\nResponses and errors: standard 200/400/403/404 semantics apply.\n","parameters":[{"name":"userId","description":"Unique identifier of the target user (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin-updatable user fields. Must not include `password_hash`. Typical allowed properties: `account_status` (e.g., 'active','suspended'), `display_name` (optional).","typeName":"ITodoAppUser.IUpdate"},"responseBody":{"description":"Updated user account (public profile fields). Excludes `password_hash`.","typeName":"ITodoAppUser"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[]},{"specification":"This operation provides an administrative search and retrieval API for the todo_app_admin table in the Prisma schema. It enables privileged clients (administrators) to perform complex queries, filtering, sorting and pagination over administrative accounts. The operation maps to the todo_app_admin model and uses only fields present in that model (id, email, password_hash, is_super, created_at, last_active_at) for filtering and projection. Implementation must redact or exclude sensitive fields such as password_hash from responses and enforce strict audit logging for all accesses. Query rules include optional filters by email (exact or partial), by is_super flag, by created_at date ranges, and sorting by created_at or last_active_at. Pagination parameters (page, pageSize) and search text (email) should be supported in the request DTO. Security considerations: only callers with administrative privileges may call this endpoint; responses must not include password_hash. Related operations: GET /admins/{adminId} returns a single admin detail.","path":"/todoApp/admin/admins","method":"patch","description":"Retrieve a filtered, sorted and paginated list of administrative accounts from the todo_app_admin table.\n\nPurpose and overview: This operation lets authorized systems and operators query administrative accounts for support, audit, and maintenance tasks. It operates directly on the todo_app_admin model defined in the Prisma schema, which stores admin account identifiers, email addresses, super-admin flags, account creation timestamps, and last-active timestamps. The operation supports pagination, free-text email search, boolean filtering on the is_super flag, and sorting by created_at or last_active_at.\n\nSecurity considerations and user permissions: Access to this endpoint is restricted to administrative actors. All accesses to admin records via this endpoint MUST be recorded in audit logs (see todo_app_audit_records) with actor id, action_type, target_resource and timestamp. Responses MUST NOT expose sensitive fields such as password_hash. The service layer should filter out or redact password_hash before sending any response. Rate-limiting and monitoring are recommended to detect abusive enumeration attempts.\n\nRelationship to underlying database entities: This operation queries the todo_app_admin table (Prisma model todo_app_admin). Querying capabilities should correspond to existing schema fields: id (uuid), email (unique), is_super (boolean), created_at (timestamptz), and last_active_at (nullable timestamptz). Implementations may optionally join audit data for enriched results but must avoid leaking audit details unless explicitly requested.\n\nValidation rules and business logic: The request DTO must validate pagination parameters (page >= 1, pageSize reasonable limits), validate sort fields to allowed set (created_at, last_active_at), and require that the caller is an admin. Search parameters for email should be normalized and limited to prevent high-cost queries. Any attempt to include password_hash in projection or filters must be rejected.\n\nRelated API operations: Use GET /admins/{adminId} to retrieve a single admin's details. Use audit-record endpoints (not part of this interface) to inspect who accessed admin records. Error handling: return 400 for invalid request payloads, 401/403 for unauthorized requests, 429 for rate limits, and 500 for unexpected server errors.","summary":"Search and retrieve a filtered, paginated list of administrative accounts (todo_app_admin)","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for listing administrative accounts","typeName":"ITodoAppAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrative account summaries (sensitive fields redacted)","typeName":"IPageITodoAppAdmin.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation returns detailed information about a single administrative account from the todo_app_admin Prisma model. It exposes non-sensitive fields (id, email, is_super, created_at, last_active_at) and explicitly excludes or redacts sensitive data such as password_hash. The operation must validate the existence of the admin record referenced by the adminId path parameter and enforce access control so only authorized administrative callers may retrieve the record. All accesses should be recorded in the audit trail (todo_app_audit_records).\n\nThis operation references the todo_app_admin table and must use that model's fields directly; it must not reference fields that are not present in the model. If the requested adminId does not exist, the operation should return a 404 Not Found. If the caller is not authorized, return 403 Forbidden.","path":"/todoApp/admin/admins/{adminId}","method":"get","description":"Retrieve a single administrative account by its identifier from the todo_app_admin table.\n\nPurpose and overview: Returns details for one admin account to support operational and support workflows. The response includes id, email, is_super, created_at, and last_active_at and MUST NOT include password_hash or other sensitive secrets.\n\nSecurity considerations and user permissions: Only administrative callers are allowed to use this endpoint. Each successful or failed access SHOULD be recorded in todo_app_audit_records for traceability. Super-admin privileges (is_super) may be required for certain management actions, but simple read access may be permitted to standard admins depending on policy; the business rule here is that only \"admin\" role callers may reach this endpoint.\n\nRelationship to underlying database entities: This operation directly maps to the todo_app_admin Prisma model. Implementations should use the schema's id (uuid) path parameter to find the corresponding record and map the model's fields into the response DTO.\n\nValidation rules and business logic: The adminId path parameter MUST be a UUID. The service MUST return 404 if the record is absent. The response MUST redact password_hash. Audit logging is required for all accesses.\n\nRelated API operations: The PATCH /admins endpoint supports searching and listing admins; use that for broader queries.\n\nExpected errors: 400 for malformed UUID, 403 for unauthorized access, 404 when admin not found, 500 for server errors.","summary":"Retrieve detailed information for a specific administrative account (todo_app_admin)","parameters":[{"name":"adminId","description":"Unique identifier (UUID) of the target admin account","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed admin account information with sensitive fields redacted","typeName":"ITodoAppAdmin"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Update an administrative account in the todo_app_admin table. This operation modifies permitted admin fields (email, is_super, last_active_at) for a given admin identified by adminId. It must NOT accept or return password_hash; credential changes are handled by a dedicated credential management endpoint. Implementations MUST create an audit record in todo_app_audit_records as a server-side side effect with action_type 'update_admin', actor_role 'admin', target_resource 'admin', and target_id set to the admin being modified. Business rule: if the request attempts to change is_super, the caller must be an existing super-admin; otherwise the request must be rejected with 403. Associated Prisma DB table: todo_app_admin.","path":"/todoApp/admin/admins/{adminId}","method":"put","summary":"Update an admin account (todo_app_admin)","description":"Update an administrative account's permitted, non-sensitive fields. This operation updates fields on the todo_app_admin model as defined in the Prisma schema (id, email, is_super, created_at, last_active_at). IMPORTANT: this endpoint MUST NOT accept or return `password_hash` or any other credential material. Password/credential rotation must be performed via a dedicated secure credential endpoint.\n\nSecurity and permissions: Only authenticated admins may call this endpoint. If the request payload attempts to change the `is_super` flag, the server MUST verify the caller is a super-admin and otherwise return 403 Forbidden. The server must also validate that the provided email (if present) does not conflict with other unique constraints and handle 409 Conflict when appropriate.\n\nAudit: Implementations MUST generate an audit record in todo_app_audit_records as a server-side side effect for every successful administrative modification. The audit entry should include actor_id (caller), actor_role='admin', action_type='update_admin', target_resource='admin', target_id (adminId), optional reason, and created_at timestamp.\n\nValidation and error handling: The request MUST conform to the ITodoAppAdmin.IUpdate DTO which excludes password_hash. Possible responses: 200 OK with a safe admin representation (no secrets), 400 Bad Request for validation errors, 403 Forbidden for insufficient privileges, 404 Not Found if adminId does not exist, 409 Conflict for uniqueness violations, and 500 for server errors.","parameters":[{"name":"adminId","description":"Unique identifier (UUID) of the target admin account","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin update payload. Only include mutable, non-sensitive fields (email, is_super, last_active_at). Do NOT include password_hash. For credential updates use the credential management endpoint.","typeName":"ITodoAppAdmin.IUpdate"},"responseBody":{"description":"Updated administrative account representation (safe view). This summary MUST NOT include password_hash or other secret fields.","typeName":"ITodoAppAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[]},{"specification":"Permanently remove an administrative account from the todo_app_admin table. The todo_app_admin model does not include soft-delete timestamps, so this endpoint performs a hard delete; implementations must ensure backups, compliance, and auditability before removal. Only super-admins should be permitted to perform permanent removals. The operation MUST create an audit record in todo_app_audit_records with action_type 'erase_admin' (or 'purge_admin'), actor_role 'admin', target_resource 'admin', target_id equal to removed admin id, optional reason, and created_at timestamp. Associated Prisma DB table: todo_app_admin.","path":"/todoApp/admin/admins/{adminId}","method":"delete","summary":"Permanently remove an admin account (todo_app_admin)","description":"Permanently deletes an admin record identified by adminId from the todo_app_admin table. Because the model lacks a soft-delete field, this action is irreversible through normal user flows and should only be permitted after appropriate operational checks.\n\nSecurity and permissions: This operation MUST be restricted to super-admins. The server MUST enforce protections to prevent accidental lockout: it MUST prevent self-deletion (caller deleting their own account) unless an explicit, documented multi-step confirmation flow is used, and it MUST prevent deleting the last remaining super-admin (return 409 Conflict). If the caller lacks privileges, return 403 Forbidden.\n\nAudit and retention: The server MUST create an append-only audit record in todo_app_audit_records for this action with actor_id, actor_role='admin', action_type='erase_admin', target_resource='admin', target_id (adminId), optional reason, and created_at timestamp. Audit records referencing the removed admin MUST NOT be deleted as part of this operation.\n\nBehavior and errors: On success return 204 No Content. If adminId not found return 404 Not Found. If the deletion would violate policy (self-delete or removal of last super-admin) return 409 Conflict with explanatory message. Server errors return 500.","parameters":[{"name":"adminId","description":"Unique identifier (UUID) of the admin account to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated visitor who can view public landing information and help content but cannot create, view, modify, or delete todos. Guests cannot authenticate via API and have no persistent personal data.","kind":"guest"},{"name":"user","description":"Authenticated standard user who can register, authenticate via API, and manage their own todos (create, read, update, delete, mark complete/incomplete). Can set optional attributes such as due date and priority for each todo. Cannot access other users' data or administrative functions.","kind":"member"},{"name":"admin","description":"Authenticated administrator who can authenticate via API and perform elevated management tasks: view aggregate usage, manage user accounts (suspend/reactivate), and perform data maintenance operations. Admins may also act as a regular user for troubleshooting but must be audited when performing admin actions.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoAppTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoAppTodoSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppTodoSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoAppAuditRecord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppAuditRecord"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoAppGuest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppGuest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoAppUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoAppAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoAppAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoAppGuest.IJoin":{"type":"object","x-autobe-prisma-schema":"todo_app_guest","properties":{"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Optional visitor email address as defined by the Prisma model `todo_app_guest.email`.\n\nThis property maps directly to the `email` column in the `todo_app_guest` Prisma model and is nullable by design. When provided, the value MUST be a valid email address. Clients may omit this property to create an anonymous guest record; the server will generate system-managed fields such as `id` and `created_at` and must set them itself."}},"required":[],"description":"Payload to create a guest record (maps to the Prisma model `todo_app_guest`).\n\nThis request object contains only fields the client may provide when creating an ephemeral or anonymous guest record. System-managed fields (id, created_at, last_active_at, status) are set by the server and MUST NOT be provided by the client."},"ITodoAppGuest.IAuthorized":{"type":"object","x-autobe-prisma-schema":"todo_app_guest","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the guest record.\n\nThis value corresponds to the `todo_app_guest.id` primary key in the Prisma model. It is generated by the server as a UUID and is intended for client usage to reference the created guest record in subsequent calls."},"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Guest email as stored on the `todo_app_guest` row (nullable).\n\nWhen present, this is the persisted `email` column value for the guest. It may be `null` for anonymous guests. This property is provided in the authorized response to help clients display or cache guest contact data when available."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for the guest entry.\n\nThis corresponds to the `todo_app_guest.created_at` column in the Prisma model and is expressed in RFC 3339 / ISO 8601 date-time format (UTC recommended). It indicates when the guest record was created by the server."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Last observed activity timestamp for the guest (nullable).\n\nMaps to `todo_app_guest.last_active_at`. This field may be updated by refresh or activity endpoints and is `null` until the guest performs subsequent interactions."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative housekeeping status for the guest as stored in `todo_app_guest.status`.\n\nThis optional field is used for administrative classification (for example, \"active\", \"bounced\"). Values are implementation-defined strings stored in the Prisma model. Clients SHOULD treat this as informational only and MUST NOT rely on exact status text for client-side logic unless agreed with the service contract."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","token"],"description":"Authorization response returned after successful guest creation or token refresh.\n\nThis object contains both persisted guest attributes (those that exist on the `todo_app_guest` Prisma model) and a computed `token` property that provides the authorization material for client usage. The `id` and `token` properties are always present in successful authorization responses. Timestamps use ISO 8601 date-time format. Audit and security-sensitive fields are intentionally excluded from this response."},"ITodoAppGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Opaque refresh credential previously issued to the guest session. The server validates this token, rotates or replaces it when appropriate, and issues a new access token on success. This value is required and must be provided exactly as issued by the service (do not URL-encode or alter).","minLength":1}},"required":["refresh_token"],"description":"Guest refresh request used to obtain a new short-lived access token for an existing guest identity.\n\nThis request payload contains a single required property, `refresh_token`, which represents the refresh credential issued by the server when the guest session was created. On successful validation the server SHOULD update the guest record's `last_active_at` (todo_app_guest.last_active_at) to the current timestamp and MAY record the refresh event in audit logs (todo_app_audit_records) for operational observability.\n\nThis schema is a request DTO and does not directly map to a persistent Prisma model column for token material; the underlying `todo_app_guest` model contains `id`, `email`, `created_at`, `last_active_at`, and `status`. Do NOT include any sensitive secrets or password material in this request. All descriptions and processing notes are provided for implementers and API consumers."},"ITodoAppUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Primary email address for the new user account. This maps to `todo_app_user.email` in the Prisma schema and must be unique. Use a business-format address suitable for account recovery and notifications. The server enforces uniqueness and will return a conflict error if the email already exists."},"password":{"type":"string","description":"Plain-text password supplied by the client. The server MUST hash this value (store only `password_hash` in the database) and MUST never return the plain-text password in any response. Recommended minimum length: 8 characters. The server may enforce additional password rules (complexity) per policy.","minLength":8},"display_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":255},{"type":"null"}],"description":"Optional human-friendly display name for the account. This maps to `todo_app_user.display_name` in the Prisma schema. If omitted the server may leave the column null. The property explicitly allows null to indicate clearing the display name when supported."}},"required":["email","password"],"description":"Create DTO for a new user account.\n\nThis request object contains the minimal fields required to register a new user in the system. It maps to the `todo_app_user` Prisma model conceptually; upon successful processing the server will create a new row and populate server-managed fields (`id`, `password_hash`, `account_status`, `created_at`, `updated_at`, `last_active_at`).\n\nSecurity notes: Clients MUST send the `password` in plain text over a secure channel (TLS) so the server can hash it; the server MUST NOT accept pre-hashed password fields (e.g., `password_hash`). The server MUST enforce the unique constraint on `email` as defined by the Prisma schema and return an appropriate conflict error when violated. Do not include server-only fields (id, created_at, updated_at, password_hash, account_status) in this DTO."},"ITodoAppUser.IAuthorized":{"type":"object","x-autobe-prisma-schema":"todo_app_user","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user (maps to todo_app_user.id). This value is a UUID assigned by the system and MUST be used by clients to reference the authenticated account in subsequent API calls."},"email":{"type":"string","format":"email","description":"Primary email address of the user account.\n\nThis field corresponds to `todo_app_user.email` in the Prisma schema and is unique across accounts. It is used for authentication, password recovery flows, and administrative contact. Implementations should validate email format (RFC 5322 basic validation) and never expose this field in logs without appropriate privacy controls."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-friendly display name for the user.\n\nThis property maps to `todo_app_user.display_name`. It is nullable and intended for UI presentation. When present, it should be a trimmed string; when not set, the property may be null. Do not use this field to infer authentication or authorization decisions."},"account_status":{"type":"string","description":"Lifecycle status of the user account.\n\nThis property corresponds to `todo_app_user.account_status` in the Prisma model and records account state such as 'active' or 'suspended' as defined by product policy. Values are implementation-defined strings managed by administrative workflows and must be enforced by business logic (for example: deny login when status = 'suspended')."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nThis maps to `todo_app_user.created_at` in the Prisma schema. Timestamps use ISO 8601 / RFC 3339 format with timezone (recommended 'date-time' format). This value is system-generated and immutable after creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last modified.\n\nThis field maps to `todo_app_user.updated_at` in the Prisma model and is updated by server-side operations that change account data (profile edits, password changes, etc.). Clients should treat this as authoritative for optimistic-concurrency checks."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of the user's most recent activity.\n\nThis property corresponds to `todo_app_user.last_active_at`. It may be null when no activity has been recorded. Use this field for presence and analytics; do not rely on it for strict security checks."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ITodoAppUser.ISummary","description":"Optional lightweight representation of the authenticated user. Includes safe profile fields suitable for client display. Sensitive fields such as password_hash are intentionally excluded."}},"required":["id","email","account_status","created_at","updated_at","token"],"description":"Authorization response returned after successful authentication or registration.\n\nThis schema represents the authorized session for a TodoApp user. It includes the user's stable identifier and a token object that contains the access/refresh credentials necessary for subsequent authenticated API calls. The token property references the shared IAuthorizationToken schema to ensure consistent token handling across authentication endpoints.\n\nThe optional `user` property provides a safe summary of the authenticated user's profile (for example, email and display name) and is intended for immediate client display after authentication. Sensitive fields such as password_hash are excluded from this DTO.\n\nNote: Because this schema corresponds to the Prisma model `todo_app_user`, all listed properties (except computed or runtime-only properties) exist in the underlying model and must be consistent with database constraints. The server MUST NOT return password or password hash in this response."},"ITodoAppUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The user's primary email address used for authentication. Must be a valid email format and correspond to an existing account when attempting to log in."},"password":{"type":"string","description":"Plain-text password supplied by the user for authentication. This value is accepted only for authentication; the server MUST hash and never store plain-text passwords. Clients MUST transmit this value over TLS."}},"required":["email","password"],"description":"Login request payload for authenticating an existing user.\n\nClients MUST provide the email and password in this object to obtain an authorization response. The server validates credentials against the `todo_app_user.password_hash` and, on success, returns an `ITodoAppUser.IAuthorized` response containing tokens and optional user summary.\n\nSecurity note: Passwords MUST be transmitted using secure channels (TLS). The server MUST never echo the password back in responses or logs. Error responses for authentication failures SHOULD be generic to avoid account enumeration."},"ITodoAppUser.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_app_user","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the user account (UUID) as stored in the todo_app_user table."},"email":{"type":"string","format":"email","description":"Primary email address for the user account. This field is required by the Prisma model and is used for login and communication.\n\nReturned in summaries for administrative listing and owner-facing profile views. Never include password_hash in any response."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name for the user. Nullable in the Prisma model; when absent the value is null."},"account_status":{"type":"string","description":"Account lifecycle status as stored in the Prisma model (for example 'active' or 'suspended').\n\nThis field is required in summary responses to enable admin filtering and support workflows."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created (ISO 8601 date-time). This field exists in the Prisma model and is server-populated."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp of the user's last observed activity. May be null if the user has not been active since account creation."}},"required":["id","email","account_status","created_at"],"description":"User account summary used in paginated admin/user listings.\n\nThis schema intentionally excludes the `password_hash` and other sensitive fields from responses. It maps directly to the Prisma model `todo_app_user` and includes only safe, public-facing attributes."},"ITodoAppUser.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh credential previously issued by the authentication service. Present the token exactly as issued (opaque token or JWT). The server will validate this token and, on success, issue a new access token and optionally rotate the refresh token.","minLength":1}},"required":["refreshToken"],"description":"Request body for exchanging a refresh credential for a new access token.\n\nThis DTO is used when a client needs to obtain a fresh short-lived access token without re-entering credentials. The server validates the provided refreshToken and, if valid, issues a new access token and may rotate the refresh token. The server may update the corresponding user's last_active_at timestamp when the refresh is accepted.\n\nSecurity note: Treat refreshToken as sensitive and transmit it only over TLS."},"ITodoAppUser.IChangePassword.IByCurrent":{"type":"object","properties":{"currentPassword":{"type":"string","description":"The user's current plaintext password. The server MUST verify this value against the stored credential before accepting the change. Do NOT log or echo this value in any responses.","minLength":8},"newPassword":{"type":"string","description":"The desired new plaintext password. The server will hash this value and store the result in the user's password_hash field. Follow the service password policy (recommended minimum 8 characters, at least one letter and one number). Do NOT return this value in any responses.","minLength":8}},"required":["currentPassword","newPassword"],"description":"Change-password request variant for owner-initiated password changes that include the current password.\n\nServer behavior: validate the provided currentPassword, compute and store a secure hash of newPassword, update updated_at on the user record, optionally revoke/rotate refresh tokens, and record an audit entry when policy requires."},"ITodoAppUser.IChangePassword.IByReset":{"type":"object","properties":{"resetToken":{"type":"string","description":"One-time password-reset token previously issued by the system (for example via email). The server MUST validate the token's authenticity and expiry before allowing the change.","minLength":1},"newPassword":{"type":"string","description":"The desired new plaintext password for the account. The server will hash this value and store the result in the user's password_hash field. Follow the service password policy (recommended minimum 8 characters, at least one letter and one number).","minLength":8}},"required":["resetToken","newPassword"],"description":"Change-password request variant used when the user supplies a valid password-reset token.\n\nServer behaviour: validate resetToken (single-use, unexpired), compute and store secure hash of newPassword, update updated_at, and record the action in audit logs when policy requires."},"ITodoAppUser.IChangePassword":{"oneOf":[{"$ref":"#/components/schemas/ITodoAppUser.IChangePassword.IByCurrent"},{"$ref":"#/components/schemas/ITodoAppUser.IChangePassword.IByReset"}],"description":"Change-password request DTO supporting two mutually exclusive patterns.\n\nClients MUST provide exactly one of the two variants:\n- Owner-initiated change (currentPassword + newPassword)\n- Reset-flow change (resetToken + newPassword)\n\nThe server validates the provided proof (current password or reset token), updates the stored password hash with a secure hash of newPassword, updates updated_at, and may revoke/rotate refresh tokens according to security policy."},"ITodoAppUser.IProfile":{"type":"object","x-autobe-prisma-schema":"todo_app_user","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the user account as defined in the Prisma model (todo_app_user.id).\n\nThis value uniquely identifies the user within the system and is used to associate todos and audit events with the account. It is produced by the server and is returned in profile responses for client-side correlation and navigation."},"email":{"type":"string","format":"email","description":"Primary email address for the user account (todo_app_user.email).\n\nThis field is the canonical contact and login identifier for the account. It is returned in profile responses but must never expose authentication secrets. Email values must follow a valid email format."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name for the user (todo_app_user.display_name).\n\nThis value may be null when the user has not provided a display name. It is intended for UI presentation only and may contain user-chosen text such as a full name or nickname."},"account_status":{"type":"string","description":"Account lifecycle status (todo_app_user.account_status).\n\nPossible values are implementation-specific (for example: 'active', 'suspended', 'deleted' or 'unverified'). This property reflects the current account state as stored in the database and is used by clients to determine whether the account may perform authenticated actions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created (todo_app_user.created_at).\n\nRepresented in ISO 8601 / RFC 3339 date-time format. This value is system-managed and returned for display, sorting, and audit purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last modified (todo_app_user.updated_at).\n\nThis value is system-managed and updated on profile or credential changes. Clients may use it to detect stale cached profiles."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of the user's last observed activity (todo_app_user.last_active_at).\n\nThis field is nullable and may be omitted or null if no activity has been recorded yet. When present, it indicates the most recent time the user interacted with the system (login, API call, etc.)."}},"required":["id","email","account_status","created_at","updated_at"],"description":"User profile returned to clients (public-facing, safe view).\n\nThis schema represents a safe, public profile view of the todo_app_user Prisma model. It intentionally omits sensitive authentication fields such as password_hash and includes only fields suitable for client consumption and support workflows. The schema maps to the Prisma model `todo_app_user` and therefore only includes properties that exist on that model or are derived in a manner consistent with server-side handling.\n\nProfile fields: id (UUID), email, optional display_name, account_status, created_at, updated_at, and optional last_active_at. Use this type for authenticated-user profile responses and authorization-aware views."},"ITodoAppAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin account email (todo_app_admin.email).\n\nThis is the primary identifier for the administrative account and must be unique. Provide a valid business email address used for login and notifications."},"password":{"type":"string","description":"Plain-text password for initial admin account creation.\n\nClients MUST provide a user-chosen password in plain text for creation flows; the server is responsible for hashing and storing the result in `todo_app_admin.password_hash`. Do NOT include or expect `password_hash` in requests or responses. Password policy (min length, complexity) is enforced by the server."},"is_super":{"type":"boolean","description":"Flag indicating whether the created admin should have super-admin privileges (todo_app_admin.is_super).\n\nWhen true, the account is granted elevated capabilities; server policies may restrict who can create super-admin accounts. This property is optional and defaults to false when omitted."}},"required":["email","password"],"description":"Create DTO for administrative accounts.\n\nThis schema is the request body for creating a new admin. It accepts the client-provided, user-editable fields required to register an admin: `email` and `password` (plain text). The server will hash the supplied password and persist it as `password_hash` on the todo_app_admin record. The optional `is_super` flag allows requesting super-admin privileges, subject to server-side authorization checks and policies.\n\nSecurity notes: The server MUST never echo back password plaintext or `password_hash` in responses. Administrative creation actions SHOULD be logged in audit records for traceability."},"ITodoAppAdmin.IAuthorized":{"type":"object","x-autobe-prisma-schema":"todo_app_admin","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator account as stored in the todo_app_admin table.\n\nThis value maps directly to the Prisma model primary key and is used to correlate audit records and administrative actions."},"email":{"type":"string","format":"email","description":"Administrator's email address used for login and notifications.\n\nThis field matches the `email` column on the todo_app_admin Prisma model and is returned as part of the authorized user summary. For privacy and security reasons, hashed credentials are never exposed."},"is_super":{"type":"boolean","description":"Flag indicating whether the administrator has super-admin privileges.\n\nTrue indicates elevated privileges that may be required for sensitive administrative operations. This property mirrors the `is_super` column on the todo_app_admin Prisma model."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator account was created.\n\nThis uses ISO 8601 / RFC 3339 date-time format and directly corresponds to the `created_at` column on the todo_app_admin model."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Most recent activity timestamp for the admin account, or null if no activity has been recorded.\n\nWhen present, this timestamp is an ISO 8601 date-time and corresponds to the `last_active_at` column on the todo_app_admin model."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","is_super","created_at","token"],"description":"Authorization response for administrative accounts.\n\nThis schema is returned after successful admin authentication flows such as login, join, or token refresh. It provides a minimal, safe summary of the authenticated admin account (id, email, is_super, timestamps) together with the issued authorization token payload referenced by `IAuthorizationToken`.\n\nSensitive fields such as `password_hash` are intentionally omitted. When `x-autobe-prisma-schema` is present, every property listed here corresponds to an actual column on the `todo_app_admin` Prisma model."},"ITodoAppAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin account email used for authentication.\n\nMust be a valid email address associated with an existing administrative account. Implementations should treat this value case-insensitively when matching existing records."},"password":{"type":"string","description":"Plain-text password supplied for authentication.\n\nThis value is accepted only for authentication purposes and MUST NOT be stored or echoed back in any response. The server is responsible for validating and then hashing or discarding the plain secret."}},"required":["email","password"],"description":"Login request body for administrator authentication.\n\nClients must provide the admin's email and password. On success, this request is expected to return an `ITodoAppAdmin.IAuthorized` response containing issued tokens and admin summary. The schema intentionally does not include any persistent or server-managed fields."},"ITodoAppAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued by the authentication service. This opaque string is presented to the server to obtain a new short-lived access token. Clients MUST treat this value as sensitive and transmit it only over TLS."}},"required":["refresh_token"],"description":"Request payload for renewing administrator access tokens.\n\nThis DTO is used by the admin token refresh endpoint (POST /auth/admin/refresh). It contains the refresh credential that the server validates and (optionally) rotates when issuing a new access token. This type does not map directly to a Prisma model and is part of the token lifecycle contract between client and server.\n\nSecurity note: Refresh tokens should be stored and transmitted securely. The server should apply rotation and revocation policies and log suspicious refresh activity for audit purposes."},"ITodoAppAdmin.IRequestPasswordReset":{"type":"object","x-autobe-prisma-schema":"todo_app_admin","properties":{"email":{"type":"string","format":"email","description":"Email address of the administrator account to initiate password reset for. This value corresponds to the todo_app_admin.email column in the Prisma schema. For security, the API SHOULD not disclose whether the email exists in the system in its response body."}},"required":["email"],"description":"Request payload to initiate an administrator password reset.\n\nThis DTO is used by POST /auth/admin/password/reset. The server locates the matching todo_app_admin row using the provided email and, if policy permits, issues a time-limited reset token via email. The presence of \"x-autobe-prisma-schema\": \"todo_app_admin\" indicates the `email` property maps to the Prisma model's email column; when this field is present it MUST exist on the referenced Prisma model."},"ITodoAppAdmin.IMessage":{"type":"object","properties":{"message":{"type":"string","description":"Human-readable summary message describing the result of an operation.\n\nThis field is intended for display in administrative UIs or API clients to convey short operation outcomes such as confirmations, informational notes, or non-sensitive status messages. Keep content concise and user-facing."}},"required":["message"],"description":"Simple operation result container for administrative endpoints.\n\nUse this schema when an API operation needs to return a short, human-friendly confirmation or informational message and no additional structured data. This type intentionally contains only a single, mandatory string property so callers can reliably display the returned text to administrators or support staff.\n\nDo not include sensitive details (passwords, tokens, hashes) in the message property. Use audit records for security-relevant event recording."},"ITodoAppAdmin.IChangePassword":{"type":"object","properties":{"currentPassword":{"type":"string","minLength":8,"description":"Current account password (plain text) presented for verification.\n\nFor authenticated change-password flows the server MUST verify this value before updating credentials. This property is required for owner-initiated password changes; password-reset flows that use one-time tokens use a different DTO and are not represented by this type."},"newPassword":{"type":"string","minLength":8,"description":"New desired password (plain text). Must meet the service password policy.\n\nThe server is responsible for applying hashing (e.g., bcrypt/argon2) and must never store or return plaintext passwords. Recommended policy: minimum length 8 with at least one letter and one number; apply additional complexity rules as product policy requires."}},"required":["currentPassword","newPassword"],"description":"Payload for an authenticated administrator to change their account password.\n\nThis request object is used by admin-scoped change-password endpoints and contains the current credential for verification plus the new credential to be set. The server MUST validate the currentPassword, enforce password policy on newPassword, hash the new password before storage (populate `todo_app_admin.password_hash`), update relevant timestamps, and record audit events for admin-initiated credential changes.\n\nImportant security notes: Do not echo passwords in any API responses or logs. Consider revoking or rotating active refresh tokens after a successful password change to reduce session theft risk."},"ITodoAppTodo":{"type":"object","x-autobe-prisma-schema":"todo_app_todos","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier for the todo item as defined in the Prisma model `todo_app_todos`.\n\nThis value is a UUID generated by the system and uniquely identifies the record. It is used in API paths and references (for example, when fetching or updating a single todo). Do not allow clients to set or change this value; it is system-managed."},"user_id":{"type":"string","format":"uuid","description":"Identifier of the owning user as stored in `todo_app_todos.user_id`.\n\nThis property links the todo to the owning `todo_app_user` record. The API must ensure returned todos belong to the requesting user (or that the caller is authorized to view the resource). This field is system-populated on create and must not be accepted from untrusted clients in create/update requests."},"title":{"type":"string","description":"Short task title taken from the `title` column in the Prisma model.\n\nThis is a required, public-facing field used for quick-capture and list display. Business validation: the title should be non-empty after trimming and constrained in length by server-side policy (recommended 1–250 characters)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional longer description or notes for the todo item as defined by `description` in the Prisma model.\n\nThis field may be null when no description is provided. When present it can contain additional details to help users recall context; server-side validation should limit length (recommended <= 4000 characters)."},"is_completed":{"type":"boolean","description":"Boolean flag reflecting completion state of the todo (`is_completed` column in Prisma).\n\nTrue indicates the item has been completed. The API should update `completed_at` when this flag transitions to true and clear `completed_at` when it transitions back to false."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the todo was marked completed (`completed_at` in Prisma).\n\nThis is null for incomplete items. When present it is an RFC 3339 / ISO 8601 timestamp representing the completion time. The server is authoritative for this value."},"position":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional integer used by clients to indicate manual ordering (`position` column in Prisma).\n\nNullable: when not provided the server or client may fall back to default ordering (e.g., created_at desc). If provided, it must be an integer and may be used for sort-by-position views."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp from the `created_at` Prisma column.\n\nThis is a server-set timestamp indicating when the todo was originally created. It is provided to clients for display and sorting and must be produced in ISO 8601 / RFC 3339 format."},"updated_at":{"type":"string","format":"date-time","description":"Record last-modified timestamp from the `updated_at` Prisma column.\n\nThe server updates this on every change to the todo record. Clients should use this value for caching, concurrency checks, and to detect changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp corresponding to `deleted_at` in the Prisma model.\n\nWhen null, the item is active (or completed). When set to a timestamp the item is considered soft-deleted and should be excluded from default list views. The retention and purge policy for deleted items is an operational concern described in product requirements."}},"required":["id","user_id","title","is_completed","created_at","updated_at"],"description":"Full representation of a todo record mapped to the Prisma model `todo_app_todos`.\n\nThis schema includes all persistent fields defined by the database model and is intended for detailed item views returned by read endpoints (GET /todoApp/user/todos/{todoId}) and for responses from create/update operations. Sensitive or system-managed fields (IDs and timestamps) are documented as server-managed and should not be accepted from untrusted clients in create/update requests."},"ITodoAppTodo.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Use 1-based indexing. Optional: if omitted the server will default to the first page."},"pageSize":{"type":"integer","minimum":1,"maximum":100,"description":"Number of items per page for paginated results. The server enforces a maximum page size (recommended max 100) to protect performance. If omitted the server default will apply."},"isCompleted":{"type":"boolean","description":"Optional filter to return only items matching completion state. When omitted, both completed and active items are returned (subject to deleted-item exclusion)."},"includeDeleted":{"type":"boolean","description":"When true, include soft-deleted records (items where `deleted_at` is not null). This flag should be used only in recovery or administrative contexts. By default (false or omitted) deleted items are excluded."},"sortBy":{"oneOf":[{"const":"created_at","description":"Sort key. Allowed values map to columns in the Prisma model: `created_at` or `position`. Use `created_at` for chronological order and `position` for client-managed ordering."},{"const":"position","description":"Sort key. Allowed values map to columns in the Prisma model: `created_at` or `position`. Use `created_at` for chronological order and `position` for client-managed ordering."}],"description":"Sort key. Allowed values map to columns in the Prisma model: `created_at` or `position`. Use `created_at` for chronological order and `position` for client-managed ordering."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction applied to the `sortBy` key. Allowed values: `asc` or `desc`. Default server behavior should be documented in the API (for example, newest-first for created_at)."},{"const":"desc","description":"Sort direction applied to the `sortBy` key. Allowed values: `asc` or `desc`. Default server behavior should be documented in the API (for example, newest-first for created_at)."}],"description":"Sort direction applied to the `sortBy` key. Allowed values: `asc` or `desc`. Default server behavior should be documented in the API (for example, newest-first for created_at)."},"q":{"type":"string","description":"Optional simple text search applied to title and/or description. The server may implement simple substring matching or use indexed search depending on implementation. Keep queries short for performance."}},"required":[],"description":"Request DTO for listing/searching todos owned by the requesting user.\n\nThis object contains pagination, filtering, and sorting parameters that map to the `todo_app_todos` model fields. All properties are optional to allow flexible queries. Servers SHOULD validate parameters and enforce sane defaults and limits to prevent expensive queries."},"ITodoAppTodo.ICreate":{"type":"object","x-autobe-prisma-schema":"todo_app_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":250,"description":"Short task title used for quick capture and display.\n\nThis property maps to the Prisma model column `todo_app_todos.title`. It is a required business field and must contain at least one non-whitespace character. Use a concise summary suitable for list displays (recommended max 250 characters). The server will trim leading and trailing whitespace before validation."},"description":{"type":"string","maxLength":4000,"description":"Optional longer description or notes for the todo item.\n\nThis property maps to `todo_app_todos.description` in the Prisma model. It may be omitted when creating a todo. If provided, the text should be suitable for display in a detail view. Maximum length is 4000 characters; the server may trim surrounding whitespace."},"position":{"type":"integer","description":"Optional integer used by clients to indicate manual ordering or position within a list.\n\nThis property maps to `todo_app_todos.position` in the Prisma model. When present, it must be an integer. The server may normalize or adjust positions when persisting to maintain list invariants."},"is_completed":{"type":"boolean","description":"Optional initial completion state for the new todo.\n\nThis property maps to `todo_app_todos.is_completed` in the Prisma model. If omitted, the server will default the value to false. If provided as true, the server will also set the server-side `completed_at` timestamp according to business rules."}},"required":["title"],"description":"Create DTO for todo_app_todos.\n\nThis schema defines the request body for creating a new todo item. It intentionally includes only user-editable fields that exist on the `todo_app_todos` Prisma model. System-managed fields such as `id`, `user_id`, `created_at`, `updated_at`, `completed_at`, and `deleted_at` are NOT accepted in this payload and will be set by the server. The `title` property is required; other properties are optional and will be validated against the constraints described above."},"ITodoAppTodo.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_app_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":250,"description":"Updated short title for the todo item.\n\nThis property maps to `todo_app_todos.title` and is optional in update payloads. When present, it must be a non-empty string (1..250 chars after trimming). Use this field to change the display summary of the todo."},"description":{"type":"string","maxLength":4000,"description":"Updated longer description or notes for the todo.\n\nThis property maps to `todo_app_todos.description` in the Prisma model. It is optional for updates. If omitted, the existing description remains unchanged. To clear an existing description, send an explicit empty string if policy allows; null semantics are implementation-dependent and clients should follow the API guide."},"position":{"type":"integer","description":"Updated integer position used for ordering within a list.\n\nThis property maps to `todo_app_todos.position`. Provide an integer value when reordering items. The server may re-normalize positions to maintain ordering constraints."},"is_completed":{"type":"boolean","description":"Toggle completion state for the todo item.\n\nThis property maps to `todo_app_todos.is_completed`. When set to true, the server will set `completed_at` to the current timestamp. When set to false, the server will clear `completed_at` and set the item back to the active state. This field is optional in update payloads."}},"required":[],"description":"Update DTO for todo_app_todos.\n\nAll properties are optional to support partial updates (PATCH/PUT semantics where partial payloads are permitted). This schema permits only client-editable columns defined on the `todo_app_todos` Prisma model. Immutable and system-managed columns (e.g., `id`, `user_id`, `created_at`, `updated_at`, `deleted_at`) must not be supplied by clients and will be enforced server-side. Validation rules for each property mirror the constraints described in the create DTO."},"ITodoAppTodoSnapshot":{"type":"object","x-autobe-prisma-schema":"todo_app_todo_snapshots","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the snapshot record. Corresponds to todo_app_todo_snapshots.id in the Prisma schema.\n\nThis field is a system-generated UUID that uniquely identifies the snapshot. It is used for lookups and audit/history references."},"todo_app_todo_id":{"type":"string","format":"uuid","description":"Reference to the source todo item. Corresponds to todo_app_todo_snapshots.todo_app_todo_id.\n\nThis UUID links the snapshot to the original todo_app_todos record and is required to correlate history with the live todo."},"title":{"type":"string","description":"Snapshot of the todo title at the time the snapshot was taken. Corresponds to todo_app_todo_snapshots.title.\n\nThis is a textual copy of the source title and is intended for display in history/version views."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Snapshot of the todo description at snapshot time. Corresponds to todo_app_todo_snapshots.description.\n\nThis field is nullable in the Prisma model and therefore may be null when no description existed at snapshot time."},"is_completed":{"type":"boolean","description":"Snapshot of the completion flag at snapshot time. Corresponds to todo_app_todo_snapshots.is_completed.\n\nTrue indicates the source todo was completed at the captured moment; false indicates it was not."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Snapshot of the completed_at timestamp (if set on source). Corresponds to todo_app_todo_snapshots.completed_at.\n\nThis is nullable and records when the source todo was marked completed at the time of snapshot."},"position":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Snapshot of the optional manual ordering position. Corresponds to todo_app_todo_snapshots.position.\n\nThis integer is nullable and used by clients that maintain custom ordering."},"created_at":{"type":"string","format":"date-time","description":"Original created_at from the source todo at snapshot time. Corresponds to todo_app_todo_snapshots.created_at.\n\nRepresents when the source todo was originally created; useful for historical context in the snapshot."},"updated_at":{"type":"string","format":"date-time","description":"Original updated_at from the source todo at snapshot time. Corresponds to todo_app_todo_snapshots.updated_at.\n\nIndicates the latest modification time on the source todo as observed when the snapshot was taken."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Original deleted_at from the source todo at snapshot time (nullable). Corresponds to todo_app_todo_snapshots.deleted_at.\n\nWhen present, this indicates the source todo was soft-deleted at or before the snapshot time."},"snapshot_at":{"type":"string","format":"date-time","description":"Timestamp when this snapshot was created. Corresponds to todo_app_todo_snapshots.snapshot_at.\n\nThis field records the point-in-time when the snapshot was captured and is required for ordering snapshot history."}},"required":["id","todo_app_todo_id","title","is_completed","created_at","updated_at","snapshot_at"],"description":"A todo snapshot representing the state of a todo_app_todos row at a specific point in time.\n\nThis schema maps directly to the Prisma model `todo_app_todo_snapshots`. It includes all persisted columns from that model and mirrors their optionality: nullable fields in the Prisma model are represented using oneOf with a null variant. Use this schema for snapshot retrieval and version-history responses."},"ITodoAppTodoSnapshot.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination (1-based). If omitted, the server default page is applied.\n\nClients should use sensible paging to avoid large responses."},"pageSize":{"type":"integer","description":"Number of items per page. Server may enforce a maximum. If omitted the server default page size will be used."},"sortBy":{"oneOf":[{"const":"snapshot_at","description":"Sort key for snapshots. Allowed values reference snapshot fields on the model: 'snapshot_at' (default) or 'created_at'.\n\nExact enum values must be used."},{"const":"created_at","description":"Sort key for snapshots. Allowed values reference snapshot fields on the model: 'snapshot_at' (default) or 'created_at'.\n\nExact enum values must be used."}],"description":"Sort key for snapshots. Allowed values reference snapshot fields on the model: 'snapshot_at' (default) or 'created_at'.\n\nExact enum values must be used."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed values: 'asc' or 'desc'.\n\nDefaults to 'desc' when not provided."},{"const":"desc","description":"Sort direction. Allowed values: 'asc' or 'desc'.\n\nDefaults to 'desc' when not provided."}],"description":"Sort direction. Allowed values: 'asc' or 'desc'.\n\nDefaults to 'desc' when not provided."},"snapshotAtFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional lower bound (inclusive) for snapshot_at filtering. Use ISO 8601 date-time format.\n\nProvide null explicitly if no lower bound is intended."},"snapshotAtTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional upper bound (inclusive) for snapshot_at filtering. Use ISO 8601 date-time format.\n\nProvide null explicitly if no upper bound is intended."},"isCompleted":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter for snapshot is_completed state. When true, only snapshots captured from completed todos are returned. When false, only non-completed snapshots are returned. Null or omitted returns both."},"includeDeleted":{"type":"boolean","description":"When true, include snapshots taken when the source todo had deleted_at set. Default is false; snapshots of deleted source todos are excluded unless explicitly requested."},"todoId":{"type":"string","format":"uuid","description":"Optional UUID of the parent todo (todo_app_todos.id) to scope snapshots to a specific todo. When provided, results will be limited to snapshots for that todo."}},"description":"Request DTO for listing todo snapshots. Contains pagination, sorting, and filter parameters that map to fields on the `todo_app_todo_snapshots` model.\n\nThis DTO is intended for use with the snapshot listing endpoint and supports server-side limits and validation. All date-time fields must use ISO 8601 date-time format where provided.","required":[]},"ITodoAppAuditRecord":{"type":"object","x-autobe-prisma-schema":"todo_app_audit_records","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the audit record. This maps to the `id` column on the Prisma model `todo_app_audit_records`.\n\nThis value is a UUID generated by the system when the audit record is created. It uniquely identifies the audit event for lookup, retention, and forensic purposes.","example":"3fa85f64-5717-4562-b3fc-2c963f66afa6"},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the acting administrator's id. This corresponds to the nullable `admin_id` column in the Prisma model `todo_app_audit_records`.\n\nWhen present, it identifies the admin account that performed the action. When the action was system-initiated (no admin actor) this field is null."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the user affected by the action. Maps to the nullable `user_id` column on the Prisma model `todo_app_audit_records`.\n\nWhen the audit entry targets a specific user resource, this contains that user's id. For system actions not associated with a user this field may be null."},"actor_role":{"type":"string","description":"Role of the actor who performed the action (for example: 'admin' or 'system'). This maps to the `actor_role` column in the Prisma model.\n\nThis property documents whether the action was performed by an administrative actor or by an automated/system process and aids auditing and filtering.","example":"admin"},"action_type":{"type":"string","description":"Type of action performed, as recorded in the `action_type` column (examples: 'suspend_user', 'restore_todo', 'purge', 'view_snapshot').\n\nThis field is used for quick classification of audit events and MUST use the canonical action type strings used by the application.","example":"restore_todo"},"target_resource":{"type":"string","description":"Logical resource type affected by the action (for example: 'todo', 'user', 'guest', 'todo_snapshot'). This corresponds to the `target_resource` column in the Prisma model.\n\nUsed to scope and filter audit events by the kind of resource that was impacted.","example":"todo"},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the specific target resource (for example the todo id). Maps to the nullable `target_id` column in the Prisma model `todo_app_audit_records`.\n\nWhen present this provides a direct reference to the affected resource instance for quick lookup; otherwise it may be null for actions that are not resource-specific."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-provided reason or note describing why the action was taken. This maps to the nullable `reason` column on the Prisma model.\n\nThis field is intended for short explanatory text recorded by the admin or system operator to provide context for the audit event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit record was created. Maps to the `created_at` timestamptz column on the Prisma model `todo_app_audit_records`.\n\nTimestamps are stored in ISO 8601 / RFC3339 format (UTC recommended) and used for retention, search, and ordering of audit events.","example":"2025-10-07T19:00:00Z"}},"required":["id","actor_role","action_type","target_resource","created_at"],"description":"Audit record entity representing an append-only event created for administrative and system actions.\n\nThis schema maps directly to the Prisma model `todo_app_audit_records` and includes all persisted columns present on that model. Audit records are append-only and used for compliance, troubleshooting, and forensic analysis. Each property description references the corresponding Prisma column and explains the field's role in business workflows."},"ITodoAppAuditRecord.IRequest":{"type":"object","properties":{"actor_role":{"type":"string","description":"Optional filter by actor role (for example 'admin' or 'system'). When provided, the backend SHOULD filter results to matching actor_role values."},"action_type":{"type":"string","description":"Optional filter for one or more action types (e.g., 'suspend_user', 'restore_todo'). If provided, results should be limited to matching action_type values."},"target_resource":{"type":"string","description":"Optional filter by resource kind (for example 'todo', 'user', 'guest', 'todo_snapshot'). When omitted, records across all resources are considered."},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by specific target resource id (UUID). When provided the backend should return audit events referencing that exact resource instance. Note: this is a resource identifier filter, not a direct user/admin actor id filter."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional start time (inclusive) to filter audit records by created_at. Use ISO 8601 / RFC3339 date-time strings in UTC where possible."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end time (inclusive) to filter audit records by created_at. Use ISO 8601 / RFC3339 date-time strings in UTC where possible."},"page":{"type":"integer","minimum":1,"description":"Optional pagination page number (1-based). If omitted the server MAY default to page 1."},"pageSize":{"type":"integer","minimum":1,"maximum":200,"description":"Optional pagination page size. The server SHOULD enforce a sensible maximum (suggested 200) to protect against expensive queries."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort by creation timestamp."},{"const":"action_type","description":"Sort by action type."},{"const":"actor_role","description":"Sort by actor role."}],"description":"Optional sorting key. Allowed values map to indexed columns on the audit table and help the server choose efficient query plans."},"sort_order":{"oneOf":[{"const":"asc","description":"Ascending sort direction."},{"const":"desc","description":"Descending sort direction."}],"description":"Optional sort direction. Defaults to 'desc' when omitted to return newest events first."}},"description":"Request DTO for searching and paginating audit records. This object defines filter, sort, and pagination parameters used by administrative audit search endpoints. Direct actor identifier filters (for example `user_id` or `admin_id`) have been intentionally omitted from this generic IRequest to avoid exposing direct ID-based filtering in the generic request DTO. If admin-only identifier filters are required, create a separate admin-only request DTO.","required":[]},"ITodoAppGuest":{"type":"object","x-autobe-prisma-schema":"todo_app_guest","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the guest record as defined in the Prisma model (todo_app_guest.id).\n\nThis value is system-generated (UUID) when a guest record is created. It uniquely identifies the guest entry and SHOULD be used for any subsequent server-side operations that reference the guest (for example, token issuance or activity updates)."},"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Optional visitor-provided email address recorded on the guest entry.\n\nThis field maps directly to the Prisma column todo_app_guest.email and is nullable by design. When present it SHOULD conform to a valid email format. Use of this field is optional for anonymous guests; when supplied it enables lightweight communication or follow-up flows (for example, passwordless links or recovery)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created (Prisma: todo_app_guest.created_at).\n\nThis field is populated by the server at insertion time and expressed as an ISO 8601 date-time with timezone. It is guaranteed to be present for every persisted guest record and is useful for retention, audit, and housekeeping."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of the guest's last observed activity (Prisma: todo_app_guest.last_active_at).\n\nThis field is nullable and updated by server-side activity handlers (for example, when a guest refreshes tokens or performs actions). Null indicates no observed subsequent activity since creation."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional housekeeping status for the guest record (Prisma: todo_app_guest.status).\n\nTypical values might include 'active', 'bounced', or other operational markers used by support systems. This field is optional and nullable in the Prisma schema; use it for administrative classification only."}},"required":["id","created_at"],"description":"Guest record representation for todoApp.\n\nThis object corresponds directly to the Prisma model `todo_app_guest` and includes the persisted fields that are safe to expose in API responses. The schema intentionally uses the same field names as the Prisma model to facilitate server-side mapping and validation. Sensitive or internal-only fields are not present on the Prisma model and therefore are not included here.\n\nUse this type when returning persisted guest information from endpoints such as guest creation or administrative retrieval. When exposing this object in responses, ensure that access control rules are applied (admin-only endpoints may reveal full emails while lower-privilege support views may redact PII)."},"ITodoAppGuest.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Optional filter for guest email. Supports exact or partial match depending on server implementation (e.g., prefix or contains). Provide the email string without surrounding wildcards; the server determines matching semantics."},"status":{"type":"string","description":"Optional filter for guest status (e.g., 'active', 'bounced'). When provided, the server SHALL filter records by the exact status value."},"created_at_from":{"type":"string","format":"date-time","description":"Optional lower bound (inclusive) for created_at timestamp. Format: ISO 8601 date-time. Use to restrict results to guests created on or after this timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Optional upper bound (inclusive) for created_at timestamp. Format: ISO 8601 date-time. Use to restrict results to guests created on or before this timestamp."},"last_active_at_from":{"type":"string","format":"date-time","description":"Optional lower bound (inclusive) for last_active_at timestamp. Format: ISO 8601 date-time."},"last_active_at_to":{"type":"string","format":"date-time","description":"Optional upper bound (inclusive) for last_active_at timestamp. Format: ISO 8601 date-time."},"page":{"type":"integer","description":"Page number for pagination (1-based). If omitted the server may default to page 1."},"pageSize":{"type":"integer","description":"Number of records per page for pagination. The server SHOULD enforce a maximum page size to protect performance (for example, 100). If omitted the server may apply a sensible default (for example, 20)."},"sortBy":{"oneOf":[{"const":"created_at","description":"Sort key for results. Allowed values correspond to indexed timestamp columns on the Prisma model. Use 'created_at' or 'last_active_at'."},{"const":"last_active_at","description":"Sort key for results. Allowed values correspond to indexed timestamp columns on the Prisma model. Use 'created_at' or 'last_active_at'."}],"description":"Sort key for results. Allowed values correspond to indexed timestamp columns on the Prisma model. Use 'created_at' or 'last_active_at'."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed values: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction. Allowed values: 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction. Allowed values: 'asc' for ascending, 'desc' for descending."}},"required":[],"description":"Request DTO for searching and paginating guest records.\n\nThis object is intended for administrative search endpoints that query the `todo_app_guest` table. All fields are optional: omit fields you do not wish to filter by. Date-time filters must be provided in ISO 8601 format. Pagination and sorting hints are provided to guide efficient server-side querying.\n\nNote: This type is a query/request object and does not use x-autobe-prisma-schema linkage because it describes operation parameters rather than a direct persisted model representation."},"ITodoAppUser":{"type":"object","x-autobe-prisma-schema":"todo_app_user","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user account.\n\nThis property maps directly to the Prisma model column `todo_app_user.id`. It is a system-generated UUID value that uniquely identifies the account across the system and is used as the canonical reference in related tables such as `todo_app_todos` and `todo_app_audit_records`."},"email":{"type":"string","format":"email","description":"Primary email address of the user account.\n\nThis field corresponds to `todo_app_user.email` in the Prisma schema and is unique across accounts. It is used for authentication, password recovery flows, and administrative contact. Implementations should validate email format (RFC 5322 basic validation) and never expose this field in logs without appropriate privacy controls."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-friendly display name for the user.\n\nThis property maps to `todo_app_user.display_name`. It is nullable and intended for UI presentation. When present, it should be a trimmed string; when not set, the property may be null. Do not use this field to infer authentication or authorization decisions."},"account_status":{"type":"string","description":"Lifecycle status of the user account.\n\nThis property corresponds to `todo_app_user.account_status` in the Prisma model and records account state such as 'active' or 'suspended' as defined by product policy. Values are implementation-defined strings managed by administrative workflows and must be enforced by business logic (for example: deny login when status = 'suspended')."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nThis maps to `todo_app_user.created_at` in the Prisma schema. Timestamps use ISO 8601 / RFC 3339 format with timezone (recommended 'date-time' format). This value is system-generated and immutable after creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last modified.\n\nThis field maps to `todo_app_user.updated_at` in the Prisma model and is updated by server-side operations that change account data (profile edits, password changes, etc.). Clients should treat this as authoritative for optimistic-concurrency checks."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of the user's most recent activity.\n\nThis property corresponds to `todo_app_user.last_active_at`. It may be null when no activity has been recorded. Use this field for presence and analytics; do not rely on it for strict security checks."}},"required":["id","email","account_status","created_at","updated_at"],"description":"User account representation (public-safe view) mapped to the Prisma model `todo_app_user`.\n\nThis schema exposes the public profile and lifecycle fields of a user account while deliberately omitting sensitive columns such as `password_hash`. Each property references the related Prisma model column and purpose. Use this type for responses that return user information to owners or authorized administrative viewers. The representation is designed for read and display purposes; write and credential-change operations should use dedicated DTOs.\n\nSecurity note: Do not expose `password_hash` or other secret fields in responses derived from this schema. Administrative endpoints may return this schema for support views but must ensure access is auditable and authorized."},"ITodoAppUser.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Requested page number for paginated results.\n\nThis is a 1-based integer indicating which page of results the client requests. If omitted, the server may default to page 1. Server-side limits and validation apply (e.g., page >= 1).","minimum":1},"pageSize":{"type":"integer","description":"Number of items per page for paginated results.\n\nClients should request a reasonable page size. The server may impose upper bounds to prevent expensive queries. Typical defaults for administrative listings are 20 or 50 items per page.","minimum":1,"maximum":500},"emailLike":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional substring or pattern used to filter users by email.\n\nWhen provided, the server should perform a case-insensitive search on the `email` column (e.g., SQL ILIKE '%emailLike%') and return matching accounts. This parameter is intended for administrative search UIs and may be redacted in audit logs to protect privacy."},"account_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by account status (e.g., 'active','suspended').\n\nWhen supplied, the server SHOULD filter results to accounts whose `account_status` equals the provided value. Valid values depend on product policy; servers should validate against the canonical set of statuses."},"sortBy":{"oneOf":[{"const":"created_at","description":"Sorting key for returned results.\n\nAllowed values typically include 'created_at' and 'last_active_at'. If omitted, the server may use a default sort order. Servers MUST validate the value and reject unknown sort keys."},{"const":"last_active_at","description":"Sorting key for returned results.\n\nAllowed values typically include 'created_at' and 'last_active_at'. If omitted, the server may use a default sort order. Servers MUST validate the value and reject unknown sort keys."}],"description":"Sorting key for returned results.\n\nAllowed values typically include 'created_at' and 'last_active_at'. If omitted, the server may use a default sort order. Servers MUST validate the value and reject unknown sort keys."},"order":{"oneOf":[{"const":"asc","description":"Sort direction to apply to the `sortBy` key.\n\nAllowed values are 'asc' (ascending) or 'desc' (descending). If omitted, the server may default to 'desc'."},{"const":"desc","description":"Sort direction to apply to the `sortBy` key.\n\nAllowed values are 'asc' (ascending) or 'desc' (descending). If omitted, the server may default to 'desc'."}],"description":"Sort direction to apply to the `sortBy` key.\n\nAllowed values are 'asc' (ascending) or 'desc' (descending). If omitted, the server may default to 'desc'."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional full-text search string applied to multiple user fields.\n\nWhen provided, the server MAY apply the search term across several safe fields (email, display_name) using an indexed search strategy. Servers should enforce length limits and sanitize inputs to avoid expensive queries."}},"required":[],"description":"Request DTO used to search, filter, sort, and paginate user accounts.\n\nThis object is intended for administrative listing endpoints and owner self-service listing flows where applicable. It is not directly mapped to a Prisma model (no `x-autobe-prisma-schema`), and therefore may contain query parameters and control flags that assist server-side pagination and filtering logic.\n\nValidation notes:\n- `page` is 1-based and should be >= 1.\n- `pageSize` should be within server-allowed bounds; servers SHOULD enforce a maximum to protect performance.\n- `sortBy` and `order` values are validated by the server; unknown values should return 400 Bad Request.\n\nSecurity note: Avoid logging raw `emailLike` or `search` values in plaintext in broad access logs to protect user privacy. Audit logs for administrative searches should capture who performed the search and when, but redact or hash query strings when appropriate."},"ITodoAppUser.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_app_user","properties":{"display_name":{"oneOf":[{"type":"string","maxLength":255},{"type":"null"}],"description":"Optional display name for the user as defined by the Prisma model `todo_app_user.display_name`.\n\nThis property maps directly to the `display_name` column in the `todo_app_user` table. It is intended for user-facing profile presentation and may be updated by the account owner. The value SHOULD be trimmed of leading/trailing whitespace before persisting and MUST be no longer than 255 characters to remain compatible with typical UI constraints."}},"required":[],"description":"Update DTO for a TodoApp user (owner-updatable fields).\n\nThis object represents the writable profile fields that an account owner may modify. It maps to the `todo_app_user` Prisma model (see `x-autobe-prisma-schema`) and therefore includes only properties that exist on that model. System-managed and sensitive fields such as `id`, `email`, `password_hash`, `created_at`, and `updated_at` are intentionally excluded from this DTO and MUST NOT be supplied by clients.\n\nSecurity note: Password changes are handled by dedicated endpoints and MUST NOT be attempted via this update DTO. Audit-sensitive updates (for example, account_status changes) are reserved for admin-scoped endpoints."},"ITodoAppAdmin.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number for paginated results. The first page is 1."},{"type":"null"}],"description":"Page number (1-based). If omitted or null, the server uses its default page (typically 1)."},"pageSize":{"oneOf":[{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items to return for this page. Servers SHOULD enforce an upper bound (recommended max 100)."},{"type":"null"}],"description":"Requested page size. If omitted or null, server default page size is applied."},"email":{"oneOf":[{"type":"string","description":"Email address to filter exact-match against `todo_app_admin.email`.","format":"email"},{"type":"null"}],"description":"Exact email to match (filters `todo_app_admin.email`). Use exact-match when present."},"emailLike":{"oneOf":[{"type":"string","description":"Substring or pattern used for partial matching of admin emails (server may implement case-insensitive contains or trigram search).","maxLength":256},{"type":"null"}],"description":"Partial email match (e.g., domain or local-part substring). Use for fuzzy/admin search scenarios."},"is_super":{"oneOf":[{"type":"boolean","description":"Filter for super-admin flag (`todo_app_admin.is_super`)."},{"type":"null"}],"description":"When provided, restrict results to admins with the given `is_super` boolean value."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound (inclusive) for admin `created_at` filtering in ISO 8601 format."},{"type":"null"}],"description":"Start of creation time range (ISO 8601 date-time)."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound (inclusive) for admin `created_at` filtering in ISO 8601 format."},{"type":"null"}],"description":"End of creation time range (ISO 8601 date-time)."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Allowed values correspond to columns on `todo_app_admin`."},{"const":"last_active_at","description":"Field to sort results by. Allowed values correspond to columns on `todo_app_admin`."}],"description":"Field to sort results by. Allowed values correspond to columns on `todo_app_admin`."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending."}},"required":[],"description":"Request DTO for admin user search/list operations.\n\nThis object describes the search, filter, sort, and pagination parameters that administrative UIs may pass when listing admin accounts. It references only fields that exist on the `todo_app_admin` Prisma model (email, is_super, created_at, last_active_at) and includes controls for pagination and sorting. All date/time values use ISO 8601 date-time format.\n\nSecurity and usage notes:\n- Access to endpoints accepting this DTO MUST be restricted to administrative actors.\n- Servers SHOULD enforce sensible pageSize caps and sanitize/filter free-text input (emailLike) to prevent expensive queries. Audit logging of admin searches is recommended per product policy."},"ITodoAppAdmin":{"type":"object","x-autobe-prisma-schema":"todo_app_admin","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the admin account as defined in the Prisma model todo_app_admin.id.\n\nThis value is a UUID assigned by the system when the admin record is created. It uniquely identifies the administrative account across the system and is used for audit trails and reference in related models (for example, todo_app_audit_records.admin_id)."},"email":{"type":"string","format":"email","description":"Primary email address for the admin account as defined in todo_app_admin.email.\n\nThis field is used for login and communication. It must be unique across admin records per the Prisma @@unique([email]) constraint. Responses MUST NOT reveal credential material but this public email value is safe to include in admin summaries."},"is_super":{"type":"boolean","description":"Flag indicating whether the admin has super-administrator privileges as stored in todo_app_admin.is_super.\n\nA value of true means the admin holds elevated rights that may be required for sensitive operations. This property is authoritative for role checks in admin-scoped endpoints."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created (todo_app_admin.created_at).\n\nThis is set by the server at insertion time and returned in ISO 8601 / RFC 3339 date-time format. Use this field for sorting and operational timelines."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the admin's last observed activity as stored in todo_app_admin.last_active_at.\n\nThis field is nullable: null means no recent activity has been recorded. When present, it uses ISO 8601 / RFC 3339 date-time format and can be used for presence indicators and housekeeping."}},"required":["id","email","is_super","created_at"],"description":"Admin account representation (safe view).\n\nThis schema represents the public, non-sensitive view of an administrative account. It maps to the Prisma model todo_app_admin and includes identifying and operational fields that are safe to expose in API responses. Sensitive fields present in the underlying Prisma model (for example, password_hash) are intentionally omitted from this DTO to preserve security.\n\nUse cases: returned by admin listing and detail endpoints where an administrative summary is required (for UI display, audit summaries, and support workflows)."},"ITodoAppAdmin.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_app_admin","properties":{"email":{"type":"string","format":"email","description":"New email value for the admin account (todo_app_admin.email).\n\nIf provided, the server MUST validate uniqueness and proper email format. Changing email may require verification depending on product policy. This field is optional in update requests."},"is_super":{"type":"boolean","description":"Update to the super-admin flag (todo_app_admin.is_super).\n\nOnly callers with appropriate authorization (for example, an existing super-admin) should be permitted to change this flag. The server MUST enforce privilege checks and audit this change when applied."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Administrative override for last_active_at (todo_app_admin.last_active_at).\n\nTypically managed by the system; provided here for administrative maintenance tasks. Accepts ISO 8601 / RFC 3339 date-time strings or null to clear. Use with caution: updates to this field SHOULD be audited."}},"required":[],"description":"Admin update DTO for partial updates to an admin account.\n\nAll properties are optional to support partial updates (Partial<T> semantics). This DTO maps to the Prisma model todo_app_admin and therefore includes only properties that exist in that model. The server MUST enforce security rules (who may update which fields), validate inputs (unique email constraint), and create audit records for administrative modifications (especially for is_super changes)."},"ITodoAppAdmin.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_app_admin","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the admin account.\n\nThis property maps to todo_app_admin.id in the Prisma schema and uniquely identifies an administrative account."},"email":{"type":"string","format":"email","description":"Admin account email address.\n\nThis property maps to todo_app_admin.email in the Prisma schema. This field is returned for display in administrative UIs. Password hashes or secrets are intentionally NOT included."},"is_super":{"type":"boolean","description":"Flag indicating whether the admin has super-admin privileges.\n\nMaps to todo_app_admin.is_super in the Prisma schema. Use this flag to gate sensitive admin-only actions."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp as stored in todo_app_admin.created_at.\n\nOnly present because the Prisma model defines it; this is a read-only system field."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Last observed activity timestamp for the admin (nullable).\n\nMaps to todo_app_admin.last_active_at in the Prisma schema and may be null if no activity has been recorded."}},"required":["id","email","is_super","created_at"],"description":"Administrative account summary.\n\nProvides a safe, public-facing summary representation of an administrative account for listing and audit UIs. This summary intentionally omits sensitive fields such as `password_hash` even though that column exists in the Prisma model. All included properties map directly to columns that exist in the `todo_app_admin` Prisma model.\n\nThis schema is used in paginated lists and admin index endpoints (for example, IPageITodoAppAdmin.ISummary)."},"ITodoAppTodo.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_app_todos","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the todo item (Prisma: todo_app_todos.id).\n\nThis UUID is assigned by the server at creation and is the canonical reference used in item-level operations and audit records."},"title":{"type":"string","description":"Short task title used for display and quick capture (Prisma: todo_app_todos.title).\n\nTitles should be concise and are the primary field shown in list views. Validation rules require non-empty trimmed strings; length guidance is 1–250 characters."},"is_completed":{"type":"boolean","description":"Completion flag indicating whether the todo is marked completed (Prisma: todo_app_todos.is_completed).\n\nUse this flag for quick filtering in lists and to drive UI state."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the todo was marked completed (Prisma: todo_app_todos.completed_at).\n\nNullable: null indicates the item is not completed. When set, it records the exact server time the todo entered the completed state."},"position":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional client-managed integer used for manual ordering (Prisma: todo_app_todos.position).\n\nThis property is nullable and may be used by clients to represent custom sort order. The server stores the numeric position if provided."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for the todo (Prisma: todo_app_todos.created_at).\n\nManaged by the server; included to support sorting and display of when the item was created."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp for the todo (Prisma: todo_app_todos.updated_at).\n\nThis timestamp updates on every successful modification and enables clients to detect recent changes and synchronize state."}},"required":["id","title","is_completed","created_at","updated_at"],"description":"Compact representation of a Todo item suitable for list views.\n\nThis summary schema corresponds to the Prisma model `todo_app_todos` and intentionally excludes large-text fields (for example, the full `description`) to keep list responses lightweight. Clients that need the full content must request the detailed `ITodoAppTodo` entity via the single-item endpoint."},"ITodoAppGuest.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_app_guest","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the guest record (UUID). This value is assigned by the server when the guest row is created.\n\nUsed to correlate temporary sessions and short-lived tokens to the guest entry."},"email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Optional email address provided by the visitor. This field is nullable in the Prisma model and may be omitted for anonymous guests.\n\nWhen present, it should be a valid email address; when absent the value is null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest row was created in the database (ISO 8601 / date-time). This field exists in the Prisma model and is populated by the server."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp of the guest's last observed activity. May be null if no subsequent activity has been recorded.\n\nRepresented in ISO 8601 date-time format when present."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional housekeeping status for the guest record (for example 'active' or 'bounced'). This mirrors the nullable status column in the Prisma model."}},"required":["id","created_at"],"description":"Guest summary record returned in administrative listings.\n\nThis summary contains only safe, non-sensitive fields drawn directly from the Prisma model `todo_app_guest`. It intentionally excludes any credentials (there are none on the model) and provides nullable fields via oneOf to represent database nullability."}}}}