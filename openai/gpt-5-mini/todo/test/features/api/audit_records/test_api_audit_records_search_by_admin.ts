import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IPage } from "@ORGANIZATION/PROJECT-api/lib/structures/IPage";
import type { IPageITodoAppAuditRecord } from "@ORGANIZATION/PROJECT-api/lib/structures/IPageITodoAppAuditRecord";
import type { ITodoAppAdmin } from "@ORGANIZATION/PROJECT-api/lib/structures/ITodoAppAdmin";
import type { ITodoAppAuditRecord } from "@ORGANIZATION/PROJECT-api/lib/structures/ITodoAppAuditRecord";
import type { ITodoAppTodo } from "@ORGANIZATION/PROJECT-api/lib/structures/ITodoAppTodo";
import type { ITodoAppTodoSnapshot } from "@ORGANIZATION/PROJECT-api/lib/structures/ITodoAppTodoSnapshot";
import type { ITodoAppUser } from "@ORGANIZATION/PROJECT-api/lib/structures/ITodoAppUser";

export async function test_api_audit_records_search_by_admin(
  connection: api.IConnection,
) {
  // 1. Create a dedicated admin connection and register an admin account
  const adminConn: api.IConnection = { ...connection, headers: {} };
  const adminBody = {
    email: typia.random<string & tags.Format<"email">>(),
    password: "Admin#1234",
    is_super: true,
  } satisfies ITodoAppAdmin.ICreate;
  const admin: ITodoAppAdmin.IAuthorized = await api.functional.auth.admin.join(
    adminConn,
    { body: adminBody },
  );
  typia.assert(admin);

  // 2. Create a dedicated user connection and register a regular user
  const userConn: api.IConnection = { ...connection, headers: {} };
  const userBody = {
    email: typia.random<string & tags.Format<"email">>(),
    password: "User#1234",
    display_name: RandomGenerator.name(),
  } satisfies ITodoAppUser.ICreate;
  const user: ITodoAppUser.IAuthorized = await api.functional.auth.user.join(
    userConn,
    { body: userBody },
  );
  typia.assert(user);

  // 3. As the created user, create a Todo item
  const todoBody = {
    title: RandomGenerator.paragraph({ sentences: 3, wordMin: 3, wordMax: 8 }),
    description: RandomGenerator.content({ paragraphs: 1 }),
    position: typia.random<number & tags.Type<"int32"> & tags.Minimum<1>>(),
  } satisfies ITodoAppTodo.ICreate;

  const todo: ITodoAppTodo = await api.functional.todoApp.user.todos.create(
    userConn,
    { body: todoBody },
  );
  typia.assert(todo);

  // NOTE: Instead of relying on a snapshot view to generate audit entries (which
  // may be environment-dependent), this test searches for an audit event that is
  // generated by the admin.join operation itself (action_type: 'create_admin').
  // This makes the test deterministic across environments where admin creation
  // records an audit event.

  // 4. Search audit records as admin for the 'create_admin' event.
  const request = {
    actor_role: "admin",
    action_type: "create_admin",
    // target_resource is optional; leave unspecified so backend will search all resources
    page: 1,
    pageSize: 10,
    sort_by: "created_at",
    sort_order: "desc",
  } satisfies ITodoAppAuditRecord.IRequest;

  let page: IPageITodoAppAuditRecord | undefined = undefined;
  const attempts = 5;
  for (let i = 0; i < attempts; ++i) {
    page = await api.functional.todoApp.admin.auditRecords.index(adminConn, {
      body: request,
    });
    typia.assert(page);
    if (page.data.length > 0) break;
    // wait 1s before retry
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  // Validate that we received at least one matching audit record
  TestValidator.predicate(
    "audit search returned results for create_admin",
    page !== undefined && page.data.length > 0,
  );

  if (page && page.data.length > 0) {
    const found = page.data.find(
      (r) => r.action_type === "create_admin" && r.actor_role === "admin",
    );
    TestValidator.predicate(
      "found matching audit record for create_admin",
      found !== undefined,
    );

    // Validate pagination metadata
    TestValidator.predicate(
      "pagination metadata present",
      page.pagination &&
        typeof page.pagination.records === "number" &&
        page.pagination.limit > 0,
    );

    // Ensure records include required audit fields and no sensitive fields
    for (const rec of page.data) {
      TestValidator.predicate(
        "audit record has id",
        typeof rec.id === "string",
      );
      TestValidator.predicate(
        "audit record has actor_role",
        typeof rec.actor_role === "string",
      );
      TestValidator.predicate(
        "audit record has action_type",
        typeof rec.action_type === "string",
      );
      TestValidator.predicate(
        "audit record has target_resource",
        typeof rec.target_resource === "string",
      );
      TestValidator.predicate(
        "audit record has created_at",
        typeof rec.created_at === "string",
      );
      // Security: ensure sensitive fields are not present on audit records
      TestValidator.predicate(
        "audit record does not include password_hash",
        !Object.prototype.hasOwnProperty.call(rec as object, "password_hash"),
      );
    }
  }

  // 5. Negative test: a non-admin (regular user) should not be able to search audit records
  await TestValidator.error(
    "non-admin cannot access audit records",
    async () => {
      await api.functional.todoApp.admin.auditRecords.index(userConn, {
        body: request,
      });
    },
  );
}
