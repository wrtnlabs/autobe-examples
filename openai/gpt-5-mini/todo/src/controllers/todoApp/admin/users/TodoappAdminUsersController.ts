import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchTodoAppAdminUsers } from "../../../../providers/patchTodoAppAdminUsers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getTodoAppAdminUsersUserId } from "../../../../providers/getTodoAppAdminUsersUserId";
import { putTodoAppAdminUsersUserId } from "../../../../providers/putTodoAppAdminUsersUserId";

import { IPageITodoAppUser } from "../../../../api/structures/IPageITodoAppUser";
import { ITodoAppUser } from "../../../../api/structures/ITodoAppUser";

@Controller("/todoApp/admin/users")
export class TodoappAdminUsersController {
  /**
   * Search and retrieve a paginated list of user accounts (admin).
   *
   * Provides a paginated, filterable list of users from the todo_app_user
   * model. Intended for administrative use to find users by email substring,
   * account_status, or creation timeframe. Supports pagination and sorting to
   * enable efficient UI listing.
   *
   * Security and permissions: This endpoint MUST be restricted to
   * administrative roles. The response MUST NOT include sensitive fields such
   * as password_hash. All accesses SHOULD be recorded in todo_app_audit_records
   * with admin identifier and the used filter parameters (avoid storing full
   * PII in logs unless necessary).
   *
   * Validation and errors: Validate pagination parameters (page >= 1, pageSize
   * reasonable bounds), validate account_status values against the canonical
   * list (e.g., 'active','suspended'), and validate emailLike length. Return
   * 400 for malformed requests, 401/403 for unauthorized access, and 500 for
   * server errors.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering users
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoAppUser.IRequest,
  ): Promise<IPageITodoAppUser.ISummary> {
    try {
      return await patchTodoAppAdminUsers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin: retrieve a user account by ID (todo_app_user).
   *
   * Purpose and overview:
   *
   * Allow administrators to retrieve a user's profile for support and
   * maintenance. Returns the same safe profile fields as the user-facing
   * endpoint: `id`, `email`, `display_name`, `account_status`, `created_at`,
   * `updated_at`, and `last_active_at`. Do NOT include `password_hash` or other
   * secrets.
   *
   * Security and permissions:
   *
   * - Access policy: Only callers with admin privileges may call this endpoint.
   *   Each admin access MUST create an audit record in `todo_app_audit_records`
   *   with `actor_role='admin'`, `action_type='read_user'`, and include
   *   `admin_id` and `user_id`.
   * - Validation: `userId` must be a UUID. Return 400 for malformed, 404 if not
   *   found, 403 if the caller lacks admin privileges.
   *
   * Error handling: same as user-facing GET but ensure audit creation on
   * success and on unauthorized attempts where applicable.
   *
   * @param connection
   * @param userId Unique identifier of the target user (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppUser> {
    try {
      return await getTodoAppAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin: update a user account (todo_app_user).
   *
   * Purpose and overview:
   *
   * Allow administrators to perform sanctioned updates to user accounts such as
   * changing `account_status`. Admin updates must be auditable and follow
   * validation rules. Do NOT accept `password_hash` in the request body.
   *
   * Security and permissions:
   *
   * - Access policy: Admin-only. Each successful admin update MUST create an
   *   audit record in `todo_app_audit_records` containing `admin_id`,
   *   `user_id`, `action_type='update_user'`, `reason` (optional), and
   *   `created_at`.
   * - Validation: `userId` must be a UUID. `account_status` must be validated
   *   against allowed values (e.g., 'active','suspended') and rejected if
   *   invalid.
   *
   * Schema mapping and writable fields:
   *
   * - Admin-writable: `account_status` (validated), optionally `display_name` for
   *   admin corrections.
   * - Disallowed: `password_hash`, `id`, `created_at` (server-managed).
   *
   * Responses and errors: standard 200/400/403/404 semantics apply.
   *
   * @param connection
   * @param userId Unique identifier of the target user (UUID).
   * @param body Admin-updatable user fields. Must not include `password_hash`.
   *   Typical allowed properties: `account_status` (e.g.,
   *   'active','suspended'), `display_name` (optional).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppUser.IUpdate,
  ): Promise<ITodoAppUser> {
    try {
      return await putTodoAppAdminUsersUserId({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
