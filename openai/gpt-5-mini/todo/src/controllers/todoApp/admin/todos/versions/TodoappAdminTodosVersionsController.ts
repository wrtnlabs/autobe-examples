import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoAppAdminTodosTodoIdVersionsVersionId } from "../../../../../providers/getTodoAppAdminTodosTodoIdVersionsVersionId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { ITodoAppTodoSnapshot } from "../../../../../api/structures/ITodoAppTodoSnapshot";

@Controller("/todoApp/admin/todos/:todoId/versions/:versionId")
export class TodoappAdminTodosVersionsController {
  /**
   * Admin retrieve a specific todo snapshot (version) from
   * todo_app_todo_snapshots.
   *
   * Retrieve a specific todo snapshot (version) from the
   * todo_app_todo_snapshots table for administrative/support use.
   *
   * Purpose and overview: Returns the snapshot recorded for a todo at a prior
   * time. This admin endpoint supports troubleshooting and audit
   * investigations.
   *
   * Security and permissions: Access restricted to admin role. Implementations
   * MUST authenticate the admin, authorize the request, and create an audit
   * record documenting the access (admin id, action_type 'view_snapshot',
   * target_resource 'todo_snapshot', target_id). The response MUST NOT include
   * any authentication secrets or other sensitive fields from related models.
   *
   * Relationship to database entities: Maps directly to
   * `todo_app_todo_snapshots`. The path parameter `todoId` corresponds to
   * snapshot.todo_app_todo_id; `versionId` corresponds to snapshot.id.
   *
   * Validation and error handling: Both path parameters MUST be valid UUIDs. If
   * the snapshot is not found or the todoId does not match, return 404.
   *
   * @param connection
   * @param todoId Unique identifier of the parent todo (references
   *   todo_app_todos.id).
   * @param versionId Unique identifier of the snapshot record
   *   (todo_app_todo_snapshots.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedParam("versionId")
    versionId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppTodoSnapshot> {
    try {
      return await getTodoAppAdminTodosTodoIdVersionsVersionId({
        admin,
        todoId,
        versionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
