import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchTodoAppAdminGuests } from "../../../../providers/patchTodoAppAdminGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getTodoAppAdminGuestsGuestId } from "../../../../providers/getTodoAppAdminGuestsGuestId";

import { IPageITodoAppGuest } from "../../../../api/structures/IPageITodoAppGuest";
import { ITodoAppGuest } from "../../../../api/structures/ITodoAppGuest";

@Controller("/todoApp/admin/guests")
export class TodoappAdminGuestsController {
  /**
   * Search and retrieve a paginated list of guest records (todo_app_guest).
   *
   * Search and retrieve guest records using flexible criteria and pagination.
   * This operation targets the Prisma model `todo_app_guest` and supports
   * filters such as email (exact or partial), status, created_at range, and
   * sorting by created_at or last_active_at.
   *
   * Response items include the model's core attributes: id, email (nullable),
   * created_at, last_active_at (nullable), and status (nullable). The request
   * body contains search criteria, pagination, and sorting options. The
   * response is a paginated container of guest record summaries.
   *
   * Security and permissions: Access is limited to administrative actors.
   * Returned personal data (email) must be disclosed only to authorized
   * callers; consider role-based projection or email redaction for
   * lower-privilege support. Implement server-side input validation and
   * parameterized queries to avoid injection and protect performance. Implement
   * rate limiting and audit logging for searches.
   *
   * Errors: invalid request payloads return 400 with validation details; server
   * errors return 500.
   *
   * @param connection
   * @param body Search criteria, pagination, and sorting parameters for guest
   *   records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoAppGuest.IRequest,
  ): Promise<IPageITodoAppGuest.ISummary> {
    try {
      return await patchTodoAppAdminGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a guest (visitor) record by ID from the todo_app_guest table.
   *
   * Returns a single guest record from the todo_app_guest model. The guest
   * model stores lightweight visitor entries such as optional email, creation
   * timestamp, last activity, and a housekeeping status.
   *
   * Security and permissions: Access to guest records is restricted to
   * administrative/support users only. Calls to this endpoint MUST be
   * authenticated and authorized. The server implementation MUST create an
   * audit record in todo_app_audit_records for each access (actor_role='admin',
   * action_type='read_guest', target_resource='guest', target_id=guestId).
   *
   * Data and behavior: The response contains the guest's persisted fields (id,
   * email, created_at, last_active_at, status). This endpoint performs no
   * mutation; it is strictly read-only. Validation rules require the path
   * parameter to be a UUID. Errors returned include 400 for invalid ID format,
   * 404 when the guest is not found, and 500 for unexpected server errors.
   *
   * @param connection
   * @param guestId Unique identifier (UUID) of the guest record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":guestId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppGuest> {
    try {
      return await getTodoAppAdminGuestsGuestId({
        admin,
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
