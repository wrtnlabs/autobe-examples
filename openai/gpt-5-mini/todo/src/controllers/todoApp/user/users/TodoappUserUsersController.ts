import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoAppUserUsersUserId } from "../../../../providers/getTodoAppUserUsersUserId";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { putTodoAppUserUsersUserId } from "../../../../providers/putTodoAppUserUsersUserId";

import { ITodoAppUser } from "../../../../api/structures/ITodoAppUser";

@Controller("/todoApp/user/users/:userId")
export class TodoappUserUsersController {
  /**
   * Retrieve a user account by ID (todo_app_user).
   *
   * Purpose and overview:
   *
   * Retrieve the requested user account from the `todo_app_user` table by
   * `userId`. The response contains public profile fields: `id`, `email`,
   * `display_name`, `account_status`, `created_at`, `updated_at`, and
   * `last_active_at`. The endpoint MUST NOT return `password_hash` or any
   * internal secrets.
   *
   * Security and permissions:
   *
   * - Access policy: Owner or admin only. If the caller is the owner, return the
   *   full profile (excluding secrets). If the caller is an admin, return the
   *   profile and create an audit record in `todo_app_audit_records` with
   *   `actor_role='admin'` and `action_type='read_user'` and include optional
   *   reason when provided.
   * - Validation: `userId` must be a UUID. Return 400 for malformed, 404 if not
   *   found, 403 if unauthorized.
   *
   * Schema relationship and notes:
   *
   * This operation maps to Prisma model `todo_app_user`. Use only the
   * documented safe fields in responses; do not expose `password_hash`. Any
   * derived flags (e.g., `isVerified`) must be computed server-side and
   * documented separately.
   *
   * Error handling:
   *
   * - 400 Bad Request: invalid UUID
   * - 403 Forbidden: not owner or not admin
   * - 404 Not Found: user does not exist
   * - 500 Internal Server Error: unexpected failures
   *
   * @param connection
   * @param userId Unique identifier of the target user (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppUser> {
    try {
      return await getTodoAppUserUsersUserId({
        user,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a user account (todo_app_user) â€” owner.
   *
   * Purpose and overview:
   *
   * Update mutable profile attributes for the specified user. Intended for
   * owner-initiated updates such as `display_name`. System-managed fields
   * (`id`, `created_at`, `updated_at`, `password_hash`) MUST NOT be accepted
   * from clients. The server will set `updated_at` on successful update.
   *
   * Security and permissions:
   *
   * - Access policy: Only the resource owner may update their own profile via
   *   this path. Attempts to modify another user's profile MUST be rejected
   *   with 403. Admins should use the admin update endpoint.
   * - Validation: `userId` must be a UUID. Validate `display_name` length
   *   (suggested <=255). If `email` changes are allowed by policy, require
   *   separate verification flow; otherwise reject email change attempts and
   *   return a clear error.
   *
   * Schema mapping and writable fields:
   *
   * - Writable by owner: `display_name` (optional).
   * - Server-side only / disallowed: `id`, `created_at`, `updated_at`,
   *   `password_hash`.
   *
   * Responses and errors:
   *
   * - 200: updated user representation (safe fields only)
   * - 400: invalid input or malformed UUID
   * - 403: unauthorized (not owner)
   * - 404: user not found
   *
   * @param connection
   * @param userId Unique identifier of the target user (UUID).
   * @param body Owner-updatable user fields. Clients MUST NOT provide
   *   `password_hash`. Typical allowed property: `display_name` (optional).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppUser.IUpdate,
  ): Promise<ITodoAppUser> {
    try {
      return await putTodoAppUserUsersUserId({
        user,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
