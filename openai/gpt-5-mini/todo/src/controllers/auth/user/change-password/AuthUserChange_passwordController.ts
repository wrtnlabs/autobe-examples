import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthUserChangePassword } from "../../../../providers/putAuthUserChangePassword";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";

import { ITodoAppUser } from "../../../../api/structures/ITodoAppUser";

@Controller("/auth/user/change-password")
export class AuthUserChange_passwordController {
  /**
   * Change authenticated user's password (updates todo_app_user.password_hash).
   *
   * Purpose and overview: This authenticated endpoint enables a user to change
   * their password. It targets the `todo_app_user` record and updates
   * `password_hash` after verifying the current secret (if required) or
   * validating a password-reset flow. The server updates
   * `todo_app_user.updated_at` after successfully changing the stored
   * `password_hash`.
   *
   * Implementation details and required fields: The request must be
   * authenticated as the user whose password is being changed. The payload
   * typically includes the `currentPassword` and `newPassword` (or a reset
   * token in alternative flows). Upon verification, the server computes a new
   * secure `password_hash` and writes it to `todo_app_user.password_hash`. The
   * server MUST update `todo_app_user.updated_at` and may update
   * `todo_app_user.last_active_at` as part of session continuity.
   *
   * Role-specific integration and business context: This operation is
   * restricted to the `user` role and supports the security hygiene for
   * accounts created in `todo_app_user`. Because the Prisma schema includes
   * `password_hash`, the table supports password-based authentication and
   * updates to that field.
   *
   * Security considerations: The server MUST verify the requester is the owner
   * of the account and MUST re-authenticate or verify the current credential
   * before changing the password, unless this endpoint is used with a validated
   * password-reset token flow. Passwords MUST be hashed before storage. Admins
   * changing user passwords for support purposes SHOULD create an entry in
   * `todo_app_audit_records` to record the admin action (admin_id,
   * action_type='change_password', target_id=user_id, reason).
   *
   * Related operations and workflow integration: This operation complements
   * `login` and `refresh`. A password change SHOULD invalidate or rotate
   * refresh tokens depending on security policy and SHOULD be recorded for
   * auditing if performed by an admin.
   *
   * @param connection
   * @param body Authenticated password-change payload containing current and
   *   new password values (or reset token + new password).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoAppUser.IChangePassword,
  ): Promise<ITodoAppUser.IProfile> {
    try {
      return await putAuthUserChangePassword({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
