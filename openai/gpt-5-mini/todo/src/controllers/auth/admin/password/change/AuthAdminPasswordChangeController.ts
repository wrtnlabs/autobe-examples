import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthAdminPasswordChange } from "../../../../../providers/putAuthAdminPasswordChange";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { ITodoAppAdmin } from "../../../../../api/structures/ITodoAppAdmin";

@Controller("/auth/admin/password/change")
export class AuthAdminPasswordChangeController {
  /**
   * Change authenticated admin password (todo_app_admin.password_hash).
   *
   * Purpose and overview: This endpoint enables an authenticated admin to
   * change their password. It targets the `todo_app_admin` record for the
   * calling admin (fields: `id`, `email`, `password_hash`, `last_active_at`)
   * and updates `password_hash` with a new hashed secret.
   *
   * Implementation details and validation: The endpoint requires the caller to
   * be authenticated as an admin (`authorizationRole: "admin"`). It should
   * verify the caller's current credential or session and validate the new
   * password against password policy before hashing and storing it in
   * `password_hash`. Upon success, the implementation SHOULD update
   * `updated_at` and optionally `last_active_at` on the `todo_app_admin` row.
   *
   * Security considerations: Do NOT log the plain-text password. Record the
   * password change action in `todo_app_audit_records` with `action_type` such
   * as `change_password` and include the `admin_id` and timestamp. Consider
   * revoking outstanding refresh tokens or sessions after a password change to
   * reduce risk.
   *
   * Related operations: This operation complements `POST
   * /auth/admin/password/reset` (reset flow) and token refresh endpoints. It is
   * restricted to authenticated admins and must be audited.
   *
   * @param connection
   * @param body Payload containing current credential proof and the new
   *   password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoAppAdmin.IChangePassword,
  ): Promise<ITodoAppAdmin.IMessage> {
    try {
      return await putAuthAdminPasswordChange({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
