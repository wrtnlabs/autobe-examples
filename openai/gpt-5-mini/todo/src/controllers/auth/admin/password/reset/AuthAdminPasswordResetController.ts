import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminPasswordReset } from "../../../../../providers/postAuthAdminPasswordReset";

import { ITodoAppAdmin } from "../../../../../api/structures/ITodoAppAdmin";

@Controller("/auth/admin/password/reset")
export class AuthAdminPasswordResetController {
  /**
   * Initiate admin password reset (todo_app_admin.email).
   *
   * Purpose and overview: This endpoint starts a password reset workflow for an
   * admin identified by `email` (the `todo_app_admin.email` column). It is used
   * when an admin can no longer authenticate and requires a secure path to
   * re-establish credentials.
   *
   * Implementation details and required behavior: On receipt of a valid email
   * that maps to an existing `todo_app_admin` row, the implementation SHOULD
   * generate a time-limited reset token (not persisted on `todo_app_admin` by
   * the schema itself) and send it to the provided email address. The operation
   * SHOULD create an audit record in `todo_app_audit_records` with
   * `action_type` like `request_password_reset` and `target_id` set to the
   * admin id to record the event.
   *
   * Role-specific integration: This is a public endpoint (no prior
   * authentication required). The request MUST NOT disclose whether the email
   * exists in the system in order to avoid user enumeration attacks; instead,
   * the response SHOULD be a generic success message while the server performs
   * any email actions silently.
   *
   * Security considerations: Ensure the reset token is single-use and expires
   * promptly (recommended default: 24 hours). Do NOT return reset tokens in the
   * API response. Record all reset initiation attempts in
   * `todo_app_audit_records` for monitoring.
   *
   * Related operations: A subsequent endpoint (not included here) would accept
   * the token and the new password to complete the reset and update
   * `todo_app_admin.password_hash` accordingly; that operation SHOULD also
   * create an audit record with `action_type`: `complete_password_reset`.
   *
   * @param connection
   * @param body Payload containing the admin email to initiate a password
   *   reset.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ITodoAppAdmin.IRequestPasswordReset,
  ): Promise<ITodoAppAdmin.IMessage> {
    try {
      return await postAuthAdminPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
