import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin account representation (safe view).
 *
 * This schema represents the public, non-sensitive view of an administrative
 * account. It maps to the Prisma model todo_app_admin and includes identifying
 * and operational fields that are safe to expose in API responses. Sensitive
 * fields present in the underlying Prisma model (for example, password_hash)
 * are intentionally omitted from this DTO to preserve security.
 *
 * Use cases: returned by admin listing and detail endpoints where an
 * administrative summary is required (for UI display, audit summaries, and
 * support workflows).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppAdmin = {
  /**
   * Primary key of the admin account as defined in the Prisma model
   * todo_app_admin.id.
   *
   * This value is a UUID assigned by the system when the admin record is
   * created. It uniquely identifies the administrative account across the
   * system and is used for audit trails and reference in related models (for
   * example, todo_app_audit_records.admin_id).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Primary email address for the admin account as defined in
   * todo_app_admin.email.
   *
   * This field is used for login and communication. It must be unique across
   * admin records per the Prisma @@unique([email]) constraint. Responses MUST
   * NOT reveal credential material but this public email value is safe to
   * include in admin summaries.
   */
  email: string & tags.Format<"email">;

  /**
   * Flag indicating whether the admin has super-administrator privileges as
   * stored in todo_app_admin.is_super.
   *
   * A value of true means the admin holds elevated rights that may be
   * required for sensitive operations. This property is authoritative for
   * role checks in admin-scoped endpoints.
   */
  is_super: boolean;

  /**
   * Timestamp when the admin account was created (todo_app_admin.created_at).
   *
   * This is set by the server at insertion time and returned in ISO 8601 /
   * RFC 3339 date-time format. Use this field for sorting and operational
   * timelines.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the admin's last observed activity as stored in
   * todo_app_admin.last_active_at.
   *
   * This field is nullable: null means no recent activity has been recorded.
   * When present, it uses ISO 8601 / RFC 3339 date-time format and can be
   * used for presence indicators and housekeeping.
   */
  last_active_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppAdmin {
  /**
   * Create DTO for administrative accounts.
   *
   * This schema is the request body for creating a new admin. It accepts the
   * client-provided, user-editable fields required to register an admin:
   * `email` and `password` (plain text). The server will hash the supplied
   * password and persist it as `password_hash` on the todo_app_admin record.
   * The optional `is_super` flag allows requesting super-admin privileges,
   * subject to server-side authorization checks and policies.
   *
   * Security notes: The server MUST never echo back password plaintext or
   * `password_hash` in responses. Administrative creation actions SHOULD be
   * logged in audit records for traceability.
   */
  export type ICreate = {
    /**
     * Admin account email (todo_app_admin.email).
     *
     * This is the primary identifier for the administrative account and
     * must be unique. Provide a valid business email address used for login
     * and notifications.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain-text password for initial admin account creation.
     *
     * Clients MUST provide a user-chosen password in plain text for
     * creation flows; the server is responsible for hashing and storing the
     * result in `todo_app_admin.password_hash`. Do NOT include or expect
     * `password_hash` in requests or responses. Password policy (min
     * length, complexity) is enforced by the server.
     */
    password: string;

    /**
     * Flag indicating whether the created admin should have super-admin
     * privileges (todo_app_admin.is_super).
     *
     * When true, the account is granted elevated capabilities; server
     * policies may restrict who can create super-admin accounts. This
     * property is optional and defaults to false when omitted.
     */
    is_super?: boolean | undefined;
  };

  /**
   * Authorization response for administrative accounts.
   *
   * This schema is returned after successful admin authentication flows such
   * as login, join, or token refresh. It provides a minimal, safe summary of
   * the authenticated admin account (id, email, is_super, timestamps)
   * together with the issued authorization token payload referenced by
   * `IAuthorizationToken`.
   *
   * Sensitive fields such as `password_hash` are intentionally omitted. When
   * `x-autobe-prisma-schema` is present, every property listed here
   * corresponds to an actual column on the `todo_app_admin` Prisma model.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the administrator account as stored in the
     * todo_app_admin table.
     *
     * This value maps directly to the Prisma model primary key and is used
     * to correlate audit records and administrative actions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator's email address used for login and notifications.
     *
     * This field matches the `email` column on the todo_app_admin Prisma
     * model and is returned as part of the authorized user summary. For
     * privacy and security reasons, hashed credentials are never exposed.
     */
    email: string & tags.Format<"email">;

    /**
     * Flag indicating whether the administrator has super-admin privileges.
     *
     * True indicates elevated privileges that may be required for sensitive
     * administrative operations. This property mirrors the `is_super`
     * column on the todo_app_admin Prisma model.
     */
    is_super: boolean;

    /**
     * Timestamp when the administrator account was created.
     *
     * This uses ISO 8601 / RFC 3339 date-time format and directly
     * corresponds to the `created_at` column on the todo_app_admin model.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Most recent activity timestamp for the admin account, or null if no
     * activity has been recorded.
     *
     * When present, this timestamp is an ISO 8601 date-time and corresponds
     * to the `last_active_at` column on the todo_app_admin model.
     */
    last_active_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request body for administrator authentication.
   *
   * Clients must provide the admin's email and password. On success, this
   * request is expected to return an `ITodoAppAdmin.IAuthorized` response
   * containing issued tokens and admin summary. The schema intentionally does
   * not include any persistent or server-managed fields.
   */
  export type ILogin = {
    /**
     * Admin account email used for authentication.
     *
     * Must be a valid email address associated with an existing
     * administrative account. Implementations should treat this value
     * case-insensitively when matching existing records.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain-text password supplied for authentication.
     *
     * This value is accepted only for authentication purposes and MUST NOT
     * be stored or echoed back in any response. The server is responsible
     * for validating and then hashing or discarding the plain secret.
     */
    password: string;
  };

  /**
   * Request payload for renewing administrator access tokens.
   *
   * This DTO is used by the admin token refresh endpoint (POST
   * /auth/admin/refresh). It contains the refresh credential that the server
   * validates and (optionally) rotates when issuing a new access token. This
   * type does not map directly to a Prisma model and is part of the token
   * lifecycle contract between client and server.
   *
   * Security note: Refresh tokens should be stored and transmitted securely.
   * The server should apply rotation and revocation policies and log
   * suspicious refresh activity for audit purposes.
   */
  export type IRefresh = {
    /**
     * Refresh token previously issued by the authentication service. This
     * opaque string is presented to the server to obtain a new short-lived
     * access token. Clients MUST treat this value as sensitive and transmit
     * it only over TLS.
     */
    refresh_token: string;
  };

  /**
   * Request payload to initiate an administrator password reset.
   *
   * This DTO is used by POST /auth/admin/password/reset. The server locates
   * the matching todo_app_admin row using the provided email and, if policy
   * permits, issues a time-limited reset token via email. The presence of
   * "x-autobe-prisma-schema": "todo_app_admin" indicates the `email` property
   * maps to the Prisma model's email column; when this field is present it
   * MUST exist on the referenced Prisma model.
   */
  export type IRequestPasswordReset = {
    /**
     * Email address of the administrator account to initiate password reset
     * for. This value corresponds to the todo_app_admin.email column in the
     * Prisma schema. For security, the API SHOULD not disclose whether the
     * email exists in the system in its response body.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Simple operation result container for administrative endpoints.
   *
   * Use this schema when an API operation needs to return a short,
   * human-friendly confirmation or informational message and no additional
   * structured data. This type intentionally contains only a single,
   * mandatory string property so callers can reliably display the returned
   * text to administrators or support staff.
   *
   * Do not include sensitive details (passwords, tokens, hashes) in the
   * message property. Use audit records for security-relevant event
   * recording.
   */
  export type IMessage = {
    /**
     * Human-readable summary message describing the result of an operation.
     *
     * This field is intended for display in administrative UIs or API
     * clients to convey short operation outcomes such as confirmations,
     * informational notes, or non-sensitive status messages. Keep content
     * concise and user-facing.
     */
    message: string;
  };

  /**
   * Payload for an authenticated administrator to change their account
   * password.
   *
   * This request object is used by admin-scoped change-password endpoints and
   * contains the current credential for verification plus the new credential
   * to be set. The server MUST validate the currentPassword, enforce password
   * policy on newPassword, hash the new password before storage (populate
   * `todo_app_admin.password_hash`), update relevant timestamps, and record
   * audit events for admin-initiated credential changes.
   *
   * Important security notes: Do not echo passwords in any API responses or
   * logs. Consider revoking or rotating active refresh tokens after a
   * successful password change to reduce session theft risk.
   */
  export type IChangePassword = {
    /**
     * Current account password (plain text) presented for verification.
     *
     * For authenticated change-password flows the server MUST verify this
     * value before updating credentials. This property is required for
     * owner-initiated password changes; password-reset flows that use
     * one-time tokens use a different DTO and are not represented by this
     * type.
     */
    currentPassword: string & tags.MinLength<8>;

    /**
     * New desired password (plain text). Must meet the service password
     * policy.
     *
     * The server is responsible for applying hashing (e.g., bcrypt/argon2)
     * and must never store or return plaintext passwords. Recommended
     * policy: minimum length 8 with at least one letter and one number;
     * apply additional complexity rules as product policy requires.
     */
    newPassword: string & tags.MinLength<8>;
  };

  /**
   * Request DTO for admin user search/list operations.
   *
   * This object describes the search, filter, sort, and pagination parameters
   * that administrative UIs may pass when listing admin accounts. It
   * references only fields that exist on the `todo_app_admin` Prisma model
   * (email, is_super, created_at, last_active_at) and includes controls for
   * pagination and sorting. All date/time values use ISO 8601 date-time
   * format.
   *
   * Security and usage notes:
   *
   * - Access to endpoints accepting this DTO MUST be restricted to
   *   administrative actors.
   * - Servers SHOULD enforce sensible pageSize caps and sanitize/filter
   *   free-text input (emailLike) to prevent expensive queries. Audit logging
   *   of admin searches is recommended per product policy.
   */
  export type IRequest = {
    /**
     * Page number (1-based). If omitted or null, the server uses its
     * default page (typically 1).
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Requested page size. If omitted or null, server default page size is
     * applied.
     */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Exact email to match (filters `todo_app_admin.email`). Use
     * exact-match when present.
     */
    email?: (string & tags.Format<"email">) | null | undefined;

    /**
     * Partial email match (e.g., domain or local-part substring). Use for
     * fuzzy/admin search scenarios.
     */
    emailLike?: (string & tags.MaxLength<256>) | null | undefined;

    /**
     * When provided, restrict results to admins with the given `is_super`
     * boolean value.
     */
    is_super?: boolean | null | undefined;

    /** Start of creation time range (ISO 8601 date-time). */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** End of creation time range (ISO 8601 date-time). */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Field to sort results by. Allowed values correspond to columns on
     * `todo_app_admin`.
     */
    sort_by?: "created_at" | "last_active_at" | undefined;

    /** Sort direction: 'asc' for ascending, 'desc' for descending. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Admin update DTO for partial updates to an admin account.
   *
   * All properties are optional to support partial updates (Partial<T>
   * semantics). This DTO maps to the Prisma model todo_app_admin and
   * therefore includes only properties that exist in that model. The server
   * MUST enforce security rules (who may update which fields), validate
   * inputs (unique email constraint), and create audit records for
   * administrative modifications (especially for is_super changes).
   */
  export type IUpdate = {
    /**
     * New email value for the admin account (todo_app_admin.email).
     *
     * If provided, the server MUST validate uniqueness and proper email
     * format. Changing email may require verification depending on product
     * policy. This field is optional in update requests.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Update to the super-admin flag (todo_app_admin.is_super).
     *
     * Only callers with appropriate authorization (for example, an existing
     * super-admin) should be permitted to change this flag. The server MUST
     * enforce privilege checks and audit this change when applied.
     */
    is_super?: boolean | undefined;

    /**
     * Administrative override for last_active_at
     * (todo_app_admin.last_active_at).
     *
     * Typically managed by the system; provided here for administrative
     * maintenance tasks. Accepts ISO 8601 / RFC 3339 date-time strings or
     * null to clear. Use with caution: updates to this field SHOULD be
     * audited.
     */
    last_active_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Administrative account summary.
   *
   * Provides a safe, public-facing summary representation of an
   * administrative account for listing and audit UIs. This summary
   * intentionally omits sensitive fields such as `password_hash` even though
   * that column exists in the Prisma model. All included properties map
   * directly to columns that exist in the `todo_app_admin` Prisma model.
   *
   * This schema is used in paginated lists and admin index endpoints (for
   * example, IPageITodoAppAdmin.ISummary).
   */
  export type ISummary = {
    /**
     * Primary key of the admin account.
     *
     * This property maps to todo_app_admin.id in the Prisma schema and
     * uniquely identifies an administrative account.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Admin account email address.
     *
     * This property maps to todo_app_admin.email in the Prisma schema. This
     * field is returned for display in administrative UIs. Password hashes
     * or secrets are intentionally NOT included.
     */
    email: string & tags.Format<"email">;

    /**
     * Flag indicating whether the admin has super-admin privileges.
     *
     * Maps to todo_app_admin.is_super in the Prisma schema. Use this flag
     * to gate sensitive admin-only actions.
     */
    is_super: boolean;

    /**
     * Record creation timestamp as stored in todo_app_admin.created_at.
     *
     * Only present because the Prisma model defines it; this is a read-only
     * system field.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last observed activity timestamp for the admin (nullable).
     *
     * Maps to todo_app_admin.last_active_at in the Prisma schema and may be
     * null if no activity has been recorded.
     */
    last_active_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
