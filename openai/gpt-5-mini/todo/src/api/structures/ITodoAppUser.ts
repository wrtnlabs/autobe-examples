import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * User account representation (public-safe view) mapped to the Prisma model
 * `todo_app_user`.
 *
 * This schema exposes the public profile and lifecycle fields of a user account
 * while deliberately omitting sensitive columns such as `password_hash`. Each
 * property references the related Prisma model column and purpose. Use this
 * type for responses that return user information to owners or authorized
 * administrative viewers. The representation is designed for read and display
 * purposes; write and credential-change operations should use dedicated DTOs.
 *
 * Security note: Do not expose `password_hash` or other secret fields in
 * responses derived from this schema. Administrative endpoints may return this
 * schema for support views but must ensure access is auditable and authorized.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppUser = {
  /**
   * Unique identifier for the user account.
   *
   * This property maps directly to the Prisma model column
   * `todo_app_user.id`. It is a system-generated UUID value that uniquely
   * identifies the account across the system and is used as the canonical
   * reference in related tables such as `todo_app_todos` and
   * `todo_app_audit_records`.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Primary email address of the user account.
   *
   * This field corresponds to `todo_app_user.email` in the Prisma schema and
   * is unique across accounts. It is used for authentication, password
   * recovery flows, and administrative contact. Implementations should
   * validate email format (RFC 5322 basic validation) and never expose this
   * field in logs without appropriate privacy controls.
   */
  email: string & tags.Format<"email">;

  /**
   * Optional human-friendly display name for the user.
   *
   * This property maps to `todo_app_user.display_name`. It is nullable and
   * intended for UI presentation. When present, it should be a trimmed
   * string; when not set, the property may be null. Do not use this field to
   * infer authentication or authorization decisions.
   */
  display_name?: string | null | undefined;

  /**
   * Lifecycle status of the user account.
   *
   * This property corresponds to `todo_app_user.account_status` in the Prisma
   * model and records account state such as 'active' or 'suspended' as
   * defined by product policy. Values are implementation-defined strings
   * managed by administrative workflows and must be enforced by business
   * logic (for example: deny login when status = 'suspended').
   */
  account_status: string;

  /**
   * Timestamp when the user account was created.
   *
   * This maps to `todo_app_user.created_at` in the Prisma schema. Timestamps
   * use ISO 8601 / RFC 3339 format with timezone (recommended 'date-time'
   * format). This value is system-generated and immutable after creation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user account was last modified.
   *
   * This field maps to `todo_app_user.updated_at` in the Prisma model and is
   * updated by server-side operations that change account data (profile
   * edits, password changes, etc.). Clients should treat this as
   * authoritative for optimistic-concurrency checks.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional timestamp of the user's most recent activity.
   *
   * This property corresponds to `todo_app_user.last_active_at`. It may be
   * null when no activity has been recorded. Use this field for presence and
   * analytics; do not rely on it for strict security checks.
   */
  last_active_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppUser {
  /**
   * Create DTO for a new user account.
   *
   * This request object contains the minimal fields required to register a
   * new user in the system. It maps to the `todo_app_user` Prisma model
   * conceptually; upon successful processing the server will create a new row
   * and populate server-managed fields (`id`, `password_hash`,
   * `account_status`, `created_at`, `updated_at`, `last_active_at`).
   *
   * Security notes: Clients MUST send the `password` in plain text over a
   * secure channel (TLS) so the server can hash it; the server MUST NOT
   * accept pre-hashed password fields (e.g., `password_hash`). The server
   * MUST enforce the unique constraint on `email` as defined by the Prisma
   * schema and return an appropriate conflict error when violated. Do not
   * include server-only fields (id, created_at, updated_at, password_hash,
   * account_status) in this DTO.
   */
  export type ICreate = {
    /**
     * Primary email address for the new user account. This maps to
     * `todo_app_user.email` in the Prisma schema and must be unique. Use a
     * business-format address suitable for account recovery and
     * notifications. The server enforces uniqueness and will return a
     * conflict error if the email already exists.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain-text password supplied by the client. The server MUST hash this
     * value (store only `password_hash` in the database) and MUST never
     * return the plain-text password in any response. Recommended minimum
     * length: 8 characters. The server may enforce additional password
     * rules (complexity) per policy.
     */
    password: string & tags.MinLength<8>;

    /**
     * Optional human-friendly display name for the account. This maps to
     * `todo_app_user.display_name` in the Prisma schema. If omitted the
     * server may leave the column null. The property explicitly allows null
     * to indicate clearing the display name when supported.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<255>)
      | null
      | undefined;
  };

  /**
   * Authorization response returned after successful authentication or
   * registration.
   *
   * This schema represents the authorized session for a TodoApp user. It
   * includes the user's stable identifier and a token object that contains
   * the access/refresh credentials necessary for subsequent authenticated API
   * calls. The token property references the shared IAuthorizationToken
   * schema to ensure consistent token handling across authentication
   * endpoints.
   *
   * The optional `user` property provides a safe summary of the authenticated
   * user's profile (for example, email and display name) and is intended for
   * immediate client display after authentication. Sensitive fields such as
   * password_hash are excluded from this DTO.
   *
   * Note: Because this schema corresponds to the Prisma model
   * `todo_app_user`, all listed properties (except computed or runtime-only
   * properties) exist in the underlying model and must be consistent with
   * database constraints. The server MUST NOT return password or password
   * hash in this response.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated user (maps to
     * todo_app_user.id). This value is a UUID assigned by the system and
     * MUST be used by clients to reference the authenticated account in
     * subsequent API calls.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Primary email address of the user account.
     *
     * This field corresponds to `todo_app_user.email` in the Prisma schema
     * and is unique across accounts. It is used for authentication,
     * password recovery flows, and administrative contact. Implementations
     * should validate email format (RFC 5322 basic validation) and never
     * expose this field in logs without appropriate privacy controls.
     */
    email: string & tags.Format<"email">;

    /**
     * Optional human-friendly display name for the user.
     *
     * This property maps to `todo_app_user.display_name`. It is nullable
     * and intended for UI presentation. When present, it should be a
     * trimmed string; when not set, the property may be null. Do not use
     * this field to infer authentication or authorization decisions.
     */
    display_name?: string | null | undefined;

    /**
     * Lifecycle status of the user account.
     *
     * This property corresponds to `todo_app_user.account_status` in the
     * Prisma model and records account state such as 'active' or
     * 'suspended' as defined by product policy. Values are
     * implementation-defined strings managed by administrative workflows
     * and must be enforced by business logic (for example: deny login when
     * status = 'suspended').
     */
    account_status: string;

    /**
     * Timestamp when the user account was created.
     *
     * This maps to `todo_app_user.created_at` in the Prisma schema.
     * Timestamps use ISO 8601 / RFC 3339 format with timezone (recommended
     * 'date-time' format). This value is system-generated and immutable
     * after creation.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the user account was last modified.
     *
     * This field maps to `todo_app_user.updated_at` in the Prisma model and
     * is updated by server-side operations that change account data
     * (profile edits, password changes, etc.). Clients should treat this as
     * authoritative for optimistic-concurrency checks.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional timestamp of the user's most recent activity.
     *
     * This property corresponds to `todo_app_user.last_active_at`. It may
     * be null when no activity has been recorded. Use this field for
     * presence and analytics; do not rely on it for strict security
     * checks.
     */
    last_active_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Optional lightweight representation of the authenticated user.
     * Includes safe profile fields suitable for client display. Sensitive
     * fields such as password_hash are intentionally excluded.
     */
    user?: ITodoAppUser.ISummary | undefined;
  };

  /**
   * Login request payload for authenticating an existing user.
   *
   * Clients MUST provide the email and password in this object to obtain an
   * authorization response. The server validates credentials against the
   * `todo_app_user.password_hash` and, on success, returns an
   * `ITodoAppUser.IAuthorized` response containing tokens and optional user
   * summary.
   *
   * Security note: Passwords MUST be transmitted using secure channels (TLS).
   * The server MUST never echo the password back in responses or logs. Error
   * responses for authentication failures SHOULD be generic to avoid account
   * enumeration.
   */
  export type ILogin = {
    /**
     * The user's primary email address used for authentication. Must be a
     * valid email format and correspond to an existing account when
     * attempting to log in.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain-text password supplied by the user for authentication. This
     * value is accepted only for authentication; the server MUST hash and
     * never store plain-text passwords. Clients MUST transmit this value
     * over TLS.
     */
    password: string;
  };

  /**
   * User account summary used in paginated admin/user listings.
   *
   * This schema intentionally excludes the `password_hash` and other
   * sensitive fields from responses. It maps directly to the Prisma model
   * `todo_app_user` and includes only safe, public-facing attributes.
   */
  export type ISummary = {
    /**
     * Primary key of the user account (UUID) as stored in the todo_app_user
     * table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Primary email address for the user account. This field is required by
     * the Prisma model and is used for login and communication.
     *
     * Returned in summaries for administrative listing and owner-facing
     * profile views. Never include password_hash in any response.
     */
    email: string & tags.Format<"email">;

    /**
     * Optional display name for the user. Nullable in the Prisma model;
     * when absent the value is null.
     */
    display_name?: string | null | undefined;

    /**
     * Account lifecycle status as stored in the Prisma model (for example
     * 'active' or 'suspended').
     *
     * This field is required in summary responses to enable admin filtering
     * and support workflows.
     */
    account_status: string;

    /**
     * Timestamp when the user account was created (ISO 8601 date-time).
     * This field exists in the Prisma model and is server-populated.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Nullable timestamp of the user's last observed activity. May be null
     * if the user has not been active since account creation.
     */
    last_active_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request body for exchanging a refresh credential for a new access token.
   *
   * This DTO is used when a client needs to obtain a fresh short-lived access
   * token without re-entering credentials. The server validates the provided
   * refreshToken and, if valid, issues a new access token and may rotate the
   * refresh token. The server may update the corresponding user's
   * last_active_at timestamp when the refresh is accepted.
   *
   * Security note: Treat refreshToken as sensitive and transmit it only over
   * TLS.
   */
  export type IRefresh = {
    /**
     * Refresh credential previously issued by the authentication service.
     * Present the token exactly as issued (opaque token or JWT). The server
     * will validate this token and, on success, issue a new access token
     * and optionally rotate the refresh token.
     */
    refreshToken: string & tags.MinLength<1>;
  };

  /**
   * Change-password request DTO supporting two mutually exclusive patterns.
   *
   * Clients MUST provide exactly one of the two variants:
   *
   * - Owner-initiated change (currentPassword + newPassword)
   * - Reset-flow change (resetToken + newPassword)
   *
   * The server validates the provided proof (current password or reset
   * token), updates the stored password hash with a secure hash of
   * newPassword, updates updated_at, and may revoke/rotate refresh tokens
   * according to security policy.
   */
  export type IChangePassword =
    | ITodoAppUser.IChangePassword.IByCurrent
    | ITodoAppUser.IChangePassword.IByReset;
  export namespace IChangePassword {
    /**
     * Change-password request variant for owner-initiated password changes
     * that include the current password.
     *
     * Server behavior: validate the provided currentPassword, compute and
     * store a secure hash of newPassword, update updated_at on the user
     * record, optionally revoke/rotate refresh tokens, and record an audit
     * entry when policy requires.
     */
    export type IByCurrent = {
      /**
       * The user's current plaintext password. The server MUST verify
       * this value against the stored credential before accepting the
       * change. Do NOT log or echo this value in any responses.
       */
      currentPassword: string & tags.MinLength<8>;

      /**
       * The desired new plaintext password. The server will hash this
       * value and store the result in the user's password_hash field.
       * Follow the service password policy (recommended minimum 8
       * characters, at least one letter and one number). Do NOT return
       * this value in any responses.
       */
      newPassword: string & tags.MinLength<8>;
    };

    /**
     * Change-password request variant used when the user supplies a valid
     * password-reset token.
     *
     * Server behaviour: validate resetToken (single-use, unexpired),
     * compute and store secure hash of newPassword, update updated_at, and
     * record the action in audit logs when policy requires.
     */
    export type IByReset = {
      /**
       * One-time password-reset token previously issued by the system
       * (for example via email). The server MUST validate the token's
       * authenticity and expiry before allowing the change.
       */
      resetToken: string & tags.MinLength<1>;

      /**
       * The desired new plaintext password for the account. The server
       * will hash this value and store the result in the user's
       * password_hash field. Follow the service password policy
       * (recommended minimum 8 characters, at least one letter and one
       * number).
       */
      newPassword: string & tags.MinLength<8>;
    };
  }

  /**
   * User profile returned to clients (public-facing, safe view).
   *
   * This schema represents a safe, public profile view of the todo_app_user
   * Prisma model. It intentionally omits sensitive authentication fields such
   * as password_hash and includes only fields suitable for client consumption
   * and support workflows. The schema maps to the Prisma model
   * `todo_app_user` and therefore only includes properties that exist on that
   * model or are derived in a manner consistent with server-side handling.
   *
   * Profile fields: id (UUID), email, optional display_name, account_status,
   * created_at, updated_at, and optional last_active_at. Use this type for
   * authenticated-user profile responses and authorization-aware views.
   */
  export type IProfile = {
    /**
     * Primary key of the user account as defined in the Prisma model
     * (todo_app_user.id).
     *
     * This value uniquely identifies the user within the system and is used
     * to associate todos and audit events with the account. It is produced
     * by the server and is returned in profile responses for client-side
     * correlation and navigation.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Primary email address for the user account (todo_app_user.email).
     *
     * This field is the canonical contact and login identifier for the
     * account. It is returned in profile responses but must never expose
     * authentication secrets. Email values must follow a valid email
     * format.
     */
    email: string & tags.Format<"email">;

    /**
     * Optional display name for the user (todo_app_user.display_name).
     *
     * This value may be null when the user has not provided a display name.
     * It is intended for UI presentation only and may contain user-chosen
     * text such as a full name or nickname.
     */
    display_name?: string | null | undefined;

    /**
     * Account lifecycle status (todo_app_user.account_status).
     *
     * Possible values are implementation-specific (for example: 'active',
     * 'suspended', 'deleted' or 'unverified'). This property reflects the
     * current account state as stored in the database and is used by
     * clients to determine whether the account may perform authenticated
     * actions.
     */
    account_status: string;

    /**
     * Timestamp when the user account was created
     * (todo_app_user.created_at).
     *
     * Represented in ISO 8601 / RFC 3339 date-time format. This value is
     * system-managed and returned for display, sorting, and audit
     * purposes.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the user account was last modified
     * (todo_app_user.updated_at).
     *
     * This value is system-managed and updated on profile or credential
     * changes. Clients may use it to detect stale cached profiles.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional timestamp of the user's last observed activity
     * (todo_app_user.last_active_at).
     *
     * This field is nullable and may be omitted or null if no activity has
     * been recorded yet. When present, it indicates the most recent time
     * the user interacted with the system (login, API call, etc.).
     */
    last_active_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request DTO used to search, filter, sort, and paginate user accounts.
   *
   * This object is intended for administrative listing endpoints and owner
   * self-service listing flows where applicable. It is not directly mapped to
   * a Prisma model (no `x-autobe-prisma-schema`), and therefore may contain
   * query parameters and control flags that assist server-side pagination and
   * filtering logic.
   *
   * Validation notes:
   *
   * - `page` is 1-based and should be >= 1.
   * - `pageSize` should be within server-allowed bounds; servers SHOULD enforce
   *   a maximum to protect performance.
   * - `sortBy` and `order` values are validated by the server; unknown values
   *   should return 400 Bad Request.
   *
   * Security note: Avoid logging raw `emailLike` or `search` values in
   * plaintext in broad access logs to protect user privacy. Audit logs for
   * administrative searches should capture who performed the search and when,
   * but redact or hash query strings when appropriate.
   */
  export type IRequest = {
    /**
     * Requested page number for paginated results.
     *
     * This is a 1-based integer indicating which page of results the client
     * requests. If omitted, the server may default to page 1. Server-side
     * limits and validation apply (e.g., page >= 1).
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of items per page for paginated results.
     *
     * Clients should request a reasonable page size. The server may impose
     * upper bounds to prevent expensive queries. Typical defaults for
     * administrative listings are 20 or 50 items per page.
     */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>)
      | undefined;

    /**
     * Optional substring or pattern used to filter users by email.
     *
     * When provided, the server should perform a case-insensitive search on
     * the `email` column (e.g., SQL ILIKE '%emailLike%') and return
     * matching accounts. This parameter is intended for administrative
     * search UIs and may be redacted in audit logs to protect privacy.
     */
    emailLike?: string | null | undefined;

    /**
     * Optional filter by account status (e.g., 'active','suspended').
     *
     * When supplied, the server SHOULD filter results to accounts whose
     * `account_status` equals the provided value. Valid values depend on
     * product policy; servers should validate against the canonical set of
     * statuses.
     */
    account_status?: string | null | undefined;

    /**
     * Sorting key for returned results.
     *
     * Allowed values typically include 'created_at' and 'last_active_at'.
     * If omitted, the server may use a default sort order. Servers MUST
     * validate the value and reject unknown sort keys.
     */
    sortBy?: "created_at" | "last_active_at" | undefined;

    /**
     * Sort direction to apply to the `sortBy` key.
     *
     * Allowed values are 'asc' (ascending) or 'desc' (descending). If
     * omitted, the server may default to 'desc'.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Optional full-text search string applied to multiple user fields.
     *
     * When provided, the server MAY apply the search term across several
     * safe fields (email, display_name) using an indexed search strategy.
     * Servers should enforce length limits and sanitize inputs to avoid
     * expensive queries.
     */
    search?: string | null | undefined;
  };

  /**
   * Update DTO for a TodoApp user (owner-updatable fields).
   *
   * This object represents the writable profile fields that an account owner
   * may modify. It maps to the `todo_app_user` Prisma model (see
   * `x-autobe-prisma-schema`) and therefore includes only properties that
   * exist on that model. System-managed and sensitive fields such as `id`,
   * `email`, `password_hash`, `created_at`, and `updated_at` are
   * intentionally excluded from this DTO and MUST NOT be supplied by
   * clients.
   *
   * Security note: Password changes are handled by dedicated endpoints and
   * MUST NOT be attempted via this update DTO. Audit-sensitive updates (for
   * example, account_status changes) are reserved for admin-scoped
   * endpoints.
   */
  export type IUpdate = {
    /**
     * Optional display name for the user as defined by the Prisma model
     * `todo_app_user.display_name`.
     *
     * This property maps directly to the `display_name` column in the
     * `todo_app_user` table. It is intended for user-facing profile
     * presentation and may be updated by the account owner. The value
     * SHOULD be trimmed of leading/trailing whitespace before persisting
     * and MUST be no longer than 255 characters to remain compatible with
     * typical UI constraints.
     */
    display_name?: (string & tags.MaxLength<255>) | null | undefined;
  };
}
