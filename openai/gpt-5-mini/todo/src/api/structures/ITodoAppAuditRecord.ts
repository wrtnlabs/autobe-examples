import { tags } from "typia";

/**
 * Audit record entity representing an append-only event created for
 * administrative and system actions.
 *
 * This schema maps directly to the Prisma model `todo_app_audit_records` and
 * includes all persisted columns present on that model. Audit records are
 * append-only and used for compliance, troubleshooting, and forensic analysis.
 * Each property description references the corresponding Prisma column and
 * explains the field's role in business workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppAuditRecord = {
  /**
   * Primary key for the audit record. This maps to the `id` column on the
   * Prisma model `todo_app_audit_records`.
   *
   * This value is a UUID generated by the system when the audit record is
   * created. It uniquely identifies the audit event for lookup, retention,
   * and forensic purposes.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional reference to the acting administrator's id. This corresponds to
   * the nullable `admin_id` column in the Prisma model
   * `todo_app_audit_records`.
   *
   * When present, it identifies the admin account that performed the action.
   * When the action was system-initiated (no admin actor) this field is
   * null.
   */
  admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional reference to the user affected by the action. Maps to the
   * nullable `user_id` column on the Prisma model `todo_app_audit_records`.
   *
   * When the audit entry targets a specific user resource, this contains that
   * user's id. For system actions not associated with a user this field may
   * be null.
   */
  user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Role of the actor who performed the action (for example: 'admin' or
   * 'system'). This maps to the `actor_role` column in the Prisma model.
   *
   * This property documents whether the action was performed by an
   * administrative actor or by an automated/system process and aids auditing
   * and filtering.
   */
  actor_role: string;

  /**
   * Type of action performed, as recorded in the `action_type` column
   * (examples: 'suspend_user', 'restore_todo', 'purge', 'view_snapshot').
   *
   * This field is used for quick classification of audit events and MUST use
   * the canonical action type strings used by the application.
   */
  action_type: string;

  /**
   * Logical resource type affected by the action (for example: 'todo',
   * 'user', 'guest', 'todo_snapshot'). This corresponds to the
   * `target_resource` column in the Prisma model.
   *
   * Used to scope and filter audit events by the kind of resource that was
   * impacted.
   */
  target_resource: string;

  /**
   * Optional identifier of the specific target resource (for example the todo
   * id). Maps to the nullable `target_id` column in the Prisma model
   * `todo_app_audit_records`.
   *
   * When present this provides a direct reference to the affected resource
   * instance for quick lookup; otherwise it may be null for actions that are
   * not resource-specific.
   */
  target_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional human-provided reason or note describing why the action was
   * taken. This maps to the nullable `reason` column on the Prisma model.
   *
   * This field is intended for short explanatory text recorded by the admin
   * or system operator to provide context for the audit event.
   */
  reason?: string | null | undefined;

  /**
   * Timestamp when the audit record was created. Maps to the `created_at`
   * timestamptz column on the Prisma model `todo_app_audit_records`.
   *
   * Timestamps are stored in ISO 8601 / RFC3339 format (UTC recommended) and
   * used for retention, search, and ordering of audit events.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ITodoAppAuditRecord {
  /**
   * Request DTO for searching and paginating audit records. This object
   * defines filter, sort, and pagination parameters used by administrative
   * audit search endpoints. Direct actor identifier filters (for example
   * `user_id` or `admin_id`) have been intentionally omitted from this
   * generic IRequest to avoid exposing direct ID-based filtering in the
   * generic request DTO. If admin-only identifier filters are required,
   * create a separate admin-only request DTO.
   */
  export type IRequest = {
    /**
     * Optional filter by actor role (for example 'admin' or 'system'). When
     * provided, the backend SHOULD filter results to matching actor_role
     * values.
     */
    actor_role?: string | undefined;

    /**
     * Optional filter for one or more action types (e.g., 'suspend_user',
     * 'restore_todo'). If provided, results should be limited to matching
     * action_type values.
     */
    action_type?: string | undefined;

    /**
     * Optional filter by resource kind (for example 'todo', 'user',
     * 'guest', 'todo_snapshot'). When omitted, records across all resources
     * are considered.
     */
    target_resource?: string | undefined;

    /**
     * Optional filter by specific target resource id (UUID). When provided
     * the backend should return audit events referencing that exact
     * resource instance. Note: this is a resource identifier filter, not a
     * direct user/admin actor id filter.
     */
    target_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional start time (inclusive) to filter audit records by
     * created_at. Use ISO 8601 / RFC3339 date-time strings in UTC where
     * possible.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional end time (inclusive) to filter audit records by created_at.
     * Use ISO 8601 / RFC3339 date-time strings in UTC where possible.
     */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional pagination page number (1-based). If omitted the server MAY
     * default to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Optional pagination page size. The server SHOULD enforce a sensible
     * maximum (suggested 200) to protect against expensive queries.
     */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Optional sorting key. Allowed values map to indexed columns on the
     * audit table and help the server choose efficient query plans.
     */
    sort_by?: "created_at" | "action_type" | "actor_role" | undefined;

    /**
     * Optional sort direction. Defaults to 'desc' when omitted to return
     * newest events first.
     */
    sort_order?: "asc" | "desc" | undefined;
  };
}
