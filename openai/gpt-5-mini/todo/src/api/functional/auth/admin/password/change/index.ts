import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAdmin } from "../../../../../structures/ITodoAppAdmin";

/**
 * Change authenticated admin password (todo_app_admin.password_hash).
 *
 * Purpose and overview: This endpoint enables an authenticated admin to change
 * their password. It targets the `todo_app_admin` record for the calling admin
 * (fields: `id`, `email`, `password_hash`, `last_active_at`) and updates
 * `password_hash` with a new hashed secret.
 *
 * Implementation details and validation: The endpoint requires the caller to be
 * authenticated as an admin (`authorizationRole: "admin"`). It should verify
 * the caller's current credential or session and validate the new password
 * against password policy before hashing and storing it in `password_hash`.
 * Upon success, the implementation SHOULD update `updated_at` and optionally
 * `last_active_at` on the `todo_app_admin` row.
 *
 * Security considerations: Do NOT log the plain-text password. Record the
 * password change action in `todo_app_audit_records` with `action_type` such as
 * `change_password` and include the `admin_id` and timestamp. Consider revoking
 * outstanding refresh tokens or sessions after a password change to reduce
 * risk.
 *
 * Related operations: This operation complements `POST
 * /auth/admin/password/reset` (reset flow) and token refresh endpoints. It is
 * restricted to authenticated admins and must be audited.
 *
 * @param props.connection
 * @param props.body Payload containing current credential proof and the new
 *   password.
 * @path /auth/admin/password/change
 * @accessor api.functional.auth.admin.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Payload containing current credential proof and the new password. */
    body: ITodoAppAdmin.IChangePassword;
  };
  export type Body = ITodoAppAdmin.IChangePassword;
  export type Response = ITodoAppAdmin.IMessage;

  export const METADATA = {
    method: "PUT",
    path: "/auth/admin/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/change";
  export const random = (): ITodoAppAdmin.IMessage =>
    typia.random<ITodoAppAdmin.IMessage>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
