import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAdmin } from "../../../../../structures/ITodoAppAdmin";

/**
 * Initiate admin password reset (todo_app_admin.email).
 *
 * Purpose and overview: This endpoint starts a password reset workflow for an
 * admin identified by `email` (the `todo_app_admin.email` column). It is used
 * when an admin can no longer authenticate and requires a secure path to
 * re-establish credentials.
 *
 * Implementation details and required behavior: On receipt of a valid email
 * that maps to an existing `todo_app_admin` row, the implementation SHOULD
 * generate a time-limited reset token (not persisted on `todo_app_admin` by the
 * schema itself) and send it to the provided email address. The operation
 * SHOULD create an audit record in `todo_app_audit_records` with `action_type`
 * like `request_password_reset` and `target_id` set to the admin id to record
 * the event.
 *
 * Role-specific integration: This is a public endpoint (no prior authentication
 * required). The request MUST NOT disclose whether the email exists in the
 * system in order to avoid user enumeration attacks; instead, the response
 * SHOULD be a generic success message while the server performs any email
 * actions silently.
 *
 * Security considerations: Ensure the reset token is single-use and expires
 * promptly (recommended default: 24 hours). Do NOT return reset tokens in the
 * API response. Record all reset initiation attempts in
 * `todo_app_audit_records` for monitoring.
 *
 * Related operations: A subsequent endpoint (not included here) would accept
 * the token and the new password to complete the reset and update
 * `todo_app_admin.password_hash` accordingly; that operation SHOULD also create
 * an audit record with `action_type`: `complete_password_reset`.
 *
 * @param props.connection
 * @param props.body Payload containing the admin email to initiate a password
 *   reset.
 * @path /auth/admin/password/reset
 * @accessor api.functional.auth.admin.password.reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Payload containing the admin email to initiate a password reset. */
    body: ITodoAppAdmin.IRequestPasswordReset;
  };
  export type Body = ITodoAppAdmin.IRequestPasswordReset;
  export type Response = ITodoAppAdmin.IMessage;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset";
  export const random = (): ITodoAppAdmin.IMessage =>
    typia.random<ITodoAppAdmin.IMessage>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
