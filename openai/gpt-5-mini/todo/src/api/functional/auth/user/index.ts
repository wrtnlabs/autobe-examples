import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppUser } from "../../../structures/ITodoAppUser";
export * as change_password from "./change_password/index";

/**
 * Register a new TodoApp user (creates a row in todo_app_user).
 *
 * Purpose and overview: This endpoint registers a new user and persists a new
 * record in the `todo_app_user` table. It uses the table's `email` field as the
 * primary unique identifier for account creation and will cause a new
 * `todo_app_user` row to be created with server-calculated `password_hash`,
 * `created_at`, and `updated_at` values.
 *
 * Implementation details and required fields: The request must supply an
 * `email` and a plaintext password (or equivalent credential material). The
 * server implementation will compute and store `password_hash` in the
 * `todo_app_user.password_hash` column and will enforce the unique constraint
 * on `todo_app_user.email` (@@unique([email]) in the Prisma schema). The server
 * will populate `created_at` and `updated_at` timestamps on the new row and
 * initialize `account_status` according to product policy (for example,
 * 'active' or 'unverified').
 *
 * Role-specific integration and business context: Registration is a public
 * operation (no prior authentication required). The created user record is the
 * same entity referenced by todo rows via `todo_app_todos.user_id`, enabling
 * the app to later associate todos to this account. The operation ties into
 * audit/auditing flows when admin review is required (audit entries may be
 * created in `todo_app_audit_records` by administrative processes, not by this
 * public join operation).
 *
 * Security considerations: The server MUST never store plaintext passwords;
 * instead it MUST produce a secure `password_hash` and store it in
 * `todo_app_user.password_hash`. Email uniqueness is enforced by the Prisma
 * schema unique constraint on `email`; the server MUST handle duplicate-email
 * errors gracefully. Returned tokens should be short-lived access tokens (for
 * example, JWT) with a refresh token mechanism; the
 * `todo_app_user.last_active_at` and `todo_app_user.updated_at` columns may be
 * updated on successful immediate authentication after registration.
 *
 * Related operations and workflow integration: Typical next operations after
 * successful join are `login` (if the server requires explicit login after
 * verification) and `refresh` to renew tokens. If email verification is enabled
 * by product policy, the server may create an out-of-band verification flow;
 * note that there is no explicit `email_verified` column in `todo_app_user` in
 * the Prisma schema, so verification state must be represented within
 * `account_status` or an external store.
 *
 * @param props.connection
 * @param props.body Registration payload for creating a new user account.
 *   Contains a valid email and plaintext password. Optional display_name may be
 *   included.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @accessor api.functional.auth.user.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Registration payload for creating a new user account. Contains a
     * valid email and plaintext password. Optional display_name may be
     * included.
     */
    body: ITodoAppUser.ICreate;
  };
  export type Body = ITodoAppUser.ICreate;
  export type Response = ITodoAppUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): ITodoAppUser.IAuthorized =>
    typia.random<ITodoAppUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a TodoApp user (login against todo_app_user).
 *
 * Purpose and overview: This endpoint authenticates a user record from the
 * `todo_app_user` table. It uses `email` to locate the account and verifies
 * secrets against `todo_app_user.password_hash`. Successful authentication
 * results in issuance of authorization material (access token and refresh
 * token) and a response representing the authenticated user.
 *
 * Implementation details and required fields: Request must include `email` and
 * password. The server will check `todo_app_user.email` (unique by schema) and
 * verify the secret against `todo_app_user.password_hash`. On success the
 * server SHOULD update `todo_app_user.last_active_at` and
 * `todo_app_user.updated_at` to reflect activity and may set or confirm
 * `account_status` (for example, deny login when `account_status` is
 * 'suspended').
 *
 * Role-specific integration and business context: Login is a public operation
 * used to obtain session tokens that allow management of todos owned by the
 * authenticated user (todos are associated via `todo_app_todos.user_id`). The
 * tokens returned by this endpoint are used by subsequent protected
 * operations.
 *
 * Security considerations: Implement strong rate limiting for failed login
 * attempts and ensure errors do not leak whether an email exists. Because the
 * Prisma schema contains `password_hash` but not refresh-token storage columns,
 * refresh token lifecycle may be managed by a dedicated token store external to
 * the `todo_app_user` table; however `todo_app_user.updated_at` and
 * `todo_app_user.last_active_at` are available within the schema to record
 * activity.
 *
 * Related operations and workflow integration: Typical complementary operations
 * include `refresh` to renew an access token and `changePassword`
 * (authenticated) to update `todo_app_user.password_hash` for the account.
 * Admin suspend/reactivate actions also interact with
 * `todo_app_user.account_status` (managed by admin flows recorded in
 * `todo_app_audit_records`).
 *
 * @param props.connection
 * @param props.body Login payload containing `email` and `password` to
 *   authenticate an existing user.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @accessor api.functional.auth.user.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Login payload containing `email` and `password` to authenticate an
     * existing user.
     */
    body: ITodoAppUser.ILogin;
  };
  export type Body = ITodoAppUser.ILogin;
  export type Response = ITodoAppUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): ITodoAppUser.IAuthorized =>
    typia.random<ITodoAppUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh access token for a TodoApp user (ties to todo_app_user identity).
 *
 * Purpose and overview: This endpoint renews an access token using a valid
 * refresh token for a user record that exists in `todo_app_user`. The refresh
 * flow ties the presented refresh token to the user identity so the server can
 * return a fresh access token and possibly rotate the refresh token.
 *
 * Implementation details and required fields: Request payload should include a
 * valid refresh token. Because the Prisma schema does not include an explicit
 * refresh-token storage column, refresh token management is typically
 * implemented using a separate token store; however the operation will still
 * update `todo_app_user.last_active_at` and `todo_app_user.updated_at` to
 * reflect the renewed session activity for auditing and presence metrics.
 *
 * Role-specific integration and business context: Refresh is a public endpoint
 * that accepts a valid refresh token to provide continued authenticated access
 * without re-entering credentials. The refreshed tokens continue to permit
 * operations on `todo_app_todos` rows owned by the user (via
 * `todo_app_todos.user_id`).
 *
 * Security considerations: Ensure refresh tokens are rotated or invalidated on
 * logout or account suspension (check and propagate
 * `todo_app_user.account_status` to deny refresh when suspended). Monitor and
 * record suspicious refresh activity in `todo_app_audit_records` when
 * appropriate.
 *
 * Related operations and workflow integration: `refresh` is commonly used after
 * `login` and before protected operations; it complements `join` and `login`
 * flows and should be part of the token lifecycle design alongside revocation
 * and rotation strategies.
 *
 * @param props.connection
 * @param props.body Refresh request containing a valid refresh token to obtain
 *   a new access token.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @accessor api.functional.auth.user.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh request containing a valid refresh token to obtain a new
     * access token.
     */
    body: ITodoAppUser.IRefresh;
  };
  export type Body = ITodoAppUser.IRefresh;
  export type Response = ITodoAppUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): ITodoAppUser.IAuthorized =>
    typia.random<ITodoAppUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
