import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAuditRecord } from "../../../../structures/ITodoAppAuditRecord";
import { IPageITodoAppAuditRecord } from "../../../../structures/IPageITodoAppAuditRecord";

/**
 * Search and retrieve a paginated list of audit records
 * (todo_app_audit_records).
 *
 * Retrieve a filtered, paginated list of audit records from the
 * todo_app_audit_records table.
 *
 * Purpose and overview: Enables administrative interfaces to search audit
 * events (suspend_user, restore_todo, purge, view_snapshot, etc.). Each record
 * contains admin_id (nullable for system actions), user_id (nullable),
 * actor_role, action_type, target_resource, target_id, reason, and created_at.
 * Returned results MUST only include fields present in the audit model or
 * explicitly allowed metadata; do not project authentication secrets from
 * related user/admin tables.
 *
 * Security and permissions: Access is restricted to admin role. Implementations
 * MUST validate requestor's admin privileges and enforce rate limits and page
 * size caps. All admin access to audit data for support should itself be
 * recorded as an audit event when appropriate.
 *
 * Relationship to database entities: Maps directly to `todo_app_audit_records`.
 * Suggested filters in requestBody must reference the model fields only.
 *
 * Validation and business logic: Request body supports paging (page, pageSize),
 * sorting (created_at asc/desc), and optional filters. Server must validate
 * pagination and impose a maximum pageSize to prevent heavy queries. Use
 * available indexes (created_at, admin_id, user_id, target_resource/target_id)
 * to implement efficient queries.
 *
 * @param props.connection
 * @param props.body Search criteria, pagination, and sorting options for audit
 *   record retrieval
 * @path /todoApp/admin/auditRecords
 * @accessor api.functional.todoApp.admin.auditRecords.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, pagination, and sorting options for audit record
     * retrieval
     */
    body: ITodoAppAuditRecord.IRequest;
  };
  export type Body = ITodoAppAuditRecord.IRequest;
  export type Response = IPageITodoAppAuditRecord;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/admin/auditRecords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/admin/auditRecords";
  export const random = (): IPageITodoAppAuditRecord =>
    typia.random<IPageITodoAppAuditRecord>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single audit record (todo_app_audit_records) by ID.
 *
 * Retrieve a single audit record by its unique identifier from the audit record
 * store.
 *
 * This operation returns the audit entry that corresponds to the Prisma model
 * `todo_app_audit_records`. The model stores append-only records including
 * admin_id (nullable), user_id (nullable), actor_role, action_type,
 * target_resource, optional target_id, optional reason, and created_at. The
 * operation MUST return these fields exactly as stored and MUST NOT expose
 * sensitive fields from related admin/user records (for example,
 * password_hash).
 *
 * Security and permissions: This endpoint is restricted to administrative
 * actors. Server-side enforcement of the admin role is mandatory. Access to
 * this endpoint should itself be logged in operational access logs for
 * traceability. The endpoint is read-only and must not modify audit records.
 *
 * Behavior and errors: If the requested id does not exist, return 404 Not
 * Found. On success return the audit record. Server errors return 500 with an
 * error body.
 *
 * @param props.connection
 * @param props.auditRecordId Unique identifier (UUID) of the target audit
 *   record
 * @path /todoApp/admin/auditRecords/:auditRecordId
 * @accessor api.functional.todoApp.admin.auditRecords.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target audit record */
    auditRecordId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppAuditRecord;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/admin/auditRecords/:auditRecordId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/admin/auditRecords/${encodeURIComponent(props.auditRecordId ?? "null")}`;
  export const random = (): ITodoAppAuditRecord =>
    typia.random<ITodoAppAuditRecord>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditRecordId")(() => typia.assert(props.auditRecordId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
