import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoSnapshot } from "../../../../../structures/ITodoAppTodoSnapshot";

/**
 * Admin retrieve a specific todo snapshot (version) from
 * todo_app_todo_snapshots.
 *
 * Retrieve a specific todo snapshot (version) from the todo_app_todo_snapshots
 * table for administrative/support use.
 *
 * Purpose and overview: Returns the snapshot recorded for a todo at a prior
 * time. This admin endpoint supports troubleshooting and audit investigations.
 *
 * Security and permissions: Access restricted to admin role. Implementations
 * MUST authenticate the admin, authorize the request, and create an audit
 * record documenting the access (admin id, action_type 'view_snapshot',
 * target_resource 'todo_snapshot', target_id). The response MUST NOT include
 * any authentication secrets or other sensitive fields from related models.
 *
 * Relationship to database entities: Maps directly to
 * `todo_app_todo_snapshots`. The path parameter `todoId` corresponds to
 * snapshot.todo_app_todo_id; `versionId` corresponds to snapshot.id.
 *
 * Validation and error handling: Both path parameters MUST be valid UUIDs. If
 * the snapshot is not found or the todoId does not match, return 404.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the parent todo (references
 *   todo_app_todos.id).
 * @param props.versionId Unique identifier of the snapshot record
 *   (todo_app_todo_snapshots.id).
 * @path /todoApp/admin/todos/:todoId/versions/:versionId
 * @accessor api.functional.todoApp.admin.todos.versions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent todo (references todo_app_todos.id). */
    todoId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the snapshot record
     * (todo_app_todo_snapshots.id).
     */
    versionId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppTodoSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/admin/todos/:todoId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/admin/todos/${encodeURIComponent(props.todoId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): ITodoAppTodoSnapshot =>
    typia.random<ITodoAppTodoSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
