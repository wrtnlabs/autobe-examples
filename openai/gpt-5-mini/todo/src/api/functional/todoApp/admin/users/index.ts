import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppUser } from "../../../../structures/ITodoAppUser";
import { IPageITodoAppUser } from "../../../../structures/IPageITodoAppUser";

/**
 * Search and retrieve a paginated list of user accounts (admin).
 *
 * Provides a paginated, filterable list of users from the todo_app_user model.
 * Intended for administrative use to find users by email substring,
 * account_status, or creation timeframe. Supports pagination and sorting to
 * enable efficient UI listing.
 *
 * Security and permissions: This endpoint MUST be restricted to administrative
 * roles. The response MUST NOT include sensitive fields such as password_hash.
 * All accesses SHOULD be recorded in todo_app_audit_records with admin
 * identifier and the used filter parameters (avoid storing full PII in logs
 * unless necessary).
 *
 * Validation and errors: Validate pagination parameters (page >= 1, pageSize
 * reasonable bounds), validate account_status values against the canonical list
 * (e.g., 'active','suspended'), and validate emailLike length. Return 400 for
 * malformed requests, 401/403 for unauthorized access, and 500 for server
 * errors.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   users
 * @path /todoApp/admin/users
 * @accessor api.functional.todoApp.admin.users.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering users */
    body: ITodoAppUser.IRequest;
  };
  export type Body = ITodoAppUser.IRequest;
  export type Response = IPageITodoAppUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/admin/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/admin/users";
  export const random = (): IPageITodoAppUser.ISummary =>
    typia.random<IPageITodoAppUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin: retrieve a user account by ID (todo_app_user).
 *
 * Purpose and overview:
 *
 * Allow administrators to retrieve a user's profile for support and
 * maintenance. Returns the same safe profile fields as the user-facing
 * endpoint: `id`, `email`, `display_name`, `account_status`, `created_at`,
 * `updated_at`, and `last_active_at`. Do NOT include `password_hash` or other
 * secrets.
 *
 * Security and permissions:
 *
 * - Access policy: Only callers with admin privileges may call this endpoint.
 *   Each admin access MUST create an audit record in `todo_app_audit_records`
 *   with `actor_role='admin'`, `action_type='read_user'`, and include
 *   `admin_id` and `user_id`.
 * - Validation: `userId` must be a UUID. Return 400 for malformed, 404 if not
 *   found, 403 if the caller lacks admin privileges.
 *
 * Error handling: same as user-facing GET but ensure audit creation on success
 * and on unauthorized attempts where applicable.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user (UUID).
 * @path /todoApp/admin/users/:userId
 * @accessor api.functional.todoApp.admin.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user (UUID). */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppUser;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoAppUser => typia.random<ITodoAppUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin: update a user account (todo_app_user).
 *
 * Purpose and overview:
 *
 * Allow administrators to perform sanctioned updates to user accounts such as
 * changing `account_status`. Admin updates must be auditable and follow
 * validation rules. Do NOT accept `password_hash` in the request body.
 *
 * Security and permissions:
 *
 * - Access policy: Admin-only. Each successful admin update MUST create an audit
 *   record in `todo_app_audit_records` containing `admin_id`, `user_id`,
 *   `action_type='update_user'`, `reason` (optional), and `created_at`.
 * - Validation: `userId` must be a UUID. `account_status` must be validated
 *   against allowed values (e.g., 'active','suspended') and rejected if
 *   invalid.
 *
 * Schema mapping and writable fields:
 *
 * - Admin-writable: `account_status` (validated), optionally `display_name` for
 *   admin corrections.
 * - Disallowed: `password_hash`, `id`, `created_at` (server-managed).
 *
 * Responses and errors: standard 200/400/403/404 semantics apply.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user (UUID).
 * @param props.body Admin-updatable user fields. Must not include
 *   `password_hash`. Typical allowed properties: `account_status` (e.g.,
 *   'active','suspended'), `display_name` (optional).
 * @path /todoApp/admin/users/:userId
 * @accessor api.functional.todoApp.admin.users.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target user (UUID). */
    userId: string & tags.Format<"uuid">;

    /**
     * Admin-updatable user fields. Must not include `password_hash`.
     * Typical allowed properties: `account_status` (e.g.,
     * 'active','suspended'), `display_name` (optional).
     */
    body: ITodoAppUser.IUpdate;
  };
  export type Body = ITodoAppUser.IUpdate;
  export type Response = ITodoAppUser;

  export const METADATA = {
    method: "PUT",
    path: "/todoApp/admin/users/:userId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoAppUser => typia.random<ITodoAppUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
